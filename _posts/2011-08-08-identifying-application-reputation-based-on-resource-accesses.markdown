---
title: Identifying application reputation based on resource accesses
abstract: Malware detection is often based on monitoring a local application binary and/or process, such as detecting patterns of malicious code, unusual local resource utilization, or suspicious application behavior. However, the volume of available software, variety of malware, and sophistication of evasion techniques may reduce the effectiveness of detection based on monitoring local resources. Presented herein are techniques for identifying malware based on the reputations of remote resources (e.g., web content, files, databases, IP addresses, services, and users) accessed by an application. Remote resource accesses may be reported to a reputation service, which may identify reputations of remote resources, and application reputations of applications that utilize such remote resources. These application reputations may be used to adjust the application policies of the applications executed by devices and servers. These techniques thereby achieve rapid detection and mitigation of newly identified malware through application telemetry in a predominantly automated manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09065826&OS=09065826&RS=09065826
owner: Microsoft Technology Licensing, LLC
number: 09065826
owner_city: Redmond
owner_country: US
publication_date: 20110808
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Within the field of computing, many scenarios involve an execution of an application in various contexts (e.g., an application natively executing on a device, or managed by a runtime; an application executing within a virtual environment of the device, such as within a web browser; and an application executing remotely on a server and communicating with the user through a user interface rendered on a device). A particular context that is an area of contemporary focus is locally executing web applications, e.g., applications coded as web content (e.g., JavaScript and HTML 5) that may be executed without the encapsulating user interface of a web browser, thus resembling a native application but executing within the virtual environment of a web browser.","However, such software includes malware, comprising applications that perform activities that are undesirable to the user, such as corrupting the computing environment by deleting files; sending personal information of the user (e.g., authentication credentials and financial information) to another party; enable control of the device by another party, e.g., as part of a botnet; and\/or spreading to other devices operated by the user or other users. Many techniques may be utilized to identify and mitigate the acquisition, distribution, and effects of malware. As a first example, application binaries may be scanned for identifiers of malware (e.g., resources or segments of code that often appear within a particular type of malware) prior to executing the application binary. However, many forms of malware avoid detection in this manner by encrypting such resources or segments of code; rendering code in a polymorphic manner that may take many forms but may achieve the same result; or hiding malicious executable code in non-code resources that are not scanned by malware detectors (e.g., hiding code within an image bitmap). As a second example, the device may monitor the utilization of local resources by respective processes; e.g., a process that is utilizing a large amount of memory or bandwidth may be identified for further evaluation by the device or by malware analysts. However, such monitoring may not be highly diagnostic; e.g., many legitimate processes may use large amounts of memory and\/or bandwidth, while some processes comprising malware may maintain a low profile by using only modest amounts of memory or bandwidth. As a third example, the device may detect particular behaviors of respective processes that are often exhibited by malware; e.g., the device may detect an attempt to redirect keyboard input in a covert manner, to install other applications without the consent of the user, or to execute code in a non-code resource. However, some forms of malware may achieve malicious results through behaviors that appear to be legitimate.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","While contemporary efforts to identify malware often focus on the nature and characteristics of the application binary and\/or executing processes, it may be difficult to achieve comprehensive protection in this manner, due to the wide variety of techniques that may avoid such detection. For example, an application may exhibit entirely legitimate behavior until a particular triggering event, and may then exhibit new behavior that achieves a malicious result (e.g., botnet malware that infects a particular device may remain dormant and undetectable until receiving a remote command from a botnet controller). In the particular context of locally executing web applications, a web application may execute in an ordinary manner, but may request and\/or receive malicious web content that may alter the behavior of the web application, and\/or may spontaneously transmit information to another party without the involvement of the user (e.g., phishing malware may remain dormant until detecting user credentials for a banking website, and may then transmit the credentials to another party). Thus, changes in application behavior may be achieved in many simple ways, and comprehensive detection may involve prohibitively resource-intensive techniques (e.g., continuously scanning the code of an executing process for changes that may resemble malware). Moreover, the increasing volume of available software, the increasing variety in types of malware, and the increasing sophistication of evasion techniques may outpace the rate at which human malware analysts may characterize and mitigate the effects of newly identified malware.","Presented herein are alternative techniques for detecting malware that relate to monitoring the interaction of an application with remote resources. As a first example, a computer executing an application (e.g., a client device, or a server executing the application on behalf of another device and\/or user) may monitor the types of remote resources that are requested, received, and\/or utilized by the application. As a second example, an application may endeavor to communicate with one or more remote sources, such as particular servers, services, or addresses. In such scenarios, a reputation may be identified for remote resources (e.g., for particular files, databases, devices, servers, services, users, or network addresses) that may be accessed by an application, and an application reputation of an application may be identified based on the resource reputations of remote resources utilized by the application (particularly where such resources are accessed in the absence of a request from the user).","These techniques may be illustrated in the following exemplary scenario. A device may be configured to monitor the remote resources that are accessed by an application (e.g., URLs of web-accessible objects, and network requests involving particular addresses, ports, protocols, or services), particularly if such accesses are initiated spontaneously by the application without prompting by a user. For respective applications, the device may report the remote resources accessed by the application to a reputation service. Based on the collected information, the reputation service may identify a resource reputation for respective remote resources (e.g., a remote resource that is often accessed by applications that subsequently exhibit malicious behavior); and, for respective applications, the reputation service may identify an application reputation based on the resource reputations of the remote resources utilized by the application. This information may be utilized to identify maliciously executing applications. For example, the reputation service may distribute the application resources (and optionally the resource reputations) to one or more devices, which may refer to this information while determining whether and how to execute a particular application (e.g., choosing an application policy for the application, such as an unrestricted application policy for reputable applications and a limited application policy for questionable applications, while blocking execution of applications having poor reputations). Alternatively or additionally, the devices may monitor the remote resources accessed by respective applications, and may adjust the application policy of the application based on the resource reputations of the remote resources accessed by the application. A server (including a server associated with the reputation service) may also utilize this information to mitigate the effects of malware; e.g., an application server that is configured to provide and\/or execute applications on behalf of devices may restrict or remove applications that are identified as having poor application reputations, and\/or that access remote resources with poor resource reputations. Such techniques may be automated to achieve a more comprehensive and rapid identification of malware and response thereto than may be achievable through malware mitigation techniques that heavily involve human malware analysts.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.","A. Introduction","Within the field of computing, many scenarios involve the execution of an application by a processor of a device, such as a server, a workstation, a notebook, a game console, a smartphone, a tablet, or a personal information manager. Applications may also be executed within many contexts, such as a natively executing application comprising wholly or partially instructions executing on the processor; an application serviced by a runtime; and an application executing within a virtual environment, such as a web browser, an emulated machine, or a sandbox. The execution of an application may also involve a second device; e.g., the executable binaries for an application may be provided to the device by a server (such as an application store), or a remote server may execute the application on behalf of a device and present to the device a user interface of the application that may be rendered for a user (e.g., cloud-based applications). One particularly prevalent example involves locally executing web applications, which may be designed using web application technologies (e.g., JavaScript and HTML ) and that may executed within a web browser, but that may also be executed without the user interface elements typically included in a web browser, such as an address bar and navigation controls. Such applications may fully resemble natively executing applications, but may nevertheless utilize the web application platform, and may therefore leverage several of the advantages of the web programming model (e.g., platform-independence and application isolation).","However, many types of applications may include one or more forms of malware that perform activities that are undesirable to the user. Such malware may take many forms, and may infiltrate a device of a user in many ways. As a first example, an application that is engineered to perform malicious activities may be delivered to the user under false pretenses (e.g., a fake application that purports to perform a useful activity, but that alternatively or additionally performs a malicious activity). As a second example, an application may be covertly delivered to the user (e.g., a remote user or process may exploit a security vulnerability to gain unauthorized access to the file system of a user's device, and may install and\/or invoke the application on the device). As a third example, a portion of malicious code may be inserted in a legitimate application that, when executed on a device, attempts to achieve insertion in other legitimate applications or devices. As a fourth example, a user may expressly or implicitly consent to receive an application that performs undesirable activities, such as presenting unsolicited advertisements to the user. Moreover, malware may attempt to evade detection and\/or removal; e.g., some forms of malware are deployed to a device as a set of components that each monitors the continued availability of the other components, and that rapidly redeploys a removed component.","Adware may also perform many types of undesirable activities.  presents an exemplary scenario  featuring a user  of a device  having a display  that is configured to execute a set of applications , some of which may comprise various forms of malware  that perform various activities that are undesirable to the user . As a first example, the device  may include a first application  that is legitimate, and a second application  that has been transformed into malware  by a virus. The virus be may embodied, e.g., as a code segment inserted into the legitimate code of the second application ; an executable macro inserted into a document; or as a plug-in or add-on that runs within an extensibility feature of the second application . When the user  executes the second application , the virus may attempt to infect the first application  in order to broaden the deployment of the virus . As a second example, a fourth application  may include a \u201cphishing\u201d type of malware  that attempts to access sensitive information on the device  and transmit this information to another party . For example, the malware  within the fourth application  may trap and monitor keyboard input to other applications , and when the user  transmits a password  to the third application , the malware  may intercept the password  and covertly send it to the other party . As a third example, a fifth application  may enroll the device  in a botnet that may be controlled by commands  received from a botnet controller . For example, the fifth application  may remain dormant, or may perform a desirable service for the user , while remaining receptive to commands  received from the botnet controller , who may instruct the device  to perform various undesirable activities, such as sending bulk unsolicited email messages  (\u201cspam\u201d) to a set of targets , or participating in a distributed denial-of-service attack by sending unproductive traffic to a particular target . As a fourth example, a sixth application  may include malware  in the form of adware, which may present unsolicited advertisements  on the display  atop the user interfaces  of other applications . These and other behaviors may be exhibited by malware  that may be deployed to the device  of the user .","Many techniques have been devised to detect, characterize, and mitigate the effects of malware . Security vendors often utilize teams of malware analysts who receive reports of suspected malware , perform tests to identify and evaluate the characteristics and behaviors of the malware , and devise techniques to detect, mitigate, and remove the malware  from infected devices . Such techniques are often packaged as a security application that may be deployed to devices  to provide defense against various forms of malware , and updates to the security application may provide new detection and protection techniques for newly identified forms of malware . Automated techniques may also be utilized that may obstruct many types of malware; e.g., network routers often utilize features such as firewalls that restrict forms of communication that are frequently used by malware, and network address translation (NAT) that inhibits unsolicited contact with a device on the network.","Many techniques for detecting and characterizing malware  involve an evaluation of an analysis of the applications  installed and\/or executing on the device  to identify signs of malware . As a first example, many malware evaluation techniques involve an evaluation of the resources comprising respective applications , such as an inspection of the code comprising executable binaries. For example, a malware analyst may identify a particular pattern of instructions that identify a particular type of malware , and any application  that presents this pattern of instructions may be identified as potentially including malware . The malware analysts may then package representations of the patterns of instructions (e.g., hashes for portions of code comprising malware ) to one or more devices , which may examine the code comprising respective applications  to detect malware . This examination may be applied upon first receiving a deployment of the application , upon receiving a request to execute the application , and\/or during the execution of the application . As a second example, many malware evaluation techniques involve an assessment of the utilization of respective applications  of the local resources of the device . For example, an application  that consumes a significant amount of bandwidth may be tentatively identified as malware  involved in a botnet (e.g., sending bulk unsolicited email messages or sending unproductive traffic to a target of a denial-of-service attack). As a third example, many malware evaluation techniques involve a monitoring of the local behaviors of respective applications  to detect behaviors that are characteristic of various forms of malware . For example, phishing malware  often endeavors to intercept input provided by the user  to other applications; virus malware  often involves an attempt by a first application  to alter the code of a second application ; and many types of malware  involve a covert utilization of computing resources (e.g., a data transmission that is hidden from the user ), a covert deployment of resources (e.g., installing other applications  without notification or consent from the user ), and\/or techniques to resist removal as requested by the user . Security software may therefore be configured to detect such suspicious code patterns, resource utilization, and\/or behaviors by applications , to identify such applications  as potential malware , and to report these findings  to the user  or the security vendor and\/or mitigate the effects thereof, such as by restricting or removing such malware .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 2"],"b":["40","20","18","40","14","42","44","46","18","14","40","52","20","18","52","48","18","20","52","54","48","54","56","48","20","48","14","18","18","50","42","52","50","52","58","50","56","44","44","44","18","52","50","18","20","52","50","58","20","50","56","50","50","12","50","52","50","18","20","52","40","18","50","20"]},"B. Limitations of Malware Detection Techniques Based on Evaluation of Local Components and Activities","While many techniques have been devised to identify and mitigate malware  based on the assessment of local components and local activities, such techniques may present various limitations that impair the detection and mitigation of malware . As a first example, code scanning techniques may be computationally intensive, due to the potential volume of data to be scanned and the number of code patterns that may be detectable. Moreover, malware designers have devised many techniques for avoiding the detection of code patterns, such as polymorphic code that may be altered for each deployment of malware  without altering the functionality achieved by the code; self-altering code that may initially appear to be legitimate, but that may be altered during execution to achieve instructions comprising malware  (e.g., storing malware code in an encrypted manner and decrypting it during execution); the insertion of malicious code for execution by other processes , such as by exploiting a buffer overflow; and steganography, whereby malware code may be hidden within resources that ordinarily do not contain executable code, such as an image bitmap. Such techniques may also be detectable through highly sophisticated heuristics, but may result in a resource-intensive scanning process that imposes an unacceptable performance reduction of the computing environment, and\/or that results in a significant number of false positives (e.g., legitimate applications  identified as malware  due to coincidental resemblances).","As a second example, techniques based on the detection of malware  based on resource utilization, such as the consumption of memory, storage, processor capacity, or network bandwidth, may not be of significant diagnostic value. For example, while some forms of malware  may consume large amounts of resources, such as a botnet that consumes the upload capacity of a device  to maximize the delivery of spam or the transmission of unproductive data in a denial-of-service attack, other forms of malware  may consume comparatively few resources; e.g., phishing software may achieve the unauthorized disclosure of sensitive information to another party  while consuming very few resources. Additionally, the types of malware  that involve the consumption of significant computing resources may reduce such consumption in order to avoid detection. For example, a botnet that configures each device  to send only modest amounts of unproductive traffic to a target of a distributed-denial-of-service attack, and may achieve an overwhelmingly effective attack from a sizable botnet (e.g., a million devices ), and in a highly sustainable manner due to the difficulty of identifying the devices  comprising the botnet. Conversely, many legitimate applications may consume large amounts of resources (e.g., a video streaming application may exhaust the bandwidth and processor capacity of a device  in order to receive, decompress, and display high-definition video), and it may be difficult to distinguish legitimate activity form malicious activity according to the profile of consumed computing resources. Thus, malware detection techniques involving an evaluation of the resource utilization of the computing environment of the device  may have difficulty achieving accurate diagnostic results.","As a third example, malware detection based on the evaluation of local behaviors of processes  may be difficult to apply due to the large variety of such behaviors that may be utilized by malware . For example, a less sophisticated type of phishing malware  may utilize a well-known technique to attempt to intercept communication between a user  and a process , and this behavior may be easily detected and characterized by a malware scanner . However, a more sophisticated type of phishing malware  may only activate in particular conditions, such as when executed by a user  or device  of an entity targeted by the malware designer; may utilize an unknown or even unique interception technique; and may do so in a primarily legitimate manner, with an interception side-effect under particular conditions that may appear to be unintended or coincidental. This type of phishing malware  may only be identified as such after extensive evaluation by researchers, and in the interim may relay a large amount of sensitive data to another party . Moreover, as with code profiling, the detection sensitivity of such techniques may be improved through more stringent monitoring (e.g., automated scrutiny of each instruction of a process ), but such monitoring may prohibitively reduce the performance of the computing environment.","Thus, it may be appreciated that malware scanning techniques that rely upon an evaluation of the local components and activities of applications  to detect and mitigate malware  may be difficult to achieve in a performant manner, due to the increasing variety and sophistication of malware  designed to execute on a rapidly expanding set of devices . Moreover, the complexity of this task is exacerbated by the variety of execution contexts within which such applications may execute. In particular, web applications (executing either within the user interface of a web browser or as locally executing web applications) may request and receive web content from a variety of sources, and such content may include various forms of executable code, such as third-party applications executing within the web application and JavaScript embedded in third-party advertisements rendered within the web application. In addition to the challenges posed with the detection of malware  in a static and unchanging application , this type of application presents a large range of behavioral fluidity within the computing environment of the device , and the local code, local resource utilization, and local behaviors of the application  may change at any moment upon receiving new web content. Determining the malware status of such an application  through techniques involving an evaluation of locally stored components and local activities may involve constant monitoring, which may unacceptably reduce the performance in the execution of the application  by the device . Such examples highlight the difficulty of identifying malware  through the evaluation of locally stored components and local activities.","C. Presented Techniques","Presented herein are alternative techniques for detecting and mitigating malware  among the applications  and processes  executing within the computing environment of a device . It may be observed that, in addition to locally stored components (e.g., instruction sets) and activities (e.g., resource utilization and behaviors), malware  often involves an accessing of a remote resource. As a first example, a virus or worm is often deployed to a device  from a particular remote resource, such as a request to retrieve the latest version of the virus or worm from a malware source. As a second example, in addition to retrieving sensitive information, phishing malware is configured to send the sensitive information to a particular remote resource, such as a particular user, device, or IP address. As a third example, a botnet often involves the retrieval of particular types of remote resources (e.g., a rootkit), and\/or communication with a particular remote resource (e.g., the receipt of commands  from a botnet controller ). As a fourth example, adware often involves the receipt of advertising content from a remote resource, such as an advertisement database. Thus, it may be observed that many types of malware  may involve, and may be detected by, resource accesses of particular remote resources.","In view of these observations, the present disclosure involves the detection of malware  according to resources accesses of remote resources. Moreover, such detection may be achieved through a cooperative arrangement of the devices  executing the application . For example, devices  may be configured to, for a particular application , monitor the resource accesses of remote resources that are accessed by the application . Such remote accesses may be reported by the devices  to a reputation service, which may evaluate the remote resources to identify a resource reputation. For example, if the reputation service detects that a particular application  frequently accesses a particular remote application, or that many devices  and\/or applications  are suddenly accessing a particular remote resource, the reputation service may automatically initiate an evaluation of the remote resource. Using a variety of heuristic techniques, the reputation service may automatically identify a resource reputation for the remote resource, indicating whether or not applications that access the remote resource may be identified as malware. Additionally, based on the identified resource reputations, the reputation service may identify an application reputation for respective applications . The application reputation may be used by the reputation service (e.g., to remove malware  from an application store associated with the reputation service), and\/or may be distributed to one or more devices  for use in detecting and mitigating malware  (e.g., by determining whether and how to execute a particular application  according to the application reputation of the application  that has been reported by the reputation service).",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIGS. 3-4","FIG. 3"],"b":["18","60","14","16","62","18","18","62","14","18","18","18","20","18","14","14","12","20","20","14","70","14","66","16","62","66","62","18","62","62","14","12","12","66","18","14","18","62","14","62","62","14","66","14","14","12","14"]},"As further illustrated in the exemplary scenario  of , the devices  may be configured to detect such resource accesses  for respective applications , and to provide resource access reports  to the reputation service . Such reports of resource accesses  may indicate, e.g., the application  and various details thereof, such as the application configuration and application state; and\/or the remote resource  and various details thereof, such as the IP address, the URL of an accessed resource, identifying information returned by a server or user, and information sent by the application  while initiating or participating in the resource access . The reputation service  may receive the resource access reports  from the devices  and may evaluate the remote resources  indicated thereby to identify a resource reputation  indicating the probability and extent that the remote resource  is involved in malware, and the severity of the threat posed thereby (e.g., a remote resource  associated with a phishing scenario may pose a more serious threat than a remote resource  associated with an adware vendor). In this exemplary scenario , the reputation service  may select a good resource reputation  for a first remote resource  (comprising a file store offering legitimate files) and a third remote resource  (comprising an access of a file representing a video codec); an \u201cOK\u201d (i.e., questionable or marginally suspicious) resource reputation  for a fourth remote resource  (comprising an encryption utility that is utilized for legitimate tasks, but that is also frequently utilized by malware ); and a bad resource reputation  for a second remote resource  (comprising a file store providing malware ) and a fifth remote resource (comprising a rootkit package that is often covertly installed to enroll a device  in a botnet).",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4","FIG. 3"],"b":["80","72","60","80","70","68","14","82","84","18","72","62","18","70","18","62","72","84","18","70","66","18","62","72","84","18","62","72","62","72","70","84"]},"The reputation service  may also use the application reputation set  in various ways. As further illustrated in the exemplary scenario  of , the reputation service  may send the application reputation set  to the devices , which may use the application reputations  to adjust the execution of the applications . For example, a device  that receives a request to execute the first application  may consult the application reputation set , may determine that the first application  has been assigned a good application reputation , and may execute the first application  in a trusted and highly performant manner. However, a device  that receives a request to execute the fourth application  may, in accordance with the \u201cOK\u201d application reputation  of the fourth application  in the application reputation set , initiate an isolated execution of the fourth application , e.g., by restricting the process  generated by the fourth application  from accessing other processes , the storage  of the device , or the network . Moreover, applications  having a poor application reputation  in the application reputation set  (e.g., the third application  and the fifth application ) may be blocked from execution on the devices , or may be executed only with the informed consent of a user  or administrator of the device . In particular, the devices  may be configured to execute respective applications  according to an application policy selected in view of the application reputation  of the application . The reputation service  may also use the application reputations  and\/or resource reputations  in other ways; e.g., the reputation service  may also utilize the reputations to adjust the execution of applications  (e.g., applications  executed on behalf of the devices ), and\/or may instruct an application server or application store to remove an application  identified as malware . Thus, the reputation service  may facilitate the detection and mitigation of malware  based on the resource reputations  of the remote resources  involved in one or more resource accesses by respective applications .","In the context of malware detection and mitigation, the presented techniques may be capable of achieving several advantages, particularly with respect to alternative techniques involving an evaluation of the local resources (e.g., scanning in execution binaries  of applications  to identify patterns of instructions that are indicative of malware ) and\/or local activities (e.g., local resource utilization and\/or locally performed behaviors of respective applications ). As a first potential advantage, detecting accesses of remote resources  may represent a comparatively simple task that may be difficult for malware  to obscure, particularly in comparison with detecting other hallmarks of malware , such as patterns of instructions (which may be polymorphic, self-altering, and\/or hidden in various locations) and detecting behaviors that are frequently performed by malware  (which may be performed by the malware  in a large variety of platform-dependent ways). Such detection and reporting may therefore be performed at a higher level of detail (e.g., continuously) and\/or with significantly lower expenditure of computational resources than some of the other techniques discussed herein.","As a second potential advantage, it may be easier to generalize application reputations  and\/or resource reputations  of remote resources  than to generalize other indicators of malware, such as patterns of instructions or behaviors. For example, in addition to assigning a poor application reputation  to an application  that accesses a remote resource  having a poor resource reputation  while executing on a device, an embodiment may also assign a poor application reputation  to other versions of the application  (e.g., older versions, newer versions, or versions for other devices ); to other or all applications  from the same author or source; and to other or all applications  that also access the same remote resource . Conversely, when an application  is identified as malware  based on an access of a remote resource , an embodiment of these techniques may similarly identify a poor resource reputation  for other remote resources  from the same author or source (e.g., a file service that is identified as storing a deployable rootkit may also be presumed to store other forms of malware ) and for other instances of the remote resource  provided through other sources. By contrast, it may be difficult to generalize a pattern of instructions in an executable binary  is identified as malware  to similar sets of instructions, which may only coincidentally resemble the malware , or to generalize a behavior that is frequently performed by malware  to a class of behaviors, many of which may be legitimate (e.g., it may not be helpful to generalize a exploitation by malware  of a vulnerability of an application programming interface to any invocation of the application programming interface).","As a third potential advantage, the presently disclosed techniques may be more amenable to automated application than the other techniques discussed herein. For example, the exemplary scenario presented in  involves the tasks of detecting resource accesses  of remote resources  and reporting the resource accesses  to a reputation service ; the receipt of the resource accesses , evaluation of remote resources , identification of resource reputations , identification of application reputations , and delivery of the application reputation set  to devices ; and the use by the devices  of the application reputation set  to adjust the execution of applications . It may be appreciated that all of these tasks may be automatically performed without the involvement of a malware analyst, and that such automation may enable a rapid but sophisticated and comprehensive response to new malware . For example, when a device  detects that an application  has accessed a remote resource  that comprises known malware , the reputation service  may be promptly notified, may automatically update the application reputation  of the application , and may notify other devices , potentially containing the effects of malware  to a small set of devices  (perhaps even restricting the malware  to a single device ). By contrast, the other techniques discussed herein involve an extensive study and characterization of malware ; an identification of patterns of instructions in malware ; and an identification, characterization, and detection of subtle and often obfuscated behaviors that are indicative of malware . Such analyses often involve the expertise (and expense) of human malware analysts, and may result in a considerable delay in deploying a response to the malware , during which the malware  may execute unchecked on many devices . These and other advantages may be achievable through the application of the techniques presented herein.","D. Exemplary Embodiments",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["90","18","14","42","90","14","42","42","90","92","94","42","14","18","96","66","62","18","98","66","62","70","70","82","84","18","100","82","102","18","104","84","18","104","18","90","18","84","72","62","18","90","106"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6","b":["110","42","84","18","14","18","14","18","14","14","70","14","18","84","110","42","42","110","112","114","42","14","66","62","18","14","116","66","62","66","118","72","18","120","84","18","66","62","18","84","18","110","122"]},"Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to apply the techniques presented herein. Such computer-readable media may include, e.g., computer-readable storage media involving a tangible device, such as a memory semiconductor (e.g., a semiconductor utilizing static random access memory (SRAM), dynamic random access memory (DRAM), and\/or synchronous dynamic random access memory (SDRAM) technologies), a platter of a hard disk drive, a flash memory device, or a magnetic or optical disc (such as a CD-R, DVD-R, or floppy disc), encoding a set of computer-readable instructions that, when executed by a processor of a device, cause the device to implement the techniques presented herein. Such computer-readable media may also include (as a class of technologies that are distinct from computer-readable storage media) various types of communications media, such as a signal that may be propagated through various physical phenomena (e.g., an electromagnetic signal, a sound wave signal, or an optical signal) and in various wired scenarios (e.g., via an Ethernet or fiber optic cable) and\/or wireless scenarios (e.g., a wireless local area network (WLAN) such as WiFi, a personal area network (PAN) such as Bluetooth, or a cellular or radio network), and which encodes a set of computer-readable instructions that, when executed by a processor of a device, cause the device to implement the techniques presented herein.","An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  that, when executed on a processor  of a device , cause the device  to perform the techniques presented herein. In one such embodiment, the processor-executable instructions  may be configured to perform a method of executing applications on a device, such as the first exemplary method  of . In another such embodiment, the processor-executable instructions  may be configured to implement a method of identifying application reputations  of applications  that may be executed on behalf of a device , such as the second exemplary method  of . Some embodiments of this computer-readable medium may comprise a nontransitory computer-readable storage medium (e.g., a hard disk drive, an optical disc, or a flash memory device) that is configured to store processor-executable instructions configured in this manner. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","E. Variations","The techniques discussed herein may be devised with variations in many aspects, and some variations may present additional advantages and\/or reduce disadvantages with respect to other variations of these and other techniques. Moreover, some variations may be implemented in combination, and some combinations may feature additional advantages and\/or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments (e.g., the first exemplary method  of  and the second exemplary method  of ) to confer individual and\/or synergistic advantages upon such embodiments.","E1. First Aspect\u2014Scenarios","A first aspect that may vary among embodiments of these techniques involves the scenarios wherein such techniques may be utilized. As a first variation of this first aspect, the techniques may be utilized to identify malware  on many types of devices , including servers, workstations, media stations, notebook computers, tablet computers, palmtop computers, smartphones, game consoles, networking devices, portable media players, and personal information managers. As a second variation of this first aspect, the techniques may be utilized to monitor malware  represented as many types of applications  executing in various execution contexts, such as a natively executing application  (involving instructions specified in an instruction set that is supported by a processor, and executed directly on the processor); applications  managed by one or more runtimes (e.g., a device  may comprise a runtime configured to detect the resource accesses  of remote resources  by the applications , and to manage the execution of applications  on the processor  of the device  according to an application policy); applications  executing within a virtual environment (e.g., an emulated or virtualized machine, a virtualized application environment, or an isolation construct); applications  executing on a platform, such as within a web browser, or as a locally executing web application , such as an application designed using web technologies but executing on a device  without the encapsulating user interface of a web browser); and cloud applications  that are partly or wholly executed on a server on behalf of the device  and\/or user , which may provide a user interface of the application  to be rendered on the device  for the user . Such applications  may also be deployed to the device  in many ways. For example, an application  may be installed on a device  by a device vendor; retrieved from an outside source and deployed at the request of a user ; covertly installed on a device  by an outside party ; retrieved from a server operating as an application store, a mesh server, or a web application server.","As a third variation of this first aspect, these techniques may be utilized to detect, identify, and mitigate many types of malware , including viruses, worms, trojans, rootkits, phishing tools, and adware, and to mitigate many effects of such malware , including proliferation, device commandeering, enrollment of a device  in a botnet, the distribution of spam, phishing, device damage or destruction, and the displaying of advertisements to the user . As a fourth example of this first aspect, these techniques may be utilized by detecting resource accesses  of many types of resources , such as many types of files, databases, sets of web content, servers, services, remote devices, network addresses, users, organizations, and geographic areas. As a fifth variation of this first aspect, the reputation service  may have many types of relationships with the devices  and\/or users  thereof; e.g. the reputation service  may be provided on a device operated by a user  of the device(s); by a security vendor; by an enterprise (e.g., a corporation, nonprofit organization, university, or government) to reduce the impact of malware  on the devices  managed by the enterprise; or by a centralized agency. Those of ordinary skill in the art may devise many such scenarios wherein the techniques presented herein may be utilized.","E2. Second Aspect\u2014Variations of Exemplary Embodiments","A second aspect that may vary among embodiments relates to variations in the elements of these techniques, such as the elements of the exemplary embodiments illustrated in , , and . As a first variation of this second aspect, the detection of resource accesses  of respective remote resources  may be achieved in many ways. For example, an embodiment of these techniques may monitor requests to access a network adapter  of the device  (e.g., as part of a device driver of the network adapter ), and trace such requests to respective applications ; may monitor a network protocol or network application programming interface (API) through which the requests for resource accesses  of remote resources  may be initiated; or may directly monitor applications  and requests issued thereby, e.g., through a runtime configured the service the applications  and broker requests for resource accesses  of remote resources . Alternatively or additionally, this detection may be performed beyond the device , e.g., by network devices such as routers, domain administrating hardware, or an internet service provider (ISP) through which resource accesses  for remote resources  may flow.","As a second variation of this second aspect, the reporting of resource accesses  to the reputation service  may be performed in many ways. As a first such variation, a resource access report  sent by a device  to the reputation service  may include information about the device  (e.g., the identity, type, configuration, and state of the device ); information about one or more applications  and\/or processes  involved in a resource access  (e.g., the identity, type, configuration, state, resource utilization, and behavior of the application  and\/or process , before and\/or after the resource access ); information about the remote resources  involved in the resource access  (e.g., the identity, type, and network address of the remote resource , as well as any history of prior interaction between the application  or device  and the remote resource ); and the resource access  (e.g., whether the resource access  was initiated by the application  or the remote resource ; the data sent from the application  to the remote resource , and from the remote resource  to the application ; and whether or not the resource access  was permitted or blocked). Alternatively or additionally, the resource access report  may include all information about all resource accesses , and\/or may be filtered to include only information of interest, only information about applications , resource accesses , and\/or remote resources  of interest. For example, a user  may (intentionally or inadvertently) direct an application  to access a remote resource  having a poor resource reputation , but this resource access  is not diagnostic of a malicious behavior of the application . Rather, it may be desirable to filter the resource access report  to resource accesses  initiated by the applications  in the absence of a request from a user .","As a third variation of this second aspect, a device  may send a resource access report  at various time and\/or in response to various events (e.g., upon detecting an event selected from an event set, including a periodic event, such as an elapsed period; an application status change event, such as a transition of an application  from an idle state to an active state , or an application behavior change event, such as the detection of a new behavior of an application ; a system event, such as a reboot of the device ; or a resource access event (e.g., promptly after receiving a request to perform a resource access  and\/or detecting a resource access ). In the latter scenario, the device  may perform the resource access  on behalf of the application  while sending the resource access report  to the reputation service , and\/or may block the resource access  until the reputation service  has evaluated the resource access  and identified a resource reputation  of the remote resource  and\/or an application reputation  of the application .","As a fourth variation of this second aspect, the reputation service  may utilize a wide variety of techniques to evaluate a remote resource  in order to identify a resource reputation , such as whitelists and\/or blacklists generated by and\/or shared with other organizations, various evaluation techniques for files or web content, trust certificates that may be provided by the remote resources , and\/or behavioral profiling of the remote resource . In particular, it may be desirable to detect resource accesses  of remote resources  while the application  is executing in a controlled environment, and to perform a comparison of such resource accesses  with the resource accesses  reported by the devices  while the application  is executing thereupon. As a second such variation, the evaluation may be wholly or partially automated using various heuristics and machine learning algorithms, and\/or may be wholly or partially performed by human malware analysts. Various forms of collaboration among organizations may also be utilized in evaluating the nature of a remote resource  in order to identify the resource reputation . Those of ordinary skill in the art may devise many techniques for evaluating remote resources  to identify a resource reputation  therefor.","As a fifth variation of this second aspect, a reputation service  may utilize an application reputation set  identifying application reputations  for respective applications  in many ways. As a first example of this fifth variation, the reputation service  may enable a device  to choose a suitable application policy for executing an application  according to the application reputation  of the application . Such application policies may include, e.g., an unrestricted application policy specifying no restrictions of the application ; a warning application policy, specifying a warning to be presented to a user  about the application reputation  of the application ; a consent application policy specifying that a notification is to be presented to the user  regarding resource accesses  of the application  and including a consent option selectable by the user  (e.g., \u201cThis application is attempting to access a remote resource  with a poor resource reputation ; do you wish to allow this resource access ?\u201d), and a restriction against performing the resource access  unless the consent option is selected by the user ; a restricted application policy, specifying at least one restriction of at least one capability of the application  (e.g., a network bandwidth cap, or a restriction against accessing a network , or a restriction against interacting with any other application ); an isolation application policy specifying an isolated execution of the application  (e.g., an execution of the application  within a sandbox that completely isolates the application  within the computing environment of the device ); and a prohibited application policy specifying a prohibition of executing the application  (e.g., a refusal to execute an application  known to comprise malware ). Such application policies may be selected and utilized, e.g., by a server executing the application  on behalf of one or more devices , and\/or by a device  receiving the application reputations  from the reputation service  and upon which a request to execute an application  has been received. Moreover, it may be possible for such devices  to adjust the application policy of an application  based on an application reputation  received from the reputation service  while the application  is executing (e.g., warning a user  about an executing application , imposing access restrictions on an executing application , or entirely shutting down a process  of an application  upon receiving a poor application reputation  for the application ).","As a second example of this fifth variation, the reputation service  may utilize the application reputations  of respective applications  in other ways, e.g., to adjust the availability and delivery to devices  of applications  through an application store or application source (e.g., removing applications  from an application store for which a poor application reputation  is identified, or, upon receiving a request to deliver an application  to a device , selecting and delivering with an application  an application policy according to the application reputation  of the application ); to trace malware  back to malware designers and\/or malware sources; and to train automated machine learning algorithms for evaluating remote resources  to detect malware  with improved accuracy and sophistication. The reputation service  may also specify the application reputations  in various ways, e.g., identifying application reputations  for entire applications  and\/or for particular application components of an application  (e.g., identifying different application reputations  for different libraries or web content comprising the application , such that different application policies may be applied to different application components based on the application reputations  thereof). Those of ordinary skill in the art may devise many variations in the elements of the embodiments of the techniques presented herein.","E3. Third Aspect\u2014Additional Features","A third aspect that may vary among embodiments of these techniques relates to additional features that may be included in respective embodiments of these techniques. As a first variation of this third aspect, the techniques presented herein, involving the detection of malware  based on resource accesses  by respective applications  of remote resources  having identified resource reputations , may be may be used exclusively, or may be combined with one or more other types of techniques for detecting malware , such as the evaluation of code for patterns of instructions that resemble malware , the evaluation of local resource utilization, and the detection of local behaviors that may be characteristic of malware. Moreover, such analyses may be performed independently, or may be used in synergy to generate more sophisticated detection of malware . For example, in addition to detecting resource accesses  of remote resources  by an application, a device  may be configured to detect application behaviors of the application , and to report application behavior indicators of such application behaviors to the reputation service . Accordingly, the reputation service  may, while identifying an application reputation  of an application , utilize both the resource reputations  of resources  accessed by the application , and also application behavior indicators detected and reported by one or more devices  that indicate the application behaviors of the application . As one such example, an application  may be detected to both a spontaneous and covert resource access  of a remote resource  having a questionable resource reputation , and also a covert attempt to intercept user input provided by a user  to another application ; while each detection may alone indicate some questionable activity of the application , the combination of the resource access  and the application behavior together strongly suggest a phishing type of malware .","As a second variation of this third aspect, in addition to utilizing and\/or sending to devices  an application reputation set  comprising the application reputations  identified for respective applications , it may be also advantageous to utilize and\/or send to devices  the resource reputations  of the resources  accessed by the applications . As a second example, and as the converse of identifying application reputations  based on the resource reputations  of remote resources  accessed by an application , the reputation service  may identify resource reputations  of respective remote resources  based on the application reputations  of applications  accessing the remote resources . In one such embodiment, the establishment of resource reputations  and application reputations  may be achieved in an iterative and incremental manner (e.g., performing a small adjustment of the resource reputations  of remote resources  based on the application reputations  of applications  accessing the remote resources , and performing a small adjustment of the application reputations  of applications  based on the resource reputations  of resources  accessed by the applications ), thereby achieving a consensus-building of the respective reputations through gradual convergence. As a second example, in addition to identifying a particular application  as having a poor application reputation  indicating a strong probability that the application  includes malware , the reputation service  may report to the devices  and\/or or utilize a poor resource reputation  of the resources  utilized by the malware ; e.g., by blocking access by any application  to such resources . Those of ordinary skill in the art may devise many such additional features that may be included in embodiments of the techniques presented herein.","F. Computing Environment",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8","b":"142"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 8","FIG. 8"],"b":["140","142","142","146","148","148","144"]},"In some embodiments, device  may include additional features and\/or functionality. For example, device  may include one or more additional storage components , including, but not limited to, a hard disk drive, a solid-state storage device, and\/or other removable or non-removable magnetic or optical media. In one embodiment, computer-readable and processor-executable instructions implementing one or more embodiments provided herein are stored in the storage component . The storage component  may also store other data objects, such as components of an operating system, executable binaries comprising one or more applications, programming libraries (e.g., application programming interfaces (APIs), media objects, and documentation. The computer-readable instructions may be loaded in the memory component  for execution by the processor .","The computing device  may also include one or more communication components  that allow the computing device  to communicate with other devices. The one or more communication components  may comprise (e.g.) a modem, a Network Interface Card (NIC), a radiofrequency transmitter\/receiver, an infrared port, and a universal serial bus (USB) USB connection. Such communication components  may comprise a wired connection (connecting to a network through a physical cord, cable, or wire) or a wireless connection (communicating wirelessly with a networking device, such as through visible light, infrared, or one or more radiofrequencies.","The computing device  may include one or more input components , such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, or video input devices, and\/or one or more output components , such as one or more displays, speakers, and printers. The input components  and\/or output components  may be connected to the computing device  via a wired connection, a wireless connection, or any combination thereof. In one embodiment, an input component  or an output component  from another computing device may be used as input components  and\/or output components  for the computing device .","The components of the computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of the computing device  may be interconnected by a network. For example, the memory component  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via a network  may store computer readable instructions to implement one or more embodiments provided herein. The computing device  may access the computing device  and download a part or all of the computer readable instructions for execution. Alternatively, the computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at the computing device  and some at computing device .","G. Usage of Terms","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
