---
title: System and method for associating workload management definitions with computing containers
abstract: In one embodiment, a system comprises a plurality of computing containers having processing resources for executing software workloads, a plurality of management processes for controlling access to the processing resources according to workload policy definitions, a data container for storing a plurality of workload policy definitions and associations between the plurality of workload policy definitions and the plurality of computing containers, and a configuration process for communicating workload policy definitions from the data container to the plurality of management processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752624&OS=07752624&RS=07752624
owner: Hewlett-Packard Development Company, L.P.
number: 07752624
owner_city: Houston
owner_country: US
publication_date: 20041221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application is related to commonly assigned U.S. patent application Ser. No. 10\/206,594 entitled \u201cDYNAMIC MANAGEMENT OF VIRTUAL PARTITION COMPUTER WORKLOADS THROUGH SERVICE LEVEL OPTIMIZATION,\u201d filed Jul. 26, 2002, which issued as U.S. Pat. No. 7,140,020 on 2006 Nov. 21 and which is incorporated herein by reference.","The present application is generally related to associating workload management definitions with computer containers.","Many enterprises have experienced a dramatic increase in the number of computers and applications employed within their organizations. When a business group in an enterprise deploys a new application, one or more dedicated server platforms are typically added to host the new application. This type of environment is sometimes referred to as \u201cone-app-per-box.\u201d As more business processes have become digitized, a \u201cone-app-per-box\u201d environment leads to an inordinate number of server platforms. As a result, administration costs of the server platforms increase significantly. Moreover, the percentage of time that the server platform resources are actually used (the utilization rate) can be quite low.","To address these issues, many enterprises have consolidated multiple applications onto common server platforms to reduce the number of platforms and increase the system utilization rates. When such consolidation occurs, coordination of the resources of the platform between the multiple applications is appropriate. For example, it is desirable to provide a scheduling mechanism that controls access to processor resources by the various threads of the supported applications. Some scheduling mechanisms (e.g., \u201cworkload management\u201d functionality) provide a set of shares, rules, priorities, service level objectives, and\/or the like to control the scheduling of processes.","One example of workload management involves creating multiple virtual partitions in a shared resource domain. Various resources (such as processors, memory, input\/output (IO) resources, and\/or the like) are typically assigned to each virtual partition. Also, a respective operating system (OS) image can be executed within each virtual partition. Respective groups of related applications may be executed within each virtual partition. The configuration of the virtual partitions provides a degree of isolation between the groups of applications of the various virtual partitions. Additionally, a workload management process may be executed within each virtual partition to control access to resources within the virtual partitions. Specifically, within a particular virtual partition, the workload management process may schedule access to processor resources between the applications of the group assigned to the virtual partition.","In addition to workload management within virtual partitions, another level of resource management occurs by reallocating resources between the virtual partitions. Specifically, if the workload management process within a virtual partition determines that service level objectives cannot be obtained for the group of applications, the workload management process may request additional resources from a \u201cglobal\u201d workload management process. Upon the basis of rules, shares, priorities, service level objectives, and\/or the like, the global workload management process may shift resources from another virtual partition to the requesting partition. For example, if the other partition has excess resources, those resources can be reassigned to the requesting virtual partition. The use of workload management functionality enables the utilization rates associated with computing resources to be improved. Accordingly, workload management functionality enables a more efficient use of computing resources.","In one embodiment, a system comprises a plurality of computing containers having processing resources for executing software workloads, a plurality of management processes for controlling access to the processing resources according to workload policy definitions, a data container for storing a plurality of workload policy definitions and associations between the plurality of workload policy definitions and the plurality of computing containers, and a configuration process for communicating workload policy definitions from the data container to the plurality of management processes.","In another embodiment, a method comprises maintaining a data container that includes a plurality of computer container definitions, a plurality of workload management definitions, and associations between the plurality of computing container definitions and the plurality of workload management definitions, operating a plurality of management processes for performing resource allocation operations associated with a plurality of computing containers instantiated according to the plurality of computer container definitions, and communicating changes to the plurality of workload management definitions in the data container to the plurality of management processes.","Although known workload management functionality provides a number of benefits when compared to prior computing environments, known workload management functionality is subject to some limitations. In particular, known workload management functionality controls the dynamic allocation of resources in response to low-level parameters encoded in a respective configuration file for each managed computing container. Additionally, known workload management functionality requires workload management daemons on different OS images to be restarted upon modification of the configuration files to change their operations according to the modified policy parameters. Accordingly, defining and modifying workload management policies are currently relatively complex and error-prone tasks.","Some representative embodiments provide a configuration repository that includes policy objects. The policy objects enable workload management policies to be defined independently of computing containers. The configuration repository further includes resource domain objects and container objects. When policy objects are attached to computing container objects and activated, the corresponding workload management functionality associated with the computing containers dynamically allocates resources according to the policy types and policy metrics defined in the respective policy objects. By adapting workload management functionality, some representative embodiments enable workload policies to be modified and updated on each applicable computing container without imposing a significant burden on an administrator. Moreover, some representative embodiments enable default policies to be stored. The default policies may be efficiently applied by selection of a default policy through a suitable user interface.","Referring now to the drawings,  depicts system  according to one representative embodiment. System  includes central management station  for performing administrative activities associated with system . Central management station  includes typical elements such as processor , memory , and operating system (OS) . Furthermore, central management station  comprises command line interface (CLI)  and configuration graphical user interface (GUI)  to perform administrative activities according to one representative embodiment. For example, central management station  enables resource domains  and partitions - through -N within the resource domains to be created. It is noted that only one resource domain  is shown for the sake of simplicity. Any number of resource domains  can be managed according to representative embodiments. Central management station  further enables workload management policies to be defined and attached to partitions  and\/or resource domains .","In one embodiment, central management station  uses configuration repository  to perform these activities. Configuration repository  is used as a data container to hold objects. Specifically, the various objects within configuration repository  define resource domains , partitions , and associated workload management policies. Additionally, configuration repository  may be an object of a suitable class and serialized for persistent storage.","Resource domain  is essentially a collection of resources (e.g., processors, memory, IO capacity, storage resources, networking functionality, and\/or the like) that are shared between a plurality of workloads and are, potentially, subject to reallocation between the workloads. The allocation of resources to a particular partitions  may be physical, i.e., a processor belongs to one and only one partition . Additionally or alternatively, the allocation of resources may apportion a single physical resource among multiple partitions  (e.g., time sharing of a processor).","Virtual partitions  are protective domains of resources of a server platform. Selected processors  and specific portions of memory  of the server platform may be allocated between partitions - through -N. Partitions  may share resources such as network interface  and input\/output (IO) interface . Suitable queuing and scheduling mechanisms (not shown) may be used to allocate access to network interface  and IO interface  as an example. Although one representative embodiment is described as using virtual partitions, any suitable computing container may be used to implement embodiments. Specifically, any computer system having at least one resource subject to allocation may employ embodiments as described herein to determine which software processes are to receive access to the resource.","A respective operating system  may be executed to control the processing within each partition . Respective applications  or sets of applications are executed within partitions - through -N. Applications  may correspond to the business processes of various business units of a corporate entity, for example. The use of partitions enables a number of advantages. For example, if a software error or fault occurs within any partition , only that partition  will be affected and the other partitions  will continue processing without interruption.","In one embodiment, within partitions - through -N, performance monitors  are software processes that monitor operations associated with applications . For example, performance monitors  may examine the length of time required to perform selected types of transactions. Additionally or alternatively, performance monitors  may monitor the utilization rates associated with the processors, IO peripherals, network interfaces, or other resources by the applications  associated with partitions - through -N. The performance metrics gathered by performance monitors  are communicated to partition managers (PMGRs) .","In one embodiment, PMGRs  are software processes that use the performance metrics to generate resource allocation requests according to policy objects . The policy objects may identify policy types, target performance criteria, policy metrics, and\/or the like. For example, a service level objective (SLO) may be defined to specify the desired length of time to complete a specific type of database transaction to equal one millisecond. Alternatively, an SLO may be defined to specify that the utilization rate of a resource should be maintained below 85%. The PMGR  determines the amount of resources needed for the SLO(s) to be obtained within a given partition . This amount of resources is communicated as a resource request attribute in the policy object . These policy objects are subsequently communicated to the global workload manager (gWLM) . The gWLM  collects policy objects  from each of the partitions - through -N and aggregates them into a set of policy objects  representing all partitions in the Resource Domain .","gWLM  dynamically reallocates resources between partitions  in response to the requests. For example, an idle processor  associated with partition - may be transferred to partition - in response to a request from partition -. The reallocation of resources may involve reallocation of idle resources, reallocation of used resources from applications of lower priority, and\/or reallocation of resources according to other suitable arbitration algorithms. Any suitable resource could be assigned in this manner such as memory, storage resources, networking resources, operating system resources, and\/or the like. In one alternative embodiment, the arbitration between conflicting requests occurs according to arbitration policy objects .","Additionally, gWLM  include daemon  for receiving serialized policy objects  from central management station , receiving modifications of policy objects , and for activating previously received policy objects . By managing the distribution and control of policy data in this manner, workload management functionality may be modified without interruption of the workload management processes. Also, whenever a workload management policy is modified, each partition  and\/or resource domain affected by the policy change will be autonomously updated. An administrator need not identify files within a storage hierarchy for modification. Additionally, an administrator need not identify specific workload management processes on each OS  to be restarted. In another embodiment, gWLM  also includes daemon  for receiving arbitration policy objects , modification of the objects , and activation of the objects .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["200","210","230","101","240","220"]},"More specifically, PolicyDescriptor class  provides a means of specifying a policy's attributes and behavior as well as associating one or more policies to a given container. In other words, each object of PolicyDescriptor class  provides a definition of a policy that can be used by one or several PMGRs  to control workload management operations. In addition, PolicyDescriptor class  includes methods that can be used to monitor or characterize the state of a policy on a given partition. For example, the getReading( ) method enables the performance data associated with respective partition  to which a policy object is attached to be obtained. Also, PolicyDescriptor class  is an abstract class that may be extended to various instances of policies. For example, as shown in , FixedPD, UsagePD, and OwnBorrowPD classes , , and  extend the abstract class PolicyDescriptor class . In one embodiment, PolicyDescriptorFactor  is used to create policy objects corresponding to all the defined policy classes. PolicyDescriptorFactor  enables creation of a policy object having attributes set to the appropriate values in view of string identified upon the invocation of the create method.","A single PolicyDescriptor object represents the policy on every partition  to which it has been associated or \u201cattached.\u201d Accordingly, modification of a policy is readily performed by modifying the appropriate attributes of the PolicyDescriptor object. Although a single PolicyDescriptor object is sufficient for defining and attaching a policy to a set of containers, multiple PolicyDescriptor objects are used for monitoring and other activities. Upon deployment or redeployment of a resource domain, a \u201clocal\u201d copy of the PolicyDescriptor object is made for each container object. The local copies enable a container-specific state of a given policy to be available for examination using central management station  (see ).","The policy objects may possess several attributes. The policy objects may include a name attribute (e.g., a string member variable) to uniquely identify a policy in a manner that is convenient for administrators. The attributes may include resource variables such as minimum or maximum resources to be allocated. The attributes may include a performance target (goal or service level objective). The attributes may include one or several \u201creadings\u201d that reflect a container state or performance metric at a given point in time. The reading attributes are used when the policy objects are attached to specific partitions .","The attributes include a policy type as defined using PolicyTypes class . Each policy type corresponds to a unique workload management algorithm. PolicyTypes class  provide constant labels for each policy and a list method( ) that returns the list of labels. For example, a policy type may be defined for fixed allocation policies (a respective partition  is statically assigned a predetermined number of processors), \u201cshare\u201d policies (each respective container receives a percentage or fractional amount of available resources), \u201cborrow\u201d policies (resources may be temporarily transferred between partitions  in response to utilization rates), \u201cowned\/borrow\u201d policies, and\/or the like.","Owned\/borrow algorithms enable idle or underutilized resources to be transferred between partitions  in response to requests from \u201cunderperforming\u201d partitions . However, when a partition  that has \u201clent\u201d resource subsequently so requires, the partitions  can immediately reclaim lent sources up to its \u201cowned\u201d amount. Further details regarding owned\/borrow algorithms are disclosed in co-pending U.S. patent application Ser. No. 11\/007,360, entitled \u201cSYSTEM AND METHOD FOR ALLOCATING A RESOURCE IN A COMPUTER SYSTEM,\u201d filed Dec. 8, 2004, which is incorporated herein by reference. In one embodiment, each partition  in a resource domain possesses an owned\/borrow policy when the owned\/borrow allocation is utilized. In this embodiment, illegal attachment of policies are detected and prevented before deployment of such policies to partitions .","In one embodiment, a controller (e.g., a method called by PMGR ) is defined for each policy type. The controller uses a target and one or several readings to determine whether additional resources would be beneficial. If so, the controller communicates a suitable signal to gWLM  to obtain additional resources (e.g., one or several processors). Similar operations may occur to deallocate or otherwise make available idle or underutilized resources.","Also, the policy objects may further include a boolean member variable to indicate whether a policy is active. The purpose of the boolean member variable is to enable multiple policy objects to be attached to a single partition . When a policy object is attached to a container and the boolean member variable is set to the appropriate value, the corresponding controller is used to generate resource requests to gWLM . One possible advantage of enabling multiple policies to be attached to a container is the ability to change allocation behavior in an expeditious and efficient manner. For example, a given workload may only require significant resources at limited periods of times. When one of those periods arrives, an event may be triggered to activate a policy on the container supporting the workload. The activated policy may provide for greater resource requests than otherwise would occur during periods of low demand. Thus, a time-dependent workload management may be implemented in an efficient manner according to some representative embodiments.","Config class  may comprise a plurality of methods that facilitate operations associated with policy domain objects. For example, the attach and detach methods enable policy objects to be attached to ContainerDescriptor objects (see ContainerDescription class ). ContainerDescriptor objects and resource domain description objects (see RDD class ) include similar attach and detach methods to enable attachment and detachment operations to occur on several levels of granularity. Also, the getPolicyDescriptor( ) method (see ContainerDescription class ) may be used to return an array of the policies currently attached to a container.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["301","302","303","304","170","170"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["401","170","402","403","404","405","406","170","407","110","408","101"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["501","101","502","503","101","504","505","110","506","110","109"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6","b":["601","602","603","170","604","110","605","109"]},"In addition to managing workload management policies through a user interface, some representative embodiments may provide an application programming interface (API), set of operating system calls, or other routines to enable management of workload management policies to occur through software programs. For example, it may be convenient to implement software programs that dynamically activate and deactivate policy objects according to a predefined schedule to coordinate business processes."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 3-6"}]},"DETDESC":[{},{}]}
