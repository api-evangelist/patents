---
title: Method and system for passing messages between threads
abstract: A method and system for passing messages between threads is provided, in which a sending thread communicates with a receiving thread by passing a reference to the message to a message queue associated with the receiving thread. The reference may be passed without explicitly invoking the inter-process or inter-thread message passing services of the computer's operating system. The sending thread may also have a message queue associated with it, and the sending thread's queue may include a reference to the receiving thread's queue. The sending thread can use this reference to pass messages to the receiving thread's queue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07058955&OS=07058955&RS=07058955
owner: Microsoft Corporation
number: 07058955
owner_city: Redmond
owner_country: US
publication_date: 20001206
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to message passing between threads, and, more particularly, to passing messages between threads using a message queue.","There are currently many schemes for allowing different threads of execution on a computer to communicate with one another. Typically, these schemes involve using the message passing mechanisms of the computer's operating system. However, there are many situations in which it is not desirable to call on these mechanisms from directly within a program. An example of such a situation is when the threads that wish to communicate are scripting threads. Scripting threads are simply threads that execute according to a scripting language, such as JavaScript or PERL. Programmers often prefer to use scripting languages rather than compiled languages because scripting languages hide a lot of the underlying complexity of the machines on which they run. This complexity is, instead, handled by the \u201cscript engine,\u201d which is the name often given to the program that interprets the script. If a script programmer is forced to rely explicitly on the message passing facilities of the operating system, then he runs the risk of reintroducing some of the complexity that he sought to avoid by choosing a script language in the first place.","Thus it can be seen that there is a need for a method and system for passing messages between threads that avoids the above-mentioned disadvantages.","In accordance with this need, a method and system for passing messages between threads is provided. According to the method and system, a sending thread interprets a block of source and, according to the source code, communicates with a receiving thread by passing a reference to the message to a message queue associated with the receiving thread. The reference may be passed without explicitly invoking the inter-process or inter-thread message passing services of the computer's operating system from within the block of source code. The sending thread may also have a message queue associated with it, and the sending thread's queue may include a reference to the receiving thread's queue. The sending thread can use this reference to pass messages to the receiving thread's queue.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying figures.","The invention is generally directed to a method and system for passing messages asynchronously from one thread to another without explicitly invoking the message passing mechanisms of an operating system from within the source code of the sending thread. In an embodiment of the invention, the receiving thread has a queue for holding messages and the sending thread has the address (in the form of a \u201creference\u201d) of the receiving thread's queue. The sending thread passes, by reference, the message to the receiving thread's queue using this address. The invention may be used in conjunction with scripting threads.","Although it is not required, the invention may be implemented by computer-executable instructions, such as program modules, that are executed by a computer. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. On many computers, modules execute within an address space of the computer's memory, which is typically defined as a \u201cprocess.\u201d The point of execution of the program instructions is often referred to as a \u201cthread.\u201d As is conventional, multiple threads of execution may exist for a single program in a process. Multiple processes may be executed on a single machine, with each process having one or more threads of execution. Thus, when communication between threads is discussed herein, it may mean communication between threads in a single process or communication between threads in different processes.","In this description, reference will be made to one or more \u201cobjects\u201d performing functions on a computer. An \u201cobject\u201d is a programming unit used in many modem programming languages. Objects may also execute on a computer as part of a process, procedure, and may be manifested as executable code, a DLL, an applet, native instruction, module, thread, or the like.","The invention may be implemented on a variety of types of computers, including personal computers (PCs), hand-held devices, multi-processor systems, microprocessor-based on programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be employed in distributed computing environments, where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, modules may be located in both local and remote memory storage devices.","An example of a networked environment in which this system may be used will now be described with reference to . The example network includes several computers  communicating with one another over a network , represented by a cloud. Network  may include many well-known components, such as routers, gateways, hubs, etc. and may allow the computers  to communicate via wired and\/or wireless media.","Referring to , an example of a basic configuration for a computer on which the system described herein may be implemented is shown. In its most basic configuration, the computer  typically includes at least one processing unit  and memory . Depending on the exact configuration and type of the computer , the memory  may be volatile (such as RAM), non-volatile (such as ROM or flash memory) or some combination of the two. This most basic configuration is illustrated in  by dashed line . Additionally, the computer may also have additional features\/functionality. For example, computer  may also include additional storage (removable and\/or non-removable) including, but not limited to, magnetic or optical disks or tape. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to stored the desired information and which can be accessed by the computer . Any such computer storage media may be part of computer .","Computer  may also contain communications connections that allow the device to communicate with other devices. A communication connection is an example of a communication medium. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","Computer  may also have input devices such as a keyboard, mouse, pen, voice input device, touch input device, etc. Output devices such as a display , speakers, a printer, etc. may also be included. All these devices are well known in the art and need not be discussed at length here.","The technology described herein may be implemented in a variety of ways.  shows an architecture that may be used in the context of scripting threads. Its basic components include a first instance  of a script engine executing in a first thread , and a second instance  of the script engine executing in a second thread . The first and second instances will hereinafter be referred to as script engine  and script engine , respectively. As discussed in the background section, a script engine is a program that interprets script and executes operations on a computer according to the script. Implementations of a script engine include, but are not limited to, a JScript engine, a VBScript engine, and a PERL engine. The basic components further include a queue  that exists within the thread , and a queue  that exists within the thread .","Threads  and  may be executing on the same machine or on separate machines in communication with one another. To execute thread , the script engine  interprets and acts upon the block of script . To execute thread , the script engine  interprets and acts upon block of script . The script engines  and  interpret the text of the script blocks and in a well-known manner. For the purposes of this description, the script engines  and  are assumed to be instances of a JScript engine, and the script blocks and are assumed to be blocks of JScript. Any suitable type of scripting engine and scripting language may be used, however.","Queue  includes the following objects: an array  of messages received from thread  and not yet processed by thread ; a string data structure  containing the name for the queue ; a string data structure  containing the name of the signal that tells the queue  when a message has arrived; a reference variable  containing the address of the queue ; a low index  containing the address of the oldest message in the queue ; and a high index  containing the address of the message most recently added to the queue .","Queue  includes the following objects: an array  of messages received from thread  and not yet processed by thread ; a string data structure  containing the name for the queue ; a string data structure  containing the name of the signal that tells the queue  when a message has arrived; a reference variable  containing the address of the queue ; a low index  containing the address of the oldest message in the queue ; and a high index  containing the address of the message most recently added to the queue .","To initialize the above-described data structures according to an embodiment of the invention, one of the threads creates its own queue object and then sends the address of this object (in the form of a reference) to the second thread. The second thread then creates its own queue object and completes the initialization by cross-referencing its queue with the queue of the first thread. For example, in the embodiment illustrated in , references can be passed from thread  to thread  via the IDispatch interface  of a COM object  that is defined within the script engine . Similarly, the script engine  can pass a reference from thread  to thread  via the IDispatch interface  of a COM object  that is defined within the script engine . Accordingly, the references  and  referred to above may, for example, be implemented by the script engine  as IDispatch COM interfaces. COM objects are platform-independent, and the IDispatch interface allows references to objects to be passed across thread, process and machine boundaries. Any other cross-platform object or mechanism may be used, however.","For one thread to send a message to another thread according to an embodiment of the invention, the sending thread creates a message object, and inserts the message\u2014which includes a string of characters\u2014into the message object. The sending thread then passes a reference (via the IDispatch interface, for example) to the message object to the message queue of the receiving thread. The sending thread then increments the high index of the receiving thread's queue. The sending thread will already have a reference to the receiving thread's queue, having acquired the reference during an initialization procedure, such as the one described above. Once the message is sent, the sending thread need not keep the reference to the message. If, however, the sending thread wishes to wait until it receives a reply to the messages, then it is preferable that the sending thread maintains the reference to the message. The sending thread may then periodically check the sent message to see if a \u201creply\u201d flag has been set.","To check for the presence of a new message according to an embodiment of the invention, the receiving thread compares the low index and the high index of the queue. If they are not equal, then there is at least one message in the queue. The receiving thread may retrieve a received message, reply if necessary, delete the reference to the message, and increment the low index. To reply to the message, the receiving thread flags the message as \u201creplied,\u201d and sends the message back to the original sending thread's queue.","In order to conserve processor resources according to an embodiment of the invention, the sending thread sends a signal to the receiving thread in conjunction with sending a message. The signal indicates to the receiving thread that a new message has been sent. This signaling may take the form of a Java script \u201csend event\u201d command. Signaling in this manner allows the receiving thread to simply check the queue when necessary, rather than constantly checking for incoming messages.","Referring to the flowchart of , as well as the diagram of , an example of how communication between two threads is initialized and conducted according to an embodiment of the invention will now be described. At step  (), thread  creates a message queue, labeled \u201cQ \u201d (Item  in ). At step , thread  spawns thread  and passes a reference to Q to thread  via the IDispatch interface . At step , thread  creates its own queue, labeled \u201cQ\u201d (Item  in ) and stores the reference to Q in a data structure labeled \u201cOtherQ\u201d (Item  in ). At step , thread  stores the reference to Q in another instance of \u201cOtherQ\u201d (Item  in ). At step , thread  creates a message object (not illustrated) containing the text \u201cHELLO.\u201d At step , thread  passes a reference to the message object\u2014which, in most programming languages is simply the address of the object\u2014to thread  for placement in Q. The thread  then sends a signal to the thread  to indicate the presence of a new message at step . At step , thread  retrieves the message object  using the reference, and the process is complete.","An example of how an embodiment of the invention may be used in compiling a program will now be described with reference to . A server computer  is in communication with client computers , ,  and , and console computer . Each client computer is responsible for compiling a section of a program. In this example, the program is divided into four sections: networking, kernel, user interface, and developer tools. These sections are compiled by client computers , ,  and  respectively. The server computer  coordinates the activities of the client computers through the use of JScript commands. To accomplish this, the server computer executes a JScript engine  along five different threads of execution, labeled , , ,  and . Consequently, each thread runs a copy of the JScript engine . Each copy includes one or more COM objects, such as COM object , for passing references to objects to other threads. Each of the threads , ,  and  also includes a queue structured like the queues  and  of . Thread  includes a queue for each of the threads , ,  and . In other words, thread  has a queue for communicating with thread , a queue for communicating with thread , and so on. Threads , ,  and  are responsible for executing scripting commands to control the compiling operations of client computers , ,  and  respectively, while thread  is responsible for sending commands to coordinate the activities of the other threads. The types of commands sent by thread  include: \u201cStart,\u201d for starting the execution of a thread; \u201cAbort,\u201d for aborting the execution of a thread; and \u201cIgnore error,\u201d to cause a thread to ignore an encountered error and continue its compiling operations.","The setup shown in  allows the thread  to send commands to each of the other threads in parallel. For example, it can send a \u201cstart\u201d command to thread , and then send a \u201cstart\u201d command to thread  without having to wait for thread  to have acted on its command. Once all of the \u201cstart\u201d commands have been sent, the thread  can then update the status of the compiling operation on a user interface  of a console computer . This embodiment also helps solve problems related to the interdependency of the various sections of the program. For example, in a conventional compiling operation, the networking section of the program could not start compiling until the application programming interfaces (APIs) required for networking were defined in the kernel section. This would mean that no compiling could be accomplished on the networking section until the kernel section was complete. In the setup of , however, the networking section can be at least partially compiled in parallel with the kernel section until the APIs were needed.","It can thus be seen that a new a useful method and system for passing messages between threads has been provided. In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiments described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiments shown in software may be implemented in hardware and vice versa or that the illustrated embodiments can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
