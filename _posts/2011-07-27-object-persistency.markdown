---
title: Object persistency
abstract: There is provided a method and computer system for object persistency that includes: running a program; storing an object of the program into a random access memory in response to determining that the object is a non-persistent object; and storing the object into a phase change memory in response to determining that the object is a persistent object. The method and computer system of the present disclosure do not need separate persistency layers, such that the programming model is light weighted, the persistency of object data is more simple and fast, and implicit transaction process is supported, thereby a great deal of development and runtime costs are saved.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589621&OS=08589621&RS=08589621
owner: International Business Machines Corporation
number: 08589621
owner_city: Armonk
owner_country: US
publication_date: 20110727
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED FOREIGN APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a non-provisional application that claims priority benefits under Title 35, Unites States Code, Section 119(a)-(d) from Chinese Patent Application having China Patent Application No. 201010524777.X, filed on Oct. 29, 2010, by Qing F. Wang and Yun Wang, which application is incorporated herein by reference in its entirety.","The present disclosure relates to technical fields of electronic computation, data storage, and object-oriented program design and so on.","Currently, object-oriented program design dominates all methods of program design. In the field of object-oriented program design, an object refers to an entity that has a state and a set of operations defined on the state. The state is represented as a set of object attributes. The set of operations associated with the object provide other objects (clients) which request services when requiring some computation with the requested services. Object classes are used to create objects. An object class definition serves as a template for objects which includes declarations of all attributes and services associated with an object of the class. Object persistency means that an object is stored into storage such that the object will not be lost even when power is down. In a JVM (Java Virtual Machine), an object is generally stored into a RAM heap which is volatile, that is, the object data stored in the RAM heap will be lost when the RAM heap is powered-down. Java is a trademark or registered trademark of Oracle and\/or its affiliates in the United States, other countries, or both.","An application usually needs to persist some, but not all, objects. Such persistency needs to go through a separate persistency layer. For example, a database usually includes a data portion and an interface such as an API (Application Programming Interface) which can be considered as the persistency layer. During exterior programming to access the database, in addition to statements for normal operations, the specific statements for persisting object data via the API are needed to be written. If such programming work is to be done for each of different databases, the workload is extremely enormous, and it is time consuming, exacting and error-prone. Thus, current object persistency methods and systems need separate persistency layers, heavy weight programming models, and high development and runtime costs.","On the other hand, there has appeared PCM (Phase Change Memory). The PCM has characters in that it is data-nonvolatile and can be addressed according to bytes, which results in the storing speed of the PCM being very fast, and the PCM can be used as working memory (RAM) of CPU, and data can be stored persistently in the meantime.","According to one aspect of the present disclosure, there is provided a method for object persistency, comprising steps of: running a program; storing an object of the program into a random access memory in response to determining that the object is a non-persistent object; and storing the object into a phase change memory in response to determining that the object is a persistent object.","According to another aspect of the present disclosure, there is provided a computer system, comprising: a processor which processes an object of a running program; a random access memory which stores the object in response to the processor determining that the object is a non-persistent object; and a phase change memory which stores the object in response to the processor determining that the object is a persistent object.","With the method and computer system of the present disclosure, a separate persistency layer is no longer needed such that a programming model is light weighted, the persistency of object data is more simple and fast, and implicit transaction process is supported, thereby a great deal of development and runtime costs are saved.","In the following, some specific embodiments of the present disclosure will be described in detail with reference to the attached drawings. If the detailed description of some related art may confuse the main points of the disclosure, the detailed description thereof will not be provided here. In respective embodiments, identical reference numbers are used to denote elements or units performing the same functions.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},"In , the reference number  is used to represent the computer system for object persistency of the present disclosure. The computer system  includes a RAM (Random Access Memory) heap  and a PCM (Phase Change Memory) heap  both of which are used herein as heaps (memories) for storing objects, wherein the RAM heap  is for volatile storage and the PCM heap  is for non-volatile storage. It can be seen from  that Java threads (applications)  and  are run in the computer system  respectively. The computer system  of  may further include a processor (or interpreter) . Objects of the thread  or  are processed by the processor  of the computer system , and they are stored into the RAM heap  or the PCM heap  based on conditions.","Specifically, taking the thread  as an example, the processor  stores the object  in the thread  into the RAM heap  in response to judging that the object  does not need persistency, and stores the objects  and  in the thread  into the PCM heap  in response to judging that the objects  and  need persistency. The object  stored in the RAM heap  may further be called by other threads such as the thread . Also, for the thread , the respective objects \/ and \/ thereof can be stored into the RAM heap  and the PCM heap , respectively. Specifically, the processor  stores the objects  and  in the thread  into the RAM heap  in response to judging that the objects  and  do not need persistency, and stores the objects  and  in the thread  into the PCM heap  in response to judging that the objects  and  need persistency. Since the PCM heap  not only can be accessed quickly, but also has a volatile feature, the purpose of persistency in the course of processing can be achieved.","That is to say, the computer system  for object persistency provided by the present disclosure may include: the processor , which processes an object of a running program; the RAM , which is used to store the object in response to the processor  judging that the object is a non-persistent object; and the PCM , which is used to store the object in response to the processor  judging that the object is an object which needs persistency.","In addition to integration application of PCM on a physical machine, as shown in , according to one embodiment of the present disclosure, the computer system  may be implemented as a JVM (Java Virtual Machine). One highly important feature for an interpreted programming language (for example, Java) is independence of a platform. Use of a JVM is the key of achieving the feature. If a general advanced language is to be run on different platforms, it needs to be compiled into different target codes. However, after the JVM is introduced, the Java language does not need to be recompiled when running on different platforms. The usage mode of the Java language allows the JVM to shield information on specific platforms, such that a Java language interpreter only needs to generate target codes (byte-codes) running on the JVM so as to run on various platforms without modification. When executing byte-codes, the JVM interprets the byte-codes into machinery instructions on specific platforms to be executed. Therefore, since the present disclosure aims to the object persistency problem for object-oriented interpreted programming languages, the JVM can be selected as the target machine for PCM application in combination with the cross-platform feature of the JVM.","The reference number  represents all kinds of applications, which can be run in the computer system  (for example, a JVM or interpreter therein), according to the present disclosure, in which one application is, for example, the following program example:",{"@attributes":{"id":"p-0020","num":"0019"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Class Student \/\/ One example"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/_bP =true, the instance is set as persistency"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Boolean_bP;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/_bT =true, the instance is set as the transaction state"]},{"entry":[{},"\u2002public Boolean _bT;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above exemplary program, two attribute indicators are used to define object classes, wherein a transaction indicator bT is used to define whether or not the instance is involved in one transaction process, and a persistency indicator _bP is for defining whether or not the instance needs persistency. That is to say, the persistency indicator _bP is set to represent whether or not the object is an object that needs persistency, and the transaction indicator _bT is used to represent whether or not the object belongs to a certain transaction process.","In the above exemplary program, when the object is determined to need persistency, that is, when the persistency indicator _bP is true, the object is stored persistently, that is, into the PCM heap , otherwise, it is stored into the RAM heap . When the object is determined to be one object in a certain transaction, that is, the transaction indicator _bT is true, the object is set as a transaction process mode.","The present disclosure supports the transaction process mode. A transaction is a program executing unit which accesses and possibly updates various data items in a database, and it is usually caused by execution of a user program written with an advanced database manipulation language or a programming language (for example, Java) and is delimited by statements like \u201cbegin transaction\u201d and \u201cend transaction\u201d (or a function call). A transaction is composed of all operations performed between \u201cbegin transaction\u201d and \u201cend transaction\u201d. A transaction is a basic unit for resuming and concurrently controlling and has attributes such as atomicity, consistency, isolation, persistence and so on.","A specific form of expression for a transaction programming model of the present disclosure may be for example as follows:",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ObjA._bT = ObjB._bT = true","\/\/ transaction process begins"]},{"entry":[{},"ObjA.Update( );"]},{"entry":[{},"ObjB.Update( );"]},{"entry":[{},"ObjA._bT = ObjB._bT = false","\/\/ transaction process ends"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Here, ObjA and ObjB are two related objects in the transaction, and updating thereof requires to be successful together or unsuccessful together. In the present disclosure, in order to achieve a simplified transaction programming model as described above, an enhanced Java interpreter (for example, the processor ) needs to do the logical actions as follows:",{"@attributes":{"id":"p-0027","num":"0026"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ObjA._bT = ObjB._bT = true \/\/ begin transaction, the object is copied"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"into the RAM heap"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ObjA.Update( ); \/\/ the copied object ObjA is updated"},{"entry":"ObjB.Update( ); \/\/ the copied object ObjB is updated"},{"entry":"ObjA._bT = ObjB._bT = false \/\/ end transaction, the copied object _bT"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"is set as false."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The reference number  represents an object collector. An object collection mechanism refers to a mechanism that the computer system  uses to release memories occupied by those objects which are no longer used, and, thus, is also called a garbage collection mechanism. The Java language does not require a JVM to have an object collector and does not specify how the object collector works either. However, common JVMs all have object collectors, and most object collectors use similar algorithms to manage memories and to perform operations of collection. The purpose of object collection is to clear away objects which are no longer used. The object collector determines whether to collect an object or not by determining whether the object is referred by an active object or not.","The object collector  of the present disclosure carries out the following logical operations to expand the object collector so as to achieve object access transfer between the RAM heap  and the PCM heap , that is, to support transaction persistency.","(1) if _bT is T (True), indicating that the object belongs to a certain transaction process, the object collector  performs no special processing on the object, and, instead, performs directly a normal flow of the object collector itself;","(2) if _bT is F (False), indicating that the object does not belong to a certain transaction process, the object collector  further determines the attributes of _bP for the object,\n\n","The operations of the processor  and the object collector  of the present disclosure may be shown as the following table:",{"@attributes":{"id":"p-0033","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},{},"The operation of","The operation of"]},{"entry":["_bP","_bT","Heap","processor","object collector"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["T","T","PCM","Copy the object into the",{}]},{"entry":[{},{},{},"RAM, update the copied"]},{"entry":[{},{},{},"object"]},{"entry":["T","F","PCM",{},"Move the object to the"]},{"entry":[{},{},{},{},"PCM, conflict detection"]},{"entry":["F","T","RAM","Copy the object into the"]},{"entry":[{},{},{},"RAM, update the copied"]},{"entry":[{},{},{},"object"]},{"entry":["F","F","RAM",{},"Move the object to the"]},{"entry":[{},{},{},{},"RAM, object collection"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"In the object collector , it is determined whether the RAM heap  or the PCM heap  is used by using the above two attribute indicators _bT and _bP and the transaction process between the RAM heap  and the PCM heap  is supported.","When the attribute indicator _bT of the object is set as T (True), it indicates that the object belongs to a certain transaction process, and the object collector  does not operate on the object, instead, the processor  copies the object into the RAM heap  and updates the copied object, that is, performs an update process. When the attribute indicator _bT of the object is set as F (False), if the attribute indicator _bP of the object is set as T (True), it indicates that the object does not belong to a certain transaction process and needs persistency; at this time, the processor  does not operate, instead, the object collector  moves the object to the PCM heap  and performs conflict detection (transaction concurrency process). When the attribute indicator _bT of the object is set as F (False), if the attribute indicator _bP of the object is set as F (False) too, it indicates that the object does not belong to a certain transaction process and does not need persistency either, at this time, and the processor  does not operate, instead, the object collector  moves the object to the RAM heap  and performs an object collection process. The processor  and the object collector  according to the present disclosure may be implemented as identical or different machines, and the object collector  may be implemented in the computer system  for object persistency.",{"@attributes":{"id":"p-0036","num":"0037"},"figref":"FIG. 2"},"As shown in , a method for object persistency according to the present disclosure includes the following steps. At step ST, a program, which may be various object-oriented applications, is run in the computer system  as shown in . At step ST, it is determined whether or not the object is an object which needs persistency. At step ST, the object is stored into a RAM in response to determining that the object of the program is a non-persistent object. At step ST, the object is stored into a PCM in response to determining that the object is a persistent object.","The respective steps as described above may be carried out by the processor  or other components or units in the computer system  as shown in . The method for object persistency according to the present disclosure may further include the step of setting a persistency indicator to indicate whether or not the object is a persistent object and setting a transaction indicator to indicate whether or not the object belongs to a transaction process.","The method for object persistency according to the present disclosure may further include the step of moving the object to the RAM and performing a clearing process when the transaction indicator indicates that the object does not belong to a transaction process and the persistency indicator indicates that the object is a non-persistent object.","The method for object persistency according to the present disclosure may further include the step of moving the object to the PCM and performing conflict detection when the transaction indicator indicates that the object does not belong to a transaction process and the persistency indicator indicates that the object is a persistent object.","The method for object persistency according to the present disclosure may further include the step of copying the object to the RAM and performing update process when the transaction indicator indicates that the object belongs to a transaction process.","The above embodiments of the present disclosure may be implemented by hardware, software and firmware or in a combination thereof, and the way of implementation is not limiting the scope of the present disclosure. For example, the present disclosure may be carried out by executing software programs according to the disclosure in a general purpose computer system.","The above embodiments of the present disclosure are only exemplary description, and their specific structures and operations are not limiting the scope of the disclosure.","Those skilled in the art can combine different parts and operations in the above respective embodiments to produce new implementations which equally accord with the conception of the present disclosure.","The connection relationships between respective functional elements (units) in the embodiments of the present disclosure are not limiting the scope of the present disclosure, in which one or multiple functional element(s) or units may contain or be connected to any other functional elements or units.","Although several embodiments of the present disclosure has been shown and described in combination with the attached drawings above, those skilled in the art should understand that various variations and modifications which still fall into the scope of claims and their equivalents of the present disclosure can be made to these embodiments without departing from the spirit and principle of the disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and\/or other aspects and advantages of the present disclosure will become more apparent and more easily understood from detailed description of embodiments of the present disclosure in combination with the attached drawings, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
