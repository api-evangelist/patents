---
title: Middleware services layer for platform system for mobile terminals
abstract: A middleware services layer for a platform system for a mobile terminal for a wireless telecommunications system, the platform system including a mobile terminal platform assembly having a software services component, and application software loaded, installed and run in said mobile terminal platform assembly. The middleware services layer comprises at least one application programming interface (API) for providing access to the mobile terminal platform assembly for loading, installing and running application software in said mobile terminal platform assembly; and, at the same time, isolates the platform assembly from the applications via the at least one API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07415270&OS=07415270&RS=07415270
owner: Telefonaktiebolaget L M Ericsson (PUBL)
number: 07415270
owner_city: Stockholm
owner_country: SE
publication_date: 20030207
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/357,366 filed on Feb. 15, 2002, U.S. Provisional Patent Application Ser. No. 60\/357,291 filed on Feb. 15, 2002, U.S. Provisional Patent Application Ser. No. 60\/412,756 filed on Sep. 23, 2002, and U.S. Provisional Patent Application Ser. No. 60\/412,844 filed on Sep. 23, 2002.","1. Technical Field of the Invention","The present invention relates generally to the field of wireless telecommunications; and, more particularly, to an interface for a platform system for a mobile terminal for a wireless telecommunications system.","2. Description of Related Art","Since cellular telecommunications systems were first introduced in the 1980s, mobile terminals (Mobile Stations) utilized in the systems have become increasingly more complex. Initially, mobile terminals were designed primarily to provide voice telephony services; i.e., to receive and transmit voice communications. In later years, mobile terminals were developed that also included the ability to transfer user data not related to that of a voice telephone call. Such user data included, for example, data to be transferred over a dial-up networking connection initiated via a personal computer (PC).","Currently, so-called \u201cthird generation\u201d (3G) systems are being developed for future mobile telecommunications systems. 3G systems will combine high-speed Internet access with traditional voice communication, and will provide a user with access to Internet browsing, streaming audio\/video, positioning, video conferencing and many other capabilities in addition to voice communication.","The Third Generation Partnership Project (3GPP) was established to ensure compatibility among the several 3G systems that are being developed around the world. The Universal Mobile Telephone System (UMTS) is being developed by 3GPP to provide a 3G system that includes terrestrial and satellite systems capable of delivering voice, data and multimedia anywhere in the world.","The drastically increased functionality that is being included in cellular telecommunications systems via the 3GPP standardization has placed substantial demands on the developers of mobile terminals to be used in the systems. This demand is exacerbated by the fact that a mobile terminal is a \u201cresource scarce\u201d environment that is limited in size, memory and power.","Traditionally, mobile terminal manufacturers have designed, fabricated and marketed substantially complete mobile terminal systems that include all the hardware and software needed for basic terminal operation as well as the hardware and software needed to provide the features and capabilities desired by the manufacturer or a particular user based on their perception of market needs. Such an approach does not provide the flexibility to quickly adapt to rapid changes in market demands or to satisfy the diverse requirements of multiple users.","Recognizing the inadequacies of traditional procedures for designing and fabricating mobile terminals, a mobile terminal platform assembly has been developed that includes a plurality of functionally complementary units of software and hardware that can be marketed as a unit to a plurality of users. Each user can then load, install and run his own application software into the assembly to provide a complete platform system for a mobile terminal that meets the user's own particular needs. The mobile terminal platform assembly and the platform system are described in detail in commonly assigned U.S. patent application Ser. Nos. 60\/357,366 and 60\/357,291 filed concurrently herewith, the disclosures of which are hereby incorporated by reference.","A platform system such as described above, wherein mobile terminal platform assembly software and application software are developed separately and then later combined by loading, installing and running the application software in the mobile terminal platform assembly, requires a well-defined interface between the platform assembly software and the application software. Such an interface does not exist in current mobile terminals wherein all the software for the mobile terminals is fabricated together.","There is, accordingly, a need for an interface for a platform system for a mobile terminal for a wireless telecommunications system that permits software of a mobile terminal platform assembly of the system and application software to be developed separately and then later combined via the interface to complete the platform system.","The present invention provides an interface for a platform system for a mobile terminal for a wireless telecommunications system that permits software of a mobile terminal platform assembly of the platform system and application software to be developed separately and then later combined via the interface to complete the platform system.","According to the present invention, the interface comprises a middleware services layer that includes at least one application programming interface (API) for providing access to the mobile terminal platform assembly for loading, installing and running application software in the mobile terminal platform assembly (the term \u201cloading\u201d as used herein is intended to include any mechanism by which the application software can be combined with the software of the mobile terminal platform assembly via the interface, including, for example, downloading from the Internet or installing a hardware chip). The at least one API may include standardized (non-native) interfaces, de facto standardized interfaces and\/or open native interfaces. For example, a standardized interface might include the J2ME (JAVA 2 Micro Edition) environment according to MIDP\/CLDC (Mobile Information Device Profile\/Connected Limited Device Configuration) API.","According to an exemplary embodiment of the present invention, the middleware services layer comprises a middleware services layer component of the mobile terminal platform assembly of the platform system. The middleware services layer component provides a plurality of APIs for loading, installing and running application software in the assembly to be combined with software of the assembly to provide a complete platform system; and, in addition, functions to encapsulate the mobile terminal platform assembly and to isolate the platform assembly from the applications via the APIs. As a result, the middleware services layer component provides users (the term \u201cusers\u201d as used herein includes manufacturers, end users or other customers or users) with the capability of fully utilizing the functionality of the mobile terminal platform assembly without permitting access to or knowledge of the details of the assembly.","Further advantages and specific details of the middleware services layer of the present invention will become apparent hereinafter from the detailed description given below in conjunction with the following drawings.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["10","12","14","10","16"]},"Mobile terminal platform assembly  includes a software services component , a hardware component  and an interface component .","Software services component  comprises a plurality of well-structured functional software units for providing services that are offered to users via the interface component . In the exemplary system illustrated in , the plurality of software units comprise a plurality of vertically-oriented functional stacks including a UMTS access services software stack , a data communications services software stack , an MMI (Man-Machine Interface) services software stack , an application platform services software stack  and an operation and services software stack .","The hardware component  comprises a set of hardware units that are associated with and controlled by their respective functional software stacks. In the exemplary system illustrated in , the hardware units include UMTS access services hardware , data communications services hardware , MMI services hardware , application platform services hardware  and operation and services hardware .","According to exemplary embodiments of the present invention, interface component  comprises a middleware services layer component that includes at least one application programming interface (API) for loading, installing and running one or more applications  in mobile terminal platform assembly , that isolates the mobile terminal platform assembly from the applications using it, and that provides various other services for the applications. Specific details of the middleware services layer component  will be described hereinafter.","Mobile terminal platform assembly  of platform system  is adapted to be designed, implemented (assembled) and tested as a complete, enclosed unit separate from the application software  (the term \u201capplication software\u201d as used herein can be any software that provides the functionality that users may wish to have available). Users can, accordingly, develop or otherwise acquire their own application software and add that software to the mobile terminal platform assembly  at a later time in order to complete platform system . Mobile terminal platform assembly  can, accordingly, be sold or otherwise transferred to a plurality of different users each of which can complete platform system  by loading, installing and running their own application software in the assembly in order to satisfy their own particular requirements for the platform system.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["12","12","50","34","52","30","38","22","60","68"]},"Further details of the mobile terminal platform assembly  and platform system  are given in the above-mentioned commonly assigned U.S. patent application Ser. No. 60\/357,291.","The software incorporated in mobile terminal platform assembly  is preferably arranged in such a manner as to make the software organization easy to understand so that it can be more easily designed and more easily upgraded or otherwise modified.  is a block diagram that schematically illustrates the software architecture of mobile terminal platform assembly  to further assist in explaining the present invention.","As shown in , software services component , in addition to being organized into a plurality of vertical, functional software stacks as described above, is also arranged to define a plurality of horizontal layers such that the software of the middleware services layer  and the software of the software services component  together define a layered architecture, generally designated by reference number , in which the layers are arranged in descending order from a higher level service layer to a lower level service layer.","The software architecture differs from the standard ISO\/OSI (ISO Open Systems Interconnection) model in that it includes a plurality of horizontally partitioned functional software units that complement a plurality of vertically partitioned software layers. The horizontal partitioning contributes significantly to the creation of independent modular (service) components.","The highest layer of the layered architecture is the middleware services layer . The layers of the software services component  include an application server layer  to provide application services, a platform services layer  to provide platform specific services for applications, a platform protocol layer  to provide session protocols and application specific protocols, a transport layer  to provide audio access\/control, datacom transport protocols, messaging transport protocols and the like, a data access layer  to provide external data IF access, structured storage services and other low level platform support services, a logical drivers layer  and a physical drivers layer  encapsulating hardware dependencies. In addition, software services component  includes basic system services layers  that provide general services that are needed by the platform assembly.","The bottom two layers  and  constitute Hardware Abstraction Layers (HAL) which isolate the dependencies between the software and the hardware. Only the physical drivers layer is concerned with the details of the hardware (i.e., which registers in the ASIC hardware are addressed). The logical drivers layer  provides a logical mapping to the hardware, i.e., this layer provides a bridge between the hardware and software parts of the mobile terminal platform assembly.","The software itself is organized into a plurality of software modules, e.g. modules , , . In software services component , a single module can reside in only one vertical functional stack and in only one horizontal layer within that stack. Each layer can contain from one to many modules, and all the modules in a particular layer in a particular stack have the same level of abstraction. Communication among the various modules is accomplished via a Software Back Plane (SwBP)  subject to a set of basic rules for software module-to-module access. These rules can be summarized as follows:\n\n","There is no hard coupling between the various modules and the interfaces in the SwBP. As a result, the modules and\/or the implementation of the interfaces can be freely changed without any impact on the clients to the interfaces. This is an important capability as it permits individual modules to be added, removed or changed without affecting other modules in the platform assembly.","Further details of the layered architecture, including the SwBP software structure that enables the internal communication between modules within the mobile terminal platform assembly are described in the above-mentioned commonly assigned. U.S. patent application Ser. No. 60\/357,366","Middleware services layer component  functions to provide a well-defined interface between the software in the mobile terminal platform assembly  and the application software  to be loaded, installed and run in the platform assembly; and, in addition, encapsulates the mobile terminal platform assembly and isolates the assembly from applications via the middleware services layer component, and provides various other services for the applications.",{"@attributes":{"id":"p-0044","num":"0048"},"figref":["FIG. 4","FIG. 4"],"b":["26","26","202","204","206","208"]},"Through the APIs in the middleware services layer component , the mobile terminal platform assembly  supports a plurality of application environments. In the exemplary embodiment of , middleware services layer  supports environments for native applications (applications that are compiled to run with a particular processor and its set of instructions) and for non-native applications such as Java J2ME CLDC\/MIDP (Java 2 Micro Edition Connected Limited Device Configuration\/Mobile Information Device Profile) applications. Each application environment has its own characteristics and is defined as:\n\n","By providing multiple application environment alternatives, a wide range of products with varying demands such as cost, ease of use, time to market, functionality set, size, portability, etc. is facilitated.","Each of the API domains comprises a plurality of software modules, and  is a block diagram that schematically illustrates the major software modules in the Java ExE environment API domain  according to an exemplary embodiment of the present invention. As shown, Java ExE Environment API domain  includes a Java Environment Manager (JEM) module , a Java Application Environment (JAE) module  and a Java Support Layer (JSL) module . JEM module  controls the Java application environment and the Java applications. JAE module  defines the environment within which the Java applications execute, and also contains the Java Virtual Machine (JVM), the J2ME MIDP libraries and the J2ME CLDC runtime libraries. JSL module  comprises a layer between JAE implementation and the mobile terminal platform assembly . It supplies an interface that makes it easier to port third-party Java environments to the platform assembly. JSL module  also contains an adaptation layer between the JVM and the platform assembly, Java VM Support Layer (JVMSL); and the adaptation layer between the CLDC and MIDP API implementation and the platform assembly, Java Library Support Layer (JLSL).",{"@attributes":{"id":"p-0048","num":"0056"},"figref":"FIG. 6","b":["204","220","222","220","206","220","222","222"]},{"@attributes":{"id":"p-0049","num":"0057"},"figref":"FIG. 7","b":["206","206","230","2232","234","236","238"]},"The Native Environment Management module  has the responsibility of controlling native applications in platform system . It is the recipient of the control commands concerning native applications from the Application Manager  (), and keeps track of native applications that are currently running in the system.","The Native Application Core module  administers and takes care of the threading and message handling complexities that the applications would otherwise have to handle themselves. It also serves the purpose of achieving OS independence by hiding the implementation details of the OS for relieving applications from run-time complexities including message routing\/filtering and message-related resource handling. A major responsibility of the Native Application Core is to hide the details of the start-up and shutdown phase of an application and in the handling of messages.","The Middleware Support Services module  provides services to the OPA domain that are common for the different handlers or that need to be centralized, e.g., object management and resource supervision.","The Native Extension Plug-in module(s)  can be seen as an optional extension of the platform assembly functionality through the OPA Interface and Handlers module . These module(s) are subject to the same interface guidelines, paradigms and mechanisms that rule and apply to the OPA Interface and Handlers module . The OPA Native Extension Plug-ins  may only access the platform functionality through the OPA Interface and Handlers module . Several Extension Plug-in modules can simultaneously exist in the system.","The Native Extension Plug-in module(s)  is subject to the following characteristics:\n\n","The UI Tool-kit API domain  supplies a set of visual objects that can be used to build a user interface to an application. These objects are also allowed for use by the Java ExE environment. In addition, the UI Tool-kit API domain provides support for other UI-related functions such as text rendering, input methods and the handling of text resources.","A major function of UI Tool-kit API domain  is to enable faster development of applications by introducing higher level support for frequently needed functions. It also helps maintain common principles for the appearance and behavior of different applications, even those developed independently of one another. Applications may or may not use Tool-kit API domain  to present graphics and to handle user input.  is a block diagram that schematically illustrates the manner in which an application, e.g., a native application  or a Java (non-native) application  can use a UI-server  of the mobile terminal platform assembly  directly through the Open Platform API domain .","If desired, some parts of UI Tool-kit  can be replaced or modified by a user of mobile terminal platform assembly .","The middleware services layer component according to the present invention provides a number of advantages:\n\n","With the middleware services layer component of the present invention, it is also possible for users to add their own interfaces to the platform assembly. This is achieved by the user writing their own plug-ins which will be seen as part of the middleware services layer component from the application's viewpoint. This permits users to tailor the platform assembly to their own needs, and, at the same time, to be able to reuse their applications on new platform assembly configurations.",{"@attributes":{"id":"p-0060","num":"0074"},"figref":"FIG. 9","b":["300","302","304"]},"While what has been described constitutes exemplary embodiments of the invention, it should be understood that the invention can be varied in many ways without departing from the scope thereof For example, although in the exemplary embodiments described herein, the middleware services layer component supports two application environments, other environments can also be supported as needed or desired for particular user applications. Also, although the present invention has been described primarily as being used in a third generation cellular telecommunications system, the invention can also be used in second generation and other cellular telecommunications systems, and in other wireless telecommunications systems such as, for example, a Bluetooth system. Because the invention can be varied in many ways, it should be recognized that the invention should be limited only insofar as is required by the scope of the following claims."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EXEMPLARY EMBODIMENTS OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4","FIGS. 1-3"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 7","FIG. 4"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 8","FIGS. 1-3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
