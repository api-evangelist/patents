---
title: Dynamic generation of tests
abstract: Generation of a test based on a test template comprising of branch instructions. The test template may be a layout test template, defining a set of possible control flows possibilities between template instructions in the layout test template. The test is generated by a test generator which may simulate a state of a target computerized system executing the test. The simulation may be performed during generation of the test. The test generator may further verify previously generated instructions. The test generator may further generate instructions associated with leftover template instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08438000&OS=08438000&RS=08438000
owner: International Business Machines Corporation
number: 08438000
owner_city: Armonk
owner_country: US
publication_date: 20091129
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present disclosure relates to verification of computerized systems, in general, and to generating tests based on test templates in particular.","Computerized devices control almost every aspect of our life\u2014from writing documents to controlling traffic lights. However, computerized devices are bug-prone, and thus require a testing phase in which the bugs should be discovered. The testing phase, also referred to as verification phase, is considered one of the most difficult tasks in designing a computerized device. The cost of a bug may be enormous, as its consequences may be disastrous. For example, a bug may cause the injury of a person relying on the designated behavior of the computerized device. Additionally, a bug in hardware or firmware may be expensive to fix, as patching it requires call-back of the is computerized device. Hence, many developers of computerized devices invest a significant portion, such as 70%, of the development cycle to discover erroneous behaviors of the computerized device.","A test template, comprising several template instructions, may be designed in order to test an aspect of a target computerized system. The test template may be utilized by a generator that generates several tests that are in line with the test template. The test may be, for example, a binary file or an assembler program that is configured to perform actions defined in the test template.","A generator may iterate over template instructions in the test template, in a predetermined order. For each template instruction, the generator may generate a corresponding one or more test instruction.","One exemplary embodiment of the disclosed subject matter is a computerized apparatus comprising: a processor; an interface for obtaining a test template associated with a target computerized system, the test template comprises a plurality of template instructions; a test generator configured to generate a test associated with the test template obtained by the interface, the test generator comprises: a state simulator configured to determine a state of the target computerized system associated with an execution of the test; a template instruction selector configured to select a template instruction from the test template based on the state of the target computerized system determined by the state simulator; an instruction generator configured to generate an instruction based on the state of the target computerized system and the template instruction selected by the template instruction selector.","Another exemplary embodiment of the disclosed subject matter is a method in a computerized environment, the method comprising: obtaining a test template associated with a target computerized system, the test template comprises a plurality of template instructions; generating a test associated with the test template, the generating the test comprising: simulating a state of the target computerized system associated with an execution of the test; selecting a template instruction from the test template based on the state of the target computerized system; generating an instruction based on the state of the target computerized system and the template instruction; whereby the test template is transformed to the test configured to be executed by the target computerized system.","Yet another exemplary embodiment of the disclosed subject matter is a computer program product comprising: a computer readable medium; a first program instruction for obtaining a test template associated with a target computerized system, the test template comprises a plurality of template instructions; a second program instruction for simulating a state of the target computerized system associated with an execution of the test; and a third program instruction for generating a test associated with the test template, the third program instruction comprising: fourth program instruction for selecting a template instruction from the test template based on the state of the target computerized system; and fifth program instruction for generating an instruction based on the state of the target computerized system and the template instruction; wherein the first, second third, fourth and fifth program instructions are stored on the computer readable medium.","The disclosed subject matter is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the subject matter. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","One technical problem dealt with by the disclosed subject matter is to generate a test based on a test template. Another technical problem dealt with by the disclosed subject matter is to utilize a simulated state of a target computerized system during generation, such that the test is directed to inspect some behaviors of the target computerized system, such as for example behaviors that may cause a bug, behaviors that include a predetermined scenario, such as involving exceptional parameters, behavior or the like. Yet another technical problem dealt with by the disclosed subject matter is to allow for a layout generation of a test template. A layout generation may enable the designer of the test template to rely on a layout of the test template as a layout of the test. Layout generation may be useful for tests that comprise repetitive behaviors, such as a loop. Yet another technical problem dealt with by the disclosed subject matter is to generate an instruction that is valid in respect to two or more different states of the target computerized system.","One technical solution is a test generator comprising a state simulator utilized for simulating a state of a target computerized system executing a generated test and a template instruction selector for selecting a template instruction to be translated to an instruction. Another technical solution is to iterate over the template instruction in respect to the simulated state and to generate instructions in that order. Yet another technical solution is to determine whether an already generated template instruction is encountered and to verify that the corresponding generated instruction is an instruction that may have been generated by the test generator in respect to a current simulated state.","One technical effect of utilizing the disclosed subject matter is automatically generating a test based on a test template. Another technical effect is automatically generating a test that utilized an expected state of a target computerized system such that the generated instructions are configured to be associated with some aspects of the target computerized system. Yet another technical effect is modifying a gap of instructions in a test.","Referring now to  showing a computerized verification environment in which the disclosed subject matter is used, in accordance with some exemplary embodiments of the subject matter. A computerized verification environment  may comprise a test template , a test generator  and a simulator .","The test template  may be a set of definitions that are configured to determine a test associated with a target computerized system . The test template  may be a layout test template. The test template  may comprise a set of template instructions. A template instruction (not shown) may define a set of one or more possible instructions, such as different types of instructions, accessing different resources (such as different memory addresses), having different parameters and the like. A template instruction may be for example \u201crandom instruction\u201d, which may define any valid instruction. A template instruction may be \u201cADD R R+R\u201d which may define an addition instruction that adds values of registers. A template instruction may be \u201cLOAD R MEM[R+displacement]\u201d which may define a loading of memory to R register from a memory location defined by some random displacement from the value of register R. It will be noted that some of the instructions defined by a template instruction may differ in number of bits, such as for example a LOAD operation may be defined to load 8 bits or alternatively 16 bits. A template instruction may be \u201cconditional branch\u201d which may define any conditional branching instruction. The template instruction may or may not be provided with a target address or label.","In some exemplary embodiments, the target computerized system may be a Processor, a Central Processing Unit (CPU), a microprocessor, an electronic circuit, an Integrated Circuit (IC), a mobile phone, a cellular device, a Personal Digital Assistant (PDA), hardware, software, firmware or the like.","In some exemplary embodiments, the test generator  may generate a test  based on the test template . The test generator  may generate a test  that is configured to inspect some aspects of the target computerized system , such as for example invoking page fault behavior, initiating specialized behaviors in a cache, triggering optimization logic in an instruction scheduling or the like. It will be noted that the some aspects of the target computerized system  may be exceptional or deemed interesting by a developer, verification engineer or the like. The some aspects of the target computerized system  may be behaviors that are likely to involve an error.","In some exemplary embodiments, the test generator  may comprise a simulator . The simulator  may simulate a state of the target computerized system . The simulator  may simulate an execution of the test , or a portion of the test , by the target computerized system . The test generator  may utilize the simulator  to determine a state of the target computerized system  after executing a generated portion of the test . The state of the target computerized system  may be utilized in generating additional portion of the test , such as a next instruction about to be executed by the target computerized system  according to the state determined by the simulator .","In some exemplary embodiments, the test generator  iteratively generates an instruction in respect to a single template instruction, determines a state of the target computerized system  executing the generated instruction, an continues generation of a next template instruction, according to the state of the target computerized system .","In some exemplary embodiments, the test generator  may further execute the test  on the target computerized system . The test generator  may execute the test  after completing generation of the test . In some exemplary embodiments, several tests are generated and may be executed on the target computerized system .","Referring now to  showing a block diagram of a verification device in accordance with some exemplary embodiments of the disclosed subject matter. A verification device  may comprise a test generator , such as  of , which may comprise a state simulator , such as simulator  of .","The verification device  may further comprise an interface . The interface  may be configured to receive, retrieve or otherwise obtain a test template , such as  of . The interface  may be an Application Programming Interface (API), a socket or other I\/O capable module.","In some exemplary embodiments, the verification device  comprises a processor . The processor  may be a Central Processing Unit (CPU), a microprocessor, an electronic circuit, an Integrated Circuit (IC) or the like. The processor  may be utilized to perform computations required by the verification device  or any of it subcomponents.","For example, the test template  may be comprised of the following template instructions:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1: Generate","{COMPARE}"]},{"entry":["2: Generate","{CONDITIONAL BRANCH} with {target = ELSE}"]},{"entry":["3: Repeat","{times in [1, 10]}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Generate {random instruction}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"4: Generate {BRANCH} with {target = END}"},{"entry":"5: ELSE:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Repeat {times=5}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Generate {random instruction} with {exception}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The test generator  may be configured to generate a test based on the test template . The test generator  may be configured to generate a test based on a layout test template. The test generator  may be configured to provide for a dynamic test generation, taking into account an expected state of the target computerized system executing the test, in order to generate the test such that some aspects of the target computerized system may be inspected.","In some exemplary embodiments, the state simulator  may be configured to simulate an execution of a test. The state simulator  may be implemented in hardware, software, firmware, combination thereof or the like. The state simulator  may determine a state of the target computerized system executing one or more instructions. For example, the state may include values to various variables, such as for example registers, program counter and the like, content of memory space, memory addresses, content of caching system and the like. A value of a program counter, instruction pointer or a similar next instruction indicator variable may indicate a next instruction to be performed by the target computerized system in a next cycle. The state simulator  may be configured to be suspended after execution of one or more instructions. The state simulator  may further execute one or more additional instructions after being deemed as no longer suspended. The state simulator  may be configured to initially simulate an initial state of the target computerized system upon booting, loading a test or the like.","In some exemplary embodiments, the test generator  may comprise a template instruction selector . The template instruction selector  may be configured to select a template instruction from the test template  in accordance with the state of the target computerized system. The state of the target computerized system may be determined by the simulator . The template instruction may be selected based on a value of a next instruction indicator such as for example a program counter, an instruction pointer or the like. The next instruction indicator may indicate which instruction is deemed to be executed next by the target computerized system. Referring to the aforementioned exemplary test template, after executing an instruction associated with the second template instruction, the next instruction indicator may point to a successive instruction associated with the third template instruction, or to a different instruction associated with the fifth template instruction (i.e., associated with the ELSE label). The value of the next instruction indicator may depend on a value evaluated after executing an instruction associated with the first template instruction. The value of the next instruction indicator may depend on determination whether or not the conditional branch is taken, which may be based on an output of a comparison instruction, generated based on the first template instruction. The template instruction selector  may determine a template instruction that is associated with an instruction that is deemed to be executed next by the next instruction indicator. The template instruction selector  may select, for example, the third template instruction or the fifth template instruction.","In some exemplary embodiments, the test generator  may comprise an instruction generator . The instruction generator  may generate one or more instructions based on a template instruction. The instruction generator  may utilize a state of the target computerized system to generate the one or more instructions. The state may be determined by the state simulator . The instruction generator  may generate an instruction that is configured to test some aspects of the target computerized system, such as causing page faults, division by zero, raising exceptions and the like. The instruction generator  may utilize the state of the target computerized system to determine which instruction to generate, which parameters to provide the instruction or the like. In some exemplary embodiments, the state of the target computerized system prohibits a generation of an invalid instruction, such as accessing an invalid section of the memory space, or instructions that may be illegal instruction in a mode of the computerized system, such as an expected mode of the computerized system while executing the test or the like. The instruction generator  may generate a test comprising the instructions.","In some exemplary embodiments, the test generator  may comprise a gap size determinator . The gap size determinator  may be configured to determine a number of instructions between two template instructions. For example, the gap size determinator  may determine that there may be five instructions between the second test template and the fifth test template. It will be noted that the gap size determinator  may determine a number of instructions that is an approximation of the correct number of instructions. The gap size determinator  may determine a number of instructions based on an exemplary generation of instructions based on the template instructions between the two template instructions. The gap size determinator  may be utilized in case a template instruction selector  determines a next template instruction is not a consecutive template instruction, such as in case of branch instruction being taken. The determination of the gap size determinator  may be utilized by the instruction generator  to determine a location within the test to add an instruction the instruction generator  generates. For example, in case the gap is of five instructions, the instruction generator  may leave space for five instructions between an instruction associated with a first of the two template instructions and an instruction associated with the second of the two template instructions. It will be noted that a portion of the space may already be occupied by instructions previously generated by the instruction generator . It will be noted that in a test a location of an instruction may be important as the location may be associated with an address which may be utilized in some instructions.","In some exemplary embodiments, the test generator  may comprise a gap modifier . The gap modifier  may be configured to modify a gap of space for instructions left. The gap modifier  may extend the gap or shrink the gap, as required.","The gap may be modified to include additional space by adding a branching instruction to a designated memory space or region in which additional instructions may be added. A last instruction in the designated memory space may be a branching instruction to a location in the gap, immediately after the gap or the like. For example, a space of five instructions may be utilized to effectively occupy ten instructions by, for example, using the space for four instructions and a branching instruction to the designated memory space; using the designated space for the rest of the instructions (six instructions) and for a branching instruction to an address immediately after the gap. It will be noted that the designated memory space may be a memory space which may be reserved to extending a gap. The designated memory space may partitioned to comprise several such extensions to different gaps.","The gap may be modified to include less space (also referred to as shrinking the gap), by utilizing a branching instruction inside the gap, by adding empty instructions or the like. Empty instructions, such as a \u201cno op\u201d instruction may be configured to be avoided by the target computerized system such that they do not alter the state of the target computerized system except for the next instruction indicator. In some exemplary embodiments, a preprocessing step may be performed to eliminate the \u201cno op\u201d instructions. The gap may be shrinked by utilizing a branching instruction from a first instruction to a second instruction, such that the instructions between the first and second instructions may not be executed.","In some exemplary embodiments, the test generator  may comprise an instruction verifier . The instruction verifier  may verify that a generated instruction is in line with a state of the target computerized system. The generated instruction may be previously generated by the instruction generator . The generated instruction may be associated with a template instruction. The template instruction may be selected by the template instruction selector  based on the state of the target computerized system. In some exemplary embodiments, as the generated instruction is already generated, there is no need that the instruction generator  generate any instruction associated with the template instruction. The instruction verifier  may verify that that generated instruction is a valid instruction in respect to the current state of the target computerized system, as may be determined by the state simulator . For example, the generated instruction may be valid in a first mode of the target computerized system and invalid in a second mode of the target computerized system. The generated instruction may be generated in respect to a previous state of the target computerized system, in which the target computerized system is in the first mode. The instruction verifier  may determine that the generated instruction is invalid in case the target computerized system is in the second mode in the current state. In some exemplary embodiments, the test generator  may revoke the generated instruction. In some exemplary embodiments, the test generator  may generate additional instruction that may be configured to handle the generated instruction in the second mode, such as for example by handling an exception that may be raised.","In some exemplary embodiments, the test generator  may comprise a backtracking module  configured to revoke one or more instructions. The backtracking module  may revoke the one or more instructions based on a determination by the instruction verifier  that a generated instruction is not a valid instruction. The backtracking module  may be utilized in case the instruction generator  determines that no valid instruction may be generated, such as for example, in case of a parameter determined by the template instruction that has a value that prevents any generated instruction to be valid. For example, a template instruction defining a branching operation to an address stored in a register may not be valid in case the content of the register is not a valid address. The backtracking module  may revoke one or more instructions previously generated by the instruction generator  in order to backtrack to a state in which a different generation may heal the cause that required the backtracking, such as an invalid instruction that was previously generated. The backtracking may achieve this goal by, for example, generating a different instruction instead of the generated instruction or replacing other instructions such that the state of the target computerized system may be modified. Referring again to the template instruction defining a branching operation to an address stored in a register, a content of the register may be modified by modifying instructions that affected the value of the register.","In some exemplary embodiments, the test generator  may comprise a leftover template instruction generator . The template instruction generator  may be configured to generate instructions associated with template instruction in the test template  which are designated, based on the state of the target computerized system, not to be executed. For example, referring back to the aforementioned exemplary test template, in case a branching instruction associated with the second template instruction is determined to cause a jump to the ELSE label, the third and fourth template instructions may not be generated. In such a case, a gap may be left, as determined by the gap size determinator . After it is determined that an execution of a test generated in respect to the test template  is completed, for example by the state simulator , the leftover template instruction generator  may determine whether a portion of the test template  was not utilized in the generation process, and is therefore deemed as leftover template instruction. The leftover template instruction generator  may generate instructions associated with the leftover template instruction. The leftover template instruction generator  may generate instructions in a similar manner to the instruction generator . The leftover template instruction generator  may generate instructions based on the test template such that the generated instructions are in line with the test template. In some exemplary embodiments, the leftover template instruction generator  may generate invalid instructions that may or may not be in line with the leftover template instructions. The invalid instructions may be useful to increase quality of the test. For example, in some cases, a target computerized system may tentatively perform instructions before verifying that they should be performed. Once a determination is made that the instructions should not be executed, the outcome of its tentative execution is omitted. In case there is a bug in the target computerized system an invalid instruction may be erroneously performed, enabling personnel verification engineer to detect the bug during verification.","In some exemplary embodiments, the verification device  may comprise an execution module . The execution module  may be utilized to execute the test on the target computerized system. The execution module  may be configured to execute the test once generation of the test by the test generator  is completed.","Referring now to  showing a flowchart diagram of a method in accordance with some exemplary embodiments of the disclosed subject matter.","In step , a test template, such as  of , may be obtained. The test template may be obtained by an interface, such as  of .","In step , a template instruction from the test template may be selected. The template instruction may be selected by a template instruction selector, such as  of .","In step , a determination is made whether the template instruction was previously processed or not. In case the template instruction was not already processed, step  may be performed. In case the template instruction was previously processed, an a generated instruction was generated in respect to the test template, step  may be performed.","In step , a gap between a first template instruction and a second template instruction may be adjusted. The first template instruction may be a template instruction selected in step  in a preceding iteration of the exemplary method. The second template instruction may be the template instruction selected in step  in the current iteration. A size of a gap may be determined by a gap size determinator, such as  of . A gap may be extended or shrinked by a gap modifier, such as  of . A size of gap may be determined in case of a branching operation or a similar jumping instruction to a non-sequential template instruction. A gap may be modified in case of a former gap that was left and is being utilized for generation of instruction associated with the current template instruction.","In step , an at least one instruction associated with the template instruction may be generated. The at least one instruction may be generated based on state of a target computerized system executing the test. The at least one instruction may be generated by an instruction generator, such as  of .","In step , a generated instruction may be verified in respect to a current state of the target computerized system. The generated instruction may be verified by an instruction verifier, such as  of .","In step , backtracking may be performed in case needed. The backtracking may be performed by a backtracking module, such as  of . The backtracking may revoke one or more generated instructions, modify the state to a state before the execution of the revoked one or more generated instructions.","In step , which may be performed after step  or step , a state of a target computerized system executing the test is simulated. The state may be simulated incrementally, by starting with a state before execution of the instruction associated with the template instruction selected in step , and modifying the state by executing the instruction associated with the template instruction. The state may be simulated by a state simulator, such as  of . It will be noted that the state of the target computerized system may initially be set to an initial state, associated with a boot of the target computerized system, loading of a test or the like.","In step  a determination is made whether the execution of the test completed. The determination may be based on the state of the target computerized system. The determination may be based on the test template and whether additional template instructions exist.","In step , leftover template instructions may be identified. In some exemplary embodiments, generation of instructions associated with the leftover template instructions may be performed. Step  may be performed by a leftover template instruction generator, such as  of .","In step , the test, as generated by the method, may be executed by the target computerized system. The test may be executed by an execution module, such as  of .","In some exemplary embodiments, generation of instructions may be affected by the type of instruction. A template instruction which includes a non-branching instruction may be processed by generating associated instruction and simulating the execution of the associated instruction. A template instruction which includes a label definition may be processed by further associating the next instruction indicator with the label. Such a label may be referred to as a defined label. A template instruction which includes a branching instruction to a defined label, may be processed by generating a branch instruction to the address associated with the defined label and by executing the branch instruction. The next template instruction to be processed may be either the branch target or the next instruction addresses, depending on the outcome of the execution of the branch. A template instruction which includes a branch to an undefined label may be processed by associating each template instruction between the template instruction and a label definition of the undefined label with a memory location, such that the label may be defined. After aforementioned association of template instructions and memory locations, the template instruction may be further processed as a template instruction including a branching instruction of a defined label.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of program code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","As will be appreciated by one skilled in the art, the disclosed subject matter may be embodied as a system, method or computer program product. Accordingly, the disclosed subject matter may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer-usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, and the like.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"THE BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The present disclosed subject matter will be understood and appreciated more fully from the following detailed description taken in conjunction with the drawings in which corresponding or like numerals or characters indicate corresponding or like components. Unless indicated otherwise, the drawings provide exemplary embodiments or aspects of the disclosure and do not limit the scope of the disclosure. In the drawings:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
