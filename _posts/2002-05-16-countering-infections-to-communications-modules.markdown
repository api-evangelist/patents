---
title: Countering infections to communications modules
abstract: Methods, apparati and computer readable media for countering malicious code infections that spread from a first computer to a second computer. A searching module () searches for a communications module () within the first computer (()). An examining module () examines a function location directory () within the communications module (). A locating module () locates a send function within the function location directory (). A declaring module () declares the presence of malicious code when the function location directory () states that the send function is slated to start executing at a non-normal location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07155742&OS=07155742&RS=07155742
owner: Symantec Corporation
number: 07155742
owner_city: Cupertino
owner_country: US
publication_date: 20020516
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention pertains to the field of countering infections to computer systems caused by malicious code such as computer worms.","As used herein, \u201cmalicious code\u201d is any computer program, module, or piece of code that enters a computer system without the authorized user's knowledge and\/or without the authorized user's consent. The term \u201cmalicious code\u201d includes viruses, Trojan horse programs, and worms. The malicious code may or may not have the ability to replicate itself.","This invention has particular applicability to malicious code that has the ability to replicate itself from one computer to another, e.g., over a computer network. The computer network may be a closed proprietary network or an open network such as the Internet. Such malicious code is often referred to as a \u201cworm\u201d. Szor, Peter, \u201cAttacks on Win32\u201d, , October 1998, England, and Szor, Peter, \u201cAttacks on Win32\u2014Part II\u201d, Virus Bulletin Conference, September 2000, England, describe various attacks by malicious code, including worms, on computer systems, with particular applicability to the Win32 API (Application Programming Interface).","The present invention comprises methods, apparati, and computer readable media for countering malicious code infections that spread from a first computer to a second computer. A preferred embodiment of the inventive method comprises the steps of:","searching () for a communications module () within a first computer (());","examining () a function location directory () within the communications module ();","locating () a send function within the function location directory (); and","declaring the presence of malicious code when the function location directory () states that the send function is slated to start executing at a non-normal location.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["1","2","1","1","3","4","1","1","1","2","4","3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":["20","1","1","1","1","1","4","20"]},"Module  may be a DLL (Dynamic Link Library) such as WSOCK32.DLL. \u201cSOCK\u201d stands for \u201csocket\u201d as in SSL (Secure Socket Layer), i.e., an Internet Protocol interface used for communications. WSOCK32.DLL is independent of any particular communications card. A DLL contains a plurality of items that are used in common by several applications. The purpose of such a DLL is to save memory space within computer . One DLL may contain one or more APIs (functions) or partial APIs. A DLL can contain executable files and data files, usually in PE format.","The method of operation for spreading the malicious code may be that the malicious code attaches a \u201chook\u201d (extraneous code) onto at least one API in the WSOCK32.DLL of the host computer (). The hook may cause the recipient computer , to get an extraneous message in an e-mail received from the host computer (). The user of the recipient computer , then clicks on the extraneous message, which causes the recipient computer's WSOCK32.DLL  to become infected in the same manner as the host computer () became infected.","A file header  is present within file . File header  contains a listing of each section within file  and its location within file , usually expressed as an offset from the beginning of file . File  normally contains one or more code sections ,, one or more data sections ,, an import directory table , and an export directory table .","Each section \u2013 within file  contains a header, which gives, among other information, the size of useful information contained within that section. This enables the identification of slack regions within the section. A slack region is a region that does not contain useful information. For example, a slack region may contain all zeroes, all ones, or a combination of zeroes and ones devoid of meaning and signifying nothing. The reason that slack regions exist is that a section normally comprises a discrete number of sectors having fixed length, e.g., 512 bytes, and only by sheer coincidence would the size of the useful information be an exact multiple of 512 bytes.","In the communications module  illustrated in , there are two code sections ,  and two data sections , . In a given communications module , there can be an arbitrary number of code sections and an arbitrary number of data sections.","Export control directory  is a special case of a \u201cfunction location directory\u201d. A function location directory is a section within module  that lists functions (and the locations of these functions) used by module  in linking with other files, such as executable programs. The file to which module  is linked will have a matching import directory table. Similarly, import directory table  is used for linking with an external file, and matches to a corresponding export directory table within that file.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3","b":["27","20","20"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 3"],"b":["22","25","25"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 4","FIG. 4","FIG. 5","FIG. 5"],"b":["51","56","51","56","60"]},"The method begins at step  with searching module  searching through all or a preselected subset of the files of computer , seriatim. At step , searching module  asks whether there are any such files that are yet to be searched. If there are not any such files, the method ends at step . If there are such files, i.e., searching module  has a current file to operate on, module , at step , asks whether the file being operated on contains a communications module . This determination is preferably made by module  first determining whether there is a function location directory (such as export directory table ) within the module , and, if so, by looking for specific names (such as WSOCK32.DLL) of known communication modules  in the header of the function location directory . In an alternative embodiment, searching module  looks for specific names (such as WSOCK32.DLL) of known communications modules  in the header of the file . The reason that it is preferred to look in the header of the function location directory  rather than in the header of the file  is that it is more common for nefarious persons to deceitfully change the header of the file  than to deceitfully change the header of the directory .","If the file being operated upon does not contain a communications module , the method proceeds to step , where searching module  searches the next file within computer , and then to step .","If the file being operated upon contains a communications module , control passes to examining module . At step , examining module  examines the function location directory (e.g., export directory table ) within the communications module . Control then passes to locating module , which, at step , locates the send function that is normally present within any communications module . In a Win32 API, the send function is located by name, i.e., export directory table  contains the word \u201cSEND\u201d. In other operating system environments, the send function may be identified by other means, e.g., a hexadecimal identifier. \u201cSend function\u201d is used in this specification (including claims) in a general sense, and is meant to encompass similar functions that are not labeled \u201cSEND\u201d as such, e.g., functions that may be labeled \u201cEXPORT\u201d, \u201cATTACH\u201d, \u201cBIND\u201d, \u201cMAIL\u201d, etc.","Control then passes to declaring module , which, at step , inquires as to whether the address for the send function, as specified in directory , is a non-normal address, i.e., directory  gives as a starting address for the function a location that is not the normal starting location for that function. As used herein, a \u201cnon-normal location\u201d can be one of three things:","1) An address within a slack region of a code section , within the communications module .","2) An address within a section (e.g., , , , ) of the communications module that is not a code section ,.","3) An address completely outside the communications module .","In alternative embodiments, only one or two, rather than three, of the above criteria are used in deciding whether a certain starting address is a \u201cnon-normal\u201d location.","If declaring module  determines at step  that the starting address for the send function is a normal location, i.e., one not satisfying the above definition of a non-normal location, control is passed to step , i.e., the communications module  being operated upon is deemed to not contain malicious code. If, on the other hand, declaring module  determines that the starting address of the send function is a non-normal location, control is passed to step , or, in an embodiment where optional steps  and  are present, to optional step . At step , declaring module  inquires as to whether the address of the send function is completely outside the confines of communications module . This corresponds to criterion  within the above definition of \u201cnon-normal location\u201d. If the answer is no, it is known that either criterion  or criterion  of the above definition has been satisfied, and, at step , module  makes a determination that module  has been attacked by malicious code. This determination may be flagged to the operator of computer ().","Control then passes to optional scanning module , which may be an anti-malicious code scan engine. At optional step , module  scans the code comprising the send function to confirm that malicious code is present therein. This confirmation can be achieved by any one of a number of techniques, or by a combination of techniques. For example, if a certain section of code is found by scanning module  to coincide with a characteristic signature of known malicious code, the declaration of malicious code made in step  is confirmed. If, on the other hand, evidence is found indicating or suggesting that malicious code is not after all present in the send function, the declaration of malicious code made in step  is deemed to be erroneous and is rescinded in step . Such evidence might comprise one or both of the following items:","1) The send function, while starting at a non-normal location, starts with a jump instruction jumping control to a normal start location for a send function. This is evidence of repaired code, rather than malicious code.","2) The send function contains a large number of zeroes and\/or NOPs (no operations). Again, this is evidence of repaired code, rather than malicious code.","Control then passes to excising module , which, at optional step , excises the malicious code from within the send function, if the declaration of malicious code hasn't been rescinded in step . As used herein, \u201cexcise\u201d is used in a broad sense, and encompasses any repair of the send function such that the malicious code is no longer able to harm computer (). The method then proceeds to step . It should be noted that step  may be present even if step  is not present. With respect to , excising module  may be present even when scanning module  is not present. In such a case, excising module  is coupled to declaring module  directly, rather than through scanning module .","If the answer to the question in step  is \u201cyes\u201d, i.e., criterion  has been satisfied, two different things may happen. In a first embodiment, declaring module  at step  reports the file containing communications module  as being corrupted rather than as being infected with malicious code, on the theory that it is so unusual for the starting address of the send function to be completely outside module  that a typical virus writer would not do this. The method then proceeds to step . In a second embodiment (not illustrated), declaring module , at step , reports the module  as containing malicious code, as in step . As a sub-embodiment to the second embodiment, steps  and  are not present at all, i.e., no distinction is made as to whether the \u201cnon-normal location\u201d satisfies criterion , , or .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["60","51","56","51","52","53","54","55","56"]},"The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the art that would yet be encompassed by the spirit and scope of the present invention. For example, instead of basing the declaration of malicious code upon the condition that the starting address of a send function is a non-normal location, the basis for declaring malicious code could be that another function, e.g., a receive function, a bind function, or a connect function, is stated to have, within function location directory , a starting address that is non-normal."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other more detailed and specific objects and features of the present invention are more fully disclosed in the following specification, reference being had to the accompany drawings, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2","b":"20"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3","b":"27"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5","b":["51","56"]}]},"DETDESC":[{},{}]}
