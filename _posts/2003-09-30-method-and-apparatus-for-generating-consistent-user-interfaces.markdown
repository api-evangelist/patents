---
title: Method and apparatus for generating consistent user interfaces
abstract: A method is disclosed for generating a consistent user interface for an HTML-based application program, without extensive coding of Java Server Pages and other elements. In one approach, business objects each define a user action for the application program, and metadata elements defining parameters for the user actions of the business object. A controller is communicatively coupled to one or more actions, widgets, and panels. A user request is received from a browser and dispatched to one or the actions. Using the actions, one or more parameter values are obtained from the business objects. The business object parameter values are associated with a widget selected from among the one or more widgets. The selected widget is associated with a panel selected from the one or more panels. An HTML user interface page that includes the selected panel is generated. The widgets represent properties of the business objects as HTML elements, automatically generate client-side executable code for performing data validation, and convert values received in users requests into programmatic objects of appropriate data types for use by the application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07873908&OS=07873908&RS=07873908
owner: Cisco Technology, Inc.
number: 07873908
owner_city: San Jose
owner_country: US
publication_date: 20030930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","1.0 General Overview","2.0 Structural and Functional Overview","3.0 Implementation Example","4.0 Implementation Mechanisms","Hardware Overview","5.0 Extensions and Alternatives"],"p":["The present invention generally relates to user interface aspects of computer systems. The invention relates more specifically to a method and apparatus for generating consistent user interfaces","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction of the patent disclosure, as it appears in the Patent & Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. Copyright\u00a9 2003 Cisco Systems, Inc.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","Developing a user interface for a Java\u00ae-based computer application for use by an HTML browser typically involves several tasks. In general, for each user operation that can be performed in the user interface, a JSP page is created to collect user data; JavaScript is created to perform client-side data validation, such as verifying that a valid date value is entered in a date field; and Java code in the form of servlets or action classes is written to process the user data. Programmers and software developers can use several existing tools to facilitate each of the above steps. For example, Macromedia Dream Weaver supports JSP page layout, design, and in developing JavaScript code. Tools such as Visual Caf\u00e9 or Borland JBuilder are used for developing Java code.","However, certain complex computer applications, such as network management systems, may support hundreds of different user operations, which require development of several hundreds of JSP pages and Java classes. The large number of JSP pages and Java code linked with the JSP pages not only increases development time, but also poses a serious problem in managing consistent development of the application or software product. In HTML\/JSP environments, there are no predefined layouts for arranging graphical user interface data entry elements (\u201cwidgets\u201d) such as text boxes, combo boxes, checkboxes, etc. Instead, components are arranged within an HTML page using the HTML <table> tag, and such arrangement has to be done manually. This is tedious and time-consuming.","Moreover, since the JSP pages are hand coded for every operation, various pages of the completed application may have an inconsistent look and feel. This problem is compounded when multiple applications interact to form a more complex system, such as an integrated network management product that provides configuration, fault monitoring, reporting, functions, etc. To address the problem with consistent look and feel, some developers follow JSP templates, and use the templates with tools such as Macromedia Dreamweaver. However, this approach does not provide dynamic content generation capabilities and it does not address the problem of having an excessive number of JSP pages.","Thus, typical JSP development involves using custom tags to perform UI related logic. These tags help in hiding the Java\u00ae code so that a JSP page looks more like an HTML page that can be constructed using tools such as Dreamweaver. This approach is considered to enhance readability and maintainability of JSP pages; however, the tags are processed by a JSP container object, and are not flexible enough to be manipulated programmatically, and thus are not very suitable for dynamic generation of a UI.","Further, in today's business environment, achieving minimum time-to-market for a software product, software quality, total software maintenance cost and consistency in the look and feel of applications are essential contributors to overall profitability and higher customer satisfaction. Based on the foregoing, there is a need for a mechanism designed to address these problems.","In a variation of the development approach described above, known as MVC or the Model, View, Controller approach, JSP is mainly used for presentation of information, and servlets are used for processing logic. The Apache Struts framework is based on MVC architecture, and also provides a controller servlet that processes HTTP requests from a browser, and invokes appropriate action classes or JSP pages. This approach helps separate processing logic into action classes, thereby making the code more readable and maintainable. Further, the Apache Struts framework provides a set of tag libraries that can be used in developing JSP pages. These tag libraries help in further separating the Java code from JSP pages. However, Apache Struts does not address the issue of the number of JSP pages required by an application for its user interface. Additionally, the Apache Struts approach requires the developer to resolve the task of maintaining a consistent look and feel.","To address the problem of consistency among various company applications, the Enterprise Management Business Unit (EMBU) of Cisco Systems, Inc., San Jose, Calif., has proposed a solution consisting of a set of user interface guidelines and an associated framework. The guidelines, internally known as Picasso, provide a standard for the navigation and for use of various user interface elements. The guidelines help in standardizing the navigation of a GUI, while enabling a developer to determine the specific content of the user interface. As a result, the user interface look and feel is likely to be inconsistent. The framework, termed the UII or User Interface Infrastructure, is based on Apache Struts but follows the Picasso guidelines. The UII framework automates the navigational flow of an application, and provides JSP tags to help develop the content area, but it does not help in reducing the number of JSP pages.","With Picasso, XML documents termed site map XML drive user navigation of application pages. For the content area of an application, Picasso provides tag libraries similar to what Struts already provides, but adds additional tags such as paging table, scrolling table, dialog box, date\/time field, etc. However, the developer is required to use the tag libraries in JSP pages created by the developer, and the developer is required to connect the tag libraries with the back end program components using Action classes or Bean classes.","Using Picasso with UII, a developer performs the following steps to create a user interface for an application. First, the developer defines Struts XML files and sitemap XML files. Second, the developer manually creates JSP pages for the content areas of the application. Third, the developer defines a FormBean class, or the equivalent, to hold user interface data for each data entry field. Fourth, the developer creates an Action class for each operation on the HTML page. Fifth, the developer writes business logic to implement each user interface action. A key disadvantage of this approach is that each JSP page for the content areas is created manually.","A method and apparatus for generating consistent user interfaces is described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Embodiments are described herein according to the following outline:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1.0","General Overview"]},{"entry":[{},"2.0","Structural and Functional Overview"]},{"entry":[{},"3.0","Implementation Example"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3.1","Struts Configuration"]},{"entry":["3.2","Custom Tags"]},{"entry":["3.3","Developing Content; Performing Client-Side"]},{"entry":[{},"Content Manipulation and Validation"]},{"entry":["3.4","Metadata Definitions"]},{"entry":["3.5","Process Flow during User Interactions"]},{"entry":["3.6","Security Interfaces"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"4.0","Implementation Mechanisms - Hardware Overview"]},{"entry":[{},"5.0","Extensions and Alternatives"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The needs identified in the foregoing Background, and other needs and objects that will become apparent for the following description, are achieved in the present invention, which comprises, in one aspect, a method for generating a consistent user interface. For example, a method for generating a consistent user interface for an HTML-based application program, without extensive coding of Java Server Pages and other elements, is provided. Business objects each define a user action for the application program, and metadata elements defining parameters for the user actions of the business object. A controller is communicatively coupled to one or more actions, widgets, and panels. A user request is received from a browser and dispatched to one or the actions. Using the actions, one or more parameter values are obtained from the business objects. The business object parameter values are associated with a widget selected from among the one or more widgets. The selected widget is associated with a panel selected from the one or more panels. An HTML user interface page that includes the selected panel is generated. The widgets represent properties of the business objects as HTML elements, automatically generate client-side executable code for performing data validation, and convert values received in users requests into programmatic objects of appropriate data types for use by the application program.","In other aspects, the invention encompasses a computer apparatus and a computer-readable medium configured to carry out the foregoing steps.","According to one embodiment, a mechanism and framework are provided for dynamically generating a web-based user interface for network management applications. In this embodiment, a system for generating consistent user interfaces comprises a mechanism based on business-level objects, each of which bundles several managed objects. The managed objects each consist of one or more parameters, which can be defined in metadata or constructed programmatically. The system further comprises a framework that can dynamically generate a web user interface for performing various user actions for a given service object in a consistent manner.","In one embodiment, the system provides dynamic content generation, dynamic content manipulation, dynamic layouts, and extensibility.","Dynamic content generation means that the system generates a web-based user interface dynamically based on the data supplied to it from the service objects. The service objects can be defined entirely in the metadata, so that a complete user interface is generated automatically by the system without writing program code to generate the user interface. Further, in a Java\u00ae embodiment, the system relieves a software developer from needing to know details of Java Server Pages (JSPs), servlets, and HTML when developing a web user interface (UI).","Dynamic content manipulation means that the system uses a widget-based approach, rather than using custom tags in JSPs. Each widget is a programmatic object that renders the user interface for parameters that are defined in a service object. Based on the service object parameters, a widget generates program code, e.g., JavaScript, to validate user inputs for a particular user interface element. Widgets further perform manipulation tasks such as setting access control values (e.g., enable or disable), setting default values, etc. Initialized widgets are arranged in a panel class depending on the nature of an HTTP user request received from a browser.","Dynamic layout means that the system introduces a way to arrange widgets in simple layouts or in complex layouts using groups, subgroups, and panels. Widgets can also be embedded into other complex widgets.","Extensibility means that the system includes an application programming interface (API) that enables a developer to add custom widgets, actions, or JSPs to the system.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 1","b":["102","104","106","102","106"]},"The service object manager  communicates data and instructions to other mechanisms that interface with external systems. For example, service object manager  communicates data and instructions to a page serving mechanism A that generates HTML user interface pages for display by a web browser A. In one embodiment, the page serving mechanism A is one or more JSP pages and servlets comprising the Picasso system, and metadata definitions  comprise eXtensible Markup Language (XML) definitions of parameters. Additionally or alternatively, service object manager  communicates data and instructions to a program interface mechanism B that interfaces to an external application B. For example, the program interface mechanism may comprise Enterprise JavaBeans, a remote method invocation mechanism, a Common Object Request Broker Architecture (CORBA) interface, etc. Application B may comprise a Java\u00ae GUI application or other applications. Additionally or alternatively, service object manager  communicates data and instructions to a northbound interface C that interfaces to an external system C, such as an operational support system (OSS) of a network service provider.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 2A","FIG. 2B","FIG. 2A","FIG. 2A","FIG. 12"],"b":["110","202","104","102","106","202","102","106","102","106","102"]},"Referring now to , web page generator  comprises a server page generator , web controller , actions , widgets , and panels . In one embodiment, web page generator  is based on the Apache Struts framework, and utilizes the look and feel defined by Cisco's Picasso and UII. The web page generator  uses interfaces defined by the service objects  to interact with business logic for an application.","Web controller  may be implemented as a servlet. The web controller  is responsible for security authorization and for dispatching user HTTP requests, which have been received from the browser A, to appropriate action classes. Actions  may be implemented as classes in an object-oriented environment such as Java\u00ae. The action classes  interact with service objects  through SOM interfaces that supply data from the service objects to the action classes in the form of service object parameters.  is a class diagram for an example action class. Based on such service object data, one or more widgets  are instantiated and are arranged into a specified layout within panels . When an action  completes processing, the web controller  forwards the user request to the server page generator , which renders the final user interface for display by browser A.","In one embodiment, server page generator  comprises one or more JSP pages. In another embodiment, web page generator  further comprises the Jakarta Tomcat engine that provides a servlet\/JSP engine for handling HTTP requests, and the Struts framework from Apache may be used to implement web controller .","Service object manager  is associated with metadata definitions . Thus, web page generator  can receive metadata information from SOM interfaces provided by service object manager . Metadata for a service object  defines properties of the object. Each property definition includes information that enables the web page generator  to produce HTML appropriate to render a user interface, and to produce JavaScript that can perform validation operations on values entered by users in the user interface.","As described in the Background, typical JSP development involves using custom tags to perform UI related logic; the tags help in hiding underlying program code so that, for example, a JSP page looks more like an HTML page that can be constructed using third party tools. While this approach enhances readability and maintainability of JSP pages, the tags are processed by a JSP container and are not flexible enough to be manipulated programmatically, and are not suitable for dynamic generation of UI. To overcome this limitation, web page generator  uses an approach based on widgets  to generate a consistent UI. In this approach, properties of service objects  are associated with widgets , which have several functions.","First, widgets  represent object properties by HTML elements such as text fields, selection lists, etc., so that the browser can display the property in an appropriate manner. Second, widgets  generate Javascript code that can perform client-side data validations, including checks for data type, range, mandatory parameters, etc. The Javascript code becomes part of an HTML page that is generated by server page generator , and is executed by web browser A when such an HTML page is loaded by the web browser. Third, once a user enters data in the user interface and submits an HTTP request from browser A that contains the data, widgets  convert the data from the HTML elements of the HTTP request back to Java\u00ae objects of an appropriate data type.","In one embodiment, widgets  are implemented as Java\u00ae classes. Further, in one embodiment, widgets  are defined according to a containment hierarchy. Thus, widgets  may contain other widgets that may again contain other widgets and so on. Such a containment hierarchy of widgets  enables web page generator  to decompose complex object properties so that they can be represented by basic HTML elements in a user interface page. Further, the containment hierarchy enables assembling data from the widgets to form complex data objects that form values of complex properties.","As an example, assume that an object among service objects , called \u201cCustomer,\u201d has a property named \u201caddress,\u201d which is another object, and other properties such as \u201cCustomerName\u201d and \u201cEmailAddress\u201d. The EmailAddress property is represented by a widget  called EmbeddedObject. The EmbeddedObject widget  represents properties of the \u201caddress\u201d object by other widgets, and takes data from other widgets and creates an Address object that becomes the value for the \u201caddress\u201d property in the Customer object.","In one embodiment in which server page generator  implements the Picasso framework, a user interface screen display for a network application comprises an area bar, path bar, table of contents, content area, and toolbar.  is a block diagram of a Picasso screen layout. An example screen  for a network management application comprises an area bar , sub area bar , toolbar , path bar , content area , and table of contents . The area bar  and sub area bar  display function tabs that are specific to a particular application. The path bar  displays a navigation path to inform the user about the user's then-current location within the application. The table of contents  provides assistance with navigation. The content area  contains substantive information content for an application. The toolbar  is displayed at the top right corner and provides basic information tools such as Help, About, etc. SiteMap XML documents define the layout of the content area and a hierarchy of pages that make up an application. APPENDIX 1 presents a sample SiteMap XML file.","While certain embodiments support the Picasso user interface style, other embodiments can support any other style. Widgets  are used to generate the content area of a Picasso user interface; no tag libraries are used. Further, with a system that includes web page generator , developers do not need to code, create or modify JSP pages, servlets, or actions, and need not know any web programming. Instead, developers can concentrate on developing business logic as embodied in service objects . The web page generator  interacts with program business logic through the service object interfaces, and dynamically generates the entire user interface including validation logic and data type conversions. As an example, typically several hundred of JSP pages, Action classes, and Bean classes are used in a network management application that is built on Picasso, and all such classes are created by the application developer. In the approach herein, only about ten JSP pages, Action classes, and Bean classes are used. As a result, development delays and software maintenance costs are greatly reduced.","Panels and widgets may be implemented in an object-oriented environment. As examples of class relationships that may be used in an implementation,  is a class diagram showing panel classes;  is a class diagram showing tree management classes; and  is a class diagram showing widgets classes.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 3","FIG. 3","FIG. 2A","FIG. 2B","FIG. 3"]},"In block , definitions of business objects comprising one or more service objects are received. For example, a software developer creates service objects  that perform business logic operations for a network management application. Alternatively, the service objects  are created prior to performing the method of , and are retrieved from storage or otherwise received.","In block , a user request is received. For example, a user interacting with web browser A browses to an HTML page associated with the network management application. The user selects a link associated with a particular operation of the network management application. Browser A forms an HTTP POST request that includes information identifying the link and sends the request to a server that is executing server-side elements of the network management application.","In block , a security authorization is performed. For example, web controller  inspects information in the user request to determine what application operation has been requested and which user requested it. Web controller consults a security database, which is omitted from  for clarity, to determine whether the identified user is authorized to perform the requested operation. If so, then control proceeds to block . If security authorization fails, then an error message is returned to the user. In other embodiments involving applications for which security is not an issue, block  is omitted.","In block , the user request is dispatched to an action class. For example, web controller  determines which class among actions  is responsible for acting on the user request. As one example, one action class may be responsible for processing a user request that seeks a network topology display, and another action class may be responsible for processing a user request that seeks to display a then-current network device inventory.","In block , one or more service object parameter values are received. For example, actions  use SOM interfaces to request and receive service object parameter values from service objects . As an example, assume that a user request seeks to obtain a network topology display. To create the display, an associated action  may need to receive a range of IP addresses defining a subnet that the user wishes to see in the topology display. Therefore, the action  accesses a \u201cSubnetRange\u201d service object among service objects  and determines that properties of the SubnetRange service object comprise LowerIPAddress and UpperIPAddress.","In block , one or more widgets are instantiated, and the parameters of the service objects are associated with the widgets. For example, a first widget  is instantiated for receiving a value for the LowerIPAddress parameter, and a second widget  is instantiated for receiving a value for the UpperIPAddress parameter. The widgets are associated with the respective parameter values.","In block , the widgets are placed in a group, subgroup, panel or another widget based on the nature of the user request. For example, the first and second widgets  are placed in a panel object that is associated with a user interface screen display panel that prompts the user to enter upper and lower IP addresses for the topology display.","In block , user interface elements are dynamically generated based on the widgets. For example, an HTML page, JSP page, Javascript, etc., are dynamically generated to create a user interface page that is consistent in look and feel with other pages that are generated by the web page generator .","Unlike prior approaches, in the approach herein the web page generator  takes care of generating the user interface completely and enables developers to concentrate more on the business logic layer. Developers need not repeat developing custom JSPs for every project. Further, the approach herein provides a data-driven approach for application development. Such an approach is especially powerful where certain user inputs and parameters are unknown until runtime. For example, this approach enables users to define their own templates that can be downloaded to the devices and provide data for the template. The approach improves the user experience by providing a standard look and feel throughout an application. In addition, the approach drastically reduces maintenance problems associated with developing JSPs.","A detailed example implementation of the foregoing general approaches is now described.","3.1 Struts Configuration","In one embodiment, the Struts framework is configured as described in this section to provide web controller . The Struts framework includes a default Controller Servlet and is usually associated with \u201c*.do\u201d path. Thus, any HTTP requests with a \u201c.do\u201d extension are addressed by the Controller Servlet, which looks in a configuration file for a mapping of an action classes associated with the current path and invokes a method called \u201cperform\u201d.","The Picasso framework extends this technique to control the JSP pages by defining an action \u201cforwardToScreenId\u201d that forwards the request to a JSP page. For this reason, global forwards also have an action defined with the same name. In one embodiment, the Global Forward is defined as <forward name=\u201cHome\u201d path=\u201c\/index.jsp?sid=Home\u201d\/> and the associated Action is <action path=\u201c\/Home\u201d type=\u201ccom.cisco.nm.uii. forwardToScreenID\u201d\/>. In the global forward definition, sid indicates a screen identifier and is used by a Picasso runtime engine to pull information associated with the screen from the Picasso layout configuration XML (Appendix 1).","Defining forwards for Service Objects requires an additional parameter called \u201cnewObjType\u201d to identify the current Service Object. For example, the Global Forward is defined as <forward name=\u201cSite\u201d path=\u201c\/indexjsp?sid=Site&amp;newObjType=Site\u201d\/>, and the Action is <action path=\u201c\/Site\u201d type=\u201ccom.cisco.nm.uii.forwardToScreenID\u201d\/>. In the approach herein, another type of forward is defined and is used locally in Actions . The forward defines a template so that the request is forwarded to the service object by setting a parameter called \u201ccontent\u201d to the JSP page given in the template. For example, the following forward may be used: <forward name=\u201cmodify\u201d path=\u201cSvcObjForward\/basicPane.jsp\u201d\/>.","Assuming the current service object is \u201cCustomer\u201d, the above forward is converted into a path of \u201c\/index.jsp?sid=Customer&amp;newObjType=Customer&amp;content=basicPanejsp\u201d.","APPENDIX 2 presents is a complete example Struts configuration file.","3.2 Custom Tags","In one embodiment, web page generator  uses Custom tags, as defined in Picasso, and also defines a ContentAreaTag and PageTitleTag. The ContentAreaTag looks for the value for \u201ccontent\u201d parameter and includes the JSP file that is supplied as the value of \u201ccontent\u201d. If that parameter is not found, then the tag provides the same processing as the Picasso ContentArea tag. The PageTitleTag provides content area title based on the user actions.","3.3 Developing Content; Performing Client-Side Content Manipulation and Validation","Developing a user interface for an application that is accessed using a web browser involves creating HTML documents for the browser so that the browser can show the specified UI elements in the right layout. In one embodiment, as shown in , content generation is provided though JSP files  that interact with certain core classes  of web page generator . Additionally, the content may comprise static HTML pages .","Web page generator  further supports content generation through style sheets  and images , which help make the UI more appealing and also provide consistency across various pages in an application that uses service objects . Picasso defines standard styles for most elements displayed in a UI; however, style sheets  and images  may define, for example, action buttons such as \u2018List\u2019, \u2018Apply\u2019, \u2018Add\u2019, etc., with the same look and feel. In one embodiment, a style named mdm_btn is defined and included in the JSP.","Web page generator  further supports client side dynamic content manipulation and validations using client program code . As an example, client program code  may comprise Javascript code. However, any other form of client-side executable code may be used.","In one embodiment, client program code comprises one or more Javascript files which, when executed by browser A, perform the following functions: store a path and to include other Javascript files; detecting the type of browser used by the user and alerting users who are using old browsers; generating alerts and error messages; enabling and disabling buttons on the various screens at run time, depending on the user selection; and other common functions. As an example, the function for enabling and disabling buttons may be used to \u201cgray out\u201d buttons that are inapplicable to a particular function.","Client program code  also may comprise one or more Javascript files for performing common validations for various form elements, e.g., checking data types and ranges; checking whether mandatory fields are populated before submitting a form; checking dependencies and validations upon moving out of a field; creating a pop-up window, e.g., for a details screen; copying values from and to a pop up window and populating all the forms in the main screen; and others. In one embodiment, specific validations for IPAddressField, DateTimeField, etc. may be provided in client program code .","The client program code  also may implement multi-selection of service objects, selection of different service objects in a browse selection popup, and other features. Multi-selection of service objects is achieved by a keeping a count of the number of rows selected and then updating the count for each selection and de-selection. Depending on the count and the type of selection, all the buttons are evaluated to determine if an action is permitted. For example, viewing two service objects is not allowed, in one embodiment. When two rows are selected, a function is called to check whether the buttons should be enabled or disabled. For multi-selection, the \u2018View\u2019 button is listed as invalid action in the invalidActions array. The check fails and the button is disabled.","Further, for certain objects, a Browse Selection should be able to select multiple service objects. For example, for a provider edge device (\u201cPE\u201d) Interface, the selection could be a Serial Interface or a Sub Interface and also to allow the selection of only leaves and not the nodes. This is achieved by modifying the PeInterfaceDd class to send the service object name as \u2018Leaf|SerialInterface|SubInterface\u2019. This string is then parsed by using the browserForValue Javascript function to find out that more than one Service Object can be selected, and sending the Service Objects to the pop-up. Upon selecting a link for the pop-up, the validation function finds the Service Object type and whether the object is a node or a leaf. Such values then are matched to the values set by the browseForValue function. If either service object type is selected, then the object can be selected. Otherwise, an error is thrown.","In one embodiment, JSP files  comprise the following, and each of the JSPs can access core classes  and service objects  which generating UI pages in cooperation with server page generator . A JSP named login.jsp is the default page for an application, accepts the username and password and passes them on to back-end objects for creating a user session for validation; if the username and password combination is wrong, the user is shown the unauthorized.jsp page. An index.jsp page is provided. All requests of the form \u201c*.do\u201d are calls to index.jsp. In response, an address of the request is resolved, responsive content is embedded in index.jsp, and the content is sent to the Tomcat engine for display. A listPane.jsp page is the default JSP for all Service Objects; it provides logic to display objects as a list and provides functions such as scrolling, fetching the next set of rows, etc.","An initPane.jsp page provides functionality to display an Initial screen that contains all the initial parameters specified by the ServiceObject either in metadata or defined or defined in the Handler classes. A basicPane.jsp page provides functionality to display a Basic screen that contains all the basic parameters specified by the ServiceObject either in metadata or defined in the Handler classes. A detailsPane.jsp page provides functionality to display a Detail screen that contains basically all the parameters specified by the ServiceObject either in metadata or defined in the Handler classes. A wizardPane.jsp page provides functionality for wizard navigation that is driven by screen attributes for parameters defined either through metadata or through the Handler classes.","3.4 Metadata Definitions","An example of metadata definitions  in XML form is provided in APPENDIX 3. In general, an XML implementation of metadata definitions  may define services, packages, service objects, parameter groups, initial parameters, other parameters, and parameter sets. The following section describes general aspects of each such definition.","Defining Service:","Element: svcDef","Description: Defines a group of Service Objects that are part of the service.","Attributes:","name\u2014takes any string as value.","Contained In: ROOT (Not contained in any other element)","Element: svcObj","Description: Used to add a service object to the list of Service Objects in a svcDef.","Attributes:","name\u2014takes any string as value.","Contained In: svcObj.","Defining Package:","Element: packageDef","Description: Defines a package in which Service Objects are defined.","Attributes:","name\u2014takes any string as value.","Contained In: ROOT (Not contained in any other element)","Defining Service Object:","Element: objectDef","Description: Defines a Service Object in a package.","Attributes:","Contained In: packageDef","Table 1 below provides example attributes for the objectDef element:",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Attributes of objectDef"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Attribute","Possible Values","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["name","Any allowed table name for the","Name of the service object; may be"]},{"entry":[{},"database.","used as table name in the database,"]},{"entry":[{},{},"in naming java classes in CmServer"]},{"entry":[{},{},"and in Javascript. Also used as"]},{"entry":[{},{},"screenId in defining the SiteMap"]},{"entry":[{},{},"XML."]},{"entry":["label","Default: Value of Name.","Label to be displayed in the UI for the"]},{"entry":[{},{},"Service Object"]},{"entry":["namingAttribute","Parameter name.","Parameter to be used to construct"]},{"entry":[{},"Not applicable if dbtable = \u201cNULL\u201d","FDN. Primary key on the table."]},{"entry":["dbtable","Allowed table name for the","Specifies the name of the table this"]},{"entry":[{},"database or NULL.","object represents in the database. ."]},{"entry":[{},"Default: Value of name.","Specifying the value as NULL makes"]},{"entry":[{},{},"the object non-persistent. No"]},{"entry":[{},{},"database table is created."]},{"entry":["handler","Java class implementing Handler","Specifies the implementation of"]},{"entry":[{},"interface.","Handler interface to be used."]},{"entry":["browser","Java class implementing Browser","Specifies the implementation of"]},{"entry":[{},"interface.","Browser interface to be used."]},{"entry":["iterator","Java class implementing Iterator","Specifies the implementation of"]},{"entry":[{},"interface.","Iterator interface to be used."]},{"entry":["cursor","Java class implementing Cursor","Specifies the implementation of"]},{"entry":[{},"interface.","Cursor interface to be used."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Parameter groups, initial parameters, and other parameters are defined as follows:","Defining Parameter Groups:","Element: paramGroupDef","Description: Defines a parameter group for a service object.","Attributes:","name\u2014Name of the parameter group.","label\u2014Label of the tab for displaying the group of parameters.","wizard Text\u2014<< >>","Contained In: objectDef","Defining Initial Parameters:","Element: initParamDef","Description: Defines a parameter to be displayed in the initial screen.","Attributes:","Contained In: objectDef","Defining Parameters:","Element: paramDef","Description: Defines a parameter to be displayed in the basic\/details screen.","Attributes:","Contained In: objectDef","Table 2 below provides example attributes for the paramDef element:",{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Attributes of paramDef"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Attribute","Possible Values","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["screen","basic, details","Value indicates that the parameter"]},{"entry":[{},"Default: details.","needs to be shown on the screen by"]},{"entry":[{},{},"default (screen = \u201cbasic\u201d) or the value"]},{"entry":[{},{},"should be shown only when the user"]},{"entry":[{},{},"views the details page"]},{"entry":[{},{},"(screen = \u201cdetails\u201d)"]},{"entry":["groupName","Groups defined via","Ties a parameter to a defined group,"]},{"entry":[{},"paramGroupDef tag for the","which ensures that all parameters"]},{"entry":[{},"service object.","belonging to a particular group are"]},{"entry":[{},"Default:general","bundled and shown together in the"]},{"entry":[{},{},"UI. Each group is displayed in a"]},{"entry":[{},{},"separate tab in the Details screen."]},{"entry":["subGroupName",{},"Used to group related components"]},{"entry":[{},{},"together in a given screen. The"]},{"entry":[{},{},"components are showed in a"]},{"entry":[{},{},"bordered panel with the"]},{"entry":[{},{},"subGroupName as title."]},{"entry":["access","Combination of","Indicates of scope of modification of"]},{"entry":[{},"create_rw, modify_rw,","the value of the parameter."]},{"entry":[{},"create_ro, modify_ro,","For example, access = \u201ccreate_rw,"]},{"entry":[{},"create_na, modify_na.","modify_ro\u201d, means that while"]},{"entry":[{},"Default:<< >>","creating the object, the value can be"]},{"entry":[{},{},"changed(rw), but while modifying,"]},{"entry":[{},{},"the parameter will be disabled."]},{"entry":["datatype","string, int, enum, sternum, date, ","Indicates data type of parameter."]},{"entry":[{},"set, seq, seqOf, paramSetValue.",{}]},{"entry":["name","Allowed Java\/JavaScript variable","Name of parameter; used as a"]},{"entry":[{},"name.","variable name."]},{"entry":["label","Meaningful string literal.","Label that is displayed in the UI."]},{"entry":[{},"Default: Value of name.",{}]},{"entry":["dbtype","Allowed data types for the","Indicates data type of the column"]},{"entry":[{},"database used.","the parameter represents in the"]},{"entry":[{},{},"database."]},{"entry":[{},"Default: same as datatype.","For eg. \u2018enum\u2019 datatype values are"]},{"entry":[{},{},"stored as int in the database."]},{"entry":[{},{},"A parameter is made transient (non-"]},{"entry":[{},{},"persistent) by setting"]},{"entry":[{},{},"dbtype = \u201cNULL\u201d. These parameters"]},{"entry":[{},{},"are used by the GUI to compute"]},{"entry":[{},{},"other parameter values."]},{"entry":["webComponent","Any available widgets.","This is a widget displayed in the GUI"]},{"entry":[{},"Default:","for the parameter."]},{"entry":[{},"TexField for string,int datatypes",{}]},{"entry":[{},"ComboBox for sternum, enum",{}]},{"entry":["webComponentProperties","-N\/A-","Provides additional properties for"]},{"entry":[{},{},"the webComponent."]},{"entry":["webComponentModel","Any custom Model class","The name of the Model class to be"]},{"entry":[{},"extending","used with the webComponent."]},{"entry":[{},"SomwebSvcObjParameter class.",{}]},{"entry":[{},"Defaul:t",{}]},{"entry":[{},"SomwebSvcObjParameter",{}]},{"entry":["location","north, south, east, west","Specifies the location of the"]},{"entry":[{},"Default: north","component in a group (panel) as per"]},{"entry":[{},{},"Java BorderLayout."]},{"entry":["guiComponent","-N\/A-","Widget for Java UI."]},{"entry":["guiComponentProperties","-N\/A-","Properties for Java GUI Component."]},{"entry":["toolTip","Meaningful information string.","This value indicates the ToolTip that"]},{"entry":[{},"Default: Value of label.","should be displayed when the"]},{"entry":[{},{},"cursor is moved over the parameter"]},{"entry":[{},{},"on the GUI."]},{"entry":["mandatory","true, false.","Indicates the UI that a user must"]},{"entry":[{},{},"enter the value without which the"]},{"entry":[{},"Default: false.","data will not be submitted to the"]},{"entry":[{},{},"server."]},{"entry":[{},{},"Represented in the UI with a red"]},{"entry":[{},{},"asterisk against the label of the"]},{"entry":[{},{},"parameter."]},{"entry":["dependencies","Can be one or more (a comma","Indicates that the parameter is"]},{"entry":[{},"separated list) of the parameters","dependent on the specified"]},{"entry":[{},"that come on the same screen as","parameter."]},{"entry":[{},"this parameter.",{}]},{"entry":[{},{},"This attribute is used to enable,"]},{"entry":[{},{},"disable components and to supply"]},{"entry":[{},{},"filter for tree browser object"]},{"entry":[{},{},"selectors."]},{"entry":["<<CustomStrings>>","Examples:","These are custom strings defined by"]},{"entry":[{},"- ObjType, browser, used by","individual widgets; can also be put"]},{"entry":[{},"BasicBrowseDd","as part of webCompProperty"]},{"entry":[{},"- detailsLabel used by","attribute separated by semi-colon."]},{"entry":[{},"EmbeddedObject",{}]},{"entry":[{},"-format used by FDNField"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Parameter sets are defined as follows:","Defining Parameter Sets:","Element: paramDef","Description: The parameters included (as paramSetItem fields) in this tag are included in the MoInfo of the object.","Attributes:","name\u2014takes any string value. Specifying name=\u201csummary\u201d defines a paramSetDef to be used in displaying the list.","Contained In: objectDef","Element: paramSetItem","Description: Adds a parameter to the list in paramSetDef.","Attributes:","Name\u2014takes any string value.","Contained In: paramSetDef","3.5 Process Flow During User Interactions","Core classes  of web page generator  support user login, generating table of contents items and list panes for a dynamically generated user interface, adding panes to a dynamically generated user interface, responding to selections of generic buttons in user interface screens such as an Apply button, and provide other functions. In one embodiment, core classes  include a LoginAction class, Application Service or AppService class, and others as illustrated further in . , inclusive.","Drawing figures .  include self-explanatory text describing interactions of JSPs, classes, and other elements of web page generator  to perform specific functions. In particular,  is a process flow diagram that illustrates a user login interaction;  is a process flow diagram that illustrates a user interaction with a table of contents and list pane;  is a process flow diagram illustrating an interaction for adding an initial pane;  is a process flow diagram illustrating an add basic pane interaction;  is a process flow diagram illustrating an interaction in response to selecting an Apply button in an Add screen;  is a process flow diagram illustrating a modify basic pane interaction;  is a process flow diagram illustrating an interaction in response to selecting an Apply button on a Modify screen; and  is a process flow diagram illustrating an interaction in response to selecting an Apply button in a Delete screen.","To illustrate a clear example,  is now described.  illustrates process steps performed by internal components of web page generator  in response to a user selecting a Next button that adds a basic pane to a user interface window. The description herein of  assumes familiarity with the class diagrams that are presented elsewhere herein. For example,  is a class diagram for an application service class that may form part of core classes  and provide services to applications.  is a class diagram showing panel classes;  is a class diagram showing tree management classes; and  is a class diagram showing widgets classes.","Referring now to , interactions are shown for a ContentPage submit( ) method , Services Action object , App Services object , ParamBasicPanel object , ServiceObjectParameterFactory object , ComponentViewFactory object , ServiceObjectHandler , and Struts framework .","Selecting a Next button results in invocation of the submit( ) method  to perform the contents of an HTTP request that indicates the Next button selection, as shown by arrow . The HTTP request is received by the Services Action object , which invokes an AddNext( ) method to process selection of the Next button in an Add screen, as indicated by reference numeral . The Services Action object  then invokes a getINitiParameterSet method, which requests the AppServices object  to provide parameters for the Next action. The AppServices object  returns a vector of object parameters, as indicated by arrow , which vector is initially empty. The AppServices object  then invokes a getParamSetForCreate( ) method of the ServiceObjectHandler . In response, the ServiceObjectHandler  returns a service object parameter set as indicated by arrow .","The ServicesAction object  invokes a buildNewParameterList method of the AppServices object  as shown by arrow , which responds by invoking a createParameter( ) method of the ServiceObjectParameterFactory  as indicated by arrow . Parameters are then returned to the ServicesAction object  as indicated by arrows , .","Upon receiving the parameters, the ServicesAction object  invokes an instantiate method of the ParamBasicPanel object , as shown by arrow . In response, the ParamBasicPanel object  invokes a createWidget( ) method of the ComponentViewFactory object, as shown by arrow . This results in the creation of a widget appropriate for the user interface, which is returned as indicated by arrow , .","If no error occurred in the course of creating the widget, then a basic panel of the user interface is instantiated and forwarded with the widget information to a basicPanel JSP page for final creation of HTML and delivery to the browser, as indicated by arrows , . If an error occurred, then an \u201cinit\u201d panel is instantiated and forwarded with the widget information to an initPanel JSP, as indicated by arrows , , , , .","As a result, user interface pages are automatically created based on desired actions and metadata definitions of parameters, without requiring a developer to manually code the pages, supporting Javascript code, JSPs, etc.","3.6 Security Interfaces","In one embodiment, core classes  define three security interfaces that are implemented by an application, denoted an Authorize interface, Authenticate interface, and SecurityChecker interface. The Authorize interface implementation class is responsible for adding or removing screen identifiers from the screen, that is, adding and removing Area Items, Sub Area Items, and table of contents items depending upon the role or permissions of a user. The Authenticate implementation class is used to authenticate a user. The SecurityChecker implementation class is responsible for adding or removing action buttons such as Add, Modify, Delete, etc., based on the permissions of a user.","In one embodiment, when a user logs in, control passes to a class called Controller, which is responsible for calling the correct Authorize and Authenticate implementation classes at runtime. As a result, the user can view only those tabs and TOCs for which the user has permissions.","The SecurityChecker implementation class is called when the user views a screen that has one or more action buttons.","As an example,  is a class diagram for security classes that may be used in an implementation.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 19","b":["1900","1900","1902","1904","1902","1900","1906","1902","1904","1906","1904","1900","1908","1902","1904","1910","1902"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (\u201cCRT\u201d), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, trackball, stylus, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for generating consistent user interfaces. According to one embodiment of the invention, generating consistent user interfaces is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (\u201cISDN\u201d) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (\u201cLAN\u201d) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (\u201cISP\u201d) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for generating consistent user interfaces as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.",{"@attributes":{"id":"p-0132","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXAMPLE SITEMAP XML FILE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","<? xml version=\u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?>"]},{"entry":["2",{}]},{"entry":["3","<!DOCTYPE appTypes SYSTEM \u201c.\/appTypes.dtd>"]},{"entry":["4",{}]},{"entry":["5","<!--"]},{"entry":["6","Configuration file for User Interface."]},{"entry":["7","-->"]},{"entry":["8",{}]},{"entry":["9","<appTypes>"]},{"entry":["10","\u2002<cee>"]},{"entry":["11","\u2003<banner>"]},{"entry":["12","\u2003\u2002<label>Example Screen Layout<\/label>"]},{"entry":["13","\u2003\u2002<image fileRef=\u201c.\/ciscoLogo.gif\u201d\/>"]},{"entry":["14","\u2003<\/banner>"]},{"entry":["15",{}]},{"entry":["16","\u2003<toolBar>"]},{"entry":["17","\u2003\u2002<toolBarItem>"]},{"entry":["18","\u2003\u2003<label>Logout<\/label>"]},{"entry":["19","\u2003\u2003<navContentArea screenID=\u201cLogout\u201d fileRef=\u201clogin.jsp\u201d\/>"]},{"entry":["20","\u2003\u2002<\/toolBarItem>"]},{"entry":["21","\u2003<\/toolBar>"]},{"entry":["22",{}]},{"entry":["23","\u2003<area>"]},{"entry":["24","\u2003\u2002<areaItem>"]},{"entry":["25","\u2003\u2003\u2002<label>Area Item<\/label>"]},{"entry":["26","\u2003\u2003\u2002<subArea>"]},{"entry":["27","\u2003\u2003\u2003<subAreaItem>"]},{"entry":["28","\u2003\u2003\u2003\u2002<label>Sub Area 1<\/label>"]},{"entry":["29","\u2003\u2003\u2003\u2002<TOC>"]},{"entry":["30","\u2003\u2003\u2003\u2003<TOCItem>"]},{"entry":["31","\u2003\u2003\u2003\u2003\u2002<label>RPM-FRSM Connect<\/label>"]},{"entry":["32","\u2003\u2003\u2003\u2003\u2002<navContentArea"]},{"entry":["33","\u2003\u2003\u2003\u2003\u2003screenID=\u201cRPM _ FRSM_ Connect\u201d"]},{"entry":["34","\u2003\u2003\u2003\u2003\u2003contentAreaTitle=\u201cRPM_FRSM_Connect\u201d"]},{"entry":["35","\u2003\u2003\u2003\u2003\u2003fileRef=\u201clistPane.jsp\u201d\/>"]},{"entry":["36","\u2003\u2003\u2003\u2003<\/TOCItem>"]},{"entry":["37","\u2003\u2003\u2003\u2002<\/TOC>"]},{"entry":["38","\u2003\u2003\u2003\u2002<navContentArea"]},{"entry":["39","\u2003\u2003\u2003\u2003screenID=\u201cSubArea1\u201d"]},{"entry":["40","\u2003\u2003\u2003\u2003contentAreaTitle=\u201cSub Area 1\u201d"]},{"entry":["41","\u2003\u2003\u2003\u2003fileRef=\u201cSubArea1.jsp\u201d>"]},{"entry":["42","\u2003\u2003\u2003\u2003<tasks>"]},{"entry":["43","\u2003\u2003\u2003\u2003\u2002<taskID id=\u201csubareal\u201d\/>"]},{"entry":["44","\u2003\u2003\u2003\u2003<\/tasks>"]},{"entry":["45","\u2003\u2003\u2003\u2002<\/navContentArea>"]},{"entry":["46","\u2003\u2003\u2003<\/subAreaItem>"]},{"entry":["47",{}]},{"entry":["48","\u2003\u2003\u2003<subAreaItem>"]},{"entry":["49","\u2003\u2003\u2003\u2002<label>Sub Area 2<\/label>"]},{"entry":["50","\u2003\u2003\u2003\u2002<TOC>"]},{"entry":["51","\u2003\u2003\u2003\u2003<TOCItem>"]},{"entry":["52","\u2003\u2003\u2003\u2003\u2002<label>RPM-FRSM Connect<\/label>"]},{"entry":["53","\u2003\u2003\u2003\u2003\u2002<navContentArea"]},{"entry":["54","\u2003\u2003\u2003\u2003\u2003screenID=\u201cRPM FRSM_Connect1\u201d"]},{"entry":["55","\u2003\u2003\u2003\u2003\u2003contentAreaTitle=\u201cRPM_FRSM_Connect\u201d"]},{"entry":["56","\u2003\u2003\u2003\u2003\u2003fileRef=\u201clistPane.jsp\u201d\/>"]},{"entry":["57","\u2003\u2003\u2003\u2003<\/TOCItem>"]},{"entry":["58","\u2003\u2003\u2003\u2002<\/TOC>"]},{"entry":["59","\u2003\u2003\u2003\u2002<navContentArea"]},{"entry":["60","\u2003\u2003\u2003\u2003\u2002screenID=\u201cSubArea2\u201d"]},{"entry":["61","\u2003\u2003\u2003\u2003\u2002contentAreaTitle=\u201cSub Area 2\u201d"]},{"entry":["62","\u2003\u2003\u2003\u2003\u2002fileRef=\u201cSubArea2.jsp\u201d>"]},{"entry":["63","\u2003\u2003\u2003\u2003\u2002<tasks>"]},{"entry":["64","\u2003\u2003\u2003\u2003\u2003<taskID id=\u201csubarea2\u201d\/>"]},{"entry":["65","\u2003\u2003\u2003\u2003\u2002<\/tasks>"]},{"entry":["66","\u2003\u2003\u2003\u2003<\/navContentArea>"]},{"entry":["67","\u2003\u2003\u2003\u2002<\/subAreaItem>"]},{"entry":["68","\u2003\u2003\u2003<\/subArea>"]},{"entry":["69","\u2003\u2003\u2002<\/areaItem>"]},{"entry":["70","\u2003\u2003<\/area>"]},{"entry":["71","\u2003\u2002<\/cee>"]},{"entry":["72","\u2003<monitoring\/>"]},{"entry":["73","<\/appTypes>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0133","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXAMPLE STRUTS CONFIGURATION FILE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","<?xml version=\u201c1.0\u201d encoding=\u201cISO-8859-1\u201d ?>"]},{"entry":["2",{}]},{"entry":["3","<!DOCTYPE struts-config PUBLIC"]},{"entry":["4","\u2003\u201c-\/\/Apache Software Foundation\/\/DTD Struts Configuration 1.0\/\/EN\u201d"]},{"entry":["5","\u2003\u2003\u201chttp:\/\/jakarta.apache.org\/struts\/dtds\/struts-config_1_0.dtd\u201d>"]},{"entry":["6","<struts-config>"]},{"entry":["7",{}]},{"entry":["8","\u2003<form-beans>"]},{"entry":["9","\u2003\u2003<form-bean name=\u201cloginForm\u201d"]},{"entry":["10","\u2003\u2003\u2003type=\u201ccom.cisco.vnm.common.somweb.beans.SomwebLoginForm\u201d\/>"]},{"entry":["11","\u2003<\/form-beans>"]},{"entry":["12",{}]},{"entry":["13","<global-forwards>"]},{"entry":["14",{}]},{"entry":["15","\u2003<forward name=\u201chome\u201d path=\u201c\/index.jsp\u201d \/>"]},{"entry":["16",{}]},{"entry":["17","\u2003<!-- These global forwards enable Action classes to forward the user"]},{"entry":["18","\u2003\u2003to any page which is accessble from the MI navigational"]},{"entry":["19","\u2003\u2003links; ( links in AreaBar, SubAreaBar, TOC and SubTOC ) -->"]},{"entry":["20","\u2003<!-- Example global forward for a screenid"]},{"entry":["21","\u2003<forward name=\u201cs004\u201d path=\u201c\/index.jsp?sid=s004\u201d\/>"]},{"entry":["22","\u2003-->"]},{"entry":["23","\u2003<forward name=\u201cLogout\u201d path=\u201c\/index.jsp?sid=Logout&amp;newObjType=Logout\u201d \/>"]},{"entry":["24",{}]},{"entry":["25",{}]},{"entry":["26","\u2003<forward name=\u201cRPM_FRSM_Connect\u201d"]},{"entry":["27","\u2003\u2003\u2002path=\u201c\/index.jsp?sid=RPM_FRSM_Connect&amp;newObjType=RPM_FRSM_Connect\u201d \/>"]},{"entry":["28","\u2003<forward name=\u201cSubArea1\u201d path=\u201c\/index.jsp?sid=SubAreal\u201d \/>"]},{"entry":["29","\u2003<forward name=\u201cSubArea2\u201d path=\u201c\/index.jsp?sid=SubArea2\u201d \/>"]},{"entry":["30",{}]},{"entry":["31",{}]},{"entry":["32","<\/global-forwards>"]},{"entry":["33",{}]},{"entry":["34","<action-mappings>"]},{"entry":["35","\u2003<action path=\u201c\/login\u201d"]},{"entry":["36","\u2003\u2003\u2003type=\u201ccom.cisco.vnm.common.somweb.actions.SomwebLoginAction\u201d"]},{"entry":["37","\u2003\u2003\u2003name=\u201cloginForm\u201d>"]},{"entry":["38","\u2003\u2003\u2003<forward name=\u201csuccess\u201d"]},{"entry":["39","\u2003\u2003\u2003\u2002path=\u201c\/index.jsp?sid=RPM_FRSM_Connect&amp;newObjType=RPM_FRSM_Connect\u201d \/>"]},{"entry":["40","\u2003\u2003\u2003<forward name=\u201cfailure\u201dpath=\u201c\/login.jsp\u201d \/>"]},{"entry":["41","\u2003<\/action>"]},{"entry":["42",{}]},{"entry":["43","\u2003<action path=\u201c\/Logout\u201d"]},{"entry":["44","\u2003\u2003\u2003type=\u201ccom.cisco.vnm.common.somweb.actions.SomwebLogoffAction\u201d>"]},{"entry":["45","\u2003\u2003<forward name=\u201csuccess\u201d path=\u201c\/login.jsp\u201d\/>"]},{"entry":["46","\u2003<\/action>"]},{"entry":["47",{}]},{"entry":["48","\u2003<action path=\u201c\/SomwebServices\u201d"]},{"entry":["49","\u2003\u2003\u2003type=\u201ccom.cisco.vnm.conunon.somweb.actions.SomwebServicesAction\u201d>"]},{"entry":["50","\u2003\u2003<forward name=\u201cinit\u201d path=\u201cSvcObjForward\/initPane.jsp\u201d\/>"]},{"entry":["51","\u2003\u2003<forward name=\u201clist\u201d path=\u201cSvcObjForward\/listPane.jsp\u201d\/>"]},{"entry":["52","\u2003\u2003<forward name=\u201cadd\u201d path=\u201cSvcObjForward\/basicPane.jsp\u201d\/>"]},{"entry":["53","\u2003\u2003<forward name=\u201cmodify\u201d path=\u201cSvcObjForward\/basicPane.jsp\u201d>"]},{"entry":["54","\u2003\u2003<forward name=\u201cdelete\u201d path=\u201cSvcObjForward\/basicPane.jsp\u201d\/>"]},{"entry":["55","\u2003\u2003<forward name=\u201cdetails\u201d path=\u201c\/detailsPane.jsp\u201d\/>"]},{"entry":["56","\u2003\u2003<forward name=\u201cview\u201d path=\u201cSvcObjForward\/basicPane.jsp\u201d\/>"]},{"entry":["57","\u2003\u2003<forward name=\u201cfailed\u201d path=\u201c\/login.jsp\u201d\/>"]},{"entry":["58","\u2003\u2003<forward name=\u201cinitfailed\u201d path=\u201cSvcObjForward\/listPane.jsp\u201d\/>"]},{"entry":["59","\u2003\u2003<forward name=\u201caddfailed\u201d path=\u201cSvcObjForward\/basicPane.jsp\u201d\/>"]},{"entry":["60","\u2003\u2003<forward name=\u201cmodifyfailed\u201d path=\u201cSvcObjForward\/basicPane.jsp\u201d\/>"]},{"entry":["61","\u2003\u2003<forward name=\u201cviewfailed\u201d path=\u201cSvcObjForvvard\/listPane.jsp\u201d\/>"]},{"entry":["62","\u2003\u2003<forward name=\u201cdeletefailed\u201d path=\u201cSvcObjForward\/listPane.jsp\u201d\/>"]},{"entry":["63","\u2003\u2003<forward name=\u201cnextfailed\u201d path=\u201cSvcObjForwarcl\/initPane.jsp\u201d\/>"]},{"entry":["64","\u2003\u2003<forward name=\u201ccustomfinish\u201d path=\u201c\/customPane.jsp?finish=yes\u201d\/>"]},{"entry":["65","\u2003\u2003<forward name=\u201ccustominit\u201d path=\u201c\/customPane.jsp\u201d\/>"]},{"entry":["66","\u2003\u2003<forward name=\u201ccancel\u201d path=\u201cSvcObjForward\/controlPane.jsp\u201d\/>"]},{"entry":["67","\u2003<\/action>"]},{"entry":["68","\u2003<action path=\u201c\/browse\u201d"]},{"entry":["69","\u2003\u2003\u2003type=\u201ccom.cisco.vnm.common.somweb.actions.SomwebBrowseAction\u201d>"]},{"entry":["70","\u2003\u2003<forward name=\u201ctree\u201d path=\u201c\/treePanel.jsp\u201d\/>"]},{"entry":["71","\u2003\u2003<forward name=\u201cfailed\u201d path=\u201c\/login.jsp\u201d\/>"]},{"entry":["72","\u2003<\/action>"]},{"entry":["73","<action path=\u201c\/listselect\u201d"]},{"entry":["74","\u2003\u2003\u2003type=\u201ccom.cisco.vnm.common.somweb.actions.SomwebListSelector\u201d>"]},{"entry":["75","\u2003\u2003<forward name=\u201clist\u201d path=\u201c\/listSelector.jsp\u201d\/>"]},{"entry":["76","\u2003\u2003<forward name=\u201cfailed\u201d path=\u201c\/login.jsp\u201d\/>"]},{"entry":["77","\u2003<\/action>"]},{"entry":["78",{}]},{"entry":["79","\u2003<action path=\u201c\/RPM_FRSM_Connect\u201d type=\u201ccom.cisco.nm.uii.forwardToScreenIDV>"]},{"entry":["80","\u2003<action path=\u201c\/SubArea1\u201d type=\u201ccom.cisco.nm.uii.forwardToScreenID\u201d\/>"]},{"entry":["81","\u2003<action path=\u201c\/SubArea2\u201d type=\u201ccom.cisco.nm.uii.forwardToScreenID\u201d\/>"]},{"entry":["82",{}]},{"entry":["83",{}]},{"entry":["84","\u2003<!-- THE FOLLOWING ACTION IS USED BY UII \u201cinternally\u201d, DO NOT REMOVE -->"]},{"entry":["85","\u2003<action path=\u201c\/openLevel\u201d type=\u201ccom.cisco.nm.uii.openLevelCornerCase\u201d\/>"]},{"entry":["86",{}]},{"entry":["87","\u2003<!-- THE FOLLOWING ACTION IS USED BY UII \u201cinternally\u201d, DO NOT REMOVE -->"]},{"entry":["88","\u2003<action path=\u201c\/openLevel\u201d type=\u201ccom.cisco.nm.uii.openLevelCornerCase\u201d\/>"]},{"entry":["89",{}]},{"entry":["90","\u2003<!-- The standard administrative actions available with Struts -->"]},{"entry":["91","\u2003<!-- These would be either omitted or protected by security -->"]},{"entry":["92","\u2003<!-- in a real application deployment -->"]},{"entry":["93","\u2003<action path=\u201c\/admin\/addFormBean\u201d"]},{"entry":["94","\u2003\u2003\u2003type=\u201corg.apache.struts.actions.AddFormBeanAction\u201d\/>"]},{"entry":["95","\u2003<action path=\u201c\/admin\/addForward\u201d"]},{"entry":["96","\u2003\u2003\u2003type=\u201corg.apache.struts.actions.AddForwardAction\u201d\/>"]},{"entry":["97","\u2003<action path=\u201c\/admin\/addMapping\u201d"]},{"entry":["98","\u2003\u2003\u2003type=\u201corg.apache.struts.actions.AddMappingAction\u201d\/>"]},{"entry":["99","\u2003<action path=\u201c\/admin\/reload\u201d"]},{"entry":["100","\u2003\u2003\u2003type=\u201corg.apache.struts.actions.ReloadAction\u201d\/>"]},{"entry":["101","\u2003<action path=\u201c\/admin\/removeFormBean\u201d"]},{"entry":["102","\u2003\u2003\u2003type=\u201corg.apache.struts.actions.RemoveFormBeanAction\u201d\/>"]},{"entry":["103","\u2003<action path=\u201c\/admin\/removeForward\u201d"]},{"entry":["104","\u2003\u2003\u2003type=\u201corg.apache.struts.actions.RemoveForwardAction\u201d\/>"]},{"entry":["105","\u2003<action path=\u201c\/admin\/removeMapping\u201d"]},{"entry":["106","\u2003\u2003\u2003type=\u201corg.apache.struts.actions.RemoveMappingAction\u201d\/>"]},{"entry":["107",{}]},{"entry":["108","\u2009<action-mappings>"]},{"entry":["109",{}]},{"entry":["110","<\/struts-config>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXAMPLE METADATA DEFINITIONS IN XML"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","<morMeta>"]},{"entry":["2","<packageDef name=\u201cCrossConnect\u201d>"]},{"entry":["3",{}]},{"entry":["4","\u2002<objectDef name=\u201cRPM_FRSM_Connect\u201d"]},{"entry":["5","\u2003\u2003label=\u201cRPM-FRSM Connect\u201d"]},{"entry":["6","\u2003\u2003namingAttribute=\u201crpmFrsmConnId\u201d"]},{"entry":["7",{}]},{"entry":["8","browser=\u201ccom.cisco.vnm.common.somweb.example.CmRPM_FRSM_ConnectBrowser\u201d"]},{"entry":["9","iterator=\u201ccom.cisco.vnrn.common.somweb.example.CmRPM_FRSM_Connect$Iterator\u201d"]},{"entry":["10","cursor=\u201ccom.cisco.vnm.common.somweb.example.CmRPM_FRSM_Connect$Cursor\u201d"]},{"entry":["11","handler=\u201ccom.cisco.vnm.common.somweb.example.CmRPM_FRSM_Connect$Handler\u201d"]},{"entry":["12","\u2002>"]},{"entry":["13","\u2003<!-- Initial Parameters -->"]},{"entry":["14","\u2003<initParamDef name=\u201cvirtualTemplate\u201d"]},{"entry":["15","\u2003\u2003label=\u201cVirtual Template\u201d"]},{"entry":["16","\u2003\u2003datatype=\u201cstring\u201d"]},{"entry":["17","\u2003\u2003groupName=\u201cinitial\u201d"]},{"entry":["18","\u2003\u2003toolTip=\u201cSelect a RPM Template or type in RPM Template\u201d"]},{"entry":["19","\u2003>"]},{"entry":["20","\u2003<\/initParamDef>"]},{"entry":["21","\u2003<initParamDef name=\u201cfromRPM\u201d"]},{"entry":["22","\u2003\u2003label=\u201cFrom RPM\u201d"]},{"entry":["23","\u2003\u2003datatype=\u201cstring\u201d"]},{"entry":["24","\u2003\u2003groupName=\u201cinitial\u201d"]},{"entry":["25","\u2003\u2003mandatory=\u201ctrue\u201d"]},{"entry":["26","\u2003\u2003toolTip=\u201cSelect a RPM\u201d"]},{"entry":["27","\u2003>"]},{"entry":["28","\u2003<\/initParamDef>"]},{"entry":["29","\u2003<initParamDef name=\u201ctoFrsm\u201d"]},{"entry":["30","\u2003\u2003label=\u201cTo FRSM\u201d"]},{"entry":["31","\u2003\u2003datatype=\u201cstring\u201d"]},{"entry":["32","\u2003\u2003groupName=\u201cinitial\u201d"]},{"entry":["33","\u2003\u2003mandatory=\u201ctrue\u201d"]},{"entry":["34","\u2003\u2003toolTip=\u201cSelect a FRSM\u201d"]},{"entry":["35","\u2003>"]},{"entry":["36","\u2003<\/initParamDef>"]},{"entry":["37","\u2003\u2002<paramGroupDef name=\u201cgeneral\u201d label=\u201cGeneral\u201d"]},{"entry":["38","\u2003\u2003\u2003wizardText=\u201cgeneral parameters\u201d\/>"]},{"entry":["39","\u2003\u2002<paramGroupDef name=\u201crpm\u201d label=\u201cRPM\u201d"]},{"entry":["40","\u2003\u2003\u2003wizardText=\u201cgeneral parameters\u201d\/>"]},{"entry":["41","\u2003\u2002<paramGroupDef name=\u201cfrsm\u201d label=\u201cFRSM\u201d"]},{"entry":["42","\u2003\u2003\u2003wizardText=\u201cgeneral parameters\u201d\/>"]},{"entry":["43",{}]},{"entry":["44","\u2003\u2002<initParamDef name=\u201cdownloadConnection\u201d"]},{"entry":["45","\u2003\u2003label=\u201cDownload Connection\u201d"]},{"entry":["46","\u2003\u2003datatype=\u201cstring\u201d"]},{"entry":["47","\u2003\u2003groupName=\u201cinitial\u201d"]},{"entry":["48","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["49","\u2003>"]},{"entry":["50","\u2003<\/initParamDef>"]},{"entry":["51",{}]},{"entry":["52","\u2003<initParamDef name=\u201cdownloadTransfer\u201d"]},{"entry":["53","\u2003\u2003label=\u201cDownload Transfer\u201d"]},{"entry":["54","\u2003\u2003datatype=\u201cstring\u201d"]},{"entry":["55","\u2003\u2003groupName=\u201cgeneral\u201d"]},{"entry":["56","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["57","\u2003>"]},{"entry":["58","\u2003<\/initParamDef>"]},{"entry":["59","\u2003<initParamDef name=\u201cconnectionType\u201d"]},{"entry":["60","\u2003\u2003label=\u201cConnection Type\u201d"]},{"entry":["61","\u2003\u2003datatype=\u201cstring\u201d"]},{"entry":["62","\u2003\u2003groupName=\u201cinitial\u201d"]},{"entry":["63","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["64","\u2003>"]},{"entry":["65","\u2003<\/initParamDef>"]},{"entry":["66","\u2003<paramDef name=\u201cdescription\u201d"]},{"entry":["67","\u2003\u2003label=\u201cDescription\u201d"]},{"entry":["68","\u2003\u2003datatype=\u201cstring\u201d"]},{"entry":["69","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["70","\u2003\u2003groupName=\u201crpm\u201d"]},{"entry":["71","\u2003\u2003subGroupName=\u201cRPM\u201d"]},{"entry":["72","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["73","\u2003>"]},{"entry":["74","\u2003<\/paramDef>"]},{"entry":["75","\u2003<paramDef name=\u201cpeakCellRate\u201d"]},{"entry":["76","\u2003\u2003label=\u201cPeak Cell Rate\u201d"]},{"entry":["77","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["78","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["79","\u2003\u2003groupName=\u201crpm\u201d"]},{"entry":["80","\u2003\u2003subGroupName=\u201cRPM\u201d"]},{"entry":["81","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["82","\u2003>"]},{"entry":["83","\u2003\u2002<range min=\u201c1\u201dmax=\u201c155000\u201d\/>"]},{"entry":["84","\u2003<default><int value=\u201c1536\u201d\/><\/default>"]},{"entry":["85","\u2003<\/paramDef>"]},{"entry":["86","\u2003<paramDef name=\u201csustainedCellRate\u201d"]},{"entry":["87","\u2003\u2003label=\u201cSustained Cell Rate\u201d"]},{"entry":["88","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["89","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["90","\u2003\u2003groupName=\u201crpm\u201d"]},{"entry":["91","\u2003\u2003subGroupName=\u201cRPM\u201d"]},{"entry":["92","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["93","\u2003>"]},{"entry":["94","\u2003\u2002<range min=\u201c1\u201d max=\u201c155000\u201d\/>"]},{"entry":["95","\u2003\u2002<default><int value=\u201c1536\u201d\/><\/default>"]},{"entry":["96","\u2003<\/paramDef>"]},{"entry":["97","\u2003<paramDef name=\u201cmaxBurstSize\u201d"]},{"entry":["98","\u2003\u2003label=\u201cMax Burst Size\u201d"]},{"entry":["99","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["100","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["101","\u2003\u2003groupName=\u201crpm\u201d"]},{"entry":["102","\u2003\u2003subGroupName=\u201cRPM\u201d"]},{"entry":["103","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["104","\u2003>"]},{"entry":["105","\u2003\u2002<range min=\u201c1\u201d max=\u201c65535\u201d\/>"]},{"entry":["106","\u2003\u2002<default><int value=\u201c1000\u201d\/><\/default>"]},{"entry":["107","\u2003<\/paramDef"]},{"entry":["108",{}]},{"entry":["109","\u2003<paramDef name=\u201ccacControl\u201d"]},{"entry":["110","\u2003\u2003label=\u201cCAC Control\u201d"]},{"entry":["111","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["112","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["113","\u2003\u2003groupName=\u201cfrsm\u201d"]},{"entry":["114","\u2003\u2003subGroupName=\u201cFRSM\u201d"]},{"entry":["115","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["116","\u2003>"]},{"entry":["117","\u2003\u2002<range min=\u201c1\u201d max=\u201c2\u201d\/>"]},{"entry":["118","\u2003\u2002<default><int value=\u201c1\u201d\/><\/default>"]},{"entry":["119","\u2003<\/paramDef>"]},{"entry":["120","\u2003<paramDef name=\u201cburstCommitted\u201d"]},{"entry":["121","\u2003\u2003label=\u201cBurst Committed\u201d"]},{"entry":["122","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["123","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["124","\u2003\u2003groupName=\u201cfrsm\u201d"]},{"entry":["125","\u2003\u2003subGroupName=\u201cFRSM\u201d"]},{"entry":["126","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["127","\u2003>"]},{"entry":["128","\u2003\u2002<range min=\u201c0\u201d max=\u201c65535\u201d\/>"]},{"entry":["129","\u2003\u2002<default><int value=\u201c5100\u201d\/><\/default>"]},{"entry":["130","\u2003<\/paramDef>"]},{"entry":["131","\u2003<paramDef name=\u201cburstExceeded\u201d"]},{"entry":["132","\u2003\u2003label=\u201cBurst Exceeded\u201d"]},{"entry":["133","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["134","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["135","\u2003\u2003groupName=\u201cfrsm\u201d"]},{"entry":["136","\u2003\u2003subGroupName=\u201cFRSM\u201d"]},{"entry":["137","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["138","\u2003>"]},{"entry":["139","\u2003\u2002<range min=\u201c0\u201d max=\u201c65535\u201d\/>"]},{"entry":["140","\u2003\u2002<default><int value=\u201c5100\u201d\/><\/default>"]},{"entry":["141","\u2003<\/paramDef>"]},{"entry":["142","\u2003<paramDef name=\u201cinitBurstSize\u201d"]},{"entry":["143","\u2003\u2003label=\u201cInitial Burst Size\u201d"]},{"entry":["144","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["145","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["146","\u2003\u2003groupName=\u201cfrsm\u201d"]},{"entry":["147","\u2003\u2003subGroupName=\u201cFRSM\u201d"]},{"entry":["148","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["149","\u2003>"]},{"entry":["150","\u2003\u2002<range min=\u201c0\u201d max=\u201c65535\u201d\/>"]},{"entry":["151","\u2003\u2002<default><int value=\u201c5100\u201d\/><\/default>"]},{"entry":["152","\u2003<\/paramDef>"]},{"entry":["153","\u2003<!--"]},{"entry":["154","\u2003<paramDef name=\u201cdeTagging\u201d"]},{"entry":["155","\u2003\u2003label=\u201cDE Tagging\u201d"]},{"entry":["156","\u2003\u2003datatype=\u201cenum\u201d"]},{"entry":["157","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["158","\u2003\u2003groupName=\u201cfrsm\u201d"]},{"entry":["159","\u2003\u2003subGroupName=\u201cFRSM\u201d"]},{"entry":["160","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["161","\u2003>"]},{"entry":["162","\u2003\u2002<default><enum name=\u201c2\u201d value=\u201c2\u201d\/><\/default>"]},{"entry":["163","\u2003\u2002<enumset>"]},{"entry":["164","\u2003\u2003<enum name=\u201c1\u201d value=\u201c1\u201d\/>"]},{"entry":["165","\u2003\u2003<enum name=\u201c2\u201d value=\u201c2\u201d\/>"]},{"entry":["166","\u2003\u2002<\/enumset>"]},{"entry":["167","\u2003<\/paramDef>"]},{"entry":["168",{}]},{"entry":["169","\u2003<paramDef name=\u201cegressRate\u201d"]},{"entry":["170","\u2003\u2003label=\u201cEgress Rate\u201d"]},{"entry":["171","\u2003\u2003datatype=\u201cint\u201d"]},{"entry":["172","\u2003\u2003screen=\u201cbasic\u201d"]},{"entry":["173","\u2003\u2003groupName=\u201cfrsm\u201d"]},{"entry":["174","\u2003\u2003subGroupName=\u201cFRSM\u201d"]},{"entry":["175","\u2003\u2003access=\u201ccreate_rw, modify_rw\u201d"]},{"entry":["176","\u2003>"]},{"entry":["177","\u2003\u2002<range min=\u201c0\u201d max=\u201c1536000\u201d\/>"]},{"entry":["178","\u2003\u2002<default><int value=\u201c1536000\u201d\/><\/default>"]},{"entry":["179","\u2003<\/paramDef>"]},{"entry":["180","\u2003\u2002-->"]},{"entry":["181",{}]},{"entry":["182","<\/objectDef>"]},{"entry":["183",{}]},{"entry":["184","<\/packageDef>"]},{"entry":["185","<\/morMeta>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0135","num":"0134"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXAMPLE SECURITY DATA DEFINITION"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","<SecurityData>"]},{"entry":[{},"2","<SecData UserName=\u201cpeterj\u201d Password=\u201cpeterj\u201d "]},{"entry":[{},{},"\u2003\u2003AllowedScrIds=\u201csubarea1,subarea2\u201d"]},{"entry":[{},"3","\u2003\u2003AllowedActions=\u201cAdd,View,Modify,Delete\u201d \/>"]},{"entry":[{},"4","<SecData UserName=\u201cjcpenn\u201d Password=\u201cjcpenn\u201d"]},{"entry":[{},{},"\u2003\u2003AllowedScrIds=\u201csubarea2\u201d"]},{"entry":[{},"5","\u2003\u2003AllowedActions=\u201cAdd,Modify\u201d \/>"]},{"entry":[{},"6","<SecData UserName=\u201cyorkm\u201d Password=\u201cyorkm\u201d "]},{"entry":[{},{},"\u2003\u2003AllowedScrIds=\u201csubarea1\u201d"]},{"entry":[{},"7","\u2003\u2003AllowedActions=\u201cAdd,Delete\u201d \/>"]},{"entry":[{},"8","<\/SecurityData>"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
