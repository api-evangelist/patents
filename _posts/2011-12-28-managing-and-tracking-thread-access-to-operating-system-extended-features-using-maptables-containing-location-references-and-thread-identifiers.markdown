---
title: Managing and tracking thread access to operating system extended features using map-tables containing location references and thread identifiers
abstract: Extended features such as registers and functions within processors are made available to operating systems (OS) using an extended-state driver and by modifying instruction set extensions, such as XSAVE. A map-table designates a correspondence between memory locations for storing data relating to extended features not supported by the OS and called by an application. As a result, applications may utilize processor resources which are unsupported by the OS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058201&OS=09058201&RS=09058201
owner: Intel Corporation
number: 09058201
owner_city: Santa Clara
owner_country: US
publication_date: 20111228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION","CONCLUSION"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/067646, filed Dec. 28, 2011, entitled CONTEXT-STATE MANAGEMENT.","Development times for computer processors, operating systems, and applications which execute thereon are often out of synchronization with one another. For example, a new processor design may be released every two years while new operating systems are released every three years. As a result, operating systems may be unable to access features present in new hardware, making these features unavailable for use by applications.","Architecture","A computer processor, or \u201cprocessor,\u201d is designed to execute instructions stored in memory and perform one or more various operations based on those instructions. As successive generations of processors are produced, designers may add extended features. These extended features may include registers, operations, and so forth which rely on additional hardware present in a particular generation of processor. An operating system comprises executable instructions which manage hardware within or coupled to the processor, handle data input and output, and otherwise provide an environment for execution of other applications.","Processors, operating systems, and applications may have different development timelines and may not be released contemporaneously. Also, software developers who create and maintain operating systems may not take advantage of particular extended features in a new processor until after the new processor design has been available for testing, debug, sale, and so forth.","Described herein are devices and techniques for enabling applications to utilize extended features which are unsupported by an underlying operating system. In one implementation, applications which call for the extended features and only utilize OS-service of context-switch may be enabled using the devices and techniques herein. This allows software developers to take advantage of these new features without waiting for the operating system developer to enable that extended feature in the operating system. The applications may thus benefit from these extended features which may minimize time to perform a computational task, reduce power consumption, enable new functions, and so forth.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","102","102","104","1","104","2","104","104","104","106","1","106","2","106","108","1","108","2","108","106","108","106","108","106","106","110","104"]},"In other implementations, the extended features  may be developed contemporaneously with the features , but provided only on particular processors  in a product line. For example, processor Gamma may offer the features , while processor Iota offers the features  plus the extended features .","As the extended features  are added, one or more additional registers (G) may also be added to support these extended features . The registers (G) are storage elements and may be part of the core  or coupled to the core , providing locations to store data. The registers  are read\/write capable.","A memory controller  couples the processor  to memory  storage devices which are separate from the processor . In some implementations, the memory  may be allocated into \u201cmemory frames\u201d into which data may be stored. In some implementations, the coupling may be provided using one or more electrically conductive wires. The memory  comprises computer-readable storage media (\u201cCRSM\u201d) and may be any available physical media accessible by a computing device to implement the instructions stored thereon or store data within. CRSM may include, but is not limited to, random access memory (\u201cRAM\u201d), read-only memory (\u201cROM\u201d), electrically erasable programmable read-only memory (\u201cEEPROM\u201d), flash memory, compact disk read-only memory (\u201cCD-ROM\u201d), digital versatile disks (\u201cDVD\u201d) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the processor .","Within the memory  may be stored an operating system . The operating system  is configured to manage hardware and services within and coupled to the processor  for the benefit of the operating system (\u201cOS\u201d)  and one or more applications . As part of this management, the OS  provides functionality allowing the applications  to access features within the processors , such as particular registers , logic elements, and so forth. However, the OS  may not necessarily support the extended features . Where the extended features  are unsupported by the OS , the applications  are unable to access those extended features . This causes the application  to improperly execute or otherwise fail to operate as designed or run with lower performance.","The applications  are sets of instructions which, when executed on the processor  perform operations or tasks. During operation, the application  and the OS  may store data within an OS kernel stack . The OS kernel stack  may comprise a dedicated region of memory  configured to store data. The OS  and the applications  may have a plurality of threads configured for execution on the processors . Within the OS kernel stack , thread data  from the threads may be stored. Within the thread data  may be feature image  data, storing information about the feature . The OS kernel stack  may store data for a plurality of threads (), (), . . . , (T), as well as corresponding feature images (), (), . . . , (T). In some implementations, the feature image  may be provided using an XSAVE feature as available on processors having certain architectures developed by Intel Corporation. In these implementations, the feature image  may be the XSAVE image.","An extended state driver  is stored in the memory . In some implementations, the extended state driver  may also be implemented as hardware logic. The extended state driver  allows the application  to access the extended features  which are unsupported by the OS . The extended state driver  provides and manages dedicated memory locations such as the extended feature image  in the memory  to store processor states associated with the extended features . The regular features  continue to have their state information stored within the OS kernel stack  and associated thread data  areas, while the extended state driver  services the extended features .","The extended state driver  would thus allow the application  to call upon the extended features  and utilize the associated registers . As described below in more detail, the extended state driver  builds a map-table  which is used to store extended feature image  data in the memory , outside of the OS kernel stack  locations. The map-table  comprises a data structure such as a table, linked list, array, and so forth which associates a particular thread and extended feature  called for by the thread with a particular extended feature image . The extended feature image  is used to store information regarding the extended feature . For example, the extended feature image  may be used to store data from the registers  associated with the extended features  after context switching out the thread, which allows another thread to execute on the processor .","In some implementations, existing instructions such as XSAVE and XRSTOR may be enhanced to provide additional functionality designed to work in conjunction with the extended state driver . For example, XSAVE may detect a particular value in a register such as the CPL3_XFEM value and based on that value determine whether to store a state in the OS kernel stack  or in the extended feature image . In some implementations a heap data structure may be used instead of a stack.","Use of the register such as the CPL3_XFEM thus allows the application to use features which the OS is not familiar with. A particular value such as the XFEM field in the feature image  such as one or more bits in the XSAVE image may also be used to indicate special handling by XRSTOR, such that when present XRSTOR looks for the extended feature image  rather than the OS kernel stack . Thus, features enabled by XFEM may be stored in the OS kernel stack  while the extended features enabled by the CPL3_XFEM may be stored in the extended feature image  as accessed by the extended state driver . In one implementation, an XHEADER portion of the XSAVE image may comprise an xstate_bv[63] value used to indicate the special handling, an xheader[23-16] value indicating a particular table location, and so forth.","Other devices may be coupled to the processor , the memory , or both. An input\/output complex  may comprise one or more devices and logical elements which allow for the exchange of information between the processor , memory , and other devices such as peripherals. For example, the input\/output complex  may comprise a universal asynchronous receiver\/transmitter device. A clock  may provide timing signals to allow synchronization of circuitry within one or more portions of the device . A power source  provides electrical power to the processors , the memory , the input\/output complex , the clock , and so forth.","In some implementations, such as in systems-on-a-chip, several of the elements described in  may be disposed on a single die. For example, the processor , memory , input\/output complex , clock , and so forth may be disposed on the same die.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["128","126","108","118","126","128","130","108","130"]},"In one implementation, a single entry in the map-table  corresponds with a thread of a single application . The various extended features  which the thread  may deploy are thus serviced by the same single entry. The entry holds a memory pointer to a particular extended-feature image  in which all of the various extended feature registers  may be stored.","The map-table  may be implemented as a table, linked list, array, or other data structure. The map-table  may comprise attributes such as a table location , an extended identifier , an OS thread-ID , an address pointer , and an extended-features-in-use attribute  which indicates which extended features are in use. The table location  designates a particular entry within the map-table  as distinct from others. For example, in one implementation the table location  may comprise a non-zero integer number.","The extended identifier  may be based at least in part on architectural-state data maintained by the operating system  as executed on the processor . In one implementation, the extended identifier  may comprise a value from a stack pointer associated with the thread and a control register value associated with the thread. The pointer may also be stored in other data structures, such as a heap. In the case of the x86 architecture, this may comprise some combination of a stack pointer and a CR3 register used for translation of virtual addresses to a physical address.","The OS thread-ID  is populated with the operating system thread identifier number. This number  identifies the particular process as executing on the processor . For example, process  as shown here. The address pointer  provides the location in the memory  of the extended feature image (). This may comprise a virtual memory address or an actual hardware memory address.","The extended-features-in-use  attribute may be used to indicate all of the extended features  that the thread  is allowed to use. For example, the attribute may store bits identifying that an instruction of the extended features are to be used.","The contents and arrangement of the map-table  may be varied depending upon design considerations, processor  architecture, and so forth. Furthermore, the attributes shown above are provided by way of example, and not as a limitation. For example, in one implementation an OS-xsave-ptr field may be used which may contain data comprising thread context, OS kernel-stack frame pointer, CR3 register, XSAVE memory-image pointer, and so forth. In some implementations some of the attributes associated with a currently running thread may be held in dedicated system registers, such as the CPL3_XFEM register, which correlates with information in the map-table . This improves operation by allowing the thread to access the extended feature without referencing the map-table .","Illustrative Processes","The processes described in this disclosure may be implemented by the devices described herein, or by other devices. These processes are illustrated as a collection of blocks in a logical flow graph. Some of the blocks represent operations that can be implemented in hardware, software, or a combination thereof. In the context of software, the blocks represent computer-executable instructions stored on one or more computer-readable storage media that, when executed by one or more processors, perform the recited operations. Generally, computer-executable instructions include routines, programs, objects, components, data structures, and the like that perform particular functions or implement particular abstract data types. The order in which the operations are described is not intended to be construed as a limitation, and any number of the described blocks can be combined in any order or in parallel to implement the processes.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["300","118","108","126","302","126","118","108","116","108","108"]},"At , a thread of the application  is registered in the map-table . In some implementations, this call to register may be done for all threads of the application  or only by the threads of the application  that include the extended features . This registration may include designating a blank location within the map-table  for storage of information as described above with regards to .","At , an extended feature image  is assigned to the thread for holding the extended feature  state when not in use. Data identifying the assigned extended feature image  is stored in the map-table, such as in the address pointer  attribute designating the extended feature image \u201c()\u201d as shown in .","At , a table location  reference is returned to the application  from the map-table  which corresponds to the assigned extended feature image . This table location reference  ay not be referenced directly or altered by the application . The table location reference  may be kept in the context of the application  until a time when context-switched out. At that time of context-switch out, the XSAVE instruction may find the memory pointer to the extended-feature image  by referencing the table location  reference. For example, the table location  value of \u201c1\u201d may be returned.","At , the application  may be provided access to the extended feature operations, extended feature registers, or both by using extended state driver  which in turn uses the table location  reference. In some implementations, direct access to the extended feature image  may be given to mechanisms such as XSAVE and XRESTORE which may manage the save and restore of the extended feature resources.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["400","126","118","102","118","102","102","102","120","130","102"]},"As described above, the following process may be implemented by the extended state driver . At , a call to context switch out a thread of the application  running on the processor  is received. At , contents of one or more registers  associated with the application  are written into the feature image  in the OS kernel stack . For example, the XSAVE instruction may be used to save the contents to the OS kernel stack .","At , contents of the extended feature  are written to an extended feature image  location in the memory  using the table location  reference in the map-table . At , a map-table location and one or more bits indicating special handling associated with the extended feature image  are written to the feature image  in the OS kernel stack .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["500","102","126"]},"At , a call is received to context switch in a thread of an application  for execution on the processor . At , contents from a feature image  associated with the thread in the OS kernel stack  are written to one or more registers  within the processor  associated with the application . In some implementations, the XRSTOR function may be used to process this write.","At , when inspection of the feature image  determines one or more bits indicating special handling are present, a portion of the table location  previously stored in the feature image  that refers the thread to the associated extended data image  is restored to the application . For example, the extended-features-in-use  are written into the CPL3_XFEM register.","At , the associated extended data is restored from the extended feature image  to the extended registers  using the table location  reference in the map-table . The application  may now access the extended feature  which is otherwise unsupported by the OS .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 6","b":["600","126","128","602","108","108","110","108","116"]},"At , callbacks are established to a process-duplication handler and process termination system-handler, where the callbacks are configured to manipulate the memory location. In some implementations, the handlers may comprise functions of the OS .","At , a call is received from a thread to enable the extended feature . In one implementation the thread may call with the EDX:EAX bit vector which refers to particular processor registers where the processor  implements the x86 architecture.","At , at least partly in response to the call, the map-table  is populated by mapping the extended feature  to extended feature data stored in the memory location. For example, the extended feature data may be stored in the extended feature image  in the memory .","At , the thread is serviced and one or more bits indicating that the extended feature  is in use are set. For example, the extended-features-in-use  attribute may be populated with one or more bits indicating that the extended feature  is in use, and in some implementations what the extended feature  is. For example, a CPL3_XFEM register may be set to a non-zero value. At , a context switch is initiated by receiving a signal such as a time tick, interrupt, or indication from the thread that it is waiting for a resource to become available. For example, the time tick may be generated at least in part as a result of timing pulses received from the clock .","At , at least partly in response to the initiation of the context switch, a state of the register  associated with the extended feature  is saved into the extended feature data in the memory location during a context switch. The context switch may be initiated by a process in the OS . Continuing the example, the data from the registers  for the extended feature  may be stored in the extended feature image .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["700","702","704","104","1","708","710","712","714","716","718","720","722","724","726","728","740","108","122","706","702"]},"The processor(s)  may comprise one or more cores (), (), . . . , (C). The cores  may couple to one or more cache units (), (), . . . , (N). In some implementations, the processors  may comprise a single type of core, while in other implementations, the processors  may comprise two or more distinct types of cores. Each core may include an instance of logic to perform various tasks for that respective core. The logic may include one or more of dedicated circuits, logic units, microcode, or the like.","The set of shared cache units  may include one or more mid-level caches, such as level 2 (L2), level 3 (L3), level 4 (L4), or other levels of cache, a last level cache (LLC), and\/or combinations thereof. The system agent unit  includes those components coordinating and operating cores ()-(C). The system agent unit  may include for example a power control unit (PCU) and a display unit. The PCU may be or include logic and components needed for regulating the power state of the cores ()-(C) and the integrated graphics logic . The display unit is for driving one or more externally connected displays.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 8","b":["800","802","802","102","1","102","2","102","102","104","1","104","2","104"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9","b":["900","902","902","102","1","102","2","102","3","102","102","104","1","104","2","104"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 10","b":["1000","1002","1002","102","1","102","2","102","102","104","1","104","2","104"]},"Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as illustrative forms of implementing the claims. For example, the methodological acts need not be performed in the order or combinations described herein, and may be performed in any combination of one or more acts."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is set forth with reference to the accompanying drawing figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different figures indicates similar or identical items or features.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
