---
title: Operator interface controls for creating a run-time operator interface application for a test executive sequence
abstract: A plurality of operator interface controls for use in a run-time operator interface application for executing one or more test executive sequences is described. Each operator interface control may have associated functionality for managing execution of a test executive sequence and/or functionality for displaying information regarding execution of a test executive sequence. One or more of the operator interface controls may be included in a run-time operator interface application, which may aid the user in easily creating the run-time operator interface application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07143361&OS=07143361&RS=07143361
owner: National Instruments Corporation
number: 07143361
owner_city: Austin
owner_country: US
publication_date: 20021216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to the field of test executive software for organizing and executing test executive sequences. In particular, the invention relates to a system and method for creating run-time operator interface applications for test executive sequences and to a set of operator interface controls for creating the run-time operator interface applications.","Test executive software is specialized software that allows a user to organize and execute sequences of reusable test modules to test units under test (UUTs). For example, the test modules may interact with one or more hardware instruments to test the UUT(s). The test modules often have a standard interface and typically can be created in a variety of programming environments. The test executive software operates as a control center for the automated test system. More specifically, the test executive software allows the user to create, configure, and\/or control test sequence execution for various test applications, such as production and manufacturing test applications. Text executive software typically includes various features, such as test sequencing based on pass\/fail results, logging of test results, and report generation, among others.","Test executives include various general concepts. The following comprises a glossary of test executive nomenclature, as used herein:","Code Module\u2014A program module, such as a Windows Dynamic Link Library (.dll), LabVIEW VI (.vi), ActiveX component, or other type of program module or component, that implements one or more functions that perform a specific test or other action.","Test Module\u2014A code module that performs a test of a UUT.","Step\u2014An action that the user can include within a sequence of other actions. A step may call a test module to perform a specific test.","Step Module\u2014The code module that a step calls.","Sequence\u2014A series of steps that the user specifies for execution in a particular order. Whether and when a step is executed can depend on the results of previous steps.","Sequence File\u2014A file that contains the definition of one or more sequences.","Sequence Editor\u2014A program that provides a graphical user interface for creating, editing, and debugging sequences.","Run-time Operator Interface Application\u2014A program that provides a graphical user interface for executing sequences, e.g., on a production station. A sequence editor and run-time operator interface can be separate application programs or different aspects of the same program.","Test Executive Engine\u2014A module or set of modules that provide an API for creating, editing, executing, and debugging sequences. A sequence editor or run-time execution operator interface may use the services of a test executive engine.","Application Development Environment (ADE)\u2014A programming environment such as LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, etc., in which the user can create test modules and run-time operator interfaces.","Unit Under Test (UUT)\u2014The device or component that is being tested.","Thus, the user may use the sequence editor to construct a test executive sequence comprising a plurality of steps. The test executive sequence may then be executed to perform tests of a system or UUT, e.g., via a run-time operator interface application.","A plurality of operator interface controls for use in a run-time operator interface application for executing one or more test executive sequences is described. Each operator interface control may have associated functionality for managing execution of a test executive sequence and\/or functionality for displaying information regarding execution of a test executive sequence.","A graphical user interface that provides access to the plurality of operator interface controls may be displayed. For example, the graphical user interface (GUI) may be a GUI of an application development environment (ADE) used in creating the run-time operator interface application. One or more of the operator interface controls may be included in the run-time operator interface application in response to user input to the graphical user interface. One or more files representing the run-time operator interface application may be stored, and the run-time operator interface application may be executed.","Executing the run-time operator interface application may include executing program instructions associated with one or more of the operator interface controls included in the run-time operator interface application. The program instructions associated with the operator interface control(s) may execute to perform one or more of managing execution of a test executive sequence and\/or displaying information regarding execution of a test executive sequence.","One embodiment of the invention provides the ability for the user to create \u201cconnections\u201d or \u201cbindings\u201d between one or more GUI elements included in an application and a software component, referred to herein as a manager component. The connection or binding created between a GUI element and a manager component may allow the manager component to perform various operations for the GUI element without requiring the user to write code for these operations to be performed. This embodiment may greatly reduce the amount of code required to be written by a user to implement certain functionality. It is noted that the connections or bindings described in this embodiment may be used for any general type of operator interface or GUI application and is not limited to Test Executive applications.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Incorporation by Reference","The following references are hereby incorporated by reference in their entirety as though fully and completely set forth herein.","U.S. patent application Ser. No. 09\/259,162 titled \u201cTest Executive System and Method Including Step Types for Improved Configurability,\u201d filed Feb. 26, 1999.","U.S. patent application Ser. No. 09\/943,988 titled \u201cSystem and Method Enabling Hierarchical Execution of a Test Executive Subsequence,\u201d filed Aug. 31, 2001.","U.S. patent application Ser. No. 09\/944,546 titled \u201cSystem and Method Enabling Execution Stop and Restart of a Test Executive Sequence(s),\u201d filed Aug. 31, 2001.","U.S. patent application Ser. No. 10\/056,975 titled \u201cTest Executive System Having XML Object Representation Capabilities,\u201d filed Jan. 25, 2002.","U.S. patent application Ser. No. 10\/056,853 titled \u201cTest Executive System Having XML Reporting Capabilities,\u201d filed Jan. 25, 2002.","FIG. \u2014Instrumentation System",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102"]},"The computer  may execute a run-time operator interface application for analyzing, measuring, and\/or controlling a unit under test (UUT) or process . The run-time operator interface application may invoke execution of a test executive sequence to analyze, measure, and\/or control the unit under test (UUT) or process . For example, the test executive sequence may include various steps referencing code modules operable to connect through the one or more instruments to analyze, measure, or control the unit under test (UUT) or process .","The test executive sequence may have been created using test executive software, e.g., a sequence editor such as described below. The test executive software may enable the test executive sequence to be programmatically invoked from a program, e.g., the run-time operator interface application. The run-time operator interface application may include a graphical user interface displayed on the computer  for executing the test executive sequence. This graphical user interface may have any of various appearances, e.g., may be customized for a particular testing application or a particular test executive sequence. For example, the run-time operator interface application may be written by a user and may include a graphical user interface appropriately customized for use by test operators working in the user's production facilities, e.g., in a plant or laboratory.","The graphical user interface of the run-time operator interface application may display any of various types of information regarding the test executive sequence and may enable a user, e.g., a test operator, to control execution of the test executive sequence in any of various ways. As one example, the graphical user interface may display steps of the test executive sequence, e.g., may display a list of steps. Various other types of information may also be displayed along with the steps of the test executive sequence, such as execution results of the steps, e.g., pass\/fail results, numeric results, etc. The graphical user interface may also enable the user to invoke execution of the test executive sequence, stop or pause execution of the test executive sequence, specify a number of times to execute the test executive sequence, etc. As another example, the graphical user interface may also allow the user to view a report summarizing results of executing the test executive sequence. The graphical user interface may also allow the user to select a particular test executive sequence for execution. For example, the run-time operator interface application may be operable to invoke execution of multiple test executive sequences, e.g., together and\/or separately, depending on which test executive sequence(s) is selected.","As described below, according to one embodiment of the invention, a plurality of operator interface controls may be provided to the user for use in creating the operator interface application. As used herein, the term \u201ccontrol\u201d may include a software component or object having associated program instructions. Each operator interface control may have functionality implemented by the associated program instructions for one or more of managing execution of a test executive sequence and\/or displaying information regarding execution of a test executive sequence. The operator interface controls may facilitate the efficient creation of a run-time operator interface application. Exemplary operator interface controls and a method for creating a run-time operator interface application using one or more operator interface controls are described in more detail below.","Referring again to , the one or more instruments of the instrumentation control system  may include a GPIB instrument  and associated GPIB interface card , a data acquisition board  and associated signal conditioning circuitry , a VXI instrument , a PXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , and\/or one or more computer based instrument cards , among other types of devices.","The GPIB instrument  may be coupled to the computer  via a GPIB interface card  provided by the computer . In a similar manner, the video device  may be coupled to the computer  via the image acquisition card , and the motion control device  may be coupled to the computer  through the motion control interface card . The data acquisition board  may be coupled to the computer , and optionally interfaces through signal conditioning circuitry  to the UUT. The signal conditioning circuitry  may include an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules .","The GPIB card , the image acquisition card , the motion control interface card , and the DAQ card  are typically plugged in to an I\/O slot in the computer , such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer . However, these cards , ,  and  are shown external to computer  for illustrative purposes. The cards , ,  and  may also be implemented as external devices coupled to the computer , such as through a serial bus.","The VXI chassis or instrument  may be coupled to the computer  via a serial bus, MXI bus, or other serial or parallel bus provided by the computer . The computer  preferably includes VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis . The PXI chassis or instrument is preferably coupled to the computer  through the computer's PCI bus.","A serial instrument (not shown) may also be coupled to the computer  through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer . In typical systems an instrument will not be present of each interface type, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments.","The instruments may be coupled to the unit under test (UUT) or process , or may be coupled to receive field signals, typically generated by transducers. Other types of instruments or devices may be connected to the system, as desired.","The computer  may include a memory medium on which a run-time operator interface application is stored. The memory medium may store one or more operator interface controls included in the run-time operator interface application. In one embodiment, the memory medium may also store one or more test executive sequences which may be invoked by the run-time operator interface application. In one embodiment, the memory medium may also store test executive software used in executing the test executive sequence(s), e.g., a test executive engine. In various embodiments, one or more of the software elements described above may be included on remote computer systems.","In one embodiment, the memory medium may also store software used in creating or configuring the test executive sequence(s) and\/or software used in creating the run-time operator interface application. For example, the software used in creating or configuring the test executive sequence(s) may include test executive software, e.g., a sequence editor, used in specifying or configuring steps of the test executive sequence(s). The software used in creating the run-time operator interface application may include one or more application development environments (ADEs). The software used in creating the run-time operator interface application may also include a plurality of operator interface controls. In another embodiment, the test executive sequence(s) and\/or the run-time operator interface application may be created on another computer system, e.g., a development computer system, and the software used in creating or configuring the test executive sequence(s) and\/or the software used in creating the run-time operator interface application may not be stored on a memory medium of the computer .","As used herein, the term \u201cmemory medium\u201d may include an installation medium, e.g., a CD-ROM, floppy disks , or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, Rambus RAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof. In addition, the memory medium may be located in a first computer in which the programs or elements are executed or located, or the memory medium may be located in a second different computer that connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide program instructions or data to the first computer for execution or access.","FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2","FIG. 2"],"b":["102","102"]},"The computer  includes at least one central processing unit or CPU  that is coupled to a processor or host bus . The CPU  may be any of various types, including an x86 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  is coupled to the host bus  by means of memory controller . The main memory  may store software according to one embodiment of the invention, such as the software elements described above with reference to . The main memory  may also store operating system software as well as other software for operation of the computer system, as well known to those skilled in the art. The CPU  executing code and data from the main memory  may comprise a means for implementing the methods described below.","The host bus  is coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  may be the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can also be used. The expansion bus  may include slots for various devices such as the data acquisition board  (of ) and a GPIB interface card  that provides a GPIB bus interface to the GPIB instrument  (of ). A video display subsystem  and hard drive  coupled to the expansion bus  is also shown.","In one embodiment, a reconfigurable instrument  may also be connected to the computer . The reconfigurable instrument  may include a functional unit, also referred to as configurable logic, such as a programmable logic device (PLD), e.g., an FPGA, or a processor and memory, which may execute a real time operating system. Program instructions may be downloaded and executed on the reconfigurable instrument . In one embodiment, at least a portion of the software described herein may execute on the reconfigurable instrument . In various embodiments, the functional unit may be included on an instrument or device connected to the computer through means other than an expansion slot, e.g., the instrument or device may be connected via an IEEE 1394 bus, USB, or other type of port. Also, the functional unit may be included on a device such as the data acquisition board  or another device shown in .","Test Executive Software Components",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 3","FIG. 3"]},"The test executive software of  includes a sequence editor  for creating and editing test executive sequences. The sequence editor  may interface to the test executive engine . In one embodiment, one or more process models  may couple to the test executive engine . The test executive engine  may interface through an adapter interface  to one or more adapters . The adapters  shown in  include a LabVIEW standard prototype adapter, a C\/CVI prototype adapter, a DLL flexible prototype adapter, and a sequence adapter. The LabVIEW standard prototype adapter may interface to code modules having a .VI extension, i.e., LabVIEW graphical programs. The C\/CVI prototype adapter may interface to code modules having a .dll, lib, .obj, or .c extension. The DLL flexible prototype adapter may interface to code modules having a .dll extension. The sequence adapter may interface to sequence files.","The test executive engine  may manage the execution of test executive sequences. Test executive sequences include test executive steps that may call external or user-supplied code modules. By using module adapters  that have the standard adapter interface , the test executive engine  may load and execute different types of code modules. Thus, the test executive may be independent from particular application development environments (ADEs) used to create the code modules. In one embodiment, the test executive may use a special type of sequence called a process model to direct the high-level sequence flow.","As shown, one or more run-time operator interface applications  may interface to the test executive engine . As described above, custom run-time operator interface application(s)  for executing one or more test executive sequences may be created by a user. Also, in one embodiment, one or more default run-time operator interface applications  may be provided with the test executive software, which the user may then utilize or modify. A plurality of operator interface controls  may be provided. The operator interface controls  may be utilized in creating the run-time operator interface application(s) , as described in detail below.","The run-time operator interface applications  may be written or created using any of various' application development environments (ADEs). For example, the test executive engine  may provide an application programming interface (API) enabling programs written in various programming languages or ADEs to call the test executive engine .  illustrates the LabVIEW, LabWindows\/CVI, and Visual Basic application development environments. However, in other embodiments, any of various other ADEs may be used to create a run-time operator interface application, including other Microsoft Visual Studio applications, the Delphi ADE, and Java ADEs, among others.","Test Executive Sequence Editor","The sequence editor  may be an application program in which the user creates, modifies, and\/or debugs test executive sequences. The sequence editor  may have a graphical user interface (GUI) enabling a user to efficiently create a test executive sequence for testing a system or unit under test. For example, the sequence editor  may provide the user with easy access to test executive features, such as step types, step properties, sequence parameters, step result collection, etc.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 4","FIG. 4","FIG. 5","FIG. 5"],"b":"212"},"In one embodiment, the sequence editor  may also include an execution window that provides debugging tools, e.g., debugging tools such as those found in application development environments such as LabVIEW, LabWindows\/CVI, Microsoft Visual C\/C++, Microsoft Visual Basic, etc. These may include features such as breakpoints, single stepping, tracing, a variable display, and a watch window.","Test Executive Engine","The test executive engine  may be used when creating, editing, executing, and debugging test executive sequences. The test executive engine  may also provide a test executive engine application programming interface (API) that enables another program to interface with the test executive engine  in order to perform these actions. For example, a run-time operator interface application may request the test executive engine  to execute a test executive sequence, stop execution of the test executive sequence, etc.","In one embodiment, the test executive engine  may export an object-based or component-based API, which in one embodiment may be an ActiveX Automation API. The sequence editor  and run-time operator interface applications  may use the test executive engine API. The engine API may be called from any programming environment able to use the API. For example, where the API comprises an ActiveX Automation API, the engine API may be called from any programming environment that supports access to ActiveX Automation servers. Thus, in various embodiments, the engine API may be called from operator interface applications or test modules written in various programming environments, including those that are written in LabVIEW, LabWindows\/CVI, Microsoft Visual C++, Microsoft Visual Basic, Java, etc.","One task performed by the test executive engine  is to manage the execution of test executive sequences. Executing a sequence may comprise executing steps included in the sequence. Not all steps in the sequence are necessarily executed. For example, the user may configure some steps to be skipped, e.g., depending on execution results of previous steps.","For a step that references a user-supplied code module, executing the step may comprise executing the respective code module. In addition to these user-supplied code modules being executed, for each step, additional program instructions may be executed, wherein these additional program instructions implement additional functionality specified for the step. These additional program instructions may be specified by the test executive software, rather than being defined by the respective user-supplied code module for the step. As one example, when including a step in a sequence, the user may configure execution results of the step to be collected. In this example, when the step is executed, program instructions to store the step results accordingly may be executed in addition to the program instructions of a user-supplied code module that the step references.","It is noted that not all steps may reference a user-supplied code module. For example, the test executive may provide some step types that primarily affect various aspects of sequence execution and are not designed to reference user-supplied code modules.","As a test executive sequence is executed, various results may be generated, and these results may be collected, e.g., may be stored in one or more data structures. In various embodiments, the results may be generated or structured in any of various ways. For example, in one embodiment, there may be one or more results for the unit under test (UUT) as a whole, as well as results for individual steps in the sequence. The results may vary in data type as well.","Steps","As described above, a test executive sequence comprises a plurality of steps. A step can do many things, such as initializing an instrument, performing a complex test, or making a decision that affects the flow of execution in a sequence. Steps may perform these actions through several types of mechanisms, including jumping to another step, executing an expression, calling a sub-sequence or calling an external code module. The term \u201cstep module\u201d is used to refer to the code module that a step calls.","Steps may have custom properties. For steps that call code modules, custom step properties may be useful for storing parameters to pass to the code module for the step. They may also serve as a place for the code module to store its results. The test executive API may be used to access the values of custom step properties from code modules.","In one embodiment, not all steps call code modules. Some steps may perform standard actions that the user configures using a dialog box. In this case, custom step properties may be useful for storing configuration settings that the user specifies.","Built-In Step Properties","Steps may have a number of built-in properties that the user can specify. In one embodiment, exemplary built-in step properties include:","Preconditions that allow the user to specify the conditions that must be true for the test executive to execute the step during the normal flow of execution in a sequence.","Load\/Unload Options that allow the user to specify when the test executive loads and unloads the code modules or subsequences that each step invokes.","Run Mode that allows a step to be skipped or forced to pass or fail without executing the step module.","Record Results that allows the user to specify whether the test executive collects the results of the step.","Step Failure Causes Sequence Failure that allows the user to specify whether the test executive sets the status of the sequence to \u201cFailed\u201d when the status of the step is \u201cFailed\u201d.","Ignore Run-Time Errors that allows the user to specify whether the test executive continues execution normally after the step even though a run-time error occurs in the step.","Post Actions that allows the user to specify the execution of callbacks or jump to other steps after executing the step, depending on the pass\/fail status of the step or any custom condition.","Loop options that allow the user to cause a single step to execute multiple times before executing the next step. The user can specify the conditions under which to terminate the loop. The user can also specify whether to collect results for each loop iteration, for the loop as a whole, or for both.","Pre Expression that allows the user to specify an expression to evaluate before executing the step module.","Post Expression that allows the user to specify an expression to evaluate after executing the step module.","Status Expression that allows the user to specify an expression to use to set the value of a \u201cstatus\u201d property of the step automatically.",{"@attributes":{"id":"h-0014","num":"0000"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 6","FIG. 6"]},"In , a test executive application may be installed on a first computer system. As used herein, installing an application on a computer system may include enabling the computer system to execute the application. For example, one or more executable files associated with the application or providing access to the application may be installed on the computer system.","In , a plurality of operator interface controls may be installed on the first computer system. For example, files or data representing or providing access to the operator interface controls may be stored on the first computer system. In one embodiment, the plurality of operator interface controls may be installed as a part of installing the test executive application in . In another embodiment, the operator interface controls may be installed separately. For example, the operator interface controls may be installed separately as a toolkit or add-on package to the test executive application.","Each operator interface control may have associated functionality for managing execution of a test executive sequence and\/or functionality for displaying information regarding execution of a test executive sequence. Exemplary operator interface controls are described below.","The operator interface controls may be implemented using any of various programming methodologies or technologies. As used herein, the term \u201ccontrol\u201d may include a software component or object having associated program instructions. In one embodiment, the operator interface controls may be implemented as ActiveX controls. In other embodiments, the operator interface controls may be implemented as Java components or according to any of various other public or proprietary specifications.","In , an application development environment (ADE) application may be installed on the first computer system. As used herein, the term \u201capplication development environment\u201d may include an application useable to create a computer program. Examples, of application development environments include LabVIEW and LabWindows\/CVI from National Instruments, Visual Studio (e.g., Visual Basic, Visual C++, etc.) from Microsoft, Delphi from Borland, numerous Java environments from various vendors, etc.","In , a test executive sequence may be created using the test executive application installed in . For example, the test executive sequence may be created using a sequence editor of the test executive application, such as described above. The test executive sequence may include a plurality of test executive steps.","In , a run-time operator interface application for the test executive sequence may be created using the ADE installed in . In various embodiments, the run-time operator interface application may be implemented using any of various ADEs or any of various programming methodologies or techniques. For example, in one embodiment, the run-time operator interface application may comprise a graphical program, such as a program created in the LabVIEW graphical programming development environment. In another embodiment, the run-time operator interface application may comprise a text-based program, such as a C, C++, or Java program, among others.","The run-time operator interface application may include one or more of the operator interface controls installed in . Utilizing the operator interface controls to create the run-time operator interface application may advantageously increase the efficiency of creating the run-time operator interface application. One embodiment of  is discussed below with reference to .",{"@attributes":{"id":"h-0015","num":"0000"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 7","FIG. 7"]},"In , a graphical user interface that provides access to the plurality of operator interface controls may be displayed. For example, the graphical user interface (GUI) may be a GUI of the application development environment (ADE) installed on the first computer system as described above. The GUI of the ADE may enable the user (programmer) to select desired operator interface controls to include in the run-time operator interface application.","In various embodiments, the GUI may provide access to the operator interface controls in various ways, e.g., depending on the particular ADE being used and\/or depending on the implementation of the operator interface controls. For example, in one embodiment, the GUI may simply provide a file dialog box enabling the user to select a filename of a desired operator interface control. In another embodiment, the GUI may be operable to display a list of available operator interface controls (and possibly other installed controls), e.g., in response to a user request to select a control. In another embodiment, the GUI may represent the operator interface controls visually, e.g., as an icon or picture.","In , one or more of the operator interface controls may be included in the run-time operator interface application in response to user input to the graphical user interface. Similarly as described above with reference to element , in various embodiments, the one or more operator interface controls may be included in the run-time operator interface application in various ways, e.g., by selecting filenames of the one or more operator interface controls, selecting the one or more operator interface controls from a list, dragging and dropping a visual representation of the one or more operator interface controls into a window for the run-time operator interface application, etc. In another embodiment, an operator interface control may be included in a run-time operator interface application by simply adding source code to the application that references the operator interface control.","In one embodiment, one or more of the operator interface controls may have a visual representation within the run-time operator interface application when included in the application. For example, in one embodiment, the operator interface controls may be included in a user interface, e.g., a user interface window, of the run-time operator interface application. Each operator interface control included in the user interface may be displayed in the user interface as the run-time operator interface application is being developed.","In one embodiment, one or more of the operator interface controls included in the application may also have an associated user interface which is displayed in the user interface of the run-time operator interface application when the run-time operator interface application is executed. For example, some of the operator interface controls may be designed to receive input to the run-time operator interface application and\/or display output of the run-time operator interface application during execution of the application. Other operator interface controls may not be intended to be visible to the user during execution of the run-time operator interface application. These operator interface controls may be visually represented when the run-time operator interface application is being developed, but may not appear when the application is executed.","As noted above, each of the one or more operator interface controls may be operable to manage execution of a test executive sequence and\/or display information regarding execution of the test executive sequence during execution of the run-time operator interface application. The operator interface controls may include pre-existing program instructions that implement this functionality. For example, in managing execution of a test executive sequence, an operator interface control may interface with the test executive application, e.g., may perform various programmatic calls to a test executive engine through an engine API, such as described above.","In one embodiment, each operator interface control may include one or more associated methods operable to perform one or more of managing execution of a test executive sequence and\/or displaying information regarding execution of the test executive sequence. For example, the user may add source code to the run-time operator interface application for invoking various methods of the operator interface controls. Also, in one embodiment methods of the operator interface controls may be automatically invoked in response to certain events, e.g., in response to certain user interface events.","In one embodiment, the user may also configure one or more of the operator interface controls included in the run-time operator interface application. The operator interface controls may be configured in various ways, e.g., depending on the implementation of the operator interface controls and\/or depending on the particular ADE being used. For example, in one embodiment, each of the one or more operator interface controls included in the application may have one or more associated properties. Thus, the user may provide user input to configure properties associated with the operator interface controls. For example, in one embodiment a property panel for configuring each operator interface control may be displayed, and user input to configure the properties may be received to the property panel. For example, the property panel may include one or more separate windows or dialog boxes, or user interface elements for setting the properties may be displayed in a portion of another window.","In various embodiments, the plurality of operator interface controls may have any of various kinds of functionality that helps the user in creating a run-time operator interface application. Exemplary operator interface controls include:","An \u201cengine\u201d control operable to bind to the test executive engine to manage execution of a test executive sequence. This control may not have a user interface that appears in the run-time operator interface application at execution time. In one embodiment, functions of the engine control include: performing a start procedure to start up the test executive engine, performing a shutdown procedure to shut down the test executive engine, etc.","A \u201csequence viewer\u201d control operable to automatically display steps of a test executive sequence. This control may have a user interface that appears in the run-time operator interface application at execution time for displaying the steps. For example, the user interface may display the steps as a list.  illustrates an exemplary user interface for a sequence viewer control.","An \u201cexecution hierarchy\u201d control operable to automatically display an execution hierarchy for a test executive sequence. This control may have a user interface that appears in the run-time operator interface application at execution time for displaying the execution hierarchy.  illustrates an exemplary user interface for an execution hierarchy control. In one embodiment, the end user may be able to provide input to this user interface to select a particular point within the hierarchy at which he desires execution to start.","A \u201creport viewer\u201d control operable to automatically display a report generated when a test executive sequence is executed and\/or display execution results of the test executive sequence. This control may have a user interface that appears in the run-time operator interface application at execution time to display the report.","Various types of button controls having user interfaces. For example, when the run-time operator interface application is executed, the user may click a first button to invoke execution of a test executive sequence, may click a second button to stop execution of the test executive sequence, etc.","It is noted that the controls listed above are exemplary only, and operator interface controls that provide any of various other types of functionality may be supported in other embodiments. Also, in other embodiments, functionality of one or more of the controls described above may be combined into a single operator interface control. For example, in some embodiments there may be no need for a separate engine control that manages execution of the test executive sequence, as this functionality may be subsumed by other operator interface controls.","In one embodiment, one or more of the operator interface controls may be aware of each other. For example, if a first operator interface control and a second operator interface control are both included in the run-time operator interface application, then the first operator interface control may be operable to automatically affect the second operator interface control during execution of the run-time operator interface application. As one example, consider a first operator interface button control designed for displaying a file dialog box for selecting a test executive sequence. When the run-time operator interface application is executed, the user may click on the first operator interface control to select a test executive sequence he desires to execute. In response to the user's selection, the first operator interface control may be operable to cause a second operator interface control, e.g., a sequence viewer control such as described above, to automatically display a list of steps in the selected test executive sequence.","It is noted that in addition to including the operator interface controls in the run-time operator interface application, the user may also add source code to the application. For example, as noted above, the user may add source code to the run-time operator interface application for invoking various methods of the operator interface controls. Also, in addition to the operator interface controls, the user may also add other controls to the run-time operator interface application. These controls may not have pre-existing functionality designed for managing execution of a test executive sequence and\/or displaying information regarding execution of a test executive sequence. However, the user may desire to customize the run-time operator interface application in various ways or may desire to add other functionality to the application. Also, the user may configure the run-time operator interface application to manage execution of a test executive sequence at a lower level, e.g., by adding source code to the application for calling various API functions of the test executive software.","In one embodiment, an operator interface control may also defer to the run-time operator interface application code itself to perform certain actions associated with managing execution of the test executive sequence or displaying information regarding execution of the test executive sequence. For example, an operator interface control may send an event to the run-time operator interface application code, which the code may either ignore or handle. For example, in an embodiment in which the operator interface controls are implemented as ActiveX controls, the operator interface controls may be operable to send various ActiveX events to the run-time operator interface application code.","Referring again to , in , one or more files representing the run-time operator interface application may be stored. The one or more files may include information specifying which operator interface controls are included in the run-time operator interface application or may include references to the included controls.","When the run-time operator interface application is complete, the application may be executed. Executing the run-time operator interface application may include executing program instructions associated with one or more of the operator interface controls included in the run-time operator interface application. For example, the program instructions may execute in response to the user providing various types of user input to user interfaces of the operator interface controls and\/or in response to various types of programmatic events. For example, the user may configure particular methods of the operator interface controls to be invoked in response to certain user interface events, or the methods may be automatically invoked in response to the events. Also, as noted above, a first operator interface control may call a second operator interface control to cause program instructions associated with the second operator interface control to execute.","Executing the run-time operator interface application may also include executing one or more test executive sequences. For example, a first operator interface control may enable the user to select the desired test executive sequence(s) to execute (e.g., in response to the user clicking on a button user interface of the first operator interface control), a second operator interface control may display steps of the selected sequence(s) (e.g., in a list user interface of the second operator interface control), and a third operator interface control may invoke execution of the selected sequence(s) (e.g., in response to the user clicking on a button user interface of the third operator interface control). In another embodiment, the sequence(s) may be executed automatically in response to selecting the sequence(s). As described above, when the test executive sequence(s) is\/are executed, the test executive sequence(s) may be operable to perform one or more tests of one or more units under test (UUTs).","Operator interface controls such as those described above may advantageously remove the burden on the user (programmer) from implementing at least a portion of the functionality for a run-time operator interface application. For example, a common feature for run-time operator interface applications is to display a list of steps in a test executive sequence. A sequence viewer operator interface control such as described above may be operable to automatically display the steps of a specified sequence and may eliminate the need for the user (programmer) to write code to perform such tasks as obtaining a reference to a sequence file containing the test executive sequence, enumerating and obtaining references to the sequences that are in the sequence file, enumerating and obtaining information regarding steps of the desired sequence, formatting the step information appropriately, displaying the formatted information, etc. The sequence viewer control may be bound to the test executive engine and may interface with the engine to automatically perform these tasks.","As described above, in one embodiment, the user may be able to configure various properties of the operator interface controls. These properties may allow the user to specify various options controlling the sequence execution management or display performed by the operator interface controls. For example, with respect to a sequence viewer control, these properties may allow the user to customize the appearance of a displayed list of steps. For example, the user may be able to configure properties to specify a desired number of columns in the list, headings for each column, step information displayed in each column, an ordering of the columns, colors for the column data, etc. As one example, the user may configure a first column to display a name of the steps and a second column to display execution results of the steps. In one embodiment, the user may supply an expression for each column, where the expression evaluates to the desired data for the column.",{"@attributes":{"id":"h-0016","num":"0000"},"figref":"FIGS. 10\u201312"},"As noted above, in one embodiment a run-time operator interface application may comprise a graphical program.  illustrate an exemplary graphical program that utilizes exemplary operator interface controls. It is notes that  illustrate one exemplary embodiment, and many alternative embodiments are contemplated in accordance with the methods described above.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 10"},"As shown in , the graphical program also includes an event structure having various sub-diagrams for responding to various user interface events. In , the event structure is labeled, \u201cLoad Button: Value Changed\u201d, indicating that graphical source code for responding to a \u201cValue Changed\u201d event for a \u201cLoad\u201d button is currently displayed. This graphical source code may be executed when the user clicks on the \u201cLoad\u201d button during execution of the graphical program. (The user interface of the graphical program is not shown.)","As shown, the graphical source code for responding to the \u201cValue Changed\u201d event for the \u201cLoad\u201d button performs an \u201cOpenSequenceFileDialog\u201d method call on the \u201cIOIApplication\u201d operator interface control to allow the user to select a desired sequence file. A reference to the selected sequence file is passed to an \u201cIOISequenceDisplay\u201d operator interface control, and this operator interface control displays a sequence found in the selected sequence file. The \u201cIOISequenceDisplay\u201d operator interface control is one example of a sequence viewer operator interface control such as described above.","In , the event structure is labeled, \u201cRun Button: Value Changed\u201d, indicating that graphical source code for responding to a \u201cValue Changed\u201d event for a \u201cRun\u201d button is currently displayed. This graphical source code may be executed when the user clicks on the \u201cRun\u201d button during execution of the graphical program. As shown, the graphical source code for responding to the \u201cValue Changed\u201d event for the \u201cRun\u201d button performs a \u201cRun\u201d method call on the \u201cIOISequenceDisplay\u201d operator interface control and an \u201cExecution\u201d method call on an \u201cIOIExecutionDisplay\u201d operator interface control to invoke execution of the displayed sequence.","In , the event structure is labeled, \u201cstop: Value Changed\u201d, indicating that graphical source code for responding to a \u201cValue Changed\u201d event for a \u201cStop\u201d button is currently displayed. This graphical source code may be executed when the user clicks on the \u201cStop\u201d button during execution of the graphical program. As shown, the graphical source code for responding to the \u201cValue Changed\u201d event for the \u201cStop\u201d button performs a \u201cShutDown\u201d method call on the \u201cIOIApplication\u201d operator interface control to shut down the test executive engine.","GUI Element Connections","In one embodiment, one or more GUI elements included in an application may have a connection or binding to a software component, referred to herein as a manager component. The GUI element may be any type of control and indicator for receiving input data or viewing output data, respectively. For example, the GUI elements may be operator interface controls as described above, or other types of GUI elements. The GUI elements may be used in any of various applications, such as a test executive application, as described above. This embodiment may comprise various types of manager components, such as a Sequence File View Manager, an Application Manager, and an Execution Manager.","The connection or binding created between a GUI element and a manager component may allow the manager component to perform various operations for the GUI element without requiring the user to write code for these operations to be performed. For example, the manager component may provide data to, receive data from, and\/or perform other functionality associated with the GUI element without requiring the user to write code for these actions to be performed. Thus, for example, the manager component may act as a data source for a \u201cconnected\u201d GUI element. As another example, the manager component may act as a data sink to receive user values input to a \u201cconnected\u201d GUI element. As another example, if the user selects a certain option in a GUI element, and the GUT element has a connection with a manager component, the manager component may analyze the option selected by the user for the GUI component and might perform certain operations based on the option selected. For example, the manager component may display additional GUI elements based on the user's selected option or may change other parameters in other GUI elements based on the user selected option in the GUI element.","Therefore, one embodiment of the invention provides the ability to create connections or bindings between GUI elements or operator interface controls in an application, and a software component such as a manager component. This embodiment may greatly reduce the amount of code required to be written by a user to implement certain functionality. It is noted that the connections or bindings described in this embodiment may be used for any general type of operator interface or GUI application and is not limited to Test Executive applications.",{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIGS. 13\u201320"},{"@attributes":{"id":"p-0130","num":"0129"},"figref":["FIG. 13","FIG. 13","FIG. 13","FIG. 13","FIG. 13"]},{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0132","num":"0131"},"figref":["FIG. 15","FIG. 14"]},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0135","num":"0134"},"figref":["FIG. 18","FIG. 18","FIG. 18"]},"In , the user has pressed or selected the \u201cBreak\u201d button (shown in ) to pause the execution. When the user presses the \u201cBreak\u201d button, the Execution View Manager executes to change the appearance of the Break button into the Resume button and executes to enable the StepOver feature.","In , the user has changed the execution in the Execution List from \u201cTest UUTs\u2014computer seq [3]\u201d to \u201cMainSequence\u2014runforever.seq\u201d. As shown, when the user switches executions in the Execution List window, the Execution View Manager executes to change the current sequence in the Execution View window. The Execution View Manager also updates the Buttons reflect the state of this running execution.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 10\u201312"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 13\u201320"}]},"DETDESC":[{},{}]}
