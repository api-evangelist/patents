---
title: Method and apparatus for selecting and highlighting objects in a client browser
abstract: A computer implemented method, apparatus, article of manufacture and storage medium, provide the ability to select and highlight objects. A rendered image (containing one or more rendered objects) is displayed in a client browser on a client computer. A run length encoded (RLE) selection buffer is received, from a server across a network, into the client browser. The selection buffer provides a mapping of each pixel from the rendered image to rendered objects. User input is accepted that identifies a location of a cursor with respect to the rendered image. A determination is made, on the client computer, regarding which of the rendered objects has been selected based on the user input and the RLE selection buffer. The selected rendered object is then displayed in a visually distinguishable manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08407619&OS=08407619&RS=08407619
owner: Autodesk, Inc.
number: 08407619
owner_city: San Rafael
owner_country: US
publication_date: 20090730
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CONCLUSION"],"p":["This application claims the benefit under 35 U.S.C. Section 119(e) of the following co-pending and commonly-assigned U.S. provisional patent application(s), which is\/are incorporated by reference herein:","Provisional Application Ser. No. 61\/084,894, filed Jul. 30, 2008, by Gyorgy Ordody, Benjamin D. Cochran, Junjie Gao, and Jichao Li, entitled \u201cMethod and Apparatus for Providing Selecting and Highlighting in a Web Application Using Run Length Encoding to Compress an Object Buffer and Writing It as JavaScript Object Notation (JSON\u2122),\u201d.","1. Field of the Invention","The present invention relates generally to selecting and highlighting objects in a client browser. More specifically, the invention relates to a method, apparatus, system, and article of manufacture for the selection and highlighting of dynamically rendered 3D objects in a web application using run length encoding to compress an object selection buffer.","2. Description of the Related Art","When browsing the Internet using a client browser\/web browser, images (two-dimensional [2D] and\/or three-dimensional [3D]) having embedded objects are often displayed. It is often desirable for a user to select and\/or highlight these embedded objects in the web browser using a cursor control device (e.g., a computer mouse). Existing browser based solutions track mouse movements by round tripping between the server and client. Other solutions install thick client applications to process the selection and highlighting. However, such round tripping or thick client applications require significant processing by both the client and server and consume resources and time to conduct. These problems may be better understood with a more detailed description of client web applications and selection\/highlighting in such applications.","Web applications may often attempt to provide users with the ability to select and highlight objects in a 3D dynamically generated scene. Responsiveness is critical for selection and highlighting that provides a good user experience. As the user moves the mouse, he\/she needs to see objects highlighted or distinguished. When a user clicks a cursor control device, he\/she needs to select an object with little or no delay.","Traditionally, a \u201cZero Client\u201d application is a hardware only appliance that runs no software at all but directly connects the user to a virtualized desktop. As used herein, a zero client application may be viewed as an application executing on a client with limited processing capabilities. In such a client computer, functionality and processing may provide a web browser application. However, the ability to execute processing or install add-ins in such a web browser may be limited (e.g., by the hardware). Accordingly, zero client applications may leverage a web browser on a client's computer to render marked-up content and to run a scripting language based application (e.g., JavaScript\u2122) without installing browser plug-ins. This is an environment with limited functionality and performance.","Scripting languages such as JavaScript\u2122 are interpreted languages that run slow and isolated. When more processing is needed, the scripting languages executing in the browser can leverage server side power and resources. However, server requests (i.e., from the client) also have a cost depending on the user Internet connection, distance between the client and the server, and other factors that may result in a one second (or longer) penalty for going to the server (or for performing a round trip operation).","Operations like selecting and highlighting objects in a rendered 3D scene are difficult in the browser. Traditionally, selecting an object can be done multiple ways. One way is to install a thick client application. However, thick client applications may not be possible on Zero Client computers and even if possible would require significant processing time and resources.","A second way to select and highlight objects is to utilize a selection buffer. A selection buffer is a rendering, but instead of coloring each pixel based on a lighting equation, the output is an identification (ID) of the rendered object. Selection is done by reading the value (which is a color value in a standard rendering) at an x and y location in the selection buffer. The read value is the object ID.","In the same way the server is used to render the 3D scene, it would be good if the server could provide this selection buffer to the client (e.g., for use on a client with limited processing capabilities). However, such a server-provided selection buffer creates a problem as the selection buffer needs to be processed quickly in the scripting language application as the user moves the cursor control device and clicks a cursor control device button. Many scripting language applications (e.g., JavaScript\u2122) cannot handle the size of a raw selection buffer even when the scene size is as small as 640\u00d7480 pixels. In this regard, a raw selection buffer is too slow to transfer over the wide area network (WAN) and is too large to use with a scripting language application in a browser.","Accordingly, what is needed is a client-browser based capability to quickly and efficiently select and highlight one or more objects in a 2D or 3D image.","One or more embodiments of the invention allow selection and highlighting of objects in a 3D scene without having to round trip between the client and server and without installing a thicker client. Such a capability provides a more responsive user interface experience and avoids the download, the install, and the security risk for utilizing a server based application on a client computer.","To provide such functionality, embodiments of the invention utilize a selection buffer that is run length encoded. The selection buffer is then processed and utilized during the object selection\/highlighting actions.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Overview","One or more embodiments of the invention provide the ability to select and highlight objects in a 3D scene displayed on a client browser without having to round trip between the client and the server. A selection buffer is prepared by a server and compressed using run length encoding (RLE). The compressed selection buffer is then used by the client to easily and dynamically provide selection and highlighting capabilities to a user in real time as the user moves the mouse over objects in a buffer.","Hardware Environment",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","102","102","102","104","104","104","106","102","114","116","128"]},"In one embodiment, the computer  operates by the general purpose processor A performing instructions defined by the computer program  under control of an operating system . The computer program  and\/or the operating system  may be stored in the memory  and may interface with the user and\/or other devices to accept input and commands and, based on such input and commands and the instructions defined by the computer program  and operating system  to provide output and results.","Output\/results may be presented on the display  or provided to another device for presentation or further processing or action. In one embodiment, the display  comprises a liquid crystal display (LCD) having a plurality of separately addressable liquid crystals. Each liquid crystal of the display  changes to an opaque or translucent state to form a part of the image on the display in response to the data or information generated by the processor  from the application of the instructions of the computer program  and\/or operating system  to the input and commands. The image may be provided through a graphical user interface (GUI) module A. Although the GUI module A is depicted as a separate module, the instructions performing the GUI functions can be resident or distributed in the operating system , the computer program , or implemented with special purpose memory and processors.","Some or all of the operations performed by the computer  according to the computer program  instructions may be implemented in a special purpose processor B. In this embodiment, the some or all of the computer program  instructions may be implemented via firmware instructions stored in a read only memory (ROM), a programmable read only memory (PROM) or flash memory within the special purpose processor B or in memory . The special purpose processor B may also be hardwired through circuit design to perform some or all of the operations to implement the present invention. Further, the special purpose processor B may be a hybrid processor, which includes dedicated circuitry for performing a subset of functions, and other circuits for performing more general functions such as responding to computer program instructions. In one embodiment, the special purpose processor is an application specific integrated circuit (ASIC).","The computer  may also implement a compiler  which allows an application program  written in a programming language such as COBOL, Pascal, C++, FORTRAN, or other language to be translated into processor  readable code. After completion, the application or computer program  accesses and manipulates data accepted from I\/O devices and stored in the memory  of the computer  using the relationships and logic that was generated using the compiler .","The computer  also optionally comprises an external communication device such as a modem, satellite link, Ethernet card, or other device for accepting input from and providing output to other computers.","In one embodiment, instructions implementing the operating system , the computer program , and the compiler  are tangibly embodied in a computer-readable medium, e.g., data storage device , which could include one or more fixed or removable data storage devices, such as a zip drive, floppy disc drive , hard drive, CD-ROM drive, tape drive, etc. Further, the operating system  and the computer program  are comprised of computer program instructions which, when accessed, read and executed by the computer , causes the computer  to perform the steps necessary to implement and\/or use the present invention or to load the program of instructions into a memory, thus creating a special purpose data structure causing the computer to operate as a specially programmed computer executing the method steps described herein. Computer program  and\/or operating instructions may also be tangibly embodied in memory  and\/or data communications devices , thereby making a computer program product or article of manufacture according to the invention. As such, the terms \u201carticle of manufacture,\u201d \u201cprogram storage device\u201d and \u201ccomputer program product\u201d as used herein are intended to encompass a computer program accessible from any computer readable device or media.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with the computer .","Although the term \u201cuser computer\u201d or \u201cclient computer\u201d is referred to herein, it is understood that a user computer  may include portable devices such as cell phones, notebook computers, pocket computers, or any other device with suitable processing, communication, and input\/output capability.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2","b":["200","202","204","206","204","206","102","202","204","206"]},"A network  such as the Internet connects clients  to server computers . Additionally, network  may utilize radio frequency (RF) to connect and provide the communication between clients  and servers . Clients  may execute a client application or Web browser  and communicate with server computers  executing Web servers . Such a Web browser  is typically a program such as NETSCAPE NAVIGATOR\u2122, MICROSOFT INTERNET EXPLORER\u2122, or MOZILLA FIREFOX\u2122. Further, the software executing on clients  may be downloaded from server computer  to client computers  and installed as a plug in or ActiveX control of a Web browser. Accordingly, clients  may utilize ActiveX components\/component object model (COM) or distributed COM (DCOM) components to provide a user interface on a display of client . The Web server  is typically a program such as Microsoft's Internet Information Server. Alternatively, as described above, the client computer  may provide an environment for executing a zero-client application that leverages a web browser to render marked-up content and to run a scripting application (e.g., JavaScript\u2122) without installing browser plug-ins. Such a configuration provides an environment with limited functionality and performance.","Web server  may host an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application , which may be executing scripts. The scripts invoke objects that execute business logic (referred to as business objects). The business objects then manipulate data in database  through a database management system (DBMS) . Alternatively, database  may be part of or connected directly to client  instead of communicating\/obtaining the information from database  across network . When a developer encapsulates the business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on web server  (and\/or application ) invoke COM objects that implement the business logic. Further, server  may utilize Microsoft's Transaction Server (MTS) to access required data stored in database  via an interface such as ADO (Active Data Objects), OLE DB (Object Linking and Embedding DataBase), or ODBC (Open DataBase Connectivity).","Generally, these components - all comprise logic and\/or data that is embodied in\/or retrievable from device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer via a network or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Those skilled in the art will recognize many modifications may be made to this exemplary environment without departing from the scope of the present invention. For example, those skilled in the art will recognize that any combination of the above components, or any number of different components, including different logic, data, different peripherals, and different devices, may be used to implement the present invention, so long as similar functions are performed thereby.","Software Embodiments","As described above, embodiments of the invention may be implemented using a zero-client application that leverages a web browser  on a client computer  to render marked-up content, to select and highlight objects, and to run scripting applications without installing browser plug-ins. Further, since a raw selection buffer is too slow to transfer over a network  and is too large to use with a scripting language in a browser , embodiments of the invention utilize a selection buffer that is run length encoded and written out as native scripting language objects (e.g., JavaScript\u2122 objects).","The selection buffers are compressed using a Run Length Encoding (RLE) compression technique. RLE is a simple form of lossless compression. Sequences or runs of same values are compressed into the length of the run and the value being compressed. For example, \u201cAAAAAAAAABBBBBCCC\u201d compress to \u201c9A5B3C\u201d. The original data has 17 characters and the compressed data has only 6. RLE compression may not provide satisfactory results for rendered images, but provides many advantages and works well for selection buffers.","The RLE data is sent to the client  from the server . The format of the data may be in a data interchange format such as JavaScript Object Notation (JSON)\u2122. JSON\u2122 is simply a text-based data interchange format used to transmit data that is defined as a subset of the JavaScript\u2122 scripting language. Alternative interchange formats may be used in accordance with embodiments of the invention. In addition, the RLE data may be transmitted from the server  to the client  using JSON on top of HTTP (hyper text transfer protocol). HTTP offers a second level of compression for the transmission process. Such compression may be provided using the gzip (GNU Zip\u2122) or Zip\u2122 applications. Gzip or Zip works well on top of RLE typically reducing the number of transmitted bytes by more than half. This extra compression on top of RLE can even exceed 5:1. Accordingly, embodiments of the invention may utilize both RLE and HTTP compression methodologies to compress the data for transmission to the client .","The application (e.g., written in a scripting language) on the client  makes a request to the server  and the server  responds with data in a data interchange format (e.g., JSON\u2122). The format may utilize JavaScript\u2122 scripting language object literal notation. For one or more embodiments, the server  returns data in associative arrays (e.g., actual JavaScript\u2122 arrays and not in the object literal notation). In this regard, JSON\u2122 may be not needed. Instead, an alternative object, scripting language, or interchange format may be utilized.","The client browser  is able to request the RLE compressed data once and then execute responsive user selection and highlighting into a dynamically rendered 3D scene by performing hit testing on the data. Hit testing is a mechanism used to determine where the cursor is located during the selection process. Such hit selection may be performed merely by hovering a cursor over a location or by a user clicking a button of a cursor control device, or activating a selection capability (e.g., tapping a stylus on a tablet).","To perform the hit testing, another intermediate data structure is created as illustrated in . The structure  is an array of scan line indexes. For each scan line index , the object IDs are stored with the start run, stop run pairs - (i.e., in the scan line index ). When a user moves the mouse, hit testing is done using the y-mouse coordinate as a look up into the scan line index  returning the short list of run start and run stop pair (e.g., the list attached\/mapped\/stored with\/linked to via the scan line index ). The short list is then searched to find a pair where the x-mouse value is greater than the run start and less than the run stop value. The object ID is then read.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["400","402","404","408","404","408","404","408","208","400","402","404","408","404","408"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5A","FIG. 5B","FIG. 5B","FIG. 5C","FIG. 5D"]},"Logical Flow",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":"600"},"At step , a run length encoded (RLE) selection buffer is received in the client buffer from a server across a network. The selection buffer includes a mapping of each pixel from the rendered image to one or more of the rendered objects. Such a selection buffer may be sent to the client browser using JavaScript Object Notation\u2122 (JSON) object literal notation. Alternatively, the selection buffer may be sent using JavaScript Object Notation\u2122 (JSON) arrays.","At step , input is accepted from a user (e.g., via a cursor control device). The input consists of a location of the cursor with respect to the rendered image (e.g., an [x,y] coordinate). Such input may further include the hovering of a cursor over an object, the activation of a selection capability (e.g., clicking a mouse button or tapping a stylus, etc.).","At step , a determination is made (in the browser\/client computer) regarding which one of the rendered objects has been selected. Such a determination is based on the user input and the RLE selection buffer.","The determination regarding which object has been selected may include the use of an intermediate data structure. Accordingly, a first array of scan line indices may be created (in the client browser\/computer). Each scan line index represents a scan line of the rendered image and includes (or mapped to) one or more pairs of start run-stop run x-values with each pair mapped to an object identification for one of the rendered objects that is located on the scan line within the start run-stop run x-value of that pair. In other words, for each scan line, the start run-stop run pairs in that scan line are listed along with an object ID for each pair. The index to select a particular scan line is a y-value coordinate and the start run-top run pair index is the x-value coordinate.","A determination is made regarding the x-value coordinate and y-value coordinate from the user input. The scan line index corresponding to the y-value coordinate from the user input is determined. Each scan line index is searched for a selected start run-stop run pair that contains the x-value coordinate (i.e., that has a start run less than the x-value coordinate and a stop run greater than the x-value coordinate). Once the corresponding pair has been identified, it is understood that the object mapped to that pair has been selected by the user. Accordingly, the object identification that is mapped to the selected start run-stop run pair is read.","At step , the selected rendered object is displayed in a visually distinguishable manner (e.g., in a different color, different tone, highlighted, display of a tooltip, dialog window, etc.). Such a display sequence may include the highlighting of the selected object. To highlight or visually distinguish a selected object, a second data structure may be utilized. Accordingly, at the client computer, a second array may be created that consists of object identifications (for each of the rendered objects) mapped to one or more lists of start run-stop run pairs of (x,y) coordinate values reflecting where each object is located on the rendered image.","The object identification read from the first data structure during step  is then used as an index into the second array to obtain a found list of start run-stop run pairs (i.e., all of the pairs that contain the selected object). For each start run-stop run pair in the found list, a horizontal line may be drawn from the start run to the stop run in the rendered image. Such a horizontal line is drawn in a manner that visually distinguishes the rendered object corresponding to the read object identification from rendered objects not selected by the user. Alternatively, rather than drawing a horizontal line, a tooltip, dialog window, or other mechanism may be used to visually distinguish a particular object.","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the present invention. For example, any type of computer, such as a mainframe, minicomputer, or personal computer, or computer configuration, such as a timesharing mainframe, local area network, or standalone personal computer, could be used with the present invention.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5D"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
