---
title: Distributed fan control
abstract: A device for processing graphics data may include a plurality of graphics processing units. The device may include a fan to dissipate thermal energy generated during the operation of the plurality of graphics processing units. Each of the plurality of graphics processing units may generate a pulse width modulated signal to control the speed of the fan. The device may include one or more monitoring units configured to monitor a signal controlling the speed of the fan. One or more of the plurality of pulse width modulated signals may be adjusted based on the monitored signal. One or more of the plurality of pulse width modulated signals may be adjusted such that a signal controlling the fan maintains a desired duty cycle.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213379&OS=09213379&RS=09213379
owner: NVIDIA CORPORATION
number: 09213379
owner_city: Santa Clara
owner_country: US
publication_date: 20131017
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates to systems and methods for thermal management and, more particularly, to controlling a fan associated with a graphics processing unit.","Devices including laptop or desktop computers, tablet computers, digital video recorders, set-top boxes, digital media players, video gaming devices, and video game consoles may include a graphics subsystem including one or more graphics processing units (GPUs). One or more GPUs may be implemented on a single graphics card. During operation, the one or more GPUs may generate a significant quantity of thermal energy. If the thermal energy is not dissipated, performance of the one or more GPUs may degrade.","A graphics card may include a fan to dissipate heat during the operation of the one or more GPUs. The speed at which a fan rotates and thus the rate at which heat is dissipated may be controlled by one or more GPUs. Acoustic noise may be generated as the fan rotates. The amount of acoustic noise perceived by a user may be based on the speed at which the fan rotates and\/or how frequently the fan is rotating at a particular speed. Current techniques for controlling the speed of a fan may be inadequate for dissipating heat and\/or may be detrimental to the user's experience.","In general, this disclosure describes techniques for controlling the speed of a fan used to dissipate thermal energy during the operation of a graphics processing unit. In particular, this disclosure describes techniques for controlling the speed of a fan based on respective fan control signals generated from one or more graphics processing units (GPUs). It should be noted that although the techniques of this disclosure are described with respect to examples for dissipating thermal energy associated with the operation of GPUs, the techniques described herein are equally applicable to dissipating thermal energy in other environments. For example, a fan may be used to dissipate thermal energy generated during the operation of other components associated with a computing device, such as, for example, CPUs, memory controllers, and modems and the techniques described herein may be used to dissipate thermal energy associated with the operation of these components.","According to one example of the disclosure, a method for controlling the speed of a fan associated with a graphics processing subsystem comprises monitoring a plurality of fan control signals, generating a signal having a duty cycle equal to the maximum duty cycle of the plurality of fan control signals, and driving the fan using the generated signal.","According to another example of the disclosure an apparatus for controlling the speed of a fan associated with a graphics processing subsystem comprises means for monitoring a plurality of fan control signals, means for generating a signal having a duty cycle equal to the maximum duty cycle of the plurality of fan control signals, and means for driving the fan using the generated signal.","According to another example of the disclosure a non-transitory computer-readable storage medium has instructions stored thereon that upon execution cause one or more processors of a device to monitor a plurality of fan control signals, generate a signal having a duty cycle equal to the maximum duty cycle of the plurality of fan control signals, and drive the fan using the generated signal.","According to another example of the disclosure a method for controlling the speed of a fan associated with a graphics processing subsystem comprises monitoring a signal driving a fan, comparing the signal driving the fan to a defined period and a defined duty cycle of a generated fan control signal, determining whether an assertion time of the signal driving the fan is greater than an assertion time of the generated fan control signal, and adjusting the generated fan control signal based on whether the assertion time of the signal driving the fan is greater than the assertion time of the generated fan control signal.","According to another example of the disclosure a device for processing graphics data, the device comprises a fan, a plurality of graphics processing units configured to generate a fan control signal based on a defined period and a defined duty cycle, monitor a signal driving the fan, and adjust the generated fan control signal based on the signal driving the fan to maintain the defined duty cycle.","The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.","Devices including laptop or desktop computers, tablet computers, digital video recorders, set-top boxes, digital media players, video gaming devices, video game consoles, and cellular telephones may include a graphics subsystem including one or more graphics processing units (GPUs). In some cases, one or more GPUs may be implemented on a single graphics card and the graphics card may include a fan for dissipating thermal energy. In some cases, a GPU controls the speed of a fan as part of the graphics card's thermal management. The speed of a fan may be determined by the duty cycle of a pulse width modulated (PWM) signal generated by a GPU. For example, the higher the duty cycle of the PWM signal, the faster the fan may spin. Commonly assigned U.S. Pat. No. 7,479,753, which is incorporated by reference in its entirety, describes examples of how a PWM signal may be used to control the speed of a fan. It should be noted that the term duty cycle as used herein may refer to the desired amount of time to drive a fan (i.e., assertion time) divided by the desired time of a waveform period. For example, duty cycle may be defined according to the following equations:\n\nperiod: desired number of clock cycles of the PWM waveform period\u2003\u2003(1)\n\nhigh (hi): desired number of clock cycles to drive the PWM to spin the fan\u2003\u2003(2)\n\nduty cycle=hi\/period\u2003\u2003(3)\n\nIt should be noted that although the techniques described herein are described according to examples where a fan is controlled using a signal having active low polarity (i.e., the fan is ON when a PWM signal is low), the techniques described herein are equally applicable to examples where a fan is controlled using a signal having active high polarity.\n","During periods where a GPU or cores thereof are reset or powered off (e.g., cold boot or low power state), a GPU may be unable to generate a PWM signal to control fan speed. In some implementations it is possible to add a pull resistor on the PWM signal to configure the fan to spin at full speed when a GPU is unable to generate a PWM signal. However, the acoustic noise caused by the fan spinning at full speed for an extended period of time may not provide for a good user experience. As an alternative to adding a pull resistor, more complex circuits (e.g., astable multi-vibrator) may be added to the board design of the graphic card to generate a fixed duty cycle PWM when a GPU configured to generate a controlling PWM signal is reset or powered off. Although this may reduce the amount of acoustic noise, adding additional components to a board may add to the bill of materials (BOM) cost and may take up area on a board that may be used for other components.","Additionally, complexities may arise in board designs of graphics cards where two or more GPUs share the same fan. That is, if each of multiple GPUs generates a PWM signal independent of the other GPUs, it may be difficult to combine all of the PWM signals into a single PWM signal that spins the fan at the desired speed. Further, in some examples, when there are two GPU's driving a single fan, each GPU typically drives the fan with a duty cycle based on its internal temperature and thermal thresholds. Thus, in some cases, a GPU that is over its thermal threshold will drive the fan with a higher duty cycle PWM control signal than a GPU below its thermal threshold. Typically, it is desirable for the fan to spin according to the PWM control signal with the higher duty cycle to achieve a faster cooling effect. One technique for combining PWM control signals from two or more GPUs is to logically AND the signals to form the fan control signal. When two PWM signals are ANDed the result is a low signal if either of the signals is low. Thus, in an active low configuration the fan will be ON if either signal is low. However, since the two PWM control signals may be asynchronous to each other, the PWM duty cycle and period may be corrupted and the fan may oscillate between different speeds, which may increase the amount of acoustic noise.","Another technique for combining two GPU PWM control signal is to designate one GPU as the \u201cmaster\u201d GPU, where the master GPU's PWM signal drives the fan. Designating one GPU as the master may require providing additional communication capabilities between GPUs for arbitrating which GPU controls the fan. Also, in order to provide a good user experience a graphics card may need to be able to transfer fan control from a master GPU to another GPU in an acoustically undetectable manner, (e.g., in the case where a master GPU wants to enter a low power state). The techniques described herein may be used to control a fan in a graphics subsystem including multiple GPUs.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","100","100"]},"Computing device  includes central processor unit(s) , BIOS , system memory , system interface , storage device(s) , I\/O devices , network interface , graphics subsystem , and display . As illustrated in , system memory  includes applications A-N and operating system . Further, as illustrated in , graphics subsystem  includes GPU , GPU , GPU memory , and GPU memory . It should be noted that although example computing device  is illustrated as having distinct functional blocks, such an illustration is for descriptive purposes and does not limit computing device  to a particular hardware or software architecture. Functions of computing device  may be realized using any combination of hardware, firmware and\/or software implementations.","CPU(s)  may be configured to implement functionality and\/or process instructions for execution in computing device . CPU(s)  may be capable of retrieving and processing instructions, code, and\/or data structures for implementing one or more of the techniques described herein. Instructions may be stored on a computer readable medium, such as system memory  or storage devices . CPU(s)  may include digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. CPU(s)  may include multi-core central processing units. CPU(s)  may be configured such that dedicated graphic processing units, such as those included in graphics subsystem , are used for graphics processing.","BIOS (Basic Input\/Output System)  may include a storage medium having low-level system software stored thereon. For example, BIOS  may include a program stored in read only memory (\u201cROM\u201d) or flash memory that is run whenever computing device  boots up and enables basic input and output functionality. Further, BIOS  may be configured to initialize and boot an operating system, such as, for example, operating system .","System memory  may be configured to store information that may be used by computing device  during operation. System memory  may be used to store program instructions for execution by CPU(s)  and may be used by software or applications running on computing device  to temporarily store information during program execution. For example, system memory  may store instructions associated with operating system  and applications A-N. Applications A-N may be any applications implemented within or executed by computing device  and may be implemented or contained within, operable by, executed by, and\/or be operatively\/communicatively coupled to components of computing device . Applications A-N may include instructions that may cause CPU(s)  of computing device  to perform particular functions. Applications A-N may include algorithms which are expressed in computer programming statements, such as, for-loops, while-loops, if-statements, do-loops, etc.","As further illustrated in , applications A-N may execute \u201con top of\u201d operating system . That is, operating system  may be configured to facilitate the interaction of applications A-N with CPUs(s) , and other hardware components of computing device , such as, for example, graphics subsystem . Operating system  may be an operating system designed to be installed on laptops, desktops, smartphones, tablets, set-top boxes, and\/or gaming devices. For example, operating system  may be a Windows\u00ae, Linux, or Mac OS, Android, iOS, Windows Mobile\u00ae, or a Windows Phone\u00ae operating system.","System memory  may be described as a non-transitory or tangible computer-readable storage medium. In some examples, system memory  may provide temporary memory and\/or long-term storage. In some examples, system memory  or portions thereof may be described as non-volatile memory and in other examples portions of system memory  may be described as volatile memory. Examples of volatile memories include random access memories (RAM), dynamic random access memories (DRAM), and static random access memories (SRAM). Examples of non-volatile memories include magnetic hard discs, optical discs, floppy discs, flash memories, or forms of electrically programmable memories (EPROM) or electrically erasable and programmable (EEPROM) memories.","System interface  may be configured to enable communication between components of computing device . In one example, system interface  comprises structures that enable data to be transferred from one peer device to another peer device or to a storage medium. For example, system interface  may include a chipset supporting Accelerated Graphics Port (\u201cAGP\u201d) based protocols, Peripheral Component Interconnect (PCI) bus based protocols, such as, for example, the PCI Express\u2122 (\u201cPCIe\u201d) bus specification, which is maintained by the Peripheral Component Interconnect Special Interest Group, or any other form of structure that may be used to interconnect peer devices.","Storage device(s)  represents memory of computing device  that may be configured to store relatively larger amounts of information for relatively longer periods of time than system memory . Similar to system memory , storage device(s)  may also include one or more non-transitory or tangible computer-readable storage media. Storage device(s)  may be internal or external memory devices and in some examples may include non-volatile storage elements. Examples of memory devices include file servers, an FTP servers, network attached storage (NAS) devices, a local disk drive, or any other type of device or storage medium capable of storing data. Storage medium may include Blu-ray discs, DVDs, CD-ROMs, flash memory, or any other suitable digital storage media. When the techniques described herein are implemented partially in software, a device may store instructions for the software in a suitable, non-transitory computer-readable medium and execute the instructions in hardware using one or more processors.","I\/O device(s)  may be configured to receive input and provide output during operation of computing device . Input may be generated from an input device, such as, for example, touch-sensitive screen, track pad, track point, mouse, a keyboard, a microphone, video camera, or any other type of device configured to receive input. Output may be provided to output devices, such as, for example speakers or a display device. In some examples, I\/O device(s)  may be used for basic input and output functions associated with BIOS . In some examples, I\/O device(s)  may be external to computing device  and may be operatively coupled to computing device  using a standardized communication protocol, such as for example, Universal Serial Bus protocol (USB).","Network interface  may be configured to enable computing device  to communicate with external computing devices via one or more networks. Network interface  may be a network interface card, such as an Ethernet card, an optical transceiver, a radio frequency transceiver, or any other type of device that can send and receive information. Network interface  may be configured to operate according to one or more of the communication protocols associated with a packet-based network, such as a local area network, a wide-area network, or a global network such as the Internet. Examples of communication protocols include Global System Mobile Communications (GSM) standards, code division multiple access (CDMA) standards, 3rd Generation Partnership Project (3GPP) standards, Internet Protocol (IP) standards, Wireless Application Protocol (WAP) standards, and\/or an IEEE standards, such as, one or more of the 802.11 standards, as well as various combinations thereof.","Display  may be configured to provide visual output generated during the operation of computing device . For example, display  may include a cathode ray tube (CRT) monitor, a liquid crystal display (LCD), or any other type of device that can provide output. In some examples, display  may be an integrated display. In the example where computing device  is a mobile device, display  may be an integrated touch-screen display. For example, display  may be an organic light emitting diode (OLED) display configured to receive user touch inputs, such as, for example, taps, drags, and pinches. In other examples, display  may be an external display device coupled to computing device  using a standardized communication protocol, such as, for example, High-Definition Multimedia Interface (HDMI), Digital Visual Interface (DVI), DisplayPort, and Video Graphic Array (VGA).","Graphics subsystem  may be configured to receive commands and data and output pixel data. Graphics subsystem  may be configured to output pixel data to display  according a standardized communication protocol (e.g., HDMI, DVI, DisplayPort, and\/or VGA). In the example illustrated in , graphics subsystem  includes graphics processing unit  and graphic processing unit . It should be noted that in other examples, graphics subsystem  may include more than two graphic processing units. Graphics processing unit  and graphic processing unit  may include multiple processing cores. Graphics processing unit  and graphic processing unit  may perform graphics processing associated with the execution of applications A-N.","Graphics processing unit  and graphic processing unit  may be configured to operate according to an application programming interface, such as, for example, OpenGL (Open Graphics Library, managed by the Khronos Group) and\/or Direct3D (managed by Microsoft, Inc.), both of which are incorporated by reference herein in their respective entirety. Graphics processing unit  and graphic processing unit  may operate according to a graphics pipeline process (e.g., input assembler, vertex shader, geometry shader, rasterizer, pixel shader, and output merger). Each of graphics processing unit  and graphic processing unit  may have primary display and 3D rendering capabilities. Graphics processing unit memory  and graphics processing unit memory  may include storage mediums configured to store data generated during a graphics pipeline process. For example, graphics processing unit memory  and graphics processing unit memory  may include frame buffers. Further, graphics processing unit memory  and graphics processing unit memory  may store instructions that are executed by graphics processing unit  and graphic processing unit .","As described above, one or more GPUs may be implemented on a single graphics card and the graphics card may include a fan for dissipating thermal energy.  is a conceptual diagram illustrating an example of a graphics subsystem in accordance with one or more techniques of this disclosure.  illustrates an example where graphic subsystem  includes a graphic card where graphics processing unit  and graphics processing unit  are operably coupled to circuit board . Further, in the example illustrated in , graphics subsystem  includes a fan  operably coupled to the circuit board . Fan  may be configured such that the speed of the fan  is based on the duty cycle of a PWM signal. In one example, each of graphics processing unit  and graphics processing unit  may be configured to generate a respective PWM signal where a period and a duty cycle of a PWM signal are based on an internal temperature and\/or a thermal threshold. In one example, each of graphics processing unit  and graphics processing unit  may be configured to increase the duty cycle and\/or the period of a PWM signal as internal temperature increases and\/or if a thermal threshold is exceeded.","Each of graphics processing unit  and graphics processing unit  may provide a PWM signal using a general purpose input\/out (GPIO) pin. In one example, a GPIO that controls fan  may be an open drain output driver. Using an open drain output driver may allow multiple drivers on the same board trace to control fan  without electrical shorts. An open drain output driver may effectively logically AND the PWM signals of each of graphics processing unit  and graphics processing unit . In one example, fan  may be configured to operate according to an active low configuration, i.e., the fan will be on when a PWM signal is low.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["1","122","2","124","1","2","202"]},"In the example illustrated in , each of PWM_out() and PWM_out() are generated independently. That is, period, hi, and resulting duty_cyclemay be based on the internal temperature of graphic processing unit  without consideration of PWM_out(). In a similar manner, period, hi, and resulting duty_cyclemay be based on the internal temperature of graphic processing unit  without consideration of PWM_out(). In the example illustrated in , PWM_out() has a period of T and a duty cycle of 50% and PWM_out() has period of 1.25 T and a duty cycle of 45% based on an active low configuration. As a result of being generated independently, PWM_out() and PWM_out() may be asynchronous and have different periods, which may result in PWM_out not having a consistent duty cycle or period, as illustrated in . As described above, when a signal driving a fan does not have a consistent duty cycle and period, the fan  may oscillate between speeds, which may cause undesirable acoustic noise and\/or a reduced cooling effect.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4"],"b":["120","302","304","122","306","308","310","312","124","314","316","318","320","120"]},"Fan driving unit  may be configured to receive a PWM signal and provide a signal for driving fan . In one example, fan driving unit  may include an open drain output driver and may include a MOSFET transistor that allows a driving current to flow through (and thus rotate) fan  when either of PWM_out() or PWM_out() is low. That is, PWM_out may correspond to the logical AND of PWM_out() and PWM_out(). As illustrated in , PWM_out() and PWM_out() are respectively generated by PWM generator  and PWM generator . Each of PWM generator  and PWM generator  may be configured to generate a PWM signal based on signals received from respective thermal monitor  and thermal monitor . Pull resistor  may be coupled to a source voltage, VDD (for an open drain configuration), or ground, GND (for an open source configuration), and may be configured to pull fan driving unit  to an OFF state, when PWM_out is not driving fan .","As illustrated in , graphics processing unit  and graphics processing unit  respectively include thermal monitor  and thermal monitor . Each of thermal monitor  and thermal monitor  may be configured to sense an internal temperature of a graphic processing unit. Each of thermal monitor  and thermal monitor  may cause respective PWM generator  and PWM generator  to generate a PWM signal having a duty cycle and period that will drive fan  based on a desired cooling effect. Thermal monitor  and thermal monitor  may include internal logic to determine a desired period and a desired duty cycle based on a temperature measurement. In one example, each of thermal monitor  and thermal monitor  may cause fan  to rotate at a maximum speed if a thermal threshold is exceeded. In one example, a \u201cmaximum\u201d speed may correspond to a speed that achieves a maximum cooling effect at an acoustic level that does not degrade the user experience. In the example illustrated in , each of ALERTand ALERTrespectively correspond to the thermal thresholds of graphics processing unit  and graphics processing unit . Each of ALERTand ALERTmay be programmable, e.g., based on a performance operating mode. Generating a PWM signal based on a thermal threshold is intended to serve as a failsafe to prevent GPU core temperatures from reaching a critical threshold.","As further illustrated in , each of thermal monitor  and thermal monitor  receive power configuration information (Power Config). Power configuration information may include information that allows thermal monitor  and thermal monitor  to determine a duty cycle and a period of a PWM that will achieve a desired cooling effect. In one example, power configuration information may include duty cycle and period values stored in one or more configuration registers (not shown). In one example, upon graphics processing unit  and graphics processing unit  being powered up, straps may be sensed to configure the initial PWM duty cycle. That is, a voltage may be measured to initially determine period, hi, and period, hi. Further, a thermal management system of graphics system , which may include software, may reconfigure the PWM settings once a graphics processing core of graphics processing unit  and graphics processing unit  are powered up and running.","As described above, a desired duty cycle may be defined according to the following equations:\n\nperiod: desired number of clock cycles of the PWM waveform period\u2003\u2003(1)\n\nhi: desired number of clock cycles to drive the PWM to spin the fan\u2003\u2003(2)\n\nduty cycle=hi\/period\u2003\u2003(3)\n","As illustrated in , each of PWM generator  and PWM  receive respective hi values, hiand hi, and respective period values, adj. periodand adj. periodand output respective PWM signals, PWM_out() and PWM_out(), where PWM_out() and PWM_out() respectively have a duty cycle determined according to hiand adj. period, hi, and adj. period. As described in detail below, adj. periodand adj. periodmay be adjusted values of periodand periodas determined by PWM monitor  and PWM monitor . As described above and illustrated with respect to , when multiple GPUs provide PWM signals for driving a fan, techniques for combining the PWM signals may result in excess acoustic noise that may degrade the user experience. As further described above, in some cases a GPU may be in a power state that prevents the GPU from generating a PWM signal.","As illustrated in , graphics processing unit  and graphics processing unit  respectively include PWM monitor  and PWM monitor . Each of PWM monitor  and PWM monitor  may be configured to monitor the signal provided to fan driving unit  (i.e., PWM_out) and adjust the PWM signal generated by its graphics processing unit. In one example, one or both of PWM_out() and PWM_out() may be modified such that the resulting PWM signal provided to fan driving unit  (PWM_out) has a desired duty cycle. In one example, each of PWM generator , PWM monitor , PWM generator  and PWM monitor  may be configured as always-on power island(s). In one example, each of PWM generator , PWM monitor , PWM generator  and PWM monitor  may be powered independent of GPU core resets, GPU core power states, and power states associated with graphics processing unit  and graphics processing unit . Further, each of PWM generator , PWM monitor , PWM generator , and\/or PWM monitor  may be configured such that when graphics processing unit  and graphics processing unit  and\/or GPU cores thereof are reset or powered off, PWM generator , PWM monitor , PWM generator  and\/or PWM monitor  maintains the speed of fan . In this manner, graphics subsystem  may be configured to maintain a fan speed independent of the power state of one or more graphics processing units.","As described above, each of PWM monitor  and PWM monitor  may monitor PWM_out and respectively adjust PWM_out() and PWM_out() such that the resulting PWM_out has a desired duty cycle. In the example illustrated in , PWM generator  provides a PWM signal, PWM_out(), to GPIO PAD  and PWM generator  provides a PWM signal, PWM_out(), to GPIO PAD . As illustrated in , each of GPIO PAD  and GPIO PAD  include an input buffer and an output buffer. In the example illustrated in , each of graphics processing unit  and graphics processing unit  control the same board trace for fan control and output buffers are configured for open drain operation. Thus, in the example illustrated in , each of PWM monitor  and PWM monitor  may monitor its respective input buffer (i.e., PWM_in) to sense what the other graphic processing unit is driving on the board trace (PWM_out). That is, PWM_in may follow PWM_out and PWM_out may equal the logic AND of all the PWM signals (e.g., PWM_out() & PWM_out() . . . & PWM_out(n)). Thus, PWM monitor  can compare PWM_out() to PWM_in to determine characteristics of PWM_out(). Likewise, PWM monitor  can compare PWM_out() to PWM_in to determine characteristics of PWM_out().","In one example, each of PWM monitor  and PWM monitor  may measure the time that a PWM signal is asserted, where an asserted signal causes fan  to spin faster. In one example described below, each of PWM monitor  and PWM monitor  may measure the time that a PWM signal is asserted by monitoring PWM_in. Based on the measured time, each of PWM monitor  and PWM monitor  may respectively cause graphics processing unit  and graphics processing unit  to adjust its PWM period (e.g., by waiting to assert is signal based on a total assertion time) to maintain a desired duty cycle. In this manner the resultant PWM signal may naturally implement a maximum function of the duty cycles from graphics processing unit  and graphics processing unit . Further, each of PWM monitor  and PWM monitor  may respectively cause each of graphics processing unit  and graphics processing unit  to de-assert its PWM signal until its PWM period has expired or until it senses that the PWM signal is asserted, at which point it may assert the PWM signal for the assertion time it is configured for. In this manner the resultant PWM signals may by synchronized.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 3","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["1","2","1","2","1","1","2","1","2","2","1"],"sub":["1","2","1","2","1","1","2"]},"In one example, each of PWM monitor  and PWM monitor  may be configured to include logic implemented as any combination of hardware, firmware and\/or software to respective adjust PWM_out() and PWM_out() based on the following algorithm:",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"---------"},{"entry":"START"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ initial state"]},{"entry":[{},"pwm_out = OFF;"]},{"entry":[{},"clock_counter = 0;"]},{"entry":[{},"\/\/ turn the fan on"]},{"entry":[{},"pwm_out = ON;"]},{"entry":[{},"while (clock_counter <= hi) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"clock_counter++"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"pwm_out = OFF;"]},{"entry":[{},"\/\/ Wait for the ON\u2212>OFF transition"]},{"entry":[{},"\/\/ It will occur immediately if no other GPUs are driving the PWM"]},{"entry":[{},"signal,"]},{"entry":[{},"\/\/ but could occur later if the other GPUs have a longer hi time"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"configuration."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"while (pwm_in == ON) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"clock_counter++"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Recompute period such that the PWM duty cycle will match"]},{"entry":[{},"\/\/ what is configured by hi and period."]},{"entry":[{},"\/\/ Note that clock_counter holds the actual time the fan was ON."]},{"entry":[{},"\/\/ Note that clock_counter will be greater than or equal to hi."]},{"entry":[{},"\/\/ This will cause the adjusted period to be greater than or equal"]},{"entry":[{},"\/\/ to the configured period."]},{"entry":[{},"adjusted_period = clock_counter * period \/ hi;"]},{"entry":[{},"\/\/ Wait until the adjusted PWM period expires or until another"]},{"entry":[{},"\/\/ GPU starts driving the fan."]},{"entry":[{},"while ((pwm_in == OFF) && (clock_counter <= adjusted_period))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"clock_counter++"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ start over with new PWM period"]},{"entry":[{},"goto START"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"END"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"An example execution of the algorithm above by PWM monitor  and PWM monitor  is illustrated in . It should be noted that although the example illustrated in  is described as being performed by two PWM monitors, the algorithm above may be continuously performed by any number PWM monitors. Further, it should be noted that each of PWM monitor  and PWM monitor  may be configured such that the algorithm above is applied for non-static PWM waveforms. That is, each of PWM monitor  and PWM monitor  may first check whether a PWM signal has a duty cycle of 0% or 100% and disregard this as a degenerate case and not apply the algorithm.","In the algorithm above, period may be the desired number of clock cycles of the PWM waveform period and hi may be the desired number of clock cycles to drive the PWM to spin the fan. As illustrated in , PWM_out() initially has a period of T and a hi time of 0.5 T, each of which may be defined by thermal monitor , which results in a defined duty cycle of 50% (i.e., 0.5 T\/T=50%). In the example illustrated in , PWM_out() has a defined period of 1.25 T and a hi time of 0.5625, which results in a defined duty cycle of 45% (i.e., 0.5625 T\/1.25 T=45%).","As illustrated in , PWM monitor  starts a counter when PWM_out() is asserted. The assertion of PWM_out() causes PWM monitor  to assert PWM_out() according to the final while condition in the algorithm above. Similar to PWM monitor , PWM monitor  also starts a counter when PWM_in is asserted based on the assertion of PWM_out(). As illustrated in , PWM monitor  keeps incrementing its counter until PWM_in transitions to OFF, which is caused by hiexpiring after 0.5625 T. Based on the counter value of 0.5625 T, PWM monitor  can calculate an adjusted period of 1.125 T (0.5625*T\/0.5 T) and wait 0.5625 T before asserting PWM_out() in order to maintain a desired duty cycle of 50%. Likewise PWM monitor  can calculate an adjusted period of 1.25 T and wait 0.6875 T before asserting PWM_out() in order to maintain its defined duty cycle of 45%. However, because 0.5625 T is shorter than 0.6875 T, PWM monitor  will cause PWM_out() to be asserted at 0.5625 T according to the \u201cPWM period expires or until another GPU starts driving the fan\u201d condition above.","As illustrated in , the resulting PWM_in signal, which corresponds to PWM_out has a duty cycle of 50% and an adjusted period of 1.125 T. In this manner, graphics subsystem  may be configured to monitor multiple PWM signals and generate a PWM signal having a duty cycle equal to the maximum duty cycle of individual duty cycles of received PWM signals. That is, given that each of a plurality of graphic processing units, GPU(i), is configured to generate a PWM waveform having duty_cycle(i) and period(i), graphics subsystem  may be configured to generate a signal have a resultant DUTY_CYCLE and PERIOD defined as follows:\n\nDUTY_CYCLE=max(duty_cycle(0), duty_cycle(1), . . . , duty_cycle(i))\n\nPERIOD=max(period(0)*duty_cycle(0), period(1)*duty_cycle(1), . . . , period(i)*duty_cycle(i))\/DUTY_CYCLE\n",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 6","FIG. 6"],"b":["308","316"]},"As illustrated in , PWM monitor  includes SYNC unit , ON-to-OFF detection unit , ON-to-OFF or OFF-to-ON detection unit , on_off_state unit , multiplexer , last_time_on state unit , ON threshold calculation unit , OFF threshold calculation unit , multiplexer , comparator , multiplexer , output unit , multiplexer , incrementing unit , and timer . PWM monitor  is configured such that incoming PWM signal, PWM_in, is monitored and internal timing components are synchronized to OFF\/ON transitions and outgoing \u201cON,\u201d which causes a PWM_out signal to be seen on a GPIO PAD, (e.g., GPIO PAD , as illustrated in ) is generated based on the synchronized timing components and the ON thresholds and OFF thresholds. Further, PWM monitor  is configured to generate an adjusted period value based on the algorithm provided above.","As illustrated in , SYNC unit  receives PWM_in signal and provides a synchronized PWM_in signal to ON-to-OFF detection unit , ON-to-OFF or OFF-to-ON detection unit , and on_off_state unit . On_off_state unit  stores a value indicating whether PWM_in is in an ON state or an OFF state. As illustrated in , the output of on_off_state unit  is provided to multiplexer . Multiplexer  outputs an ON threshold value to comparator  if PWM_in is in an ON state and outputs an OFF threshold value to comparator  if PWM_in is in an OFF state.","ON-to-OFF detection unit  detects whether an ON-to-OFF transition occurs in PWM_in. As illustrated in , the output of ON-to-OFF detection unit  is provided to multiplexer . Multiplexer  outputs either the output of timer  or the output of last_time_on state unit  based whether an ON-to-OFF transition is detected. The value output by last_time_on state unit  is provided to OFF threshold calculation unit  to calculate an OFF threshold value. That is, multiplexer  and last_time_on state unit  allow OFF threshold calculation unit  to determine how long PWM_in has been in an ON state. As illustrated in , OFF threshold calculation unit  also receives a duty cycle value. The duty cycle and period value illustrated in  may correspond to defined period and defined hi values described above (duty cycle=hi\/period). In one example, OFF threshold calculation unit  can calculate an OFF threshold according to the following equation:\n\nOFF_threshold=last_time_on*(1\u2212duty_cycle)\/duty_cycle\n","Further, OFF threshold calculation unit  can calculate the adjusted period value according to the following equation:\n\nadj. period=last_time_on+OFF_threshold\n","As illustrated in , ON threshold calculation unit  may receive the duty cycle and period value. ON threshold calculation unit  may be configured to calculate an ON threshold value based on the duty cycle and period values. In one example, ON threshold calculation unit  may calculate an ON threshold according to the following equation:\n\nON_threshold=period*duty_cycle\n","As described above, the actual ON time may be greater than the ON time driven by a GPU, so the OFF threshold is calculated based on the last ON time and the targeted duty cycle. As described above, this may extend the desired period, but it should not be shorter than the desired period.","ON-to-OFF or OFF-to-ON detection unit  may be configured to load timer  with an initial value when an ON or OFF transition is detected using multiplexer . In the example, illustrated in , timer  may be loaded with the value 3 and incremented thereafter using incrementing unit . The initial value may be chosen to match the latency from driving PWM_out to detecting PWM_in. It should be noted that timer  is different that clock counter described in the algorithm above. That is, as described timer  operates in conjunction with other components of PWM monitor  to determine counter values in the algorithm above.","Comparator  compares a timer value to an ON threshold or an OFF threshold. The result of comparator  may be used to drive PWM_out. That is, multiplexer  and output unit  may cause PWM_out to enter either an ON or OFF state when timer is greater than a threshold value. It should be noted that the implementation of PWM monitor  in  may be a suitable implementation in the case where the duty cycle values take on limited and discrete values, such as when the OFF and ON percentages are power of 2 integer multiples of each other. If this is not the case, other implementations may be more suitable, such as an ON time credit accumulator which drains when PWM_out is off. As described above, the GPIO that controls a fan may be an open drain output driver. In one example, the ON time may be extended because the one graphics processing unit is driving the GPIO to ground. However, in the example illustrated in , the ON time may be configured such that it cannot be cut short by another graphics processing unit.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 7","b":["700","600","700","100","600","702","600","704","600","600","706","600","600"]},"In one or more examples, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over, as one or more instructions or code, a computer-readable medium and executed by a hardware-based processing unit. Computer-readable media may include computer-readable storage media, which corresponds to a tangible medium such as data storage media, or communication media including any medium that facilitates transfer of a computer program from one place to another, e.g., according to a communication protocol. In this manner, computer-readable media generally may correspond to (1) tangible computer-readable storage media which is non-transitory or (2) a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions, code and\/or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer-readable medium.","By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage, or other magnetic storage devices, flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. It should be understood, however, that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transient media, but are instead directed to non-transient, tangible storage media. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and Blu-ray disc, where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.","Instructions may be executed by one or more processors, such as one or more digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term \u201cprocessor,\u201d as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, the functionality described herein may be provided within dedicated hardware and\/or software modules. Also, the techniques could be fully implemented in one or more circuits or logic elements.","The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses, including a wireless handset, an integrated circuit (IC) or a set of ICs (e.g., a chip set). Various components, modules, or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require realization by different hardware units. Rather, as described above, various units may be combined in a codec hardware unit or provided by a collection of interoperative hardware units, including one or more processors as described above, in conjunction with suitable software and\/or firmware.","Various examples have been described. These and other examples are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
