---
title: Single to multi-user synchronous application conversion
abstract: A system for converting a single-user application into a multi-user synchronous application, in one example embodiment, comprises synchronous multi-user services to provide a Software Development Kit (SDK) including one or more function calls, which when implemented on one or more client devices allow using the single-user application as the multi-user synchronous application, to receive, upon implementation of the one or more function calls, a request to register the multi-user synchronous application and associated application parameters, register the multi-user synchronous application and the associated application parameters, and to provide a synchronous multi-user server to enable runtime operations of the multi-user synchronous application on the one or more of the client devices. The runtime operations of the multi-user synchronous application include simultaneous running of an application algorithm on the one or more client devices. The system can further comprise displaying progress of one or more users of the multi-user synchronous application on the respective one or more client devices during the simultaneous running of the multi-user synchronous application and making results associated with the multi-user synchronous application visible on the one or more users upon conclusion of the multi-user synchronous application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08556713&OS=08556713&RS=08556713
owner: 
number: 08556713
owner_city: 
owner_country: 
publication_date: 20091111
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of the filing date of Provisional Application 61\/253,260 filed on Oct. 20, 2009, which is incorporated herein by reference.","This application relates generally to data processing and more specifically to computer-implemented systems and methods for a single to multi-user synchronous application conversion.","A single-user application (e.g., a single-user video game) is an application where input from only one user is expected throughout the course of the use session. The term single-user application implies that the application can only be used by one person, while single-user mode typically refers to a single-user option in a multi-user application. Single-user applications are very common but would be more enjoyable if they could be converted for use by more than one user at a time. However, no simple mechanism by which a single-user application can be converted into a synchronous multi-user application is available.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","In an example, a computer-implemented system for converting a single-user application into a multi-user synchronous application comprises synchronous multi-user services to provide, a Software Development Kit (SDK) including one or more function calls, which, when implemented on one or more client devices, allow playing of the single-user application as the multi-user synchronous application receives, upon implementation of the one or more function calls, a request to register the multi-user synchronous application and associated application parameters, registers the multi-user synchronous application and the associated application parameters, and provides a synchronous multi-user server to enable runtime operations of the multi-user synchronous application on the one or more client devices.","In an example, the synchronous multi-user server includes an application management console. In an example, the application management console is to enable an authorized user to perform one or more of the following actions: set the application parameters; modify the application parameters; define a winner of the multi-user synchronous application; interrupt the multi-user synchronous application on the one or more client devices participating in the multi-user synchronous application; set an application robot; view data related to users associated with the one or more client devices; view traffic analytics associated with the multi-user synchronous application; and place advertisements.","In an example, the application robot is a virtual representation of the one or more client devices. In an example, the advertisements enable users associated with the one or more client devices to view one or more promotions associated with a further multi-user synchronous application while using the multi-user synchronous application. In an example, the application parameters include one or more scenarios associated with the multi-user synchronous application.","In an example, the synchronous multi-user server includes an application room engine to run the multi-user synchronous application substantially simultaneously on the one or more devices participating in the multi-user synchronous application and to determine the winner. In an example, the one or more client devices participating in the multi-user synchronous application are to run the same version of the multi-user synchronous application, the same scenario of the multi-user synchronous application, and the same application algorithm of the multi-user synchronous application.","In an example, the one or more function calls are to perform one or more of the following: connect the one or more client devices to the synchronous multi-user server upon loading of the multi-user synchronous application; inform the synchronous multi-user server that the one or more client devices have completed the application; notify the synchronous multi-user server that the multi-user synchronous application is to be interrupted; and determine a score associated with the multi-user synchronous application. In an example, the synchronous multi-user server is configured to support one multi-user synchronous application. In an example, the synchronous multi-user server is configured to support one or more multi-user synchronous applications.","In further examples, the above methods steps are stored on a machine-readable medium comprising instructions, which, when implemented by one or more processors, perform the steps. In yet further examples, subsystems, or devices can be adapted to perform the recited steps. Other features, examples, and embodiments are described below.","Example systems and methods for a single to multi-user synchronous application conversion are described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of example embodiments. It will be evident, however, to one skilled in the art, that the present invention may be practiced without these specific details.","The instant disclosure is related to systems and methods for a single to multi-user synchronous application conversion. In the instant disclosure, a game can be used as an example application, and terms \u201cgame\u201d and \u201capplication\u201d are used interchangeably. It will be understood, however, that the invention is not limited to games.","In one example embodiment, a method for a single to multi-user synchronous application conversion can commence with providing an SDK to an application developer. The SDK can include functions allowing the application developer to convert a single-user application into a synchronous multi-user application. Furthermore, a synchronous multi-user server can be provided to run the application (e.g., a game) simultaneously on multiple client devices.","Using the SDK, a developer can implement a function call to connect a client device to the synchronous multi-user server upon application load. A function call starting the application with predefined application parameters can also be implemented. These application parameters can be predefined by the developer in many different application scenarios. For example, after the game of \u201cTetris\u201d is played for one minute by all participating players, the scores can be compared. In other examples, players can play at a specific skill level, play until the last player remains, or play until the first player completes a certain level.","Another function call can inform the synchronous multi-user server that the user has completed the application. Yet another function call can be implemented to notify the synchronous multi-user server that the application should be interrupted and the score submitted. Once the above function calls are implemented, the developer can send the updated application to users and the synchronous multi-user server can be ready to serve the application with new multi-user features.","After submitting, the application having been submitted to synchronous multi-user services, an application operator can get access to application usage analytics, user data, and an application management console. Using the application management console, the application operator can change application scenarios and add new ones. Furthermore, the application operator can enable application robots that act as live users when there are no live users in an application room. The application robots can permit the application operators to enable application robots for the synchronous multi-user application that look like other players when there are no live players.","In some example embodiments, instead of using a preexisting application, the application developer can build his own multi-user synchronous application. For this application, the developer can implement server extensions and make them reside within the synchronous multi-user services. Besides multi-user and social functions, the SDK can allow the application developer to connect his applications to one application network.","Application users can be provided with the ability to see other application promotions from inside the application shell. Additionally, the synchronous multi-user application's start and end function calls can be customized to show all application offerings on the application network. On the backend, the developer can be provided with the ability to see the unified users' traffic and user data across all applications in the application network.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","110"]},"The synchronous multi-user server  can provide runtime support to synchronous multi-user applications. The synchronous multi-user server  can be configured to run any synchronous multi-user application implemented by a conversion process described herein, a predetermined collection of applications, or as a dedicated server, which supports only one type of synchronous multi-user application. The synchronous multi-user server  is described in more detail below with reference to .","An application developer  is a software developer (a business or an individual) who creates one or more single-user applications and utilizes functionalities provided by the synchronous multi-user server  via a synchronous multi-user library  to convert a single-user application into a multi-user synchronous application. The application developer  can also be involved in publishing of the applications he creates. In some example embodiments, the application developer  is not the creator of the single-user application to be converted into the multi-user synchronous application. Instead, the application developer  is engaged by the owners or operators of the single-user application to convert the single-user application into a multi-user synchronous application.","The sample synchronous multi-user server environment  can further include a client device . The client device  is any device on which a synchronous multi-user application can be used by an application user, such as, for example, a mobile telephone or other handset. Other example client devices can have a mere browser or more advanced PC-like functionality which can run complete operating system software and provide a standardized interface and platform for the application developer .","In some example embodiments, the synchronous multi-user application can be played simultaneously on a number of client devices  and each client device can run the same version of the synchronous multi-user application, the same scenario of the synchronous multi-user application, and the same algorithm associated with the synchronous multi-user application. Each user can use the synchronous multi-user application independently on his respective client device  without having to wait for another user's action. If the synchronous multi-user application is a game, a winner of the round of the game can be determined by the synchronous multi-user server , which receives results of the game from the client devices .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","200","120","110","210","210","130","212"]},"The application developer  can set multi-user scenario parameters  to define scenarios of the synchronous multi-user application when an application room engine  starts the synchronous multi-user application. A function call startApplicationWithParameters  can be provided in the SDK  to set the application parameters on start. The multi-user scenario parameters  can include many different scenarios for the synchronous multi-user application. For example, the game of \u201cTetris\u201d can be played for 1 minute by all players and then their respective scores can be compared, played at a specific level of difficulty, played until the last player remains, or played until the first player finishes a level.","A finishApplication  can notify the application room engine  that a user associated with the client device  has finished the synchronous multi-user application. An optional function call interruptApplication  can be provided by the SDK  and implemented by the application developer  to notify the application room engine  that the synchronous multi-user application currently being played on the client device  is to be interrupted and the score submitted to the synchronous multi-user server . The multi-user scenario parameters are discussed in greater detail below with reference to .","Thus, the SDK  can enable the application developer  to add synchronous multi-user capabilities to single player applications. An application management console  can be provided to allow management of scenarios associated with the synchronous multi-user application.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["110","110","230","220","222","224","226","228"]},"When a user starts the synchronous multi-user application, the client device  can connect to the application room engine  of the synchronous multi-user server  and the user placed in an application room (not shown) run by the application room engine . In some example embodiments, the user is able to select an application room based on the application scenario of a particular room.","When a predetermined minimum number of users, including robots, needed to start the synchronous multi-user application have joined an application room, the application room engine  starts the synchronous multi-user application for all users in this application room and passes the multi-user scenario parameters  to all client devices  running the synchronous multi-user application. The synchronous multi-user server  can also read the multi-user scenario parameters  and define the criteria of finishing the synchronous multi-user application.","In some example embodiments, there can be no predefined multi-user scenario parameters  and the synchronous multi-user server  can start the synchronous multi-user application using default startApplication criteria  and finish the synchronous multi-user application using a default endApplication criteria . The default criteria can be set in the multi-user scenario parameters . Besides the default criteria, the application developer  can set many scenarios for the synchronous multi-user application.","Some of the scenarios do not require any support of the client device . Example scenarios that do not require any support from the client device  include a minimum number of players for the synchronous multi-user application. Some other scenarios may require support of the client device . For example, a random algorithm seed can be needed to run the same session of the synchronous multi-user application on client devices .","When the application room engine  determines that the synchronous multi-user application needs to be ended, it can send an interruptApplication  to all client devices  participating in the synchronous multi-user application. Thereafter, the application room engine  can define the winner according to the application scenario settings specified in the application parameters  and send the results of the synchronous multi-user application to all client devices  in the application room.","It will be noted that the process of conversion of a single-user application to a multi-user synchronous application can include passing of the multi-user scenario parameters  to the application client associated with the client device . The multi-user scenario parameters  that define an application scenario can be set on the synchronous multi-user server  via the application management console . This provides the application operator with an ability to add and\/or edit the multi-user scenario parameters  when the synchronous multi-user application is deployed to the synchronous multi-user server .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["240","130","110","240","110","240","120"]},"Application parameters  can be used to set the minimum number of users needed to start the synchronous multi-user application. JoinApplication Rules  can be used to specify whether the application scenario is open or closed, i.e., to define whether other players can join the application while it is running The JoinApplication Rules  can also be used to define the maximum time after the start of the synchronous multi-user application within which other users can join the synchronous multi-user application. After the maximum time to join has elapsed, the synchronous multi-user application is played in a closed scenario.","EndApplication Criteria  can be used to set the end-of-round criteria for the synchronous multi-user application. The end-of-round criteria can be utilized to specify whether the synchronous multi-user application is played as a timed race, until the first player finishes, or until the last player remains in the synchronous multi-user application . A wait-for-others command can be used to interrupt all clients, once the winner is defined. Thus, the multi-user scenario parameters  can be used by the synchronous multi-user server  to start and run the synchronous multi-user application, and to configure the same application scenario on all client devices .  is a block diagram  showing a sample usage of a synchronous multi-user library for a single to multi-user synchronous application conversion, in accordance with an example embodiment.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":["600","120","120","130","130","120","640","650","120"]},"Despite the application room engine  being shown within the context of the synchronous multi-user services , it will understood that the synchronous multi-user services  and the synchronous multi-user server  can reside at the different locations and\/or provide their respective functionalities as a single physical or logical unit.","The application management console  can be utilized by the application operator to manage the synchronous multi-user application after it has been submitted to the synchronous multi-user server . The application management console  can provide a user interface to permit the application operators and\/or the application developer  to change application scenarios and add new ones. As shown in , developer services  can include registration  and analytics  to provide the application operator with applications traffic analytics and user reports.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 7","FIG. 6"],"b":["700","706","710","712","710","714"]},"Once the synchronous multi-user application is finished, the user can wait for the results by watching waiting results . Once the results are shown at , the user can wait and start another round by clicking on a start button . In some example embodiments, featured promotions can be presented to the users. For example, the top five applications, rated by predetermined criteria, can be presented along with information related to the number of the players, whether or not the user's friends liked the applications, and the prices of the applications.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 8","FIG. 3"],"b":["800","800","110"]},"The method  can commence at operation  with the synchronous multi-user services  providing, to the application developer , the SDK  including the function calls , , , and , which when implemented on one or more client devices , allow using the existing single-user application as a multi-user synchronous application.","The function calls , , , and  can permit connecting the one or more client devices  to the synchronous multi-user server  upon loading of the multi-user synchronous application, informing the synchronous multi-user server  that the one or more client devices  have completed the multi-user synchronous application , notifying the synchronous multi-user server  that the multi-user synchronous application  is to be interrupted, and determining a score associated with the multi-user synchronous application.","Upon implementation of the function calls , , , and , the synchronous multi-user server  can receive a request to register the multi-user synchronous application and the associated multi-user scenario parameters  at operation . The multi-user scenario parameters  can include one or more scenarios associated with the multi-user synchronous application. The synchronous multi-user server  can include the application room engine  to run the multi-user synchronous application substantially simultaneously on the one or more devices  and to determine the winner of the multi-user synchronous application based on the multi-user scenario parameters .","Thereafter, the synchronous multi-user server  can register the multi-user synchronous application and the associated multi-user scenario parameters  to the synchronous multi-user server  at operation . The synchronous multi-user server  can be provided a means to enable runtime operations of the multi-user synchronous application on the one or more client devices  at operation . The method  can further comprise providing the application management console  to an authorized user at operation .","The application management console  can enable the authorized user to set the scenario parameters , modify the scenario parameters , define a winner of the multi-user synchronous application, interrupt the multi-user synchronous application on the one or more client devices , set an application robot as a virtual representation of the one or more client devices , view data related to users associated with the one or more client devices , view traffic analytics associated with the multi-user synchronous application, and place advertisements. The advertisements can be related to a further multi-user synchronous application.","The one or more of the client devices  participating in the multi-user synchronous application can be programmed to run the same version of the multi-user synchronous application, the same scenario the multi-user synchronous application, and the same application algorithm associated with the multi-user synchronous application. The synchronous multi-user server  can be configured to run one multi-user synchronous application on a dedicated application server or one or more multi-user synchronous applications.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 9","FIG. 3"],"b":["900","900","110"]},"The method  can commence with adding a synchronous multi-user to user's single player applications at operation . At operation , the multi-user synchronous application can be integrated with the SDK . Thereafter, at operation , the multi-user synchronous application can be registered to the synchronous multi-user server . At operation , the application operators can define multiple application scenarios by setting the application parameters . It will be noted that the method  may or may not be concerned with the development of a new application with multi-user components. The application developer  can utilize a preexisting single-user application (development finished, production ready, live) and add synchronous multi-user capabilities to this application by integrating it with the Application Programming Interface (API) of the synchronous multi-user server . The application developer  can also build a new single-user application and add synchronous multi-user capabilities to this new application.","The method  can continue at operation  with the application developer  setting application scenarios in the application management console  of the synchronous multi-user server . When a user connects to the synchronous multi-user server , he can be placed in one of the application rooms at operation . The user can also choose a room by viewing different application scenarios played in each room.","At operation , the multi-user synchronous application can wait for a minimum number of players to join the application room. When the minimum number of players needed to start the multi-user synchronous application has joined, the synchronous multi-user server  can start a multi-user synchronous application for all players in the room. When the application function is called by the synchronous multi-user server  on all client devices and the players are ready to play the multi-user synchronous application, the synchronous multi-user server  passes the multi-user scenario parameters  to all application clients at operations .","At operation , the multi-user synchronous application is started on the second device. Based on the multi-user scenario parameters  passed at operation , the multi-user synchronous application is finished on both devices at operations  and  respectively.","If there are no multi-user scenario parameters  found for the multi-user synchronous application, the synchronous multi-user server  can run the multi-user synchronous application using a default start application criteria and default criteria to finish the multi-user synchronous application. The default criteria can be set in the application management console . At operation , the winners are defined and, at operations  and , the winners are shown on all devices.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 10","FIG. 10"],"b":["1000","1000","1010","1020","1010","1020","1020","210","130"]},"In some example embodiments, the resulting multi-user computer code can be immediately accepted by the synchronous multi-user server  to run the application room engine . In some example embodiments, the integration service  and the automated integrator  can run in an interactive mode . In the interactive mode , the automated integrator  can automatically analyze the computer code and suggest one or more options for a manual selection by the application developer . Based on the manual selection made by the application developer  through the integration service , the automated integrator  can automatically integrate the one or more function calls to produce the integrated computer code. The resulting multi-user computer code can be sent back to the developer  or be immediately accepted by the synchronous multi-user server  to run the application room engine .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 11","b":"1100"},"The example computer system  includes a processor or multiple processors  (e.g., a central processing unit (CPU), a graphics processing unit (GPU), or both), and a main memory  and static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD)). The computer system  may also include an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), a voice recognition or biometric verification unit, a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device . The computer system  may further include a data encryption module (not shown) to encrypt data.","The disk drive unit  includes a computer-readable medium  on which is stored one or more sets of instructions and data structures (e.g., instructions ) embodying or utilizing any one or more of the methodologies or functions described herein. The instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processors  during execution thereof by the computer system . The main memory  and the processors  may also constitute machine-readable media.","The instructions  may further be transmitted or received over a network  via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., Hyper Text Transfer Protocol (HTTP)).","While the computer-readable medium  is shown in an example embodiment to be a single medium, the term \u201ccomputer-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201ccomputer-readable medium\u201d shall also be taken to include any medium that is capable of storing, encoding, or carrying a set of instructions for execution by the machine and that causes the machine to perform any one or more of the methodologies of the present application, or that is capable of storing, encoding, or carrying data structures utilized by or associated with such a set of instructions. The term \u201ccomputer-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media, and carrier wave signals. Such media may also include, without limitation, hard disks, floppy disks, flash memory cards, digital video disks, random access memory (RAMs), read only memory (ROMs), and the like.","The example embodiments described herein may be implemented in an operating environment comprising software installed on a computer, in hardware, or in a combination of software and hardware.","Thus, methods and systems for conversion of a single-user application to a synchronous multi-user application have been described. Although embodiments have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the system and method described herein. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["Example embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
