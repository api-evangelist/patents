---
title: Dynamic formatting of messages for multiple endpoints
abstract: In one general aspect, a tangible computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. The instructions can include instructions to receive an indicator that at least a portion of a source message has been produced using a source module, and instructions to send to the source module, in response to the indicator, an extraction module configured to assign an attribute value to content of the source message. The attribute value can represent a contextual function of the content within the source message. The instructions can include instructions to receive a content package including the content and the attribute value assigned to the content, and produce a plurality of endpoint-specific messages associated with a plurality of endpoints based on a plurality of message templates and the attribute value assigned to the content within the content package.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990321&OS=08990321&RS=08990321
owner: Google Inc.
number: 08990321
owner_city: Mountain View
owner_country: US
publication_date: 20110630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This description relates to formatting of messages for multiple endpoints.","Known applications such as e-mail applications, text messaging applications, and so forth, are configured to generate and send messages (e.g., communications, updates, announcements) from a user (e.g., a user account) or to a user (e.g., a user account). In some instances, these messages can be notifications automatically generated by one or more applications in response to, for example, a change (e.g., a system change, an administrative change, a file change) associated with the application. These applications are often limited to sending messages to or from a user using a specific communication format such as an e-mail message or a text message. The user, however, may wish to send messages to several different devices of another user and\/or receive messages at several different devices using different formats, but these known applications may not have the capability and\/or processing resources to appropriately format the message for each of the several different devices. Thus, a need exists for systems, methods, and apparatus to address the shortfalls of present technology and to provide other new and innovative features.","In one general aspect, a tangible computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. The instructions can include instructions to receive an indicator that at least a portion of a source message has been produced using a source module, and instructions to send to the source module, in response to the indicator, an extraction module configured to assign an attribute value to content of the source message. The attribute value can represent a contextual function of the content within the source message. The instructions can include instructions to receive a content package including the content and the attribute value assigned to the content, and produce a plurality of endpoint-specific messages associated with a plurality of endpoints based on a plurality of message templates and the attribute value assigned to the content within the content package.","In another general aspect, a method can include receiving a message template defining a format based on a first plurality of attribute values, and receiving a content package including content associated with a second plurality of attribute values where the content is from a source message produced at a source module. The method can include defining an endpoint-specific message for an endpoint based on an intersection between the first plurality of attribute values associated with the message template and the second plurality of attribute values associated with the content.","In yet another general aspect, a tangible computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. The instructions can include instructions to select a message template from a plurality of message templates based on an endpoint targeted for receipt of an endpoint-specific message, and receive a content package including a plurality of content portions parsed from a source message produced at a source module. Each content portion from the plurality of content portions can be associated with at least one attribute value from a plurality of attribute values. The instructions can include instructions to define the endpoint-specific message based on at least a portion of the plurality of attribute values being included in the message template.","The details of one or more implementations are set forth in the accompa-nying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["130","16","18","130","16","1","10","110","112","18","1","112","18","110"]},"As shown in , the formatter  can be used to define and send (e.g., distribute) multiple endpoint-specific messages  based on a single source message . Each of the endpoint-specific messages  can have a format (e.g., arrangement) that is defined at the formatter  (e.g., the message generator  of the formatter ) specifically for the endpoint  receiving the message. Each of the endpoints  can be different endpoint types (e.g., a smartphone endpoint type, a particular messaging program or social media application functioning as an endpoint) with different processing capabilities configured to process different (e.g., mutually exclusive, incompatible) message formats. For example, the message A can be defined at the message generator  based on at least a portion of the content (e.g., textual content, image content, audio content) included in the source message  with a first format that can be processed by the endpoint B, and the message A can be defined at the message generator  based on at least a portion of the content (also can be referred to as a content portion) included in the source message  with a second format that can be processed by the endpoint B. Endpoint B may not be configured to process messages (e.g., message A) based on the second format, and similarly, endpoint B may not be configured to process messages (e.g., message A) based on the first format. A format for one or more of the endpoints , which can be different endpoint types, can be referred to as an endpoint-specific format.","The formatter  includes a message generator  configured to define each of the endpoint-specific messages  with the endpoint-specific format based on a combination of a content package  received from the source module  and one or more message templates  stored in a memory . The message templates  are templates that can be used by the message generator  of the formatter  to define a message with an endpoint-specific format. In , the relationships between the message templates and the endpoints  are illustrated by dashed lines between the message templates  and the endpoints . For example, one of the message templates  associated with endpoint BN (represented by the dashed line) can include data that can be used by the message generator  of the formatter  to define, for example, message AM with a format specific to endpoint BN.","As shown in , a content package  is defined at the source device  based on the source message . The content package  is then used by the message generator  of the formatter  to define the endpoint-specific messages  with the endpoint-specific formats based on the message templates . In some implementations, the content package  can be, or can include, a parsed version of the source message  that can be used in conjunction with (e.g., compatibly with) the message templates  to define the endpoint-specific messages  with the endpoint-specific formats.","The content package  is defined based on the source message  using an extraction module  (or an instance or copy of the extraction module ) sent from the message generator  of the formatter  to the source module . The message generator  of the formatter  is configured to send (or trigger sending of) the extraction module  (or instance thereof) to the source module  in response to an indicator that the source message  is being processed at (e.g., has been defined at, is triggered for sending from) the source module .","As a specific example, the source device  can be a mobile phone and the source module  can be an e-mail application operating at a mobile phone. A user (via a user account) can use the e-mail application to draft an e-mail message (which can be the source message ) including textual content. The user can choose, via a user interface  (e.g., user interface of the application), to send the textual content of the e-mail message to several of the endpoints  that are each configured to receive messages based on formats different than the e-mail message format produced at the mobile phone. The user interface  can be a user interface of (e.g., user interface that can be used to control) the source module . The several endpoints  can be selected before or after the e-mail message has been drafted. The content package  can include one or more indicators (e.g., addresses) of the several endpoints  to which the textual content of the e-mail message should be sent. The extraction module  can be configured to parse the textual content of the e-mail message into the content package  that can be used by the message generator  of the formatter  to define the endpoint-specific messages (such as text messages with limited numbers of characters and\/or no subject line) based on the message templates . The message generator  of the formatter  is configured to automatically format and send the textual content of the e-mail message to the endpoint-specific messages for each of the several endpoints  selected by the user (via a user account) so that the user is not required to separately and manually send the textual content of the e-mail message to each of the several endpoints  using, for example, different devices and\/or applications. Without the functionality of the formatter  the user would be required to manually reformat and send the textual content of the e-mail message to each of the several endpoints .","As another specific example, the source module  can be an application (e.g., a document sharing application, an application associated with a company or institution (e.g., a web banking application), a social media application, a chat application) operating at a server (e.g., the source device ). The source message  can be a notification (e.g., a change\/update notification, a warning message, an announcement) automatically produced (e.g., generated, produced periodically) by the application. A user (e.g., a user account) targeted to receive the notification can choose, via the user interface  (e.g., web-based user interface), to have the content of the notification to several of the endpoints  (e.g., mobile phone, personal computer) owned by the user (e.g., associated with a user account). The several endpoints  can be selected before the notification is produced by the application. The content package  can include one or more indicators of the several endpoints  to which the content of the notification should be sent. The extraction module  can be configured to parse the content of the notification into the content package  that can be used by the message generator  of the formatter  to define the endpoint-specific messages (such as text messages, email messages) based on the message templates . The message generator  of the formatter  is configured to automatically format and send the content of the notification in the endpoint-specific messages for each of the several endpoints  selected by the user (via a user account). Without the functionality of the formatter  the application would not be able to reformat and send the content of the notification to each of the several endpoints .","The content package  can be defined (using the extraction module ) so that the content of the source message  can be efficiently used with each of the message templates  to define the endpoint-specific messages . The content of the source message  can be parsed and included in the content package  so that content can be formatted for each of the endpoint-specific messages  using the message templates . For example, portions of the source message  can be categorized (e.g., labeled, categorized in standardized fashion) so that the portions of the source message  can be incorporated into the message templates  based on the categorizations to define the endpoint-specific messages . Thus, the content package , which is defined once based on the source message , can be used multiple times based on the message templates  to produce the multiple endpoint-specific messages  for distribution.","Specifically, the content package  can include content parsed from the source message  and assigned (e.g., categorized with) attribute values (which can function as labels, categories, or characterizations) that can be used by the message generator  of the formatter  to define one or more of the endpoint-specific messages  based on the message templates . For example, the source message  can have a portion that is a subject line that can be assigned (e.g., tagged with) an attribute value (within the content package ) indicating that the portion of the message is a subject line. The formatter  can be configured to identify the portion of the source message  based on the assignment of the attribute value to the portion of the source message  so that the portion of the source message  can be appropriately included in one or more of the endpoint-specific messages  by the message generator  of the formatter  based on the message templates . Thus, the attribute value characterizes the content as a part of the source message  that can be transferred into (e.g., included in) the endpoint-specific messages  (using the message templates ).","In some implementations, the attribute value can identify a contextual function of content portions of the source message  so that the content portions can be included with the appropriate context within the endpoint-specific messages  (using the message templates ). In other words, the attribute value can be assigned to a portion of the source message  based on the contextual function of the portion within the source message  as, for example, a subject, a salutation, a greeting, a body portion of the source message , an address portion, and\/or so forth.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 2","FIG. 1"],"b":["20","21","24","1","20","212","21","260","160","21","20","21","20"]},"As shown in , content A is assigned attribute value W, content B is assigned attribute value Y, and content C is assigned attribute value Z by the extraction module . In some implementations, the attribute values (also can be referred to as message metadata) can be used to identify or characterize the content . In some implementations, the attribute values can identify contextual functions of content  of the source message . For example, an attribute value can identify and\/or characterize at least a portion of the content  as a subject, a body portion, an image (or collection of images such as a video), an audio recording, a signature block (e.g., a salutation), an advertisement, a link (e.g., a hyperlink), an attachment, a destination (e.g., a destination e-mail address, a destination phone number, an endpoint type, a destination Internet protocol (IP) address), a source (e.g., a reply address, a source e-mail address, a source phone number, a source IP address) a priority (e.g., an urgent priority, a low priority), creation data (e.g., a creation date timestamp), a header, and\/or so forth.","In some implementations, the extraction module  can be configured to analyze various source message formats, such as the format of source message , so that attribute values can be appropriately assigned to content of the source messages. In some implementations, the extraction module  can include, for example, natural language processing functionality, optical character recognition processing functionality, and\/or so forth, that can be used to analyze portions of the content and determine which attribute value should be assigned to the portions of the content. For example, in some implementations, a portion of content of a source message can be identified by (and assigned with an appropriate attribute value by) the extraction module  as a subject of the content based on a structure of the portion of the content of the source message and\/or specific words\/phrases (e.g., \u201cre:\u201d) included in the portion of the content. As another example, a portion of a source message can be identified by (and assigned with an appropriate attribute value by) the extraction module  as a salutation portion or as a greeting portion of the source message based on words (e.g., \u201chi\u201d, \u201csincerely\u201d, \u201cdear\u201d, etc.) and\/or punctuation of the portion of the source message. As another specific example, a portion of content of a source message can be identified by (and assigned with an appropriate attribute value by) the extraction module  as a body portion based on the placement of the portion of the content with respect to other portions of the source message.","As shown in , the content is associated with (e.g., assigned) attribute values in a content package  by the extraction module . In this implementation, certain attribute values (i.e., attribute value U, attribute value X) are not assigned to portions of the content  of the source message  because content corresponding with these attribute values do not exist within the source message . The attribute values that are not assigned to portions of the content  are shown as null values as represented by \u201c\u2014\u201d. In some implementations, multiple attribute values can be assigned to a portion of the content , and in some implementations, multiple portions of the content  can be assigned to a single attribute value. For example, an attribute value can be used to identify a subject of a message, a source device, a destination device, an endpoint type (which can be determined based on the destination device), a body of a message, and\/or so forth.","In some implementations, the content package  can be based on a variety of programming languages (e.g., C++ programming language, HTML, XML). For example, the content package  can be an XML-based content package. In such implementations, the attribute values can be associated with (or can be) XML tags. The content package  can be defined using it any type programming language that can be processed by the formatter  to extract the content and\/or the attribute values assigned to the content. In some implementations, the content package  can be compiled and\/or can be a stand-alone executable program.","As shown in , after the content package  has been defined, the content package  is received at the formatter . The formatter  (e.g., the message generator  of the formatter ) is configured to process the content package  and define an endpoint-specific message  based on a template . The template  is associated with a format specifically defined for endpoint Q (the relationship is represented by the dashed line). Thus, the template  can be arranged so that content having a particular contextual function can be appropriately included in the endpoint-specific message  based on the template .","As shown in , the template  includes several attribute values (i.e., attribute value W, attribute value Z, and attribute value X). The portions of the content  that are associated with the attribute values in the template  can be extracted from the content package  so that the portions of the content  can be included in the endpoint-specific message  for the endpoint Q.","As a specific example, attribute value Z is included in the template , and the attribute value Z is associated with content C in the content package . Accordingly, the formatter  can be configured to insert content C into the endpoint-specific message  based on the association of the attribute value Z with the content C in content package . As another specific example, attribute value W is included in the template , and the attribute value W is associated with content A in the content package . Accordingly, the formatter  can be configured to insert content A into the endpoint-specific message  based on the association of the attribute value Z with the content A in content package .","As shown in , the template  includes an attribute value X. In this implementation, the content package  includes a null value for the attribute value X. In other words, the content  of the source message  does not include content associated with attribute value X. Accordingly, the endpoint-specific message  does not include content in a portion of the endpoint-specific message  allocated for content associated with attribute value X. Thus, the endpoint-specific message  is defined based on an intersection between the attribute values in the content package  (and associated with the parsed content) and the attribute values included in the template .","In some implementations, the template  can define (or can include) a protocol requirement, a file size, encoding requirements, encryption requirements, a programming language, a packet (e.g., data packet) structure, and\/or so forth that can be used to define the endpoint-specific message  so that the endpoint-specific message  can be compatibly processed by endpoint Q. In some implementations, the specifications (e.g., limitations, requirements) of the template  can be included in one or more instructions (not shown) (e.g., metadata) associated with the template . For example, in some implementations, the template  can define placement of content (e.g., placement of content at a specified location, orientation of content) that can be processed by the endpoint Q. In some implementations, a template  can define a container (e.g., a widget, an XML container) and\/or fields into which the portions of content  from the source message  can be populated based on the attribute values assigned to the portions of the content  in the content package . In some implementations, the template  can be defined using a template program such as, for example, Clearsilver.","In some implementations, the template  can include instructions that can be used to modify the content appropriately for the endpoint-specific message  for a particular endpoint type. For example, the endpoint-specific message  can be a short message service (SMS) message that only allows for a certain number of characters for attribute value W. The template  can include instructions (not shown) specifying that content associated with attribute value W should not exceed the character limit. The instructions can specify a manner in which the content should be truncated (or divided into multiple messages), if necessary. Accordingly, if content A includes more characters than allowed for in the SMS message for attribute value W, content A can be truncated (or divided into multiple messages) for inclusion in the endpoint-specific message .","In this implementation, the locations of the content , when included in the endpoint-specific message , correspond with the locations of the attribute values shown in template . In some implementations, the locations of the content when included in a message may not correspond with the locations of the attribute values as included within a template.","After the endpoint-specific message  has been defined by the formatter  based on the template , the formatter  is configured to send an endpoint-specific message  to the endpoint Q. Endpoint Q is configured to receive the endpoint-specific message  and process the endpoint-specific message  based on the format defined by the template .","Although not shown in , the formatter  can be configured to process the content package  based on additional templates (e.g., templates in addition to template ) so that multiple messages (in addition to endpoint-specific message ) can be defined for several endpoints. In other words, the formatter  can be configured to process the content package  to define multiple messages with endpoint-specific formats based on the single source message . In such implementations, the assignment of the attribute values to portions of the content  can be used to include the portions of the content  in message templates (such as message template ) that can be used to define multiple endpoint-specific messages (not shown).","In some implementations, multiple templates can be associated with the endpoint Q in addition to message template . In such implementations, one or more of the message templates can be selected to define a message for the endpoint Q based on the content  included in the content package . For example, a message template that does not include attribute value X (which has a null value in content package ), but includes content associated with attribute value Y (which is associated with content in content package , but is not included in message template ) can be selected to define a message for endpoint Q. Accordingly, all of the content (e.g., content A through C) included in the source message  can be included in an endpoint-specific message for endpoint Q.","Referring back to , the extraction module  (or an instance thereof) can be sent to the source module  (or multiple source modules (not shown)) as an executable (e.g., a widget, a Java program, a compiled executable or set of instructions) that can be received at the source module  in response to the source message  being processed (e.g., drafted, finalized for sending, prepared for sending). Accordingly, the source module  may not include the functionality of the extraction module  until the functionality of the extraction module  is needed to process the source message  so that a content package  can be defined. In such implementations, the extraction module  can be updated and\/or modified without modifying the source module . Thus, multiple source modules (not shown), such as the source module , can use updated functionality of the extraction module  on an on-demand basis. Although not shown in , in some implementations, the functionality of the extraction module  can be integrated into the source module .","In some implementations, the extraction module  can be served into the user interface . In some implementations, when a link to the extraction module  within the user interface  is accessed, the extraction module  can be served into user interface . In such implementations, modifications (e.g., updates), if any, to the extraction module  can be served into the user interface .","In some implementations, the message templates  shown in  may not be stored locally in the memory  of the formatter . Instead, one or more of the message templates  can be stored in a database that can be accessed by the formatter . In some implementations, one or more of the endpoints  can be configured to send one or more message templates to the formatter  on an on-demand basis.","In some implementations, the message generator  of the formatter  can be configured to request a message template from one or more of the endpoints  (or a user account associated with the endpoint(s) ). For example, the content package  can include an indicator that content from the source message  is to be sent to an additional endpoint not included in the endpoints . If a message template associated with the additional endpoint is not stored in the memory  of the formatter  (or may not be otherwise access in a database associated with the formatter ), the message generator  of the formatter  can be configured to request a message template from the additional endpoint so that an endpoint-specific message can be defined for the endpoint. In other words, a message template can be requested for a particular endpoint targeted for an endpoint-specific message and for which a message template is not available.","In some implementations, one or more of the message templates  can be selected to define one or more of the endpoint-specific messages  based on an endpoint type. For example, a message template from the message templates  can be used to define an endpoint-specific message  associated with a smartphone endpoint type. Accordingly, if one of the endpoints  is identified as a smartphone endpoint type, the message template  associated with the smartphone endpoint type can be used to define an endpoint-specific message for the smartphone endpoint type.","As shown in , a message preference  is stored in the memory . The message preference  can include preferences related to sending of the messages  to the endpoints  based on the source message . For example, the message preference  can be associated with a user (e.g., a user account) and can be configured to automatically trigger sending of one or more messages (such as the endpoint-specific messages ) to one or more of the endpoints  in response to a source message (such as source message ) being defined at the source device  by the user. In other words, the message generator  of the formatter  can be configured to automatically send messages to a predefined subset of the endpoints  based on the message preference  associated with a user (e.g., a user account). The message preference  can indicate at least a portion of the endpoints  that are targeted to receive one or more endpoint-specific messages (such as endpoint-specific messages ). In some implementations, the message preference  can be analyzed by the message preference module  so that the endpoint-specific messages  can be defined by the message generator  based on message preference .","As a specific example, a first user (via a user account) can produce a shared document using a document program (such as Google docs). The document program can be configured to send an update notification (e.g., a source message ) to a first user in response to the shared document being updated by a second user (with authorization to update the shared document via a user account of the second user). The first user can define a message preference (e.g., message preference ) that can be used by the message generator  of the formatter  to send multiple endpoint-specific notifications (e.g., endpoint-specific message ) based on the update notification (e.g., source message ) to multiple endpoint devices (e.g., endpoints ) owned by the first user (e.g., associated with a user account of the first user). Instead of sending the update notification only once directly to an endpoint of the first user, the document program can be configured to parse the content of the update notification into a content package (e.g., content package ) using an extraction module (e.g., extraction module ). The message generator  of the formatter  can be configured to receive the content package and define a set of endpoint-specific messages with the content of the update notification based on the multiple endpoint devices specified within the message preference by the first user. Accordingly, the first user can be notified of the change to the document at multiple endpoint devices owned by the first user.","Although not shown in , in some implementations, message preference  can be stored at the source device . In such implementations, the message preference (or portions thereof) can optionally be included in the content package  that is sent to the formatter . In some implementations, the user interface  of the source module  can be used to define the message preference  and\/or to modify the message preference .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["300","300","130","300","1","2","310","1","6","320","1","4","330","1","6","320","1","330","1","4","320","2","330"]},"In some implementations, the rules  can be rules configured to trigger sending of endpoint-specific messages in response to, for example, a shared document being updated, a message being sent from a particular program (e.g., source module  shown in ) or user (e.g., a user account), a message being sent to a specified destination and\/or forwarded from a specified source, and\/or so forth. Although not shown in , the message templates (or compatible message templates) associated with each of the endpoints  can be specified within the message preference .","The message customizations  can include any type of customization related to endpoint-specific messages. For example, message customization MC (shown in column ) can indicate that an endpoint-specific message sent to endpoint UV (shown in column ) should only be sent during a specified time of day or should be delayed for a specified time period (e.g., during working hours, during daytime hours). In some implementations, one or more of the message customizations  can include authentication information (e.g., an authentication token), username and\/or password information, and\/or so forth, that can enable access to one or more of the endpoints . In some embodiments, one or more of the message customizations  can be included in, for example, a message template.","Referring back to , in some implementations, the formatter  can be configured to operate at a host device. In such implementations, the formatter  can be accessed through a network by the source device , which can function as a client to the host device. In some implementations, the formatter  can function as an intermediate application between the source device  (and\/or additional source devices) and the endpoints . Accordingly, the functionality of the formatter  can be called and\/or executed on an on-demand basis (e.g., in response to the source message  being defined, in response to the functionality of the formatter  being triggered via the user interface ). In some implementations, the formatter  can function as a background application operating in conjunction with the source device  (and\/or additional source devices) and\/or the endpoints . In some embodiments, the formatter  can function as an application (or service) that can be accessed via an application programming interface (API).","The formatter  can be, or can include, any type of hardware and\/or software configured to facilitate users (e.g., user accounts) of the formatter  to distribute the content of the source message  to one or more of the endpoints . In some implementations, one or more portions of the components shown in the formatter  in  can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and\/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer). For example, in some implementations, one or more portions of the formatter  can be, or can include, a software module configured for execution by at least one processor (not shown). In some implementations, the functionality of the components can be included in different modules and\/or components than those shown in . For example, although not shown, the functionality of the message generator  of the formatter  can be included in a different module than the message generator  the formatter , or divided into several different modules.","Although not shown, in some implementations the formatter  (or portions thereof), the source device  (or portions thereof), and\/or the endpoints  (or portions thereof) can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server\/host devices, and\/or so forth. In some implementations, the formatter  (or portions thereof), the source device  (or portions thereof), and\/or the endpoints  (or portions thereof) can be configured to operate within a network. Thus, the formatter , the source device , and\/or the endpoints  (or portions thereof) can be configured to function within various types of network environments that can include one or more client devices and\/or one or more server devices. For example, the network can be, or can include, a local area network (LAN), a wide area network (WAN), and\/or so forth. The network can be, or can include, a wireless network and\/or wireless network implemented using, for example, gateway devices, bridges, switches, and\/or so forth. The network can include one or more segments and\/or can have portions based on various protocols such as Internet Protocol (IP) and\/or a proprietary protocol. The network can include at least a portion of the Internet.","In some implementations, the formatter  can be included in, or can be associated with, a social media application (not shown). In such instances, one or more messages defined within the social media application for a user (e.g., defined by an individual within a social network for the user), can be distributed to one or more endpoints of the user via the formatter . The social media application can be any type of application that can be used by a user to share content and\/or other information with a network of users (e.g., friends, relatives, colleagues, business associates) associated with the user. In some implementations, the social media application can be a web-based application that can be accessed by users. In some implementations, the social media application can be referred to as a social media system and can be part of a social media platform. In some implementations, the social media application can be associated with a social network service. In some implementations, the social media application can be a collaborative environment through which one or more users (such as a sharer and\/or a consumer of content) can engage in collaborative work. In some implementations, the social media application can include one or more search engines, social network services, forums, instant messaging\/chat applications, virtual environments, peer-to-peer communications applications, and\/or so forth. In some implementations, the social media application can include, or can be based on, one or more open application programming interfaces (APIs).","The formatter  can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and\/or so forth. In some implementations, the formatter  can represent a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the formatter  can be distributed to several devices of the cluster of devices.","Although not shown, in some implementations, the memory  can be implemented as more than one memory component (e.g., more than one random-access memory (RAM) component or disk drive memory) associated with the formatter . In some implementations, the memory  can be a database memory. In some implementations, the memory  can be, or can include, a non-local memory. For example, the memory  can be, or can include, a memory shared by multiple devices (not shown). In some implementations, the memory  can be associated with a server device (not shown) within a network and configured to serve the formatter .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 4","FIG. 4","FIG. 1"],"b":"130"},"As shown in , an indicator that at least a portion of a source message has been produced using a source module is received (block ). In some implementations, the source message can be defined at a source module of a source device such as source module  shown in . The source module can be an application configured to define one or more messages, and the source message can be, for example, an e-mail message, a text message, and\/or so forth.","In response to the indicator, an extraction module configured to assign an attribute to content of the source message is sent to the source module (block ). In some implementations, the extraction module (e.g., extraction module  shown in ) can be served to the source module from a formatter (e.g., formatter  shown in ). In some implementations, the extraction module can be served to the source module, and can be configured to parse the content of the source message so that an attribute can be assigned to the content of the source message. In some implementations, the attribute value represents a contextual function of the content of the source message as, for example, a subject of the source message, a body of the source message, a salutation of the source message, and\/or so forth.","A content package including the content and the attribute assigned to the content is received (block ). In some implementations, the content package (e.g., content package  shown in ) can be configured so that the content of the source message can be communicated in a standardized configuration (e.g., format) that can be processed by a formatter and used to define endpoint-specific messages.","A plurality of endpoint-specific messages associated with a plurality of endpoints are produced based on a plurality of message templates and the attribute assigned to the content package (block ). In some implementations, the endpoints can include, for example, devices configured to process one or more endpoint-specific messages such as a cell phone, personal computer, the tablet computing device, and\/or so forth. In some implementations, one or more of the message templates can be associated with an endpoint and can include data that can be used to define a message specific for the endpoint.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 5","FIG. 5"],"b":["530","58","530","50","510","512","58","1","530","550","510","54","540","54","550","530","58","54","58"]},"In this implementation, a message template associated with endpoint G (which can be a specific endpoint type different from the endpoint types associated with endpoints P through PN) is sent to the formatter  and stored in the memory  with the message templates . In other words, the message template associated with endpoint G is added to the message templates . Accordingly, an endpoint-specific message, which could not previously be sent to endpoint G, can be defined for and sent to endpoint G based on the message template associated with endpoint G. Thus, the formatter  can be used to distribute endpoint-specific messages (based on the source message ) to additional endpoints with different messaging compatibilities based on message templates being added to the message templates  stored in the memory .","The addition of the message template associated with endpoint G is communicated to the source module  via the extraction module . Specifically, when the extraction module  is received (e.g., in response to being requested) at the source module  the option of sending an endpoint-specific message to endpoint G is presented (e.g., presented in a menu). In some implementations, the extraction module  can be served to the source module  in response to the source message  being drafted (e.g., drafting being initiated, drafting being completed) and\/or triggered (e.g., prepared) for sending (e.g., in response to a send button being actuated).",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 6","FIG. 6","FIG. 1","FIG. 5"],"b":["130","530"]},"As shown in , a message template defining a format based on a first plurality of attribute values is received (block ). In some implementations, the message template can be received at a message generator (e.g., message generator  shown in ). In some implementations, the message template can include an instruction related to handling of content related to one or more of the plurality of attribute values. In some implementations, message template can be received in response to request, and\/or can be stored at (or accessed from) a formatter.","A content package including content associated with a second plurality of attribute values is received where the content is from a source message produced at a source module (block ). In some implementations, the content package can be defined using an extraction module (e.g., extraction module  shown in ). In some implementations, content can be parsed from the source message and associated with one or more of the attribute values from the second plurality of attribute values.","An endpoint-specific message is defined for an endpoint based on an intersection between the first plurality of attribute values associated with the message template and the second plurality of attribute values associated with the content (block ). In some implementations, the endpoint-specific message can be defined by a message generator (e.g., message generator  shown in ). In some implementations, multiple endpoint specific messages can be defined based on a single content package associated with a single source message.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 7","FIG. 7","FIG. 1","FIG. 5"],"b":["130","530"]},"As shown in , a message template is selected from a plurality of message templates based on an endpoint targeted for receipt of an endpoint-specific message (block ). In some implementations, the plurality of message templates can be stored at a formatter. In some implementations, the endpoint can be targeted for receipt of the endpoint-specific message in a message preference associated with a user account.","A content package including a plurality of content portions parsed from a source message produced at a source module is received (block ). In some implementations, each content portion from the plurality of content portions is associated with at least one attribute value from a plurality of attribute values.","The endpoint-specific message is defined based on at least a portion of the plurality of attribute values being included in the message template (block ). In some implementations, only the content portions that are associated with attribute values included in the message template are included in the endpoint-specific message. In such implementations, content portions that are associated with attribute values that are excluded from the message template may not be included in the endpoint-specific message.","Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device (e.g., a computer-readable medium, a tangible computer-readable medium) or in a propagated signal, for processing by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. In some implementations, a tangible computer-readable storage medium can be configured to store instructions that when executed cause a processor to perform a process. A computer program, such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be processed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the processing of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.","To provide for interaction with a user, implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT), light emitting diode (LED) display, or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components. Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.","While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the implementations. It should be understood that they have been presented by way of example only, not limitation, and various changes in form and details may be made. Any portion of the apparatus and\/or methods described herein may be combined in any combination, except mutually exclusive combinations. The implementations described herein can include various combinations and\/or sub-combinations of the functions, components and\/or features of the different implementations described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
