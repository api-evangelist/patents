---
title: System and method for cooperative application quiescence in a computing environment
abstract: A system and method for cooperative application quiescence in a computing environment. In one embodiment, a system may include a storage device configured to store data, a plurality of applications each of which is configured to issue input/output (I/O) requests to the storage device, and a quiescence manager configured to coordinate quiescence of at least a portion of the plurality of applications in response to receiving a quiescence request, where quiescence of a given application may include completing outstanding I/O requests issued by the given application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421714&OS=07421714&RS=07421714
owner: Symantec Operating Corporation
number: 07421714
owner_city: Mountain View
owner_country: US
publication_date: 20031219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to management of applications operable on computer systems.","2. Description of the Related Art","Computer systems are often configured to process large quantities of information in increasingly complex application environments. For example, innovations in information technology have led to numerous applications for collecting, managing, and processing data corresponding to a wide range of business activities, often in near-real time. Advances in multimedia and telecommunications have led to increasing management of audio, video, textual, and other types of information in the digital domain.","As more sophisticated solutions to information management problems evolve, computer systems typically become more complex, as do the applications running on them. An enterprise may find itself with thousands of computer systems under management, many with varying capabilities and different installed applications. Further, some complex applications may be distributed across numerous geographically dispersed computer systems. For example, a retail business may network thousands of point-of-sale terminals to a central server configured to operate an inventory management system. The inventory management system may be tightly linked to procurement and accounting systems in order to improve supply chain and financial management.","Reliability of system operation is often a critical factor for system performance, and consequently organizational performance. Loss of data or unavailability of various critical applications may cause substantial disruption. Referring to the previous example, loss of sale information, for example, may lead to significant problems in inventory management or even an inability to transact business.","To address reliability concerns, system management policies may be instituted to ensure that critical data is recoverable and critical applications available in the event of a system failure. However, as applications proliferate and become increasingly complex, ensuring that the proper applications are identified as critical and subsequently ensuring that all necessary components of such applications are properly protected against system failure becomes increasingly difficult. Further, as applications become more sophisticated, often numerous different applications may be configured to access and modify an underlying set of critical data. In such cases, obtaining a consistent state of such data for system management purposes, such as creating backups, may be complicated by the activity of the various applications accessing the data.","Various embodiments of a system and method for cooperative application quiescence in a computing environment are disclosed. In one embodiment, a system may include a storage device configured to store data, a plurality of applications each of which is configured to issue input\/output (I\/O) requests to the storage device, and a quiescence manager configured to coordinate quiescence of at least a portion of the plurality of applications in response to receiving a quiescence request, where quiescence of a given application may include completing outstanding I\/O requests issued by the given application. In some embodiments, a given application may include an operating system.","In one specific implementation of the system, a given application may be configured to internally buffer data, and quiescence of the given application may further include flushing the internally buffered data. In another specific implementation of the system, a quiescence request may specify a given resource set, which in some embodiments may include a set of files, volumes, or other resource specifiers. In such an implementation, the quiescence manager may be further configured to coordinate quiescence of at least a portion of the plurality of applications with respect to the given resource set in response to receiving the quiescence request, where quiescence of a given application with respect to a given resource set may include completing outstanding I\/O requests issued by the given application that correspond to the resource set. In some embodiments, a given application may also be configured to internally buffer data, and quiescence of such a given application may include flushing internally buffered data.","A method is further contemplated that in one embodiment may include each of a plurality of applications issuing input\/output (I\/O) requests to a storage device, receiving a quiescence request, and coordinating quiescence of at least a portion of the plurality of applications in response to receiving the quiescence request, where quiescence of a given application may include completing outstanding I\/O requests issued by the given application.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Storage System Overview","Turning now to , a block diagram of one embodiment of a storage system is shown. In the illustrated embodiment, storage system  includes a plurality of computer systems -each coupled to a storage area network (SAN) interconnect  and a local area network (LAN) interconnect . System  also includes a server  coupled to SAN interconnect  and LAN interconnect  as well as a plurality of storage devices -. Storage devices -are coupled to SAN interconnect , while storage devices -are coupled to server .","Generally speaking, computer systems -may be any type of computer system configurable to perform operations on data, such as in response to executing program instructions. In various embodiments, computer systems -may be personal computers or workstations including microprocessors such as x86-compatible processors, PowerPC processors, or any other type of microprocessor, and may be configured to run various types of applications and operating systems. For example, a given computer system  may be configured to operate one or more of various versions of Microsoft Windows, Unix, Linux, MacOS, or any other operating system. In some embodiments, computer systems -may be standalone devices coupled to peripherals such as input devices and display devices, while in other embodiments computer systems -may be configured for mounting in equipment racks and accessed via a network. In still other embodiments, computer systems -may be hand-held devices such as personal digital assistants (PDAs), or other types of computing devices. In the illustrated embodiment, computer systems -are adapted for coupling to SAN interconnect and LAN interconnect , for example through network interface adapters (not shown). Although only two instances of computer systems -are shown, in some embodiments system  may include an arbitrary number of computer systems .","Like computer systems -, in general terms server  may be any type of computer system configurable to perform operations on data, such as in response to executing program instructions. In the illustrated embodiment, server  interfaces to storage devices -and provides access to these storage devices to other computer systems within system . In some embodiments, server  may interface to storage devices -using a peripheral bus such as the Small Computer System Interface (SCSI), AT Attachment Packet Interface (ATAPI), Universal Serial Bus (USB), IEEE 1394 (\u201cFirewire\u201d), or any suitable peripheral bus standard.","In a typical client\/server or heterogeneous system, a given server  may include greater compute resources than a given computer system , such as a faster processor, more memory, and\/or a faster network interface, for example. Also, in some heterogeneous system embodiments, server  may run a different operating system than computer systems . For example, if computer systems  run a client version of Windows, server  may run a server version of Windows or a completely different operating system such as a variant of Unix or Linux. However, in some relatively homogeneous system embodiments, computer systems -and server  may share similar hardware configurations, operating systems, and\/or applications. It is also contemplated that in some embodiments, an arbitrary number of servers  may be employed.","In one embodiment, SAN interconnect  may be a high-speed data interface adapted for coupling to storage devices, such as a Fibre Channel interface, for example. In the illustrated embodiment, computer systems -as well as server  may be configured to access storage devices -directly through their interfaces to SAN interconnect . In some embodiments, SAN interconnect  may include components such as routers, hubs or switches or combinations of these. SAN interconnect  may be configured as a ring, a mesh, or another suitable topology.","LAN interconnect  may be a network configured for exchanging data among computer systems. For example, in some embodiments LAN interconnect  may be a wired network such as Ethernet or Token-Ring, or a wireless interface such as defined in the IEEE 802.11 family of protocols, or some combination of wired and wireless networking technologies. In some embodiments, LAN interconnect  may include components such as routers, firewalls, switches or access points or combinations of these. It is also contemplated that in some embodiments, LAN interconnect  may include functionality for connecting computer systems over longer distances, such as wide-area network (WAN) functionality. For example, LAN interconnect  may include WAN support for exchanging data among geographically remote computer systems, such as via a T1 or T3 telecommunications interface.","Generally speaking, storage devices -may be configured to store data for use by computer systems -and server . For example, storage devices -may be configured to provide storage for application data as well as for program instructions comprising executable code. Storage devices -may in various embodiments be any suitable type of device configured for data storage. For example, storage devices -may include magnetic disk- or tape-based storage devices such as hard disk drives, floppy drives or tape drives. Additionally, storage devices -may include optical storage devices such as read-only or writeable\/rewritable CD or DVD drives. Storage devices -may also include various types of solid-state memory-based storage, such as virtual disks comprised of dynamic random access memory (DRAM), nonvolatile RAM (NVRAM or \u201cFlash memory\u201d), or erasable programmable read-only memory (EPROM), for example. It is contemplated that in some embodiments, system  may include an arbitrary number of storage devices . It is also contemplated that in some embodiments, one or more computer systems  may include one or more storage devices  connected locally via a suitable peripheral bus, in a manner similar to that described above for server . It is also contemplated that in some embodiments, a given storage device  may be a logical storage resource including one or more physical storage devices, such as a disk volume, for example. In some embodiments, physical details of logical storage resources (such as physical data organization, for example) may be processed internally to the logical storage resource and not presented to other devices interfacing with the logical storage resource. Finally, storage devices -may be exemplary of means for storing data, and each of the exemplary types of devices just described that storage devices  may include may be considered equivalent means for storing data.","Application Discovery","Numerous types of programs may execute on system  via computer systems -and server . As described above, computer systems -and server  may be configured to execute various types of operating systems. Additionally, numerous types of applications may be supported on system . For example, in one embodiment, system  may implement an email system for a workgroup, where server  provides centralized services for receiving, storing, and directing the exchange of email, and the various computer systems  provide email client applications whereby users may receive and compose messages. In another embodiment, system  may implement an enterprise-wide database system incorporating data from multiple departments such as order management, procurement, production, shipping, accounting, and human resources, for example. In such an embodiment, database content may be distributed throughout the system and stored on numerous storage devices , and various departments may enter and view database contents via general or customized interfaces provided by computer systems . Additionally, computer systems  and\/or server  may be configured to perform complex queries of database contents, for example to create periodic reports of financial, production, or inventory status. Numerous other complex operations involving interactions of applications and data, whether distributed within system  or local to a particular computer system, are possible and contemplated. It is further contemplated that in some embodiments, multiple such applications may operate concurrently. For example, system  may be configured to concurrently provide email services, database services, document management services, and other types of data services via various applications.","In some embodiments, system  may perform numerous critical functions, the interruption of which may cause disruptions to users that range from delays and inconvenience to catastrophic data loss and an inability to conduct business. For example, system  may manage databases including customer contact information as well as procurement and order flow management for a just-in-time production operation. Loss of access to contact information due to system failure may result, e.g., in employees relying on memorized information or other sources for customer contacts, but a failure of order flow logistics may result in total production shutdown. Consequently, administrators of system  may draft protection policies for management of the system in order to ensure reliability and availability of critical functions. For example, in some embodiments system  may be configured with redundant resources such that failure of a particular device, such as a given storage device  or server , may not result in significant disruption of system operation. Also, in some embodiments, system administrators may create backup policies in which copies of important data, configuration information, and applications are regularly made, for example to tape or to a backup disk, such that this information may be restored in the event of a system failure.","Success of various reliability and availability policies may depend at least in part on the availability of information regarding how system  is configured, i.e., what applications, data, operating systems, and hardware, for example, are present within the system. Some applications, such as database applications, for example, may be deemed critical and targeted for specific protection policy measures such as daily backups, while other applications may be less significant and may have no specific associated policy.","However, a given application may be highly complex, with numerous components that may be distributed throughout the system. Further, such an application may have dependencies on other applications or operating system features. For example, a critical database application may be comprised of numerous different program files, site-specific configuration files, and data files, each of which may be located within various storage devices  within system . Additionally, such a database application may depend on certain library functions provided by the operating system, such as input\/output-related functions, for example, in order to function. In another scenario, a given database may depend on another database for some of its inputs. For example, a production scheduling database may be linked to an order tracking database such that the data integrity of each database depends on the other. In yet another scenario, a web-based application such as a storefront, for example, may depend on one or more databases (e.g., for customer, order, inventory, or other data) as well as specific file system contents (e.g., HTML files specifying the structure and function of the web site), such that the integrity of each resource is necessary for the integrity of the application as a whole.","Additionally, system configuration may change over time. Applications and hardware may be added, upgraded, or replaced such that previous knowledge regarding system configuration becomes obsolete. Consequently, policies regarding protection of critical system functions may become stale. For example, an existing application may have had all of its relevant components previously identified for regular backups, but an application upgrade may result in components being added, deleted, or moved to different locations such that the backups no longer reflect the application configuration. Also, a new application may be installed, but if a policy for its protection is not identified at the time of installation or is deficient (such as due to oversight on the part of an administrator to institute such a policy, or an error in identifying all the components or dependencies of the application), the integrity of the new application may be at risk.","A software system operating on system  may be configured to provide a facility for the discovery of applications and their associated configuration and dependency information. One such embodiment of a software system is illustrated in . Software system  includes a plurality of applications -as well as an application discovery (AD) manager  and a storage manager . Applications -are configured to communicate with AD manager  via an AD application program interface (API) . Applications -are also configured to communicate with storage manager  via a storage API . Storage manager  is configured to manage access to one or more of the various storage devices  of system  illustrated in . In some embodiments, all of the components of software system  may be configured to operate on a single computer system  or server  of system , while in other embodiments various components of software system  may be distributed throughout system  as described in greater detail below.","Applications -may be any software application in various embodiments. For example, a given application  may be a user interface to a database or a query engine of that database, or any other type of application. In one embodiment, a given application  may comprise all or a portion of an operating system. For example, some portions of an operating system such as networking libraries may function as standalone applications or processes and may interact, for example, with storage manager  via storage API ","In some embodiments, a given application  may be comprised of numerous components such as submodules, data components, and\/or configuration components, as described above. In some such embodiments, a given application  may be distributed across several computer systems for execution, and the various components may be configured to communicate with one another such as via a network. For example, in one embodiment application may denote an entire database system comprised of a central query engine, a data management module, and several user interfaces, each of which may operate on a distinct computer system. Also, in some embodiments two or more applications  may be configured to interact with one another via a commonly defined interface. For example, in one embodiment a database application may be configured to interface with an email application to automatically email database reports to specified recipients.","AD API and storage API may in one embodiment be distinct programming interfaces, while in another embodiment they may be part of a single common API. In some embodiments, each API  may include support, such as function calls and\/or stub files, for a particular programming language such as the C language. For some such embodiments, multiple versions of each API  may be provided corresponding to specific programming languages, thus allowing applications  coded in different languages to gain access to system resources. In other embodiments, a given API  may be provided as an object interface in an object-oriented programming environment, such as the Common Information Model (CIM) interface standard directed by the Distributed Management Task Force (DMTF), for example.","In some embodiments, various applications  may be configured to access data stored on one or more storage devices . Storage manager  may be configured to manage the physical details of organizing, storing, and retrieving data stored on storage devices , while providing a consistent logical data storage interface to applications . In one embodiment, storage manager  may implement a storage stack or hierarchy of functions. For example, storage manager  may implement a file system configured to organize all or a portion of storage devices  as a hierarchy of files. Storage manager  may further be configured to map files to particular storage volumes, which may then be mapped to actual physical locations on particular storage devices . In such an embodiment, storage manager  may manage differences in size, type, and configuration of various storage devices  such that various applications  need not do so. For example, storage devices  may include numerous different types of storage as described above, both remote and local to a particular computer system on which a given application is running. A given application  may request access to a particular file via storage API without any detail as to where such a file physically resides. Storage manager  may then map the requested file to the appropriate storage device or devices  and return the requested data. It is contemplated that in alternative embodiments, storage manager  may provide a non-file based organization for storage devices . For example, in one embodiment storage manager  may manage storage devices  as a relational database.","Application discovery (AD) manager  may be configured to detect the presence of one or more of applications  within software system . In some embodiments, AD manager  may be configured to detect additional detailed information regarding a particular application , such as specific components or files of that application that are present in a particular installation, as well as details about how the application is configured, its dependencies on other applications, etc. For example, AD manager  may be configured to detect that a particular database application  is installed on software system . Upon determining that the database is present, AD manager  may be configured to further determine specific components of the database application are installed, such as a query engine and various user interfaces, for example. AD manager  may further resolve specific components down to the level of files or other storage entities. For example, AD manager  may determine specific files stored on storage devices  corresponding to data, configuration, and executable code of the database application. Additionally, AD manager  may determine that the detected database application is dependent on another application, for example in a complex computing environment in which several discrete databases are configured to track different but related data sets. In some embodiments, the various types of information determined by AD manager  may be used to identify proper protection policies for the components of a system. For example, AD manager  may be used to construct a detailed inventory regarding installed applications and their components and data, which may be used to determine a strategy for backing up critical applications and data. Additionally, AD manager  may be configured to determine the ability of a given application  to participate in various protection tasks (such as whether an application implements a quiescence interface, as described in greater detail below) and may provide an interface whereby applications  may negotiate the level of participation they require in such protection tasks. For example, an application  that implements complex transactions may indicate to AD manager  that it should be notified in case of operations to its data set (e.g., backup operations) so that it may properly synchronize outstanding transactions to its data set.","Broadly speaking, detection of the presence of a given application may be referred to simply as \u201cdetection,\u201d while determination of more detailed information regarding a specific application may be referred to as \u201cinspection.\u201d Both detection and inspection may generically be referred to as application discovery activities. In some embodiments, AD manager  may be configured to perform inspection on every application it detects. In other embodiments, criteria may be used to determine which detected applications will be inspected. For example, in one embodiment AD manager  may include submodules or subroutines, also referred to as \u201cproviders.\u201d In such an embodiment, a given provider may be configured to query the application environment (i.e., software system  operating on storage system ) for information regarding a particular set or class of applications. For example, one given provider may be configured to query the application environment for information regarding database types of applications, while another may be configured to query for office-type applications (e.g., word processors, spreadsheets, presentation tools, etc.). In some such embodiments, a provider for one type of application may be configured only to perform detection of instances of that type of application, while a provider for another type of application may be configured to perform both detection and inspection of instances of that type of application. In another such embodiment, a provider may be configured to select whether to inspect or not based on the specific application instance detected. For example, a provider configured to detect the presence of database applications may be configured to perform inspection only on databases provided by certain vendors.","AD manager  may implement a variety of techniques for application detection and inspection. For example, in one embodiment AD manager  may provide a platform-independent application programming interface (API), for example as part of AD API , whereby a given application  may register itself upon installation or invocation. Such a platform-independent API may be made accessible to the various applications  within a software system irrespective of the particular computing platform (such as operating system and hardware configuration) a given application is configured for. AD manager  may also be configured to probe APIs of specific types of applications for either detection or inspection, for example by issuing function calls to those specific types of applications. It is contemplated that in some embodiments, a given application  may participate in its own detection and inspection, such as by initiating an application discovery operation with respect to itself via an API or other mechanism, actively notifying AD manager  of its presence at installation or initialization, by querying AD manager  for information about its configuration such as described in greater detail below, or any combination of these or other techniques.","In some embodiments, AD manager  may be configured to implement further indirect techniques for application detection and inspection. For example, AD manager  may be configured to scan the processes currently running or scheduled to run on a given computer system, such as by listing currently running processes via an operating system call or scanning well-known locations of a file system to identify files listing processes scheduled to run. AD manager  may further be configured to monitor the activities of processes, for example to detect the interaction a given process has with other applications or a file system, thereby assisting in identifying application dependencies. Additionally, AD manager  may be configured to scan file system contents (e.g., files and directories) to detect the presence of an application as well as to inspect specific file-based components of an application. If a given operating system platform on a particular computer system provides a registry service (e.g., the Windows registry, among many others), AD manager  may be configured to query such a registry to identify installed applications and to inspect details regarding configuration of such applications. AD manager  may also be configured to process user- or vendor-provided lists of installed applications and\/or detailed information regarding application components.","Numerous other techniques for application detection and inspection are possible and contemplated. Additionally, in embodiments of AD manager  that are configured to include different providers for, e.g., different applications types as described above, the various providers may each implement different combinations and configurations of the aforementioned techniques. For example, a vendor-specific provider may be configured to primarily query public APIs or private mechanisms undisclosed by the vendor to detect and inspect instances of a specific vendor's applications, while a generic office application provider may be configured to primarily scan well-known file system locations to detect instances of office applications. Other embodiments of AD manager  that do not use the provider organization are also contemplated; for example, in various embodiments AD manager  may be organized as a database or a single procedural block of code.","Once information regarding the presence of various applications as well as their detail has been determined, other applications may benefit from being able to access such information. In one embodiment, AD manager  may be configured to provide a platform-independent API, for example via AD API , whereby a given application  may query for application details resulting from the previously described detection and inspection activities. Through such an API, AD manager  may be configured to decouple the presentation of information regarding application presence and configuration from the underlying techniques used to determine that information.","In some embodiments, AD manager  may be configured to dynamically perform detection and inspection activities in response to a query from another application , referred to as a requestor. In some such embodiments, a requestor may be configured to make queries of varying scope. For example, a requestor may query AD manager  for all available information regarding all detected applications. Alternatively, a requestor may query AD manager  for information regarding certain types or classes of applications, such as a type represented by a particular provider included in AD manager . In some embodiments, a requestor may specify the degree of detection desired, such as detection but not inspection, for example.","AD manager  may additionally or alternatively be configured to store information about applications resulting from detection and inspection activities, for example in a database or other data structure, and to provide stored information to requestors in response to queries. For example, in some embodiments performing a complete inventory using both detection and inspection techniques may consume considerable time and system resources. Correspondingly, such activities may be scheduled to run at selected intervals, with the results stored for later use. In some such embodiments, requesters may have the option of specifying whether to receive stored data in response to a query, or to cause detection and inspection activity to be performed anew in response to a query (for example, to detect a newly installed application).","While AD manager  may be configured to detect various components and dependencies corresponding to a given application, such as via the detection and inspection processes just described, in some embodiments AD manager  may also be configured to discover one or more applications that correspond to a given resource. For example, in some embodiments the various resources detected by AD manager  during discovery and inspection of given applications  may be stored in a database or other data structure such that mappings may be queried either from a given application to its associated resources, or from a given resource to its associated applications. Resource-based application discovery may be useful in enabling system  to identify specific applications corresponding to particular resources, thereby enabling protection policies associated with resources to be propagated to associated applications, for example. Additionally, such resource-based discovery may be used in conjunction with application quiescence features, as described in greater detail below.","It is noted that in some embodiments, software system  may be implemented in a distributed computing environment, wherein different applications  may be installed and may operate on different computer systems. In some such embodiments, an instance of AD manager  may be configured on each computer system and configured to perform application discovery activities primarily with respect to that particular computer system. In other embodiments, AD manager  itself may be distributed across different computer systems. For example, different components of AD manager  such as providers may be configured on different computer systems, and may interact with modules on other computer systems to perform application discovery activities with respect to the whole storage system .","Further, in some embodiments AD manager  may be configured to provide application-level management perspectives to other applications  within software system . For example, AD manager  may enable a protection policy to be drafted at the level of an entire application, such as a database application. A system administrator may thereby identify specific applications for various actions, such as backup activities, where the various applications  implementing those actions (such as a backup utility, for example) may interact with AD manager  to identify specific application resources (e.g., components, directories, and files) corresponding to the requested actions.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["360","310","330"]},"After application discovery operation is initiated, various applications may be detected (block ). In one embodiment, AD manager  may be configured to detect the presence of applications installed on software system  using any of the techniques described above, as well as other techniques. In some embodiments, AD manager  may be configured to scan for all types of applications, while in other embodiments only particular types or classes of applications may be detected. For example, as described above, AD manager  may include one or more providers configured to detect specific types of applications. In some embodiments, a requestor may indicate that only certain types of applications are to be detected, in which case only certain providers may be activated.","Some or all detected applications may also be inspected in detail, for example to determine details regarding application components or configuration (block ). As described above, in some embodiments some applications may be inspected while others may not, or all applications may be inspected in as much detail as possible. In some embodiments, whether or not a detected application is inspected may be specified by a requesting application initiating application discovery.","Application information gathered during the previous steps of the discovery process may be made available to other applications via a platform-independent API (block ). For example, AD manager  may return detection and inspection information to a requesting application that initiated the application discovery process via AD API . Alternatively or additionally, AD manager  may store application information resulting from application discovery internally, such as in a database or other data structure. AD manager  may then provide such information to requesting applications without necessarily initiating the application discovery process in response to such requests.","Application Quiescence","As described above, in some embodiments, system  of  is configured to run one or more applications, each of which may be configured to access data stored on storage devices , and each of which may be of some considerable degree of complexity. For example, a given application may be comprised of numerous code, data, configuration, and other components and its operation may be distributed for operation among a number of computer systems. Additionally, as previously described, a given application may be subject to a protection policy in order to ensure its integrity in the event of system failure. In one instance, such a protection policy may include regularly creating a backup copy of the given application and\/or selected components. For example, one database protection policy may specify creating backup copies only of the records included in the database, whereas another policy may specify creating backup copies of the entire database application including executable program files, libraries, and other resources.","In one embodiment, backup copies may be created during the course of system operation by creating an exact copy of specified application components from their various locations within storage devices  to an area of storage reserved for such backups. For example, as described above, storage manager  of  may organize storage devices  into a hierarchy of files, and some areas of the hierarchy may be actively used by a given application. In some embodiments, a An otherwise-unused area of the hierarchy may then be used to store a copy of specified application components during creation of a backup copy. Such a backup copy may also be referred to as a \u201csnapshot\u201d or \u201cfrozen image\u201d of the specified components. In some embodiments, a frozen image may be created directly on an archival storage medium such as tape storage, while in other embodiments, a frozen image may be created on faster storage such as hard disk storage, and subsequently archived to another medium if desired.","Creating a frozen image of a given application or selected data subject to modification by an application while the application is operating presents certain synchronization challenges, as the data to be frozen may be in flux at the time the frozen image occurs. Additionally, various types of applications may employ data-handling abstractions that may not be visible at the level of a file system or a particular storage device, such as the transactions described in greater detail below. It may be important for the data integrity of a given application for a data image to be consistent with respect to such abstractions.","In some embodiments, a given application may be configured to buffer or cache data internally. For example, to improve performance a database application may retain modified data in an internal buffer for an arbitrary period of time before the modified data is reflected in a write request to storage devices . Thus, data stored in storage devices  may not be consistent with the most current version of data known to a given application.","Also, a given application may in some embodiments be configured to implement complex transactions, some of which may include multiple input\/output (I\/O) requests to storage devices . Further, atomicity of certain transactions may be necessary for correct application performance. For example, in one embodiment a financial accounting system may be configured to manage transactions among several accounts. In such a system, a single transfer transaction between two accounts may result in multiple I\/O requests to modify data as one account is debited and the other is credited. However, if an image of the data is created after only a portion of the I\/O requests have completed, the image data may be in an inconsistent state with respect to the transaction. Thus, at any given time data stored in storage devices  may not be consistent with respect to a given application's transactions in progress, i.e., a particular transaction associated with such data may not be fully committed to data storage.","In some cases, data inconsistencies such as resulting from the foregoing scenarios may degrade the data integrity of a system. For example, if a frozen image of inconsistent data were created and subsequently used to restore the corresponding application (e.g., after a system failure), data loss or erroneous application behavior may occur. Such data inconsistencies may be avoided in some embodiments by placing the corresponding applications in a quiescent state prior to performing a consistency-sensitive operation on storage devices , such as frozen image creation, for example. In one embodiment, quiescence of a given application may include completing outstanding I\/O requests issued by that application. In embodiments where a given application may buffer data internally, quiescence of that application may include flushing internally buffered data such as by generating write I\/O requests. It is noted that other consistency-sensitive operations beyond frozen image creation are possible and contemplated. For example, system maintenance procedures may occasionally require that a particular physical storage device or logical storage volume be taken offline for a period of time, such as for replacement or repair. These procedures as well as other types of operations may risk data loss or other undesirable behavior if applications accessing the relevant devices or volumes are not quiescent prior to beginning the operation.","A software system operating on system  may be configured to provide a facility for coordinating quiescence of applications. One embodiment of such a software system is illustrated in . Software system  includes a plurality of applications -as well as an application quiescence (AQ) manager  and a storage manager . Applications -are configured to communicate with AQ manager  via an AQ application program interface (API) . Applications -are also configured to communicate with storage manager  via a storage API . Storage manager  is configured to manage access to one or more of the various storage devices  of system  illustrated in . In some embodiments, all of the components of software system  may be configured to operate on a single computer system  or server  of system , while in other embodiments various components of software system  may be distributed throughout system . It is noted that AQ manager  may also be referred to herein as a quiescence manager.","Applications -, storage API , and storage manager  in one embodiment may each be illustrative of the corresponding components illustrated in  and described above. AQ API may in one embodiment be a distinct programming interface from storage API , while in another embodiment the two may be part of a single common API. Like storage API described above, in some embodiments, AQ API may include support, such as function calls and\/or stub files, for a particular programming language such as the C language. For some such embodiments, multiple versions of each API  may be provided corresponding to specific programming languages, thus allowing applications  coded in different languages to gain access to system resources. In other embodiments, a given API  may be provided as an object interface in an object-oriented programming environment, such as the Common Information Model (CIM) interface. In some embodiments, it is contemplated that AQ API may be a platform-independent interface, such that applications  running under different operating systems and on different types of underlying computer system hardware may access the services of AQ manager  in a consistent manner.","In some embodiments, various applications  may be configured to access data stored on one or more storage devices . As described above in conjunction with the description of , in some embodiments storage manager  may be configured to manage the physical details of organizing, storing, and retrieving data stored on storage devices , while providing a consistent logical data storage interface to applications . For example, storage manager  may implement a storage stack that maps logical file names through a file system to volumes and underlying physical locations on storage devices . Also as noted above, it is contemplated that in alternative embodiments, storage manager  may provide a non-file based organization for storage devices . For example, in one embodiment storage manager  may manage storage devices  as a relational database.","During the course of operation of software system , various applications  may be configured to generate quiescence requests. For example, a given application  in one embodiment may be a backup utility configured to generate frozen images of applications, application data, directories, files, or particular storage devices. In another embodiment, a given application  may be a system management utility configured to unmount a logical storage volume in preparation for storage maintenance, such as a restore operation or a storage device addition or replacement. Generally speaking, any type of application that may perform a storage-related operation for which application quiescence is desired may be configured to generate a quiescence request.","In the illustrated embodiment, AQ manager  may be configured to respond to such quiescence requests. AQ manager  may be structured like an application in some embodiments, in that it may be comprised of several software modules that interact to provide quiescence manager services. For example, in some embodiments, a given application  may be configured to operate on several computer systems concurrently in a distributed fashion, as described above. Correspondingly, AQ manager  may in some embodiments be distributed for operation on several computer systems, so that it may coordinate quiescence of each distributed component of the given application . In some embodiments, the function of AQ manager  may be incorporated into other modules of a software system. For example, in embodiments where both AQ and AD services are provided as described in greater detail below, both types of services may be incorporated into a single software module. Alternatively, in some embodiments, the function of AQ manager  may be incorporated into storage manager .","AQ manager  may be configured in one embodiment to respond to different types of quiescence requests. In one instance, a given application  may generate a quiescence request that is specific to a particular set of system resources, such as files, directories, volumes, storage devices, or another type of system resource specification. For example, a backup utility as described above may generate a quiescence request specific to a particular logical volume. In making a resource-based quiescence request, some embodiments of applications  may specify to AQ manager  the resources for which data consistency is desired. AQ manager  may maintain information, such as tables, lists, databases, or other structures, regarding the various applications  that interact with various storage resources. For example, in system embodiments that also support application discovery as described above, AQ manager  may be configured to receive information regarding applications and their associated resources that was generated during application discovery. In response to receiving a particular resource-based quiescence request, such an embodiment of AQ manager  may be configured to consult such information, such as by interacting with AD manager , to determine for which applications  quiescence should be coordinated, if any. In system embodiments that do not support application discovery, AQ manager  may be configured to internally maintain information about the mapping of resources and applications, or may omit support for resource-based quiescence requests.","In another instance, a given application  may generate a quiescence request that is specific to a particular application . For example, a database administrator may wish to perform a maintenance operation on an entire complex database system, and may use a maintenance utility application to request quiescence of the entire database application . In one embodiment, AQ manager  may receive information identifying the particular application for which quiescence is to be coordinated as part of the quiescence request, and may proceed directly with coordinating quiescence of the specified application without undertaking the resource-indexing step described above.","In addition to the direct or resource-based methods of application identification just described, in some embodiments applications may have dependencies on each other, such that quiescence of one application may require quiescence of another application. In such embodiments, AQ manager  may maintain application dependence information, or may obtain such information from another module. AQ manager  may be configured to use such application dependence information to identify additional applications corresponding to a particular quiescence request, as well as a particular order in which quiescence of such applications should be coordinated.","Once one or more applications corresponding to a particular quiescence request have been identified, whether directly, through indexing of resource specifications as described above, or through some other means, AQ manager  may coordinate quiescence of the identified applications. In one embodiment, various applications  may implement standard quiescence mechanisms specified by AQ API . For example, such applications  may expose a quiescence interface to AQ manager . In one such embodiment, AQ manager  may issue quiescence function calls to the applications corresponding to a quiescence request, or may invoke the applications' quiescence interface in another manner. In response to a function call or other invocation of its quiescence interface, a given application  may cease generating new I\/O requests to storage devices , and if it has internally buffered data, may take steps to flush that data such as by issuing write I\/O requests specific to the buffered data. The given application  may additionally wait to receive an indication that outstanding I\/O requests (such as requests in progress when its quiescence interface was invoked, or subsequently issued flush requests) have been completed. For example, given application  may wait for storage manager  to indicate completion of outstanding requests. After outstanding I\/O requests are completed, given application  may indicate to AQ manager  that it is in a quiescent state. Alternatively, AQ manager  may interface directly with storage manager  to determine when outstanding requests of given application  have been completed, or may poll given application  at intervals to determine whether it has entered a quiescent state.","In embodiments where given application  is distributed for operation among multiple computer systems, AQ manager  may be configured to coordinate quiescence of all instances or components of given application  on the various systems by interfacing with each instance or component directly in a manner similar to that just described. Alternatively, in some embodiments, such a distributed application  may be configured to internally distribute a quiescence request received from AQ manager .","Once all applications corresponding to a particular quiescence request have acknowledged their quiescence, AQ manager  may be configured to communicate this fact to the original requestor, which may subsequently continue with the consistency-sensitive operation for which the quiescence request was generated. In some embodiments, quiescent applications may remain in a quiescent state until released. In some such embodiments, the original requesting application  may indicate to AQ manager  when its previous quiescence request is no longer required, and AQ manager  may responsively notify the corresponding applications via their quiescence interface.","In some embodiments, a given application  may respond negatively to an invocation of its quiescence interface by AQ manager , or it may respond with a maximum time interval for which it is prepared to be quiescent. For example, a database application may not be able to enter or remain in a quiescent state for an arbitrary length of time without impacting a quality-of-service policy such as response time. Correspondingly, such a database application may indicate that it cannot comply with the quiescence request, or can remain quiescent for only a certain period of time. If any of the applications corresponding to a particular quiescence request respond negatively, AQ manager  may be configured to inform the original requesting application that quiescence cannot be achieved, such as through an error condition. If one or more applications respond with a maximum time interval of quiescence, AQ manager  may be configured to indicate the minimum of those intervals to the original requesting application, which may then determine whether or not to proceed with its operation.","Additionally, a given application  may not expose a quiescence interface to AQ manager  in some embodiments. If such an application is identified in response to a quiescence request, AQ manager  may signal an error condition to the original requesting application. In some such embodiments, AQ manager  may attempt to place the identified application in a quasi-quiescent state through other means, such as by attempting to suspend the application. If AQ manager  is successful in this attempt, it may respond to the original requesting application with a warning indicating that one or more applications corresponding to the quiescence request is in a quasi-quiescent state. The original requesting application may then determine whether or not to proceed with its operation.","As noted above, quiescence of applications may be requested on the basis of a set of resources in some embodiments, where AQ manager  may be configured to coordinate quiescence of the applications associated with those resources. In some such embodiments, AQ manager  may be further configured to coordinate the quiescence of a given application with respect to a specified set of resources. For example, a quiescence request may be generated with respect to a particular logical volume, directory, or other resource. After identifying the various applications  that may access the specified resource, AQ manager  may interface with the identified applications  to coordinate their quiescence, as described previously. In the course of interfacing with the identified applications , AQ manager  may provide information regarding the resource set specified in the original quiescence request. For example, AQ manager  may provide directory names, file names, or other resource information to one or more of the identified applications . A given application  may be configured to use the supplied resource information to perform quiescence steps with respect to only the specified resource set. For example, a given application  may variously suspend issuing I\/O requests, flush internal data buffers, and wait for completion of I\/O requests with respect to the specified resource set, while allowing other I\/O activity to continue to resources not specified for quiescence. Thus, in some cases, a given application  may continue operating normally following invocation of its quiescence interface, for example if the given application  had no outstanding I\/O requests or dirty buffers corresponding to the specified resource set and generated no new I\/O requests to that resource set before the quiescence request was released.","Additionally, in some embodiments certain resources may be specified as being exempt from quiescence activities. For example, due to the transient nature of their contents, in some embodiments log files may be considered of low importance and accorded minimal protection policies, and the overhead of coordinating quiescence of applications with respect to log files may be undesirable. In some such embodiments, AQ manager  may be configured to provide information identifying exempt resources to one or more applications  identified for quiescence in a manner similar to specifying a resource set as described above. In other embodiments, characteristics of exempt resources (such as file names, directories, file extensions, or other information) may be specified in a file or other storage location accessible by applications . A given application  may be configured to use information about exempt resources to allow I\/O requests or other activity to continue to such exempt resources even after AQ manager  has invoked the quiescence interface of given application .","In a given implementation of software system , multiple quiescence requests from one or more applications  may occur concurrently. In one embodiment, AQ manager  may be configured to process such requests concurrently. In case multiple requests specify the same or overlapping sets of applications or resources, AQ manager  may be configured to employ a prioritization scheme to order the quiescence requests, for example in the order the requests were received.","In some embodiments, storage manager  may maintain internal data buffers that may contain data that is more recent than corresponding data stored on storage devices , or storage manager  may report completion of an I\/O request to an application before the I\/O request has been committed to storage devices . In some such embodiments, AQ manager  may coordinate quiescence of applications  with respect to the logical storage interface provided by storage manager , and it may be possible that a given application is quiescent with respect to the logical storage interface but not storage devices . Where this is the case, in some embodiments storage manager  may provide separate internal quiescence mechanisms to ensure quiescence of the storage stack beneath the logical storage interface with respect to storage devices . In some such embodiments, storage manager  may maintain a separate interface with AQ manager  to indicate when the storage stack is quiescent, and AQ manager  may incorporate such an indication in its indication of application quiescence to a quiescence requestor.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 5","FIG. 1","FIG. 4","FIG. 5"],"b":["500","310"]},"Subsequent to generation of the quiescence request, applications corresponding to the request may be identified (block ). In one embodiment, AQ manager  may be configured to receive the quiescence request, for example via AQ API , and subsequently to identify applications  corresponding to that request. AQ manager  may maintain internal information regarding how applications  map to various storage resources, such as files, directories, or volumes, and may be configured to use such information to identify applications  corresponding to a particular resource-based quiescence request.","Once applications corresponding to a quiescence request have been identified, their quiescence may be coordinated (block ). For example, in one embodiment AQ manager  may signal the identified applications  via their exposed quiescence interfaces. Responsively, the signaled applications  may take steps such as suspending issuing new I\/O operations, flushing internally buffered data if present, and allowing outstanding I\/O operations to complete.","In one embodiment, a given application  may opt out of a quiescence request by responding negatively to AQ manager , or may respond with a maximum time interval for which it can assure quiescence (block ). In this event, AQ manager  may convey an error or advisory condition to the application originally generating the quiescence request (block ). In response, the requesting application may determine whether to abort or continue the request (block ).","If a given application  does not opt out of the quiescence request, in one embodiment it may subsequently signal AQ manager  that it is in a quiescent state, for example in response to storage manager  confirming that outstanding I\/O requests have completed (block ). Alternatively, AQ manager  may interact directly with storage manager  or may poll given application  directly to determine when given application  is in a quiescent state. After such a signal or determination is received for each identified application corresponding to the quiescence request, the application generating the quiescence request may be notified that the relevant applications are quiescent (block ). In some embodiments, an application may be quiescent with respect to a particular set of resources, but may continue allowing I\/O requests to other resources.","Subsequently, in one embodiment the application generating the quiescence request may release the request (block ). In response, AQ manager  may be configured to notify the identified applications of the quiescence release (block ), and the notified applications may responsively resume generating I\/O requests to the previously specified resources (block ).",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 6","FIG. 1"],"b":["600","310","330","340","350","310","330","340","350","320","320","320","350","140","100"],"i":["a","c ","a","c ","a","c","b"]},"Each of the elements of software system  may be illustrative of the corresponding elements illustrated in  and  and described previously. Like those embodiments, all of the components of software system  may be configured to operate on a single computer system  or server  of system  in some embodiments, while in other embodiments various components of software system  may be distributed throughout system . It is also contemplated that in some embodiments, AD manager  and AQ manager  may be implemented as a single module or incorporated into a different module, such as storage manager , for example.","In the illustrated embodiment, AD manager  and AQ manager  may be configured to work cooperatively. For example, AD manager  may be configured to detect the presence of various applications  within software system , as well as to identify various resources associated with such applications, as previously described. Additionally, AD manager  may be configured to specifically identify applications  that expose a quiescence interface that may be used by AQ manager . AD manager  may be configured to convey some or all of this information to AQ manager , which may in turn use the information to identify applications corresponding to resource-based quiescence requests as described above, as well as to determine what applications  are capable of responding to quiescence requests. It is noted that the methods of application discovery and quiescence as illustrated in  and , respectively, may each be operable in their various embodiments in software system . For example, application discovery may be performed at specified intervals and may convey its findings to the application quiescence process, which may be performed in response to quiescence requests.","Exemplary Computer System Embodiment","Referring once again to , as described above, in various embodiments computer systems -and server  may be configured to execute the various software elements comprising any of the previously described software systems. One exemplary embodiment of a computer system is illustrated in . Computer system  may be illustrative of computer systems -and server  of . In the illustrated embodiment, computer system  includes a processor  coupled to a system memory  via interface logic .","Processor  may be any type of processor. In some embodiments, processor  may be a general-purpose microprocessor that implements one or more instruction set architectures such as x86, Power\/PowerPC, SPARC, or any other suitable architecture or variant thereof. In other embodiments, processor  may be an embedded processor, a digital signal processor, or another processor capable of executing instructions. In the illustrated embodiment, processor  may be configured to access system memory  or another device to store and retrieve program instructions and data.","Interface logic  may be configured as bridge logic. In some embodiments, interface logic  may function as a \u201cnorth bridge\u201d coupling processor  and system memory , and may be configured to translate memory access requests originating from processor  to the appropriate format for system memory  and vice versa. In such an embodiment, interface logic  may also be configured for coupling to other peripheral buses to which peripheral devices may be attached, such as graphics adapters, storage devices, network interfaces, and other such devices. In some embodiments, interface logic  may couple to a \u201csouth bridge\u201d interface circuit (not shown), which may be configured for coupling to additional peripheral devices such as pointing devices, keyboards, etc. In other embodiments, interface logic  may incorporate all peripheral interface logic in addition to providing a memory interface. It is contemplated that in some embodiments, all or part of interface logic  may be incorporated into processor .","System memory  may include any of various types of memory technologies, or combinations thereof. In some embodiments, system memory  may be largely comprised of some variant of synchronous dynamic RAM (SDRAM), but in other embodiments static RAM (SRAM) or another RAM technology may be used. In some embodiments, system memory  may include additional resources for error detection and\/or correction, such as parity bits or error correcting code (ECC) bits, which may be separate from resources dedicated to storage of data or instructions.","In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store program instructions executable by processor  as well as data accessible by processor , which program instructions and data may comprise any software program, module or application. Such program instructions and data are illustrated as code  within system memory  in the illustrated embodiment. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, such as may be coupled to computer system  through interface logic , for example. A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, such as may be included within system memory . Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","In some embodiments where processor  is configured to execute code corresponding to a quiescence manager such as AQ manager  of , processor  may be a means for coordinating quiescence of applications in response to receiving a quiescence request. Equivalent such means may include each of the various exemplary embodiments of processor  described above. Equivalent such means may also include computer system , computer systems -and server  illustrated in , and each of the various exemplary embodiments of these systems described above.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
