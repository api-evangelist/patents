---
title: System and method for the derivation and application of sub-iteration contexts in a transformation operation in a data integration system
abstract: Methods and systems for improving a data transformation operation that converts a source data instance containing repeating elements into a target data instance having a user-specified structure, based solely on a user's specification of a target template. The methods and systems derive and calculate sub-iteration contexts by applying a selected heuristic to the source data instance and the target template, and use these sub-iteration contexts to create a target data instance having a repeating structure that agrees with the user-specified target template. The methods and systems can be customized by the selection of heuristic, and by the specification of explicit sub-iteration contexts that may override the derived contexts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08140596&OS=08140596&RS=08140596
owner: International Business Machines Corporation
number: 08140596
owner_city: Armonk
owner_country: US
publication_date: 20091015
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","The present invention relates generally to sub-iteration contexts in a transformation operation in a data integration system, and more particularly to systems and methods for the derivation and application of sub-iteration contexts to provide meaningful target data in a transformation operation in a data integration system.","2. Discussion of Related Art","Data integration systems such as ETL systems (e.g. IBM InfoSphere DataStage) and data mashup systems (e.g. IBM InfoSphere MashupHub) commonly provide transformation operators (e.g. the Transform or Extract operators of InfoSphere MashupHub Version 2.0) that perform a transformation operation wherein source data is transformed from one format and structure to another. Such transformation operations often involve the creation of elements and attributes whose structure and content are derived from expressions involving repeating elements of the source data. In order to create the necessary elements and attributes, the user must be both technically knowledgeable and have detailed knowledge about the incoming data, which is very difficult in the context of a data mashup system because the data is coming from a variety of dynamic, external sources pulled from around the Web.","As an example, a user of a data mashup system might wish to perform a \u201ctransformation operation\u201d that converts a source feed containing repeating elements into a target feed. In order to handle the transformation of the repeating elements, current data integration systems and tools require explicit specification of sub-iteration points in the definition of a transformation operation. For example, a transformation operation might be specified in full programmatic detail using languages such as XQuery or XSLT.","Data integration tools such as Clio improve upon this approach by allowing a transformation operation to be programmed graphically through specification of associations between a source schema and target schema. These schemas represent, respectively, the format and structure of all possible source and target instance data; consequently, the user must understand the structure of all possible source and target data instances in order to design correct source and target schemas. In particular, the user must understand the repeating properties of the data in order to correctly specify the repeating attributes of schema elements (e.g. the \u201cminoccurs\u201d and \u201cmaxoccurs\u201d attributes in Xschema).","Accordingly, embodiments of the present invention include a method for deriving and applying sub-iteration contexts in a transformation operation in a data integration system, comprising receiving a source data instance comprising a plurality of source nodes with associated source node values, and a plurality of source data paths connecting the source nodes, detecting one or more repeating path expressions in the source data instance, wherein a repeating path expression is a source data path that connects two or more source nodes that are siblings to each other, receiving a target template comprising a plurality of explicitly created output nodes (ECONs), wherein the target template specifies a structure of a target data instance, deriving one or more sub-iteration contexts for each ECON in the received target template, wherein each sub-iteration context comprises an association between the ECON and one of the detected repeating path expressions, and wherein each sub-iteration context directs how the ECON will repeat in the target data instance, calculating a set of one or more sub-iteration points and a set of exact bindings from the derived sub-iteration contexts, generating a transformation specification from the set of sub-iteration points and exact bindings, and applying said transformation specification to the source instance data to generate the target data instance. The embodiments further include a program product apparatus and a system for deriving and applying sub-iteration contexts in a transformation operation in a data integration system as described above.","The above and still further features and advantages of embodiments of the present invention will become apparent upon consideration of the following detailed description thereof, particularly when taken in conjunction with the accompanying drawings wherein like reference numerals in the various figures are utilized to designate like components.","The present embodiments greatly simplify transformation operations involving repeating data in data integration systems, by allowing a data transformation operation to be defined via specification of only the target template and a set of generic bindings. The target template defines only the basic structure of the desired target data; it does not define the repeating structure of the target data. The repeating structure is instead inferred by the disclosed systems and methods from sub-iteration points and exact bindings that are automatically calculated through analysis of the repeating structure of the exemplary source data, of the target template, and of the specified generic bindings. In particular, various embodiments of the present invention relate to data mashup data integration systems, such as IBM InfoSphere MashupHub, which allow the movement of data from one or more input sources through filter, aggregation, transformation, and other operators as defined by a data mashup specification and evaluated by an integration engine, ultimately producing a target data instance having a user-specified structure.","Referring now to the Figures, exemplary systems according to embodiments of the present invention are illustrated in . The system shown in  is particularly suited to the derivation and application of transformation specifications using sub-iteration contexts to provide meaningful target data for a transformation operator in a data mashup data integration system. The system  includes a data integration system  comprising sub-iteration module , memory , and integration engine . The system  also includes data sources  such as a web service, database management system (DBMS), or desktop file system  containing data, all of which are connected over networks ,  to each other and to clients . The system  may include additional servers, clients, and other devices not shown, and individual components of the system may occur either singly or in multiples, for example, there may be more than one data source area in the system. The data sources  may be local to the sub-iteration module  and integration engine , or remote from and in communication with the integration engine  and sub-iteration module  via a network .","The system shown in  illustrates the inputs and outputs of a data mashup data integration system having a sub-iteration module according to an embodiment of the present invention. The system  includes a data integration system , for example the system depicted in , comprising a sub-iteration module  and an integration engine . The system  may include additional servers, clients, inputs, outputs, data sources and other devices not shown, and individual components of the system may occur either singly or in multiples. The components, inputs and outputs may be local to, or remote from and in communication with, the sub-iteration module  and integration engine  via one or more networks , .","System  has two inputs: one or more instances of source data , and a data mashup specification , which are received by the system over network . The data mashup specification  describes how transformation operators and other data mashup operators are composed into a program that can be executed by the integration engine . There is one output to the system: a single instance of target data  derived from the one or more instances of source data according to the data mashup specification, which is output by the system over network . The sub-iteration module  augments the workings of the integration engine  by determining a transformation specification for each transformation operator in the data mashup specification. There are four inputs provided to the sub-iteration module for each transformation operator: one or more instances of exemplary source data , which might come either directly from a data source or from the output of another data mashup operator, a user-specified target template , a set of generic user-specified bindings , and an optional set of explicit sub-iteration contexts . The sub-iteration module  provides one output to the integration engine : a transformation specification .","Generally, clients  provide an interface to the functions provided by the integration engine  and sub-iteration module , for example, mechanisms for specifying a target template, etc. The clients  may be local to the integration engine  and sub-iteration module  and data sources , or remote from and in communication with the integration engine and sub-iteration module  and data sources  via networks , . The end-user clients  may be implemented by any quantity of conventional or other computer systems or devices (e.g., computer terminals, personal computers (e.g., IBM-compatible, Apple MacIntosh, tablet, laptop, etc.), cellular telephone, personal data assistant (e.g., Palm Pre, Treo, iPhone, etc.), and may include any commercially available operating system (e.g., AIX, Linux, OSX, Sun Solaris, Unix, Windows, etc.) and any commercially available or custom software (e.g., browser software, communications software, word processing software, etc.). These systems may include types of displays and input devices (e.g., keyboard, mouse, voice recognition, etc.) to enter and\/or view information.","The sub-iteration module  may be implemented in the form of a processing system, or may be in the form of software. A processing system may be implemented by any conventional or other computer or processing systems preferably equipped with a display or monitor, a base (e.g., including the processor, memories and\/or internal or external communications devices (e.g., modem, network cards, etc.) and optional input devices (e.g., a keyboard, mouse or other input device)). If embodied in software, the sub-iteration module  may be available on a recordable medium (e.g., magnetic, optical, floppy, DVD, CD, etc.) or in the form of a carrier wave or signal for downloading from a source via a communication medium (e.g., bulletin board, network, LAN, WAN, Intranet, Internet, etc.).","For example, the sub-iteration module  can be implemented as software, for example one or more software modules that work together with the integration engine  to perform the disclosed methods. The integration engine  can be any type of server or system in which data is integrated and transformed and the disclosed system and method are desirable, for example an Extract, Transform and Load (ETL) system or data mashup data integration system, or any combination of these, such as Apatar, IBM Mashup Center, JackBe Presto, Microsoft Popfly, Mozilla Ubiquity, or Yahoo Pipes. Although depicted in  as a server-based system, the system may also be Web-based or structured in any suitable fashion as is desired for a particular application.","Memory  may be implemented by any conventional or other memory or storage device (e.g., RAM, cache, flash, etc.), and may include any suitable storage capacity. The data sources  may be local to the sub-iteration module , or remote from and in communication with the sub-iteration module  via a network . The data sources  may be implemented by any quantity of any type of conventional or other web services, file systems, databases, or storage structures (e.g., files, data structures, web-based storage, disk or other storage, etc.). The data sources  may store any desired information arranged in any fashion (e.g., web feeds, spreadsheets, tables, relations, objects, etc.).","The networks , , ,  may be implemented by any quantity of any suitable communications media (e.g., WAN, LAN, Internet, Intranet, wired, wireless, etc.). The computer systems of the present invention embodiments may include any conventional or other communications devices to communicate over the networks via any conventional or other protocols, and may utilize any type of connection (e.g., wired, wireless, etc.) for access to the network.","The source instance data  can be available from one or more data sources, which may be the same or varied, and can be available as, e.g., a separate file, database, or other data store, etc. The data source can be any suitable data source, such as an enterprise data source, personal and intra-organization data sources, or web-based data sources. Enterprise data sources can include databases such as DB2, Oracle, PeopleSoft, and MSSQL, IBM Enterprise Content Management (ECM) systems, ERP systems, data warehouses, and the like. Personal and intra-organization data sources can include information stores and tools such as spreadsheets (e.g., Microsoft Excel), databases (e.g., Microsoft Access, MySQL), Sharepoint, Quickr, XML, etc. Web-based data sources can include any data sources on the external web, for example news sources (e.g., Google News, Yahoo News, company news feeds, etc.), public databases (e.g., tax records, real estate records, court documents, etc.), web sites (e.g., via Dapper web site extraction), web services, REST XML feeds, SOAP, StrikeIron, etc. As is evident from the foregoing description, the source instance data can take one or more formats, can originate from one or more information sources, and can be dynamic, e.g., subject to change on a frequent basis.","The target instance data  can be in any suitable and desired form, and may be a feed such as an RSS, ATOM, XML, or JSON that is accessible via an Internet or Intranet using an HTTP URL, published in a browser-based application, or stored in a database or other data storage area, e.g., in data storage system .","As shown in , the source instance data  and the target instance data  can be displayed as a data tree comprising nodes and values for the nodes.  shows an exemplary data tree for illustrative source instance data  that includes a node defining a department, and the department node in turn has a child node defining an employee. The employee node has several child nodes, including an employee name node, an employee work location node, and an employee bonus node, and all of these child nodes are considered to be siblings to each other. Each node has an associated value, for example the employee name node can have a value of \u201cInigo Montoya\u201d and the employee work location node has a value of \u201cChicago.\u201d The depicted source instance data feed contains repeating elements about departments (the \/emps_by_dept\/dept nodes) and each of these in turn includes repeating elements that contain data about the employees in that department (the \/emps_by_dept\/dept\/emp nodes).  shows an exemplary data tree for illustrative target instance data  that contains repeating elements corresponding to employees (the \/output\/employee nodes) and each of these in turn includes elements with information about the employee's department (the \/output\/employee\/dept_total_bonus nodes).","Each node in a data tree is connected to at least one other node by a data path. For example, in the exemplary data tree of  the data paths would include the following, among others:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/emps_by_dept\/dept"]},{"entry":[{},"\/emps_by_dept\/dept\/emp"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/last"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/first"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/workloc"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/bonus"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment of the invention, the source instance data  comprises a plurality of input nodes and a plurality of input data paths connecting the input nodes. For example, in a data mashup environment, the source instance data can include multiple sources, e.g., the described data tree of information about the department and employees, and another source such as a query result from a public database of scientific publications. The scientific publication query result has various nodes, for example an article node having various child nodes such as author name, author address, article title, journal title, publisher name, publication year, etc.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5","FIGS. 3 and 4"],"b":["112","114","112","112","112","114"]},"The user can specify the target template  and generic bindings  in any suitable fashion, for example by using a graphical user interface (GUI) to develop the template by, e.g., a drag and drop or clickable interface. In another embodiment of the invention, the user-specified target template  is represented as an XML data tree comprising one or more explicitly created output nodes (ECONs). An ECON is a node that is created by the user during the process of specifying the target template. The exemplary target template of  contains four ECONs: \u201coutput\u201d, \u201cemployee\u201d, \u201cbonus_amount\u201d, and \u201cemp_total_bonus\u201d.","In general, each transformation specification  is defined by the collection of a user-specified target template , a set of sub-iteration points, and a set of exact bindings. The sub-iteration points and exact bindings are calculated based on sub-iteration contexts, of which there are two kinds: 1) derived sub-iteration contexts, which are created by the sub-iteration module itself, as described further below, and 2) explicit sub-iteration contexts , which are created by the integration engine. An explicit sub-iteration context  is received from the integration engine, and is in a sense a \u201cforced\u201d point of iteration that has been defined in order to produce a particular iteration result. The explicit sub-iteration contexts  can be created, for example, automatically for certain operations such as the Extract (UnNest) operator, or in response to the user specifying that a certain type of iteration should occur. These explicit sub-iteration contexts  co-exist with, and can potentially override, the sub-iteration contexts that are derived by the disclosed processes. Thus the explicit sub-iteration contexts  allow the integration engine to directly influence the repeating behavior of template nodes within the final transformation specification, when and if such influence is required to achieve a particular target instance structure.","The transformation specification  can take any suitable form, and generally represents the logic of a transformation operation that converts source instance data  (e.g., the XML feed of ) into target instance data  (e.g., the XML feed of ).  depicts an illustrative transformation specification , written as an XQuery expression, for the exemplary data of . When applied to the source instance data  of , the transformation specification  of  will return the target instance data  of . The transformation specification is created by the sub-iteration module , e.g., after the receipt of the source data instance , the target template , the set of generic bindings , and optionally a set of explicit sub-iteration contexts , the sub-iteration module  generates the necessary sub-iteration points and exact bindings for the transformation operation, and returns a complete transformation specification  to the integration engine  for execution, without requiring any further information from the end user. The integration engine uses the transformation specification to implement sub-iteration processing within the transformation operator, which in turn allows for the creation of a target data instance  whose structure agrees with the user-specified target template  and bindings , and at the same time repeats, where appropriate, according to any one of numerous possible heuristics.","Referring now to , the FOR loops in the depicted XQuery expression define \u201csub-iteration points\u201d of the transformation operation. Each sub-iteration point loops over \u201crepeating elements\u201d of the source instance data. The order in which the sub-iteration points are nested in the transformation specification  essentially determines the repeating structure of the target instance data. The LET expressions define \u201cbindings\u201d of the transformation operation. Bindings assign the results of \u201cbinding expressions\u201d to \u201cbinding variables.\u201d The binding expressions compute new elements, attributes and content from data in the source feed. An \u201cexact\u201d binding is one in which the binding expression is defined with respect to a sub-iteration point; a binding which is not an exact binding is a \u201cgeneric\u201d binding. Finally, the RETURN clause of the XQuery, along with the XML elements encapsulating the FOR, LET, and RETURN clauses, defines the \u201ctarget template\u201d of the transformation operation.","In a preferred embodiment, the integration engine  parses a data mashup specification potentially containing transformation operations, and for each such operation, provides exemplary source data instances , a target template  specified by the user, a set of generic bindings , and optionally a set of explicit sub-iteration contexts  to the sub-iteration module . The sub-iteration module  subsequently returns the full transformation specification  of the transformation operation to the data integration engine, which in turn compiles the transformation specification into a program of low-level operators that can transform any source data instance  into a target data instance  according to the returned transformation specification. Because the target template  lacks information about if and how the various pieces of the target template should repeat, especially in the face of source data which may contain repeating structures, there are many different ways to interpret the user-specified target template when repeating source structures are present. To provide flexibility in the face of varying data, the system selects and applies a heuristic to determine which of the possible interpretations is to be applied for a given transformation operation. The heuristic can be selected in any suitable way, e.g., specified by the user, chosen automatically depending on the structure of the source data instance, etc.","In another embodiment, methods are provided by which the sub-iteration module derives a \u201csub-iteration context\u201d for each constructed element in the user-specified target template. Derivation of a sub-iteration context for a constructed output element occurs via a) recognition of repeating source structures through analysis of the available source data instances, and b) analysis of generic bindings that are associated with the selected constructed element. Such generic bindings refer to nodes or values from the source instance data. The explicit sub-iteration contexts, if present, are specified either directly by the user, or by the data mashup data integration system with which the sub-iteration module is communicating.","Another embodiment of the invention discloses a method by which the sub-iteration module analyzes a combined set of derived and explicit sub-iteration contexts in such a way as to allow for the calculation of sub-iteration points and exact bindings. If explicit sub-iteration contexts exist, they will coexist with, and potentially override, other derived sub-iteration contexts. The final set of sub-iteration points and exact bindings can then be used to generate a transformation specification which, when executed, transforms the source instance data into a target data instance that agrees with the user-specified template and generic bindings.","The benefits of the sub-iteration module and the processes it performs of deriving a transformation specification using sub-iteration contexts can be seen from the following description of . The processes performed by the module are described in the context of exemplary source data that illustrates the features, details and advantages of the processes. For example, the sub-iteration processes described herein are deterministic and predictable, in the sense that when applied, they always return exactly one of the various possible target formats for a given user-specified target template.","In the context of a data mashup data integration system, the disclosed methods offer various benefits, such as that the disclosed methods for deriving sub-iteration contexts do not require the user to provide an input schema. Instead, the derivation process works from one or more instances of the source data itself, and infers information about which source structures repeat based on those instances. So unlike schema-mapping systems like IBM's Clio, where the user must specify (and therefore have access to) a full input schema that describes all potential repeating structures within the input, the disclosed methods detect repetition in the source data automatically, and derive sub-iteration contexts accordingly.","Another benefit is that the disclosed methods for deriving sub-iteration points and explicit bindings do not require the user to provide an output schema. The user does have to specify generic bindings that relate nodes and values from the source feed to specific nodes and locations in the target feed, but that information occurs naturally as part of the target template creation process. Not only does the user not have to specify a formal schema, but no explicit directives are needed to indicate which constructed elements must repeat. Instead, the user simply creates a template that loosely describes what the desired feed should look like. Repetition of the target structures will then occur automatically as a result of the disclosed methods. Moreover, the method of deriving transformation specifications using sub-iteration contexts is not limited to use with data mashup transform operators (e.g. the Transform operator of IBM InfoSphere MashupHub). This method can be used to derive transformation specifications for other data mashup operators, including (but not limited to) unnest, group, and filter operators.","Generally, the sub-iteration module  that has been previously described performs the steps of FIGS.  and -. Referring now to , the reference numeral  generally designates a flow chart depicting the derivation and application of sub-iteration contexts in a data transformation system. The process is described in the context of a particular example, in which the source feed data is the employee data shown in  and the user wishes to create a target feed which looks like the one shown in .","The illustrative embodiment described herein is an XQuery-based data mashup data integration system analogous to an illustrative embodiment described in the U.S. patent application entitled, \u201cINTEGRATING DATA RESOURCES BY GENERIC FEED AUGMENTATION,\u201d attorney's reference number SVL920070098US1. In the illustrative embodiment, a data mashup is represented as a data flow network of operators that interoperate in a demand-driven data flow fashion. Each operator consumes one or more source XML feeds and produces a target XML feed. Operators may have operands that provide an operator with input parameters. For example, operands to a Transform operator might include a reference to the operator providing source instance data, a set of binding expressions used to extract target instance data from the source instance data, and a target template describing the basic structure and format of the target XML feed ultimately produced by the operator. The main data processing logic of the operators is implemented by evaluating XQuery expressions using an auxiliary XQuery engine. The specific XQuery expression(s) used by a particular operator instance to perform its data manipulation logic is generated dynamically from a basic template and from the operands that are passed to the operator. For example,  shows an XQuery expression that could be generated dynamically for a Transform operator given the target template and generic bindings shown in , where the input operator to the Transform provides the source instance data from .","As described herein with reference to the illustrative embodiment, the sub-iteration module can prove useful for any operator that requires sub-iteration processing, including a Transform operator, an UnNest or Extract operator, a Group operator, or a Filter operator. In the particular case of a Transform operator, the operands to the Transform easily provide the four primary inputs that are needed by the sub-iteration module, namely: 1) a set of source data instances; 2) a target template; 3) a set of generic bindings; and 4) an optional set of explicit sub-iteration contexts.","In step , the sub-iteration module receives a set of source data instances, in step  the module receives a target template, and in step  the module receives a set of generic bindings. Optionally, in step  the sub-iteration module receives a set of explicit sub-iteration contexts. In step , the sub-iteration module detects repeating path expressions in the source data. Having received a set of one or more source data instances, the sub-iteration module analyzes the source data instances and then infers two things: a) every possible distinct data path, and b) which of those data paths represents a \u201crepeating path expression.\u201d A \u201crepeating path expression\u201d (RPE) is a data path which, when applied to any single instance of source data, returns two or more nodes that are siblings to each other.","For the exemplary source instance data shown in , the detection of repeating paths (step ) will first find all of the following distinct data paths:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/emps_by_dept"]},{"entry":[{},"\/emps_by_dept\/dept"]},{"entry":[{},"\/emps_by_dept\/dept\/@d_id"]},{"entry":[{},"\/emps_by_dept\/dept\/dep_total_bonus"]},{"entry":[{},"\/emps_by_dept\/dept\/dep_total_bonus\/text( )"]},{"entry":[{},"\/emps_by_dept\/dept\/emp"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/last"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/last\/text( )"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/first"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/first\/text( )"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/workloc"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/workloc\/@dept"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/workloc\/text( )"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/bonus"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/bonus\/@when"]},{"entry":[{},"\/emps_by_dept\/dept\/emp\/bonus\/text( )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Of these paths, there are only three which are repeating path expressions, according to the definition above: \/emps_by_dept\/dept, \/emps_by_dept\/dept\/emp, and \/emps_by_dept\/dept\/emp\/bonus, and so these three paths will be returned from step . Note that a path expression like \u201c\/emps_by_dept\/dept\/emp\/last\u201d or \u201c\/emps_by_dept\/dept\/emp\/bonus\/@when\u201d is not called a repeating path expression, even though evaluation of it against the source instance data would return multiple nodes, because, of those multiple nodes, none of them would be siblings to each other.","In step , the sub-iteration module derives sub-iteration contexts, as is further described below with reference to . A sub-iteration context is an association between a single ECON and at most one of the RPEs from step . The association of each ECON with a particular repeating path expression is key to determining what the overall repeating behavior of the target instance structures will be. The sub-iteration module derives the contexts using a particular selected heuristic, which may be pre-determined, may be selected by the module, or may be selected in any other suitable manner, depending on the inputs received in steps  through . Regardless of which heuristic has been selected and applied, the end goal of step  is to have every ECON associated with at most one RPE, as specified by the chosen heuristic. The associations of ECONs and RPEs then comprise the derived sub-iteration contexts for the transformation.","Some heuristics are more helpful for specific types of data mashup operators than others. As will be apparent to those skilled in the art, no single heuristic for determining a set of sub-iteration contexts will apply to all transformations equally well. The heuristics described herein are for illustrative purposes only, and other heuristics may be selected and applied as desired in the disclosed methods. The heuristic can be pre-selected or pre-determined by the user, can be selected automatically by the system, or can be selected in any other suitable manner. In one embodiment, the system has a plurality of heuristics, all of which are applied to derive all of the various sub-iteration contexts for a given transformation. The results of each heuristic are then presented to the user, allowing the user to browse the different choices and then select the repeating behavior (and hence the underlying heuristic) that most closely fits the desired outcome. In another embodiment, the system applies a plurality of heuristics to derive different sets of sub-iteration contexts, applies a \u201cusefulness\u201d scoring function to each set based on scoring criteria that is static or dynamic, internal or user-specified, and then, ultimately, selects the set of sub-iteration contexts (and hence the underlying heuristic) which has the highest score. Still other embodiments allow the user to specify a particular heuristic of his\/her own choosing as part of the transformation operator itself, or as a configuration parameter to the data mashup data integration system.","By way of example,  illustrates the explicitly created output nodes and associated repeating path expressions for each of five exemplary heuristics (A through E). The different sets of sub-iteration contexts are derived by each heuristic from the exemplary source data of  and the target template and generic bindings of , using the exemplary RPEs noted above from step . Note that, depending on the heuristic in use, an ECON may not be associated with any RPEs at all. Such an ECON has a \u201cNULL\u201d as its RPE in . A NULL RPE indicates that an ECON does not introduce any sub-iteration of its own, though it may exist within sub-iteration of its ancestor ECONs, if any.","Referring to , Heuristic A effectively says \u201cdo not repeat any ECONs,\u201d whereas Heuristic B says \u201crepeat all ECONs, except for the root \u2018output\u2019 ECON, based on the single most deeply-nested repeating source structure that is referenced by the target template.\u201d Heuristics C through E are more advanced heuristics, all of which attempt to associate each ECON with the one repeating path expression that most closely reflects the repeating characteristics of all source nodes referenced directly by that ECON. The operation of Heuristic E is illustrated in detail in the preceding Figures, for example,  shows the XQuery transformation specification for Heuristic E, which when executed by the integration engine against the source feed of , will return the target feed of . Heuristic E is described in further detail below, with reference to .  illustrate how each of Heuristics A through D, respectively, would map into an XQuery transformation specification after completion of the steps in , which are described in further detail below.  illustrate what the target data instance would look like if each respective transformation specification is executed against the source instance data of .","In step , the sub-iteration module calculates sub-iteration points and exact bindings from the derived sub-iteration contexts of step  and from any received explicit sub-iteration contexts, as is further described below with reference to . In step , the sub-iteration module uses the calculated sub-iteration points and exact bindings to create a final transformation specification, which is returned to the integration engine. In a preferred embodiment, the final transformation specification takes the form of an XQuery expression, such as the ones seen in .","In , the reference numeral  illustrates the general flow for deriving sub-iteration contexts using a chosen heuristic. In step , the module selects a heuristic to use for the transformation operation. In step  the module selects an ECON from the target template, and then in step  the selected heuristic is applied to the ECON, thereby associating the ECON with a potentially null RPE. In step  the module checks to see if the associated RPE is null, and if so, the module cycles back to step  and retrieves the next ECON from the target template. Otherwise, in step  the module creates a sub-iteration context that represents the association of the ECON with the RPE found in step . Finally, in step  the module determines if there are more ECONs to process, and if so, it cycles back to step . Otherwise, the process of deriving sub-iteration contexts for the user-specified target template is complete.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 9B","FIG. 8","FIG. 5"],"b":["400","330","300","410","420"]},"In step , the sub-iteration module determines which of the direct binding children for the selected ECON are used as inputs to aggregate function expressions, and the module discards them from the set of direct binding children. An aggregate function expression is loosely defined as any function expression having at least one input argument that accepts a sequence of more than one value. For the exemplary target template and generic bindings of , there is only one binding variable that is used as input to an aggregate function expression, namely, $BINDEXP3. So that variable will be removed from the set of direct binding children for the \u201cemp_total_bonus\u201d ECON.","In step , the sub-iteration module checks to see if the remaining set of direct binding children for the selected ECON is empty, and if so, the RPE associated with the received ECON is set to \u201cnull\u201d and processing for process  is complete. Otherwise, in step  the module calculates the covering path expression for each remaining direct binding child of the received ECON. A covering path expression (CPE) is the single RPE from step  that satisfies the following \u201clongest prefix\u201d criteria for a given direct binding child: a) if the direct binding child is used as input to a function expression, then RPE is a prefix to the direct binding child's associated binding path expression, else RPE is a strict prefix to the direct binding child's associated binding path expression; and b) there is no other RPE\u2032 in the set from step  which satisfies criteria \u201ca\u201d and which is also prefixed by RPE. A path expression PE is a \u201cprefix\u201d to another path expression PE if a) PE and PE equal each other, or b) PE starts with PE. A path expression PE is a \u201cstrict prefix\u201d to another path expression PE if PE starts with, but is not equal to, PE. Thus the path expression \u201c\/emps_by_dept\/dept\u201d is a prefix to both \u201c\/emps_by_dept\/dept\u201d and \u201c\/emps_by_dept\/dept\/emp\u201d, but is only a strict prefix to \u201c\/emps_by_dept\/dept\/emp\u201d. When applied to the exemplary template and binding variables in , step  will return the following covering path expressions for the transformation:",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Binding Child =>","Covering Path Expression"]},{"entry":[{},"$BINDEXP0 =>","\/emps_by_dept\/dept\/emp"]},{"entry":[{},"$BINDEXP1 =>","\/emps_by_dept\/dept\/emp"]},{"entry":[{},"$BINDEXP2 =>","\/emps_by_dept\/dept\/emp\/bonus"]},{"entry":[{},"$BINDEXP4 =>","\/emps_by_dept\/dept"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"430"},"In step , the sub-iteration module determines which RPE from step  should be associated with the set of covering path expressions calculated in step . The module does this by first taking the set of covering path expressions for the selected ECON and eliminating any duplicates, and then determining the single covering path expression to which every covering path expression in the set is a prefix. This single covering path expression is the RPE with which the covering path expressions for the selected ECON are associated. If there is no covering path expression that satisfies the criteria, then the associated RPE is \u201cnull.\u201d For the exemplary template and binding variables in , the full set of covering path expressions for the \u201cemployee\u201d ECON contains the following two path expressions, after the removal of duplicates: {\/emps_by_dept\/dept, \/emps_by_dept\/dept\/emp}. Because \u201c\/emps_by_dept\/dept\/emp\u201d is by definition a prefix to itself, it is the only path expression in the set which is prefixed by every path expression in the set. Thus \u201c\/emps_by_dept\/dept\/emp\u201d becomes the RPE that is associated with the set of covering path expressions for the \u201cemployee\u201d ECON. The RPE associated with the covering path expressions for the \u201cbonus_amount\u201d ECON will be \u201c\/emps_by_dept\/dept\/emp\/bonus\u201d, because that is the only covering path expression in the set for \u201cbonus_amount\u201d. Neither the \u201coutput\u201d ECON nor the \u201cemp_total_bonus\u201d ECON will have an associated RPE because neither has any direct binding children that make it to step .","Upon completion of step , the sub-iteration module has finished applying the exemplary heuristic to the received ECON, and so returns the RPE found in step . In the case of the exemplary target template and generic bindings of , the final set of sub-iteration contexts that are derived from the complete methods of  and  is shown as Heuristic E in .","In , the reference numeral  generally designates a flow chart depicting the details of step , the calculation of sub-iteration points and exact bindings from the derived and explicit sub-iteration contexts. A sub-iteration point is similar to a sub-iteration context in that it is the association of an ECON with an RPE. There are, however, two key differences between sub-iteration contexts and sub-iteration points. First, an ECON can have at most one sub-iteration context associated with it, but it can be associated with any number of sub-iteration points. Second, the RPEs for sub-iteration contexts are always absolute with respect to the source data paths, whereas the RPEs for sub-iteration points can ultimately be relative to, and therefore \u201cnested within\u201d, each other. Further, the path expression of a sub-iteration point for one ECON can be relative to, and therefore nested within, the path expression of a sub-iteration point for another, different ECON.","The sub-iteration module uses the set of derived sub-iteration contexts from step , along with the RPEs from step  and the other inputs from steps  through , to generate a mapping from the source data instance to a target data instance. At a logical level this process can be divide into two phases: 1) walking over the user-specified template and \u201cmarking it up\u201d by adding sub-iteration points; and 2) converting generic bindings to exact bindings, where an exact binding is one whose expression is defined with respect to a particular sub-iteration point. The resultant set of sub-iteration points and exact bindings can then be mapped directly into a final transformation specification which, when executed by the integration engine, will accomplish the desired transformation.","More specifically, sub-iteration points and exact bindings serve three purposes in the context of a data transformation. First, sub-iteration points ensure that all relevant data operations will repeat in accordance with the derived and explicit sub-iteration contexts. A \u201cdata operation\u201d in this case can be any type of data manipulation, including, but not limited to, construction of output structures, evaluation of expressions, and grouping, filtering, and\/or sorting operations. Second, sub-iteration points enforce an \u201cordering\u201d on all iteration points that affect the data transformation. The ordering determines if and how different iteration points are nested within each other. Finally, exact bindings serve to define how references to source nodes should be bound, where binding of a given source node reference occurs based on where the data operation which consumes that reference appears within the potentially nested set of sub-iteration points.","In step , the sub-iteration module receives the set of derived sub-iteration contexts, the RPEs, the generic bindings, and the set of explicit sub-iteration contexts. In step , the sub-iteration module selects one of the derived sub-iteration contexts from step . If no derived sub-iteration context exists after step , then the sub-iteration module will skip to step . Otherwise, in step , the sub-iteration module retrieves the ECON and RPE from the sub-iteration context.","In step , the sub-iteration module determines how the RPE for the selected derived sub-iteration context relates to other repeating path expressions\u2014and in particular, it determines how the RPE is \u201cnested within\u201d those other expressions. The module first creates a working set of path expressions for the ECON of the selected derived sub-iteration context. The working set is initially empty. Then the module looks to see if the ECON for the selected derived sub-iteration context has a corresponding \u201cexplicit\u201d sub-iteration context. An explicit sub-iteration context is one that the sub-iteration module receives directly from the integration engine; the module itself does not calculate explicit sub-iteration points, it just uses them if they exist. If an explicit sub-iteration context does exist for the ECON of the selected derived sub-iteration context, then the module adds the explicit sub-iteration context's path to the working set of path expressions. It also adds to the working set all RPEs from step  that are prefixes to the explicit sub-iteration context's path expression. If (and only if) there is no explicit sub-iteration context for the ECON of the selected derived sub-iteration context, then the module will look at the RPE of the selected derived sub-iteration context. If that RPE is not NULL, the module will add to the working set of path expressions all RPEs from step  that are prefixes to the RPE of the selected derived sub-iteration context. Having thus found a working set of RPEs for the selected derived sub-iteration context, the module discards from the working set any path expression PE(i) for which there exists some other sub-iteration context such that: a) the ECON for that other sub-iteration context is an ancestor to the ECON associated with the selected derived sub-iteration context, and b) if the ECON for that other sub-iteration context has an associated explicit sub-iteration context, then the path expression of the explicit sub-iteration context equals PE(i), else the RPE for that other sub-iteration context equals PE(i).","The first sub-iteration context shown in  for Heuristic E is for the \u201coutput\u201d ECON. That ECON does not have an associated explicit sub-iteration context, nor does it have an RPE associated with it. Thus the working set of RPEs for the \u201coutput\u201d ECON is empty, which means it will not have any calculated sub-iteration points. The module will then go back to step  to retrieve the next derived sub-iteration context, which is the \u201cemployee\u201d ECON. That ECON does not have an associated explicit sub-iteration context, but it does have an RPE associated with it, namely \/emps_by_dept\/dept\/emp. The set of RPEs from step  is {\/emps_by_dept\/dept, \/emps_by_dept\/dept\/emp, \/emps_by_dept\/dept\/emp\/bonus}. Of those paths, both \/emps_by_dept\/dept and \/emps_by_dept\/dept\/emp are prefixes to the RPE of the selected derived sub-iteration context, and will be added to the working set of RPEs for the \u201cemployee\u201d ECON.","In step  the sub-iteration module calculates a set of sub-iteration points for the ECON of the selected derived sub-iteration context. There will be one sub-iteration point for each path expression that is in the working set of path expressions from step . Further, all calculated sub-iteration points for ECON will be created such that they reflect proper \u201cnesting\u201d with respect to each other, where nesting is derived based on if and how the path expressions from step  prefix each other. Thus after step , the \u201cemployee\u201d ECON from the exemplary target template will be associated with two calculated sub-iteration points, where the second one is nested within the first: {$d: \u201c\/emps_by_dept\/dept\u201d, and $e: \u201c$d\/emp\u201d}.","In step , the sub-iteration module checks to see if there are other derived sub-iteration contexts for which sub-iteration points have not yet been calculated, and if so, steps  through  are repeated for each remaining unprocessed derived sub-iteration context. In the case of the exemplary sub-iteration contexts for Heuristic E in , the sub-iteration module repeats steps  through  to determine that the \u201cbonus_amount\u201d ECON will have a single calculated sub-iteration point, namely {$b: \u201c\/emps_by_dept\/dept\/emp\/bonus\u201d}. As for the fourth sub-iteration context, whose ECON is \u201cemp_total_bonus\u201d, there is no explicit sub-iteration context for that ECON, nor is there an associated RPE. Thus it will not have any calculated sub-iteration points. An ECON for which there are no calculated sub-iteration points will iterate based on the sub-iteration points of its ancestor ECONs (if any).","At this point all derived sub-iteration contexts have been processed, and in step  the sub-iteration module determines if there are any explicit sub-iteration contexts that are unprocessed, meaning that the ECONs with which they are associated have not gone through the phase of calculating sub-iteration points. If unprocessed explicit sub-iteration contexts exist, the module will perform steps  through  for each one. Because there are no explicit sub-iteration contexts for the running example, the module will move on to step  and order the entire set of calculated sub-iteration points, where \u201cordering\u201d entails updating the sub-iteration point paths so that they reflect proper \u201cnesting\u201d with respect to each other. This is different from the ordering of step  because at this point, sub-iteration points can be nested within other sub-iteration points from different ECONs, whereas the nesting in step  was within the context of a specific ECON. Upon completion of step , the exemplary sub-iteration contexts for Heuristic E from  will yield the following complete set of calculated sub-iteration points: {$d: \u201c\/emps_by_dept\/dept\u201d, $e: \u201c$d\/emp\u201d, \u201c$b: $e\/bonus\u201d}. The generation of such sub-iteration points, and their association with the ECONs for which they were generated, can be illustrated using XQuery notation as follows:",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003<output>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for $d in \/emps by dept\/dept"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for $e in $d\/emp"]},{"entry":[{},"return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<employee>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{concat($BINDEXP0,\u201c \u201d,$BINDEXP1) }"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003for $b in $e\/bonus"]},{"entry":[{},"\u2003{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"return"]},{"entry":[{},"\u2003<bonus_amount>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003{$BINDEXP2}"]},{"entry":[{},"<\/bonus_amount>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"<emp_total_bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{sum($BINDEXP3)}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<emp_total_bonus>"]},{"entry":[{},"\u2003{$BINDEXP4 }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/employee>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/output>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In step , the sub-iteration module converts the generic bindings that it received as input into exact bindings. More specifically, the module examines each binding expression in the received set of generic bindings, and for each one, it does two things. First, it finds a sub-iteration point for the binding which satisfies the following \u201clongest prefix\u201d criteria: a) the sub-iteration point is associated with an ECON which equals, or is an ancestor to, the ECON that is parent to the binding expression; b) if the binding expression serves as input to an aggregate function expression, then the path for the sub-iteration point is a strict prefix to the binding expression, else the path for the sub-iteration point is a prefix to the binding expression; and c) the path for the sub-iteration point equals or is prefixed by the paths of all other sub-iteration points that satisfy criteria \u201ca\u201d and \u201cb\u201d (if any). Second, if the module finds a sub-iteration point that satisfies the \u201clongest prefix\u201d criteria, it updates the binding expression so that it is relative to that sub-iteration point. The updated binding expression is now an exact binding. The complete set of exact bindings that would be created based on the aforementioned sub-iteration points and the generic bindings of  would be:",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$BINDEXP0: $e\/first"]},{"entry":[{},"$BINDEXP1: $e\/last"]},{"entry":[{},"$BINDEXP2: $b\/text( )"]},{"entry":[{},"$BINDEXP3: $e\/bonus\/text( )"]},{"entry":[{},"$BINDEXP4: $d\/dep_total_bonus"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In step , the sub-iteration module determines if there are any sub-iteration points from step  that are not referenced by at least one other sub-iteration point, and that also are not referenced by any of the exact bindings. Any such sub-iteration points are discarded. For the running example, all of the sub-iteration points are referenced, so the module will preserve them all. In step , the preserved sub-iteration points and exact bindings are returned, and the module has then completed the step of calculating sub-iteration points and exact bindings.","The methods disclosed herein, in combination with the explicit sub-iteration contexts mentioned above, can be used to effectively override derived sub-iteration contexts if and when a given heuristic does not return the desired set of derived sub-iteration contexts. The data mashup \u201cunnest\u201d or \u201cextract\u201d operator provides a simple example. Such an operator extracts or \u201cpulls up\u201d nested repeating structures from the source instance data so that, in the target instance, that structure repeats at the top-most level, effectively creating multiple target instances with the same structure. The unnested result can then be fed into other, subsequent data mashup operators to increase the semantic quality of those operations when repeating elements are involved. For example, assume the source data is as follows:",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<emps_by_dept>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<dept id=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<dep_total_bonus>20000<\/total_bonus>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montoya<\/last>"]},{"entry":[{},"<first>Inigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>8000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ2\u201d>3000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/emp>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Tortoya<\/last>"]},{"entry":[{},"<first>Tortuga<\/first>"]},{"entry":[{},"<workloc>Atlanta<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ3\u201d>1500<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/dept>"]},{"entry":[{},"<dept id=\u201c2\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<dep_total_bonus>30000<\/total_bonus>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montuya<\/last>"]},{"entry":[{},"<first>Tortigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>2000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ4\u201d>1000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/dept>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<emps_by_dept>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Now assume that the user wishes to perform a grouping operation on the above instance data, where the output includes a single group for every combination of bonus quarter and work location. Within each group, the user wishes to include data about all employees who fall into that group. Assuming that the user specifies to group on: \/emps_by_dept\/dept\/emp\/workloc\/text( ) and \/emps_by_dept\/dept\/emp\/bonus\/@when, then, because there is only a single instance of the source data, there would only be a single grouping key which applies to the entire instance of source data, namely: {\u201cChicago Atlanta Chicago\u201d, \u201cQ1 Q2 Q3 Q1 Q4\u201d}, and the result will be a single group which looks something like:",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<group>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago Atlanta Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q1 Q2 Q3 Q1 Q4<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montoya<\/last>"]},{"entry":[{},"<first>Inigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>8000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ2\u201d>3000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/emp>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Tortoya<\/last>"]},{"entry":[{},"<first>Tortuga<\/first>"]},{"entry":[{},"<workloc>Atlanta<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ3\u201d>1500<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/emp>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montuya<\/last>"]},{"entry":[{},"<first>Tortigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>2000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ4\u201d>1000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/group>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"So in effect the group was simply a data transformation; it didn't actually do any real grouping. If, however, explicit sub-iteration contexts are used in conjunction with derived sub-iteration contexts to achieve an \u201cextract\u201d operation, the grouping operation then becomes more functional. More specifically, the relevant pieces of data can be extracted from the source instance data, thereby creating a new set of data instances with similar structure. The end user can perform said extraction by creating an Extract operator that specifies the relevant source data nodes and indicates, e.g., that one target instance should be created for each bonus. The data mashup data integration system will then use the Extract operator in invoking the sub-iteration module with the following inputs:","Source data instance: As shown above.","Target template:",{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<input_entry>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{$BINDEXP0}"]},{"entry":[{},"<bonus_quarter>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{trim($BINDEXP1)}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/bonus_quarter>"]},{"entry":[{},"{$BINDEXP2}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<input_entry>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Generic bindings:",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$BINDEXP0 = \/emps_by_dept\/dept\/emp\/workloc"]},{"entry":[{},"$BINDEXP1 = \/emps_by_dept\/dept\/emp\/bonus\/@when"]},{"entry":[{},"$BINDEXP2 = \/emps_by_dept\/dept\/emp"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Explicit sub-iteration points:",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/input_entry => \/emps_by_dept\/dept\/emp\/bonus"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"From there the sub-iteration module will start by detecting all RPEs for the operation (step ), and will find {\/emps_by_dept\/dept, \/emps_by_dept\/dept\/emp, \/emps_by_dept\/dept\/emp\/bonus}. It will then select and apply an heuristic for deriving sub-iteration contexts. For this example Heuristic E is used, and produces the following set of derived sub-iteration contexts:",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cinput_entry\u201d ECON =>","\/emps_by_dept\/dept\/emp"]},{"entry":[{},"\u201cbonus_amount\u201d ECON =>","\/emps_by_dept\/dept\/emp\/bonus"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Having thus derived sub-iteration contexts, the module will attempt to calculate sub-iteration points for the transformation, per steps  thru . It will start with the \u201cinput_entry\u201d ECON, and will find that there is an explicit sub-iteration context associated with that entry. The path expression of the explicit sub-iteration context is \/emps_by_dept\/dept\/emp\/bonus, so that path, along with all RPEs that are prefixes to it, will be added to the working set of path expressions for \u201cinput_entry\u201d. Thus the working set will have all of {\/emps_by_dept\/dept, \/emps_by_dept\/dept\/emp, \/emps_by_dept\/dept\/emp\/bonus}. Then in step  the module calculates three sub-iteration points, all of which will be associated with \u201cinput_entry\u201d: {$d: \/emps_by_dept\/dept, $e: $e\/emp, $b: $e\/bonus}. In step  the module will cycle back to  and retrieve the next ECON, \u201cbonus_amount\u201d, and find that all of that path expressions in its working set have already been declared by \u201cinput_entry\u201d. Thus the module will not add any new sub-iteration points for the \u201cbonus_amount\u201d ECON. Because there are no more ECONs in the template, the module will proceed to step . It will find that all explicit sub-iteration contexts have already been processed, so it will proceed to step . Because all sub-iteration points came from the same ECON and thus were already ordered after step , step  preserves the order of sub-iteration points.","Note that due to the explicit sub-iteration context, which takes precedence over the derived sub-iteration context for \u201cinput_entry\u201d, the calculated set of sub-iteration points associates \u201c$b\u201d with the \u201cinput_entry\u201d ECON instead of with the \u201cbonus_amount\u201d ECON. That means iteration for the \u201cinput_entry\u201d will be over the bonus source nodes, instead of over the emp source nodes. Thus the explicit sub-iteration context effectively allowed the data mashup data integration system to override the sub-iteration context that was derived by the chosen heuristic. As a result, the transformation operation will create one \u201cinput_entry\u201d output node for each bonus, which is what the example requires, instead of creating one for each emp.","The sub-iteration module will then convert the generic bindings into exact bindings in step :",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$BINDEXP0 = $e\/workloc"]},{"entry":[{},"$BINDEXP1 = $b\/@when"]},{"entry":[{},"$BINDEXP2 = $e"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Finally, the sub-iteration module use the calculated sub-iteration points and exact bindings to create the following transformation specification for the \u201cextract\u201d operation:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for $d in \/emps_by_dept\/dept"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for $e in $d\/emp"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let $e_wloc := $e\/workloc"]},{"entry":[{},"for $b in $e\/bonus"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let $b_when := $b\/@when"]},{"entry":[{},"return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<input_entry>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{ $e_wloc }"]},{"entry":[{},"<bonus_quarter>{ trim($b_when)"]},{"entry":[{},"}<\/bonus_quarter>"]},{"entry":[{},"{ $e }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<\/input_entry>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When the above transformation specification is applied to the source instance data shown above, the target feed ends up looking like the following:",{"@attributes":{"id":"p-0101","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<input_entry>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q1<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montoya<\/last>"]},{"entry":[{},"<first>Inigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>8000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ2\u201d>3000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/input_entry>"]},{"entry":[{},"<input_entry>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q2<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montoya<\/last>"]},{"entry":[{},"<first>Inigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>8000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ2\u201d>3000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/input_entry>"]},{"entry":[{},"<input_entry>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Atlanta<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q3<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Tortoya<\/last>"]},{"entry":[{},"<first>Tortuga<\/first>"]},{"entry":[{},"<workloc>Atlanta<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ3\u201d>1500<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/input_entry>"]},{"entry":[{},"<input_entry>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q1<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montuya<\/last>"]},{"entry":[{},"<first>Tortigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>2000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ4\u201d>1000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/input_entry>"]},{"entry":[{},"<input_entry>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q4<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montuya<\/last>"]},{"entry":[{},"<first>Tortigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>2000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ4\u201d>1000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/input_entry>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Now there are five (5) different instances of data, all containing the relevant associated data from the original input. With the data extracted in this manner, the user can perform the desired grouping operator across all of the new instances, specifying that the groups should be created from: \/input_entry\/workloc\/text( ) and \/input_entry\/bonus_quarter\/text( ). That will lead to four (4) distinct grouping keys, namely:",{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{ \u201cChicago\u201d,","\u201cQ1\u201d }"]},{"entry":[{},"{ \u201cChicago\u201d,","\u201cQ2\u201d }"]},{"entry":[{},"{ \u201cAtlanta\u201d,","\u201cQ3\u201d }"]},{"entry":[{},"{ \u201cChicago\u201d,","\u201cQ4\u201d }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"which in turn gives four different groups as the result:",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<group>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q1<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montoya<\/last>"]},{"entry":[{},"<first>Inigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>8000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ2\u201d>3000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/emp>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montuya<\/last>"]},{"entry":[{},"<first>Tortigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>2000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ4\u201d>1000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/group>"]},{"entry":[{},"<group>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q2<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montoya<\/last>"]},{"entry":[{},"<first>Inigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>8000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ2\u201d>3000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/group>"]},{"entry":[{},"<group>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Atlanta<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q3<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Tortoya<\/last>"]},{"entry":[{},"<first>Tortuga<\/first>"]},{"entry":[{},"<workloc>Atlanta<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ3\u201d>1500<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/group>"]},{"entry":[{},"<group>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus_quarter>Q4<\/bonus_quarter>"]},{"entry":[{},"<emp>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<last>Montuya<\/last>"]},{"entry":[{},"<first>Tortigo<\/first>"]},{"entry":[{},"<workloc>Chicago<\/workloc>"]},{"entry":[{},"<bonus when=\u201cQ1\u201d>2000<\/bonus>"]},{"entry":[{},"<bonus when=\u201cQ4\u201d>1000<\/bonus>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/emp>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/group>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Thus the exposure of an extraction operator, which uses explicit sub-iteration contexts to override the otherwise heuristic directives of the data integration system, can be useful as a helper operator to a user who is trying to do things like grouping and filtering when repeating elements are involved. In another embodiment, the currently explicit Extract operator can be embedded directly into the other operators so that the user does not have to explicitly specify such functionality. Then, derivation of sub-iteration contexts, and calculation of sub-iteration points and exact bindings, would be an automatic part of such operations.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","It is to be understood that the software for the computer systems of the present invention embodiments may be implemented in any desired computer language and could be developed by one of ordinary skill in the computer arts based on the functional descriptions contained in the specification and flow charts illustrated in the drawings. By way of example only, the software may be implemented in the C#, C++, Python, Java, or PHP programming languages. Further, any references herein of software performing various functions generally refer to computer systems or processors performing those functions under software control.","The computer systems of the present invention embodiments may alternatively be implemented by any type of hardware and\/or other processing circuitry. The various functions of the computer systems may be distributed in any manner among any quantity of software modules or units, processing or computer systems and\/or circuitry, where the computer or processing systems may be disposed locally or remotely of each other and communicate via any suitable communications medium (e.g., LAN, WAN, Intranet, Internet, hardwire, modem connection, wireless, etc.). For example, the functions of the present invention may be distributed in any manner among the sub-iteration module, transformation operation in a data integration system, database server, and client systems.","Aspects of the present invention are described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operation steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","A processing system suitable for storing and\/or executing program code may be implemented by any conventional or other computer or processing systems preferably equipped with a display or monitor, a base (e.g., including the processor, memories and\/or internal or external communications devices (e.g., modem, network cards, etc.) and optional input devices (e.g., a keyboard, mouse or other input device)). The system can include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers. Network adapters may also be coupled to the system to enable the system to become coupled to other processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, method and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometime be executed in the reverse order, depending on the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 11A through 11D"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 12A through 12D"}]},"DETDESC":[{},{}]}
