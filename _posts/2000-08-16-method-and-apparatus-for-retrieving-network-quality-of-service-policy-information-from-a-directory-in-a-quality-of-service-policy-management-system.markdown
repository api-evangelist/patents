---
title: Method and apparatus for retrieving network quality of service policy information from a directory in a quality of service policy management system
abstract: A method and apparatus is provided for retrieving and storing quality of service policy management information using a directory service in a manner that enforces read/write consistency and enables read/write concurrency. A directory information tree manager is created and stored in the directory service. One or more directory information trees are created in the directory service in association with the directory information tree manager. Each directory information tree is associated with a sub-tree that represents quality of service policy information, and each directory information tree has a validity period value. When a process needs quality of service policy management information, the system determines which of the directory information trees is a currently active directory information tree. The QoS information is retrieved from the currently active directory information tree only during a time period within the validity period value thereof.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07099932&OS=07099932&RS=07099932
owner: Cisco Technology, Inc.
number: 07099932
owner_city: San Jose
owner_country: US
publication_date: 20000816
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention generally relates to management of mixed services computer networks. The invention relates more specifically to retrieving quality of service policy information from a directory service within a quality of service policy management system.","Computer networks that can carry mixed media messages over standard protocols, including voice, video, and data traffic, are undergoing intensive technical development. There is particular interest in developing and deploying networks that can carry voice over Internet Protocol (IP), video over IP, and other media. In these networks, it is important to ensure that consistent treatment, or quality of service, is applied by all intermediate network elements in a path from sender to receiver for a particular message flow. Accordingly, various quality of service management systems are now available. Certain leading systems of this type enable a user or administrator to create and store abstract quality of service policies in terms of collections of rules and policy objects. An example of such as system is QoS Policy Manager, commercially available from Cisco Systems, Inc.","Concurrently, those of skill in this field have developed an interest in using directory services as a repository for storing a representation of quality of service policies, and other information about physical and logical elements of the network. Directory services based on the ITU X.500 standard, or based on other standards such as Lightweight Directory Access Protocol (LDAP), are receiving particular attention. Microsoft Active Directory is an example of a commercial directory service product.","Integration of quality of service systems and directory services presents certain problems. Many of these problems arise from the fact that while a directory service provides a data repository, it is not a complete database system and lacks many native services offered by relational database systems and object-oriented databases systems, e.g., SQL Server, Oracle, Sybase, etc. For example, directory services do not support protected atomic transaction processing. There is no mechanism for initiating a transaction and then committing changes carried out in the transaction to a database of the directory server. LDAP does not support multiple operation transactions, bundling of atomic operations as a transaction, transaction commit, providing \u201ccursor stability,\u201d etc. As a result, data consistency problems arise.","For example, one entity may read policy information, another entity may write policy information, and the reading and writing operations may not necessarily be coordinated. For example, a policy management system may write policy information to the directory, and a policy server may fetch the information at the same time or too soon. There is no automatic coordination of data from a producer of data and a consumer of data. As a result, a data consumer may read data that is out of synchronization with the producer of data, and the consumer is at risk of reading data that is incomplete or out-of-date.","Another problem is that obsolete policies may persist in the network. If a user edits a policy, a consumer of the policy needs to receive the entire revised policy rather than only the modified portion. Under current approaches, distribution of complete updates is not assured.","Still another problem arises from the typical constraint that a user must accept the entire collection of policy rules or objects that are currently in force for a particular network. The policies need to be consistent and complete for proper processing by consumer processes. Further, only those policies that are approved by an administrator for deployment to the network should be made available. Distributing a partial policy to a process that reads, uses or otherwise consumes a policy (\u201creader\u201d) is undesirable. However, it cannot be prevented in current approaches because the typical quality of service management system does not fully control the directory service or prohibit other applications from reading the directory information. Maintaining consistency and completeness of policy information, while processes are reading and writing the policy information, is difficult given the inherent deficiencies of LDAP and other directory service mechanisms.","In past approaches, certain object-oriented policy information models and schemas have been proposed for use in some quality of service management systems. For example, a policy framework is described in Y. Snir et al., \u201cQoS Policy Framework Information Model,\u201d Internet-Draft, draft-snir-qos-policy-schema-01.txt (first posted October, 1999), and in J. Strassner et al., \u201cPolicy Framework LDAP Core Schema,\u201d Internet-Draft, draft-ietf-policy-core-schema-06.txt (first posted Nov. 4, 1999). However, these approaches do not address problems that arise in using directory services, including data concurrency, LDAP client behavior, data integrity, and other implementation issues. There is a need in this field for a way to integrate a quality of service policy management system with a directory service while overcoming these integration problems.","Tree locking is one possible approach to these problems. In tree locking, the directory tree is locked by a reader or writer process until that process is complete. However, this creates the undesirable possibility that the tree could be locked and then the reader or writer process could crash, leaving the tree locked perpetually. In the policy management environment, this possibility cannot be eliminated because the directory tree and consumer processes are not commonly controlled.","Based on the foregoing, there is a clear need in this field for a way to integrate a directory service with a policy management system while circumventing the problems of data consistency associated with the prior art.","In particular, there is a need for a way to update policy information in one operation, and make the data known in a separate operation that ensures data integrity and consistency between a directory server and a policy server.","There is also a need for a way to update a data store of a directory server, for example, a directory server that communicates to other applications using LDAP, in a way that keeps the data store consistent with any other external data store.","The foregoing needs, and other needs that will become apparent from the following description, are achieved by the present invention, which comprises, in one embodiment, a method and apparatus for retrieving and storing quality of service policy management information using a directory service in a manner that enforces read\/write consistency and enables read\/write concurrency. A directory information tree manager is created and stored in the directory service. One or more directory information trees are created in the directory service in association with the directory information tree manager. Each directory information tree is associated with a sub-tree that represents quality of service policy information, and each directory information tree has a validity period value. When a process needs quality of service policy management information, the system determines which of the directory information trees is a currently active directory information tree. The QoS information is retrieved from the currently active directory information tree only during a time period within the validity period value thereof.","A method and apparatus for retrieving and storing quality of service policy management information using a directory service is described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Although certain embodiments are described herein in the context of processing quality of service information for network management, the approaches disclosed in this document are equally applicable to any other context that uses information stored with a directory service or that uses LDAP.","Operational Context","According to an embodiment, a quality of service management information model, in the form of a directory schema, is provided. Embodiments also include methods by which other objects, elements or application programs access the directory information in order to enforce data concurrency and other desirable behavior. For purposes of illustrating an example, the invention will be described in the context of an LDAP directory service. However, embodiments of the invention are equally applicable to any other directory service. The reader is assumed to have familiarity with network management, quality of service, object-oriented programming, and LDAP.","An LDAP schema generally consists of a description of object classes and their attributes that are available to instantiated objects or entries in the directory service. The information model and schema that are described in this document define both classes and logical relationships between directory objects and a policy information tree that is represented in the directory. The schema is adapted to use the limited tools and capabilities provided by LDAP version 3 concerning data integrity, schema checking, and a lack of transactions or other traditional database operations.","Each policy stored in the directory is represented in a clear and concise manner, to enable other policy management systems and policy decision points to read the policy information and understand it in a consistent way.","In an embodiment, an object-oriented information model adapted for storing quality of service information is provided. A suitable information model is described in co-pending U.S. application Ser. No. 09\/376,802, filed Aug. 18, 1999, entitled Method and Apparatus of Storing Policies for Policy-Based Management of Quality of Service Treatments of Network Data Traffic Flows, and naming as inventors Shai Mohaban, Itzhak Parnafes, Yoram Ramberg, Yoram Snir, John Strassner, the entire contents of which are hereby incorporated by reference as if fully set forth herein. In particular, the containment hierarchy disclosed in the above-referenced document is used.","Network Context","An embodiment of the invention is used in the context of a network.  is a block diagram of a computer network  that includes a plurality of local area networks , ,  interconnected by a plurality of intermediate network devices , . A plurality of network end stations, such as end station  and print server , are coupled to the LANs. The network further includes at least one policy server  that may be coupled to a repository  and to a network administrator station . A server suitable for use as policy server  is any Windows NT\u00ae or UNIX workstation or similar computer platform. Network  also includes at least one host or server  configured in accordance with the present invention.","Server  includes at least one application program or process , a flow declaration component  and a communication facility . The flow declaration component  includes a message generator  that communicates with the communication facility . Flow declaration component  also is coupled to an associated memory  for storing one or more traffic flow data structures . The application program  communicates with both communication facility  and, through application programming interface (API) layer , to flow declaration component . Communication facility , in turn, is connected to network  by LAN . The server  also comprises conventional programmable processing elements, which may contain software program instructions pertaining to the methods of the present invention. Other computer readable media may also be used to store the program instructions.","Communication facility  preferably includes one or more software libraries for implementing a communication protocol stack allowing server  to exchange messages with other network entities, such as end station , print server , etc. In particular, the communication facility  may include software layers corresponding to TCP\/IP, Internet Packet Exchange (IPX) protocol, the AppleTalk protocol, the DECNet protocol and\/or NetBIOS Extended User Interface (NetBEUI). Communication facility  further includes transmitting and receiving circuitry and components, including one or more network interface cards (NICs) that establish one or more physical ports to LAN  or other LANs for exchanging data packets and frames.","Network devices ,  provide basic bridging functions including filtering of data traffic by MAC address, \u201clearning\u201d of a MAC address based upon a source MAC address of a frame, and forwarding of the frame based upon a destination MAC address or route information field (RIF). They may also include an IP software layer and provide route processing, path determination, and path switching functions. In one embodiment, devices ,  are computers having transmitting and receiving circuitry and components, including network interface cards (NICs) establishing physical ports, for exchanging data frames. Intermediate network device , moreover, preferably is configured as a local policy enforcer for traffic flows originating from server , as described below.","Network  is illustrated as an example only. Embodiments disclosed in this document will operate with other, possibly far more complex, network topologies. For example, repository  and network administrator station  may be coupled directly or indirectly to policy server  through zero or more intermediate devices.","Local Policy Enforcer",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 2","b":["210","310","222","310","312","312","216","226","222","312","200"]},"The traffic flow state machine engine  also is coupled to several traffic management resources and mechanisms. In particular, traffic flow state machine engine  is coupled to a packet\/frame classifier , a traffic conditioner entity , a queue selector\/mapping entity , and a scheduler . The traffic conditioner entity  includes several sub-components, including one or more metering entities , one or more marker entities , and one or more shaper\/dropper entities . The queue selector\/mapping entity  and scheduler  operate on the various queues established by local policy enforcer  for its ports and\/or interfaces, such as queues -corresponding to interface .","The term \u201cintermediate network device\u201d broadly means any intermediate device for interconnecting end stations of a computer network, including, without limitation, Layer 3 devices or routers as defined by RFC 1812; intermediate devices that are partially compliant with RFC 1812; intermediate devices that provide additional functions such as Virtual Local Area Network (VLAN) support; and Layer 2 intermediate devices such as switches and bridges, etc.","Policy System",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3A","FIG. 3A"],"b":["604","600","608"]},"The Application  generally is an enterprise software application program that runs on a server computer. For example, Application  may comprise an Oracle\u00ae database system, a PeopleSoft\u00ae human resources system, or any other application. Application  is coupled to Repository  and may be coupled to an Application Manager , the functions of which are described further below. Application  is also coupled to a Local Mapping , described below.","Repository  stores polices that are associated with applications. Repository  which may comprise a directory server, such as Netware Directory Server, Windows Active Directory, etc., or a database. Advantageously, use of a Repository offers security. The format of the Repository is known only to a network vendor that supplies the Repository, or to a network administrator. Thus, only authorized applications may access the Repository.","A Schema stored in the Repository provides an integration point and a common information model for communication between Application  and Policy Server . Application  extends the Schema by adding application-specific parameters to it. The extended Schema describes the application and its specific parameters. For example, the Schema describes an Application Code Point and its possible values. When Application  is a Web server, the Schema describes a URL and its user name. Other examples of parameters include type of transaction; user identifier; application identifier; a text description; and others.","The application-specific parameters may be added manually, for example, using a schema definition file that is uploaded into the Repository . In another embodiment, the Repository  is a Directory Server compatible with Lightweight Directory Access Protocol (LDAP), and the application-specific parameters are added dynamically using LDAP. The precise mechanism for adding parameters is not critical. What is important is that each application contacts the Repository and declares one or more parameters that the application will use for classification of QoS of network devices that handle traffic flows generated by the policy management application.","Policy Server  provides a mechanism by which a network administrator or may map application parameters into network services. A Network Administration Client  is coupled to Policy Server . A network administrator may use Network Administration Client  to communicate with Policy Server . Each network service defines how an application should access it. For example, access may comprise setting a DiffServ Code Point in the packets, by setting IP Precedence values in the packets, or by signaling using RSVP. An example of a commercial product suitable for use as Policy Server  is Cisco COPS QoS Policy Manager 1.0, commercially available from Cisco Systems, Inc.","Policy Server  is coupled to one or more network devices , each of which executes a network device operating system . An example of a network device  is a router and an example of a network device operating system  is IOS. Policy Server  configures the network devices  to implement the network services and to correctly respond to signaling from Application . For example, Policy Server  may map an Application Code Point to a DiffServ Code Point or IP precedence value. Such mappings of ACPs to DSCPs may be stored in Local Mapping  so that they are immediately accessible to Application  when it is executing in real time.","A mapping may apply for all application instances, for all application instances running on some subnet or on a single machine, or for a single instance identified by its IP address and source port number. The latter is useful, for example, when several Web servers are running on the same host. Thus, different mappings can be defined for the same Application Code Points, depending on the particular installation instance. The mapping translates single application QoS requirements into policies or requests that are centrally coordinated and in compliance with network-wide multi-application policies.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 3B","FIG. 3A","FIG. 3A"],"b":["604","608","601","604","608","601"]},"Application  is tightly coupled to or integrated with an application QoS policy element . In one embodiment, element  is one or more software programs, processes, or modules that can be linked to application  and called by the application. Element  may communicate with Directory  using LDAP calls.","Element  can set QoS services of a network device, for example, by setting DiffServ bits of packets of a flow of application , using functions of a UNIX operation system  and a Windows NT operating system . Any other operating system may be supported; UNIX and Windows NT are illustrated merely as examples. In one embodiment, element  selectively an alternatively calls the \u201csetsockopt\u201d function of UNIX, or the GqoS or TC APIs of Windows NT to set QoS bits of packets of a particular application flow. As a result, DiffServ or RSVP+ information is created, as indicated by block . The QoS information of block  is passed in packets of the flow to network device operating system . In response, network device  applies a desired QoS to the flow.","Advantageously, the architecture of  supports multiple platforms using APIs, provides policy integration using LDAP, and supports both DiffServ and RSVP+.","Directory Integration Mechanism: Structural Overview","Directory Information Trees and a Directory Information Tree Manager are provided for providing consistency control over policy sub-trees that store substance quality of service policy information. Each object of the Snir et al. information model is given a unique object identifier value. Using the object identifier values, the schema can track the location of any object under a logical parent, which is not required by the schema disclosed in Snir et al. This allows for efficient LDAP queries, while leaving the definitions of policies consistent.","The schema disclosed herein also supports a fallback mechanism that allows the user to easily return to an older, obsolete policy Directory Information Tree as long as it was not erased from the directory without any client notification required.","In one implementation, the Directory Information Tree Manager object and at least one Directory Information Tree object are created in a pre-existing directory service or directory server. Creation of the objects may be carried out automatically by a quality of service management application as part of its initialization process. Reader and writer processes operate according to pre-determined behavior or protocol and thereby achieve data consistency, as discussed herein in connection with , .","According to one specific embodiment, a directory service, such as an LDAP directory service, provides a repository for quality of service information and related information, including Device information (e.g., Role assignments) and Policy Decision Point (PDP) to Policy Enforcement Point (PEP) information. The directory is the primary repository and distribution mechanism for static information. Alternatively, the directory service may be a secondary repository for QoS policies.","The directory service is defined by a schema, which identifies classes and their attributes that may be used by a policy management system for communicating with a directory and obtaining information from it. According to an embodiment, an information model and schema are provided to define such object classes, in an object-oriented programming language, and also certain logical relationships between directory objects and the policy information tree. An example schema is set forth in APPENDIX 1.","In a preferred embodiment, the policy information stored in the directory is consistent and concise. Policy management tools and PDPs can read the policy information and understand it in a single consistent way, regardless of the identity of the objects' creator. The schema can use the limited tools and capabilities of LDAP has for data integrity, schema checking, database transaction management and other database functionality. Optimization mechanisms for create operations or modify operations can ensure the consistency of the policy information at any time.","According to an embodiment, the schema follows the containment hierarchy that is set forth in Snir et al. In one embodiment, a \u201cfirst-match\u201d decision strategy is used. In this strategy, each Policy rule defined in the QPM policy schema has a unique priority. Thus, no two rules in the same Role can share a single priority value.","Also in the preferred embodiment, policy information objects are updated only selectively in response to a policy change. Specifically, in one approach, every policy deployment operation (\u201cJob\u201d) results in the creation of a new DIT, which is fully written back into the directory server, thereby duplicating unchanged objects. In contrast, in the preferred embodiment, only modified objects are rewritten. Parts of the tree that may be written back (if they were modified) are called \u201crewritten DIT units\u201d or RDUs. The following are RDUs: Role (policy group), Role (for devices), Service Template, reusable objects in the Reusable Objects Repository, PDP. For example, if any object in a policy Role object is modified, the Role sub-tree is written back to the directory server. This occurs even if the modified object is referenced by an object in the sub-tree and is actually in the repository that is used by the Role and not in the same DIT sub-tree.","In a given Job, a domain may contain Roles from previous Jobs and new updated Roles. In a past approach, the mechanism to store such Roles is DIT containment. In the preferred embodiment, a DN reference is used. As a result, unchanged objects in the logical hierarchy become referenced by means of DN.","Directory Information Trees and Managers",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 4A","FIG. 4"],"b":["402","410","410","402","410","410"]},"Directory Information Tree Manager object  identifies which of the Directory Information Trees A, B is valid at the time of any particular directory information request. Each Directory Information Tree object may be designated either as Active, Old, or To Be Erased. Accordingly, Directory Information Tree Manager  has a single value reference, designated as Active DIT value , that points to an Active Directory Information Tree, if there is one, and otherwise points to null (no tree). Directory Information Tree Manager  also has an Old DITs value (Old DITs belongs to the previous schema and HistoryJobs replaces it (As appears in the updated schema in Appendix)  that points to the immediate past valid Directory Information Tree, for example, Directory Information Tree B.","Directory Information Tree Manager  also has a Validity Period value  defining a validity period, in seconds, applicable to any Directory Information Tree A, B that is Active.","Each Directory Information Tree A, B has a Creation Time value A, B, a Name value A, B, and a Validity Period value A, B. The Creation Time value A, B stores information indicating the date and time at which a process last created or modified the associated Directory Information Tree A, B. The Name value A, B specifies a unique name for the associated Directory Information Tree. The Validity Period value A, B stores information defining a time, in seconds, during which the information in an associated policy sub-tree A, B is valid. In one embodiment, the Name value A, B is the distinguished name of a Directory object that implements Directory Information Tree A, B, and the Creation Time value A, B is the relative distinguished name of the same object. The concept of a distinguished name (\u201cDN\u201d) is defined in the LDAP specification.","A process that wishes to modify a policy in the Policy Server database may not designate a modified Directory Information Tree A, B as Active until all write or modify operations are completed. Information in an obsolete Directory Information Tree A, B may be erased only after its validity period concludes, i.e., after expiration of its validity period value A, B. The Validity period values A, B ensure that a writer process cannot erase data that a reader process is concurrently attempting to read. A consumer process is required to check the active Directory Information Tree and its validity period value before undertaking a read or write operation.","Each process that is a publisher of data may write changes to a different Directory Information Tree A, B. However, before modifying a Directory Information Tree, a publisher process must first re-set the Active DIT value  of the Directory Information Tree Manager . Then, when the publisher is ready to commit the changes, the publisher changes the Active DIT value of the Directory Information Tree Manager  to point to the updated Directory Information Tree. This can be carried out using an atomic operation of LDAP, since the Directory Information Tree Manager  is a single entry of the directory system.","As described further below, read behavior of processes that use the foregoing objects are defined to require a reader to re-check the value of the Active DIT value . If the value is null, then the reader knows that the information that was just read is no longer valid. Thus, the Active DIT value  serves as a way to verify the validity of data that has been read.","Examples of publisher or writer processes include a plurality of users, each of whom is writing policy or user information to the directory using a policy management system. Examples of consumer or reader processes include LDAP methods.","Batch Retrieval of LDAP Objects","Although every RDU is pointed to by a DN reference, within an RDU sub-tree, DIT containment is used. For example, rules are DIT contained within Roles. Such RDU DIT containment is used to facilitate a process of batch retrieval of LDAP objects. Batch retrieval is provided because when reading an RDU, it is most efficient for a reader to collect all the DIT contained objects in the sub-tree of the RDU using a single LDAP search. For example, a PDP client should issue a single search to fetch a policy Role. Every RDU root object has an attribute that contains the number of objects in the RDU. The value of this attribute is used to determine how the RDU is retrieved, as a single batch LDAP operation may be limited to a maximum number of objects fetched. Since the number of objects in an RDU is always known, if the total number is less than or equal to a specified limit, then a single LDAP search may be used to fetch the entire RDU sub-tree. For example, if the value of the object counter attribute is greater than a specified limit value (e.g., 1000, which is a current implementation limit for some directory server implementations) and there are more than 1000 objects within a policy Role, the rules are read in batches using the priority as a search filter.","Policy Sub-Tree Structure",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 4B","FIG. 4A"],"b":["420","420","430","432","434","436","438","442","444"]},"The JobsManager object  contains one or more Distinguished Name references to the current Job and to all the previous saved Jobs. The Domains object  comprises one or more Domain objects, each of which comprises one or more references to Roles that are in the current Job. For example, a Domain may comprise a reference to updated Role1, reference to updated Role2, and a reference to any Role that was not changed and is in a previous Job.","Each Domain also includes references to one or more Service Templates  (per domain or per role). Such references point to newly written Service Templates or historic service templates that were not changed. For example, within a Domain, there are distinguished name references to all Service Templates  in the associated Job, including modified and non-modified Service templates. Such service templates are those that been modified since the completion of the last deployment job and those that have remained unchanged.","Repositories object  contains DN references to all the Repositories in the current Job. The repositories may include modified and non-modified repositories, i.e., repositories that have been modified since the completion of the last deployment job and those that remained unchanged.","The Roles object  contains DN references to all the Interface Roles in the Job including modified and non-modified Interface Roles. An Interface Role is a mapping from the interface (a Network Interface Card, for example) to a set of Policy Roles that contain the policy that should be enforced by this interface. For example, a VLAN port on a network switch may be mapped to three policy roles R1, R2 and R3 by an interface role \u201cR1+R2+R3\u201d.","Such Interface Roles are those that have been modified since the completion of the last deployment job and those that have remained unchanged.","Removal of Lost Jobs","In the preferred embodiment, a mechanism is provided for dealing with removal of Directory Information Tree objects that are not part of the Directory Information Tree that is referenced by a Directory Information Tree Manager, e.g., because of unexpected loss of a connection, or other directory-related problems, as described further herein.","In response to the occurrence of certain predefined events (e.g., system startup), the Job Manager object  fetches all Job objects that are instantiated in a position below the root in the directory server, and ensure that each such object is referenced in the Job Manager object . A Job that exists in the directory server, but for which a distinguished name is not stored in a Job Manager entry, is considered a lost DIT and is removed. Under normal conditions, lost Jobs should not exist in the directory server for more then the validity period. Removal of the Job is performed after the Validity Period interval has elapsed.","Method of Retrieving Policy Information","Data Integrity","According to an embodiment, data integrity is enforced for the quality of service information that is stored in the directory. In particular, read\/write concurrency is enforced as between the policy server (a policy consumer, in a preferred embodiment) and the directory server database Publisher. For example, referring again to , a need for read\/write concurrency arises because of the fact that many other objects, procedures, or programs (\u201creaders\u201d) may read the quality of service policy management policies that are stored in Repository  at the same time that the separate database of Policy Server  is being updated by an LDAP agent, or by any other policy update or export mechanism.","Data Integrity: Reader Processes",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 5A","FIG. 5A"]},"In block , the name value and time value of the active Directory Information Tree are received. Block  may involve reading the Active DIT distinguished name value, and the Creation Time value A, B of the Directory Information Tree A that is currently pointed to by the Active DIT value . In one embodiment, the Creation Time value A is stored in the relative distinguished name attribute of an object instantiation of the Directory Information Tree A in the directory server.","In block , policy information is read from the Active Directory Information Tree. If the read operation is successful, as tested in block , control passes to block  in which the name and time values of the Active Directory Information Tree are read again. If either the name value or the time value has changed since block , as tested in block , then control transfers to block . This causes the process to read policy information from the then-current Directory Information Tree.","Alternatively, if no change has occurred, such that the test of block  is negative, then the read operation is successful and the process may terminate or return normally, as indicated by block .","If read operation of block  was unsuccessful, as tested in block , then various error processing steps may be undertaken. For example, in an embodiment, control passes to block , in which the process tests whether the failure is the result of a schema error. If so, then the process exits using a schema error code, as indicated by block . If the test of block  is negative, then the process exists with a standard error code, as indicated by block .","The foregoing process flow assures a client that carries out the process that it will receive up-to-date policy information. If the policy information changes at the same time that a retrieval occurs, the retrieval procedure may require several iterations of the steps described above. To avoid and endless loop involving blocks , , , , , , a reader may choose the number of iterations to be bound to a predefined value, or it may elect to use an alternative process that requires only a single iteration, but that ensures receiving policy information that is updated only through the start of the reading process.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 5B"},"In block , a validation period value is read from the directory information tree manager. In an embodiment, the validation period value is called a Job Validation Period. In block , a name of the then-current active directory information tree is received. The name may be a Distinguished Name of an object in the directory. In block , a second validation period value, which is associated with the current active directory information tree, is received. This value defines a time frame during which a process may obtain valid directory information may be obtained without interference or updates by other processes. As shown by block , policy information may be retrieved from the active directory information tree during the time period of the validity period value.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 5C","b":["528","538","528","530"]},"In block , the validation period value is retrieved, and the name of the active directory information tree is read in block . If the current active tree has changed, as tested in block , then local policy information is deleted and policy retrieval restarts, as shown by block . The test of block  may involve determining whether the active job distinguished name is different from the previous active job distinguished name. In such a case, an update to the policy information has occurred and the current job distinguished name is obsolete. Thus, local information should be erased and the retrieval process should restart. Use of the validation period value is not required.","If the active job name is identical to the previous active job name, then retrieval continues for the time period of the validation period value, as shown by the branch from block  to point \u201cA\u201d (i.e., block ) of .","Data Integrity: Writer Processes",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 5D"},"In block , a new job tree is created. In one embodiment, the root for this tree is a newly created QPMJob object. The tree is set as non-active, i.e., clients may not access it. In block , the Job's consistency is validated and checked for errors. In block , the active job value of the job manager object is set to the new object. The newly created job is now accessible by clients.","Advantageously, neither database locking nor external event synchronization is required, because the mechanism depends upon carefully defined behavior observed by legitimate reader processes and writer processes.","Hardware Overview",{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 6","b":["700","700","702","704","702","700","706","702","704","706","704","700","708","702","704","710","702"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for retrieving and storing quality of service policy management information using a directory service. According to one embodiment of the invention, retrieving and storing quality of service policy management information using a directory service is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for retrieving and storing quality of service policy management information using a directory service as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","Scope","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.","For example, the invention has been described with reference to a policy management embodiment. However, the invention is applicable to many other contexts and environments. For example, consider a system in which it is desirable to retrieve information about a group of users from a directory server, but the system needs to provide information about all the users or none at all. This rule might be enforced to ensure, e.g., because if group members or group attributes are in the process of being edited, delivery of group information should be delayed until the editing is complete.",{"@attributes":{"id":"p-0121","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SCHEMA DEFINITION"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JOB MANAGER OBJECT"]},{"entry":[{},"A central manager object provides a root for the policy information tree. The Job"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"manager objects serves 2 purposes: Maintain the currently active Job; Manage history"},{"entry":"jobs. The Job manager provides central control that facilitates read \/ write concurrency in"},{"entry":"an environment in which multiple reader processes are active while information is"},{"entry":"updated."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QPM Job Manager class definition:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","QPMJobManager"]},{"entry":["DESCRIPTION","Object that manages Jobs, active and history"]},{"entry":["DERIVED FROM","Policy (Core)"]},{"entry":["TYPE","Structural"]},{"entry":"AUXILIARY"},{"entry":"CLASSES"},{"entry":"OID"},{"entry":"POSSIBLE"},{"entry":"SUPERIORS:"},{"entry":["MUST HAVE:","QpmValidityPeriod"]},{"entry":["MAY HAVE:","QpmActiveJob"]},{"entry":[{},"QpmHistoryJobs"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QpmValidityPeriod Attribute:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","QpmValidityPeriod"]},{"entry":["DESCRIPTION","An Integer value of the Validity period of the active"]},{"entry":[{},"DIT, in seconds. This value is used to determine the"]},{"entry":[{},"QpmValidityPeriod set per DIT."]},{"entry":["SYNTAX","INTEGER"]},{"entry":"OID"},{"entry":["EQUALITY","\u2002IntegerMatch"]},{"entry":["MULTI-VALUED","No"]},{"entry":["DEFAULT VALUE","60*60 (60 minutes)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QpmActiveJob Attribute:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","QpmActiveJob"]},{"entry":["DESCRIPTION","The DN of the active Job object."]},{"entry":["SYNTAX","DN"]},{"entry":"OID"},{"entry":["EQUALITY","DistinguishedNameMatch"]},{"entry":["MULTI-VALUED","No"]},{"entry":["DEFAULT VALUE","None"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QpmHistoryJobs Attribute"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","QpmHistoryJobs"]},{"entry":["DESCRIPTION","The DN of history jobs"]},{"entry":["SYNTAX","DN"]},{"entry":"OID"},{"entry":["EQUALITY","DistinguishedNameMatch"]},{"entry":["MULTI-VALUED","Yes"]},{"entry":["DEFAULT VALUE","None"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JOB CLASS DEFINITION"]},{"entry":[{},"The QPMJob class serves as a root of a specific QPM Job information sub-tree. It"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"also supplies required information for the read \/ write concurrency mechanism. In order"},{"entry":"to overcome shortcomings of specific directory server implementations, QPMJob objects"},{"entry":"are located directly under the qpmRoot object as a sibling to the QPMJobManager object,"},{"entry":"to avoid father to son DN references."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QPMJob class definition:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","QPMJob"]},{"entry":["DESCRIPTION","Object that manages a single Job, either active and history"]},{"entry":["DERIVED FROM","Policy (Core)"]},{"entry":["TYPE","Structural"]},{"entry":"AUXILIARY"},{"entry":"CLASSES"},{"entry":"OID"},{"entry":"POSSIBLE"},{"entry":"SUPERIORS"},{"entry":["MUST","QpmCreationTime"]},{"entry":["MAY","QpmValidityPeriod"]},{"entry":[{},"QpmId"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QpmCreationTime Attribute"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","QpmCreationTime"]},{"entry":["DESCRIPTION","An Integer representing the creation date and time of"]},{"entry":[{},"the DIT."]},{"entry":["SYNTAX","INTEGER"]},{"entry":"OID"},{"entry":["EQUALITY","\u2002IntegerMatch"]},{"entry":["MULTI-VALUED","No"]},{"entry":["DEFAULT VALUE","None"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QpmValidityPeriod Attribute"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NAME","QpmValidityPeriod"]},{"entry":["DESCRIPTION","A String value of the Validity period of this Job, in"]},{"entry":[{},"seconds."]},{"entry":["SYNTAX","Integer"]},{"entry":"OID"},{"entry":["EQUALITY","\u2002IntegerMatch"]},{"entry":["MULTI-VALUED","No"]},{"entry":["DEFAULT VALUE","60*60 (one hour)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 5C","FIG. 5B"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5D"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
