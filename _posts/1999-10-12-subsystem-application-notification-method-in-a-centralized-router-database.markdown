---
title: Subsystem application notification method in a centralized router database
abstract: A method and system for notifying router subsystems of configuration changes made to router configuration information which are maintained by a centralized information provider or database system. The centralized database provides registration and unregistration for notification of changes made to the router configuration information. The centralized database further provides router configuration change notifications to subsystems registered to receive such notifications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06952703&OS=06952703&RS=06952703
owner: Cisco Technology, Inc.
number: 06952703
owner_city: San Jose
owner_country: US
publication_date: 19991012
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF DESCRIPTION OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","This invention pertains generally to internetwork router operating systems. More particularly, the invention is a method and system for carrying out router configuration notifications using a centralized database system.","2. The Prior Art","In a routing device, internetwork operating systems (IOS) or more commonly, router operating systems (OS), provide the basic command functions for the routing device as well as various subsystem components which provide specific functions or routines provided by the routing device.","In general, routing devices carry out the operation of reliably transferring network messages or packets between a network of coupled devices, or a collection of such networks. A reliable transfer protocol is provided by the IOS for carrying out such operation. Additionally, an interface in communication with a Configuration (config) subsystem is provided which allows a user of the routing device to configure the operations of the routing device.","The user may configure, for example, the IP address of a serial interface facility or the default route for the routing device. A config command issued by the user is received by the config subsystem and processed therein. The config subsystem determines from the config command issued by the user which client subsystem is affected by configuration information contained in the config command. The config subsystem then carries out a communication exchange with the affected client subsystem to deliver the change in configuration information.","However, router devices typically include a plurality of client subsystems which manage specific functions, requiring multiple dependencies between the config subsystem and such client subsystems. Furthermore, client subsystems often have multiple dependencies with other client subsystem. For example, the PPP subsystem is dependent upon the IP subsystem for Internet address information and the AAA subsystem for user authentication and credential information. These and other subsystem dependencies as is known in the art prevent modularity in subsystem design and implementation within the IOS of the router.","Another drawback with current subsystem implementation schemes arises when temporary configuration changes to a subsystem are to be carried out. A temporary change is desired when, for example, a user of the routing device wishes to test a particular configuration to analyze the efficiency of such configuration, but would like the opportunity to subsequently revert or \u201cback-out\u201d of the change if desired. During such a configuration sequence, multiple transactions will typically need to be carried out between various subsystems. For example, where a user configures the IP address of a serial facility port, the config subsystem will communicate the new IP address to the IP subsystem. In turn, the IP subsystem will communicate to the PPP subsystem that the serial facility port has new IP address information. When the changes are to be aborted or otherwise reverted, a similar chain of communication is necessary to complete the task of reverting prior changes. Such multiple dependencies between the various subsystems of the IOS make common transactions cumbersome and unnecessarily complicated. Furthermore, design and development of the various subsystems of the IOS must take into account these multiple dependencies requiring longer design and development time.","Another situation where a temporary change is desired is when a user connects to the router via a \u201cdial-in\u201d connection port. Dial-in connections are provided by a plurality of subsystem of the IOS. Certain default settings may be configured for most users. However, specialized settings may be configured for certain users, such as network administrators who have particular access privileges, for example. Where a user connects via a dial-in connection, a dialer subsystem communicates with an AAA subsystem to provide name and password information. Responsive to this communication, the AAA subsystem determines the access credentials of the dial-in user from the name and password information and communicates with a PPP subsystem. The access credentials provide, among other things, the configurations for the user at the dial-in connection port. The PPP subsystem then sets the port configurations for the user according to the user's access credentials thereby enabling point-to-point communication for the user.","When the user disconnects, the PPP subsystem, the AAA subsystem and the dialer subsystem need to communicate with each other to restore default settings. This situation presents another illustration where multiple dependencies between the various subsystems of the IOS make common transactions cumbersome and unnecessarily complicated.","Copending application entitled METHOD AND SYSTEM FOR EXECUTING, TRACKING AND RESTORING TEMPORARY ROUTER CONFIGURATION CHANGE USING A CENTRALIZED DATABASE, filed Oct. 12, 1999, describes a method and system for transacting routing device configurations using a centralized information provider or database system and is incorporated herein by reference. In this copending application, a centralized database system (sysDB) is within the IOS which manages transactions on router configuration data. The sysDB receives configuration commands from various IOS subsystems. Such commands may include, for example, a request to change configuration data and a request to revert changes made to the configuration data. However, certain subsystems are dependent upon certain configuration data maintained in the database for carrying out their tasks. For example, the IP subsystem is dependent on having IP address configured for a port or interface for the IP subsystem to operate properly.","Accordingly, there is a need for a method and system for carrying out router configuration change notifications to client subsystems which uses a centralized information provider for router configuration information and which does not rely upon multiple dependent subsystems communicating with each other. The present invention satisfies these needs, as well as others, and generally overcomes the deficiencies found in the background art.","An object of the invention is to provide a method and system for carrying out router change configuration notifications which overcomes the prior art.","Another object of the invention is to provide a method and system for carrying out router change configuration notifications using a centralized database.","Another object of the invention is to provide a method and system for carrying out router change configuration notifications which does not require multiple dependencies between subsystem applications of the router.","Another object of the invention is to provide a method and system for carrying out router change configuration notifications which allows the subsystem applications of the router to be modular and independent of each other.","Further objects and advantages of the invention will be brought out in the following portions of the specification, wherein the detailed description is for the purpose of fully disclosing the preferred embodiment of the invention without placing limitations thereon.","The present invention is a method and system for notifying router subsystems of configuration changes made to router configuration information which are maintained by a centralized information provider or database system. The method of the invention is provided by operating system software which is run or otherwise executed on the routing device (router). The method of present invention is implemented by software which is stored on a computer-readable medium, such as computer memory, for example.","In its most general terms, the method of the invention comprises software routines and algorithms which are generally provided as part of an operating system (OS) which is executed in a router device. The operating system software which is also known as internetwork operating system (IOS) comprises a plurality of subsystems, each of which perform functions for the router.","One of the subsystems provided by the IOS is a centralized database system (sysDB). The sysDB executes as a subsystem component in the router and provides a centralized storage and retrieval facility for configuration information required by other subsystems of the IOS. The configuration information stored on the sysDB may include, for example, Internet protocol (IP) addresses, Ethernet configurations, subnet masks, default routes, protocol configuration, name server information, user and password data, access levels, and other router data as is known in the art. As noted above, prior art router implementations have required the individual subsystems to handle storage and retrieval of configuration information related to the corresponding subsystem (i.e., IP subsystems contained IP configuration data, AAA subsytems contained user authentication information). The present invention employs a centralized sysDB which handles storage and retrieval tasks normally assigned to various subsystems. By centralizing such configuration information in a sysDB, multiple dependencies between the other individual subsystem are avoided or greatly reduced. This arrangement allows the subsystem design and implementation to be modular. Subsystems may be added and removed with greater ease due to the lack of multiple and prevalent dependencies.","The sysDB subsystem preferably employs a hierarchical name space scheme in a tree format (sysDB tree) for data storage and retrieval of configuration and other information for the router. Each branch or leaf on the tree is treated as a node or a \u201ctuple\u201d. In an illustrative example, the sysDB tree employs a naming convention analogous to the UNIX\u00ae file system where intermediate nodes of the tree are analogous to UNIX\u00ae directories and where leaf nodes are treated as files and data which are associated with the files. In the preferred embodiment, each node or tuple in the sysDB tree has a pointer to its parent node, a pointer to its next peer, and a pointer to its first child. With this arrangement, all the children of a tuple can be iterated by using the first child as the head of a link list and traversing through the corresponding peer of each child. While the sysDB described above employs a tree structure for data storage and retrieval, other data storage facilities known in the art may be utilized including, for example, a table, btree or relational table scheme without deviating from present invention disclosed herein.","According to a first aspect of the invention, the sysDB carries out the operation of registering subsystem applications for notification for configuration changes made to the router. Subsystem applications may register for notification for configuration data at one or more tuples within the sysDB tree maintained by the sysDB. Subsystems may also register for notification of a \u201cname space\u201d or sub-tree of a tuple, wherein changes to the configuration data within all the child nodes of a selected tuple are also provided during notification. More than one subsystem may register for the same tuple. The sysDB also carries out the operation of unregistering subsystem applications for notification. Once a subsystem is unregistered with the sysDB, the subsystem will no longer receive router change notifications.","According to a second aspect of the invention, the sysDB uses an OS event delivery mechanism to deliver router change information to the registered subsystems. In operation, when the sysDB ascertains that a change has been made to a configuration data maintained at a tuple in the sysDB tree, the sysDB delivers the changed configuration data to subsystem applications registered to receive such information. Change events which trigger a notification may include, for example, a router configuration change, delete, add, or revert.","The sysDB subsystem is operatively coupled to the other subsystems of the IOS for receiving registration and unregistration requests and for providing notification services, among other things. An illustrative IOS may include an Internet protocol (IP) subsystem, an Ethernet subsystem, a dialer subsystem, a point-to-point (PPP) subsystem, an authentication (AAA) subsystem, and a config subsystem, each subsystem operatively coupled to the sysDB subsystem, but not coupled to each other.","The method and system for carrying out router configuration transactions using the centralized database (sysDB) are described in detail in copending application entitled METHOD AND SYSTEM FOR EXECUTING, TRACKING AND RESTORING TEMPORARY ROUTER CONFIGURATION CHANGE USING A CENTRALIZED DATABASE, filed Oct. 12, 1999 and is incorporated herein by reference.","Persons of ordinary skill in the art will realize that the following description of the present invention is illustrative only and not in any way limiting. Other embodiments of the invention will readily suggest themselves to such skilled persons having the benefit of this disclosure.","Referring more specifically to the drawings, for illustrative purposes the present invention is embodied in the apparatus shown  through  and the method outlined in  through . It will be appreciated that the apparatus may vary as to configuration and as to details of the parts, and that the method may vary as to details and the order of the steps, without departing from the basic concepts as disclosed herein. The invention is disclosed generally in terms of a method and system for carrying out router configuration notifications, although numerous other uses for the invention will suggest themselves to persons of ordinary skill in the art.","Referring first to , there is shown generally a block diagram of a router device  suitable for use with the present invention. The router device  includes circuitry or like hardware components well known by those in the art and comprises a CPU , random access memory (RAM)  operatively coupled to the CPU , non-volatile memory (NVRAM)  operatively coupled to the CPU , flash memory (FLASH)  operatively coupled to the CPU , read-only memory (ROM)  operatively coupled to the CPU .","The router device  further includes a plurality of interface facilities (INT) through , each of which are operatively coupled to the CPU . The interface facilities (INT) through comprise typical ports known in the art which connect to external input\/output (I\/O) devices. For example, INT may comprise a console port, INT may comprise an Ethernet port, INT may comprise an auxiliary port, and INT may comprise a serial port. Various other port configurations as is known in the art may be arranged without deviating from the present invention.","The CPU  carries out the computational tasks associated with executing and running the internetwork operating system (IOS) software of the present invention and comprises circuitry or other hardware as is known in the art. In one exemplary embodiment, the CPU  comprises a MIPS R4000 CPU.","The RAM  may comprise random access memory or dynamic random access memory. The RAM  provides the main storage component for the router . The RAM  is also referred to as working storage and contains the running configuration information of the router which is managed by the system database (sysDB) as described in further detail below. RAM  is volatile memory as is lost when power is interrupted to the router .","The NVRAM  normally contains a persistent copy of the configuration information of the router. The configuration information includes, among other things, statements about router-specific attributes, protocol functions, and interface addresses. If power is interrupted to the router , the persistent copy of the configuration is provided to the router to provide normal routing operation without the need for reprogramming or reconfiguring.","The FLASH  is an erasable, programmable read-only memory which contains the internetwork operating system (IOS) software of the router . As is known in the art, flash memory has a structure that enables the flash to store multiple copies of the IOS software. Flash memory content is retained when power is interrupted from the router or the router is restarted.","The ROM  contains an initializing bootstrap program and is used during initial start up of the router . The ROM  usually carries out a power-on self-test (POST) to check the hardware components of the router  as is known in the art.","During start up, the router  conducts the POST check routine which is provided by the ROM . The POST check includes a diagnostic which verifies the basic operation of the CPU , the RAM , the NVRAM , the FLASH , and interface circuitry through . At the conclusion of the POST, the router  loads the IOS software from the FLASH  into the RAM . It will be appreciated that IOS software may be loaded using a variety of methods without deviating from the present invention including, for example, loading the IOS from an external source such as a TFTP server. The router configuration information is then loaded into RAM  from the NVRAM . More particularly, the configuration information is loaded into the database server in RAM . The configuration information for the router may also be loaded into RAM  using other means known in the art. The CPU  then proceeds to carry out the tasks required by the IOS.","Referring next to , there is shown a block diagram of an internetwork operating system (IOS)  in accordance with the present invention. The IOS  which is stored in the FLASH  provides the software functions and routines executed by the CPU  for the router device . The method of the present invention is preferably incorporated into the IOS software device and is executed by the CPU .  depicts a block diagram of an exemplary tree structure  for data storage which is used in conjunction with the IOS  as described herein.","The IOS  comprises a plurality of subsystem applications which are executed by the CPU  and are loaded and resident in RAM . The IOS  includes a system database (sysDB)  subsystem, a config subsystem  coupled to the sysDB , an Internet Protocol (IP) subsystem  coupled to the sysDB , an Ethernet subsystem  coupled to the sysDB , a dialer subsystem  coupled to the sysDB , an authentication (AAA) subsystem  coupled to the sysDB , and a point-to-point protocol (PPP) subsystem  coupled to the sysDB . It will be appreciated that the configuration shown for IOS  is only exemplary and various arrangements of subsystems as known in the art may be used with the method of the present invention. Thus, other subsystems  may be coupled to the sysDB  to provide additional functions. For example, a SONET subsystem may be coupled to the sysDB  to provide optical services.","The sysDB  manages a centralized database coupled therewith which is shown and generally designated as sysDB tree . The centralized database (sysDB tree ) may comprise any data storage structure known in the art, and is preferably structured and configured as a tree format (). The sysDB tree  contains the running router configuration information used by the various subsystems to carry out their respective tasks.","The sysDB tree structure includes a plurality of branches and leaves which stem from the root configuration (cfg) , wherein each branch or leaf is treated as a node or \u201ctuple\u201d. For example,  shows a portion of a sysDB tree  which includes seven (7) tuples for accommodating router configuration data. For example, Ethernet (E) \/ tuple  contains Internet address information for Ethernet Port  (not shown), and Ethernet (E) \/ tuple  contains Internet address information for Ethernet Port  (not shown). Each tuple includes a first \u201ccurrent\u201d field for storing a current or \u201cdefault\u201d value associated with configuration information related to the tuple and a second \u201cold\u201d field for storing an \u201cold\u201d configuration value for the tuple. As described further below, the \u201cold\u201d field at a tuple will contain a value when a transaction is currently active on that tuple. When the \u201cold\u201d field value is empty or NULL at a tuple, a transaction is not associated with that tuple. In certain cases, a plurality of values may be stored at a given tuple by providing an array of fields wherein each field of the array may accommodate a certain value. Other data structures for storing data at a tuple may also be implemented at a tuple without deviating from the present invention. For example, a tuple may include a pointer that points to an external data store which contains the value for the tuple.","In the preferred embodiment, each node or tuple in the sysDB tree has a pointer to its parent node, a pointer to its next peer, and a pointer to its first child. Thus, E \/ tuple  has a pointer to Address tuple  and to E \/ tuple . With this arrangement, all the children of a tuple can be iterated by using the first child as the head of a link list and traversing through the corresponding peer of each child.","The sysDB  further includes an iterating function for navigating to a particular tuple within the sysDB tree . A tuple iterator is created for traversing the sysDB tree  and is destroyed after completion of its traversal operation. Preferably a tuple iterator does not lock any of the tuples over which it traverses. The sysDB  further includes a notification unit (NU)  for carrying out notification tasks which are described in more detail in conjunction with  through . The sysDB  includes other functions (not shown) related to carrying out transactional and verification tasks.","The config subsystem  carries out the operation of receiving configuration commands for a user of the router, executing the configuration command received from the user and providing configuration information to the user of the router upon request from the user. As described above, this router configuration information is stored and managed by the sysDB  in the sysDB tree .","The IP subsystem  carries out the operation of providing wide-area connectivity using a set of protocols associated with Internet Protocol (IP). As is known in the art, the IP subsystem provides packet filtering and forwarding functions for the IP protocol.","A connector device (not shown) may be provided as one of the interface facilities through to connect Ethernet facilities to the router . The Ethernet subsystem  carries out the operation of providing packet filtering based on Ethernet MAC (Layer 2) or IP (Layer 3) addresses as is known in the art and packet forwarding as is known in the art.","The dialer subsystem  carries out the operation of providing dial-in connection services to a user of the router. To this end, the dialer subsystem initiates terminal reception of a user's access credentials, normally in the form of a name and a password.","The AAA subsystem  carries out the operation of authenticating the access credentials of users of the router. The AAA subsystem  verifies the name and password of the user, which is obtained from the dialer subsystem  and determines configuration data for the user as well as access privileges. Configuration data may include such information as the user's IP address, for example. The configuration data for the user is stored in the sysDB tree  by sysDB  via a transaction request from the AAA subsystem .","The PPP subsystem  carries out the operation of providing Point-to-Point protocol services over a point-to-point link. As an aspect of providing Point-to-Point protocol services, the PPP subsystem  provides a method of encapsulating multi-protocol datagrams into an encapsulated protocol, provides a Link Control Protocol (LCP) which establishes, configures and test the point-to-point link, and provides a Network Control Protocol (NCP) using the encapsulated protocol, which is normally IP.","In operation, the various subsystem applications  through  may register to be notified of changes to configuration data maintained in the sysDB tree  by the sysDB subsystem . During the registration, the subsystem identifies which tuple the subsystem would like notification. The system may also identify a name space (i.e., the sub-tree of a tuple) for which the subsystem would like notification.","Once a subsystem application has been registered for notification, the sysDB  will notify such registered subsystem of changes made within the tuples or the name space for which the subsystem has registered. Transactions made within the tuples that trigger notification include, for example, tuple create requests, tuple delete requests, tuple modification requests, and tuple reversion requests.","A subsystem may also unregister with the sysDB . When the sysDB  receives an unregister request from a subsystem, the sysDB  removes the registration notification for that subsystem. Once a subsystem is unregistered, the sysDB  will no longer notify such subsystem of router configuration changes.","The method and operation of invention will be more fully understood with reference to the flow charts of  through , as well as  through .  is a flow chart showing generally the steps involved in registering a subsystem application for notification.  is a flow chart showing generally the steps involved in unregistering a subsystem application from notification.  is a flow chart showing generally the steps involved in notifying a subsystem application during a tuple create event.  is a flow chart showing generally the steps involved in notifying a subsystem application during a tuple delete event.  is a flow chart showing generally the steps involved in notifying a subsystem application during a tuple change event.  is a flow chart showing generally the steps involved in generating notification to subsystem applications. The order of steps as shown in  through  and described below are only exemplary, and should not be considered limiting.","Referring now to , as well as  through , there is shown generally the steps of registering a subsystem for notification. A subsystem may request to be notified of changes made to the configuration data stored in the sysDB tree . For example, the PPP subsystem will request notification of changes to IP addresses on any serial interface.","At step , a subsystem issues a registration request to the sysDB  for notification. This request will indicate, among other things, the configuration data (tuple) for which the subsystem is requesting notification and whether the subsystem is requesting notification for a \u201cname space\u201d which includes the sub-tree data associated with the tuple. Step  is then carried out.","At step , the sysDB  receives the registration request of step . In response to this request, the sysDB  calls a tuple iterator function to find the location of the tuple for which notification is requested. The iterator function searches the sysDB tree  starting at the root (cfg)  to ascertain the location of the requested tuple. Step  is then carried out.","At step , the iterator function determines whether the requested tuple was found during the search of step . If the tuple is not found, step  is carried out. Otherwise, step  is carried out.","At step , the iterator function was not able to find the requested tuple in the sysDB tree . The absence of a tuple indicates that data for that tuple currently is not available. However, since some of the configuration data maintained in the sysDB  is generated dynamically during the operation of the router, the tuple may contain configuration data at some later time during the operation of the router. At this step, a tuple is created in the sysDB tree  for which the present notification registration request is associated with. The value for this newly created tuple is set to a \u201cno data\u201d state. Creation of the tuple is necessary during this step to accommodate the registration of notification, although the configuration value for the tuple may be defined at some later time. Step  is then carried out.","At step , the sysDB  registers the notification for the requested tuple. The sysDB  indicates at the requested tuple which subsystem will be notified in the event of a change of configuration data associated with the tuple. As noted, one or more subsystems may register for notification one or more of the tuples of the sysDB tree . Thus each tuple of the sysDB tree  may register one or more router subsystems for notification. Step  is then carried out.","At step , the sysDB  determines whether the request of step  was a registration request for a name space (sub-tree) of a tuple. Where a subsystem registers for notification of a name space, the registered subsystem will be notified of configuration changes made at the requested tuple as well as configuration changes made at the children nodes of the requested tuple. If the registration request was for a name space of the requested tuple, step  is carried out. Otherwise, step  is carried out.","At step , the subsystem has requested notification of a name space. Responsive to this request, the sysDB  sets the sub-tree notification flag for the requested tuple. This flag indicates that when a change is made at any of its child tuples of the requested tuple, that notification will be made to the requesting subsystem. Step  is then carried out.","At step , the sysDB  iterates through each child tuple of the requested tuple to set its \u201cparent has sub-tree notification\u201d flag. This flag indicates that when a change or update is made at the child tuple level, notification at a parent tuple is to be made to a requesting subsystem. This flag will also be set for child tuples created at a later time which are child tuples of the requested tuple.","At step , the registration is completed. The sysDB  will transmit an acknowledgment to the requesting subsystem to indicate that its registration for notification was successful.","Referring next to , as well as  through , there is shown generally the steps of unregistering a subsystem from notification. Once a subsystem is unregistered with the sysDB , the subsystem no longer receives change notification for the tuple for which unregistration is requested.","At step , a subsystem issues an unregistration request to the sysDB . This request indicates the tuple for which unregistration is requested. The subsystem may unregister with one tuple or name space and maintain notification registration with other tuples or name spaces.","At step , the sysDB  receives the unregistration request of step . In response to this request, the sysDB  calls a tuple iterator function to find the location of the tuple for which unregistration is requested. The iterator function searches the sysDB tree  starting at the root (cfg)  to ascertain the location of the requested tuple. Step  is then carried out.","At step , the iterator function determines whether the requested tuple was found during the search of step . If the tuple is not found, step  is carried out. Otherwise, step  is carried out.","At step , the iterator function was not able to find the requested tuple in the sysDB tree . The absence of a tuple for unregistration is interpreted as an error because unregistration is proper only when a prior registration was made. Since the iterator function did not find the requested tuple, the unregistration request is improper and an error message is displayed to the user to indicate an unregistration error.","At step , the sysDB  removes the notification registration for the requested tuple. Once notification registration is removed or otherwise deleted, the requesting subsystem of step  will not receive future change notifications for the requested tuple. Step  is then carried out.","At step , the sysDB  determines whether the request of step  was an unregistration request for a name space (sub-tree) of the requested tuple. As noted above, where a subsystem registers for notification of a name space, the registered subsystem will be notified of configuration changes made at the requested tuple as well as configuration changes made at the children nodes of the requested tuple. Similarly, if unregistration is requested for a name space, notification for changes made at children nodes of the requested tuple must also be removed. If the unregistration request was for a name space of the requested tuple, step  is carried out. Otherwise, step  is carried out.","At step , the sysDB  removes the sub-tree notification flag for the requested tuple. Removal of this flag indicates that the requested tuple no longer receives notification of changes made at any of its child tuples. Step  is then carried out.","At step , the sysDB iterates through each child tuple of the requested tuple to remove its \u201cparent has sub-tree notification\u201d flag. Once removed, notification of changes made at any of the child tuples will not be made to its parent tuple. Step  is then carried out.","At step , the unregistration is complete. The sysDB  will transmit an acknowledgment to the requesting subsystem to indicate that its unregistration was successful.","As described above, changes made within the tuples of database tree  that trigger notification include, for example, tuple create requests, tuple delete requests, tuple modification requests, and tuple reversion requests. Referring now to , as well as  through , there is shown generally the steps of notifying a subsystem application during a tuple create event. A create tuple event occurs when a subsystem issues a create tuple request with the sysDB .","At step , a subsystem issues a create tuple request to the sysDB . Since the configuration data maintained in the sysDB tree  is dynamically created during the execution of the router, a subsystem may request a tuple to be created during the operation of the router. For example, the config subsystem  may issue a command to define the IP address of an interface. In this case, a request is made to create a tuple for the IP address for the interface. Step  is then carried out.","At step , the sysDB  receives the create tuple request of step  and ascertains the location of the tuple in the sysDB tree . The sysDB  calls a tuple iterator function to find the location of the tuple for which creation is requested. The iterator function searches the sysDB tree  starting at the root (cfg)  to ascertain the location of the requested tuple. Step  is then carried out.","At step , the iterator function determines whether the requested tuple was found during the search of step . In certain cases, a tuple may have already been created by another process. For example, the steps for registering for change notification describe a tuple creation step in conjunction with . If the tuple is not found, step  is carried out. Otherwise, step  is carried out.","At step , the sysDB  creates a tuple node in the sysDB tree  for the requested tuple of step . Step  is then carried out.","At step , the sysDB  sets the tuple state to \u201ccreated\u201d and stores the value for the configuration data with the tuple. The \u201ccreated\u201d state indicates that the tuple has been created and that the tuple has configuration data. Step  is then carried out.","At step , the sysDB  inspects the parent tuple of the newly created tuple of step  to ascertain whether the parent tuple has its sub-tree notification flag set. If the parent tuple has its sub-tree notification flag set, notification to requesting subsystem(s) registered at the parent tuple is appropriate. If the parent tuple has its sub-tree notification flag set, step  is carried out. Otherwise step  is carried out.","At step , the sysDB  has determined that the parent tuple of the newly created tuple of step  has its sub-tree notification flag set. The sysDB  sets its \u201cparent has sub-tree notification\u201d flag to indicate that when a change is made at this child tuple, its parent tuple is to be notified of changes made. Step  is then carried out.","At step , the sysDB  executes the notification routine as described below in conjunction with . As described in further detail below, the notification routine determines whether notification to registered subsystems will be carried out at this tuple and\/or its parent tuple.","Referring now to , as well as  through , there is shown generally the steps of notifying a subsystem application during a tuple delete event. A delete tuple event occurs when a subsystem issues a delete tuple request with the sysDB .","At step , a subsystem issues a delete tuple request to the sysDB . Configuration data may be deleted in a variety of situations as is known in the art. For example, when a user unconfigures the IP protocol of an interface (serial, for example) the IP address of that interface will be deleted by the config subsystem . Step  is then carried out.","At step , the sysDB  receives the delete tuple request of step  and ascertains the location of the tuple in the sysDB tree . The sysDB  calls a tuple iterator function to find the location of the tuple for which deletion is requested. The iterator function searches the sysDB tree  starting at the root (cfg)  to ascertain the location of the requested tuple. Step  is then carried out.","At step , the iterator function determines whether the requested tuple was found during the search of step . If the tuple is not found, step  is carried out. Otherwise, step  is carried out.","At step , the iterator function was not able to find the requested tuple in the sysDB tree . The absence of a tuple for deletion is interpreted as an error because deletion is proper only if the tuple was previously created. Since the iterator function did not find the requested tuple, the deletion request is improper and an error message is displayed to the user to indicate a deletion error.","At step , the configuration data associated with the requested tuple is deleted, and the tuple is set in the \u201cno data\u201d data. Normally, the tuple or node is not actually deleted or purged from the sysDB tree , but rather its configuration data contents are purged or otherwise deleted. Step  is then carried out.","At step , the sysDB  executes the notification routine as described below in conjunction with . If registration for notification is made for the deleted tuple, notification of the present deletion will be carried out to subsystems registered for notification.","Referring now to , as well as  through , there is shown generally the steps of notifying a subsystem application during a tuple change or modification event. A change tuple event occurs when a subsystem issues a configuration data change with the sysDB . Configuration changes to a router device is common as is known in the art and may include, for example, changes to IP addresses, subnet masks, and other protocol parameters.","At step , a subsystem issues a change tuple request to the sysDB . Step  is then carried out.","At step , the sysDB  receives the change tuple request of step  and ascertains the location of the tuple in the sysDB tree . The sysDB  calls a tuple iterator function to find the location of the tuple for which a change is requested. The iterator function searches the sysDB tree  starting at the root (cfg)  to ascertain the location of the requested tuple. Step  is then carried out.","At step , the iterator function determines whether the requested tuple was found during the search of step . If the tuple is not found, step  is carried out. Otherwise, step  is carried out.","At step , the iterator function was not able to find the requested tuple in the sysDB tree . The absence of a tuple for change or update is interpreted as an error because a change of value at a tuple is proper only if the tuple was previously created. Since the iterator function did not find the requested tuple, the change request is improper and an error message is displayed to the user to indicate a change request error.","At step , the sysDB  determines whether the requested tuple found in step  has verification registrations. If a tuple has verification registrations, subsystems, which are registered for \u201cverification\u201d at the tuple, must first authorize changes before such changes are permitted. Verification registrations are described in further detail in copending application entitled METHOD AND SYSTEM FOR VERIFYING CONFIGURATION TRANSACTIONS MANAGED BY A CENTRALIZED DATABASE filed on Oct. 12, 1999 which is expressly incorporated by reference herein. If verification registrations exist at the requested tuple then step  is carried out. Otherwise step  is carried out.","At step , the sysDB  determines that the requested tuple has verification registrations. The sysDB  then calls the verification handler routine which either authorizes the change request or denies the change request. The verification handle routine is described further in copending application entitled METHOD AND SYSTEM FOR VERIFYING CONFIGURATION TRANSACTIONS MANAGED BY A CENTRALIZED DATABASE filed on Oct. 12, 1999. Step  is then carried out.","At step , the sysDB  receives a reply from the verification handler routine. The verification handler will return a \u201csuccess\u201d reply for authorized changes, or an \u201cerror\u201d reply for unauthorized changes. If a \u201csuccess\u201d reply is issued, step  is carried out to set the tuple value. Otherwise step  is carried out to generate an error message.","At step , the verification handler returned an \u201cerror\u201d in response to proposed changes issued at step . An error message is generated and is displayed to the user.","At step , the sysDB  determines whether the requested tuple has its \u201cparent has sub-tree verification\u201d flag set. If the \u201cparent has sub-tree verification\u201d flag is set, then a subsystem is registered at a parent level to verify changes to a name space which includes the requested tuple before such change is carried out. If the \u201cparent has sub-tree verification\u201d flag is set at the requested tuple, then step  is carried out. Otherwise, step  is carried out to set the tuple value.","At step , the sysDB  iterates the sysDB tree  to the parent of the currently inspected tuple, to thereby ascertain subsystems, if any, registered for verification at the parent tuple. It will be appreciated that when actually carrying out the verification sequence, described in step , the present invention verifies the value(s) provided in the change request of step  with such registered subsystems, if any. Step  is then carried out.","At step , the sysDB  determines whether the tuple iterated to in step  is the root (cfg)  of the sysDB tree . Generally, verification registrations are not carried out at the root node. If the currently iterated tuple is the root (cfg)  of the sysDB tree , step  is carried out to set the tuple value. Otherwise step  is repeated again to confirm verification at the iterated parent level.","At step , the sysDB  changes the configuration value for the tuple. In the preferred embodiment, the previous value for the tuple may be stored and may be reverted upon request. Copending application entitled METHOD AND SYSTEM FOR EXECUTING, TRACKING AND RESTORING TEMPORARY ROUTER CONFIGURATION CHANGE USING A CENTRALIZED DATABASE, filed Oct. 12, 1999, describes in further detail the method for carrying out configuration changes and reversions with a centralized database and is expressly incorporated by reference herein. Step  is then carried out.","At step , the sysDB  executes the notification routine as described below in conjunction with . As described in further detail below, the notification routine determines whether notification to registered subsystems will be carried out at this tuple and\/or its parent tuple.","Referring now to  as well as  through , there is shown generally the steps of generating a notification to a subsystem based on tuple creation as described in conjunction with  above, based on tuple deletion as described in conjunction with  above, and based on tuple change or update as described in conjunction with  above.","At step , the sysDB  determines the type of notification to be carried out. As noted previously, a notification will be generated when a tuple is created, deleted or changed. Other events for triggering notification may also be used in conjunction with the present invention including, for example, during a revert sequence where previous changes to a tuple are reverted. Step  is then carried out.","At step , the sysDB  begins iteration at the affected tuple by providing a current tuple pointer to this affected tuple. The affected tuple is the tuple that was created, deleted or changed according to the steps as outline in , , and  respectively. Step  is then carried out.","At step , the sysDB  determines whether the current tuple has registration for notification. If any subsystems have registered for notification with the affected tuple, then step  is carried out. Otherwise step  is carried out.","At step , the sysDB  transmits a notification message to the subsystems registered for notification with the current tuple of step . The notification message indicates the type of transaction (create, delete, or change) that occurred at the tuple and the current configuration value of the tuple, if any. Step  is then carried out.","At step , the sysDB  determines whether the current tuple has its \u201cparent has sub-tree notification\u201d flag set. This flag will be set if a subsystem has registered for notification at a parent level for changes made at the current level as described above in conjunction with . If the \u201cparent has sub-tree notification\u201d flag is set at the current tuple, step  is carried out. Otherwise, the notification process is complete and step  is carried out.","At step , the notification process is completed. Any variables or functions created during the notification process are destroyed or otherwise purged.","At step , the sysDB  iterates to the parent node of the current tuple, to thereby ascertain subsystems, if any, registered for notification at the parent tuple. It will be appreciated that when carrying out the notification sequence, described in step , the present invention notifies such registered subsystems of the changes made during step  of . Step  is then carried out.","At step , the sysDB  determines whether the tuple iterated to in step  is the root (cfg)  of the sysDB tree . Generally, notification registrations are not carried out at the root node. If the currently iterated tuple is the root (cfg)  of the sysDB tree , step  is carried out to complete the notification process. Otherwise step  is repeated again to provide notification at newly iterated tuple.","At step , the notification process is completed. Any variables or functions created during the notification process are destroyed or otherwise purged.","Accordingly, it will be seen that this invention provides a method for carrying out router configuration change notifications using a centralized database. Although the description above contains many specificities, these should not be construed as limiting the scope of the invention but as merely providing an illustration of the presently preferred embodiment of the invention. Thus the scope of this invention should be determined by the appended claims and their legal equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be more fully understood by reference to the following drawings, which are for illustrative purposes only.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
