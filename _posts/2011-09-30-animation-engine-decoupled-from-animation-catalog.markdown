---
title: Animation engine decoupled from animation catalog
abstract: Embodiments provide animations with an animation engine decoupled from an animation catalog storing animation definitions. A computing device accesses at least one of the animation definitions corresponding to at least one markup language (ML) element to be animated. Final attribute values associated with the ML element are identified (e.g., provided by the caller or defined in the animation definition). The computing device animates the ML element using the accessed animation definition and the identified final attribute values. In some embodiments, the animation engine uses a single timer to animate a plurality of hypertext markup language (HTML) elements displayed by a browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08884971&OS=08884971&RS=08884971
owner: Microsoft Corporation
number: 08884971
owner_city: Redmond
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","ADDITIONAL EXAMPLES"],"p":["Animations in documents enhance the user experience. For example, animations improve the usability and visual appeal of a website. Example animation include deleting a table from a web page, moving a hypertext markup language (HTML) element from one position to another, or otherwise visually altering HTML elements. With existing systems, however, ensuring a consistent look-and-feel to the animation experience across multiple web pages or in a platform environment is difficult. For example, some existing systems require developers to code the animations into each caller of the animation engines. For example, to ensure the same look-and-feel, some existing systems require developers to code the exact same animation calls multiple times in the product. In such environments, attempting to apply an update to an animation necessitates an update to each of the calls to invoke the animation engines. Similarly, to construct complex animations with some existing systems, developers have to modify each of the calls to invoke the animation engine with custom code.","Embodiments of the disclosure provide decoupled animation of markup language (ML) elements. A computing device accesses at least one animation definition corresponding to at least one markup language (ML) element to be animated. One or more final attribute values associated with the ML element are identified. The computing device animates the ML element using the accessed animation definition and the identified final attribute values. In some embodiments, a single timer is used to coordinate animation of multiple ML elements.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","Referring to the figures, embodiments of the disclosure provide animation of markup language (ML) elements or objects using an animation engine  decoupled from a catalog  that includes a library of animation definitions . In some embodiments, the animation engine  executes a single timer to operate on a plurality of animations to enable smooth and coordinated animation.","Decoupling the animation engine  from the catalog  that contains the animation definitions  allows animation providers  or developers to easily configure the animations by making changes to the catalog , rather than to each invocation of the animation engine . For example, timings, positions, and durations of existing animation in the catalog  may be adjusted, and new animations may be added to the catalog . Because the catalog  is available to multiple elements in multiple pages and scenarios trying to execute the same animation, the changes to the catalog  are available to each of these elements without the need to re-create or re-apply the animation changes multiple times. As such, embodiments of the disclosure enable a consistent animation personality across web pages.","While aspects of the disclosure are described with reference to the ML element being a hypertext markup language (HTML) element, embodiments of the disclosure are operable with any object to be animated. Further, aspects of the disclosure are not limited to animations on web pages, and instead contemplate animations in any document capable of displaying output from the animation engine .","Referring next to , an exemplary block diagram illustrates the animation engine  using the catalog  of animation definitions  to animate markup language elements. In the example of , the animation engine  is separate from, although optionally associated with or executed by, a computing device  that requests the animation and displays the animation (e.g., to a user ). In such embodiments, the animation engine  may execute as a server or a cloud service  receiving animation requests from the computing device  and providing animations for display on the computing device . In other embodiments (e.g., see ), operation of the animation engine  is performed by the computing device .","In the example of , the animation requests are received, for example, through the use of application programming interfaces (APIs)  called by application programs  executing on the computing device . In some embodiments, a browser executing on the computing device  generates the animation request. While shown external to the computing device  in , the APIs , or a portion thereof, may be stored and invoked locally on the computing device .","One or more animation providers  provide animation code (e.g., animation extensible markup language code) describing one or more animations. The animation code is stored in the catalog . The animation code may be generally referred to as animation definitions , although in some embodiments the animation code may be conformed or altered to create an animation definition  suitable for storage in the catalog . The catalog  may be external to the computing device  as shown in , or may be stored on the computing device  (e.g., as a library) with the animation engine  as shown in . For example, the catalog  may be loaded into memory as a library by the computing device  before an animation is run, in embodiments in which the computing device  executes the animation engine .","The animation engine  is decoupled or otherwise separate from the catalog . The animation engine  may access the catalog  to obtain animation definitions  (e.g., using an animation identifier or other pointer or reference included in the animation request), or may receive the animation definitions  from the catalog  via another component or device (e.g., the API ).","The application program  requests an animation using one of the APIs . For example, the application program  may request that a particular ML element be moved 50 pixels to the right of its current location. The animation request and the corresponding animation definition  are identified and provided as input to the animation engine . For example, the API  may identify the corresponding animation definition  or the animation engine  itself may obtain the corresponding animation definition . The animation engine  performs the animation based on the animation request and the animation definition  for display on the computing device  (e.g., by the application program ).","In some embodiments, the requested animation is to be displayed by a browser. Aspects of the disclosure adapt to different browser capabilities. For example, the animation request may identify the browser type. Based on the browser type, the relevant animation definitions  are retrieved. For example, if the browser supports JAVASCRIPT scripting language, the animation definitions  having JAVASCRIPT code are retrieved. In another example in which the browser supports cascading style sheets (e.g., CSS3), the animation definitions  having CSS3 classes are retrieved. In such embodiments, the catalog  includes extensions supporting the different browser types, though other means of supporting different browser types are contemplated. The animation engine  runs different code to support the different animation technologies such as JAVASCRIPT and CSS3.","Referring next to , an exemplary block diagram illustrates the computing device  storing computer-executable components that access the animation definitions . The computing device  represents any device executing instructions (e.g., as application programs, operating system functionality, or both) to implement the operations and functionality associated with the computing device . The computing device  may include a mobile computing device or any other portable device. In some embodiments, the mobile computing device includes a mobile telephone, laptop, tablet, computing pad, netbook, gaming device, and\/or portable media player. The computing device  may also include less portable devices such as desktop personal computers, kiosks, and tabletop devices. Additionally, the computing device  may represent a group of processing units or other computing devices.","The computing device  has at least one processor , a memory area , and at least one display . The processor  includes any quantity of processing units, and is programmed to execute computer-executable instructions for implementing aspects of the disclosure. The instructions may be performed by the processor  or by multiple processors executing within the computing device , or performed by a processor external to the computing device . In some embodiments, the processor  is programmed to execute instructions such as those illustrated in the figures (e.g.,  and ).","The computing device  further has one or more computer readable media such as the memory area . The memory area  includes any quantity of media associated with or accessible by the computing device . The memory area  may be internal to the computing device  (as shown in ), external to the computing device  (not shown), or both (not shown).","The memory area  stores, among other data, one or more of the applications . The applications , when executed by the processor , operate to perform functionality on the computing device . Exemplary applications  include mail application programs, web browsers, calendar application programs, address book application programs, messaging programs, media applications, location-based services, search programs, and the like. The applications  may communicate with counterpart applications or services such as web services accessible via a network. For example, the applications  may represent downloaded client-side applications that correspond to server-side services executing in a cloud.","In the example of , the memory area  further stores one or more of the animation definitions . The animation definitions  may be stored in the memory area  as part of a library of animation definitions  obtained from another device or service. Exemplary animation definitions  include timing data and curve data. The timing data and curve data defines the motion of an ML element using changes in attribute values over time. Aspects of the disclosure, however, contemplate other forms of animation definitions  that represent, describe, or define animations in other ways.","The memory area  further stores one or more computer-executable components. Exemplary components include a catalog component , an interface component , a timer component , and a throttle component . Operation of these components is described below with reference to .","The computing device  includes at least one display  for displaying the animations to the user , along with computer-executable instructions (e.g., a driver) for operating a graphics card to enable the display .","In some embodiments, the computing device  also includes a communications interface such as a network interface card and\/or computer-executable instructions (e.g., a driver) for operating the network interface card.","Referring next to , an exemplary flow chart illustrates animation of ML elements and optional adjustment of subsequent animations based on animation performance metrics. The operations illustrated in  may be performed by the computing device , or by the cloud service  that then provides the animations to the computing device . The computing device  (or cloud service ) may animate the ML element using a scripting language (e.g., JAVASCRIPT scripting language) in a browser or with a style sheet language (e.g., cascading style sheets) in a browser.","At , the animation definition  corresponding to an ML element to be animated is accessed. For example, a browser application or other calling code uses the API  to send a request to perform a particular animation on a particular HTML element on a web page. The request may take the form of RunAnimation(animationID). The requested animation has one of the animation definitions  corresponding thereto. For example, the requested animation is one of the animations available in the catalog  of animation definitions . In some embodiments, the animation definition  corresponding to the requested animation is accessed to obtain timing and curve information for the animation.","At , one or more final attribute values associated with the ML element and the animation are identified. For example, the final attribute values are defined by the called by inclusion as one or more of the arguments in the API  call requesting the animation. Alternatively, the final attribute values may be defined in the animation definition . The final attribute values represent the end-of-animation values or post-animation values of at least one attribute involved in the requested animation of the ML element. Exemplary attributes include position, height, width, and opacity, although other attributes are contemplated. The position attribute may be a two-dimensional value such as (x,y), three-dimensional value such as (x,y,z), or otherwise. The units of measure for the position, height, and width attributes are represented as pixels, in some embodiments. The opacity may be represented as a percentage or with another metric.","At , the ML element is animated using the accessed animation definition  and the final attribute values. For example, the animation engine  takes the animation definition  as input along with the final attribute values to perform the requested animation on the ML element.","In some embodiments, the animation engine  may receive requests to animate a plurality of ML elements. Alternatively or in addition, a plurality of animations may be involved in performing the requested animation on a single ML element. For example, deleting an ML element may involve fading out one ML element while transitioning another ML element to a different position. In such embodiments, the animations are coordinated with a single timer executing in a single thread. That is, in some embodiments, the animation engine  is a single-threaded application operating on a single timer to perform a plurality of animations on a plurality of ML elements. The single timer enables animations running on different ML elements and attributes to be synchronized thus providing coordination among animations.","Some aspects of the disclosure contemplate monitoring the performance of animations to adjust the behavior of subsequent animations. The animation engine , or logic or a device external to the animation engine , may perform the monitoring or otherwise collect telemetry data. For example, the browser or a browser plug-in may monitor performance of the animation. At , performance metrics for at least one of the animations are computed. Exemplary performance metrics include the frames rendered per second (the frame rate), the total duration of the animation run, the actual number of frames rendered by the browser, the actual time taken to render each frame, the average time per frame, the standard deviation of the actual times taken to render the frames, and the minimum and maximum frame times. The quality and smoothness of the executed animations may be inferred from the performance metrics. At , the behavior of subsequent animations may be adjusted based on the performance metrics. For example, if the frames rendered per second drops below a pre-defined threshold such as 24 frames per second, subsequent animations may be automatically disabled. The undesirable frame rate may result from hardware performance issues associated with the machine executing the animation engine . In another example, if the standard deviation of the times taken to render the frames drops below a particular threshold (e.g., less than 10), subsequent animations may be automatically disabled. In other examples, the performance metrics may be combined to detect animations perceived by the user  as poor (e.g., a frame rate less than 24 and a standard deviation less than 10).","The user  may also manually disable animations. For example, the animation engine  may be running on a device with a small display or limited resources, or the user  perceives that the animations are not smooth (e.g., jerky or jagged). In examples in which the application program  is a browser, the disabled animations may be re-enabled when the user  re-starts the browser session, opens another browser session, or when the user  manually turns on animations.","The performance metrics, or the raw performance data collected during the animation, may be aggregated on a device (e.g., cloud service ) for analysis by the vendor of the animation engine  or the animation providers . The analysis may enable identification of animations that render poorly, and may enable identification of improvements.","The computer-executable components illustrated in  may be executed to perform one or more of the operations illustrated in . While described with reference to execution by the processor  of the computing device , aspects of the disclosure contemplate execute of the components by the cloud service . For example, the catalog component , when executed by the processor , causes the processor  to access at least one of the animation definitions  corresponding to at least one ML element to be animated. While the catalog  and the animation definitions  reside on the same device in some embodiments, the catalog component  accesses the animation definition  in other embodiments by communicating with the cloud service  storing the animation definitions .","The interface component , when executed by the processor , causes the processor  to identify one or more final attribute values associated with the ML element. For example, the interface component  may be the API  called by the application program . The final attribute values may be included as arguments in an API  function call.","The timer component , when executed by the processor , causes the processor  to animate the ML element using the animation definition  accessed by the catalog component  and the final attribute values identified by the interface component .","The throttle component , when executed by the processor , causes the processor  to compute performance metrics for the animation performed by the timer component  and to adjust a subsequent animation based on the computed performance metrics. In some embodiments, the throttle component  computes the performance metrics during each iteration of a single timer animating the ML element. The throttle component  adjusts the subsequent animation by disabling the subsequent animations if the computed performance metrics violate a pre-defined threshold.","Referring next to , an exemplary flow chart illustrates use of a single timer to animate ML elements with a queue . The operations illustrated in  may be performed by the animation engine . The animation engine  may be executed by the computing device . In other embodiments, the animation engine  may be implemented by the cloud service  that provides, during each iteration of the single timer, the ML element updated by the animation to the computing device  for display.","If the animation engine  receives a request to animate a plurality of ML elements at  (e.g., via the API  call by the application program ), the animation engine  accesses the animation definition(s)  corresponding to the requested animation(s) at . For example, the received request identifies one or more animations, and one or more final attribute values associated with the plurality of ML elements and the animations. In some embodiments, the final attribute values correspond to attributes including, but not limited to, horizontal position, vertical position, width, height, and opacity.","At , the animation engine  populates the queue , buffer, or other memory structure with queue elements  or animation objects corresponding to the accessed animation definitions . The queue  represents the currently active animations. The queue elements  are defined based at least on the final attribute values and the accessed animation definitions . For example, the queue elements  represent, or are derived from, the timing data and the curve data from the accessed animation definitions . In some embodiments, the animation definitions  are divided into components for simultaneous operation. For example, a request to delete a row in a table may include fading out one row while moving up any rows beneath the deleted row. In this example, each of the rows may be represented as an ML element and animations will be performed on each of the ML elements to visually effect the row deletion request.","Once the queue  has been populated with the queue elements , the animation engine  determines whether the single timer has triggered at . The single timer may trigger via a stepper function at regular intervals (e.g., every 16 milliseconds to enable 60 frames per second) or irregular intervals (e.g., event-driven). If the timer has triggered at , the animation engine  processes each of the queue elements  at . For example, the animation engine  calculates current attribute values for each of the attributes being animated for the plurality of ML elements at .","The current attribute value for a particular attribute of one of the ML elements may be calculated from the original attribute value before animation (e.g., a start value), the desired final attribute value (e.g., a target value), the desired duration of the animation, and the time vs. value curve from the animation definition . For example, to change an attribute value from Pat time Tto Pat time Tfollowing a curve P=f(T) where 0<=T<=1, the value Pat a given time Tis shown below in Equation (1).\n\n(()\/())*()\u2003\u2003(1)\n\nWith each invocation of the timer, the attribute of the ML element is set to the value computed from Equation (1). In this way, animation of a given ML element is achieved by gradually changing the attribute values over a period of time. While embodiments of the disclosure are operable with Equation (1) above, other animation methods for computing attribute values are within the scope of the disclosure.\n","Each of the ML elements is then displayed in accordance with the calculated current attribute values at . In embodiments in which the operations are performed by the cloud service , the calculated current attribute values are provided to the computing device  to update the display of the ML elements.","If the calculated current attribute values for any of animations correspond to the final attribute values from the received request at , the animation has completed. For example, the calculated current attribute values may equal (or approximate) the final attribute values. The animation engine  removes the queue elements  corresponding to the completed animation from the queue , and calls a finish function or callback function at  to inform the application program  that requested the animation of completion. The finish function includes any means for the animation engine  to communicate with the requesting application program , or otherwise indicate animation completion (e.g., store a particular value in a particular memory location). In some embodiments, the animation request includes a finish function associated with requested animation or with the ML element. Execution of the finish function may perform post-animation cleanup such as purge data structures, adjusting the state of the animated ML element or other ML elements.","When each of the animations has completed, the timer in the animation engine  is turned off or otherwise disabled.","Referring next to , an exemplary block diagram illustrates separation of the animation engine  using animation definitions  to populate the queue  and process queue elements . In the example of , the animation engine  receives or otherwise accesses the animation definitions  based on a requested animation. The animation engine  populates the queue  or other memory structure with queue elements  derived from the received animation definitions . Exemplary queue elements  include queue element #1 through queue element #N.","During animation, the animation engine  executes a single timer to process each of the queue elements  in sync. That is, during each interval, trigger, activation, or other iteration of the single timer, the animation engine  processes each of the queue elements  to enable the animations effected by the processing to appear coordinated and\/or synchronized. After processing each of the queue elements  during an iteration, the animations are displayed or provided to the display .","The animation engine  and queue  may be associated with the cloud service , in some embodiments. The cloud service  provides the animations to the display via any network, including but not limited to the Internet. In other embodiments, the animation engine  and queue  may execute on a device connected to the computing device  in a peer-to-peer configuration.","In some embodiments, the animation engine  may receive, or check for, additional requests to animate a particular ML element currently being animated. In such an example, the animation engine  (or other component) determines whether the animation request is directed to the same attribute currently being animated. If so, the animation engine  aborts the current animation for that attribute, stores the current state of the ML element (e.g., the attribute values), and performs the additionally requested animation for that attribute starting with the current state of the ML element. After completing the additional animation, the animation engine  calls the finish functions of both of the requested animations. If the additional animation does not affect the attribute of the ML element currently being animated, the animation engine  performs the requested, additional animation while the current animation is allowed to run to completion.","In an example animation library, a curve takes the form of a data structure including the following data fields:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Curve"]},{"entry":[{},"{"]},{"entry":[{},"\u2003Integer ID"]},{"entry":[{},"\u2003CurveType type; \/\/ enum: {Instant, Hold, Linear, CubicBezier}"]},{"entry":[{},"\u2003float x1, y1, x2, y2; \/\/ control points for a CubicBezier curve"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"With such an exemplary definition of a curve, curves may be defined by the following call:\n\n_Curves[ID]=new Curve(ID, type, 1, 1, 2, 2)\n\nHowever, aspects of the disclosure contemplate other means for defining curve data, and are not limited to the examples herein.\n","In an exemplary animation library, the animation definition  may be represented as an array of KeyFrames with an identifier, as shown in the following data structure.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Animation"]},{"entry":[{},"{"]},{"entry":[{},"\u2003int ID;"]},{"entry":[{},"\u2003SPKeyFrame[ ] keyFrames;"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The structure of an exemplary KeyFrame is shown below.",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["KeyFrame",{}]},{"entry":["{",{}]},{"entry":["\u2003KeyFrameType type;","\/\/ attribute to animate; enum: {PositionX,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"PositionY, Height, Width, Opacity}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003int curveID;","\/\/ pointer into the global Curves list"]},{"entry":["\u2003int startTime;","\/\/ starting delay in milliseconds; 0 means start"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"the animation immediately"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003int endTime;","\/\/ animation duration"]},{"entry":["\u2003int startVal;","\/\/ starting attribute value; null implies use the"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"current value of the attribute"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003int endVal;","\/\/ target attribute value at the end of animation"]},{"entry":["\u2003bool operationType;","\/\/ 0: target value is multiplicative, 1: target"]},{"entry":["value is additive",{}]},{"entry":["\u2003int relativeTo;","\/\/ target value is computed 0: based on startVal,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"1: based on endVal, 2: is absolute"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"With such an exemplary definition of an animation, animations may be defined by the following call:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"g_Animations[animation.ID] = new SPAnimation(animation.ID, ["]},{"entry":[{},"\u2003\u2003new SPKeyFrame(keyFrame.type, ..., keyFrame.endVal),"]},{"entry":[{},"\u2003\u2003new SPKeyFrame(keyFrame.type, ..., keyFrame.endVal),"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"\u2003\u2003])"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In some embodiments, the application program  or other calling code creates and initializes a new animation object having the desired parameters (e.g., which animation to perform, the final attributes values, etc.). An exemplary function call for creating the animation object includes AnimationObject (animationID, delay, element, finalState, finishFunc, extraData). In this example, the animationID argument represents an identifier for the animation to be run. The value of the identifier is one of the values recognized as corresponding to an animation in the catalog . The delay argument represents the number of milliseconds to wait from the current time before the animation is started. If the animation should be started now, this value is set to zero. The element argument represents the ML element to which the animation should be applied. The element argument may be a single element or a plurality of elements to which to apply the same animation. The finalState argument represents the target state for the different attributes to be changed. The target state includes the final attribute values. The finalState argument includes a value for each attribute affected by the current animation. For example, the calling code may define the target state as follows:",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var state = new State( );"]},{"entry":[{},"state.setAttribute(SPAttribute.PositionX, 500);"]},{"entry":[{},"state.setAttribute(SPAttribute.Opacity, 1);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The finishFunc(animation) argument is a function defined by the calling code. This function is called when the desired animation completes. Upon completion of the animation, the animation engine  passes the post-animation AnimationObject as a parameter to the finishFunc function. In some embodiments, the animation parameter for this function is null. The extraData argument identifies additional data that the calling code sends to the finish function. For example, the extraData argument includes context information for doing the finish operation. In some embodiments, the extraData argument is null.","After creating the AnimationObject, the application program  then starts the animation. An exemplary function call for starting the animation object includes AnimationObject.RunAnimation( ).","In embodiments of the disclosure in which the animations are rendered by a browser, the animation engine  detects page rendering direction and automatically selects left-to-right or right-to-left page rendering transparent to the user .","At least a portion of the functionality of the various elements in  and  may be performed by other elements in  or , or an entity (e.g., processor, web service, server, application program, computing device, etc.) not shown in  or .","In some embodiments, the operations illustrated in  and  may be implemented as software instructions encoded on a computer readable medium, in hardware programmed or designed to perform the operations, or both. For example, aspects of the disclosure may be implemented as a system on a chip.","While no personally identifiable information is tracked by aspects of the disclosure, embodiments have been described with reference to data monitored and\/or collected from users . In such embodiments, notice is provided to the users  of the collection of the data (e.g., via a dialog box or preference setting) and users  are given the opportunity to give or deny consent for the monitoring and\/or collection. The consent may take the form of opt-in consent or opt-out consent.","Exemplary Operating Environment","Exemplary computer readable media include flash memory drives, digital versatile discs (DVDs), compact discs (CDs), floppy disks, and tape cassettes. By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media exclude propagated data signals. In some embodiments, computer storage media are implemented in hardware. Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media.","Although described in connection with an exemplary computing system environment, embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with aspects of the invention include, but are not limited to, mobile computing devices, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, gaming consoles, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","Embodiments of the invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. The computer-executable instructions may be organized into one or more computer-executable components or modules. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may be implemented with any number and organization of such components or modules. For example, aspects of the invention are not limited to the specific computer-executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer-executable instructions or components having more or less functionality than illustrated and described herein.","Aspects of the invention transform a general-purpose computer into a special-purpose computing device when configured to execute the instructions described herein.","The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the invention constitute exemplary means for animation of ML elements by the animation engine  decoupled from the animation catalog  storing the animation definitions , and exemplary means for throttling animation during an iteration of the single timer based on animation telemetry data obtained during at least one previous iteration of the single timer.","The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential, unless otherwise specified. That is, the operations may be performed in any order, unless otherwise specified, and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example, it is contemplated that executing or performing a particular operation before, contemporaneously with, or after another operation is within the scope of aspects of the invention.","When introducing elements of aspects of the invention or the embodiments thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","Having described aspects of the invention in detail, it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions, products, and methods without departing from the scope of aspects of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
