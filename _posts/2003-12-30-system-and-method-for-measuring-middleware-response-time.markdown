---
title: System and method for measuring middleware response time
abstract: System and method for monitoring middleware performance is described herein. A route time for a sample message transmitted along a predetermined network route is determined and at least one queue residency time is determined. The at least one queue residency time reflects an amount of time an actual application message is stored in at least one respective local production queue located along the network route. Middleware response time is calculated according to the route time and the at least one queue residency time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07386613&OS=07386613&RS=07386613
owner: Computer Associates Think, Inc.
number: 07386613
owner_city: Islandia
owner_country: US
publication_date: 20031230
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND INFORMATION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/437,848, filed Jan. 3, 2003, the entire disclosure of which is incorporated herein by reference.","The present application relates to message oriented middleware performance monitoring and, more particularly, to a system and a method for measuring middleware response time.","Generally, middleware is software that has its own application programming interfaces (\u201cAPIs\u201d) that help insulate software developers from operating system-specific APIs. A middleware layer is often located between client and server processes. By measuring the route time associated with the middleware layer of an application, problems can be identified and corrected resulting in improved performance and availability. Currently, the route time associated with a middleware application can be measured by changing the code of the application itself. Such a procedure is considered intrusive. Other known procedures used for measuring route time rely on a host of resources and require synchronization among multiple components.","Thus, there is a need for a non-intrusive system and method that monitors the performance of middleware by measuring the route time and storage residency time, for example, the residency time of a message stored in at least one queue. As a result, a determination can made as to which component(s) of a configuration is problematic or potentially problematic. A need also exist for monitoring the middleware performance without requiring synchronization.","An aspect of the present application provides for a method for monitoring middleware performance. The method may include determining a route time for a message transmitted along a predetermined network route, determining at least one queue residency time, the at least one queue residency time reflecting an amount of time at least one other message is stored in at least one respective queue located along the predetermined network route, and calculating a middleware response time according to the route time and the at least one queue residency time.","Another aspect of the present application provides for a method for monitoring middleware performance. The method may include determining a route time for a user\u2014defined sample message to be transmitted along a predetermined network route, the route time reflecting an amount of time for the sample message to travel from an origination queue manager to a destination queue manager and then back along the same route to the origination queue manager, determining at least one queue residency time for at least one local production queue, the at least one local production queue being associated with the origination queue manager and\/or the destination queue manager and the at least one queue residency time reflecting the amount of time an actual application message is stored in the at least one local production queue, and calculating a middleware response time by adding the route time to the at least one queue residency time.","A further aspect of the present application provides for a system for monitoring middleware performance. The system may include a computer system adapted to generate a sample message and an application message, and a computer memory electrically connected to the computer system encoded with instructions for performing the following: determining a route time for the sample message transmitted along a predetermined network route; determining at least one queue residency time, the at least one queue residency time reflecting an amount of time the application message is stored in at least one respective queue located along the predetermined network route; and calculating a middleware response time according to the route time and the at least one queue residency time.","In the exemplary embodiments of the present application, application middleware response time for a message oriented middleware (\u201cMOM\u201d) based application can be estimated without changes to the respective application(s) and is, therefore, non-intrusive, as described herein. An example of such a MOM based application is the e-business infrastructure software sold by IBM\u00ae under the label WebSphere\u00ae MQ. WebSphere\u00ae MQ is a middleware solution for interconnecting business applications in heterogeneous environments. Middleware response time is described in the present application as being comprised of two components: route time and the sum of each of the storage residency times. Even though storage residency time is referred to in the present application as queue residency time, the exemplary embodiments are equally applicable to additional storage mediums besides queues. Additionally, application processing time is not considered in determining the middleware response time as described in detail herein. Alternatively, however, processing time can be included in the response time determination.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","105","105","105","105","105","105","150","150","150","110","110","110","105","105","105","115","125","130","120","120","120","100","150","150","150","130","130","140","145"],"i":["a","b ","c","a","b","c ","a","b","c ","a","b","c","a","b","c ","a","b","c","a","b ","c "]},"Each transmission queue is associated with a corresponding remote queue definition, as can be seen in . Remote queue definitions are not real queues, but name aliases that are controlled as though they were real queues. An effect of the remote queue definition is to define a physical destination queue name and queue manager name. The use of remote queue definitions is well known to a person having ordinary skill in the art and is therefore not described in detail herein.","As will be described below, a sample message is transmitted from and to queue manager along the same path or network route in MOM network  as would be used by an application to be monitored and the sample message is temporarily stored in each transmission queue , , along the network route. The sample message is used to determine the route time.","Additionally, an actual application message is stored at each local production queue , , to determine the respective queue residency times.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","br":{},"in-line-formulae":[{},{}]},"In order to determine the route time component of the equation, a sample message is generated, in . In an exemplary embodiment, the sample message includes a plurality of messages batched together. The size of each of the plurality of messages can be the same or have varying sizes. Alternatively, the sample message is a single message. Preferably, the sample message replicates an actual message that would be transmitted within MOM network . The number of messages batched in a sample message and the size of each of the messages is user-controlled, for instance, by interacting with at least one user interface.","The sample message is stored, in . Agent  associated with queue manager puts the sample message in transmission queue . Transmission queue temporarily stores the sample message to be sent to another part of the application residing on queue manager . Remote queue definition associated with transmission queue points to or identifies queue manager and, more particularly, transmission queue and its associated remote queue definition. Before the message is transmitted, the originating time is determined by agent , in . The originating time is stored in field  of sample message , as shown in , and the sample message is transmitted within MOM network , in .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 4","FIG. 5"],"b":["405","105","105","105","120","120","120","150","125","120","120","410","510","510"],"i":["a ","c ","b","b ","a ","b","b","b ","b","a ","b"]},"Next, the application component on queue manager associated with agent  retrieves the sample message temporarily stored in transmission queue and according to the respective remote queue definition transmits the sample message to another application component on destination queue manager . At destination queue manager , the sample message is temporarily stored in transmission queue . Similarly, at node C , channel or message exits associated with agent  determine timestamps for when the sample message enters transmission queue and exits transmission queue , referred to as the arrive time and the sent time, respectively, in . The arrive time and the sent time are added to the sample message in field and field , respectively, as shown in .","The application component on queue manager associated with agent  retrieves the message temporarily stored in transmission queue and according to the respective remote queue definition transmits the sample message back to originating queue manager via intervening queue manager , in . In an exemplary embodiment, the sample message is transmitted back to originating queue manager along the same route that the sample message traveled to get to destination queue manager , a purpose of which is described below. The exemplary route of the sample message is shown in . Alternative routes for sample messages are also described below. In , like in , an arrive time and a sent time for the sample message are determined for intervening queue manager . The arrive time and sent time are stored in field and field of the sample message, as shown in . Once the sample message arrives back to originating queue manager , agent  determines an end time, in , and the end time is stored in field  of the sample message. In an exemplary embodiment, agent  determines that the sample message transmitted from queue manager is the same as the received message by comparing an identification stored in a field of each received message.","Data indicating the various timestamps shown in  are transmitted to collection point . Processing unit  at collection point  determines the route time, in . Route time is defined as the time it takes a sample message to be transmitted from the queue manager where the message originated, for instance, queue managers , across any intermediate queue manager(s), to a destination queue manager, for instance, queue manager , and have the message transmitted back to the originating queue manager from the destination queue manager along the same route. In an exemplary embodiment, measurement of route time relies on an independent process that sends sample messages through MOM network  using the same paths as the application to be measured. As described above, the route time component is measured by creating a series of daisy-chained remote queue definitions across all queue managers involved in the measurement, for example, queue managers , , ","Based on the originating timestamp stored in field  and the end timestamp stored in field , processing unit  determines the route time, in . Specifically, the route time is determined by taking the difference of the originating timestamp and the end timestamp. Since the originating timestamp and the end timestamp are associated with the same queue manager , synchronization is not an issue. The route time is stored in memory unit  at collection point .","Furthermore, based on the arrive timestamps and the sent timestamps for intervening queue manager and destination queue manager stored in fields . . . , intra-queue manager times are determined by processing unit . In particular, the difference between the arrive timestamp and the corresponding sent timestamp for a respective queue manager represents the intra-queue manager time. The sum of the intra-queue manager times along MOM network  represents the total queue manager processing time. In an exemplary embodiment, averages of the intra-queue manager times along MOM network  can also be calculated. Data representing the intra-queue manager times is also stored in memory unit .","In addition to determining the route time component, queue residency time is also needed for calculating the middleware response time, in . FIGS.  and  illustrate queue residency time and how it is determined in an exemplary embodiment of the present application. Queue residency time is defined as the time that an actual application message is stored in local production queue , in local production queue and in local production queue , as shown in . The sum of the queue residency times is referred to as the total queue residency time. In an exemplary embodiment, measurement of queue residency times relies on an independent process in which respective agents sample actual application messages being put on respective local production queues, identifies the sampled message through a channel message exit and captures the point when that message is pulled from the local production queue. In an exemplary embodiment, messages are sampled at an adjustable rate. Based on the sample set of messages, queue residency time is calculated as described below with reference to .","Agents , ,  determine queue residency time for local production queues , , , respectively. The procedure for calculating queue residency time is described herein only with reference to agent  and local production queue since the same procedure is followed at node B and node C in MOM network . As an application puts actual messages on the local production queue , collection components such as a message exit and an API exit take at least one sample of the messages, in . Agent  determines and stores the identification (\u201cID\u201d) associated with the sampled message, in , and determines and stores the put timestamp, in  and , respectively. The put timestamp indicates the time that the sampled message was placed on local production queue . In an exemplary embodiment, the ID is located in a field of the sampled message. When messages are retrieved from local production queue by an application component, a comparison is performed between the IDs of the respective retrieved messages and the stored ID of the sampled message, in . If a positive match is made, another timestamp, referred to as the get timestamp, is determined, in . The get timestamp indicates the time the sampled message was retrieved from local production queue . The queue residency time for local production queue is then determined by agent , in . In an exemplary embodiment, the queue residency time equals the difference between the respective get timestamp and the respective put timestamp. The calculated queue residency time is transmitted to collection point , in . The queue residency times associated with each queue manager , , are transmitted to collection point . Processing unit  adds the queue residency times to determine the total queue residency time and stores the individual queue residency times and the total queue residency time in memory unit . In a further exemplary embodiment, each agent calculates respective queue residency times by sampling multiple messages stored in the queue, determining corresponding put timestamps and get timestamps for the sampled messages, calculate multiple queue residency times and average the queue residency times over an interval.","In order to determine the total queue residency time, queue managers , , in MOM network  do not have to be synchronized since the difference(s) between the put timestamp(s) for a sampled message(s) and the get timestamp(s) for the sampled message(s) are determined for a respective local production queue.","The estimated application middleware response time, consisting of the time for the sample message to travel through the middleware network, referred to as the route time, and the time sampled messages reside in local production queues , , , is determined, in . The response time is then determined by combining the route time with the sum of queue residency times. Additionally, a network time can be determined by subtracting from the route time the total intra-queue manager time.","The exemplary embodiments of the present application for determining route time are described with reference to chained transmission queues that are kept independent from local production queues. By using transmission queues, the performance of actual application messages being transmitted over MOM network  is simulated. The exemplary embodiments, however, are equally applicable to using local production queues and\/or actual application messages to determine route time and, thus, response time.","By transmitting data to collection point  and by storing this data in memory unit , additional performance information can be obtained, for instance, regarding queue statistics. Such queue statistics include average queue residency times, high and low queue residency times, number of get timestamps and the number of put timestamps. Further, thresholds can be set to generate alerts so that, for example, when a queue residency time is greater than a threshold, an alert is transmitted for the respective queue.","Additionally, one or more user interfaces can be developed so that the performance of MOM network  can be monitored. A user can monitor the response time, queues residency time(s) and route time, whether these times are within predetermined parameters or exceed a threshold, the number of messages in the sample message and the size of each message. For instance, a user interface can be developed and used to monitor the performance of one or more queues.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 8","FIG. 7","FIG. 7","FIG. 8"],"i":["b ","b ","a ","a "]},"In an exemplary embodiment, a route builder application is used for defining the path for the sample message. With the route builder application, each route is named and the individual queue managers are added. In the exemplary embodiments of the present application, the sample message is transmitted from originating queue manager to destination queue manager via intervening queue manager and back to originating queue manager along the exact same path, as shown in . Accordingly, originating queue manager , intervening queue manager and destination queue manager do not have to be synchronized to determine route time. Alternatively, by changing the remote queue definition associated with destination queue manager , the sample message can travel a different path back to originating queue manager . Similarly, since the sample message is returning to originating queue manager , the queue managers do not need to be synchronized. However, if the sample message is returned to a queue manager other than originating queue manager , that queue manager and originating queue manager need to be synchronized to determine the route time.","In a further alternative embodiment, a uni-directional route time can be determined, that is the time for the sample message to travel from originating queue manager to destination queue manager . Originating queue manager and destination queue manager would need to be synchronized to accurately estimate the route time. Data is collected at collection point  from the respective queue managers and route time is determined by processing unit .","The embodiments described above are illustrative examples of the present application and it should not be construed that the present application is limited to these particular embodiments. Various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8","i":"a "},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8","i":"b "},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9","i":"a "},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9","i":"b "}]},"DETDESC":[{},{}]}
