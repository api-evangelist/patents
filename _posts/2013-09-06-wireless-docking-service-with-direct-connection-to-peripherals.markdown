---
title: Wireless docking service with direct connection to peripherals
abstract: In one example, a method includes receiving, from a user application and with a wireless docking service of a wireless docking communications stack executing on a computing device, a request to discover one or more peripheral functions within wireless communication range of the computing device. The method also includes, responsive to receiving the request, discovering, with the wireless docking service, the one or more peripheral functions without communicating with a wireless docking center. The method further includes consolidating the peripheral functions into a docking session for the user application. The method also includes, responsive to receiving the request, sending a docking session identifier and one or more respective references corresponding to the one or more peripheral functions to the user application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330047&OS=09330047&RS=09330047
owner: QUALCOMM Incorporated
number: 09330047
owner_city: San Diego
owner_country: US
publication_date: 20130906
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/752,792, filed Jan. 15, 2013, the entire content of which is incorporated herein by reference in its entirety.","This disclosure relates to techniques for wireless docking between electronic devices.","Docking stations, which may also be referred to as \u201cdocks,\u201d are sometimes used to couple electronic devices such as laptop computers to peripherals such as monitors, keyboards, mice, printers, or other types of input or output devices. These docking stations typically require a physical connection between the electronic device and the docking station. Additionally, the electronic device and the docking station typically establish docking communications before docking functions may be used.","In general, this disclosure describes techniques for a wireless docking system in which a wireless dockee, such as a mobile computing device, may wirelessly and directly dock with one or more peripheral devices using a wireless docking service that provides a uniform interface for controlling and\/or exchanging data with peripheral devices. More specifically, the wireless docking service may provide applications executing on the wireless dockee with an interface for discovering and obtaining references to peripheral devices, for configuring one or more of the peripheral devices discovered, and for using one of more of the peripheral devices discovered according to peripheral-specific functionality.","In some examples, this disclosure describes a wireless dockee that includes a processor, and a memory coupled to the processor. The memory stores instructions for causing the processor to execute a software stack that includes a wireless docking service (WDS). The WDS provides an Application Programming Interface (API) for an application executed by the processor. The API of the WDS consolidates Application Service Platform (ASP) communications and communications for Peripheral Function Protocols (PFPs), such as WiFi Serial Bus (WSB), Bluetooth, or Miracast, to provide an interface to applications executed by the wireless dockee. The WDS may enable the application to discover, configure, and select peripheral devices with which to directly dock using wireless docking sessions that are unmediated by a wireless docking center (WDC). The wireless dockee may directly connect through the WDS to selected peripheral devices and utilize the API to engage PFPs in order to control and exchange data with the corresponding selected peripherals. In other words, once the wireless dockee and the selected peripherals directly connect through the WDS, the wireless dockee may operate a wireless docking session to make use of the wireless docking ASP and PFPs for the peripherals. In this way, the wireless dockee may directly control and exchange data with the peripherals without relying on consolidated wireless docking session connections provided by a WDC.","In some examples, the WDS additionally provides an API to allow the application create a wireless docking environment (WDN) that includes a set of one or more peripherals. The API may further enable the application to discover one or more WDNs previously created, and to select one of the discovered WDNs to operate a docking session to make use of the ASP and PFPs for the peripherals. The WDS may also manage the topology for one or more direct wireless docking session connections and\/or the topology of the WDNs.","The techniques of this disclosure may provide one or more advantages. For example, a wireless docking system that operates without communication mediation by a WDC does not require implementation of a WDC that is interoperable with both the wireless dockee and the peripheral devices. This may speed development of wireless docking system protocols, reduce outlays for the additional WDC device, and\/or eliminate a requirement for a standardized docking protocol to be implemented for the wireless dockee. In addition, many legacy wireless peripherals may as a consequence connect directly to the wireless dockee, unmediated by a WDC and attendant protocols.","In some examples, a method includes receiving, from a user application and with a wireless docking service of a wireless docking communications stack executing on a computing device, a request to discover one or more peripheral functions within wireless communication range of the computing device. The method also includes, responsive to receiving the request, discovering, with the wireless docking service, the one or more peripheral functions without communicating with a wireless docking center. The method further includes consolidating the peripheral functions into a docking session for the user application. The method also includes, responsive to receiving the request, sending a docking session identifier and one or more respective references corresponding to the one or more peripheral functions to the user application.","In another example, a device includes one or more processors. The one or more processors are configured to receive, from a user application and with a wireless docking service of a wireless docking communications stack executing on the device, a request to discover one or more peripheral functions within wireless communication range of the device. The one or more processors are also configured to, responsive to receiving the request, discover, with the wireless docking service, the one or more peripheral functions without communicating with a wireless docking center. The one or more processors are further configured to consolidate the peripheral functions into a docking session for the user application. The one or more processors are also configured to, responsive to receiving the request, send a docking session identifier and one or more respective references corresponding to the one or more peripheral functions to the user application.","In another example, an apparatus includes means for receiving, from a user application and with a wireless docking service of a wireless docking communications stack executing on the apparatus, a request to discover one or more peripheral functions within wireless communication range of the apparatus. The apparatus also includes means for, responsive to receiving the request, discovering, with the wireless docking service, the one or more peripheral functions without communicating with a wireless docking center. The apparatus further includes means for consolidating the peripheral functions into a docking session for the user application. The apparatus also includes means for, responsive to receiving the request, sending a docking session identifier and one or more respective references corresponding to the one or more peripheral functions to the user application.","In another example, a computer-readable storage medium includes instructions stored thereon that, when executed, configure one or more processors to receive, from a user application and with a wireless docking service of a wireless docking communications stack executing on a computing device, a request to discover one or more peripheral functions within wireless communication range of the computing device. The instructions further configure the one or more processors to, responsive to receiving the request, discover, with the wireless docking service, the one or more peripheral functions without communicating with a wireless docking center. The instructions further configure the one or more processors to consolidate the peripheral functions into a docking session for the user application. The instructions further configure the one or more processors to, responsive to receiving the request, send a docking session identifier and one or more respective references corresponding to the one or more peripheral functions to the user application.","The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.","Like reference characters denote like elements throughout the figures and text.","This disclosure describes an architecture for wireless docking without a wireless docking center. The Wireless Docking Special Interest Group (SIG) has been developing an interoperable wireless docking solution in which a Wireless Docking Center (WDC) manages its peripherals and provides consolidate connections for a mobile to easily connect to and use the peripherals. Described herein is a wireless docking solution in which a mobile directly connects to wireless peripherals without a WDC. A WDC-less Docking system does not require any vendor to implement an interoperable WDC. In addition, A WDC-less docking system may not require any standardized docking protocol to be implemented on a mobile or other computing device.","As described in greater detail below, this disclosure describes wireless communication techniques, protocols, methods, and devices applicable to a wireless docking system in which a wireless dockee, such as a mobile computing device, may wirelessly and directly dock with one or more peripheral devices using a wireless docking service that provides an interface for controlling and\/or exchanging data with peripheral devices. The wireless docking service (WDS) may consolidate Application Service Platform (ASP) communications and Peripheral Function Protocol (PFP) communications, such as WiFi Serial Bus (WSB) and Miracast communications, to provide an interface to applications executed by the wireless dockee. The WDS may execute as part of a software protocol stack that includes an interface for Wi-Fi communications, and the WDS executing on top of the ASP and PFPs may be implemented as a Wi-Fi docking service or a wireless docking service using a subset of Wi-Fi docking. For example, the wireless docking service may use a subset of Wi-Fi docking standards directed to peer-to-peer (P2P) topology, generally in accordance with the set of standards promoted as \u201cWi-Fi Direct\u201d by the Wi-Fi Alliance.","An ASP is generally a wireless communications stack that may enable devices to easily advertise, seek and provide services over a wireless network, such as a Wi-Fi Direct certified network. The wireless stack forming the ASP may be implemented to comply with Wi-Fi Direct certification. The remainder of this disclosure makes reference to the example of a wireless docking service (WDS) implemented for operating through a Wi-Fi Direct ASP, that is, a wireless ASP implemented to comply with Wi-Fi Direct certification, as one illustrative example of a wireless docking service of this disclosure. This is done with the understanding that a WDS through Wi-Fi Direct ASP is merely one example, and a WDS may also be implemented in accordance with a variety of wireless standards, protocols, and technologies. For example, a WDS may also be implemented in accordance with WiGig and\/or one or more of the Institute of Electrical and Electronics Engineers (IEEE) 802.11 set of standards (e.g., 802.11, 802.11a, 802.11b, 802.11g, 802.11n, 802.11ac, 802.11ad, etc.), or extensions of Wi-Fi, WiGig, and\/or one or more 802.11 standards.","A wireless docking service operating on top of the ASP and the PFPs may enable peripherals to advertise their specific docking services directly to wireless dockees. A WDS operating on top of the ASP and the PFPs may also enable wireless dockees to discover peripherals that provide docking services. A WDS operating on top of the ASP and the PFPs may also enable peripherals and wireless dockees to connect to each other and establish wireless docking sessions with each other. The wireless docking session may enable services provided by peripheral devices that are coupled to the wireless dockee by the WDS. For example, the peripherals may include displays, projectors, speakers, keyboards, mice, joysticks, data storage devices, network interface devices, other docking hosts, remote controls, cameras, microphones, printers, or other devices. Such peripheral devices may include stand-alone devices or components of devices such as other computers, in different examples. A wireless dockee device, such as a mobile handset, may wirelessly dock with a wireless docking center using the WDS operating through the ASP, thereby enabling the wireless dockee device to access services provided by any of the peripherals, in some examples.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","110","100","110","110","110","110"]},"The peripheral devices , ,  of the wireless docking system  may include displays, projectors, speakers, keyboards, mice, joysticks, data storage devices, network interface devices, other docking hosts, remote controls, cameras, microphones, printers, or any of various other devices capable of wireless communication with WD . WD  may engage services provided by peripherals , , . WD  may couple to peripherals , ,  via wireless communication channels to operate and\/or exchange data with peripherals , ,  in accordance with the services accessible to WD .","Wireless communication channels , ,  may be any channels capable of propagating communicative signals between the WD  and the respective peripherals , , . In some examples, the wireless communication channels , ,  may be implemented in radio frequency communications in frequency bands such as the 2.4 gigahertz (GHz) band, the 5 GHz band, the 60 GHz band, or other frequency bands. In some examples, the wireless communication channels , ,  may comply with one or more sets of standards, protocols, or technologies among Wi-Fi (as promoted by the Wi-Fi Alliance), WiGig (as promoted by the Wireless Gigabit Alliance), and\/or the Institute of Electrical and Electronics Engineers (IEEE) 802.11 set of standards (e.g., 802.11, 802.11a, 802.11b, 802.11g, 802.11n, 802.11ac, 802.11ad, etc.), or other standards, protocols, or technologies. The frequency bands used for the wireless communication channels , , , such as the 2.4 GHz, 5 GHz, and 60 GHz bands, may be defined for purposes of this disclosure as they are understood in light of the standards of Wi-Fi, WiGig, any one or more IEEE 802.11 protocols, and\/or other applicable standards or protocols. In some examples, the wireless communications channels , ,  may represent a single wireless communication channel multiplexed among peripherals , , .","The wireless dockee  may establish communications with any subset of the peripherals , ,  automatically once the WD  and the subset come within operative communication range of each other, or manually in response to a user input, in different examples. Example call flows between the WD  and the peripherals , ,  establishing docking communications with each other is depicted in . The wireless dockee  and the peripherals , ,  may use Application Service Platform (ASP) and\/or Peripheral Function Protocols (PFPs), such as WiFi Serial Bus (WSB) and Miracast, to manage communications with each other for a variety of services, including a wireless docking service (WDS), as illustrated in .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1"],"b":["150","110","140","142","144","110","140","142","144"]},"In some examples, the WD  uses a wireless docking service to create a wireless docking environment (WDN)  that includes the peripherals , , . In some examples, the WD  uses the wireless docking service to discover the wireless docking environment  already created by the WD  or another wireless dockee. The WD  may use the wireless docking service to select the WDN  to establish a wireless docking session by which the WD  may engage services provided by the peripherals , , . The wireless dockee  may couple to the WDN  via the wireless communication channel  to operate and\/or exchange data with the peripherals , ,  in accordance with services accessible to the WD . The wireless communication channel  may be similar to any of the wireless communication channels , ,  of .","In the examples of , the WD  may use a wireless docking service to consolidate connections with one or more peripherals into a common context, or \u201cdocking session,\u201d that may be used by one or more application(s) executing the WD  to easily connect to and use the peripherals.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 3","FIGS. 1-2"],"b":["200","216","201","200","110","201","214","226","216","226","216","110","226","216","110"]},"In some example implementations, the API  includes the example methods of Table 1.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example Application Programming Interface"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Parameters","Returns"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["DiscoverPeripherals( )","None","[peripherals]"]},{"entry":["ConfigurePeripherals( )","subset of [peripherals]","None"]},{"entry":["UsePeripherals( )","subset of [peripherals]","[docking session]"]},{"entry":["CreateWDN( )","subset of [peripherals]","[WDN handle]"]},{"entry":["DiscoverWDN( )","None","[WDN handles]"]},{"entry":["UseWDN( )","[docking session]","[docking session]"]},{"entry":["Undock","[docking session]","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Accordingly, the user application  may use the API  to direct the wireless docking service  to discover (\u201cDiscoverPeripherals\u201d), configure (\u201cConfigurePeripherals\u201d), and directly select (\u201cUsePeripherals\u201d) peripherals to establish a docking session, as well as to undock a docking session (\u201cUndock\u201d). Alternatively, or in addition, the user application  may use the API  to direct the wireless docking service  to create a wireless docking environment (\u201cCreateWDN\u201d) from a set of peripherals, discover an existing WDN (\u201cDiscoverWDN\u201d), and select a WDN that includes peripherals for use (\u201cUseWDN\u201d).","Wireless docking is implemented as a wireless docking service (WDS)  operating over a wireless Application Service Platform layer  (\u201cASP \u201d) operating over Wi-Fi Direct wireless communications layer  (\u201cWi-Fi Direct \u201d), in this example. The Wi-Fi Direct communications  are an example implementation of wireless communications over which the ASP  may operate.","Various wireless services may be enabled as interface layers over the ASP , including a Print service , a Display service , and other services in some examples. The wireless docking service  operates over each of the Print service  and the Display service  to provide an interface with the user application . The Print service  and the Display service  may be provided by one or more peripheral devices directly accessible to the computing device  and managed via the ASP communication layer  in some examples.","The WDS  may be provided as a Wi-Fi Direct service, and referred to as a Wi-Fi Direct Docking Service. The Wi-Fi Direct Docking Service can be a subset of Wi-Fi docking, in particular, a subset of Wi-Fi docking operating over a P2P Wi-Fi Direct topology, in the example of a Wi-Fi Direct implementation. The WDS  may, for example, be implemented as a software module that may be loaded onto or stored in a device such as the wireless dockee . Aspects of the WDS  may also be integrated with, pre-packaged with, or implemented in hardware in some examples. For example, the WDS  may be stored on, integrated with, or implemented by an integrated circuit or a chipset containing one or more integrated circuits and one or more memory components.","A packet-based transport layer protocol stack (not illustrated) may run on top of ASP , Miracast , and\/or WiFi Serial Bus (WSB) . The packet-based transport layer may include an Internet Protocol (IP) communications layer and one or more of various Transport Layer communication layers. The IP communications layer may run on top of ASP , or directly on Wi-Fi Direct . The Transport Layer communications layer may include and one or more of Transmission Control Protocol (TCP), User Datagram Protocol (UDP), Stream Control Transmission Protocol (SCTP), or other Transport Layer communication protocols.","The wireless communications stack  includes several additional communication interfaces between different components of the wireless communications stack . A WDS Interface  between ASP  and the WDS  serves as a wireless docking interface for ASP methods and events. The WDS Interface  may implement WDS  running directly on ASP  to manage wireless docking communications directly with one or more peripherals.","Various other communication interfaces are also included in wireless docking communications stack . Communication interface  between Miracast  and WDS  serves as an interface for controlling and using Miracast operations. Communication interface  between WiFi Serial Bus (WSB)  and WDS  serves as an interface for controlling and using WiFi Serial Bus operations. Communication interface  between the Print service  and the WDS  serves as an interface for controlling and using the Print service  operations. Communication interface  between the Display service  and the WDS  serves as an interface for controlling and using Display service  operations.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 4A-4D","FIG. 1"],"b":["300","310","320","330","140","142","144"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4A","FIG. 3"],"b":["300","301","304","302","302","202","304","200","212"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4B","FIG. 3"],"b":["310","311","314","312","312","202","314","200","210"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4C","FIG. 3","FIG. 3","FIG. 3"],"b":["320","321","328","326","328","326","214","326","206","322","202"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 4D","FIG. 3","FIG. 3","FIG. 3"],"b":["330","331","338","336","338","336","214","336","208","332","202"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 5A-5C","FIG. 3"],"b":["200","201","214","206","204","202","216","200","214","320"]},"In the illustrated example, the user application  of computing device  queries, by invoking DiscoverPeripherals( ) method , the WDS  of wireless docking communications stack  of computing device  to discover peripheral devices. The DiscoverPeripherals( ) method  may represent the DiscoverPeripherals( ) method listed in Table 1, above, for the API  of the wireless docking communications stack  of computing device .","The WDS  may issue communications for different sub-layers corresponding to different peripheral services. In this example, the WDS  performs device discovery. As part of device discovery, the WDS  may send one or more communications to sub-layers that include directives to discover available peripherals. In this example, the WDS  uses Discover message  by communication interface  to request the Print service  to request service discovery for one or more printer peripherals (corresponding to a Printer peripheral function type). This is merely one example of device discovery for a peripheral. Other examples for other types of peripherals functions, such as Display (cf. the Display service  of the computing device ), Mouse, Keyboard, and so forth, are also contemplated.","The Print service  requests, from the ASP , service discovery for peripheral functions that conform to the Printer peripheral function type by issuing SeekService( ) message  to the ASP . The service discovery performed by the ASP  in response to SeekService( ) message , i.e., Wi-Fi Direct Service (WFDS) Printer Discovery , may represent pre-association service discovery in that it occurs prior to initiation of a wireless docking session between the computing device  that is a wireless dockee and the peripheral computing device .","As part of the WFDS Printer Discovery , the ASP  may query the ASP  of peripheral computing device  for information on peripheral functions, including peripheral functions conforming, e.g., to a Printer peripheral function type, and available via the ASP . WFDS Printer Discovery  may include multiple communications for a communication flow. For example, the ASP  and ASP  may initially exchange device discovery communications. The ASP  may further send a service discovery query to query the ASP  for peripheral function information, or information on peripheral functions available to the ASP . Applicable peripheral functions may be available to the ASP  from an application also executing on peripheral computing device , e.g., the Print service .","The ASP , serving as a wireless docking host, may send a service discovery response that provides its peripheral function information. The ASP  may thereby advertise its peripheral functions in pre-association service discovery communications with the ASP  of computing device . These communications are pre-association in that they take place prior to initiation of a wireless docking session between the ASP  and the ASP . The ASP  may thus discover the peripheral functions associated with the ASP  from the service discovery response as part of the pre-association service discovery communications of WFDS printer discovery . Additional details of these pre-association service discovery communications are provided below.","The service discovery communications may be implemented in Data Link Layer, or layer 2 (L2), communications. The L2 communications may be conveyed over any of various types of physical layer (PHY) communication channels, including any of the Wi-Fi or WiGig standards and\/or IEEE 802.11 protocols as discussed above. A service discovery query sent by the ASP  and the service discovery response sent by THE ASP  may use service discovery action frames. An example action frame may include a Media Access Control (MAC) header, a frame category, action details, and a frame check sequence (FCS). The action details in the service discovery query sent by the ASP  may include object identifier (OI) fields and query data fields. The ASP  may set an OI field in the service discovery action frame to 0x506F9A, i.e., the Organizationally Unique Identifier (OUI) of the Wi-Fi Alliance (WFA). The ASP  may also set additional fields in the service discovery action frame, such as an OUI subtype field and a service protocol type field. The ASP  may set the query data field of the service discovery query action frame to include a list of docking sub-element identifiers (ID's) to query for information on available docking sub-elements. In some examples, the ASP  may communicate with the ASP  using plaintext payloads that include SOAP requests and responses (e.g., in accordance with the SOAP specification defined at www.w3.org\/TR\/soap12-part1) and GENA (General Event Notification Architecture) notifications running on a packet-based transport layer protocol stack, while in other examples, the ASP  may communicate with docking the ASP  using a binary protocol running on a packet-based transport layer protocol stack, as further described below. The ASP  may also set a service transaction identifier (ID) in the query data field. Examples of the query data fields and the docking sub-element ID's for examples using SOAP and GENA payloads are shown as follows in Tables 2 and 3.",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Query Data Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field","Length (Octets)","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["List of Docking","Variable","Requested Docking sub-elements"]},{"entry":["Sub-element IDs",{},"as an array of sub-element IDs as"]},{"entry":[{},{},"per Table 2."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Docking Sub-element IDs"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Docking Sub-element ID","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[". . .",". . ."]},{"entry":["7","Peripheral Function Information"]},{"entry":["8","Docking Host (ASP) SOAP URL"]},{"entry":["9","Docking Host (ASP) GENA URL"]},{"entry":["10-255","Reserved"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In some examples that may use a binary protocol instead of SOAP and GENA payloads, the ASP  may communicate with the ASP  without requiring the use of docking sub-element ID's  and  as listed in Table 2.","The ASP  may respond to receiving service discovery query from the ASP  by sending a service discovery response. The ASP  may include in the service discovery response a service discovery action frame with a service response data field that includes a list of requested docking sub-elements. The ASP  may include a service transaction ID in the service response type-length-value (TLV) element that matches the service transaction ID in the query data field of the service discovery query from the ASP , to ensure that the ASP  can associate the service discovery response with the previous service discovery query. The ASP  may set a docking information element (IE) in Docking Service Discovery action frames included in the service discovery response. In some examples, the ASP  may set the docking IE to include sub-elements as shown as follows in Table 4.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Information Sub-elements in Docking IE"},{"entry":"in Docking Service Discovery Response"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Sub-element",{}]},{"entry":["Name","Requirements"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[". . .",". . ."]},{"entry":["Peripheral","If requested, the Peripheral Function Information sub-"]},{"entry":["Function","element may be present in the Docking IE in the Docking"]},{"entry":["Information","Service Discovery Response action frames that ASP 324"]},{"entry":[{},"transmits."]},{"entry":["Docking Host","If requested, the Docking Host (ASP) SOAP URL sub-"]},{"entry":["(ASP)","element may be present in the Docking IE in the Docking"]},{"entry":["SOAP URL","Service Discovery Response action frames that ASP 324"]},{"entry":[{},"transmits."]},{"entry":["Docking Host","If requested, the Docking Host (ASP) SOAP URL sub-"]},{"entry":["(ASP)","element may be present in the Docking IE in the Docking"]},{"entry":["GENA URL","Service Discovery Response action frames that ASP 324"]},{"entry":[{},"transmits."]},{"entry":[". . .",". . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"These docking information sub-elements provided by the ASP  in the service discovery response, i.e., the Peripheral Function Information Sub-element, the Docking Host (ASP) SOAP Uniform Resource Locator (URL) Sub-element, and the Docking Host (ASP) General Event Notification Architecture (GENA) URL Sub-element, are further described as follows. In examples that use a binary protocol, the ASP  may omit the docking host (ASP) SOAP URL and docking host (ASP) GENA URL from the information sub-elements from the docking information element in the docking service discovery response. In some examples that use the SOAP and GENA payloads, the computing device  and the peripheral device  may both send SOAP requests and responses to each other, and the computing device  may send GENA notifications to the peripheral device , where both the SOAP and GENA payloads may be sent over a packet-based transport layer protocol stack, in accordance with specifications such as Transmission Control Protocol\/Internet Protocol (TCP\/IP) or User Datagram Protocol\/IP (UDP\/IP), for example, to specified URLs, and potentially also to specified port numbers, such as TCP port number  (commonly associated with HTTP).","The Peripheral Function Information sub-element may provide the peripheral function (PF) information of peripherals hosted by peripheral device , specifically in this example, Print service . The Peripheral Function Information sub-element may have a data structure as shown in Table 5, with additional information on the listed fields thereafter.",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Peripheral Function Information Sub-element"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field","Length (Octets)","Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["n_PFs","1","uimsbf"]},{"entry":"for (i = 0; i < n_PFs; i++) {"},{"entry":["PF_ID","2","uimsbf"]},{"entry":["\u2003\u2003\u2003\u2003PF_type","2","uimsbf"]},{"entry":["\u2003\u2003\u2003\u2003PF_name","Variable","UTF-8_String( )"]},{"entry":["\u2003\u2003\u2003\u2003PF_capability","Variable","UTF-8_String( )"]},{"entry":["\u2003\u2003\u2003\u2003PF_state","1","uimsbf"]},{"entry":["\u2003n_PFPs","1","uimsbf"]},{"entry":"\u2003for (i = 0; I < n_PFPs; i++) {"},{"entry":["\u2003\u2003\u2003\u2003\u2003PFP_ID","1","uimsbf"]},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The field \u201cn_PFs\u201d may contain the number of peripheral functions (PF's) hosted by the peripheral device  that generates this PF Status information data structure. Any one or more peripheral devices coupled to wireless dockee  (e.g., peripheral devices , ,  of ) may provide one or more peripheral functions.","The field \u201cPF_ID\u201d may contain the ID of a particular peripheral function (PF). As indicated by the line \u201cfor (i=0; i<n_PFs; i++),\u201d the peripheral function information sub-element may include a peripheral function ID and associated information for each peripheral function ID for each of the \u201cn_PFs\u201d peripheral functions. The peripheral function ID may be unique for all peripheral functions that ASP  of peripheral device  currently hosts or centers or has ever hosted or centered. The ASP  may specify when a peripheral function is new and when the peripheral function is not new.","The field \u201cPF_type\u201d may indicate the peripheral function type of the peripheral function. An illustrative set of peripheral function types is listed below in Table 6.","The field \u201cPF_name\u201d may contain a user-friendly name of the peripheral function. This peripheral function name may be unique for all PFs available to the ASP . The format of the peripheral function name may be a UTF-8_String( ) structure, in some examples.","The field \u201cPF_capability\u201d may contain the capability of the peripheral function as reported by the ASP . The format of the peripheral function capability may also be a UTF-8_String( ) structure, in some examples.","The field \u201cn_PFPs\u201d may contain the number of Peripheral Function Protocols that can be used to support the use of the particular peripheral referred to by a given PF_ID. The field \u201cPFP_ID\u201d may contain the identifier (ID) of the Peripheral Function Protocol that can be used to support the use of the particular peripheral. An illustrative set of peripheral function protocols is listed below in Table 7. The field \u201cPF_state\u201d may contain the state of the peripheral function, such as with the example states defined below in Table 7.",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Peripheral Function Type"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PF Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"0","Mouse"]},{"entry":[{},"1","Keyboard"]},{"entry":[{},"2","Remote Control"]},{"entry":[{},"3","Display"]},{"entry":[{},"4","Speaker"]},{"entry":[{},"5","Microphone"]},{"entry":[{},"6","Storage"]},{"entry":[{},"7","Printer"]},{"entry":[{},"8-65535","Reserved"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Peripheral Function Protocol Identifier"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PFP ID","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"0","Miracast"]},{"entry":[{},"1","WiFi Serial Bus (WSB)"]},{"entry":[{},"2","Bluetooth"]},{"entry":[{},"3","WiGig Display Extension (WDE)"]},{"entry":[{},"4","WiGig Serial Extension (WSE)"]},{"entry":[{},"5-255","Reserved"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"PF_state values"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["State","Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["DISCONNECTED","0x01","The PF cannot be reached by the managing application"]},{"entry":[{},{},"service platform (ASP) and the managing ASP has no"]},{"entry":[{},{},"further information on how to make it available for"]},{"entry":[{},{},"docking."]},{"entry":["SLEEP","0x02","The PF has let the managing ASP known that it is going"]},{"entry":[{},{},"to low-power mode or to be switched-off and that user"]},{"entry":[{},{},"action on the PF is required to make the PF available for"]},{"entry":[{},{},"docking again. On the other hand, if a PF can be woken"]},{"entry":[{},{},"up without requiring user action (e.g. through Wake-on-"]},{"entry":[{},{},"LAN or by changing the USB power state), the PF may"]},{"entry":[{},{},"not be given the PF_state \u201cSLEEP\u201d. Such PFs may be"]},{"entry":[{},{},"given the state \u201cNOT PAIRED\u201d or \u201cAVAILABLE\u201d."]},{"entry":["NOT_PAIRED","0x03","The only thing that needs to be done for making this PF"]},{"entry":[{},{},"available for docking is that a user action is needed for"]},{"entry":[{},{},"pairing the PF with the managing ASP."]},{"entry":["AVAILABLE","0x04","The PF is available for docking."]},{"entry":["NOT_AVAILABLE","0x05","The PF is not available for docking."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Docking Service SOAP URL sub-element provides the URL of the SOAP command service for the docking protocol provided by the ASP . The Docking Service SOAP URL sub-element may have the data structure shown as follows in Table 9.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Docking Service SOAP URL Sub-element"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Length",{},{}]},{"entry":["Field","(Octets)","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["port_num","2","uimsbf","Port number"]},{"entry":["URL_path","Variable","UTF-8_String( )","Substring of URL path,"]},{"entry":[{},{},{},"percent-encoded as per"]},{"entry":[{},{},{},"Internet Engineering Task"]},{"entry":[{},{},{},"Force (IETF) Request for"]},{"entry":[{},{},{},"Comment (RFC) 3986"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The Docking Service GENA URL sub-element provides the URL of the GENA notification service for the docking protocol provided by the ASP . The Docking Service GENA URL sub-element may have the data structure shown as follows in Table 10.",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Docking Host GENA URL Sub-element"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field","Length (Octets)","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["port_num","2","uimsbf","Port number"]},{"entry":["URL_path","Variable","UTF-8_String( )","Substring of URL"]},{"entry":[{},{},{},"path, percent- encoded"]},{"entry":[{},{},{},"as per IETF RFC 3986"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"On receiving the peripheral function information of peripherals hosted by the peripheral device  and the ASP , the ASP  may return, in SearchResults( ) message  and to Print service , the subset of peripherals included in the peripheral function information that have a peripheral function type of Printer (e.g., type 7 in the illustrative set of peripheral function types listed in Table 6). The Print service  may thus discover the peripheral functions associated with the peripheral computing device  from the service discovery response as part of the pre-association service discovery communications. The Print service  may provide the subset of peripherals received in Results message  to the WDS .","The WDS  may consolidate peripheral functions discovered by operation of the ASP , as well as other peripheral functions that may communicate using various other Peripheral Function Protocols (PFPs) such as WSB, Bluetooth, and Miracast (described in further detail below with respect to ), and return a representation of the peripheral functions in message  to the application , which may then select a subset of the peripheral functions for configuration and use, as described in further detail below with respect to . In this way, the WDS  may provide, to the application , a unified interface by which the application  may discover one or more peripheral functions offered by peripheral devices, e.g., peripheral device , with which computing device  as a wireless dockee may directly dock using a wireless docking session that is unmediated by a wireless docking center.","Turning now to , the application  may select a subset of the discovered peripheral functions for use. The application  may then direct, using ConfigurePeripherals( ) method , the WDS  to configure the subset of the discovered peripheral functions for use by the application . The ConfigurePeripherals( ) method  may include parameter(s) for listing the subset of the discovered peripheral functions for use by the application . The ConfigurePeripherals( ) method  may represent the ConfigurePeripherals( ) method listed in Table 1, above, for the API  of the wireless docking communications stack  of computing device .","The wireless docking service  may be configured with connectivity configuration information for peripheral devices establishing data (or \u201cpayload\u201d) connections by the computing device . In some instances, a payload connection may include a Wi-Fi peer-to-peer (P2P) connection, and the connectivity configuration information may include a P2P Group Credential. For establishing a Wi-Fi P2P connection in instances in which a persistent P2P group is not available, the connectivity configuration information may include a Group Owner Intent, Operating Channel, Intended P2P Interface Address, Channel List, P2P Group ID, and the aforementioned P2P Group Credential. For establishing a Wi-Fi P2P connection in instances in which a persistent P2P group is available, the connectivity configuration information may include an Operating Channel, P2P Group BSSID, Channel List, and P2P Group ID.","The WDS  may use ConfigurationCredential( ) method  to provide the connectivity configuration information for establishing payload connections by the computing device  to ASP , which consolidates session setup for, potentially, multiple peripheral functions and selected peripheral function protocols for the corresponding peripheral functions. In particular, the WDS  may provide the P2P Group Credential to ASP  using ConfigurationCredential( ) method .","The WDS  may further provide, using ConfigurationCredential( ) method , additional information relating to payload connection negotiation, such as a payload connection protocol, a selected peripheral function protocol for each of the selected subset of peripheral functions, and identifiers for the selected peripheral functions that use the payload connection protocol and the payload function protocol.","The application  subsequently invokes the UsePeripherals( ) method  of WDS  to request the user of the peripherals and a unified docking session that is a common context for the multiple selected peripheral functions for the application . The UsePeripherals( ) method  may include parameter(s) for listing the subset of the selected peripheral functions sought for use by the application . The selected peripheral functions may be identified using the example Peripheral Function Type identifiers of Table 6 in some instances. The UsePeripherals( ) method  may represent the UsePeripherals( ) method listed in Table 1, above, for the API  of the wireless docking communications stack  of computing device .","In the illustrated example, the WDS , in turn, identifies the Print service  as one of the selected peripheral functions. The WDS  may identify the Print service  using the example identifier for the Printer Peripheral Function Type identifier listed in Table 6. The WDS  accordingly directs, using Start message , Print service  to initiate a Printer peripheral function session with the peripheral device  that provides the Printer peripheral function. Print service  requests to connect to an Application Service Platform session by invoking a ConnectSession( ) method  of ASP .","The ASP  establishes, using ASP session setup procedure , an Application Service Platform session with ASP  of peripheral device  according to connectivity configuration information provided by WDS . The Application Service Platform session may serve as a common ASP session for multiple peripheral functions and corresponding peripheral function protocols.","Upon successful establishment of an ASP session with the ASP  of peripheral device , the ASP  may notify the Print service  that the ASP session is established by invoking a SessionConnected( ) method . The Print service , in turn, notifies the WDS  of the successful establishment of the ASP session by returning a Success message  to the WDS  in response to the Start message  that initiated the Printer peripheral function session with the peripheral device .","Subsequently, the WDS  may request, by invoking the GetConnectionConfiguration( ) method , connectivity configuration information from the ASP  that the ASP  may have negotiated with the ASP  during the ASP session setup procedure . The ASP  may respond to the invocation of the GetConnectionConfiguration( ) method  by returning connectivity configuration information. The connectivity configuration information may include, e.g., the payload connection protocol, connectivity configuration information of the payload connection agreed to by both the ASP  of computing device  and the ASP  of peripheral device , the peripheral function protocol, and an identifier for the peripheral function type (\u201cPrinter\u201d in this example, cf. Table 6) of the ASP session established for the Print service  data payload connection. For a Wi-Fi P2P connection that does not use a persistent P2P group, the connectivity configuration information of the payload connection may include an operating channel, channel list, and P2P Group ID, for example. For a Wi-Fi P2P connection that uses a persistent P2P group, the connectivity configuration information of the payload connection may include an operating channel, P2P Group BSSID, and channel list, for example.","The WDS  consolidates one or more peripheral functions and corresponding payload connections into a common context that is identifiable by a docking session identifier. In some cases, as in the example of , the ASP  may organize one or more peripheral functions protocols for communicating with peripheral devices that offer peripheral functions to computing device . The WDS  may then address the one or more consolidated peripheral functions using the common context identified by the docking session identifier. Because application  instigates the selection and configuration of the one or more peripheral functions consolidated by the WDS , the WDS  provides the docking session identifier (\u201c[docking session]\u201d) to application  in message .","Subsequently, application  may use the docking session identifier to address the payload connection established by the ASP  with the ASP  in order to exchange data and, in some cases control information, with the peripheral Print service  by data message exchanges  using the negotiated peripheral function protocol. In this way, the WDS  may provide, to the application , a unified interface by which the application  may discover, configure, and select a subset of the one or more peripheral functions offered by peripheral devices, e.g., peripheral device , with which computing device  as a wireless dockee may directly dock using a wireless docking session that is unmediated by a wireless docking center.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 5C","b":["320","321","320","328","450","326","320","324","320","452","324","406","324","204","200"]},"As described above with respect to , the ASP  and the ASP  perform the ASP session setup procedure . Upon successful connection of an ASP session between the ASP  and the ASP , the ASP  may notify the Print service  that the ASP session is established by invoking a SessionConnected( ) method .",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIGS. 6A-6C","b":"200"},"The computing device  includes components of the example wireless docking communications stack  illustrated in , specifically, the wireless docking service , the Miracast host , the Application Service Platform (ASP) , and the Wi-Fi Direct layer . The application  executing on computing device  may invoke the wireless docking service  to establish a consolidated docking session including one or more peripheral devices, e.g., peripheral device  that includes a Miracast sink .","In the illustrated example, the user application  of computing device  queries, by invoking DiscoverPeripherals( ) method , the WDS  of wireless docking communications stack  of computing device  to discover peripheral devices. The DiscoverPeripherals( ) method  may represent the DiscoverPeripherals( ) method listed in Table 1, above, for the API  of the wireless docking communications stack  of computing device . In addition, the DiscoverPeripherals( ) method  and the DiscoverPeripherals( ) method  may represent the same operation in that application  is seeking to discover a plurality of peripheral functions at once.","The WDS  may issue communications for different sub-layers corresponding to different peripheral services. In this example, the WDS  performs device discovery. As part of device discovery, the WDS  may send one or more communications to sub-layers that include directives to discover available peripherals. Here, the WDS  uses Discover message  by communication interface  to request the Miracast Host  to request service discovery for a Miracast service, that is, a Miracast-capable peripheral function type (e.g., Display) that uses the Miracast peripheral function protocol. Again, this is merely one example of device discovery for a peripheral.","The Miracast host  executes a Miracast discovery procedure  to discover available Miracast services, which in this example are provided peripheral device  having a Miracast sink . The Miracast sink  may return peripheral function information to the Miracast host  during the Miracast discovery procedure . The Miracast Host  may return, in Results message  and to the WDS , the subset of peripherals included in the peripheral function information that have a peripheral function protocol of type Miracast. Although only one peripheral device  having a Miracast sink  are illustrated in , in some cases multiple such peripheral devices may be available to sink data using the Miracast peripheral function protocol.","The WDS  may consolidate peripheral functions that use the Miracast peripheral function protocol discovered by operation of the Miracast host , as well as other peripheral functions that may communicate using various other Peripheral Function Protocols (PFPs) such as WSB, and Bluetooth, and return a representation of the peripheral functions (\u201c[peripherals]\u201d) in message  to the application , which may then select a subset of the peripheral functions for configuration and use. In some cases, message  of  and message  of  may represent the same message in that the WDS may discover a plurality of peripheral functions at once and return the representation of discovered peripheral functions in a single message. The WDS  may in this way provide, to the application , a unified interface by which the application  may discover one or more peripheral functions offered by peripheral devices, e.g., peripheral device , with which computing device  as a wireless dockee may directly dock using a wireless docking session that is unmediated by a wireless docking center.","Turning now to , the application  may select a subset of the discovered peripheral functions for use. The application  may then direct, using ConfigurePeripherals( ) method , the WDS  to configure the subset of the discovered peripheral functions for use by the application . The ConfigurePeripherals( ) method  may include parameter(s) for listing the subset of the discovered peripheral functions for use by the application  including, in this case, a peripheral function that uses the Miracast peripheral function protocol. The ConfigurePeripherals( ) method  may represent the ConfigurePeripherals( ) method listed in Table 1, above, for the API  of the wireless docking communications stack  of computing device . In addition, the ConfigurePeripherals( ) method  may represent the ConfigurePeripherals method  of  yet including any parameter(s) for listing the peripheral function making use of the Miracast peripheral function protocol.","The wireless docking service  may be configured with connectivity configuration information for peripheral devices establishing data (or \u201cpayload\u201d) connections by the computing device . In some instances, a payload connection may include a Wi-Fi peer-to-peer (P2P) connection, and the connectivity configuration information may include a P2P Group Credential. For establishing a Wi-Fi P2P connection in instances in which a persistent P2P group is not available, the connectivity configuration information may include a Group Owner Intent, Operating Channel, Intended P2P Interface Address, Channel List, P2P Group ID, and the aforementioned P2P Group Credential. For establishing a Wi-Fi P2P connection in instances in which a persistent P2P group is available, the connectivity configuration information may include an Operating Channel, P2P Group BSSID, Channel List, and P2P Group ID.","The WDS  may use Configuration Credential message  to provide the connectivity configuration information for establishing payload connections by the computing device  to Wi-Fi Direct , which may configure a dedicated WFD channel for a Miracast connection (described below). The application  subsequently invokes the UsePeripherals( ) method  of WDS  to request a unified docking session that is a common context for the multiple selected peripheral functions for the application . The UsePeripherals( ) method  may include parameter(s) for listing the subset of the selected peripheral functions sought for use by the application . The selected peripheral functions may be identified using the example Peripheral Function Type identifiers of Table 6 in some instances. The UsePeripherals( ) method  may represent the UsePeripherals( ) method listed in Table 1, above, for the API  of the wireless docking communications stack  of computing device . In addition, the UsePeripherals( ) method  may represent the UsePeripherals( ) method  of .","In the illustrated example, the WDS , in turn, identifies one of the selected peripheral functions as using the Miracast peripheral function protocol. The WDS  may identify the one of the selected peripheral functions using the example identifier for the Peripheral Function Protocol Identifier (\u201cPFP ID\u201d) listed in Table 7 for Miracast. The WDS  accordingly directs, using SetConnectionConfiguration( ) method , the Wi-Fi Direct  to establish a WFD channel for establishing a Miracast connection. The WDS  further issues Start message  to the Miracast host  to direct the Miracast host  to perform a Miracast connection setup procedure  with Miracast sink  to establish a payload connection that uses the Miracast peripheral function protocol.","Upon successful establishment of the Miracast connection with the Miracast sink  of peripheral device , the Miracast host  may notify the WDS  of the successful establishment of the Miracast connection by returning a Success message  to the WDS  in response to the Start message  that initiated the Miracast connection with the peripheral device .","The WDS  consolidates one or more peripheral functions and corresponding payload connections into a common context that is identifiable by a docking session identifier. The WDS  may then address the one or more consolidated peripheral functions using the common context identified by the docking session identifier. Because application  instigates the selection and configuration of the one or more peripheral functions consolidated by the WDS , the WDS  provides the docking session identifier (\u201c[docking session]\u201d) to the application  in the message . The message  may represent the message  of  and include the same identifier in instances where the WDS  establishes multiple payload connections for a Printer peripheral function and a Miracast-capable peripheral function in parallel.","Subsequently, application  may use the docking session identifier to address the payload connection established by the Miracast host  with Miracast sink  in order to exchange data and, in some cases control information, with the Miracast sink by data message exchanges  using the payload connection. In this way, the WDS  may provide, to the application , a unified interface by which the application  may discover, configure, and select a subset of the one or more peripheral functions offered by peripheral devices, e.g., peripheral device , with which computing device  as a wireless dockee may directly dock using a wireless docking session that is unmediated by a wireless docking center.",{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 6C","b":["314","310","210","200","314","504","314","210","518","200"]},"The computing device  may create the persistent WDN for future use by the application , which may include simplifying and accelerating the process of establishing and operating future wireless docking sessions between computing device  and peripheral devices (e.g. peripheral device , , and  of ), for example. The WDN configuration data may include the peripheral functions (PF) used in a particular wireless docking session that does not involve a wireless docking center, and the peripheral function protocol (PFP) and payload connection protocol (PCP) information for each peripheral function. A persistent P2P group may be associated with a persistent WDN, although a persistent WDN is not necessarily associated with a persistent P2P group, in some examples.","In some examples, the WDS  of computing device  may store a persistent wireless docking environment (WDN) for the future use of the application . During the pre-association service discovery procedure, the peripheral devices may include a docking information element (IE) in a service discovery response that may include a wireless docking (WDCK) capability sub-element. The WDS  may set a corresponding WDCK capability sub-element in part to indicate that it has the capability to store a persistent WDN for the future use of the application . If the WDS  has the capability to store a persistent WDN, then application  may initiate a transaction to store the persistent WDN with the WDS . Example call flow diagrams for the setup and use of a persistent WDS are shown in .",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 7","FIGS. 5A-5C and 6A-6C"],"b":["600","600"]},"After directing the WDS  to configure selected peripherals discovered by the WDS , the application  may request the WDS  to create a persistent WDN (alternatively referred to as a \u201cwireless docking environment\u201d) by invoking the CreateWirelessDockingEnvironment( ) method . The CreateWirelessDockingEnvironment( ) method  may represent the CreateWDN( ) method listed in Table 1, above, for the API  of the wireless docking communications stack  of computing device .","The WDS  may respond to the invocation of its exposed CreateWirelessDockingEnvironment( ) method  by creating and storing the persistent WDN as requested based at least on the discovered, selected, and configured peripherals for a docking session. To create and store the persistent WDN, the WDS  may store peripheral function configuration information for the selected peripheral functions, which may include the peripheral function type, corresponding peripheral function protocol, and payload connection type (e.g., one of IEEE 802.11n, 802.11ac, 802.11ad) for each of the selected peripheral functions. The WDS  may in some instances further store an identifier for application  and\/or a docking session identifier for the persistent WDN. For a persistent WDN to be stored by the WDS , it will be understood that in other examples, the persistent WDN and\/or the persistent WDN configuration data may equivalently be stored by another device accessible to computing device , which may include proximate or remote storage resources in various examples.","Upon creating and storing a persistent wireless docking environment in response to the invocation of CreateWirelessDockingEnvironment( ) method , the WDS  returns a handle for the persistent WDN (\u201c[Wireless Docking Environment]\u201d) to the application . As described below with respect to , the application  may use the handle to avoid discovering, selecting, and configuring peripheral functions encompassed by the persistent WDN.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 8","b":["216","612","214","214","216","612","226","201","200"]},"The WDS , in response, performs the service discovery procedures in conjunction with the Print service  and the ASP  to discover the Printer peripheral function provided by peripheral device . The service discovery procedures include Discover message  from the WDS  to the Print service , the SeekService( ) method  of the ASP  invoked by the Print service , the WFDS Printer Discovery procedure  between the ASP  and the ASP , the SearchResult( ) method  to return the results of the SeekService( ) method  to the Print service , and the Results message  to return the results of the Discover message  to the WDS . The service discovery procedures may be substantially similar to the Discover message , SeekService( ) message , WFDS Printer Discovery procedure , SearchResult( ) message , and Results message  procedures as illustrated and described with respect to .","Upon receiving the Results message , the WDS  may store the received peripheral function information by creating and storing a persistent WDN that includes the peripheral function information for the discovered peripheral functions (in this example, the Printer peripheral function). The WDS  may then return a handle for the persistent WDN (\u201c[Wireless Docking Environment]\u201d) to the application  using message . As described below with respect to , the application  may use the handle to avoid again discovering, selecting, and configuring peripheral functions encompassed by the persistent WDN.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":["FIG. 9","FIG. 8"],"b":["216","650","214","214","216","650","226","201","200","650","612","612","214"]},"The WDS , in response, performs the service discovery procedures in conjunction with the Miracast host  to discover the Miracast-capable peripheral function provided by peripheral device . The service discovery procedures include Discover message  from the WDS  to the Miracast host , Miracast Discovery procedure , and the Results message  to return the results of the Discover message  to the WDS . The service discovery procedures may be substantially similar to the Discover message , Miracast Discovery procedure , and Results message  procedures as illustrated and described with respect to .","Upon receiving the Results message , the WDS  may store the received peripheral function information by creating and storing a persistent WDN that includes the peripheral function information for the discovered peripheral functions (in this example, the Miracast-capable Miracast host ). The WDS  may then return a handle for the persistent WDN (\u201c[Wireless Docking Environment]\u201d) to the application  using message . Message  may represent the message  of  in some instances.",{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 10","b":["216","200","216","214","630","214","630","226","201","200"]},"In response, the WDS  establishes payload connections for the peripheral functions associated with the WDN identified by the WDN handle. As described and illustrated with respect to , the WDS  establishes an ASP session with the ASP  using ASP  and establishes a payload connection for the application  to Print service . WDS  returns, using docking session message , a docking session (\u201c[docking session]\u201d) by which user application may engage the peripheral function(s) provided by the peripheral device, which may include exchanging data for the peripheral function(s) between user application  and the peripheral device . By enabling the use of a persistent WDN in this way, the WDS  may repeatedly establish payload connections with the peripheral functions associated with the persistent WDN without having to perform pre-association service discovery procedures and peripheral function configuration procedures, for the information otherwise exchanged from these procedures is already stored in the persistent WDN. The WDS  may also avoid repeatedly providing, to the appropriate communication layer of the wireless docking communications stack , a configuration credential for configuring the peripheral function.",{"@attributes":{"id":"p-0124","num":"0123"},"figref":["FIG. 11","FIG. 10"],"b":["216","200","216","214","660","214","660","226","201","200","660","630","214"]},"In response, the WDS  establishes payload connections for the peripheral functions associated with the WDN identified by the WDN handle. As described and illustrated with respect to , the WDS  establishes a Miracast connection for the application  to Miracast sink . WDS  returns, using docking session message , a docking session (\u201c[docking session]\u201d) by which user application may engage the peripheral function(s) provided by the peripheral device, which may include exchanging data for the peripheral function(s) between user application  and the peripheral device . By enabling the use of a persistent WDN in this way, the WDS  may repeatedly establish payload connections with the peripheral functions associated with the persistent WDN without having to perform pre-association service discovery procedures and peripheral function configuration procedures, for the information otherwise exchanged from these procedures is already stored in the persistent WDN. The WDS  may also avoid repeatedly providing, to the appropriate communication layer of the wireless docking communications stack , a configuration credential for configuring the peripheral function.",{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIG. 12","FIG. 12","FIG. 12","FIG. 12"],"b":["200","200","200","200","704","710","712"]},"As shown in the specific example of , computing device  includes one or more processors , one or more input devices , one or more communication units , one or more output devices , one or more storage devices , and user interface (UI) device , and wireless communication module . Computing device , in one example, further includes wireless docking communications stack , authorization module , one or more applications , and operating system  that are executable by computing device . Each of components , , , , , , and  are coupled (physically, communicatively, and\/or operatively) for inter-component communications. In some examples, communication channels  may include a system bus, a network connection, an inter-process communication data structure, or any other method for communicating data. As one example in , components , , , , , , and  may be coupled by one or more communication channels . Wireless docking communications stack , authorization module , and one or more applications  may also communicate information with one another as well as with other components in computing device . While illustrated as separate modules, any one or more of modules  or  may be implemented as part of any of applications .","Processors , in one example, are configured to implement functionality and\/or process instructions for execution within computing device . For example, processors  may be capable of processing instructions stored in storage device . Examples of processors  may include, any one or more of a microprocessor, a controller, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or equivalent discrete or integrated logic circuitry.","One or more storage devices  may be configured to store information within computing device  during operation. Storage device , in some examples, is described as a computer-readable storage medium. In some examples, storage device  is a temporary memory, meaning that a primary purpose of storage device  is not long-term storage. Storage device , in some examples, is described as a volatile memory, meaning that storage device  does not maintain stored contents when the computer is turned off. Examples of volatile memories include random access memories (RAM), dynamic random access memories (DRAM), static random access memories (SRAM), and other forms of volatile memories known in the art. In some examples, storage device  is used to store program instructions for execution by processors . Storage device , in one example, is used by software or applications running on computing device  to temporarily store information during program execution.","Storage devices , in some examples, also include one or more computer-readable storage media. Storage devices  may be configured to store larger amounts of information than volatile memory. Storage devices  may further be configured for long-term storage of information. In some examples, storage devices  include non-volatile storage elements. Examples of such non-volatile storage elements include magnetic hard discs, optical discs, floppy discs, flash memories, or forms of electrically programmable memories (EPROM) or electrically erasable and programmable (EEPROM) memories.","Computing device , in some examples, also includes one or more communication units . Computing device , in one example, utilizes communication unit  to communicate with external devices via one or more networks, such as one or more wireless networks. Communication unit  may be a network interface card, such as an Ethernet card, an optical transceiver, a radio frequency transceiver, or any other type of device that can send and receive information. Other examples of such network interfaces may include Bluetooth, 7G and Wi-Fi radios computing devices as well as Universal Serial Bus (USB). In some examples, computing device  utilizes communication unit  to wirelessly communicate with an external device such as a server.","In addition, the computing device  may include wireless communication module . As described herein, wireless communication module  may be active hardware that is configured to communicate with other wireless communication devices. These wireless communication devices may operate according to Bluetooth, Ultra-Wideband radio, Wi-Fi, or other similar protocols. In some examples, wireless communication module  may be an external hardware module that is coupled with computing device  via a bus (such as via a Universal Serial Bus (USB) port). Wireless communication module , in some examples, may also include software which may, in some examples, be independent from operating system , and which may, in some other examples, be a sub-routine of operating system .","Computing device , in one example, also includes one or more input devices . Input device , in some examples, is configured to receive input from a user through tactile, audio, or video feedback. Examples of input device  include a presence-sensitive display, a mouse, a keyboard, a voice responsive system, video camera, microphone or any other type of device for detecting a command from a user.","One or more output devices  may also be included in computing device . Output device , in some examples, is configured to provide output to a user using tactile, audio, or video stimuli. Output device , in one example, includes a presence-sensitive display, a sound card, a video graphics adapter card, or any other type of device for converting a signal into an appropriate form understandable to humans or machines. Additional examples of output device  include a speaker, a cathode ray tube (CRT) monitor, a liquid crystal display (LCD), or any other type of device that can generate intelligible output to a user. In some examples, user interface (UI) device  may include functionality of input device  and\/or output device .","Computing device  may include operating system . Operating system , in some examples, controls the operation of components of computing device . For example, operating system , in one example, facilitates the communication of wireless docking communications stack , and application  with processors , communication unit , storage device , input device , user interface device , wireless communication module , and output device . Wireless docking communications stack  and application  may also include program instructions and\/or data that are executable by computing device . As one example, modules , , and  may include instructions that cause computing device  to perform one or more of the operations and actions described in the present disclosure. Wireless docking communications stack  and application  may represent wireless docking communications stack  and application  of , for example.","In one or more examples, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over, as one or more instructions or code, a computer-readable medium and executed by a hardware-based processing unit. Computer-readable media may include computer-readable storage media, which corresponds to a tangible medium such as data storage media, or communication media including any medium that facilitates transfer of a computer program from one place to another, e.g., according to a communication protocol. In this manner, computer-readable media generally may correspond to (1) tangible computer-readable storage media which is non-transitory or (2) a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions, code and\/or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer-readable medium.","By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage, or other magnetic storage devices, Flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. It should be understood, however, that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transient media, but are instead directed to non-transient, tangible storage media. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and Blu-ray disc, where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.","Instructions may be executed by one or more processors, such as one or more digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term \u201cprocessor,\u201d as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, the functionality described herein may be provided within dedicated hardware and\/or software modules configured for encoding and decoding, or incorporated in a combined codec. Also, the techniques could be fully implemented in one or more circuits or logic elements.","The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses, including a wireless handset, an integrated circuit (IC) or a set of ICs (e.g., a chip set). Various components, modules, or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require realization by different hardware units. Rather, as described above, various units may be combined in a codec hardware unit or provided by a collection of interoperative hardware units, including one or more processors as described above, in conjunction with suitable software and\/or firmware.","Various examples have been described. These and other examples are within the scope of the following claims."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 4A-4D"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 5A-5C"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 6A-6C"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
