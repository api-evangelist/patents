---
title: Proactively communicating information between processes through a message repository
abstract: A method and apparatus for proactively communicating information between processes through a message repository is provided. To communicate with other processes, a process may post a message to a message repository. Other processes may, at regular or irregular intervals, search the message repository for new messages that have been posted to the repository since the last search, and retrieve those new messages. Processes may post and retrieve messages relative to the message repository by invoking methods provided by an application programming interface (API). By posting a message to the message repository, a particular process can inform other interested processes proactively of actions that the particular process has taken, is taking, or will take. By retrieving messages from the message repository, a process can determine what actions other processes have taken, are taking, or will take, and adjust accordingly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235457&OS=09235457&RS=09235457
owner: Oracle International Corporation
number: 09235457
owner_city: Redwood Shores
owner_country: US
publication_date: 20030327
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Functional Overview","Proactively Communicating Information Between Processed Through a Message Repository","Hardware Overview"],"p":["The present invention relates to interprocess communication, and in particular, to proactively communicating information between processes through a message repository.","Sometimes, actions performed by one process may impact one or more other concurrently executing processes. For example, a first process may generate data and write the data into a buffer. A second process might concurrently read data from the buffer, removing data from the buffer as the data is read. As long as the second process reads and removes data from the buffer at least as rapidly as the first process writes data to the buffer, the buffer will not overflow. However, the second process might shut down. If the first process is not aware that the second process has shut down, then the first process might continue to write data to the buffer, eventually causing the buffer to overflow.","Because actions performed by one process may impact one or more other processes, it is beneficial for such processes to be able to communicate automatically with each other. If processes execute in connection with the same operating system, then the processes may invoke interprocess communication methods provided by the operating system in order to exchange messages with each other.","However, each process will often execute in connection with a different operating system. Even if each such operating system provides interprocess communication methods, an interprocess communication method provided by one operating system might not be compatible with an interprocess communication method provided by another operating system.","Under some approaches, in order for a first process to receive each message that is sent from a second process, the first process is configured to listen continuously for messages from the second process. When a first process is configured to continuously listen for messages from a second process, the first process can be said to be \u201ctightly coupled\u201d to the second process. Tight coupling between processes increases the processing overhead involved in interprocess communication.","Under some approaches, in order for a particular process to send a message to multiple other processes, the particular process sends the message to each of the other processes separately. Under such approaches, the particular process needs to know the identity of each message recipient. If there are many message recipients, then many messages will be sent. Too many messages can overwhelm limited communication resources.","Additionally, under current approaches, messages relating to an action performed by a process are generated only after the process has performed the action. In systems that use monitoring agents, a significant amount of time may pass before a monitoring agent detects that a process has performed an action. A significant amount of time may pass before the monitoring agent generates a corresponding message to alert other processes about the action. By the time the action has been performed, there may be little or no time remaining for such other processes to prepare for or respond to the action appropriately and effectively. At any given moment, computing resources may be allocated to the performance of one or more tasks. Without receiving sufficient advanced notice of some actions, processes might not have enough time to re-allocate enough resources to handle the action efficiently. When processes can only attempt to judge the impact of other processes' performed actions based on limited information gathered reactively by a monitoring agent, which may be able to determine only superficial information about the actions, the processes may be hindered by the need to evaluate the meaning of the actions. Sometimes, only the process that performed the actions possesses sufficient information concerning the full meaning and scope of the actions.","These are some of the problems that attend past approaches to interprocess communication. Because of these problems, past approaches to interprocess communication leave much to be desired. Because interprocess communication can significantly benefit systems in which the actions of one process impact one or more other processes, a technique for interprocess communication that overcomes these problems is needed.","The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.","A method and apparatus for proactively communicating information between processes through a message repository is described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","To communicate with other processes, a process may post a message to a message repository. Other processes may, at regular or irregular intervals, search the message repository for new messages that have been posted to the repository since the last search, and retrieve those new messages. Processes may post and retrieve messages relative to the message repository by invoking methods provided by an application programming interface (API). By posting a message to the message repository, a particular process can inform other interested processes proactively of actions that the particular process has taken, is taking, or will take. By retrieving messages from the message repository, a process can determine what actions other processes have taken, are taking, or will take, and adjust accordingly.","The API that provides the interprocess communication methods may provide such methods through a standard interface that does not vary between operating systems. Although a particular implementation of the methods provided by the API may be customized for a particular operating system, the syntax used to invoke the methods and the functionality provided by the methods needs not depend on the implementation. Applications may be programmed to post and retrieve messages relative to the repository by invoking standard API methods, so that application programmers do not need to account for differences between operating systems.","Because a process may post a message to the message repository rather than sending the message directly to an intended recipient, the intended recipient does not need to listen continuously for messages. Instead, a recipient process may search the message repository at regular or irregular intervals and retrieve any new messages that may be of interest. Thus, the processes need not be tightly coupled, but may be \u201cloosely coupled\u201d instead. By eliminating the need for processes to listen continuously, fewer processing resources may be used, freeing those resources for other purposes.","Additionally, by posting a message to the message repository, a process does not need to identify any intended message recipients. A process may send just one message that may be retrieved by any number of other interested processes. A process does not even need to know of the existence of any other processes that may be interested in the message. As fewer messages are sent, fewer communication resources are used, freeing those resources for other purposes.","Furthermore, by proactively posting a message relating to an action before the action has been performed, a process that will perform the action can provide sufficient time for other processes to efficiently and effectively prepare for and respond to the action. The process that will perform the action usually possesses the best information on how soon a message should be posted before the action is performed. Thus, other processes are provided with enough time to re-allocate resources needed to handle a response to the action. As the process that possesses the best information on the full scope and meaning of an action to be performed, the process that is to perform the action may proactively post a message that conveys sufficient information for other processes to properly and completely respond to the action. Thus, other processes are not forced to spend time evaluating the scope of the performing process' action. The systems described herein may be viewed as a proactive \u201ctell\u201d communication architecture that provides numerous advantages over the reactive \u201cwatch\u201d communication architecture of past approaches.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","102","104","106","110","100","108","112","102","104","106"]},"CRM , ERP , database server , and message database server  may be executed on the same computer or on different computers that are connected to a local area network (LAN), wide area network (WAN), or interconnected internetworks. Database  may be stored on the same computer that executes database server , or on a different computer. Message database  may be stored on the same computer that executes message database server , or on a different computer.","Each of CRM , ERP , and database server  is coupled communicatively to message database server . Thus, CRM , ERP , and database server  may send data to, and receive data from, message database server . Database  is coupled communicatively to database server . Thus, database server  may write data to, and read data from, database . Message database server  is coupled communicatively to message database . Thus, message database server  may write data to, and read data from, message database .","According to one embodiment, each of CRM , ERP , and database server  can invoke methods that are provided by a standard API. When invoked, one method provided by the standard API instructs message database server  to write specified data to message database . When invoked, another method provided by the standard API instructs message database server  to read and return, from message database , data that matches specified criteria. The same method may be invoked by any of CRM , ERP , and database server  to achieve the same functionality, even though each of CRM , ERP , and database server  may execute in connection with different operating systems. While the specific implementation of the API methods may vary, the syntax and parameters accepted by the API methods are operating system independent. According to one embodiment, message database  contains only data that has been stored as a result of the invocation of a method provided by an API as described above. Thus, according to one embodiment, message database  is dedicated to storing messages of the kind described herein.","By invoking a standard API \u201cpost\u201d method, any of CRM , ERP , and database server  can cause message database server  to store, in message database , a message that explicitly identifies an action that the invoking process has performed, is performing, or will perform. By invoking a standard API \u201cretrieve\u201d method, any of CRM , ERP , and database server  can cause message database server  to retrieve, from message database , one or more messages that have been posted by other processes.","Thus, a process may inform other processes proactively of actions that may impact the other processes. Upon discovering such actions, another process may adjust or reconfigure based on the actions. Because a process may post a message concerning an action that the process will take in the future, other processes may adjust based on the action more quickly than if the other processes were able to discover the action only after the occurrence of the action.","It should be noted that processes that cause messages to be posted to and retrieved from message database  may be separate from message database server . For example, each of CRM , ERP , and database server  is separate from message database server .","It also should be noted that messages posted to and retrieved from message database  may concern actions that do not involve message database  or message database server . For example, ERP  may post a message that indicates that ERP  will add fifty records to database . While such an action affects database server  and database , such an action does not involve message database server  or message database , as neither message database server  nor message database  is a source or target of the action.","Message database  serves as a message repository. According to an alternative embodiment, the message repository may be a data structure other than a database. For example, the messages described above may be stored in a flat file instead of a database. While, in one embodiment, message database  is centralized, in an alternative embodiment, message database  may be distributed among several different computers and\/or storage media.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","200","102","104","102","106","104","106"]},"In block , a first process causes a database server to store, in a message database, a message that explicitly identifies an action that the first process has performed, is performing, or will perform. For example, ERP , by invoking a \u201cpost\u201d method of an API, may cause message database server  to store, in message database , a message that indicates that ERP  will add fifty records to database .","In block , a second process causes the database server to retrieve the message from the message database. For example, database server , by invoking a \u201cretrieve\u201d method of an API, may cause message database server  to retrieve, from message database , the message that indicates that ERP  will add fifty records to a particular table in database . As input, the retrieve method may receive one or more parameters that indicate a set of criteria. Message database server  may filter out messages that do not satisfy the criteria and return only messages that satisfy the criteria.","In block , the second process performs a responsive action based on the action. For example, in response to determining from the message that ERP  will add fifty records to the particular table in database , database server  may allocate space in a database  for at least fifty additional records of the type stored in the particular table if such space has not already been allocated.","The responsive action may vary based on the action described in the message. For example, depending on the action, the second process may adjust Random Access Memory (RAM) buffers, adjust its own configuration, adjust the priority of tasks that it is currently performing, adjust an amount of allocated disk space, generate and send customized instructions to the Central Processing Unit (CPU), and\/or display a message to a user. The second processes may, additionally or alternatively, perform other responsive actions.","The messages posted to message database  may indicate the date and time at which they were posted. In other words, each record in message database  may contain a timestamp. In one embodiment, when message database server  receives a command from a particular process to read and return messages from message database , message database server  searches for and returns only messages that have timestamps that indicate that those messages were posted since the last time that message database server returned messages to the particular process. According to one embodiment, for each process that accesses message database , message database server  maintains a record that indicates the last time that the process read message database , and uses the record to determine which messages were posted since the last time that the process read message database .","When a process invokes a \u201cpost\u201d method of an API, the process may specify one or more parameters. According to one embodiment, a \u201cpost\u201d command takes the form of \u201cpost_message(source, action_message, target, timestamp).\u201d For example, the source program code on which ERP  is based may contain an instruction such as \u201cpost_message(ERP, \u2018add 50 records\u2019, database , \u2018Jan. 15, 2002 11:02 pm\u2019).\u201d The parameters indicate that ERP  will add 50 records to database  effective as of Jan. 15, 2003, at 11:02 pm.","Upon receiving the command sent by the API's implementation of the \u201cpost_message\u201d method, message database server  adds a record to message database . Records in message database  may contain an attribute for each parameter that may be specified in the \u201cpost_message\u201d method. For example, each record in message database  may contain a separate attribute for each of a source, an action, a target, and a timestamp. The source attribute may identify the process that caused the record to be added to message database .","The target parameter is optional in the \u201cpost_message\u201d method. For example, the source program code on which database server  is based may contain an instruction such as \u201cpost_message(database_server, \u2018shut down\u2019, \u2018Jan. 15, 2002 11:02 pm\u2019).\u201d The parameters indicate that database server  will shut down effective as of Jan. 15, 2003, at 11:02 pm. The message does not need to indicate expressly that the target of the action is database server . Where a message expresses no target, it may be implied that the expressed source is also the target of the expressed action. The target may be a process or data structure upon which the expressed action has been performed, is being performed, or will be performed.","When a process invokes a \u201cretrieve\u201d method of an API, the process may specify one or more parameters. According to one embodiment, a \u201cretrieve\u201d command takes the form of \u201cretrieve_messages(source, target).\u201d For example, the source program code on which database server  is based may contain an instruction such as \u201cretrieve_messages(ERP, database).\u201d The parameters indicate that message database server  should find and return only messages posted by ERP  since the last time that database  caused message database server  to find and return messages posted by ERP .","The target parameter is optional in the \u201cretrieve_messages\u201d method. For example, the source program code on which database server  is based may contain an instruction such as \u201cretrieve_messages(database_server).\u201d The parameters indicate that that message database server  should find and return all messages that have not yet been returned to database server . Thus, a process may search for new messages generally, or only for new messages that were posted by a specified source.","The action parameter may specify a quantity. For example, the action \u201cadd 50 records\u201d specifies the quantity \u201c50.\u201d A processes that receives a message that contains an action that specifies a quantity may perform a responsive action that is based on the specified quantity. For example, if database server  receives a message that specified that ERP  will add fifty records to a particular table in database , then database server  may allocate space in database  for at least fifty records, rather than twenty or one hundred.","The responsive action taken in response to an action specified in a message may comprise displaying a notification that is based on the action specified in the message. For example, in response to receiving a message that indicates that database server  will shut down at a particular time, ERP  may display, on a monitor that is connected to a computer on which ERP  executes, a notification that informs a user that database server  will shut down at the particular time. After viewing the notification, the user may take appropriate action.","According to one embodiment, in addition to the information described above, a message may comprise security information. In one embodiment, a process that generates a message encrypts all or a portion of the message with a public key that is associated with one or more processes for which the message is intended. Upon receiving a message, a recipient process may decrypt the encrypted portion with a private key that is associated with the recipient process. The private key is not known to processes other than the processes for which the message is intended.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["300","300","302","304","302","300","306","302","304","306","304","300","308","302","304","310","302"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3","b":"300"}]},"DETDESC":[{},{}]}
