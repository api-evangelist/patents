---
title: Enumeration of a concurrent data structure
abstract: An enumerable concurrent data structure referred to as a concurrent bag is provided. The concurrent bag is accessible by concurrent threads and includes a set of local lists configured as a linked list and a dictionary. The dictionary includes an entry for each local list that identifies the thread that created the local list and the location of the local list. Each local list includes a set of data elements configured as a linked list. A global lock on the concurrent bag and local locks on each local list allow operations that involve enumeration to be performed on the concurrent bag.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09418175&OS=09418175&RS=09418175
owner: Microsoft Technology Licensing, LLC
number: 09418175
owner_city: Redmond
owner_country: US
publication_date: 20090331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Processes executed in a computer system may be configured to execute different parts of the process concurrently. Where these different parts of the process may access the same data concurrently, the accesses to the data are typically synchronized. For example, when a thread of a process accesses data, it generally invokes a lock or other synchronization technique to ensure that no other thread of the process performs a conflicting access to the data. The synchronization prevents data from being corrupted but adds processing overhead to each data access and may serialize the access to the data by different threads. This serialization may inhibit the performance and scalability of a process, particularly where there are many independent processing resources that execute threads.","A process may wish to perform concurrent operations on a collective set of data. In doing so, different threads of the process may add data to or remove data from the collective set of data in an arbitrary order. The process may wish to enumerate the collective set of data at some point in the execution. While various synchronization mechanisms may be used to allow the collective set of data to be enumerated, the synchronization mechanisms may inhibit the performance and scalability of the process.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","An enumerable concurrent data structure referred to as a concurrent bag is provided. The concurrent bag is accessible by concurrent threads and includes a set of local lists configured as a linked list and a dictionary. The dictionary includes an entry for each local list that identifies the thread that created the local list and the location of the local list. Each local list includes a set of data elements configured as a linked list. A global lock on the concurrent bag and local locks on each local list allow operations that involve enumeration to be performed on the concurrent bag.","In the following Detailed Description, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. In this regard, directional terminology, such as \u201ctop,\u201d \u201cbottom,\u201d \u201cfront,\u201d \u201cback,\u201d \u201cleading,\u201d \u201ctrailing,\u201d etc., is used with reference to the orientation of the Figure(s) being described. Because components of embodiments can be positioned in a number of different orientations, the directional terminology is used for purposes of illustration and is in no way limiting. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description, therefore, is not to be taken in a limiting sense, and the scope of the present invention is defined by the appended claims.","It is to be understood that the features of the various exemplary embodiments described herein may be combined with each other, unless specifically noted otherwise.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["10","12","22","1","22","12"]},"Runtime environment  represents a runtime mode of operation in a computer system, such as a computer system  shown in  and described in additional detail below, where the computer system is executing instructions. The computer system generates runtime environment  from a kernel , processing resources ()-(N) where N is greater than or equal to one and may vary during the execution of process , a resource management layer , and a runtime platform . Runtime environment  allows process  to be executed by the computer system along any other processes that co-exist with process  (not shown) using kernel , processing resources ()-(N), resource management layer , and runtime platform . Runtime environment  operates in conjunction with kernel  and\/or resource management layer  to allow process  to obtain processor and other resources of the computer system (e.g., processing resources ()-(N)).","Process  may be configured to operate in a computer system based on any suitable execution model, such as a stack model or an interpreter model, and may represent any suitable type of code, such as an application, a library function, or an operating system service. Process  has a program state and machine state associated with a set of allocated resources that include a defined memory address space of the computer system. Process  executes autonomously or substantially autonomously from any co-existing processes in runtime environment . Accordingly, process  does not adversely alter the program state of co-existing processes or the machine state of any resources allocated to co-existing processes. Similarly, co-existing processes do not adversely alter the program state of process  or the machine state of any resources allocated to process .","Process  includes an allocation of processing and other resources that execute threads . Process  obtains access to the processing and other resources in the computer system from kernel , resource management layer , and runtime platform . Process  includes a sequence of instructions that perform work when executed by threads  in the computer system. Each thread  includes program state and machine state information that allows blocking and unblocking of threads . The blocking may include preemptive and\/or cooperative blocking. Threads  may be created or terminated as specified by process  and\/or kernel .","Kernel  manages processing and other resources of the computer system and provides a set of functions that allow process  and other processes in the computer system to access and use the components. In addition, kernel  offers threads  to process  and allocates memory of the computer system to process . Kernel  may allocate the memory in any suitable fixed or variable sizes (e.g., pages of 4 kilobytes (KB) to 64 KB).","Processing resources  reside in execution cores of a set or one or more processor packages (e.g., one or more processor packages  shown in  and described in additional detail below) of the computer system. Each processing resource  is configured to execute instructions independently or substantially independently from the other execution cores and includes a machine state. Processing resources  may be included in a single processor package or may be distributed across multiple processor packages. Each execution core in a processor package may include one or more processing resources .","Resource management layer  allocates processing resources  to process  to cause process  and threads  to be executed by the allocated processing resources . Resource management layer  exists separately from kernel  in the embodiment of . In other embodiments, resource management layer  or some or all of the functions thereof may be included in kernel .","Runtime platform  includes instructions that are executable in conjunction with kernel  and resource management layer  to generate runtime environment  and provide runtime functions to process  and other processes. These runtime functions include a concurrent bag function that creates concurrent bag  as will be described below. The runtime functions may be included in computer system  as a library of functions or other suitable programming construct that makes the functions available to process  and other processes in runtime environment . In other embodiments, some or all of the runtime functions may be as an integrated part of kernel  and\/or resource management layer .","Process  causes concurrent bag  to be created via the concurrent bag function provided by runtime platform . Concurrent bag  is a data structure that forms a concurrent collection of data elements  (shown in ) that is accessible by multiple threads . The concurrent bag function may be implemented as an application programming interface (API) or other suitable programming construct in runtime platform .","Concurrent bag  includes a concurrent dictionary  and a linked list of local lists  of data elements . Dictionary  includes an entry  for each local list  where each entry  includes a thread identifier A that identifies a thread  that created the corresponding local list  as the key and a list identifier B that identifies a location of the corresponding local list  as the value. The set of local lists  are configured as a linked list by including a next list identifier  with each local list  that identifies the head of a next local list .","The linked list of local lists  may be locked using a global lock  or other suitable synchronization mechanism. A thread  that acquires global lock  prevents all other threads  from adding or deleting local lists  from the linked list until the thread  releases global lock . Global lock , however, does not prevent threads  from adding, removing, or stealing data elements  from local lists .","Concurrent bag  also includes a synchronization indicator . Synchronize indicator  indicates whether synchronization (e.g., a local lock ) is to be used when a thread  performs an add operation or a remove operation to the linked list or steals a data element  from the linked list. If synchronization is to be used, then the thread  acquires the local lock  of the local list  prior to performing a synchronized add operation or a synchronized remove operation or stealing a data element  without regard to the number of data elements  in the linked list of data elements . If not, then the thread  performs the add operation or remove operation without synchronization if the linked list of data elements  includes two or more data elements .","As shown in , each local list  includes a next list identifier , a thread identifier , a head identifier , a set of data elements  configured as a linked list, a tail identifier , a count , a steal count , a current operation indicator , and a lock taken indicator . Each local list  may be locked using a corresponding local lock  or other suitable synchronization mechanism.","Thread identifier  identifies the thread  that created the corresponding local list .","Head identifier  and tail identifier  identifies the head and the tail of a linked list, respectively, formed by the set of data elements ()-(P) of the corresponding local list , where P represents the Pth data element  at any point in the execution of process . The set of data elements  is configured as a linked list to allow the thread  that created the corresponding local list  and one other thread  to concurrently access the linked list where the linked list includes two or more data elements . For example, the thread  that created the corresponding local list  may access (i.e., add or remove) the data element () at the head of the linked list while another thread  concurrently steals (i.e., removes) the data element (P) at the tail of the linked list if P is greater than or equal to two.","Count  identifies the number data elements  that have been added to and removed from in the linked list by the thread  that created the corresponding local list  (i.e., the thread  identified in thread identifier ). Count  is incremented each time that a data element  is added to the linked list by the thread  that created the corresponding local list  and decremented each time that a data element  is removed from the linked list by the thread  that created the corresponding local list  in one embodiment.","Steal count  identifies the number data elements  that have been stolen (i.e., removed) from in the linked list by a threads  other than the thread  that created the corresponding local list . Steal count  is incremented each time that a data element  is stolen from the linked list by a threads  other than the thread  that created the corresponding local list .","Current operation indicator  is set by the thread  that created the corresponding local list  to indicate whether an unsynchronized add operation, an unsynchronized remove operation, or no operation is being performed on the linked list of data elements . The thread  performs an add operation to add a data element  to the linked list and performs a remove operation to remove a data element  from the linked list. Current operation indicator  indicates that no operation is being performed any time that no unsynchronized add or remove operation is being performed by the thread .","Lock taken indicator  indicates whether the local lock  is currently taken or is currently available. A thread  that acquires the local lock  prevents all other threads  from performing synchronized add and remove operations on the corresponding local list  and stealing from the corresponding local list  until the thread  releases the local lock .","Concurrent bag  attempts to minimize the use of synchronization (e.g., minimize the use of global lock  and local locks ) in accessing data elements  in concurrent bag  from multiple threads  while preserving thread safety between threads  as described below with reference to . In addition, concurrent bag  provides for enumeration to support various operations for concurrent bag  as described below with reference to . The synchronization policies described with reference to  allow concurrent bag  to be frozen for enumeration as described with reference to .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3","FIGS. 1 and 2"],"b":["30","24","24","22","24","20","22","24","20"]},"In , any time that an arbitrary thread  seeks to add a data element to a local list  in concurrent bag , the thread  determines whether a local list  for the thread  is present in concurrent bag , as indicated in a block , by locating an entry  for the thread  in dictionary . If an entry  for the thread  is located, then the thread  adds the data element  to the local list  as described in the method of  below. If not, then the thread  determines whether global lock  of concurrent bag  is available as indicated in a block . If not, then the thread  waits until global lock  is available before acquiring global lock  as indicated in a block , adding a local list  to the linked list of local lists  in concurrent bag  as indicated in a block , and adding the data element  to the local list  as indicated in a block . The thread  subsequently releases global lock  as indicated in a block . Using global lock , runtime platform  synchronizes the addition of local lists  to concurrent bag  by threads .","In one embodiment, thread  calls a function in runtime platform  that causes the local list  to be added to concurrent bag . The function creates an entry  in dictionary  that identifies the thread  in thread identifier A and the location of the local list  in list identifier B. The function also sets the next list identifier  of the previous local list  (if present), which is identified using the previous entry  in dictionary , to identify the newly added local list . The function further sets the next list identifier  of the newly added local list  to null. In other embodiments, thread  adds the local list  to concurrent bag  using other suitable programming constructs or one or more functions located outside of runtime platform  but in or accessible to the computer system.","Local lists  may continue to be added to concurrent bag  by arbitrary threads  until concurrent bag  is deleted. In one embodiment, a thread  deletes concurrent bag  by calling a function in runtime platform . In other embodiments, thread  deletes concurrent bag  using other suitable programming constructs or one or more functions located outside of runtime platform  but in or accessible to the computer system. In embodiments with garbage collection, runtime platform  may mark the concurrent bag  and local lists  for collection by a garbage collector (not shown). In other embodiments, runtime platform  may delete the concurrent bag  and local lists  in other suitable ways.","In some embodiments, a local list  of a thread  that is aborted may be reassigned to a thread  that attempts to add a new local list  to concurrent bag . In these embodiments, the thread identifier A in the dictionary  and the thread identifier  of a local list  of a thread  that is aborted are set to identify the thread  attempting to add a new local list . The existing local list  is then used by the thread  instead of creating a new local list .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4A","FIG. 4A","FIGS. 1 and 2"],"b":["30","24","22","30"]},"In , any time that a thread  that created a local list  seeks to perform an add operation or a remove operation on the corresponding local list  as indicated in a block , the thread  sets the current operation indicator  of the corresponding local list  to identify the add operation or the remove operation as indicated in a block . The thread  then accesses the synchronize indicator  to determine whether synchronization is to be used while performing the add operation or the remove operation as indicated in a block . If the synchronize indicator  does not indicate that synchronization is to be used, then the thread  determines whether the local list  includes less than two data elements  by subtracting steal count  from count  as indicated in a block .","If the synchronize indicator  does not indicate that synchronization is to be used and the local list  includes two or more data elements , then the thread  performs the add operation or the remove operation on the local list  without synchronization as indicated in a block . For an add operation, thread  adds a data element  to a designated end of the linked list and increments count . For a remove operation, thread  removes a data element  from the designated end of the linked list and decrements count . The designated end of the linked list is the end of the linked list that is not used by other threads  that may steal data elements  from the linked list. For example, a thread  may perform add and remove operations to the head of the linked list of data elements  where other threads  may steal from the tail of the linked list of data elements . After completing the unsynchronized add or remove operation, the thread  clears the current operation indicator  as indicated in a block .","If the synchronize indicator  indicates that synchronization is to be used or the local list  includes less than two data elements , then the thread  clears the current operation indicator  as indicated in a block . The thread  determines whether the local lock  of the corresponding local list  is available using lock taken indicator  as indicated in a block . If not, then the thread  waits until the local lock  is available before acquiring the local lock  as indicated in a block , performing the add operation or the remove operation (described above) with synchronization as indicated in a block , and subsequently releasing the local lock  as indicated in a block .","Depending on the actual use of concurrent bag , accesses to a local list  by the thread  that created the local list  may be largely unsynchronized. Synchronization may be performed under designated circumstances (e.g., enumeration as described below) that are indicated by the synchronize indicator  and to ensure thread safety (e.g., when the linked list includes less than two data elements ).",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4B","FIG. 4B","FIGS. 1 and 2"],"b":["30","24","22","22","30"]},"In , a thread  may access a local list  other than a local list  created by the thread  using dictionary  as indicated in a block . When a local list  created by the thread  does not include any data elements  (i.e., the count  minus the steal count  is zero), the thread  may attempt to steal a data element  from another local list . The thread  accesses one or more entries  in dictionary  until the thread  identifies local list  with a data element  that may be stolen as indicated in a block . A local list  includes a data element  that may be stolen if the head indicator  of the local list  is not equal to null. The thread  may access the entries  in the order that the entries appear in dictionary  or other suitable order until a local list  with a data element  that may be stolen is identified.","Once a thread  identifies a local list  with a data element  that may be stolen, the thread  determines whether the corresponding local lock  of the local list  is available using lock taken indicator  as indicated in a block . If not, then the thread  waits until the local lock  is available before acquiring the local lock  as indicated in a block . The thread  then waits until any unsynchronized remove operations complete by waiting until the current operation indicator  is not set to indicate a remove operation as indicated in a block . After all unsynchronized remove operations complete, the thread  again ensures that a data element  to steal is present as indicated in a block . If not, then the thread  releases the local lock  as indicated in a block  and repeats the function of block . If so, then the thread  steals a data element  from the local list  and incrementing the steal count  of the local list as indicated in a block , and subsequently releases the local lock  as indicated in a block . Stealing, as just described, is performed with synchronization because more than one thread  may attempt to steal from the same local list .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 5","FIG. 5","FIGS. 1 and 2","FIG. 5","FIG. 5"],"b":["24","22","24","20","12","14"]},"In , runtime platform  determines whether global lock  of concurrent bag  is available as indicated in a block . If not, then the runtime platform  waits until global lock  is available before acquiring global lock  to prevent any new local lists  from being added to concurrent bag  as indicated in a block . Runtime platform  sets the local lists  to synchronize using the synchronize indicator  to cause any subsequent operations on the local lists  to be synchronized as indicated in a block  and begins acquiring local locks  of each local list  as indicated in a block .","Runtime platform  waits until all local locks are acquired as indicated in a block  and all unsynchronized operations are complete as indicated in a block  before performing the operation that involves enumeration. For each local list , runtime platform  waits until both the local lock  is acquired and the current operation indicator  indicates that no operation is being performed. After the local lock  is acquired, no unsynchronized operations (e.g., add or remove operations) may be started by a thread  until the local lock  is released. The thread  may, however, have started an unsynchronized add or remove operation prior to the local lock  being acquired by runtime platform . Accordingly, runtime platform  waits until the current operation indicator  of the local list  indicates that no operation is being performed to ensure that any unsynchronized add or remove operation completes before beginning the enumeration.","After all local locks are acquired and all unsynchronized operations on all local lists  are complete, runtime platform  performs the operation that involves the enumeration as indicated in a block . By acquiring the global lock  and all local locks  in blocks -, runtime platform  effectively freezes concurrent bag  to prevent any new local lists  from being added and any data elements from being added to, removed from, or stolen from any local lists . With the concurrent bag  frozen, runtime platform  proceeds with enumerating the concurrent bag  by accessing and enumerating the data elements  in each local list . Runtime platform  locates the first local list  using the list identifier B in the first entry  in dictionary . Upon locating the first local list , runtime platform  accesses each data element  in the linked list from the data element () identified by the head indicator  through the data element () identified by the tail indicator . When the tail indicator  is reached, runtime platform  accesses the next list identifier  to identify the next local list  and repeats the process of enumerating the data elements  in this next local list . Runtime platform  continues identifying and enumerating local lists  until the local list  with the next list identifier  that is null is reached. At this point, runtime platform  has completed the enumeration part of the operation and may proceed to complete the overall operation.","The overall operation may be one or more of a Count operation, a CopyTo operation, a ToArray operation, or other suitable operation that involves enumeration. In a Count operation, runtime platform  uses the enumeration to count the number of data elements  in all local lists  in the concurrent bag  and returns the count to the thread  that called the Count operation. For a CopyTo operation, runtime platform  enumerates the concurrent bag  to allow the concurrent bag  to be copied to a specified location. Runtime platform  copies the concurrent bag  to the specified location and returns a confirmation indicator to the thread  that called the CopyTo operation. For a ToArray operation, runtime platform  enumerates the concurrent bag  to allow the concurrent bag  to be copied to a specified array. Runtime platform  copies the concurrent bag  to the specified array and returns a confirmation indicator to the thread  that called the ToArray operation.","Subsequent to performing the operation, runtime platform  releases local locks  of each local list  as indicated in a block , sets the local lists  to not synchronize using the synchronize indicator  as indicated in a block , and releases global lock  as indicated in a block . By doing so, runtime platform  unfreezes the concurrent bag  to allow processing of the data elements  by threads  to resume.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 6","FIG. 1"],"b":["100","10","12","22"]},"Computer system  includes one or more processor packages , a memory system , zero or more input\/output devices , zero or more display devices , zero or more peripheral devices , and zero or more network devices . Processor packages , memory system , input\/output devices , display devices , peripheral devices , and network devices  communicate using a set of interconnections  that includes any suitable type, number, and configuration of controllers, buses, interfaces, and\/or other wired or wireless connections.","Computer system  represents any suitable processing device configured for a general purpose or a specific purpose. Examples of computer system  include a server, a personal computer, a laptop computer, a tablet computer, a personal digital assistant (PDA), a mobile telephone, and an audio\/video device. The components of computer system  (i.e., processor packages , memory system , input\/output devices , display devices , peripheral devices , network devices , and interconnections ) may be contained in a common housing (not shown) or in any suitable number of separate housings (not shown).","Processor packages  include processing resources ()-(N). Each processing resource  in processor packages  is configured to access and execute instructions stored in memory system . The instructions may include a basic input output system (BIOS) or firmware (not shown), process , kernel , resource management layer , and runtime platform . Each processing resource  may execute the instructions in conjunction with or in response to information received from input\/output devices , display devices , peripheral devices , and\/or network devices .","Memory system  includes any suitable type, number, and configuration of volatile or non-volatile storage devices configured to store instructions and data. The storage devices of memory system  represent computer readable storage media that store computer-executable instructions including process , kernel , resource management layer , runtime platform , and other processes.","Memory system  stores instructions and data received from processor packages , input\/output devices , display devices , peripheral devices , and network devices . Memory system  provides stored instructions and data to processor packages , input\/output devices , display devices , peripheral devices , and network devices . The instructions are executable by a computer system to perform the functions and methods of process , kernel , resource management layer , and runtime platform  described herein. Examples of storage devices in memory system  include hard disk drives, random access memory (RAM), read only memory (ROM), flash memory drives and cards, and magnetic and optical disks.","Process  includes instructions that are executable in conjunction with kernel , resource management layer , and\/or runtime platform  to cause desired operations to be performed by computer system  as described above with reference to .","Computer system  boots and executes kernel . Kernel  includes instructions executable by processing resources  to manage the components of computer system  and provide a set of functions that allow process  and other processes to access and use the components. In one embodiment, kernel  is a Windows operating system. In other embodiments, kernel  is another operating system suitable for use with computer system .","Resource management layer  includes instructions that are executable in conjunction with kernel  to allocate resources of computer system  including processing resources  as described above with reference to . Resource management layer  may be included in computer system  as a library of functions available to process  and other processes or as an integrated part of kernel .","Runtime platform  includes instructions that are executable in conjunction with kernel  and resource management layer  to generate runtime environment  and provide runtime functions to process  and other processes as described above with reference to .","Input\/output devices  include any suitable type, number, and configuration of input\/output devices configured to input instructions or data from a user to computer system  and output instructions or data from computer system  to the user. Examples of input\/output devices  include a keyboard, a mouse, a touchpad, a touchscreen, buttons, dials, knobs, and switches.","Display devices  include any suitable type, number, and configuration of display devices configured to output textual and\/or graphical information to a user of computer system . Examples of display devices  include a monitor, a display screen, and a projector.","Peripheral devices  include any suitable type, number, and configuration of peripheral devices configured to operate with one or more other components in computer system  to perform general or specific processing functions.","Network devices  include any suitable type, number, and configuration of network devices configured to allow computer system  to communicate across one or more networks (not shown). Network devices  may operate according to any suitable networking protocol and\/or configuration to allow information to be transmitted by computer system  to a network or received by computer system  from a network.","Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that a variety of alternate and\/or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the specific embodiments discussed herein. Therefore, it is intended that this invention be limited only by the claims and the equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings are included to provide a further understanding of embodiments and are incorporated in and constitute a part of this specification. The drawings illustrate embodiments and together with the description serve to explain principles of embodiments. Other embodiments and many of the intended advantages of embodiments will be readily appreciated as they become better understood by reference to the following detailed description. The elements of the drawings are not necessarily to scale relative to each other. Like reference numerals designate corresponding similar parts.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 4A-4B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
