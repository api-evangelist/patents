---
title: Listening module for asynchronous messages sent between electronic devices of a distributed network
abstract: An electronic device is disclosed that is adapted for use in a distributed network of electronic devices. The device includes a processor, a communications layer and memory. The communications layer is in electronic communication with the processor for communications with the distributed network. The memory is in electronic communication with the processor for storing data. A software element is configured by an application to send a request to a plurality of receiver components where the request requires a response from each receiver component of the plurality of receiver components. The device also includes a smart listener configured to receive the request from the software element and to store the request in the memory. The smart listener is configured to transmit the request to the plurality of receiver components through the distributed network and to listen for responses from any of the plurality of receiver components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07305680&OS=07305680&RS=07305680
owner: Sharp Laboratories of America, Inc.
number: 07305680
owner_city: Camas
owner_country: US
publication_date: 20020813
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This invention relates generally to consumer electronic devices, and is more particularly directed toward systems and methods for listening for asynchronous messages sent between consumer electronic devices of a distributed network.","Computer and communication technologies continue to advance at a rapid pace. Indeed, computer and communication technologies are involved in many aspects of a person's day. For example, many consumer electronic devices being used today have a small computer incorporated within the device. These small computers come in varying sizes and degrees of sophistication. These small computers may vary in sophistication from one microcontroller to a fully-functional complete computer system. For example, small computers may be a one-chip computer, such as a microcontroller, a one-board type of computer, such as a controller, a typical desktop computer, such as an IBM-PC compatible, etc.","Modern electronic devices, including modern consumer electronic devices, typically have one or more processors. The processor(s) usually are interconnected to different external inputs and outputs and function to manage the particular device. For example, a processor in a video cassette recorder may be connected to buttons used to rewind, fast-forward, play, stop, eject, record, etc.","Many electronic devices, appliances, etc., include one or more small computers. For example, television (TV) sets, compact disc (CD) players, digital video disc (DVD) players, personal computer (PC) systems, set-top-boxes, video cameras, video cassette recorders (VCRs), radio receivers, tape decks, thermostats, furnaces, air conditioning systems, refrigerators, telephones, typewriters, automobiles, vending machines, and many different types of industrial equipment now typically have small computers, or processors, inside of them. Computer software runs the processors of these devices and tells the processors what to do to carry out certain tasks. For example, the computer software running on a VCR may cause the tape to stop playing when a user hits the stop button on the VCR or on the VCR's remote control.","The typical home entertainment system consists of a variety of different consumer electronic devices. For instance, home entertainment systems typically include a TV, a CD player, a set-top-box and a DVD player. Furthermore, other devices may be used in combination with a typical home entertainment system including personal computer systems, video cameras, VCRs, and the like.","With the increased use of electronic devices, and with the increased demands for the exchange of information, more devices are now able to be connected to one another and to establish electronic communications with one another. Many kinds of devices may benefit from being able to communicate with other devices without needing user intervention. Consumer electronics manufacturers have been working on specifications for connecting digital consumer electronic appliances in a home network so as to provide a standard for the audio\/video electronics and the multimedia industries. The home network may be considered a distributed computing platform. One such specification or standard is represented by the HAVi (Home Audio\/Video interoperability) architecture.","The HAVi architecture is designed to help different vendors manufacture products that can interoperate, i.e., cooperate to perform application tasks. As stated, many current consumer electronic devices, such as home entertainment equipment (DVD players, DV camcorders, digital TV sets, etc.) are digital processing and digital storage systems. Connecting these devices in networks makes it possible to share processing and storage resources. This allows coordination of the control of several electronic devices simultaneously. For example, a first device may start recording a television program on a second device while accessing an electronic program guide on a third device. The home network provides the means by which the various electronic devices in the home may be connected to communicate with one another.","As consumer electronic devices have become more complex, demand for the latest devices has increased. As new devices emerge and become popular they are purchased by consumers and connected to their home audiovisual systems or home networks. Consumers typically expect that once connected to the system or connected to a home network these new devices will be able to be controlled and operated within the system and\/or the network.","There are many benefits in being able to connect electronic devices together such that they may communicate and work together. For example, information received by a television tuner may be used to set the time and program channels of a video recorder. The user may program a recording on a VCR through use of a menu generated by the TV on the TV screen. Further, such interoperability may allow the TV to generate a menu to interact with a number of device in the network using the TV's remote control. In this example, if the VCR is to record a program at a certain time, it could detect at recording time that the original tuner is not available (e.g. because it is already in use by another device or by a user). The VCR may then try to resolve this situation by trying to find another tuner in the system or on the network or by trying to negotiate with the other device or user to release the original tuner to the VCR.","In view of the foregoing, many kinds of devices may benefit from being able to communicate with other devices. However, as more devices attempt to communicate with one another, inefficiencies may arise that may slow down or otherwise hinder the operation of one or more of the electronic devices. For example, if one device were communicating one or more other devices at the same time, the operation of this device may slow down, or its communication with the other device(s) may slow down due to the demands being placed on the device. Thus, benefits may be realized if electronic devices were enhanced with additional systems and methods for providing more effective communication techniques.","An electronic device is disclosed that is adapted for use in a distributed network of electronic devices. The device includes a processor, a communications layer and memory. The communications layer is in electronic communication with the processor for communications with the distributed network. The memory is in electronic communication with the processor for storing data. A software element is configured by an application to send a request to a plurality of receiver components where the request requires a response from each receiver component of the plurality of receiver components. The software element uses a smart listener. The smart listener is configured to receive the request from the software element and to store the request in the memory. Further, the smart listener is configured to transmit the request to the plurality of receiver components through the distributed network and to listen for responses from any of the plurality of receiver components. The smart listener is also configured to report to the software element information relating to the responses.","The software element may be configured to send a plurality of requests. In this embodiment the device may also include more than one smart listener where each smart listener is used for a single request. A smart listener manager may be used to manage the one or more smart listeners.","A smart listener may include a listener data structure with a plurality of data items. Each data item may include a receiver component identifier and a response data structure for storing one or more of the responses. A data item may further include a timing data structure for storing timing data.","The software element may further be configured to send a request profile with the request. The smart listener may be configured to receive the request profile. The request profile may include various pieces of data including response failure data, device removed data, device added data, state change data, partial response data, timing limits data, network related event data and\/or response configuration data.","The electronic device may be configured to operate on a distributed network. One example of a distributed network is a home audio video interoperability distributed network.","A computer-readable medium for carrying program data is also disclosed. The program data includes executable instructions for implementing a method. The method includes the steps that follow but not necessarily in the following order. The method includes running a first application of a first device on the distributed network and providing a first request by a first software element configured by the first application. The first request is for more than one destination device. The step of providing the first request to a smart listener is also included. The method also includes creating a listener data structure that includes more than one data item, wherein at least one data item is created for each destination device, and wherein each data item includes a receiver component identifier for identifying the destination device and a response data structure for storing one or more of the responses from the corresponding destination device. The first request is transmitted by the smart listener to each destination device. The smart listener listens for any responses from the destination devices. The method includes storing the responses in the response data structure and reporting report data by the smart listener to the software element where the report data is generated based on the responses and based on a request profile.","The method may also include providing a second request by a second software element and providing the second request to a smart listener manager. The smart listener manager may create a second smart listener for the second request. The smart listener manager may also create a plurality of smart listeners for a plurality of requests received from a plurality of software elements.","A method for communicating asynchronous messages across a home audio video interoperability distributed network is also disclosed. The method includes the steps that follow but not necessarily in the following order. The method includes running a first application of a first device on the distributed network and providing a first request by a first software element configured by the first application, the first request being for more than one destination device. The step of providing the first request to a smart listener is also included. The method also includes creating a listener data structure that includes more than one data item, wherein at least one data item is created for each destination device, and wherein each data item includes a receiver component identifier for identifying the destination device and a response data structure for storing one or more of the responses from the corresponding destination device. The step of transmitting the first request by the smart listener to each destination device is also included. Further, listening by the smart listener for any responses from the destination devices is also accomplished in the method. The method includes storing the responses in the response data structure and reporting report data by the smart listener to the software element where the report data is generated based on the responses and based on a request profile.","A consumer electronic device adapted for use in a home audio video interoperability distributed network of electronic devices is also disclosed. The device includes a processor, a communications layer and memory. The communications layer is in electronic communication with the processor for communications with an IEEE-1394 network. The memory is in electronic communication with the processor for storing data. A communications media manager is also provided for enabling software components to communicate using the IEEE-1394 network. Further, the device includes a registry to serve as a directory for the software components. A first software element is configured by an application to send a request to a plurality of receiver components where the first software element expects a response from each receiver component of the plurality of receiver components. The device also includes a smart listener manager configured to receive the request and to create a smart listener. The smart listener is configured to receive the request from the software element and to store the request in the memory. Further, the smart listener is configured to transmit the request to the plurality of receiver components through the IEEE-1394 network and to listen for responses from any of the plurality of receiver components. The smart listener is also configured to report to the software element information relating to the responses. The smart listener manager may be further configured to create a new smart listener for each new request.","It will be readily understood that the components of the embodiments as generally described and illustrated in the Figures herein, could be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of the embodiments of the system and method of the present invention, as represented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of the embodiments of the invention.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","102","102","104","102"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["102","102","202","204","206","202","204","206","202","102","204","206","202"]},"The electronic device  may also include memory . The memory  may be a separate component from the processor , or it may be on-board memory  included in the same part as the processor . For example, microcontrollers often include a certain amount of on-board memory.","The processor  is also in electronic communication with a communication layer . The communication layer  may be used for communications with other devices . Thus, the communication layers  of the various devices may be designed to communicate with each other to send signals or messages between the electronic devices . The communication layer  may be in electronic communication with the computer network medium  for sending and\/or receiving messages using the network medium .","The electronic device  may also include other communication ports . In addition, other components  may also be included in the electronic device .","Of course, those skilled in the art will appreciate the many kinds of different devices that may be used with embodiments herein. Accordingly, the block diagram of  is only meant to illustrate typical components of an embedded device  and is not meant to limit the scope of embodiments disclosed herein. Many of the commercially available electronic devices listed above may be used with embodiments herein.","The embodiments disclosed herein may be used within a device network of the HAVi (Home Audio\/Video interoperability) architecture. However, it will be appreciated by those skilled in the art that embodiments herein may be used with device networks that do not follow the HAVi architecture. Accordingly, the discussion herein relating to HAVi or the IEEE 1394 network are only meant as illustrative examples. The embodiments and invention claimed are applicable to a broad range of networks and architectures, including many of which are not HAVi or IEEE 1394 network related.","Some aspects of the HAVi architecture are discussed to provide a general framework in which embodiments operate. HAVi is an architecture for providing interoperability among consumer electronic devices  adapted for a home network. The interoperability aspects define an architectural model that allows devices  of many different vendors to work with one another on the same device network . The HAVi architecture supports a wide range of devices  including TV sets, CD players, DVD players, personal computers, set-top-boxes, video cameras, VCRs, radio receivers, tape decks, intelligent receiver\/decoders (IRDs), digital video tape records (DVTRs), etc., communicating via a common messaging system.","In one embodiment of the HAVi architecture, the IEEE 1394 serial communication bus standard is used as a local bus platform to provide the common messaging system. The IEEE 1394 serial communication bus carries both commands, status information and well as digital audio and digital video signals between devices. The electronic devices of a HAVi network can be viewed as logically coupled to a common IEEE 1394 serial communication bus. Peer-to-peer device communication is supported.","The HAVi architecture provides support for existing devices, a default control model, a means to extend the default control model when new devices or functionality is brought to market, and a common means for device representation. The devices in the HAVi architecture communicate by sending messages over the device network using a generic message passing system. When a new device joins the device network, it is recognized and added to a registry (discussed below). When a device is first connected to the device network, the device is queried to ascertain its characteristics and capabilities. With the IEEE 1394 standard, devices can be added to or removed from the serial bus while the bus is active. If a device is so added or removed, the bus automatically reconfigures itself for transmitting data between the then existing devices.","In order to allow one device to discover the capabilities of another device and to determine which command set to use with that device, a standard device description structure is provided called the self describing data (SDD) structure. The SDD data structure may vary in size. For example, the SDD data structure can be a small number of bytes describing the device type, or it may be a more complex structure also defining the override device control module (DCM) and a graphical representation of the device.","Relating to the graphical representation of the device, by defining the graphical representation in a generic manner, a device's SDD graphical data can be used in other products to display a user interface for that device which promotes vendor interoperability. It also allows a vendor to differentiate a product while maintaining within the general look and feel of the display device. The SDD also enables a control device to present a general control user interface for all devices in the device network.","The devices of the device network may be networked together using a standard communication protocol layer. For example, the IEEE 1394 communication standard may be used. The IEEE 1394 standard is an international standard for implementing a serial bus architecture. The IEEE 1394 standard provides a high-speed serial bus for interconnecting digital devices thereby providing universal input\/output connection. The standard defines a digital interface for applications thereby eliminating the need for an application to convert digital data to an analog form before it is transmitted across the bus. Correspondingly, a receiving application will receive digital data from the bus, not analog data and will therefore not be required to convert analog data to digital form.","In the HAVi architecture, the electronic devices in the network are controlled through abstract representations of the devices. The abstract representations are operated upon by a controller and hide some of the specific details of the associated real devices. The abstract representation thus provides a uniform interface for higher levels of software. The abstract representations may be registered with their control properties reflecting those of the device represented. The abstract representations expose their Interoperability API's (discussed below in relation to ) to the applications and collectively form a set of services for building portable, distributed applications on the home network.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["102","302","304","302","302","304","302"]},"The communications media manager  is the component that manages communications on the computer network medium  through use of calls in the platform API . If a HAVi architecture is being used, the communications media manager  may be a 1394 communications media manager.","The messaging system  is responsible for passing messages between the software elements . Software applications  are hosted on the processor  and may communicate with other applications on the network . Hereafter the mechanics of communication within such an application  will be referred to as a software element . The software elements  are software components that reside above the platform API . The software elements  may serve to manage the network  or portions of the network , to provide a layer of device abstraction, to provide inter-device communications, and to manage a user interface of the device. As shown, the software elements  form a middle layer between the platform-specific API  and platform independent applications.","Various software elements  may be provided to manage the network  or portions of the network , to provide a layer of device abstraction, to provide inter-device communications, and to manage a user interface of the device. A registry  may serve as a directory service allowing software elements  or other components to locate another software element  or other component on the network . The registry  holds information about device characteristics and provides a reference to a handler for that device. Devices and services are able to query the registry to locate a device and then, using the handler, can interact with the device.","Managers  may serve to manage the various aspects and components of the device . One or more managers  may be included on the device . An event manager (not shown) may be used to serve as an event delivery service. An event may be defined as a change in state of a device , software element , or of another component (not shown) or of the network . A stream manager (not shown) may be used and may be responsible for managing real-time transfer of AV and other media between functional components. A resource manager (not shown) may also be included. The resource manager (not shown) may facilitate sharing of resources and scheduling of actions. Device control modules  may also be included as software elements . A device control module  may be used to control a device . A device control module manager (not shown) may be responsible for managing device control modules .","As stated, one exemplary application of the embodiments herein may be with a HAVi network. The HAVi standard is described in the HAVi Specification, incorporated herein by reference. In addition to the aforementioned software elements , the HAVi Architecture specifies that a network  may contain an application module, self describing device data, java runtime environment and a data driven interaction controller.","Of course, it will be appreciated by those skilled in the art that the embodiments and inventive principles disclosed herein are not limited to HAVi or HAVi networks. The inventive principles herein may be applied to various types of communications systems that include electronic devices and\/or computers that communicate with each other.","The interoperability API  provides a set of services for building portable distributed applications on the network . The interoperability API  allows consumer electronics manufacturers and third parties to develop applications  for the device  and\/or for the network . The API  provides an interface to the applications  to access and use the functionality provided by the software elements  and other software components. For the HAVi Architecture, this API  is defined and is designed so that the products from different vendors can interoperate\u2014i.e., can cooperate to perform application tasks.","The applications  are computer programs created to operate on the device  for operation of the device . The applications  may use the interoperability API  to accomplish tasks.","If the device  were in a HAVi system, a havlet  may also be included. A havlet  is a HAVi Java application that is uploaded on the request of a controller from a device control module  or Application Module (not shown).","In the HAVi distributed software architecture, the software elements implement basic services such as network management, device abstraction, inter-device communication and device user interface management. Collectively, these software elements together expose the HAVi Interoperability API, a set of services for building portable distributed applications on the network. Software elements on different HAVi devices communicate with each other via HAVi defined protocols to offer the desired service and the Interoperability API. The software elements on a HAVi device are implemented on top of a device- and vendor specific platform, such as a real-time operating system. Applications (which are software elements themselves) can then access these APIs transparently across the network.","The electronic devices within a HAVi architecture share the resources available within the network. A user does not have to know from where the functionality is provided, only that it is available. To access or make use of a particular function, the user may access the user interface of the function, which may be presented remotely from the actual device supplying the function. A common way to display the user interface will be through the TV screen, with the function presented as a simple menu.","One illustration of the benefits provided by the HAVi architecture is the setting of a VCR to make a recording. In order to record a TV program, the VCR needs to have several settings made including the desired channel, the start time, the length of recording or the stop time and the date. If a user were watching TV in one room, but the VCR was in another room, he or she may find it difficult to immediately record a program. However, with HAVi the user would simply enter the \u201crecord\u201d command using the remote control on the TV in the room where the user is located and all the necessary actions are taken by the HAVi system. In this example, the TV may automatically program the VCR using data obtained from an Electronic Program Guide received by the TV. The VCR may further automatically set and update its own time based on the clock of the TV. Further with this example, if the VCR is disconnected, the network will notice this and inform the user that programmed recordings are no longer possible. The network may also search the network to find another connected and available VCR and use that one instead, thereby transparently delivering the functionality originally requested by the user, even though changes took place in the network configuration.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4","b":["402","310","402","102","310","310","100","310","102","102","320","102","102","102","310"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","b":["402","102","104","310","402"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6","FIG. 6"],"b":["402","102","102"]},"A software element I\/O component  may be included to provide input\/output functionality to the software element . A request method  may be provided for use by the software element in sending out a request. A response method  may be provided for use by the software element in receiving a response. A marshalling method  may be used to organize data. For example, if data needed to be compressed, or needed to be in a particular format, the marshalling method  may be used to format the data as needed. The un-marshalling method  may be used to unpack, reorganize, or otherwise undo what has been accomplished by the marshalling method . Of course, other utility methods  may be provided to accomplish various other tasks that may be needed as will be appreciated by those skilled in the art.","A clock  may be included for providing timing information. Typically the clock functionality is provided through a combination of hardware and software. The clock  may be used to measure the time it takes to receive a response which may enable the smart listener  to catch any delayed responses. The clock  also enables the smart listener  to notify the requesting software element  of delays and\/or timeouts.","The smart listener manager  manages smart listeners . In various situations, the smart listener manager  may include one smart listener , a number of smart listeners , or no smart listeners . For illustrative purposes, two smart listeners , are shown in . When a request is made by a software element , the smart listener manager  takes the request and creates a smart listener  to process the request. Of course, if a smart listener  was already created or instantiated, the smart listener manager  may not need to create a new smart listener  but it may simply use the already existing smart listener . The smart listeners  each include at least one request , which is more fully discussed in relation to .","The smart listener manager  may also include an event listener . The event listener  may listen for certain events taking place that may be of interest to the smart listeners . The event listener  may listen for such things as a network reset event (not shown), a new device event (not shown), a device removed event (not shown), etc.","In the embodiment shown in , the smart listener manager  may receive the responses from the network  and then provide the responses to the smart listener(s)  for evaluation. The smart listener manager  may use software element  identifiers and request identifiers to track and match the responses to the corresponding smart listener .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":["618","616","618","618","616","618","702","702","104"]},"Destination data  may be included to indicate where on the network  the request  is to be sent. The destination data  may include one or more addresses (not shown), identifications (not shown), etc. In addition, the destination data  may include a description of the types of destinations to send to from which the smart listener  may determine where to send the request . For example, a software element  may wish to send a message or request to all the televisions on a network . The software element  may indicate to the smart listener manager  or directly to the smart listener  that all televisions are to receive the message or request . From this information, the smart listener  may send the appropriate messages to all available televisions on the network .","A request profile  may also be used by the smart listener  to indicate how the smart listener  is to listen for responses. Response failure  data may indicate what action is to be taken if the smart listener  fails to receive a response from one or more of the destinations. The device removed data  may indicate what action is to be taken if one or more of the devices  that are destinations are removed from the network . The device added data  may indicate what action is to be taken if a new device  is added to the network  that relates to the request . The requester state change data  may indicate what action is to be taken if the state of the requestor changes. The partial response data  may indicate what action is to be taken by the smart listener  if only a partial response is received. The time limits data  may include timing information, such as how long the smart listener  should wait before considering a device  non-responsive, or how long to wait before assuming a response failure, how often the smart listener  is to report to the software element , etc. Many different kinds of timing information and data may be included if needed.","Response configuration data  may also be included to indicate how the response should be formatted before passing it to the software element , to indicate how many partial responses are to be received before it is considered a full response, to indicate what the response from the device  may look like, etc. The software element  may indicate through the response configuration data  that the smart listener  or smart listener manager  is only to report to the software element  when all of the destinations have responded. The software element  may also indicate through the response configuration data  that the smart listener  or smart listener manager  is to report immediately if certain events or errors are generated. Another use for the response configuration data  is that it may indicate whether the software element  is to be notified of non-responsiveness or whether responses are not timely received. As illustrated, a number of items may be indicated in the response configuration data . Other data  may also be included in the request profile  as needed to configure the smart listener  for particular listening characteristics. For example, other data  may include network related event data.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 8","FIG. 7"],"b":["616","618","616","616","802","802","804","802","806","808","802"]},"A responses data structure  may store some or all of the individual and\/or incremental responses sent back by the particular destination. The response data structure  may include a log or history of the individual responses , , etc., received in response to the request sent out. Thus, the smart listener  may handle complex requests that require a number of incremental responses over a period of time. As a result, the software element  does not need to continually monitor the network  for all of the responses because the smart listener  receives the responses , , etc. and may continue to hold or process these responses ,  until the smart listener  is ready to report back to the software element .","In operation, typically the smart listener  creates a data item  for each destination element or receiving component. For example, if the software element  passed a request to the smart listener , or to the smart listener manager  which would in turn pass it to the smart listener , that was to be sent to four destinations, the smart listener  may create four data items , , , . The first data item may correspond to the first destination as indicated in the destination data . The second data item may correspond to the second destination as indicated in the destination data . Etc. Each data item  may store the responses , , etc., received by the device  from the destination.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 9","b":["616","310","902","402","402","310","902","402"]},"The software element  may provide  a request to the smart listener manager . The smart listener manager  may create  a smart listener  to handle the request. Embodiments of a smart listener manager  may already have an available smart listener  such that it is not necessary to create a new smart listener . For example, in one embodiment of a smart listener manager , the manager  may include a pool (not shown) of smart listeners . When a smart listener  is needed, one may simply be taken from the smart listener pool (not shown) to be used. When the smart listener  is no longer needed, it may simply be returned to the smart listener pool (not shown).","The smart listener  may send  the request to the necessary destinations. As discussed earlier, the smart listener  may create data items  for each destination to track the responses. The smart listener  may be in a wait or idle state until a response is received.","The smart listener  processes  the responses. If interaction is needed with the destination, the smart listener  may handle the interaction. If multiple requests are needed, the smart listener  may create and\/or send the multiple requests. As these examples illustrate, the smart listener  handles a substantial portion of the listening and processing needed to communicate the request across the network  and to obtain the response(s).","As directed by the request profile  or by other programming, the smart listener  may report  to the software element  the response, or the responses, or information relating to the response or responses. Depending on the software element's  preference (usually indicated in the request profile ), the smart listener  or the smart listener manager  may provide back to the software element  individual responses received from each destination device on the network, the smart listener  data structures including the data items , a summary or report of the responses received, etc. The request profile may include response failure data, device removed data, device added data, state change data, partial response data, timing limits data, network related event data and response configuration data.","The smart listener  may continue to process responses as long as needed. When the smart listener  is no longer needed to process the request or the response(s), the smart listener  may be closed , deleted, or may be returned  to the smart listener pool (not shown).","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative, and not restrictive. The scope of the invention is, therefore, indicated by the appended claims, rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present embodiments will become more fully apparent from the following description and appended claims, taken in conjunction with the accompanying drawings. Understanding that these drawings depict only typical embodiments and are, therefore, not to be considered limiting of the invention's scope, the embodiments will be described with additional specificity and detail through use of the accompanying drawings in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
