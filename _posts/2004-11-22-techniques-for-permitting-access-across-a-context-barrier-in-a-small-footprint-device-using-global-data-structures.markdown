---
title: Techniques for permitting access across a context barrier in a small footprint device using global data structures
abstract: A small footprint device can securely run multiple programs from unrelated vendors by the inclusion of a context barrier isolating the execution of the programs. The context barrier performs security checks to see that principal and object are within the same namespace or memory space and to see that a requested action is appropriate for an object to be operated upon. Each program or set of programs runs in a separate context. Access from one program to another program across the context barrier can be achieved under controlled circumstances by using a global data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07395535&OS=07395535&RS=07395535
owner: Sun Microsystems, Inc.
number: 07395535
owner_city: Palo Alto
owner_country: US
publication_date: 20041122
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","Notations and Nomenclature ","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 09\/235,156 filed Jan. 22, 1999, entitled \u201cTECHNIQUES FOR PERMITTING ACCESS ACROSS A CONTEXT BARRIER IN A SMALL FOOTPRINT DEVICE USING GLOBAL DATA STRUCTURES,\u201d in the name of inventors Joshua Susser, Mitchel B. Butler, and Andy Streich, which issued as U.S. Pat. No. 6,907,608 on Jun. 14, 2005, and which application is incorporated herein by reference in its entirety.","This application is related to U.S. patent application Ser. No. 10\/664,216, entitled \u201cVirtual Machine with Securely Distributed Bytecode Verification\u201d by inventors Moshe Levy and Judy Schwabe, filed on Sep. 16, 2003,\u2014which is a continuation of U.S. patent application Ser. No. 10\/283,305, now U.S. Pat. No. 6,640,279, entitled \u201cVirtual Machine with Securely Distributed Bytecode Verification\u201d by inventors Moshe Levy and Judy Schwabe, filed on Oct. 30, 2002, which is a continuation of U. S. patent application Ser. No. 09\/547,225, now U.S. Pat. No. 6,546,454, entitled \u201cVirtual Machine with Securely Distributed Bytecode Verification\u201d by inventors Moshe Levy and Judy Schwabe, filed on Apr. 11, 2000, which is a continuation of U.S. patent application Ser. No. 08\/839,621 filed Apr. 15, 1997, entitled \u201cVIRTUAL MACHINE WITH SECURELY DISTRIBUTED BYTE CODE VERIFICATION\u201d, in the name of inventors Moshe Levy and Judy Schwabe, which issued as U.S. Pat. No. 6,092,147 on Jul. 18, 2000, and which application is incorporated herein by reference in its entirety.","This application is related to U.S. patent application Ser. No. 10\/996,266, filed Nov. 22, 2004 in the name of inventors Joshua Susser, Mitchel B. Butler and Andy Streich , entitled \u201cTECHNIQUES FOR IMPLEMENTING SECURITY ON A SMALL FOOTPRINT DEVICE USING A CONTEXT BARRIER,\u201d which is a continuation of U.S. patent application Ser. No. 09\/235,158 filed Jan. 22, 1999, entitled \u201cTECHNIQUES FOR IMPLEMENTING SECURITY ON A SMALL FOOTPRINT DEVICE USING A CONTEXT BARRIER,\u201d in the name of inventors Joshua Susser, Mitchel B. Butler, and Andy Streich, which issued as U.S. Pat. No. 6,823,520 on Nov. 23, 2004, and which application is incorporated herein by reference in its. entirety.","This application is related to U.S. patent application Ser. No. 10\/659,554, filed Sep. 9, 2003 in the name of inventors Joshua Susser, Mitchel B. Butler and Andy Streich , entitled \u201cTechniques for Permitting Access Across a Context Barrier on a Small Footprint Device Using an Entry Point Object\u201d, which is a continuation of U.S. patent application Ser. No. 09\/235,157, now U.S. Pat. No. 6,633,984, filed Jan. 22, 1999, entitled \u201cTECHNIQUES FOR PERMITTING ACCESS ACROSS A CONTEXT BARRIER ON A SMALL FOOTPRINT DEVICE USING AN ENTRY POINT OBJECT\u201d, in the name of inventors Joshua Susser, Mitchel B. Butler, and Andy Streich, which application is incorporated herein by reference in its entirety.","This application is related to U.S. patent application Ser. No. 09\/235,155, now U.S. Pat. No. 6,922,835, filed Jan. 22, 1999, entitled \u201cTECHNIQUES FOR PERMITTING ACCESS ACROSS A CONTEXT BARRIER ON A SMALL FOOTPRINT DEVICE USING RUN TIME ENVIRONMENT PRIVILEGES\u201d, in the name of inventors Joshua Susser, Mitchel B. Butler, and Andy Streich, which application is incorporated herein by reference in its entirety.","This application is related to U.S. patent application Ser. No. 09\/235,159, now U.S. Pat. No. 7,093,122, filed Jan. 22, 1999, entitled \u201cTECHNIQUES FOR PERMITTING ACCESS ACROSS A CONTEXT BARRIER IN A SMALL FOOTPRINT DEVICE USING SHARED OBJECT INTERFACES\u201d, in the name of inventors Joshua Susser, Mitchel B. Butler, and Andy Streich, which application is incorporated herein by reference in its entirety.","1. Field of the Invention","The invention relates to computer security and more particularly to techniques for implementing a security on small footprint devices, such as smart cards.","2. Description of Related Art","A number of object oriented programming languages are well known in the art. Examples of these include the C++ language and the Smalltalk language.","Another such object oriented language is the JAVA\u2122 language. This language is described in the book , by James Gosling et al. and published by Addison-Wesley. This work is incorporated herein by reference in its entirety. The JAVA\u2122 language is particularly well suited to run on a Java\u2122 Virtual Machine. Such a machine is described in the book , by Tim Lindholm and Frank Yellin which is also published by Addison-Wesley and which is also incorporated herein by reference in its entirety.","A number of small footprint devices are also well known in the art. These include smart cards, cellular telephones, and various other small or miniature devices.","Smart cards are similar in size and shape to a credit card but contain, typically, data processing capabilities within the card (e.g. a processor or logic performing processing functions) and a set of contacts through which programs, data and other communications with the smart card may be achieved. Typically, the set of contacts includes a power source connection and a return as well as a clock input, a reset input and a data port through which data communications can be achieved.","Information can be written to a smart card and retrieved from a smart card using a card acceptance device. A card acceptance device is typically a peripheral attached to a host computer and contains a card port, such as a slot, in to which a smart card can be inserted. Once inserted, contacts or brushes from a connector press against the surface connection area on the smart card to provide power and to permit communications with the processor and memory typically found on a smart card.","Smart cards and card acceptance devices (CADs) are the subject of extensive standardization efforts, e.g. ISO 7816.","The use of firewalls to separate authorized from unauthorized users is well known in the network environment. For example, such a firewall is disclosed in U.S. patent application Ser. No. 09\/203,719, filed Dec. 1, 1998 and entitled \u201cAUTHENTICATED FIREWALL TUNNELLING FRAMEWORK\u201d in the name of inventor David Brownell, which application is incorporated herein by reference in its entirety.","A subset of the full Java\u2122 platform capabilities has been defined for small footprint devices, such as smart cards. This subset is called the Java Card\u2122 platform. The uses of the Java Card\u2122 platform are described in the following publications.","JAVA CARD\u2122 2.0\u2014LANGUAGE SUBSET AND VIRTUAL MACHINE SPECIFICATION;","JAVA CARD\u2122 2.1\u2014APPLICATION PROGRAMMING INTERFACES;","JAVA CARD\u2122 2.0\u2014PROGRAMMING CONCEPTS;","JAVA CARD\u2122 APPLET DEVELOPER'S GUIDE.","These publications are incorporated herein by reference in their entirety.","A working draft of ISO 7816\u2014Part 11 has been circulated for comment. That draft specifies standards for permitting separate execution contexts to operate on a smart card. A copy of that working draft is hereby incorporated by reference in its entirety.","The notion of an execution context is well known in computer science. Generally speaking, the use of multiple execution contexts in a computing environment provides a way to separate or isolate different program modules or processes from one another, so that each can operate without undue interference from the others. Interactions\u2014if any\u2014between different contexts are deliberate rather than accidental, and are carefully controlled so as to preserve the integrity of each context. An example of multiple contexts is seen in larger hardware devices, such as mainframes, where a plurality of virtual machines may be defined, each such virtual machine having its own execution context. Another example is seen in U.S. Pat. No. 5,802,519 in the name of inventor De Jong, which describes the use of multiple execution contexts on a smart card. It will be appreciated by those of skill in the art that a computing environment which provides multiple execution contexts also needs to provide a mechanism for associating any given executing code with its corresponding context.","Also well known is the notion of a current context. Certain computing environments that support multiple contexts will, at any given time, treat one context in particular as an active focus of computation. The context can be referred to as the \u201ccurrent context.\u201d When the current context changes, so that some other context becomes the current context, a \u201ccontext switch\u201d is said to occur. As will be appreciated by those of skill in the art, these computing environments provide mechanisms for keeping track of which context is the current one and for facilitating context switching.","In the prior art, in the world of small footprint devices, and particularly in the world of smart cards, there was no inter-operation between contexts operating on the small footprint devices. Each context operated totally separately and could operate or malfunction within its context space without affecting other applications or processes in a different context.","One layer of security protection utilized by the Java\u2122 platform is commonly referred to as a sandbox model. Untrusted code is placed into a \u201csandbox\u201d where it can \u201cplay\u201d safely without doing any damage to the \u201creal world\u201d or full Java\u2122 environment. In such an environment, Java\u2122 applets don't communicate, but each has its own name space.","Some smart card operating systems don't permit execution contexts to communicate directly, but do permit communications through an operating system, or through a server.","The Problems","A number of problems exist when trying to place computer programs and other information on a small footprint device. One of the compelling problems is the existence of very limited memory space. This requires often extraordinary efforts to provide needed functionality within the memory space.","A second problem associated with small footprint devices is the fact that different small footprint device manufacturers can utilize different operating systems. As a result, applications developed for one operating system are not necessarily portable to small footprint devices manufactured by a different manufacturer.","If programs from more than one source of programs (manufacturer or vendor) are to be applied to a single small footprint device, security becomes a factor as one attempts to avoid corruption of existing programs and data when a new program is loaded on to the small footprint device. The same concern exists when one wishes to prevent a hacker or a malicious person from accessing programs and data.","It is clear that small footprint devices such as smart cards don't have the resources necessary to implement separate virtual machines. Nevertheless, it is desirable to maintain strict security between separate execution contexts.","In the past, security was provided by loading only applications from the same source or from a known trusted source onto a smart card or other small footprint device.","Accordingly, it would be desirable to allow object-oriented interaction between selected execution contexts only in safe ways via fast efficient peer to peer communications which do not impose undue burdens on the programmer but facilitate dynamic loading of applets written at different times by untrusted sources.","The invention is directed to providing a context barrier (sometimes referred to as a firewall) for providing separation and isolation of one context from another and to provide controlled access across the barrier when that is needed.","In accordance with the invention, two execution contexts, e.g. each containing one or more applets, running in the same logical (i.e., virtual or real) machine, protected from each other, can share information in a controlled, secure way, using language mechanisms, such as object-oriented language mechanisms. Security can be, for example, object by object. Thus, a method in a first execution context can access a first object A in a second execution context but not a second object B in the second execution context on a selective basis.","In accordance with one exemplary embodiment, an enhanced Java\u2122 Virtual Machine (VM) provides certain run-time checks of attempted access across execution contexts in the VM. Checks can be automatic by the VM or coded by the programmer with support from the VM. This can be done using language-level communication mechanisms. In this way, one can express object access across execution contexts in the same way as other object accesses using the language are made. These run-time checks provide a second dimension of defense\/security beyond that which the Java\u2122 language and platform already provide.","These mechanisms provide protection against, e.g., security holes due to programming bugs (such as declaring a datum \u201cpublic\u201d (global) when it shouldn't be accessible to all contexts). They also allow fine-grain control of sharing (such as selection of objects to share and applets to share to).","The invention is also directed to computer program products and carrier waves related to the other aspects of the invention.","The foregoing and other features, aspects and advantages of the present invention will become more apparent from the following detailed description of the present invention when taken in conjunction with the accompanying drawings.","The detailed descriptions which follow may be presented in terms of program procedures executed on a computer or network of computers. These procedural descriptions and representations are the means used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art.","A procedure is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. These steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It proves convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be noted, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities.","Further, the manipulations performed are often referred to in terms, such as adding or comparing, which are commonly associated with mental operations performed by a human operator. No such capability of a human operator is necessary, or desirable in most cases, in any of the operations described herein which form part of the present invention; the operations are machine operations. Useful machines for performing the operation of the present invention include general purpose digital computers or other computational devices.","The present invention also relates to apparatus for performing these operations. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer as selectively activated or reconfigured by a computer program stored in the computer. The procedures presented herein are not inherently related to a particular computer or other apparatus. Various general purpose machines may be used with programs written in accordance with the teachings herein, or it may prove more convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these machines will appear from the description given.","Attached as an Appendix to this specification is an unpublished draft of a document entitled JAVA CARD RUNTIME ENVIRONMENT 2.1 SPECIFICATION. This draft document, which provides further detailed description of specific embodiments of the invention, is incorporated in its entirety as an integral part of the present specification.","Although the inventive techniques are described hereinafter in the context of a smart card example, the example is merely illustrative and shouldn't limit the scope of the invention.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 1","b":["120","110","100","110","100","110","105","100","110","105"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 2","FIG. 1"],"b":["120","200","210","200","120"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 3","FIG. 3"],"b":["300","310","315","316","320","330"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 4","FIG. 4"],"b":["400","420","430"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["500","510","520"]},"In , two types of objects are shown on which action may be taken by a principal. These include data objects, (e.g. data and data (, \u2032)) and entity . A principal may operate or attempt to operate on any of these objects.","While data is passive, an entity  is active. The diagram line from Principal to an active entity is also labeled \u201caction,\u201d but this could be a more sophisticated and arbitrarily complex action, such as making a function or method call or sending a message as compared with action on a data object. As with data, a security check enforced by the operating system may use the identity of the principal, the identity of the entity, and\/or the type of action. Furthermore, the entity, being active, can perform its own additional security checks. These can be as arbitrarily complex as one desires, and can make use of the identity of the Principal, the identity of the entity itself, the action, and\/or any other information that is available.","In an object-oriented system (such as the Java Card\u2122 platform) \u201cobjects\u201d are typically a combination of data and entity. When a Principal tries to access a field of an object, this is a data access\u2014a fairly simple action protected by a fairly simple security check. When a Principal tries to access a method of an object, this is an entity access, which can be arbitrarily complex both in action and in security check.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 6","FIG. 4"],"b":["400","410","420","430","440","420","630","640","620","600","636","635","600"]},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 7","b":["700","710","720","720","730","740","750","760","770","780","760","760","770","780","770","780"]},"Every object is associated with one particular context. That context is said to own each object that is associated with it. The runtime system  provides a means for uniquely identifying contexts, and a means for specifying and identifying the currently executing context. The object system  provides a mechanism for associating objects with their owning contexts.","For example, the runtime  can identify contexts with a unique name, and correspondingly the object system  can associate objects with that context by recording the context's name in the object's header. Information in the object's header cannot be accessed by programs written in the object-oriented language, but is only available to the virtual machine  itself. Alternately, the runtime system  can identify contexts by dividing the memory space into separate regions, each for a particular context, and correspondingly the object system  can associate objects with that context by allocating the object's storage in that context's memory space.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 8","b":["800","810","840","830","840"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 9","FIG. 9","FIG. 9","FIGS. 12-18"],"b":["6","900","910","905","910","600","635","905","920","900","905","910","920","920","636","920","600"]},"When object access  is initiated, the current context setting is context . If the object  is a data object, the action  is a simple data access, and no code is executed in the second context . If the object  is an entity object, and the action  results in that object's code being executed, that code is executed in the second context . To execute the code of object  in the correct context , the virtual machine  performs a context switch. The context switch changes the current context setting to be context , and the previous value of the current context setting is stored so that it can be restored later. From that point on code will execute in the new current context. When the action  completes, control is returned to the point following access . During the return, the virtual machine  must restore the value of the current context setting to its previous value.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 10","FIG. 10","FIG. 9"],"b":["1000","1010","1020","1030","1","1035","1050","2","1070","600","1050","2","1040","1045","1060","3","1080","600","2","3","1050","2","1090","1095","1099","2","1035","1045","1095"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 11","b":["2","1100","1","2","1110","1","2","1120"]},"With respect to identifying or designating a created object as shareable as discussed in item  of , this can be done, in accordance with a specific embodiment of the invention, by including a shareable attribute in the header of an object's representation. Information in an object's header cannot be accessed by programs written in the object-oriented language, but is only available to the VM itself.","Obtaining a reference to an object in another context is a special case of accessing an object in another context. A mechanism that provides access to an object in another context can make other objects available also. For instance, invoking a method on an object in another context may return a reference to a second object in a different context. An additional mechanism is required to allow an initial reference to an object in a different context to be obtained. In a specific embodiment, references to certain well-known entry point objects can be obtained using a public API. Once the initial reference to an object in a different context is obtained, further references can be obtained from that object, and so on.","There are four general approaches to obtaining information across a context barrier in accordance with the invention. These approaches can be utilized individually or in combination in order to access an object across a context barrier or to obtain a reference of an object to be accessed across a context barrier (). These approaches are described in .",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 12","FIG. 12","FIG. 11"],"b":["1200","770","1","760","760","1210","1210"]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 13","b":["760","760","770","780"]},{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 14","FIG. 14"],"b":["760","780","760","780","780"]},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 15","FIG. 15","FIG. 18"],"b":["1210","2","780","1200","770","1210","1200","1210"]},"It will be appreciated that a virtual machine consistent with the invention provides functionality beyond that of earlier virtual machines, such as the virtual machine described in the . In particular, consistently with the invention, the virtual machine provides functionality to implement or to facilitate a security enforcement process that permits access across a firewall. This process is described next with reference to . Note that it is applicable to any approach for providing access across the firewall, including but not limited to the four approaches described with reference to  above.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 16","b":["1600","1610","1610","1630","1610","1620","1620","1630","1620","1640"]},{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 17","FIG. 16","FIGS. 12-15"],"b":["1620","1610","1621","1622","1623","1629","1630","162","1640"]},{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 18","FIG. 17","FIG. 15"],"b":["1629","829","1629","1810","1810","1810","1820","1830","1840","1850"]},"Although the invention has been illustrated with respect to a smart card implementation, the invention applies to other devices with a small footprint, not just to smart cards. Devices with a small footprint are generally considered to be those that are restricted or limited in memory or in computing power or speed. Such small footprint devices may include boundary scan devices, field programmable devices, pagers and cellular phones among many others.","In general, small footprint devices are resource constrained computational devices and systems where secure interoperation of execution contexts is a concern. Such small devices impose constraints on the implementation of security measures because of their limited resources. Because of resource constraints, in a virtual machine implementation, a single virtual or physical machine must be used as opposed to multiple virtual machines.","The invention may also be applied to devices with larger footprints where the characteristics of the invention may prove beneficial. For example, the invention may prove advantageous when using servlets if there is object sharing between them. Even some desktop systems may profitably utilize the techniques of the invention.","While the Java\u2122 language and platform are suitable for the invention, any language or platform having certain characteristics would be well suited for implementing the invention. These characteristics include type safety, pointer safety, object-oriented, dynamically linked, and virtual-machine based. Not all of these characteristics need to be present in a particular implementation. In some embodiments, languages or platforms lacking one or more of these characteristics may be utilized. A \u201cvirtual machine\u201d could be implemented either in bits (virtual machine) or in silicon (real\/physical machines).","Although the invention has been illustrated showing object by object security, other approaches, such as class by class security could be utilized.","Although the present invention has been described and illustrated in detail, it is clearly understood that the same is by way of illustration and example only and is not to be taken by way of limitation, the spirit and scope of the present invention being limited only by the terms of the appended claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will be apparent from the following description in which:",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 17","FIG. 16"],"b":"1620"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 18","FIG. 17"],"b":"1629"}]},"DETDESC":[{},{}]}
