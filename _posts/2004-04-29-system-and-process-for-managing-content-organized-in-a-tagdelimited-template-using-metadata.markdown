---
title: System and process for managing content organized in a tag-delimited template using metadata
abstract: A system and process for managing content organized in a tag-delimited template using metadata are described. A stored template written in a tag-delimited language is retrieved. The retrieved template is converted into an object representation of a metadata entry form. A user interface exported by the object representation is initialized. A data entry form is built including individual data entry elements responsive to user selections on the user interface of the metadata form. Each data entry element includes a set of information attributes describing the data entry element. The data entry elements of the data entry form are defined as one or more classes within the retrieved template. The data entry form is rendered by enumerating each of the one or more classes of the stored template and generating each data entry element of the one or more enumerated classes as described by the set of information attributes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607139&OS=08607139&RS=08607139
owner: Twain Typesetting LLC
number: 08607139
owner_city: Las Vegas
owner_country: US
publication_date: 20040429
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This patent application is a continuation of U.S. patent application Ser. No. 09\/504,624, filed Feb. 15, 2000, now U.S. Pat. No. 6,732,331, the priority date of which is claimed and the disclosure of which is incorporated by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention relates in general to Web content management and, in particular, to a system and process for managing content organized in a tag-delimited template using metadata.","Currently, Web content published in tag-delimited, markup languages for presentation on browser clients is a popular form of digital data communication. A browser client, or simply \u201cbrowser,\u201d is a computer application that interprets individual statements, delimited using tags, which describe the layout and substance of the content. The content can include, for example, textual, audio, and video communications, and can be static or interactive.","Although many markup languages exist, the Hypertext Markup Language (HTML) and the Extensible Markup Language (XML) are widely used due to their ability to be distributed and interpreted in an almost hardware-independent manner by browsers operating in a variety of hardware environments. For instance, digital data networks compliant with the Transmission Control Protocol\/Internet Protocol (TCP\/IP) use the Hypertext Transport Protocol (HTTP) to transfer markup language content organized into pages accessed over the so-called World Wide Web. These \u201cWeb\u201d pages make content available for viewing on a browser in a hierarchically structured, easy to navigate fashion.","Collections of related Web pages are often organized into a single Web site that is rooted in a home page. The home page typically identifies the Web site based on some common domain name identifier. For instance, \u201cwww.RoseDog.com\u201d is the home page of RoseDog.com\u2122, a Web site headquartered in Seattle, Wash., which provides services for writers, agents and publishers. A client can navigate through the Web site beginning with the home page into successively linked Web pages identified by hyperlinks embedded within the content.","Although such content can be easy to access, each page must actually be encoded in the markup language as a self-contained document that is served by a Web server one page at a time. The one-page-per-service request requirement is a limitation resulting as a side effect of HTTP, which is a stateless protocol. Specifically, HTTP uses two main commands, \u201cGET\u201d and \u201cPOST,\u201d used by a client to specify a Web page to be retrieved and viewed. A separate Web page must be stored even if a pair of Web pages contains nearly identical content. This limitation can result in significant data duplication, which can be particularly inefficient if the content for each related Web page is organized in a similar structure. Moreover, revising the Web content can be a monumental task if wholesale changes to appearance and structure are required, as opposed to merely displaying new content.","One prior art approach to creating Web content creates Web pages directly incorporating the content with the structure. Many popular Web page publishing tools, such as Microsoft FrontPage, licensed by Microsoft Corporation, Redmond, Wash., and DreamWeaver, licensed by Macromedia, Inc., San Francisco, Calif., generate Web pages hard-coded in HTML. The content can be modified by visually editing each Web Page with the page-publishing tool or by editing the raw HTML with a text editor. Neither approach easily accommodates wholesale changes to the appearance or structure of the Web pages, a limitation which can be particularly problematic for a Web site containing multiple, nearly identical Web pages. Furthermore, the text editor approach is unacceptable for a novice user lacking programming expertise.","Another prior art approach to creating Web content introduces a template within which the structure of each Web page is specified separately from the actual data. This type of template is used to create Web pages for viewing on a browser. These types of tools generate interpretable, proprietary scripts, such as Active Server Pages, licensed by Microsoft Corporation; WebObjects, licensed by Apple Computer, Cupertino Calif.; and ColdFusion, licensed by Allaire Corporation, Cambridge, Mass. These tools provide a runtime environment for inserting data objects into Web pages. Typically, the data used to populate these data objects is retrieved from proprietary data sources, such as Structured Query Language (SQL) databases and the final Web page is built by combining the interpretable scripts with the retrieved data to generate HTML source code. In addition, data insertion and modification can be an arduous task requiring custom database applications. Moreover, the data structures used by these data sources are often rigid and cannot be easily changed.","Therefore, what is needed is an approach to organizing content augmenting conventional Web content creation tools, such as content for use in Web pages, whereby the data stored in the Web page can be easily modified without writing custom data entry applications. What is also needed is an approach to loading complex data based on a structured template written in a non-proprietary manner. Such an approach would preferably use a standard markup language specifying metadata in a vendor-independent fashion and usable by existing Web content publishing tools and viewers.","The present invention provides a system and process for managing content, such as for use in Web pages and similar constructs, which generates templates containing data describing data, known as metadata. A user can design the structure of a series of related Web pages through a preferably graphical user interface. The data types and Web page structure are described and stored in the template as a dynamic content package of classes.","An embodiment of the present invention is a system and process for managing content organized in a tag-delimited template using metadata. A stored template written in a tag-delimited language is retrieved. The retrieved template is converted into an object representation of a metadata entry form. A user interface exported by the object representation is initialized. A data entry form is built including individual data entry elements responsive to user selections on the user interface of the metadata form. Each data entry element includes a set of information attributes describing the data entry element. The data entry elements of the data entry form are defined as one or more classes within the retrieved template. The data entry form is rendered by enumerating each of the one or more classes of the stored template and generating each data entry element of the one or more enumerated classes as described by the set of information attributes.","A further embodiment of the present invention is a system and process for managing Web content using metadata in a content management framework. A base template defining a set of properties of and characterizing one or more data entry controls for use in a data entry form is processed. The data entry controls and the properties are formed into classes comprising metadata. An interface of the base template that defines a public method with which the data entry form can be built is exposed. The data entry form is built as a set of Web page elements responsive to a call to the public method of the template. The one or more data entry controls within the data entry form for each metadata class are created. The one or more properties of the data entry form for each metadata class are set. The data entry form is rendered as source code in a tag-delimited page description language.","Still other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description, wherein is described embodiments of the invention by way of illustrating the best mode contemplated for carrying out the invention. As will be realized, the invention is capable of other and different embodiments and its several details are capable of modifications in various obvious respects, all without departing from the spirit and the scope of the present invention. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["10","11","12","13","15","12","13","14","15","16","11","14","16"]},"The server  includes two applications, a Web server  and a content management framework . At a basic level, the Web server  services requests for Web pages received from the clients. Web pages are retrieved from a storage device  and sent to the requesting client. Alternatively, the Web page templates can be retrieved from storage , populated with data from the database  or data store , and sent to the requesting client. The Web server  and clients communicate using the HyperText Transport Protocol (HTTP). Typically, each Web page is written in the HyperText Markup Language (HTML), a popular form of tag-delimited language interpretable by client-side browser applications (not shown), although other tag-delimited languages, such as the Extensible Markup Language (XML) can also be used. In addition, the Web server  can include enhanced server-side functionality, such as available through Enterprise JavaBeans, Microsoft Active Server pages, and the like.","The content management framework  operates at a metadata level to manage the content of Web pages. Each Web page contains a sequence of tag-delimited statements, typically written in HTML. Content is described between a pair of \u201ctags,\u201d either placed in line with the content or as paragraph markers. The content can take the form of text, attributes, hyperlinks, parameters, and virtually any type of subject matter to be served to a client. As described further below with reference to , the content management framework  enables a user to manage the arrangement, composition, and display attributes of Web page content as maintained in a data store  and database , both stored in the storage device .","In addition, the content management framework  can operate in conjunction with associated applications which work cooperatively with the content generated by the content management framework. These associated applications include the following, non-exclusive functional modules: authorization , revision control , data reader , conversion , search , and share .","Authorization module  controls access permissions to data managed by the content management framework . The purpose of this module is to provide authorized personnel with access to create, update and delete templates and data documents, as well as grant or deny access to view individual data elements on Web pages created from the data managed by the content management framework .","Revision control module  manages different revisions of content. The purpose of this module is to backup data, track changes, and maintain an audit trail of modifications to the data.","Data reader  module provides a tool for application developers which makes reading complex XML files easier. Data reader module  also works with authorization module  to filter out any data that a user of the data reader  is not permitted to access.","Conversion module  converts data based on one template into data based on another template. Templates are further described below with reference to .","Search module  provides the ability to search through data documents.","Finally, share module  enables data to be exchanged across systems or organization boundaries. Share module  works with authorization module  to limit exchanged data to only that data to which the participants are authorized. Share module  also works with conversion module  to facilitate exchanging data based on different template structures.","The foregoing list of associated applications is not exhaustive and other functional modules would be readily apparent to one skilled in the art.","The individual computer systems, including the server , and clients , ,  are general purpose, programmed digital computing devices consisting of a central processing unit (CPU), random access memory (RAM), non-volatile secondary storage, such as a hard drive or CD ROM drive, network interfaces, and peripheral devices, including user interfacing means, such as a keyboard and display. Program code, including software programs, and data are loaded into the RAM for execution and processing by the CPU and results are generated for display, output, transmittal, or storage. In the described embodiment, each client is preferably equipped with a browser application with which to request and receive Web pages and related content. The server  is preferably a network server class computer system, such as a PowerEdge network server, manufactured by Dell Computers, Inc., Austin, Tex., and running a server-capable operating system, such as Linux, a free and publicly available operating system, or Windows NT Server, licensed by Microsoft Corporation, Redmond, Wash.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 1"],"b":"18"},"The content management framework  includes three main modules: form builder , element builder , and render controller . The form builder  creates a metadata template , which describes a data entry document . The template  is generated from a base template , as further described below in the content management framework object model  with reference to . The template  is either built new or updated, depending whether an existing template  has been referenced as an input parameter to the content management framework .","The document  is logically divided into top and bottom sections between which are placed controls. The sections and controls constitute Web page elements  which are generated by the element builder  responsive to input parameters  received from the form builder . The element builder  defines each element  based on a set of properties  and recursively definable classes .","Finally, the render controller , includes control, validator, and adapter objects, which operate to map content to controls. Content is mapped into individual elements and validated for data type. In addition, each control is rendered, preferably in a tag-delimited language, such as HTML, suitable for use as a Web page. The content management framework  operates in accordance with a sequence of process steps, as further described below beginning with reference to .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 1","FIG. 2"],"b":["40","10","41","42","43","41","33","40"]},"The metadata layer  includes one or more metadata template  (corresponding to the template  shown in ) which each describe information about the data stored in Web pages - in the presentation and data layer . One or more documents - (corresponding to the document  shown in ) are generated from the metadata template  by the content management framework . In turn, each document - can be used to generate the individual Web pages -. Consequently, there is a one-to-many relationship between the base template  and the metadata template(s) , a one-to-many relationship between each metadata template  and the documents -, and a one-to-many relationship between each document  and the Web pages -.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 1"],"b":["10","55","56","20","57","21","18","55","56","17","56","57","58","59","56","58","17"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 1"],"b":["60","18","18","61","68","69","70","61"]},"The CMFForm class  is the root class of the content management framework . The purpose of this class is to provide an application programming interface (API) entry point into the content management framework  via a single public method, ProcessRequest( ). The CMFForm class  contains a CMFTemplate class  that defines an object-oriented representation of an XML template. The CMFTemplate class  contains a CMFClass class , which represents a grouping of data types which can contain a class of the same type. For instance, the CMFClass class  can contain a CMFProperties collection  of one or more CMFProperty objects  (one object shown) and a CMFClasses collection  of one or more CMFClass classes  (one class shown). The CMFProperties collection  is a collection of CMFProperty objects  and the CMFClasses collection  is a collection of CMFClass classes . Each CMFProperty object  stores data. Each CMFClass object  can recursively contain CMFProperty objects and CMFClasses collections.","The three remaining groups of classes can be logically categorized as relating to controls , validators , and adapters . The controls class group  contains seven classes. The CMFControlCheckbox class  is responsible for rendering an HTML checkbox control: <INPUT type=\u201ccheckbox\u201d>. The CMFControlFileUpload class  is responsible for rendering an HTML file upload control: <INPUT type=\u201cfile\u201d>. The CMFControlMultiSelectList class  is responsible for rendering an HTML list box control: <SELECT multiple>. The CMFControlRadio class  is responsible for rendering an HTML radio button control: <INPUT type=\u201cradio\u201d>. The CMFControlSingleSelectList class  is responsible for rendering an HTML list box control: <SELECT>. The CMFControlTextArea class  is responsible for rendering an HTML multi-line text field control: <TEXTAREA>. Finally, the CMTControlTextField class  is responsible for rendering an HTML single-line text field control: <INPUT type=\u201ctext\u201d>. Other control classes are feasible.","The validators class group  contains six classes. The CMFValidatorDate class  is responsible for validating date data types. The CMFValidatorDefault class  is responsible for validating string data types. The CMFValidatorDocument class  is responsible for validating links to other content managed by the content management framework . The CMFValidatorEmailAddress class  is responsible for validating data in the form of an email address. The CMFValidatorNumber class  is responsible for validating numeric data types. Finally, the CMFValidatorURL class  is responsible for validating data in the form of a Uniform Resource Locator (URL). Other validator classes are feasible.","The adapters class group  contains two classes. Each adapter class performs two tasks: communicating with external systems, and (2) rendering a portion of each data entry form for capturing revision notes, content name, and other metadata. Custom adapters can be written for each template to capture additional information about the content of the data entry form or to redirect data to external systems. The CMFDefaultDocumentAdapter  class is responsible for rendering HTML controls for capturing metadata about content as well as persisting the metadata to the database . CMFDefaultTemplateAdapter class  is responsible for rendering HTML controls for capturing metadata about templates as well as persisting the metadata to the database .","An example of metadata, a blank form, and a specific Web page built therefrom is described with reference to . The example presented is a series of Web page excerpts containing highly customizable content regarding authors and their works, presented in the form of an on-line bookstore.  presents an example of metadata.  presents an example of a data entry form based on that metadata.  presents an example of a Web page built from content entered into that data entry form. Through the use of the content management framework , the content of Web pages can be easily modified through the manipulation of the data entry form.","Beginning with metadata,  is a screen shot, by way example, of a metadata template  generated by the content management framework  of . The purpose of the metadata template  is to allow a user to control the format and content of a data entry form, such as data entry form  described below with reference to . In turn, the data entry form can be used to generate a Web page, such as the populated Web page  described below with reference to .","The metadata template  visualizes the content management framework object model  (shown in ). Thus, the properties associated with the root CMFForm class  include, non-exclusively, a template identifier , a template name , a template description , any optional revision note , and a template usage flag . In the described embodiment, the template identifier  is a globally unique identifier (GUID) , here, set to \u201c326CABB7-A23C-11D3-8894-000000000000.\u201d In addition, the template name  includes a single line data entry field , here, set to \u201cBookstore.\u201d The template description  and revision note  both include a multi-line data entry field , here, respectively set to a single entry \u201cBookstore content\u201d  and an empty entry . Finally, the template usage flag  includes a pair of radio buttons , here, set to \u201cMulti-Use.\u201d Other forms of data entry fields and controls are feasible and the foregoing is merely presented by way of illustrative example.","The metadata template  is based on a collection of classes in the base template  (shown in ), which corresponds to the visualization of the CMFTemplate class . An instance of the CMFTemplate class  contains an instance of CMFClass class  with an alias, labeled \u201cBase Template\u201d . The CMFClass class  instance has no associated CMFProperties object  but does include a CMFClasses object , labeled \u201cClasses\u201d . In turn, the CMFClasses object  contains a CMFClass object , labeled \u201cClass\u201d , with two properties, Class Name  and Class Alias , and one CMFClasses collection , labeled \u201cProperties\u201d . Class Name  and Class Alias  include single line entry fields  and , and respectively set to \u201cbookstore\u201d and \u201cBookstore.\u201d Similarly, the Properties , here, is instantiated to a Property class  and contains five properties, Name , Alias , Required flag , Control , and Data Type . Both the Name  and Alias  properties include single line entry fields  and , respectively set to \u201cbook_title\u201d and \u201cTitle.\u201d Required flag  includes a pair of radio buttons , here, set to \u201cyes.\u201d Finally, Control  and Data Type  both include list boxes  and , respectively set to \u201cSingle Line Textfield\u201d and \u201cText.\u201d","The metadata template  defines a data entry form from a data management perspective. The included properties  and classes  (shown in ) define the appearance and behavior of a data entry form.  is a screen shot, by way example, of a data entry form  generated by the content management framework  of . The data entry form  is built using the metadata defined in the metadata template . Each data entry form generated from the metadata template  could conceivably be different. Consequently, the data entry form  includes a document identifier  that is a GUID , here, set to \u201c4827CF9E-B4A0-11D3-88B0-000000000000.\u201d The remainder of the data entry form  includes fields and labels specific to the content of the target Web page and, in particular, the recursively definable objects begin with the \u201cBookstore\u201d label . Thus, the data entry form includes a title\/author label  associated with a single line data entry field , here, set to the book title, \u201cA Widow's Might.\u201d The revision note  includes a multi-line data entry field , which is empty.","As described above with reference to , a CMFTemplate class  is visualized through an instance of a CMFClass class  and an instance of a CMFProperties class  encapsulated therein. The properties of the CMFClass class  include the Class Alias  (shown in ), here, rendered as \u201cBookstore\u201d label . Similarly, the first property of the CMFProperty class , Property , are rendered as \u201cTitle\u201d label  and single line entry field , here, set to \u201cA Widow's Might.\u201d The properties of single line entry field  include Name , Alias , Required flag , Control , and Data Type . Thus, in addition to \u201cTitle\u201d label , corresponding to Name  and Alias , single line entry field  is limited to one, required text field, corresponding to Required flag , Control , and Data Type . The metadata template  in a similar fashion defines the remaining fields and labels. The labels include \u201cRe-publish Info\u201d label , \u201cSynopsis\u201d label , \u201cAuthors' Bio\u201d label , \u201cCategory\u201d label , \u201cRoseDog Member ID\u201d label , \u201cPaid From Date\u201d label , \u201cPaid To Date\u201d label , and \u201cHeadshot Image\u201d label . These labels are respectively associated with list box ; multi-line entry fields  and ; list box ; single line entry fields , , ; and file upload field . Other forms of appearance, structure, and content organization are feasible.","The content of the data entry form  can be used to generate a specific Web page.  is a screen shot, by way example, of a populated Web page  generated by the Web server of . Web page  can be easily revised in terms of content using the data entry form  and in terms of appearance and structure using the metadata template . The data entered via the data entry form  is rendered into Web page  in a format defined by the metadata template , to include: a title \u201cA Widow's Might\u201d , author's name \u201cCarolyn Ellis Lipscomb\u201d , \u201cSynopsis\u201d label , synopsis content , \u201cAuthor Bio\u201d label , author's biography content , hyperlink to the \u201cAmazon\u201d Web site , \u201cExcerpt\u201d label , excerpt content , book cover graphic , and author photograph graphic . Other forms of appearance, structure, and content will vary dependent upon the metadata template  and data entry form .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 9","b":["180","181","183","185","188","189","198"]},"In the described embodiment, the content management framework  is started upon the receipt of an HTTP \u201cGET\u201d request. As described above with reference to , the CMFForm class  is the root class of the content management framework  and exports a single method, ProcessRequest( ). In response to the receipt of the HTTP \u201cGET\u201d request, the root class CMFForm class  is instantiated and the properties of the CMFForm class  instance are set. The ProcessRequest( ) method is then called with the following parameters, as used, by way of example, in the described embodiment: a template identifier for the template to be used (required) and a content identifier for the document to be used (optional). A VBScript code segment for the Microsoft Active Server Pages environment for starting the content management framework  is as follows:","Dim objCMFForm","Set objCMFForm=Server.CreateObject(\u201cBluebox.CMFForm\u201d)","objCMFForm.UserID=Session(\u201cDB_USERNAME\u201d)","objCMFForm.Password=Session(\u201cDB_PASSWORD\u201d)","objCMFForm.OnSaveNavigateTo=\u201ccmfpublish.asp\u201d","objCMFForm.OnDeleteNavigateTo=\u201ccmfsearch.asp\u201d","objCMFForm.OnCancelNavigateTo=\u201ccmfsearch.asp\u201d","objCMFForm.ProcessRequest","Set objCMFForm=Nothing","Next, initialization begins (block ). During initialization, an instance of the CMFTemplate class  is created, a list representing a cookie map is built, and the path names of relevant files within the file system are obtained from the system Registry. Every HTML form element is given a unique name in the form of a GUID, which is used to determine information about each form element during request processing. Consequently, if a content identifier was not provided as an input parameter, encoded in the URL on the Web page containing the VBScript code segment (shown above), to the ProcessRequest( ) method, a GUID is created to serve as the content identifier. The content identifiers are formed into a list structured as a cookie map and stored as session state in the Web server .","In the described embodiment, six information attributes are stored for every HTML form element, such as \u201cINPUT,\u201d \u201cSELECT,\u201d or \u201cTEXTAREA.\u201d The GUID and six information attributes are collectively referred to as a \u201ccookie.\u201d The six information attributes are shown in Table 1. The cookie values are shown below in Table 2. The listed information attributes and cookie values are non-exclusive and other information attributes and cookie values are possible.",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Information Attribute Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(1) CMFCookieType","Cookie type"]},{"entry":[{},"(2) Name","XML node attribute name"]},{"entry":[{},"(3) ClassName","XML element node name"]},{"entry":[{},"(4) ParentID","Stores identifier attribute of"]},{"entry":[{},{},"parent XML element node"]},{"entry":[{},"(5) ItemID","Identifier attribute of XML"]},{"entry":[{},{},"element node"]},{"entry":[{},"(6) Value","Stores value of custom"]},{"entry":[{},{},"HTML form controls"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Cookie Name","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(1) CMFAttribute","Cookie type"]},{"entry":[{},"(2) CMFAddButton","XML node attribute name"]},{"entry":[{},"(3) CMFDeleteButton","XML element node name"]},{"entry":[{},"(4) CMFFileName","Stores identifier attribute of"]},{"entry":[{},{},"parent XML element node"]},{"entry":[{},"(5) CMFDeleteFileName","Identifier attribute of XML"]},{"entry":[{},{},"element node"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Next, the XML template is retrieved from the file system and converted into objects in accordance with the content management framework object model  (block ). The root XML node maps to the CMFTemplate class , \u201cclass\u201d elements map to CMFClass classes , \u201cproperty\u201d elements map to CMFProperty objects , and \u201ccollection\u201d elements map to a collection of CMFClass classes . An exemplary XML code segment representing an XML template converted into objects is as follows:",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<?xml version = \u201c1.0\u201d ?>"},{"entry":"\u2003<objectmodel id = \u201c123...\u201d>"},{"entry":"\u2003\u2003<class id = \u201c234...\u201d name = \u201c\u201d alias = \u201c\u201d>"},{"entry":"\u2003\u2003\u2003<property id = \u201c345...\u201d name = \u201c\u201d alias = \u201c\u201d required = \u201c\u201d control"},{"entry":"\u2003\u2003\u2003\u2003= \u201c\u201d datatype = \u201c\u201d sizewidth = \u201c\u201d sizeheight = \u201c\u201d maxlength ="},{"entry":"\u2003\u2003\u2003\u2003\u201c\u201d listvalues = \u201c\u201d defaultvalue = \u201c\u201d \/>"},{"entry":"\u2003\u2003\u2003<collection id=\u201c456...\u201d name = \u201c\u201d alias = \u201c\u201d quantity = \u201c\u201d class ="},{"entry":"\u201c\u201d \/>"},{"entry":"\u2003\u2003<\/class>"},{"entry":"\u2003<\/objectmodel>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The system Registry contains a list of template identifiers and corresponding adapters. Consequently, if no adapter is supplied for a given template, a default adapter, such as CMFDefaultDocumentAdapter  or CMFDefaultTemplateAdapter  (both shown in ) is selected and instantiated (block ). The remainder of the process depends upon whether an HTTP \u201cPOST\u201d or HTTP \u201cGET\u201d request is received (block ). If an HTTP \u201cGET\u201d request is received (block ), the process begins form building (blocks -). Otherwise, if an HTTP \u201cPOST\u201d request is received (block ), the process begins form updating (blocks -). Form building (blocks -) will now be described.","Form building begins with determining whether new content is being created. Thus, if a content identifier was not provided as an input parameter encoded in the URL on the Web page containing the VBScript code segment (shown above) (block ), new content is being created and the routine for building a data entry form, BuildHTMLEntryForm( ), as further described below with reference to , is called to render a blank HTML data entry form (block ). The process then terminates.","Otherwise, if a content identifier was provided as an input parameter (block ), the content to be displayed in the form already exists within the file system. The XML file identified by the content identifier provided as the input parameter is read (block ) and the BuildHTMLEntryForm( ) routine is called to render an HTML data entry form containing data from the previously read XML file (block ). The process then terminates.","Form updating begins with retrieving the XML content containing the content data for the data entry form (block ). The XML content can come from several sources. In the described embodiment, XML content is written to a browser application in a hidden text field during request processing. Alternately, XML content can be stored as session state with the host environment. HTTP is a stateless protocol which does not allow XML content from previous request processing to persist. The retrieved XML content is then updated with the new data values received as input parameters of the HTTP \u201cPOST\u201d request (block ).","There are three form-updating options. First, if either the \u201c+\u201d or \u201c\u2212\u201d button is pressed (block ), XML nodes are added or removed from the XML content (block ). Thus, pressing the \u201c+\u201d button will add a class of controls to the data entry form while pressing the \u201c\u2212\u201d button will delete a class of controls. The controls can be hierarchically structured with each successive generation of controls contained in the parent control class. The BuildHTMLEntryForm( ) routine is called to render the data entry form with the updated data and with any requested HTML controls added or removed (block ). The process then terminates.","Second, if either the \u201cSave\u201d or \u201cBlackout\u201d button is pressed (block ), the content in the data entry form must be validated and persisted to the file system and metadata about the content must be updated. In the described embodiment, pressing the \u201cBlackout\u201d button causes the same action as does pressing the \u201cSave\u201d button, except an internal flag is set to indicate that the data is not available for modification. The BuildHTMLEntryForm( ) routine is called to validate the data as the data entry form is built (block ). Finally, the XML content is persisted to a file and the metadata about the content is stored into the database  via an adapter (block ). The process then terminates.","Third, if the \u201cDelete\u201d button is pressed (block ), all files and metadata relating to the content must be removed. The XML file for the current data entry form is removed from the file system, along with any other files used to retrieve the content of the data entry form (block ). In addition, the metadata is removed from the database  via an adapter. The process then terminates.","Upon the termination of the process, the host environment proceeds with sending the requested Web page  (shown in ) to the client browser or redirects the client browser to another HTML page using the name of the Web page  passed as an input parameter into the process.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 10","FIG. 9"],"b":["210","211","212","213","214"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 11","FIG. 9"],"b":["220","62","65"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":"Sub BuildHTMLElement(ByRef DataNode As MSXML.IXMLDOMNode, ByRef TemplateClass As CMFFormClass)"}}}},"The routine operates in two iterative processing loops for mapping values to CMFProperty objects  (blocks -) and rendering by CMFClass classes  (blocks -). Other forms of iterative, recursive, or enumerative processing, including concurrent processing, are possible. Each CMFProperty object  encapsulated within the CMFClass class  for the current data entry form is processed during each iteration of the first processing loop (block ) as follows. First, the value of the CMFProperty object  is set to the content value of an associated XML node (block ). Next, each control set in the CMFProperty object  is rendered by calling the routine for controlling rendering, RenderControl( ), as further described below with reference to  (block ). Processing continues for each successive CMFProperty object  (block ).","Each child CMFClass class  encapsulated within the parent CMFClass class  for the current data entry form is processed during each iteration of the second processing loop (block ) as follows. First, based on the \u201cQuantity\u201d property of the child CMFClass class , a group of controls are rendered, preferably as HTML source code (block ). Group controls refer to labels, and \u201c+\u201d and \u201c\u2212\u201d buttons for a group of controls. For example, a \u201c+\u201d button above a group of rendered controls causes the creation of another, subordinate group of controls. The rules describing the number of controls to render are shown below in Table 3.",{"@attributes":{"id":"p-0088","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Quantity","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"?","zero or one controls"]},{"entry":[{},"*","zero or more controls"]},{"entry":[{},"+","one or more controls"]},{"entry":[{},"n+","n or more controls"]},{"entry":[{},"n\u2212","n or less controls"]},{"entry":[{},"n","n and only n controls"]},{"entry":[{},"x\u2013y","at least x and up to y controls"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Next, the routine recursively calls itself, BuildHTMLElement( ) with the following parameters, as used, by way of example, in the described embodiment: the current XML node and the CMFClass class  (block ). With each recursive call, the CMFProperty objects  encapsulated within the CMFClass class  are rendered as controls in the data entry form. Processing continues for each successive child CMFClass class  (block ). The routine then returns.",{"@attributes":{"id":"p-0090","num":"0090"},"figref":["FIG. 12","FIG. 11"],"b":["240","65"]},"A validator object, selected from the validators class group  (shown in ) is instantiated for validating data based on a data type (block ). In addition to those validator objects described in the validators class group , custom validator objects can be written for new, derived data types, such as for validating a Social Security number or telephone number. The data types supported in the described embodiment and the validator objects instantiated to handle these data types are shown below in Table 4.",{"@attributes":{"id":"p-0092","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Data Type","CMF Validator Class To Instantiate"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(1) document","CMFValidatorDocument"]},{"entry":[{},"(2) date","CMFValidatorDate"]},{"entry":[{},"(3) emailaddress","CMFValidatorEmailAddress"]},{"entry":[{},"(4) list","CMFValidatorDefault"]},{"entry":[{},"(5) file","CMFValidatorDefault"]},{"entry":[{},"(6) number","CMFValidatorNumber"]},{"entry":[{},"(7) string","CMFValidatorDefault"]},{"entry":[{},"(8) url","CMFValidatorURL"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A control object, selected from the controls class group  (shown in ) is instantiated for generating the source code, preferably in HTML, for each control in the data entry form (block ). Preferably, each control includes a graphical user interface, but other forms of controls are also suitable. In addition, custom control objects can be written to expand the functionality of the basic controls. The controls supported in the described embodiment and the control classes that should be instantiated to handle these controls are shown below in Table 5.",{"@attributes":{"id":"p-0094","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Control Name","CMF Control Class To Instantiate"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(1) checkbox","CMFControlCheckbox"]},{"entry":[{},"(2) radio","CMFControlRadio"]},{"entry":[{},"(3) multiselectlist","CMFControlMultiSelectList"]},{"entry":[{},"(4) singleselectlist","CMFControlSingleSelectList"]},{"entry":[{},"(5) textarea","CMFControlTextArea"]},{"entry":[{},"(6) textfield","CMFControlTextField"]},{"entry":[{},"(7) fileupload","CMFControlFileUpload"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Next, the data is validated, using the instantiated validator object, to ensure a match with the proper data type (block ). For example, if the data type is \u201cnumber\u201d and the data is not numeric, the data is invalid. Finally, the source code, preferable HTML, is sent to the browser application to render the appropriate control (block ). The value of the control is set to the value of the instantiated validator object which refers to a specific field or property. A GUID for the control name is created and added to the cookie map for the control, along with the information attributes described the control being created. The routine then returns.","While the invention has been particularly shown and described as referenced to the embodiments thereof, those skilled in the art will understand that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 11","FIG. 9"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 12","FIG. 9"]}]},"DETDESC":[{},{}]}
