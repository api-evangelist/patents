---
title: Performing sequence analysis as a multipart plan storing intermediate results as a relation
abstract: A usage model and the underlying technology used to provide sequence analysis as part of a relational database system. Included components include the semantic and syntactic integration of the sequence analysis with an existing query language, the storage methods for the sequence data, and the design of a multipart execution scheme that runs the sequence analysis as part of a potentially larger database query, especially using parallel execution techniques.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08805818&OS=08805818&RS=08805818
owner: IBM International Group B.V.
number: 08805818
owner_city: Amsterdam
owner_country: NL
publication_date: 20100420
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT"],"p":["This application is a continuation of U.S. application Ser. No. 10\/944,445, filed on Sep. 17, 2004, which claims the benefit of U.S. Provisional Application No. 60\/504,443 entitled \u201cPROVIDING SEQUENCE ANALYSIS AS A FORM OF RELATIONAL JOIN ON A RELATIONAL DATABASE SYSTEM\u201d, filed on Sep. 19, 2003. The entire teachings of the above applications are incorporated is herein by reference.","It is no secret that the amount and types of information that can be accessed by data processing systems increases at a torrid rate. As the amount of available data increases, so too does the need for technologies that can recognize patterns in data. Indeed, pattern recognition is a recognized research discipline within computer science, devoted to studying the operation and design of systems that recognize patterns in data. It encompasses subdisciplines such as discriminant analysis, feature extraction, error estimation, cluster analysis (together sometimes called statistical pattern recognition), grammatical inference and parsing (sometimes called syntactical pattern recognition). Important application areas are found in image analysis, character recognition, speech analysis, man and machine diagnostics, person identification, industrial inspection, and analysis of molecular and\/or biological sequences.","One common application of pattern recognition techniques is the analysis of data structures that consist of a sequence (or array) of data values, as compared to other such sequences. Sequence analysis, especially as it pertains to molecular biology, involves searching for similarities between some number of relatively small \u201cneedle\u201d or \u201cquery\u201d sequences and a typically much larger \u201chaystack\u201d or \u201csubject\u201d sequence. A sequence is a series of values, typically bytes, whose aggregate value has a physical basis. For example, a sequence of amino-acid identifiers bytes may describe a complete protein. Likewise, a sequence of nucleic-acid identifiers may describe the DNA make-up of a chromosome or portion thereof. As another example, in the case of speech analysis, data values in the sequence data may represent the phonemes that make up a series of spoken words.","The most commonly used program for biological sequence analysis is the so-called BLAST (Basic Local Alignment Search Tool), however there are other similar programs. The core BLAST heuristic matching algorithm and a number of programs that use the algorithm are in the public domain and administered by the National Center for Biotechnology Information (NCBI). While the discussion of examples in this document uses the NCBI BLAST integration of biological sequence information as a principal example, it should be understood that the principals discussed herein are suitable for integration with other similar algorithms and\/or for other types of data such as speech or image data. Note that the common terms in the biological community are \u201csubject sequence\u201d (to refer to the long sequence) and \u201cquery sequence\u201d (to refer to the shorter sequence) rather than \u201chaystack sequence\u201d and \u201cneedle sequence\u201d, respectively. This document avoids these more standard terms because the word \u201cquery\u201d, at least when used by itself, has a different meaning in the relational database system art.","A given needle sequence can be similar to a given haystack sequence in several places. Each site of similarity is considered a \u201clocal alignment\u201d.","Executing a BLAST program for \u201cN\u201d needle sequences against a haystack of \u201cH\u201d sequences results in a description of each of the independent areas of local similarity between every needle and every haystack sequence. Thus, the number of result descriptions can significantly exceed \u201cN\u00d7H\u201d values, but the number reported is usually much less because it is limited to those similarities considered statistically significant by the BLAST algorithm.","It is also known that relational databases are used to store and analyze typically large amounts of information. Modern relational databases provide the user with a powerful query language, such as SQL-92 (Structured Query Langauge, ANSI version 92) to perform analysis and reporting of the data stored in the database system. Data analysis typically involves searching, grouping, counting and relation-joining operations.","Molecular sequence analysis requires a large amount of processing resources and the compute time is often excessive as compared to the amount of time desired by the user\u2014sometimes measured in hours or days. Part of this time is typically performed converting sequence formats from stored format to computationally convenient formats and back and also computing other information not ultimately required by the user.","The present invention is a usage model and the underlying technology used to provide sequence analysis as part of a relational database system. Included components include the semantic and syntactic integration of the sequence analysis with an existing query language, the storage methods for the sequence data, and the design of the execution scheme that runs the sequence analysis as part of a potentially larger database query, especially using parallel execution techniques.","Prior to this invention, relational database systems have not supported sequence analysis. Sequences could be stored in the database, but to be searched by BLAST (or similar program), data elements were required to be exported from the database, converted into a another format, and then operated upon by an independent program that implemented the search algorithm. The resultant data from the search algorithm could then be loaded back into a relational database.","However, the present invention eliminates the export\/import and the attendant data conversions and loss of detail information. It provides a much more reliable and higher performance integration of database-based data analysis and sequence analysis. It also reduces the computation of information not directly required by the ultimate result report.","This invention stores the haystack and needle sequences as relational database tables, or more properly, relations\u2014the haystack and\/or needle sequences can be the result of previous parts of the query. Thus, neither haystack nor needle is a static materialized \u201cdatabase\u201d definition\u2014they can, for example, be the result of a selection criterion determined at the time of the query such as those people with a specific disease or those proteins involved with a specific metabolic function. Likewise, the result of the join is directly usable by the next step of the query, such as another join or aggregation\u2014the result set does not need to be materialized.","On parallel-computation systems, this invention also describes a means of distributing the data among the processing and storage units to achieve high performance levels that are roughly proportional to the number of processing units. Specifically, by distributing the haystack sequences approximately evenly across hundreds or thousands of processing units, very large searches are possible in a short amount of time, multiplied by the number of needles sequences. Prior to this invention, parallel computation was performed by replicating the entire haystack in the memory or disk space at each processing unit.","The NCBI Blast algorithm supports a \u201cMegaBlast\u201d convention where the algorithm processes multiple needle sequences against the database, but this requires that the user of the program specify the groups of needle sequences manually, accounting for the memory (and other resource) capabilities of their machine. With this invention, the MegaBlast effect is implicit, more generalized and the needle selection is automatically optimized by the system's query planner.","In one embodiment, the invention involves determining an instruction plan for performing a comparison of at least one query sequence against at least one subject sequence. The instruction plan has two or more parts. This permits the first part of the plan to store its results as a database relation. That relation is then available to be used as input to further database instructions in a subsequent part of the plan.","The invention can be implemented in a data processing environment that has several processing units available for executing instructions in the plan. In this instance, the instruction plan further specifies which instructions in the plan are to be distributed to designated ones of the processing units for execution. In addition, a central processing unit may be used for broadcasting data, including results relations, among the multiple processing units. Sequence data in this instance is advantageously distributed evenly across multiple processing units, so that processing load is shared as efficiently as possible.","By specifying results as a relation, materialization of sequence data is avoided as much as possible, which in turn speeds up sequence comparison processing. Also, because data is stored as a relation, subsequent plan instructions may include operations such as sort, aggregate, scan, project, restrict, join, and other typical relational database instructions.","The invention's preferred implementation is on a parallel relational database system where embedded processors acting as intelligent disks communicate through a hierarchical communications fabric to one or more processors (called the \u2018hosts\u2019) at the root of the communications hierarchy.","Other than the host processors, each embedded processor (called \u2018Snippet Processing Unit\u2019 or \u2018SPU\u2019) consists of a magnetic disk drive, a communications fabric interface, a central processing unit (CPU), random access (RAM) memory and the circuitry required to connect these elements and provide electrical power.","An example parallel relational database system is described in a co-pending U.S. patent application Ser. No. 10\/667,128 entitled \u201cAsymmetric Data Streaming Architecture Having Autonomous and Asynchronous Job Processing Unit,\u201d filed Sep. 18, 2003 and which is hereby incorporated by reference; although other system architectures may be used.","This hardware system comprises the base for the relational database software system. The interface to the database is thru proprietary and standard interfaces including ODBC and JDBC. These interfaces support a standard relational query processing language\u2014SQL-92.","A. System Level Architecture","First Group Components","The present invention is preferably implemented in a data processing system having at least two \u201cgroups\u201d of processing units, in which the individual components of each group are individual network \u201cnodes\u201d within the system. As will be explained in detail below, the processors in the second group may operate (a) asynchronously, with respect to each other and with respect to processors in the first group and (b) autonomously, in the sense that they can complete assigned tasks without waiting for data from other processors.","As more particularly shown in , the first group  consists of one or more SMP \u201chost\u201d computers -, . . . , -, each with its own memory, network interface, and local storage (not shown in ). Each host  runs its own operating system, and typically, but not necessarily, each host  uses the same type of operating system as the other hosts .","The hosts  typically accept queries that are requests for data stored on mass storage devices, such as hard disk drives . The requests may originate from any number of applications, typically business intelligence applications, that may be residing on local processors  or client computers  or separately running application software , that may originate through a computer network  or locally. Queries are typically provided in a format such as Structured Query Language (SQL), Open DataBase Connectivity (ODBC), Java DataBase Connectivity (JDBC), or the like.","The hosts  accept queries that can retrieve, modify, create and\/or delete data stored on disk  and the schema for such data. The hosts  also accept requests to start, commit, and rollback transactions against the data. The hosts  also perform typical administrative functions such as reporting on the status of the system , start and shutdown operation, backing up the current state of the data, restoring previous states of the data, replicating the data, and performing maintenance operations.","Optionally, there is a load balancing function  in front of the host  processors, which directs individual transactions to specific host or hosts  so as to evenly distribute workload and\/or sequence data.","A catalog management component  contains descriptions of the fields and layout of data. Catalog management  also contains information about which users and applications have which permissions to operate in which ways on which types of records, datasets, and relations. The various hosts  interact with catalog management  in order to process the requests they receive. In one embodiment, catalog management  is embedded within one of the hosts , with parts replicated to the other hosts  and second group  components. As will be understood shortly, the catalog manager is used to provide information to permit the components of the second group  to perform filtering functions.","With the exception of their need to consult catalog management , the hosts  are generally able to respond to requests without having to communicate among themselves. In very rare instances, inter-host  communication may occur to resolve a transaction sequencing issue.","Second Group Components","The second group  of processing units consists of a plurality of \u201cjob\u201d or \u201cSnippet\u201d Processing Units (SPUs) -, -, . . . , -. As shown in , each SPU  consists of a network interface  for receiving requests and delivering replies, a general purpose Central Processing Unit (CPU)  such as a microprocessor , memory , and a Programmable Streaming Record Processor (PSDP) . Each SPU  runs a multi-tasking schedule-based operating system. Each SPU  also has an attached disk  and disk controller from which the SPU  may read streaming data. In other embodiments, the SPU  can receive streaming record data from alternate or additional sources such as other on-board processors or via other network interfaces in place of the disk drives .","The SPU  accepts and responds to requests from host computers  in the first group  to process the streaming record-oriented data under its control. These requests are typically \u201cjobs\u201d of a larger SQL query, and are expressed as sequences of primitive operations on an input stream. The primitive operations could be interpreted, but in the preferred embodiment, they are packaged as compiled code that is ready for execution. An exemplary job-based query is described in more detail below.","In addition to processing jobs, a SPU  also accepts and responds to requests from hosts for other operations such as:\n\n","Each SPU  also accepts and responds to requests from the hosts  to:\n\n","SPU(s)  typically use a multi-tasking Operating System (OS) to allow receiving, processing, and reporting the results from multiple jobs in a job queue. In the preferred embodiment, the OS should also support overlapping job execution. To coordinate this, the OS typically is responsible for scheduling and prioritizing requests according to a number of factors that are determined in real time. These may include a job priority as assigned by the user and\/or host , as well as a job's expected impact on the SPU's  local resources includes the amount of memory, disk, network, and\/or I\/O queues needed to complete the job. The SPU  can also contain software for performing concurrency control, transaction management, recovery and replication of data for which the SPU is responsible.","In the preferred embodiment, SPUs  in the second group  are not directly visible or accessible to the users of, or the applications that run on, for example, the external clients that present queries to the system. The SPUs are an embedded component and maintain significant autonomy and control over their data. A given record (or other data primitive) in the system is thus normally directly accessible to, and processed by only one SPU . While SPUs may replicate their records to increase reliability or performance, they do not share responsibility for processing a given record with other SPUs  when carrying at a job as part of a query.","A storage manager  within each SPU  provides autonomous and asynchronous support for other functions such as error checking, creation and deletion of tables, the use and maintenance of indices and views, record insert and delete, mass loading of existing user data among various SPUs, and the like.","Third Group Components","The system architecture exhibits further aspects of asymmetry in that one or more so-called Large Job Processing Units (LJPUs)  can also play a part in processing queries. Each LJPU  consists of a network interface for receiving job requests and delivering replies, and one or more general purpose Central Processing Units (CPUs) -, . . . , -(each of which may have their own internal memory), as well as a shared memory . The CPUs  in the LJPUs  preferably represent a relatively powerful computing resources, consisting of a relatively high speed processor that has access to relatively large amounts of memory. The LJPUs  may be organized as an SMP that share portions of memory . The LJPUs may be located in the same SMP cluster as the first processor group.","LJPUs are employed to carry out jobs that are not otherwise suitable or possible to perform on the SPUs , such as operations that must be performed on large materialized data sets. This may include sorting, grouping, relational joining and other functions on filtered data, that might not otherwise be possible on a given SPU .","The LJPUs  also preferably play an important role in other functions. One such function is to serve as an Execution Engine which assists the hosts  with coordinating the results from the many jobs that may be running autonomously and asynchronously in the SPUs .","LJPU(s)  may also typically use a multi-tasking Operating System (OS) to allow receiving, processing, and reporting the results from multiple jobs in a job queue. In the preferred embodiment, the OS should also support overlapping job execution. To coordinate this, the OS typically is responsible scheduling and prioritizing requests according to a number of factors that are determined in real time.","Throughout the system, the components and sub-components are designed to optimize performance through extensive use of streaming operations coupled with tuple set operations. As will be understood shortly most operations are designed to take tuple sets (records or groups of records) as their input and output streams; these operations try not to materialize data, but instead they stream the output to the next operation. As a consequence many operations can be handled as one continuous data flow, whereas in a conventional system, it would be necessary to handle them in various layers.","For instance, a storage layer can be designed as a tuple set manager where (from the view of other SPU processes) it stores and retrieves tuple sets. From the storage layer onward, data is normally handled in tuple sets, providing a consistent, well organized, and easily accessible format for internal operations. This is in contrast to other systems where the storage layer stores and retrieves undifferentiated blocks of data which are later converted to tuple sets by some other downstream process. Another example of the streaming\/tuple set architecture is the network layer, which sends and receives tuple sets instead of blocks of data.","A streaming\/tuple set operation can be illustrated by tracking a typical dataflow during a load operation. In this example load case, as data is read into a host  over TCP\/IP network connection , that data is parsed, error-checked, and transformed, and the distribution value calculated, all while the specific byte\/field is in processor cache, and saved to the internal network output frame buffers as one step.","The result is that the input data is read and transformed in a streaming fashion and converted to network-ready tuple set packets at streaming speed with minimal overhead. Specifically, as each data record is received, it is sent over the internal network  to an appropriate SPU  (as determined by the distribution value in a Query Plan). At the SPU , the received data is read, converted into an approved storage format, and placed in memory buffers on a record-by-record basis. As memory buffers are filled, a storage layer in the SPU double-checks that the data corresponds to the indicated table, and that the table \u201cowns\u201d the physical space on the disk , and then writes that data to the disk . Note that during this process, a given byte of data was \u201ctouched\u201d only a few times, and that the data was manipulated in tuple sets thereby optimizing performance and reliability.","A second illustration of a streaming tuple set operation is a join\/aggregate operation where three joins and one co-located aggregation are performed on SPUs , and the results are returned through the host  via ODBC to the ODBC client  (e.g., Business Objects). In this example, on each of three SPU's, the disk  is scanned and data read off the disk through the associated PSDP (via driver ), which filters records of interest and fields of interest within those records (via filter ), and places the resulting tuples into a tuple set buffer in SPU memory. As each tuple set buffer is filled, that tuple set is passed through each of three SPU join nodes and the aggregate node in turn. Each time a new key value is received by the aggregate node, the previous aggregate value and associated key value tuple are transformed as necessary per the ODBC request, and placed in the SPU network packet output buffer associated with the requesting host . When a network packet output buffer in the SPU is filled, its contents are sent to the host , where it is immediately placed in the user-side network buffer and is immediately sent to the ODBC client .","Note that, as in the previous example, the data was \u201ctouched\u201d only a few times. Because the data was handled in tuple sets, it could be operated on as integral units with very minimal overhead. Because the operations are extremely integrated, mixed operations such as joins, aggregates, output transformation, and network packet creation are all performed while the data is in processor cache memory.",{"@attributes":{"id":"p-0054","num":"0063"},"figref":"FIG. 3","b":["12","22"]},"Postmaster \/Postgres ",{"@attributes":{"id":"p-0055","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["Serves as Front-end for query processing","Postmaster  accepts requests from user applications via API ","Creates an Execution Plan","May use authentication\n\nPlan Generator \n","Parse\/query rewrite\/planner\u2014plans how query will be processed.","Supports SQL-92 DDL\/DML","Supports SQL Functions","Provides compatibility with Oracle, SQL Server","Integrated with SQL triggers, stored procedures\n\nPlan Optimizer \n","Cost-based optimizer, with the addition of locale costs which optimizes for most efficient operation\/highest level performance","Indicates which operations will be done within host and which will be done within SPU","Communicates with Plan Link, providing tips on what filtering should be done within the Programmable Data Streaming Processing (\u201cPSDP\u201d) if there are multiple filters that can be done there (more than the PSDP can handle)","Maintains usage\/reference statistics for later index creation, refreshing cluster indices\n\nPlan Link \n","Takes an Execution Plan as input","Analyzes Execution Plan and splits plan further, identifying what will be done within the PSDP , what will be done within the SPU  after the PSDP  has returned its data to the SPU , and what will be done in the Host  after the SPU  has returned its data\n\nSQL Expression Evaluator\/SQL Converter \n","Expression Evaluator","Creates object code for evaluating given expression to be executed on the Host, SPU, and PSDP based on the expressions, their type, and the capabilities of the installed hardware\n\nHost Dispatch \n","Similar to standard UNIX scheduler\/dispatcher","Queues execution plan and prioritizes based on (a) the plan's priority, history, and expected resource requirements, and (b) available resources and other plans' requirements","Controls number of jobs being sent to any one SPU  or LJPU  to avoid SPU\/LJPU Scheduler or SPU\/LJPU memory overload","Sends Host jobs to host","Sends SPUs jobs to be monitored to the Execution Engine in the LJPU.\n\nCommunications Layer , \n","Provides communications among the nodes","Includes Job Listener to await data from nodes","Uses striping data from a Topology Manager to direct multicast and unicast messages","Detects non-responsiveness of nodes and communicates with Topology Manager to trigger failover processing\n\nCall Home \n","Initiates message to a Technical Assistance Center (not shown) to identify failed part and trigger service call or delivery of replacement component (as appropriate given user support level)","Optionally communicates via SNMP to a defined app to receive a failure indicator and callhome trigger","Logs error(s)\n\nLogger\/Replication Server \n","Logs transaction plans, messages, failures, etc. to Netezza log in conventional fashion","Implemented as a standard transaction logger\/replication server\n\nSystem Manager \n","Defines and maintains SPU\/LJPU Configuration information, striping information","Mirror Master\u2014maintains mirrors info\u2014what SPUs are being mirrored where, maintains SPA data, maintains info on system spares","Initiates failover processing when informed by Comm layer of a non-communicative SPU\u2014directs mirror of failed SPU to take over as primary and begin copying to designated spare, directs primary of SPU mirrored on failed SPU to copy its data to that same designated spare, to reduce load on mirror of original failed SPU also directs mirror of the primary on that failed SPU's mirror to do double duty and act as new primary until failover copying has been completed","Communicates to callhome component to initiate replacement process","Manages system expansion and allows for redistribution of data as appropriate or as requested by user during expansion","Initiates SPU\/LTPU diagnostics when appropriate","Provides an API to allow client management interface to get configuration data for user display\/control\n\nHost Diags \n","Runs diagnostics on Host as required\/requested\n\nLoader \n","Provides fast loader capability for loading user data onto disks","Communicates directly to Host Dispatch to load database\/insert records","Communicates with System Manager to get configuration and mirroring data","Controls index creation on primary (and sets up job to run later to create indices on mirror)","Supports input via a number of methods (e.g., tab-separated data, backup\/recovery)","Does ETL, converts data from Oracle, SQL Server, DB\/2, etc. to the internal data format\n\nMDX\/OLAP \n","Provides OLAP\/MDX, ROLAP Engine on Host","Creates and maintains MOLAP cubes","Supports multi-user MDX","Creates Execution Plans for OLAP requests and communicates these directly to Host Dispatch","Supports metadata writeback","Provides administrative support for user creation, security","Access System Catalog through API\n\nCube Builder User Interface (UI)\n","Provides interface for defining and managing cubes to be used in OLAP Processing\n\nSPU Downloader \n","Downloads Firmware to System SPUs  at system initiation\/boot","Downloads PSDP  and SPU  images","Communicates with System Manager to understand number of SPUs and JPU configurations","Initializes spares for failover","Initializes replacements\n\nHost Disk Manager \n","Manages Host Disk (used for Catalog, Temp Tables, Transaction Log, Netezza Log, Swap space)\n\nHost Transaction Manager \n","Manages transactions on the host ","Controls requests sent to SPUs  that will be involved in the transaction","Provides lock management and deadlock detection","Initiates abort processing","Sends state data to Recovery Manager ","Sends ID requests to the Transaction I.D.(TID) Manager ","Provides transaction IDs and deleted transaction IDs to ensure that disk records are preceded","Manages catalog requests as transaction requests as required\n\nTID Manager \n","Provides unique transaction identifiers (TIDs)","Coordinates with other hosts to avoid generating duplicate TIDs\n\nHost Recovery Manager \n","Ensures transaction atomicity after component (e.g., SPU) failure","Maintains journal of transaction state","Initiates rollback as required\n\nBackup\/Recovery \n","Supports Host side of Backup\/Recovery process","Interfaces with Transaction Manager and SPU Storage Manager\n\nC. SPU Software Components\n"]}}}},{"@attributes":{"id":"p-0056","num":"0138"},"figref":"FIG. 4","b":"22"},"Communications Layer ",{"@attributes":{"id":"p-0057","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["Provides internal communication among nodes","Includes Job Listener  to await requests","Includes Network Poster  to send data when buffer filled, job completed, or at Host request\n\nSPU Dispatch\/Scheduler \n","Receives plan through Communications Layer ","Queues Plan","Schedules\/dispatches jobs according to their priority, \u201cfairness\u201d to date, expected resource requirements, and available resources\n\nSPU Transaction Manager \n","Processes changes in transaction state to begin a transaction, pre-commit a transaction, commit a transaction, or abort a transaction","Handles processing of dependencies among transactions as flagged by the lock manager; broadcasts information about these dependencies to relevant host(s); initiates deadlock checks\n\nSPU Lock Manager \n","Controls concurrent access to data","Interfaces with EventTask  before a query is executed and for each result set returned from a scan","Provides support for arithmetic locking\n\nSPU Recovery Manager \n","Maintains a Journal to track transaction status on the SPU , using the Storage Manager API","Performs transaction recovery when requested by SPU Transaction Manager\n\nSPU Mirror Manager \n","Mirror Sender receives copies of record updates from Storage Manager  and transmits these to the mirror for this SPU when an updating transaction commits","Mirror Receiver receives record updates, buffers these in memory, and flushes out to disk through the Storage Manager when the Mirror Receiver buffer is full","Transmits all data to a spare system during failover processing\n\nStorage Manager \n","Stores and manages information on disk in optimal fashion","Has an API that supports storage and retrieval of tuple sets","Supports error checking to insure that the data conforms to the indicated table and the indicated table \u201cowns\u201d the physical space to which the data is being written","Supports creation and deletion of tables, views, and indices","Handles record inserts and deletes","Supports ETL and mass loading of existing user data","Provides storage support for commit\/rollback","Provides support for Precise Indexes","Provides mirroring support for failover","Optimizes sort operations and utilizes smart hash algorithm for data distribution\/striping","Provides support for compression and smart storage optimization","Controls disk I\/O\n\nSPU Resource Scheduler \n","Schedules jobs to run on the PSDP ; communicates with SPU\/PSDP Scheduler  to queue up PSDP requests to retrieve required data","Optimizes the queue to keep the PSDP\/disk as busy as possible, with requests from multiple queries intermixed in the queue based on disk characteristics and location of data on the disk","Takes into account the needs of any data loading for new tables being created and transformed to internal data format (i.e., to optimize the loading process)","Supports heuristic-based scheduling, ensuring that jobs are scheduled on a priority basis, but also ensuring that all jobs do get serviced (e.g., raising a job in priority if it has not been run in a certain interval of time)","Supports synchronous\/piggy-backed scans, combining similar requests to optimize PSDP processing","Manages memory buffers\/memory allocation on SPU; allocates memory to Execution Plans based on expected needs and hints received from Plan Optimizer","SPU Paging (if required)\n\nPSDP Prep \n","Defines the instructions that will be given to the PSDP  in order to process a request (instructions tell the PSDP  what to do with each field being read from the disk)","Identifies what filtering, transformation, projection, and aggregation operations are to by run by the PSDP \n\nEventTask \n","Executes the portion of the Execution Plan that could not be handled by the PSDP but that does not have to be handled at the Host level","Handles sorts, joins, transformations, and aggregations that could not be done as data stream through the PSDP ","Maintains a memory buffer of result set records and returns these to Host through the Comm Layer when buffer filled, job completed, or at Host request\n\nSPU Diags \n","Runs diagnostics on SPU as required\/requested\n\nSPU Boot\/Init \n"]}}}},"Executes image burned into flash memory at boot time to bootstrap the SPU, run diagnostics, register the SPU with the primary Host server, and download new image from Host to run\n\n","The query language operates on sequence data that has been stored or represented by relations (also known as tables). Each relation contains some number of tuples (also known as rows or records). Each tuple consists of data values organized in columns (also known as fields).","As now understood from the above architecture discussion, in a preferred embodiment the database is a parallel database whereby a given user-supplied SQL query may be simultaneously executed on some or all of multiple SPUs . Specifically, the SQL is broken into component pieces (called \u2018snippets\u2019) that the SPUs  execute on their portion of the total data system (called \u2018dataslice\u2019).","Since a query often involves table joins, sorts, and aggregations\u2014these queries often require that data be sent to a given SPU  that does not already have a copy of the data. In some cases, the \u2018new\u2019 data is sent to every SPU  (called a \u2018broadcast\u2019). In other cases, SPUs may selectively receive different datasets (called a \u2018distribute\u2019).","This broadcasting and distributing is handled by query snippets, along with the specific joins, sorts, aggregations and other database query operations.","In the Preferred Implementation (PIM) of the present invention, the subject or so-called \u201chaystack\u201d sequences of amino acids are stored as a sequence of bytes where each amino acid molecule is represented by a single byte containing the amino acid encoding number. Since there are only about 20 different amino acid types, the PIM can also store amino acid sequences in fewer bits. One such implementation uses between 5 and 7 bits per molecule. Another implementation allows for a 4-bit molecule with the balance of the values using \u201cescaped\u201d encodings.","Since nucleotide sequences are described by only four different molecule types, haystack sequences for nucleotides are stored using two binary bits per molecule. For nucleotide sequences, there are also optional additional per-sequence lists to describe nucleotide ambiguities and case-masking. An ambiguity list entry is an index into the sequence that specifies that at the indexed location the value is not one of the common A\/C\/G\/T (0\/1\/2\/3) values\u2014instead it is another value described by a byte value in the index. A case-masking list entry is likewise an index that describes an area of different significance. The case-masking index may include either a bitmask or a start-span list.","PIM query processing is a pipeline with minimal materialization steps. As with other joins, the result set is not materialized into tuples unless the next step of the pipeline is an explicit materializing step, such as a sort\u2014in which case, the materialization is handled by the general sorting logic as is the case with other joins in the PIM.","BLAST Join Syntax","Blast joins are part of the database system using two allowed syntax conventions in the PIM. In the \u201cSQL-92 Full Syntax\u201d implementation discussed below, the join elements are presented in an un-ambiguous manner. The \u201cShorthand\u201d syntax is simpler but includes an ambiguity described below.","SQL-92 Full Syntax","As was described earlier, a blast alignment is treated as a new type of join. Specifically, we are aligning some number of small query or so-called \u201cneedle\u201d records against a typically larger number of \u201chaystack\u201d records. Each record may contain any number of fields, but at least one field from each record must be an amino-acid or nucleotide sequence. The needles table is also allowed to be a single literal string.","In addition, we define a \u201ccontrols\u201d table, which is typically just presented in the query as a single literal string. This string (or table of strings) is the \u201ccommand line switches\u201d to the blast operation in \u201cNCBI blastall\u201d format.","The syntax is an extension of the SQL92 generalized join syntax:",{"@attributes":{"id":"p-0069","num":"0000"},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":"SQL92: SELECT <cols> FROM <t1> <jointype> <t2>ON <join-condition>\n\nThe blast join syntax, where the controls is a literal string, is thus:\n"}}}},{"@attributes":{"id":"p-0070","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT <cols>"]},{"entry":[{},"FROM <haystack> [ALIGN <needles>][WITH <controls>]"]},{"entry":[{},"ON BLASTX(<haystack.seq>,<needles.seq>,<controls.args>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"where BLASTX is any of \u201cblastn\u201d, \u201cblastp\u201d, \u201cblastx\u201d, \u201ctblastn\u201d, \u201ctblastx\u201d,","where haystack, needles and controls are tables\/relations including possible sub-select results,","where the data types of the BLASTX \u201c.seq\u201d arguments are either protein, nucleotide or convertible text based on the standard BLASTX type, and","where the controls.args is varchar.","Thus a simple literal protein blast looks like:",{"@attributes":{"id":"p-0075","num":"0000"},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":"SELECT <cols> FROM haystack ON BLASTP(haystack.seq, \u2018ZZAADEDAAM\u2019, \u2018-e.001 \u2019)"}},"The controls parameter may be a table so that it is possible to perform cross-product analysis varying controlling factors such as gap open and extend costs.","Note too that this can be combined into multiple blasts in the same query in a non-ambiguous manner:",{"@attributes":{"id":"p-0078","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT match1.pseudo_fld1, match2.pseudo_fld2,haystack1.field1,"]},{"entry":[{},"haystack2.field1, ..."]},{"entry":[{},"FROM haystack1"]},{"entry":[{},"ALIGN needles WITH controls ON BLASTX(haystack1.gene, needles.seq,"]},{"entry":[{},"controls.arg) as match1, haystack2"]},{"entry":[{},"ALIGN needles WITH controls"]},{"entry":[{},"ON BLASTX(haystack2.gene, needles.seq, controls.arg) as match2,"]},{"entry":[{},"..."]},{"entry":[{},"WHERE"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Here in this form of syntax we can clearly state where the pseudo fields are coming from, whether match1 or match2 by able to tag them with the aliases.","PIM Alternate \u201cShorthand\u201d Syntax","The shorthand syntax is consistent with how most database equi-joins are described.",{"@attributes":{"id":"p-0081","num":"0209"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT <cols>"]},{"entry":[{},"FROM <haystack> [,<needles> [,<controls>]"]},{"entry":[{},"WHERE BLASTX(<haystack.seq>,<needles.seq>,<controls,args>)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this syntax, the BLAST function is considered a boolean psuedo-function. In the PIM, the query parser detects the usage of this call (which is only used in Blast joins), identifies the haystack, needle and controls tables, and produces the associated join parse tree. Note that the tables do not need to be presented in haystack\/needle\/controls order in the FROM clause\u2014the table identification is handled by evaluating the arguments to the BLAST function.","As with other joins, this can be combined with other join qualifications such as:",{"@attributes":{"id":"p-0084","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT <cols>"]},{"entry":[{},"FROM haystack,needles,clinical"]},{"entry":[{},"WHERE BLASTN(haystack.seq, needles.seq, \u201c0.0001\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AND clinical.info = haystack.info"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Multiple joins in the shorthand form lead to an ambiguity. Consider the following example:",{"@attributes":{"id":"p-0086","num":"0214"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SELECT pseudo_fld1, pseudo_fld2,haystack1.field1, haystack2.field1, ..."},{"entry":"FROM haystack1, haystack2, needles, controls, ..."},{"entry":"WHERE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BLASTX(haystack1.gene, needles.seq, controls.arg) AND"]},{"entry":[{},"BLASTX(haystack2.gene, needles.seq, controls.arg) AND"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above syntax it is not possible to un-ambiguously to state where the pseudo_fld1, pseudo_fld2 fields are coming from because both BLASTX functions produce these fields. In other words, the SQL parser will reject such a statement, requiring the implementer to specify a non-ambiguous form, i.e., depending upon whether the fields come from the haystack1 blast join or the haystack2 blast join.","BLAST Join SQL Semantic","The BLAST algorithm is integrated into the database in such a manner that it is abstracted as a relation \u201cjoin\u201d operation.","The subject sequence list (also called the \u2018haystack\u2019) is joined against the query sequence list (also called the \u2018needles\u2019).","The subject sequence is a field in a SQL tuple (called the \u2018haystack\u2019 row in the PIM). In addition to the sequence material, the haystack tuples may include additional fields that describe the origin of the sequence or other attributes of the sequence and any other information related to the sequence.","Similarly, the query sequence is a field in the needle tuple. The additional fields in the needle tuples may (or may not) be similar to the additional fields included with the subject sequence to form the haystack tuple.","Also permitted is the degenerate case of a single literal representation of a query and\/or subject sequence. In the underlying implementation, this is equivalent to a single-row table.","In the PIM, an additional relation (called \u2018controls\u2019) is also provided to allow the user to specify the BLAST control characteristics. In the PIM, this control string or table is based on the command line conventions of the standard, standalone BLAST program, \u201cblastall\u201d.","The SQL syntax and semantic allows for each of the query sequences to be compared to each of the subject sequences. This is performed for each of the controls.","Consistent with how the PIM handles SQL relations in general, during the SQL query all of these relations may originate from the disk, the communications fabric, RAM memory storage, or other memory devices or they may be assembled from prior parts of the SQL query.","If obtained from the disk or other memory storage, they may have been placed there from previous SQL queries or other non-SQL loading\/caching tools.","The SQL join of the haystack with the needles (for each controls) results in zero or more result tuples. Unlike all other SQL joins, the number of tuples in the result relation (for each controls) is permitted to be larger than the multiplicative product of the number of tuples in the haystack by the number of tuples in the needles table, to accommodate multiple points of alignment between each combination of needle and haystack","Result Relation of the Blast Join","The result set of the Blast join is a tuple for each \u201chigh scoring pair\u201d in Blast (XML) parlance. A \u201clocal alignment\u201d or \u201chit\u201d (XML) includes one or more of these HSPs. The exact definition of HSP and Blast's XML-format output are available from the National Center for Biotechnology Information (NCBI).","Thus, the haystack\/needle tuple-pairs for which there are zero local alignments are not present in the result set at all.","Each result tuple conceptually consists of all of the fields of the needle and haystack tuples. In usage, most queries are expected to request a \u201cprojected\u201d subset of these fields. In the PIM, the non-requested fields are not materialized, saving processing time and storage costs.","Each result tuple also contains a number of \u201cpsuedo-fields\u201d that detail the aspects of the local alignment. For local alignments that combine to form a \u201cgapped alignment\u201d, each of the tuple's psuedo fields also include the information about the gapped alignment.","The exact list of psuedo fields varies based on the type of alignment performed, but as a minimum, include the starting positions and match-spans in the query sequence and subject sequence. Additional psuedo fields common to all Blast joins include a statistical value (the \u201cexpect\u201d value) describing the likelihood of random matches and a \u201cscore\u201d value that may be used to compare this alignment against others.","Additional psuedo fields are supplied which contain information directly derived from other fields. For example, the sub-sequence of the haystack and needle that the match occurred on is offered as a psudo-field in the PIM.","Blast Join Implementation Summary","A Blast join is typically part of potentially much larger query execution plan. A query execution plan is typically represented as a \u201ctree\u201d or \u201csequence\u201d of plan execution nodes, where each node relates to a step in the query processing. Some common node types are \u201cscan\u201d, \u201caggregate\u201d and \u201cjoin\u201d. The join types are further divided into \u201chash\u201d, \u201cnested-loop\u201d, \u201cmerge\u201d, \u201cexists\u201d and others. Each of join types may be further sub-grouped into \u201cinner\u201d, \u201couter\u201d, \u201cdisk-based\u201d and so on.","In the PIM, the execution plan is created by the SQL Parser and Optimizing Planner. The parser converts the SQL language text into a plan tree form. The original query may have any number of joins and restrictive clauses. This tree is then analyzed on a \u201ccost-basis\u201d to produce an optimal execution plan. The optimal plan is the one that runs fastest and\/or uses the least amount of memory or disk space as defined by the predefined costs associated with time and resources.","In the PIM execution plan, there is a new join node type, \u201cBlastJoin\u201d. This node type operates on a total of four relations. Of the four, three have been pre-materialized by previous steps in the execution plan. The pre-materialized tables are referred to as the \u201cinner table\u201d, the \u201ccontrols table\u201d, and the \u201chaystack stats\u201d.","The fourth table is referred to as the \u201couter\u201d or \u201cstreaming\u201d table and is, in the PIM, conceptually considered the input to the join on a per-tuple basis. Thus, the PIM's execution plan's nodes can be considered as a set of processes, each of which pipeline tuples to the next node. In fact, the outer table is often materialized by a previous node and the pipeline is really just a do-loop that steps through each row and provides it to the join node.","Depending on how the optimizing planner has organized the execution plan, the inner table may be either the haystack or the needles table. Based on the cost-values in the PIM, if the needles and supporting Blast runtime state are known to be able to fit in a small amount of RAM memory, the inner table may be the needles table and the haystack is the outer table, Conversely, if the haystack fits in a small amount of RAM, it may become the inner table. If neither table fits in memory, a disk-based algorithm is used and the inner table is usually the haystack.","The ultimate choice which of the haystack or needles is the inner or outer table is the responsibility of the optimizing planner based on cost estimates.","The \u201chaystack stats\u201d table is a small relation that in the PIM, contains the size of the haystack relation in rows and the sum of the sizes (in molecules) of each of the subject sequences.","Auxiliary Output Tables","The PIM allows the sequence analysis algorithm to produce additional tables separate from the join result set. These tables are \u201cside-effect\u201d tables and are invisible to the query statement that contains the Blast join, but are visible to subsequent SQL statements.","For Blast joins, the PIM produces a histogram table and summary table.","These auxiliary tables are only created if requested as part of the PIM controls record. The control string specifies the names of the tables and their scope (i.e. whether they are to be transaction-scoped, session-scoped, permanent tables, etc).","Parallel Techniques","The PIM uses a \u201chost\u201d processor to initiate and control overall query execution and combine and then send the result set to the client program. For queries that operate against a pre-existing disk-based table, the host processor is also used to load the initial haystack table, typically from files created by other programs. For queries that operate against a relation that is the result set of a previous step in the query script, the haystack may be present on the SPUs as a result of host-based distribute or the SPUs may distribute the data amoungst themselves.","In the PIM, the haystack table is distributed in an approximately even manner across all of the SPU disks in the system. The table is distributed as whole records\u2014all of the fields associated with a given record are present together on the same SPU.","The distribution strategy can be any of a number of algorithms, such as \u201cround-robin\u201d, \u201chashed\u201d, \u201csized\u201d or \u201ccustom\u201d. In a round-robin distribution, each of the first N records are sent to each of the N SPUs. The next N records are likewise sent to the N SPUs. Thus, the formula for where a given record goes is roughly \u201cdestinationSPU=recNum % numSPUs\u201d, where the \u201c%\u201d is the modulo operator. In a hashed distribution, some number of the haystack fields in each record are combined using a hashing algorithm such as CRC (cyclic redundancy check) to choose the destination SPU. In a sized algorithm, the distribution of the records is adjusted to allow for each SPU to receive a number of records bytes roughly equal to the number of bytes on each other SPU. In a custom algorithm, the algorithm may use any number of internal measures and choices to decide where a haystack record is sent.","The invention also allows for groups of records to be duplicated on some or all of the SPUs, even to the extent that each SPU can contain the full haystack. In this scenario, the query is executed in a slightly different manner\u2014instead of the each SPU using the full needle set, each SPU can use a subset. In the case where each SPU contains the full haystack, each SPU would use a unique needle set.","In the PIM, the needle table is fully duplicated on all of the SPUs. For most Blast joins, this is done by the host processor broadcasting the records to all SPUs whereupon they each materialize the full needle record set.","Note that some sequence analysis programs are needle\/haystack symmetric. The database's choice about which table is broadcasted versus distributed is allowed to be decided at query time based on a user directive or the database's own internal optimal query-planning analysis.","An Example Schema for the Database","This example is based on a single haystack\/needles table. Thus, the blast join is actually a self-join. We think this is consistent with many of the queries used when comparing sequences from an organism already in the database against many other organisms in the database.","To take advantage of the non-redundant FASTA (the standard file format for describing biological sequences) file formats, we split the sequence data from the information data linked by a unique primary key.","The following is the schema for our protein table pair:",{"@attributes":{"id":"p-0123","num":"0251"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create table prot_seq (","\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s_uid int8 primary key,","\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s_seq protein not null) distribute on (s_uid);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"create table prot_info (","\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"i_uid int8 references prot_seq(s_uid),","\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"i_fasta varchar(100),","\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"i_initial boolean,","\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"i_name varchar(100),","\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"i_description varchar(300)) distribute on (i_uid);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0124","num":"0252"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"create view vpemp as select * from prot_info, prot_seq where \\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"i_fasta = \u2018prot_emp\u2019 and i_uid=s_uid and i_initial=true;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"create view vpgrp as select s_seq q_seq, i_name q_name \\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"from prot_info, prot_seq \\"]},{"entry":[{},"where i_fasta = \u2018prot_grp\u2019 and i_uid=s_uid and i_initial=true;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Since the alias syntax for self joins is hard to read, we create two views\u2014one view being the needles (called vpgrp here) and the other being the haystack (called vpemp here). Then the actual blast query is against the views. The I_initial field is the first definition of the sequence in the FASTA file.","Thus, a query looks like:",{"@attributes":{"id":"p-0126","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT i_name, score, q_name, ctrl \\"]},{"entry":[{},"FROM vpemp ALIGN vpgrp WITH ctrlspx ON \\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"blastp(vpemp.s_seq, vpgrp.q_seq, ctrl) \\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"order by i_name, q_name, score"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Naturally, the user's schema and approach don't have to look this way\u2014even if they use a single-table approach, the aliased subselects can be in the FROM and ALIGN clauses above. It likewise goes almost without saying that the haystack and needles can be derived from any prior joins, restricts and the results of the blast can be joined and aggregated like any other intermediate result set.","Details of a Blast Join Execution Plan","This section uses the following example SQL script for the discussion:",{"@attributes":{"id":"p-0129","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002List the contents of each of the haystack, needles, controls tables:"},{"entry":"\u2002Haystack"},{"entry":"select * from pemp;"},{"entry":"\u2002Needles"},{"entry":"select * from pgrp;"},{"entry":"\u2002Controls"},{"entry":"select * from ctrlspx;"},{"entry":"\u2002Perform a simple Blast join of all needles into the haystack,"},{"entry":"returning"},{"entry":"\u2002the needle-id and haystack-id from the outer and inner tables and"},{"entry":"\u2002also returning several psuedo-fields, including an expression on one"},{"entry":"\u2002of them."},{"entry":"SELECT q_name, i_name, hit_num ,hsp_num ,hsp_bit_score ,hsp_score"},{"entry":"\u2003,hsp_evalue ,hsp_query_from ,hsp_query_to ,hsp_hit_from"},{"entry":"\u2003,hsp_hit_to ,hsp_qseq ,hsp_hseq ,hsp_midline"},{"entry":",length(hsp_midline)"},{"entry":"FROM pemp"},{"entry":"SEARCH pgrp"},{"entry":"WITH ctrlspx"},{"entry":"ON blastp (pemp.s_seq, pgrp.q_seq, ctrl) ;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0130","num":"0258"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","orient":"land","tabstyle":"monospace"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"602pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003i_uid\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| i_fasta\u2003\u2003| i_initial\u2003| i_name\u2003| \u2003\u2003i_description\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003s_uid",{}]},{"entry":"| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003s_seq"},{"entry":"---------------------+----------+-----------+--------+------------------------------------------+--------------------"},{"entry":"-+----------------------------------------------------------------------------------------------------"},{"entry":"\u20034563865781203919673\u2003| prot_emp\u2003| t\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| empl\u2003\u2003\u2003| One\u2003match\u2003against\u2003grp\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| 4563865781203919673"},{"entry":"| ZZMATCHIT"},{"entry":{}},{"entry":"\u20034563865781203919674\u2003| prot_emp\u2003| t\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| emp2\u2003\u2003\u2003| No\u2003matches\u2003against\u2003grp\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| 4563865781203919674"},{"entry":"| DEADMEAT"},{"entry":{}},{"entry":"\u20034563865781203919675\u2003| prot_emp\u2003| t\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| emp3\u2003\u2003\u2003| Member\u2003of\u2003multi-record\u2003match\u2003against\u2003grp\u2003| 4563865781203919675"},{"entry":"| AAACCCTTT"},{"entry":{}},{"entry":"\u20034563865781203919676\u2003| prot_emp\u2003| t\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| emp4\u2003\u2003\u2003| Member\u2003of\u2003multi-record\u2003match\u2003against\u2003grp\u2003| 4563865781203919676"},{"entry":"| AAACCCTTTIIAAACCCTTT"},{"entry":{}},{"entry":"\u20034563865781203919677\u2003| prot_emp\u2003| t\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| emp5\u2003\u2003\u2003| Member\u2003of\u2003multi-record\u2003match\u2003against\u2003grp\u2003| 4563865781203919677"},{"entry":"| AAACCCTTTIIAAACCCTTTIIAAACCCTTTIIAAACCCTTTIIAAACCCGTTIIAAACCCTTTIIAAACCCTGTIIAAACCCTTTIIAAACCCTTTII"},{"entry":"(5\u2003rows)"},{"entry":{}},{"entry":"q_seq\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003| q_name"},{"entry":"-------------+--------"},{"entry":"ZZMATCHIT\u2003\u2003\u2003\u2003| grp1"},{"entry":"MEATDEAD\u2003\u2003\u2003\u2003\u2003| grp2"},{"entry":"AAACCCTTT\u2003\u2003\u2003\u2003| grp3"},{"entry":"IIAAACCCTTT\u2003\u2003| grp4"},{"entry":"(4\u2003rows)"},{"entry":{}},{"entry":"\u2003\u2003ctrl"},{"entry":"---------"},{"entry":"\u2212e.0001"},{"entry":"(1\u2003row)"},{"entry":{}},{"entry":"\u2003q_name\u2003| i_name\u2003| hit_num\u2003| hsp_num\u2003| \u2003hsp_bit_score\u2003| hsp_score\u2003| \u2003\u2003\u2003\u2003\u2003hsp_evalue\u2003\u2003\u2003\u2003\u2003\u2003| hsp_query_from\u2003|"},{"entry":"hsp_query_to\u2003| hsp_hit_from\u2003| hsp_hit_to\u2003| \u2003hsp_qseq\u2003\u2003| \u2003hsp_hseq\u2003\u2003\u2003\u2003| hsp_midline\u2003| length"},{"entry":"--------+--------+---------+---------+-----------------+-----------+---------------------+----------------+----------"},{"entry":"----+--------------+------------+-------------+-------------+-------------+--------"},{"entry":"\u2003grp3\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200389\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200397\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200378\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200386\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20033\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200356\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200364\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20034\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200334\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200342\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20035\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200323\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200331\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20036\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200312\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200320\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20037\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20039\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp4\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200312\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200320\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp4\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20039\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp3\u2003\u2003\u2003| emp3\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20033\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"9\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20039\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003\u2003| \u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u200328.49060598692\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200362\u2003| 8.5904915207764e-06\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200387\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200397\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| \u200328.49060598692\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200362\u2003| 8.59049152077645-06\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200376\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200386\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20033\u2003| \u200328.49060598692\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200362\u2003| 8.5904915207764e-06\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200364\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20034\u2003| \u200328.49060598692\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200362\u2003| 8.5904915207764e-06\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200332\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200342\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20035\u2003| \u200328.49060598692\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200362\u2003| 8.5904915207764e-06\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200321\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200331\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20036\u2003| \u200328.49060598692\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200362\u2003| 8.5904915207764e-06\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200310\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200320\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20037\u2003| 25.794208955498\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200355\u2003| 5.5681945406694e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200365\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200375\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCT\u2003T\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20038\u2003| 25.794208955498\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200355\u2003| 5.5681945406694e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200343\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200353\u2003| IIAAACCCTTT\u2003| IIAAACCCGTT\u2003| IIAAACCC\u2003TT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp5\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u20039\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20033\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20039\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp4\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u200328.49060598692\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200362\u2003| 8.5904915207764e-06\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200310\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u200320\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| IIAAACCCTTT\u2003| \u2003\u2003\u2003\u200311"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp4\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| \u2003\u2003\u2003\u2003\u2003\u20032\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20033\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20039\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":{}},{"entry":"\u2003grp4\u2003\u2003\u2003| emp3\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u2003\u20033\u2003| \u2003\u2003\u2003\u2003\u2003\u20031\u2003| 25.409009379581\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u200354\u2003| 7.2722872831518e-05\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20033\u2003|"},{"entry":"11\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20031\u2003| \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20039\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| AAACCCTTT\u2003\u2003\u2003| \u2003\u2003\u2003\u2003\u20039"},{"entry":"(22\u2003rows)"}]}}}}},"A tree-form of the Blast Join execution plan is shown in .","Reading from the bottom to the top, this plan specifies that the \u201cctrlspx\u201d table is to be scanned into memory in the host processor  as an inner table. Then the \u201cpgrp\u201d needles table is scanned and the records are cross-product joined to the inner table. The resultant records are broadcasted to all of the SPUs . There, they are joined against a scanned-in \u201cpemp\u201d table to produce the Blast result set. The r\/w\/s in this notation are an indication of some of the sizing factors used by the optimizing query planner to choose the best execution plan.","The flattened, detailed excution plan is significantly more complex. It begins with a statistics scan of the haystack (\u201cpemp\u201d). This is done because the NCBI Blast algorithm requires the number of sequences and the byte-size of the haystack table as input. These values can be included as part of \u201cctrlspx\u201d table options, in which case the is statistics scan is not present.","An example plan appears several paragraphs below in the text. In this plan description, the numeric column (of the form N[XX]) designates the snippet number and the per-snippet execution step. A snippet is a unit of execution plan compilation and execution. Each snippet runs on either the host  (\u201cdbs\u201d) or the SPUs  (\u201cspu\u201d) as designated by the second column. All snippets are compiled on the host processor. If the snippet is to execute on the SPU, it is broadcast to the SPU by the host.","In reading the following plan, note that the \u201clarge\u201d numbers are table-ids. Those table-ids that are greater than 1,000,000,000 are in-memory tables. If an in-memory table exceeds the amount of available memory, it is spilled to the disk in a \u201cpaging\u201d manner.","Most of the nodes below are self-describing with a knowledge of standard relational database technology. However, the \u201cReturnNode\u201d means this locus is returning records to the calling locus\u2014in an SPU, the records are returned to the host. The TableSizeNode is a runtime statistics reporting mechanism that allows the detailed execution engine to choose between memory-based or disk-based algorithms for the subsequent joins.","The records that are implicitly exiting join nodes are the combined outer\u2225inner fields. The records exiting Aggregate nodes are the combined input\u2225grouping\u2225aggregated fields.","The Blast join node is part of the snippet #5, denoted below beginning with \u201c5 [00]\u201d.","Here is the example plan:",{"@attributes":{"id":"p-0139","num":"0267"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1[00]:","spu","ScanNode table \u201cpemp\u201d 200653 memoryMode=no flags=0x202"]},{"entry":[{},{},"-- Cost=0.0..0.1 Rows=5 Width=112 Size=560 {(i_uid)}"]},{"entry":["1[01]:","spu","RestrictNode (NULL)"]},{"entry":["1[02]:","spu","ProjectNode, 2 cols"]},{"entry":[{},{},"3:i_name 6:s_seq"]},{"entry":[{},{},"-- 0:i_name 1:s_seq"]},{"entry":["1[03]:","spu","SaveTempNode"]},{"entry":[{},{},"as temptable 1000000503 transient=0 append=0"]},{"entry":["1[04]:","spu","TableSizeNode table 1000000503"]},{"entry":["1[05]:","spu","ReturnNode"]},{"entry":["501[00]:","dbs","TableSizeNode table 1000000503"]},{"entry":["2[00]:","spu","ScanNode table 1000000503 memoryMode=yes flags=0x4"]},{"entry":["2[01]:","spu","RestrictNode (NULL)"]},{"entry":["2[02]:","spu","ProjectNode, 1 cols"]},{"entry":[{},{},"1:"]},{"entry":["2[03]:","spu","AggregateNode 0 group fields, 2 aggrs method 0"]},{"entry":[{},{},"COUNT srcCol=0 srcType=0 dstType=20 distinct=0 tbl=0"]},{"entry":[{},{},"LEN srcCol=0 srcType=0 dstType=20 distinct=0 tbl=0"]},{"entry":["2[04]:","spu","ProjectNode, 2 cols"]},{"entry":[{},{},"1: 2:"]},{"entry":["2[05]:","spu","ReturnNode"]},{"entry":["502[00]:","dbs","AggregateNode 0 group fields, 2 aggrs method 0"]},{"entry":[{},{},"SUM srcCol=0 srcType=20 dstType=20 distinct=0 tbl=0"]},{"entry":[{},{},"SUM srcCol=1 srcType=20 dstType=20 distinct=0 tbl=0"]},{"entry":["502[01]:","dbs","ProjectNode, 2 cols"]},{"entry":[{},{},"2: 3:"]},{"entry":["502[02]:","dbs","DownloadTableNode broadcast into link 1000000504"]},{"entry":["3[00]:","spu","ScanNode table \u201cctrlspx\u201d 200689 memoryMode=no flags=0x0"]},{"entry":[{},{},"-- Cost=0.0..0.0 Rows=1 Width=100 Size=100"]},{"entry":["3[01]:","spu","RestrictNode (NULL)"]},{"entry":["3[02]:","spu","ProjectNode, 1 cols"]},{"entry":[{},{},"0:ctrl"]},{"entry":[{},{},"-- 0:ctrl"]},{"entry":["3 [03]:","spu","ReturnNode"]},{"entry":["503[00]:","dbs","SaveTempNode"]},{"entry":[{},{},"as temptable 1000000505 transient=0 append=0"]},{"entry":["503[01]:","dbs","TableSizeNode table 1000000505"]},{"entry":["4[00]:","spu","ScanNode table \u201cpgrp\u201d 200679 memoryMode=no flags=0x203"]},{"entry":[{},{},"-- Cost=0.0..0.0 Rows=4 Width=112 Size=448 {(q_name)}"]},{"entry":["4[01]:","spu","RestrictNode (NULL)"]},{"entry":["4[02]:","spu","ProjectNode, 2 cols"]},{"entry":[{},{},"1:q_name 0:q_seq"]},{"entry":[{},{},"-- 0:q_name 1:q_seq"]},{"entry":["4[03]:","spu","ReturnNode"]},{"entry":["504[00]:","dbs","CrossProductNode table 1000000505"]},{"entry":[{},{},"-- \u2018t\u2019::bool"]},{"entry":[{},{},"-- Cost=0.1..0.9 Rows=4 Width=212 Size=848"]},{"entry":["504[01]:","dbs","ProjectNode, 3 cols"]},{"entry":[{},{},"2:? 0:? 1:?"]},{"entry":[{},{},"-- 0:ctrlspx.ctrl 1:pgrp.q_name 2:pgrp.q_seq"]},{"entry":["504[02]:","dbs","DropTableNode 1000000505"]},{"entry":["504[03]:","dbs","DownloadTableNode broadcast into link 1000000506"]},{"entry":["5[00]:","spu","ScanNode table 1000000506 memoryMode=yes flags=0x4"]},{"entry":["5[01]:","spu","ProjectNode, 3 cols"]},{"entry":[{},{},"0: 1: 2:"]},{"entry":["5[02]:","spu","BlastJoinNode"]},{"entry":[{},{},"table 1000000503 tblField=1 joinField=2 ctrlField=0 blastType=2"]},{"entry":[{},{},"rowCntId=1000000504"]},{"entry":[{},{},"-- blastp(pemp.s_seq, pgrp.q_seq, ctrlspx.ctrl)"]},{"entry":[{},{},"-- Cost=5.0..30008.1 Rows=7 Width=200 Size=1.3KB {(pemp.i_uid)}"]},{"entry":["5[03]:","spu","ProjectNode, 15 cols"]},{"entry":[{},{},"1:q_name 3:i_name \u221232:hit_num \u221237:hsp_num \u221238:hsp_bit_score \u221239:"]},{"entry":[{},{},"hsp_score \u221240:hsp_evalue \u221241:hsp_query from \u221242:hsp_query_to \u221243:hsp_hit_from \u221244:"]},{"entry":[{},{},"hsp_hit_to \u221254:hsp_qseq \u221255:hsp_hseq \u221256:hsp_midline 14:length(blastcol(\u221256))"]},{"entry":["5[04]:","spu","DropTableNode 1000000503"]},{"entry":["5[05]:","spu","DropTableNode 1000000506"]},{"entry":["5[06]:","spu","DropTableNode 1000000504"]},{"entry":["5[07]:","spu","ReturnNode"]},{"entry":["505[00]:","dbs","ReturnNode"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"End Execution Plan"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the context of this invention, the most relevant node in the plan above is the BlastJoinNode. It describes the implementation of the Blast join as operating on the needles outer table, 1000000506, (actually the cross-product of \u201cpgrp\u201d and \u201cctrls\u201d) and the joining of that against the inner haystack (1000000503 derived from \u201cpemp\u201d). The join is performed on the inner tables field #1 against the outer table's field #2. The control string is part of the outer table, at field #0. This join is a blastType=2 which denotes a blastp operation. For the haystack statistics, it refers to the previously broadcast single-record stats table, 1000000504.","The projection that follows the join node defines which fields of the combined tuplesets are to be passed onto the next step of the plan. In this case, the first two fields are from the outer and inner tables and the subsequent (field numbers <0) are blast-specific psuedo-fields.","Detailed Implementation of the Blast Join","The following \u201cC++ code\u201d is the instantiation of the snippet #5 of the execution plan listed above.","The PIM uses a model of fully compiled queries as described in a co-pending U.S. patent application entitled \u201cOptimized SQL Code Generator II,\u201d, Ser. No. 60\/485,638 filed Jul. 8, 2003, the entire contents of which is hereby incorporated by reference.","In this system, the query plans are realized directly as a set of query-specific C++ statements that are compiled and dynamically bound into the execution of the database, all at query time. This invention also works with more traditional \u201cinterpretive\u201d query engines.","In the following code, most data types and variables include the snippet node number in their names (the [XX] in the plan above). Therefore:\n\n","In the code below, each varying size field is denoted in the records structure of type vlen_t fielded[0]. This is a placeholder for readability convenience. The actual field is obtained by calling GetVarFieldPtr( )","The coalesce( ) function is to convert a disk\/network representation of a sequence to a single memory allocation. Likewise the coalesceAll( ) performs the same action for all of the records in a memory-materialized relation.","The FIRST_BLOCK and LOOP_RECS_VARIABLE macros are used to loop thru records grouped in blocks. The LOOP_RECS_VARIABLE sets its first argument, which is then used in the contained code.","The VERIFY_FSPACE macros test a block to see whether it has sufficient room to fit the requested size. If it does not, the block is handed to the named function (the last argument) and a new block is allocated, setting the fourth argument.","The sliceAndDice( ) function takes in an in-memory coalesced sequence and parcels it into one or more blocks. If it doesn't all fit in the current block, sliceAndDice calls the function specified by the eighth argument to process the block and then slideAndDice( ) allocates a new block buffer to its sixth argument.","The UPDATE_WRITE_ADDR makes the block buffer's internal pointers aware of the material that had been copied into it.","The returnNewBlock( ) and returnNewBlockFunc( ) are routines that are used in the SPU to send the contents of the current block buffer to the host.",{"@attributes":{"id":"p-0153","num":"0285"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#include \u201cgeninl.h\u201d"},{"entry":"\/********* Prefix **********\/"},{"entry":"struct TScan0 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint16 size;"]},{"entry":[{},"uint8 nulls[1];"]},{"entry":[{},"uint8 pad1[1];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"vlen_t f0[0];vlen_t f1[0];vlen_t f2[0];"},{"entry":"};"},{"entry":"struct TTemp2 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint16 size;"]},{"entry":[{},"uint8 nulls[1];"]},{"entry":[{},"uint8 pad1[1];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"vlen_t f0[0];vlen_t f1[0];"},{"entry":"};"},{"entry":"struct TBlastOut2 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint16 size;"]},{"entry":[{},"uint8 pad1[2];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"double f9;double f10;double f28;double f29;"},{"entry":"double f30;double f50;double f51;double f52;double f53;"},{"entry":"int f6;int f11;int f12;int f13;int f14;int f18;int f21;int f22;int f26;int f27;int"},{"entry":"f31;int f32;int f33;"},{"entry":"int f34;int f35;int f36;int f37;int f38;int f39;int f40;int f41;int f42;int f43;int"},{"entry":"f47;int f48;int f49;int f55;"},{"entry":"vlen_t f0[0];vlen_t f1[0];"},{"entry":"vlen_t f2[0];vlen_t f3[0];vlen_t f4[0];vlen_t f5[0];vlen_t f8[0];vlen_t f19[0];vlen_t"},{"entry":"f20[0];"},{"entry":"vlen_t f23[0],vlen_t f24[0];vlen_t f25[0];vlen_t f54[0];vlen_t f7[0];vlen_t"},{"entry":"f15[0];vlen_t f16[0];"},{"entry":"vlen_t f17[0],vlen_t f44[0];vlen_t f45[0];vlen_t f46[0];"},{"entry":"};"},{"entry":"struct TReturn7 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint16 size;"]},{"entry":[{},"uint8 nulls[2];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"double f4;double f5;double f6;"},{"entry":"int f2;int f3;int f7;int f8;int f9;int f10;int f14;"},{"entry":"vlen_t f0[0];vlen_t f1[0];vlen_t f11[0]vlen_t f12[0];vlen_t f13[0];"},{"entry":"};"},{"entry":"\/********* Code **********\/"},{"entry":"void GenPlan5(CPlan *plan, char *bufStarts,char *bufEnds, bool lastCall) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int bufSize = bufEnds \u2212 bufStarts;"]},{"entry":[{},"TScanNode *node0 = (TScanNode*)plan\u2212>m_nodeArray[0];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TScan0 *Scan0 = BADPTR(TScan0*);"]},{"entry":[{},"CTable *tScan0 = plan\u2212>m_nodeArray[0]\u2212>m_result;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char *nullsScan0P = BADPTR(char *);"]},{"entry":[{},"TProjectNode *node1 = (TProjectNode*)plan\u2212>m_nodeArray[1];"]},{"entry":[{},"TBlastJoinNode *node2 = (TBlastJoinNode*) plan\u2212>m_nodeArray[2];"]},{"entry":[{},"if ( ! (node2\u2212>m_tempTbl\u2212>m_blobsCoalesced) )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"node2\u2212>m_tempTbl\u2212>coalesceAll( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CTable *tTemp2 = node2\u2212>m_tempTbl;"]},{"entry":[{},"TTemp2 *Temp2 = BADPTR(TTemp2*);"]},{"entry":[{},"TTemp2 *Temp2Looper = BADPTR(TTemp2*);"]},{"entry":[{},"TMemblockInfo *block2 = NULL;"]},{"entry":[{},"if (!node2\u2212>m_bLoaded)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"node2\u2212>LoadTempTable( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CTable *tBlastOut2 = node2\u2212>m_QBlastOut;"]},{"entry":[{},"TBlastOut2 *BlastOut2 = BADPTR(TBlastOut2*);"]},{"entry":[{},"TMemblockInfo *BlastOutBlock2 = NULL;"]},{"entry":[{},"\/\/ Created by Projection:"]},{"entry":[{},"\/\/ computed field 14"]},{"entry":[{},"int var13;"]},{"entry":[{},"bool var13Null = false;"]},{"entry":[{},"TProjectNode *node3 = (TProjectNode*)plan\u2212>m_nodeArray[3];"]},{"entry":[{},"TDropTableNode *node4 = (TDropTableNode*)plan\u2212>m_nodeArray[4];"]},{"entry":[{},"TDropTableNode *node5 = (TDropTableNode*)plan\u2212>m_nodeArray[5];"]},{"entry":[{},"TDropTableNode *node6 = (TDropTableNode*)plan\u2212>m_nodeArray[6];"]},{"entry":[{},"TReturnNode *node7 = (TReturnNode*)plan\u2212>m_nodeArray[7];"]},{"entry":[{},"TReturn7 *Return7 = BADPTR(TReturn7*);"]},{"entry":[{},"CTable *tReturn7 = node7\u2212>m_result;"]},{"entry":[{},"CRecordStore *recStore7 = tReturn7\u2212>m_recStore;"]},{"entry":[{},"TScan0 *nextScan0;"]},{"entry":[{},"for (Scan0 = (TScan0 *)bufStarts; (Scan0 < (TScan0 *)bufEnds); Scan0 = nextScan0) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"nextScan0 = (TScan0*)((char*)Scan0 + Scan0\u2212>size);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if ( plan\u2212>m_interruptRequested ) GencAbortPlan(plan);"]},{"entry":[{},"if ( node0\u2212>m_blobs\u2212>coalesce((record_t**)&Scan0,NULL) )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"continue;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint32 innerRecNum2 = 0;"]},{"entry":[{},"block2 = FIRST BLOCK(tTemp2);"]},{"entry":[{},"LOOP_RECS_VARIABLE(Temp2Looper,TTemp2,block2) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Temp2 = Temp2Looper;"]},{"entry":[{},"if ( plan\u2212>m_interruptRequested ) GencAbortPlan(plan);"]},{"entry":[{},"{ \/\/ Call external function to process data"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void *fields[3];"]},{"entry":[{},"\/\/ 0-haystack field, 1-needle field, 2-ctrls field"]},{"entry":[{},"fields[0] = GetVarFieldPtr((record_t*)Temp2,1,4);"]},{"entry":[{},"fields[1] = GetVarFieldPtr((record_t*)Scan0,2,4);"]},{"entry":[{},"fields[2] = Scan0\u2212>f0;"]},{"entry":[{},"\/\/ run the blast sequence into cache table"]},{"entry":[{},"node2\u2212>blastAway(fields,false,innerRecNum2++, (record_t*)Temp2);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"BlastOutBlock2 = FIRST_BLOCK(tBlastOut2);"]},{"entry":[{},"LOOP_RECS_VARIABLE(BlastOut2,TBlastOut2,BlastOutBlock2) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Temp2 = (TTemp2*)BlastOut2\u2212>f55;"]},{"entry":[{},"#define BlastOutRec BlastOut2"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Computed Columns"]},{"entry":[{},"var13 ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(*(int32**)(((vlen_t*)(vlen_t*)(GetVarFieldPtr((record_t*)BlastOutRec,19,184)))+1)) ?"},{"entry":"(*(*(int32**)(((vlen_t*)(vlen_t*)(GetVarFieldPtr((record_t*)BlastOutRec,19,184)))+1)))\u2212"},{"entry":"sizeof(int32) : 0;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ For ReturnNode:"]},{"entry":[{},"TMemblockInfo *block7 = recStore7\u2212>m_lastBlock;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"VERIFY_FSPACE(Return7,TReturn7,tReturn7,block7,2284,node7,returnNewBlock);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"block7\u2212>m_numRecords++;"]},{"entry":[{},"tReturn7\u2212>m_numRecords++;"]},{"entry":[{},"\/\/ materialize record into *Return7"]},{"entry":[{},"Return7\u2212>size = 56;"]},{"entry":[{},"char *Return7Pos = (char *) Return7 + 56;"]},{"entry":[{},"Return7\u2212>nulls[1] = 0;"]},{"entry":[{},"Return7\u2212>nulls[0] = 0;"]},{"entry":[{},"Return7\u2212>f4 = BlastOutRec\u2212>f28"]},{"entry":[{},"Return7\u2212>f5 = BlastOutRec\u2212>f29"]},{"entry":[{},"Return7\u2212>f6 = BlastOutRec\u2212>f30"]},{"entry":[{},"Return7\u2212>f2 = BlastOutRec\u2212>f22"]},{"entry":[{},"Return7\u2212>f3 = BlastOutRec\u2212>f27"]},{"entry":[{},"Return7\u2212>f7 = BlastOutRec\u2212>f31"]},{"entry":[{},"Return7\u2212>f8 = BlastOutRec\u2212>f32"]},{"entry":[{},"Return7\u2212>f9 = BlastOutRec\u2212>f33"]},{"entry":[{},"Return7\u2212>f10 = BlastOutRec\u2212>f34;"]},{"entry":[{},"uint16 lenScan0_p14;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Return7\u2212>f14 = var13;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"uint16 lenScan0_p0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void *Scan0_p0 = GetVarFieldPtr((record_t*)Scan0,1,4);"]},{"entry":[{},"\/\/ Copy from VarChar to VarChar"]},{"entry":[{},"lenScan0_p0 = *((vlen_t*)(Scan0_p0));"]},{"entry":[{},"BytewiseMemcpy(Return7\u2212>f0,Scan0_p0,lenScan0_p0);"]},{"entry":[{},"*((vlen_t*)Return7\u2212>f0) = lenScan0_p0 ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return7Pos = ((char *)(Return7\u2212>f0)) + ALIGN_VARLENS(lenScan0_p0);"]},{"entry":[{},"uint16 lenScan0_p1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void *Scan0_p1 = Temp2\u2212>f0;"]},{"entry":[{},"\/\/ Copy from VarChar to VarChar"]},{"entry":[{},"lenScan0_p1 = *((vlen_t*)(Scan0_p1));"]},{"entry":[{},"BytewiseMemcpy(Return7Pos,Scan0_p1,lenScan0_p1);"]},{"entry":[{},"*((vlen_t*)Return7Pos) = lenScan0_p1 ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return7Pos += ALIGN_VARLENS(lenScan0_p1);"]},{"entry":[{},"uint16 lenScan0_p11;"]},{"entry":[{},"void *Scan0_p11 = GetVarFieldPtr((record_t*)BlastOutRec,17,184);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"sliceAndDiceBlob(Scan0_p11,(record_t**)&Return7,&Return7Pos,tReturn7,0,&block7,node7,returnNewBlockFunc,0);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lenScan0_p11 = 0;"]},{"entry":[{},"if ( lenScan0_p11 )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Return7Pos += ALIGN_VARLENS(lenScan0_p11);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint16 lenScan0_p12;"]},{"entry":[{},"void *Scan0_p12 = GetVarFieldPtr((record_t*)BlastOutRec,18,184);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"sliceAndDiceBlob(Scan0_p12,(record_t**)&Return7,&Return7Pos,tReturn7,0,&block7,node7,returnNewBlockFunc,0);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lenScan0_p12 = 0;"]},{"entry":[{},"if ( lenScan0_p12 )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Return7Pos += ALIGN_VARLENS(lenScan0_p12);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint16 lenScan0_p13;"]},{"entry":[{},"void *Scan0_p13 = GetVarFieldPtr((record_t*)BlastOutRec,19,184);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"sliceAndDiceBlob(Scan0_p13,(record_t**)&Return7,&Return7Pos,tReturn7,0,&block7,node7,returnNewBlockFunc,0);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lenScan0_p13 = 0;"]},{"entry":[{},"if ( lenScan0_p13 )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Return7Pos += ALIGN_VARLENS(lenScan0_p13);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Return7\u2212>size = ALIGN_RECORDS((uint8 *)Return7Pos \u2212"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(uint8*)Return7 \u2212 0);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ lock record in"]},{"entry":[{},"UPDATE_WRITE_ADDR(block7,Return7\u2212>size);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"endLoop_Scan0:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ( lastCall )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"deleteTable((TDropTableNode*)plan\u2212>m_nodeArray[4]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ( lastCall )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"deleteTable((TDropTableNode*)plan\u2212>m_nodeArray[5]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ( lastCall )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"deleteTable((TDropTableNode*)plan\u2212>m_nodeArray[6]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"336pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (lastCall) node7\u2212>returnNewBlock(lastCall);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Given the differences between the Blast join and other relational joins, the disk-based version of the Blast join is a logical extension to the memory version.","The join becomes \u201cdisk-based\u201d when the inner table does not fit in memory. As described above, the inner table can be either the needles or the haystack in the PIM. In the PIM, the size of the inner table is detected before the detailed execution plan is assembled and thus the plan itself is different for disk-based joins. Other designs may use a single algorithm that assumes disk-based joining, but the tradeoff for the simplicitly is the attendant performance cost of more subroutine calls and indirection.","For disk-based Blast joins in the PIM, the haystack is the inner table, the programs loops are set up such that a \u201cconvenient\u201d number of needle contexts are kept in memory at any given time, where convenient is a function of available memory. This differs from the memory based join where a single needle is compared to each of the haystack records before proceeding to the next needle record.","For each of these needle context groups, the databases reads all of the haystack records from the disk and performs the join against all of the needle records in the context group. It then moves on to the next needle-context group, repeating the reading of the haystack records, and so on. With this algorithm, the number of times the inner table needs to be read from the disk is defined by the formula \u201cnumberOfPasses=numberOflnnerGroups\/sizeOfEachInnerGroup\u201d.","The needle records can instead be the inner table, but this would require that the per-needle Blast state be written to the disk each time after the needle (or group of needles) was processed.","Detailed Implementation of the Interface to the Blast Algorithm","As described in the previous section, the generated code calls the blastAway( ) function for each needle\/haystack pair. The blastAway( ) function is principally an interface layer to the underlying sequence analysis algorithm (NCBI Blast). In other words, the blastAway( ) function calls the NCBI library functions. All of this is performed within the SPU as ordinary subroutine calls.","The blastAway( ) function (with the \u201cneedle-outer\u201d looping convention shown) creates a new \u201cneedle-context\u201d object each time the outer looper sequences to the next needle. This is detected by blastAways( )'s second argument being zero (0). The needle-context object is used for all subsequent compares and is destroyed after processing the last haystack record.","Note that with the NCBI Blast, the tBlastOut2 table only loaded on the last haystack record for a given needle record. This is because certain values in the return set can only be computed after all of the haystack values have been processed. In a join where the fields to be returned don't include these \u201cfull-set-required\u201d fields, the blastAway( ) function loads the tBlastOut2 table during each haystack processing point.","In this full-set-required case, the outer record pointer (Temp2 in the example code) cannot be used as originally set in the outer looper. To do so would have all of the subsequent query operations use the fields from only the last out record, rather than the outer record corresponding to the HSP. Therefore, the HSP record (BlastOut2) includes an outer-record identifier\u2014in this case a simple pointer in field \u201cBlastOut2->f55\u201d that points to the original outer record. In the disk-based blast join, this is a cache-area identifier that can be translated into a pointer to a copy of the outer record (or relavent subfields thereof), or the means to obtain the outer record (or subfields) off the disk.","Since multiple threads can be concurrently executing different Blast joins, all query state information is held in thread-safe storage associated with each thread.","Return Set Psuedo-Fields in PIM","To ease transition for users from \u201cstandalone\u201d Blast programs to SQL-Blast, the names of the return fields from the Blast join are similar to the \u201cblastall\u201d program with the \u201c-m\u201d command line option, which produces XML output.","In the XML style, the returned data is somewhat hierarchical, where the highest level of the hierarchy describes the program attributes, like \u201cname\u201d, \u201cversion\u201d and so on. At the next level, there is the per-query sequence iteration. Next comes the query-subject \u201chit\u201d information and finally, at the lowest level at the HSPs (high scoring pairs). In the invention, the relevant values from each level are all part of result record's psuedo-fields. Thus, all result records contain the same value in their \u201cblast_program\u201d psuedo-field. Likewise, all of the \u2018hit\u201d information is the same for a related set of HSPs.","The following psuedo-fields (shown with sample values) are enabled:",{"@attributes":{"id":"p-0167","num":"0299"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1","tabstyle":"monospace"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["blast_program","| blastn",{}]},{"entry":{}},{"entry":["blast_version","| blastn\u20032.2.6\u2003[Apr-09-2003]"]},{"entry":{}},{"entry":["blast_reference","| ~Reference:\u2003Altschul,\u2003Stephen\u2003F.,\u2003.\u2003.\u2003."]},{"entry":{}},{"entry":["blast_query_len","| 36"]},{"entry":{}},{"entry":["hit_num","| 1"]},{"entry":{}},{"entry":["hit_len","| 36"]},{"entry":{}},{"entry":["hsp_num","| 1"]},{"entry":{}},{"entry":["hsp_bit_score","| 71.857743970718"]},{"entry":{}},{"entry":["hsp_score","| 36"]},{"entry":{}},{"entry":["hsp_evalue","| 4.1295258930225e-19"]},{"entry":{}},{"entry":["hsp_query_from","| 1"]},{"entry":{}},{"entry":["hsp_query_to","| 36"]},{"entry":{}},{"entry":["hsp_hit_from","| 1"]},{"entry":{}},{"entry":["hsp_hit_to","| 36"]},{"entry":{}},{"entry":["hsp_query_frame","| 1"]},{"entry":{}},{"entry":["hsp_hit_frame","| 1"]},{"entry":{}},{"entry":["hsp_identity","| 36"]},{"entry":{}},{"entry":["hsp_positive","| 36"]},{"entry":{}},{"entry":["hsp_gaps","| 0"]},{"entry":{}},{"entry":["hsp_align_len","| 36"]},{"entry":{}},{"entry":["hsp_density","| 0"]},{"entry":{}},{"entry":["hsp_qseq","| ACGTAACCGGTTAAACCCGGGTTTAACCGGTTACGT"]},{"entry":{}},{"entry":["hsp_hseq","| ACGTAACCGGTTAAACCCGGGTTTAACCGGTTACGT"]},{"entry":{}},{"entry":["hsp_midline","| ||||||||||||||||||||||||||||||||||||"]},{"entry":{}},{"entry":["parameters_matrix","| tbd"]},{"entry":{}},{"entry":["parameters_expect","| tbd"]},{"entry":{}},{"entry":["parameters_include","| tbd"]},{"entry":{}},{"entry":["parameters_sc_match","| tbd"]},{"entry":{}},{"entry":["parameters_sc_mismatch","| tbd"]},{"entry":{}},{"entry":["parameters_gap_open","| tbd"]},{"entry":{}},{"entry":["parameters_gap_extend","| tbd"]},{"entry":{}},{"entry":["parameters_filter","| tbd"]},{"entry":{}},{"entry":["parameters_pattern","| tbd"]},{"entry":{}},{"entry":["parameters_entrez_query","| tbd"]},{"entry":{}},{"entry":["hsp_pattern_from","| tbd"]},{"entry":{}},{"entry":["hsp_pattern_to","| tbd"]},{"entry":{}},{"entry":["statistics_db_num","| tbd"]},{"entry":{}},{"entry":["statistics_db_len","| tbd"]},{"entry":{}},{"entry":["statistics_hsp_len","| tbd"]},{"entry":{}},{"entry":["statistics_eff_space","| tbd"]},{"entry":{}},{"entry":["statistics_kappa","| tbd"]},{"entry":{}},{"entry":["statistics_lambda","| tbd"]},{"entry":{}},{"entry":["statistics_entropy","| tbd"]}]}}}}},"The following exist as part of XML, but are not be directly supported by in the PIM because (A) the information is \u2018NCBI formatdb\u2019 specific and is otherwise present in the information fields of PIM records or (B) they are associated with \u201cmegablast\u201d iteration numbers whereas PIM iterations are denoted\/documented via the information fields of your records.",{"@attributes":{"id":"p-0169","num":"0301"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"blast_db"]},{"entry":[{},"blast_query_id"]},{"entry":[{},"blast_query_def"]},{"entry":[{},"blast_query_seq"]},{"entry":[{},"iteration_iter_num"]},{"entry":[{},"iteration_query_id"]},{"entry":[{},"iteration_query_def"]},{"entry":[{},"iteration_query_len"]},{"entry":[{},"iteration_message"]},{"entry":[{},"hit_id"]},{"entry":[{},"hit_def"]},{"entry":[{},"hit_accession"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The PIM datatypes of the supported psuedo-fields are as follows:",{"@attributes":{"id":"p-0171","num":"0303"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"blast_program","varchar (20)"]},{"entry":[{},"blast_version","varchar (100)"]},{"entry":[{},"blast_ reference","varchar (500)"]},{"entry":[{},"blast_query_len","int4"]},{"entry":[{},"parameters_ matrix","varchar (100)"]},{"entry":[{},"parameters_ expect","float8"]},{"entry":[{},"parameters_ include","float8"]},{"entry":[{},"parameters_sc_match","int4"]},{"entry":[{},"parameters_sc_mismatch","int4"]},{"entry":[{},"parameters_gap_open","int4"]},{"entry":[{},"parameters_gap_extend","int4"]},{"entry":[{},"parameters_ filter","text"]},{"entry":[{},"parameters_pattern","text"]},{"entry":[{},"parameters_entrez_query","text"]},{"entry":[{},"hit_num","int4"]},{"entry":[{},"hit_len","int4"]},{"entry":[{},"hsp_num","int4"]},{"entry":[{},"hsp_bit_score","float8"]},{"entry":[{},"hsp_score","float8"]},{"entry":[{},"hsp_evalue","float8"]},{"entry":[{},"hsp_query_from","int4"]},{"entry":[{},"hsp_query_to","int4"]},{"entry":[{},"hsp_hit_from","int4"]},{"entry":[{},"hsp_hit_to","int4"]},{"entry":[{},"hsp_pattern_from","int4"]},{"entry":[{},"hsp_pattern_to","int4"]},{"entry":[{},"hsp_query_frame","int4"]},{"entry":[{},"hsp_hit_frame","int4"]},{"entry":[{},"hsp_identity","int4"]},{"entry":[{},"hsp_positive","int4"]},{"entry":[{},"hsp_gaps","int4"]},{"entry":[{},"hsp_align_len","int4"]},{"entry":[{},"hsp_density","int4"]},{"entry":[{},"hsp_qseq","text"]},{"entry":[{},"hsp_hseq","text"]},{"entry":[{},"hsp_midline","text"]},{"entry":[{},"statistics_db_num","int4"]},{"entry":[{},"statistics_db_len","int4"]},{"entry":[{},"statistics_hsp_len","int4"]},{"entry":[{},"statistics_eff_space","float8"]},{"entry":[{},"statistics_kappa","float8"]},{"entry":[{},"statistics_lambda","float8"]},{"entry":[{},"statistics_entropy","float8"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The logical hierarchy of the PIM file system is field->record->block. In the PIM, max field is 32K, the max record size is 64K. In the PIM, we currently use a blocksize of 128 Kb for all tables, although the design allows this to be per-table.","This section of this document freely interchanges the words BLOB, CLOB and the sub-types of \u201ctext\u201d, \u201csequence\u201d, \u201cprotein\u201d, \u201cDNA\u201d, \u201camino acids\u201d, and \u201cnucleotides\u201d. All are stored in the same manner. The only difference is that BLOBs do not normally have any database functions that operate on them (except perhaps for \u201clength\u201d and conversion to other types). The terms \u201cCLOB\u201d (and \u201ctext\u201d in the PIM) describe character sequences that can be operated upon by standard database text operators, like string concatenation. Note, though, that within the BLOB\/CLOB content area described below, the \u201cprotein\u201d and \u201cnucleotide\u201d data types in the PIM include additional specific header and trailer information, as needed for processing by the Blast algorithm with minimal data conversions.","In implementations other than the current PIM, the sequence CLOBs can be stored using a separate file system on the disk that would hold the CLOB content. A CLOB record field would just be a pointer to the data in the CLOB content partition. This model assumes that CLOBs do not actively participate in the scan, most notably the \u201cwhere\u201d clause. It likewise assumes that the return set isn't extracted from the CLOB.","The basic scheme in the PIM is 64 KB is the maximum physical record size, but that CLOBs can be represented as part of a logical record that spans multiple physical records. In the following description, the term \u201crecord\u201d is used to mean physical record. A 100 Kb CLOB will begin in the \u201cinitial\u201d record after the \u201cnormal\u201d fixed length and varchar fields. It will continue across subsequent \u201cfollower\u201d (also called \u201cextension\u201d) records.","If there is a null-bits vector (not shown) for this logical record, all of the null-bits are presented in the initial record only. No null-bits are present in any of the extension records.","Referring now to , all CLOB-containing records, both initial and extension, just as varchar-containing records, shall begin with a two-byte size word. On disk, any optional control fields such as TxCreator\/TxDeleter\/RowId header precede this size word. Such control fields may be useful for controlling visibility in a multi-version database scheme (TxCreator\/TxDeleter), or for establishing object identity (RowId), or for other database management purposes that are not directly related to this invention.","As with varchar fields, the first two bytes of the CLOB field define the size, but only for the portion of the CLOB that is present in the containing record.","The first four bytes of the content area contain the total CLOB size. If the CLOB fits in the balance of the record, the size words will be the same, excluding their own sizes.","For records containing CLOBs that require extension records, the extension records, as described above continue to begin with a size word and optional header (for optional control fields described above), but the first field is CLOB continuation material, again including a two-byte size word that describes how much of this continuation material is present in this extension record. All of the record headers in the extension records have exactly the same content (including rowid) as the initial record. Records and extension records are allowed to contain multiple CLOB fields. In this circumstance, the subsequent CLOB fields begin where the first CLOB field ends, each with their own contained initial-4-byte size and segmented 2-byte size words.","Part of the purpose of this is to maintain consistency between the format of logical records containing CLOBs spanning extension records, and the format of records with no associated extension records. Using the approach described, each record (both initial and extension) meets common format requirements, but a table can now contain records with non-homogenous number of fields.","During query processing, the CLOB, if projected-in, shall appear in memory in a fully contiguous manner. The record header material will never appear for the extension records\u2014if the query projects optional control fields such as the rowid or transaction ids, they only appear for the lead record.","CLOBS are plumbed thru the ODBC connection to continue to provide a single, uniform interface into the PIM.","For users where a high percentage of their queries do not require the CLOB content in the \u2018where\u2019 clause, the PIM will automatically create a projected materialized view that contains the non-CLOB fields. The query planner\/optimizer will be able to choose to scan the thin table and separately fetch-and-append the CLOBs.","The CLOBs can also be stored in a separate table (vertical partitioning) where the base table has pointers into the CLOB table and the user's query is automatically converted to the appropriate join. The system can make this storage determination based on explicit user preferences or by automatically changing the storage scheme based on previous query history.","While this invention has been particularly shown and described with references to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
