---
title: Simplified device drivers for hardware devices of a computer system
abstract: A computer system uses simplified device drivers for operating hardware devices. A simplified device driver for a hardware device of a given device type, such as a flatbed scanner, works with a system-supplied common driver for that given device type. The common driver and the simplified driver together function like a regular device driver. The simplified device driver implements a small number of entry point functions corresponding to a pre-selected set of operation commands “generic” to hardware devices of that given device type. When an application makes a request for an operation by the device, the request is passed through a device driver interface (DDI) to the common driver. The common driver then calls the entry point functions in the simplified device driver to carry out the requested operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07673303&OS=07673303&RS=07673303
owner: Microsoft Corporation
number: 07673303
owner_city: Redmond
owner_country: US
publication_date: 20060301
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation of and priority is claimed to application Ser. No. 09\/809,237, filed Mar. 15, 2001, now U.S. Pat. No. 7,047,534 titled \u201cSIMPLIFIED DEVICE DRIVERS FOR HARDWARE DEVICES OF A COMPUTER SYSTEM\u201d and issued to Sadovsky, which claims priority from U.S. Provisional Patent Application Ser. No. 60\/190,457, filed Mar. 17, 2000. This United States patent is commonly assigned herewith and is hereby incorporated herein by reference for all that it discloses.","This invention relates generally to computer operating systems, and more particularly to software components for communicating with and controlling the operation of a computer hardware device, such as a scanner.","A computer system employs hardware devices for various functions, such as data input and output, printing, display, etc. Each hardware device in the computer system is typically operated through its associated device driver, which is typically provided by the vendor of the hardware device and loaded as part of the operating system. The device driver allows the operating system of the computer and applications running on the computer to communicate with the device and control its operations. The device driver is device-specific in that it is written to handle the specific behavior of the device. On the other hand, the device driver also has to be written according to specifications and requirements of the operating system with which the driver is to be used.","Although the quality of the device driver for a hardware device is critical to the proper operation of the device, many hardware vendors find it difficult to put in the significant time and resources needed to adequately develop a device driver. As a result, device drivers provided by hardware vendors are often of unsatisfactory quality and require extensive fixing before they can be used with the operating system. This problem is especially significant for models with low profit margins. For example, flatbed color scanners are commonly used for capturing color images for incorporation in presentations and communications. Some low-end models of flatbed scanners have rather low retail prices, which limit the resources their vendors could reasonably spend on writing device drivers for them.","The difficulty in obtaining well-developed device drivers is exacerbated by the need to include many device drivers with an operating system. One of the goals of modern operating systems is to provide an \u201cout-of-the-box\u201d experience, where an end user can simply connect a device to her computer and the device will work without the need to install any extra software. To provide such an experience, an operating system typically includes many device drivers from different hardware vendors. Due to the large number of device drivers involved, the time and resources required to test and fix the drivers to ensure their proper operations can become unacceptably high. Accordingly, there is a need for a new approach in developing device drivers that makes it significantly easier for hardware vendors to develop high-quality device drivers.","In view of the foregoing, the present invention provides a computer system that allows the use of simplified device drivers for operating hardware devices. A simplified device driver for a hardware device of a given type, such as a flatbed scanner, works with a common driver provided for that given type, and together they function like a regular device driver. The simplified device driver implements entry point functions for a small set of pre-selected operation commands \u201cgeneric\u201d to different device models and brands of that given device type. When an application makes a request for an operation by the device, the request is passed through a device driver interface (DDI) to the common driver. The common driver then calls the entry point functions in the simplified device driver to control the device to carry out the requested operation. Because a simplified device driver only has to implement a small number of entry point functions for generic device operation commands, it is significantly less complicated than a regular device driver that has to handle various driver interface functions required by the operating system. As a result, it is much easier for a hardware vendor to develop a high-quality simplified device driver.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments, which proceeds with reference to the accompanying figures.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk , a removable magnetic disk , and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories, read only memories, and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more applications programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and a pointing device . Other input devices may include a microphone, joystick, game pad, or the like. The input devices may further include image-capturing devices, such as scanners and digital cameras, as sources of color image data. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices, not shown, such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the person computer  typically includes a modem  or other means for establishing communications over the WAN . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.","Referring now to , the present invention is directed to a system architecture that enables the use of a \u201csimplified\u201d device driver  for controlling the operation of a hardware device . The simplified device driver is significantly easier to develop and to debug than regular device drivers. As a result, hardware vendors are likely to be able to develop high-quality simplified device drivers that do not require extensive fixing. As will be described in greater detail below, the simplification of the device drivers in accordance with the invention is achieved by using a \u201ccommon\u201d driver  for a given type of hardware devices, such as flatbed scanners, that works together with \u201csimplified\u201d device drivers for different devices of that given type. The common behavior between the different models of devices  of the given type is abstracted into the common driver , which preferably is system-supplied. Specifically, the simplified device drivers are required to implement functions responsive to a small set of pre-selected simple operation commands from the common driver that are \u201cgeneric\u201d to the given type of devices. Using the pre-selected set of commands, the common driver can operate devices of that type through their respective simplified drivers to provide their functionality. For example, the set of commands may include simple input\/output (I\/O) operations such as \u201cSET\u201d and \u201cGET\u201d operations that are generic in use, but the specific operations performed by the simplified driver to carry out the commands depend on the target device. The common driver is not required to have knowledge of the specifics of the simplified driver.","In contrast to the common driver, the simplified device driver  for a particular device  implements any needed device behavior specific to the device and is expected to be provided by the vendor of that device. As described above, the common driver can send a finite set of commands to the simplified device driver of a target device to accomplish tasks. The simplified driver can implement any method to translate the generic commands from the common driver into device specific operations. The common driver is not concerned with the details of such device specific operations and preferably only has to be informed of the success\/failure status of these commands.","By way of example, in an embodiment where the devices are scanners, the common driver may send a command to set the X resolution (e.g., \u201cCMD_SET_X_RESOLUTION\u201d) to the simplified driver of a scanner with the intended value of the X resolution. The simplified driver interprets the command as an intention to set the X resolution, and issues the correct sequence of commands to the associated scanner with the specified x resolution value. The simplified driver then returns a response to the common driver indicating whether the setting operation is successful.","In the following description, the invention will be described in the context of an embodiment based on the Windows Image Acquisition (WIA) architecture, which is part of the Windows operating system of Microsoft Corporation. Moreover, the invention will be described using flatbed scanners as one example of the different types of hardware devices for which simplified device drivers can be advantageously used. It will be appreciated, however, that the approach of employing simplified device-specific drivers in accordance with the invention can be effectively used in other types of operating systems. Moreover, the invention is not limited only to flatbed scanners but can be advantageously applied to other types of computer peripheral devices, where a common set of generic operations can be defined for different models of the devices.","Referring now to , the operating system of the shown embodiment employs an image acquisition architecture that is designed to enable an image-processing application  to effectively communicate with and control the operations of various image-capturing devices, such as scanners and digital cameras. To illustrate the concept of using simplified device drivers in accordance with the invention, a simplified device driver  for a flatbed scanner  is juxtaposed with a regular device driver  for another image-capturing device , and the image acquisition architecture is described in connection with the regular device driver to allow an appreciation of the advantages of using the simplified device driver.","In the embodiment of , the image-capturing device  functions as a source of color image data, which can be transmitted to an image-processing application  for various types of processing and editing operations. The processed or edited color image may then be displayed on a color display device (such as a computer monitor ) for viewing, printed on a printer , or included in a document for presentation or communication purposes.","The image acquisition architecture of the operating system  includes a system-supplied image acquisition service , which servers as an intermediate between the application  and the device drivers for various image-capturing devices, such as the image-capturing device  (which may be a scanner, a digital camera, etc.) and the flatbed scanner . The image-processing application  communicates with the image acquisition service  through an image acquisition Application Programming Interface (API)  provided by the operating system . When the application  makes a request to use one of the image capturing devices, the image acquisition service  directs the request to the device driver for that image-capturing device. Communicating with the device driver  through the image acquisition service , the image processing application  can monitor, communicate with, and receive captured color image data from the image-capturing device .","The device driver  is typically supplied by the vendor of the associated image-capturing device . In the illustrated embodiment, the device driver  is a user-mode component that directs image acquisition property changes and commands to its associated image-capturing device . It communicates through a device-specific user-mode interface  with system-supplied or vendor-supplied kernel-mode I\/O device drivers , which drives the image-capturing device  through a driver such as a USB driver. The kernel-mode image drivers , which are bus-specific, package data for delivery to the image-capturing device  and transfer data from the image-capturing device to the device driver . The communications between the kernel-mode image driver  and the image-capturing device  may be based on one of different types of buses. For instance, in one implementation, kernel-mode image drivers for the USB, SCSI, and IEEE 1394 buses are provided with the operating system .","In the opposite direction of the command\/data flow, the device driver  communicates with the image acquisition service  through a Device Driver Interface (DDI) . The image acquisition DDI  allows the image acquisition service  to communicate with and control the device driver . Requests made by the application  concerning the image-capturing device  are directed to the image acquisition service , which in turn directs the requests to the appropriate device driver  through the image acquisition Device Driver Interface (DDI) . To work with the image acquisition DDI , the device driver  is required to implement various pre-defined interface methods for communications with the Image Acquisition Service . The interface methods perform device-related tasks such as: creating a tree-like data structure (called a \u201cdevice tree\u201d) with items representing the device and its images and folders; reading and writing properties of the items in the device tree; transferring captured image data from the image-capturing device; enumerating device image formats supported by the device; deleting an item in the device tree; sending operation commands to the device; enumerating device capabilities; and obtaining device error message strings.","It can be seen from this example that to implement the required DDI interface methods in a regular device driver for an image-capturing device, a hardware vendor has to have a good understanding of the image-acquisition architecture of the operation system and to follow carefully the specifications of the methods and their parameters. Due to the relatively large number and complexity of the required interface methods, the proper development of a regular device driver  for an image-capturing device can require significant time and resources. The hardware vendor of the device  may find it difficult to allocate the needed resources for driver development, especially when the device is a low-end model. This problem, of course, is not peculiar to image-capturing devices but is a general one for vendor-provided device drivers.","The use of simplified device drivers in accordance with the invention effectively solves this problem. Specifically, rather than implementing all the device driver interface methods required of a regular device driver (e.g., the driver ), a simplified device driver for a device of a given type only has to implement entry point functions pertaining to a very small set of operation commands generic to devices of the given type. Those entry point functions allow the simplified device driver to be accessed by a common driver for the given device type. The common driver, preferably system-supplied, handles the device driver interface methods as required by the system architecture, and communicates with the simplified device driver through the entry point functions implemented therein. In this way, the system-supplied common driver and the vendor-supplied simplified device driver together function like a regular device driver (such as the device driver ). Since the simplified device driver does not have to implement the complicated system interface methods, it is significantly easier for the hardware vendor to develop. The hardware vendor only has to focus on device-specific behavior, which it knows best, in writing the simplified device driver to perform operations for carrying out the small set of commands from the common driver.","For instance, in the illustrated embodiment, the image acquisition architecture requires a regular device driver  to handle the management and validation of the settings of image acquisition properties according to rules defined as part of the architecture. With the combination of a common driver and one or more simplified drivers, the common driver controls the various aspects of the property management and validation. Thus, a simplified driver does not have to deal with property management and validation, and only has to handle property setting negotiations and data acquisition operations.","In one embodiment, the installation of a simplified device driver requires additional entries in the installation file (.INF). First, an entry is included in the device data section of the .INF file to indicate that the device driver is a \u201csimplified\u201d one rather than a regular driver. The value of this entry is set to be the name of the file (in this embodiment a .DLL file) that implements the simplified device driver. Moreover, in an \u201cAdd to Register\u201d section where a regular device driver would normally be referenced, the file that implements the common driver is listed as the driver for the device.","In the embodiment of the image-acquisition system shown in , the common driver for flatbed scanners is referred to as the \u201cFlatbed Driver\u201d . The Flatbed Driver  may be used together with a plurality of simplified device drivers, referred to as \u201csimplified scanner drivers,\u201d for flatbed scanners that may be of different models from different hardware vendors. Each of the simplified scanner drivers is required to implement entry point functions for corresponding operation commands generic to those flatbed scanners. Specifically, there are only four entry point functions that the simplified scanner driver  has to implement: MicroEntry, GetScanInfo, SetPixelWindow, and Scan. The purposes of these functions and their parameters are described in greater detail below.","When the application  makes a request concerning the flatbed scanner , the request is passed by the Image Acquisition Service  to the Flatbed Driver . The Flatbed Driver  handles the request by sending commands, i.e., calling the entry point functions in the simplified scanner driver  for that scanner , to perform the requested operation. Also, a data structure  called \u201cSCANINFO\u201d is passed to the simplified scanner driver  to communicate scanning parameters such as scan window and resolutions. This data structure and other data structures used by the simplified scanner driver  will be described in the \u201cStructure Definitions\u201d section below. The Flatbed Driver reads values form the SCANINFO structure, but does not write them. It is the simplified scanner's responsibility to set the data members of the SCANINFO structure. The simplified scanner driver relies on the values stored in the SCANINFO for a scan and does not separately store any parameters for that scan. This allows the simplified driver to support access to the scanner by multiple applications. For instance, if two applications are setting up scans on the same scanner at the same time, there will be only one copy of the simplified driver running. In this situation, the simplified driver will be called with one of two different SCANINFO structures depending on which application is trying to access the scanner.","I. Required Entry Point Functions","A. The MicroEntry Function","The MicroEntry function is defined as:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT MicroEntry("]},{"entry":[{},"\u2003\u2003LONG lCommand"]},{"entry":[{},"\u2003\u2003PVAL pValue"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"B. The GetScanInfo Function","The GetScanInfo function is defined as",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT GetScanInfo("]},{"entry":[{},"\u2003\u2003PSCANINFO pScanInfo"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"C. The SetPixelWindow Function","The SetPixelWindow function is defined as:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT SetPixelWindow"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003PSCANINFO","pScanInfo,"]},{"entry":[{},"\u2003\u2003LONG","x,"]},{"entry":[{},"\u2003\u2003LONG","y,"]},{"entry":[{},"\u2003\u2003LONG","xExtent,"]},{"entry":[{},"\u2003\u2003LONG","yExtent"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"D. The Scan Function","The Scan function is defined as:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT Scan",{}]},{"entry":[{},"\u2003\u2003PSCANINFO","pScanInfo,"]},{"entry":[{},"\u2003\u2003LONG","lPhase,"]},{"entry":[{},"\u2003\u2003PBYTE","pBuffer,"]},{"entry":[{},"\u2003\u2003LONG","lLength"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The parameter lPhase indicates the requested scan phase. Valid values of this parameter include: SCAN_FIRST, SCAN_NEXT, and SCAN_FINISH. SCAN_FIRST is the first phase sent to the simplified driver, which should initialize and prepare the scanner to scan as well as initiate the scan. The scanned data should be returned from this call. To that end, the parameter pBuffer points the buffer memory space to be filed with the scanned data. This buffer is allocated by the Flatbed Driver, and its length is specified by the parameter lLength, which is the requested amount of data to be scanned. The value of the parameter pReceived indicates the amount of data actually scanned into the buffer. This value should not exceed the value of lLength. The phase SCAN_NEXT is repeatedly called during the data transfer. The phase SCAN_FINISH will be called to terminate the scanning process. It is called even if the user cancels the scan. In response, the simplified driver should stop the transfer of scanned data and reset the scanner to a \u201cpower-on\u201d state (ready for another transfer).","II. Required Commands","As described above, commands are passed to the simplified scanner driver in the MicroEntry( ) function. Commands that are required to be supported by the simplified driver are described in this section. It should be appreciated that there may be other possible commands that the simplified scanner driver may support.","A. Parameter Setting Commands\n\n",{"@attributes":{"id":"p-0050","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WIA_DATA_THRESHOLD","(1-bit)"]},{"entry":[{},"WIA_DATA_GRAYSCALE","(8-bit)"]},{"entry":[{},"WIA_DATA_COLOR","(24-bit)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["CMD_SETINTENSITY\u2014This function is called by the Flatbed Driver to set the intensity value for the scan. The desired intensity value is passed in the lVal member of the passed VAL structure. The value \u22121000 should be interpreted as the lowest brightness, 0 as nominal, and 1000 as the device's maximum brightness. This setting is to be sent down by the simplified scanner driver to the flatbed scanner.","CMD_SETCONTRAST\u2014This function is called by the Flatbed Driver to set the contrast value for the scan. The desired contrast value is passed in the lVal member of the passed VAL structure. The value \u22121000 should be interpreted as the lowest contrast, 0 as nominal, and 1000 as the device's maximum contrast. This setting is to be sent down by the simplified scanner driver to the flatbed scanner.","CMD_GETCAPABILITIES\u2014This function is called by the Flatbed Driver to get information on the button events of the flatbed scanner. Three members of the passed VAL structure should be filled in. The value of lVal should be set to the number of buttons. The member pGuid should be set to point to an array of event GUIDs. The member lReserved can optionally be set to a WCHAR* array that contains the button names in the same order as they are in the array pointed to by pGuid (e.g., \u201cScan Button,\u201d \u201cFax Button,\u201d etc.). The arrays can be allocated in response to CMD_INITIALIZE and freed in CMD_UNINITIALIZE."]}},"B. Event Support Commands\n\n","Some of the members of the VAL structure used in the commands are described below;\n\n","C. Automatic Document Feeder Commands","The flatbed scanners using simplified scanner drivers may support limited automatic document feeder (ADF) control. To report that it supports automatic document feeding, a simplified driver may set the \u201cADF\u201d member in the SCANINFO structure to 1. This will cause the Flatbed Driver to add the needed properties for automatic document feeder control.\n\n","The data structures used in the entry point functions and commands of the simplified driver as described above are defined as follows:",{"@attributes":{"id":"p-0056","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#ifndef _WIAMICRO_H"},{"entry":"#define _WIAMICRO_H"},{"entry":"#pragma once"},{"entry":"#include <pshpack8.h>"},{"entry":"#define WIAMICRO_API _declspec(dllexport)"},{"entry":"\/\/ common includes"},{"entry":"#include <SCSISCAN.H>"},{"entry":"\/\/"},{"entry":"\/\/ Private #defines"},{"entry":"#define MAX_IO_HANDLES 16"},{"entry":"#define MAX_RESERVED\u2003\u20034"},{"entry":"#define MAX_ANSI_CHAR 255"},{"entry":"\/\/"},{"entry":"\/\/ Common BUS types"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define BUS_TYPE_SCSI","200"]},{"entry":["#define BUS_TYPE_USB","201"]},{"entry":["#define BUS_TYPE_PARALLEL","202"]},{"entry":["#define BUS_TYPE_FIREWIRE","203"]},{"entry":"\/\/"},{"entry":"\/\/ command list"},{"entry":["#define SCAN_FIRST","\u200210"]},{"entry":["#define SCAN_NEXT","\u200220"]},{"entry":["#define SCAN_FINISHED","\u200230"]},{"entry":["#define SCANMODE_FINALSCAN","\u20030"]},{"entry":["#define SCANMODE_PREVIEWSCAN","\u20031"]},{"entry":["#define CMD_INITIALIZE","100"]},{"entry":["#define CMD_UNINITIALIZE","101"]},{"entry":["#define CMD_SETXRESOLUTION","102"]},{"entry":["#define CMD_SETYRESOLUTION","103"]},{"entry":["#define CMD_SETCONTRAST","104"]},{"entry":["#define CMD_SETINTENSITY","105"]},{"entry":["#define CMD_SETDATATYPE","106"]},{"entry":["#define CMD_SETDITHER","107"]},{"entry":["#define CMD_SETMIRROR","108"]},{"entry":["#define CMD_SETNEGATIVE","109"]},{"entry":["#define CMD_SETTONEMAP","110"]},{"entry":["#define CMD_SETCOLORDITHER","111"]},{"entry":["#define CMD_SETMATRIX","112"]},{"entry":["#define CMD_SETSPEED","113"]},{"entry":["#define CMD_SETFILTER","114"]},{"entry":["#define CMD_LOAD_ADF","115"]},{"entry":["#define CMD_UNLOAD_ADF","116"]},{"entry":["#define CMD_GETADFAVAILABLE","117"]},{"entry":["#define CMD_GETADFOPEN","118"]},{"entry":["#define CMD_GETADFREADY","119"]},{"entry":["#define CMD_GETADFHASPAPER","120"]},{"entry":["#define CMD_GETADFSTATUS","121"]},{"entry":["#define CMD_GETADFUNLOADREADY","122"]},{"entry":["#define CMD_GETTPAAVAILABLE","123"]},{"entry":["#define CMD_GETTPAOPENED","124"]},{"entry":["#define CMD_TPAREADY","125"]},{"entry":["#define CMD_SETLAMP","126"]},{"entry":["#define CMD_SENDSCSICOMMAND","127"]},{"entry":["#define CMD_STI_DEVICERESET","128"]},{"entry":["#define CMD_STI_GETSTATUS","129"]},{"entry":["#define CMD_STI_DIAGNOSTIC","130"]},{"entry":["#define CMD_RESETSCANNER","131"]},{"entry":["#define CMD_GETCAPABILITIES","132"]},{"entry":["#define CMD_GET_INTERRUPT_EVENT","133"]},{"entry":["#define CMD_SETGSDNAME","134"]},{"entry":["#define CMD_SETSCANMODE","135"]},{"entry":["#define CMD_SETSTIDEVICEHKEY","136"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define CMD_GETSUPPORTEDFILEFORMATS","138"]},{"entry":["#define CMD_GETSUPPORTEDMEMORYFORMATS","139"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define SUPPORT_COLOR","0x00000001"]},{"entry":["#define SUPPORT_BW","0x00000002"]},{"entry":["#define SUPPORT_GRAYSCALE","0x00000004"]},{"entry":"\/\/"},{"entry":"\/\/ Error Codes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define MCRO_ERROR_GENERAL_ERROR","0 \/\/ All lVal values are"]},{"entry":[{},"\u2003\u2003initialized to \u20180\u2019"]},{"entry":["#define MCRO_STATUS_OK","1 \/\/ General success"]},{"entry":[{},"\u2003\u2003status return"]},{"entry":["#define MCRO_ERROR_PAPER_JAM","2 \/\/ ADF has a paper Jam"]},{"entry":["#define MCRO_ERROR_PAPER_PROBLEM","3 \/\/ ADF has a paper"]},{"entry":[{},"\u2003\u2003problem"]},{"entry":["#define MCRO_ERROR_PAPER_EMPTY","4 \/\/ ADF has no paper"]},{"entry":["#define MCRO_ERROR_OFFLINE","5 \/\/ ADF or Device is"]},{"entry":[{},"\u2003\u2003offline"]},{"entry":["#define MCRO_ERROR_USER_INTERVENTION","6 \/\/ User needs to"]},{"entry":[{},"\u2003\u2003interact with the"]},{"entry":[{},"\u2003\u2003physical device"]},{"entry":"\/\/"},{"entry":"\/\/ WIA compatible #defines"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define WIA_PACKED_PIXEL","0"]},{"entry":["#define WIA_PLANAR","1"]},{"entry":["#define WIA_ORDER_RGB","0"]},{"entry":["#define WIA_ORDER_BGR","1"]},{"entry":["#define WIA_DATA_THRESHOLD","0"]},{"entry":["#define WIA_DATA_DITHER","1"]},{"entry":["#define WIA_DATA_GRAYSCALE","2"]},{"entry":["#define WIA_DATA_COLOR","3"]},{"entry":["#define WIA_DATA_COLOR_THRESHOLD","4"]},{"entry":["#define WIA_DATA_COLOR_DITHER","5"]},{"entry":"\/\/"},{"entry":"\/\/ structure definitions"},{"entry":"typedef struct _RANGEVALUE {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003LONG lMin;","\/\/ minimum value"]},{"entry":["\u2003\u2003LONG lMax;","\/\/ maximum value"]},{"entry":["\u2003\u2003LONG lStep;","\/\/ increment\/step value"]},{"entry":"} RANGEVALUE, *PRANGEVALUE;"},{"entry":"typedef struct _SCANWINDOW {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003LONG xPos;","\/\/ X position","(left)"]},{"entry":["\u2003\u2003LONG yPos;","\/\/ Y position","(top)"]},{"entry":["\u2003\u2003LONG xExtent;","\/\/ X extent","(right)"]},{"entry":["\u2003\u2003LONG yExtent;","\/\/ Y extent","(bottom)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"} SCANWINDOW, *PSCANWINDOW;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["typedef struct _SCANINFO {",{}]},{"entry":"\u2003\u2003\/\/ Common Scanner specs"},{"entry":["\u2003\u2003LONG ADF;","\/\/ (0 - no support, 1 -"]},{"entry":[{},"\u2003\u2003supported, 2 - supported"]},{"entry":[{},"\u2003\u2003and It can duplex)"]},{"entry":["\u2003\u2003LONG TPA;","\/\/ (0 - no support, 1 -"]},{"entry":[{},"\u2003\u2003supported)"]},{"entry":["\u2003\u2003LONG Endorser;","\/\/ (0 - no endorser, 1 -"]},{"entry":[{},"\u2003\u2003supported)"]},{"entry":["\u2003\u2003LONG OpticalXResolution;","\/\/ (dpi setting of optics)"]},{"entry":["\u2003\u2003LONG OpticalYResolution;","\/\/ (dpi setting of optics)"]},{"entry":["\u2003\u2003LONG BedWidth;","\/\/ (bed width in 1000's of an"]},{"entry":[{},"\u2003\u2003inch)"]},{"entry":["\u2003\u2003LONG BedHeight;","\/\/ (bed height in 1000's of an"]},{"entry":[{},"\u2003\u2003inch)"]},{"entry":["\u2003\u2003RANGEVALUE IntensityRange;","\/\/ (Intensity\/Brightness"]},{"entry":[{},"\u2003\u2003ranges)"]},{"entry":["\u2003\u2003RANGEVALUE ContrastRange;","\/\/ (Contrast ranges)"]},{"entry":["\u2003\u2003LONG SupportedCompressionType;","\/\/ (mask of supported"]},{"entry":[{},"\u2003\u2003compression types. 0 -"]},{"entry":[{},"\u2003\u2003None)"]},{"entry":["\u2003\u2003LONG SupportedDataTypes;","\/\/ (mask of supported types,"]},{"entry":[{},"\u2003\u2003(ie."]},{"entry":[{},"\u2003\u2003SUPPORT_COLOR|SUPPORT_BW . . ."]},{"entry":[{},"\u2003\u2003))"]},{"entry":"\u2003\u2003\/\/ Current Image Info"},{"entry":["\u2003\u2003LONG WidthPixels;","\/\/ (width of image, using"]},{"entry":[{},"\u2003\u2003current scanner settings in"]},{"entry":[{},"\u2003\u2003pixels)"]},{"entry":["\u2003\u2003LONG WidthBytes;","\/\/ (width of image, using"]},{"entry":[{},"\u2003\u2003current scanner settings in"]},{"entry":[{},"\u2003\u2003bytes)"]},{"entry":["\u2003\u2003LONG Lines;","\/\/ (height of image, using"]},{"entry":[{},"\u2003\u2003current scanner settings in"]},{"entry":[{},"\u2003\u2003pixles)"]},{"entry":["\u2003\u2003LONG DataType;","\/\/ (current data type set)"]},{"entry":["\u2003\u2003LONG PixelBits;","\/\/ (current bit depth setting)"]},{"entry":"\u2003\u2003\/\/ Current Scanner settings"},{"entry":["\u2003\u2003LONG Intensity;","\/\/ (current"]},{"entry":[{},"\u2003\u2003Intensity\/Brightness"]},{"entry":[{},"\u2003\u2003setting)"]},{"entry":["\u2003\u2003LONG Contrast;","\/\/ (current contrast setting)"]},{"entry":["\u2003\u2003LONG Xresolution;","\/\/ (current X Resolution)"]},{"entry":["\u2003\u2003LONG Yresolution;","\/\/ (current Y Resolution"]},{"entry":["\u2003\u2003SCANWINDOW Window;","\/\/ (current scanner window"]},{"entry":[{},"\u2003\u2003settings)"]},{"entry":"\u2003\u2003\/\/ Scanner options"},{"entry":"\u2003\u2003LONG DitherPattern;"},{"entry":["\u2003\u2003LONG Negative;","\/\/ (0 - off, 1 - Negative is"]},{"entry":[{},"\u2003\u2003on)"]},{"entry":["\u2003\u2003LONG Mirror;","\/\/ (0 - off, 1 - Mirror is on)"]},{"entry":["\u2003\u2003LONG AutoBack;","\/\/ (0 - off, 1 - AutoBack is"]},{"entry":[{},"\u2003\u2003on)"]},{"entry":["\u2003\u2003LONG ColorDitherPattern;","\/\/ (dither pattern??)"]},{"entry":["\u2003\u2003LONG ToneMap;","\/\/ (tone map ??)"]},{"entry":["\u2003\u2003LONG Compression;","\/\/ (0 - off, 1 - Compression"]},{"entry":[{},"\u2003\u2003is on)"]},{"entry":["\u2003\u2003LONG RawDataFormat;","\/\/ (0 - Packed data, 1 -"]},{"entry":[{},"\u2003\u2003Planar data)"]},{"entry":["\u2003\u2003LONG RawPixelOrder;","\/\/ (0 - RGB, 1 - BGR)"]},{"entry":["\u2003\u2003LONG bNeedDataAlignment;","\/\/ (0 - FALSE, 1 - TRUE)"]},{"entry":["\u2003\u2003LONG DelayBetweenRead;","\/\/ delay between WIA Scan( )"]},{"entry":[{},"\u2003\u2003calls requesting data"]},{"entry":[{},"\u2003\u2003(milliseconds)"]},{"entry":["\u2003\u2003LONG MaxBufferSize;","\/\/ maximum buffer size in"]},{"entry":[{},"\u2003\u2003scanner"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003HANDLE DeviceIOHandles[MAX_IO_HANDLES];","\/\/ Device IO"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003handles needed for device"]},{"entry":[{},"\u2003\u2003communication"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003LONG lReserved[MAX_RESERVED];","\/\/ (silly reserved bits)"]},{"entry":"}SCANINFO, *PSCANINFO;"},{"entry":"typedef struct VAL {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003LONG","\u2003lVal;","\/\/ long value"]},{"entry":["\u2003\u2003\u2003double","\u2003dblVal;","\/\/ float\/double value"]},{"entry":["\u2003\u2003\u2003GUID","\u2002*pGuid;","\/\/ GUID pointer"]},{"entry":["\u2003\u2003\u2003PSCANINFO","\u2003pScanInfo;","\/\/ pointer to the shared"]},{"entry":[{},{},"\u2003\u2003ScanInfo struct"]},{"entry":["\u2003\u2003\u2003HGLOBAL","\u2003handle;","\/\/ handle value"]},{"entry":["\u2003\u2003\u2003WCHAR","**ppButtonNames;","\/\/ pointer to button names"]},{"entry":[{},{},"\u2003\u2003array"]},{"entry":["\u2003\u2003\u2003HANDLE","\u2002*pHandle;","\/\/ pointer to a Handle"]},{"entry":[{},{},"\u2003\u2003value"]},{"entry":["\u2003\u2003\u2003LONG","\u2003lReserved;","\/\/ lone value"]},{"entry":["\u2003\u2003\u2003CHAR","szVal[MAX_ANSI_CHAR];","\/\/ ANSI string"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}VAL, *PVAL;"},{"entry":"\/\/"},{"entry":"\/\/ Micro driver entry points"},{"entry":"WIAMICRO_API HRESULT MicroEntry(LONG lCommand, PVAL pValue);"},{"entry":"WIAMICRO_API HRESULT Scan(PSCANINFO pScanInfo, LONG lPhase,"},{"entry":"PBYTE pBuffer, LONG lLength, LONG *plReceived);"},{"entry":"WIANICRO_API HRESULT SetPixelWindow(PSCANINFO pScanInfo, LONG"},{"entry":"x, LONG y, LONG xExtent, LONG yExtent);"},{"entry":"\/\/"},{"entry":"\/\/ optional debug trace"},{"entry":"VOID Trace(LPCTSTR Format, . . . );"},{"entry":"#include <poppack.h>"},{"entry":"#endif"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As mentioned above, one of the important advantages of using simplified device drivers is that they are very easy for hardware vendors to develop. This is because they only have to implement the very simple entry point functions for interacting with the common driver and to handle device-specific aspects of controlling the device to perform pre-selected basic operations generic to devices of that type. The task of handling the complicated interfacing with the high-level operating system components is taken care of by the system-supplied common device driver.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
