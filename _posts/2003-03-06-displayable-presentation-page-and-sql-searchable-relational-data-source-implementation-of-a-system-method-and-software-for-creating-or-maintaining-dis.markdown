---
title: Displayable presentation page and SQL searchable relational data source implementation of a system, method and software for creating or maintaining distributed transparent persistence of complex data objects and their data relationships
abstract: The invention provides systems, methods and software for creating or maintaining distributed transparent persistence of complex data objects and associated data stores. In one aspect, the invention also relates to an application programming object capable of creating or maintaining distributed transparent persistence of data objects or data object graphs without the necessity of inserting any byte codes or modification of the object graph. Virtually any java object or object praph can be transparently persisted. Further, copies of a data graph or of a portion of the data graph can be automatically reconciled and changes persisted without any persistence coding in the object model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07103600&OS=07103600&RS=07103600
owner: Thought Inc.
number: 07103600
owner_city: San Francisco
owner_country: US
publication_date: 20030306
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DEFINITIONS","SUMMARY OF THE INVENTION","DISCRIPTION THE INVENTION","EXAMPLE 1","EXAMPLE 2","Appendix 1: A JSP Example Using the TomCat Server and a Relational Database and Providing Transparent Persistence using CocoBase Enterprise OR","Displayable Presentation Page (Cityinfo JSP) Example Written in HTML Format With Embedded Java Code","Cityinfo First Object Java Code Example","Cityinfo Second Object Java Code Example"],"p":["The field of the present invention relates generally to computer systems, computer data stores and to methods and software for accessing and utilizing data stores. More particularly, the present invention relates to a system, methods and software for creating or maintaining distributed transparent persistence of complex data objects and associated data stores. In one aspect, the invention also relates to an application programming object capable of creating or maintaining distributed transparent persistence of data objects or data object graphs without the necessity of inserting any byte codes or modification of the object graph. Virtually any java object or object graph can be transparently persisted. Further, copies of a data graph or of a portion of the data graph can be automatically reconciled and changes persisted without any persistence coding in the object model.","Systems for accessing data stores from object oriented languages have been used for many years. A frequent approach to accomplish access of data stores involves writing and embedding custom access code within an object application needing the access. This approach is generally limited to having the custom code access only a single relational table within a relational database or similar construct within any other data store (hereinafter collectively \u201cdata store\u201d). Under the circumstances where a developer has control over the design and creation of a data store from its inception, it is possible to design and store meaningful information in a single table. Such design opportunities are usually rare, however.","Generally, the methods for producing persistence for a data object, complex data object or a data store conflict with the goals of producing pure object application models where the object models do not include persistence objects or persistence byte code. Particular difficulties exist in a distributed environment since an object application model may exist in one or more of a computer's memory, an application data store and an application information storage repository that may be independent of the data store organization or object definitions. Advancements in the art have been made with respect to tools for conveniently mapping objects to systems of tables and maps in order to expedite accessing, changing and updating data stores. See, for example, U.S. Pat. No. 5,857,197 (and its associated programming interfaces (\u201cAPIs\u201d)) describes tools for translating object data to relational data, relational data to object data, and object data to object data to expedite the use of data stores. The BMP and the CMP Installer portions of CocoAdmin tool in the CocoBase\u2122 Enterprise for O\/R Binary Software (Thought, Inc. 657 Mission Street Suite 202, San Francisco, Calif. 94105 http:\/\/www.thoughtinc.com,) provide means for providing persistence in the EJB environment.","Persistence problems arise with the creation, access, changing or deleting of an object application model that utilizes such data stores. The object application model may be distributed over multiple physical computer machine locations or even distributed over multiple Internet website locations that may be independent of the data stores. The object application model may utilize a different set of data objects or different set of definitions for relationships between data objects than that of one or more of its data sources. In most situations, the respective structures of the data sources and of the object applications model simply do not conveniently allow for mapping, accessing or changing of an overall schema of application data objects as well as any associated definitions of relationships between two or more data objects or elements within a data object.","Importantly, relationships may exist between a data object and one or more of the other data objects found in the object application model or in a data object of the data source. A relationship between one data object and another data object or with a data source may be member selected from the group of three relationship types consisting of 1 to 1 (1\u20141), 1 to many (1-M) or many to many (M\u2014M). Complex combinations of these relationships may exist as a data object relationships definition for a given data object. These relationships are described or illustrated in further detail later in this document.","Objects may logically span multiple relational tables or multiple object databases, and may even be distributed over a logical (or hypothetical) computer system involving multiple physically independent computer systems or even multiple website locations. Creating, accessing, maintaining or updating an object application model can require working with multiple translation modules and require tedious and repetitive updating of multiple individual computer systems or multiple data sources in order to do useful work and keep the object application model synchronized. Such approaches are both costly and unwieldy in terms of computing and development resources, particularly with respect to Internet based electronic commerce (eCommerce) object application models.","Data objects of an object application model are often a feature of eCommerce object programming applications, where information is obtained from a data source and the data is defined as a data object (e.g., as a Java class) for use with another computer application. In practice, a data object or model of data objects may exist only in the random access memory of a computer memory system, or may be saved to either a data source or to some other type of retrievable information repository. A programmer or administrator of an object data application cannot easily access or track the overall model or diagram of data objects for an object application model or some of its specific elements. Unfortunately, tools for accessing and persisting data objects and associated data object relationships of a complex data object graph model have not been well implemented in the field of object language programming.","A computer application can execute one or more of the following non-limiting actions with respect to one or more of the members selected from the group consisting of data, a data object, and a data object definition: access data, change data, create data, create a new relationship between one or more data objects by creating or changing at least one data object relationship definition, change or delete a relationship between one or more data objects by changing or deleting at least one data object relationship definition, access a data object relationship definition and use its parameters to access a data source or a data object, and access one or more data object relationship definitions or data objects to create a new data object or data object relationship. Any changes executed by a computer application with respect to one or more of the members selected from the group consisting of data, data object or data object definition may need to be properly persisted (permanently stored) to preserve any changes to one or more of the members selected from the group consisting of data, a data object and a data object definition.","A data object and an associated data object relationship definition may be represented by a complex data object graph (\u201cCDOG\u201d). A CDOG, for the purposes of this document, may be thought of as a computer program data object graph that represents a data object having at least one relationship with at least one other data object or with itself via a circular link. When the data object of a CDOG is implemented in the Java computer program language, the CDOG may be further defined as being a Java Data Object Graph (\u201cJDOG\u201d).","There are needs for software, methods and systems that can easily detect and persist any changes to at least one member selected from the group consisting of a data object, any data associated with the related object, or any associated CDOG definition (i.e., an changes to the data object, data or to a relationship of the data object with another data object). For example, there is a need to be able access a pure object model definition from a repository based O\/R mapping tool (e.g., from a defined repository such as a file, database or streaming source) or from a modeling tool defined repository and provide persistence for the object model without inserting any byte code or additional objects into the object model.","Accordingly, there is a strong need in the art for a computer applications programmer tool designed to assist a programmer or administrator in the actions of providing persistence for data objects or data object graphs when deleting, inactivating or updating a CDOG, wherein the computer applications programmer tool can be configured to automatically reconcile all or a portion of a CDOG and copies thereof on a distributed environment when data objects or relationships are deleted, inactivated or updated for a CDOG. A particularly strong need exists for such a tool having the further ability to be configured to persist, propagate and reflect system wide (in a local or distributed computer system) any such changes to a CDOG instance to all instances of the CDOG and to all instances of associated data, data objects and data object relationships.","The following non-exhaustive list of definitions is used herein to define terms that may otherwise be confusing or can sometimes have multiple meanings. Each occurrence of a defined term in the above text, in the text that follows, or in the claims of this document, is to be given the meaning ascribed to it in the list of definitions below.","\u201cInstance\u201d as referred to in this document in the context of computer software applications is a single occurrence of a software logical element in the memory of a computer system, such as a \u201cclass\u201d, an \u201cobject\u201d, a \u201cdata object\u201d, and the like. This is analogous to the occurrence of a logical memory unit representing a row of data in common practice.","\u201cClass\u201d as referred to in this document in the context of computer software applications is a logic unit in a computer application or a computer software program where the application or program is based upon an objected oriented programming language (e.g., Java). In practice, a class is a logical unit used as a logical template in an object oriented language from which to allocate new instances of objects.","\u201cObject\u201d as used in the context of this document is a general term referring to a logic unit in a computer application or a computer software program where the application or program is based upon an objected oriented programming language (e.g., Java). The term \u201cobject\u201d may ordinarily be used interchangeably with the term \u201cclass\u201d as a template or as an instance depending on the context.","\u201cData object\u201d as referred to in the context of this document represents the concept of the occurrence of an object that holds data within a specific computer application domain and is likely to have its contents stored in a persistent data source of a computer system (e.g., a database server, a binary file, a text file, or even in a combination of two or more of such a persistent data sources of a computer system). A data object may exist as an independent data object without any relationship to any other data object or it may have one or more relationships with itself or with one or more other data objects.","\u201cComplex data object\u201d (or \u201cCDO\u201d) as used in the context of this document refers to the occurrence of a data object that has at least one or more relationships with itself, or at least one or more relationships with one or more other data object(s). In a given instance of a CDO at least one relationship is populated as a link, as defined below. A CDO may have a multiplicity of different relationships with itself or with one or more additional CDOs.","\u201cRelationship\u201d or \u201cdata relationship\u201d as used in the context of a CDO refers to the type of logical combination that occurs between a data object with itself, or refers to the type of logical combination that occurs between a data object and at least one another data object. Among other references or descriptions, such a relationship is always referred to or partially described by a \u201crelationship type\u201d. This term is used in an object oriented language context to reference or describe any expectations, actions and limitations possible between two or more data objects.","\u201cRelationship type\u201d in the context of this document is a label that specifies the possible multiple combinations that can occur between a CDO and itself or with at least one other CDO. The possible relationship type labels are 1\u20141 (one to one), 1-M (one to many) and M\u2014M (many to many). A given CDO may be simultaneously related to more than one other CDO through several different types of relationship. This is also sometimes referred to as the multiplicity of the relationship.","\u201cLink\u201d as used in this document with respect to a CDO identifies a particular occurrence of a relationship between a CDO and itself, between a CDO and another CDO. The occurrence of at least one populated link results in an instance of the CDO. This may be considered a synonym for a \u201crelationship\u201d between two objects.","\u201cCircular link\u201d as used in this document with respect to a CDO identifies a particular occurrence of a relationship between a CDO and itself that may be direct or indirect (e.g., linked to itself through another CDO).","\u201cRelationship definition\u201d or \u201crelationship description\u201d in the context of this document and computer software applications refers to information, or an abstraction of information, regarding a \u201crelationship\u201d, \u201cdata relationship\u201d \u201crelationship type\u201d or a \u201clink\u201d that can be stored, accessed, transferred, communicated, displayed or edited.","\u201cComplex data object graph\u201d or \u201cCDOG\u201d is a term employed herein as an abstraction to logically represent a set of complex data objects and a set of their corresponding relationships.","\u201cJava data object graph\u201d or \u201cJDOG\u201d is a term employed herein as an abstraction to logically represent a set of complex data objects and a set of their corresponding relationships that are part of a Java programming application.","\u201cApplication model\u201d or simply \u201cmodel\u201d are essentially interchangeable terms employed herein as abstractions to logically convey a collective description or other representation for a set of complex data objects and a corresponding description or other representation of their relationships. In one respect, these terms are used logically herein provide a general way of efficiently communicating when referring to set of metadata (i.e., data about data) that describes possible data entities (e.g., objects, database tables, maps, etc,) data relationship types, and data constraints involved in a computer system or application, or in a specific instance of an application. It is important to understand the context in which the terms \u201capplication model\u201d and \u201cmodel\u201d are used in this document. Ordinarily computer engineers refer to the \u201cmodel\u201d as an abstraction rather than a specific possibility or instance of the model as applied. However, in this document for the ease of communication abstractions of the model, possible implementations of the model and instances of the model are all referred to generally as \u201capplication model\u201d or \u201cmodel\u201d. From the context of its use the term will be clear. The model is the abstract relationship between classes, wherein the CEDO is an instance (or set of instances) that express(es) the model.","\u201cNavigation\u201d, \u201cnavigating\u201d or \u201cnavigated\u201d in the context of the present document refers to an action implementing at least one object to interact with a set of related objects for a certain purpose, such as creation, access, insertion, modification and deletion of an object, or of one of its relationships. It is the physical act of traversing the relationships, which might be referred to as \u201cwalking up or down the graph\u201d in common lingo.","\u201cNavigation model\u201d as used herein is a special type of application model that is applied specifically to a description (or other representation) of how objects can relate to each other and what might be the expected behavior when a CDOG is navigated for a certain purpose.","\u201cObject schema\u201d is a term employed herein as an abstraction referring to the set of data object classes that describe the possible data objects that can be created, modified or maintained in an application, or describing an instance of a set of data object classes in an application.","\u201cDistributed Transparent Persistence\u201d is a term employed herein as an abstraction referring to the concept of providing persistence for a member selected from the group consisting of a data object, a data object graph, associated data and data object relationships in a distributed environment without the need for the insertion of byte code or data objects in an object model or schema.","\u201cCocoBase Proxy Classes\u201d is a term employed herein used in referring to wrapper classes that provide CocoBase runtime compatibility for objects that aren't inherently database aware. A computer system can persist the attributes and data for any data object that is wrapped with a CocoProxy wrapper class by simply using CocoBase facilities. For example, source code for the (attribute based) CocoProxy and (get\/set method based) CocoProxyM classes are available under the thought\\cocodemo3tier31\\demos\\pguide directory, when the CocoBase software tools suite is installed on a computer system. This optional design provides an extensible mechanism for instances of data extraction and propagation.","\u201cCocoBase Navigation API\u201d is a term employed herein to refer to an example of an API that provides database relationship mapping and object graph management capability for persistent objects. Database relationships are mapped to object links using CocoBase Navigator link definitions. Persistence control is provided at each class level in the object graph. Each of the Select, Insert, Update and Delete operations are individually configurable.","\u201cCocoBase Transaction API\u201d is a term employed herein to refer to an example of an API that provides object oriented transaction support. Transaction objects are used to persist data object attributes and maintain synchronization between database and in memory attribute values. The Transaction API has many built in optimizations, and applications utilizing CocoBase transactions generally benefit from reduced database and network overhead. This facility allows the developer to group together object changes into a single unit of work whose implementation or storage will succeed or fail all at once.","\u201cCocoBase Factories\u201d is a term employed herein to refer to examples of software modules and softwares libraries that are used to provide automated, custom object instantiation behavior. Factory behavior is completely customizable. For example, a factory may be used to bind newly instantiated objects to a transaction object, to load a graph of related objects using the CocoBase Navigator, or to implement polymorphism in a database result set. For example, a ProxyFactory class is part of the current CocoBase software tools suite distribution in the thought\\cocodemo3tier31\\demos\\pguide directory, and this factory returns result set objects wrapped in a CocoProxy wrapper, when a CocoProxy wrapped key object is passed into the CocoBase runtime software module as part of a query that needs processing by the CocoBase runtime module.","\u201cCocoBase Repository\u201d is a term employed herein as an abstraction referring to a datasource to dataobject mapping repository and associated software modules that is installed into a datasource (or may optionally be a single stand alone file, or a set of files that circumscribe a set of datasource to dataobject mapping definitions and associated software modules). A repository can optionally be in a format such as XML, XMI and the like. See, U.S. Pat. No. 5,857,197, the CocoBaseEnterprise O\/R Tools Suite, and the co-pending patent application entitled \u201cDynamic Object-Driven Database Manipulation and Mapping System\u201d for more detailed descriptions of mapping repositories, and the like.","\u201cCocoBase Transparent Persistence for Objects and Object Models\u201d. All models using a relational database for map storage require the CocoBase repository to be installed into the database, or in a stand-alone source accessable to CocoBase. The installation of a mapping repository can occur automatically, if required, when using CocoAdmin to log into the database. Pre-existing database tables can be used, provided that the CocoBase repository is first installed into the database, or accessible to CocoBase. Several example of applications that implement CocoBase transparent persistence are included in the CocoBase software tools suite distribution (see the distribution documentation for the location of folders or directories containing such examples).","An object of the present invention is to provide a system for creating or maintaining transparent persistence of a complex data object, a complex data object graph (CDOG) model, or a portion of a CDOG. In a preferred embodiment, an object of the present invention is to provide such a system that can selectively persist all or a portion of a CDOG model when the model is a member selected from the group consisting of an object model generated from a data object mapping repository and an object model generated from data object modeling tool repository. A further object is to provide such a system is located on, or is part of, a local or distributed computer system.","An object of the present invention is to provide a method for creating, maintaining, accessing, navigating and persisting complex data objects stores in a repository. In a preferred embodiment, an object of the present invention is to provide such a method having the step utilizing the storage facilities of an enterprise EJB server to store and maintain the data object repository. In a further object, such a method involves a local or distributed computer system.","An object of the present invention is to provide a computer software component that operates in an EJB environment, or the like, wherein the component has the capacity to access an object model repository or an instance thereof in a computer memory or in another temportary computer storage store device and persist at least one action selected from the group consisting of creating, maintaining, accessing, navigating, updating or deleting complex data objects as a CDOG model. In a preferred aspect, the computer software component is an Enterprise Bean selected from the group consisting of Stateless, Stateful and Entity Beans. In a further preferred object the computer software component is an EJB Session Bean built on top of CocoBase runtime libraries having the ability to persist all or a portion of a CDOG model or instance thereof. An even more preferred object is to provide such a computer software component capable of transparently persisting all or a portion of a CDOG model or instance thereo for a local or distributed computer system and automatically reconciling and persisting any changes to an instance of the CDOG model or any changes to the repository definition for the CDOG model.","A preferred object of the present invention is to provide a software tool comprising the a navigation API and software components (as described above), adapted for a local network or a distributed network environment, wherein said software tool provides persistence in an object oriented language environment transparently by implementing a configurable network component capable of acquiring and persisting CDOGs through network APIs.","A further object of the present invention is to a software tool capable of reading a source (or binary) programming object logic model or a database file (or other data source containing the stored object model information) in a format selected from the group consisting of a UML data file, a XMI data file, and a XML file and converting the information into a target member selected from the group consisting of a database definition, XML mapping file, a database mapping definition file, and a CDOG definition file. In a preferred object, the software can automatically generate a transparent persistence layer that corresponds to the object model information of the source file.","A further object of the present invention is to provide a software module and source code known as a Java entity bean (such as a generic session bean) that is capable of providing persistence of either or both of a data objects and a data model, in total or in part as determined through setting established by a user of the computer system.","An object of the present invention is to provide a system and\/or method for displaying, updating or creating the data or structure of a data object, and optionally its links to other objects of an object model, by utilizing a displayable presentation page having embedded object programming code, such as a Java Server Page (JSP) that is served up by a server platform such as a JSP server, and persisting data of the object, links of the object, or object model by communication of the object programming code embedded in the displayable presentation page with a programming object (such as a Java Bean) wherein the programming object has implemented in its object programming logic methods for getting, setting, resetting and loading of data, and the programming object also includes programming code for communicating directly or indirectly with a persistence manager API or persistence library to persist the object, its data and\/or links to other objects in an object model, and optionally to persist the object model itself. In a preferred object of the present invention the displayable presentation page is constructed having an HTML format and the embedded programming language is the object programming language Java, and the associated programming object is a Java Object such as a Java Bean or entity bean.","Another object of the present invention is to provide a system and\/or method for generating from a relational datasource schema, or generating from an Object to Relational mapping resource:\n\n","Another object of the present invention is to provide a method of visually navigating, updating and persisting an object model by utilizing linked displayable presentation pages (such as JSPs) corresponding to a specified object model. A preferred object is to provide such displayable presentation pages with buttons that may be clicked to access link information or to move the user forward or backward to a navigated linked object of an object model and its displayable presentation page.","A further object of the present invention is to provide a method for creating, updating, navigating and persisting an object model starting from a information source which is member selected from the group consisting of Java Classes, a relational data source, a UML model (e.g., XMI respresentation), and interface for manually creating an object model by describing a set of objects, their attributes and their links to other objects, and then in a further step creating from the information retrieved from such an information source a set of displayable presentation pages and their associated programming objects (such as JSPs and associated Java Beans) corresponding to an object model that are suitable for visually creating, navigating or updating the object model.","The present invention provides a system for creating or maintaining persistence for all or a part of a complex data object graph model when a user is creating, maintaining, accessing and navigating complex data objects as a complex data object graph model. In one embodiment, the system comprises a computer system having a user interface, a working memory storage area and at least one device for permanently storing information, and said system being loaded with at least one portion of a computer software program, wherein said software program comprises at least one user access interface and a set of programming routines designed for creating or maintaining transparent persistence when a user is creating, maintaining, accessing and navigating complex data objects as a CDOG model, comprising","a) a set of definitions for the relationships between a data source schema and objects capable of storing data for an object language application, wherein the set of definitions is stored in a repository;","b) a set of definitions for the relationships between objects for an object language application, wherein the set of definitions is part of an object application navigation model;","c) a list of objects, or a set of objects that are to be persisted, wherein the list of objects or set of objects is part of an object application navigation model;","d) an object or set of objects as a programming module that contains the logic for persisting an indicated object or set of objects from c);","e) an input method to inform the programming module of d) with the location of information corresponding to a), b) and c), and","f) at least one data source to store persisted data.","In a preferred embodiment, the present invention provides such a system that can persist any part or all of a CDOG model instance, and to resolve and persist any changes to the model or to the respository for the CDOG model. Most preferred is such a system providing a point and click graphical user interface.","The present invention provides a method for creating, maintaining, accessing, navigating and persisting complex data objects stores as a CDOG model and providing transparent persistence in a distributed environement, comprising the steps of:\n\n","In a preferred embodiment, the present invention provides such a method wherein the information repository is an object data store managed by an EJB Enterprise server. In a further preferred embodiment an EJB Enterprise Java Bean is the software component having the ability to access a CDOG repository file, a UML\/XMI repository, or other mapping definition repository (e.g., file, database, or streaming data source) or an instance of the at least one portion of the CDOG in a computer's memory or on a distributed network and provide the transparent persistence for the CDOG model.","The present invention provides a computer software program having at least one user interface and having at least one feature that provides for at least one action selected from the group consisting of creating or maintaining transparent persistence when a user of a CDOG model is creating, maintaining, accessing or navigating a CDOG model. In a preferred aspect of the invention, the present invention provides a software program, or an association with a software program, having a feature for displaying, printing or displaying and printing a representation of the CDOG model as a graph, or as a set of tables representing a CDOG model. In a further preferred embodiment, such a software program has an editing interface for editing the CDOG model, or has an editable input or source, such as a file, that can be modified to implement changes to the complex data object CDOG model (or has both an interface for editing and an editable input or source, such as a file).","The present invention also provides an application programming interface (\u201cAPI\u201d), as a preferred embodiment, wherein the API can be accessed to create, maintain, access, navigate and persisting complex data objects as a CDOG model. In one aspect the API can be accessed by an independent computer software program, or by a computer software program module that is part of a software package including the API, to provide at least one action selected from the group consisting of creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In a preferred aspect, the present invention provides such an API as part of a software tool package that provides a method for displaying or printing a representation of the CDOG model as a graph or set of tables representing the CDOG model (or providing methods for both displaying and printing a representation of the CDOG model). In another preferred aspect, such a software tool package that includes the API provides an editing interface for editing the CDOG model, or has an editable input or source, such as a file, that can be modified to implement changes to the CDOG model (or provides both an editing interface and an editable input or source, such as a file,).","A preferred embodiment of the present invention provides a software tool comprising the API according (as described above), adapted for a local network or a distributed network environment, wherein said software tool provides persistence in an object oriented language environment transparently by implementing a configurable network component capable of acquiring and persisting CDOGs through network APIs.","In another preferred embodiment, the CDOG API is the CocoNavigator API, the Navigator API, or the CBFacade API, which provides support for manipulating complex objects in conjunction with the THOUGHT Inc. CocoBase Enterprise Object\/Relational (O\/R) database (hereinafter \u201cCocoBase\u201d) mapping tool (see U.S. Pat. No. 5,857,197 (incorporated herein in its entirety), for concepts upon which the CocoBase mapping tool is based). An object is considered to be complex when it has established or potential relationships (i.e. links) to other objects. For instance, a Company object instance may be linked to an instance of its corporate address and instances of a Department object, which in turn may be linked to a set of instances of Employee objects. An example of such an CDOG is shown in , for example. The combination of these objects and their links constitute a graph of objects (CDOG model) that can be manipulated using the CocoNavigator API. Since the CocoNavigator API works in a Java Programming language environment, this CDOG example may also be referred to as a JDOG example.","In one preferred embodiment, the invention provides a software module, or set of modules, for creating or maintaining transparent persistence of a member selected from the group consisting of a data object, an object graph model and a portion of an object graph model when a user of the system is creating, maintaining, accessing or navigating complex data objects as a CDOG model, comprising:","i) a software module for creating a set of definitions for the relationships between a data source schema and objects capable of storing data for an object language application, wherein the software module is capable of causing the storage of the set of definitions in a repository;","ii) a software module for creating and accessing a set of definitions for the relationships between objects for an object language application, wherein the software module is capable of causing storage of the set of definitions in a navigation model;","iii) a software module providing an input means for a member selected from an object name, a list of objects, or a set of objects that are to be persisted, wherein the software module is capable of capable of causing the storage of the input as part of a navigation model that can be access by ii);","iv) a software module containing the programming logic to persist an object or set of objects based upon access to (a) a set of definitions for the relationships between a data source schema and objects capable of storing data for an object language application, (b) a set of definitions for the relationships between objects for an object language application, and (c) an object name, a list of objects, or a set of objects that are to be persisted, and","v) a software module having an input method capable of informing iv) of the location of information relating to iv)(a), iv)(b) and iv)(c).","In another preferred embodiment, the invention provides a software tool comprising the API according to the invention or interfacing therewith, wherein the software is adapted for performing the following steps:\n\n","b) converting the information of (a) into a target member selected from the group consisting of a database defintion XML format, a database mapping definition format, other general data formats, a source or binary CDOG definition file, and application objects.","In a further preferred embodiment, the present invention provides a software tool as described above that is adapted for performing at least one of the following additional steps:\n\n","In a still further preferred embodiment the software tool described above provides target information that is at least one member selected from the group consisting a CocoBase database definition repository, a CocoBase map, a CocoNavigate CDOG definition, a CocoNavigate object link descriptor, and a CDOG object graph definition capable of being stored and retreived. Further preferred is such software, wherein the source is a UML\/XMI document containing sufficient DTD information to exchange modeling information with a UML modeling tool.","In one embodiment of the software tool according to the invention, the software tool can be set to automatically generate a persistence layer that corresponds to the source UML class diagrams provided by an exported source file from a case tool capable of exporting UML\/XMI, such as Rational Rose, Together and ArgoUML.","An easy way to understand the job performed by a CDOG Navigator API, such as the CocoNavigator API, is to imagine it as a monitor that can provide at least one object to intercept any accesses to the data objects and their relationships that constitute the CDOG, as well as any changes to the data source upon which the CDOG depends, in order to provide a means to persist any changes to the CDOG (or CDOG model) or related data in the data source. Any changes to the CDOG (or CDOG model) can then be propagated by the CDOG Navigator API to a persistent data source through a CocoBase Enterprise O\/R connection. Similarly, persistent data that updates a data source can be utilized to create a CDOG model or to update a CDOG model.","Each CDOG (or CDOG model) managed by the CDOG Navigator API can be associated by the CDOG Navigator API with a CDOG descriptor (such as a file) that may be utilized to represent all or part of a \u201cnavigation model\u201d. In this respect, a navigation model may be abstractly described as essentially a namespace in which a set of data objects and a set of link descriptions (i.e., relationship types between data objects) are each defined. In a preferred embodiment, a data source, data field, data field size and data field type are listed for each data object in the set of data objects. In another preferred embodiment, at least one link description for two data objects, or for a single data object having a circular link (where the link description is utilized in conjunction with the CocoNavigator API and CocoBase mapping tool) contains one or more of the following types of information (however other related information may be utilized):\n\n","Some preferred features provided by the CocoNavigator API and its associated software, when utilized with the CocoBase mapping tool, or with a similar mapping tool, are as follows:","(a) Provides Multiple Navigation Models for the Same CDOG Model\n\n","(b) Circular Link Definitions\n\n","(c) Bi-Directional and Oriented Links\n\n","(d) Dynamic Link Proxy Properties\n\n","(e) Automatic Synchronization of Object Properties\n\n","(f) Pure Object Models\n\n","(g) Customized Link Visitors\n\n","(h) Distributed Environments\n\n","(i) Group Loading or Lazy Loading of Links\n\n","Some examples of preferred features that can be provided by the CocoNavigator API and its associated software, which are particularly enhanced when utilized with the currently existing CocoBase mapping tool, are as follows:","(aa) CocoBase Transactions\n\n","(bb) Non-CBProp Objects\n\n","(cc) Virtual Foreign Key Fields\n\n","(dd) Transparent Persistence\n\n","(ee) Transparent Persistence with Automated APIs that may be Further Optionally Utilized with a Local or Distributed Implementations Such as a Session Bean Implementation\n\n","From the above description of features of the API, and the features of the CocoNavigator API programming routines described below, an object computer language programmer can produce an API having the functionality of the CocoNavigator API described herein. Essentially the CocoNavigator API has an at least one user access interface, at least one data source access interface and at least three main programming modules consisting of the following programming modules or routines:\n\n","In a more preferred embodiment, the CDOG API according to the invention, (a preferred embodiment is the CocoNavigator API) can be written with an interface that accesses and uses functionalities of the CocoBase mapping tool, associated programming routines, or associated class libraries. Both the object code and the source code of the CDOG API are contemplated as part of this invention.","In another preferred embodiment, the above described CDOG API can be accessed to create, maintain, access, navigate and persisting complex data objects as a CDOG model. In a particularly preferred aspect, the API can be accessed by a computer software program such as the CocoBase mapping tool, or by a computer software program module that is part of a software package including the API, to provide at least one action selected from the group consisting of creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In an even more preferred aspect, the present invention provides such an API as part of a software tool package having a feature or method for displaying or printing a graph or set of tables representing a CDOG or a CDOG model. In yet another preferred aspect, such a software tool package including the API provides an interface for editing a CDOG, a CDOG model, or for editing a representation definition for a CDOG or a CDOG model to provide a modification that implements a change to a CDOG, or to its definition.","As described above, a software component according to the invention that is capable of persisting all or a portion of a CDOG may be an Enterprise Java Bean selected from the group consisting of Stateless, Stateful or even Entity Beans. CocoBase Enterprise Beans (CBEBs) are a preferred embodiment of the invention and constitute a set of Enterprise Java Beans built upon or accessing CocoBase Runtime and EJB APIs to provide persistence in a generic, efficient and transparent way. Distributed transparent persistence can be provided without the need for any object model changes or byte code modifications. CBEBs can be directly deployed on an EJB server with or without customized settings and are capable of persisting virtually any Java Object, any Java Object graph or any portion of the Object graph. The Java Objects of any complexity that are arbitrarily created by client applications can be persisted, and the corresponding object classes can be properly mapped to a CocoBase repository or other object repository such as a UML XMI repository. Copies of the Java Object, any portion of an Object Graph, or all of an Object Graph can be automatically reconciled and the changes can be persisted to a storage repository.","The CocoBase Navigation API maps database foreign key-primary key relationships to object references. The relationship maps (sometimes referred to herein as navigation models), like the database maps, are stored in a special CocoBase repository, or may be converted into an XML file (or files) and stored in a stand-alone file or directory. The Navigation API supports 1 to 1, 1 to M, and M to M links in both the object and relational spaces. For M to M relationships, an associative table and a corresponding associative map are required, since relational databases do not directly support M to M relationships.","A navigation model must be created, or properly reference, before CocoBase links can be defined. A navigation model is a namespace used to categorize and store a set of link definitions. Generally, a single navigation model is sufficient for simple applications. Multiple navigation models are useful if an application switches between several relationship configurations. This allows different views of complex object data for the same set of underlying database tables. Having relationship mapping separated from table mapping is unique to CocoBase. Since maps can be used with multiple link models, it provides reusability at the mapping level.","Below is an example of how a client application on an EJB Server could connect to and use at least on CBEB to provide transparent persistence, even in a distributed environment.",{"@attributes":{"id":"p-0101","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003\/\/ create a complex object having myObj as the root of the tree"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u2003Context initialContext = new InitialContext( );"},{"entry":"\u2003\u2003\u2003\u2003SfCmbHome cmbHome ="},{"entry":"(SfCmbHome)javax.rmi.PortableRemoteObject.narrow("},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003initialContext.lookup(\u201cjava:comp\/env\/ejb\/sfcmbhome\u201d),"},{"entry":"\u2003\u2003\u2003\u2003SfCmbHome.class);"},{"entry":"\u2003\u2003\u2003\u2003SfCmb myCmb = SfCmbHome.create(. . .\/*connection"},{"entry":"\u2003\u2003\u2003\u2003details*\/. . .);"},{"entry":"\u2003\u2003\u2003\u2003\/\/ create an example object"},{"entry":"\u2003\u2003\u2003\u2003MyObject myObj = new MyObject( );"},{"entry":"\u2003\u2003\u2003\u2003myObj.setSomeField(someValue);"},{"entry":"\u2003\u2003\u2003\u2003\/\/ now ask the CMB to load the object from the database that"},{"entry":"matches the example"},{"entry":"\u2003\u2003\u2003\u2003myObj = myCmb.retrieveState(myObj);"},{"entry":"\u2003\u2003\u2003\u2003myCmb.saveState(myObj);"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u2003\/\/ do some more changes to myComplexObject and save it"},{"entry":"\u2003\u2003\u2003\u2003again"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u2003myCmb.saveState(myObj);"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above example can also be use to run a client application with the TomCat Server using a JSP to access a relational database (such as the Oracle Database) using at least CBEB to provide transparent persistenct, even in a distributed environment. Appendix 1 has more details of how this can be done.","Below is another example of how a client application on an EJB Server could connect to and use at least on CBEB to provide transparent persistence, even in a distributed environment. This example uses the CBFacade implementation.",{"@attributes":{"id":"p-0104","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003\/\/ create a complex object having myObj as the root of the tree"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u2003CBFacade cbf ="},{"entry":"\u2003\u2003\u2003\u2003CBFacade.create(\u201cthought.CocoBase.CBFacadeLocal\u201d);"},{"entry":"\u2003\u2003\u2003\u2003Properties props = new Properties( );"},{"entry":"\u2003\u2003\u2003\u2003props.put(\u201ccocosource.name\u201d,args[0]);"},{"entry":"\u2003\u2003\u2003\u2003props.put(\u201ccocosource.jdbcdriver\u201d,args[1]);"},{"entry":"\u2003\u2003\u2003\u2003props.put(\u201ccocosource.url\u201d,args[2]);"},{"entry":"\u2003\u2003\u2003\u2003props.put(\u201ccocosource.user\u201d,args[3]);"},{"entry":"\u2003\u2003\u2003\u2003props.put(\u201ccocosource.password\u201d,args[4]);"},{"entry":"\u2003\u2003\u2003\u2003props.put(\u201ccocosource.navmodel\u201d,\u201cCompanyAppLinks\u201d);"},{"entry":"\u2003\u2003\u2003\u2003cbf.connect(props);"},{"entry":"\u2003\u2003\u2003\u2003\/\/ create an example object"},{"entry":"\u2003\u2003\u2003\u2003MyObject myObj = new MyObject( );"},{"entry":"\u2003\u2003\u2003\u2003myObj.setSomeField(someValue);"},{"entry":"\u2003\u2003\u2003\u2003\/\/ now ask the CMB to load the object from the database"},{"entry":"that matches the example"},{"entry":"\u2003\u2003\u2003\u2003myObj = cbf.load(myObj);"},{"entry":"\u2003\u2003\u2003\u2003cbf.save(myObj);"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u2003\/\/ do some more changes to myComplexObject and save it"},{"entry":"\u2003\u2003\u2003\u2003again"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u2003cbf.save(myObj);"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The present may be embodied in specific forms other than those particularly described above or illustrated by the appended drawings. Upon viewing the present application preferred embodiments and other descriptions herein of the present invention, variations and other implementations that do not depart from the spirit and scope of the present invention will be apparent to one of routine skill in this field. Such variations and other implementations are considered part of the present invention and within the scope of the appended claims. Accordingly, reference should be made to the appended claims, rather than to the forgoing specification and drawings, as indicating the scope of the present invention.","I. Set up a relational database such as Oracle 8i and create a user called cityinfo.","II. Install TomCat as follows:",{"@attributes":{"id":"p-0106","num":"0000"},"ul":{"@attributes":{"id":"ul0045","list-style":"none"},"li":["1. Install the TomCat Server 4.0.x by simply unpacking the binary distribution (.zip) into a convenient location.\n\nOn a Windows platform, open a command prompt and proceed as follows:\n\nC> cd \\\n\nC> jar xf jakarta-tomcat-4.0.x.zip\n\nOn a Unix platform, open a command prompt and do something like:\n\n\/usr\/local\/bin% jar xf jakarta-tomcat-4.0.x.zip\n","2. Run the script jakarta-tomcat-4.0.x\/bin\/startup and open a browser on http:\/\/localhost:8080 to test the installation. The Jakarat Project Home page displaying the Tomcat logo will appear in your browser.","3. Run the script jakarta-tomcat-4.0.x\/bin\/shutdown to stop the server.\n\nIII. Configure the Environment as follows, while adjusting the environment to match a chosen relational database (this example uses Oracle8i as the relational database):\n\nThe following system variables are set for the applications to access the proper files and libraries. Set these variables through the Windows Control Panel under the System properties dialog. Example entries for these variables are listed below:\n"]}},{"@attributes":{"id":"p-0107","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","Entry","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JAVA_HOME","C:\\jdk1.3.1","JDK home directory"]},{"entry":["PATH","C:\\CINNT\\System32;%JAVA_HOME%\\bin","JDK utilities"]},{"entry":[{},{},"Windows executables"]},{"entry":["COCO_HOME","C:\\thought\\cocodemo3tier31","CocoBase home directory"]},{"entry":["CATALINA_HOME","C:\\jakarta-tomcat-4.0.1","TomCat home directory"]},{"entry":["ORA_HOME","C:\\Oracle\\Ora81","Oracle home directory"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}]},"install_cocodemo3tierXX_XXXX.class","This is a fully functional copy of the software with a 30 day evaluation license. When license expires, the software will not function unless a commercial license is obtained and installed. In the directory containing the installation file, enter the following command:","java install_cocodemo3tier310516","The last four digits correspond to the software release date and may be different, than listed, for the latest release. If java.exe is not in the system PATH, an error will occur. If the environment is configured properly, the installer displays the initial CocoBase Intallation \u201cWelcome\u201d dialog.\n\nThe default settings should be selected during the installation. Fill in the user information fields completely to ensure the proper installation of the software. If the software will be used for commercial purposes, be sure to obtain a commercial license.\n\nV. Configuring CocoBase Enterprise O\/R for the Database\n\nIn this example, the database used is Oracle. Therefore, a specific User\/Schema name must be specified in the Oracle.properties text file to view the details of that User\/Schema in CocoAdmin (GUI interface for CocoBase). Locate and open the Oracle.properties file in the thought\\cocodemo3tier31\\demos\\ resources directory. Change the SCHEMANAME entry from SCOTT to CITYINFO.\n\nEdit the CocoAdmin.properties text file, in the same directory, to permanently change the login entries for CocoAdmin. Locate the Oracle Thin entries and make the following changes:\n\n",{"@attributes":{"id":"p-0112","num":"0174"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":". . ."},{"entry":"\u2003<Host. . .>"},{"entry":"\u2003. . ."},{"entry":"\u2003\u2003<DefaultContext>"},{"entry":"\u2003\u2003\u2003<Resource name=\u201cjdbc\/MyObjDataSource\u201d auth=\u201cContainer\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003type=\u201cjavax.sql.DataSource\u201d\/>"},{"entry":"\u2003\u2003\u2003<ResourceParams name=\u201cjdbc\/MyObjDataSource\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<parameter><name>user<\/name><value>cityinfo<\/value>"},{"entry":"\u2003\u2003\u2003\u2003<\/parameter>"},{"entry":"\u2003\u2003\u2003\u2003<parameter><name>password<\/name><value>cityinfo<\/value>"},{"entry":"\u2003\u2003\u2003\u2003<\/parameter>"},{"entry":"\u2003\u2003\u2003\u2003<parameter><name>driverClassName<\/name>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<value>oracle.jdbc.driver.OracleDriver<\/value><\/parameter>"},{"entry":"\u2003\u2003\u2003\u2003<parameter><name>driverName<\/name>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<value>jdbc:oracle:thin:@localhost:1521:ORCL<\/value>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/parameter>"},{"entry":"\u2003\u2003\u2003<\/ResourceParams>"},{"entry":"\u2003\u2003<\/DefaultContext>"},{"entry":"\u2003<\/Host>"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0049","list-style":"none"},"li":{"@attributes":{"id":"ul0049-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0050","list-style":"none"},"li":["Standard code generation with CocoAdmin of CocoBase Enterprise O\/R is utilized to produce the JSP for TomCat, which procedures are generally known in the art as described in prior publications by Thought, Inc regarding CocoBase Enterprise O\/R. However, at the Code Generation Template pull-down menu of CocoAdmin the user need to select JSP for Entity Bean from the pull-down Java Code generation menu list. The other general procedures of CocoAdmin are followed to produce the generic web application (WAR file).\n\nVIII. Deploying the Generated Web Application (WAR file) in TomCat\n","1. Copy the generated war file to %CATALINA_HOME%\/webapps","2. Start the TomCat server by opening a command prompt and running the script %CATALINA_HOME%\\bin\\startup. This will expand the .war file under the %CATALINA_HOME%\\webapps directory."]}}}},"Notes:\n\n","http:\/\/localhost:8080\/Cityinfo\/Cityinfo","A webpage is displayed with a title of \u201cCityInfo Generated Default JSP\u201d, or the like. The web page contains entry fields of \u201cName\u201d (* indicates that this is a primary key field), \u201cCountry\u201d and \u201cPopulation\u201d and allows the actions of \u201cInsert\u201d, \u201cUpdate\u201d, \u201cDelete\u201d and \u201cFind\u201d for such entries.\n\nAny entries made, updated or deleted in this JSP are automatically persisted to the relational data source by CocoBase.\n\nThe three primary source code listing for the above application are set forth below.\n","This Cityinfo JSP is an example of a displayable presentation page that has embedded within the presentation page mark-up language some necessary object programming language logic. CocoAdmin automatically generates the HTML and embedded Java code of this JSP (displayable presentation page) along with the Java Code for a First Java Object (JSP Processor Object), and a Second Java Object (Business Object) from an object to relational schema map corresponding to a relational data source in the above example. However, these same object code listings could have been hard coded by hand by a competent programmer and\/or produced from information taken from another source such a UML\/XMI object model, directly from a relational data source, or from the database schema for a data source.\n\nThe presentation mark-up language (in this example HTML) provides a WEB page (presentation page) to display the names of three attributes of a Cityinfo Object \u201cName\u201d, \u201cCountry\u201d, and \u201cPopulation\u201d (may be referred to as fields in a corresponding data source) with 4 possible actions \u201cInsert\u201d, \u201cUpdate\u201d, \u201cDelete\u201d and \u201cFind\u201d and a button labeled \u201cSubmit\u201d for executing one of the four possible commands (actions). The embedded Java code in this Cityinfo JSP example communicates directly with the First Java Object (the object is a Java Bean in this example, which may be referred to as a JSP Processor Class) and also references the name of the Java Bean (JSP Processor Class) having the logic for carrying out or delegating the \u201cinsert\/create\u201d, \u201cupdate\u201d, \u201cdelete\u201d, \u201cselect\/find\u201d and \u201csubmit\u201d commands of the JSP and logic for tracking the values and properties of the three named attributes\/fields in this example.\n",{"@attributes":{"id":"p-0117","num":"0184"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<html>"},{"entry":"<jsp:useBean id=\u201cCityinfoProcessor\u201d scope=\u201csession\u201d"},{"entry":"class=\u201cCityinfo.CityinfoJspProcessor\u201d \/>"},{"entry":"<jsp:setProperty name=\u201cCityinfoProcessor\u201d property=\u201c*\u201d \/>"},{"entry":"<>"},{"entry":"<>"},{"entry":"<html>"},{"entry":"<head>"},{"entry":"<title>Cityinfo JSP<\/title>"},{"entry":"<\/head>"},{"entry":"<body background=\u201cback.gif\u201d>"},{"entry":"<font size = 5 color=\u201c#CC0000\u201d>"},{"entry":"<h1><b><center>Cityinfo JSP Example<\/center><\/b><\/h1>"},{"entry":"<hr>"},{"entry":"<br>"},{"entry":"<form method=POST action=Cityinfo.jsp>"},{"entry":"<BR>"},{"entry":"Enter Values to lookup a specific Object."},{"entry":"<BR>"},{"entry":"<br>Name <INPUT type=text name=\u201cname\u201d size=\u201c8\u201d"},{"entry":"value=\u201c<jsp:getProperty"},{"entry":"name=\u201cCityinfoProcessor\u201d property=\u201cname\u201d \/>\u201d >"},{"entry":"<br><br>Country <INPUT"},{"entry":"type=text name=\u201ccountry\u201d size=\u201c8\u201d value=\u201c<jsp:getProperty"},{"entry":"name=\u201cCityinfoProcessor\u201d property=\u201ccountry\u201d \/>\u201d ><br><br>Population"},{"entry":"<INPUT type=text name=\u201cpopulation\u201d size=\u201c8\u201d value=\u201c<jsp:getProperty"},{"entry":"name=\u201cCityinfoProcessor\u201d property=\u201cpopulation\u201d \/>\u201d ><br><br>"},{"entry":"<h2><b>Action :<\/b><\/h2>"},{"entry":"<INPUT type=\u201cradio\u201d name=\u201caction\u201d value=\u201ccreate\u201d>Insert"},{"entry":"<INPUT type=\u201cradio\u201d name=\u201caction\u201d value=\u201cupdate\u201d>Update"},{"entry":"<INPUT type=\u201cradio\u201d name=\u201caction\u201d value=\u201cdelete\u201d>Delete"},{"entry":"<INPUT type=\u201cradio\u201d name=\u201caction\u201d value=\u201cselect\u201d>Find"},{"entry":"<br>"},{"entry":"<INPUT type=submit name=\u201csubmit\u201d value=\u201cSubmit\u201d>"},{"entry":"<\/form>"},{"entry":"<\/FONT>"},{"entry":"<\/body>"},{"entry":"<\/html>"},{"entry":"<hr>"},{"entry":"<h3><b>Status :<\/b><\/h3> <>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This CityinfoJspProcessor Object is a First Java Object (in this case a Java Bean) that CocoAdmin generates along with the JSP (displayable presentation page) and the Second Java Object. CocoAdmin generates this JSP Processor Java code and compiled Java Class from an object to relational schema map corresponding to a relational data source, however these same object code listings could have been hard coded by hand and\/or produced from another information source UML\/XMI or directly from the database schema. Further, the Java Code of the First and Second Objects could have been consolidated into a single object, but this would have violated the specification for Java and JSPs and also reduced the programming flexibility of the system. By placing the more complex logic in the business object (second object) and keeping it separate from the JSP Processor Object (first object), the JSP and first object can be utilized by multiple applications.\n\nThis First Java Object is a Java Bean that references and represents the attributes of its corresponding JSP (displayable presentation page) and includes programming logic to execute the commands (or to delegate the execution of such commands) of the JSP, as described above. Since using standard JSP standards and Java Procedures would only permit the handling of a limited number of data types, this First Java Object references the Second Java Object (Cityinfo Object) which also reflects the data and data types (attributes of the First Java Object) but includes more business logic to convert forward\/reverse data types at the discretion of the programmer by merely editing the business logic. An example of the programming code for the First Java Object is set forth below:\n",{"@attributes":{"id":"p-0119","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"package Cityinfo;"},{"entry":"import java.sql.*;"},{"entry":"import java.io.*;"},{"entry":"import javax.naming.Context;"},{"entry":"import javax.naming.InitialContext;"},{"entry":"import javax.transaction.UserTransaction;"},{"entry":"import java.util.*;"},{"entry":"import java.math.*;"},{"entry":"\/**"},{"entry":"* EJB Jsp Processor Class Generated by CocoAdmin from THOUGHT"},{"entry":"Inc."},{"entry":"*"},{"entry":"* Copyright (c) 1995\u20132000 THOUGHT Inc. All Rights Reserved."},{"entry":"**\/"},{"entry":"public class CityinfoJspProcessor implements java.io.Serializable"},{"entry":"{"},{"entry":"private String action = null;"},{"entry":"private CityinfoHome cityinfoHome;"},{"entry":"private UserTransaction utx = null;"},{"entry":"public CityinfoJspProcessor( ) {"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003Properties env = System.getProperties( );"},{"entry":"\u2003\u2003\u2003\u2003Context ic = new InitialContext(env);"},{"entry":"\u2003\u2003\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003utx = (UserTransaction)"},{"entry":"ic.lookup(\u201cjavax.transaction.UserTransaction\u201d);"},{"entry":"\u2003\u2003\u2003\u2003} catch (Exception e) {"},{"entry":"\u2003\u2003\u2003\u2003System.err.println (\u201cCouldn't Create User Transaction!!!\u201d);"},{"entry":"\u2003\u2003\u2003\u2003e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003cityinfoHome = (CityinfoHome) ic.lookup(\u201cCityinfoApp\u201d);"},{"entry":"\u2003\u2003} catch (Exception re) {"},{"entry":"\u2003\u2003\u2003\u2003System.err.println (\u201cCouldn't locate Cityinfo Home\u201d);"},{"entry":"\u2003\u2003\u2003\u2003re.printStackTrace( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003reset( );"},{"entry":"}"},{"entry":"public String getAction( ) {"},{"entry":"\u2003\u2003return action;"},{"entry":"}"},{"entry":"public void setAction(String a) {"},{"entry":"System.out.println(\u201cSetting action : \u201d + a);"},{"entry":"\u2003\u2003action = a;"},{"entry":"}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get the attribute name value."},{"entry":"\u2003\u2003\u2002* @return name Returns the database attribute value is current set"},{"entry":"to."},{"entry":"\u2003\u2003\u2002**\/"},{"entry":"\u2003\u2003public String getName( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return name;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get the attribute country value."},{"entry":"\u2003\u2003\u2002* @return country Returns the database attribute value is current"},{"entry":"set to."},{"entry":"\u2003\u2003\u2002**\/"},{"entry":"\u2003\u2003public String getCountry( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return country;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get the attribute population value."},{"entry":"\u2003\u2003\u2002* @return population Returns the database attribute value is"},{"entry":"current set to."},{"entry":"\u2003\u2003\u2002**\/"},{"entry":"\u2003\u2003public Integer getPopulation( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return population;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set the attribute name value."},{"entry":"\u2003\u2003\u2002* @param n_name the database attribute value to set the variable"},{"entry":"to."},{"entry":"\u2003\u2003\u2002**\/"},{"entry":"\u2003\u2003public void setName(String n_name)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003name = n_name;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set the attribute country value."},{"entry":"\u2003\u2003\u2002* @param n_country the database attribute value to set the variable"},{"entry":"to."},{"entry":"\u2003\u2003\u2002**\/"},{"entry":"\u2003\u2003public void setCountry(String n_country)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003country = n_country;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set the attribute population value."},{"entry":"\u2003\u2003\u2002* @param n_population the database attribute value to set the"},{"entry":"variable to."},{"entry":"\u2003\u2003\u2002**\/"},{"entry":"\u2003\u2003public void setPopulation(Integer n_population)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003population = n_population;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003private String name = null;"},{"entry":"\u2003\u2003private String country = null;"},{"entry":"\u2003\u2003private Integer population = null;"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Check to see if values are equal - this should be based on key"},{"entry":"fields."},{"entry":"\u2003\u2003\u2002*"},{"entry":"\u2003\u2003\u2002* @param n_population the primary key instance to compare to."},{"entry":"\u2003\u2003\u2002**\/"},{"entry":"\u2003\u2003public boolean equals(Object t_CityinfoJspProcessor)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003if (! (t_CityinfoJspProcessor instanceof"},{"entry":"CityinfoJspProcessor))"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return false;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003CityinfoJspProcessor t_CompareCityinfoJspProcessor ="},{"entry":"(CityinfoJspProcessor)t_CityinfoJspProcessor;"},{"entry":"\u2003\u2003\u2003\u2003if(t_CompareCityinfoJspProcessor.name == null)"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(name != null)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return false;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else if(!t_CompareCityinfoJspProcessor.name.equals(name))"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return false;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003return true;"},{"entry":"\u2003\u2003}"},{"entry":"private void reset( ) {"},{"entry":"final String emptyString = \u201c\u201d;"},{"entry":"final Integer zeroInteger = new Integer(0);"},{"entry":"final BigDecimal zeroBigDecimal = new BigDecimal(0);"},{"entry":"final Short zeroShort = new Short((short)0);"},{"entry":"final Long zeroLong = new Long((long)0);"},{"entry":"final Timestamp zeroTimestamp = new Timestamp((long)0);"},{"entry":"final Time zeroTime = new Time((long)0);"},{"entry":"final Float zeroFloat = new Float((float)0);"},{"entry":"final Double zeroDouble = new Double((double)0);"},{"entry":"final byte emptyByte[] = new byte[0];"},{"entry":"final java.sql.Date zeroDate = new java.sql.Date((long)0);"},{"entry":"setName(emptyString);"},{"entry":"setCountry(emptyString);"},{"entry":"setPopulation(zeroInteger);"},{"entry":"}"},{"entry":"public String toString( ) {"},{"entry":"StringBuffer output = new StringBuffer( );"},{"entry":"\u2003\u2003\u2003\u2003output.append(\u201c name=\u201d+getName( ));"},{"entry":"\u2003\u2003\u2003\u2003output.append(\u201c country=\u201d+getCountry( ));"},{"entry":"\u2003\u2003\u2003\u2003output.append(\u201c population=\u201d+getPopulation( ));"},{"entry":"return output.toString( );"},{"entry":"}"},{"entry":"\/\/"},{"entry":"\/\/ Perform the action requested by user. Return status."},{"entry":"\/\/"},{"entry":"public String processRequest( ) {"},{"entry":"\u2003\u2003CityinfoInterface cityinfo = null;"},{"entry":"\u2003\u2003String message = \u201c\u201d;"},{"entry":"\u2003\u2003System.out.println(\u201cProcess request called \u201d);"},{"entry":"\u2003\u2003System.out.println(this);"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003if( action.equals(\u201ccreate\u201d) ) {"},{"entry":"\u2003\u2003\u2003CityinfoPK cityinfopk = new CityinfoPK( );"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003utx.begin( );"},{"entry":"\u2003\u2003\u2003\u2003cityinfopk.name = getName( );"},{"entry":"\u2003\u2003\u2003\u2003cityinfo = cityinfoHome.findByPrimaryKey( cityinfopk );"},{"entry":"\u2003\u2003\u2003\u2003setCountry( cityinfo.getCountry( ) );"},{"entry":"\u2003\u2003\u2003\u2003setPopulation( cityinfo.getPopulation( ) );"},{"entry":"\u2003\u2003\u2003\u2003if(cityinfo != null) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003message = \u201cEntity bean \u201c+cityinfopk+\u201d already exists!"},{"entry":"Duplicate Bean cannot be created!\u201d;"},{"entry":"\u2003\u2003\u2003\u2003\u2003utx.commit( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003return message;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003} catch (Throwable t) {"},{"entry":"\/\/t.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\/\/utx.rollback( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\/\/utx.begin( );"},{"entry":"\u2003\u2003\u2003\u2003cityinfoHome.create( getName( ), getCountry( ),"},{"entry":"\u2003\u2003\u2003\u2003getPopulation( )"},{"entry":");"},{"entry":"\u2003\u2003\u2003message = \u201cCreated Cityinfo \u2018\u201c + cityinfopk + \u201d\u2019\u201d;"},{"entry":"\u2003\u2003\u2003utx.commit( );"},{"entry":"\u2003\u2003} catch (Exception e) {"},{"entry":"e.printStackTrace( );"},{"entry":"\u2003\u2003\u2003\u2003message = \u201cException on Cityinfo Create =\u201d+e;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else if( action.equals(\u201cupdate\u201d) ) {"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003utx.begin( );"},{"entry":"\u2003\u2003\u2003\u2002CityinfoPK cityinfopk = new CityinfoPK( );"},{"entry":"\u2003\u2003\u2003\u2002cityinfopk.name = getName( );"},{"entry":"\u2003\u2003\u2003\u2002cityinfo = cityinfoHome.findByPrimaryKey( cityinfopk );"},{"entry":"\u2003\u2003\u2003\u2002setCountry( cityinfo.getCountry( ) );"},{"entry":"\u2003\u2003\u2003\u2002setPopulation( cityinfo.getPopulation( ) );"},{"entry":"\u2003\u2003\u2003\u2002message = \u201cSet Cityinfo \u201d + this ;"},{"entry":"\u2003\u2003\u2003utx.commit( );"},{"entry":"\u2003\u2003} catch (Exception e) {"},{"entry":"\u2003\u2003\u2003\u2003message = \u201cException on Cityinfo Update=\u201d+e;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else if( action.equals(\u201cselect\u201d) ) {"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003\u2003CityinfoPK cityinfopk = new CityinfoPK( );"},{"entry":"\u2003\u2003\u2003\u2003cityinfopk.name = getName( );"},{"entry":"\u2003\u2003\u2003\u2003cityinfo = cityinfoHome.findByPrimaryKey( cityinfopk );"},{"entry":"\u2003\u2003\u2003\u2003setCountry( cityinfo.getCountry( ) );"},{"entry":"\u2003\u2003\u2003\u2003setPopulation( cityinfo.getPopulation( ) );"},{"entry":"\u2003\u2003\u2003\u2003message = \u201cFound Cityinfo \u201d + this;"},{"entry":"\u2003\u2003} catch (Exception e) {"},{"entry":"\u2003\u2003\u2003\u2003message = \u201cException on Cityinfo Select=\u201d+e;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else if( action.equals(\u201cdelete\u201d) ) {"},{"entry":"\u2003\u2003try {"},{"entry":"\u2003\u2003\u2003utx.begin( );"},{"entry":"\u2003\u2003\u2003\u2002CityinfoPK cityinfopk = new CityinfoPK( );"},{"entry":"\u2003\u2003\u2003\u2002cityinfopk.name = getName( );"},{"entry":"\u2003\u2003\u2003\u2002cityinfo = cityinfoHome.findByPrimaryKey( cityinfopk );"},{"entry":"\u2003\u2003\u2003\u2002cityinfo.remove( );"},{"entry":"\u2003\u2003\u2003\u2002message = \u201cRemoved cityinfo \u201d + cityinfopk;"},{"entry":"\u2003\u2003\u2003\u2002cityinfo = null;"},{"entry":"\u2003\u2003\u2003utx.commit( );"},{"entry":"\u2003\u2003} catch (Exception e) {"},{"entry":"\u2003\u2003\u2003\u2003message = \u201cException on Cityinfo Delete=\u201d+e;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003if( cityinfo != null ) {"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003reset( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2002}"},{"entry":"\u2003\u2002catch (Throwable e) {"},{"entry":"\u2003\u2003message = e.toString( );"},{"entry":"\u2003\u2002}"},{"entry":"\u2003\u2003return message;"},{"entry":"}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This Cityinfo Object is a Second Java Object that CocoAdmin generates along with the JSP (displayable presentation page) and the First Java Object. CocoAdmin generates the HTML with inbedded object code (JSP), a First Java Object (JSP Processor Object), and this Second Java Object (Business Object) from an object to relational schema map corresponding to a relational data source, however these same object code listings could have been hard coded by hand and\/or produced from another information source UML\/XMI or directly from the database schema. Further, the Java Code of the First and Second Objects could have been consolidated into a single object, but this would have violated the specification for Java and JSPs and also reduced the programming flexibility of the system. By placing the more complex logic in the business object (second object) and keeping it separate from the JSP Processor Object (first object), the JSP and first object can be utilized by multiple applications.\n\nThis Second Java Object (Java object in this case) is a separate business object that sits in the programming logic flow chart between the First Java Object (JSP Processor Class) and the persistence library or persistence API. This Second Java Object reflects the data of the first Java Object (JSP Processor Class) and allows for further processing to create additional data types from the reflected data types and to translate backwards to the more limited reflected data types that are displayed by the JSP. This provides more complete support for all Java Data Types that might need to be properly retrieved from a data source and persisted back to that or another data source (the Java JSP Processor specification as established by SUN Microsystems, Inc. only supports a small, more limited subset of Java data types). This Second Java Object processes commands passed to it by the JSP via the First Java Object and automatically translates and reverse translates the data types passing through it to the appropriate data types for displaying or persisting. This further processing allows more complex data types and business logic to be communicated with the persistence library or persistence API than would be possible if the JSP Processor Class communicated directly with the persistence library or API (unless the JSP specification is violated by editing the JSP Processor Class source code (First Java Object Code) to include additional logic within the JSP Processor Class). An example of the Java Code for this Second Java Object, i.e., the Cityinfo Object (business object) is set forth below:\n",{"@attributes":{"id":"p-0121","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"package Cityinfo;"},{"entry":"import thought.CocoBase.*;"},{"entry":"import java.math.*;"},{"entry":"import java.sql.*;"},{"entry":"import java.util.*;"},{"entry":"import java.io.*;"},{"entry":"import java.lang.*;"},{"entry":"\/*"},{"entry":"* Generated by GenCBClass from THOUGHT Inc."},{"entry":"*"},{"entry":"* Copyright (c) 1995,2000 THOUGHT Inc. All Rights Reserved."},{"entry":"*"},{"entry":"*\/"},{"entry":"public class Cityinfo extends Object implements"},{"entry":"Cloneable,java.io.Serializable,CBProp,thought.CocoBase.EJBPrimaryKey"},{"entry":"{"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Constructor for Cityinfo"},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public Cityinfo( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get the attribute name value."},{"entry":"\u2003\u2003\u2002* @return name Returns the database attribute value is current set"},{"entry":"to."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public String getName( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return name;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get the attribute country value."},{"entry":"\u2003\u2003\u2002* @return country Returns the database attribute value is current"},{"entry":"set to."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public String getCountry( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return country;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get the attribute population value."},{"entry":"\u2003\u2003\u2002* @return population Returns the database attribute value is"},{"entry":"current set to."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public Integer getPopulation( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003return population;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set the attribute name value."},{"entry":"\u2003\u2003\u2002* @param n_name the database attribute value to set the variable"},{"entry":"to."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public void setName(String n_name)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003name= n_name;"},{"entry":"\u2003\u2003\u2003\u2003if(name == null) nameNullIndicator = true;"},{"entry":"\u2003\u2003\u2003\u2003else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003nameNullIndicator = false;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set our Query Condition for column name for dynamic querying."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public void modifyNameMatch(int t_match) {"},{"entry":"\u2003\u2003\u2003\u2003nameMatchCondition = t_match;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get our Query Condition for column name for dynamic querying."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public int retrieveNameMatch( ) {"},{"entry":"\u2003\u2003\u2003\u2003return nameMatchCondition;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set the attribute country value."},{"entry":"\u2003\u2003\u2002* @param n_country the database attribute value to set the variable"},{"entry":"to."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public void setCountry(String n_country)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003country= n_country;"},{"entry":"\u2003\u2003\u2003\u2003if(country == null) countryNullIndicator = true;"},{"entry":"\u2003\u2003\u2003\u2003else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003countryNullIndicator = false;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set our Query Condition for column country for dynamic"},{"entry":"\u2003\u2003\u2003\u2009querying."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public void modifyCountryMatch(int t_match) {"},{"entry":"\u2003\u2003\u2003\u2003countryMatchCondition = t_match;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get our Query Condition for column country for dynamic"},{"entry":"\u2003\u2003\u2003\u2009querying."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public int retrieveCountryMatch( ) {"},{"entry":"\u2003\u2003\u2003\u2003return countryMatchCondition;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set the attribute population value."},{"entry":"\u2003\u2003\u2002* @param n_population the database attribute value to set the"},{"entry":"variable to."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public void setPopulation(Integer n_population)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003population= n_population;"},{"entry":"\u2003\u2003\u2003\u2003if(population == null) populationNullIndicator = true;"},{"entry":"\u2003\u2003\u2003\u2003else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003populationNullIndicator = false;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Set our Query Condition for column population for dynamic"},{"entry":"querying."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public void modifyPopulationMatch(int t_match) {"},{"entry":"\u2003\u2003\u2003\u2003populationMatchCondition = t_match;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get our Query Condition for column population for dynamic"},{"entry":"querying."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public int retrievePopulationMatch( ) {"},{"entry":"\u2003\u2003\u2003\u2003return populationMatchCondition;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Implement clone so update method works correctly"},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public Object clone( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003Cityinfo retObject = new Cityinfo( );"},{"entry":"\u2003\u2003\u2003\u2003retObject.setName(name);"},{"entry":"\u2003\u2003\u2003\u2003retObject.setCountry(country);"},{"entry":"\u2003\u2003\u2003\u2003retObject.setPopulation(getPopulation( ));"},{"entry":"\u2003\u2003\u2003\u2003return retObject;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Implement toString( ) to properly print contents"},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public String toString( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003String strout ="},{"entry":"\u2003\u2003\u2003\u2003\u201c name=\u201d+name+"},{"entry":"\u2003\u2003\u2003\u2003\u201c country=\u201d+country+"},{"entry":"\u2003\u2003\u2003\u2003\u201c population=\u201d+population+"},{"entry":"\u2003\u2003\u2003\u2003\u201c\\n\u201d;"},{"entry":"\u2003\u2003\u2003\u2003return strout;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Take Properties result set received from database, and populate"},{"entry":"\u2003\u2003\u2002* Object's Data fields."},{"entry":"\u2003\u2003\u2002* @param resultSet The data used in populating the Object's Data"},{"entry":"fields"},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public void setPropObjectData(Properties resultSet)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003if(resultSet.get(\u201cNAME\u201d) != null && !(resultSet.get(\u201cNAME\u201d)"},{"entry":"instanceof CBNull))"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003name = (String)resultSet.get(\u201cNAME\u201d);"},{"entry":"\u2003\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003name = null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003nameNullIndicator = true;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003if(resultSet.get(\u201cCOUNTRY\u201d) != null &&"},{"entry":"!(resultSet.get(\u201cCOUNTRY\u201d) instanceof CBNull))"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003country = (String) resultSet.get(\u201cCOUNTRY\u201d);"},{"entry":"\u2003\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003country = null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003countryNullIndicator = true;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003if(resultSet.get(\u201cPOPULATION\u201d) != null &&"},{"entry":"!(resultSet.get(\u201cPOPULATION\u201d) instanceof CBNull))"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003population = ((Integer)resultSet.get(\u201cPOPULATION\u201d));"},{"entry":"\u2003\u2003\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003population = null;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003populationNullIndicator = true;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Take the data in the Object's Data fields, and create a"},{"entry":"CBQueryInfo"},{"entry":"\u2003\u2003\u2002* instance, which can be used by CocoBase. Since fields are"},{"entry":"identified"},{"entry":"\u2003\u2003\u2002* by a key value defined by their name, field order is irrelevant"},{"entry":"with"},{"entry":"\u2003\u2003\u2002* this interface."},{"entry":"\u2003\u2003\u2002* @return CBQueryInfo the Object's Data fields and query info"},{"entry":"\u2003\u2003\u2002* @see CBQueryInfo"},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public CBQueryInfo getPropObjectData( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003cqi = new CBQueryInfo( );"},{"entry":"\u2003\u2003\u2003\u2003setProps = new Properties( );"},{"entry":"\u2003\u2003\u2003\u2003if(name != null) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Use the CBFieldInfo to specify the match condition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(nameMatchCondition != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003CBFieldInfo cbfi = new CBFieldInfo( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchValue(name);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchCriteria(nameMatchCondition);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cNAME\u201d ,cbfi);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cNAME\u201d,name);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else if(nameNullIndicator) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Use the CBFieldInfo to specify the match condition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(nameMatchCondition != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003CBFieldInfo cbfi = new CBFieldInfo( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchValue(name);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchCriteria(nameMatchCondition);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cNAME\u201d,new CBNull( ));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cNAME\u201d,new CBNull( ));"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003if(country != null) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Use the CBFieldInfo to specify the match condition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(countryMatchCondition != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003CBFieldInfo cbfi = new CBFieldInfo( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchValue(country);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchCriteria(countryMatchCondition);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cCOUNTRY\u201d,cbfi);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cCOUNTRY\u201d,country);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else if(countryNullIndicator) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Use the CBFieldInfo to specify the match condition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(countryMatchCondition != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003CBFieldInfo cbfi = new CBFieldInfo( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchValue(country);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchCriteria(countryMatchCondition);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cCOUNTRY\u201d,new CBNull( ));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cCOUNTRY\u201d,new CBNull( ));"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003if(population != null) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Use the CBFieldInfo to specify the match condition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(populationMatchCondition != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003CBFieldInfo cbfi = new CBFieldInfo( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchValue(population);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchCriteria(populationMatchCondition);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cPOPULATION\u201d,cbfi);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cPOPULATION\u201d,population);"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else if(populationNullIndicator) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ Use the CBFieldInfo to specify the match condition"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(populationMatchCondition != \u22121) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003CBFieldInfo cbfi = new CBFieldInfo( );"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchValue(population);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003cbfi.setSearchCriteria(populationMatchCondition);"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cPOPULATION\u201d,new CBNull( ));"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003} else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cPOPULATION\u201d,new CBNull( ));"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003if(cbsqlwhere != null)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003setProps.put(\u201cCBSQLWHERE\u201d, cbsqlwhere);"},{"entry":"\u2003\u2003\u2003\u2003cqi.setFieldValues(setProps);"},{"entry":"\u2003\u2003\u2003\u2003return cqi;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ Instance Variables."},{"entry":"\u2003\u2003protected String name = null;"},{"entry":"\u2003\u2003protected boolean nameNullIndicator = false;"},{"entry":"\u2003\u2003protected int nameMatchCondition = \u22121;"},{"entry":"\u2003\u2003protected String country = null;"},{"entry":"\u2003\u2003protected boolean countryNullIndicator = false;"},{"entry":"\u2003\u2003protected int countryMatchCondition = \u22121;"},{"entry":"\u2003\u2003protected Integer population = null;"},{"entry":"\u2003\u2003protected boolean populationNullIndicator = false;"},{"entry":"\u2003\u2003protected int populationMatchCondition = \u22121;"},{"entry":"\u2003\u2003String cbsqlwhere = null;"},{"entry":"\u2003\u2003CBQueryInfo cqi = new CBQueryInfo( ); \/\/ CBProp custom query"},{"entry":"structure"},{"entry":"\u2003\u2003public Properties setProps = new Properties( ); \/\/ CBProp properties,"},{"entry":"global for convenience!"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Check to see if values are equal - this should be based on key"},{"entry":"fields."},{"entry":"\u2003\u2003\u2002* @param n_population the State object to compare to."},{"entry":"\u2003\u2003\u2002*\/"},{"entry":"\u2003\u2003public boolean equals(Object t_Cityinfo)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003if(! (t_Cityinfo instanceof Cityinfo)) return false;"},{"entry":"\u2003\u2003\u2003\u2003Cityinfo t_CompareCityinfo = (Cityinfo)t_Cityinfo;"},{"entry":"\u2003\u2003\u2003\u2003if(t_CompareCityinfo.getName( ) == null) {"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(name != null) return false;"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003if(!t_CompareCityinfo.getName( ).equals(name))"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003return false;"},{"entry":"\u2003\u2003\u2003\u2003return true;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* Get the CbSQL special Query By example value."},{"entry":"\u2003\u2003\u2002* @return population Returns the qbe attribute value is current set"},{"entry":"to."},{"entry":"\u2003\u2003*\/ public String getCbsqlwhere( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return cbsqlwhere;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003\u2002* set the CbSQL special Query By example value."},{"entry":"\u2003\u2003\u2002* @param population sets the qbe attribute value is current set to."},{"entry":"\u2003\u2003*\/ public void setCbsqlwhere(String n_cbsqlwhere)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003cbsqlwhere= n_cbsqlwhere;"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":[{},{},{}],"ul":{"@attributes":{"id":"ul0053","list-style":"none"},"li":{"@attributes":{"id":"ul0053-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0054","list-style":"none"},"li":["The CocoBase Runtime O\/R mapping class that wrappers the JDBC driver and issues queries and does the actual persistence calls. This is a class such as thought.CocoBase.CocoPowder or thought.CocoBase.CocoPowderPlugin20 (for jdbc 2.0 connections).","The thought.CocoBase.Transaction object that can track changes of instances, and acts as a change \u2018buffer\u2019. If a Transaction object is used, then it only calls a CocoBase Runtime driver\u2014O\/R mapping runtime class\u2014when the txn.commit( ) is called.","The thought.CocoBase.navapi.Navigator object that can track and detect changes in relationships based on Link definitions. Note that unlike CocoBase Maps, Link models are not kept in the CocoBase repository. Once a link definition model is created it is saved in the demos\/resources directory (by default\u2014although this can be overridden). As long as the model is in the classpath either directly or in a subdirectory called \u2018resources\u2019 it will find the model properties file and retrieve the navigation information.\n\nThe Navigator class can function in conjunction with a Transaction object or it can function standalone. While complex object graphs can be transparently managed directly by the Navigator and without the Transaction object, the use of the Transaction object is generally preferred because of its buffering and update optimizations which only persist those attributes that have changed.\n\nCreating Applications with CocoBase Transparent Persistence\n\nAfter classes have been generated and compiled, such as with the above application, CocoBase runtime classes can be used to persist instances of these classes. As shown in numberous other documents in the art, the CocoBase Navigator can easily develop a navigation model for the application. This model can then be used to persist the objects.\n\nThe Example below is not directed to persistence of the Navigation model for the above Cityinfo application, but the concepts can be easily applied to the Cityinfo application to provide transparent persistence.\n\nFirst, open a CocoBase connection as follows:\n"]}}}},{"@attributes":{"id":"p-0122","num":"0192"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CocoDriverInterface myBase = CocaDriver.getCocoDriver("]},{"entry":[{},"\u2003\u2003\u201cthought.CocoBase.CocoPowder\u201d,"]},{"entry":[{},"\u2003\u2003\u201corg.hsql.jdbcDriver\u201d,"]},{"entry":[{},"\u2003\u2003\u201cjdbc:HypersonicSQL:hsql:\/\/localhost;"]},{"entry":[{},"\u2003\u2003cocoprop=cocofactory=CocoProxyFactory\u201d,"]},{"entry":[{},"\u2003\u2003\u201csa\u201d, \u201c\u201d"]},{"entry":[{},")"]},{"entry":[{},"if(myBase.connect( ) == \u22121) {"]},{"entry":[{},"\u2003\u2003System.out.println(\u201cFailed connect!\u201d);"]},{"entry":[{},"\u2003\u2003System.exit(1);"]},{"entry":[{},"}"]},{"entry":[{},". . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0123","num":"0193"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"thought.CocoBase.Transaction cocoTxn ="]},{"entry":[{},"\u2003\u2003new thought.CocoBase.Transaction(myBase, false);"]},{"entry":[{},"Properties cocoTransProps = new Properties( );"]},{"entry":[{},"cocoTransProps.put(\u201cpreserveCommit\u201d,\u201ctrue\u201d);"]},{"entry":[{},"cocoTransProps.put(\u201ccommitconnection\u201d,\u201ctrue\u201d);"]},{"entry":[{},"cocoTransProps.put(\u201cthrowExceptions\u201d,\u201ctrue\u201d);"]},{"entry":[{},"cocoTransProps.put(\u201cupdateOnlyChangedColumns\u201d,\u201ctrue\u201d);"]},{"entry":[{},"cocoTxn.setProperties(cocoTransProps);"]},{"entry":[{},"\/\/ Begin a new transaction."]},{"entry":[{},"cocoTxn.begin( );"]},{"entry":[{},". . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0124","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Instantiate a Navigator with the Link model created from"},{"entry":"\/\/ the UML\/XMI document"},{"entry":"thought.CocoBase.navapi.Navigator navigator ="},{"entry":"\u2003\u2003new thought.CocoBase.navapi.Navigator (myBase, \u201ccompany\u201d);"},{"entry":"\/\/ Assign the current transaction to the Navigator"},{"entry":"navigator.setTransaction(cocoTxn);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0125","num":"0195"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Setup our object to query"},{"entry":"Department dept = new Department( );"},{"entry":"department.setName(\u201cSALES\u201d);"},{"entry":"\/\/ This will read & bind all \u2018Department\u2019 objects to the transaction."},{"entry":"Vector deptVector = myBase.selectAll("},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003new thought.CocoBase.CocoProxyM(dept), \u201cDepartment\u201d);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0126","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This will read & bind all \u2018Department\u2019 objects to the transaction."]},{"entry":[{},"Vector deptVector = myBase.selectAll(dept, \u201cDepartment\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0127","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"for(int i=0; i< deptVector.size( ); i++) {"},{"entry":"\u2003\u2003Department d = (Department)deptVector.elementAt(i);"},{"entry":"\u2003\u2003\/\/ Because the cascadeLoad flag is set to true in the direction"},{"entry":"\u2003\u2003\/\/ Department->Employees, the employees link will load"},{"entry":"\u2003\u2003automatically"},{"entry":"\u2003\u2003d = navigator.loadAllLinks(d,\u201cDepartment\u201d);"},{"entry":"\u2003\u2003. . ."},{"entry":"\u2003\u2003Vector emps = d.getEmployees( );"},{"entry":"\u2003\u2003for (int j=0; j<emps.size( ); j++) {"},{"entry":"\u2003\u2003\u2003\u2003\/\/ raise salaries by 20%"},{"entry":"\u2003\u2003\u2003\u2003emp.setSalary(emp.getSalary( )*1.2);"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003. . ."},{"entry":"\u2003\u2003\/\/ Once changes are made to an object graph those changes can be"},{"entry":"\u2003\u2003\/\/ synchronized using the updateAllLinks method such as:"},{"entry":"\u2003\u2003navigator.updateAllLinks(d,\u201cDepartment\u201d,true);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"cocoTxn.commit( );","These code introductions are quite small, and can be done entirely server side with Entity or Session beans in J2EE environments with no model or object model intrusion. And for local non-J2EE applications the application intrusion is incredibly small, requiring a single method call for each root node.\n\nThe Navigator supports one-to-one, one-to-many and many-to-many relationships with cycle detection. It also detects this locally (i.e. in the client application) or by reconciling serialized or copied objects without any kind object model or bytecode intrusion. This is truly transparent persistence that is architected and designed for the VM oriented Java language. There are also more advanced applications included in the demos\/pguide\/navapi subdirectory that demonstrate one-to-one, one-to-many and many-to-many relationships as well as an EJB using the Navigator system to manage a graph of java objects.\n\nThe Example below is not directed to persistence of the Navigation model for the above Cityinfo application, but the concepts can be easily applied to the Cityinfo application to provide transparent persistence.\n\nFirst, open a CocoBase CBFacade Transparent Persistence connection as follows:\n",{"@attributes":{"id":"p-0130","num":"0200"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Set up the connection class - can be Local or Remote with EJB Server"},{"entry":"CBFacade cbf ="},{"entry":"CBFacade.create(\u201cthought.CocoBase.CBFacadeLocal\u201d);"},{"entry":"Properties props = new Properties( );"},{"entry":"props.put(\u201ccocosource.name\u201d,args[0]);"},{"entry":"props.put(\u201ccocosource.jdbcdriver\u201d,args[1]);"},{"entry":"props.put(\u201ccocosource.url\u201d,args[2]);"},{"entry":"props.put(\u201ccocosource.user\u201d,args[3]);"},{"entry":"props.put(\u201ccocosource.password\u201d,args[4]);"},{"entry":"props.put(\u201ccocosource navmodel\u201d,\u201cCompanyAppLinks\u201d);"},{"entry":"cbf.connect(props);"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0131","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Setup our object to query"]},{"entry":[{},"Department dept = new Department( );"]},{"entry":[{},"department.setName(\u201cSALES\u201d);"]},{"entry":[{},"\/\/ This will read & bind all \u2018Department\u2019 objects to the transaction."]},{"entry":[{},"Vector deptVector = cbf.loadAll(dept,\u201cDepartment\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0132","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"for(int i=0; i< deptVector.size( ); i++) {"},{"entry":"\u2003\u2003Department d = (Department)deptVector.elementAt(i);"},{"entry":"\u2003\u2003\/\/ Because the cascadeLoad flag is set to true in the direction"},{"entry":"\u2003\u2003\/\/ Department->Employees, the employees link will load"},{"entry":"\u2003\u2003automatically"},{"entry":"\u2003\u2003d = cbf.loadAll(d,\u201cDepartment\u201d);"},{"entry":"\u2003\u2003. . ."},{"entry":"\u2003\u2003Vector emps = d.getEmployees( );"},{"entry":"\u2003\u2003for (int j=0; j<emps.size( ); j++) {"},{"entry":"\u2003\u2003\u2003\u2003\/\/ raise salaries by 20%"},{"entry":"\u2003\u2003\u2003\u2003emp.setSalary(emp.getSalary( )*1.2);"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003. . ."},{"entry":"\u2003\u2003\/\/ Once changes are made to an object graph those changes can be"},{"entry":"\u2003\u2003\/\/ synchronized using the save method such as:"},{"entry":"\u2003\u2003cbf.save(d,\u201cDepartment\u201d);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"cbf.commit( );","These code introductions are quite small, and can be done entirely server side with Entity or Session beans in J2EE environments with no model or object model intrusion. And for local non-J2EE applications the application intrusion is incredibly small, requiring a single method call for each root node.\n\nBoth the above architecture and two implementations presented herein are uniquely suited to work in every application from the tiny local app to the enterprise J2EE and to do so with superior performance and manageability.\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For the non-limiting purpose of illustrating some of the concepts of complex data objects CDOs, i.e., data objects and their relationships to one another, according to the invention, two CDO graph drawings  and  are provided.",{"@attributes":{"id":"p-0048","num":"0051"},"figref":["FIG. 1","FIG. 1"],"b":["1","5","10","1","15","25","35","20","30","40","20","45","55","50","60","30","30","65","70","40","75","85","80","90"]},{"@attributes":{"id":"p-0049","num":"0052"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["100","650","700","150","250","350","200","300","400","200","300","400","425","450","550","575","500","600","500","200","300","600","300","400"]},{"@attributes":{"id":"p-0050","num":"0053"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
