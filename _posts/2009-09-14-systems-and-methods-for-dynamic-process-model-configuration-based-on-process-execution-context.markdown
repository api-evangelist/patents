---
title: Systems and methods for dynamic process model configuration based on process execution context
abstract: Methods and systems to dynamically configure a process model based on process execution context are described. In one example embodiment, a system to dynamically configure a process model can include a context engine, a rules engine, and a business process engine. The context engine can maintain context information related to an executable business process model. The context information is dynamically extensible during execution of the executable business process model. The rules engine can obtain a relevant context form the context information. The relevant context can be associated with a step and a rule to control the step within the executable business process model. The business process engine can execute the executable business process model and can dynamically configure the executable business process model during execution based on application of the relevant context by the rules engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08346520&OS=08346520&RS=08346520
owner: SAP AG
number: 08346520
owner_city: Walldorf
owner_country: DE
publication_date: 20090914
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings that form a part of this document: Copyright 2009, SAP AG. All Rights Reserved.","Various embodiments relate generally to the field of business process modeling, and in particular, but not by way of limitation, to a system and method for dynamic process model configuration based on process execution context.","Business process modeling may be deployed to represent the real-world processes of an enterprise on paper or within a computer system. Business process modeling may for example be performed to analyze and improve current enterprise processes. Managers and business analysts seeking to improve process efficiency and quality may turn to business process modeling as a method to achieve the desired improvements. In the 1990s, the vision of a process enterprise was introduced to achieve a holistic view of an enterprise, with business processes as the main instrument for organizing the operations of an enterprise. Process orientation meant viewing an organization as a network or system of business processes. The certain benefits of investing in business process techniques were demonstrated in efficiency, increased transparency, productivity, cost reduction, quality, faster results, standardization, and, above all, in the encouragement of innovation, leading to competitive advantage and client satisfaction.","The processes created through business process modeling are often complex and may contain many variants or potential process flows. While information technologies (IT) have been a key enabler in achieving some of the benefits mentioned above, these technologies have been slow to fully deal with all the complexities of executing business process models. IT systems are particularly poor at handling any sort of real-time configuration of business process models. Current IT system may implement some sort of static configuration parameters, which fail to fully consider all the potential environmental inputs to a complex business process.","Disclosed herein are various embodiments of the present invention for providing methods and systems for dynamic process model configuration based on process execution context.","A typical business process model can comprise a large number of tasks that may or may not be necessary for any particular execution of the business process. Depending upon the various inputs to the business process, only a subset of potential tasks, modeled within the business process model, may need to be executed. The various inputs that drive decisions within a business process may not be available prior to execution of the business process. In some cases it is possible for the inputs to be unknown prior to execution. Therefore, decisions affecting the process flow of the business process may need to be taken at run-time. The various inputs can be regarded as the context of execution for the business process. Applying this concept to a user, the user's context can enable process model configuration based on the (unique) user's perspective. In an example, a context model is introduced that can be used in the embodiment of a service marketplace, among other things. The context model can be used to execute variable workflows through the dynamic configuration of the underlying process model.","Service Marketplace Example","Software as a Service (SaaS) is a software application delivery model where a software vendor develops a web-native software application to host and operate over the Internet for use by its customers. Typically, customers do not pay for owning the software itself but rather for using it. The software is used through either a web-based user interface (UI) or an application programming interface (API) accessible over the Web and often written using Web Services. In this sense, SaaS software applications are exposed as services or value-added services. SaaS is becoming an increasingly prevalent delivery model as underlying technologies that support Web Services and service-oriented architecture (SOA) mature.","Web Services are defined by the World Wide Web Consortium (W3C) as a software system designed to support interoperable machine-to-machine interaction over a network. A Web Service has an interface described in a machine-processable format (specifically Web Services Definition Language (WSDL)). Other systems can interact with a Web Service in a manner prescribed by its description using simple object access protocol (SOAP) messages. The SOAP messages are typically conveyed using Hypertext Transfer Protocol (HTTP) with an eXtensible Mark-up Language (XML) serialization in conjunction with other Web-related standards. Web Services can be thought of as Internet APIs that can be accessed over a network, such as the Internet, and executed on a remote system hosting the requested services. Other approaches with nearly the same functionality as Web Services are Object Management Group's (OMG), Common Object Request Broker Architecture (CORBA), Microsoft's Distributed Component Object Model (DCOM) or Sun Microsystems's Java\/Remote Method Invocation (RMI).","In the SaaS paradigm, there are service providers and service consumers. Service providers usually have a core business, such as processing visa applications for the government. The service provider uses specific software systems that run on their infrastructure to provide their specific services. Service consumers can provide content and services to their internal or external user base through aggregation of services provided by service providers. In this example, the service consumer is an end user that interacts with the service providers through various supply channels to retrieve and integrate web-based services from service providers.","Services in the SaaS paradigm are usually delivered using a Service Delivery Platform (SDP), which manages the service delivery from data source and functional implementation to the actual end user. A service marketplace (also software\/applications marketplace) may be an Internet-based virtual venue for facilitating the interactions between the application or service provider and the service consumer. The service marketplace can handle all facets of software and service discovery and provisioning processes. Service marketplaces can be vendor-specific, such as the SAP Service Marketplace (from SAP AG, Walldorf, Germany), the Microsoft Windows\u2122 Marketplace (from Microsoft Corp., Redmond, Wash.), or generic SaaS marketplaces such as SaaSPlaza (from SaaSPlaza, Encinitas, Calif.) and WebCentral Application Marketplace (from Melbourne IT Group, Melbourne, Australia).","The service marketplace may perform a number of operations. First, the service marketplace allows service providers to publish their service offers and relevant information to the marketplace. The published information can be structured and managed by the marketplace, which typically contains business information of service providers, usage conditions, and cost of the service offerings. Second, the service marketplace allows service consumers to discover services through browsing the available service offers in different service categories or through search by content keywords.","Business processes are generally considered to be a sequence of activities performed within a company or an organization. In the context of this example, a process can be defined as a timely and logical sequence of activities that work on a process-oriented business object. In this example, workflows can be considered to be the portion of a work process that contain the sequence of functions and information about the data and resources involved in the execution of these functions. Thus, a workflow can be considered to be an automated representation of a business process.","Central to this example embodiment is the concept of context information. Context can be defined as any information that is used to characterize the situation of entities. An entity can be a person, a place, or an object that may be considered relevant to the interaction between a user and an application, including the user and application themselves. In certain examples, an entity can be a person, a place, an object, or any piece of data that may be considered relevant to the business process. For example, context can be used for adapting an architecture or application for use by a mobile device. In an example delivering information over the Internet, context information (e.g., device type) can be based on a W3C standard that facilitates delivering web content independent of the device.","In a web-based example, execution context can be defined as a set of attributes that characterizes the capabilities of the access mechanism, the preferences of the user, and other aspects of the context into which a web page is to be delivered. A goal of the context is to generate web content in a way that it can be accessed widely (e.g. by anyone, anywhere, anytime, anyhow). Another goal of the context can be to restrict access to content based on identity, location, time, or device, among other things. Considering context in web applications, this can be achieved because the application is aware of different environments and user settings.","Consolidated Context Model","A consolidated context model can be used within the service marketplace, as outlined in Table 1:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Context Category","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Customer Master Data","The category contains all information related to"]},{"entry":[{},"the customer of the service marketplace. Mostly,"]},{"entry":[{},"this in an organization that procured several"]},{"entry":[{},"licenses of the application."]},{"entry":["Industry","The category includes the industry in which the"]},{"entry":[{},"individual is located."]},{"entry":["Location and ","The category for all information about location"]},{"entry":["Compliance","and compliance. In this example, these"]},{"entry":[{},"categories are together, because they are"]},{"entry":[{},"strongly related."]},{"entry":["External Applications","Contains the external application of a person or"]},{"entry":[{},"organization."]},{"entry":["Entry Point into the","The entry point of the user who entered the"]},{"entry":["Service Marketplace","marketplace."]},{"entry":["User and Customer","Transaction history of user and customer."]},{"entry":"Transaction History"},{"entry":["User Master Data","The specific data of the individual who is logged"]},{"entry":[{},"on to the marketplace."]},{"entry":["Business Process","All actors involved in the current business"]},{"entry":["Actors","situation of the customer or user."]},{"entry":["Business Processes","Information about the current business process"]},{"entry":[{},"that the marketplace is embedded in."]},{"entry":["Time","Temporal information about the actors or the"]},{"entry":[{},"marketplace itself."]},{"entry":["Services","Information about services traded in the"]},{"entry":[{},"marketplace."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","110","105","105","115","120","125","130","135","140","145","150","160","165","100","105","110","105","100","105","100","105","100","110","130","165","130","115"]},"In this example, dynamic process model configuration based on execution context is implemented in a prototypical service marketplace. Within the service marketplace, a customized procurement lifecycle can be offered, which includes services discovery, pricing, Request for Quotation (RFQ), bargaining, ordering, and contracting.","In this example, the customer interaction process can be summarized as follows: a customer can access the marketplace from an external application, which in general brings in a solution scope or a business configuration to the marketplace. Based on the pre-existing configuration of those applications, the marketplace can be customized according to the differences of each customer. This context information can also be used to match the customer profile with other customer profiles. This can be referred to as the Community. Based on the Community, the process flow in the marketplace can differ.","Besides customer data, the service marketplace is also connected to an application backbone and a partner infrastructure. Because the application backbone cannot cover all demanded services, partners can make service offerings available on the platform. Therefore, the service marketplace provides information about which partners can offer which specific services. After completing the ordering process, the request will be sent to the application backbone infrastructure. Inside the backbone, the requested service can be carried out. Afterwards, a personalized customer solution will be constructed based on the content and service repository. Implementing the service solution at the customer finishes the depicted lifecycle of the marketplace process.","Architecture of the Service Marketplace",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["200","200","210","220","230","240","210","212","214","216","218","220","222","224","226","228"]},"In an example, the outermost component is the external factors agent . External factors can include factors that are beyond the control flow of the service marketplace architecture, such as the weather or the customer master data. The external factors agent  can be an active component and can have a unidirectional relation to the context module . In certain examples, values of the context are based on corresponding external factors and the external factor agent  writes external factors into the context module . In these examples, the external factors are not dependent on context.","In an example, the outermost component of the service marketplace application  is the context module . In this example, the context module  can be a passive component and is created and modified based on the external factors agent . Though inside the service marketplace application , the context module , and thus the context data, is beyond the control flow of the application. In addition to the context module , some example embodiments include a context administration agent (not shown) that can provide functionality to keep the context structure extensible and modifiable. The context administration agent can interact with presentation layer  to facilitate the context administration using a graphical user interface (GUI). Thus, the context structure can be changed by an authorized user role using the context administration agent. In an example, the authorized user role can be either the application administrator or a particular context engineer who is just responsible for maintaining the context.","In an example, the rules engine  is an intermediary between the context module  and the four-tier architecture system . Based on the rules stored in the rule base , the context module  can be used to adapt the service marketplace application . Thus, the rule administration module  compares the values in context module  and rule base  and, based on the results of the comparison, can adapt all layers of the four-tier architecture system . Additionally, within some examples, the rules engine  encompasses two administration user interfaces , . The direct administration user interface  and the graphical administration user interface  can provide the ability to modify the adaptation rules stored in the rule base . In addition, both administration user interfaces ,  know where to put the new rule in the existing rule hierarchy. In certain examples, the administration user interfaces ,  can be accessed only by the application administrator or by a particular rule engineer whose responsibility is to maintain the rule base. The graphical administration user interface  can provide the rule engineer with a GUI to edit the rule base . Using the direct administration user interface , a rule engineer can directly access the rule base. Direct access to the rule base  may allow for more complex rule structures to be created, which may require some knowledge about the concrete rule syntax.","In an example, the four-tier architecture system  portion of the service marketplace application  can be adapted by the rule administration module  at the presentation layer , the process layer , the business layer  and the persistence layer  using the rule base , information from the rule base , and the context module . In an example, the presentation layer  hosts the user interfaces ,  and can provide access to the process layer  and business layer . The process layer can be in between the user interfaces (presentation layer ) and the business logic in the business layer  and can have interactions with both actors. In certain examples, the business logic in the business layer  is the only layer that can interact with the persistence layer.","Conceptual Overview","Complex process models may comprise a large number of tasks. Each of the tasks within a particular process model may or may not be used during a particular execution of the process. For example, only a subset of the defined tasks may be used, but often the decision regarding which tasks requires information which is only available during execution. Historically, these decisions are based on hard-coded parameters or through user interaction. In an example, an aggregation of the various sources of user information comprising an execution context related to the process model can be used as a basis for a dynamic process model (and thus workflow configuration). The execution context can be extensible and may change at run-time.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 3A-3C","b":["300","300","300"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3A","b":["300","300","310","320","300"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3B","b":["300","300","310","320","330","300","330"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3C","b":["300","300","310","320","330","340","350","350","340","300","300"]},"Example Implementation","An example implementation of the service marketplace architecture uses the jBPM process engine (from JBoss, by Red Hat, Inc. of Raleigh, N.C.). jBPM is based on plain Java\u2122 software code and, thus, can easily be integrated into an existing Java\u2122 based architecture. Behind the workflow, there is the concept of a state machine and especially Petri nets (place\/transition net).  is a block diagram of the four tier architecture  with the components of a process layer extracted, according to an example embodiment. A system  includes a presentation layer , a process layer , and a business layer . In an example, the process layer  includes a page flow engine  and a process flow engine . In this example, system  shows an extract of the entire service marketplace application  and depicts how the process layer  is embedded in the four-tier architecture .","In an example, the page flow engine  of jBPM interacts with the presentation layer . The process flow engine  can collaborate with the business layer  of the architecture. The jBPM process engine can persist data related to the workflow or process flow in a database (not shown). Persisting the workflow data can guarantee that the workflow can outlast multiple sessions, thereby assisting in supporting workflow that spans more than one session and more than one logged in user.","An example difference between business processes and page flows within an example programming framework involves the concept of spanning sessions. A page flow can refer to one single conversation. The component of such a conversation may be a short-running interaction with a single user. Thus, the page flow steers the page navigation in terms of which pages to which the user is permitted to navigate, based on the current conversation. In contrast, the business process can span multiple conversations and multiple users. In an example, the page flow is stored in the session context, while the business process is persisted in the database.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","b":["500","510","520","530","540","550","560","570","540","542","544"]},"The workflow  depicts one subset of the ordering process inside the service marketplace and depicts adding one service to the shopping basket. Whether the price of the service is negotiable or not determines whether an RfQ has to be send or the service can simply be added to the basket, respectively. The workflow  begins at  with a decision or branching point that determines whether the price of the selected service is negotiable. In an example, if the price is fixed, the workflow  can continue at  with the user adding the item to the virtual shopping basket. In this example, the workflow  then terminates at  with the item added to the basket.","In an example where the price is negotiable, the process is slightly more complex. In this example, the workflow continues at  where an RfQ can be sent to a provider. At , the workflow  can continue, with the provider deciding whether to send a quotation to the customer at  or to reject the RfQ directly at . If the provider chooses to reject the RfQ at , then the workflow  ends at  with the RfQ rejected by the provider. In some examples, the customer can be notified of the rejected RfQ. If the provider sends a quotation back to the customer at , the negotiation process has started. In this example, once the customer receives the quotation from the provider, the customer decides whether to accept the quotation at . In an example, at , the customer can reject the RfQ, propose a new price to the provider, or accept the RfQ from the provider. In the example depicted by workflow , only the provider can finally reject the RFQ. However, in other examples, the customer can finally reject an RFQ as well. At , if the customer accepts the quotation, the workflow finishes at  with the service added to the basket. The workflow  ends either when the provider rejects the RFQ or when the customer accepts the quotation of the provider.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4B","FIG. 4B","FIG. 9"],"b":["210","400","410","420","430","420","422","424","400","440","405","442","420","440","510","400","210"]},"System Architecture",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 6","b":["600","600","610","615","620","600","605","610","615","600","630","640","650","660"]},"The process engine  executes the business process models, which can be stored in the business process model database . The process engine  can work in conjunction with the rules engine  to enable dynamic configuration at run-time for process models executed by the process engine . The rules engine  can be used to evaluate decision points or gates within a process model. The rules engine  communicates with the context engine  to obtain relevant context information when evaluating decision gates. A decision gate can include a rule that when applied to a step in the process causes the process to change process flow or select a different process variant.","In an example, the context engine  communicates with various external systems  to maintain context information relevant to the business process models. As discussed above, context information can include anything relevant to the execution of a business process, such as people, places, things, environmental conditions, financial data, and so forth. The external systems  can include systems internal to an organization, such as customer relationship management (CRM) systems, supplier relationship management (SRM) systems, human resource systems, enterprise resource planning (ERP) systems, or internal logistics systems. The external systems  can also include systems that may be external to an organization, such as weather information systems, shipment tracking systems, stock market data systems, news reporting systems, or credit reporting systems, among others. Context information can be received from external systems  automatically (e.g., where the external systems push updates to the context engine ) or via some sort of polling mechanism (e.g., where the context engine  requests updated information on a pre-determined schedule). Context information can be retrieved through protocols such as XML, HTTP, or SOAP, among others. The context engine  can utilize Web Services type applications to retrieve context information as well.","Methods",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 7","b":["700","700","710","720","730","700","705","722","724","700","710","610"]},"At , the method  continues with the rules engine  evaluating a decision gate within the business process model being executed by the process engine . In the mortgage application example, the decision gate may be evaluating the prospective borrower's credit score. At , the method  continues with the process engine  configuring the business process model based on the rules engine  evaluating a decision gate. For example, based on the outcome of the credit score evaluation, the mortgage application process may select from a number of variants that include different levels of required additional financial information. In an example, the process engine  can select from the available process variants or process branches, based on evaluation by the rules engine . For example, if the prospective borrower's credit scores are low, the process engine , while executing the mortgage application process, may select a variant that requires a larger amount of supporting financial information about the borrower.","In certain examples, the method  can include operation  where the rules engine  obtains a current context from the context engine  as part of operation . In the mortgage application example, the credit score is context information. Additional examples of context that can be obtained from the context engine  and used by the rules engine  include user interface configurations, such as for color-blind persons, mobile devices, or different locations (e.g., time zone, currency, etc.); functional attributes of a system, such as routing information; personal information, such as age, gender, occupation, or marital status; and environmental information, such as weather or traffic information. At , the method  continues with the rules engine  applying the current context to the decision gate from operation . The current or relevant context can refer to a portion of the context information available from the context engine  that is relevant or applicable to the decision gate being evaluated by the rules engine .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8","b":["800","800","800","800","800","800","800","800","802","804","806","808","810","812","800","820","822","824","826","800","830","832","834","836","838","800","840"]},"In an example, the method A begins at  with the process engine  authenticating an executing user or system. At , the method A continues with the process engine  initializing execution of the process model. Initialization can include requesting context information from the rules engine . For example, the process engine  can query the rules engine  for general execution parameters associated with the process model. In this example, the rules engine  can process the method B to obtain SLA and UI requirements for the process model from the context engine . The method B, which illustrates obtaining context information, is described below. At , the method A continues with the process engine  starting the process to be executed. At , the method A continues with the process engine  executing the process. At , the method A continues with the process engine  sending a request for the rules engine  to get context and evaluate a rule or rules associated with a decision gate. Once the decision gate has been evaluated by the rules engine , the process engine  can configure the process based on information provided by the rules engine .","Process execution at  can include looping through operations  and  multiple times to evaluate various decision gates in the process. For example, a process for sourcing a construction commodity may include multiple variants that depend on decision gates for delivery time, required quality, site location, or pricing. Each of the various decision gates will trigger the method A to execute operations  and . For example, in a shipping process model, a decision gate regarding shipment via air transport or surface transport can trigger operation  and .","The method B begins at  with the rules engine  determining a relevant context based on the decision gate or initialization request communicated by the process engine . Operation  can be triggered by the method A when initializing execution of a process at  or during process execution when a decision gate needs to be evaluated at operation . For example, a rule within the shipment process model mentioned above can include determining shipment size, weight, and weather conditions to determine a mode of transportation. At , the method B continues with the rules engine  getting context information from the context engine . In the shipment example, the context information can include size and weight of the shipment and weather conditions along both the air and surface routes. At , the method B continues with the rules engine  applying the context information to rules in evaluation of a decision gate or in initializing the process to be executed by method A. Application of the context information in the shipment example may result in weather along the air route causing the shipment to be routed via surface transportation. At , the method B finishes with the rules engine B posting a decision based on the context information.","The method C begins at  with the context engine  initializing available context information by gathering up to date context information from the external systems . In an example, the method C includes three parallel operations , , and . The method C can also be started prior to execution of the related methods A and B in order to ensure that context information is available. At , the method C continues with the context engine  polling for context. In some examples, the context engine polls various external systems  to update context information. For example, in the shipment process model discussed above, the context engine  can poll the National Weather Service to weather information along air and surface transportation routes. At , the method C runs another of the parallel processes with the context engine  listening for context changes. In certain examples, the external systems  push or post updates to the context engine . At , the method C runs the last of the parallel operations, with the context engine  listening for requests from the rules engine . In the shipment process model example, the context engine  receives a request for shipment size, weight, and weather information along shipment routes. In certain examples not shown, the process engine  can directly request context information from the context engine . At , the method C finishes with the context engine  posting context information to the rules engine . In the shipment process example, the context engine  can post context values associated with the shipment, such as 2.9 m, 19.9 kg, and winds NE at 8.","The method D includes a single operation that encompasses all that is necessary for the various external systems  to provide context information to the context engine . As described above, the external systems  can provide context information through a wide variety of mechanisms.","Dynamic Process Example",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 9","b":["900","900","900","900","902","904","906","905","910","912","914","920","930","932","934","940","950"]},"In this example, the method  begins at  with the process engine  initializing execution of the shipping process model. Initialization can include the process engine  sending a query to the rules engine  to obtain SLA and UI requirements for the shipping process model. The method  continues at  with the rules engine  processing the query for SLA and UI requirements. In an example, the rules engine  sends a query to the context engine  to obtain current SLA and UI information based on the current execution context for the shipping process model. At , the context engine  obtains and returns SLA and UI requirements to the rules engine . In an example, the context engine  can obtain the requested SLA and UI information from the context information gathered through the process outlined in method C, discussed above in reference to . The context engine  may access external systems , such as a purchasing system, to obtain SLAs applicable to the shipping process model being executed. In certain examples, the context engine  uses a Web Service to communicate with the purchasing system via SOAP messages to receive the SLA information.","At , the method  continues with the process engine  receiving information regarding the shipment destination. The shipment destination was previously unknown in this process model and, as will be shown below, this dynamic piece of information affects the relevant context for this process model. The method  continues at  with the process engine  evaluating a decision gate. Evaluation of the decision gate includes the process engine  sending a query to the rules engine . At , the rules engine  evaluates rule(s) associated with the decision gate. In this example, the rules are used to determine whether the target package is shipped via air or surface transportation. The example rules are as follows:","IF shipment.size <3 m; shipment.weight <20 kg; and","weather.wind.customer.location <7; THEN \u201cAIR\u201d ELSE \u201cSURFACE\u201d","The rules engine  sends a query to the context engine  to obtain the context information needed to evaluate the rule(s). In this example, the delivery location was unknown at initialization. Thus, the context engine extends the current context relevant to this process model to include weather information at the delivery location. Context information can also be extended to include relevant weather conditions along delivery routes for both air and surface transportation routes. Additionally, the context information can be extended further to include traffic information along multiple surface transportation routes, among other things.","If the context engine  returns information regarding the shipment such as size is 2.3 m, weight is 19 kg and wind at delivery location is under 7, then the method  finishes at  with the process engine  determining that the package will be forwarded via air transport. However, if the context engine  returns (posts) context values such as size is 2.9 m, weight is 17.6 kg, and wind at delivery location is 23, then the method  continues at  with the process engine  determining, based on rule evaluation by the rules engine , that the package can be sent via surface transportation. In this example shipment process model selecting a surface transport mode can include an additional decision gate at . The additional decision gate at  configures the shipment process model to handle different SLA requirements. At , the process engine  sends a query to the rules engine  to evaluate rules associated with transportation via surface transport modes. At , the rules engine  evaluates SLA rules, such as the following:","IF SLA is considered \u201cstrict\u201d THEN \u201cExpress\u201d ELSE \u201cRegular\u201d","In this example, the rules engine  sends a query to the context engine  to determine whether the current shipment SLA is considered \u201cstrict.\u201d Determination of whether the current SLA is \u201cstrict\u201d may require the rules engine  to evaluate additional context information, from the context engine , such as inventory or production orders. The context engine  may need to update context information from various external systems  in order to obtain inventory or production order data. For example, the context engine  may need to poll the inventory control system to determine how critical the current shipment is to meet production demand. This additional information is another example of extending the execution context during run time.","In the example illustrated by , the rules engine  obtains SLA information from the context engine  to determine that the SLA is strict. At , the method  continues with the context engine  extending the execution context to include additional information regarding shipment via express surface transport. For example, the execution context may be extended to include information regarding preferred freight vendors. In this example, the context engine  can obtain freight vendor information from a customer relationship management (CRM) or sales relationship management (SRM) system (example external systems ). At , the method  can finish by forwarding the shipment via an express surface transport provider as indicated by the context engine .",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 10","FIG. 10","FIG. 9","FIG. 9"],"b":["1010","1010","1010","1020","1030","1040","1050","900","615","1040","1042","1044","615","1010","1060","1070"]},"Modules, Components and Logic","Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., a standalone, client, or server computer system) or one or more hardware modules of a computer system (e.g., a processor or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.","In various embodiments, a hardware module may be implemented mechanically or electronically. For example, a hardware module may comprise dedicated circuitry or logic that is permanently configured (e.g., as a special-purpose processor, such as a field programmable gate array (FPGA) or an application-specific integrated circuit (ASIC)) to perform certain operations. A hardware module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically, in dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software) may be driven by cost and time considerations.","Accordingly, the term \u201chardware module\u201d should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired) or temporarily configured (e.g., programmed) to operate in a certain manner and\/or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one instance in time. For example, where the hardware modules comprise a general-purpose processor configured using software, the general-purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor, for example, to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.","Hardware modules can provide information to, and receive information from, other hardware modules. Accordingly, the described hardware modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses) that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times, communications between such hardware modules may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example, one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then, at a later time, access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices, and can operate on a resource (e.g., a collection of information).","The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may, in some example embodiments, comprise processor-implemented modules.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or more processors or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment or as a server farm), while in other embodiments the processors may be distributed across a number of locations.","The one or more processors may also operate to support performance of the relevant operations in a \u201ccloud computing\u201d environment or as a SaaS. For example, at least some of the operations may be performed by a group of computers (as examples of machines including processors), these operations being accessible via a network (e.g., the Internet) and via one or more appropriate interfaces (e.g., APIs).","Electronic Apparatus and System","Example embodiments may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of these. Example embodiments may be implemented using a computer program product, e.g., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable medium for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers.","A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","In example embodiments, operations may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method operations can also be performed by, and apparatus of example embodiments may be implemented as, special purpose logic circuitry, for example, a field programmable gate array (FPGA) or an application-specific integrated circuit (ASIC).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In embodiments deploying a programmable computing system, it will be appreciated that both hardware and software architectures require consideration. Specifically, it will be appreciated that the choice of whether to implement certain functionality in permanently configured hardware (e.g., an ASIC), in temporarily configured hardware (e.g., a combination of software and a programmable processor), or a combination of permanently and temporarily configured hardware may be a design choice. Below are set out hardware (e.g., machine) and software architectures that may be deployed, in various example embodiments.","Example Machine Architecture and Machine-Readable Medium",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 9","b":"900"},"The example computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory , and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computer system  also includes an alphanumeric input device  (e.g., a keyboard), a user interface (UI) navigation device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","Machine-Readable Medium","The disk drive unit  includes a machine-readable medium  on which is stored one or more sets of data structures and instructions (e.g., software)  embodying or utilized by any one or more of the methodologies or functions described herein. The instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , with the main memory  and the processor  also constituting machine-readable media.","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d may include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more data structures and instructions . The term \u201cmachine-readable medium\u201d shall also be taken to include any tangible medium that is capable of storing, encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present embodiments of the invention, or that is capable of storing, encoding or carrying data structures utilized by or associated with such instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media. Specific examples of machine-readable media include non-volatile memory, including by way of example semiconductor memory devices, e.g., Erasable Programmable Read-Only Memory (EPROM), Electrically Erasable Programmable Read-Only Memory (EEPROM), and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.","Transmission Medium","The instructions  may further be transmitted or received over a communications network  using a transmission medium. The instructions  may be transmitted using the network interface device  and any one of a number of well-known transfer protocols (e.g., HTTP). Examples of communication networks include a local area network (LAN), a wide area network (WAN), the Internet, mobile telephone networks, Plain Old Telephone (POTS) networks, and wireless data networks (e.g., WiFi and WiMax networks). The term \u201ctransmission medium\u201d shall be taken to include any intangible medium that is capable of storing, encoding or carrying instructions for execution by the machine, and includes digital or analog communications signals or other intangible media to facilitate communication of such software.","Thus, a method and system for making contextual recommendations to users on a network-based marketplace have been described. Although the present embodiments of the invention have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the embodiments of the invention. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.","Although an embodiment has been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof show by way of illustration, and not of limitation, specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description, therefore, is not to be taken in a limiting sense, and the scope of various embodiments is defined only by the appended claims, along with the full range of equivalents to which such claims are entitled.","Such embodiments of the inventive subject matter may be referred to herein, individually and\/or collectively, by the term \u201cinvention\u201d merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus, although specific embodiments have been illustrated and described herein, it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. Combinations of the above embodiments, and other embodiments not specifically described herein, will be apparent to those of skill in the art upon reviewing the above description.","All publications, patents, and patent documents referred to in this document are incorporated by reference herein in their entirety, as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference, the usage in the incorporated reference(s) should be considered supplementary to that of this document; for irreconcilable inconsistencies, the usage in this document controls.","In this document, the terms \u201ca\u201d or \u201can\u201d are used, as is common in patent documents, to include one or more than one, independent of any other instances or usages of \u201cat least one\u201d or \u201cone or more.\u201d In this document, the term \u201cor\u201d is used to refer to a nonexclusive or such that \u201cA or B\u201d includes \u201cA but not B,\u201d \u201cB but not A,\u201d and \u201cA and B,\u201d unless otherwise indicated. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein.\u201d Also, in the following claims, the terms \u201cincluding\u201d and \u201ccomprising\u201d are open-ended, that is, a system, device, article, or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover, in the following claims, the terms \u201cfirst,\u201d \u201csecond,\u201d and \u201cthird,\u201d etc. are used merely as labels, and are not intended to impose numerical requirements on their objects.","The Abstract of the Disclosure is provided to comply with 37 C.F.R. \u00a71.72(b), requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Some embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
