---
title: Localization in distributed computer environments
abstract: A method and system for providing client locale information to a server in a distributed computer enterprise. When a client generates a request to a remote server, the client's locale and time zone information, known as the international context, is associated with the request. The server then processes requests from the client according to the internationalization context. The client's international context is propagated to successive servers that further service the client's request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603403&OS=07603403&RS=07603403
owner: International Business Machines Corporation
number: 07603403
owner_city: Armonk
owner_country: US
publication_date: 20010530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Field of the Invention","The present invention relates to a distributed computer enterprise and more particularly to a system and method for performing locale-sensitive operations on a remote server.","2. Description of the Related Art","Large organizations now desire to place all of their computing resources on a computer network. To this end, it is known to connect computers in a large, geographically dispersed network environment and to manage such an environment in a distributed manner. Illustratively, one such management framework consists of a server that manages a number of nodes, each of which has a local object database that stores object data specific to the local node. Each managed node typically includes a management framework, comprising a number of management routines that is capable of a relatively large number of simultaneous network connections to remote machines. The framework manages hundreds of megabytes of local storage and can spawn many dozens of simultaneous processes to handle requests from local or remote users.","In a conventional distributed computer environment it is often assumed that a server and its clients are operating in the same locale. This assumption no longer holds true for e-business and web applications. Managed nodes are often located across national boundaries. Thus, a typical managed network of the type described above may include offices located in numerous countries. Due to the worldwide acceptance of the Internet, a server is now more likely than ever to be physically located across a time zone from a remote user. It is also likely that the remote user will make a request that requires using cultural formatting conventions that are different from those of the server's locale. Conventionally, when a server processes a request from a remote user, the server will treat the request as if it occurred in the locale of the server. Without regard to the locale of the remote user, the server will impose its own local conventions when generating the results from the remote request. The remote user then receives the results of the request in a format that is unfamiliar to the user.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1","b":["102","104","106","102","108","104"]},"A possible solution to the conventional method is to add an extra parameter to all locale sensitive requests for conveying remote user internationalization context to the server. The parameter-addition solution, though outwardly simple, is intrusive, error prone and has serious limitations in real-life enterprise environments. For already deployed distributed applications, it is not possible to change interfaces for the introduction of extra parameters without incurring substantial network management overhead. Further, some protocols\/languages will not support an extra parameter. For example, structured query language (SQL) queries do not have a placeholder to accommodate locale or time zone information.","Therefore, there is a need for a method and system for a server to process a user request using user specific internationalization context. There is also a need for such a method and system that can easily be implemented in a distributed computer network.","Embodiments of the present invention generally provide an article of manufacture, method and system for processing remote client requests in a distributed computer network using the client's specified locale conventions. In one embodiment, a system in a distributed computing environment has a plurality of nodes across geographically dispersed boundaries. The system comprises a server configured with an internationalization application programming interface configured to extract an internationalization context provided by a client device. A resource manager (e.g., application server, database management system, etc.) is configured to receive the internationalization context extracted by the server and process a request received from the client device using the internationalization context.","The internationalization process, which when executed by a processor of the server computer, processes requests from a client computer according to an internationalization context provided by the client.","In another embodiment, a server computer receives a first request from a remote client computer. Illustratively, the server computer then receives a second request from the client computer wherein the second request comprises an internationalization context comprising the client's preferred conventions for processing the first request. The server computer associates the second request with the first request for every thread of processing.","In still another embodiment, a server computer in a distributed computing environment receives an internationalization context from a client computer. The server then processes further requests from the client computer according to the internationalization context.","In still another embodiment, a server computer parses a message from a client computer wherein the message contains internationalization context. The server computer provides the internationalization context to an application. The internationalization context configures the application to process a request from the client computer according to the internationalization context.","In still another embodiment, a server computer configured with a default locale and time zone setting parses a first request from a client computer. The server computer also parses a second request from the client computer wherein the second request comprises an internationalization context. The internationalization context comprises a user specified locale and time zone specification. The server computer extracts the internationalization context from the second request and then processes the first request using the internationalization context.","In still another embodiment, a computer data signal embodied in a transmission medium comprises internationalization context. Illustratively, the internationalization context comprises at least a locale specification and a time zone identifier. The internationalization context is used to configure a processor of a computer to process requests according to the internationalization context.","In yet another embodiment, a method of transparently propagating internationalization context information is provided. The method comprises receiving, at a first computer, a first request from a second computer, the first request including an internationalization context; extracting the internationalization context from the first request; and associating the internationalization context with a thread executing at the first computer. In one embodiment, the internationalization context contains at least a locale specification and a time zone identifier.","In still another embodiment, a method of transparently propagating internationalization context information to an application associated with an application interface is provided. The method comprises generating a main body of a request and attaching an internationalization context to the main body, wherein the internationalization context is not added to the application interface. In one embodiment, the internationalization context contains at least a locale specification and a time zone identifier.","The present embodiments provide an article of manufacture, a method and a system for processing remote user requests in a distributed computer network using the remote user's specified locale conventions. In one embodiment, the user's locale specific information, called the internationalization context, comprising the remote user's locale and\/or time zone information, is sent to a server. The server extracts the remote user's internationalization context from the request and processes the remote user's request per the specified locale and\/or time zone conventions. If the remote user's request is forwarded to another server, the internationalization context comprising the user's locale conventions propagates with the client's request to the other server. The internationalization context will continue to propagate to successive servers if further processing of the client's request is needed.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","200","212","214","214","214","216","218","214","210"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3A","b":["216","320","320","310","330","350","370","320","390","310","219","216","217","217","216","216"]},"The system management framework includes a client component  supported on each of the endpoint machines . The client component  is a low cost, low maintenance application suite that is preferably \u201cdata-less\u201d in the sense that system management data is not cached or stored there in a persistent manner. Implementation of the management framework in this \u201cclient-server\u201d manner has significant advantages over the prior art, and it facilitates the connectivity of personal computers into the managed environment. Using an object-orientated approach, the system management framework facilitates execution of system management tasks required to manage the resources in the MR.","In a large computer enterprise such as illustrated in , preferably there is one server per MR with some number of gateways. For a workgroup-size installation  (a local area network, for example) such as illustrated in , a single server class machine  may be used as the server and gateway to a plurality of terminal nodes . References herein to a distinct server and one or more gateway(s) should thus not be taken by way of limitation as these elements may be combined into a single platform. For intermediate size installations, the MR grows with additional gateways then being used to balance the load of the endpoints.","The server  is the top-level authority over all gateway and endpoints. The server maintains an endpoint list, which keeps track of every endpoint in a managed region. This list preferably contains all information necessary to uniquely identify and manage endpoints including, without limitation, such information as name, location, and machine type. The server also maintains the mapping between endpoints and gateways, and this mapping is preferably dynamic.","Illustratively, there are one or more gateways per managed region. Preferably, a gateway is a fully managed node that has been configured to operate as a gateway. Initially, a gateway \u201cknows\u201d nothing about endpoints. As endpoints login, the gateway builds an endpoint list for its endpoints. The gateway's duties preferably include listening for endpoint login requests, listening for endpoint update requests, and acting as a gateway for method invocations on endpoints.","The endpoint is a machine running the system management framework client component, which is referred to herein as a management agent. The management agent has two main parts, the daemon and application runtime library , as illustrated in . The daemon is responsible for endpoint login and for spawning application endpoint executables. Once an executable is spawned, the daemon has no further interaction with it. Each executable is linked with the application runtime library , which handles all further communication with the gateway.","Preferably, the server and each of the gateways are a computer or \u201cmachine\u201d. As an illustration, each computer may be a RISC (reduced instruction set computer) System\/6000\u00ae running AIX (Advanced Interactive Executive) operating system. Suitable alternative machines include an IBM-compatible PC running Novell UnixWare or an AT&T 3000 series machine running AT&T UNIX. Other machines and\/or operating systems may be used for the gateway and server machines.","Each endpoint is also a computer. In one embodiment, the endpoints are personal computers such as desktop machines, laptops, hand-held personal digital assistants (PDA) or the like. The endpoints need not be high powered or complex machines or workstations. Illustratively, one or more of the endpoints may be a notebook computer, for example, the IBM ThinkPad\u00ae machine, some other Intel x86 or Pentium\u00ae-based computer running the Windows operating system or IBM-compatible machines running under the OS\/2\u00ae operating system. An endpoint computer preferably includes an Internet client navigation program such as Netscape Navigator or Microsoft Internet Explorer. An endpoint computer thus may be connected to a gateway via the Internet, an Intranet or some other computer network. The connection to a gateway may be wireless using radio frequency energy, visible or non-visible light emissions or through a hard-wire link.","Moreover, while the embodiments have and hereinafter will be described in the context of fully functioning computers and computer systems, those skilled in the art will appreciate that the various embodiments of the invention are capable of being distributed as a program product in a variety of forms, and that embodiments of the invention apply equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of computer readable storage medium include, but are not limited to, recordable type media such as volatile and nonvolatile memory devices, floppy and other removable disks, hard disk drives, optical disks (e.g., CD-ROMs, DVDs, etc.). Transmission type media include information conveyed to a computer by a communications medium, such as through a computer or telephone network, and includes wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal-bearing media, when carrying computer-readable instructions that direct the functions of the present invention, represent embodiments of the present invention.","In one embodiment, a computer system operative in the managed environment provides client locale and time zone information, collectively called the internationalization context, to a server and every thread of execution within an application performed at the server. When a client invokes a remote operation at a remote server, the internationalization context associated with the current thread is sent along with the outgoing request. The server detaches the internationalization context from the incoming request and associates it with the thread on which the remote operation will execute. The server then uses the information in the internationalization context for every locale sensitive process performed on the client request. If the server propagates the request to another server or database manager for further processing, the internationalization context associated with the request will also be propagated.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["506","502","506","1","510","510","512","514","506","506"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 6A","FIG. 6B"],"b":["600","600","610","612","602","610","602","614","616","618","614","616","618","600","600","610","612"]},"In one embodiment, the internationalization context  may be implemented as a common object, processed by the ORB  (see ) within CORBA (common object request broker architecture). CORBA is an architecture that enables pieces of programs, called objects, to communicate with one another regardless of what programming language they were written in or what operating system they are running on. There are several implementations of CORBA, the most widely used being IBM's SOM (system object model) and DSOM (distributed system object model) architectures. SOM is an architecture developed by IBM that allows binary code to be shared by different applications. DSOM is a version of SOM that supports sharing binary objects across networks.","The Netscape Internet Web browser has also embraced CORBA. Following is an example of pseudo-code for a CORBA interface to the internationalization context:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 Resolve a CORBA Object reference for the Internationalization"},{"entry":"Service Current interface by calling ORB method"},{"entry":"resolve_initial_reference( )."},{"entry":"002 Narrow the reference to the Current interface by calling method"},{"entry":"narrow( ) on a CurrentHelper class."},{"entry":"003 Specify locale and time zone by calling Current interface methods"},{"entry":"set_locale( ) and set_timezone_id( )."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In another embodiment, the internationalization context may be implemented in a JAVA computing language environment. As is known in the art, JAVA is an object-oriented, multi-threaded, portable, platform-independent, secure programming environment used to develop, test and maintain software programs. These programs include full-featured interactive, standalone applications, as well as smaller programs, known as applets, that are executed by a JAVA virtual machine (JVM).","The internationalization context may be implemented from a server  (see ) to a resource manager  using the J2EE EJB connector architecture. J2EE (JAVA version-2 enterprise edition enterprise JAVA Beans) is a platform-independent, JAVA-centric environment from Sun for developing, building and deploying Web-based and distributed enterprise applications on-line. The J2EE platform consists of a set of services, API's and protocols that provide the functionality for developing multi-tiered, Web-based and distributed computer system enterprise applications. The following illustrates one example of pseudo-code for a JAVA J2EE EJB encoded interface to the internationalization context.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE II"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"001 Resolve a Java Object reference to the Internationalization Service"},{"entry":"UserInternationalization interface by performing a JNDI (Java Naming and"},{"entry":"Directory Interface) lookup for the URL of a UserInternationalization"},{"entry":"interface on an InitialContext object."},{"entry":"002 Narrow the reference to the UserInternationalization interface by"},{"entry":"invoking method narrow( ) on RMI-IIOP PortableRemoteObject object."},{"entry":"003 Call UserInternationalization method"},{"entry":"getInvocationInternationalization( ) to obtain a reference to"},{"entry":"InvocationInternationalization interface."},{"entry":"004 Specify invocation locale and time zone by calling"},{"entry":"InvocationInternationalization methods setLocale( ) and setTimezoneId( )."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As is evident from the foregoing exemplary interfaces, three steps are provided to implement a remote object within the CORBA and J2EE programming models. The three steps are (i) obtaining a reference to an interface, (ii) casting (i.e., narrowing) the remote reference to the appropriate interface type, and then (iii) utilizing the interface to perform a desired function. In the first step, an object reference to the \u201cII18nContext\u201d (Internationalization context) interface is provided by the internationalization service. (The term internationalization service as used herein is the implementation of the internationalization context over a distributed enterprise.) The interface to the internationalization service is made via a call to the ORB . In the second step, the object reference to the internationalization service is then narrowed. In the third step, the narrowed reference is used to manage the locale and time zone information contained in the internationalization context.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 7","b":["710","712","714","716","718","720","722"]},"At step , the routine queries if the locale information in the internationalization context is set to null data. If so, the routine places the locale information from the default setting of the client computer and places it in the internationalization context at step  and proceeds to step . If the internationalization context is not set to null data, the routine, at step , queries if the time zone information is set to null data. If so, the routine attempts to extract the time zone information from the current process environment at step  and proceeds to step . At step , the routine queries if the time zone information was successfully extracted from the current process environment. If so, the routine proceeds to step  where the time zone is set to the extracted time zone. If not, the routine proceeds to step  where the time zone is set to Greenwich Mean Time (GMT). The routine then proceeds to step .","At step , the information contained in the internationalization context is converted into serialized form and then placed with the outgoing request in RMI-IIOP form at step . The routine then proceeds to step  where the request is formatted to the server.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 8","b":["600","810","310","812","814","818","816"]},"At step , the routine queries if the locale information in the internationalization context is set to null. If so, the routine proceeds to step  where the default locale of the server is extracted and assigned as the locale for processing the request. If the locale information is not set to null, the routine, at step , queries if the time zone information is set to null. If so, the routine, at step , attempts to extract the time zone information from the current process environment. At step , the routine queries if the time zone information was successfully extracted. If not, the routine, at step , assigns GMT time as the time zone for the internationalization context. If so, the successfully extracted time zone information is assigned as the time zone of the internationalization context at step . At step , the information contained in the internationalization context is associated with the current thread making it available for processing the request.","Accordingly, the present embodiments provide for transmitting and processing internationalization information. Receiving machines (e.g., servers) are configured (e.g., with Application programming interfaces (APIs)) to provide the internationalization information to an application. The application may then use the internationalization information in preparing a response to a client or in order to perform processing in general. For example, the internationalization information may be used to format a response according user preferences. In another embodiment, the internationalization information may provide rules or conditions for calculations (e.g., preparing tax returns, e-Commerce transactions, etc.). In this manner, the present embodiments ensure meaningful network transactions that are sensitive to international diversity.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments thereof which are illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
