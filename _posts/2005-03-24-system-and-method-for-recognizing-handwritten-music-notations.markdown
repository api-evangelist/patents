---
title: System and method for recognizing handwritten music notations
abstract: A method and system for recognizing handwritten music notations is described. The method includes steps of recognizing notations within a notation category and receiving a plurality of input strokes corresponding to handwritten music notations. Nearby strokes may be grouped to a first input stroke of the plurality of input strokes to make a stroke set and the stroke set is compared with the notations in the notation category. A determination is made as to whether the stroke set is recognized as at least one candidate notation within the notation category, a candidate list of recognized candidate notations is provided, and a music score is generated based upon the recognized candidate notations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07432432&OS=07432432&RS=07432432
owner: Microsoft Corporation
number: 07432432
owner_city: Redmond
owner_country: US
publication_date: 20050324
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","A. Factoring","B. Redefinition","C. Inline Coding","D. Divorce","E. Rewriting"],"p":["Aspects of the present invention are directed generally to handwritten notation systems. More particularly, aspects of the present invention are directed to a method and system for recognizing handwritten music notes using a computer system.","The advent of the computer has boomed to a point of prolific use in a variety of different areas. Computers are used throughout the world for everything from controlling speed and direction in a vehicle, to making an online order for a new product, to allowing a young child to learn how to count or read. Within the business industry, the use of the computer has greatly increased the efficiency for performing tasks.","The evolution of computing devices, from data crunching devices that occupied entire floors of large office facilities, to laptop computers or other portable computing devices has dramatically impacted the manner in which documents are generated and information is stored. Portable computing capabilities have enabled individuals to type letters, draft memorandum, take notes, create images, and perform numerous tasks in places other than the office using these computing devices. Professionals and nonprofessionals alike are empowered to perform tasks while on the move using devices that fulfill their computing needs in any location.","With the advent of laptop computers and high-capacity personal data assistants, the office workspace has been expanded to include a variety of non-traditional venues in which work is accomplished. To an increasing degree, computer users must become masters of the divergent user interfaces for each of their computing devices. From a mouse and keyboard interface for the standard personal computer to the simplified resistive stylus interface of personal data assistants and even to the minimalistic keys of a cellular telephone, a user is confronted with a variety of different user interfaces that one needs to master before he can use the underlying technology.","Despite the advances in technology, most users tend to use documents printed on paper as their primary editing tool. Some advantages of printed paper include its readability and portability. Others include the ability to share annotated paper documents and the ease at which one can archive printed paper. One user interface that is bridging the gap between advanced computing systems and the functionality of printed paper is a stylus-based user interface. One approach for the stylus-based user interface is to use resistive technology (common in today's PDAs). Another approach is to use active sensors in a laptop computer.","One type of computer system in this area is a handwritten notation system. Handwritten notation systems allow a user to write words and letters in handwritten strokes while a computing system recognizes the strokes to form the intended words. With modern hardware and software, a user can write directly on her computer using an ink input. Many on-line handwriting recognition methods have been proposed in different character sets such as alphabets, digits, Chinese character set, and mathematical character sets. However, there is a real market need for methods and apparatuses that are designed for other types of symbol recognition.","There exists a need for the ability to recognize handwritten music notations to create a music score for playback by a computer. Aspects of the present invention provide a method including steps of recognizing notations within a notation category, receiving a plurality of input strokes corresponding to handwritten music notations, grouping at least one nearby stroke to a first input stroke of the plurality of input strokes to make a stroke set, comparing the stroke set with the notations in the notation category, determining whether the stroke set is recognized as at least one candidate notation within the notation category, providing a candidate list of recognized candidate notations, and generating a music score based upon the recognized candidate notations.","Another aspect of the present invention provides a system for recognizing handwritten music notations including a stroke sorter component configured to sort input strokes into an order, a category recognizer component configured to recognize notations within a category of music notations, a stroke grouping component configured to group an input stroke with nearby strokes into a stroke set, a notation recognizer component configured to compare the stroke set with notations within a category to determine whether the stroke set is recognized as a candidate notation and to generate a list of candidate notations, and a music score generation component configured to generate a music score based upon the list. The notation recognizer component may include a direct recognizer subsystem configured to compare the stroke set against notations with stems to generate the list. The notation recognizer component also may include a template matching recognizer subsystem configured to compare the stroke set against all other notations to generate the list.","In the following description of various illustrative embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which is shown, by way of illustration, various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, random access memory (RAM), read only memory (ROM), electronically erasable programmable read only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disc drive  that reads from or writes to a removable, nonvolatile optical disc  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disc drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a digital camera (not shown), a keyboard , and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a pen, stylus and tablet, microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface . A digitizer  and accompanying pen or stylus  are provided in order to digitally capture freehand input. Although a direct connection between the pen digitizer  and the user input interface  is shown, in practice, the digitizer  may be coupled to the processing unit  directly, via a parallel port or other interface and the system bus  as known in the art. Furthermore, although the digitizer  is shown apart from the monitor , the usable input area of the digitizer  may be co-extensive with the display area of the monitor . Further still, the digitizer  may be integrated in the monitor , or may exist as a separate device overlaying or otherwise appended to the monitor .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","A programming interface (or more simply, interface) may be viewed as any mechanism, process, protocol for enabling one or more segment(s) of code to communicate with or access the functionality provided by one or more other segment(s) of code. Alternatively, a programming interface may be viewed as one or more mechanism(s), method(s), function call(s), module(s), object(s), etc. of a component of a system capable of communicative coupling to one or more mechanism(s), method(s), function call(s), module(s), etc. of other component(s). The term \u201csegment of code\u201d in the preceding sentence is intended to include one or more instructions or lines of code, and includes, e.g., code modules, objects, subroutines, functions, and so on, regardless of the terminology applied or whether the code segments are separately compiled, or whether the code segments are provided as source, intermediate, or object code, whether the code segments are utilized in a runtime system or process, or whether they are located on the same or different machines or distributed across multiple machines, or whether the functionality represented by the segments of code are implemented wholly in software, wholly in hardware, or a combination of hardware and software.","Notionally, a programming interface may be viewed generically, as shown in  or .  illustrates an interface Interface as a conduit through which first and second code segments communicate.  illustrates an interface as comprising interface objects I and I (which may or may not be part of the first and second code segments), which enable first and second code segments of a system to communicate via medium M. In the view of , one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although  show bi-directional flow and interfaces on each side of the flow, certain implementations may only have information flow in one direction (or no information flow as described below) or may only have an interface object on one side. By way of example, and not limitation, terms such as application programming interface (API), entry point, method, function, subroutine, remote procedure call, and component object model (COM) interface, are encompassed within the definition of programming interface.","Aspects of such a programming interface may include the method whereby the first code segment transmits information (where \u201cinformation\u201d is used in its broadest sense and includes data, commands, requests, etc.) to the second code segment; the method whereby the second code segment receives the information; and the structure, sequence, syntax, organization, schema, timing and content of the information. In this regard, the underlying transport medium itself may be unimportant to the operation of the interface, whether the medium be wired or wireless, or a combination of both, as long as the information is transported in the manner defined by the interface. In certain situations, information may not be passed in one or both directions in the conventional sense, as the information transfer may be either via another mechanism (e.g. information placed in a buffer, file, etc. separate from information flow between the code segments) or non-existent, as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation, e.g., depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration, and so this list should be considered illustrative and non-limiting.","This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are, however, other ways to implement a programming interface, and, unless expressly excluded, these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of , but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown, some interfaces can be described in terms of divisible sets of functionality. Thus, the interface functionality of  may be factored to achieve the same result, just as one may mathematically provide 24, or 2 times 2 times 3 times 2. Accordingly, as illustrated in , the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA, InterfaceB, InterfaceC, etc. while achieving the same result. As illustrated in , the function provided by interface I may be subdivided into multiple interfaces I, I, I, etc. while achieving the same result. Similarly, interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I, I, I, etc. When factoring, the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of , the functional spirit of interfaces Interface and I remain the same as with , respectively. The factoring of interfaces may also follow associative, commutative, and other mathematical properties such that the factoring may be difficult to recognize. For instance, ordering of operations may be unimportant, and consequently, a function carried out by an interface may be carried out well in advance of reaching the interface, by another piece of code or interface, or performed by a separate component of the system. Moreover, one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.","In some cases, it may be possible to ignore, add or redefine certain aspects (e.g., parameters) of a programming interface while still accomplishing the intended result. This is illustrated in . For example, assume interface Interface of  includes a function call Square (input, precision, output), a call that includes three parameters, input, precision and output, and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario, as shown in , it could just as well be ignored or even replaced with a meaningless (in this situation) parameter. One may also add an additional parameter of no concern. In either event, the functionality of square can be achieved, so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system; however, once it is recognized that precision is not necessary for the narrow purpose of calculating the square, it may be replaced or ignored. For example, instead of passing a valid precision value, a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly, as shown in , interface I is replaced by interface I\u2032, redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I\u2032, redefined to ignore unnecessary parameters, or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects, such as parameters, which are not needed for some purpose, and so they may be ignored or redefined, or processed elsewhere for other purposes.","It may also be feasible to merge some or all of the functionality of two separate code modules such that the \u201cinterface\u201d between them changes form. For example, the functionality of  may be converted to the functionality of , respectively. In , the previous 1st and 2nd Code Segments of  are merged into a module containing both of them. In this case, the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus, for example, formal Call and Return statements may no longer be necessary, but similar processing or response(s) pursuant to interface Interface may still be in effect. Similarly, shown in , part (or all) of interface I from  may be written inline into interface I to form interface I\u2033. As illustrated, interface I is divided into Iand I, and interface portion Ihas been coded in-line with interface I to form interface I\u2033. For a concrete example, consider that the interface I from  performs a function call square (input, output), which is received by interface I, which after processing the value passed with input (to square it) by the second code segment, passes back the squared result with output. In such a case, the processing performed by the second code segment (squaring input) can be performed by the first code segment without a call to the interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in , one or more piece(s) of middleware (Divorce Interface(s), since they divorce functionality and\/or interface functions from the original interface) are provided to convert the communications on the first interface, Interface, to conform them to a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. This might be done, e.g., where there is an installed base of applications designed to communicate with, say, an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment, and so an intermediary is used to make the old and new interfaces compatible. Similarly, as shown in , a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to, for example, interfaces Iand I, redesigned to work with DI, but to provide the same functional result. Similarly, DI and DI may work together to translate the functionality of interfaces I and I of  to a new operating system, while providing the same or similar functional result.","Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example, there may be a system in which a code segment presented in an intermediate language (e.g. Microsoft IL, Java ByteCode, etc.) is provided to a Just-in-Time (JIT) compiler or interpreter in an execution environment (such as that provided by the .Net framework, the Java runtime environment, or other similar runtime type environments). The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment, i.e., to conform them to a different interface as may be required by the 2nd Code Segment (either the original or a different 2nd Code Segment). This is depicted in . As can be seen in , this approach is similar to the Divorce scenario described above. It might be done, e.g., where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed-base applications to the new interface of the operating system. As depicted in , this approach of dynamically rewriting the interface(s) may be applied to dynamically factor, or otherwise alter the interface(s) as well.","It is also noted that the above-described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways, serially and\/or in parallel, or with other intervening code. Thus, the alternative embodiments presented above are not mutually exclusive and may be mixed, matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that, as with most programming constructs, there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein, but nonetheless are represented by the spirit and scope of the invention, i.e., it is noted that it is at least partly the functionality represented by, and the advantageous results enabled by, an interface that underlie the value of an interface.","Embodiments of the present invention provide a method and system for on-line recognition of music notations, where the musical notation set contains more than 90 characters. With this system, users can write music notes directly on a computer and the computer can automatically recognize the music notes and play the music based on the recognition results.  illustrates an example of a handwritten music score , which is a solo score having a treble clef and a bass clef part. Musicians write music scores on staffs  that are sets of five horizontal lines to represent a sequence of pitches. A music score often consists of many parts, for example, a score for symphony can have more than 10 parts. As described in more detail below, the inputs of a music recognizer may contain a set of staffs and determined by some page setting operations and the ink strokes written by the musicians. The outputs of the music recognizer in accordance with at least one aspect of the present invention may be the semantic representations of each part of the score, which can be converted to a sequence of midi instructions for playing back. Midi instructions are instructions for a computer program to implement a specific task. In this case, the midi instructions instruct a computer to process a music score for output to a speaker and\/or a visual display device. For example, the first line of  is recognized to a stream of treble clef , key signature , time signature , half note , etc.  shows the recognition result  of .","As shown in , in a music score, there can be braces and brackets and straight line  at the beginning of the staff, which indicate that those staffs should be performed at the same time. In each staff there may be clef(s) and , key signatures and , time signature , and a series of notes  and  such as quarter-note, eighth-note, etc. To adjust the pitch, velocity and duration of a single note and describe the relationships between notes, some ornaments are used, such as slurs, staccato dots, augmentation dots, etc. The number of notes within a measure  is defined by the time signature . The rules and grammar of music notation and writing are well understood by those skilled in the art. Reference to each type of notation is not described herein as each are well known.","In music notation recognition, one problem to address is that the notations have high size variability. For example, an augmentation dot may be written only as a dot whereas a bracket may be written to cover many staffs. In accordance with at least one aspect of the present invention, music notations are categorized into one of seven groups based on the shapes, sizes and locations. Once again, these terms and symbols are well understood by those skilled in the art. The seven categories are:\n\n","As described in more details below, in accordance with at least one aspect of the present invention, a method and system for recognizing handwritten notations is provided. Upon receipt of the handwritten notations, an initial step may be to sort the input strokes into a descending order of stroke length. As such, longer, continuous strokes are placed higher in the order compared to shorter or dot strokes. Aspects of the present invention then perform operations to recognize the notations within a current category based upon the descending order of strokes. The categories may be one or more of the seven notation categories identified above. Once the notations within a current category are recognized, the system then may perform the following steps to each notation within each category.","First, for each stroke s, nearby strokes of sare grouped to make a stroke set S. Stroke set S may be sorted according to the distance a nearby stroke is from stroke s. Next, stroke set S is then compared against notations in the current category to determine whether it can be recognized. A system recognizer, in accordance with at least one aspect of the present invention, determines a list of candidate notations from the category. If the candidate list is empty, a last added nearby stroke of stroke set S may be removed and then the process may attempt to recognize the adjusted stroke set S\u2032. This process may continue until the adjusted stroke set S\u2032 is empty of strokes. Finally, a music score may be generated where the recognized notations are sorted according to music rules and the integrity of the music score is checked against music grammars. For example, if the music score includes notations that are not consistent with allowed groupings of notations within one measure, the system may be configured to correct for the problem and\/or alert a user of the problem.","The task of grouping nearby strokes to make a stroke set S is to find the nearby strokes of a given \u201cseed\u201d stroke s. The grouping result of this process may include more strokes than a notation within a category. The steps for grouping nearby strokes to make a stroke set S may include one or more of the following steps.  illustrate an example of grouping of strokes in accordance with at least one aspect of the present invention. As shown in , two strokes  and  are shown on staff lines . As used with reference to , stroke  is a seed stroke and stroke  is a nearby stroke s. A seed stroke is a stroke in which nearby strokes, such as nearby stroke s, are grouped. Staff lines  are separated by a distance \u201ca\u201d . Distance a  may be defined by the fact that the staff lines  are always separated by a predefined distance. Alternatively, if the staff lines  are handwritten strokes, distance a  may be calculated as an average distance between staff lines  and\/or a distance between staff lines  near seed stroke .","As shown in , a bounding box  of the seed stroke s is determined and bounding box  then is expanded by a distance of multiplying distance a  by a threshold value . As used in this example, the threshold value is 0.8. It should be understood by those skilled in the art that the threshold value  could be greater than or less than 0.8. Expanded bounding box  is thus determined.","Referring to , any unrecognized stroke that intersects the expanded bounding box  is considered a nearby stroke s . As shown,  includes one nearby stroke s . It should be understood that additional nearby strokes s may be included and that the present example of one nearby stroke s  does not limit the present invention to this example. The nearby strokes s  may then be sorted based upon the distance between the nearby stroke s  and the seed stroke s. For each nearby stroke s  and the seed stroke s, the distance d between the nearby stroke  and seed stroke s is defined as d=(d+d)\/2. In this example and as shown in , distance d is the minimum distance between an arbitrary point  of seed stroke s and an arbitrary point  of nearby stroke s . Distance d is the minimum distance between the arbitrary point  of seed stroke s and the centroid  of nearby stroke s . Stroke set S is defined as the seed stroke s and the nearby strokes s . Stroke set S may also be defined by a number of the order of nearby strokes s  so that the stroke set S may include the closest six nearby strokes s .","As described above, a notation recognition component compares a stroke set S against notations in a current category to determine whether the stroke set S can be recognized. The notation recognition component, in accordance with at least one aspect of the present invention, determines a list of candidate notations from the category. If the candidate list is empty, a last added nearby stroke of stroke set S may be removed and then the process may attempt to recognize the adjusted stroke set S\u2032. This process may continue until the adjusted stroke set S\u2032 is empty of strokes. The notation recognition component may utilize one or both of two subsystems for recognizing different notations, a direct recognizer subsystem and a template matching recognizer subsystem.","The direct recognizer subsystem is configured to recognize notations categorized within category 2 as described above, i.e., notes with stems, such as a \u00bd note, a \u00bc note, a \u215b note, a 1\/16 note, a 1\/32 note, a 1\/64 note, and a 1\/128 note.  illustrate examples of music notes and music notes with common beams. The direct recognizer subsystem may include one or more of the following steps. First, the first stroke in a stroke set is checked to determine whether it is a vertical line. This step may include checking the minimal bounding box of the stroke. If the ratio of the box's height and width is larger than a threshold number, such as 5, and the difference between the box's slant angle and the vertical axis is less than a threshold angle, such as 15 degrees, then the stroke may be considered a vertical line, a stem.","Next, the strokes near the top and bottom of the stem  are checked to determine the direction of the stroke. This step may include comparing the similarity of the stroke against a template note head  and a flag stroke(s) . In handwritten form, the note head is usually written as a slash-like stroke. Then, the pitch of the note is computed based upon the position of the note head . If the note head is out of the staff lines, the direct recognizer subsystem may determine the number of lines added between the note head and the staff to compute the pitch of the note. Finally, the duration of the note may be computed based upon the count of the flag stroke . If notes share common beams, such as shown in element  in , the strokes corresponding to the common beam are associated with each other for determining the duration. In the direct recognizer subsystem, the candidate list only has one candidate notation.","The template matching recognizer subsystem is configured to recognize notations categorized within remaining categories  and - as described above. In accordance with at least one aspect of the present invention, a reference library is maintained. The reference library includes templates. The templates may be standard templates that are widely known and understood in the art for each notation. In the recognition process, a stroke set S is compared with each template in the library. In one embodiment, a string is used to represent each stroke and a band-limited time warping method is adopted for notation recognition. Time warping is a method to find the correspondence between two distorted strings. In one embodiment, an element in one string is allowed to map to one or more elements in another string, while preserving the order of the elements. It should be understood by those skilled in the art that time warping is but one method that may be used for computing the similarities between strings. Many different definitions of distance between strings, such as the Levenstein distance and discrete distance, may be used to compute the similarities between strings in template matching. These and other methods are well understood by those skilled in the art.","The template matching recognizer subsystem is configured to utilize three phases for operation: feature extraction, stroke matching, and notation matching. In the feature extraction phase, each stroke is represented by a string of direction types. In one embodiment, Sklansky's polyline approximation, as described in Sklansky J. and Gonzalez V., , The Journal of the Pattern Recognition Society, Vol. 12, No. 5, pp. 327-331, 1980, may be used to simplify the strokes in order by removing the local fluctuations.  gives an example of a simplified result. It should be understood by those skilled in the art that other methods for polyline approximation may be used, including those described in Sezgin et al.; , Proceedings of the 2001 Workshop on Perceptual User interfaces (PUI'01), Orlando, Fla., pp. 623-641, May 2001.","After simplification, stroke s  is represented by s={right arrow over (p)}{right arrow over (p)} . . . {right arrow over (p)}, where {right arrow over (p)} (1\u2266i\u2266n) are the points of the simplified polyline. The direction of each pair of the neighboring points {right arrow over (p)}{right arrow over (p)} (1\u2266i<n) are classified into one of twelve (12) direction types defined by,",{"@attributes":{"id":"p-0061","num":"0067"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mstyle":{"mtext":"direction\u00a0\u00a0type"},"mo":"=","mrow":{"mrow":[{"mo":["\u230a","\u230b"],"mrow":{"mfrac":{"mtable":{"mtr":[{"mtd":{"mrow":{"mstyle":[{"mtext":"Angle\u00a0\u00a0between\u00a0\u00a0line"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mo":["\u2062","\u2062"],"mover":{"mrow":{"msub":[{"mi":["p","i"]},{"mi":"p","mrow":{"mi":"i","mo":"+","mn":"1"}}],"mo":"\u2062"},"mo":"\u2192"}}}},{"mtd":{"mrow":{"mi":["and","x"],"mo":["\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mtext":"-axis"}]}}}]},"mn":"30"},"mo":"+","mn":"0.5"}},{"mi":"mod","mo":"\u2061","mrow":{"mo":["(",")"],"mn":"12"}}],"mo":"\u2062"}}}}},"In this way, a stroke s is represented by a string of the direction types. The string length for stroke with n points is n\u22121. As shown in , n=6 as stroke s  includes six (6) points -and the string length is five (5).  provides an illustration of the direction types. It should be understood by those skilled in the art that fewer than twelve (12) or more than twelve (12) direction types may be used and that the present example does not limit the number of direction types used in accordance with the present invention to twelve (12).","The second phase is the stroke matching phase. Let sand sbe the strings of an input stroke and a stroke in the template, s=ii. . . iand s=rr. . . r. For use with a time warping method, the similarity between the elements of the strings is defined. In accordance with at least one aspect of the present invention, the similarity of two direction types is given with respect to lookup Table 1, where the first row and column are the direction types and the remaining cells are the similarity scores.",{"@attributes":{"id":"p-0064","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Similarity scores between direction types"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"13"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"11","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"12","colwidth":"21pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","2","3","4","5","6","7","8","9","10","11","12"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"12","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"13"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"10","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"11","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"12","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"13","colwidth":"21pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","1","0.7","0.2","0","0","0","0","0","0","0","0.2","0.7"]},{"entry":["2","0.7","1","0.7","0.2","0","0","0","0","0","0","0","0.2"]},{"entry":["3","0.2","0.7","1","0.7","0.2","0","0","0","0","0","0","0"]},{"entry":["4","0","0.2","0.7","1","0.7","0.2","0","0","0","0","0","0"]},{"entry":["5","0","0","0.2","0.7","1","0.7","0.2","0","0","0","0","0"]},{"entry":["6","0","0","0","0.2","0.7","1","0.7","0.2","0","0","0","0"]},{"entry":["7","0","0","0","0","0.2","0.7","1","0.7","0.2","0","0","0"]},{"entry":["8","0","0","0","0","0","0.2","0.7","1","0.7","0.2","0","0"]},{"entry":["9","0","0","0","0","0","0","0.2","0.7","1","0.7","0.2","0"]},{"entry":["10","0","0","0","0","0","0","0","0.2","0.7","1","0.7","0.2"]},{"entry":["11","0.2","0","0","0","0","0","0","0","0.2","0.7","1","0.7"]},{"entry":["12","0.7","0.2","0","0","0","0","0","0","0","0.2","0.7","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"13","align":"center","rowsep":"1"}}}]}}]}}},"Band-limited time warping only allows the direction types iand rto be matched based upon the constraint |j\u2212k|\u22661(1\u2266j\u2266M,1\u2266k\u2266N). In addition to this constraint, aspects of the system of the present invention use two additional constraints. First, imust be mapped to rand imust be mapped to r. Second, neighboring pair direction types cannot be mapped to another neighboring pair, e.g., (i,i) cannot be mapped to (r,r). With the above three constraints, aspects of the present invention include five mapping types: ito r, ito (r,r), (i,i) to r, (i,i,i) to (r,r) and (i,i) to (r,r,r).","The similarity score of each mapping type is defined as below:\n\n","The similarity score of two strings is defined to be the sum of each mapping's similarity score divided by the mapping count. For example, suppose the mapping between string sand sis shown as in . In such an example, the similarity between sand sis",{"@attributes":{"id":"p-0068","num":"0084"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"Similarity","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["s","I"]},{"mi":["s","T"]}],"mo":","}}},{"mo":"(","mrow":{"mrow":[{"mi":"Similarity","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"i","mn":"1"},{"mi":"r","mn":"1"}],"mo":","}}},{"mi":"Similarity","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":"i","mn":"2"},"mo":",","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"r","mn":"2"},{"mi":"r","mn":"3"}],"mo":","}}}}},{"mrow":{"mrow":[{"mi":["S","imilarity"],"mo":"\u2062"},{"mo":["(",")"],"mrow":{"mrow":[{"mo":["(",")"],"mrow":{"msub":[{"mi":"i","mn":"3"},{"mi":"i","mn":"4"},{"mi":"i","mn":"5"}],"mo":[",",","]}},{"mrow":[{"mo":["(",")"],"mrow":{"msub":[{"mi":"r","mn":"4"},{"mi":"r","mn":"5"}],"mo":","}},{"mi":"Similarity","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"i","mrow":{"mi":"M","mo":"-","mn":"1"}},{"mi":["i","M"]}],"mo":","}},"mo":",","msub":{"mi":["r","N"]}}}}],"mo":["+","+"],"mi":"\u2026"}],"mo":","}}],"mo":"\u2061"},"mo":"\/","mi":"K"}],"mo":["+","+"]}}],"mo":"="}}},"br":{}},"The time warping method then is used to compute the maximal similarity score between the two strings.","The final phase, the notation matching phase, is now described. Let S={s,s, . . . ,s} and S={s,s, . . . ,s} be the input stroke set and the stroke set of a template, respectively. The similarity between the two strokes sets Sand Sis defined as:",{"@attributes":{"id":"p-0071","num":"0087"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"Similarity","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["S","I"]},{"mi":["S","T"]}],"mo":","}}},{"mo":"{","mtable":{"mtr":[{"mtd":[{"mn":"0"},{"mrow":{"mo":["(",")"],"mrow":{"mi":["x","y"],"mo":"\u2260"}}}]},{"mtd":[{"mrow":{"mi":"max","mo":["(",")"],"mrow":{"mfrac":{"mn":"1","mi":"x"},"mo":"\u2062","mrow":{"munder":{"mo":"\u2211","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["I","i"]},{"mi":["T","j"]}],"mo":","}}},"mo":"\u2062","mrow":{"mi":"Similarity","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"s","msub":{"mi":["I","i"]}},{"mi":"s","msub":{"mi":["T","j"]}}],"mo":","}}}}}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":["x","y"],"mo":"="}}}]}]}}],"mo":"="}}},"br":{},"sub":["I",{"sub2":"1"},"T",{"sub2":"j"}]},"In the recognition process, the input stroke set Sis compared with each template in the library. If the largest similarity score between the input stroke set Sand all templates of one notation is larger than a recognition threshold value, the notation is added to a candidate list. In one embodiment, the recognition threshold value is 0.5. Upon matching each template, the candidate list is sorted into a descending order of the similarity scores.","A music score generation component generates a music score based on all recognized notations by the direct recognizer subsystem and the template matching recognizer subsystem. A computer application may then be configured to output to an output device, such as a speaker and\/or a visual device, music tones and\/or visual displays corresponding to the music notations of the music score. The notations are sorted according to their respective position in the staff lines and a first candidate of each notation from the respective candidate lists is chosen to construct the score. In the direct recognizer subsystem, the candidate list only has one candidate notation. There are certain music grammars which can be used to improve the recognition results. In accordance with at least aspect of the present invention, the music grammar may be checked on the recognition results in turn. If one notation conflicts with the music grammar, the next candidate from the list is checked until the candidate list is empty. If no candidate complies with the music grammar, the notation is deleted. Such may be the case with an errant mark by a user. Examples of music grammar that may be used in accordance with aspects of the present invention include:\n\n","The invention may assume different forms of implementation, including modules utilizing computer-readable media and modules utilizing specialized hardware such as an application specific integrated circuit (ASIC).",{"@attributes":{"id":"p-0075","num":"0098"},"figref":"FIG. 8","b":["800","800","801","800","803","805","807"]},"System  is shown also to include a notation recognizer component . Notation recognizer component  may be configured to compare the stroke set with notations in a category to determine whether the stroke set can be recognized as a notation. Notation recognizer component  may be configured to provide a candidate list of one or more notations that the system  has recognized as a possible notation associated with the stroke set. Notation recognizer component  may be configured to include a direct recognizer subsystem  and a template matching recognizer subsystem . Direct recognizer subsystem  may be configured to recognize notations with stems, e.g., quarter notes, eighth notes, etc. Direct recognizer subsystem  further may be configured to determine the notes pitch and duration. Template matching recognizer subsystem  may be configured to recognize all other notations, such as rests, clefs, key signatures, time signatures, etc. Template matching recognizer subsystem  may include a reference library  to maintain the templates. Template matching recognizer subsystem  further may be configured to determine a pitch, as necessary, and a duration, as necessary, depending on the notation recognized.","Music score generation component  is configured to generate a music score based upon all recognized notations within the various candidate lists. Music score generation component  further may be configured to improve the recognition results by applying music rules and grammar to generate the music score.",{"@attributes":{"id":"p-0078","num":"0101"},"figref":"FIG. 9","b":["901","903","901","903","905"]},"At step , for each category, notations within the category are recognized. For example, the categories may be one or more of the seven notation categories described above. Proceeding to step , a determination is made as to whether an input stroke for a current category needs to be grouped with other nearby strokes. If yes, the process moves to step  as described below. If no, at step , the input stroke is compared to notations in a current category for each category. Proceeding to step , a determination is made as to whether the input stroke is recognized as at least one notation within the current category. If not, the input stroke is deleted for recognition purposes at step  and the process ends. If the input stroke is recognized as at least one notation in step , the process proceeds to step  where a candidate list of the recognized notation(s) are provided. The recognized candidates are sorted in accordance with music rules in step  and the music integrity is verified in accordance with music grammar in step  before the process ends.","Returning to the description of step , if the input stroke of a current category needs to be grouped with other nearby strokes, the process proceeds to step  where nearby strokes are grouped to the input stroke to make a stroke set. Methods for grouping may be as described herein above. At step , the stroke set is compared to notations within the current category. Proceeding to step , a determination is made as to whether the stroke set is recognized as at least one notation within the category. If yes, the process proceeds to step  where a candidate list of the recognized notations are provided and the process continues as described above. If the stoke set is not recognized as at least one notation in step , the process proceeds to step  where one stroke of the nearby strokes in the stroke set is removed. At step , a determination is made as to whether the stroke set is empty of nearby strokes. If not, the process returns to step . If so, the process proceeds to step  where the remaining input stroke is deleted and the process ends.",{"@attributes":{"id":"p-0081","num":"0104"},"figref":"FIG. 10","b":["1001","1003","1005","1007","1009"]},"If a stroke does intersect the bounding box at step , the process proceeds to step  where the intersecting stroke is identified as a nearby stroke of the seed stroke. At step , the distance between the seed stroke and the nearby stroke is determined. Methods for determining the distance are described herein above. Moving to step , a determination is made as to whether another stroke intersects the expanded bounding box of the seed stroke. If yes, the process returns to step  with respect to the new nearby stroke. If another stroke does not intersect the expanded bounding box of the seed stroke at step , the process moves to step  where the nearby strokes are sorted based upon the respective distance to the seed stroke, e.g., shortest distance to longest distance. At step , a result stroke is made, including the seed stroke and a number of nearby strokes in accordance with the sorted order of nearby strokes. For example, the result set may be configured to include the seed stroke and the six (6) closest nearby strokes.",{"@attributes":{"id":"p-0083","num":"0106"},"figref":"FIG. 11","b":["1101","1103","1105","1107","1111","1107","1109"]},"Proceeding to step , the pitch of the note is computed based upon the position of the note head with reference to the staff lines. At step , a determination is made as to whether the note shares a common beam with at least one other note. If not, the process proceeds to step  where the duration of the note is computed based upon the count of the flag strokes and the process ends. If the note does share a common beam in step , the process moves to step  where a stroke corresponding to the common beam is shared by association with the at least one other stroke. As such, when the duration of the at least one other note is computed, its association with the present note may be known. From step , the process proceeds to step  where the duration of the note, in this case with reference to the common beam, is computed and the process ends.",{"@attributes":{"id":"p-0085","num":"0108"},"figref":"FIG. 12","b":["1201","1203","1205","1207"]},"If the largest similarity score between the input stroke set and each template of one notation is not greater than a recognition threshold, the process ends. If so, the process moves to step  where the one notation is added to a candidate list of recognized notations that may be associated with a handwritten stroke. At step , a determination is made as to whether another template needs to be compared with the input stroke set. If so, the process returns to step  for the other notation template. If not, the process proceeds to step  where the candidate list of notation(s) are sorted into a descending order of similarity score and the process ends.","With respect to an application programming interface (API), various aspects of the present invention may be performed by an API. For example, public APIs may interface with an operating system to allow the operating system to provide the various features of the present invention. In one embodiment, a software architecture for processing data representative of handwritten notations may include a component configured to recognize the handwritten notations and an application program interface to access the component. An API may receive a request to recognize handwritten notations, access the necessary function(s) to perform the operation, and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention.","As can be appreciated by one skilled in the art, a computer system with an associated computer-readable medium containing instructions for controlling the computer system can be utilized to implement the exemplary embodiments that are disclosed herein. The computer system may include at least one computer such as a microprocessor, digital signal processor, and associated peripheral electronic circuitry.","While illustrative systems and methods as described herein embodying various aspects of the present invention are shown, it will be understood by those skilled in the art, that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art, particularly in light of the foregoing teachings. For example, each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary of the invention, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the accompanying drawings, which are included by way of example, and not by way of limitation with regard to the claimed invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 1B through 1M"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7","sub":["I ","T "]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
