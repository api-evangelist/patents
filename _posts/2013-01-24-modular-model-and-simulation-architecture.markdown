---
title: Modular model and simulation architecture
abstract: A computer-implemented modeling-and-simulation coordination module is provided for coordinating components by exchanging and sequencing instructions. The module includes a scenario file generator, a plug-in loader, an interface loader, a module classifier, an event detector, a response initiator, a simulation processor, a model request processor, an instance receiver, and an output provider. The scenario file generator creates a blank scenario file. The plug-in loader loads plug-in modules. The interface loader loads GUIs into corresponding containers. The classifier sets a classification to a highest rank plug-in module. The event detector monitors updating events. The response initiator prompts the operator to select an experimental plug-in module. The simulation processor executes a simulation in response to the operator loading a scenario, setting experimental parameters, and selecting the simulator plug-in. The model request processor provides parameters from the experimental frame to the model plug-in module. The instance receiver receives model instances from the model plug-in module. The output provider displays information based on time controls. The simulation processor instructs the simulator plug-in to execute instructions until satisfaction of terminal conditions and in response to initiation by the experimental plug-in module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09514254&OS=09514254&RS=09514254
owner: The United States of America as Represented by the Secretary of the Navy
number: 09514254
owner_city: Washington
owner_country: US
publication_date: 20130124
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","STATEMENT OF GOVERNMENT INTEREST","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Pursuant to 35 U.S.C. \u00a7119, the benefit of priority from provisional application 61\/632,733, with a filing date of Jan. 24, 2012, is claimed for this non-provisional application.","The invention described was made in the performance of official duties by one or more employees of the Department of the Navy, and thus, the invention herein may be manufactured, used or licensed by or for the Government of the United States of America for governmental purposes without the payment of any royalties thereon or therefor.","The invention relates generally to computer modeling and simulation. In particular, the invention relates to program architecture for connecting modular independent elements of a modeling and simulation system for execution.","Computer simulation involves describing and executing a mathematical representation of a causality-based phenomenon, such as often encountered in physics or engineering. Often, such simulation includes creation of a model that idealizes or simplifies a response-driven avatar of an object under evaluation. Boundary and\/or initial conditions can be imposed on the model to stimulate responses for evaluation, whether for transient or steady-state scenarios.","As computational ability has improved, modeling and simulation (M&S) techniques have expanded in complexity to include either more subtle detail and\/or to incorporate more encompassing and interrelated processes. This has led to subdivision of coded information into instructions and data, nodal or elemental discretized response-models, library routines, event-triggering forcing functions, separate scenarios for simulation, testing and validation.","Discrete Event System Specification (DEVS) represents an example standard framework or formalism for interoperable modeling and distributed simulation applicable to discrete event systems. DEVS exploits separation between a model (responding object), an experimental frame (stimulating environment) and simulator (event driver) interacting by mathematical rules. DEVS has been used in the development of many diverse applications since its creation in 1976. The use of DEVS in military applications has become increasingly popular, particularly because event-based simulation can greatly decrease execution time.","In addition, DEVS simplifies development by identifying three major objects (or frames) that compose a system: the experimental frame, the simulator frame, and the model frame. DEVS exploits separation between a model (responding object), an experimental frame (stimulating environment) and simulator (event driver) interacting by mathematical rules. The DEVS framework supports automated integrated development and testing of integrated intricate systems. Further information can be obtained from B. P. Zeigler, H. Praehofer and T. G. Kim, 2\/e, Academic Press\u00a92000.","A modeling system under DEVS includes a temporal base, states, inputs, outputs and functions. Inputs can be arranged during arbitrarily spaced moments in time. Functions determine succeeding states and output in response to current states and inputs. DEVS includes three frames: model, simulator and experiment. The DEVS simulation concept includes a model and a simulator that exchange information across an interfacing protocol. DEVS identifies separation between a model (responding object), an experimental frame (stimulating environment) and simulator (event driver) interacting by mathematical rules.","Conventional modeling and simulation (M&S) architecture yield disadvantages addressed by various exemplary embodiments of the present invention. In particular, various exemplary embodiments provide a computer-implemented modeling-and-simulation coordination module for coordinating components by exchanging and sequencing instructions. The module includes a scenario file generator, a plug-in loader, an interface loader, a module classifier, an event detector, a response initiator, a simulation processor, a model request processor, an instance receiver, and an output provider. The scenario file generator creates a blank scenario file. The plug-in loader for loading an available plurality of plug-in modules. The interface loader loads GUIs into corresponding containers. The classifier sets a classification to a highest rank plug-in module of the plurality of plug-in modules. The event detector monitors updating events. The response initiator for prompting the operator to select an experimental plug-in module from an available plurality of experimental plug-in modules. The simulation processor for executing a simulation in response to the operator loading a scenario, setting experimental parameters, selecting the simulator plug-in. The model request processor for providing parameters from the experimental frame to the model plug-in module. The instance receiver for receiving model instances from the model plug-in module. The output provider for disseminating display information based on time controls. The simulation processor instructs the simulator plug-in to execute instructions until satisfaction of terminal conditions and in response to initiation by the experimental plug-in module.","In the following detailed description of exemplary embodiments of the invention, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized, and logical, mechanical, and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","In accordance with a presently preferred embodiment of the present invention, the components, process steps, and\/or data structures may be implemented using various types of operating systems, computing platforms, computer programs, and\/or general purpose machines. In addition, those of ordinary skill in the art will readily recognize that devices of a less general purpose nature, such as hardwired devices, or the like, may also be used without departing from the scope and spirit of the inventive concepts disclosed herewith. General purpose machines include devices that execute instruction cede. A hardwired device may constitute an application specific integrated circuit (ASIC) or a field programmable gate array (FPGA) or other related component.","Various exemplary embodiments enable modeling and simulation (M&S) frames along with output providers to be developed separately as plug-in modules by defining a communication protocol. These frames can be and preferably are produced in conformance to Discrete Event System Specification (DEVS). An entire M&S system can be created by adding, removing, and swapping these independently developed pieces. Various exemplary embodiments enable input plug-in modules (e.g., model, experimental), execution plug-in modules (e.g., simulator), and output plug-in modules to be developed separately and pieced together to form a system, facilitating development to be compartmentalized.","Modular simulation with independently created components can be treated as a plurality of frames with mutual interface connections. Various exemplary embodiments provide a coordinating module Orchestrated Simulation through Modeling called \u201cOsm\u201d (pronounced \u201cawesome\u201d as in \u201cAwesome is as Osm does\u201d) that behaves as a conductor, defining rules for interaction that other participating components follow to render a performance or execute a simulation. These additional components can include frames or plug-in modules for models, experiments, outputs and simulations. Each of these modules may include or access libraries for further repository information.","In contrast to the orchestral arrangement of Osm, a conventional modeling and system \u201cframework\u201d can be analogized as a one-man band. There is one exception: basic models are defined within the framework, and model plug-in modules can be developed to provide more advanced versions of these basic agents. For example, a basic model of an airplane can be defined in a framework. A propeller-driven biplane model plug-in would extend the basic airplane model that is defined in the framework. Conventional M&S environments restrict event interactions, metric collections, etc, because this is all defined at the basic agent's level inside of the framework.","By design, the exemplary approach limits the traditional model plug-in module's ability to define its interactions with other models. Typically, open architectures include standards and protocols that enable models to be updated and\/or added to the M&S system readily: plug-and-play. For M&S involving a limited number of models, the open architecture design centralizes information flow that eventually passes from one model to another. The cost for an element to participate in such an open architecture is usually commensurate with the burden of implementing associated models' standards and protocols of information exchange.","This imposition often becomes very difficult for M&S involving many elements; especially for elements with complicated inter-element interactions. Often, the composite burdens of these \u201ccentralized\u201d protocols often preclude a systematic characterization of model to model interactions. Conventional M&S lacks a methodology that enables models to communicate directly with one-another while at the same time exchanging the right level of centralized information to the M&S system as a whole.","Osm provides a methodology that fills this M&S void by letting different aspects of the M&S models interact independently of the centralized aspect of the system while concurrently providing a simplified protocol of information exchange to the system as a whole. In other words, Osm enables the M&S to better emulate how models interact with each other and as a whole by allowing computer architectures the flexibility of imposing communication standards and protocols at a level that better reflects true interface information exchanges.","Osm represents a methodology that is intended to be constructed into a computer application. Furthermore, there is need for methodology to define how outputs, experimental frames, and simulator frames can actually be developed separately and combined to produce a scalable DEVS-compliant system. Much M&S effort becomes duplicated (often within the same organization), because this standard does not exist. There is an unfortunate absence of reusability in the M&S community, the deficiency of which exacerbates development time and money. The problem amounts to this: How can one build a simulation tool that leverages work from others instead of starting over every time? The Osm process provides standardization so that pieces can truly be developed separately and combined in a plug-and-play fashion.","Through Osm, DEVS frames and outputs can be written as plug-in modules in the same common language\/protocol. The solution is scalable (models can be defined at different levels of detail, and anything can be modeled). Where conventional M&S software acts as a single musician or one-man-band, the Osm process performs as a conductor that directs musicians working together to form a symphony. Coordination between developers is simplified. Components become interchangeable. An entire system can be dramatically changed by adding, removing, and swapping DEVS frames and outputs. Osm obviates the necessity to write a whole new system when only a subset of frames or outputs needs to be changed. The conventional framework monopolizes all of the control of options. The Osm framework distributes this authority to the plug-in modules. This difference can be analogized to the contrast in early Internet access in the 1990s between America Online (later, AOL) and Netscape. AOL enabled access to a self-contained Internet community, whereas Netscape provided only a web browser with a communications protocol that enabled webpage content and chat-room exchange to be scripted and addressed independently. The Osm process defines how to separate the development of the DEVS frames and outputs through plug-in modules to enable maximum ability of reusability of such software components.","The Osm architecture provides a scalable protocol for rapid development of discrete event simulations that employs independent frame plug-in modules that can be separately composed. Various exemplary embodiments enable production of DEVS M&S frames to be separately developed as plug-in modules by defining a communication protocol, as well as creating output results independent of these modules. An entire M&S system can be created by adding, removing, and swapping these independently developed pieces. The architecture enables input plug-in modules (model, experimental), execution plug-in modules (simulator), and output plug-in modules to be developed separately and pieced together to form a system, facilitating development to be compartmentalized. The simulation framework can expand in complexity for a system of systems, as described by Robert K. Garrett Jr. et al. in \u201cManaging the Interstitials, a System of Systems Framework Suited for the Ballistic Missile Defense System\u201d (2009).","A scenario represents a concert stage on which the simulation can be executed, analogous to an orchestral performance. Models represent Agents based on select quantifiable characteristics to operate under a defined simulation regime. Agents can be distinguished by actor Agents and object Agents. Analogous active Agents would include performance musicians, and complementary object Agents would constitute the musical instruments, subordinate to their actor Agent counterparts. The musician actor Agents could operate in accord with systemic instructions, such as sheet music for the instruments in an orchestral concert, as further coordinated by the conductor Osm. The Agents perform actions, typically in response to triggering stimuli denoted as temporal Events. Such actions can conditionally instantiate or cancel subsequent or contemporaneous Events, depending on the circumstances of the simulation.  illustrate exemplary block diagrams of M&S architecture using Osm.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 1","b":["100","110","115","120","125","130","135","140","150","155","160","170","175","180","185","190","195"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 2","b":["200","190","210","220","225","230","110","240","250","220","260","210"]},"A simulator frame  shares a simulator plug-in module  as well as the Event center . An experimental plug-in module  within an experimental frame  selects and executes simulation commands and issues instruction information to a simulator plug-in module  within the simulator frame . The model plug-in module  receives setting definitions from the experimental plug-in module  and definesAgents  using \u201cget\u201d, \u201cread\u201d and \u201ccreate\u201d instructions, saved to and retrieved from a scenario file  (in ). Creating an Agent  can include Events scheduling. The experimental plug-in module  also communicates with the simulator plug-in module  to update time for scenario execution for an Event center  to execute subsequent Events.","An over-simplified chess match can be exhibited as an example event-driven scenario amenable to model simulation. Chess involves a pair of players\u2014white and black\u2014that can move six types of pieces arranged on a square checker board having sixty-four tiles. As is well known, the pieces for each side include two rooks (R), two knights (N), two bishops (B), one queen (Q), one king (K) and eight pawns, each piece having defined movements. The objective of each player in the game is to declare \u201ccheck-mate\u201d by threatening inescapable capture of the opponent's king. Tile positions on the board can be described by columns (denoted by letters) and rows (denoted by numerals) that start from the lower left corner. At the beginning of a game (the initial condition), the pieces are arranged along rows adjacent opposing edges with opposing pawns facing each other.","In this example, white and black respectively represent initial and subsequent turn players of their respective pieces. Each player can move the color pieces assigned, but not an opposing piece except by capture and resulting seizure of that previously occupied tile. Both players and pieces constitute Agents. The player Agent is an actor that initiates events, whereas the piece Agent is an object that can only respond to a player's event. The board represents a stage on which the object Agents operate, definable by a scenario plug-in module.","The pieces move from one tile to another based on rules, such as being prohibited from shifting to a tile occupied or blocked by another piece of the same color, or to a tile occupied by an opposing color piece unless by capture. Further, a library function can define the types of moves assigned to each piece as object Agent. For example, a pawn can only move one tile forward (away from its color's initial row edge) except for its first move optionally to proceed two tiles forward or diagonal capture of an opposing piece. As other examples, a bishop moves diagonally (forward and aft); a rook moves along its row or column (fore and aft); a queen can discretionally move as either a bishop or a rook.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 3A and 3B","FIG. 3A","FIG. 3B"],"b":["300","310","320","330","340","350","360","370","380","370","380","360"]},"In typical notation, each turn is denoted by a numeral followed by position changes by the consecutive white and black players. The move of each player triggers a countermove by the opposing player until no further moves are possible (or both agree to a draw) This represents an Event-driven scenario in which each turn has consecutive first and second Events, and the second Event of that turn initiates the next turn. Each move of a piece is indicated by the piece's uppercase letter, followed by the coordinate of the destination tile. For example, Be5 (move a bishop to e5), Nf3 (move a knight to f3), c5 (move a pawn to c5, pawns denoted without a piece letter). Seizure of a tile occupied by an opposing piece indicates its capture. For the scenario  shown, the board  depicts the white king  threatened by the black queen  as a consequence of positions of the white and black pawns  and . The relevant two-turn notation for fool's mate can be indicated for the Events in each turn as: 1. g4 e5 2. f3 Qh4 (mate).","As provided by exemplary embodiments, code for the Osm library  and executable  remain the same irrespective of which plug-in modules are employed. To create chess software with Osm  involves a set of plug-in modules described as follows:\n\n","In Chess, the Agent types would be king, queen, knight, bishop, rook, pawn, and player. A model plug-in of type \u201cchess player\u201d might define an actor Agent as follows: identifier number, skill level, color (white or black), number of each object Agent, and beginning board position for each object Agent. Note that the object Agent can be described as a child Agent subordinate to the actor Agent. The GUI for such a model plug-in can enable the operator to define each player.","The Scenario Definition file created by such a plug-in module (with two entries) might resemble, as shown in , the instruction list . The actor Agent identification for the first player  provides parameters relevant to the scenario. Initial positions of pieces on the board  for the first player  can be listed beginning with the pawns  on the second row and followed by the ranking pieces  on the first row. The actor Agent identification for the second player  provides complementary information associated with the chess game. Initial positions of pieces on the board for the second player can be listed with the pawns  on the seventh row and the ranking pieces  on the eighth row. For both players  and , distinguished by color, the pieces are identified by their respective row and column tile on the board  at the start of the game.","Through the Osm executable , these entries can be saved to a file and reloaded later. The experimental plug-in  can provide a global \u201caudience\u201d variable, which the model plug-in  would request for each entry when creating Agents  from the Scenario Definition . When creating the Agents , the \u201cchess player\u201d model plug-in would request the \u201caudience\u201d from the experimental plug-in . This can be done through a \u201cget\u201d method in the experimental plug-in that enables as input an identifying word and the requestor. For instance, the model plug-in could state:","int audience=experiment.get(\u201caudiance\u201d, \u201cchess player\u201d);","which returns an Object of type int. This enables environmental influences to be independently imposed onto actor Agents in this example.","Upon completion of defining the Agent characteristics in the model plug-in , the simulator plug-in  can be selected and then executed by the experimental plug-in . A first Event begins the game. During the first turn, the first player  moves, e.g., pawn7 at g2 to g4, which schedules the opponent to perform the second turn as a second Event by the simulation algorithm for the second player  to move, e.g., pawn5 at e7 to e5. This completes the first turn, which initiates a third Event beginning the second turn by the simulation algorithm. The first player  moves, e.g., pawn6 at f2 to f3 and triggering a fourth Event. In response, the second player  moves, e.g., queen at d8 to h4. The white king  becomes trapped, being subject to capture by the black queen  and unable to block or escape, resulting in check-mate. This final move terminates further turns (and thereby any subsequent events), and the game concludes with the black player  victorious. Artisans of ordinary skill will recognize that such a simplified example can be readily expanded to war-game simulation and to other conditional Event-triggered modeling scenarios.",{"@attributes":{"id":"p-0061","num":"0064"},"figref":"FIG. 5A","b":["500","500","510","520","530"]},{"@attributes":{"id":"p-0062","num":"0065"},"figref":["FIG. 5B","FIG. 5C"],"b":["540","500","530","550","555","530","560","550","570","250","575","580"]},{"@attributes":{"id":"p-0063","num":"0066"},"figref":"FIG. 6","b":["600","610","1","620","630","640"]},{"@attributes":{"id":"p-0064","num":"0067"},"figref":"FIGS. 7A and 7B","b":["700","710","640","600","720","600"]},{"@attributes":{"id":"p-0065","num":"0068"},"figref":"FIG. 8","b":["810","820","820","830","840","260","850"]},{"@attributes":{"id":"p-0066","num":"0069"},"figref":"FIG. 9","b":["900","910","920","930","940","950","900","110","950"]},"The Osm executable  populates the \u201cadd\u201d buttons with plug-in identifications that instantiate their respective user interfaces and incorporate their entries to the add feature . In this example, the three plug-in options define themselves under the \u201cThreat\u201d type. As described for , the identification is displayed in a dialog box , with quantitatively selectable times and parameters . In response to clicking the \u201cadd\u201d button in the feature , a list of \u201cThreat\u201d plug-in modules is displayed in the list . For a scenario in which the operator selects the \u201cRaid\u201d plug-in module, the consequence introduces a subsequent plug-in module graphical interface  in  as a pop-up feature.",{"@attributes":{"id":"p-0068","num":"0071"},"figref":"FIG. 10","b":["1000","1010","500","600","920","930","940","1020","950","1020","1000","1030","1040","170","1050","840","1070","1080","1090"]},{"@attributes":{"id":"p-0069","num":"0072"},"figref":"FIG. 11","b":["1100","1110","1120","1130","1030","1140","1150","1155","1160","1170","1140","1170"]},{"@attributes":{"id":"p-0070","num":"0073"},"figref":"FIG. 12","b":["1200","1210","1220","1210","1220","260","1210","1220","1030","1230","1220","1240","1250","1260"]},{"@attributes":{"id":"p-0071","num":"0074"},"figref":"FIG. 13","b":["1300","1310","1320","1310","1330","1340","1350","1320","1360","1370","1380","1390"]},{"@attributes":{"id":"p-0072","num":"0075"},"figref":["FIG. 14","FIG. 15"],"b":["1400","1410","1420","1430","1440","1450","1500","1510","1520","1530","1540"]},{"@attributes":{"id":"p-0073","num":"0076"},"figref":["FIG. 16","FIG. 5C","FIG. 5B"],"b":["1600","1610","1620","1630","190","250","580","570","540"]},{"@attributes":{"id":"p-0074","num":"0077"},"figref":"FIG. 17","b":["1700","1710","220"]},{"@attributes":{"id":"p-0075","num":"0078"},"figref":"FIG. 18","b":["1800","240","1810","1820","1830","1840","240","530","550"]},{"@attributes":{"id":"p-0076","num":"0079"},"figref":"FIG. 19","b":["1900","550","1910","240","1920","1020","210"]},{"@attributes":{"id":"p-0077","num":"0080"},"figref":["FIG. 20","FIG. 21","FIG. 22"],"b":["2000","250","2010","2020","110","190","190","2100","2110","2120","2130","2140","2150","2200","2210","550","2220","2230"]},{"@attributes":{"id":"p-0078","num":"0081"},"figref":["FIG. 23","FIG. 7A"],"b":["2300","2310","2320","2330","2340","710","130","110","130","110","130","280"]},{"@attributes":{"id":"p-0079","num":"0082"},"figref":"FIG. 24","b":["2400","2410","2420","250","2430","2420","110","250","590"]},"In this example, the operator can set up the experiment by setting the following:\n\n",{"@attributes":{"id":"p-0081","num":"0089"},"figref":"FIG. 25","b":["2500","2510","2520","2530","2540","2550"]},{"@attributes":{"id":"p-0082","num":"0090"},"figref":["FIG. 26","FIG. 27"],"b":["2600","2610","2620","2630","2640","2650","2700","2710","2720","2730"]},"There are sundry arrangements in which data can be displayed in a meaningful format. With output plug-ins , any data can be displayed in any manner desired. Output plug-in modules have access to all of the Agents in a Scenario. The Osm executable's time control sends its current value to each output plug-in as the chronology updates. The output plug-ins  can react in any manner desired, and they can interrogate the Metrics, Events, Notes, and any other data that are easily accessible for each Agent . There is no limit to the manner in which information can be visualized.",{"@attributes":{"id":"p-0084","num":"0092"},"figref":["FIG. 28","FIG. 11"],"b":["2800","190","2810","1110","1070","1030"]},{"@attributes":{"id":"p-0085","num":"0093"},"figref":"FIG. 29","b":["2900","2910","2920","2930","2940","210","2950","2960","2970"]},{"@attributes":{"id":"p-0086","num":"0094"},"figref":"FIG. 30","b":["3000","3010","3020","3030","3040","3050"]},{"@attributes":{"id":"p-0087","num":"0095"},"figref":"FIG. 31","b":["3100","190","3105","190","240","3110","190","3115","190","3120","190","3125","190","130","3130","190","3135","3140","190"]},"In step , the operator creates a scenario through the model plug-in GUIs, or alternatively the operator loads an existing scenario file . In step , the operator sets experimental parameters (including end conditions) in the experimental plug-in GUI  within the experimental frame . In step , the operator selects a simulator plug-in module  in the experimental plug-in GUI (implicitly or explicitly). In step , the operator instructs Osm  to execute simulation through the experimental frame. In step , model plug-in modules  request parameters from the experimental frame  and the scenario file . In step , model plug-in modules  create model instances from these input parameters. In step , the experimental plug-in module  initiates the simulator plug-in's algorithm. In step , the simulator plug-in modules  execute until final conditions are satisfied. In step , the operator moves the time control. In step , Osm  sends time control data to output plug-in modules . In step , output plug-in modules  display information based on time control and other input parameters.",{"@attributes":{"id":"p-0089","num":"0097"},"figref":["FIG. 32A","FIGS. 32B through 32G"],"b":["3200","3210","3220","3230","3240","3250","3260","3210","3240","3250","3220","3250","3260","3230"]},{"@attributes":{"id":"p-0090","num":"0098"},"figref":["FIG. 33A","FIGS. 33B through 33F"],"b":["3300","3310","3320","3330","3340","3350"]},{"@attributes":{"id":"p-0091","num":"0099"},"figref":["FIG. 34A","FIGS. 34B through 34H"],"b":["3400","3410","3420","3430","3440","3450","3460","3470","3470","3450","3410","3440","3460","3450","3420","3450","3410","3440","3430","3450"]},{"@attributes":{"id":"p-0092","num":"0100"},"figref":["FIG. 35A","FIGS. 35B through 35F"],"b":["3500","3510","3520","3530","3540","3550","3510","3520","3530","3550","3540"]},"Quantitative advantages for the exemplary distributed modular architecture for simulation and modeling as compared to conventional integral techniques can be summarized by the following statistics for projects related to surface warfare (SUW) and missile defense agency (MDA). Lines of code for modules common to both projects are listed as follows:",{"@attributes":{"id":"p-0094","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Module","Code Lines"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OsmEXE","2,242"]},{"entry":[{},"OsmLIB","3,521"]},{"entry":[{},"basic experimental plug-in","833"]},{"entry":[{},"events control plug-in","399"]},{"entry":[{},"metrics output plug-in","395"]},{"entry":[{},"DEVS simulator plug-in","62"]},{"entry":[{},"libWorld","5,134"]},{"entry":[{},"Total (common)","13,610"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0095","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Project","Lines specific","Lines combined"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SUW","4,461","18,071"]},{"entry":[{},"MDA","6,077","19,687"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Additionally, the modularity and ability to improve components would be maintained by only one group that has access to that portion of code. With Osm, anybody can produce a plug-in, and so anybody can contribute to such a project without necessity of understanding the entire code. If one had to produce SUW from scratch, that project would have required much longer time than the few months that completion was achieved. The realtime simulator plug-in module involved small amounts of code to implement, but completely changed the purpose of the tool. MDA routinely creates new assignments when only one component need be substituted in exemplary embodiments, such as the simulator frame.","While certain features of the embodiments of the invention have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and various other features and aspects of various exemplary embodiments will be readily understood with reference to the following detailed description taken in conjunction with the accompanying drawings, in which like or similar numbers are used throughout, and in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 and 27"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 29 and 30"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 32A, 32B, 32C, 32D, 32E, 32F and 32G"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 33A, 33B, 33C, 33D, 33E and 33F"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 34A, 34B, 34C, 34D, 34E, 34F, 34G and 34H"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 35A, 35B, 35C, 35D, 35E and 35F"}]},"DETDESC":[{},{}]}
