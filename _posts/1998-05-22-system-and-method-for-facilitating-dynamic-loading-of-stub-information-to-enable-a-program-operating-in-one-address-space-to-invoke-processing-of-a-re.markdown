---
title: System and method for facilitating dynamic loading of stub information to enable a program operating in one address space to invoke processing of a remote method or procedure in another space
abstract: A stub retrieval and loading subsystem is disclosed for use in connection with a remote method invocation system. The stub retrieval and loading subsystem controls the retrieval and loading of a stub for a remote method, into an execution environment, to facilitate invocation of the remote method by a program executing in the execution environment. The stub retrieval subsystem includes a stub retriever for initiating a retrieval of the stub and stub loader for, when the stub is received by the stub retriever, loading the stub into the execution environment, thereby to make the stub available for use in remote invocation of the remote method. In one embodiment, the stub retrieval and loading subsystem effects the retrieval and loading for a program operating in one address space provided by one computer, of stub class instances to effect the remote invocation of methods which are provided by objects operating in another address space, which may be provided by the same computer or a different computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07058954&OS=07058954&RS=07058954
owner: Sun Microsystems, Inc.
number: 07058954
owner_city: Santa Clara
owner_country: US
publication_date: 19980522
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["IN CORPORATION BY REFERENCE","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["This application is a Continuation under 37 C.F.R. 1.53(b) of U.S. patent application Ser. No. 08\/636,706, filed on Apr. 23, 1996.","The Java\u2122 Language Specification (Sun Microsystems, Inc., 1993\u201395), (hereinafter referred to as the \u201cJava language specification\u201d) a copy of which is attached hereto as Appendix A, incorporated herein by reference.","The Java Virtual Machine Specification (Sun Microsystems, Inc., 1993\u201395), (hereinafter referred to as the \u201cJava virtual machine specification\u201d) a copy of which is attached hereto as Appendix B, incorporated herein by reference.","Ann Wollrath, et al., \u201cA Distributed Object Model for Java\u2122,\u201d an unpublished paper attached hereto as Appendix C, incorporated herein by reference.","U.S. patent application Ser. No. 08\/636,707, filed on Apr. 23, 1996, now U.S. Pat. No. 5,815,709 in the names of James H. Waldo, Krishna Bharat and Roger Riggs, and entitled \u201cSystem and Method For Generating Identifiers For Uniquely Identifying Object Types For Objects Used in Processing Of Object-Oriented Programs And The Like\u201d (hereinafter identified as the \u201cWaldo et al. patent application\u201d), is incorporated herein by reference in its entirety.","The invention relates generally to the field of digital computer systems, and more particularly to systems and methods for facilitating the invocation by a program being processed by a computer in one address space, of processing of methods and procedures in another address space, which may be implemented either on the same computer or on another computer. The invention particularly provides a system and method for obtaining and dynamically loading \u201cstub\u201d information which facilitates invocation by a program operating in one address space of a remote method or procedure in another address space, and possibly on another computer.","In modern \u201centerprise\u201d computing, a number of personal computers, workstations, and other devices such as mass storage subsystems, network printers and interfaces to the public telephony system, are typically interconnected in one or more computer networks. The personal computers and workstations are used by individual users to perform processing in connection with data and programs that may be stored in the network mass storage subsystems. In such an arrangement, the personal computers\/workstations, operating as clients, typically download the data and programs from the network mass storage subsystems for processing. In addition, the personal computers or workstations will enable processed data to be uploaded to the network mass storage subsystems for storage, to a network printer for printing, to the telephony interface for transmission over the public telephony system, or the like. In such an arrangement, the network mass storage subsystems, network printers and telephony interface operate as servers, since they are available to service requests from all of the clients in the network. By organizing the network in such a manner, the servers are readily available for use by all of the personal computers\/workstations in the network. Such a network may be spread over a fairly wide area, with the personal computers\/workstations being interconnected by communication links such as electrical wires or optic fibers.","In addition to downloading information from servers for processing, a client, while processing a program, can remotely initiate processing by a server computer of particular routines and procedures (generally \u201cprocedures\u201d), in connection with certain \u201cparameter\u201d information provided by the client. After the server has processed the procedure, it will provide results of its processing to the client, which the client may thereafter use in its processing operations. Typically in such \u201cremote procedure calls\u201d the program will make use of a local \u201cstub\u201d which, when called, transfers the request to the server which implements the particular procedure, receives the results and provides them to the program. Conventionally, the stub must be compiled with the program, in which case the information needed to call the remote procedure must be determined at compile time, rather than at the time the program is run. Since the stub available to the client's programs is static, it may be at best the closest that can be determined should be provided for the program when it (the program) is compiled. Accordingly, errors and inefficiencies can develop due to mismatches between the stub that is provided to a program and the requirements of the remote procedure that is called when the program is run.","The invention provides a new and improved system and method for facilitating the obtaining and dynamic loading of a stub provided to enable a program operating in one address space to remotely invoke processing of a method or procedure in another address space, so that the stub can be loaded by the program when it is run and needed, rather than being statically determined when the program is compiled. Indeed, the stub that is loaded can be obtained from the resource providing the remote method or procedure, and so it (the stub) can exactly define the invocation requirements of the remote method or procedure. Since the stub can be located and dynamically loaded while the program is being run, rather that being statically determined when the program is compiled, run-time errors and inefficiencies which may result from mis-matches between the stub that is provided and the requirements of the remote method or procedure that is invoked can be minimized.","In brief summary, the invention provides a stub retrieval and loading subsystem for use in connection with a remote method invocation system. The stub retrieval and loading subsystem controls the retrieval and loading of a stub for a remote method, into an execution environment, to facilitate invocation of the remote method by a program executing in the execution environment. The stub retrieval subsystem includes a stub retriever for initiating a retrieval of the stub and stub loader for, when the stub is received by the stub retriever, loading the stub into the execution environment, thereby to make the stub available for use in remote invocation of the remote method. In one embodiment, the stub retrieval and loading subsystem effects the retrieval and loading for a program operating in one address space provided by one computer, of stub class instances to effect the remote invocation of methods which are provided by objects operating in another address space, which may be provided by the same computer or a different computer. In that same embodiment, the stub retrieval and loading subsystem effects the retrieval and loading of a stub class instance when the remote object is referenced, although in other embodiments retrieval and loading may be effected when the remote method is invoked.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","11","1","11","11","12","1","12","12","14","10","13","14","11","12","13"],"i":["n","m","n","m"]},"The client computers (), server computers () and nameserver computer  are all of the conventional stored-program computer architecture. A system unit generally includes processing, memory, mass storage devices such as disk and\/or tape storage elements and other elements (not separately shown), including network interface devices (), () for interfacing the respective computer to the communication link . The video display unit permits the computer to display processed data and processing status to the operator, and an operator input device enables the operator to input data and control processing by the computer. The computers () and () and  transfer information, in the form of messages, through their respective network interface devices (), () among each other over the communication link .","In one embodiment, the network  is organized in a \u201cclient-server\u201d configuration, in which one or more computers, shown in  as computers (), operate as servers, and the other computers, shown in  as computers (), operate as clients. In one aspect, one or more of the server computers () may, as \u201cfile servers,\u201d include large-capacity mass storage devices which can store copies of programs and data which are available for retrieval by the client computers over the communication link  for use in their processing operations. From time to time, a client computer () may also store data on a server computer (), which may be later retrieved by it (the client computer that stored the data) or other client computers for use in their processing operations. In addition, one or more of the server computers () may, as \u201ccompute servers,\u201d perform certain processing operations in response to a remote request therefor from a client computer (), and return the results of the processing to the requesting client computer () for use by them (that is, the requesting client computers ()) in their subsequent processing. In either case, the server computers may be generally similar to the client computers (), including a system unit, video display unit, and operator input devices, and may be usable by an operator for data processing operations in a manner similar to a client computer. Alternatively, at least some of the server computers may include only processing, memory, mass storage, and network interface elements for receiving and processing retrieval, storage, or remote processing requests from the client computers, and generating responses thereto. It will be appreciated that a client computer () may also perform operations described herein as being performed by a server computer (), and similarly a server computer () may also perform operations described herein as being performed by a client computer ().","The network represented by communication link  may comprise any of a number of types of networks over which client computers (), server computers () and nameserver computers  may communicate, including, for example, local area networks (LANs) and wide area networks (WANs) which are typically maintained within individual enterprises, the public telephony system, the Internet, and other networks, which may transfer digital data among the various computers. The network may be implemented using any of a number of communication media, including, for example, wires, optical fibers, radio links, and\/or other media for carrying signals representing information among the various computers depicted in . As noted above, each of the computers typically includes a network interface which connects the respective computer to the communications link  and allows it to transmit and receive information thereover.","The invention provides a system for facilitating the obtaining and dynamic loading of \u201cstub\u201d information to enable a program operating in one address space to invoke processing of a remote method or procedure in another address space, which may be located on the same computer as the invoking program or on a different computer. The invention will be described in connection with programs provided in the Java\u2122 programming language, as described in the Java language specification, which are processed in connection with an execution environment which is provided by a Java virtual machine. The Java virtual machine, in turn, is specified in the Java virtual machine specification. As described in the Java language specification, programs in the Java programming language define \u201cclasses\u201d and \u201cinterfaces.\u201d Classes are used to define one or more methods or procedures, each of which may be invoked by reference to an interface. A class may be associated with and extend a \u201csuper-class,\u201d and in that regard will incorporate all of the interfaces and methods of the super-class, and may also include additional interfaces and\/or methods. A class may also have one or more sub-classes (and thus will comprise a super-class of each of its sub-classes), with each sub-class incorporating and possibly extending their respective super-classes.","An interface provides a mechanism by which a set of methods may be declared. In that connection, an interface identifies each method that is declared by the interface by, for example, a name, identifies the data type(s) of argument(s) that are to be provided for the method, the data type(s) of return values that are to be returned by the method, and identifiers for exceptions which can be thrown during processing of the method. A class may indicate that it implements a particular interface, and in that connection will include the program code which will be used in processing all of the methods which are declared in the interface. In addition, different classes may indicate that they implement the same interface, and each will have program code which will be used in processing all of the methods which are declared in the interface, but the program code provided in each class to for use in processing the methods may differ from the program code provided in the other classes which is used in processing the same methods; thus, an interface provides a mechanism by which a set of methods can be declared without providing an indication of the procedure which will be used in processing any of the methods. An interface may be declared independently of the particular class which implements the method or methods which can be invoked using the interface. In that regard, a class that invokes the method and a class that actually implements the method will not need to share a common super-class.","During processing of a Java program, as described in the Java virtual machine specification, a client computer () provides an execution environment  for interpreting the Java program. The Java virtual machine includes a class loader  that, under control of a control module , can dynamically link instances of classes, generally identified in  by reference numeral , into the running program's execution environment while the program is being executed. In that operation, the control module  effectively enables the class loader to retrieve uninstantiated classes, which generally identified by reference numeral , instantiate them and link them as class instances  into the execution environment's address space at the Java program's run time as the methods which the respective classes  implement are called. In addition, the class loader  can discard ones of the class instances  when they are not needed or to conserve memory. It will be appreciated that, if a class instance  has been discarded, it may be reloaded by the class loader  at a later point if it is then needed.","The invention provides an arrangement which facilitates the remote invocation, by a program executing in an execution environment  by a client computer (), of methods implemented by classes on a server computer (). In executing a method, the server computer () will also provide an execution environment  for processing, under control of a control module , the Java method. In that operation, the Java virtual machine which provides the execution environment  includes a class loader  (which may be similar to the class loader ) that, under control of the control module , can dynamically link an instance of the class , to enable the method to be processed in the execution environment , and instances of other classes (also generally represented by reference numeral ) which may be needed to process the remotely-invoked method. In that operation, the control module  effectively enables the class loader  to retrieve an uninstantiated class for the method to be invoked, from a plurality of uninstantiated classes which are generally identified by reference numeral , instantiate it (that is, the uninstantiated class which provides the method to be invoked) and link it as a class instance  into the execution environment. In addition, the class loader  can discard the class instances  when processing of the method has terminated. It will be appreciated that, if class instances  has been discarded, it may be reloaded by the class loader  at a later point if it is then needed.","The structure of nameserver computer , if provided, is generally similar to that of the server computer (), and will not be separately described.","To facilitate remote invocation of a method, the control module  of the client computer's execution environment  makes use of one or more stub class instances generally identified by reference numeral  which are provided as part of the execution environment  in which the various class instances , including the class instance which is invoking the remote method, are being processed. Each stub class instance  is an instance of an uninstantiated stub class , which the server computer () may maintain for the various class instances  and uninstantiated classes  which the server computer () has \u201cexported,\u201d that is, which the server computer () makes available to client computers () for use in remote invocation of methods provided thereby. An uninstantiated stub class  includes declarations for the complete set of interfaces for the particular remote uninstantiated class  which implements the remote method to be invoked, and also provides or invokes methods which facilitate accessing of the remote method(s) which are implemented by the remote class. The uninstantiated stub class , when it is instantiated and provided to the execution environment  of the client computer () as a stub class instance , effectively provides the information which is needed by the control module  of the execution environment  of the invoking Java program, so that, when a remote method that is implemented by its associated class is invoked by a Java program running in a particular execution environment, the remote method will be processed and the return value(s) provided to the invoking Java program. In one embodiment, the arrangement by which the stub class instance may be provided to the execution environment  is similar to that described in the aforementioned Waldo, et al., patent application.","In addition, the server computer () provides a skeleton , which identifies the particular classes and methods which have been exported by the server computer () and information as to how it (that is, the server computer ()) may load the respective classes and initiate processing of the particular methods provided thereby.","When a class instance invokes a remote method maintained by a server computer (), it will provide values for various parameters to the stub class instance  for the remote method, which values the remote method will use in its processing. If the remote method is implemented on the same computer as the invoking Java program, when the invoking Java program invokes a remote method, the computer may establish an execution environment, similar to the execution environment , enable the execution environment's class loader to load and instantiate the class which implements the method as a class instance similar to class instances , and process the remote method using values of parameters which are provided by the invoking class instance in the remote invocation. After processing of the method has been completed, the execution environment in which the remote method has been processed will provide the results to the stub class instance  for the remote method that was invoked, which, in turn, will provide to the particular class instance  which invoked the remote method.","Similar operations will be performed if client computer () and server computer () are implemented on different physical computers. In that case, in response to a remote invocation, the client computer () that is processing the invoking class instance , under control of the control module  for the execution environment  for the invoking class instance , will use the appropriate stub class instance  to communicate over the network represented by the communication link  with the server computer () which implements the remote method to enable it (that is, the server computer ()) to establish an execution environment  for the class which implements the remote method, and to use the class loader  to load an instance of the class as a class instance . In addition, the client computer (), also using the appropriate stub class instance , will provide any required parameter values to the server computer () over the network . Thereafter, the server computer () will process the remote method using parameter values so provided, to generate result value(s) which are transferred over the network to the client computer (), in particular to the appropriate stub class instance . The client computer () will, after it receives the result value(s) from the network, provide them to the invoking class instance  for its processing.","In any case, when the control module  of the client computer's execution environment  determines that a reference to the remote object has been received, if it determines that the stub class instance  is not present when it receives the reference, it will attempt to obtain the stub class instance  from, for example, the server computer () which implements the remote method, and enable the stub class instance  to be dynamically loaded in the execution environment  for the invoking class instance . A reference to the remote object may be received, for example, either as a return value of another remote method invocation or as a parameter that is received during another remote method invocation. The stub class instance may be dynamically loaded into the execution environment in a manner similar to that used to load class instances  in the execution environment . The execution environment  is provided with a stub class loader  which, under control of the control module , will attempt to find and load the stub class instances  as required by the class instances  processed in the execution environment. The location of a particular server computer () that maintains the class that implements a method to be invoked remotely may be included in the call from the invoking class instance or may be made known to the stub class loader  through another mechanism (not shown) maintained by the client computer ().","However, if the stub class loader  is not otherwise notified of which server computer () maintains the class which implements a method which may be invoked remotely, it may use the nameserver computer  to provide that identification. The identification may comprise any identifier which may be used to identify a server computer () or other resource which is available on the network  and to which the server computer () can respond. Illustrative identifiers include, for example, a network address which identifies the server computer and\/or resource, or, if the network  is or includes the Internet, an identifier to, for example, a World Wide Web resource which may provide the identification or a \u201cuniform resource locator\u201d (\u201cURL\u201d) which provides a uniform mechanism for identifying resources that are available over the Internet. The server computer () which implements the remote method, in response to a request from the client computer () will provide stub class instance  which the client computer () may load into the execution environment  to thereafter enable the remote invocation to be initiated.","As noted above, if the stub class loader  does not know which server computer () implements the remote method which may be invoked (and thus does not know which computer is to provide the stub class code for the remote invocation), it may, under control of the control module , obtain the identification from the nameserver computer . In that operation, the stub class loader  may use a previously-provided default stub class which is provided for use in such cases. The default class stub, when used by the invoking Java program, enables the computer that is processing the invoking Java program to communicate with the nameserver computer  to obtain information which can be used in invoking the remote method. This operation is essentially the same as the invocation of a remote method to be processed by the nameserver computer , with the remote method including a parameter identifying the class and method to be remotely invoked, and enabling the namesaver computer  to provide the identification of a server computer () which can process the method to the requesting client computer () and other information which may be helpful in communicating with the server computer () and invoking the particular method. It will be appreciated that the nameserver computer  will maintain a table (not separately shown) of \u201cexported\u201d resources, that is, resources, such as classes and methods, that are available to client computers () connected to the network , and information, such as the identifications of the particular server computers () which provide those resources, which will be useful to the client computers () in making use of the exported resources.","It will be appreciated that the nameserver computer  may create and maintain the exported resource table in a number of ways that are known in the art. For example, the nameserver computer  may periodically broadcast requests for exported resource information over the network , to which the various server computers () which maintain exported resources may respond; in that case, the nameserver computer  may establish its exported resource table based on the responses from the server computers (). Alternatively, each of the various server computers () which maintains an exported resource may periodically broadcast information as to the exported resources which it maintains, and the nameserver computer  can update its exported resource table based on the broadcasts from the server computer. In addition, the nameserver computer's exported resource table may be established by a system operator and may be fixed until he or she updates it.","In any case, the information provided by the nameserver computer  in response to a request initiated by the default stub would include such information as, for example, the identification of a computer () which can provide a class which implements the remote method to be invoked, particular information which the computer (that is, the computer which implements the remote method) will require to provide the required stub class code, and the like. After receiving the information from the nameserver computer , the computer () that is processing the invoking Java program may, under control of the control module , use the information communicate with the computer (that is, the computer which implements the remote method) to obtain the stub class, and may thereafter invoke the method as described above.","With this background, the operations performed by client computer (), server computer () and, if necessary, nameserver  in connection with obtaining and dynamic loading of a stub class instance when a reference to a remote method is received will be described in connection with the flow chart depicted in . In addition, operations performed by the client computer () and server computer () in connection with remote invocation of a method using the stub class instance will be described in connection with the flow chart depicted in . With reference initially to , the execution environment control module  will, when it receives a reference to a remote method, initially determine whether an appropriate stub class instance is present in the execution environment  to facilitate invocation of the remote method (step ). If the control module  determines that such a stub class instance  for the remote method is present in the execution environment, it may continue other operations (step ). However, if the control module  determines in step  that such a stub class instance is not present in the execution environment  for the remote method, the control module  will use the stub class loader  to attempt to locate and load a stub class instance  for the class to process the remote method. In that case, the control module  will initially determine whether the invocation from the class instance  included a resource locator to identify the server computer () or other resource which maintains the class for the method to be invoked, or whether it (that is, the control module ) or the stub class loader  otherwise are provided with such a resource locator (step ). If the control module  makes a positive determination in that step, it will sequence to step  to enable the stub class loader  to initiate communications with identified server computer () to obtain stub class instance for the class and method to be invoked (step ). When the stub class loader  receives the stub class instance  from the server computer (), it will load the stub class instance  into execution environment  for the class instance  which initiated the remote method invocation call in step  (step ). After the stub class instance  for the referenced remote method has been loaded in the execution environment, the method can be invoked as will be described below in connection with .","Returning to step , if the control module  determines that the invocation from the class instance  did not include a resource locator to identify the server computer () or other resource which maintains the class for the method to be invoked, and further that it (that is, the control module ) or the stub class loader  is not otherwise provided with such a resource locator, a \u201cclass not found\u201d exception may be indicated, at which point the control module  may call an exception handler. The exception handler may perform any of a number of recovery operations, including, for example, merely notifying the control module  that the remote method could not be located and allow it to determine subsequent operations.","Alternatively, the control module  may attempt to obtain a resource locator from the narneserver computer  or other resource provided by the network  (generally represented in  by the narneserver computer ), using a call to, for example, a default stub class instance . The call to the default stub class instance  will include an identification of the class and method to be invoked and the name of the nameserver computer (). Using the default stub class instance , the control module  will enable the computer () to initiate communications with nameserver computer  to obtain an identifier for a server computer () which maintains the class and method to be invoked (step ), as shown in . The communications from the default stub class instance  will essentially correspond to a remote method invocation, with the method enabling the nameserver computer to provide the identification for the server computer (), if one exists associated with the class and method to be remotely invoked, or alternatively to provide an indication that no server computer () is identified as being associated with the class and method. During the communications in step , the default stub class interface  will provide, as a parameter value, the identification of class method to be invoked.","In response to the communications from the default stub class instance , the nameserver computer  will process the request as a remote method (step ), with the result information comprising the identification for the server computer (), if one exists that is associated with the class and method to be remotely invoked, or alternatively an indication that no server computer () is identified as being associated with the class and method. After finishing the method, the nameserver computer  will initiate communications with the default stub class instance  to provide the result information to the default stub class instance  (step ).","After receipt of the result information from the nameserver computer , the default stub class instance, under control of the control module , will pass result information to the stub class loader  (step ), as shown in . Thereafter, the stub class loader  determines whether the result information from the nameserver computer comprises the identification for the server computer () or an indication that no server computer () is identified as being associated with the class (step ). If the stub class loader  determines that the result information comprises the identification for the server computer (), it (that is, the stub class loader ) will return to step  to initiate communication with the identified server computer () to obtain stub class instance for the class and method that may be invoked. On the other hand, if the stub class loader  determines in step  that the nameserver computer  had provided an indication that no server computer () is identified as being associated with the class and method that may be invoked, the \u201cclass not found\u201d exception may be indicated (step ) and an exception handler called as described above.","As noted above, the stub class instance  retrieved and loaded as described above in connection with  may be used in remote invocation of the method. Operations performed by the client computer () in connection with remote invocation of the method will be described in connection with the flow charts in . As depicted in , when a class instance  invokes a method, the control module  may initially verify that a stub class instance  is present in the execution environment for remote method to be invoked (step ). If a positive determination is made in step , the stub class instance  will be used for the remote invocation, and in the remote invocation will provide parameter values which are to be used in processing the remote method (step ). Thereafter, the stub class instance  for the remote method that may be invoked will be used to initiate communications with the server computer () which maintains the class for the remote method (step ), in the process, the parameter values which are to be used in processing the remote method will be passed. It will be appreciated that, if the server computer () which is to process the method is the same physical computer as the client computer () which is invoking the method, the communications can be among execution environments which are being processed within the physical computer. On the other hand, if the server computer () which is to process the method is a different physical computer from that of the client computer () which is invoking the method, the communications will be through the client computer's and server computer's respective network interfaces () and () and over the network .","In response to the communications from the stub class instance in step , the server computer (), if necessary establishes an execution environment  for the class which maintains the method that may be invoked, and the uses the information provided by the skeleton  to create a class instance  for that class (step ). Thereafter, the server computer (), under control of the control module , will process the method in connection with parameter values that were provided by stub class instance  (step ), as shown in . After completing processing of the method, the server computer (), also under control of the control module , will initiate communications with the client computer's stub class instance  to provide result information to the stub class instance (step ). In a manner similar to that described above in connection with step , if the server computer () which processed the method is the same physical computer as the client computer () which invoked the method, the communications can be among execution environments  and  which are being processed within the physical computer. On the other hand, if the server computer () which processed the method is a different physical computer from that of the client computer () which is invoking the method, the communications will be through the server computer's and client computer's respective network interfaces () and () and over the network . After the stub class instance  receives the result information from the server computer, it may provide result information to the class instance  which initiated the remote method invocation (step ), and that class instance  can continue processing under control of the control module .","Returning to step , if the control module  determines in that step that it does not have a stub class instance  that is appropriate for the remote method that may be invoked, it may at that point call an exception handler (step ) to perform selected error recovery operations.","The invention provides a number of advantages. In particular, it provides a new system and method for facilitating dynamic loading of a stub which enables a program that is operating in one execution environment to remotely invoke processing of a method in another execution environment, so that the stub can be loaded by the program when it is run and needed. In systems in which stubs are compiled with the program, and thus are statically determined when the program is compiled, they (the stubs) may implement subsets of the actual set of remote interfaces which are supported by the remote references that is received by the program, which can lead to errors and inefficiencies due to mismatches between the stub that is provided to a program and the requirements of the remote procedure that is called when the program is run. However, since, in the dynamic stub loading system and method, the stub that is loaded can be obtained from the particular resource which provides the remote method, it (the stub) can define the exact set of interfaces to be provided to the invoking program at run time, thereby obviating run-time incompatibilities which may result from mismatches between the stub that is provided and the requirements of the remote method that is invoked.","It will be appreciated that a number of modifications may be made to the arrangement as described above. For example, although the execution environment  has been described as obtaining and loading stub class instances to facilitate invocation of remote methods when references to the remote methods are received, it will be appreciated that stub class instances may instead be obtained and loaded when the remote methods are initially invoked. Obtaining and loading of the stub class instance for a remote method when a reference thereto is received will have the advantages that (i) the stub class instance will be present in the execution environment when the remote method is actually invoked, and (ii) if the appropriate stub class instance can not be located, the program or an operator may be notified at an early time. On the other hand, obtaining and loading of the stub class instance for a remote method when the method is to be invoked may result in a delay of the invocation until the correct stub class instance can be found, if the method is in fact not invoked even if a reference to it is received the stub class instance may not need to be located and loaded.","It will be appreciated that a system in accordance with the invention can be constructed in whole or in part from special purpose hardware or a general purpose computer system, or any combination thereof, any portion of which may be controlled by a suitable program. Any program may in whole or in part comprise part of or be stored on the system in a conventional manner, or it may in whole or in part be provided in to the system over a network or other mechanism for transferring information in a conventional manner. In addition, it will be appreciated that the system may be operated and\/or otherwise controlled by means of information provided by an operator using operator input elements (not shown) which may be connected directly to the system or which may transfer the information to the system over a network or other mechanism for transferring information in a conventional manner.","The foregoing description has been limited to a specific embodiment of this invention. It will be apparent, however, that various variations and modifications may be made to the invention, with the attainment of some or all of the advantages of the invention. It is the object of the appended claims to cover these and such other variations and modifications as come within the true spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["This invention is pointed out with particularity in the appended claims. The above and further advantages of this invention may be better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 2","FIG. 1","FIGS. 2\u20132B","FIGS. 3 and 3A"],"b":["2","2","3","3"]}]},"DETDESC":[{},{}]}
