---
title: Model-driven display of metric annotations on a resource/relationship graph
abstract: A model-driven display for displaying metric annotations on a resource/relationship graph. Upon detecting selection of a set of computer resources in a system management graph, annotation options available to the selected set of computer resources are retrieved from an object model, wherein the object model defines computer resources in a data processing system and relationships among the computer resources, and wherein the annotation options represent resource metrics collected for the computer resources, A menu is created using the annotation options for the selected set of computer resources and displayed to a user in the graphical user interface. When selection of a set of annotation options in the menu is detected, the system management graph is updated to display annotations, corresponding to the selected set of annotation options, for the selected set or computer resources. The updated system management graph is then displayed to the user in the graphical user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694905&OS=08694905&RS=08694905
owner: International Business Machines Corporation
number: 08694905
owner_city: Armonk
owner_country: US
publication_date: 20090610
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field","The disclosure relates generally to an improved data processing system, and more specifically to a model-driven display of metric annotations on a resource\/relationship graph.","2. Description, of the Related Art","Enterprise management systems are network management systems capable of managing devices, independent of vendors and protocols, in Internet Protocol (IP)-based enterprise networks. Enterprise management systems can be very complex and difficult to manage, as a data center within, an enterprise may contain thousands of resources, and each resource may have many different relationships to other resources in the data center. In order to successfully manage such a data center, an administrator is required to understand the resources that are relevant for a particular system management task (e.g., the root cause analysis of a performance problem), relationships among the relevant resources, resource configuration information, and monitored data about the relevant resource. A common approach used for managing, monitoring and solving problems in an enterprise environment is to display resources and relationships on a topology graph. Configuration data or metric values for a particular resource may be provided to the user when, the user selects die resource in the graph.","According to one embodiment of the disclosure, a model-driven display is provided for displaying metric annotations on a resource\/relationship graph. When a set of computer resources is selected in a system management graph in a graphical, user interface, the embodiments of the disclosure retrieve annotation options available to the selected set of computer resources from an object model, wherein the object model defines computer resources in a data processing system and relationships among the computer resources, and wherein the annotation options represent resource metrics collected for the set of computer resources. A menu is created using the annotation options for the selected set of computer resources and displayed to a user in the graphical user interface. When selection of a set of annotation options in the menu is detected, the system management graph is updated to display annotations, corresponding to the selected set of annotation options, for the selected set or computer resources. The updated system management graph is then displayed to the user in the graphical user interface.","As will be appreciated by one skilled in the art, the embodiments in the disclosure may be embodied as a system, method or computer program product. Accordingly, the embodiments in the disclosure may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the embodiments in the disclosure may take the form of a computer program product embodied in any tangible medium of expression having computer usable program, code embodied in the medium.","Any combination, of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other mediums, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with, the computer-usable program code embodied therewith, either in baseband or as pan of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.","Computer program code for carrying out operations of the embodiments in the disclosure may be written in any combination of one or more programming languages, including an object oriented, programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The embodiments in the disclosure are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions.","These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means, for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks. These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/of block diagram block or blocks.","With reference now to the figures and in particular with reference to , exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated, that  are only exemplary and are not intended to assert or imply any limitation, with, regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","100","102","1011","102"]},"In the depicted example, server  and server  connect to network  along with storage unit . In addition, clients , , and  connect to network . Clients , , and  may be, for example, personal computers or network, computers. In the depicted example, server  provides information, such as boot files, operating system images, and applications to clients , , and . Clients , , and  are clients to server  in this example. Network data processing system  may include additional servers, clients, and other devices not shown.","Program code located in network data processing system  may be stored on a computer recordable storage medium and downloaded to a data processing system or other device for use. For example, program code may be stored on a computer recordable storage medium, on server  and downloaded to client  over network  for use on client .","In the depicted example, network data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, network data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the different illustrative embodiments.","With reference now to , a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as server  or client  in , in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display .","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or may be a multi-processor core, depending on die particular implementation. Further, processor unit  may be implemented using one or mare heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory  and persistent storage  are examples of storage devices . A storage device is any piece of hardware that is capable of storing information, such as, for example without limitation, data, program code in functional form, and\/or other suitable information either on a temporary basis and\/or a permanent basis. Memory , in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  also may be removable. For example, a removable hard drive may be used for persistent storage .","Communications unit , hi these examples, provides for communications with other data processing systems or devices. In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either or both physical and wireless communications links.","Input\/output unit  allows for input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard, a mouse, and\/or some other suitable input device. Further, input\/output unit  may send output to a printer. Display  provides a mechanism to display information to a user.","Instructions for the operating system, applications and\/or programs, may be located in storage devices , which are in communication with processor unit  through communications fabric . In these illustrative examples the instruction are in a functional form on persistent storage . These instructions may be loaded into memory  for execution by processor unit . The processes of the different embodiments may be performed by processor unit  using computer implemented instructions, which may be located in a memory, such as memory .","These instructions are referred to as program code, computer usable program code, or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media, such as memory  or persistent storage .","Program code  is located in a functional form on computer readable media  that is selectively removable and may be loaded onto or transferred to data processing system  for execution by processor unit . Program code  and computer readable media  form computer program product  in these examples. In one example, computer readable media  may be in a tangible form such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive that is part of persistent storage . In a tangible form, computer readable media  also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system . The tangible form of computer readable media  is also referred to as computer recordable storage media. In some instances, computer readable media  may not be removable.","Alternatively, program code  may be transferred to data processing system  from computer readable media  through a communications link to communications unit  and\/or through a connection to input\/output unit . The communications link and\/or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code.","In some illustrative embodiments, program code  may be downloaded over a network to persistent storage  from another device or data processing-system for use within data processing system . For instance, program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network, from the server to data processing system . The data processing system providing program code  may be a server computer, a client computer, or some other device capable of storing and transmitting program code .","The different components illustrated for data, processing system  are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in  can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example, the data processing system may include organic components integrated with inorganic components and\/or may be comprised entirely of organic components excluding a human being. For example, a storage device may be comprised of an organic semiconductor.","As another example, a storage device in data processing system  is any hardware apparatus that may store data. Memory , persistent storage  and computer readable media  are examples of storage devices in a tangible form.","In another example, a bus system may be used to implement communications fabric  and may be comprised of one or more buses, such as a system bus or an input\/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory  or a cache such as found in an interface and memory controller hub that may be present in communications fabric .","As previously mentioned, users may manage and monitor aspects of an enterprise environment using a system management graph. A system management graph displays resources and their relationships, and provides resource configuration data and\/or metric values to the user when the user selects a particular resource, in the graph.  illustrates an example of a known user interface comprising a system management graph with a directory tree structure. When a user wants to cheek the metric values for a plurality of resources in the graph (e.g., resources shown in area ), user interface  allow the user to view foe metric values on an individual resource basis. For example, the directory tree structure allows a user to select (in area ) and view (in area ) a set of metrics for one resource at a time (e.g., virtual machines resource ). Thus, when the user wants to cheek, for example, the CPU and memory metric values for 10 machines, by the time the user selects and views the metrics for the 8th machine, the user may have forgotten the metric values of the previously-selected 7 machines. In order to view metric values simultaneously for a set of machines, a custom view must be created. However, building custom system management graphs can be very time consuming for volatile sets of resources. Another example of a known system management user interface is depicted in . User interface  comprises a system management graph that displays metric values of system resources using annotations . A metric annotation is a value and\/or icon that is displayed on a graph and which is used to indicate a current operational status of an associated resource. An annotation comprises a metric type (e.g., CPU, memory, etc) and a value. The annotation, value is implementation specific, and may comprise numeric and\/or symbolic form, such, as a graph, icon, text, and the like. The value may be a current value or a historic value (e.g., historic CPU usage up to the current time). Annotations  and their values are displayed on user interface  for one or more resources. However, the annotations shown to the user are static in nature, in that the same metric types are shown for each resource, regardless of the type of resource and whether a metric is applicable to the particular resource, in addition, the graph in user interface  comprises no relationships between different resource types, but rather only illustrates groups of resources and the aggregated states and any notifications for those groups (e.g., the graph illustrates that a particular application uses three Unix systems and that none of them are using more than 80% CPU.)","The illustrative embodiments provide a solution to the issues above by providing a method for displaying resource-specific metric annotations on a system management graph. The resource-specific annotations provided in the illustrative embodiments are supported by a generic meta-model that supports polymorphism, such that multiple possible annotation sets may be associated with a selected resource or group of resources in the enterprise system. Data for a system management graph is provided by an object model that defines resources in the enterprise system and their relationships, as well as resource-specific metric information. The object model maintains a list of possible annotations available for each type of resource. The annotations are used to represent the metric information associated with, the resources.","A system management user interface uses the object model to build the graph in a generic manner. The user may select a set of resources in the graph, wherein a set may comprise an individual resource or a group of resources. The user interface dynamically retrieves and provides the user with a menu comprising the list of possible annotations for the selected set of resources, A \u2018possible\u2019 annotation for a selected set of resources comprises any annotation that has a metric value for each resource in the set of resources that is available to be retrieved and displayed in the graph. The user interface determines the list of possible annotations to provide to the user based on the type of resource(s) selected, such that the annotation options provided to the user for one resource type in the enterprise may differ from the annotation options provided for another resource type. When presented with a menu comprising a list of possible annotations associated with the selected set of resources, the user may select one or more annotation options from the list to be displayed in the graph for the selected set of resources.","Once the user has selected the desired annotations to be shown in the graph, the graph is updated to display the selected annotations and may be used to monitor and manage the enterprise environment. The annotations indicate the current operational status for the selected set of resources, without requiring the user interface to have any knowledge of the resource type or annotations. Examples of annotations to be displayed in the graph include, but are not limited to, annotations that reflect the values of CPU, memory, or disk usage. Annotations may also be used to show the number of transactions flowing through applications or temperature values to indicate the thermal, health of individual computer systems represented in the graph. The annotations displayed in the user interface of the illustrative embodiments enable system administrators to have a clear idea of the metric values for multiple resources in the system, without requiring users to individually select resources in the graph to obtain metric information about each of the resources.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 1","FIG. 1"],"b":["500","500","110","112","114","502","502","104","106","500","504","506"]},"Resource server process  obtains information regarding various resources and metrics that are of interest and stores that information in resource database . This information may include, for example, an identification of clusters, hosts, data stores, virtual machines, application servers, applications, data sources, etc., in addition to the relationships among the resources. Metrics that may be gathered for these resources include, but are not limited to, the operational level of a particular physical device, such as whether a server is operating in a normal mode, a warning mode, or a critical mode. Further, other metrics may include, for example, the capacity or amount of processing being performed by a particular resource. Some other metrics include for example, TCP\/IP parameters including a high ping or response level and retransmission, of segments. Another metric that may be used includes low available memory or high, paging of data. Stopped or failed services are additional metrics. Metrics also include physical disk measurements that indicate a high percentage of disk time, a high transfer rate, a slow physical drive, and a high reading of bytes per second. Logical disk metrics include, for example, low disk space, amount of fragmentation, and slow logical drive response. A high print job error rate for a printer is yet another example of a metric that may be used.","Client process  receives this information from, resource server process  via user interface . Resource server process  uses generic meta-model  and object model  to determine the possible annotation options in annotations list  to be provided to a user for the selected set of resources in the system management graph in user interface . Client process  uses the resource information and the annotation options retrieved from resource server process  to update the resource information, resource relationship information, and the metric annotations displayed in the system management graph in user interface . System management graph in user interface  allows for viewing the entire system of resources, resource relationships, and associated resource metrics.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 6","FIG. 5"],"b":["600","600","512","680","602","684","606","602"]},"Association class  models the connections or associations between instances of the associated class . Association class  may comprise many-to-one and many-to-many associations among resources, where the association itself has attributes. An association comprises at least two association ends , each specifying a connected class  and a set of properties which must be full filled for the relationship between resources to be valid.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 7","FIG. 6","FIG. 5"],"b":["680","700","514","700","700","702","704","706","708","710","700","700"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIGS. 8-10","FIG. 8","FIG. 7"],"b":["800","802","802","700"]},"User interface  provides a menu  that allows a user to browse and select which metric annotations are to be displayed for a selected set of resources in graph . Menu  may be displayed to the user automatically when the user selects a set of resources, or menu  may be displayed for the set of resources when the user right-clicks on graph . In either case, menu  displays a list of annotation options  (menu items) for the user to browse through and select. In one embodiment, menu  may comprise a drop-down menu and submenus that reflect annotation options  available to the set of resource items selected in graph .","Annotation options  provided in menu  may include annotations that reflect the values of CPU, memory, or disk usage, as well as the number of transactions flowing through, applications or temperature values to indicate the thermal health of individual computer systems represented in the graph, among other possible annotation metrics. The particular annotation options provided to the user in menu  are dependent on the types of resources that are selected in graph . For example, graph  shows various highlighted resources that have been selected by the user. These selected, resources include physical resources such as managed cluster , hosts , and server , as well as non-physical resources such as processes  and . Menu  comprises possible annotations available for the set of resources as a whole. Client process  in  determines the metric annotation types to display in menu  by traversing the object model to locate a common, superclass in foe model for all the resources currently selected in graph . The metrics associated with the located superclass are displayed in menu . In this illustrative example, as both processes and physical computer systems are selected in graph , menu  provides the user with a list of the possible annotations (e.g. CPU, memory) for this group of selected resources. However, if only physical computer systems are selected in graph , the annotation options provided in menu  may include other possible annotations, such as a thermal annotation for displaying the thermal properties of the physical resource.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 9","FIG. 8"],"b":["902","804","804","802","904","906"]},"User interface  supports a plug-in infrastructure for registering and displaying the annotations in graph . In one embodiment, a percentage based plug-in may be registered for annotations whose values are represented as percentages that indicate to the user the operational status of each selected resource. The plug-in may determine the current metric value of the annotation from the object model and render the value as a percentage on graph . The plug-in may display the current percentage value as text. Alternatively, the plug-in may render the metric values on graph  as icons to pictorially represent the current operational status of the resources. The plug-in may also render metric value annotations on graph  in a particular color to represent the current status of the resource. For instance, if the metric value for a resource currently meets or exceeds certain, threshold conditions defined in the plug-in, colors such as green and red may be used in the annotation to represent \u201cgood\u201d and \u201cbad\u201d statuses respectively. Similarly, other color coded combinations for the annotation text and\/or icons may be used to indicate a resource is operating in a normal mode, a warning mode, or a critical mode.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 10","b":["1000","1002","1004","1002","1004","1006","1004","1004","1004","1006","1002","1002"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 11","FIG. 7"],"b":["1102","1104","1106","700","1104","1100","1102","1104","1100","1102","1108","1110","1102"]},"If the user selects a virtual computer system represented in a system management graph such as system management graph  in , a menu is provided to the user to allow the user to select and enable the CPU and\/or memory annotation(s) for the selected virtual computer system. Both the CPU annotation and the memory annotation are inherited from ComputerSystem class  and will be displayed in the graph as percentages. If the user selects a physical computer system represented in the system management graph, a menu is also provided to the user to allow the user to select and enable CPU and\/or memory annotations) for the selected physical computer system, if the user enables the memory annotation, the memory annotation is inherited from ComputerSystem class  and will be displayed in the graph as a percentage. However, if the user enables the CPC annotation, the CPU annotation, will be displayed in the graph as an icon, as the CPU annotation attribute  defined in PhysicalComputerSystem class  has overridden the annotation attributes inherited from ComputerSystem class .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 12","FIG. 12","FIG. 5"],"b":"500"},"The process begins with the user selecting an individual resource in the system management graph (step ). When the resource selection is detected, the process calls the object model that was used to build the graph to obtain the list of possible annotations for the selected resource (step ). The class model returns the annotations defined for the selected resource and the parent classes of the selected resource to the process (step ). The process then builds the menu comprising the possible annotation options for the selected resource (step ) and provides the menu to the user (step ).","When the user selects and enables one or more annotation options in the menu (step ), the process updates the graph to display the selected annotations for the selected resource (step ), with the process terminating thereafter.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 13","FIG. 13","FIG. 5"],"b":"500"},"The process begins with the user selecting a plurality of resources in the system management graph (step ). As selection of the resources is detected, the process calls the object model that was used to build the graph to obtain the list of possible annotation options for the selected resources (step ). The object model locates the common parent, class in the object model for the selected resources (step ). The class model then returns the annotations defined for the parent class to the process (step ). The process then builds the menu comprising the possible annotation options (step ) and provides the menu to the user (step ).","As the user selects and enables one or more annotations in the menu (step ), the process updates the graph to display the selected annotations for the selected resources (step ), with the process terminating thereafter.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block, may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved, ft will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, hut do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the embodiments in the disclosure has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program, code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any tangible apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","A data processing system suitable for storing and\/or executing program, code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled, to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.","The description of the embodiments in the disclosure has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 8-10"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
