---
title: Account related task processing
abstract: A system for periodic and real-time processing of accounts. The system operates in a bulk mode and an error mode. A bulk component concurrently processes a set of eligible accounts with a set of dependent tasks, and a removal component removes one or more accounts from the eligible accounts if an error is associated therewith. In bulk mode, each task fetches only the required set of accounts/subscriptions/payment instruments for processing. In error mode (retry/reprocess mode), if an account encounters an error for a task in the bulk mode, the account drops is removed from bulk mode and becomes ineligible for fetching in any future bulk-mode task processing. Error-mode processing tests and processes all tasks sequentially for an errored account until the account state is in par with the accounts being processed by bulk mode. Then the account is removed from error mode processing and is picked up appropriately by bulk-mode processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07949575&OS=07949575&RS=07949575
owner: Microsoft Corporation
number: 07949575
owner_city: Redmond
owner_country: US
publication_date: 20031230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention is related to software system, and more specifically to accounts processing services.","The advent of the Internet has facilitated the use of subscription services provided any number of subscribers. In a subscription processing system, relationships are maintained for subscribers with respect to specific subscriptions purchased, its associated services, specific payment instruments to be used for billing, specific payment methods to be used, etc. For every such customer, an entity called an account is maintained, along with the associated subscription, service, and payment instrument entities. It is essential that the system take all the necessary accounting actions on a periodic basis as the business demands. For example, every month, subscriber accounts need to be task-processed for charges, given any resources and charge adjustments, processed for cancellations, expirations or renewal, have services enabled, disabled, provisioned or de-provisioned, emails sent according to various events to keep the customers informed, etc. The system performs these tasks periodically (e.g., daily) to keep the state of the accounts in synchronism with the passage of time. In most cases, these account tasks must be performed in a certain order. Thus, a second task is dependent on first task, and requires the first task to be successfully completed before the second task can be completed.","Periodic processing of this inter-dependent set of tasks is what keeps the customer accounts consistent and up to date as defined by business processes. As indicated previously, it is important that the dependent tasks are performed in order and the dependency is strictly enforced. It is equally important for the business that processing be done for potentially millions of accounts\/subscriptions on a daily basis in a reasonable amount of time, e.g., not more than 3-4 hours every day. This is important so that customer initiated actions (e.g., signups, self care), customer service representative (CSR) initiated support actions (e.g., credits, adjustments) and other system actions (e.g., payment processing) have accounts in a consistent state to work with. This also allows completing periodic processes during the lull period for other activities so that they do not compete with each other for system resources. Further, because of hardware, software, business or operational issues, at times periodic processes may not run regularly. As such, it is desired to have the capability to process multiple days worth of processing in a single day to recover.","Even though periodic processes are done during the lull period for other activities and it only takes 3-4 hours to complete them, other activities on the account cannot be blocked. Hence, a \u2018catch-up process\u2019 is provided that can bring this particular account to a consistent state on demand.","Thus, periodic processing of the tasks has at least the following requirements. First, the order and dependency of these tasks is required to be strictly enforced for a given customer account. Second, task processing for all needs to be completed in a reasonable amount of time, e.g., 3-4 hours. Third, there needs to be a way to bring an account to a consistent state on demand. One way to address the first requirement would be to visit each account and all of its associated subscriptions, payment instruments, etc., every day, and test whether the account needs processing for all the different related tasks. However, the first requirement has performance implications that can seriously jeopardize the second requirement. For example, if there are ten million accounts and fifteen related tasks, it would require processing to completion 150 million such tests each day. Even if only testing was being performed for the whole four hours, each test for each account would need to be completed in ninety-five microseconds. After performing through the 150 million tests, based on empirical evidence, approximately only one percent tests will result in actual processing work.","What is needed is an improved processing technique for handling large numbers of accounts.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The present invention disclosed and claimed herein, in one aspect thereof, comprises a system that facilitates periodic processing technique in a bulk mode and an error mode. There is provided a catch-up component that allows real-time actions to perform the work of periodic processing, on demand. There is also provided a bulk component that concurrently processes a plurality of eligible accounts with a set of dependent tasks, and a removal component that removes one or more accounts from the eligible accounts as errored accounts if an error is associated therewith. In bulk mode, each task fetches only the required set of accounts\/subscriptions\/payment instruments for processing. In error mode (retry\/reprocess mode), if an account encounters an error for a task in the bulk mode, the account drops out of the bulk mode and becomes ineligible for fetching in any future bulk-mode task processing. The error-mode processing tries to test and process all tasks for an account sequentially until the account state is in par with the rest of accounts being processed by bulk mode. Then the account is removed from error mode processing and is picked up appropriately by bulk-mode processing.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative, however, of but a few of the various ways in which the principles of the invention may be employed and the present invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing the present invention.","As used in this application, the terms \u201ccomponent\u201d and \u201csystem\u201d are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","As used herein, the term \u201cinference\u201d refers generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources.","Referring now to , there is illustrated a block diagram of a system  of the present invention. Account processing of millions of subscriber accounts poses an enormous challenge to conventional systems, since processing must be completed in a relatively short period of time, and on a regular basis. The novel periodic processing approach facilitates the expeditious processing of a large number of subscriber accounts by performing the processing in two modes: a bulk mode and an error mode. Bulk mode consists of first performing processing on those accounts required for processing (i.e., \u201celigible\u201d accounts), and only those that are error-free based on the tasks that are being run against those accounts. There is also provided the capability to perform real-time processing of accounts outside of the periodic processing aspect on a demand basis.","In support thereof, the system  includes a number of subscriber accounts  that need to be processed on a required basis. In accordance with periodic processing of the present invention, a select group of eligible accounts  related to the tasks to be performed can be determined and processed in a bulk-processing mode utilizing a bulk component . Bulk processing occurs in accordance with one or more account tasks , which tasks component  interfaces to the bulk component . There is also provided a removal component  that interfaces to the bulk component  to facilitate the removal of those eligible accounts that exhibit an error for a given task during bulk processing, and thus, impede bulk processing. The errored accounts are removed for processing by an error component  that process all tasks against the single account in order to resolve the error(s). The error component  interfaces to the bulk component , account tasks component , and the removal component . Once resolved, the account is merged back into bulk processing by the bulk-processing component . Note that the bulk component  processes the eligible accounts concurrently with the tasks being applied to those accounts. Furthermore, the bulk component  performs bulk processing concurrently with error processing by the error component . A catch-up component  interfaces to both the account tasks component  and the accounts  such that real-time processing of accounts can be performed on a demand basis, which is outside of the periodic processing aspect of the system . This is useful where a subscriber wishes to cancel a subscription and wants to know the amount of the charges incurred to the point of cancellation, for example. The catch-up component  brings the account forward or up-to-date to the current date or the date the subscriber requested.","More specifically, in bulk mode, each task includes its own preset criteria and fetches only the required set of accounts\/subscriptions\/payment instruments for processing. Effectively, all of the tasks together produce a required number of processing candidates across the whole set of accounts. Note that although account is used as the unit herein, in general, this is can be an object with sufficient scope so that actions on another instance of this object do not affect the state of a particular object. For example, where a subscription can be transferred from one account to another, account-level will not be at a sufficient level of granularity. Conversely, a finer grain of granularity can be chosen.","In general, assuming a dependency granularity of an account, for a given account, a given periodic processing task for a given day can be dependent on one or more periodic processing tasks on the same day or earlier days for the same account. However, from the standpoint of running the system, the same is achieved as long as it is enforced that a periodic processing task instance (across all accounts) for a given day is dependent on one or more task instances (across all accounts) on the same day or earlier days. As a further refinement, the system can be broken into logical chunks, e.g., twelve chunks based on the month of sign-up date or twenty-six chunks based on first character in their last name. These chunks are independent of each other and can be treated as a separate logical periodic processing unit. Thus, if a subscription expiration task depends on notification task, a logical unit for the \u201cFebruary chunk\u201d can start processing \u201csubscription expirations\u201d even though the \u201cMarch chunk\u201d is still working on \u201cnotifications.\u201d","In bulk mode, the same inter-task dependencies that are required for each account within each days processing of these tasks, is maintained. Additionally, tasks slated for completion of a first day must be completed the first day, and in the proper order, before the same tasks can be run the following day. To facilitate effective bulk mode processing, an account, if required, will be picked appropriately by each task. The cumulative effect of the disclosed architecture similar to account-level enforcement of these task dependencies, which works fine, as long as an account does not encounter any errors.","In error mode (also called a retry\/reprocess mode), if an account produces any error for any of the tasks during bulk-mode processing, this account is removed from bulk-mode processing, and immediately becomes ineligible for fetching in any future bulk-mode task processing. This is required to enforce inter-task dependency at an account-level. These error accounts are then picked up by error-mode processing, where each task is processed against the account starting at the task instance in which it failed, and processed appropriately when required. Error-mode processing attempts to test and process all tasks for an account sequentially in a strict order until the account state is in par with the rest of accounts being processed by bulk mode, in terms of time. Once the account is processed in error mode to the point in time par with bulk-mode processing, the account is removed from error mode processing and the account then is inserted back into bulk-mode processing. Although error-mode processing uses the inefficient strategy of conventional accounts processing, it is now being done for only a relatively small number of accounts when compared to bulk-mode processing.","Additionally, the disclosed architecture provides the capability to scale up using multiple instances of the task processor running for a sub-set of accounts either based on physical partitions or logical partitions (many such partitions are possible).","Performance of one of the tasks, called Subscription Cycle End Processing (SCEP), can be further improved by precisely predicting when a subscription needs to be processed next. This reduces the number of times non-monthly subscriptions need to be processed from twelve times a year to as low as once a year, for example.","The system  is a common framework that facilitates the adding of additional tasks to periodic task processing and enforcing dependencies. The framework also offers the use of a specialized threading infrastructure, the logging of processing errors, event logging, and cached utility objects.","User\/CSR\/Partner initiated operations through the front-end always can work on the most up-to-date accounts due to account level catch-up processing, in a scenario where the back-end is not operating.","Additionally, more complex dependencies can be modeled between tasks (perhaps spanning multiple days).","Referring now to , there is a flow diagram representative of task dependencies. As indicated previously, task processing occurs according to dependencies and on a daily basis. For example, on a first day, a first task (also denoted Task Instance A)  has a precedence value (Precedence Value 10) that indicates it must be processed before a second task (also denoted Task Instance B)  with a precedence value (Precedence Value 11). The following day, Day , the same tasks ( and ) will be processed in the same order (i.e., based on the same precedence). However, tasks ( and ) must be completed properly on Day  before they can be processed on Day . In general, a task A for a date D can be dependent on various tasks instances for the previous days and also a subset of tasks for D. These dependencies can be represented as,","<A, D>:=(A, D-), (B, D-), (C, D-i), (E, \u0192(D)),","where \u0192 is a function of D and can return anything less than or equal to D.","The only requirement is that there be no cycle in dependency. Otherwise, these dependencies could be arbitrary. There are a number of ways to express and enforce these dependencies. In a specific implementation, for simplicity no tasks are chosen for a day D that can start until all tasks for day D- are finished. Referring now to , there is illustrated a flow chart of account processing according to the present invention. While, for purposes of simplicity of explanation, the one or more methodologies shown herein, e.g., in the form of a flow chart, are shown and described as a series of acts, it is to be understood and appreciated that the present invention is not limited by the order of acts, as some acts may, in accordance with the present invention, occur in a different order and\/or concurrently with other acts from that shown and described herein. For example, those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events, such as in a state diagram. Moreover, not all illustrated acts may be required to implement a methodology in accordance with the present invention.","At , the system determines if real-time processing is to be performed. If NO, flow is to  to perform periodic processing. At , a task is received. At , the eligible accounts for that task are identified. In bulk mode, the task is processed against the eligible accounts, as indicated at . At , the system determines if periodic processing has completed. If NO, flow is to , where the system determines if an error has been detected. If NO, flow is back to the input of  to receive the next task, and process it against a set of eligible accounts. On the other hand, if periodic processing has completed, flow is from  to a Stop block.","If an error is detected, flow is from  to , where the account is removed from bulk processing and processed in error mode. At , the tasks are received and processed sequentially against the account. At , if the system determines that the errored account is not yet par with bulk processing, flow if from  back to the input of  to continue processing the tasks. However, if the errored account is now par with bulk processing, flow is from  to  to merge the account in with bulk processing. The process then reaches the Stop block.","As indicated previously, the disclosed architecture is capable of real-time processing. Thus, if the system determines that real-time processing is required, flow is from  to  to receive the account to be processed. At , a task is received and applied against the account. At , other tasks are received an applied, as required, until the account is brought to the date desired. This can be a past date, the current date or to a date in the future. Flow is then to the Stop block. It is to be appreciated that SCEP applies to a subscription account for a given date, and to a whole set of accounts for periodic processing.","In an alternative implementation, the system can be configured to receive a set of accounts for a set of tasks, and then processed accordingly in bulk mode.","At , the tasks related to the particular accounts are defined and implemented for account processing. At , preparation is made for bulk mode processing by using the tasks to determine a group of eligible accounts. Each task has an identifiable number of the accounts to which the task is applied. Although not a requirement, any two or more of the tasks can be applied against the same account. Thus, where a first task is processed against a first account and a second account, a second task can be processed again the first account and a third account. At , once the eligible accounts have been identified for the given task, bulk mode processing is commenced by processing the eligible accounts. At , the system determines if an error has occurred on an account. If NO, flow is back to the input of  to continue bulk mode processing. If an error is detected, flow continues from  to  where the removal component automatically removes the errored account from bulk mode processing, and sets the account up for error mode processing. At , catch-up mode processing is performed by testing and processing all tasks sequentially against the errored account. Once task processing for the errored account has been completed, flow is to  to determine if the error-mode processing (also called catch-up mode processing) has caught up temporally with bulk mode processing. If NO, flow is back to the input of  to continue catch-up processing. If YES, flow is to  to merge the account back into bulk-mode processing. Flow then loops back to the input of  to continue bulk mode processing.","Referring now to , there is illustrated a more detailed block diagram of a system  of the present invention. The system  includes a database layer  of data that is used in the processing architecture. The database layer  includes data such as billing information , subscription information , and comment information , just to name a few. The system  also includes a number of tasks , which includes the SCEP , an ACEP (Accounts Cycle End Processing) task , an E-mail task , and a renewal task. Of course, there can be more tasks or fewer tasks.","In this particular embodiment, the first and largest task  is the SCEP, which calculates what the charges are, the hours, usage and dollars owed based on subscriber usage. A second task  is account cycle end processing (ACEP), which processes multiple subscriptions, determines charges for the various subscriptions, aggregates the charges, and processes the charges against the bank. A third task  is related to sending an e-mail to the subscriber according to account requirements. A fourth task  is related to renewals, which occur on a daily basis, and which can involve year-end (or annual) subscriptions. Thus, a notification such as an email can be generated and sent to the subscriber indicating that a subscription is up for renewal. Here, the dependency can be such that the renewal task is dependent on the e-mail task, or vice versa. Another messaging\/renewal example can be giving 30-day notice in the form of an e-mail at a current price point. If no response, the subscriber is automatically renewed at that price point. After e-mails have been generated and sent, the e-mail task  can be related to receiving and processing e-mail responses.","The system  includes a periodic processing framework  that provides data to the tasks module . The framework  processes task class dependency data  relating to the set of tasks being processed against the eligible accounts, maintains periodic processing system state data  related to the current state of the system, generates an account level exception list data  of exceptions generated during the bulk processing, performs reporting and monitoring  related to at least bulk processing and removing an errored account, and provides error handling  related to an error generated by the errored account.","Inputs to the framework , include a bulk mode scheduling component  that schedules bulk mode processing, a retry mode scheduling component  that schedules a low number of automatic retries (e.g., three or four times) of an account that has generated an error with the hope that the error automatically resolves itself, and a manual\/automatic reprocessing component , where if an account has been erroring too many times, user intervention is required to resolve or to assist in working through the processing phase.","In bulk mode, any account that is determined to have an error for a given task will not have the subsequent tasks performed against it. In error mode, the account with the error will have all tasks applied until the error clears. The account can then be returned to bulk mode processing. An error can occur from a variety of reason, e.g., a network glitch, data problem, code bug, etc., that impacts the account such that an error is produced.","The system  also includes an SPK (subscription processing kit) API (application programming interface) component  that accesses tasks from the tasks module , data from the database layer , and output catch-up information to the framework . The tasks information and database information is then used to perform catch-up while in the error processing mode, such that when the previously errored account has all related tasks processed successfully against it without error, and the account is par with the bulk mode processing, the account can now be merged back in with bulk mode processing.","The tasks module  also interfaces directly to the database layer  to process stored procedural calls .","In one scenario, for example, a user subscription anniversary is the 20of January. The user calls on January 21and requests immediate cancellation of the account and the charges incurred up to that point in time. The back-end periodic process SCEP has not yet acted on this account to compute new charges for the 20. The SPK  includes a cancellation API that can be employed to handle this situation, by bringing the account current, since the system processing always lags real-time by a small amount. When a Cancel API is called, it detects that the account is not current, and calls another component to make this account current. This component works on this account in a manner similar to error mode processing, by evaluating all possible actions. It differs from error-mode processing by bringing this account current to the specified data even though the overall system is farther behind. Since the customer is calling, and wants the result now, not all tasks may be required to be run, for example, the email task. The command to the system is to take this account, and if it is not current, make it current; if the account is already current, do not perform any operation, but report out the requested information.","The periodic processing framework  makes it very easy to add a new job. This can be performed by writing a SQL (Structured Query Language) query that will return the eligible candidate accounts. The framework  executes the query in a way that will not interfere with ongoing processes, and returns thousands of accounts at a time. Note that processing a large number of accounts (e.g., millions of accounts) utilizes too many resources. Thus, typically, a predetermined subset of accounts is requested, for example, the top one hundred accounts on which a task is to be performed. This is then repeated for the remaining subsets of accounts until no more accounts are available for processing. This provides a number of candidate accounts, and verifies execution of those accounts. The framework  monitors how many tasks are failing or and how many are not failing. The framework  also allows a status for a previous duration of time, e.g., the last few days, the last week, etc., which is historical data that is maintained. Specific errors to specific tables are monitored and can be reprocessed. The framework  is basically the daily health maintenance of the system , and has the capability to move one or more accounts ahead in time as time passes so that the account can be invoiced and charges can be are sent before the services have actually accrued. The framework  processes charges, renewals, expirations (when the time comes), sends messages (e.g., e-mails), and other forms of information, and closes accounts.","Referring now to , there is illustrated a system  of the present invention that addresses account interdependencies by employing a classifier  in the system  of . In one implementation, there is no dependency across accounts. In another implementation, accounts have interdependency. In such a case, an action on an account does not change the dependency on that account. In support thereof, there can be a predetermined threshold level of the number of dependencies associated with an account, where if the number of dependencies is below the threshold, all dependent accounts are considered inconsistent. If above the threshold, then the system deals with those accounts autonomously, and ignores the dependencies.","The subject invention can employ various artificial intelligence based schemes for carrying out various aspects of the subject invention. For example, a process for determining the number of account dependencies can be facilitated via an automatic classification system and process. Additionally, or alternatively, the classifier can be used to aid the system in facilitating self-throttling such that system resources such as I\/O, memory, and processor usage (or any combination thereof) are maintained under a predetermined threshold.","A classifier is a function that maps an input attribute vector, x=(x1, x2, x3, x4, xn), to a confidence that the input belongs to a class, that is, f(x)=confidence(class). Such classification can employ a probabilistic and\/or statistical-based analysis (e.g., factoring into the analysis utilities and costs) to prognose or infer an action that a user desires to be automatically performed. In the case of account processing systems, for example, attributes are words or phrases or other data-specific attributes derived from the accounts (e.g., database tables, the presence of key terms), and the classes are categories or areas of interest (e.g., levels of priorities).","For example, a support vector machine (SVM) classifier can be employed. An SVM operates by finding a hypersurface in the space of possible inputs. This hypersurface attempts to split the triggering criteria from the non-triggering events. Intuitively, this makes the classification correct for testing data that is near, but not identical to training data. Other directed and undirected model classification approaches include, e.g., na\u00efve Bayes, Bayesian networks, decision trees, and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.","As will be readily appreciated from the subject specification, the subject invention can employ classifiers that are explicitly trained (e.g., via a generic training data) as well as implicitly trained (e.g., via observing user behavior, receiving extrinsic information). For example, SVM's are configured via a learning or training phase within a classifier constructor and feature selection module. Thus, the classifier(s) may be used to automatically determine the threshold level depending on various criteria of the accounts, e.g., type of data, vendor of the data, user interaction required for the account over time, and other rules. More rules could be implemented based on what kind of task it is, what kind of error it is, etc. Some dependencies will be affected by the particular task or tasks, and other dependencies will not be affected by the particular task. Over time, a knowledge base can be generated and used to predict how a given error will propagate across, e.g., 30,000 accounts.","Referring again to , the classifier  interfaces to the bulk component  and the account tasks component  to determine and learn the number of account dependencies that can occur based on the specific task, and to automatically adjust the threshold level according to the accounts, and other criteria, as desired.","Referring now to , there is illustrated a block diagram of a distributed system  that acts on one account. There is provided a number of accounts  of which there is a subset of eligible accounts  selected for processing according to the particular tasks to be performed. A first system  (similar to the system  having the bulk component , account tasks component , the removal component , and error component ) processes a task on one account  (also denoted ACCOUNT) of the eligible accounts , and determines that the selected eligible account  has an error. Once it has been determined that the selected account  has an error, the first system  can signal a second system , which second system  will not waste processing time by processing the same account . Thus, the first system  functions as a filter to the second system . Essentially, this at least increases the efficiency of the second system , and the overall system , as a whole.","In a similar implementation, the first system  and the second system  are controlled to process eligible accounts on an interleaved basis. That is, the first system  processes the first account  and the second system  processes a second account  (also denoted ACCOUNT). If the first system  determines that the first account is errored, it signals the second system  to ignore processing of the first account . Similarly, if the second system  determines that the second account  is errored, the second system  signals the first system  to skip processing of the second account . Thus, errored account information is passed between the two systems ( and ) such that neither system ( and ) wastes time processing an account that has already been determined to be errored by the other system.","Referring now to , there is illustrated a block diagram of a computer operable to execute the disclosed architecture. In order to provide additional context for various aspects of the present invention,  and the following discussion are intended to provide a brief, general description of a suitable computing environment  in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer-executable instructions that may run on one or more computers, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules and\/or as a combination of hardware and software.","Generally, program modules include routines, programs, components, data structures, etc., that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, minicomputers, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like, each of which may be operatively coupled to one or more associated devices.","The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","A computer typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media can comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital video disk (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer.","Communication media typically embodies computer-readable instructions, data structures, program modules or other data. Combinations of the any of the above should also be included within the scope of computer-readable media.","With reference again to , there is illustrated an exemplary environment  for implementing various aspects of the invention that includes a computer , the computer  including a processing unit , a system memory  and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  may be any of various commercially available processors. Dual microprocessors and other multi-processor architectures may also be employed as the processing unit .","The system bus  can be any of several types of bus structure that may further interconnect to a memory bus (with or without a memory controller), a peripheral bus, and a local bus using any of a variety of commercially available bus architectures. The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) is stored in a non-volatile memory  such as ROM, EPROM, EEPROM, which BIOS contains the basic routines that help to transfer information between elements within the computer , such as during start-up. The RAM  can also include a high-speed RAM such as static RAM for caching data.","The computer  further includes an internal hard disk drive (HDD)  (e.g., EIDE, SATA), which internal hard disk drive  may also be configured for external use in a suitable chassis (not shown), a magnetic floppy disk drive (FDD) , (e.g., to read from or write to a removable diskette ) and an optical disk drive , (e.g., reading a CD-ROM disk  or, to read from or write to other high capacity optical media such as the DVD). The hard disk drive , magnetic disk drive  and optical disk drive  can be connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface  and an optical drive interface , respectively. The interface  for external drive implementations includes at least one or both of Universal Serial Bus (USB) and IEEE 1394 interface technologies.","The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, and so forth. For the computer , the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer-readable media above refers to a HDD, a removable magnetic diskette, and a removable optical media such as a CD or DVD, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as zip drives, magnetic cassettes, flash memory cards, cartridges, and the like, may also be used in the exemplary operating environment, and further, that any such media may contain computer-executable instructions for performing the methods of the present invention.","A number of program modules can be stored in the drives and RAM , including an operating system , one or more application programs , other program modules  and program data . All or portions of the operating system, applications, modules, and\/or data can also be cached in the RAM .","It is appreciated that the present invention can be implemented with various commercially available operating systems or combinations of operating systems.","A user can enter commands and information into the computer  through one or more wired\/wireless input devices, e.g., a keyboard  and a pointing device, such as a mouse . Other input devices (not shown) may include a microphone, an IR remote control, a joystick, a game pad, a stylus pen, touch screen, or the like. These and other input devices are often connected to the processing unit  through an input device interface  that is coupled to the system bus , but may be connected by other interfaces, such as a parallel port, an IEEE 1394 serial port, a game port, a USB port, an IR interface, etc.","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , a computer typically includes other peripheral output devices (not shown), such as speakers, printers etc.","The computer  may operate in a networked environment using logical connections via wired and\/or wireless communications to one or more remote computers, such as a remote computer(s) . The remote computer(s)  may be a workstation, a server computer, a router, a personal computer, portable computer, microprocessor-based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although, for purposes of brevity, only a memory storage device  is illustrated. The logical connections depicted include wired\/wireless connectivity to a local area network (LAN)  and\/or larger networks, e.g., a wide area network (WAN) . Such LAN and WAN networking environments are commonplace in offices, and companies, and facilitate enterprise-wide computer networks, such as intranets, all of which may connect to a global communication network, e.g., the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a wired and\/or wireless communication network interface or adapter . The adaptor  may facilitate wired or wireless communication to the LAN , which may also include a wireless access point disposed thereon for communicating with the wireless adaptor . When used in a WAN networking environment, the computer  can include a modem , or is connected to a communications server on the LAN, or has other means for establishing communications over the WAN , such as by way of the Internet. The modem , which may be internal or external and a wired or wireless device, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory\/storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","The computer  is operable to communicate with any wireless devices or entities operably disposed in wireless communication, e.g., a printer, scanner, desktop and\/or portable computer, portable data assistant, communications satellite, any piece of equipment or location associated with a wirelessly detectable tag (e.g., a kiosk, news stand, restroom), and telephone. This includes at least Wi-Fi and Bluetooth\u2122 wireless technologies. Thus, the communication may be a predefined structure as with conventional network or simply an ad hoc communication between at least two devices.","Wi-Fi, or Wireless Fidelity, allows connection to the Internet from a couch at home, a bed in a hotel room or a conference room at work, without wires. Wi-Fi is a wireless technology like a cell phone that enables such devices, e.g., computers, to send and receive data indoors and out; anywhere within the range of a base station. Wi-Fi networks use radio technologies called IEEE 802.11 (a, b, g, etc.) to provide secure, reliable, fast wireless connectivity. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wired networks (which use IEEE 802.3 or Ethernet). Wi-Fi networks operate in the unlicensed 2.4 and 5 GHz radio bands, with an 11 Mbps (802.11b) or 54 Mbps (802.11a) data rate or with products that contain both bands (dual band), so the networks can provide real-world performance similar to the basic 10BaseT wired Ethernet networks used in many offices.","Referring now to , there is illustrated a schematic block diagram of an exemplary computing environment  in accordance with the present invention. The system  includes one or more client(s) . The client(s)  can be hardware and\/or software (e.g., threads, processes, computing devices). The client(s)  can house cookie(s) and\/or associated contextual information by employing the present invention, for example. The system  also includes one or more server(s) . The server(s)  can also be hardware and\/or software (e.g., threads, processes, computing devices). The servers  can house threads to perform transformations by employing the present invention, for example. One possible communication between a client  and a server  may be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and\/or associated contextual information, for example. The system  includes a communication framework  (e.g., a global communication network such as the Internet) that can be employed to facilitate communications between the client(s)  and the server(s) .","Communications may be facilitated via a wired (including optical fiber) and\/or wireless technology. The client(s)  are operably connected to one or more client data store(s)  that can be employed to store information local to the client(s)  (e.g., cookie(s) and\/or associated contextual information). Similarly, the server(s)  are operably connected to one or more server data store(s)  that can be employed to store information local to the servers .","What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. For example, one or more accounts can be processed in parallel using a plurality different computing systems or a plurality of computing subsystems in a single computing system. Moreover, accounts can be processed in parallel by different threads of execution using a single computing system or processor. In another implementation, the tasks or processes can only be initiated by a user on a control list. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
