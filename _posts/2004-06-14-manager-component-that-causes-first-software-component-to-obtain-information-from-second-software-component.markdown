---
title: Manager component that causes first software component to obtain information from second software component
abstract: A distributed software application comprises a first and second software component. A manager component of a management infrastructure for the distributed software application in one example causes a first software component of the distributed software application to obtain information from a second software component of the distributed software application for initialization of the first software component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07873941&OS=07873941&RS=07873941
owner: Alcatel-Lucent USA Inc.
number: 07873941
owner_city: Murray Hill
owner_country: US
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application contains subject matter that is related to the subject matter of the following applications, which are assigned to the same assignee as this application. The below listed applications are hereby incorporated herein by reference in their entireties.","\u201cINSTRUCTING MANAGEMENT SUPPORT SOFTWARE OF A FIRST SOFTWARE COMPONENT TO SET UP A COMMUNICATION CHANNEL BETWEEN THE FIRST SOFTWARE COMPONENT AND A SECOND SOFTWARE COMPONENT,\u201d by Buskens, et al., patent application Ser. No. 10\/868,128, co-filed herewith;","\u201cSELECTING A PROCESSOR TO RUN AN EXECUTABLE OF A DISTRIBUTED SOFTWARE APPLICATION UPON STARTUP OF THE DISTRIBUTED SOFTWARE APPLICATION,\u201d by Buskens, et al., patent application Ser. No. 10\/868,404, co-filed herewith;","\u201cSOFTWARE COMPONENT INITIALIZATION IN AN ORDERED SEQUENCE,\u201d by Buskens, et al., Patent Application No. 10\/867,945, co-filed herewith;","\u201cSHUTTING DOWN A PLURALITY OF SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE,\u201d by Buskens, et al., patent application Ser. No. 10\/868,142, co-filed herewith;","\u201cDISTRIBUTED SOFTWARE APPLICATION SOFTWARE COMPONENT RECOVERY IN AN ORDERED SEQUENCE,\u201d by Buskens, et al, patent application Ser. No. 10\/867,590, co-filed herewith;","\u201cMANAGER COMPONENT FOR CHECKPOINT PROCEDURES,\u201d by Buskens, et al., patent application Ser. No. 10\/868,127, co-filed herewith;","\u201cFIRST AND SECOND MANAGER COMPONENTS THAT COMMUNICATE TO INITIALIZE AND\/OR SHUT DOWN SOFTWARE COMPONENTS IN AN ORDERED SEQUENCE,\u201d by Buskens, et al., patent application Ser. No. 10\/867,946, co-filed herewith;","\u201cMANAGER COMPONENT RESOURCE ADDITION AND\/OR RESOURCE REMOVAL ON BEHALF OF DISTRIBUTED SOFTWARE APPLICATION,\u201d by Gong, et al., patent application Ser. No. 10\/868,144, co-filed herewith.","\u201cSUBSTITUTE MANAGER COMPONENT THAT OBTAINS STATE INFORMATION OF ONE OR MORE SOFTWARE COMPONENTS UPON FAILURE OF A FIRST MANAGER COMPONENT,\u201d by Buskens, et al., patent application Ser. No. 10\/868,472, co-filed herewith.","The invention relates generally to distributed software applications and more particularly to management of distributed software applications.","In known distributed software applications, software components are distributed among a plurality of executables (i.e., software capsules or software entities). Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. The software components often store state information, for example, a checkpoint, to reduce recovery time of a failed or newly initialized software component. In known distributed software applications, the software components individually manage checkpoints and their associated checkpoint procedures. Although software components often share state information between each other, each software component performs checkpointing of its own state information.","As one shortcoming, application developers must add extra software to the software components to perform checkpoint procedures in all execution scenarios. As another shortcoming, the state information that is shared between software components is checkpointed by each software component, which reduces storage efficiency and lowers run-time performance.","Thus, a need exists to alleviate the responsibility of application developers, to promote an increase in storage efficiency of software components of distributed software applications and to promote an increase in performance resulting from the improved storage efficiency.","In one embodiment, there is provided an apparatus comprising a manager component of a management infrastructure for a distributed software application that causes a first software component of the distributed software application to obtain information from a second software component of the distributed software application for initialization of the first software component.","In another embodiment, there is provided a method for obtaining information for a first software component from a second software component, of a distributed software application, identified by a high availability manager component of the distributed software application.","In yet another embodiment, there is provided an apparatus comprising a high availability manager component of a high availability infrastructure for a distributed software application that comprises at least a first software component and a second software component. The first software component comprises first application software that performs a first portion of functionality of the distributed software application and first management support software that comprises a first portion of the high availability infrastructure. The second software component comprises second application software that performs a second portion of functionality of the distributed software application and second management support software that comprises a second portion of the high availability infrastructure. The high availability manager component causes the first management support software of the first software component to obtain information from the second management support software of the second software component.","Turning to , an apparatus  in one example comprises a distributed software application  and one or more management infrastructures . The distributed software application  represents a software application divided among a plurality of executables (i.e., software capsules or software entities). For example, the distributed software application  comprises a plurality of executables , , ,  and . The distributed software application  may run on a single central processing unit (\u201cCPU\u201d) or may be divided between multiple CPUs. For example, the executable  may run on a processor  and the executable  may run on a processor .","The executables , , ,  and  comprise one or more software components , , , , ,  and  of the distributed software application , as described herein. For example, the executable  encapsulates the software components  and  and the executable  encapsulates the software component . Within each of the executables , , ,  and  may be tens, hundreds, or even thousands of other software components (e.g., analogous to the software components , , , , ,  and ).","The distributed software application  comprises a plurality of software components, for example, the software components , , , , ,  and . The software components , , , , ,  and  represent software sub-entities of the executables , , ,  and . For example, the software components , , , , ,  and  represent logical software blocks and\/or software objects. The software components  and  in one example are developed independently and then put together within the executable . For example, the software components  and  are compiled into the executable . The distributed software application  may provide any functionality for a computer system. The distributed software application  in one example comprises a call processing software application. For example, the distributed software application  sets up and\/or tears down telecommunication sessions in a telecommunication network.","The management infrastructure  performs one or more management procedures for the distributed software application . For example, the management infrastructure  provides a reusable software framework for one or more management procedures. For example, the management infrastructure  handles one or more of starting, stopping, initializing, and monitoring the distributed software application , detecting failures of the distributed software application , recovering the distributed software application , propagating state changes about the distributed software application , establishing communication channels between the software components , , , , ,  and , and the like.","The management infrastructure  in one example comprises one or more manager components , one or more executable managers  and  and\/or one or more management support components . The management infrastructure  may run on one or more of the processors , , and\/or a remote processor (not shown). The manager component  in one example handles startup, shutdown, initialization, failure detection, recovery, and other functions for the distributed software application , as will be appreciated by those skilled in the art.","One or more of the components of the management infrastructure , for example, the manager component , the executable managers  and , and the management support software  of the software components , , , , ,  and\/or , in one example detect one or more failures and\/or faults of the distributed software application  and\/or the management infrastructure . In one example, the software component  of the distributed software application  returns a response to the manager component  during initialization that indicates an error. In another example, the manager component  employs a timer to determine a timeout for a message response. For example, the manager component  determines an error has occurred if it has not received a message response from the software component  within a pre-determined time interval, for example, thirty seconds. The components of the management infrastructure  in one example communicate through employment of a fault-tolerant and\/or redundant messaging protocol. For example, the fault-tolerant messaging protocol comprises handshake procedures, delivery confirmations, message timeouts, fault detection procedures, and fault escalation procedures, as will be appreciated by those skilled in the art.","The manager component  comprises a communication interface  for receiving incoming communications. The communication interface  is employable for receiving a configuration file  for the distributed software application . The manager component  may employ other means to receive the configuration file , such as reading the configuration file  directly from a disk or file system. The manager component  may also use the communication interface  for receipt of external system information from an external environment . The external environment  in one example represents other components of the system that are in communication with the manager component . The communication interface  may also receive communications from the executable managers  and , as well as communications from the software components , , , , ,  and . The manager component  is encapsulated with zero or more other software components in an executable . The executable  that contains the manager component  may be run on either of the processors  and .","The manager component  in one example establishes one or more communication channels between the software components , , , , ,  and . In one example, the manager component  establishes a communication channel  between the software component  and the software component . In another example, the manager component  establishes a communication channel  between the software component  and the software component . The manager component  sends one or more messages, for example, the messages  and , to the management support software  of the software components  and , respectively, to establish the communication channels  and .","The executable managers  and  comprise a communication interface  for communication with the manager component . The executable managers  and  in one example receive instruction from the manager component . For example, the executable managers  and  may receive instructions at the communication interface  from the manager component . The executable managers  and  in one example are encapsulated in an executable  and an executable , respectively.","The executable managers  and  monitor executables and\/or software components of the distributed software application  that run on the processors  and , such as the executables , , ,  and  and the software components , , , , ,  and\/or . For example, the executable managers  and  monitor communication channels and\/or diagnostics on behalf of the executables , , ,  and , and the software components , , , , ,  and . Should one or more of the executables , , ,  and  and\/or the software components , , , , ,  and  fail, the respective executable manager informs the manager component  of the failure.","In one example, the management infrastructure  comprises one executable manager per processor. For example, the executable  of the executable manager  runs on the processor . The executable manager  monitors the executables  and  and the software components ,  and . The executable  of the executable manager  runs on the processor . The executable manager  monitors the executables ,  and  and the software components , ,  and .","Each of the software components , , , , ,  and  comprise application software , management support software , a management support software communication interface , and one or more application software communication interfaces . The software components , , , , ,  and  employ the management support software communication interface  to receive communications from the manager component . The software components , , , , ,  and  employ the application software communication interfaces  to receive communications from other software components of the software components , , , , ,  and . An application programming interface (\u201cAPI\u201d)  communicatively couples the application software  with the management support software  in each of the software components , , , , ,  and . The application software  and the management support software  can exchange information through the application programming interface . The manager component  in one example generates the application programming interface  through employment of a code generator.","The software components , , , , ,  and  each perform some portion of the overall functionality of the distributed software application . The software components , , , , ,  and  work together to make the distributed software application  achieve the desired operation. For example, the software components , , , , ,  and  process incoming requests from each other and perform operations to provide the overall functionality.","An application developer creates the application software  of the software components , , , , ,  and  to perform the designated functionality of the software components , , , , ,  and . For example, the application developer creates the application software  of the software components , , , , ,  and  to achieve the overall functionality of the distributed software application . The management support software  of the software components , , , , ,  and  communicatively couples the software components , , , , ,  and  to allow the application software  to perform the functionality of the distributed software application .","To alleviate the application developers from being required to write software into each of the software components , , , , ,  and  for the management procedures, the manager component , the executable managers  and , and the management support software  cooperate to perform the management procedures for the software components , , , , ,  and . A code generator of the management infrastructure  in one example automatically generates the management support software . The code generator of the management infrastructure  employs the configuration file  to create the management support software . For example, the configuration file  comprises connection information and\/or architecture information of the distributed software application . The code generator creates code for the management support software . The code for the management support software  is compiled and linked with the application software  in the software components , , , , ,  and . The management support software  may be different for each of the software components , , , , ,  and , as will be appreciated by those skilled in the art.","One or more of the manager component , the executable managers  and , and\/or the software components , , , , ,  and  in one example comprise a portion of an active\/standby group. Each active\/standby group comprises a first component (i.e. active component) and a second component (i.e. standby component). The first component performs a portion of the overall functionality of the distributed software application  or the management infrastructure  while the second components remain inactive. Upon a failure of the first component, the second component is promoted to an active status. For example, the standby component becomes an active component and begins to perform the portion of the overall functionality. The standby component provides a redundancy in operation of the distributed software application  and\/or the management infrastructure . The active\/standby group promotes a reduction in downtime for the distributed software application  and\/or the management infrastructure , as will be appreciated by those skilled in the art.","During operation of the distributed software application , the software components , , , , ,  and\/or  in one example perform one or more checkpoint procedures, as described in SOFTWARE COMPONENT INITIALIZATION IN AN ORDERED SEQUENCE. A checkpoint comprises a portion of state information for the software components , , , , ,  and\/or . Exemplary state information comprises one or more variables, data structures, and\/or software objects, as will be appreciated by those skilled in the art. The software components , , , , ,  and\/or  in one example share state information. For example, the software component  shares state information with the software component . The software component  comprises a first portion and a second portion of state information. The software component  shares the first portion of state information with the software component . The software component  does not perform a checkpoint procedure for the first portion of state information.","In one example, upon a failure and\/or recovery of the software component , the software component  reloads the first portion of state information from the software component . In another example, upon initialization of the software component , the software component  loads the first portion of state information from the software component . The software component  and the software component  in one example comprise different types of software components. For example, the software components  and  may perform different portions of the overall functionality of the distributed software application , as will be appreciated by those skilled in the art.","Loading and\/or reloading of the first portion of state information from the software component  promotes a reduction in recovery time of the software component . The application programming interface  comprises a function call interface. For example, the application programming interface  comprises a \u201cGetStateInfo( . . . )\u201d function for obtaining a checkpoint from the application software  and a \u201cSetStateInfo( . . . )\u201d function for setting one or more data structures of the application software  to an initial value, as will be appreciated by those skilled in the art.","An illustrative description of exemplary operation of the apparatus  is presented, for explanatory purposes. The software component  in one example comprises a first portion of state information. The software component  comprises the first portion of the state information and a second portion of state information. For example, the first portion of state information is shared between the software component  and the software component . When performing a checkpoint procedure, the software component  creates a first checkpoint that comprises the first portion of state information. The software component  creates a second checkpoint that comprises only the second portion of state information, such that the first portion of state information is not stored more than necessary, as will be appreciated by those skilled in the art.","In one example, upon a recovery of the software component , the manager component  causes an initialization of the software component , as described in DISTRIBUTED SOFTWARE APPLICATION SOFTWARE COMPONENT RECOVERY IN AN ORDERED SEQUENCE. In another example, upon startup of the software component , the manager component  causes the initialization of the software component , as described in SOFTWARE COMPONENT INITIALIZATION IN AN ORDERED SEQUENCE, incorporated herein by reference. For example, the software component  comprises one or more data structures that must be set to an initial value. The software component  requires the first portion of state information and the second portion of state information to be initialized.","During the initialization of the software component , the management support software  of the software component  employs the second checkpoint to obtain the second portion of state information, as described in MANAGER COMPONENT FOR CHECKPOINT PROCEDURES. To obtain the first portion of state information, the manager component  in one example sends a first message to the management support software  of the software component . The first message comprises one or more of an object reference, a key, and\/or a logical timestamp. The object reference in one example corresponds to one of the software components of the distributed software application  that comprise the first portion of state information, for example, the software component .","The key of the first message corresponds to the first portion of state information that the software component  requires for initialization. In one example, the key corresponds to a checkpoint of the software component . For example, the key comprises a data structure identifier for the first checkpoint. The logical timestamp serves to provide a sequential and\/or chronological ordering for multiple checkpoints. For example, a checkpoint with a later timestamp may be preferable to a checkpoint with an earlier timestamp. The key and the logical timestamp uniquely identify each checkpoint of the software component , as will be appreciated by those skilled in the art.","Upon receipt of the first message, the management support software  of the software component  obtains a checkpoint from the software component identified by the object reference of the first message, for example, the software component . The management support software  of the software component  sends a second message to the management support software  of the software component  to request the checkpoint. The second message comprises the key and the logical timestamp for the checkpoint. The management support software  of the software component  employs the application programming interface  of the software component , the key, and the logical timestamp to obtain the checkpoint from the application software  of the software component . For example, the management support software  calls the function \u201cGetStateInfo(key, timestamp)\u201d of the application programming interface , as will be appreciated by those skilled in the art.","The application software  returns the state information to the management support software  through the application programming interface  of the software component . The management support software  of the software component  sends the state information to the management support software  of the software component . The management support software  of the software component  employs the application programming interface  to set the initial values of the application software  of the software component . For example, the management support software  calls the function \u201cSetStateInfo(key, data)\u201d of the application programming interface . The application software  of the software component  receives the state information and obtains the first portion of state information from this message. The application software  sets the initial values with the first portion of state information to complete initialization of the software component , as will be appreciated by those skilled in the art.","The management support software  of the software component  in one example provides fault tolerance for obtaining the first portion of state information. In one example, if the management support software  of the software component  fails to respond within a pre-determined time interval, for example, a timeout interval, the management support software  of the software component  requests the first portion of state information again at a later time. In another example, the management support software  of the software component  attempts to obtain the first portion of state information from another source after one or more response failures from the management support software  of the software component . For example, the management support software  of the software component  attempts to obtain the first portion of state information from another software component, for example, the software component . In another example, the management support software  of the software component  attempts to obtain the first portion of state information from a checkpoint destination of a software component, for example, a database or file, as will be appreciated by those skilled in the art.","The apparatus  in one example comprises a plurality of components such as one or more of electronic components, hardware components, and computer software components. A number of such components can be combined or divided in the apparatus . An exemplary component of the apparatus  employs and\/or comprises a set and\/or series of computer instructions written in or implemented with any of a number of programming languages, as will be appreciated by those skilled in the art.","The apparatus  in one example employs one or more computer-readable signal-bearing media. The computer-readable signal-bearing media store software, firmware and\/or assembly language for performing one or more portions of one or more embodiments of the invention. Examples of a computer-readable signal-bearing medium for the apparatus  comprise a recordable data storage medium of the management infrastructure. The computer-readable signal-bearing medium for the apparatus  in one example comprise one or more of a magnetic, electrical, optical, biological, and atomic data storage medium. For example, the computer-readable signal-bearing medium comprise floppy disks, magnetic tapes, CD-ROMs, DVD-ROMs, hard disk drives, and electronic memory. In another example, the computer-readable signal-bearing medium comprises a modulated carrier signal transmitted over a network comprising or coupled with the apparatus , for instance, one or more of a telephone network, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, and a wireless network.","The steps or operations described herein are just exemplary. There may be many variations to these steps or operations without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted, or modified.","Although exemplary implementations of the invention have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions, and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Features of exemplary implementations of the invention will become apparent from the description, the claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"}]},"DETDESC":[{},{}]}
