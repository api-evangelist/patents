---
title: Application programming interfaces for data synchronization with online storage systems
abstract: The disclosed embodiments provide a system that manages access to data associated with an online storage system. During operation, the system enables synchronization of the data between an electronic device and the online storage system through an application programming interface (API) with an application on the electronic device. Next, the system uses the API to provide a synchronization state of the data to the application, wherein the synchronization state comprises at least one of a download state, an upload state, an idle state, a transfer progress, a cached state, and an error state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298391&OS=09298391&RS=09298391
owner: DROPBOX, INC.
number: 09298391
owner_city: San Francisco
owner_country: US
publication_date: 20130211
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/739,621, entitled \u201cApplication Programming Interfaces for Data Synchronization with Online Storage Systems,\u201d by inventors Brian Smith, Scott Bezek, Jacob D. Potter and Andrew R. Twyman, filed 19 Dec. 2012.","1. Field","The disclosed embodiments relate to online storage systems. More specifically, the disclosed embodiments relate to application programming interfaces (APIs) for data synchronization with online storage systems.","2. Related Art","Data on network-enabled devices is commonly synchronized, stored, shared, and\/or backed up on online storage systems such as file hosting services, cloud storage services, and\/or remote backup services. For example, data such as images, audio, video, documents, executables, and\/or other files may be stored on a network-enabled electronic device such as a personal computer, laptop computer, portable media player, tablet computer, and\/or mobile phone. A user of the electronic device may also have a user account with a cloud storage service that allows copies of the files to be stored and\/or backed up with the cloud storage service. The cloud storage service may further transmit the copies to other electronic devices of the user and\/or other users who are authorized to access the files, thus synchronizing the files between the cloud storage service and electronic devices.","Unfortunately, data synchronization between an electronic device and an online storage system is typically associated with limited interaction and\/or information related to the synchronization state of the electronic device with the online storage system. For example, the electronic device may use a natively installed client application to create, delete, modify, and\/or copy files with the online storage system. Alternatively, a third-party application on the electronic device may use an application programming interface (API) to perform reading, writing, copying, and\/or other file-based operations with the online storage system. In both cases, the electronic device may lack information regarding the states associated with such file-based operations. For example, the client application and\/or third-party application may be unable to identify an error associated with a failed file transfer and\/or detect a newer version of a file on the online storage system. As a result, the user of the electronic device may experience reduced functionality and\/or problems with synchronizing to the latest and\/or correct versions of data from the online storage system.","Consequently, data synchronization between electronic devices and online storage systems may be facilitated by enabling access to synchronization states associated with the synchronization from the electronic devices.","The disclosed embodiments provide a system that manages access to data associated with an online storage system. During operation, the system enables synchronization of the data between an electronic device and the online storage system through an application programming interface (API) with an application on the electronic device. Next, the system uses the API to provide a synchronization state of the data to the application, wherein the synchronization state comprises at least one of a download state, an upload state, an idle state, a transfer progress, a cached state, and an error state.","In some embodiments, the system also uses the API to provide a filesystem synchronization state of a filesystem comprising the data to the application, wherein the filesystem synchronization state comprises at least one of a metadata synchronization state, an online state, a running state, a ready state, and a change state.","In some embodiments, the system also enables synchronization of metadata for the filesystem with the electronic device through the API.","In some embodiments, the synchronization of the metadata for the filesystem with the electronic device is enabled using at least one of an open operation, a create operation, a delete operation, and a move operation.","In some embodiments, the change state is associated with at least one of a path, a directory, and a file.","In some embodiments, if the system accesses the data during synchronization of the data between the electronic device and the online storage system, accessing the data involves:\n\n","In some embodiments, the synchronization state specifies a synchronization between the data on the online storage system and a copy of the data in a cache on the electronic device.","In the figures, like reference numerals refer to the same figure elements.","The following description is presented to enable any person skilled in the art to make and use the embodiments, and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus, the present invention is not limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.","The data structures and code described in this detailed description are typically stored on a computer-readable storage medium, which may be any device or medium that can store code and\/or data for use by a computer system. The computer-readable storage medium includes, but is not limited to, volatile memory, non-volatile memory, magnetic and optical storage devices such as disk drives, magnetic tape, CDs (compact discs), DVDs (digital versatile discs or digital video discs), or other media capable of storing code and\/or data now known or later developed.","The methods and processes described in the detailed description section can be embodied as code and\/or data, which can be stored in a computer-readable storage medium as described above. When a computer system reads and executes the code and\/or data stored on the computer-readable storage medium, the computer system performs the methods and processes embodied as data structures and code and stored within the computer-readable storage medium.","Furthermore, methods and processes described herein can be included in hardware modules or apparatus. These modules or apparatus may include, but are not limited to, an application-specific integrated circuit (ASIC) chip, a field-programmable gate array (FPGA), a dedicated or shared processor that executes a particular software module or a piece of code at a particular time, and\/or other programmable-logic devices now known or later developed. When the hardware modules or apparatus are activated, they perform the methods and processes included within them.","The disclosed embodiments provide a method and system for managing access to data associated with an online storage system. As shown in , an online storage system  may be accessed from a set of electronic devices -, such as personal computers, laptop computers, tablet computers, mobile phones, personal digital assistants, portable media players, digital media receivers, and\/or other network-enabled electronic devices. Communication between electronic devices - and online storage system  may be enabled by one or more networks, such as a local area network (LAN), wide area network (WAN), personal area network (PAN), virtual private network, intranet, cellular network, WiFi network, Bluetooth (Bluetooth\u2122 is a registered trademark of Bluetooth SIG, Inc.) network, universal serial bus (USB) network, and\/or Ethernet network.","During use of online storage system , users of electronic devices - may perform tasks related to storage, backup, retrieval, sharing, and\/or synchronization of data. For example, each user may use an electronic device (e.g., electronic devices -) to store images, audio, video, documents, executables, and\/or other files with a user account of the user on online storage system . To access the files and\/or user account, the user may provide authentication credentials for the user account to online storage system  from the electronic device. The user may also enable access to the files from other electronic devices by providing the same authentication credentials to online storage system  from the other electronic devices, authorizing access to the files from user accounts of the other users, and\/or placing the files into a publicly accessible directory on online storage system .","To enable such storage, backup, sharing, synchronization, and\/or access to data on online storage system , online storage system  may store the data using one or more storage mechanisms. For example, online storage system  may use one or more servers, cloud storage, network-attached storage (NAS), a storage area network (SAN), a redundant array of inexpensive disks (RAID) system, and\/or other network-accessible storage to store the data. Online storage system  may additionally store the data using a variety of filesystem architectures and\/or hierarchies and obscure the locations and\/or mechanisms involved in storing the data from electronic devices -.","In one or more embodiments, online storage system  is associated with a client application that supports automatic data synchronization between electronic devices - and online storage system . For example, the client application may be installed on each electronic device and automatically synchronize changes associated with a designated directory (e.g., new, deleted, modified, copied, and\/or moved files and\/or subdirectories within the directory) between the electronic device and online storage system . To perform such synchronization, the client application may monitor a local directory corresponding to the designated directory on the electronic device and synchronize changes to the local directory with a remote directory corresponding to the designated directory on online storage system . Conversely, the client application may identify changes to the remote directory and propagate the changes to the local directory. Because the client application is used directly by a user of the electronic device, the client application may hide and\/or omit details of the synchronization from the user.","As shown in , interaction between an electronic device  and online storage system  may further be facilitated by an application programming interface (API)  with an application  on electronic device , such as a third-party application that is not directly affiliated with online storage system . For example, API  may provide a set of method and\/or function calls related to operations for reading, writing, copying, moving, deleting, and\/or otherwise accessing data  on online storage system . In turn, application  may invoke the method and\/or function calls to perform tasks such as backing up application data for application  and\/or synchronizing user data (e.g., images, audio, video, text, documents, etc.) associated with application  with online storage system  and\/or other electronic devices.","More specifically, a synchronization apparatus  associated with API  may synchronize data  in a local cache  of electronic device  with data  on online storage system . As described above, such synchronization may be accomplished by detecting changes in each set of data - and propagating the changes to the other set of data. For example, synchronization apparatus  may use a long polling technique to receive changes to data  from online storage system  and apply the changes to data . Synchronization apparatus  may also allow application  to detect changes to data  and upload the changes to online storage system  for synchronization with data .","In one or more embodiments, synchronization of data - is based on file-level operations available to application  through API , such as a read operation, a write operation, an update operation, and\/or a close operation. The operations may appear to complete immediately after calls associated with the operations are made by application . At the same time, API  may propagate the operations to online storage system  and\/or obtain updates associated with data - from online storage system  based on the availability of online storage system  and\/or a network connection between electronic device  and online storage system .","In addition, synchronization apparatus  may synchronize metadata  for a filesystem  containing data  with a corresponding set of metadata  in cache . Metadata - may represent the directory hierarchy and paths associated with data -. For example, metadata - may describe the contents (e.g., files, subdirectories, etc.) of directories in filesystem  that are accessible to electronic device  and\/or application . Like data -, metadata - may be synchronized by detecting changes to each set of metadata and propagating the changes to the other set of metadata.","In addition, synchronization of metadata - may be based on filesystem-level operations available to application  through API , such as an open operation, a create operation, a delete operation, and\/or a move operation. Before such operations can be used by application , synchronization apparatus  may perform a first synchronization of metadata - by obtaining metadata  as a copy of metadata  from online storage system  and\/or obtaining metadata  as a copy of metadata  from cache  and\/or other local storage on electronic device . After the first synchronization is complete, synchronization apparatus  may enable access to filesystem  and\/or data  from electronic device  and synchronize changes to metadata - by obtaining the changes from the set of metadata containing the changes and applying the changes to the other set of metadata.","To facilitate robust synchronization of data - and metadata - by application , a communication apparatus  associated with API  may provide a synchronization state  of data - and\/or a filesystem synchronization state  of metadata - between electronic device  and online storage system  to application . Synchronization state  may specify a number of different states related to operations associated with synchronization of data -. For example, synchronization state  may include a download state, an upload state, an idle state, a transfer progress, a cached state, and\/or an error state for each file and\/or other unit of data - to be synchronized between electronic device  and online storage system .","Similarly, filesystem synchronization state  may indicate various states related to operations associated with synchronization of metadata -. For example, filesystem synchronization state  may include a metadata synchronization state, an online state, a running state, a ready state, and\/or a change state for metadata - to be synchronized between electronic device  and online storage system .","More specifically, the above-described operations and\/or states associated with synchronization of data - may be implemented using an interface for the state of a file and an interface for the file. The interface for the state of the file may include the following exemplary implementation.",{"@attributes":{"id":"p-0038","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef enum {"]},{"entry":[{},"\u2003\u2003DBFileStateDownloading,"]},{"entry":[{},"\u2003\u2003DBFileStateIdle,"]},{"entry":[{},"\u2003\u2003DBFileStateUploading,"]},{"entry":[{},"} DBFileState;"]},{"entry":[{},"\/** The file status object exposes information about the"]},{"entry":[{},"file's current sync status, including whether it's cached,"]},{"entry":[{},"if it's uploading or downloading, and if it is uploading or"]},{"entry":[{},"downloading the progress of that transfer *\/"]},{"entry":[{},"@interface DBFileStatus : NSObject"]},{"entry":[{},"\/** @name Basic information *\/"]},{"entry":[{},"\/** Whether the contents of the file are cached locally and"]},{"entry":[{},"can be read without making a network request. *\/"]},{"entry":[{},"@property (nonatomic, readonly) BOOL cached;"]},{"entry":[{},"\/** @name Transfer information *\/"]},{"entry":[{},"\/** Whether the file is currently uploading, downloading, or"]},{"entry":[{},"neither (idle) *\/"]},{"entry":[{},"@property (nonatomic, readonly) DBFileState state;"]},{"entry":[{},"\/** If the file is transferring, the progress of the"]},{"entry":[{},"transfer, between 0 and 1. *\/"]},{"entry":[{},"@property (nonatomic, readonly) float progress;"]},{"entry":[{},"\/** If the file needs to be transferred, but can't for"]},{"entry":[{},"whatever reason (such as no internet connection), then this"]},{"entry":[{},"property is set to the last error that prevented the"]},{"entry":[{},"transfer. *\/"]},{"entry":[{},"@property (nonatomic, readonly) NSError *error;"]},{"entry":[{},"@end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["224","224","224","224"]},"Similarly, the interface for the file may include the following exemplary implementation:",{"@attributes":{"id":"p-0040","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef void ({circumflex over (\u2009)}DBFileObserver)( );"]},{"entry":[{},"\/** The file object represents a particular file at a"]},{"entry":[{},"particular version. It has basic file operations such as"]},{"entry":[{},"reading and writing the file's contents and getting info"]},{"entry":[{},"about the file. It can also tell you the current sync status"]},{"entry":[{},"and whether there's a newer version available, and allows"]},{"entry":[{},"you to update to the newer version. *\/"]},{"entry":[{},"@interface DBFile : NSObject"]},{"entry":[{},"\/** @name Basic operations *\/"]},{"entry":[{},"\/** Returns a read-only file handle for the file. If the"]},{"entry":[{},"file is not cached then the method will block until the file"]},{"entry":[{},"is downloaded."]},{"entry":[{},"\u2002@return A file handle if the file can be read, or \u2018nil\u2018 if"]},{"entry":[{},"an error occurred. *\/"]},{"entry":[{},"\u2212 (NSFileHandle *)readHandle:(NSError **)error;"]},{"entry":[{},"\/** A wrapper for readHandle: that reads the entire file"]},{"entry":[{},"contents into an NSData object."]},{"entry":[{},"\u2002@return The file's contents if the file can be read, or"]},{"entry":[{},"\u2018nil\u2018 if an error occurred. *\/"]},{"entry":[{},"\u2212 (NSData *)readData:(NSError **)error;"]},{"entry":[{},"\/** A wrapper for readHandle: that reads the entire file"]},{"entry":[{},"contents as a UTF8 encoded string."]},{"entry":[{},"\u2002@return The file's contents decoded as UTF8 if the file can"]},{"entry":[{},"be read, or \u2018nil\u2018 if an error occurred. *\/"]},{"entry":[{},"\u2212 (NSString *)readString:(NSError **)error;"]},{"entry":[{},"\/** Updates the file's contents with the contents of the"]},{"entry":[{},"file at \u2018localPath\u2018. If the file is not cached then an error"]},{"entry":[{},"will be generated."]},{"entry":[{},"\u2002@param shouldSteal whether the file at \u2018localPath\u2018 should"]},{"entry":[{},"be copied or if it can be moved from its current location"]},{"entry":[{},"into management by the Sync SDK. If you are done with the"]},{"entry":[{},"file at \u2018localPath\u2018, then stealing is more efficient, but"]},{"entry":[{},"the behavior of writing to the file after stealing"]},{"entry":[{},"is undefined."]},{"entry":[{},"\u2002@return YES if the file was written successfully, or NO if"]},{"entry":[{},"an error occurred. *\/"]},{"entry":[{},"\u2212 (BOOL)writeContentsOfFile:(NSString *)localPath"]},{"entry":[{},"shouldSteal:(BOOL)shouldSteal error:(NSError **)error;"]},{"entry":[{},"\/** Updates the contents of the file to be the bytes store"]},{"entry":[{},"in \u2018data\u2018. If the file is not cached then an error will be"]},{"entry":[{},"generated."]},{"entry":[{},"\u2002@return YES if the file was written successfully, or NO if"]},{"entry":[{},"an error occurred. *\/"]},{"entry":[{},"\u2212 (BOOL)writeData:(NSData *)data error:(NSError **)error;"]},{"entry":[{},"\/** Updates the contents of the file as \u2018string\u2018 encoded in"]},{"entry":[{},"UTF8. If the file is not cached then an error will be"]},{"entry":[{},"generated."]},{"entry":[{},"\u2002@return YES if the file was written successfully, or NO if"]},{"entry":[{},"an error occurred. *\/"]},{"entry":[{},"\u2212 (BOOL)writeString:(NSString *)string error:(NSError"]},{"entry":[{},"**)error;"]},{"entry":[{},"\/** If there is a newer version of the file available, and"]},{"entry":[{},"it is cached (determined by the cached property on"]},{"entry":[{},"newerStatus), then this method will update the file object"]},{"entry":[{},"to reference the newer version so it can be read from or"]},{"entry":[{},"written to."]},{"entry":[{},"\u2002@return YES if the file was written successfully, or NO if"]},{"entry":[{},"an error occurred. *\/"]},{"entry":[{},"\u2212 (BOOL)update:(NSError **)error;"]},{"entry":[{},"\/** Closes the file, preventing any further operations from"]},{"entry":[{},"occurring and allowing the file to be opened again. This"]},{"entry":[{},"happens automatically when the object is deallocated. *\/"]},{"entry":[{},"\u2212 (void)close;"]},{"entry":[{},"\/** @name Getting the current state *\/"]},{"entry":[{},"\/** Whether the file is currently open. *\/"]},{"entry":[{},"@property (nonatomic, readonly, getter=isOpen) BOOL open;"]},{"entry":[{},"\/** The current sync status for the file. *\/"]},{"entry":[{},"@property (nonatomic, readonly) DBFileStatus *status;"]},{"entry":[{},"\/** The current sync status for the newer version of this"]},{"entry":[{},"file. If the file is the newest version, then this property"]},{"entry":[{},"is \u2018nil\u2018. *\/"]},{"entry":[{},"@property (nonatomic, readonly) DBFileStatus *newerStatus;"]},{"entry":[{},"@end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["216","218","102","212","212","212","202","102"]},"Furthermore, the above-described operations and\/or states associated with synchronization of metadata - may be implemented using an interface for a filesystem (e.g., filesystem ). The interface for the filesystem may include the following exemplary implementation:",{"@attributes":{"id":"p-0042","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/** A set of various fields indicating the current status of"]},{"entry":[{},"the filesystem's syncing. *\/"]},{"entry":[{},"enum DBSyncStatus {"]},{"entry":[{},"\u2003\u2003DBSyncStatusDownloading = (1 << 0),"]},{"entry":[{},"\u2003\u2003DBSyncStatusUploading = (1 << 1),"]},{"entry":[{},"\u2003\u2003DBSyncStatusSyncing = (1 << 2),"]},{"entry":[{},"\u2003\u2003DBSyncStatusOnline = (1 << 3),"]},{"entry":[{},"};"]},{"entry":[{},"typedef NSUInteger DBSyncStatus;"]},{"entry":[{},"typedef void ({circumflex over (\u2009)}DBPathObserver)( );"]},{"entry":[{},"\/** The filesystem object provides a files and folder view."]},{"entry":[{},"The most basic operations are listing a folder and opening a"]},{"entry":[{},"file, but it also allows you to move, delete, and create"]},{"entry":[{},"files and folders. *\/"]},{"entry":[{},"@interface DBFilesystem : NSObject"]},{"entry":[{},"\/** @name Creating a filesystem object *\/"]},{"entry":[{},"\/** Create a new filesystem object with a linked"]},{"entry":[{},"[account](DBAccount) from the [account"]},{"entry":[{},"manager](DBAccountManager).*\/"]},{"entry":[{},"\u2212 (id)initWithAccount:(DBAccount *)account;"]},{"entry":[{},"\/** A convenient place to store your app's filesystem *\/"]},{"entry":[{},"+ (void)setSharedFilesystem:(DBFilesystem *)filesystem;"]},{"entry":[{},"\/** A convenient place to get your app's filesystem *\/"]},{"entry":[{},"+ (DBFilesystem *)sharedFilesystem;"]},{"entry":[{},"\/** @name Getting file information *\/"]},{"entry":[{},"\/** Returns a list of DBFileInfo objects representing the"]},{"entry":[{},"files contained in the folder at \u2018path\u2018. If"]},{"entry":[{},"completedFirstSync is false, then this call will block until"]},{"entry":[{},"the first sync completes or an error occurs."]},{"entry":[{},"\u2002@return An array of DBFileInfo objects if successful, or"]},{"entry":[{},"\u2018nil\u2018 if an error occurred. *\/"]},{"entry":[{},"\u2212 (NSArray *)listFolder:(DBPath *)path error:(NSError"]},{"entry":[{},"**)error;"]},{"entry":[{},"\/** Returns the [file info](DBFileInfo) for the file or"]},{"entry":[{},"folder at \u2018path\u2018. *\/"]},{"entry":[{},"\u2212 (DBFileInfo *)fileInfoForPath:(DBPath *)path"]},{"entry":[{},"error:(NSError **)error;"]},{"entry":[{},"\/** @name Operations *\/"]},{"entry":[{},"\/** Opens an existing file and returns a [file](DBFile)"]},{"entry":[{},"object representing the file at \u2018path\u2018."]},{"entry":[{},"\u2002Files are opened at the newest cached version if the file"]},{"entry":[{},"is cached, or at the newest server version if it's not"]},{"entry":[{},"cached. Check the \u2018status\u2018 property of the returned file"]},{"entry":[{},"object to determine whether it's cached. Only one file can"]},{"entry":[{},"be open at a given path at the same time."]},{"entry":[{},"\u2002@return The [file](DBFile) object if the file was opened"]},{"entry":[{},"successfully, or \u2018nil\u2018 if an error occurred. *\/"]},{"entry":[{},"\u2212 (DBFile *)openFile:(DBPath *)path error:(NSError **)error;"]},{"entry":[{},"\/** Creates a new file at \u2018path\u2018 and returns a file object"]},{"entry":[{},"open at that path."]},{"entry":[{},"\u2002@return The newly created [file](DBFile) object if the file"]},{"entry":[{},"was opened successfuly, or \u2018nil\u2018 if an error occurred. *\/"]},{"entry":[{},"\u2212 (DBFile *)createFile:(DBPath *)path error:(NSError"]},{"entry":[{},"**)error;"]},{"entry":[{},"\/** Creates a new folder at \u2018path\u2018."]},{"entry":[{},"\u2002@return YES if the folder was created successfully, or NO"]},{"entry":[{},"if an error occurred. *\/"]},{"entry":[{},"\u2212 (BOOL)createFolder:(DBPath *)path error:(NSError **)error;"]},{"entry":[{},"\/** Deletes the file or folder at \u2018path\u2018."]},{"entry":[{},"\u2002@return YES if the file or folder was deleted successfully,"]},{"entry":[{},"or NO if an error occurred. *\/"]},{"entry":[{},"\u2212 (BOOL)deletePath:(DBPath *)path error:(NSError **)error;"]},{"entry":[{},"\/** Moves a file or folder at \u2018fromPath\u2018 to \u2018toPath\u2018."]},{"entry":[{},"\u2002@return YES if the file or folder was moved successfully,"]},{"entry":[{},"or NO if an error occurred. *\/"]},{"entry":[{},"\u2212 (BOOL)movePath:(DBPath *)fromPath toPath:(DBPath *)toPath"]},{"entry":[{},"error:(NSError **)error;"]},{"entry":[{},"\/** @name Getting the current state *\/"]},{"entry":[{},"\/** The [account](DBAccount) object this filesystem was"]},{"entry":[{},"created with. *\/"]},{"entry":[{},"@property (nonatomic, readonly) DBAccount *account;"]},{"entry":[{},"\/** When a user's account is first linked, the filesystem"]},{"entry":[{},"needs to be synced with the server before it can be used."]},{"entry":[{},"This property indicates whether that has completed and the"]},{"entry":[{},"filesystem is ready to use. *\/"]},{"entry":[{},"@property (nonatomic, readonly) BOOL completedFirstSync;"]},{"entry":[{},"\/** Whether the filesystem is currently running. The"]},{"entry":[{},"filesystem will stop running if the account associated with"]},{"entry":[{},"this filesystem becomes unlinked. *\/"]},{"entry":[{},"@property (nonatomic, readonly, getter=isRunning) BOOL"]},{"entry":[{},"running;"]},{"entry":[{},"\/** Returns a bitmask representing all the currently active"]},{"entry":[{},"states of the filesystem OR'ed together. See the"]},{"entry":[{},"DBSyncStatus enum for more details. *\/"]},{"entry":[{},"@property (nonatomic, readonly) DBSyncStatus status;"]},{"entry":[{},"\/** @name Watching for changes *\/"]},{"entry":[{},"\/** Add an observer to be notified any time the file or"]},{"entry":[{},"folder at \u2018path\u2018 changes. *\/"]},{"entry":[{},"\u2212 (BOOL)addObserver:(id)observer forPath:(DBPath *)path"]},{"entry":[{},"block: (DBPathObserver) block;"]},{"entry":[{},"\/** Add an observer to be notified any time the folder at"]},{"entry":[{},"\u2018path\u2018 changes or a file or folder directly contained in"]},{"entry":[{},"\u2018path\u2018 changes.\u2018 *\/"]},{"entry":[{},"\u2212 (BOOL)addObserver:(id)observer forPathAndChildren:(DBPath"]},{"entry":[{},"*)path block:(DBPathObserver)block;"]},{"entry":[{},"\/** Add an observer to be notified any time the folder at"]},{"entry":[{},"\u2018path\u2018 changes or a file or folder contained somewhere"]},{"entry":[{},"beneath \u2018path\u2018 changes. *\/"]},{"entry":[{},"\u2212 (BOOL)addObserver:(id)observer"]},{"entry":[{},"forPathAndDescendants:(DBPath *)path"]},{"entry":[{},"block: (DBPathObserver) block;"]},{"entry":[{},"\/** Unregister all blocks associated with \u2018observer\u2018 from"]},{"entry":[{},"receiving updates. *\/"]},{"entry":[{},"\u2212 (void)removeObserver:(id)observer;"]},{"entry":[{},"@end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["202","102","202","102","220","222","202","226"]},"The interface may also include method calls to operations for synchronizing metadata -. Such method calls may include an \u201copenFile\u201d method call to an open operation that opens an existing file, a \u201ccreateFile\u201d method call to a create operation that creates a new file, and a \u201ccreatePath\u201d method call to a create operation that creates a new directory. The method calls may further include a \u201cdeletePath\u201d method call to a delete operation that deletes a file and\/or directory at a specified path and a \u201cmovePath\u201d method call to a move operation that moves a file or directory to a specified path. Because the move operation is associated with an explicit method call, API  may be able to track the location and movement of a unique file over time. On the other hand, a client application for accessing online storage system  may lack the ability to perform such tracking because the client application executes a move operation by deleting a file or directory from one location and creating a file or directory in another location.","The interface may specify other portions of filesystem synchronization state  using a set of properties, including a \u201ccompletedFirstSync\u201d property that indicates the completion of the first synchronization of metadata - (e.g., the ready state) described above and a \u201crunning\u201d property that indicates if the filesystem is running (e.g., the running state). The interface may also include a \u201cStatus\u201d property that provides states associated with \u201cDBSyncStatus.\u201d","Finally, the interface may provide one or more change states associated with paths, directories, and\/or files in the filesystem. In particular, the interface may include a \u201cforPath\u201d change state that enables notification of changes to a specific path in the filesystem. The interface may also include a \u201cforPathAndChildren\u201d change state that enables notification of changes to a path and files and\/or directories located directly beneath a path and\/or a \u201cforPathAndDescendants\u201d change state that enables notification of changes to a path and all files and\/or folders located somewhere beneath a path.","Application  and\/or synchronization apparatus  may use information provided by synchronization state  and filesystem synchronization state  to synchronize data -. For example, if synchronization state  includes the cached state, synchronization apparatus  may access data  from cache . If synchronization state  does not include the cached state, synchronization apparatus  may access data  from online storage system . If a newer version of data - is available, synchronization apparatus  may access the newer version from cache  and\/or online storage system . Finally, if data - is not available, synchronization apparatus  may indicate the error state.","In other words, application  may use a single API  to access both local storage (e.g., cache ) on electronic device  and online storage system . Moreover, synchronization state  and filesystem synchronization state  may expose information related to synchronization of data - and metadata - that allows application  to manage changes to data - and metadata -, newer versions of data -, and\/or errors associated with the synchronization. In other words, API  may improve the efficiency, ease, and\/or effectiveness of synchronizing data - and\/or metadata - between application  and online storage system .","Those skilled in the art will appreciate that the system of  may be implemented in a variety of ways. As mentioned above, online storage system  may utilize a number of storage mechanisms and\/or filesystem architectures to store data  and\/or metadata . Similarly, synchronization apparatus  and communication apparatus  may be provided by various components and\/or devices. For example, synchronization apparatus  and\/or communication apparatus  may be implemented using a library on electronic device , online storage system , and\/or a device (e.g., server) that acts as an intermediary between electronic device  and online storage system . Moreover, interaction between application  and API  may be enabled through a variety of programming languages, data types and structures, operations, states, and\/or calls.",{"@attributes":{"id":"p-0049","num":"0052"},"figref":["FIG. 3","FIG. 3"]},"Initially, synchronization of the data between an electronic device and the online storage system is enabled through an API with an application on the electronic device (operation ). The API may include a set of method and\/or function calls that the application may invoke to perform operations related to such data synchronization.","The API is also used to provide a synchronization state of the data to the application (operation ). The synchronization state may describe synchronization between the data on the online storage system and a copy of the data in a cache on the electronic device. For example, the synchronization state may include a download state, an upload state, an idle state, a transfer progress, a cached state, and\/or an error state. The synchronization state may then be used to access data during synchronization of the data, as described in further detail below with respect to .","Next, synchronization of metadata for a filesystem containing the data with the electronic device is enabled through the API (operation ). Synchronization of the metadata may be enabled using an open operation, a create operation, a delete operation, and\/or a move operation.","Finally, the API is used to provide a filesystem synchronization state of the filesystem to the application (operation ). The filesystem synchronization state may include a metadata synchronization state, an online state, a running state, a ready state, and\/or a change state. In addition, the change state may be associated with a path, a directory, and\/or a file in the filesystem. The synchronization state and\/or filesystem synchronization state may enable robust synchronization of both the data and metadata for the application, which in turn may improve use of the online storage system by the application.",{"@attributes":{"id":"p-0054","num":"0057"},"figref":["FIG. 4","FIG. 4"]},"First, access to the data may be based on the inclusion of a cached state in the synchronization state of the data (operation ). The cached state may indicate the presence of the data on a local cache of the electronic device. The inclusion of the cached state in the synchronization state may thus result in accessing of the data from the cache (operation ), while the absence of the cached state in the synchronization state may require access to the data from the online storage system (operation ).","Accessing the data from the online storage system may further be based on an availability of the data (operation ). For example, the data may not be available if the online storage system is not available and\/or the electronic device lacks a network connection with the online storage system. If the data is not available, an error state is indicated (operation ) to facilitate handling of the error state and\/or subsequent access to the data. If the data is available, no error state is indicated.","A newer version of the data may also be available (operation ) from the cache and\/or the online storage system. If a newer version is not available (e.g., does not exist, is not accessible, etc.), the existing version of the data is accessed.","If the newer version is available, the newer version is accessed (operation ). For example, the existing version of the data from the cache and\/or online storage system may continue to be accessed using operations - while the newer version is configured for access (e.g., downloaded). Once the newer version is ready to be accessed, the existing version is replaced with the newer version.",{"@attributes":{"id":"p-0059","num":"0062"},"figref":"FIG. 5","b":["500","500","502","504","506","502","500","500","508","510","512"]},"Computer system  may include functionality to execute various components of the present embodiments. In particular, computer system  may include an operating system (not shown) that coordinates the use of hardware and software resources on computer system , as well as one or more applications that perform specialized tasks for the user. To perform tasks for the user, applications may obtain the use of hardware resources on computer system  from the operating system, as well as interact with the user through a hardware and\/or software framework provided by the operating system.","In one or more embodiments, computer system  provides a system for managing access to data associated with an online storage system. The system may include a synchronization apparatus that enables synchronization of the data between an electronic device and the online storage system through an API with an application on the electronic device. The system may also include a communication apparatus that uses the API to provide a synchronization state of the data to the application. The synchronization state may include a download state, an upload state, an idle state, a transfer progress, a cached state, and\/or an error state.","The synchronization apparatus may also enable synchronization of metadata for a filesystem containing the data with the electronic device through the API, and the communication apparatus may use the API to provide a filesystem synchronization state of the filesystem to the application. The filesystem synchronization state may include a metadata synchronization state, an online state, a running state, a ready state, and\/or a change state.","In addition, one or more components of computer system  may be remotely located and connected to the other components over a network. Portions of the present embodiments (e.g., communication apparatus, synchronization apparatus, etc.) may also be located on different nodes of a distributed system that implements the embodiments. For example, the present embodiments may be implemented using a cloud computing system that provides an API for synchronizing data between a set of remote electronic devices and a storage mechanism associated with the cloud computing system.","The foregoing descriptions of various embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly, many modifications and variations will be apparent to practitioners skilled in the art. Additionally, the above disclosure is not intended to limit the present invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0016","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0023"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
