---
title: Adaptive communication application programming interface
abstract: An apparatus and method for maintaining data for multi-channel communication queuing associated with different media formats such as telephone, email, and fax. A list of agent data includes information related to types of communication media an agent can access. The data can further include information related to an agent's skills, a list of media routes, statistics for communication channels of specified media types, statistics for an agent, and journals for work items. Priority values for the media routes, the maximum number of queued items for the media routes, and times for escalating a work item can also be included.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08045698&OS=08045698&RS=08045698
owner: Siebel Systems, Inc.
number: 08045698
owner_city: San Mateo
owner_country: US
publication_date: 20071228
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent Ser. No. 09\/823,770, entitled \u201cAdaptive Communication Application Programming Interface,\u201d filed Mar. 31, 2001 now U.S. Pat. No. 7,315,616, and naming Anil K. Annadata, Wai H. Pak, Mingtse Chen, and Henry D. Jay as inventors, which is related to the subject matter of the following provisional United States patent application: \u201cAdaptive Communication and Communication Server,\u201d naming inventors Henry Jay and Anil Annadata, filed Feb. 6, 2001, U.S. patent application Ser. No. 60\/267,242. Applicants hereby claim the benefit under 35 U.S.C. \u00a7119(e) of the foregoing-referenced provisional application. The foregoing-referenced patent applications are hereby incorporated by reference herein in their entirety.","In today's emerging technological and information world, companies are interacting with their customers, potential customers and other contacts through a wide variety of different communication channels. Such communication channels include face-to-face, telephone, fax, email, voicemails, wireless communication, Internet information inquiries via call me now and call me later, Internet collaborative sessions, paging and short messaging services. With all these communication channels, companies are faced with managing each customer interaction while meeting service levels and maximizing customer satisfaction. In addition, companies are faced with optimally staffing and training their workforce to deal with customers through these communication channels whether through their customer support center(s), telebusiness organizations, or their sales, marketing, and service professionals.","Currently, many companies have dedicated email inboxes, fax inboxes, and voicemail boxes defined for specific business areas as well as automated call distributors. Employees called agents are assigned to poll and manage the support requests from customers for each communication channel. Combined with the traditional call queues for inbound telephone calls, each agent is tasked with managing his or her work using all these communication channels while not having any visibility to the queue status and priorities of each customer support request and\/or communication channel.","Thus, it is desirable to provide a system that includes a universal queue strategy capable of assigning, routing, and queuing work items from multiple channels of communications to an agent having the appropriate skills to respond to the request. The system should enable the agent to view and manage his or her work items for all communication channels. Such a system reduces the response times and increases customer satisfaction, while balancing priorities amongst work items in multiple communication channels.","In one embodiment, a method for inter-module communication is disclosed. The method includes defining a command definition, wherein the command definition comprises commands for interfacing with a multi-channel, multi-media, communication queuing system.","In one aspect, this embodiment includes driver object commands for requesting media type lists and command event lists, creating driver objects, requesting service, and releasing driver objects.","In another aspect, this embodiment includes service object commands for releasing service objects, notifying when handling of an event is complete, invoking commands, releasing work items, suspending work items, resuming work items, handling queued events, and cancelling queued events.","In another aspect, this embodiment includes client object commands for starting a work item, releasing work items, saving work item contexts, restoring work item contexts, serializing work items, freeing work item storage, beginning batch processing, and ending batch processing.","In another embodiment, a inter-module communication definition is disclosed. The definition includes a command definition, wherein the command definition comprises commands for interfacing with a multi-channel, multi-media, communication queuing system.","In one aspect of this embodiment, the command definition includes driver object commands to request media type lists and command event lists, create drivers, request service, and release drivers.","In another aspect of this embodiment, the command definition includes service object commands to release service objects, notify when handling of an event is complete, invoke commands, release work items, suspend work items, resume work items, handle queued events, and cancel queued events.","In another aspect of this embodiment, the command definition includes client object commands to start a work item, release work items, save work item contexts, restore work item contexts, serialize work items, free work item storage, begin batch processing, and end batch processing.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. As will also be apparent to one of skill in the art, the operations disclosed herein may be implemented in a number of ways, and such changes and modifications may be made without departing from this invention and its broader aspects. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The use of the same reference symbols in different drawings indicates similar or identical items.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 1A through 1D","b":"100"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1A","b":["100","130","130","130","130","130"]},"In accordance with the present invention, client\/server system  includes a universal queuing (UQ) system  capable of assigning, routing, and queuing work items from multiple channels of communication to an agent having the appropriate skills to respond to a customer support request. The term work item refers to a request from a customer that requires a response from an agent assigned by client\/server system , such as responding to a customer support request in the form of a telephone call, email, fax or other communication of a different media type. A work item can be initiated when an event such as an incoming customer support request arrives or by an agent using a user interface to client\/server system .","Client\/server system  also includes a communication server  that enables agents to use communication channels of different media types to communicate with customers. Communication server  handles events such as the arrival of incoming customer support requests from a channel driver  such as one of channel drivers A, B, and C. Each channel driver  communicates with a communication channel  such as one of communication channels A, B, C and D.","Interaction between UQ system  and communication server  occurs when, for example, communication server  receives and routes an incoming customer request as a work item to UQ system  for assignment to an agent. UQ system  assigns an agent to the work item and sends the work item back to communication server  for communication to the assigned agent.","Web browser client A includes a web browser program such as Microsoft's Internet Explorer running on a client computer system (not shown). The web browser client A communicates with a web server . Application server  in client\/server system  performs functions for and sends information to web browser client A via web server , which provides web pages for web browser client A to display. Web server  can download program instructions, such as Java applet , to the web browser client A to provide additional functionality, such as a user interface.","Web browser client A is shown including a toolbar . One of skill in the art will recognize that other user interfaces providing the functionality of toolbar  can be implemented using a variety of different display formats to interface with multiple communication channels of different media types within the scope of the invention. Toolbar  is presented as part of a user interface.","In one embodiment, application server  of client\/server system  includes object manager , session mode communication server , request mode communication server , inbound communication receiver , UQ system , web server , web server , Enterprise Application Interface (EAI) object manager , and workflow process . In one embodiment, communication between components in application server  is enabled using a suitable inter-process communication protocol in conjunction with transfer control protocol\/Internet protocol (TCP\/IP) as known in the art.","UQ business service  allows communication server  to request information from UQ system , which returns the information via web server , and EAI object manager . In one embodiment, both session mode communication server  and inbound communication receiver  can communicate with UQ system . Other embodiments can communicate with a third party queuing system for maintaining work item queues and assigning agents to work items.","Communication server  includes session mode communication server . Communication server  may optionally include one or both of request mode communication server  and inbound communication receiver . It is important to note that the functionality provided by servers , , and  can be implemented on one server computer system or distributed across two or more server computer systems. Communication server  handles all communication between agents and customers via communication channels  of one or more media types. Communication server  is not media-specific and has no knowledge of communication channels or media.","To communicate with multiple communication channels of different media types, communication server  is designed to communicate with a channel driver  such as one of channel drivers A, B, and C. A channel driver  is written according to Communication Application Program Interface (API) . Communication API  provides an interface for third party vendors of communication devices and software (e.g., middleware vendors for communication devices) to provide a channel driver  so that their products are compatible with application server . By implementing a channel driver , vendors can take advantage of the customer support center management features and multi-media communication channel capabilities of application server .","Communication API  is designed to provide flexibility to third party vendors for integrating their products. In the implementation of a channel driver, a vendor defines the commands the vendor's communication channel  understands so that communication server  can issue commands for the communication channel  to perform. Normally these commands are issued when session mode communication server  is presenting a user interface to the agent, although inbound communication receiver  also can send commands in some circumstances.","In addition, the vendor defines the events that the vendor's communication channel  provides regarding activity of a specific communication channel . Finally, the vendor provides a channel driver  implementation, such as a dynamic link library (.DLL file), for performing each command and generating and providing each event. The channel driver  implementation is required by communication API  to include code to instantiate a driver object and at least one service object.","By requiring the vendor to provide facilities for the communication server  to issue commands to and to receive information from the vendor's communication channel , communications API  enables communications server  to operate independently of the command channel  media type and specific protocols to communicate with the vendor's communication device or software.","Referring to , an example of a database schema  that can be used by client\/server system  () for storing and communicating channel driver information, agent limitations on media access, commands and events, inbound task management, agent preferences, agent status, media status, communication channel configurations, multiple queue support, and agent management is shown. Database schema  includes data structures for configuration base , command and event , system base , response group , and email profile access control .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIGS. 2","FIG. 2","FIG. 2"],"i":["a ","cc "],"b":"2"},"The tables in , , , and are part of system base  and store channel driver information and channel driver parameters. The tables of and store the general information for a channel driver, such as channel drivers A, B, and C, and can be used by any customer support center configuration. The typical data stored in these tables are the file name of the channel driver DLL, the media type of the associated communication channel  (e.g. email, fax, etc.), a media string which is used by communication server  at run time to invoke a media service for the channel driver, the complete list of channel driver parameters, and the default value for each channel driver parameter. The parameters INBOUND_FLG and OUTBOUND_FLG of table CNCTR () indicate whether the channel driver  supports inbound and\/or outbound communications.","Customer support centers can establish configurations that define the groups of agents that have similar requirements to communicate, therefore requiring access to the same communication channel . For example, salespersons within a company may need the ability to communicate via wireless access protocol, whereas telephone operators may not. A configuration can be established for each group within the company. A channel driver profile allows more than one customer support center configuration to share a single channel driver , with each additional channel driver profile overriding the values of some channel driver parameters such as the location of the channel driver DLL. For example, due to the network architecture of the company, salespersons for the company in Phoenix may use a different channel driver  than salespersons in Palo Alto. A channel driver profile will enable the Phoenix and Palo Alto salespersons to use the same channel driver but point to different DLLs. The term channel driver  is used herein to include at least one channel driver profile providing default values for the channel driver parameters.","The tables in and store the channel driver profile for a particular customer support center configuration and the channel driver profile is not shared or used by other customer support center configurations. Typically, an administrator uses the table CNCTR_PARM to override a default value for a channel driver parameter for the particular customer support center configuration. Referring to , the string stored in the variable CNCTR_MEDIA_STR is based on a list of names of communication media supported by the channel driver . An administrator enters the name of the media in the CNCTR_MEDIA_STR field in character string format. The string stored in this field is used to determine the channel driver  to issue a command or from which an event originated. If one channel driver  supports multiple types of communication media, the administrator creates one record for each media type. The following examples show the parameters in the CNCTR table for telephone, email, and web chat media:","{\u201cXYZ Phone Driver\u201d, \u201cTelephone\u201d, \u201cxyz.dll\u201d, \u201cY\u201d, \u201cY\u201d, \u201cXYZ Phone Implementation\u201d, \u201cN\u201d},","{\u201cXYZ Email Driver\u201d, \u201cEmail\u201d, \u201cxyz.dll\u201d, \u201cY\u201d, \u201cY\u201d, \u201cXYZ Email Implementation\u201d, \u201cN\u201d},","{\u201cXYZ Web Chat Driver\u201d, \u201cWeb Chat\u201d, \u201cxyz.dll\u201d, \u201cY\u201d, \u201cY\u201d, \u201cXYZ Web-Chat Implementation\u201d, \u201cN\u201d}","Note that when a work item is submitted to UQ system  () for agent assignment, the CNCTR_MEDIA_STR is also passed with the work item to help UQ system  to identify an agent with skills in using that media type.","An example of an algorithm for determining the list of channel drivers  for a particular agent is as follows:","1. Determine the configuration ID for the agent by searching AGENT table ().","2. For the configuration ID, search the CFG_PROF table () for the list of channel driver profiles associated with the configuration.","3. For each of channel drivers , load the channel driver information and channel driver parameters from CNCTR, CNCTR_PARM, PROF, and PROF_PARM tables (-, respectively).","An example of an algorithm for loading a list of channel drivers  upon the agent logging in to client\/server system  is as follows:","1. For each of channel drivers ,\n\n","2. End loop","By default, an agent is authorized to access all channel drivers  associated with the configuration to which the agent belongs. For example, if the agent belongs to \u201cCustomer support center ,\u201d all channel driver profiles configured in \u201cCustomer support center \u201d are accessible for all agents in \u201cCustomer support center \u201d by default. The administrator can further limit the agent's access to channel drivers  using table AGENT_LIM () that lists the channel driver profiles the agent cannot access.","Agent preferences are stored in table AGENT_PREF () in a centralized database so that an agent's settings are available independently of the type of client or communication channel being used. A user interface for modifying the settings is also supplied in an embodiment of the present invention.","Embodiments of the present invention support multiple communication media channels and agent assignment with UQ system  (). Table AGENT_STAT () stores the current working status of a particular agent for all types of media that the agent is authorized to use. From this table, the administrator can see a list of media types that agent is currently authorized to access and the status of each media type.","When the \u201cNOT_READY_FLG\u201d parameter in table AGENT_STAT () indicates that an agent is not ready to take work items, UQ system  () will not assign any work items to the agent. The \u201cBUSY_FLG\u201d parameter indicates that the agent is busy.","Table AGENT_STAT is updated mainly at run time. When the agent first logs on using the user interface, one record for each media type that the agent is authorized to access is created. For example,","{\u201cagent_emp_id\u201d, \u201cPhone Control\u201d, \u201c \u201d, \u201c \u201d, \u201c1234\u201d, \u201c \u201d},","{\u201cagent_emp_id\u201d, \u201cEmail\/Fax\u201d, \u201c \u201d, \u201c \u201d, \u201c1234\u201d, \u201c \u201d},","{\u201cagent_emp_id\u201d, \u201cWeb Chat\u201d, \u201c \u201d, \u201c \u201d, \u201c1234\u201d, \u201c \u201d}","The records are updated according the agent's working status. For example","{\u201cagent_emp_id\u201d, \u201cPhone Control\u201d, \u201cY\u201d, \u201c \u201d, \u201c1234\u201d, \u201cY\u201d} indicates that agent is not ready but is talking on the phone,","{\u201cagent_emp_id\u201d, \u201cEmail\/Fax\u201d, \u201cY\u201d, \u201c \u201d, \u201c1234\u201d, \u201c \u201d} indicates that the agent is not ready to accept Email\/Fax type of work, and","{\u201cagent_emp_id\u201d, \u201cWeb Chat\u201d, \u201cN\u201d, \u201c \u201d, \u201c1234\u201d, \u201cY\u201d} indicates that the agent is ready to accept web chat type work and he or she is currently working on a web chat session.","Referring to table MEDIA_STAT (), the parameter \u201cMEDIA_OBJECT_STR\u201d for phone is the agent's extension number. For email, it is the mailbox name or the sender's email address. For fax, it is the fax number. The form of the content of MEDIA_OBJECT_STR is defined in each of the channel drivers .","\u201cWORKING_SINCE_DT\u201d is the time the agent starts to talk on the phone, or the time the agent starts to work on a work item such as an email or fax.","\u201cWORK_ITEM_STR\u201d is the unique string to identify the work item and the value of the field is determined by communication server . The MEDIA_STAT table is updated at run time to reflect the agent's current work status. An example of an agent's data records at run time is as follows:","{\u201cagent_id\u201d, \u201cPhone Control\u201d, \u201cExt. 5216\u201d, \u201c6\/25\/2000 12:34:45\u201d, \u201cphone_item_str\u201d, \u201c1-1S2-X7E\u201d},","{\u201cagent_id\u201d, \u201cEmail\u201d, \u201cinfo@company.com\u201d, \u201c6\/25\/2000 11:34:00\u201d, \u201cemail_item_str\u201d, \u201c1-1S2-X7D\u201d}","The above records show that the agent is currently talking on extension  and is working on an email sent to info@company.com.","Multiple extensions and multiple queues are supported in client\/server system  () using tables TELESET, EXTENSION, and AGENT_QUE, , , and , respectively. The following terms are referenced in , , and . The term automatic call distribution (ACD) extension refers to a type of extension that is used to log in to an ACD queue associated with an ACD switch such as ACD switch E. Once an extension logs in to the ACD queue, the ACD switch begins to dispatch customer calls to the extension. One ACD extension can log in to one or more ACD queues.","The term standard extension refers to a type of telephone extension that is not allowed to log in to the ACD queue. Standard extensions are mainly used for dialing outbound calls or answering internal calls. The ACD switch does not dispatch customer calls to a standard extension.","The term agent ID refers to an identifier used by client\/server system  to identify the agent. In order for client\/server system  to be aware of the agent's availability, each customer support center agent is assigned an agent ID. When the agent logs in to a communication channel having an ACD switch E, the agent ID is provided to the ACD switch E. Depending upon the configuration of the system, either the ACD switch E or UQ system  determines an available agent ID for the work item. Then either the ACD switch E dispatches the customer call to the ACD extension of the agent ID or, when UQ system  is used to assign agents, communication server  uses one of channel drivers  to dispatch the customer call to the ACD extension of the agent ID.","\u201cMultiple DN\u201d refers to multiple extensions configured for one telephone handset, and one or more extensions are ACD extensions.","\u201cMultiple queue\u201d means that one ACD extension can log in to multiple queues. In general, since an ACD queue is a list of agent IDs, as long as the agent ID is acceptable for ACD queue, any ACD extension can be used to login to ACD queue.","In one embodiment, a method for determining the list of extensions for an agent includes searching by the agent's ID in the AGENT table () to find the primary Teleset ID in the ACTIVE_TELESET_ID parameter, which identifies the primary handset used by the agent. The extension list is then determined from the DN_EXT parameter in the EXTENSION table (). Once the list of extensions is found, all extensions that the agent uses can login to all ACD queues defined in the AGENT_QUE tables () for that particular agent.","As described above, customer support centers can establish configurations that define the groups of agents that have similar requirements to communicate, therefore requiring access to the same communication channel . Configuration base  includes tables about configurations. CFG table () contains information about configurations. Configuration data includes a configuration name and an INGRP_FLAG indicating whether this configuration is for inbound response groups used in inbound communication receiver . CFG_PROF table () is the configuration\/channel driver profile relationship table showing which channel driver profiles belong to each configuration. Each configuration has a single channel driver profile.","AGENT_CFG table () is the agent\/configuration relationship table showing which agents belong to each configuration.","CFG_PARM table () is the configuration parameter table. A name and a value are provided for each configuration parameter. An ACTIVE_FLG field is a flag indicating whether the value of the configuration parameter is active.","The command and event data structure , includes information describing commands and events implemented by channel drivers . This information includes associating each command with a channel driver  and each event with a channel driver .","CMD table () includes commands for each channel driver . As described above, a vendor providing a channel driver  specifies the commands that it supports. A command is issued to channel driver  by communications server  to perform a command using communication channel . Every click on a button of toolbar  invokes a command, which is issued to channel driver .","A command can have a group of associated commands which operate as subcommands. A group command includes other commands with a Subcommand keyword.","Following is an example of a single command for making a telephone call to a contact.",{"@attributes":{"id":"p-0093","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[Command: MakeCalltoContact]","Command definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CmdData","=","\u201cMakeCalltoContact\u201d","Command parameter"]},{"entry":[{},"DeviceCommand","=","\u201cMakeCall\u201d","Command parameter"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Description","=","\u201cMake Call to Contact\u201d Command param."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Hidden","=","TRUE","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[CmdData: MakeCalltoContact]","Command data def."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BusComp","=","\u201cContact\u201d","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RequiredField.\u2019Work Phone #\u2019","=\u201c?*\u201d","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Param.PhoneNumber =","\u201c{Work Phone #: Lookup}","Command"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"210pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameter"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Following is an example of a group command for making a telephone call to a contact:",{"@attributes":{"id":"p-0095","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[Command: MakeCallGroup]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hidden","=","TRUE"]},{"entry":[{},"Subcommand","=","MakeCalltoPhone"]},{"entry":[{},"Subcommand","=","MakeCalltoSRContact"]},{"entry":[{},"Subcommand","=","MakeCalltoSROwner"]},{"entry":[{},"Subcommand","=","MakeCalltoEmployee Home"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The following example command can be either a single command or a subcommand",{"@attributes":{"id":"p-0097","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[Command: MakeCalltoPhone]","Command definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CmdData","=","\u201cMakeCalltoPhone\u201d","Command parameter"]},{"entry":[{},"DeviceCommand","=","\u201cMakeCall\u201d","Command parameter"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Description","=","\u201cMake Call to {@Phone}\u201d Cmd param"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Hidden","=","TRUE","Command parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[CmdData: MakeCalltoPhone]","Command data def."]},{"entry":[{},"[CmdData: MakeCalltoPhone]","Command data def."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RequiredField.\u2019Work Phone #\u2019","=\u201c?*\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Param.PhoneNumber =","\u201c{@Phone:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PhoneTypeLookup}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A command can have a command data section with a CmdData keyword to specify the data parameter in order to communicate with channel driver .","When a customer support center configuration includes multiple channel drivers , it is then possible for communication server  to determine which commands and events are handled by each of channel drivers . This configuration can also help distinguish between channel drivers  from different vendors that use the same name for commands performing different functions.","Following is an example of a command with a data section having a CmdData keyword",{"@attributes":{"id":"p-0101","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"[Command: MakeCalltoContact]"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CmdData","=","\u201cMakeCalltoContact\u201d"]},{"entry":[{},"DeviceCommand","=","\u201cMakeCall\u201d"]},{"entry":[{},"Description","=","\u201cMake Call to Contact\u201d"]},{"entry":[{},"Hidden","=","TRUE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[CmdData: MakeCalltoContact]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BusComp","=","\u201cContact\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RequiredField.\u2019Work Phone #\u2019","=\u201c?*\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Param.PhoneNumber =","\u201c{Work Phone # : Lookup}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The event table contains events that are sent to communication server  from channel driver . Vendors specify the events that will be sent in channel driver . An event response determines how communication server  reacts upon receiving each media event. The process of handling an event includes the following: searching for the event handler for the event, querying a customer support center database to determine the appropriate event response, and logging the event.","An example of an event, the event handler, event response, and event log for an InboundCall event are shown below:",{"@attributes":{"id":"p-0104","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[EventHandler:OnInboundCall]","first stage, EventHandler definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DeviceEvent","= \u2033EventRinging\u2033","media event definition"]},{"entry":[{},"Response","= \u2033OnInsideCallReceived\u2033","EventResponse declaration"]},{"entry":[{},"Filter.Call","= \u2033?*\u2033","EventHandler parameter"]},{"entry":[{},"Order","= \u20331\u2033","EventHandler order"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[EventResponse:OnInboundCallReceived]","second stage, EventResponse definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"QueryBusObj","\u2002= \u2033Contact\u2033","EventResponse parameter"]},{"entry":[{},"QueryBusComp","\u2002= \u2033Contact\u2033"]},{"entry":[{},"QuerySpec","\u2002= \u2033\u2032Work Phone #\u2032=\u2032{ANI}\u2032\u2033"]},{"entry":[{},"SingleView","\u2002= \u2033Service Contact Detail View\u2033"]},{"entry":[{},"MultiView","\u2002= \u2033Contact List View\u2033"]},{"entry":[{},"FindDialog","\u2002= \u2033Service Request\u2033"]},{"entry":[{},"FindField.CSN","\u2002= \u2033Ask Caller\u2033"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FindLog","\u2002= \u201cLogIncomingCallContactNotFound\u2033","EventLog declaration"]},{"entry":[{},"SingleLog","\u2002= \u2033LogIncomingCallContactFound\u2033","EventLog declaration"]},{"entry":[{},"Log","\u2002= \u2033LogIncomingCallContactNotFound\u2033","EventLog declaration"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["[EventLog:LogIncomingCallContactFound]","\u03b2 EventLog definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Display","\u2002= \u2033TRUE\u2033","\u03b2 EventLog parameters"]},{"entry":[{},"BusObj","\u2002= \u201cAction\u201d"]},{"entry":[{},"BusComp","\u2002= \u201cAction\u201d"]},{"entry":[{},"LogField.Type","\u2002= \u201cCall - Inbound\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LogField.\u2019Account Id\u2019","= \u201c{Contact.\u2019Account Id\u2019}\u201d"]},{"entry":[{},"LogField.\u2019Contact Id\u2019","= \u201c{Contact.Id}\u201d"]},{"entry":[{},"LogField.Description","= \u201cInbound call\u201d"]},{"entry":[{},"LogField.\u2019Call Id\u2019","= \u201c{ConnID}\u201d"]},{"entry":[{},"AfterCall.\u2019ACD Call Duration\u2019= \u201c{@CallDuration}\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Each event handler corresponds to an event provided by channel driver  and it is sequenced among the event handlers for an event. Each event handler has an event response. An event response can be shared among event handlers. An event response can have multiple event logs, and an event log can be shared among event responses.","When operating in session mode, communication server  is under the control of session mode communication server . Session mode communication server  receives incoming events such as customer support requests and communicates interactively with the agent by controlling a user interface presented to the agent. Preferably the incoming customer support request is communicated to the agent at substantially the same time the customer support request is received by the communication channel , with brief intermissions only to allow for processing and transport time in transporting the customer support request. This ensures that the customer's waiting time is minimized, particularly for requests for live interaction with an agent.","When an event such as arrival of an incoming telephone call occurs, the user interface notifies the agent using a notification function to change the user interface to capture the agent's attention. For example, a notification function can cause a button to blink to notify the agent of the phone call. A notification function can also display other information such as information about the caller before the agent picks up the phone. When the agent uses toolbar  to accept a telephone call, put a call on hold, or release a call, the user interface sends a command to session mode communication server , which communicates with one of channel drivers  to issue the command to the communication channel controlling the telephone.","Session mode communication server  also handles establishing and maintaining connections to one or more communication channels , such as communication channels A through D. Session mode communication server  uses one of channel drivers , such as channel driver A, to establish the connection. Having a connection to a communication channel enables the agent to receive an incoming work item, such as an email, intended specifically for that agent in real time. The connection can be to a middleware server, to a web server, directly to a media device, or to any other communication intermediary from which the customer can receive a communication. The connection can be established as a TCP\/IP socket connection to a middleware server, as an OLE interface such as the IadviseSink interface, or as any other suitable inter-process communication scheme. Each of channel drivers  contains all information needed to establish the connection with communication channel  so that communication server  operates independently of communication channel .",{"@attributes":{"id":"p-0109","num":"0111"},"figref":"FIG. 1B","b":["110","110","104","104","130","130","109","100"]},"Session thread  represents a session during which an agent interacts with client\/server system  using web browser client A. A customer uses a customer communication device, here a telephone, to access the communication channel. The agent also uses a communication device, such as a telephone headset, to access the communication channel.","Session thread  listens for inputs from its web browser client A and dispatches notifications of events from ACD switch driver  to web browser client A. Session thread  uses a communication channel manager such as communication channel manager  to interact with a ACD switch driver . Each channel driver  provides an active connection such as active connection  between the client and the associated communication channel. Channel driver  can be implemented to establish a persistent connection for interactive communication between client  and communication channel E but providing a persistent connection is not required by communication API .","The following examples describe processes that are followed by web browser client A during startup, initialization and operation. The processes for web browser client A are applicable to other types of clients, as will be explained in further detail below.","When web browser client A begins execution:","1. Web browser client A downloads program instructions for generating a user interface on the display for the web browser, such as toolbar , shown here for implemented using Java applet , from web server . Java applet  also establishes persistent HTTP connection  between Java applet  and web server  so that web server  can continuously provide information to web browser client A.","2. Web browser client A interfaces with session mode communication server  via web engine session thread . Object manager  spawns web engine session thread  to interface with web browser client A using web engine plug-in  and web engine . Communication client service  provides all communication related to the user interface with web browser client A.","3. Communication client service  requests the object manager  for communication service. Communication service , which provides all communications not related to the user interface, is provided.","4. Communication service  loads configuration information such as commands, events, agent information and preferences, channel driver information and channel driver parameters.","5. Communication service  registers an asynchronous event receiving function with object manager  to be invoked when an asynchronous event is subsequently received. The asynchronous event receiving function is also referred to as a callback function. Receiving asynchronous events is described in further detail below.","6. Communication service  request an active connection A between object manager  and web engine plug-in  and an active connection B between communication service  and session mode communication server . Persistent HTTP connection , and active connections A and B enable session mode communication server  to continually push user interface changes to toolbar  using Java applet .","7. Session mode communication server  spawns a session thread such as session thread  in response to the connection request.","8. Session thread  runs communication channel manager .","9. Communication channel manager  loads ACD switch driver D and passes the channel driver parameters determined by communication service .","10. ACD switch driver D establishes an active connection  to the ACD switch E. A vendor implementing channel driver  may choose to provide a persistent connection to the communication channel , as for telephone connections such as active connection . However, a persistent connection is not required by communication API .","When the agent performs an activity using web browser client A that requires a command to be executed, such as clicking a button on toolbar :","1. Communication client service  searches the command configuration data previously loaded for the command to invoke. It also collects the data associated with that command and then passes the command and data to communication service .","2. Communication service  passes the command and data to communication channel manager .","3. Communication channel manager  then determines which of channel drivers  performs the command requested by the client, and passes the command and data to the channel driver  such as ACD switch driver D for execution.","4. ACD switch driver D issues the command to the communication channel . In this example, the ACD switch driver D issues the command to ACD switch E.","When a channel driver  such as ACD switch driver D needs to push an event (status data or an incoming event such as a customer call) to web browser client A:","1. ACD switch driver D receives the event and posts the event to communication channel manager . This requires asynchronous interruption at session thread  for event posting.","2. Communication channel manager  pushes the event to communication service .","3. Communication service  receives the event and executes the registered asynchronous event receiving function.","4. The registered asynchronous event receiving function inserts the event sent from ACD switch driver D into an event queue stored inside object manager .","5. A frame manager (not shown) running in session thread  picks up the event from the event queue and invokes the registered asynchronous event receiving function using communication client service .","6. Communication client service  asks communication service  to process the event.","7. After communication service  has processed the event, communication client service  continues to communicate with Java applet  to control the web browser for user interface changes.",{"@attributes":{"id":"p-0137","num":"0139"},"figref":"FIG. 1C","b":["140","140","140","110","140","110"]},"A request mode server thread such as server thread  is spawned when request mode communication server  begins execution. Communication manager  is loaded to collect data for the request. Request mode communication server  determines the appropriate channel driver to handle the request and directs a communication channel manager  to load email driver E. Communication channel manager  dispatches the request and data to email driver E, which sends the information to email communication channel F. In the embodiment shown in , email driver E sends the emails via email server  to email client .","As another example of the operation of request mode communication server , object manager  can send one or more work items from UQ system  to request mode communication server . Similar to the previous example, a request mode server thread is spawned and communication manager  is loaded to collect data for the request. Request mode communication server  determines the appropriate channel driver to handle the request and directs a communication channel manager  to load an appropriate driver, such as email driver E. Communication channel manager  dispatches the request and data to the driver, which sends the information to a communication channel.",{"@attributes":{"id":"p-0140","num":"0142"},"figref":"FIG. 1D","b":["170","170","110","170","110","170","110"]},"Inbound communication receiver  uses channel drivers  such as email\/fax channel driver F to \u201clisten\u201d for particular types of customer support requests from a common source. Email channel driver F handles all email messages directed to a particular email address and all faxes sent to a particular fax number. To avoid overlap among agents, inbound communication receiver  can be configured to work with UQ system  to assign an agent to the inbound customer support request (email  or fax ) and route the customer support request to a component associated with or representing the assigned agent, such as a client.","Inbound communication receiver  is also configured during initialization to recognize events, such as receiving a customer support request, and to include corresponding channel driver information and background profiles to handle recognized events. Background profiles include one or more monitored media objects, such as a list of email addresses, fax numbers, and web-chat end points. For example, email communication channel G represents a background profile for info@company.com and fax communication channel H represents a background profile for fax number 1-800-123-4567.","Inbound communication receiver  spawns a server thread such as server thread  to handle inbound events, such as customer support requests. This contrasts to session mode communication server , which spawns a session thread such as session thread  for each client  being used by an agent. Communication channel manager  then initializes a service such as fax service object A, email service object B, or phone service object C with the designated background profile.","When the email\/fax channel driver F receives an incoming customer support request, e.g. new fax , fax channel driver F posts the event to communication channel manager . This posting interrupts the idle state of server thread  and causes server thread  to invoke communication channel manager  to process the event. Communication channel manager  determines how to respond to the event based on an event response included in an event response table, such as EVTRESP (), and invokes the appropriate media service, such as fax service object A. If the event response also specifies notifying UQ system  of the event, the event is then passed to UQ system  via UQ business service . A response to the event notification is returned to inbound communication receiver  via UQ business service .","In alternative embodiments, client\/server system  can support multiple types of clients  having hardware\/software configurations that are different from web browser client A.  shows an alternative embodiment of client\/server system  that supports web browser client A, thin client B, and dedicated client C.","Thin client B includes one or more client software modules that are installed and executed on the client computer system used by the agent. Thin client B provides minimal functionality, with the majority of the functions for thin client B are performed by application server . It is often desirable to use thin clients so that application programs can be updated once in a centralized location instead of multiple times for each thin client B.","Thin client B provides more functionality on the client side than web browser client A, and can, for example, perform some functions of object manager . Thin client B also controls the user interface including toolbar . If changes are necessary to the functions performed on the client side, a new copy of thin client B must be installed on each individual agent's computer system.","Dedicated client C includes software modules that perform a significant portion of the functions required to support an agent. Dedicated clients are sometimes referred to as \u201cfat clients,\u201d in contrast to the \u201cthin client\u201d designation. If changes are necessary to the functionality provided by dedicated client C, a new copy of the dedicated client software modules usually must be installed on the client computer system.","Dedicated client C provides even greater functionality than does thin client B, including, for example, all functionality provided by object manager , web server , communication client service  (), and communication service . Because dedicated client C assumes all responsibility for the user interface and toolbar , there is no communication between dedicated client and communication server , web server , web engine plug-in  and web engine  (). Dedicated client C does include web server  that is capable of interfacing with UQ system , and object manager  to communicate with channel drivers .","It is important to note that other types of clients having hardware and software components that are different from clients A, B, and C can also be integrated with client\/server system .","Communication API","Referring now to , communication API  is provided in one embodiment of the present invention for channel drivers  to communicate with communication server . Note that communication server  is used in the following discussion of communication API  to represent session mode communication server , request mode communication receiver server , or inbound communication receiver .","As shown in , one embodiment of communication API  includes three types of objects: driver objects , service objects , and client objects . Driver objects  and service objects  are instantiated at the channel driver , however client objects  are instantiated at communication server . Communication server  interfaces with driver objects  and service objects , but only service objects  communicate with client objects .","Driver objects  maintain the instantiation of service objects . Any special steps for constructing and destructing service objects  can be implemented in driver objects . Multiple driver objects  can be included to manage different types of media. Also, a single driver object  can manage one type of service objects  or different types of service objects . For example, a single driver object  can manage phone, email and fax media.","As an example of the operation of driver objects , when communication server  is starting up, the channel driver  data link library (DLL) is loaded. Communication server  calls CreateISCSDriverInstance( ) in channel driver  to ask for the construction of a driver object . The channel driver  returns the driver handle back to communication server . The channel driver  determines how driver objects  are created. If driver objects  already exist, for example, the channel driver  could simply pass the handle of an existing driver object  instead of creating a new one.","In one embodiment, service objects  are created by driver objects  and provide functionality in the form of device commands to interact with the associated media type. For example, making an outbound call, or sending an outbound email is implemented at service objects . A service object  is usually associated with a single type of media. For example, there can be service objects  for phone media and other service objects  for email media. Communication server  interfaces directly with service objects  to invoke a device command.","After communication server  obtains the driver handle, communication server  uses a RequestService( ) function to request a service object  for the specified media type. The driver returns the handle of the corresponding service object  to communication server . Communication server  then uses this handle in an InvokeCommand( ) function directly to request the corresponding service object  for executing a particular type of function.","After communication server  obtains the handle to a service object , Communication server  will use the service handle directly to interact with the service object . Service objects  can inherit facilities from, and\/or share resources with, driver objects . For example, driver objects  can maintain the physical TCP\/IP connection to a middleware server and service objects  can share the connection with the driver objects .","Client objects  are instantiated and implemented by communication server . The handles to client objects  are passed to service objects . Service objects  can utilize the client handles and invoke the function to be executed at communication server .","In one embodiment, every service object  has a corresponding client object . Therefore, each client object  has knowledge of the media type that its corresponding service object  is using. Since service objects  can each be instantiated for different media from different driver DLLs, this one-to-one relationship allows a client object  to know the driver object  and service object  that initiate the notification when client object  receives notification from service object .",{"@attributes":{"id":"p-0161","num":"0163"},"figref":"FIG. 1G","b":["189","120","189","183","1","183","2","183","3","183","1","183","2","183","3","179","1","179","2","179","3"]},{"@attributes":{"id":"p-0162","num":"0164"},"figref":["FIG. 1H","FIG. 1D"],"b":["189","183","183","183","183","183","183","179","179","179","170","179","179","179","179","179","179","183","183","183"]},{"@attributes":{"id":"p-0163","num":"0165"},"figref":"FIG. 1I","b":["189","189","120","189","189","189","189","183","189","189","189","189"]},"There are several alternatives for implementing asynchronous notification of events from middleware servers to driver objects  including:\n\n","With alternative 1, since the driver objects  can be implemented as a DLL, the driver object DLL either constructs a listening thread which blocks on select( ) call until the arrival of event, or a polling thread which periodically polls the middleware server for the arrival of event. Polling threads are useful for low-priority media types, e.g. email or fax, because polling periods typically last seconds or minutes. Polling threads are not as useful to detect high-priority media events, such as phone requests, because it is desirable to report the arrival of incoming call at anytime. Listening threads generate less network traffic than polling threads, and are generally useful for high priority and low priority media, however, some types of middleware servers do not support listening threads.","To implement both polling threads and listening threads, a \u201ctask\u201d thread is required in the driver object DLL. The \u201ctask\u201d thread can be executed in driver objects  as shown in  or in service objects  as shown in .","Referring to , a task thread (or listen thread) implemented in the driver objects  may be \u201cshared\u201d by all service objects . For example, this listen thread can listen for all incoming events for all service objects . Once the listen thread receives an event, the listen thread then invokes and executes the event handling function implemented at service objects .","Referring to , if the listen thread is implemented at the domain of service objects , every service object  constructs its own listen thread and the listen thread is not shared. Each listen thread listens to a different target. For example, listen thread for user  listens for events on the first phone extension (ext. 1234), while the listen thread for user  listens for events on the second phone extension (ext. 5678).","In one embodiment, client objects  are a collection of function pointers implemented by communication server  and passed to the service objects  for asynchronous event notification. In one implementation, when the listen thread in channel driver  receives an event, the following processes occur:\n\n","Communication API Commands","Communication API  includes commands and data structures to allow third parties to develop applications that can integrate with client\/server system . The data structures include arrays for passing data elements such as an agent's key value element, key value parameters, and string parameter lists.","The following provide examples of runtime status flags that can be used in communication API :",{"@attributes":{"id":"p-0173","num":"0182"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NOTSUPPORTED","= 1;","Command is not supported"]},{"entry":["DISABLED","= 2;","Command is disabled at this time"]},{"entry":["CHECKED","= 4;","Command is in \u201cchecked\u201d state,"]},{"entry":[{},{},"for example when agent is in busy"]},{"entry":[{},{},"mode the \u201cbusy\u201d command will"]},{"entry":[{},{},"be \u201cchecked\u201d"]},{"entry":["BLINKING","= 8;","This is special effect flag to enable"]},{"entry":[{},{},"the blinking \u201canswer call\u201d"]},{"entry":[{},{},"command"]},{"entry":["NOPARAMSOK","= 16;","Command does not require any parameters"]},{"entry":[{},{},"to execute"]},{"entry":["STRPARAMSOK","= 32;","Command can be executed by providing"]},{"entry":[{},{},"single unnamed string parameters."]},{"entry":[{},{},"Such commands are invoked when the"]},{"entry":[{},{},"agent types something in the edit"]},{"entry":[{},{},"control of the communication toolbar"]},{"entry":[{},{},"105 and clicks the corresponding"]},{"entry":[{},{},"button."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following provide examples of commands that can be used in one embodiment of communication API :\n\n",{"@attributes":{"id":"p-0175","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PHONECONTROL","= 1"]},{"entry":[{},"CALLROUTING","= 2"]},{"entry":[{},"EMAIL","= 3"]},{"entry":[{},"FAX","= 4"]},{"entry":[{},"WEBCALL","= 5"]},{"entry":[{},"WEBCHAT","= 6"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["CommandTypeEx: Channel driver  uses the CommandTypeEx function to request different services, such as making calls and sending messages, from communication server .","ObjectType: The ObjectType function is used to monitor the communication objects, which can be represented by the following parameter values:"]}}}},{"@attributes":{"id":"p-0176","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OB_LINK","= 1"]},{"entry":[{},"SWITCH","= 2"]},{"entry":[{},"QUEUE","= 3"]},{"entry":[{},"TELESET","= 4"]},{"entry":[{},"DN","= 5"]},{"entry":[{},"AGENT","= 6"]},{"entry":[{},"CALL","= 7"]},{"entry":[{},"CALLROUT","= 8"]},{"entry":[{},"EMAIL","= 9"]},{"entry":[{},"FAX","= 10"]},{"entry":[{},"WEBCALL","= 11"]},{"entry":[{},"WEBCHAT","= 12"]},{"entry":[{},"OTHERS","= 1000"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":"ObjectProperty: The function ObjectProperty can be used to provide properties of monitored communication objects, such as:"}}}},{"@attributes":{"id":"p-0177","num":"0190"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ONOFF","= 1",{},{}]},{"entry":[{},"AGENTID","= 2",{},{}]},{"entry":[{},"NOTREADY","= 4",{},{}]},{"entry":[{},"BUSY","= 5",{},{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DESCRIPTION","= 7",{}]},{"entry":[{},"TIMEINQUEUE","= 9",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"QUEUEID","= 12"]},{"entry":[{},"ISLOGON","= 13"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In one embodiment, driver objects  within each of channel drivers  can include the following functions:\n\n","In one embodiment, service objects  within each of channel drivers  can include the following functions:\n\n","The following are examples of functions that can be included in Client Objects . The interface to these functions can be implemented with a function pointer so that driver objects  do not need to link to any libraries in communication server .\n\n",{"@attributes":{"id":"p-0181","num":"0246"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BeginBatch_Helper(clientInterface);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CacheCommandInformation_Helper(clientInterface, ...);"]},{"entry":[{},"<-- cached"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},";\u2003; ; ; \/\/ some processing"]},{"entry":[{},"if (error)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HandleError_Helper(clientInterface, ...); <-- cached"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HandleEvent_Helper(clientInterface, ...); <-- cached"]},{"entry":[{},"EndBatch_Helper(clientInterface); <-- All requests will be"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sent out in one request"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"*\/"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":{"@attributes":{"id":"ul0029-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":["HandleEvent is used to handle the named event received from the channel driver , using the given fields. By calling this method, the channel driver  notifies the client objects  of the event, such as a call coming in on the monitored teleset. The following is the parameter list:\n        \n        ","ShowStatusText displays textual status information in the status line of the client objects . The following parameter list can be used:\n        \n        ","HandleError handles asynchronous errors and logs them to an error log file. The following parameters can be used:\n        \n        ","CacheCommandInformation is used to notify the client objects  about command status caching. The following parameters can be used:\n        \n        ","UpdateObjectInformation is used to notify the client objects  about status change of objects. The following parameters can be used:\n        \n        ","IndicateNewWorkItem notifies client objects  about the arrival of new inbound work item (e.g. call, email or fax) if the driver or the middleware supports a facility to change the work item's ID. The following parameters can be used:\n        \n        ","WorkItemStarted notifies client objects  that the agent has started working on one particular work item. This happens when (1) the agent answers a call and the call is connected, or (2) the agent accepts an email\/fax work item. In response, client object  sets the work item identified by \u201ctrackingID\u201d as the active work item and starts tracking this work item. The agent will be treated as talking or working. The start time of this work item can be recorded by client objects . The following parameters can be used:\n        \n        ","WorkItemReleased is used to notify client objects  that a particular work item is released. This happens when (1) the agent releases a call and the call is disconnected, or (2) the agent completes an email\/fax work item. In response, client objects  stop tracking this work item and remove this work item. The following parameters can be used:\n        \n        ","CleanAllWorkItems notifies client objects  that all work items stored in client objects  should be removed.","WorkItemSuspended notifies client objects  that a work item is suspended. This can happen, for example, when (1) the agent puts a call to hold, or (2) the agent suspends an email\/fax work item. The driver implementation calls this function when suspension is done. In response, client objects  save the working context for this particular work item. The parameter trackingID can be used to identify the work item","WorkItemResumed notifies client objects  that a suspended work item is resumed. This can happen, for example, when (1) the agent unholds a call and the call is retrieved, or (2) the agent resumes an email\/fax work item. The driver objects  call this function when restoring is complete. In response, client objects  restore the working context(screen+work-tracking obj) and set the active work item as the one identified by \u201ctrackingID\u201d. The parameter trackingID can be used to identify the work item."]}}}},"Note that other functions and parameters can be included in communication API  instead of, or in addition to, the functions listed herein.","Universal Queuing System","UQ system  queues requests for all types of media until an agent is assigned to the request. As agents become available, either by an agent logging in, finishing a task, or due to a change in state or assignment, UQ system  pushes a work item from a communication channel to an agent, and removes the work item from the respective queue. In one implementation, when multiple work items are routed to an agent, the work item that arrived first is presented to the agent and the other work item is returned to its respective queue and rerouted\/pushed to the next available agent that is capable of handling the particular work item.","UQ system  includes UQ receiver  and UQ requester  that interface with UQ engine  via UQ server . An enterprise application integration (EAI) server  can be included in system  to receive messages from UQ system . In one embodiment, web server  receives the message and sends it to EAI object manager . EAI object manager  packages the messages and transmits it to UQ business service . In other embodiments that do not include EAI object manager , the message can be sent directly to UQ business service .","UQ Business Service","UQ system  interfaces with UQ business service  and web server  via UQ application programming interface (UQ API) . UQ business service  places information received from UQ system  into data structures used by communication server . UQ business service  also places information from communication server  into data structures, commands, and parameters recognized and used by UQ API .","In one embodiment, UQ business service  includes the following functions, with input and output parameters shown in parentheses, for initializing and communicating with the UQ system :\n\n","In one embodiment, UQ business service  also includes the following functions for initializing and maintaining agents:\n\n","In one embodiment, UQ business service  also includes the following functions for initializing and maintaining work items:\n\n","In one embodiment, UQ business service  includes the following functions for reporting performance statistics:\n\n","In one embodiment, UQ business service  includes the following functions for handling work items:\n\n","The foregoing lists are examples of functions that can be included in UQ business service . Other functions can be included in addition to, or instead of, these examples. Some of the functions include return codes and\/or state codes to indicate whether a requested function was performed successfully and\/or the state of UQ system , a work item, or an agent. The following lists provide examples of codes that are used as parameters in the preceding functions:",{"@attributes":{"id":"p-0194","num":"0373"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Return Code",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Success"]},{"entry":["1","Success_More_Status"]},{"entry":["2","Error_Uq_Initialized"]},{"entry":["3","Error_Uq_Not_Initialized"]},{"entry":["4","Error_Failed"]},{"entry":["5","Error_System_Wrong_Api"]},{"entry":["6","Error_System_Initialization_Failed"]},{"entry":["7","Error_Agent_Setting_Invalid_State"]},{"entry":["8","Error_Agent_Undefined"]},{"entry":["9","Error_Agent_Unable_To_Change_Skill"]},{"entry":["10","Error_Queue_Not_Initialized"]},{"entry":["11","Error_Queue_Undefined"]},{"entry":["12","Error_Queue_Capacity_Exceeded"]},{"entry":["13","Error_Workitem_Adding_Failed"]},{"entry":["14","Error_Workitem_Failed_Change_State"]},{"entry":["15","Error_Unknown_Media"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0195","num":"0374"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Agent State",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Available"]},{"entry":["2","Logout"]},{"entry":["3","Busy"]},{"entry":["4","AuxWork"]},{"entry":["5","InitAuxWork"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0196","num":"0375"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Media Mode",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Available"]},{"entry":["2","Unavailable"]},{"entry":["3","Busy"]},{"entry":["4","Wrap_Up"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0197","num":"0376"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Operation Reason Code",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Setting_Invalid_State"]},{"entry":["2","Agent_Not_Available"]},{"entry":["3","Route_Undefined"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0198","num":"0377"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Work Item State",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Active"]},{"entry":["2","Wrap_Up"]},{"entry":["3","Alerting"]},{"entry":["4","Completed"]},{"entry":["5","Queued"]},{"entry":["6","Scheduled"]},{"entry":["7","On_Hold"]},{"entry":["8","Received"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"UQ Configuration","Referring to  and , clients  choose a UQ configuration via the UQOpenConnection function in UQ business service . UQ system  uses information such as \u201cUQ receiver server name\u201d and \u201cUQ receiver Port\u201d to determine where to send responses. In one embodiment, multiple receiver servers (not shown) in EAI object manager  can be connected to receive messages from UQ system , and, therefore, each receiver communicating with UQ system  sends a UQ configuration parameter in the UQOpenConnection function.","Table 1 shows an example of parameters in a UQ configuration table that is stored in UQ system  and used to establish communication with and perform functions as requested by communication server  via the UQOpenConnection function. For example, Table 1 includes parameters for identifying and establishing communication with the host for UQ system . Table 1 also includes default settings for agent preferences such as whether an agent is in the auto-ready state after login or in the auto-auxwork state after login.",{"@attributes":{"id":"p-0202","num":"0381"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UQ Configuration Table"},{"entry":"Configuration Name"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["UQ Host Name","Identifier for host for UQ system 102"]},{"entry":["UQ Host Port","Address of host"]},{"entry":["HTTPURLTemplate","Name of primary receiver server"]},{"entry":["HTTPLoginURLTemplate",{}]},{"entry":["HTTPLogoutURLTemplate",{}]},{"entry":["Business Service","Specify the name of UQ business service 106 that"]},{"entry":[{},"will be invoked when outbound XML is sent."]},{"entry":["Method","The name of method to be invoked in the UQ"]},{"entry":[{},"business service 106 mentioned above."]},{"entry":["MaxConnection","Maximum number of connections to be opened on"]},{"entry":[{},"the primary receiver server. UQ system 102 has the"]},{"entry":[{},"option to send events to any of those open"]},{"entry":[{},"connections. By opening up multiple connections,"]},{"entry":[{},"multiple requests can then be processed."]},{"entry":["Transport","Web server 146 and EAI object manager 190"]},{"entry":[{},"require:"]},{"entry":[{},"Name of server for UQ system 102"]},{"entry":[{},"Listening Port for UQ system 102"]},{"entry":[{},"Workflow process 144 requires:"]},{"entry":[{},"Name of server for UQ system 102"]},{"entry":[{},"Listening Port for UQ system 102"]},{"entry":[{},"Sender WorkFlow Name"]},{"entry":[{},"Send Method Name"]},{"entry":["SecondaryHTTPURLTemplate","For secondary UQ receiver server (optional). If"]},{"entry":[{},"included, this receiver server is used for primarily"]},{"entry":[{},"for non-time critical message such as alarm, error,"]},{"entry":[{},"statistics and journal. If no secondary receiver"]},{"entry":[{},"server is included, the primary receiver server in"]},{"entry":[{},"EAI object manager 190 can be used."]},{"entry":["SecondaryHTTPLogoutURLTemplate","Template for logout information"]},{"entry":["SecondaryHTTPLoginURLTemplate","Template for login information"]},{"entry":["SkillBC:<Business Component","A Skill map that contains a list of skills and"]},{"entry":["Name>","associated skill items for a client. Includes a list of"]},{"entry":[{},"business skills. For example,"]},{"entry":[{},"SkillBO:Industry = Industry"]},{"entry":[{},"SkillBO:Internal Product = Internal Product"]},{"entry":[{},"SkillBO:Language Def = Language Def"]},{"entry":[{},"SkillBO:Product Line = Product Line Briefing"]},{"entry":["AuxWorkAfterLogin","If \u201ctrue\u201d, place the agent to Aux mode after login."]},{"entry":[{},"Default is \u201ctrue\u201d"]},{"entry":["LogoutFromAvailable","If \u201ctrue\u201d, allow agent to logout at Available state."]},{"entry":[{},"Default is \u201ctrue\u201d"]},{"entry":["WrapEnabled","If \u201ctrue\u201d, wrap state is valid for agent. Default is"]},{"entry":[{},"\u201ctrue\u201d"]},{"entry":["Load Balancing","If \u201ctrue\u201d, Server Load Balancing is used and"]},{"entry":[{},"installed. Default is \u201cfalse\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 2 shows a subset of parameters in the UQ Configuration table in Table 1 referred to as PropertyInfo parameters that are used in other functions that are included in UQ business service .",{"@attributes":{"id":"p-0204","num":"0383"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Property Information Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Purpose"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"UQ Host Name",{}]},{"entry":[{},"UQ Host Port",{}]},{"entry":[{},"HTTPURLTemplate","Template to be used in"]},{"entry":[{},{},"HTTP URL for login and"]},{"entry":[{},{},"making requests"]},{"entry":[{},"HTTPLoginURLTemplate","Template to be use in"]},{"entry":[{},{},"HTTP for login"]},{"entry":[{},"HTTPLogoutURLTemplate","String that needs to be"]},{"entry":[{},{},"included in the logout"]},{"entry":[{},{},"process"]},{"entry":[{},"MaxConnections","Number of connections"]},{"entry":[{},{},"that need to be opened"]},{"entry":[{},"Secondary Receiver Host",{}]},{"entry":[{},"Secondary Receiver Port",{}]},{"entry":[{},"SecondaryHTTPURLTemplate",{}]},{"entry":[{},"SecondaryHTTPLogoutURLTemplate","String that needs to be"]},{"entry":[{},{},"included in the logout"]},{"entry":[{},{},"process"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Web server   handles packing information using a suitable data transfer protocol for outgoing messages to EAI object manager . In one implementation, for example, HTTP is used to communicate messages to and from UQ API . Web server  converts information in HTTP format to another suitable transport protocol which EAI object manager  unpacks for use by UQ business service . In other embodiments, other protocols known in the art can be used instead of, or in addition to, HTTP.","UQ Routing","UQ engine  defines a route for processing each work item. For example, if a work item is a fax requiring response from an agent with knowledge of computer networking, the UQ engine  would define a route that specifies an agent with computer networking skills. An agent can transfer the work item to a route queue using the functions TransferWorkItemToRoute(Route configuration Name) or BlindTransferWorkItemToAgent(agentID) if the agent is not able to respond to the work item. The skill requirements for the work item can be changed before invoking the transfer if the agent determines that a different skill is necessary to respond to the work item.","In one embodiment, route points are generated, wherein each route point has specific skill requirements. When a work item is to be transferred to another point, the transferring agent can choose a route point from a pop up list, for example. The list can include the option to either list all agents or all route points.","UQ System Scenarios","The following examples show how requests from clients are processed through one embodiment of system :","Initialization and Rules Download","Communication server background mode server  uses UQOpenConnection function in UQ business service  to connect clients with UQ system . In one embodiment, two or more configurations can be available to initialize UQ business service , including a default configuration. The default UQ configuration parameters are used if no other configuration specified. The UQPropertyInfo parameters of UQOpenConnection included PrimaryReceiverName and PrimaryReceiverPort which identify the location of the primary receiver server in EAI server .","UQOpenConnection can be invoked multiple times to connect multiple receiver servers in EAI server  to UQ system , and UQ system  maintains a list of all connections to the connected receiver servers. After a successful UQOpenConnection, the function UQInitRules can be invoked to download agent skill information, as well as rules for escalating agents and specifying routes. In one embodiment, UQInitRules is invoked only once during initialization, and the function UQReplaceRules is used to update the rules once they have been initialized. The parameter ERROR_UQ_INITIALIZED indicates an error if UQInitRules if subsequently invoked. An indicator of whether the initialization was successful is supplied in the Return parameter associated with the UQInitRules function.","Agent Logon","New agents invoke UQOpenConnection through business service  to inform UQ system  that there is a new agent. The function AgentLogon is then invoked by UQ business service  to log the agent into UQ system . UQ business service  then sends a message that includes the agent skill information to UQ system .","If multiple receiver servers are connected, each invocation of the function AgentLogon includes information about the receiver server that the agent is associated with. Agent information also includes information including auto-available setting and auto-wrap setting. UQ system  returns either the error if the invocation to AgentLogon fails, or returns the new agent state if the logon operation was successful.","Email Arrival","When communication server  receives an email message, it sends the message along with related information regarding the client who sent the message to UQ business service . UQ business service  transfers the email message and related information to UQ system  via the AddWorkItem function. UQ system  determines whether to accept the work item and issues a response to communication server  via web server , EAI server , and UQ business service  indicating whether the work item was accepted using the status parameter in the HandleWorkItem function.","UQ Delivers Work Item","UQ system  determines an agent for a work item and sends a message that the work item was assigned to an agent to communication server  via the receiver server associated with the agent. UQ system  then transmits a message via the HandleWorkItem function to the receiver server associated with the agent. The ProcessEvents function in UQ business service  is then invoked to dispatch the message to an agent. The agent invokes the WorkItemAccept function to inform UQ system  that it received the work item.","UQ System Issues an Alarm or Error","As an example of one method for UQ system  to notify communication server  of an error or alarm, assume UQ system  determines that the number of requests that can be handled by one of the communication channels has exceeded a predefined threshold. UQ system  sends a return code to the receiver server via the HandleError function indicating that the queue capacity has been exceeded. EAI server  receives the message and invokes the function \u201cProcessEvents\u201d in UQ business service . The error message can be logged and broadcast to the component that issued the request. Alarm messages are handled in a similar manner. The error\/alarm can be broadcast visually, aurally, textually, and\/or by any other suitable means known in the art.","UQ System Sends Statistics to Communication Server","A client or other component in system  () can request statistics regarding its communication channels, agents, and\/or the routing of agents, from UQ system  via SetChannelStatInterval, StartAgentStat, and StopAgentStat functions. UQ system  generates the requested statistics and transmits them to Web server . When the receiver server in EAI object manager  receives the message, it can log the statistics and broadcast them through an interface such as a message bar mechanism, as known in the art. Agent configurations can be set up to request statistics on a continual basis. The statistics can include information for work items completed as well as work items in the agent's queue.","Agent Accepts a Work Item","When an agent is in AuxWork mode, the agent can choose a work item from the queue through a user interface such as the toolbar . When a work item is selected, UQ system  is notified via the RequestWorkableItemList function in business service . If the work item is available, the function will indicate a successful selection through the return parameter and the work item is delivered via the HandleWorkItem function. The RequestWorkableItemList function can return an error indicator if the work item is not available for the agent.","Call Routing","When UQ system  receives a route request, UQ system  determines the agent to assign to the work item and sends a message to the agent's receiver server in EAI object manager  that includes the assigned agent and the work item. If UQ system  cannot find an agent to assign within the time allowed, the request is placed in a waiting queue as implemented by UQ engine . It is important to note that many different types of commercially available queuing engines  can be used in UQ system .","Automated Call Distribution (ACD) Interaction with the UQ System","Referring to  and , an agent can be connected to receive calls directly from ACD switch E, without interacting with UQ system . Agents can also be connected to receive calls from ACD switch E as well as other work items through UQ system . This type of configuration is referred to auxiliary work mode (AuxWork mode). An agent can place themselves in the AuxWork state through an interface such as toolbar , or an administrator may configure the agent to enter the AuxWork state.","In one implementation of AuxWork mode, ACD switch E dispatches a call to an agent, and the agent informs session mode communication server  when it answers the call. Session mode communication server  then relays the notice to UQ system . At this point, UQ system  asks session mode communication server  to place the agent in the AuxWork state using, for example, the AgentInitAuxwork function as described herein, after the agent finishes the call.","When the agent finishes the call, it informs session mode communication server  that the call is done, and the session mode communication server  in turn informs UQ system  that the call is finished. UQ system  then determines whether there is a suitable work item to assign to the agent based on the media channels in the agent's configuration. If a work item is available, the work item will be sent to the agent through the agent's receiver server in EAI object manager . The agent informs UQ system  when it finishes the work item. If UQ system  determines that there are no more work items for the agent, it informs session mode communication server  to set the agent's ACD mode to ready to continue receiving calls through ACD switch E.","There are several alternative implementations that can be used to place an agent in the AuxWork state. For example, an agent can default to AuxWork state. UQ system  can be notified when ACD switch E receives a call that should be handled by the agent, and the agent notified to suspend processing a work item, such as a response to an email request, to take the call. The agent notifies UQ system  when the call is completed, and returns to processing the suspended work item.","Agent State Change","When a work item is dispatched to an agent, the agent invokes the AcceptWorkItem function to accept the work item. Output parameters in AcceptWorkItem inform UQ system  of the new agent state and work item state. When the agent completes the work item, it invokes the CompleteWorkItem function to inform UQ system  of the new agent state and work item state.","An auto-wrap option can be set in the agent's configuration table that allows an agent time to wrap up a work item upon completion. Agents can select an interface option that invokes the AgentAvailable function to indicate that they are out of wrap up mode and ready to accept another work item. UQ system  changes the status of the work item to Complete and places the agent in the Auxwork state if AgentInitAuxWork function has been invoked. If the AgentInitAuxWork function is not invoked, the agent's state is set to BUSY if there are other work items in the queue that the agent can handle. Otherwise the agent is placed in the Available state.","Work Item Cancelled","A situation can arise when a work item is cancelled after it has been assigned to an agent, but before the agent has accepted the work item. Such a situation may arise, for example, when a caller hangs up while waiting. In this case, the UQ system  informs the client that the work item is cancelled through HandleWorkItemStatus and a signal, such as a blinking button on the agent's user interface display, can be changed to indicate that the work item was removed.","PBX and Email with PBX Higher Priority","The term private branch exchange (PBX) refers to a subscriber-owned telecommunications exchange that usually includes access to the public switched network. When an email and a PBX work item are queued, UQ system  uses the priority set forth in the route rules to determine which media will have higher priority over the other. Client configurations typically give PBX work items higher priority than email.","Work Item Journal","When a work item is completed, UQ system  sends a work item journal entry to communication server  via the HandleJournal function. The journal entry includes information to identify whether the journal entry pertains to the agent state history and\/or the work item escalation history of the work item.","System Failure","If the connection between UQ system  and session mode communication server  fails, UQ system  will remove all agents associated with session mode communication server  and mark all work items as \u201cComplete\u201d with a failure error code.","Multiple Requesters and Receivers","When UQ business service  is instantiated, it will load the UQ configuration including the sender's server component name and the workflow name. In one embodiment, the sender server component is the EAI object manager , which is transparent to clients . If there are multiple instances of EAI object manager , communication server  routes the request to the appropriate component in communication server . A load balancer can be included to balance the load between multiple instances of EAI object manager .","Each work item sent by UQ clients include a login and a client key associated with the work item. When the same work item is being returned form UQ system  as a result of either an agent assignment or problem with the work item, the login and the client key are used to route the result to the right client.","Blind Transfer of a Work Item to an Agent","An agent can use the function BlindTransferWorkItemToAgent to transfer a work item to another agent if the agent cannot respond to the work item, or thinks that another agent is better qualified to respond. If the transferee agent is not available to accept the work item being transferred, the work item will be queued until the agent is available.","Consultative Transfer of a Work Item to an Agent","An agent can invoke the TransferWorkItemToAgent function to transfer a work item to another agent to consult with the other agent regarding the work item. If the agent is not available for consultation, UQ system  informs the agent that the other agent is not available. The agent can select whether to hold on to the work item, retry, or send the work item to a route.","Transfer Work Item to a Route","An agent can use the function TransferWorkItemToRoute to transfer a work item to along a route to another agent. This is useful, for example, when an agent receives a work item that would be handled more efficiently by an agent with other skills.","UQ API","In one embodiment, a client server system  () in accordance with the present invention includes UQ API  for communicating with UQ system . For example, the interface can translate information in one format, such as simplified object access protocol (SOAP) used by UQ business service  to an extensible markup language (XML) format used in UQ system . UQ API  can also translate information between other formats suitable for use in UQ business service  and UQ system . Alternatively, the same format can be used throughout system , thereby eliminating the need for UQ API . UQ API is further described in copending U.S. patent application Ser. No. 09\/823,678, entitled \u201cExtensible Interface For Intermodule Communication\u201d, which application was filed on the same day is assigned to the same assignee as the present application and is incorporated by reference herein.","In one embodiment, a user interface for entering and editing agent skills is provided. An example of an agent skill graphical user interface (GUI) is described in U.S. patent application Ser. No. 09\/823,531, entitled \u201cCommunication Toolbar Supporting Multiple Communication Channels of Different Media Types\u201d, which application was filed on the same day and is assigned to the same assignee as the present application and is incorporated by reference herein. The agent skill GUI includes fields for selecting, entering and editing agent information including name, employee number, job title, login name, contact information, skills, and the level of expertise for each skill item. After a client updates the skills of an agent through the agent skill GUI, the ChangeAgentSkill function in UQ business service  can be used to update agent information in UQ system .","UQ API Data Structures",{"@attributes":{"id":"p-0258","num":"0437"},"figref":"FIGS. 4","i":["a","m "],"b":["4","314","102","109"]},{"@attributes":{"id":"p-0259","num":"0438"},"figref":["FIG. 4","FIG. 4"],"i":["a ","b "],"b":["102","102"]},{"@attributes":{"id":"p-0260","num":"0439"},"figref":["FIG. 4","FIG. 4"],"i":["c ","d "]},{"@attributes":{"id":"p-0261","num":"0440"},"figref":"FIG. 4","i":"e "},{"@attributes":{"id":"p-0262","num":"0441"},"figref":"FIG. 4","i":"f "},{"@attributes":{"id":"p-0263","num":"0442"},"figref":"FIG. 4","i":"g "},{"@attributes":{"id":"p-0264","num":"0443"},"figref":"FIG. 4","i":"h "},{"@attributes":{"id":"p-0265","num":"0444"},"figref":"FIGS. 4","i":["i","k "],"b":["4","102","109","102","109"]},{"@attributes":{"id":"p-0266","num":"0445"},"figref":"FIG. 4","i":"l "},{"@attributes":{"id":"p-0267","num":"0446"},"figref":"FIGS. 4","i":["m","p "],"b":"4"},"Other tables can be included in an embodiment of UQ system  in addition to, or instead of, the tables shown in -","An Exemplary Computing and Network Environment",{"@attributes":{"id":"p-0269","num":"0448"},"figref":["FIG. 5","FIG. 5"],"b":["100","45","25","1","35","1","35","1","25","1","35","1","25","1","35","1"]},"It will be noted that the variable identifier \u201cN\u201d is used in several instances in  to more simply designate the final element (e.g., servers ()-(N) and client computers ()-(N)) of a series of related or similar elements (e.g., servers and client computers). The repeated use of such variable identifiers is not meant to imply a correlation between the sizes of such series of elements, although such correlation may exist. The use of such variable identifiers does not require that each series of elements has the same number of elements as another series delimited by the same variable identifier. Rather, in each instance of use, the variable identified by \u201cN\u201d may hold the same or a different value than other instances of the same variable identifier.","One or more of client computers ()-(N) and\/or one or more of servers ()-(N) may be, for example, a computer system of any appropriate design, in general, including a mainframe, a mini-computer or a personal computer system. Such a computer system typically includes a system unit having a system processor and associated volatile and non-volatile memory, one or more display monitors and keyboards, one or more diskette drives, one or more fixed disk storage devices and one or more printers. These computer systems are typically information handling systems which are designed to provide computing power to one or more users, either locally or remotely. Such a computer system may also include one or a plurality of I\/O devices (i.e., peripheral devices) which are coupled to the system processor and which perform specialized functions. Examples of I\/O devices include modems, sound and video devices and specialized communication devices. Mass storage devices such as hard disks, CD-ROM drives and magneto-optical drives may also be provided, either as an integrated or peripheral device. One such example computer system, discussed in terms of client computers ()-(N) is shown in detail in .",{"@attributes":{"id":"p-0272","num":"0451"},"figref":"FIG. 6","b":["10","35","1","10","12","10","14","16","18","20","22","24","26","28","30","32","33","34","36","38","40","42","46","12","28","47","12","30","48","12"]},"Bus  allows data communication between central processor  and system memory , which may include both read only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least 16 megabytes of memory space. The ROM or flash memory may contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., CD-ROM drive ), floppy disk unit  or other storage medium. Additionally, applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , may connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Many other devices can be connected such as a mouse  connected to bus  via serial port , a modem  connected to bus  via serial port  and a network interface  connected directly to bus . Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., bar code readers, document scanners, digital cameras and so on). Conversely, it is not necessary for all of the devices shown in  to be present to practice the present invention. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present invention may be stored in computer-readable storage media such as one or more of system memory , fixed disk , CD-ROM , or floppy disk . Additionally, computer system  may be any kind of computing device, and so includes personal data assistants (PDAs), network appliance, X-window terminal or other such computing device. The operating system provided on computer system  may be MS-DOS\u00ae, MS-WINDOWS\u00ae, OS\/2\u00ae, UNIX\u00ae, Linux\u00ae or other known operating system. Computer system  also supports a number of Internet access tools, including, for example, an HTTP-compliant web browser having a JavaScript interpreter, such as Netscape Navigator\u00ae 3.0, Microsoft Explorer\u00ae 3.0 and the like.","Moreover, regarding the signals described herein, those skilled in the art will recognize that a signal may be directly transmitted from a first block to a second block, or a signal may be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered or otherwise modified) between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next, other embodiments of the present invention may include modified signals in place of such directly transmitted signals as long as the informational and\/or functional aspect of the signal is transmitted between blocks. To some extent, a signal input at a second block may be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and\/or final functional aspect of the first signal.","The foregoing described embodiment wherein the different components are contained within different other components (e.g., the various elements shown as components of computer system ). It is to be understood that such depicted architectures are merely examples, and that in fact many other architectures can be implemented which achieve the same functionality. In an abstract, but still definite sense, any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as \u201cassociated with\u201d each other such that the desired functionality is achieved, irrespective of architectures or intermediate components. Likewise, any two components so associated can also be viewed as being \u201coperably connected\u201d, or \u201coperably coupled\u201d, to each other to achieve the desired functionality.",{"@attributes":{"id":"p-0278","num":"0457"},"figref":["FIG. 7","FIG. 7"],"b":["50","10","60","70","80","90","60","70","80","90","10","47","48","10","60","10","70","80","90","10","70","80","90","90"]},"Referring to ,  and , a browser running on computer system  employs a TCP\/IP connection to pass a request to server , which can run an HTTP \u201cservice\u201d (e.g., under the WINDOWS\u00ae operating system) or a \u201cdaemon\u201d (e.g., under the UNIX\u00ae operating system), for example. Such a request can be processed, for example, by contacting an HTTP server employing a protocol that can be used to communicate between the HTTP server and the client computer. The HTTP server then responds to the protocol, typically by sending a \u201cweb page\u201d formatted as an HTML file. The browser interprets the HTML file and may form a visual representation of the same using local resources (e.g., fonts and colors).","The foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams, flowcharts, and examples. It will be understood by those within the art that each block diagram component, flowchart step, and operations and\/or components illustrated by the use of examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or any combination thereof.","The present invention has been described in the context of a fully functional computer system, however those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include: recordable type media such as floppy disks and CD-ROM, transmission type media such as digital and analog communications links, as well as media storage and distribution systems developed in the future.","The above description is intended to be illustrative of the invention and should not be taken to be limiting. Other embodiments within the scope of the present invention are possible. Those skilled in the art will readily implement the steps necessary to provide the structures and the methods disclosed herein, and will understand that the process parameters and sequence of steps are given by way of example only and can be varied to achieve the desired structure as well as modifications that are within the scope of the invention. Variations and modifications of the embodiments disclosed herein can be made based on the description set forth herein, without departing from the spirit and scope of the invention as set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 1A through 1D"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1E"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1F"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1G"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1H"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1I"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1J"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1K"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIGS. 1A through 1D"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 2","FIG. 2"],"i":["a ","cc "],"b":"2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 4","i":["a ","p "],"b":"4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 7","FIG. 6"]}]},"DETDESC":[{},{}]}
