---
title: Method and system for managing a license for an add-on software component
abstract: Methods and systems for activating an add-on software component independently of any host application with which the add-on component is compatible are described. Consistent with some embodiments, an add-on manager module can be invoked from any host application that is part of a suite of applications. The add-on manager module displays a list of add-on components that are installed, and compatible with a particular host application. After receiving product activation data (e.g., serial number or product key) for a particular installed add-on component, a license verification operation is performed to validate the product activation data, and activate the add-on component for use with a host application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08401973&OS=08401973&RS=08401973
owner: Adobe Systems Incorporated
number: 08401973
owner_city: San Jose
owner_country: US
publication_date: 20091119
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present disclosure generally relates to End-user Licensing Agreements (EULA) and product activation tools. More specifically, the present disclosure relates to computer-based methods and systems for independently managing licenses for add-on software components and\/or content.","To protect against unauthorized copying and use of software applications, many software vendors utilize some form of product activation procedure. In general, product activation (sometimes referred to as software activation) involves a procedure for verifying the authenticity of a software application, and ensuring that the software application is used within the scope of the End-User License Agreement (EULA). In a typical product activation procedure, a software application performs a hash operation to generate a hash of an identifier (ID) specific to a product's license (e.g., a product key) and a hardware serial number, identifying the particular computer or device on which the software application is to be utilized. The resulting hash, which is commonly referred to as an installation ID or a product activation ID, is then sent to a software vendor's license manager to verify the authenticity of the product key, and in some instances, to ensure that the product key is not being used simultaneously for multiple installations on multiple computers or devices. Of course, a variety of alternative product activation procedures exist. As described below, one problem with conventional license managers and product activation procedures is that they are designed to operate only with fully-executable, stand-alone software applications, and generally do not support add-on software components.","Many software applications are designed with a view to allowing additional functionality to be realized via one or more add-on software components. For example, web browser applications frequently utilize add-on components to enable the presentation or play back of various audio and video formats. Many video game applications utilize add-on components to provide additional content, such as advanced or customized levels of play, and\/or special characters or background scenes. Certain graphics editing programs, such as Adobe Photoshop\u00ae from Adobe Systems Incorporated of San Jose, Calif., utilize add-on components to provide support for different graphics file formats, and to provide certain graphic and image processing functions. In some cases, certain add-on components are designed to operate with more than one application in a suite of applications. In many instances, add-on software components are not subject to EULA's and therefore no product activation procedure is necessary before an add-on software component can be utilized. However, because add-on software components are generally dependent upon a host application, in practice, the use of an add-on software component is typically dependent upon a host application being properly installed, licensed and activated.","For example, in , a functional block diagram of the modules involved in a conventional software activation scheme, used to enforce the EULA of a host application, is shown. In this example, the add-on software components are not subject to their own EULA. Instead, the use of the add-on software components is subject to a host application being properly installed, licensed and activated. Accordingly, each add-on software component will operate properly only if the individual host applications are properly installed, licensed and activated. In the example presented in , a license server  is shown to include a license manager module  and a database  of serial numbers and\/or product keys. In addition, two applications and four add-on software components\u2014applications A and B, and add-ons W, X, Y and Z\u2014are shown to be installed on a network-connected computer . Each host application (e.g., applications A and B) is assigned its own serial number or product key, which is communicated in a licensing call  (e.g., at activation and\/or execution time) from a client-side license module  to the license manager module  at the license server , where the serial number or product key is verified. Because the add-on software components are not individually licensed and the use of the add-on components is dependent only upon a host application being properly installed and activated, the software vendor has little control over how and when the add-on software components are utilized.","Methods and systems for activating an add-on software component independently of the host application with which it is used are described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the various aspects of different embodiments of the present invention. It will be evident, however, to one skilled in the art, that the present invention may be practiced without these specific details.","As used herein, the term \u201cadd-on software component\u201d or \u201cadd-on component\u201d is a set of instructions or data that are compatible with one or more host applications to provide a certain function or functions that extend the functionality or usefulness of a host application. For purposes of the present disclosure, the terms \u201cadd-on software component\u201d and \u201cadd-on component\u201d are interchangeable and are meant to encompass add-ins, plug-ins, snap-ins and extensions. In general, an add-on component is dependent upon a host application to operate and therefore an add-on component may or may not have its own user interface. For purposes of the present disclosure, a host application is a stand-alone software application that is designed to operate with one or more add-on components, but may also operate independently, with no add-on software components.","Consistent with some embodiments of the invention, an add-on software component that may be compatible with one or more host applications is assigned its own serial number or product key and can therefore be activated independently of any host application with which it might be compatible. The activation process may occur when the add-on software component is first invoked or executed, or alternatively, when an end-user invokes an add-on management module via one of the compatible host applications. In some embodiments, activating an add-on software component will automatically make the add-on software component operable with any compatible host application. However, in alternative embodiments, activating the add-on software component will only make it operable with a particular host application. Accordingly, consistent with some embodiments of the invention, the activation process enables the enforcement of EULA's with varying licensing terms, and so forth.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2","FIG. 2"],"b":["22","24","26","24","28","30","22","22","26","24","22","22"]},"As illustrated in , the host application  includes an add-on manager module  that provides a way for the add-on component  to register with, or otherwise make itself known to, the host application . Although in  the add-on manager module  is shown to be a part of the host application , in some alternative embodiments, the add-on manager module  may be a separate and independent component, and may map several add-on components to the host applications with which the add-on components are compatible. Accordingly, the add-on manager module  may indicate when a single add-on component is compatible with multiple host applications. Also, as described in greater detail below, the add-on manager module  may include a license module (not shown in ) that performs various product activation operations that facilitate enforcement of EULA associated with add-on software components.","In the example presented in , the host application  and the add-on software component  both have their own serial number. Accordingly, consistent with some embodiments of the invention, the host application  and the add-on software component  can be made subject to separate and independent EULA's, and can be separately and independently activated, for example, by a software activation process.","Skilled artisans will readily appreciate that the software architecture represented in  represents a single example of a vast number of potential architecture implementations. In particular, in some embodiments, the add-on component  may represent content that is non-executable data, such as a theme or skin that includes graphics, images, and\/or audio content. In such a scenario, the add-on component may not have an add-on interface  that invokes services , but instead, the services  will read and process data included in the add-on component. As such, the data of the add-on component may be structured in a particular way to suit the requirements of the host application.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 3"],"b":["40","40"]},"According to some embodiments, when a host application is first installed, one or more add-on software components may be installed along with the host application. For example, in some instances a suite of applications may be installed on a computer, and along with the applications, one or more add-on components will also be installed. Some of the add-on components may provide additional functionality or otherwise enhance a single host application, while other add-on components may be compatible with multiple host applications. As part of the installation process, or when an add-on component is first invoked or executed, an add-on manager module  may be invoked. Alternatively, the add-on manager module  may be invoked at a later time, when an end-user interacts with a particular user interface element (e.g., a menu item or button) of the host application, such that the UI element invokes the add-on manager module . In either case, the add-on manager module  may identify the installed add-on components with which the host application is compatible. Accordingly, in some embodiments when a host application is first installed, an end-user may be presented with a user interface that identifies add-on software components that are compatible with the host application. In addition, the end-user may be presented with an opportunity to provide product activation data, such as licensing information (e.g., a product key or serial number), to activate an installed add-on software component.","As illustrated in , the add-on manager module  is a separate and independent module. Accordingly the add-on manager module , in some embodiments, may be invoked from any host application in a suite of applications, including host Applications C and D in the example presented in . In some embodiments, the add-on manager module  will include a user interface component that presents information that identifies the add-on software components compatible with the host application that invoked the add-on manager module . For example, if the add-on manager module  was invoked by Application C, only information about add-on R would be displayed to the end-user, because only add-on R is compatible with Application C in the example presented in . In some embodiments, the add-on manager module  may be a stand-alone application that can be independently invoked. In such a scenario the add-on manager module  may present information about multiple host applications and add-on software components. For example, in some embodiments, the add-on manager module  may present information that identifies the host applications that are compatible with the individual installed add-on components, as well as the status of each add-on component. The status information may include whether the add-on component is currently activated (e.g., indicating a valid license has been verified), or installed but not yet activated. Additionally, the status information may include information about a trial period associated with a limited license. Such information may indicate the number of days left in the trial period, for example. An example user interface of the add-on manager module  is presented in .","In some embodiments, the add-on manager module  includes a license module . The license module  facilitates communications over a network between the add-on manager module  and a license server . For example, in some embodiments, the license module  may make various types of license calls to a license manager module  residing and executing at the license server . One type of license call involves a call to request that a product be activated. For example, based on some end-user supplied input, such as a product key or serial number, a product activation ID may be generated and communicated in a license call to the license manager module  to verify that an installation of an add-on component is authorized under a particular EULA associated with the add-on component. In some embodiments, some form of machine ID may also be communicated in a license call, so that the activated add-on component is associated with a particular machine, as identified by the machine ID.","At the license manager module , a decryption module  may decrypt the product activation code received in the license call, while a verification module  verifies the authenticity of the end-user supplied serial number of product key, for example, by comparing the end-user supplied serial number or product key with a known serial number or product key  stored in a database. When first activated, the machine ID may be stored with the licensing information to associated the activation of the add-on component with the particular machine.","Additionally, a separate license call may be made to confirm the licensing status of one or more existing and installed add-on components. For example, when a host application invokes a particular add-on component, while the add-on component is executing, a background process may be performed to verify that the status of the license for the add-on software component has not changed. The status information , in this scenario, may be maintained at the license manager module . The status information is communicated back to the add-on manager module, which displays the status information in a user interface.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 4","FIG. 4","FIG. 4"]},"In some embodiments, when the add-on manager module is invoked from within a particular host application, the user interface of the add-on manger module will show a list of only those add-on software components that are presently installed and compatible with the particular host application that invoked the add-on manager module. For example, in , the add-on components (add-ons X, Y and Z) are all presumed to be compatible with the same host application. As illustrated in , for each add-on component shown, a status is also indicated. For example, the status of add-on X in  is indicated as \u201cLicensed\u201d . In addition, further information is provided about the \u201cLicensed\u201d status. For instance, the additional information  for add-on X indicates that the license is a limited license associated with a trial period in which 28 days are remaining.","In addition to presenting status information, the user interface of  facilitates the collecting of licensing information for an add-on software component. For example, by selecting add-on Z (as shown), an end-user is prompted to enter a serial number associated with add-on Z. After providing the serial number, an end-user can select the activate button  to initiate a license call to a license server. Assuming a proper serial number is provided, the status of add-on Z will be changed to reflect its new status.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5","b":"70"},"At method operation , product activation data is received for an add-on component. For example, a user may be prompted to enter a serial number or product key for an installed, but not yet activated, add-on component. The add-on component for which the product activation data is received may be compatible with one or more host applications in a suite of applications.","Next, at method operation , the product activation data is communicated to a license server in a license verification call, to verify the validity of the product activation data, and by proxy, the license associated with the installed add-on component. If the license verification operation establishes that the product activation data is valid, the status of the add-on component is changed to reflect the approval.","Once an add-on component is activated, periodically as the add-on component is used, a background process may assess whether the status of the license has changed. For example, if the license for the add-on component is a limited license and subject to a trial period, when the trial period ends, the status of the add-on component will change and further action will be required to continue using the add-on component.","Because the add-on software component is activated independently of any host application with which the add-on software component may be compatible, the add-on software component may be activated with a licensing status that is different from any one or more host applications with which the add-on software component is compatible. For example, the license for the add-on component may be a limited license, providing a trial period for using the add-on software component, whereas the host application may have a regular, unlimited license. Of course, other variations of licensing statuses may be possible.","The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. Accordingly, the modules referred to herein may, in some example embodiments, comprise processor-implemented modules.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or more processors or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment or at a server farm), while in other embodiments the processors may be distributed across a number of locations.","The one or more processors may also operate to support performance of the relevant operations in a \u201ccloud computing\u201d environment or as a service, for example, such as in the context of \u201csoftware as a service\u201d (SaaS). For example, at least some of the operations may be performed by a group of computers (as examples of machines including processors), these operations being accessible via a network (e.g., the Internet) and via one or more appropriate interfaces (e.g., Application Program Interfaces (APIs).)",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5","FIG. 5"]},"The example computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a display unit , an alphanumeric input device  (e.g., a keyboard), and a user interface (UI) navigation device  (e.g., a mouse). In one embodiment, the display, input device and cursor control device are a touch screen display. The computer system  may additionally include a storage device (e.g., drive unit ), a signal generation device  (e.g., a speaker), a network interface device , and one or more sensors , such as a global positioning system sensor, compass, accelerometer, or other sensor.","The drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or utilized by any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-readable media.","While the machine-readable medium  is illustrated in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d may include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any tangible medium that is capable of storing, encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention, or that is capable of storing, encoding or carrying data structures utilized by or associated with such instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media. Specific examples of machine-readable media include non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.","The software  may further be transmitted or received over a communications network  using a transmission medium via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., HTTP). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, mobile telephone networks, Plain Old Telephone (POTS) networks, and wireless data networks (e.g., Wi-Fi\u00ae and WiMax\u00ae networks). The term \u201ctransmission medium\u201d shall be taken to include any intangible medium that is capable of storing, encoding or carrying instructions for execution by the machine, and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.","By licensing add-on components independently of the host applications with which the add-on components are compatible, host applications and add-on components can be priced to more accurately reflect the value of the applications to the user, or the cost to the developer associated with development, of the respective host application or add-on component. For example, in certain scenarios, advanced functionality of a host application that is used by a limited number of application users can be offered independently as an add-on component. This may results in a less expensive host application, as the host application can be sold without the add-on component comprising the advanced functionality. Consequently, in general, the licensing and software activation methods described herein provide for much more flexible pricing strategies.","Although an embodiment has been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof, show by way of illustration, and not of limitation, specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description, therefore, is not to be taken in a limiting sense, and the scope of various embodiments is defined only by the included claims, along with the full range of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Some embodiments are illustrated by way of example and not limitation in the Figures of the accompanying drawings, in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
