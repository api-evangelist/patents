---
title: Method and system for troubleshooting a misconfiguration of a computer system based on configurations of other computer systems
abstract: A method and system for identifying a configuration parameter of a “sick” computer system that is at fault for causing an undesired behavior based on analysis of configuration parameters from other computer systems is provided. In one embodiment, a troubleshooting system collects “suspect” values for “suspect” configuration parameters used by a “sick” application when the undesired behavior was exhibited by the sick computer system. The troubleshooting system then compares the suspect values to sample values of the suspect configuration parameters retrieved from sample computer systems. The troubleshooting system uses that comparison to identify one or more suspect configuration parameters that are likely at fault for causing the application to exhibit the undesired behavior.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07890807&OS=07890807&RS=07890807
owner: Microsoft Corporation
number: 07890807
owner_city: Redmond
owner_country: US
publication_date: 20070613
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION(S)","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 10\/918,786, filed on Aug. 13, 2004, entitled \u201cMETHOD AND SYSTEM FOR TROUBLESHOOTING A MISCONFIGURATION OF A COMPUTER SYSTEM BASED ON CONFIGURATIONS OTHER COMPUTER SYSTEMS,\u201d which application claims the benefit of U.S. Provisional Application No. 60\/545,799, filed on Feb. 19, 2004, entitled \u201cFRIENDS TROUBLESHOOTING NETWORK: TOWARDS PRIVACY-PRESERVING, AUTOMATIC TROUBLESHOOTING\u201d and U.S. Provisional Application No. 60\/547,608, filed on Feb. 24, 2004, entitled \u201cMETHOD AND SYSTEM FOR TROUBLESHOOTING A MISCONFIGURATION OF A COMPUTER SYSTEM BASED ON CONFIGURATIONS OF OTHER COMPUTER SYSTEMS,\u201d which are hereby incorporated by reference in their entireties.","The described technology relates generally to identifying a configuration parameter whose value is causing an undesired behavior.","An ever-increasing number of applications (i.e., computer software) with various features are available to users of personal computers. Users can tailor the operation of these applications to suit their needs by specifying various configuration parameters. For example, a browser application may have a configuration parameter that provides a URL of a web page that is displayed initially whenever the browser application starts (i.e., \u201ca home page\u201d). The browser application may also have configuration parameters that identify programs to be invoked to process certain types of content (e.g., a \u201cjpeg\u201d file) and that specify passwords to be used when the application connects to various servers. The values of the configuration parameters can be stored in application-specific configuration files such as UNIX resource files or in a central registry such as the Windows\u00ae registry file. The application-specific configuration file for an application may have an internal format that is specific to that application. With a central registry, many different applications can share the same configuration parameters. The applications access these files to retrieve the values of their configuration parameters.","If certain configuration parameters have incorrect values, then the applications may exhibit an undesired behavior. For example, if the value of a home page configuration parameter is not set correctly, then when the browser application starts, it will exhibit an undesired behavior by not displaying a home page or displaying the wrong home page. If a configuration parameter incorrectly indicates a certain text editor should be invoked to process a graphics file, then the undesired behavior will be the incorrect display of the graphics content.","Because of the complexity of applications and their large number of configuration parameters, it can be very time-consuming to troubleshoot which configuration parameters are at fault for causing an application to exhibit the undesired behavior. Most users of personal computers have difficulty performing this troubleshooting. As a result, users typically rely on technical support personnel to assist in the troubleshooting. This troubleshooting not only is expensive but also users may experience a significant productivity loss as a result of their inability to effectively use an application that is exhibiting an undesired behavior.","Typically, technical support personnel use an ad hoc approach to troubleshooting configuration problems. Because some central registries store over 200,000 configuration parameters and some computer systems have over 100,000 files, the personnel using knowledge gained from experiencing similar problems will try to narrow in on the at-fault configuration parameter. This ad hoc approach can take a considerable amount of time and even longer if it is a combination of configuration parameters whose values are incorrect. In some cases, the technical support personnel may compare the values of the configuration parameters to \u201cideal\u201d values for that application. It can be very difficult to identify the configuration parameters used by an application, and this identification requires application-specific knowledge. Moreover, because of the large number of configuration parameters available and the large number of possible values for each configuration parameter, many of the configuration parameters will have no \u201cideal\u201d value. Thus, technical support personnel still need to review those values of the application that are different from the ideal values.","It would be desirable to automatically identify a configuration parameter that is at fault for causing an application to exhibit an undesired behavior. It would also be desirable, after such a configuration parameter is identified, to identify an appropriate value for that configuration parameter.","A method and system for identifying a likely cause of a component (e.g., application or hardware device) to exhibit a certain behavior is provided. A system collects values for configuration information (e.g., configuration parameters of an application) that may be causing certain behavior and retrieves values for the configuration information from other occurrences of that component (e.g., other computer systems that host the same application). The collected values may be for all the configuration information or a subset of the configuration information that is actually accessed by the component when the certain behavior was exhibited. The system then performs a statistical analysis over the collected values and the retrieved values to determine which configuration information is likely causing the certain behavior of the component.","A method and system for identifying a configuration parameter of a \u201csick\u201d computer system that is at fault for causing an undesired behavior based on analysis of configuration parameters from other computer systems is provided. In one embodiment, a troubleshooting system collects \u201csuspect\u201d values for \u201csuspect\u201d configuration parameters used by a \u201csick\u201d application when the undesired behavior was exhibited by the sick computer system. The troubleshooting system then compares the suspect values to sample values of the suspect configuration parameters retrieved from sample computer systems that may be peer computer systems. The troubleshooting system uses that comparison to identify one or more suspect configuration parameters that are likely at fault for causing the application to exhibit the undesired behavior. For example, if a suspect configuration parameter has a value that indicates a different text editor should be used to process a graphics file, but the corresponding sample values for all the sample computer systems indicate a certain picture editor should be used, then that suspect configuration parameter might be at fault for causing a graphics file to be displayed incorrectly. This might be especially true if the values for all other suspect configuration parameters are the same for the sick computer system and the sample computer systems. The troubleshooting system may apply various statistical analysis techniques to the sample values when identifying the suspect configuration parameter that is likely at fault. For example, Bayes' rule can be applied to derive a probability for each suspect configuration parameter indicating its likelihood of being at fault. Once a likely at-fault suspect configuration parameter has been identified, the troubleshooting system can identify likely correct values based on analysis of the sample values. Thus, the troubleshooting system may be considered to use the \u201ctypical\u201d sample value as the \u201cideal\u201d value for an at-fault configuration parameter. In this way, the troubleshooting system can quickly and automatically identify the configuration parameter that is likely at fault and propose a sample value that may be correct.","In one embodiment, the troubleshooting system identifies the suspect configuration parameters by monitoring the execution of the application when it exhibits the undesired behavior. A tracer program may be used to trace the application's access to the configuration parameters that may be stored in a configuration file for the application or in a central registry. The tracer program logs the configuration parameters accessed by the application and their corresponding values. The logged configuration parameters are considered the \u201csuspect\u201d configuration parameters because they are the ones that the application used when it exhibited the undesired behavior. The tracer program may execute on the sick computer system and then provide its log to a troubleshooting computer system for identification of the suspect configuration parameter that is at fault.","The troubleshooting system can retrieve the sample values for configuration parameters from the sample computer systems before or after the suspect values for the sick computer system are collected. The sample computer systems may be \u201cpeer\u201d computer systems in the sense that they are related in some way. For example, the peer computer systems can be the set of user computer systems on the local area network of a company or a subset that shares a common characteristic (e.g., used by sales representatives). If the sample values are retrieved before the suspect values are collected, the troubleshooting system may store the sample values in a configuration database. The configuration database may have, for each peer computer system, an entry that contains the value of each configuration parameter retrieved from that computer system. In addition, the troubleshooting system may maintain an index of which peer computer systems have which applications installed. The troubleshooting system may use the index to rapidly select as the sample computer systems those peer computer systems that have the sick application installed. The troubleshooting system uses the sample values of the suspect configuration parameters in its analysis. When the sample values are retrieved before the suspect values are collected, the configuration parameter values for as many different applications that can be troubleshot need to be retrieved and stored. In addition, these sample values may need to be retrieved periodically to reflect the then-current configuration of the sample computer systems.","If the sample values are retrieved after the suspect values are collected, then the troubleshooting system can limit the retrieval of values to those of the suspect configuration parameters as identified by the tracer program. Because the retrieval is performed at the time of the analysis, the sample values represent the then-current values of the suspect configuration parameters. To speed up the retrieval of the sample values, the troubleshooting system may maintain an index of which peer computer systems have the sick application installed. The troubleshooting system can use the index to identify those peer computer systems that have the sick application installed and retrieve the values for the suspect configuration parameters from only those computer systems.","In one embodiment, the troubleshooting system may preprocess various configuration parameters to place them in a canonical or normal form. Some configuration parameters may have names or values that are system-specific (e.g., different for every peer computer system). Such system-specific configuration parameters may include password parameters, user name\/ID parameters, machine name parameters, device ID parameters, and so on. The troubleshooting system may set the value of each of these parameters to a canonical form, such as \u201cusername\u201d for a user name parameter. Alternatively, the troubleshooting system may simply disregard the system-specific configuration parameters when performing its analysis. Other configuration parameters may have values that need to be normalized. For example, a configuration parameter with a URL as its value may be case-insensitive, in which situation the troubleshooting system may normalize values to a standard case to assist in identifying which values are the same (i.e., reference the same resource). As another example, the value of a number in single quotes (e.g., \u20181\u2019) and in double quotes (\u201c1\u201d) may represent the same behavior to the application. In such a situation, the troubleshooting system may replace all double quotes with single quotes to normalize the values. The troubleshooting system may place both the suspect values and the sample values in a canonical or normal form.","One skilled in the art will appreciate that many different mathematical analysis techniques may be used to identify the at-fault configuration parameter. Those techniques may include a nearest neighbor analysis, a Bayes net, a neural network, a decision tree, a support vector machine, and so on. In one embodiment, the troubleshooting system calculates a probability that each suspect configuration parameter is at fault using Bayes' rule as described below in more detail.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["110","120","130","111","112","113","114","115","121","122","123","130"]},"The computing devices on which the troubleshooting system may be implemented include a central processing unit, memory, input devices (e.g., keyboard and pointing devices), output devices (e.g., display devices), and storage devices (e.g., disk drives). The memory and storage devices are computer-readable media that may contain instructions that implement the troubleshooting system. In addition, data structures and message structures may be stored or transmitted via a data transmission medium, such as a signal on a communications link. Various communications links may be used, such as the Internet, a local area network, a wide area network, or a point-to-point dial-up connection.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},"The troubleshooting system may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, and so on that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. The term \u201capplication\u201d refers to any type of executing software such as drivers, kernel-mode code, operating systems, system utilities, web servers, database servers, and so on. The functions of the troubleshooting system can be performed by each peer computer system or by a central troubleshooting computer system, or distributed between the peer computer systems and a central troubleshooting system.",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":["Name","Suspect","Sample1","Sample2","Sample3","Sample4","Sample5"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[".jpg\/contentType","image\/jpeg","image\/jpeg","image\/jpeg","image\/jpeg","image\/jpeg","image\/jpeg"]},{"entry":[".htc\/contentType","null","text\/x-comp","text\/x-comp","text\/x-comp","text\/x-comp","text\/x-comp"]},{"entry":["url-visited","yahoo","hotmail","Nytimes","SFGate","google","friendster"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}}}},"Table 1 illustrates an example of a troubleshooting case. The table shows suspect values and sample values for various suspect configuration parameters. The tracer program logged the suspect configuration parameters and their suspect values when the application exhibited an undesired behavior. In this example, the tracer program identified three configuration parameters as being suspect (e.g., \u201c.jpg\/contentType\u201d). The troubleshooting system retrieved sample values from five sample computer systems for each suspect configuration parameter. Analysis of the sample values indicates that the most likely at-fault configuration parameter is the second configuration parameter (i.e., \u201c.htc\/contentType\u201d) in the table. All the sample values for that configuration parameter are the same (i.e., \u201ctext\/x-comp\u201d), but different from the suspect value (\u201cnull\u201d). Therefore, it might be assumed that the suspect value of the second configuration parameter is incorrect. Since the suspect value and all the sample values of the first configuration parameter are the same, the suspect value is probably correct. Moreover, because the suspect value and all the sample values for the third configuration parameter are completely different, it would be difficult to assess the correctness of the suspect value from the sample values. In addition to identifying that the second configuration parameter may be at fault, the correct value can be inferred as being the common sample value (i.e., \u201ctext\/x-comp\u201d).","Table 1 illustrates two different types of configuration parameters: configuration state and operational state. The first and second parameters are configuration states, and the third parameter is an operational state. Operational state parameters have values that are typically set by the application itself and include timestamps, usage counts, caches, seeds for random number generators, window positions, most recently used related information, and so on. The configuration state parameters can generally be set by users to control the operation of an application and are thus more likely than operational state parameters to be at fault for causing an undesired behavior of an application.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["N","Number of sample computer systems"]},{"entry":["t","Number of suspect configuration parameters"]},{"entry":["i","Index of the suspect configuration parameters (from 1 to t)"]},{"entry":["V","Value of a suspect configuration parameter"]},{"entry":["c","Number of possible values for a suspect configuration parameter"]},{"entry":["m","Number of sample values that match the suspect value"]},{"entry":["P(S)","Prior probability that a suspect configuration parameter is at"]},{"entry":[{},"fault (i.e., \u201cS\u201d for sick)"]},{"entry":["P(H)","Prior probability that a suspect configuration parameter is not"]},{"entry":[{},"at fault (i.e., \u201cH\u201d for healthy)"]},{"entry":["P(S|V)","Probability that a suspect configuration parameter that is at"]},{"entry":[{},"fault has the value V"]},{"entry":["P(V|S)","Probability that a suspect configuration parameter with a value"]},{"entry":[{},"V is at fault"]},{"entry":["P(V|H)","Probability that a suspect configuration parameter with the"]},{"entry":[{},"value V is not at fault"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, the troubleshooting system uses Bayes' rule in calculating a probability that each suspect configuration parameter is at fault. Bayes' rule can be stated as follows:",{"@attributes":{"id":"p-0033","num":"0032"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["S","V"],"mo":"\u2758"}}},"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["V","S"],"mo":"\u2758"}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"S"}}],"mo":"\u2062"},{"mrow":[{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["V","S"],"mo":"\u2758"}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"S"}}],"mo":"\u2062"},{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["V","H"],"mo":"\u2758"}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"H"}}],"mo":"\u2062"}],"mo":"+"}]}}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}},"br":{},"sub":["i","i"]},{"@attributes":{"id":"p-0034","num":"0033"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"S"}},"mo":"=","mfrac":{"mn":"1","mi":"t"}}},{"mrow":{"mo":["(",")"],"mn":"2"}}]},{"mtd":[{"mrow":{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"H"}},{"mn":"1","mo":"-","mfrac":{"mn":"1","mi":"t"}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"3"}}]}]}}},"br":{}},{"@attributes":{"id":"p-0035","num":"0034"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["V","S"],"mo":"\u2758"}}},"mo":"=","mfrac":{"mn":"1","mi":"c"}}},{"mrow":{"mo":["(",")"],"mn":"4"}}]}}}},"br":{}},"The probability that a suspect value of a suspect configuration parameter is not at fault can be derived from the sample values. In particular, the probability can be assumed to be the number of times the suspect value occurs in the sample values divided by the number of values. The maximum likelihood of this probability is given by the following equation:",{"@attributes":{"id":"p-0037","num":"0036"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["V","H"],"mo":"\u2758"}}},"mo":"=","mfrac":{"mi":["m","N"]}}},{"mrow":{"mo":["(",")"],"mn":"5"}}]}}}},"br":{}},{"@attributes":{"id":"p-0038","num":"0037"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["S","V"],"mo":"\u2758"}}},"mo":"=","mfrac":{"mi":"N","mrow":{"mi":"N","mo":"+","mrow":{"mi":"cm","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"t","mo":"-","mn":"1"}}}}}}},{"mrow":{"mo":["(",")"],"mn":"6"}}]}}}}},"The maximum likelihood, however, may have undesirable properties when the number of sample computer systems is limited. For example, when there are no matching values to V in the sample values, then m=0 and P(S|V)=1, which expresses complete certainty that is unjustified. For example, in Table 1, the maximum likelihood would indicate that the second and third configuration parameters are both at fault with complete and equal confidence. Bayesian estimation of probabilities may be more appropriate when the number of samples is small. Bayesian estimation uses a prior estimate of P(V|H) before the sample values are examined and produces a posterior estimate of P(V|H) after the sample values are examined. Therefore, P(V|H) is never 0 or 1.","If it is assumed that P(V|H) is multinomial over all possible values V, the multinomial has parameters p. Each pis the probability that the value Voccurs and\n\n\u03a3p=1\u2003\u2003(7)\n\nThe probabilities have prior and posterior values pthat can be represented in a Dirichlet distribution. Dirichlet distributions are conjugate to multinomials. That is, combining observations from a multinomial with a prior Dirichlet yields a posterior Dirichlet.\n","Dirichlet distributions are characterized by a count vector n, which corresponds to the number of possible counts for each value V. To perform Bayesian estimation of P(V|H), a prior set of counts n\u2032that reflects a prior belief about the likelihood of various values Vis used. The count mfor each unique value from the sample values can be collected and the mean of the posterior Dirichlet yields the posterior estimate of the following equation:",{"@attributes":{"id":"p-0042","num":"0041"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["V","j"]},"mo":"\u2758","mi":"H"}}},"mo":"=","mfrac":{"mrow":[{"msub":{"mi":["m","j"]},"mo":"+","msubsup":{"mi":["n","j","\u2032"]}},{"mi":"N","mo":"+","mrow":{"munder":{"mo":"\u2211","mi":"j"},"mo":"\u2062","msubsup":{"mi":["n","j","\u2032"]}}}]}}},{"mrow":{"mo":["(",")"],"mn":"8"}}]}}}}},"Since this probability is only needed for the suspect value, mcan be replaced with m, the number of samples that matches the suspect entry. Furthermore, if it is assumed that all values Vhave the same a priori probability, then n\u2032can be replaced with some value n and the sum \u03a3n\u2032can be replaced with cn. These assumptions result in the following equation:",{"@attributes":{"id":"p-0044","num":"0043"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["S","V"],"mo":"\u2758"}}},"mo":"=","mfrac":{"mrow":[{"mi":["N","cn"],"mo":"+"},{"mi":["N","cnt"],"mo":["+","+"],"mrow":{"mi":"cm","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"t","mo":"-","mn":"1"}}}}]}}},{"mrow":{"mo":["(",")"],"mn":"9"}}]}}}},"br":{},"sub":["j ","j "]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIGS. 2 and 3","FIG. 2"],"b":["201","202","203","204","203","204"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["301","302","303"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIGS. 4-7","FIG. 4"],"b":["401","402","403"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","b":["501","502","507","502","503","504","504","505","502","506","506","507","504","507","502"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 6","FIG. 5"],"b":["601","602","607","602","603","604","604","605","602","605","606","607","602"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 7","b":["701","708","701","702","703","703","704","705","706","707","708","701"],"sub":["i ","ij"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8","b":["801","802","803"]},"One skilled in the art will appreciate that although specific embodiments of the troubleshooting system have been described for purposes of illustration, various modifications may be made without deviating from the spirit and scope of the invention. The troubleshooting system can also be used to identify hardware configuration problems. For example, if the peer computer systems include special-purpose signal processing hardware with configuration parameters, then suspect values of those configuration parameters for a computer system that is exhibiting an undesired behavior can be compared to sample values as described above. More generally, the troubleshooting system can be used in an environment with multiple configuration parameters, such as settings for television set-top boxes, cell phones, automobiles, and so on. The techniques of the troubleshooting system can also be used to identify information generally that may be causing a certain behavior, whether desired or undesired. For example, the execution of an application may be adversely affected by the overall configuration of the computer system on which it is executing. As an example, the undesired behavior may be caused by a missing operating system component, an outdated driver, insufficient main memory, interactions with a user, URL parameters, API parameters, and so on. The techniques of the troubleshooting system can be used to analyze such information collected from sample systems to identify the cause of the behavior. The techniques can also be used to identify the cause of a desired behavior. For example, a complex system may have hundreds of \u201cparameters\u201d with many different possible values that may affect its behavior. In such a case, it may be impractical to predict the behavior of each possible combination of parameter values. However, once a desired behavior is identified, the technique can be used to identify the parameters and their values that are likely causing the desired behavior by comparing it to a sample set that is not exhibiting that behavior (or even one that is exhibiting that behavior). The described technology is related to U.S. Provisional Application No. 60\/545,799, entitled \u201cFriends Troubleshooting Network: Towards Privacy-Preserving, Automatic Troubleshooting\u201d and filed on Feb. 19, 2004, and U.S. Provisional Application No. 60\/547,607, entitled \u201cMethod and System for Collecting Information from Computer Systems based on a Trusted Relationship\u201d and filed on Feb. 24, 2004, which are hereby incorporated by reference. These applications describe technology that can be used to retrieve the sample configuration parameter values. Accordingly, the invention is not limited except by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
