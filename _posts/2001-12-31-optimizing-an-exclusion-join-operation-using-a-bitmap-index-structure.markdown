---
title: Optimizing an exclusion join operation using a bitmap index structure
abstract: A method, computer program and database system are disclosed for performing an exclusion join of at least a first table Tand a second table T, where each of the tables has an associated Star Map, Sand S, respectively. Each Star Map includes bitmap entries having locations indexed by the hash of one or more values associated with one or more join key columns of its associated table. The method, computer program, and database system include a) performing one or more Boolean operations using the bitmap entries of the Star Maps Sand Sto produce bitmap entries in a Star Map SJ where there is a corresponding set bitmap entry in Sand no corresponding set bitmap entry in S; b) using SJ to identify qualifying rows from the first table T; and c) providing the qualifying rows as an exclusion join result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06957210&OS=06957210&RS=06957210
owner: NCR Corporation
number: 06957210
owner_city: Dayton
owner_country: US
publication_date: 20011231
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["Relational DataBase Management Systems (RDBMS) using a Structured Query Language (SQL) interface are well known in the art. The SQL interface has evolved into a standard language for RDBMS software and has been adopted as such by both the American National Standards Institute (ANSI) and the International Standards Organization (ISO). In an RDBMS, all data is externally structured into tables. A table in a relational database is two dimensional, consisting of rows and columns. Each column has a name, typically describing the type of data held in that column. As new data is added, more rows are inserted into the table. A user query selects some rows of the table by specifying clauses that qualify the rows to be retrieved based on the values in one or more of the columns.","The SQL interface allows users to formulate relational operations on the tables either interactively, in batch files, or embedded in host languages such as C, COBOL, etc. Operators are provided in SQL that allow the user to manipulate the data, wherein each operator performs functions on one or more tables and produces a new table as a result. The power of SQL lies in its ability to link information from multiple tables or views together to perform complex sets of procedures with a single statement.","The SQL interface allows users to formulate relational operations on the tables. One of the most common SQL queries executed by the RDBMS is the SELECT statement. In the SQL standard, the SELECT statement generally comprises the format: \u201cSELECT <clause> FROM <clause> WHERE clause> GROUP BY<clause> HAVING <clause> ORDER BY<clause>.\u201d The clauses generally must follow this sequence, but only the SELECT and FROM clauses are required.","Generally, the result of a SELECT statement is a subset of data retrieved by the RDBMS from one or more existing tables stored in the relational database, wherein the FROM clause identifies the name of the table or tables from which data is being selected. The subset of data is treated as a new table, termed the result table.","A join operation is usually implied by naming more than one table in the FROM clause of a SELECT statement. A join operation makes it possible to combine tables by combining rows from one table with another table. The rows, or portions of rows, from the different tables are concatenated horizontally. Although not required, join operations normally include a WHERE clause that identifies the columns through which the rows can be combined. The WHERE clause may also include a predicate comprising one or more conditional operators that are used to select the rows to be joined.","An exclusion join operation selects rows in a first table having values in specified columns where the values cannot be found in a specified column of a second table. A database system may execute such a query by excluding entries in the first table that match entries in the <second table.","In general, in one aspect, the invention features a method for performing an exclusion join of at least a first table T and a second table T, where each of the tables has an associated Star Map, S and S, respectively. Each Star Map includes bitmap entries having locations indexed by the hash of one or more values associated with one or more join key columns of its associated table. A bitmap entry in a Star Map, if set, indicates the presence of one or more rows in its associated table that has entries in the one or more join key columns that together hash to the location of the bitmap entry. The method includes a) performing one or more Boolean operations using the bitmap entries of the Star Maps S and S to produce bitmap entries in a Star Map SJ where there is a corresponding set bitmap entry in S and no corresponding set bitmap entry in S; b) using SJ to identify qualifying rows from the first table T; and c) providing the qualifying rows as an exclusion join result.","Implementations of the invention may include one or more of the following. Using SJ to identify qualifying rows from the first table T may include performing the following until all rows from T have been selected: b1) selecting a row in T, b2) hashing the combined entries in the one or more join key columns of the selected row to identify a bitmap entry in SJ, and b3) if the identified bitmap entry in SJ is set, identifying the selected row as a qualifying row. The exclusion join may include join conditions. Using SJ to identify qualifying rows from the first table T may further include b4) if the identified bitmap entry in SJ is not set, attempting to find a row in T that has entries in its one or more join key columns that together hash to the location of the identified unset bitmap entry in SJ, and b5) if no such row can be found or if no found row from T satisfies the join conditions, identifying the selected row from T as a qualifying row. The method may only perform b and c if the number of unset bitmap entries in SJ is less than a threshold. The threshold may be related to the number of rows in T and a number of blocks used to store T. The method may include determining an expected join cardinality and only performing a, b and c if the expected join cardinality is less than a cardinality threshold.","One of the one or more Boolean operations may produce an intermediate Star Map S. The intermediate Star Map SINT may result from ANDing Star Maps S and S and Star Map SJ may result from exclusive ORing Star Map SINT and S. The intermediate Star Map SINT may result from ORing Star Maps S and S and Star Map SJ may result from exclusive ORing Star Map SINT and S. The intermediate Star Map SINT may result from inverting Star Map S and Star Map SJ may result from ANDing Star Maps SINT and S. A plurality of tables T\u2032 and tables T\u2032 and a plurality of associated Star Maps S\u2032 and Star Maps S\u2032 may be provided. Star Maps S\u2032 may be logically ORed to generate Star Map S and Star Maps S\u2032 may be logically ORed to generate Star Map S.","In general, in another aspect, the invention features a computer program, stored on a tangible storage medium, for performing an exclusion join of at least a first table T and a second table T, where each of the tables has an associated Star Map, S and S, respectively. Each Star Map includes bitmap entries having locations indexed by the hash of one or more of values associated with one or more join key columns of its associated table. A bitmap entry in a Star Map, if set, indicates the presence of one or more rows in its associated table that has entries in the one or more join key columns that together hash to the location of the bitmap entry. The program includes executable instructions that cause a computer to a) perform one or more Boolean operations using the bitmap entries of the Star Maps S and S to produce bitmap entries in a Star Map SJ where there is a corresponding set bitmap entry in S and no corresponding set bitmap entry in S, b) use SJ to identify qualifying rows from the first table T, and c) provide the qualifying rows as an exclusion join result.","In general, in another aspect, the invention features a database system for accessing a database. The database system includes a massively parallel processing system including one or more nodes, a plurality of CPUs, each of the one or more nodes providing access to one or more CPUs, a plurality of virtual processes each of the one or more CPUs providing access to one or more processes, each process configured to manage data stored in one of a plurality of data-storage facilities. At least a first table T and a second table T are distributed among the data-storage facilities. Each of the tables has an associated Star Map, S and S, respectively, each Star Map being distributed among the data-storage facilities. Each Star Map includes bitmap entries having locations indexed by the hash of one or more of values associated with one or more join key columns of its associated table. A bitmap entry in a Star Map, if set, indicates the presence of one or more rows in its associated table that has entries in the one or more join key columns that together hash to the location of the bitmap entry. A join process executed on one or more of the plurality of CPUs causes the CPUs to a) perform one or more Boolean operations using the bitmap entries of the Star Maps S and S to produce bitmap entries in a Star Map SJ where there is a corresponding set bitmap entry in S and no corresponding set bitmap entry in S, b) use SJ to identify qualifying rows from the first table T, and c) provide the qualifying rows as an exclusion join result.","Implementations of the invention may include one or more of the following. One or more of the Star Maps may be a table and a first portion of the hash value that indexes the locations of a Star Map may define a row within the Star Map and a second portion of the hash value may define an offset within the defined row. The first portion may be the first half of the hash value and the second portion may be the second half of the hash value. The hash value may be 32 bits long, the first portion may be the first 16 bits of the hash value, and the second portion may be the second 16 bits of the hash value. Each entry in a Star Map may be one bit. Each entry in a Star Map may be sixteen bits. Each Star Map entry may include one or more bits and each bit may correspond to the hash of one or more values associated with the one or more join key columns of its associated table.","In general, in another aspect, the invention features a method for performing an exclusion join of at least a first table T and a second table T. Table T has an associated Star Map S which includes bitmap entries having locations indexed by the hash of one or more values associated with one or more join key columns of T. A bitmap entry in S, if set, indicates the presence of one or more rows in T that has entries in the one or more join key columns that together hash to the location of the bitmap entry. The method includes a) selecting a row in T, b) hashing the combined entries in the one or more join key columns of the selected row to identify a bitmap entry in S, c) if the identified bitmap entry in S is not set, identifying the selected row as a qualifying row, d) if the identified bitmap entry in S is set, finding one or more rows in T that have entries in its one or more join key columns that together hash to the location of the identified set bitmap entry in S, e) if none of the one or more found rows from T satisfy the join conditions, identifying the selected row from T as a qualifying row, f) repeating a)-e) until all of the rows in T have been selected, and f) providing the qualifying rows as an exclusion join result.","In general, in another aspect, the invention features a method for performing a join of at least a first table T and a second table T, where each of the tables has an associated Star Map, S and S, respectively. Each Star Map includes bitmap entries having locations indexed by the hash of one or more values associated with one or more join key columns of its associated table. A bitmap entry in a Star Map, if set, indicates the presence of one or more rows in its associated table that has entries in the one or more join key columns that together hash to the location of the bitmap entry. The method includes a) if the bitmap entry corresponding to the location in S identified by the hash of a NULL is set, probe T for a row having NULLs in its one or more join key columns, and if such a row is found, exiting the query with a \u201cno rows found\u201d message, b) otherwise if the bitmap entry corresponding to the location in S identified by the hash of a NULL is set, probe T for a row having NULLs in its one or more join key columns, and if such a row is found, exiting the query with a \u201cno rows found\u201d message; and c) otherwise perform the join operation.","Other features and advantages will become apparent from the description and claims that follow.","In the following description of the preferred embodiment, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Overview","The present invention uses a bitmap index structure, known as a Star Map, to improve the performance of large table exclusion joins that have low join cardinality, where cardinality is related to the number of rows in the join result. The database system uses hash-based addressing in the Star Map, so that the size of the Star Map is constant and therefore access times are constant. Moreover, access times are independent of the number of rows in the tables being joined, up to a preset limit, which can be altered by a systems administrator. As a result, the Star Map improves the performance of exclusion joins where two or more large tables are joined and the cardinality of the join is small (i.e., the join result has a small number of rows).","Environment",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","102","104","102","106","102","108"],"sub":["1..N","1..N ","1..M","1..N"]},"Operators of the computer system  typically use one of the workstations , a terminal, a computer, or another input device to interact with the computer system . This interaction generally comprises queries that conform to the Structured Query Language (SQL) standard, and invoke functions performed by a Relational DataBase Management System (RDBMS) executed by the system .","In one example, the RDBMS comprises the Teradata\u00ae product offered by NCR Corporation, the assignee of the present invention, and includes one or more Parallel Database Extensions (PDEs) . Parsing Engines (PEs) , and Access Module Processors (AMPs) . These components of the RDBMS perform the functions necessary to implement the RDBMS and SQL functions, i.e., definition, compilation, interpretation, optimization, database access control, database retrieval, and database update.","Generally, the PDEs PEs , and AMPs are tangibly embodied in and\/or accessible from a device, media, carrier, or signal, such as RAM, ROM, one or more of the DSUs , and\/or a remote system or device communicating with the computer system  via one or more of the DCUs . The PDEs , PEs , and AMPs each comprise logic and\/or data which, when executed, invoked, and\/or interpreted by the PUs of the computer system , cause the necessary steps or elements described below to be performed.","Those skilled in the art will recognize that the exemplary environment illustrated in  is not intended to limit the present invention. Indeed, those skilled in the art will recognize that other alternative environments may be used without departing from the scope of the present invention. In addition, it should be understood that the present invention may also apply to components other than those disclosed herein.","In an example system, work is divided among the PUs in the system  by spreading the storage of a partitioned relational database  managed by the RDBMS across multiple AMPs  and the DSUs (which are managed by the AMPs ). Thus, one of thee DSUs may store only a subset of rows that comprise a table in the partitioned database  and work is managed by the system  so that the task of operating on each subset of rows is performed by the AMPs managing the DSUs that store the subset of rows.","The PDEs provide a high speed, low latency, message-passing layer for use in communicating between the PEs and AMPs . Further, each of the PDEs is an application programming interface (API) that allows the RDBMS to operate under either the UNIX MP-RAS or WINDOWS NT operating systems, in that each of the PDEs isolates most of the operating system dependent functions from the RDBMS, and performs many operations such as shared memory management, message passing, and process or thread creation.","The PEs handle communications, session control, optimization and query plan generation and control, while the AMPs handle actual database table manipulation. The PEs  fully parallelize all functions among the AMPs . Both the PEs and AMPs are known as \u201cvirtual processors\u201d or \u201cvprocs\u201d.","The vproc concept is accomplished by executing multiple threads or processes in a PU , wherein each thread or process is encapsulated within a vproc. The vproc concept adds a level of abstraction between the multi-threading of a work unit and the physical layout of the parallel processing computer system . Moreover, when one of the PUs itself is comprised of a plurality of processors or nodes, the vproc concept provides for intra-node as well as the inter-node parallelism.","The vproc concept results in better system  availability without undue programming overhead. The vprocs also provide a degree of location transparency, in that vprocs communicate with each other using addresses that are vproc-specific, rather than node-specific. Further, vprocs facilitate redundancy by providing a level of isolation\/abstraction between the physical node  and the thread or process. The result is increased system  utilization and fault tolerance.","The system  does face the issue of how to divide a query or other unit of work into smaller sub-units, each of which can be assigned to one of the AMPs . In one example, data partitioning and repartitioning may be performed, in order to enhance parallel processing across multiple AMPs . For example, the database  may be hash partitioned, range partitioned, or not partitioned at all (i.e., locally processed).","Hash partitioning is a partitioning scheme in which a predefined hash function and map is used to assign records to AMPs , wherein the hashing function generates a hash \u201cbucket\u201d number and the hash bucket numbers are mapped to AMPs . Range partitioning is a partitioning scheme in which each of the AMPs manages the records falling within a range of values, wherein the entire data set is divided into as many ranges as there are AMPs . No partitioning means that a single one of the AMP manages all of the records.","Execution of SQL Queries",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2"},"Block  represents SQL statements being accepted by one of the PEs .","Block  represents the SQL statements being transformed by a Compiler or Interpreter subsystem of one of the PEs into an execution plan. Moreover, an Optimizer subsystem of one of the PEs may transform or optimize the execution plan in a manner described in more detail later in this specification.","Block  represents one of the PEs generating one or more \u201cstep messages\u201d from the execution plan, wherein each step message is assigned to one of the AMPs  that manages the desired records. As mentioned above, the rows of the tables in the database  may be partitioned or otherwise distributed among multiple AMPs , so that multiple AMPs can work at the same time on the data of a given table. If a request is for data in a single row, one of the PEs transmits the steps to one of the AMPs in which the data resides. If the request is for multiple rows, then the steps are forwarded to all participating AMPs . Since the tables in the database may be partitioned or distributed across the DSUs of the AMPs , the workload of performing the SQL query can be balanced among AMPs and DSUs .","Block  also represents one of the PEs sending the step messages to their assigned AMPs .","Block  represents one of the AMPs performing the required data manipulation associated with the step messages received from one of the PEs , and then transmitting appropriate responses back to one of the PEs .","Block  represents one of the PEs merging the responses that come from the AMPs .","Block  represents the output or result table being generated.","Exclusion-Join Operation",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","b":["300","305","300","305","300","305"],"i":["a ","a "]},"An exemplary SQL query for performing the exclusion-join operation shown in  would be the following:\n\n","In this example, the tables  and  are joined according to equivalence relations indicated in the query. It is the job of the Optimizer subsystem of one of the PEs at step  of , to select a least costly join plan.","In a join such as that illustrated in , there may be numerous unnecessary accesses to the tables  and  when performing the join operations. Consider one example using FIG. . Assume that each of the tables  and  has approximately 1 billion rows, and the join operation produces only 100,000 result rows. In this example, a large percentage of the accesses to the tables  and  are unnecessary.","Star Maps ,  associated with each table , , respectively, can be used to minimize unnecessary accesses to the tables , . The Star Maps ,  are bitmap index structures used to filter accesses to the tables  and , i.e., to determine whether join operations between rows of the tables  and  would be productive.","Star Map Structure","An example structure for a Star Map will now be discussed in relation to Star Map . It will be understood that this discussion will be equally applicable to the other Star Map  illustrated in FIG. . The example Star Map , which is associated with table , includes a plurality of rows , wherein each row includes a plurality of columns , as shown in FIG. . In one example, the Star Map  includes 64K rows , each of the rows  includes 64K columns , and each of the columns  comprises either a 1-bit or a 16-bit value. In one example, a bit in the 1-bit value having a value \u201c1\u201d, rather than \u201c0\u201d, is referred to as a \u201cset bitmap entry.\u201d When the number of rows  of the Star Map  is 64K and each row  has 64K columns , then the Star Map  can map approximately 232 or 4 billion rows in its associated table  when the column  comprises a 1-bit value or 236 or 64 billion rows in its associated table  when the column  comprises a 16-bit value.","The number of rows , the number of columns , the size of each column  value, and the hashing functions used are determined and fixed at Star Map creation time, depending on the cardinality of the table being represented. Of course, those skilled in the art will recognize that any number of rows , any number of columns , any size of column  value, and any number of different hashing functions could be used without departing from the scope of the present invention. Further, those skilled in the art will recognize that the Star Map  may take a form different from the form illustrated in , such as an ordered sequence of bits, bytes, or words, without departing from the scope of the present invention.","One or more join columns of the table  associated with the Star Map  are used to generate the column  values of the Star Map , wherein the join columns usually comprise a partition index or a primary index. With some additional enhancements, a secondary index of the table can be used. Depending on the structure of the data base and its indexes any other suitable index can be used. The primary index of the table is used in the following examples. In the example shown in , the join key columns and are used to generate the respective Star Maps  and , respectively.","The join key columns and can include more than one column from their respective tables. In one example, the table's  join columns are concatenated (if there is more than one join column) and then hashed to generate a 32-bit hash-row value. This 32-bit hash-row value is then used to address the Star Map . In one example, the upper 16 bits of the 32-bit hash-row value are used to select a row  of the Star Map  and the lower 16 bits of the 32-bit hash-row value are used to select a column  of the selected row  of the Star Map . The column  value indicates whether the corresponding row may exist in the table  associated with the Star Map . If the selected column  value is set, then the corresponding row might exist in the table ; otherwise, the row would not exist in the table .","A bitmap entry in a Star Map conveys two types of information. First, if the bitmap entry is set, a row that hashes to that location exists in the corresponding table but because a hashing algorithm may produce the same hash result for many different inputs, a set bitmap entry does a not definitively identify a row in the corresponding table. Just as importantly, if the bitmap entry is not set, the corresponding table does not have a row that hashes to that location. Thus, a Star Map not only gives clues about what a corresponding table contains, it also gives firm information concerning what it does not contain.","When the number of rows in the table  associated with the Star Map  is less than 4 billion, and when there is not significant skew in the join column values of its associated table, then each column  of the Star Map  may only comprise a 1-bit value to indicate whether the corresponding record exists in the table . However, when the number of rows in the table exceeds 4 billion, or when there is significant skew in the join columns of the table  associated with the Star Map, then additional bits may be added to each column  of the Star Map , so that a single column  can be used for multiple hash-row values of its associated table , in order to deal with hash collisions.","In one example, each column  within a row  of the Star Map  selected by the hash-row value of the table  associated with the Star Map  may comprise 16 bits. In that case, each hash-row value of the table  would select both a row  and a column  of the Star Map , and then another hash function would be performed on the join columns of the table  to select one of the bits within the selected column . If the selected bit is set, then the corresponding row might exist in the table ; otherwise, the row would not exist in the table . Of course, there would still be the possibility of hash collisions, even with the larger columns  of the Star Map .","The Star Map  is updated whenever changes are made to its associated table . For example, when a row is inserted into the associated table , a corresponding column  value in a corresponding row  of the Star Map  is set. Similarly, when a row is deleted from the table , a corresponding column  value in a corresponding row  of the Star Map  is reset, taking hash collisions into account. When a row is updated in the associated table , a column  value in a row  of the Star Map  corresponding to the new hash-row value and new column values are set, while a column  value in a row  of the Star Map  corresponding to the old hash-row value and column values are reset, while taking hash collisions into account.","The number of bits stored in each of the 64K columns  of the Star Map  is called the \u201cdegree\u201d of the Star Map  and determines the size of each row  in the Star Map . For example, a Star Map  of degree  has a row  length of 8 K bytes, while a Star Map  of degree  has a row  length of 128 K bytes. Generally, the degree of the Star Map  may be implemented as a parameter, so that the row size can be set to any desired value.","In the examples described above, the total size of the Star Map  is either 512 MB (a Star Map  of degree ) or 8192 MB (a Star Map  of degree ), respectively. The Star Map  may be partitioned across PUs  (for example, in a manner similar to the table) according to the upper 16 bits of the 32-bit hash-row value. Therefore, in a 20-node system , each PU  would store approximately 25 MB (a Star Map  of degree ) or 410 MB (a Star Map  of degree ) of a partitioned Star Map , respectively. Similarly, in a 96-node system, each PU  would manage approximately 5 MB (a Star Map  of degree ) or 85 MB (a Star Map  of degree ) of a partitioned Star Map , respectively. Partitions of these sizes may fit entirely within the main memory of the PUs .","Logic of the Join Algorithm","Star Maps can make the execution of joins involving a set of tables T through TN more efficient. Assume that each of the tables T through TN has an associated Star Map, S through SN, respectively. To perform a join, the system first performs one or more Boolean operations (such as a logical AND, OR, XOR, NAND, etc., or a combination of such operations) using the bitmap entries of two or more Star Maps to produce one or more intermediate Star Maps SINT, with the number of intermediate Star Maps depending on the complexity of the query, and in a final operation a final join Star Map SJ.","The system then uses SJ to select rows from the tables T through TN. For example, the system may use set bitmap entries in SJ as keys to select rows from T through TN. In one example, the hash value of the row or rows to be selected can be derived by concatenating the 16 bit Star Map row position and the 16 bit Star Map column position of a set bitmap entry to create a 32 bit hash value. Tables T through TN can then be searched for rows that produce that hash value. Depending on the hash algorithm, the search can result in the retrieval of more than one row from a given table or tables. However, reconstruction of a hash value in any kind of Star Map environment can be performed very easily. Alternatively, the system may use unset bitmap entries in SJ as keys.","The system joins the resulting rows to produce a join result. Under certain circumstances, determined by the query, the Boolean operation being performed, and other factors including the size of SJ and the size of the tables T through TN, such a system will access fewer rows in T through TN to perform the join, thereby reducing the cost of the query.","The use of Star Map to perform an exclusion join between two tables, T and T having Star Maps S and S, respectively, can be accomplished by deriving a join Star Map SJ using the following expression:\n\nSJ=S AND NOT (S)\u2003\u2003(1) \n","Through the use of DeMorgan's Law and other properties of Boolean arithmetic and algebra, this expression can be rephrased in a variety of ways, including:\n\nSJ=(S AND S)XOR S\u2003\u2003(2) \n\nSJ=(S OR S)XOR S\u2003\u2003(3) \n","Further, these same mathematical properties can be used to derive many other mathematical expressions to accomplish the same function.","In the processing of most of the expressions shown above, an intermediate Star Map, SINT, will be generated. For example, in expression (1), SINT is the inverse of S. In expression (2) and (3), (S AND S) and (S OR S), respectively, correspond to SINT. It is not always necessary to have an SINT. For example, expression (1) could be evaluated using an SBAR Star Map, which is the inverse of S, generated directly from T, without the necessity of deriving S.","One example way of evaluating expression (1), illustrated in , assumes that tables T and T have corresponding Star Maps S and S, respectively. The process begins by inverting S to form SINT. S and SINT are then logically ANDed to form SJ.","The right side of  illustrates this processing using two very simple  by 2 Star Maps, , and . The intermediate Star Map SINT  is created by inverting S. S and SINT  are logically ANDed to create the join Star Map SJ . It is assumed that the Star Maps have the same size and are created using the same hashing algorithm. In that case, ANDing the two Star Maps together requires applying a logical AND function to corresponding entries from the two Star Maps. An entry in the join Star Map is set only if the corresponding entries in S and SINT are set. The join Star Map  shows only a set single bit set because the corresponding row and column is the only location set to \u201cI\u201d in both source Star Maps  and .",{"@attributes":{"id":"p-0076","num":"0079"},"figref":"FIG. 6","b":["1","2","610","610","600","1","615","600","1","605","2"]},"As stated above, Boolean logic allows a variety of possible functions to be performed on the initial two Star Maps to generate the same result.  shows yet another example of how to achieve the same result as shown in  or FIG. . Instead of an AND operation, in this implementation, the two Star Maps  and  are logically ORed to generate the intermediate Star Map SINT . An Exclusive OR function is then performed on the Star Map S associated with T and the intermediate Star Map SINT  to generate the join Star Map SJ. Again, the right side of  shows an example of simplified  by 2 Star Maps  and  being processed to produce an intermediate Star Map  and a final Star Map .","Other implementations are possible, as can be seen by a person skilled in the art. Which implementation to use to perform the exclusion join Star Map might depend on the capabilities of the respective computer system, in particular, the respective central processing unit. However, in most systems two operation have to be performed on the initial Star Maps and the intermediate Star Map unless a respective central processing unit can perform two operations on an operand in a single cycle. Such a functionality may not be present in computer systems for data bases.","A person of ordinary skill will recognize that it is not necessary for S and S to be the same size, be created using the same hash function or have the same mapping of hash values. If any of those parameters or any other parameter or parameters of S and S are different, the system will make the necessary adjustments between the two Star Maps prior to performing the Boolean function or functions or as the Boolean function or functions are being performed assuming that two Star Maps are sufficiently similar to allow such adjustments to be made. Persons of ordinary skill will also recognize that the logical functions described above can be accomplished using other equivalent Boolean expressions, such as, for example, expressions equivalent to the specified logical function by virtue of DeMorgan's Law.","The exclusion join algorithm can also be applied to a plurality of tables. For example, a query might ask for rows in table group T\u2032 consisting of tables Ta..Ta where there are no matching rows in table group T\u2032 consisting of tables Ta . . . Ta. In this example, Star Maps S\u2032 consisting of Star Maps Sa . . . Sa associated with tables Ta . . . Ta are logically ORed, thus generating Star Map S. Star Maps S\u2032 consisting of Star Maps Sa . . . Sa associated with tables Ta . . . Ta are logically ORed, thus generating Star Map S. The resulting two Star Maps S and S are then processed as described above.","The final resulting exclusion join Star Map SJ contains bitmap entries, which, when set, indicate that T contains rows that hash to the location of the set bitmap entry in the Star Map SJ and that T does not contain such a row. Consequently, the rows in T that hash to that location contribute to the join result. In contrast, if a bitmap entry in the Star Map SJ is not set then (1) T does not contain any rows that hash to the location of that bitmap entry in the Star Map SJ; (2) T does contain such a row; or (3) both conditions (1) and (2) are true. Consequently, T rows that map to locations of unset bitmap entries in SJ may not contribute to the join result. To make a final determination, T is searched for a row that not only maps to the location of the unset bitmap entry but also has a value in its join key column or columns that matches the value in the join key column or columns of the selected row from T. If no such row is found in T, then the selected T row contributes to the join result.","Processing of the exclusion join using a join Star Map prepared using one of expressions (1), (2) or (3), or equivalents, and the processing illustrated in ,  and , or equivalents, begins by probing S with the hash value of NULL (block ), as shown in FIG. . If the corresponding bitmap entry is set, then T is probed for a row with a PI value of NULL, where PI can indicate a primary index, a partition index, or some other index. If such a row exists (block ), the query exits with a \u201cno rows found\u201d message (block ).","Otherwise, the same process is then performed on S and T. S is probed with the hash value of NULL (block ). If the corresponding bitmap entry is set, then T is probed for a row with a PI value of NULL. If such a row exists (block ), the query exits with a \u201cno row found\u201d message (block ).","Otherwise, the join Star Map SJ is generated by performing one or more Boolean operations on S and S, using, expressions (1), (2), or (3), or equivalents, and the processing shown in ,  or , or equivalents (block ). There are situations in which it is more efficient to use traditional join processing to accomplish the exclusion join than it would be to use SJ. For example, if both T and T are large tables and the number of unset bitmap entries in SJ is large, it is likely that the savings provided by using SJ will be offset by the number of accesses necessary to T. To avoid such inefficiencies, if the number of unset bitmap entries in SJ is greater than a threshold (block ), traditional exclusion join processing is executed (block ). In one example, the threshold is set to the number of blocks necessary to store the rows of T. In another example, the threshold is set to a percentage, seventy-five percent, for example, of the number of blocks necessary to store T. In still another example, the threshold is related to the number of rows and number of blocks in T. It will be recognized by persons of ordinary skill that the threshold could be set to other values without departing from the scope of the claims herein. Further, the expected cardinality of the join may be tested against a cardinality threshold to determine whether to perform traditional join processing. If the expected join cardinality is greater than a cardinality threshold, traditional join processing would be performed.","Otherwise, if the number of unset bitmap entries is less than the threshold, S is used to perform the exclusion join, as illustrated in FIG. .","The system will enter into a loop in which it retrieves the next row from T, which will be the first row, if any, the first time through the loop, and uses the value of the join key column or columns from the retrieved row to probe SJ (block ). In one example, the values of the join key column or columns are hashed to produce a hash result that can be parsed to index into SJ as described above. If the probe into SJ produces a hit, that is if the corresponding bitmap entry in SJ is set (block ), then the selected T row satisfies the query, because no row in T has values in its join key column or columns that match the value in the join key column or columns of the selected T row, and the system will project the selected T row as a query result (block ). Subsequently, if there are more rows in T (block ), the system will return to the beginning of the loop (block ), retrieve the next row from T, and continue processing.","If, on the other hand, the probe into SJ does not produce a hit (block ) it is still necessary to probe T to determine whether the row in T that caused the probed bitmap entry in S not to be set disqualifies the row from T. The system will probe T searching for hits, that is, T rows in which the value of the join key column or columns map (e.g. hash) to the location of the unset bitmap entry in SJ, and in which the value of the join key column or columns from the selected T row match the value of the join key column or columns from T (block ). If there is a hit (block ), that is if any row from T matches the selected T row in the join key column or columns, the selected T row will not be projected because it does not satisfy the exclusion join condition. The system will determine if there are any more qualifying rows in T (block ) and if there are, it will return to the beginning of the loop. Otherwise, the processing will end (block ).","If the probe into T (block ) does not produce a hit (block ), the exclusion join condition has been satisfied and the system will report the selected T row as a query result (block ). The system will then determine if any further rows from T remain to be processed (block ). If there are more rows to process, the system will return to the beginning of the loop. Otherwise, the processing ends (block ).","It will be understood by persons of ordinary skill in the art that the threshold against which the number of entries in the join Star Map is tested can be adjusted from one exclusion join to the next or during the exclusion join process. The adjustment may be done manually or it may be done automatically based on a dynamic algorithm that analyzes the relationship between cost of exclusion joins and the threshold.","The preceding algorithm could be applied if the outer table in the join, T in the example, is a spool or a base table without a Star Map. The outer table could be redistributed on the join column or columns or it could be duplicated. The inner table, T in the example, would have a Star Map S on the partition column and the join column and the partition columns should be the same. In that case, rows from T would be read and used to probe S rather than SJ. Otherwise, the processing would be similar.","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the same invention. In one alternative embodiment, any type of computer, such as a mainframe, minicomputer, or personal computer, could be used to implement the present invention. In addition, any DBMS that performs exclusion joins could benefit from the present invention.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 8 and 9"}]},"DETDESC":[{},{}]}
