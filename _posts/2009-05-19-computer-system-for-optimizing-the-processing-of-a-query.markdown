---
title: Computer system for optimizing the processing of a query
abstract: A computer system including a database having a database table for storing records including first columns for storing data values, and at least one second column for storing keys identifying records stored in the database. The computer system also including a set of index tables with each having assigned thereto an index table identifier, an arrangement for receiving a query an arrangement for storing a predefined ordered sequence of index table identifiers, and an arrangement for processing the query by checking each one of the index tables for being relevant for the execution of the query, storing the index table identifier for each relevant index table in a query execution table, sorting the query execution table in accordance with the predefined ordered sequence, and executing the query using the index tables identified in the query execution table in the order given by the sorting of the query execution table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09177019&OS=09177019&RS=09177019
owner: SAP SE
number: 09177019
owner_city: Walldorf
owner_country: DE
publication_date: 20090519
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND AND RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to the field of data processing, and more particularly to a computer system for processing a database query.","A database typically consists of one or more database tables for storing data values. Records that are stored in the database can be accessed using a key. In order to increase the speed of reading a desired record from a database table the use of index tables is as such known. An index table relates data values of at least one data field of the database table to keys of records that contain a given data value for that data field. For execution of a query specifying a certain data value or range of data values for one of the data fields the respective index table is thus used in order to look up the keys of records that correspond to the specified search criterion. Once the access keys have been obtained from the index table the respective records can be read instantaneously from the database.","The present invention provides for a computer system comprising a database having a database table for storing records comprising data values, the database table having first columns for storing the data values, each one of the first columns being assigned to a data field of a set of predefined data fields, and at least one second column for storing keys, each key identifying one of the records stored in the database, and a set of index tables, each index table being assigned to one of the data fields and having assigned thereto an index table identifier, means for receiving a query, the query specifying the subset of the set of data fields and a search range for each specified data field, means for storing a predefined ordered sequence of index table identifiers, means for processing the query by checking each one of the index tables for being relevant for the execution of the query, one of the index tables being relevant if the one of the index tables is assigned to one of the specified data fields, storing the index table identifier for each relevant index table in a query execution table, sorting the query execution table in accordance with the predefined ordered sequence, executing the query using the index tables identified in the query execution table in the order given by the sorting of the query execution table.","Embodiments of the invention are particularly advantageous as the index tables that are relevant for the execution of a query are first identified and then sorted in accordance with a predefined ordered sequence. A sorted query execution table is generated that contains the index table identifiers of the relevant index tables. The query is then executed by sequentially using the index tables in the order given by the sorted query execution table. It is to be noted that the term \u201cindex table\u201d as used herein does also encompass equivalent data sources.","In accordance with an embodiment of the invention, the ordered sequence of index table identifiers can be updated in order to reflect the actual status of the database and in particular the actual sizes of the various index tables. The updating operation for updating the ordered sequence can be performed by a query optimization means that determines the actual sizes of all index tables and sorts the index tables by size. As a result, an updated ordered sequence of index table identifiers is obtained and used for consecutive queries until the next updating operation occurs.","In accordance with an embodiment of the invention, the ordered sequence of index table identifiers is updated at regular or irregular time intervals. For example, the query optimization means is invoked at pre-programmed points of time when the load of the database is usually low, such as during the night. This way a negative impact on the execution of the updating operation on the database response time is avoided. Alternatively or in addition the time intervals after which an updating operation is executed can be determined dynamically, such as by monitoring the database load. When the database load is high this typically implies that the sizes of the index tables vary with a relatively high frequency. The time intervals between update operations are chosen inversely proportional to the database load in order to reflect the changed index table sizes in the predefined ordered sequence used for sorting relevant index tables for the execution of queries. The database load can be measured such as by the average write access operations to the database per time unit. This is particularly advantageous as a write access to the database typically implies that one or more of the index tables receives an additional entry and thus changes its size.","In accordance with an embodiment of the invention the means for receiving are adapted to receive a data structure as part of the query, the data structure containing data field names of at least some of the specified data fields, a search range for each one of the data field names and a Boolean term specifying a relation between the data field names, and further comprising means for transforming the data structure into a character string, wherein the means for processing the query are operable to use the character string for execution of the query.","Embodiments of the invention are particularly advantageous as the specification of the query by means of a data structure provides a high degree of flexibility to the user, such as to include non-standard data fields into the query. In particular, the database can be customized by adding one or more custom data fields without a requirement of modifying the computer program. This is accomplished by parsing the data structure and transforming the data structure into a character string which is then used as an argument for the execution of a database select command. By execution of the select command the database is searched for records that match the query specified in the character string.","In accordance with an embodiment of the invention, a mapping table is received as part of the query from the user interface. The mapping table specifies a mapping of a result returned by the query to one or more elements of the user interface. This is particularly beneficial if there is not a one-to-one relationship between the data output fields of the user interface and the data fields of the database. The mapping table can specify how data values returned by the query for specified ones of the data fields are mapped onto one or more output fields of the user interface providing utmost flexibility regarding the design of the user interface. This has the further advantage of executing the mapping on the side of the database and not by the client computer that runs the user interface further reducing the latency time experienced by the user for the execution of the query.","In accordance with embodiments of the invention the set of database hits that results from execution of the query is further narrowed down before a result is returned. For example, one or more criteria are provided by the user interface together with the query. The set of hits returned from the database in response to the query is filtered using the one or more criteria in order to return only those hits that fulfill the one or more criteria.","In accordance with an embodiment of the invention, the computer system is an enterprise resource planning (ERP) system. Each record of the database can constitute a document, such as a posting document.","Embodiments of the present invention are particularly advantageous as a flexible application programming interface (API) is provided that enables the execution of queries with minimal response time while allowing to include custom data fields into the query without having to modify the programming. In particular the set of data fields that can serve as possible selection criteria is not hard coded by can be extended on-the-fly.","Furthermore, a desired maximum number of hits can be specified in the query. When this maximum number of hits has been reached during the execution of the query, the execution is interrupted and the internal state of the database search execution at this point is stored temporarily. The results are returned to the requesting user interface. When the user wants to view more results a respective command is sent from the user interface to the computer system such that execution of the query is resumed in order to provide more hits to the user.","In the following like elements are designated by identical reference numerals throughout the various embodiments.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","102","104","106","100","120","108","100","110","108","110","112","114"]},"In the embodiment considered here the database table  has a number of I+1 columns for a number of I data fields i, where 1\u2266i\u2266I. In addition, the database table  has one column for storing keys. Each row of the database table  constitutes a record and the key that is stored in that row can be used to read the respective record from the database table . The database table  can be stored in the random access memory  or in the mass storage , as it is shown in the embodiment of . Typically the database table  is stored in the mass storage  due to its size.","Each one of the index tables  is assigned to one of the data fields i. One of the index tables  that is assigned to one of the data fields i is designated as index table i in the following.","The index table i has a column for storing data values of the data field i that occur in at least one of the various records of the database table  and an additional column for storing the keys of records having that data value in the data field i. Hence, for retrieving all records from the database table  having a specified data value in their data field i it is not necessary to search the database table  but to directly read the respective keys of the records that fulfill this criterion from the index table i for quick access. An index table i may exist for some or all of the data fields i. The index tables  are preferably stored in the random access memory  in order to further reduce the latency time experienced by a user.","Further, a query execution table  is stored in the random access memory . The query execution table is initially empty and it serves to receive index table identifiers in order to provide a query execution plan when a query is to be executed. The query execution table  can be sorted in accordance with a predetermined ordered sequence  of index table identifiers for optimization of the query execution plan specified by the query execution table .","The server computer  has at least one processor  for execution of program modules , , ,  and .","The program module  serves to identify a subset of the index tables  that is relevant for execution of a query  received via the network  from the client computer . This determination is performed by the program module  such as by calling a method that returns the names of all available index tables . Each one of these index tables  is checked whether it is assigned to one of the data fields specified in the query . Those index tables that are assigned to a data field that is contained in the query  are by definition relevant for execution of the query . An identifier for each one of the relevant index tables is put into the query execution table  by the program module . This identifier can be the index i or another index table name.","The program module  serves to sort the query execution table  in accordance with the ordered sequence  for optimization of the query execution plan specified by the query execution table .","The program module  serves to determine the ordered sequence . For example, a standard ordered sequence  is stored when the server computer  is initialized, such as during a so called built-time. This standard ordered sequence  can be adapted to the actual status of the server computer  and in particular to the size distribution of its index tables  by means of the program module .","The program module  determines the sizes of all index tables  and sorts the index tables  by size. The program module  outputs an updated ordered sequence  that contains the identifiers of the index tables  in the order given by the sorting and overrides the previous ordered sequence  in the random access memory  to complete the updating operation. The program module  can be started in order to perform such an update operation at predefined, regular or irregular points of time depending on the implementation. For example, the program module  can be started automatically outside regular business hours in order to execute the updating operation without negatively impacting the response time experienced by the users.","In one embodiment, the processor  serves for execution of a program module  that determines the load of the database. The load can be determined by calculating the average number of database operations, such as database write operations, within a given time period. If the load is high the frequency of the updating operations is increased as the sizes of the index tables  changes more quickly when the load is high. Hence, the duration of the time intervals between the updating operations is chosen by the program module  inversely proportionally to the determined load. The program module  can invoke the program module  to perform the updating operations in accordance with the updating schedule determined by the program module  in accordance with the determined load.","The client computer  has a user interface program  that serves to enter the query  and to receive the results returned in response to the query  by the server computer , such as a hit list of the records that have been identified by execution of the query .","In operation, the server computer  receives the query  via the network  by the network interface . This invokes the program module . The program module  determines the data fields that are specified in the query and identifies the relevant index tables that are assigned to one of the data fields specified in the query .","The resultant query execution table  is then sorted by execution of the program module  that uses the ordered sequence  for performing the sorting operation. Next, the program module  is executed for executing the query  using the sorted query execution table . In other words, the query  is executed by the program module  by accessing the index tables identified in the query execution table  in the order given by the query execution table . After execution of the query  a result containing the hit list of the records that match the query  is returned from the server computer  to the client computer  via the network .","The query  specifies at least one, a plurality or all of the data fields i and a search range for each one of the specified data fields. The search range can be an individual value, alternative values or a continuum of values a given data field i needs to have in order to produce a database hit. The various data fields specified in the query  can be related by logical operators in order to form a Boolean term.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["116","116","116","122","132","124","116","118","116","118","116","116","132"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["200","132","100","202","100","204","116","204","116"]},"In step  the query execution table  is sorted in accordance with the predetermined ordered sequence . This provides the sorted query execution table \u2032.","Next, in step , the query  is executed using the sorted query execution table \u2032 by using the relevant index tables identified in the query execution table \u2032 in the order specified by the query execution table \u2032. In step  the query result is returned by the server computer  to the client computer  in response to the query  such that the query result can be displayed on the user interface .","In the embodiment of  the program module  has a component  containing executable instructions for processing the query  as far as standard data fields are concerned and a component  for processing the query  as far as non-standard, custom data fields are concerned. Such custom data fields can be added by the customer to the database in accordance with the customer's needs","The query  can contain a data structure  that specifies a portion of the query being constituted by custom data fields. The data structure  specifies the custom data fields to be included in the query, a range for each one of the custom data fields to be included in the query  and logical operators relating the individual custom data fields to form a Boolean term.","The program module  transforms the portion of the query contained in the structure  into a string. That string is put into a select command of program module  to serve as an argument for execution of the select command returning a set of hits matching the portion of the query specified by the string. Another portion of the query that is composed of standard data fields is executed by the component  and returns another set of hits. The set of hits returned by the component  and by the component  are combined in accordance with the query  to provide the final hit list that is returned as a result.","Further, the query  can contain a mapping table  that specifies a mapping of one or more of the data fields i to one or more of the output fields contained in the user interface . The mapping can encompass reformatting of the data values contained in these data fields and\/or another kind of transformation.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"List of Reference Numerals"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100","Server computer"]},{"entry":["102","Network interface"]},{"entry":["104","Client computer"]},{"entry":["106","Network"]},{"entry":["108","Random access memory"]},{"entry":["110","Mass storage"]},{"entry":["112","Database table"]},{"entry":["114","Index tables"]},{"entry":["116","Query execution table"]},{"entry":["118","Ordered sequence"]},{"entry":["120","Processor"]},{"entry":["122","Program module"]},{"entry":["124","Program module"]},{"entry":["126","Program module"]},{"entry":["128","Program module"]},{"entry":["130","Program module"]},{"entry":["132","Query"]},{"entry":["134","User interface"]},{"entry":["136","Data structure"]},{"entry":["138","Component"]},{"entry":["140","Component"]},{"entry":["142","Mapping table"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the following embodiments of the invention are described by way of example only making reference to the drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
