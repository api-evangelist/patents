---
title: Communication mechanism between disconnected applications in a web browser
abstract: A method, apparatus, and article of manufacture provide the ability to enable communication between disconnected applications in a computer system. A bridge object is created in a secondary application. Further, an interface for the bridge object enables communication with the secondary application through the bridge object. The interface for the bridge object is registered in a global interface table (GIT). A cookie is retrieved from the GIT in response to the registration. Such a cookie comprises information for utilizing the interface for the bridge object. The cookie is then stored in an environment variable. The environment variable is accessible to a disconnected application (e.g., ActiveX control) such that the cookie may be retrieved to enable use of the interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08024745&OS=08024745&RS=08024745
owner: Autodesk, Inc.
number: 08024745
owner_city: San Rafael
owner_country: US
publication_date: 20030626
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CONCLUSION"],"p":["This application claims the benefit under 35 U.S.C. Section 119(e) of the following co-pending and commonly-assigned U.S. provisional patent application(s), which is\/are incorporated by reference herein:\n\n","1. Field of the Invention","The present invention relates generally to the communication between computer applications, and in particular, to a method, apparatus, and article of manufacture for communicating between disconnected applications in a web browser.","2. Description of the Related Art","Typically, when ACTIVEX\u2122 (hereinafter ActiveX) controls are used within an HTML (hypertext markup language) page, there is a single \u201ccontrolling\u201d application. For example, the web browser displaying the HTML page may be the application that \u201ccontrols\u201d the use of an ActiveX control. However, there may be a need for an ActiveX control to communicate with another application (referred to as a second application) to perform tasks. However, the \u201ccontrolling\u201d application may be completely (and intentionally) disconnected from the second application. Accordingly, what is needed is a mechanism that allows and provides the ability for an ActiveX control within a \u201ccontrolling\u201d application to communicate with an external second application. The problems in the prior art may be better understood by describing ActiveX controls and prior art applications that utilize ActiveX controls.","ActiveX controls are software modules based on Microsoft's\u2122 Component Object Model (COM) architecture. The COM architecture allows a \u201ccontrolling\u201d program (such as a web browser) to add functionality by calling a component (i.e., an ActiveX control) that intermingles with and appears as a standard part of the \u201ccontrolling\u201d program. For example, user interface functions, such as a toolbar, may be added, or a web page may be turned into a software page that can perform similar to other programs launched from a server.","As described above, an ActiveX control may need to communicate with an application other than the control's controlling application. An example of such a desire to communicate exists in the STREAMLINE\u2122 (hereinafter Streamline) product on a PROJECTPOINT\u2122 (hereinafter ProjectPoint) platform, both of which are available from the assignee of the present invention. Streamline is a hosted online collaboration service for the manufacturing industry. Using Streamline, users of an entire design chain may communicate with each other and access digital design information. The Streamline product executes on the ProjectPoint platform (also referred to as the Buzzsaw\u2122 platform). ProjectPoint is a secure, online collaboration and project management service that keeps project teams connected and allows the storage, management, and sharing of project documents from any Internet connection.","ActiveX controls in Streamline (referred to as \u201cclient controls\u201d) may need to communicate with the ProjectPoint application to perform tasks such as uploading a markup file to the project hosting environment. However, the two applications (i.e., Streamline and ProjectPoint) are intentionally completely disconnected from each other. In this regard, ProjectPoint does not know that the Streamline controls have been created, and the Streamline controls do not know that they are being used within the ProjectPoint environment.","A further problem with the prior art exits if multiple programs are dependent on each other for desired operations. With such dependency, one program may have an ActiveX control that utilizes a service\/attribute of a second application. For example, a Streamline client control hosted in a particular environment may be able to save a file (e.g., a markup file) to a server. In this example, the Streamline code that enables such behavior may be specific to the particular environment.","However, if the second application or particular environment is changed, the ActiveX control may not be able to execute properly. Continuing with the example above, if the particular environment is replaced (e.g., with ProjectPoint), the new environment may not allow a readily accessible interface for the desired behaviors (e.g., to save the markup file to the server). Accordingly, the Streamline client controls may not properly execute in a new environment.","To address this gap in functionality, a general purpose mechanism for communication between a project hosting environment (e.g., ProjectPoint) and ActiveX controls (e.g., Streamline client controls) (within an HTML, page) is needed.","One or more embodiments of the invention enable communication between two disconnected applications (referred to as a secondary application and disconnected\/controlling application) (e.g., between a project hosting environment\/application and ActiveX controls within a web page). To enable such communication, an object that acts as a bridge between the applications is established\/created on\/by one application.","The bridge is accessed using an interface or interface object. To enable use of the interface, the bridge object (or the interface for the bridge object) is registered in a global interface table (GIT). The GIT is a process-wide repository of interfaces\/interface pointers.","When the interface is registered in the GIT, the GIT returns a cookie that identifies the pointer and location of the interface. However, to enable access to the cookie (and the interface), the cookie must be easily available to a disconnected\/controlling application. Accordingly, the cookie is stored in an environment variable.","When the disconnected application desires to communicate with the secondary application, the disconnected application accesses the environment variable to retrieve the cookie. The cookie is then used to retrieve the pointer to the interface. The interface may then be used to communicate with the secondary application through the bridge object.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Overview","To allow disconnected applications (e.g., ActiveX controls and secondary applications) to communicate with each other while still maintaining their independence, one or more embodiments of the invention provide a \u201cClient Host Bridge\u201d. The bridge is utilized to provide a disconnected application with access to a secondary application. To utilize the bridge, an interface to the bridge is placed in a Global Interface Table (GIT). A cookie that supports retrieval of the interface is placed in an environment variable for the use and retrieval by the desired application.","Hardware Environment",{"@attributes":{"id":"p-0025","num":"0025"},"figref":"FIG. 1","b":["100","102","104","106","102","104","106","104","106","118"]},"A network  such as the Internet connects clients  to server computers . Clients  may execute a client application or Web browser  and communicate with server computers  executing Web servers . Such a Web browser  is typically a program such as NETSCAPE NAVIGATOR\u2122 or MICROSOFT INTERNET EXPLORER\u2122. Further, the software executing on clients  may be downloaded from server computer  to client computers  and installed as a plug in or ActiveX control of a Web browser . Accordingly, clients  may utilize ActiveX components\/component object model (COM) or distributed COM (DCOM) components to provide a user interface on a display of client . The Web server  is typically a program such as Microsoft's Internet Information Server.","Web server  may host an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application , which may be executing scripts. The scripts invoke objects that execute business logic (referred to as business objects). The business objects then manipulate data in database  through a database management system (DBMS) . Alternatively, database  may be part of or connected directly to client  instead of communicating\/obtaining the information from database  across network . When a developer encapsulates the business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on web server  (and\/or application ) invoke COM objects that implement the business logic. Further, server  may utilize Microsoft's Transaction Server (MTS) to access required data stored in database  via an interface such as ADO (Active Data Objects), OLE DB (Object Linking and Embedding DataBase), or ODBC (Open DataBase Connectivity).","Generally, these components - all comprise logic and\/or data that is embodied in or retrievable from device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer via a network or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Thus, embodiments of the invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass logic and\/or data accessible from any computer-readable device, carrier, or media.","Those skilled in the art will recognize many modifications may be made to this exemplary environment without departing from the scope of the present invention. For example, those skilled in the art will recognize that any combination of the above components, or any number of different components, including different logic, data, different peripherals, and different devices, may be used to implement the present invention, so long as similar functions are performed thereby.","Software Embodiments","As described above, a disconnected application (such as an ActiveX control) may desire to communicate with a secondary application (such as a hosting environment) via a COM-based interface or interfaces. For example,  illustrates a secondary application  (such as a hosting environment\u2014e.g., ProjectPoint) that has created a web browser (e.g., INTERNET EXPLORER\u2122) control  (also referred to as a controlling application ) to host an HTML (hyper text markup language) page . The HTML page  provides a disconnected application . In this regard, the HTML page  may instantiate ActiveX controls (e.g., Streamline client controls) in accordance with one or more embodiments of the invention. In view of , the issue is how to get a COM-based interface from the secondary application  to the disconnected application . As a side issue, it may be preferable for the disconnected application  to be \u201cblissfully ignorant\u201d of the secondary application . Such ignorance would provide the ability to host the disconnected application  in other (future) environments\/applications  without the need for substantial additional programming or coding rework. For example, a secondary application  may comprise a \u201cstand alone viewer\u201d that hosts the ActiveX controls.","To enable such communication, various user and technical desires may be satisfied. However, such desires may not exist or be satisfied in various embodiments. For example, a user may desire the ability to save markup files (e.g., from an ActiveX control) to the secondary application  (e.g., a project hosting environment). Further, a visible representation of the markup files may exist in a graphical user interface of the secondary application  (e.g., in a \u201cmarkup\u201d tab of a ProjectPoint environment). Another desire may relate to status\/error messages in the secondary application . For example, disconnected applications  and\/or clients  may desire to report errors\/status to the secondary application . In this regard, the secondary application  may handle a display of issues to be resolved.","An example of a technical desire includes providing an application programming interface (API) to ActiveX controls. In this regard, a secondary application  may deliver a COM-based interface to ActiveX controls that can be used for communication between the ActiveX controls and the secondary application .","Various approaches may be utilized to satisfy such desires and enable communication between disconnected applications  and secondary application . Detailed descriptions of some of these approaches follow.","Historical (eRoom\u2122) Approach","An example of a particular secondary application \/project hosting environment that hosts ActiveX controls is EROOM\u2122 (hereinafter eRoom) (an environment available from eRoom Technology, Inc. of Cambridge Mass.). In the eRoom environment, ActiveX controls are able to save a markup file to a server.","Using an eRoom environment, a web page (e.g., HTML page ) may be created on-the-fly by an eRoom application. In this regard, the eRoom application may instantiate an ActiveX control representing a document (non-visible) such as a web page  (such an ActiveX control is referred to as a document control) and one or more ActiveX controls which are views of the document (referred to as view controls). Such document controls and view controls may be embedded in an IFRAME element\/object (an HTML element that defines an inline frame for including external objects) of an HTML page . The IFRAME element may also comprise an object with appropriate methods and properties. An IFRAME element functions as a document within a document, or like a floating frame.","A URL (as a property) may be provided to the document control by the hosting environment  (for later use). The user may then invoke a \u201csave markup\u201d operation. In response, the document control saves a simple markup file (i.e., image with no markup entities) to a local disk.","Thereafter, it is desirable to access and control the documents and markups in a window. Each IFRAME object\/element may correspond to an open window in a browser . While various functionality\/properties may be controlled through the IFRAME object, each particular open window (e.g., a window object) may not be controlled through the IFRAME object. In this regard, an interface may provide access to each window object. Such an interface may be referred to as the IHTML Window2 interface. Since the document control knows that it is embedded in an IFRAME element, the document control uses a method of the IFRAME object to perform a query for the appropriate IHTMLWindow2 interface to control the window.","Once the IHTML Window2 interface is obtained, the document control may call the navigate method (i.e., navigate (URL)) of the interface. The navigate method loads the specified URL to the current window. In this regard, the specified URL may comprise the URL supplied by the hosting environment above. In addition, the name of the saved markup file may be appended to the URL (e.g., \u201cFilename=<localMarkupFile>\u201d). The navigate method invokes a new web page showing a markup view control and the contents of the simple markup file saves described above.","Inside the markup view control, the end-user may redline and markup the document as desired. Also within the markup view control, the end-user may invoke the markup view control's save functionality that uses the same \u201cURL provided to document\u201d methodology described above. The actual markups (in the form of a markup file) may then be physically uploaded to the eRoom hosting environment via an HTTP POST request. On upload, the eRoom hosting environment may create an eRoom ID for the uploaded file. The IFRAME object is then used with a URL to navigate to a page that relates the markup file with the newly created eRoom ID.","Thus, as described above, the eRoom environment may be used to save a markup file (created using an ActiveX control) to a server. However, additional communication between an ActiveX control and the hosting environment may be desirable. Further, in such an approach, knowledge of the implementation details may be required for development purposes.","Alternatives to the above historical approach may exist. In this regard, one or more embodiments of the invention solve the problem of the prior art while isolating developers from implementation details.","Backing Up the Window (HWND) Hierarchy Approach",{"@attributes":{"id":"p-0043","num":"0043"},"figref":"FIG. 3","b":["202","206","208","202","302"]},"The WPB object  acts as the bridge between an ActiveX control within a document (e.g., the HTML page ) and the secondary application . An interface enables a disconnected application  to communicate with the WPB. Accordingly, the secondary application  may also create the interface  (referred to as the IClientHost Interface) in the document\/HTML page  (e.g., using an <OBJECT> tag).","When the WPB is instantiated, the WPB \u201cbacks up\u201d through its window hierarchy to find the appropriate window (e.g., the WPB obtains the appropriate window handle  by examining and traversing through the window hierarchy). A variety of methods may be utilized to find the \u201ccorrect\u201d\/\u201cappropriate\u201d window (e.g., three parents up, a property on the window handle, etc.). Upon finding the appropriate window\/window handle , communication between the WPB  and secondary application  may be enabled using various windows application programming interface (API) commands (e.g., via SendMessage ( . . . ) commands). However, communication between the client document\/HTML page  and the WPB  may be performed via the IClientHost interface , thereby isolating clients\/client documents  from the specifics of how communication with the secondary application  is accomplished.","Global Interface Table Approach","To allow disconnected applications  to communicate with each other while still maintaining their independence, one or more embodiments of the invention provide and utilize a \u201cClient Host Bridge\u201d (referred to hereafter as \u201cbridge\u201d) as illustrated in . This bridge  may be a COM (Component Object Model) object created by a secondary application  (such as project hosting environment\u2014e.g., ProjectPoint) during its initialization phase.","The methods and properties of the bridge object  are accessed using an interface (referred to as an interface to client host bridge ). Once the bridge object  has been created, the secondary application  registers the interface  with a Global Interface Table (GIT)  by placing a pointer to the interface in the GIT .","Globally registered interfaces can be retrieved and used by other software components within the same address space where registration occurs. In this regard, the GIT  is a process-wide repository that maintains\/stores interface pointers. The GIT  can be accessed from multiple apartments (COM objects in a process may be divided into groups referred to as apartments) within a process. As described herein, a process may comprise a collection of virtual memory space, code, data, and\/or system resources. Accordingly, the GIT  is a repository (accessible across an entire process) that allows an apartment in a process access to an interface implemented on an object in any other apartment in the process.","The secondary application  and disconnected applications  are executing within the same process but in different apartments. Since they are executing within the same process, the GIT  is accessible by both the secondary application  and the disconnected applications .","The placement of the pointer to the interface  for the bridge object  in the GIT  is indicated as box  of . Once the interface  is placed in the GIT , the GIT  returns a \u201ccookie\u201d (box ) that can be later used to retrieve the interface  from the GIT . The cookie is data created by the GIT  that may identify the interface  pointer and its location. The cookie is then placed in an environment variable . As used herein, an environment variable  is an item of data that is updated by the operating system, web server or other control program. Further, the environment variable  resides in memory and can be read by applications. Once the cookie is placed in the environment variable , the bridge  setup is complete.","When a disconnected application  desires to communicate back to the secondary application , the disconnected application  retrieves the environment variable  and extracts the cookie. This cookie is then used to retrieve the pointer to the bridge interface  from the GIT  (i.e., illustrated as boxes  and  of ). With the pointer, the disconnected application  can access and utilize the interface to communicate back to the secondary application .","Thus, as described above, prior to creating a web page , the secondary application  creates a client host bridge  and registers an interface for the bridge  in the global interface table . The resulting cookie is then stored in an environment variable . When the web page  and\/or disconnected application  (e.g., containing ActiveX controls) is created, the disconnected application  retrieves the cookie from the environment variable . The cookie may then be used to obtain, retrieve, or create an interface object  that the disconnected application  may use to interact with the secondary application . Accordingly, the cookie may be retrieved (and used to create the interface ) at construction time, and may not be passed through the hosting HTML page . However, alternative retrieval times may also be within the scope of the present invention.","Additionally, since the interface  is used to communicate with the secondary application , clients such as the disconnected application  (e.g., ActiveX controls) are isolated from the specifics of how communication with the secondary application  is accomplished.",{"@attributes":{"id":"p-0054","num":"0054"},"figref":"FIG. 5","b":["406","500","402","202","402","404","402","202","202"]},"At step , the bridge  (or an interface to the bridge) may be registered in the GIT . Such a registration may comprise placing a pointer to the location of the interface  for the bridge  in the GIT . In response to the registration, a cookie is returned by the GIT . The cookie comprises information for utilizing the interface  for the bridge object . In this regard, the cookie may identify the pointer and a location of the interface . At step , the cookie is stored in an environment variable . At step , a disconnected application  (e.g., ActiveX controls) may be created (e.g., within in an HTML page ).","To facilitate communication between the disconnected application  and the secondary application , the cookie is retrieved\/extracted from the environment variable  at step . At step , the cookie is used to enable use of the interface  for the bridge object . In this regard, the cookie may be used by the disconnected application  to create\/retrieve the interface  to the bridge  (e.g., an interface object  is obtained). Once the interface  has been obtained, the disconnected application  may communicate with the secondary application  through the bridge  and interface  at step .","Example Communication Using the Global Interface Table","In accordance with the above description, any type and flow of communication may occur between a disconnected application  and the secondary application . In this regard, different operations (e.g., performed by an disconnected application ) may follow different communication flows.","An example of a communication between a disconnected application  (e.g., an ActiveX control) and a secondary application  is that of saving a markup file. For example, once the cookie has been passed using the environment variable , a markup file may need to be saved after a notification is made to the secondary application .","To accomplish such a communication, the communication bridge is setup using environment variables  as described above. Thereafter, a save markup operation may be initiated from a disconnected application  (e.g., an ActiveX control that provides a toolbar for marking up a drawing (referred to as markup control)). To avoid complex communication, the markup control saves the markup file to a temporary location. The markup control then utilizes the environment variable  to retrieve the cookie to access the interface to transmit the save markup file message. The markup control may then call the secondary application  (through the interface  to bridge ) to save the markup. Such a communication may pass the filename of the temporary file to the secondary application . The secondary application  may then continue through the normal flow of control for saving files (dialogs, etc.).","In addition to saving the markup, embodiments of the invention may provide for the display of the issue status or error messages to the user. To provide such capabilities, the client host bridge  and interface is setup using the environment variables  as described above. The interface  for the bridge  may then allow for sending status\/error messages to the secondary application . Once received, the secondary application  may display the message to the end user as appropriate.","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the present invention. For example, any type of computer, such as a mainframe, minicomputer, or personal computer, or computer configuration, such as a timesharing mainframe, local area network, or standalone personal computer, could be used with the present invention. In summary, embodiments of the invention provide the ability for a secondary application to communicate with a disconnected application in a web browser. Such a secondary application may comprise any type of application including but not limited to a project hosting application\/environment. Similarly, a disconnected application may comprise any type of application including but not limited to one or more ActiveX controls.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0018","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0022"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
