---
title: Coding approach for a robust and flexible communication protocol
abstract: A coding approach for a robust and flexible network communication protocol is described. By using coding, it is possible to eliminate the need to track packet identities, and hence, it is possible to reduce coordination overhead associated with many conventional protocols. The method and system described herein takes advantage of multiple paths, interfaces, mediums, servers, and storage locations available in a network. The proposed protocol allows quick response to congestion by load balancing over different network resources. The method also enables soft vertical hand-overs across heterogeneous networks. In one embodiment, a media file is divided into chunks and transmitted using a transport protocol tailored to meet delay requirements of media streaming applications. Also described are different coding strategies for chunk delivery based upon an urgency level of each chunk.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08780693&OS=08780693&RS=08780693
owner: Massachusetts Institute of Technology
number: 08780693
owner_city: Cambridge
owner_country: US
publication_date: 20111108
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["GOVERNMENT RIGHTS","FIELD OF THE INVENTION","CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This invention was made with government support under Grant No. 6915101, awarded by Defense Advanced Research Projects Agency (DARPA). The government has certain rights in this invention.","The concepts described herein relate to communication protocols and more particularly to a coding approach for network communication protocols.","Not applicable.","As is known in the art, there have been several past attempts in using multiple paths for transport protocols, all of which consider end-to-end connection from a single server to a single client. For example, one of the latest such protocols introduced is Multi-Path Transmission Control Protocol (MPTCP).","Implementation of MPTCP can significantly improve the way current computer networks operate by using the resource pooling principle to improve the reliability and throughput of a data communication session. For example, if a communication path between a source and a destination breaks down, or becomes highly congested, data may be sent over alternative paths to thereby avoid any interruption in the data communication session. Moreover, MPTCP potentially enables a client, e.g. a mobile device, to simultaneously establish a connection through multiple interfaces.","Such interfaces can provide connections to a cellular network, wired and wireless Local Area Network (LAN), or other devices in an ad-hoc or peer-to-peer mode. This potentially provides robustness to link failures particularly in wireless networks as well as the ability to roam from one network to another.","Even though the desire for such benefits has increased with the emergence of more capable (in terms of computational power and communication interfaces) devices, current implementation suggestions by the Internet Engineering Task Force (IETF) working group have several issues.","For example, one problem in MPTCP is scheduling. The problem of scheduling in MPTCP involves partitioning the data across multiple paths, and dynamically re-adjusting the schedule based upon congestion feedback. Consider, for example, an MPTCP session with two paths. One may choose to assign odd-numbered packets to the first path, and the even-numbered packets to the second path. If the second path is congested and the first path is not, a delay may occur. If MPTCP does not re-adjust the load based upon congestion levels in each path, then the odd-numbered packets will be delivered (via the first path) while the even-numbered packets will delay the file transfer, (i.e. the second path is a bottleneck). Therefore, MPTCP has to dynamically re-adjust the load. However, this involves a delicate and complex control. For example, decisions must be made as to which fraction of the even-packets should be rescheduled to the first path, and how to notify the receiver of the new load balancing decisions, etc.","It would therefore, be desirable to provide one or more methods to facilitate the implementation of a multi-path protocol. It would be further desirable to provide one or more methods to facilitate the implementation of a transport protocol that can emulate current Transfer Control Protocol (TCP)\/MPTCP interface (to higher and lower layers) and provide a more effective service.","In accordance with the concepts, systems and techniques herein, described are several methods to facilitate the implementation of a system and technique which uses a coded protocol and is suitable for use as a communication protocol including a multipath communication protocol. In one embodiment, the coded protocol may be implemented as a multi-path transport protocol that can emulate current TCP\/MPTCP interface (to higher and lower layers) and provide a more effective service. When implemented at the transport later, the coded protocol technique described herein is referred to as Coded Transmission Control Protocol (CTCP).","It should be appreciated that even though the concepts, systems and techniques are sometimes described herein in the context of a transport protocol, the same concepts, systems and techniques may also be implemented in an application layer e.g. when an unreliable transport protocol such as the User Datagram Protocol (UDP) is in place, or in a link layer.","In accordance with the concepts, systems and techniques described herein, a communication protocol includes a method of delivering data (including but not limited to voice, image and video data) from a source to a destination by forming coded packets as a linear combination of original packets at the source and delivering the same coded packets to the destination over one or more network paths. The coded packets represent the data to be transmitted and no additional coding of the data is done between the source and destination.","With this particular arrangement a coding approach for a robust and flexible network communication protocol is provided. By using coding, it is possible to eliminate the need to track packet identities, and hence, it is possible to reduce coordination overhead associated with many conventional protocols. The concepts, systems and techniques described herein takes advantage of multiple paths, interfaces, mediums, servers, and storage locations available in a network. This allows one to provide a reliable service that is robust against failures. The coded protocol and related techniques allow quick response to congestion by load balancing over different network resources. The protocol and techniques also enable soft vertical hand-overs across heterogenous networks.","In one embodiment, the communication protocol further includes providing feedback from the destination to the source and based upon the feedback from the destination, forming a new linear combination of the original packets at the source and delivering the new coded packets from the source to the destination.","By utilizing feedback between the destination and source, different coded packets are repeatedly delivered until all of the original information (i.e. the data being delivered from the source to the destination) is received at the destination. In this manner, the communication protocol described herein guarantees delivery of all data.","In accordance with a further aspect of the concepts, systems and techniques herein, a transport protocol based on network coding for reliable data delivery includes a method of transmitting data from a source node to a destination node by forming a linear combination of packets at the source node and delivering the same linear combination of packets formed at the source node from the source node to the destination node over one or more network paths. The linear combinations of packets (coded packets) represent the data to be transmitted and no additional coding of the data is done between the source node and the destination node.","With this particular arrangement, a transport protocol based upon network coding for reliable data delivery is described. In one embodiment, a media file is divided into chunks and the transport protocol described herein is tailored to meet delay requirements of media streaming applications. Also described are different coding strategies for chunk delivery based upon an urgency level of each chunk. In one embodiment, a method and system based on network coding for design and implementation of a reliable transport protocol in a network is described. The transport protocol takes advantage of multiple paths, interfaces, and servers available in the network. This allows one to provide a reliable service that is robust against failures and can satisfy quality of service (QoS) requirements of delay sensitive applications such as video streaming. The transport protocol described herein allows quick response to congestion by load balancing over different network resources. The transport protocol and techniques described herein also enable soft vertical hand-over across heterogenous networks.","In one embodiment, the transport protocol technique further includes providing feedback from the destination node to the source node and then forming a new linear combination of packets at the source node and delivering the new combination of packets from the source node to the destination node.","In one embodiment, the process is repeated until all of the original data is decoded at the source node.","In one embodiment, the source is a server and the destination is a client.","In one embodiment, the plurality of packets represent a file.","In one embodiment, the technique is implemented in one of: a link layer, a transport layer; and an application layer.","In one embodiment, forming a linear combination of packets includes generating a linear combination of packets at random or deterministically.","In some embodiments, the linear combination of packets comprises all packets which make up the file and in other embodiments the linear combination of packets comprises a subset of the packets which make up the file.","In some embodiments, forming a linear combination of packets is done by forming a random linear combination of a subset of packets and in other embodiments, forming a linear combination of packets is done by choosing the coding coefficients deterministically. The subset of packets chosen to form linear combinations can be obtained in a deterministic or probabilistic fashion.","In some embodiments the coefficients of the linear combination are embedded within a payload.","In accordance with a still further aspect of the concepts, systems and techniques described herein, it should be appreciated that there exist scenarios in which where a client-device (e.g. a wireless mobile device) may not be able to connect simultaneously to two access points. This could be due to hardware constraints, such as the client-device having a single WiFi card thereby limiting the client-device to be associated with a single WiFi access point at any given point in time. This may pose a challenge to soft-handoff between two access points.","Thus, the coded protocol concepts, systems and\/or techniques described may be used to form a method of soft-handoff where there is an intermediate means of access available between two access points. In one embodiment, first and second different access points utilize first and second WiFi networks and an intermediate means of access corresponds to a 3G or a 4G network. Even though the client-device may not be able to simultaneously establish two WiFi connections, the coded protocol concepts, systems and techniques described herein, allow the client-device (e.g. a mobile device) to seamlessly transfer a connection from the first WiFi network to the intermediate 3G (or 4G) network and then from the intermediate 3G (or 4G) network to the second WiFi network. In this manner, a data transfer session will be uninterrupted when client-devices move from the first access point (i.e. the first WiFi network) to the second access point (i.e. the second WiFi network).","In accordance with a still further aspect of the concepts, systems and techniques described herein, in a communication system in which a client-device cannot connect to a server simultaneously through first and second access points, a method for transferring an ongoing data session between the first and second access points includes establishing a first connection between the client-device and the server via the first access point, and establishing a second connection between the client-device and server via an intermediate access point wherein at least one of the connections between the first and second access points is provided via a coded protocol.","With this particular arrangement, a communication system is provided in which a client-device can connect to a server through first and second access points via an intermediate access point, wherein each of the first and second access points and intermediate access point are implemented with the same or different access technologies.","Once the second connection is established between the client-device and server via the intermediate access point, in one embodiment, the method further includes terminating the first connection through the first access point. The method can then further include establishing a third connection between the client-device and the server via a third access point. It should be appreciated that at least one of the connections between the first and second access points is provided via a coded protocol.","In one embodiment a first one of the first access point, the second access point and the intermediate access point utilizes one of WiFi access technology, Bluetooth access technology, 3G access technology or 4G access technology.","In accordance with a further aspect of the communication protocol concepts, systems and techniques described herein, a method for transmitting a file between one or more servers and one or more clients includes (a) for M information packets, generating Nlinear coded packets at one of the one or more servers, (b) delivering the Nlinear coded packets from the server to one of the one or more clients, (c) upon reception of the some of the Nlinear coded packets at the client, occasionally but continuously providing feedback from the client to the server from which packets were received, (d) based upon the feedback from the client, forming a new linear combination of coded packets at the server and (e) delivering the new combination of coded packets from the server to the client.","With this particular arrangement, an efficient and robust method for transmitting a file between one or more servers and one or more clients is provided. The sequence of providing feedback from the client to the server and sending new coded packets from the server based upon the feedback is continued until the entire original file is decoded at the client. In one embodiment, the packets are delivered by transmitting Nlinear coded packets having a fixed packet size.","In accordance with a still further aspect of the concepts, systems and techniques described herein, a method for transmitting original information between one or more sources and one or more destinations includes (a) for M information packets, generating Nlinear coded packets at one of the one or more servers, wherein the M information packets represent all of the original information to be transmitted from at least one of the one or more sources to one of the one or more destinations, (b) delivering the Nlinear coded packets from the source to one of the one or more destinations, (c) upon reception of some of the Nlinear coded packets at the destination, providing feedback from the destination, (d) based upon the feedback provided from the destination to the source, forming a new linear combination of coded packets at the source and (e) delivering the new combination of coded packets from the source to the destination. The sequence of providing feedback from the destination to the source and forming and resending coded packets at the source is continued until the entire original file is decoded at the destination.","With this particular arrangement, a transport protocol which facilitates the implementation of a multi-path transport protocol that can emulate current TCP\/MPTCP interface (to higher and lower layers) and provide a more effective service is provided. By using network coding, it is possible to eliminate the need to track the identity of each packet, and hence, it is possible to remove the coordination overhead associated with many conventional transport protocols. The proposed method takes advantage of multiple paths, interfaces, mediums, servers, and storage locations available in the network. This allows one to provide a reliable service that is robust against failures.","The proposed protocol allows quick response to congestion by load balancing over different network resources. The method also enables soft vertical hand-over across heterogenous networks. This transport protocol can be tailored to meet the delay requirements of media streaming applications, by dividing the media file into small chunks. Different coding strategies for chunk delivery based upon an urgency level of each chunk may also be used.","It should be appreciated that even though the concepts, systems and techniques described are presented as a transport protocol, after reading the disclosure provided herein, it should be understood that the same communication protocol concepts, systems and techniques may be implemented in other layers of a networking protocol suite including but not limited to an application layer or a link layer.","Thus, it should be understood that the coding techniques and control methods described herein are not limited to implementation in the transport layer of a network protocol stack. Rather, the proposed concepts and techniques may be implemented in other layers such as the physical layer, link layer, network layer, and application layer. Moreover, depending upon the layer in which the method described herein is implemented, the size of the data units (packets) and the time scale of the coding operations may vary. Nevertheless, concepts and advantages described herein such as soft vertical-handoff, dynamic load balancing, and ability to maintain multiple connections simultaneously across different interfaces still apply.","Implementing the techniques described herein in the application layer can be achieved by, for instance, tunneling the traffic over a UDP connection. All the coding operations and the control algorithm are performed at the application layer on top of UDP. In this setup, the coding operation is performed in an end-to-end manner, similar to using CTCP at the transport layer.","Another example involves coding at the link layer. Since link layer manages each link individually, the coding operation implemented at the link layer is also on a per-link basis, and is no longer performed in an end-to-end manner. Again, this approach enables seamless connection and hand-over across multiple access technologies such as WiFi, LTE, WiMax, HSPA, etc. . . .","Before describing a robust and flexible network communication protocol and methods, some introductory concepts and terminology are explained.","Reference is sometimes made herein to \u201cdata.\u201d As used herein, data can include any type of data including, but not limited to voice, image and video. Thus, reference made herein to a \u201cdata session\u201d is not limited to any particular type of data.","It should be understood that reference is also sometimes made herein to implementation of a protocol on a specific network layer or layers including, but not limited to: transport layers, link layers and application layers. In one exemplary embodiment described herein, a so-called Coded Transmission Control Protocol (CTCP) is described at the transport layer. Such reference is not intended as, and should not be construed as limiting of the communication coded protocol concepts described herein. Rather, such references and examples are given merely to promote clarity in the description of the coded protocol concepts described herein.","Accordingly, it should be understood that the coding system and techniques and control methods described herein are not limited, for example, to implementation in a transport layer of the network protocol stack. Rather, the proposed concepts and techniques may be implemented in other layers such as the physical layer, link layer, network layer, and application layer. Moreover, depending upon the layer in which the method described herein is implemented, the size of the data units (packets) and the time scale of the coding operations may vary. Nevertheless, concepts and advantages described herein such as soft vertical-handoff, dynamic load balancing, and ability to maintain multiple connections simultaneously across different interfaces still apply.","It may be desirable, for example, to implement the coded protocol techniques described herein in an application layer when an unreliable or undesirable transport protocol is in place. For example, when a network operates with the User Datagram Protocol (UDP), it may be desirable to implement the coded protocol technique in an application layer. Implementing the coded communication protocol techniques described herein in the application layer can be achieved, for instance, by tunneling the traffic over a UDP connection. In such an embodiment, all coding operations and control techniques are performed at the application layer on top of UDP. In such an arrangement, the coding operation is performed in an end-to-end manner (similar to using CTCP at the transport layer as mentioned above). The manner in which such an arrangement may be implemented will be understood by those of ordinary skill in the art.","Another example involves coding at the link layer. Since link layer manages each link individually, the coding operation implemented at the link layer is also on a per-link basis, and is no longer performed in an end-to-end manner. Again, one may achieve seamless connection and hand-over across multiple access technologies such as WiFi, LTE, WiMax, HSPA, etc. . . . with a link layer implementation of the concepts described herein.","Determining where (i.e. on which layer) to implement the coded communication protocol described herein depends upon a variety of factors including but not limited to delay constraints, hardware constraints, software constraints, which layers are accessible for changes\/modifications, ease of integration to existing system, It should be understood that in any particular application, these factors may be weighted differently (i.e. some factors may be more important in one case and the same factors may be less important in another case). In any given application, one of ordinary skill in the art will understand how to evaluate such factors and select the particular layer or layers in which to implement the coded protocol described herein. Thus, it should be understood that in some applications it may be desirable to implement the coded protocol techniques described herein in a physical layer or a link layer while in other applications it may be desirable to implement the coded protocol techniques in the transport layer or application layer.","Referring now to , a client-server system  includes a server  coupled to a client  through one or more paths -portions of which paths may include the Internet. Server  and client  each include application layers , which operate in accordance with a coded transmission control protocol within a protocol stack (i.e. a software implementation of a computer networking protocol suite) , respectively. Thus  illustrates a coded transmission control protocol (CTCP) as the transport layer , for a single connection between a server  and a client . The IP address of the CTCP subflows can be the same or different. As is known, individual protocols typically exist within a suite.","Consider now the following scenario of transmitting a single file from server  to client . The CTCP protocol establishes multiple sub-flows, which can use possibly different ones of network paths -","For the given file, conventional multipath transmission control protocol (MPTCP) needs to map each byte or packet to different subflows . . . (e.g. as in the paths . . . ), and each sub-flow operates as a conventional Transmission Control Protocol (TCP) on the assigned bytes. However, this is extremely complicated to manage, especially in a dynamic setup (e.g. when network condition changes over time across different paths.","In order to avoid tracking the sequence number of each packet through each path, the network coding protocol as described below in conjunction with CTCP is used.","Each of the sub-flows of CTCP, whenever allowed to transmit, forms a linear combination of the packets within the file and hands this combination to the IP layer for delivery. The linear combination can be generated at random or deterministically involving all or any subset of the packets within the file. The coding strategy may affect the decoding complexity at the receiver . A particularly efficient coding method is to form a random linear combination of a small subset of packets, which may be chosen at random or deterministically.","It is important to ensure that CTCP's packet structure is compatible with traditional TCP or UDP's packet structure so that the nodes within the network, such as current implementation of middle boxes and Network Address Translations (NATs), can operate without modification. In one embodiment, the coefficients of the linear combination are embedded within the payload so that they can be used for decoding.","Referring now to , a comparison of multi-path TCP (MPTCP) and CTCP is shown. In , MPTCP divides even and odd numbered packets for transmission, i.e. PP, and Pto a first pathand P, P, and Pto a second different path If a packet, for example packet P, is lost, then MPTCP must retransmit packet P. Therefore, MPTCP needs to decide which path over which to retransmit packet P.","In order to fully utilize the diversity of the network, server  may choose to transmit packet Pover both paths; however, this can lead to redundancy and waste of bandwidth. To be bandwidth efficient, MPTCP may choose to transmit packet Ponly over a single path (e.g. path ) but this risks delaying the entire transmission because of the path being the slower of the two paths , , i.e. the bottleneck path.","On the other hand, in , CTCP forms a linear combination of the available packets -generally denoted . In order to decode, the receiver needs a predetermined number of linearly independent combinations of the packets  (e.g. any four linearly independent combinations of the packets), defined as degrees of freedom. If one of coded packets , , , are lost, server  may choose multiple linearly independent combinations of the packets  for transmission on paths , . If all packets (e.g. , or , and the newly generated packet) get delivered, then both packets can be used for decoding in the future; thus, the receiver now only needs one more degree of freedom to decode.","In contrast to the novel CTCP concepts, traditional TCP flows use a sliding window mechanism for congestion management. TCP's congestion window denotes a contiguous subset of the data that can be transmitted without being acknowledged yet. As acknowledgments arrive at the sender, TCP may slide its congestion window to transmit more data. The size of the congestion window can change over time, based upon the behavior of the received acknowledgements and the round-trip time (RTT) estimate.","In order to take advantage of coding, CTCP modifies the notion of sliding\/congestion window. Since coding removes the identity of a transmitted packet, in order to limit the congestion in the network, each transmitted packet should correspond to a particular token available at the sender. The total number of tokens corresponds to the size of the congestion window in the traditional TCP. CTCP uses an acknowledgement mechanism based upon the degrees of freedom received. In particular, the receiver\/client  examines each delivered coded packet. If it is linearly independent from the past received packets, the receiver acknowledges the degree of freedom. This acknowledgement can involve a sequence number for queue management at the sender. Further, the acknowledgements can be used for congestion estimation and control. When an acknowledgement is received, a token is returned to the sender. Thus, the sender is allowed to transmit an additional coded packet.","The tokens can be generated or removed based upon a congestion control mechanism. For example, if multiple packets are lost or congestion is detected via longer RTT estimates, it may be desirable to decrease the rate of transmission by removing a few tokens. Also, it may be desirable to generate new tokens if there is enough bandwidth available for the particular sub-flow. This token-based congestion control mechanism allows each sub-flow to achieve the largest throughput despite the losses and failures without overflowing the network.","It should be noted that in a lossy environment, TCP mistakes the losses as congestion, which leads to TCP's performance degradation. A recent improvement to TCP congestion control is the so-called \u201cfast-retransmit mechanism.\u201d Fast-retransmit involves re-transmitting a particular lost packet to continue the TCP flow, which requires in-order delivery.","With CTCP, however, a lost packet can be substituted by any other coded packet. Thus, CTCP does not need a fast-recovery mechanism. Rather, CTCP detects failures by assigning a timer (e.g. TTL) to each token. When failures are detected, CTCP may re-generate the token and retransmit a coded packet.","Referring now to , a client-server system includes multiple servers -N (here only two servers being shown for clarity) (generally denoted S) and at least one client C. Servers S utilize one or more of multiple paths to couple to each of the one or more clients C. In the exemplary embodiment of , only three paths -are shown although any number of paths may also be used. The servers S and clients C each include an application layer which operates via CTCP. One of the main advantages of CTCP is that it allows the receiver  to use multiple paths (e.g. paths -) and\/or multiple servers (e.g. servers , ) simultaneously. This can be accomplished without the servers coordinating with each other.","It should be appreciated that MPTCP cannot achieve this without close coordination among the servers. Thus, MPTCP does not scale the way CTCP can.","When using CTCP, each sub-flow (which can be on different servers) forms the coded packets independently; moreover, the congestion control mechanism for each sub-flow can operate without direct rate coordination with other sub-flows. Therefore, each sub-flow can achieve the maximum throughput available without overloading the network. By properly generating the acknowledgements at the client side, the receiver can control the rate at which each sub-flow generates coded packets. For example, the receiver can prematurely acknowledge receiving some degrees of freedom over a particular sub-flow to force that sub-flow from sending more coded packets. Also, the receiver may delay sending acknowledgements or not send acknowledgements of packets that it has received. Thus, the receiver can control the amount of redundancy introduced by the sub-flows. The amount of redundancy should be sufficient to battle the losses in the network; however, small enough to avoid wasting network resources.","Another advantage of CTCP is that it can take advantage of distributed storage. Not only can CTCP use multiple servers, CTCP clients can recover the entire file or data even if the file is scattered over the network. For example, instead of storing multiple copies of a particular file, coded partial copies of the file may be formed and stored at various locations (e.g. at some edge servers or close to cellular base stations). This method of distributed storage is resilient to storage failures and requires smaller storage space.","In addition to using multiple servers and distributed storage, CTCP can establish connections through different interfaces and medium simultaneously. For example, consider a device with 3G, WiFi, and Bluetooth interfaces. Current implementations do not allow the device to use multiple interfaces at the same time. For instance, even if both 3G and WiFi are enabled on the device, the WiFi interface is the active network interface for data communication and the 3G interface acts as a backup to the WiFi connection. This restriction of the current implementations comes primarily from the fact that it is difficult to coordinate transfer of packets across multiple paths\/flows\/interfaces. On the other hand, CTCP alleviates the need of coordination among different paths\/flows\/interfaces by using coding.","One of the key benefits of CTCP is its extreme resilience to network failures. By taking advantage of multiple paths\/flows\/interfaces, CTCP is able to establish and maintain the connection even if part of the network fails. For example, suppose that both 3G and WiFi are active simultaneously on a device. If WiFi fails, then 3G can help maintain the connection without incurring any delay associated with initialization\/handshaking, which is necessary in the current implementations. Moreover, CTCP can readily provide seamless soft horizontal and vertical hand-over across different access points, access technologies\/interfaces, and networks.","In order for the receiver to decode the data, it needs to collect enough degrees of freedom. As a result, the coding operation performed by CTCP may seem that it will incur a higher delay in delivering data to the application. This may make CTCP less appealing for delay-sensitive applications, such as media streaming. However, described below is a method to both reap the benefit of coding (as mentioned above) and meet the delay constraints of the applications.","By constraining the set of packets combined together, one can control the number of successful transmissions needed to deliver a particular subset of the packets. For example, a media file can be divided into chunks, i.e. small file portions or units from an application point of view but large enough to leverage the benefits of coding. A chunk can be 2-4 seconds of a media file, which could be as large as 1 MB. Chunks are delivered sequentially to the client. The server-side CTCP forms linear combinations from the current chunk to be delivered. This limits the delay seen by the application, since the receiver does not need to decode the whole file before it can decode the chunk and submit it to the application layer.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 4","FIGS. 4A-4C"],"b":["70","1","2","72","72"],"sub":["1","12 ","1","12 "],"i":["a","b"]},"Referring now to , an example of a transition strategy in which a source  begins sending (as indicated by reference numeral ) coded packets corresponding to a first block B to a destination  is shown. The source keeps delivering (or otherwise sending or transmitting) the coded packets from the current block B until a desired number of degrees of freedom are acknowledged. At this point, source  begins sending coded packets from a second block (i.e. block B) and similarly keeps delivering the coded packets from the second block until a desired number of degrees of freedom are acknowledged. This process is repeated until all blocks have been delivered and acknowledged.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 4B","b":["82","86","1","84","1","2"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 4C","FIG. 4C"],"b":["90","1","92","1","2"]},"Referring now to , each server-side CTCP sub-flow needs to make a decision regarding when and how it should transition from the current chunk to the next chunk.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIGS. 4A-4C"},"For instance, consider a scenario in which the sub-flow is nearing the end of a current chunk (or block). As discussed in conjunction with , the server may choose to send additional degrees of freedom in order to combat losses without waiting for the feedback from the receiver or token expiration. Note that it is desirable to have an estimation of the loss rate within the network in order to avoid generating too many redundant degrees of freedom. For example, if the loss rate is 10%, then one may want to send approximately 10% more coded packets corresponding to the unacknowledged data.","On the other hand, the server may choose to transition to the next chunk thereby avoiding the need to send redundant packets while risking the completion of the current chunk. This is discussed above in conjunction with .","Furthermore, as described in conjunction with , the server may decide to defer the transition by sending coded packets across the current and the next chunk. By deferring the transition, one reduces or possibly even eliminates the potential inefficiencies caused by redundant packets. However, this approach also delays the delivery of the current chunk. We may defer the transition only if the current chunk is not urgently needed by the application layer. For example, if there are sufficient amount of decoded data buffered at the media player, then the current chunk delivery can be delayed without hurting the user experience.","It should be appreciated that CTCP as described herein can be implemented such that it can completely replace the Transmission Control Protocol (TCP) at the transport layer without requiring any changes in the upper and\/or lower layers. The application layer may access CTCP with the same API commands as it would access a TCP socket. Moreover, the CTCP packets may be structured such that it appears as a TCP packet to the IP layer. This is particularly useful for compatibility with the current implementations of middle boxes (i.e. a device in the Internet that provides transport policy enforcement) and network address translators (NATs).","In addition, if any of the end-points are not capable of supporting CTCP, they can still establish a connection with a CTCP-enabled device as a TCP session. This, in particular, can be achieved during the handshake phase. If at least one of the endpoints does not confirm that it can support CTCP, the whole session can roll-back to a regular TCP session.","Even within a single cellular network\/device, there are multiple cellular access technologies, including, but not limited to, 2G, 3G, and 4G. Currently, once a device selects one of these technologies for data transfer, there is no mechanism for this device to switch to other technologies without interrupting the data transfer sessions. This can prevent efficient data transfer, especially when moving across coverage areas utilizing different access technologies. For example, 2G is currently more widespread than 4G, but has a much lower speed. If a connection is started in an area where only 2G is available, when the device moves into an area with both 4G and 2G coverage, the speed of data transfer will not show any improvement. This is a result of the fact that the current network protocols cannot handover the connection from a 2G to a 4G without interrupting the data transfer session. Consequently, if a connection is started in an area where 4G is available, when the device moves out of 4G's coverage, the connection is immediately dropped. The data transfer session has to be re-established over the available access technology in this example 2G access technology. The systems and techniques described herein resolve the above issues by establishing simultaneous connections across the different cellular technologies.","Thus, there are scenarios in which a device may not be able to connect simultaneously to two access points (e.g. as provided by a device that allows wireless devices to connect to networks using Wi-Fi, Bluetooth or related standards sometimes through a router and can relay data between the wireless devices and devices on the networks). This could, for example, be due to hardware constraints such as the device having a single WiFi card thereby limiting the device to be associated to a single WiFi access point at any given time. Such a limitation poses a challenge to a soft-handoff between two access points.","To address such a challenge and with reference now to , the coded communication protocol described herein can be used to implement a method of soft-handoff between two different available access points. In , it is assumed that client-device  communicates with a source (e.g. server)  through an access point . Access point  may, in turn, utilize an internet  to complete the path between client-device and  and source . Client-device  may be provided, for example, as any type of portable wireless networking device. Client-device  may be a hand held device, but is not limited to hand-held devices.","In the exemplary embodiment of  first and second access points ,  are shown as is an intermediate access point . Access points ,  provide respective coverage areas ,  and intermediate access point  provides a coverage area .","In the exemplary embodiment described in conjunction with , access points ,  are each provided as WiFi access points and intermediate access point  utilizes 2G, 3G or 4G access technology. It should, of course, be appreciated that in other embodiments access points ,  may be provided via access technologies other than WiFi. For example access points ,  may be provided via Bluetooth or other access technologies. Thus,  illustrates an example where the two access points ,  are using first and second access technologies (here both illustrated as WiFi technologies), and intermediate access point  utilizes a different access technology (e.g. 2G, 3G or 4G technology).","Reference numeral  indicates a direction in which client-device  is moving. Client-device  is not able to simultaneously establish two WiFi connections. Thus, as client device moves along path  from coverage area  to coverage area , any data transfer session of client-device  will be uninterrupted as client-device  moves from the coverage area  provided by access point  to coverage area  provided by access point .","Using the concepts, systems and methods described herein, however, client-device  can seamlessly transfer the connection from the coverage area  provided by access point  to a coverage area  provided by the 3G access point  and then again from coverage area  provided by the 3G access point  to network coverage area  provided by access point . That is client-device  can seamlessly transfer the connection from WiFi  to 3G, then from 3G to WiFi . Hence, any data transfer session of client-device  will be uninterrupted as device  moves from the first WiFi network (i.e. WiFi ) to the second WiFi network (i.e. WiFi ). That is, client-device  can maintain uninterrupted service (e.g. an uninterrupted data session with server ) as client device  moves from WiFi  to WiFi .","Such a seamless transfer of a data session between disparate networks can be accomplished utilizing the coding algorithms and control methods described herein. Thus, in a communication system in which a client-device cannot connect to a server simultaneously through first and second access points and wherein each of the first and second access points are using first and second access technologies, a method for transferring an ongoing data session between the first and second access points includes establishing a first connection  between the client-device  and the server  via the first access point . As the client-device  moves outside the coverage region  provided by the first access point , the client-device  establishes a second connection between the client-device  and server  via an intermediate access point . Intermediate access point  establishes a second connection between the client-device  and server  via an intermediate access point . Significantly, at least one of the connections between the first and the intermediate access points must be provided via a coded protocol.","Once the second connection between the client-device  and server  is established via intermediate access point , the first connection through the first access point is terminated.","Next, once the first connection through the first access point is terminated, client-device  establishes a third connection between the client-device  and the server  via the second access point . Significantly at least one of the connections between the intermediate and second access points is provided via a coded protocol. Once the third connection between the client-device  and server  is established via the second access point , the second connection through the intermediate access point is terminated.","As discussed above, the first access point, the second access point and the intermediate access point can utilizes one of a plurality of different access technologies including but not limited to 2G, 3G or 4G access technology, WiFi or Bluetooth access technologies or EDGE\/GPRS, EvDo, LTE, WiMax, HSPA technologies.","As noted above, the access technology used at the first access point and the access technology used at the intermediate access point are different access technologies. As also noted above, in one embodiment, the coded protocol allows client-device  to transfer the connection from WiFi technology used at the first access point to one of 2G, 3G or 4G technology used at the intermediate access point and then back to WiFi technology used at the second access point.","It should be appreciated that the coding algorithms and control methods described herein above are not limited to implementation in any particular layer of the network protocol stack. For example, the disclosed method may be implemented in the physical layer, link layer, network layer, transport layer and\/or application layer. Depending upon which layer in which the coded protocol is implemented, the size of the data units (packets) and the time scale of the coding operations may vary. Nevertheless, features of the method, such as soft vertical-handoff, dynamic load balancing, and ability to maintain multiple connections simultaneously across different interfaces may be maintained regardless of the layer in which the coded protocol technique described herein is implemented.","The foregoing description has been directed to specific embodiments. It will be apparent, however, that variations and modifications may be made to the described embodiments, with the attainment of some or all of their advantages. For instance, it is expressly contemplated that certain components and\/or elements described herein can be implemented other than as specifically shown. For example, even though the concepts, systems and techniques described are presented as a transport protocol, after reading the disclosure provided herein, it should be understood after that the same methods may be implemented in the application layer when an unreliable transport protocol e.g. UDP, is in place.","Accordingly, it is submitted that that the concepts and techniques described herein should not be limited to the described embodiments but rather should be limited only by the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing features of this invention, as well as the invention itself, may be more fully understood from the following description of the drawings in which:",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["1","2"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
