---
title: Correction of client-assigned timestamps
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for correcting client-assigned timestamps. In one aspect, a method includes receiving, by one or more servers, a data packet that includes (i) data referencing one or more client-side events, (ii) data referencing a respective time that a client has assigned to each event, and (iii) data referencing a transmission time that the client has assigned to the data packet. The method also includes assigning, by the one or more servers, a receipt time to the data packet, and comparing, by the one or more servers, the transmission time that the client has assigned to the data packet to the receipt time that the one or more servers have assigned to the data packet, to determine a time correction factor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719452&OS=08719452&RS=08719452
owner: Google Inc.
number: 08719452
owner_city: Mountain View
owner_country: US
publication_date: 20110729
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present specification relates to client-server communications.","A client-server model of computing defines some computer resources as a server, and other computer resources as clients. Computing tasks are partitions, with some tasks carried out by the client, and some tasks carried out by the server. A single server may provide services to many clients, and a single client may access many resources by communicating with many servers. In some implementations, a single computer device may host both a server and one or more attached clients. In some other implementations, each client and each server may be associated with one, or a group of, separate computers.","A server may receive messages from one or more clients that are not synchronized with the server's clocks. These messages may be associated with time data that is accurate according to their respective client's clocks, but inaccurate according to the server's clock. According to one innovative aspect of the subject matter described in this specification, to correct this inaccuracy, the server may compare client-supplied transmission time data with server-supplied reception time data. The difference between the transmission time data and the reception data, after accounting for latencies, may be used to identify the difference between a server's and client's clocks. This difference may be used to modify time data from the client so that that time data is accurate from the server's perspective.","According to another innovative aspect of the subject matter described in this specification, data that (i) has been assigned timestamps by a client and (ii) has been communicated from the client device to a server, may be assigned corrected timestamps by the server, and may be stored at the server according to the corrected timestamps. Correcting a client-assigned timestamp may include comparing a client-assigned transmission time associated with the data to a server-assigned receipt time associated with the data, calculating a correction factor based on the comparison, and applying the correction factor to the client-assigned timestamp.","According to another innovative aspect of the subject matter described in this specification, a method includes receiving, by one or more servers, a data packet that includes data referencing one or more client-side events, data referencing a respective time that a client has assigned to each event, and data referencing a transmission time that the client has assigned to the data packet. The method includes assigning, by the one or more servers, a receipt time to the data packet, and comparing, by the one or more servers, the transmission time that the client has assigned to the data packet to the receipt time that the one or more servers have assigned to the data packet, to determine a time correction factor. The method also includes applying, by the one or more servers, the time correction factor to the respective time that the client has assigned to each client-side events, to generate a respective corrected time for each event, and logging, by the one or more servers, the one or more client-side events in an event log according to the respective corrected time for each event.","Other embodiments of these aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.","These and other embodiments may each optionally include one or more of the following features. For instance, the method includes determining, as the receipt time, a time when the data packet was received by the one or more servers; the method includes determining a latency factor associated with communicating the data packet, where applying the time correction factor to generate a respective corrected time for each event further includes applying the latency factor; each event is a click event a corrected time for a particular event satisfies ET=ET\u2212(PT\u2212PT), where ETrepresents the corrected time for the particular event, ETrepresents the time that the client has assigned to the particular event, PTrepresents the transmission time that the client has assigned to the data packet, and PTrepresents the receipt time assigned to the data packet by the one or more servers; the data packet comprises a ping request; the respective times that the client has assigned to the client-side events represent absolute times as determined by the client, and the respective corrected times generated by the one or more servers represent absolute times as determined by the server; and\/or the corrected time for a particular event is determined based on values for ET, ET, PTvalue, and PT","Advantageous implementations may include one or more of the following features. Client computers may report records of client-side events to a server without synchronizing with the server's clock, or with a reference clock. Client computers may communicate with two different servers whose clocks are not synchronized with each other, or whose clocks are associated with different time zones. Client-side events from many clients may be aggregated by a server and stored in an accurate, chronological order.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other potential features and advantages will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1","FIG. 1"],"b":"100"},"In general, a client computer  may send a log of client-side events to a server computer  over one or more networks . The client-side events may be timestamped according to the client computer's  clock . The clock  may not be synchronized with the server computer's  clock . The server computer  may find a time offset between the client timestamp and the clock  and apply that offset to the client-side events in the received log.","More specifically, the client computer  may be a general purpose computer (e.g. a desktop, laptop, tablet computer, or mobile device with an operating system and user installed applications), a dedicated computing device (e.g. a web appliance, feature phone, smart power meter, e-book reader, or media player), another type of computing system, or a collection of any such devices.","The client computer  may include a processor , the clock , and an event log datastore . The processor  may execute code (e.g. firmware, operating system, and\/or applications) that, among other features, generates records of client-side events. Client-side events include user inputs (e.g. clicks in a web browser), automated actions (e.g. data capture from sensors attached to the client computer ), and internal client-side events in the client computer  (e.g. an anti-virus application scanning a malicious file).","The clock  may keep track of time in the client computer's  computing environment and may be used for timing tasks (e.g. scheduled execution of an application, monitoring a time window, timestamping a log entry). The clock  may track time in an absolute time format. One scheme for tracking absolute time is counting the number of seconds that have passed since a benchmark time. The event log datastore  may maintain a record of client-side events and associated timestamps from the clock  captured when the client-side event was created.","The server computer  may be general purpose computer, a dedicated computing device, a network device (e.g. a network switch, edge router, or telecommunication base-station), a peer of the client computer  (e.g. a node in a multi-computer cluster), another type of computing system, or a collection of any such devices. The server computer  may include a processor , a clock , an event log datastore , and a timestamp correction module .","The processor  may execute code that, among other features, stores client-side events from the client computer . The clock  may keep track of time in the server computer's  computing environment and may be used for timing tasks. The clock  may track time in an absolute format. The event log datastore  may maintain a record of received client-side events and associated timestamps, with the timestamps accurate according to the clock . The timestamp correction module may examine incoming message packets containing client-side event logs and correct any contained timestamps to corm with the clock .","In data state (A), the event log datastore  of the client computer  may maintain some or all client-side events in an event log . For example, an event log  may be maintained by the event log datastore  for each application of the client computer , for each user of the client computer , or according to other criteria. New client-side events may appended to the end of the event log, which may effectively ensure that the log is in chronological order, though other schemes are possible.","Each client-side event in the event log may have an event data-field, a time data-field, and other data-fields. The event data-field may, for example, uniquely identify each client-side event in the event log . The time data-field may record the state (e.g. time) of the clock  when the associated client-side event was created, monitored, or recorded, etc. Other data-fields not shown may include an anonymized user identifier, application identifier, event results (e.g. a search result that a user selects), and\/or application specific data (e.g. a search session identifier used by a search engine).","In data state (B), the client computer  may transmit some or all of the event log  in one or more data packets  to the server computer . The data packet  may include a client-side transmission timestamp indicating the state of the clock  when the event log  is transmitted from the client computer . In some implementation, the client computer  may transmit each entry in the event log  as it is created. In some other implementations, the client computer  may store a group of client-side event records and transmit them in a bulk event log .","For example, a search engine interface (e.g. a web browser configured to display a search engine web page) may store client-side events related to user interactions with the search engine (e.g. queries submitted, search results displayed, search results selected by a user, refinements to submitted queries). The record of these client-side events may include information such as a search session identifier, anonymized user identifier, and click-selections of search results.","After a specified time, a specified number of records, at the end of a search session, or according to any appropriate criteria, the event log  may be transmitted by the client computer  at clock  time T. This transmission may include a ping request, which may be used to estimate latency between the client computer  and the server computer .","In data state (C), the server computer  may receive the data packets , and thus the enclosed event log  and client-side transmission timestamp. The reception by the server computer  may include determining, at the time of receipt, a receipt timestamp according to the server computer's  clock . A discrepancy between the transmission timestamp and receipt timestamp is possible. One reason for such a discrepancy may be a mismatch between the clock  and the clock . That is, at one particular point in time, the clock  and the clock  may indicate different times.","In some networked environments, synchronization of clocks may be difficult (e.g. over large geographic distances or for a moving client) or impossible (e.g. if a client must respect two different server clocks, when clock synchronization is not supported by the client or servers). Another source of the discrepancy may be network latency. That is, the travel time of the data packet  may be large compared to the granularity of the clock  and the clock , or the travel time over the link used by the data packet  may be highly variable or \u2018bursty.\u2019","In data state (D) the timestamp correction module  may compare the receipt timestamp (e.g. server-time T) with the transmission timestamp (e.g. client-time T) to determine a time correction factor. The time correction factor may be the difference between the receipt timestamp and the transmission timestamp (e.g. 17\u221220, \u22123). In some implementations, other calculations may be used. For example, the timestamp correction module  may, in addition to finding the difference in timestamps, account for actual or estimated delays (e.g. network latency).","The timestamp correction module  may add a latency factor to the transmission timestamp or subtract the latency factor from the receipt timestamp. For example, for a transmission timestamp of T, a latency factor of 5, and a receipt timestamp of T, the timestamp correction module  may determine a time correction factor of 0 (125+5\u2212130).","In data state (E), the timestamp correction module  may correct the received client-side event timestamps to create a corrected event log . For example, the timestamp correction module  may edit each record in the event log  to add a server-time data-field. The server-time data-field may be populated using the client-time data-field and the time correction factor from data state (D). For example, for an event Z, the corrected event log  may have a client-time data-field value of T, and the timestamp correction module  may have a time correction factor of \u22123. By adding \u22123 to the time T, a server-time value of Tmay be found.","In data state (F), the timestamp correction module  may add the received client-side events of the corrected event log  to a server event log . The server event log may, for example, record some or all client-side events from some or all clients in communication with the server computer . The server event log  may be sorted or ordered according to the server time of each entry. In such an ordering, the client-side events of the client computer  may be separated by client-side events of other clients.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","102","104","106","102","104","102","202","204","110","208","210","212","104","214","216","116","218","222","224","226","228"]},"The event detector  may detect client-side events that are internal or external to the client computer. For example, a user clicking in a web browser displaying search results may be one such event that is detected. The event detector  may pass data of and\/or a reference to the client-side event to the event logger . The event logger  may generate one or more records of the client-side event. For example, the event logger may create structured text (e.g. XML) or data (e.g. database rows) capturing information of the user click event. The event logger  may include a timestamp based on time data provided by the clock . The event queue  may receive the records of the client-side events from the event logger  and may store those records, temporarily or long-term.","The queue manager  may request the records of the client-side events from the event queue . The event queue  may operate in a first-in, first-out configuration, wherein the oldest records available are served to the queue manager  first. The queue manager may aggregate records of client-side events for transmission to the server computer . The queue manager  may construct the aggregation according to one or more criteria, such as a limited time window, an application session, a maximum number of records, etc. Included in this aggregation may be a transmission timestamp indicating the time, according to the clock  of the client computer , that the aggregation is transmitted.","The interface  of the client computer  may transmit the aggregation in one or more data packets over the networks  to the interface  of the server computer . This transmission may be formatted according to one or more communication standards such as the secure hypertext markup language (HTTPS), the file transfer protocol (FTP), and\/or an application program interface (API) such as a representation state transfer (RESTful) API, etc.","The latency detector may detect and\/or determine the latency of the communication between the interface  and the interface . To determine this latency, the latency detector may use information about ping requests from the client computer, a stored latency value associated with the client computer address or the data packet's anonymized user identifier, or other appropriate measures. The packet manager  may receive the data packet, latency information, and server time from the interface , the latency detector , and the clock , respectively. A receipt timestamp may be added to the data packet by the packet manager , and the data packet may be passed to the parser .","The parser  may parse the data packet into records of the client-side events. For example, unneeded network information may be identified and stripped, the records may be converted into another format, text may be parsed into n-grams, etc. Once the parsing is completed, the time correction manager  may receive the parsed records and determine a time correction factor for the received data packet. This correction factor may be applied to each record of the received data packet to create time information that is accurate for the server computer .","The event logger  may receive the records with the server computer  corrected time information, and store the records in the event log . Once stored, the records may be made available to other elements of the server computer  or other computer systems for use in data analysis tasks, billing and record keeping, etc.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["300","300","300","104","100","200","300","300"]},"i) Data referencing one or more events, ii) data referencing a respective time that a client has assigned to each event, and iii) data referencing a transmission time that the client has assigned to the data packet is received (). For example, data referencing one or more events may take the form of text, metadata, and other data that describes part of the state of an application or computer system when a predefined condition of the application or computer system is met.","The data referencing a respective time for each event may take the form of a date and time, a count of time since a landmark, or other appropriate format. Data referencing a transmission time may take the form of similarly formatted data. In some implementations, the only data received from the client may a reference (e.g. pointer, universal resource locater (URL), etc) to a datastore location that contains this information. For example, in some distributed parallel computing environments, it may be more efficient to pass such a reference as opposed to the data itself.","A server-assigned time of packet receipt is determined (). For example, a clock associated with the receiving server may be polled when packet receipt occurs. In some implementations, the clock may be external to the server and coupled communicably to the server. This may be the case, for example, if a clock service is provided to a collection of servers, and all the servers are configured to work with the same time reference for purposes of interoperability and data exchange.","A correction factor is determined by comparing client-assigned transmission time to server-assigned receipt time (). For example, the difference between the client-assigned transmission time and the server-assigned receipt time may be found and used as the basis for a time correction factor. This difference may be modified to account for factors other than just asynchronism of the client and server system. For example, network lag or processing lag (delay due to generating or parsing, for example) may also be accounted for.","In some implementations, the correction factor satisfying the equation SERVEREVENTTIME=CLIENTEVENTTIME\u2212(CLIENTPINGTIME\u2212SERVERPINGTIME), where SERVEREVENTTIME represents the corrected time for the particular event, CLIENTEVENTTIME represents the time that the client has assigned to the particular event, CLIENTPINGTIME represents the transmission time that the client has assigned to the data packet, and SERVERPINGTIME represents the receipt time assigned to the data packet by the one or more servers. A latency factor associated with communicating the data packet is determined and applying the time correction factor to generate a respective corrected time for each event includes applying the latency factor. In the equation above, (CLIENTPINGTIME\u2212SERVERPINGTIME) may modified to be ((CLIENTPINGTIME\u2212SERVERPINGTIME+LAGTIME), where LAGTIME represents some or all estimated lag in communication between the client and server.","The correction factor is applied to client-assigned timestamps to generate a corrected time for each event (). For example, for every timestamp in the receive data packet, except for the transmission timestamp, the correction factor may be applied to translate the timestamp from the reference of the client to the reference of the server. Events are logged according to the corrected timestamps (). For example, the events may be merged into an existing event log on the server or accessible by the server. These events may be used for any number of future tasks by the server or another computer device. In some implementations, future incoming events may be processed by the process  and stored to the same repository, subject to privacy safeguards and limitations.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","400","400","410","420","430","440","410","420","430","440","450","410","400","410","410","410","420","430","440"]},"The memory  stores information within the computing system . In some implementations, the memory  is a computer-readable medium. In some implementations, the memory  is a volatile memory unit. In some implementations, the memory  is a non-volatile memory unit.","The storage device  is capable of providing mass storage for the computing system . In some implementations, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.","The input\/output device  provides input\/output operations for the computing system . In some implementations, the input\/output device  includes a keyboard and\/or pointing device. In some implementations, the input\/output device  includes a display unit for displaying graphical user interfaces.","Some features described may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus may be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by a programmable processor; and method steps may be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features may be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that may be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program may be written in any form of programming language, including compiled or interpreted languages, and it may be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM (erasable programmable read-only memory), EEPROM (electrically erasable programmable read-only memory), and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM (compact disc read-only memory) and DVD-ROM (digital versatile disc read-only memory) disks. The processor and the memory may be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, some features may be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user may provide input to the computer.","Some features may be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system may be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN (local area network), a WAN (wide area network), and the computers and networks forming the Internet.","The computer system may include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 1 and 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
