---
title: Application-specific serial port redirector
abstract: A method and system are illustrated to redirect serial device requests from an application on a computer to a plurality of serial devices connected to the computer via a network. The method and system include receiving serial device requests from one or more applications existing on the computer. Each serial device request may be associated with a specific application protocol and directed to one of the plurality of serial devices over the network. The method and system include determining, for a respective serial device request, an application protocol associated with the respective serial device request and forwarding the respective serial device request as a serial redirector message according to the determined application protocol. The method and system include associating the forwarded serial redirector message with a transport protocol. The method and system further include transmitting the serial redirector message over the network as a function of a transport protocol associated with the serial redirector message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08424024&OS=08424024&RS=08424024
owner: Digi International Inc.
number: 08424024
owner_city: Minnetonka
owner_country: US
publication_date: 20090326
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","COPYRIGHT","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION","ADDITIONAL NOTES"],"p":["The present application is related to U.S. Non-Provisional Pat. No. 6,047,319 entitled \u201cNetwork Terminal Server with Full API Implementation\u201d that was patented on Apr. 4, 2000, and which is incorporated by reference in its entirety.","A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings that form a part of this document: Copyright \u00a9 1996-2008 DIGI International. All Rights Reserved.","This document relates generally to systems and methods that redirect serial ports from an application on a computer to a plurality of serial devices connected to the computer via a network.","A serial device serves a specific purpose, such as gathering and displaying transaction, video and\/or control information from an environment where the serial device is installed. Examples of such serial devices are found in retail data systems (e.g., Point-of-Sale (POS)), medical\/healthcare systems and building automation\/security systems, etc. Typically, a specific application protocol is used for an application program on a host computer to communicate with such a serial device through standard serial ports such as COM and TTY interfaces depending on participating operating systems. For example, RFC-2217, Modus and DF1 are application protocols widely used in industry for such a purpose. On the other hand, custom-defined protocols, such as the RealPort product marketed by Applicant, may be used. When the serial devices are connected to the host computer over a network, an appropriate transport protocol is used to transmit the serial device request from the application program to its associated serial device over the network. For example, Transmission Control Protocol (TCP), User Datagram Protocol (UDP), Telnet and Secure Sockets Layer (SSL) are transport protocols widely used in the industry for such a purpose.","Existing serial port redirectors are dedicated to one application protocol and one transport protocol pair. For example, Modbus ASCII\/RTU serial device requests may be paired with TCP. It would be advantageous to allow application protocols to be dynamically paired with transport protocols as needed. In addition, in the existing serial port redirectors, everything that an application sends to the serial port redirector is sent to the serial device. In many of these scenarios, the control data is unnecessary for operation of at least some of the serial devices. The transfer of unnecessary control data over the network increases network costs, especially when the serial port redirector is used in a wireless network that charges according to the amount of information being transferred over the network.","What is needed is a serial port redirector that supports dynamic transition from one application\/transport protocol pair to another application\/transport protocol pair. In addition, what is needed is a system and method for limiting transfer of unnecessary control information over a network.","In the following detailed description, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 1","FIG. 1","FIGS. 2-6","FIG. 1"],"b":["100","110","160","170","180","1","180","2","180","3","110","120","120","140","140","150","140","120","180","160","160","170","170","175","180","1","180","2","180","3","170","110","175","120","180","1","180","2","180","3","140","110","170","160"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["200","120","140","150","120","142","140","180","140","144","148","142","120","144","142","148","140","146","146","140","142","148","160"]},"For example, if RFC-2217 is employed for the serial device requests , such control data as baud rate (e.g., 9600), data length (e.g., 8 bits), parity bit (e.g., none), stop bits (e.g., 1 stop bit) and DTR (often used to disconnect a call) may be attached to the serial device requests . These control data may be deleted, reduced, consolidated as necessary by the communication layer . In some example embodiments, the same control data may be duplicated and sent to multiple serial devices. If the manipulation of the control data is done by the communication layer , the serial device requests  may be passed to the transport protocol interface  for further transmission via the network  (not shown in ) to one or more of the serial devices  (not shown in ) using a given transport protocol (e.g., either TCP or UDP) supported by the transport protocol interface . It is also noted, however, that if the control data is only used for internal communication with any of the applications  (e.g., answering a status request message sent by the applications ), the control data may not be sent to the network . In such cases, the control data may not go through the manipulation process.","In some example embodiments, the application protocol-specific serial port redirector  may support serial device requests  that are associated with two or more application protocols. For example, with Modbus\/ASCII, messages are sent in a readable ASCII format. With Modbus\/RTU, messages use binary encoding, which reduces the size of each message and with that allows for more data exchange in the same time span. All nodes on a Modbus network may use the same serial transmission mode, which means that a device configured to use Modbus\/ASCII cannot understand messages in Modbus\/RTU and vice versa. The application protocol-specific serial port redirector  may enable two applications , one talking Modbus\/ASCII, the other talking Modbus\/RTU, to talk to a Modbus\/RTU serial device , by translating Modbus\/ASCII message into Modbus\/RTU messages before sending them over the network  to the serial device.","In some example embodiments, the application protocol-specific serial port redirector  may also support two or more transport protocols, such as TCP, UDP, IP, Telnet, SSH, SSL, HTTP or HTTPS, etc. By supporting a plurality of application protocols and a plurality of transport protocols, the application protocol-specific serial port redirector  may allow transition from one application\/transport protocol pair to another application\/transport protocol pair to handle the plurality of serial device requests . In addition, the application protocol-specific serial port redirector  may facilitate limiting transmission of unnecessary control information over the network . In some example embodiments, using the application protocol-specific serial port redirector  may allow one of the plurality of serial devices  to supply data to a number of different applications  associated with different application protocols. Such necessity arises, for example, when the several applications  compete for connection with a single Point-of-Sale (POS) system and at least one of the applications  uses a different application protocol. More detailed explanations about a structure and functionality of the application protocol-specific serial port redirector  under these example embodiments are given below using .",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIG. 3"],"b":["300","120","140","150","140","310","320","330","310","312","314","310","312","314"]},"One or more of the applications  (not shown in ) running on the host computer  (not shown in ) may generate one or more COM or TTY serial device requests  depending on an operating system of the host computer . The serial port API  may then receive the COM or TTY serial device requests  through the COM request interface  or TTY request interface . Each of the serial device request  may be associated with a specific application protocol, such as RFC-2217, Modbus or RS-232, and directed to one of the plurality of serial devices  (not shown in ) over the network  (not shown in ). Each of the serial device requests  may then be passed to the application-specific protocol engine  for further preprocessing according to the application protocol associated with the serial device request. The application protocols may include, but not limited to, RS-232, RFC-2217, Modbus ASCII, Modbus RTU, Allen-Bradley DF1, Omron Hostlink and custom protocols (e.g., NetCX as in RealPort product marketed by Applicant).","The application-specific protocol engine , operatively coupled to the serial port API , may have a preprocessor  and a plurality of application protocol modules , ,  and . Each of the application protocol modules - may respond to one application protocol selected from a variety of application protocols. In some example embodiments, the application-specific protocol engine  may support automatic detection of an application protocol associated with the serial device request. To support this, the application-specific protocol engine  may identify an application that opens one of the plurality of serial port interfaces that receives the serial device request. In some example embodiments, a process handle may be used to identify a respective application opening a serial port interface if the respective application supports only a single protocol. By looking at information included in the handle, the application-specific protocol engine  may recognize that, for example, HyperTrm.exe opens \\Device\\Serial for COM. In some example embodiments, the application-specific protocol engine  may provide a graphical user interface with which a user or administrator can manually configure the serial ports. A manual configuration of the serial ports may be done by protocol. For example, one or more of the serial ports may be configured to handle serial device requests for the Modbus ASCII protocol, whereas one or more other serial ports may be configured to handle serial device requests for Modbus RTU protocol. The manual configuration of the serial ports may also be done by application if a respective application supports only a single protocol, or by device which is attached to a virtual port corresponding to the serial device requested by the application. In some example embodiments, the application-specific protocol engine  may be configured to plug-in a new custom made protocol implemented by third parties.","When an application protocol is determined for a respective serial device request , the preprocessor  may then preprocess the respective serial device request locally using one of the application protocol modules - corresponding to the determined application protocol. For example, the preprocessor  may:\n\n","In some example embodiments, the application-specific protocol engine  may further encrypt the serial redirector message before forwarding the serial redirector message to the transport protocol engine . Encrypting the serial redirector message is a security measure to maintain data integrity. In other words, the encrypted serial redirector message may prevent unauthorized changes in data including intentional destruction or alteration, tampering, duplication, or accidental loss, etc. The encrypted serial redirector message may also prevent disclosure to unauthorized individuals or processes. For example, encryption technology as in Encrypted RealPort product marketed by Applicant may be employed for such a purpose. In some example embodiments, the application-specific protocol engine  may have an application protocol module  that responds to a wireless communication protocol, such as ZigBee\u00ae protocol or IrDA\u00ae, to support access to one or more wireless serial devices over a wireless network.","The transport protocol engine , operatively coupled to the application-specific protocol engine , may associate the serial redirector message forwarded from the application-specific protocol engine  with a transport protocol to be used for transmission over the network. In some example embodiments, the transport protocol engine  may select the transport protocol from a variety of different transport protocols, including but not limited to TCP, UDP, IP, Telnet, SSH, SSL, HTTP or HTTPS, etc. For such a purpose, the transport protocol engine  may select, for each serial redirector message, a transport protocol that best serves the serial device request associated with the serial redirector message according to a specified configuration. In some example embodiments, the selection of a transport protocol may be made based on data type associated with the serial device requests. For example, TCP (Transmission Control Protocol) is better suited to transfer serial device request that needs a guaranteed delivery. This is because TCP offers error correction based on flow control. Flow control determines when data may need to be re-sent, and stop the flow of data until previous packets are successfully transferred. This works because if a packet of data is sent, a collision may occur. When this happens, the client re-requests the packet from the server until the whole packet is complete and is identical to its original. TCP is usually used to send important data such as web pages, database information, etc. UDP (User Datagram Protocol) is anther commonly used protocol on the Internet and is usually used to stream audio and video data. Streaming media data use UDP because it is faster than TCP. The reason UDP is faster than TCP is because there is no form of flow control or error correction. In contrast to TCP, however, the data sent over the Internet through UDP may be affected by collisions, and errors may result. In some example embodiments, the selection may be made based on pre-defined mapping between application protocols and transport protocols. For example, RFC-2217 to TCP, RS-232 to TCP and Modbus to UDP, etc. These two selecting methods based on the data type or the pre-defined mapping may be used alone or in combination with each other.",{"@attributes":{"id":"p-0025","num":"0034"},"figref":["FIG. 4","FIG. 3"],"b":["400","410","142","120","110","312","314","310","180","160","420"]},"At operation , the respective serial device request may be pre-processed into and forwarded as a serial redirector message according to the determined application protocol. As described above in , the preprocessing of the respective serial device request may include, for example, consolidating several units of information into a single packet. When preprocessed, the respective serial device request may then be forwarded as the serial redirector message. In some example embodiments, the serial device request may be forwarded to the transport protocol engine without going through the preprocessing step. At operation , the forwarded serial redirector message may then be associated with a transport protocol. As described above in , the association may include selecting a transport protocol that is best suited to transfer the serial redirector message over the network. The transport protocol to be associated with the serial redirector message may be selected according to the application protocol included in the serial redirector message from a group of transport protocols including at least two of TCP, UDP, IP, Telnet, SSH, SSL, HTTP or HTTPS, etc. Finally, at operation , the serial redirector message may be transmitted over the network as a function of the selected transport protocol.","In some example embodiments, the applications  may generate serial device requests directed to one or more universal serial bus (USB) ports. In such cases, the serial device requests may be received through an USB request interface provided in the serial port API . In some example embodiments, the serial redirector message may be encrypted before being forwarded to the transport layer. In some example embodiments, a wireless network may be provided in lieu of the network . In such cases, forwarding serial device requests may includes supporting a wireless communication protocol, such as ZigBee\u00ae or IrDA\u00ae, to enable access to one or more wireless serial devices over the wireless network.",{"@attributes":{"id":"p-0028","num":"0037"},"figref":"FIG. 5","b":["500","500","120","1","120","2","120","3","110","120","142","180","1","180","2","180","3","110","160","140","110","310","320","330"]},"As an illustrative example, the one or more application programs  may generate three serial device requests (-, - and -) directed to their corresponding serial devices (-, - and -). These serial devices may be associated with RFC-2217, RS-232, and Modbus, respectively. When issued by the application programs , these serial device request may be received by the application protocol-specific serial port redirector  through the COM request interface  (e.g., for the Microsoft Windows operating system) of the serial port API . Then the preprocessor  of the application-specific protocol engine  may determine a related application protocol for each serial device request and preprocess the serial device request into a serial redirector message - using a corresponding application protocol module (e.g., ,  or ). In some example embodiments, the serial device request may be forwarded to the transport protocol engine without going through the preprocessing step.","When the serial redirector messages , ,  are forwarded to the transport protocol engine , an appropriate transport protocol may be selected and associated with a respective serial redirector message. As described above in , the selection and association may be done according to, for example, a predefined mapping between application protocols and transport protocols (e.g., RS-232 to UDP; RFC-2217 to TCP; Modbus to TCP, etc.). Then the serial redirector message associated with wireless communication protocol  may be sent over the network  using UDP. On the other hand, the serial redirector messages associated with RFC-2217 and Modbus ,  may be sent over the network  using TCP. When these serial redirector messages go through their associated transport protocols, additional header information corresponding to the transport protocols may be added to the serial redirector messages. When these serial device requests ,  and  are received by the serial device server , they may be transferred to their corresponding serial devices (-, - and -) through the corresponding communication lines provided by serial ports (-, - and -) of the device server . In some example embodiments, the serial redirector messages associated with TCP  and  may be transferred to their respective serial devices over the network in one session. Such transfer of several serial device requests over a single TCP session is described in \u201cNetwork Terminal Server with Full API Implementation,\u201d U.S. Pat. No. 6,047,319, the description of which is incorporated herein by reference.","In some example embodiments, the application protocol-specific serial port redirector  may be extended to handle serial device requests directed to a USB port. In such a case, the serial port API  may additionally provide one or more USB request interfaces  along with other serial device request interfaces (e.g., COM request interface  and TTY request interface ). As an illustration, the serial port API  may receive from the applications  one or more serial device requests - directed to one or more USB ports through one or more of the USB request interfaces .","In some example embodiments, the application-specific protocol engine  may be configured to add a plug-in application protocol module to provide a serial device request interface associated with a new industry standard (e.g., RS-485) or custom-defined (e.g., NetCX as in RealPort product marketed by Applicant) application protocol. If a user needs to manage new serial devices that employ NetCX, the user may simply plug an application protocol module  for NetCX into the application-specific protocol engine  stack. This feature allows users to extend the functionality of the application protocol-specific serial port redirector  to new application protocols in the future.","According to some example embodiments as set forth above, Applicant's application protocol-specific serial port redirector  may support automatic and\/or manual transition from one application and\/or transport protocol to another application and\/or transport protocol to efficiently service multiple serial device requests. In addition, the multi-stack structure of Applicant's application protocol-specific serial port redirector  may allow easy extension of functionality of the serial port redirector  to adapt new protocols including custom-made application protocols. In some example embodiments as set forth above, the local preprocessing of protocol control data by the application protocol-specific serial port redirector  may reduce the amount of data being transmitted over a network (e.g., possibly down to serial data only) depending on application and\/or transport protocols. This may reduce a network cost, especially, in a wireless network that charges according to the amount of information being transferred over the network. Also, since the local preprocessing is done in a host computer, it may be possible to use serial port redirection technology (e.g., RealPort product marketed by Applicant) with less powerful, less expensive serial device\/terminal servers in some example embodiment as set forth above. Furthermore, in some example embodiments as set forth above, using the application protocol-specific serial port redirector  above may allow a serial device to supply data to a number of different applications associated with different application protocols.","Method examples described herein can be machine or computer-implemented at least in part. Some examples can include a computer-readable medium or machine-readable medium encoded with instructions operable to configure an electronic device to perform methods as described in the above examples. An implementation of such methods can include code, such as microcode, assembly language code, a higher-level language code, or the like. Such code can include computer readable instructions for performing various methods. The code may form portions of computer program products. Further, the code may be tangibly stored on one or more volatile or non-volatile computer-readable media such as during execution or at other times. These computer-readable media may include, but are not limited to, hard disks, removable magnetic disks, removable optical disks (e.g., compact disks and digital video disks), magnetic cassettes, memory cards or sticks, random access memories (RAMs), read only memories (ROMs), and the like.","The above \u201cDETAILED DESCRIPTION\u201d includes references to the accompanying drawings, which form a part of the \u201cDETAILED DESCRIPTION.\u201d The drawings show, by way of illustration, specific embodiments in which the invention can be practiced. These embodiments are also referred to herein as \u201cexamples.\u201d Such examples can include elements in addition to those shown and described. However, the present inventors also contemplate examples in which only those elements shown and described are provided.","All publications, patents, and patent documents referred to in this document are incorporated by reference herein in their entirety, as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference, the usage in the incorporated reference(s) should be considered supplementary to that of this document; for irreconcilable inconsistencies, the usage in this document controls.","In this document, the terms \u201ca\u201d or \u201can\u201d are used, as is common in patent documents, to include one or more than one, independent of any other instances or usages of \u201cat least one\u201d or \u201cone or more.\u201d In this document, the term \u201cor\u201d is used to refer to a nonexclusive or, such that \u201cA or B\u201d includes \u201cA but not B,\u201d \u201cB but not A,\u201d and \u201cA and B,\u201d unless otherwise indicated. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein.\u201d Also, in the following claims, the terms \u201cincluding\u201d and \u201ccomprising\u201d are open-ended, that is, a system, device, article, or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover, in the following claims, the terms \u201cfirst,\u201d \u201csecond,\u201d and \u201cthird,\u201d etc. are used merely as labels, and are not intended to impose numerical requirements on their objects.","The above description is intended to be illustrative, and not restrictive. For example, the above-described examples (or one or more aspects thereof) may be used in combination with each other. Other embodiments can be used, such as by one of ordinary skill in the art upon reviewing the above description. The Abstract is provided to comply with 37 C.F.R. \u00a71.72(b), to allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. Also, in the above Description of Example Embodiments, various features may be grouped together to streamline the disclosure. This should not be interpreted as intending that an unclaimed disclosed feature is essential to any claim. Rather, inventive subject matter may lie in less than all features of a particular disclosed embodiment. Thus, the following claims are hereby incorporated into the Description of Example Embodiments, with each claim standing on its own as a separate embodiment."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
