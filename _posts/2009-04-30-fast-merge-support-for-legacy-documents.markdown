---
title: Fast merge support for legacy documents
abstract: A method is presented for merging document metadata at a client computer. A document obtained from a server computer is opened by a user at the client computer. If the document does not include paragraph identifiers, a paragraph identifier is assigned to each paragraph in the document. When the document is opened by a second user at a second client computer, metadata for the document is received from the server computer. A determination is made whether to merge the metadata received from the server computer with current metadata for the document. When it is determined that the current metadata and the metadata received from the server computer should be merged, paragraph identifiers are adjusted in the document based on the metadata received from the server computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08346768&OS=08346768&RS=08346768
owner: Microsoft Corporation
number: 08346768
owner_city: Redmond
owner_country: US
publication_date: 20090430
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Network-based document collaboration systems permit multiple users to simultaneously access and coauthor a document. Although multiple users are permitted to coauthor a document, in order to prevent conflicts, the system may restrict the areas in a document in which each user can make edits to minimize chances for conflicting changes when the copies of the documents are merged.","Legacy systems typically may not allow for the coauthoring of documents created on the legacy systems. Documents created on these systems may therefore not be configured properly to support coauthoring on document collaboration systems. This can result in undesired conflicting edits.","Embodiments of the disclosure are directed to a method for merging document metadata at a client computer. A document is obtained from a server computer by a user at the client computer, and the document is opened at the client computer. In response to opening the document at the client computer, a determination is made as to whether the document includes unit identifiers. When it is determined that the document does not include unit identifiers, a unit identifier is assigned to each unit in the document.","A first message is received from the server computer providing notification that at least one other user is authoring the document. In response to receiving the first message from the server computer providing notification that at least one other user is authoring the document, a second message is sent to the server computer, the second message including first metadata for the document. In response to sending the second message to the server computer, a third message is received from the server computer, the third message including second metadata for the document. In response to receiving the third message from the server computer, a determination is made whether the first metadata and the second metadata should be merged. When it is determined that the first metadata and the second metadata should be merged, unit identifiers are adjusted in the document based on the second metadata.","The details of one or more techniques are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of these techniques will be apparent from the description, drawings, and claims.","The present application is directed to systems and methods for creating unit identifiers for legacy documents created on legacy network-based shared document systems that do not provide unit identifiers.","In example embodiments, a document is broken into units. Units can be any subpart of a document, for example sentences, paragraphs, headings, drawings, tables, etc. A document may contain only one unit, for example a single table, sentence, or multiple units, such as multiple tables, sentences, or paragraphs. For the example embodiments disclosed herein, a document unit is a paragraph of the document.","Legacy documents are those documents that were created by legacy systems that do not provide for coauthoring. The legacy documents therefore do not include paragraph identifiers. Paragraph identifiers are created for a legacy document when the document is saved on a document collaboration system or when two or more authors edit the document on the document collaboration system.","Because paragraph identifiers are created for a legacy document in this manner, when two or more authors using the document collaboration system access the same legacy document, paragraphs currently being edited by one of the authors are identified and paragraph locks are propagated to the other authors. The paragraph locks prevent the authors that are not currently editing a locked paragraph from editing the locked paragraph until the lock is removed. In this disclosure, an author is defined as a user who is creating or editing a document.","The systems and methods also provide for comparing and merging paragraph identifiers in documents and for providing paragraph identifier merging and paragraph lock propagation. A unique set of paragraph identifiers is created each time an author accesses a legacy document that does not include paragraph identifiers. When a second author accesses the same legacy document, the paragraph identifiers are compared and merged so that each author has a synchronized set of paragraph identifiers for the legacy document.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","102","104","106","108"]},"Among the plurality of information stored on the clients ,  is a client operating system (\u201cOS\u201d) and client applications. The client OS is a program that manages the hardware and software resources of the client system. The client applications utilize the resources of the clients ,  to directly perform tasks specified by a user, for example a user who is authoring a document. For example, the clients ,  include one or more software applications, such as word processing programs, that are used to create and edit document files. One example of such an application is Microsoft Word from Microsoft Corporation of Redmond, Wash. Other examples of such applications are also applicable.","Server  is a file server that is accessible through a network. Server  stores a plurality of files. These files can include both software applications and documents, as described further herein. Server  controls access to the documents stored by the server .","In example embodiments, the server  can be located within an organization or can be part of a document collaboration system. An example document collaboration system is a SHAREPOINT\u00ae team services portal server services provided by Microsoft Corporation. An example shared document server is Microsoft Office SharePoint Server 2007 provided by Microsoft Corporation. Other configurations can be used.","In example embodiments, paragraph identifiers are merged and paragraph locks are propagated through a metadata channel  that is separate from a data channel  used to save the edited contents of the document. By transmitting metadata separately from document content, authors are able to receive paragraph locks fast, independent of a content save operation. Because the paragraph locks prevent two or more authors from editing the same content simultaneously, the integrity of the coauthoring process is enhanced.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["102","102","202","204","206","202","202","202"]},"The example metadata processing module  processes the metadata in the document. Some examples of metadata are the document name, date of creation or last edit, document identifier, revision identifier, paragraph identifiers, paragraph range, and paragraph locks. Other kinds of document metadata are possible.","A paragraph identifier is a number that identifies each paragraph in a document. In example embodiments, paragraph identifiers may include identifiers for sub-units of a document such as headers and footers in addition to actual paragraphs.","A paragraph lock is metadata that indicates that an author is editing a paragraph of a document. In order to avoid conflicts, only one author is permitted to edit the same content at the same time. When one author edits a paragraph of a document, a paragraph lock is received for that paragraph for all other authors that have the document open. The document lock prevents these other authors from editing the paragraph until the lock is removed.","Additional details regarding such locks can be found in U.S. patent application Ser. No. 12\/145,536 filed on Jun. 25, 2008, the entirety of which is hereby incorporated by reference.","When an author on client computer  opens a legacy document that does not include paragraph identifiers, the example metadata processing module  generates a document identifier for the document. The document identifier is typically a number that is randomly generated from a specific number range. For example, the document identifier may be a 32-bit number that is in the range from 1 to 0x7fffffff.","The example metadata processing module  assigns the document identifier to the first paragraph in the document. The remaining paragraphs are then sequentially numbered from the document identifier. For example, if there are five paragraphs in the document and the randomly generated document identifier is , the five paragraphs are assigned paragraph identifiers , , ,  and , respectively.","The example metadata processing module  also identifies as metadata the next paragraph number in the paragraph identifier sequence. In this example, the next paragraph identifier is . Although the paragraph identifiers are sequentially generated when a document is initially opened, paragraph identifiers for any paragraphs that may be added as a result of editing the document are randomly generated.","When the author on client  opens the document, the example metadata processing module  also obtains a revision identifier for the document. Each document stored in the example document collaboration system includes a revision identifier that identifies a version number for the document. In some example embodiments, the revision identifier may be part of a file system identifier for the document. The example metadata processing module  keeps track of the revision identifier as metadata.","Because at this time, the author on client  is the only author that has opened the document, the document does not contain any paragraph locks. The author on client  is free to edit the document at will, editing existing paragraphs, deleting paragraphs, adding new paragraphs, making formatting changes, etc. Until the author on client  saves these changes, the server  does not know about the changes.","When an author on client  opens a copy of the same document, server  presents the author on client  with a version of the document that does not include the changes the author on client  made to the document if the author on client  has not saved the document before client  opens the document.","When the document is opened on client , the example metadata processing module  on client  randomly generates a document identifier for the version of the document opened at client . The example metadata processing module  on example client  assigns the document identifier to the first paragraph of the document opened on client  and sequentially assigns paragraph numbers to the remaining paragraphs of the document opened on client .","Because the document identifiers are randomly generated, the document and paragraph identifiers for the copies of the document opened at clients  and  are different. In order to propagate paragraph locks to the two opened documents, the paragraph identifiers for each opened document must be merged and synchronized. This is because paragraph locks are associated with specific paragraphs. Therefore, paragraphs having common content on multiple copies of opened documents are required to have to have identical paragraph identifiers.","The example metadata merge module  compares and synchronizes paragraph identifiers between documents. When the author on client  opens the document, server  informs the author on client  that there is at least one other user already authoring the document. Server  also informs the author on client  that another author has opened the document. When the author at client  discovers that another author has opened the document, the example metadata merge module  on client  sends metadata to server . Similarly, when the author at client  discovers that another author has opened the document, the example metadata merge module  at client  sends metadata to server  using the metadata channel .","The example metadata sent to server  by clients  and  includes three metadata components\u2014the document identifier, the next paragraph identifier and the revision identifier. In example embodiments, these three components are called a metadata seed. When server  receives the metadata seed from clients  and , server  determines which metadata seed arrived first. The metadata seed that arrived at server  first is considered the winner. The winning metadata seed information is then propagated to the other authors. For example, if server  receives the metadata seed from client  first, the metadata seed information on client  is merged with the metadata seed information from client .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["206","102","204","302","1000","1001","1002","1003","1004","1005"]},"During the editing of the document, the author on client  deletes paragraph  and adds paragraphs with paragraph identifiers ,  and . This is shown in example document copy . The author on client  is able to modify, add, and\/or delete any paragraph in the document because currently there are no other users authoring the document so there are no paragraph locks on the document. The added paragraphs have paragraph identifiers that are randomly generated, as described above.","After the author on client  makes the changes to the document shown in example document copy , the author on client  opens a copy of the document. A copy of the document is obtained from server . Because the changes to the document made by the author on client  have not yet been saved to server , the document opened by the author on client  contains the same content as shown in example document copy .","When the document is opened on client , the metadata operations module  on client  randomly generates a document identifier for the document opened at client . In this example, the document identifier is . The example metadata operations module  on client  assigns the document identifier  to the first paragraph of the document opened on client . The example metadata operation module  on client  then sequentially numbers the remaining paragraphs in the document. The resulting paragraph numbering is shown in example document copy .","At some given interval, clients ,  both synchronize the metadata associated with the document. This synchronization happens over the metadata channel , as described above. In example embodiments, the synchronization interval can be set to happen at a specific period, such as every 2 second, 5 second, 10 seconds, 20, seconds, 30 seconds, 1 minute, 5 minutes, 10 minutes, or 30 minutes. Other intervals can be used.","In the example, the metadata seed from client  is received at server  first. When server  determines that the metadata seed from client  was received first and is the winning seed, server  sends the metadata seed received from client  to client . When client  receives the metadata seed from server , the example metadata merge module  on client  merges the metadata seed received from server  with the paragraph metadata on client . The result of the merge is shown in example document copy .","Example document copy  shows that as a result of the merge, paragraphs identifiers , , ,  and  (from example document copy ) are changed to , , ,  and , respectively. Because the document identifier of the winning seed is , the example metadata merge module  on client  renumbers the paragraphs in the paragraph range determined from the metadata seed received from server . The renumbering makes the paragraphs in the paragraph range consistent with the document identifier . The paragraph range can be determined from the metadata seed because the metadata seed includes the document identifier (which is also the first paragraph of the paragraph range) and the next paragraph identifier (which is the next sequential paragraph identifier following the last paragraph identifier in the paragraph range) and because all the paragraphs in the paragraph range are sequentially numbered. Therefore, the first paragraph in the document opened at client  is renumbered from  to . The paragraph range includes paragraphs  through . Therefore, paragraph  is renumbered to , paragraph  is renumbered to , paragraph  is renumbered to  and paragraph  is renumbered to . As discussed earlier, paragraph  was deleted.","The metadata merge module  on client  also determines all paragraph identifiers the document opened at client  that are not included in the paragraph range. This includes paragraphs with paragraph identifiers ,  and  that were added to example document copy . Because added paragraph  conflicts with renumbered paragraph  (original paragraph ), the example metadata merge module  renumbers added paragraph  to . The example metadata merge module  renumbers added paragraph  to  because paragraph identifier  is no longer used in the document and, therefore, there is no conflict if paragraph  is used. The example metadata merge module  does not change paragraph identifiers  and  because there are no conflicts caused by these paragraph identifiers.","When the metadata merge is completed, paragraphs with common content for the document opened on client  and for the document opened on client  have identical paragraph identifiers. For example, if before the merge paragraphs having identifiers , , ,  and  for the document opened on client  have common content with paragraphs having identifiers , , ,  and , respectively for the document opened on client , after the merge, these paragraphs on both client  and client  have paragraph identifiers , , ,  and . This permits paragraph locks to be assigned to these paragraphs. For example, when an author at client  edits paragraph , a paragraph lock is transmitted to the document at client , preventing client  from editing paragraph . The paragraph lock assures that multiple authors cannot edit the same paragraph simultaneously.","When the author on client  performs a save operation, the content changes for the document opened on client  are sent to server  through the data channel . In addition to transmitting content changes, the save operation also removes any paragraph locks associated with the paragraphs previously edited on client . The change in locks is communicated through the metadata channel .","The saved content and the removal of the paragraph locks are propagated to all authors that are currently authoring the document. This permits the authors to edit paragraphs that were previously locked. However, once an author starts editing a paragraph, a new paragraph lock is created and propagated to all other authors that are currently editing the document through the metadata channel .","Once the paragraph identifiers are synchronized, further changes to the document by either client  or client  can be synchronized using the paragraph identified in the manner described in U.S. patent application Ser. No. 11\/951,973, now U.S. Pat. No. 8,028,229, filed on Dec. 6, 2007, the entirety of which is hereby incorporated by reference.","The above discussion of metadata merging describes two authors. In other example embodiments, more than two authors may edit the same document. The same metadata merge operations apply for example embodiments having more than two authors.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["400","402","102","106","102","106","102","400","102"]},"At operation , client  determines whether the document includes paragraph identifiers. Typically, legacy documents stored on server  do not include paragraph identifiers because the legacy documents are created by word processing applications that do not support coauthoring or include paragraph identifiers. If the document does include paragraph identifiers, client  can start editing the document at operation .","If the document does not include paragraph identifiers, paragraph identifiers are assigned to the document at operation . The example metadata operations module  randomly generates a document identifier for the document. The document identifier, typically a 32-bit number with a range from 1-0x7fffffff, is then assigned to the first paragraph of the document. Then, the remaining paragraphs are sequentially numbered from the document identifier.","At operation , the author on client  proceeds to edit the document. Because the author on client  is the only author that has opened the document, the author on client  can edit any paragraph of the document and can also add and delete paragraphs.","At operation , client  receives a message from server  that provides notification to client  that at least one other author, for example an author on client , has opened the document. When client  receives notification that at least one other author has opened the document, at operation  the example metadata operations module  on client  sends first metadata to server . The first metadata includes a metadata seed for the document open on client , including the document identifier, a next paragraph identifier and a revision identifier.","At operation , client  receives a message from server  that includes second metadata. The second metadata originates from one of the other authors who is authoring the document, for example the author on client . The second metadata represents the winning metadata seed received at server . The winning metadata seed is the first metadata seed received at server  from the at least one other authors that are authoring the document. The second metadata includes the document identifier, next paragraph identifier and revision identifier from the client that sends the winning metadata seed to server , for example client .","At operation , client  determines whether the first metadata and the second metadata should be merged. The steps involved in determining whether the first metadata and the second metadata should be merged are shown in  and discussed later in this disclosure. If it is determined that the first metadata and the second metadata should not be merged, at operation  the author at client  continues to edit the document.","If it is determined that the first metadata and the second metadata should be merged, at operation  the example metadata merge module  on client  merges the first metadata and the second metadata. The metadata is merged by adjusting paragraph identifiers in the document opened by the author on client . The operation of adjusting paragraph identifiers includes changing the paragraph identifiers for all paragraphs in the document opened on client  that have common content with corresponding paragraphs in the document opened on client . The paragraph identifiers on the document opened on client  are changed to corresponding paragraph identifiers indicated by the document identifier and the next paragraph identifier included in the second metadata. For example, if paragraphs - on the document opened on client  have common content with paragraphs - on the document opened on client  and if the document identifier for the document on client  is  and the document identifier in the second metadata is , the first three paragraphs in the document on client  are renumbered to ,  and .","In addition, if it is determined that paragraphs added to the document opened on client , but not saved, have paragraph identifiers in the paragraph range indicated by the second metadata, the example metadata merge module  changes these paragraph identifiers so that they are unique in the document.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","b":["418","102"]},"At operation , a determination is made whether the revision identifier from the first metadata seed matches the revision identifier from the second metadata seed. The revision identifier indicates the version of the document. In order to merge metadata, the documents must be at the same revision level. This is because when each author initially opens the document, the content of both documents must be the same. When it is determined that the revision identifier from the first metadata seed does not match the revision identifier from the second metadata seed, at operation  metadata is not merged and the author at client  continues editing.","When it is determined that the revision identifier from the first metadata seed matches the revision identifier from the second metadata seed, at operation  a determination is made whether the document identifier from the first metadata seed matches the document identifier from the second metadata seed. When the document identifiers match, it indicates that documents have already been synchronized and that a metadata merge is not necessary. In this case, at operation  metadata is not merged and the author at client  continues editing.","When it is determined that the document identifier from the first metadata seed does not match the revision identifier from the second metadata seed, at operation , a determination is made whether the size of the paragraph range as determined from the first metadata seed matches the size of the paragraph range as determined from the second metadata seed. When it is determined that the paragraph ranges are not the same, at operation  metadata is not merged and the author at client  continues editing.","When it is determined that the paragraph range as determined that the paragraph ranges are the same, at operation  the first metadata seed and the second metadata seed are merged. The merging of the first metadata seed and the second metadata seed comprises adjusting paragraph identifiers in the document opened on client  per operation , as discussed.","With reference to , example components of client  are shown. In example embodiments, the client  is a computing device, such as a desktop computer, laptop computer, personal data assistant, or cellular device. The client  can include input\/output devices, a central processing unit (\u201cCPU\u201d), a data storage device, and a network device.","In a basic configuration, the computing device  typically includes at least one processing unit  and system memory . Depending on the exact configuration and type of computing device, the system memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. System memory  typically includes an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS\u00ae operating systems from MICROSOFT CORPORATION of Redmond, Wash. or a server, such as Windows SharePoint Server 2007, also from MICROSOFT CORPORATION of Redmond, Wash. The system memory  may also include one or more software applications  and may include program data.","The computing device  may have additional features or functionality. For example, the computing device  may also include additional data storage devices (removable and\/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , removable storage  and non-removable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included. These devices are well known in the art and need not be discussed at length here.","The computing device  may also contain communication connections  that allow the device to communicate with other computing devices , such as over a network in a distributed computing environment, for example, an intranet or the Internet. Communication connection  is one example of communication media. Communication media may typically be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","The various embodiments described above are provided by way of illustration only and should not be construed to limiting. Various modifications and changes that may be made to the embodiments described above without departing from the true spirit and scope of the disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 6","FIG. 2"]}]},"DETDESC":[{},{}]}
