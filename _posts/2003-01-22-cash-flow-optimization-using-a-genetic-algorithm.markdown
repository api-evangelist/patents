---
title: Cash flow optimization using a genetic algorithm
abstract: A genetic algorithm determines a plan for payment of payment obligations in accounts payable of a finance account. The genetic algorithm operates to satisfy certain objectives, including maximizing the minimum daily cash on hand in the finance account. A genome population including a number of vectors is generated. The genome population is modified using a genetic algorithm, until at least one vector represents a plan for the payment obligations such that payment of each payment obligation in accordance with the vector most nearly satisfies one or more objectives.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07124105&OS=07124105&RS=07124105
owner: Intuit Inc.
number: 07124105
owner_city: Mountain View
owner_country: US
publication_date: 20030122
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["The present invention relates generally to cash flow optimization and, more specifically, to using genetic algorithms to optimize cash flow in terms of maximizing the minimum daily cash on hand in a finance account while optimizing one or more objectives.","Cash flows in and out of a business or household, since every business or household has a set of accounts receivables and a set of accounts payables as well as assets. Business and households are very interested in the amount of cash readily available on a daily basis. Thus, business and households typically keep track of the amount of cash on hand (hereinafter, \u201cCOH\u201d) on a daily basis, where cash on hand for a given day is defined as follows:\n\nCash On Hand (COH)=Initial COH (COH of Previous Day)\u2212Cash Payable (CP) for the Given Day+Cash Receivable (CR) for the Given Day.\n","Businesses are particularly interested in keeping the minimum daily COH above a certain threshold, since most businesses have to keep a certain daily balance of cash due to bank account requirements, legal requirements, accounting requirements, and the like and also for avoiding being too close to insolvency.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 1","FIG. 1"]},"Referring to , the daily COH on January 5 was at its lowest ($20,000) among the days in the considered period of time. This $20,000 amount is referred to as the minimum daily COH for the given period. As stated above, businesses are very interested in maintaining the minimum daily COH above a certain threshold, such as $15,000, as an example shown in .","The daily COH for a given period may vary depending upon the manner in which particular payments are made or received. Many accounts payable and receivable have an amount to pay, a due date, certain penalties incurred for late payment, minimum required payment, and the like. Businesses may not be able to control the accounts receivable, since the accounts receivable depends upon the manner in which payments are received from other businesses. However, one or more of these elements of accounts payable may be utilized to control the minimum daily COH. For example, businesses may decide to make a certain payment earlier than the due date if there are certain benefits associated with early payments, such as a discount of the payment amount. As another example, early payments prior to the fiscal year end may reduce income taxes for the fiscal year. Businesses may also decide to make a certain payment later than the due date notwithstanding the penalties associated with late payments in order to prevent the COH from falling below the minimum threshold on a given day. Businesses also may prefer lumping more than one payment to a single payee (vendor) together to minimize the number of check runs, or may also prefer separating the payments for ease of identification and accounting.","Therefore, companies should, but typically do not, consider various factors (or objectives) in deciding when and how much of a payment to be make on a given day, such as maximizing the minimum daily cash on hand, minimizing or maximizing late payment penalties, tax impacts or tax deductibility, number of check runs, number of check runs per vendor, rewards or favorable terms given for early or full payments, postage fees incurred in mailing the payments, subjective importance or regret of each payment, and the like. A very efficient cash flow plan (a plan dictating when and how much of the payment obligations of the accounts payable should be satisfied) taking into consideration all of these objectives in an optimized manner could result in savings of a significant amount of money for the businesses.","It is a very complicated task to find a solution for an efficient cash flow plan while optimizing these various factors. Consider, for example, a highly simplified situation where the accounts payable includes 100 different payment obligations of $100 due on 10 different dates within 30 days. The search space for this situation would involve devising a plan to pay all or some part of each payment obligation on a certain date within the 30 day period while satisfying the above-mentioned factors objectives. Assuming that payments can be made in $1 increments between $0 and $100, just to simplify the calculation, there will be 100 ways to make a payment for each payment obligation. This means that there will be 100 ways to make payments on 100 payment obligations on any one of 30 days, resulting in 100combinations of possible solutions, clearly too many to be each individually considered even on the most powerful computers in existence. In addition, a variety of the above-mentioned objectives should be considered when finding the solution, such as maximizing the minimum daily COH while optimizing the other objectives such as minimizing late payment penalties, minimizing tax obligations or maximizing tax deductions, minimizing the number of check runs, minimizing the number of check runs per vendor, maximizing rewards or favorable terms given for early or full payments, minimizing postage fees incurred in mailing the payments, and maximizing subjective importance or minimizing regret for each payment, and the like with respect to a user-specified importance level for each objective. The solution space for such a situation will be enormous, discontinuous in scope and will typically involve non-linear, non-dimensional, and inter-dependent variables.","Such a complicated problem is very difficult to solve, but once a solution is obtained, it is easy to evaluate the solution. Such problems are called non-deterministic polynomial (\u201cNP\u201d) problems, which mean that it is possible to guess the solution by some non-deterministic algorithm and then check the solution, both in polynomial time. Generally, NP problems may be solved by genetic algorithms. However, so far there has been no attempt to apply a genetic algorithm to finding a solution for optimizing cash flow while optimizing certain objectives of a user.","The present invention solves this problem by generating a plan for making payments of payment obligations in accounts payable of a given finance account by using a genetic algorithm, while satisfying or optimizing certain objectives, including, but not limited to maximizing the minimum daily cash on hand.","In one embodiment, a genome population including a number of genomes is generated. Each genome has a plurality of alleles representing a payment date and a fractional (perecentage) payment amount corresponding to each payment obligation in the accounts payable. For example, if a payment of $50 is due to a payee on Mar. 3, 2003, then the allele of the genome corresponding to this payment could represent \u221210 and 0.25 as the date offset and factional payment amount, respectfully, which would mean paying 25% or $12.50, 10 days early on Feb. 21, 2003. Thus, a single genome may be understood to represent a cash flow plan, since it has a plurality of alleles defining the payment schedule for a number of accounts payable. Each genome is represented by a vector, list or other useful data structure.","The genome population is evaluated with respect to various objective functions. The objective functions provide a way of measuring the degree to which the payment of payment obligations in accordance with a genome vector satisfies one or more objectives. For example, the genomes can be evaluated with respect to resulting cash on hand, tax savings, amount of penalty fees, number of checks printed, number of check runs, and other objectives that are of interest to the business.","The genome population is modified using a genetic algorithm, including introducing into the genome population new genomes (vectors) derived from other genomes (vectors), including the original or previously existing genomes (vectors). In the context of the present invention the terms \u201cvector\u201d and \u201cgenome\u201d will be used interchangeably herein, but no limitation of genomes to a vector form of representation is intended. Various vectors which best match the desired criteria in each generation are selected as mating vectors from the first set of vectors based on their fitness, and then combined to obtain a second set of vectors, which are the offspring of the mating vectors. The resulting offspring vectors are preferably mutated, and used to replace selected ones of vectors in the genome population. The genome population is modified in this way until at least one vector represents a cash flow plan for making payments of the payment obligations such that payment of the payment obligations in accordance with the vector most nearly satisfies or optimizes the objectives, such as maximizing the minimum daily cash on hand, minimizing late payment fees, and the like.","The present invention may be embodied in various forms, including computer program products, methods, and systems, special or general purpose computing devices or apparatuses, online services or systems, user interfaces, etc.","By employing a genetic algorithm in order to find a solution for optimizing a set of criteria, such as maximizing the minimum daily cash on hand, in the payment of payment obligations of the accounts payable, it is possible to search a potentially intractable solution space for an optimal solution in an acceptable amount of time.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["200","200","214","216","218","220","222","224","200","228","226"]},"The initial COH  is the amount of cash on hand available (actual or hypothetical) immediately prior to when the genetic algorithm module  is used. In one embodiment, a user of the genetic algorithm module  manually inputs the initial COH . In another embodiment, the initial COH  is retrieved from a conventional relational or flat file database that is accessible to the genetic algorithm module . For example, many personal or business finance software applications, such as Intuit Inc.'s QuickBooks\u00ae and Quicken\u00ae, or Microsoft Corp.'s Money\u00ae use databases to store data pertaining to the user's cash balance. The COH may also be obtained, either manually or automatically, from the business's banking, such as through an online banking program. It is anticipated that the present invention in its embodiment as the genetic algorithm module  may be integrated into a business or personal finance software application, such as one of the foregoing applications.","The accounts payable information  includes a payment table having information relating to each of the payment obligations therein, such as payment due date, payment amount, payee (vendor) information, and late fees or penalties associated with the payment obligations in the accounts payable. The accounts payable information  also includes an account table having one or more accounts each corresponding to a billing matter and associated with one or more entries in the payment table. The accounts payable information  also includes a vendor table having one or more vendors each associated with one or more entries in the account table. The accounts payable information  may be provided manually by a user, or it may be obtained automatically by the genetic algorithm module  via appropriate connections with databases stored in personal or business finance application software or online information sources.","The manner in which the accounts payable information can be stored, and manner in which the genetic algorithm module  retrieves such information from external databases or online information sources is well understood by those of skill in the art. In one embodiment, the module  is integrated into a financial management application, an accounting application that stores the accounting information in a local or remotely accessible database; in this case, the module  has direct programmatic access to the accounts payable information . In another embodiment where the module  is independent of an accounting package, then it can obtain access to the accounts payable information  through an application programming interface, or even simple data importation. The particular details of how the accounts payable information  is obtained are not material to the operation of the invention.","The accounts receivable information  includes a receivables table having information regarding the due date, the amount of payments to receive, the payer, late fees or penalties associated with late payments, and the like. The accounts receivable information  may also be provided manually by a user, or it may be obtained automatically by the genetic algorithm module  via appropriate connections with databases stored in personal or business finance application software or online information sources. As with the accounts payable information , the manner in which the genetic algorithm module  retrieves such accounts receivable information  from external databases or online information sources is well understood by those of skill in the art, and the details are not material to the invention.","The tax information  includes relevant federal and state tax law information in the U.S. and tax law information of foreign countries to the extent they are relevant to the COH  and the cash flow plan  discussed herein. The tax information  includes the type of payments that are tax deductible, the maximum deduction amount, income tax rates, and the like. The tax information  may be stored as a set of tax rules, schedules, and associated tax computations, and may be manually or automatically provided.","The objectives  comprise the constraints that the genetic algorithm module  takes into consideration and attempts to optimize as it finds a solution for generating the cash flow plan . Those objectives  include, but are not limited to, minimizing late payment penalties, minimizing tax obligations or maximizing tax deductions, minimizing the number of check runs, minimizing the number of check sent to vendor, minimizing postage fees incurred in mailing the payments, and maximizing payments to important vendors or minimizing \u2018regret\u2019 for payments not made. Certain objectives  can be defined with respect to the COH. One of these objectives  is maximizing the minimum daily COH ; a second related object is maintaining the minimum daily COH above a predetermined threshold. In addition, each objective  is associated with a weight that describes the level of importance of the objective . The weight may be fixed or it may be provided by the user. The weight is applied to one or more objective functions that relate to the particular objective. Any other relevant data , such as potage or courier fee data, may be input as well, so long as it can be used to modify or adjust the operation of the objective functions, their input parameters, or the genetic algorithm module .","In one embodiment, the genetic algorithm module  comprises an initialization module , a scoring module , a selection module , a mating module , a mutation module , and a replacement module . The specific details of one implementation of these software modules will be explained below in conjunction with . The genetic algorithm module  finds a solution for maximizing the minimum daily COH  while optimizing the other objectives  and outputs the COH  on a daily basis along with a cash flow plan  describing when and what fraction of the amount of payment should be made for each payment obligation in the accounts payable  in order to maximize the minimum daily COH  while also optimizing the other objectives . Payments of the accounts payable  in accordance with the cash flow plan  will result in maximizing the minimum daily COH  while optimizing the user's objectives  according to user-specified weights. In generating the cash flow plan , the genetic algorithm module  assumes that 100% of the accounts receivable  will be received on the due date, according to one embodiment of the present invention. In another embodiment, the genetic algorithm module  assumes that only a predetermined fraction (e.g., 93 percent) of the amounts in the accounts receivable will be paid. In still another embodiment, the user may specify that a certain fraction of the amounts in the accounts receivable will be paid.","Functional Model",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 4","FIGS. 3 and 4","FIG. 2"],"b":"200"},"Referring to  and also , the operation begins  with the genetic algorithm module  receiving  input data such as the initial COH , accounts payable information , accounts receivable information , tax information , objectives and weights , and other relevant data . More specifically, and depending on the embodiment, the genetic algorithm module  retrieves the initial COH , accounts payable information , accounts receivable information , and tax information  from a database, such as a local database, or even a remote database, such as one maintained on the Internet by a financial services online provider, and stores the information locally. For obtaining the objectives and their weights , the genetic algorithm module  can provide the user with a graphical or textual user interface presenting each of the objectives and having the user rank order them in terms of importance, or use a sequence of pairwise comparisons to determine the user's implicit ranking, or provide the list of the objectives, along with a control for each to allow the user to set the weight (e.g., 1 to 10) of the objective, which are then internally normalized. In addition, the user can select which objectives  to satisfy and which to ignore (either by removing the objectives from the later computation process, or by giving such objectives a weighting of 0). Input of the initial COH  can likewise be made via a text or graphical user interface, when provided manually.","Initialization of Genome Population","Then, a genome population is initialized  by the initialization module . The genome population comprises a plurality of genomes. In the preferred embodiment, the genomes are in the form of vectors, though other data structures and implementations are certainly possible. An initial genome population of around  genomes is useful, but more or fewer can be used. In the context of the present invention the terms \u201cvector\u201d and \u201cgenome\u201d will be used interchangeably herein, but no limitation of genomes to a vector form of representation is intended. Each genome comprises a plurality of \u201calleles\u201d (otherwise referred to herein as \u201cgenes\u201d), one allele for each payment obligation in the accounts payable . Each allele corresponds to a payment obligation in the accounts payable  and has information from which the amount of payment and the date of payment for the obligation can be derived. In a preferred embodiment, this information is encoded as a fractional (percentage) amount of the corresponding payment obligation to be made and a date offset (number of days before or after) the payment due date.","The genomes and the alleles will be explained in more detail with reference to .  shows N genomes G,G, . . . , Geach of which has M alleles. For example, genome Ghas alleles g, g, g, . . . , g, and g. Likewise, genome Ghas alleles g, g, g, . . . , g, and g. The number of genomes N is determined so that the genetic algorithm of the present invention efficiently and thoroughly searches the solution space for an optimum cash flow plan . As stated above, the number of genomes N can be around . The number of alleles M in the genomes equals the number of payment obligations in the accounts payable  to be analyzed. In other words, each allele gin one genome corresponds to one payment obligation in the accounts payable . This may be all outstanding accounts payable, or any subset selected by the user. For example, the user may select only payments due in the next 60 days.","Each allele in the genomes G, G, . . . , Grepresents a percentage of the amount of the payment obligation to be paid and the number of days before or after the payment due date on which the payment should be made. In one embodiment, an allele  is represented by a 32-bit value and includes a date offset  (8 bits), and a payment percentage  (24 bits). It should be clear to one of skill in the art that other number of bits for the allele , the date offset , and the payment fraction  may be used.","The date offset  represents the number of days before or after the due date of a payment obligation that a payment should be made. The date offset  is an unsigned integer with a maximum unsigned value of 255 (2\u22121). In implementation, for any date offset of an allele, \u00bd integer of this maximum value (i.e., 127) is subtracted from the data offset to generate a signed value representing the actual number of days before or after the due date of a payment obligation. For example, a date offset of \u201c10000010\u201d (i.e., 130) represents a payment date of 3 days after the due date (130\u2212127=3). Likewise, a date offset of \u201c01111101\u201d (125) represents a payment date of 2 days prior to the actual due date (125\u2212127=\u22122). Since the genetic algorithm module  has the accounts payable information  containing the actual due date of each payment obligation, such date offset maybe readily translated into an actual payment date. Representing the payment date by a date offset  rather than by an actual date requires fewer bits for representing a payment date.","Representing the payment date by a date offset  rather than by an actual date prevents or weakens the problem of epistasis in genetic algorithms. Epistasis refers to the problem of one allele or gene suppressing another allele or gene in genetic algorithms due to the dependence of the physical order of the alleles or genes on the problem at hand. By representing the payment date by an offset rather than an actual date, the alleles of the genomes of the present invention are one level removed from the actual physical order of the payment dates, and thus epistasis is less likely to occur. Using a date offset allows the genetic algorithm to fully \u201cexplore\u201d the space of possible payment dates through random initialization, reproduction, and mating, without requiring any form of date verification, as would be the case with conventional date representation. The problem of epistasis and the advantage of using the date offset  to prevent epistasis may be clearly understood by the following example. Suppose a 32 bit word is used to store the actual payment date, allocating 4 bits for the month (which allows for not less than 12 months and up to 12 months), 5 bits for the day of the month (which allows for up to 32 days to be represented), and 12 bits for the year (allowing for the full year representation up to year 4096), for a total of 31 bits (with 1 unused bit). If this 32-bit word were evolved freely, invalid dates such as 13\/32\/2002 could be generated. Also dates very far into the future can be generated, which are far from optimal and retard the convergence of the genetic algorithm. This is a kind of local epistasis, i.e., bits within the allele affecting other bits within the allele. Global epistasis occurs in scheduling problems due to the optimality of \u201clater\u201d payments depending on the optimality of \u201cearlier\u201d payments. For example, if alleles 2\u2212M in a genome are near optimal but allele  becomes optimal, allele  may invalidate the optimality of alleles 2\u2212M by suddenly taking up all available COH to make a larger payment on time, resulting in the remaining M\u22121 payment obligations having no COH available and thus being late\/unpayable. The global epistasis problem can be alleviated by randomizing the alleles at the beginning of the genetic algorithm. Employing an indirect scheduling time representation, as is done with the date offset of the present invention, further decouples interdependence between the allele space and time, providing a second level of indirection and additionally weakening the global epistasis inherent in the problem of cash flow optimization.","The payment percentage  is used to represent the percentage of the amount of the corresponding payment obligation to be paid, ranging from 0% to 100%. There are many different ways in which this value can be represented in the allele. In one embodiment, the allele stores an unsigned integer that represents the numerator of a quotient equaling the percentage, with the implicit denominator being the maximum unsigned integer that can be stored in a certain number of bits used for the percentage  of the payable amount to be paid. Therefore, the resultant quotient will be a number in the range of 0.0 to 1.0 in floating point form, which represents the percentage of the corresponding payable to be paid. A very simple example will suffice: Assume that the maximum number of bits is 24 as shown in , in which case the implicit denominator is \u201c111111111111111111111111\u201d in binary form. Thus, a percentage  having a value \u201c00000000000000000000000\u201d in binary form ultimately represents \u201cl 00000000000000000000000\u201d divided by \u201c111111111111111111111111\u201d (approximately 50%), which corresponds to the percentage of the amount of the payment obligation to be paid. As this should make clear then, the actual value stored for the percentage  in the allele  does not necessarily have to be the actual percentage of the payable, but only a value from which the actual percentage an be calculated. The use of unsigned integers in the alleles  has an advantage that it also helps avoiding epistasis, which is the inherent problem in genetic algorithms whereby a particular way of genome representation inhibits a genetic algorithm from finding an optimum solution to a problem. By using the entire bit field to represent the space of possible numerators, the entire range of possible percentages between 0 and 100% can be most effectively explored by the genetic algorithm.","According to one embodiment, the genomes in the initial genome population are randomly generated. The genetic algorithm module  of the present invention utilizes a bit-string uniform procedure in randomly generating the genomes, by assigning 0 or 1 to each bit in a genome with equal probability. To this end, the genetic algorithm module  first chooses randomly a bit density d corresponding to each bit in the genome from a uniform distribution, wherein 0<=d<=1. Then, the genetic algorithm module  randomly sets each bit of each of the alleles  in a genome to one (1) with a probability of d corresponding to the bit. This will result in genomes evenly distributed in the binary space. It should be noted that this initialization is with respect to the entire genome treated as single bit string, and temporarily ignoring the separation of the individual alleles. Thus, for example, if each allele is represented by a 32-bit value, and there are 10 alleles, then the genome is treated as a 320-bit string during the initialization process. The values of each allele are then the values of each corresponding 32-bit word in the bit string.","Additionally, in accordance with another embodiment of the present invention, selected ones of the genomes in the initial genome population are initialized with predetermined values thereby giving structured data for the genetic algorithm module  to draw on. For example, including a genome of all zeros (0) and a genome of all ones (1) in the initial genome population will help the genetic algorithm module  to find solutions at the very ends of the solution space. Any number of other fixed genomes may be added to the initial population, though this is likely to affect the quality of the overall search of the solution space.","Determining Fitness of Genomes by Use of Objective Function","Thereafter, the fitness of the genomes in the genome population is determined  by the scoring module  to obtain a fitness score by using a composite objective function, respective objective functions and related objectives and weights . Determining the fitness of a genome is equivalent to determining how close the genome comes to optimizing or satisfying the specified objectives when the cash flow plan represented by the genome is applied to the accounts payable . The objectives themselves include maximizing the minimum daily COH .","According to one embodiment of the invention, the fitness scores of the genomes in the genome population are determined by (i) evaluating the genome in the genome population to determine the payments and dates corresponding to each payment obligation, and thus the results of each objective function O; (ii) obtaining a composite genome objective value Ofrom the weighted combination of the objective functions, using the weights associated with each objective function; and (iii) computing a fitness score F for each genome by applying a fitness function to the composite genome objective value Ocorresponding to each genome. The fitness function will be illustrated in detail below.","The composite genome objective value Ofor each genome in the genome population is calculated by first applying the evaluated genome to the accounts payable , and using the respective objective functions, to compute the objective values Ofor each underlying objective (COH, number of check runs, tax impact, postage fees, etc.). That is, for each objective, there is an objective function to which the cash flow plan defined by the genome is applied; the result of the each objective function is the objective value O. Then, the objective values Ofrom all of the objective functions are normalized and standardized to obtain normalized, standardized objective values Ofor each underlying objective. Finally, the normalized, standardized objective values Oare weighted and summed by a composite objective function to obtain a composite genome objective value Ocorresponding to the evaluated genome.","As illustrated in detail below, the objective values Ofor each underlying objective may be calculated by applying the evaluated genome to the accounts payable  to assess the impact of the cash flow plan represented by the evaluated genome upon the various objectives. Each objective is associated with an objective value O. The best (optimum) and worst objective values Oand Ocorresponding to each underlying objective can also be calculated by analyzing the nature of the underlying objective.","Also as illustrated in detail below, the objective values Ofor each underlying objective are normalized (to a value between 0 and 1) and standardized (optimal value is 0, worst value is 1) to generate normalized, standardized objective values O. Normalization and standardization of the objective values allow the different values\/scales of each objective value corresponding to different objectives (e.g., maximizing the minimum daily COH, minimizing the number of check runs, minimizing postage fees, etc.) to be summed together, because they are now unitless relative values, not dollar values or other objective-specific values any more.","The normalization and standardization of the objective values Omay be done in a different manner for different objectives by analyzing the nature of the objectives. For most objectives, the normalized, standardized objective value Ocan be computed by dividing the difference between the calculated objective value Oand the best (or desired) objective value Oby a normalization factor, which for most underlying objectives is the difference between the worst objective value Oand the best objective value O, i.e., by the formula O=|O\u2212O|\/|O\u2212O|. However, the normalization factor can be different from |O\u2212O| depending upon the type of objective to be optimized.","The following is an illustration of the manner in which O, O, Oand Oare computed for a given genome in the genome population for various objectives in accordance with one embodiment of the present invention. These objectives listed below are merely exemplary, and can include other objectives that are not listed herein.","Calculating the normalized, standardized objective value Ofor the objective of maximizing the minimum daily cash on hand: Here, Ois the minimum cash on hand that would be available if none of the payment obligations in the accounts payables  is paid, and Ois the minimum cash on hand that would be available if all the payment obligations in the accounts payables  are paid immediately on an initial day when the genetic algorithm of the present invention is run. Owill be equal to the initial COH , since it is assumed that none of the payables are paid, and thus the COH is not reduced at all. The value Ocan be obtained by subtracting all the payable amounts in the accounts payable  from the initial COH .","Ois the minimum daily COH when the genome G is applied to the accounts payable  (i.e., after payments of certain payment obligations on certain dates according to the allele values of the genome). The minimum daily COH can be determined by:\n\n","Calculating the normalized, standardized objective value Ofor the underlying objective of minimizing late payment penalties: Here, Ois zero (no late payment penalties) and Ois the sum of all late payment penalties associated with the payment obligations when all payment obligations are paid late. In another embodiment, Omay be a sum of a predetermined late fee and a predetermined percentage of the total payable amount. As stated above, the late payment information is also part of the accounts payable information , so the genetic algorithm module  may readily calculate Obased upon such information.","Ois the amount of late payment penalties to be paid when the evaluated genome is applied to the accounts payable . Each allele  in the evaluated genome is applied to each payment obligation in the accounts payable , and may incur a late payment fee if the payment date represented by the date offset  of the allele  is later than the due date depending upon the late payment penalties. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of maximizing tax deduction: Here, Ois the maximum amount of tax deduction available when all the payment obligations in the accounts payable  are tax deductible, and Ois zero (0) when none of the payment obligations in the accounts payable  is tax deductible. As explained previously, the appropriate tax law is input to the module as tax information . Ois obtained by applying the appropriate tax law to the cash flow plan  when the genome is applied to the accounts payable  to determine the amount that is tax deductible among the payments represented by the cash flow plan . The tax calculation can also be done by finance management applications such as Intuit Inc.'s QuickBooks\u00ae or Quickens\u00ae and Microsoft Corp.'s Money\u00ae. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of minimizing the number of check runs: Larger number of check runs in a given period typically result in larger costs in a business due to overhead such as check issuance fees. Thus, businesses prefer to minimize the number of check runs in a given period. Here, Ois 0 (no check runs), and Ois equal to the number of payment obligations in the accounts payable  (i.e., all payments are made in separate check runs). Ois obtained by counting the number of days on which any payment is made when the genome is applied to the accounts payable , since any payment on a given day would require a check run. For example, if after the payments are ordered by date, it turns out that all payments should be made on 5 different days, then Ois 5. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of minimizing the number of checks per vendor: Consolidating payments to the same vendor may reduce overhead caused by check issuance fees. For example, a payment obligation to the same vendor on two different dates may be consolidated to one payment in order to reduce the number of check runs. Thus, businesses prefer to minimize the number of check runs per vendor. Here, Ois 0 (no check runs for the vendor), and Ois equal to the number of payment obligations to a particular vendor (payee) in the accounts payable  (i.e., all payments to the particular vendor are made in separate payments).","Ois obtained by counting the number of days on which any payment is made to the particular vendor when the genome is applied to the accounts payable , since any payment to the particular vendor on a given day would require a check run. For example, if the genome represents that payments should be made on 3 different days to the particular vendor, then Ois 3. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|. Since the accounts payable  may include more than one vendor and each vendor corresponds to a separate number of check runs per vendor, there may be a more than one normalized, standardized objective value O\u2212O|\/|O\u2212O| corresponding to the objective of minimizing the number of check runs per vendor.","Calculating the normalized, standardized objective value Ofor the objective of minimizing the total postage fee: Every mailing of a check would require a postage fee or any other type of delivery fee (such as courier fee). Urgent mailings of payments generally require a higher postage fee such as a courier fee. Therefore, businesses generally prefer mailing a payment well in advance of a payment due date. Thus, this objective prefers a payment plan that results in making payments sufficiently prior to their due date to avoid extra postage fees. Here, Oequals the amount of postage fees when all the payments in the accounts payable  are mailed using the lowest available postage, and Oequals the amount of postage fees when all the payments in the accounts payable  are mailed using the most expensive postage (such as courier). Ois the amount of postage fee incurred when payments are made and mailed in accordance with the payment dates represented by the genome to be evaluated. Since the evaluated genome indicates the date of payment, it is possible to determine what type of postage is required for the payment to arrive prior to the payment due date when the payment is made on such date by using postage rate or courier fee information. The postage or courier fee information can be input to the genetic algorithm module 200 as other relevant data . The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of minimizing regret value: Regret value is a user-specified value assigned to each payment obligation in the accounts payable  and represents a degree of dislike for not fulfilling a certain payment obligation by the due date or in full. Businesses may have different business relations with different vendors, and thus would have different priorities in making payments to the vendors by the due date or in full. According to one embodiment of the present invention, the higher the regret value for a particular payment obligation is, the more disfavored the non-fulfillment of that payment obligation is, that is the more the user wishes to fulfill that payment obligation in full by the due date. Regret values can be input to the module  as one of the objectives , and are in the range of 0 to 1. Alternatively, each payment can be associated with a regret value, and stored in the under accounting information or database, such that this information can then be looked up when the genome is evaluated. Ois 0 (no regret) and Ois 1 (total regret, most disfavored non-payment). Ois the average regret value for all the payment obligations that are not paid in full (i.e., payment percentage is less than 100%) or paid after the due date (i.e., date offset is positive) when the evaluated genome is applied to the accounts payable . Ois calculated by (i) adding all the regret values resulting from payments that are to be paid later than the payment due date or that are not paid in full according to the evaluated genome to obtain a total regret value and (ii) dividing the total regret value by the number of payment obligations in the accounts payable . The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","After the standardized, normalized objective values for the respective underlying objectives are calculated for the evaluated genome, the composite genome objective value Ofor the evaluated genome can be obtained by the following composite objective function:",{"@attributes":{"id":"p-0059","num":"0063"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["O","comp"]},"mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","mrow":{"msub":[{"mi":["w","i"]},{"mi":["O","i"]}],"mo":"\u2062"}}}}},"br":{},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["Ois the normalized, standardized objective value for each objective;","wis a weight for each objective; and","n is the number of objectives to be optimized."]}}}},"The weights are importance levels (either predetermined or specified by the user) in the range of 0 to 1 and are normalized so that they add up to 1. Each weight corresponds to an objective. Since the O's are normalized and standardized values, a composite genome objective value Oof zero (0) is the best (optimum) value and one (1) is the worst value.","In the manner described above, the composite genome objective values O's corresponding to each the genomes in the genome population are determined. Thereafter, the fitness score F for each genome in the genome population is obtained by applying a fitness function to each composite genome objective value O. The fitness function is applied to the composite genome objective values in order to redistribute the genomes in the solution space such that the genomes are distributed in a way more effective for the genetic algorithm to explore. According to one embodiment of the present invention, the fitness score F for each genome in the genome population can be obtained by sigma truncation:\n\n\u2212()\n\nwhere\n\n","After the fitness scores of all the genomes in the genome population is calculated, it is determined  whether or not the termination criteria are satisfied. The termination criterion is one of two circumstances:\n\n","The user of the genetic algorithm module  can specify how nearly the objectives should be optimized by the cash flow plan  represented by the genomes. For example, the user can specify a threshold amount for the minimum daily COH, and when the minimum daily COH generated by the genome exceeds the threshold amount, the termination criterion is satisfied. Alternatively, the user can specify a threshold fitness score, and when the fitness score of at least one of the genomes in the genome population is lower than the threshold fitness score, the termination criterion is satisfied.","The number of generations limit for one genome population as the termination criteria is preferably set as 300, such that the genetic algorithm terminates when the number of generations of one genome population exceeds 50. According to another embodiment, another termination condition is used in conjunction with the maximum number of generations. Here, after the number of generations exceeds the maximum, then it is determined whether or not the ratio of the best fitness score in the first generation F to the best fitness score in the current generation Fe is smaller than 1, i.e., F\/Fc<=1. If this ratio is smaller than or equal to 1, then the genetic algorithm is terminated because this means that the fitness score is not getting better (i.e., not getting lower) for further generations. If the ratio is larger than 1 (i.e., F>Fc), then the genetic algorithm is not terminated because this means that the fitness score is getting better (i.e., getting lower) for further generations and it is worth trying the subsequent generations to find an optimum solution. In still another embodiment, after the number of generations exceeds the maximum, then it is determined whether or not the ratio of the F\/F<=1, where Fis the fitness score of the c-maxgeneration, max is the maximum number of generations, and Fc is fitness score of the current generation. In such embodiment, only the latest max generations are reviewed. If this ratio is smaller than or equal to 1, then the genetic algorithm is terminated because this means that the fitness score is not getting better (i.e., not getting lower) for further generations. If the ratio is larger than 1 (i.e., F>F), then the genetic algorithm is not terminated because this means that the fitness score is getting better (i.e., getting lower) for further generations and it is worth trying the subsequent generations to find an optimum solution.","If one of the termination criteria is satisfied , the results are reported  and the process is returned  to the user, when the genetic algorithm module  has satisfied  the goal of optimizing the objectives (including maximizing the minimum daily COH). If the goal is not satisfied , then it is determined  whether or not the execution time applicable to the entire genetic algorithm of the application has exceeded a certain limit. If so, then the process is returned  to the user with the current best results. If not, the process returns to initialize  the genome population again and restarts the genetic algorithm. According to one embodiment, a user imposes this time limit for the entire genetic algorithm of the application. In another embodiment, this time limit is predetermined in the genetic algorithm module  itself. The results returned to the user may be displayed to the user by using any form of user interface, such as a graphical user interface, textual report, and the like.","Selection of Genomes for Mating","If the termination criteria are not satisfied , the selection module  in the genetic algorithm module  proceeds to select  genomes for mating. The selection can be carried out by roulette wheel selection, tournament selection, or any other type of selection method typically used by genetic algorithms.","According to one embodiment of the present invention, roulette wheel selection is used to give every genome in the genome population a chance of mating, the chance of mating for each genome being proportional to the determined fitness score of each genome. To this end, the fitness score Ffor genomeis used as a threshold and a random number R in the range of 0 to 1 is selected. The genome is selected for mating if R>F. Otherwise the genome is skipped. Because very good genomes will have very low F's, R will more likely be greater than their fitness F. Very poor genomes are less likely to be picked since their fitness scores will be relatively higher. Roulette wheel selection is continued until the genetic algorithm module  has selected two mating genomes from the genome population.","According to another embodiment, tournament selection is used for selecting the mating genomes. Specifically, a first superior genome is selected from a first set of two randomly chosen genomes in the initial genome population. Then, a second superior genome is additionally selected from a second set of two randomly chosen genomes in the initial genome population. The first and second superior genomes are the selected genomes for mating. Superiority of each genome is determined based on the fitness score for each genome computed above. Tournament selection is continued until the genetic algorithm module  has selected two mating genomes from the genome population.","Mating Genomes to Create Offspring Genomes","Thereafter, the two selected genomes are mated  by the mating module  to create offspring genomes. According to one embodiment of the present invention, the selected genomes are mated by single-point crossover. Single-point crossover is performed by randomly selecting a common crossover point in a first mating genome and a second mating genome among the selected mating genomes. In one embodiment, the crossover point is at one of the boundaries of the alleles in the genome. The first mating genome has a first portion and a second portion divided by the common crossover point and the second mating genome also has a first portion and a second portion divided by the common crossover point. Then, the second portion of the first mating genome is replaced with the second portion of the second mating genome to create an offspring genome.","In another embodiment, two-point crossover is used for mating. Two-point crossover is performed by selecting two crossover points (here, boundaries of alleles), copying the part from the beginning of the genome to the first crossover point from the first mating genome, copying the part from the first to the second crossover point from the second mating genome, and copying the part from the second crossover point to the end of the genome from the first mating genome, so as to create an offspring genome. Two-point crossover has a higher crossover rate than single point crossover.","In still another embodiment, uniform crossover is used for mating. Uniform crossover is performed by randomly copying from either the first mating genome or the second mating genome to create an offspring genome. That is, the length of the genome is traversed and at each bit location a bit is copied into the offspring genome from either the first mating genome or the second mating genome, using a random selection function to select which parent genome's bit it copied into the offspring.","According to still another embodiment of the present invention, arithmetic crossover is used for mating. Arithmetic crossover is carried out by performing a certain arithmetic operation with the first and second mating genomes to create an offspring genome. For example, the first and second mating genomes represented can be added to obtain the offspring genome.","Mutating Offspring Genomes","Thereafter, the offspring genomes are mutated  at a low frequency by the mutation module . According to one embodiment of the present invention, the mutation rate is 0.01%, and this is implemented by selecting a single integer in the range of 1 to 10,000, and mutating only when a randomly selected number in the range equals the selected integer. Another approach is to set the mutation rate as the threshold itself, and mutate only if a randomly selected number is below the threshold. The low frequency mutation rate is selected such that it is high enough for the genetic algorithm to explore the solution space effectively but low enough to prevent destruction of information obtained during mating. Mutation is carried out by (i) selecting a bit in the offspring genome to mutate by random selection in a uniform distribution, and (ii) changing the selected bit in the offspring genome from zero (0) to one (1), or vice versa, according to the mutation rate. In another embodiment, mutation can also be carried out by (i) selecting a bit in the offspring genome to mutate by random selection in a uniform distribution, (ii) determining what value to change the selected bit also by random selection, and (iii) changing the selected bit according to the determined value.","Inserting Offspring Genomes into Genome Population","Thereafter, the offspring genomes are inserted  into the genome population and a new generation genome population is obtained based on a replacement strategy by the replacement module . In one embodiment, the replacement strategy adds the offspring genome to the initial genome population to obtain a modified genome population. Then, the fitness score of each genome in the modified genome population is determined in the manner described above. Thereafter, a first predetermined number or percentage of the worst vectors are removed from the modified genome population based upon the determined fitness of the modified genome population. Finally, a second predetermined number or percentage of the best vectors in the initial genome population are added to the modified genome population based upon the determined fitness of the initial genome population. For example, 25 worst\/best vector maybe selected, or alternatively the 10% worst\/best vectors. The resultant modified genome population is the new (next generation) genome population.","Then, the process returns to determine  the fitness of the new genome population as described above. The above process is repeated until the termination criteria are satisfied .","The genetic algorithm module  is able to search an enormous, non-linear search space with a number of inter-dependent variables to find a near optimal solution for optimizing or satisfying numerous objectives specified by the user. Numerous (possibly conflicting) objectives can be weighted by the importance levels and optimized at the same time. The objectives can include maximizing the minimum daily cash on hand. Moreover, the genetic algorithm module  is not limited to a certain type of payment and can be used with any type of payment obligations in the accounts payable . In addition, the solution can be found in an acceptable or interactive period of time, such as a few seconds to a few minutes.","It is also possible to use two or more of the genetic algorithm modules  at the same time in order to more efficiently find the optimum solution to the cash flow plan . One embodiment of the present invention uses two genetic algorithm modules , including an \u201cexploiting\u201d genetic algorithm and an \u201cexploring\u201d genetic algorithm. The exploiting genetic algorithm uses a mating method having a high crossover rate but will use a low mutation rate for mutation. This configuration allows this genetic algorithm to very effectively search the local space for better genomes. The exploring genetic algorithm uses a mating method having a low crossover rate but use a high mutation rate for mutation. This configuration allows the genetic algorithm to search over a very large amount of the entire solution space. If during any iteration, the exploring genetic algorithm finds a better solution than the exploiting genetic algorithm, the genome population in the exploring genetic algorithm is used to replace the genome population in the exploiting genetic algorithm and the exploring genetic algorithm is reinitialized. The population shift gives the exploiting genetic algorithm the \u2018better\u2019 population to search through, while the exploring genetic algorithm is redirected to evaluate a new portion of the solution space.","As a further refinement of this dual genetic algorithm approach, the relative amounts of processing time given to the exploring genetic algorithm and the exploiting genetic algorithm can be systematically varied. To begin with, the exploring genetic algorithm is given a majority portion of the available compute time, and the exploiting genetic algorithm is given a minority portion. As the number of iterations increases, the exploiting genetic algorithm is given progressively more time, and the exploring genetic algorithm is given progressively less; this change in processing time can be linear or non-linear. In this manner, the solution to the cash flow plan  optimizing the objectives  may be found in a more efficient manner, since the solution space is vigorously searched by the exploring genetic algorithm in the early stages of the process and then the solution is vigorously optimized by the exploiting genetic algorithm in the later stages of the process.","It is also possible to use multiple different genome populations as the initial genome populations and run them simultaneously according to the genetic algorithm, rather than use one initial genome population. For example, one embodiment of the present invention utilizes 10 genome populations in parallel. This would result in reduction of the time required for finding the solution but would also be a heavier computational burden on the computer that runs the genetic algorithm.",{"@attributes":{"id":"p-0080","num":"0093"},"figref":["FIG. 5","FIG. 5"],"b":["222","200","214"]},"Referring to , N genomes G, G, . . . , G, each of which has M+1 alleles, are shown. For example, genome Ghas alleles g, g, . . . , g, g, and an additional allele . Likewise, genome Ghas alleles g, g, . . . , g, gand an additional allele . The genomes G, G, . . . , Gin  are identical to the genomes described in , except that one additional allele (, , . . . , ) is present in each genome G, G, . . . , G. Each additional allele (, . . . ,, ) is comprised of 32 bits and represents a fraction (percentage) of the amount of cash in the sweep account that is needed in addition to the COH, in order to make payments according to the cash flow plan (payment plan) represented by the remaining M alleles in the evaluated genome. The additional allele (, , . . . , ) stores an unsigned integer that represents the numerator of a quotient equaling such percentage, with the implicit denominator being the maximum unsigned integer that can be stored in the 32 bits used for the percentage  of the sweep account. Therefore, the resultant quotient will be a number in the range of 0.0 to 1.0 in floating point form, which represents the percentage of the cash in the sweep account.","With the modified genome of the alternative embodiment of the present invention, it is possible to optimize the objective of minimizing the percentage of cash in the sweep account needed in order to make payments according to the cash flow plan as represented by the remaining M alleles in the evaluated genome. The normalized, standardized objective value Ofor the objective of minimizing the percentage of the cash in the sweep account need may be calculated as follows: Here, Ois 0% (none of the cash in the sweep account is needed), and Ois 100% (all of the cash in the sweep account is needed to fulfill the cash flow plan represented by the remaining M alleles in the evaluated genome). Ois the percentage of the cash in the sweep account as represented by additional allele (, , . . . , ). The normalized, standardized objective O=|O\u2212O|\/|O\u2212O|.","When the modified genome with the additional alleles (, , . . . , or ) is used with the genetic algorithm of the present invention, the amount of cash in the sweep account, as represented by the additional allele (, , . . . , or ), is added to the daily COH in the daily COH table calculated above to result in a modified COH table with modified COH values, and other objective values as described above are calculated using these modified COH values in the modified COH table. In this manner, the genetic algorithm module  of the present invention may generate a cash flow plan enabling the user to make daily cash payments exceeding the COH in the primary account while optimizing the objective of minimizing the amount of cash needed from the sweep account. Since the amount of cash available in the sweep account is input to the genetic algorithm module  as part of the initial cash on hand , the amount of cash represented by the additional allele (, , . . . , or ) may be readily converted to a cash amount to be transferred from the sweep account.","The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First, the particular naming of the components, capitalization of terms, the attributes, data structures, or any other programming or structural aspect is not mandatory or significant, and the mechanisms that implement the invention or its features may have different names, formats, or protocols. Further, the system may be implemented via a combination of hardware and software, as described, or entirely in hardware elements. Also, the particular division of functionality between the various system components described herein is merely exemplary, and not mandatory; functions performed by a single system component may instead be performed by multiple components, and functions performed by multiple components may instead performed by a single component.","Some portions of the above description present the feature of the present invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations, while described functionally or logically, are understood to be implemented by computer programs. Furthermore, it has also proven convenient at times, to refer to these arrangements of operations as modules or code devices, without loss of generality.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software, firmware or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. Furthermore, the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein, and any references to specific languages are provided for disclosure of enablement and best mode of the present invention.","Finally, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings of the present invention can be readily understood by considering the following detailed description in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
