---
title: Bitstream format and reading and writing methods and apparatus therefor
abstract: Image data having a bit depth of m bits, where m is not a power of two, may be divided into two parts for storage. The first part is the n most significant bits, where n is a power of two. The second part is the k least significant bits, where k=mâˆ’n and k<n. For example, 10-bit data may be separated into 8-bit and 2-bit parts. The 8-bit data for a given image is placed in the bitstream as a contiguous block with the end of the data aligned with a memory boundary, such as a page boundary. The 2-bit data is collected into bytes that are placed in the bitstream as a contiguous block. The block of 2-bit data is placed in the bitstream preceding and contiguous with the block of 8-bit data. Padding may be provided to align the beginning of the image data with a memory boundary. The image data for multiple images may be placed in the bitstream contiguously for storage. 10-bit data for an alpha channel, if any, also may be split into 8-bit and 2-bit parts. The 8-bit alpha data for a given image is placed in the bitstream as a contiguous block with the beginning of the data aligned with a memory boundary, such as a page boundary. The 2-bit alpha data is collected into bytes that are placed in the bitstream as a contiguous block. The block of 2-bit alpha data is placed in the bistream subsequent to and contiguous with the block of 8-bit alpha data. Padding may be provided to align the end of the alpha data with a page boundary. The alpha data for multiple images may be placed in the bitstream contiguously for storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07145567&OS=07145567&RS=07145567
owner: Avid Technology, Inc.
number: 07145567
owner_city: Tewksbury
owner_country: US
publication_date: 20030403
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Image data has multiple sampling resolutions. There is a temporal sampling rate, commonly called the frame rate, of motion picture data. Each image also has a vertical and horizontal sampling resolution indicating the number of individual elements, commonly called pixels, in the horizontal and vertical dimensions of the image. Each pixel typically is represented by a number of components to define a color. The components may represent luminance and chrominance (YCrCb, for example), or may represent color channels (red, green and blue, for example). A value for each component generally is represented using a number of bits called the bit depth. Typical bit depths used for images are eight bits, ten bits and sixteen bits.","High quality digital video processing systems often use a bit depth per component of ten bits. This bit depth provides a good tradeoff between quality and bandwidth and efficient implementation of processing functions in hardware. However, on a general-purpose computer, bit paths have a bit depth based on a power of two (e.g, eight, sixteen, thirty-two or sixty-four bits). Therefore, 10-bit data generally is converted to 16-bit data before it is processed by the computer. It would be inefficient however to transmit or to store the full sixteen bits.","Sometimes it is also desirable to process image data using a bit depth of only eight bits. An 8-bit representation may be obtained from a 10-bit representation by truncation or rounding. However, data would be lost if only eight bits were transmitted or stored.","To store 10-bit data on disk, techniques have been developed to pack the 10-bit data into data words having a bit depth based on a power of two (such as 8-bit and 32-bit words). For example, in U.S. Pat. No. 6,239,815, 10-bit YCrCb data for two pixels is packed into five bytes. Another commonly used packing format, referred to as \u201c10:10:10:2,\u201d is used, for example, in the OpenGL graphics system. OpenGL is a trademark of Silicon Graphics, Inc. In this format, three 10-bit values are stored in a 32-bit word, with two bits left unused. With this packed data, however, several operations are performed to extract either 8-bit or 10-bit data.","Image data having a bit depth of m bits, where m is not a power of two, may be divided into two parts for storage. The first part is the n most significant bits, where n is a power of two. The second part is the k least significant bits, where k=m\u2212n and k<n. For example, 10-bit data may be separated into 8-bit and 2-bit parts. The 8-bit data for a given image is placed in the bitstream as a contiguous block with the end of the data aligned with a memory boundary, such as a page boundary. The 2-bit data is collected into bytes that are placed in the bitstream as a contiguous block. The block of 2-bit data is placed in the bitstream preceding and contiguous with the block of 8-bit data. Padding may be provided to align the beginning of the image data with a memory boundary. The image data for multiple images may be placed in the bitstream contiguously for storage.","10-bit data for an alpha channel, if any, also may be split into 8-bit and 2-bit parts. The 8-bit alpha data for a given image is placed in the bitstream as a contiguous block with the beginning of the data aligned with a memory boundary, such as a page boundary. The 2-bit alpha data is collected into bytes that are placed in the bitstream as a contiguous block. The block of 2-bit alpha data is placed in the bistream subsequent to and contiguous with the block of 8-bit alpha data. Padding may be provided to align the end of the alpha data with a page boundary. The alpha data for multiple images may be placed in the bitstream contiguously for storage.","For storage, the alpha data may be stored in a data file that is separate from the data file that stores the image data. In that manner the alpha data need not be accessed if it is not to be processed. When the alpha data is to be processed, it can be read from the alpha data file and interleaved with the image data from the image data file in memory for efficient processing. Thus the image data and alpha data for each image are contiguous in the bitstream, and data for multiple images are contiguous in the bitstream.","By storing 10-bit data in such a format, packing is efficient. It also allows access to the 8-bit portion of a single image without any CPU, disk or memory bandwidth overhead. For access to multiple images, scatter\/gather operations by the operating system permit efficient access to the 8-bit portion of the image. The 10-bit data can be read and converted to 16-bit words, and vice versa, using scatter\/gather and simple shift operations. Data in this format also can be converted to and from sixteen bits per component with minimal processing overhead.","Accordingly, in one aspect, a computer information product includes a computer readable medium with data stored on the computer readable medium that, when interpreted by a computer, includes a bitstream including m-bit image data. The bitstream includes, for each frame of image data, a first data portion including n most significant bits of the m-bit image data for all pixels in the frame in a contiguous block. N is an integer and a power of two. A second data portion includes k least significant bits of the m-bit image data for all pixels in the frame in a contiguous block. K equals the difference between m and n. The first data portion ends on a memory page boundary. The second data portion precedes and is contiguous with the first data portion in the bitstream.","In another aspect, a method and computer program product reads a bitstream of m-bit image data. The bitstream includes, for each frame of image data, a first data portion including n most significant bits of the m-bit image data for all pixels in the frame in a contiguous block, and a second data portion including k least significant bits of the m-bit image data for all pixels in the frame in a contiguous block. N is an integer and a power of two. K equals the difference between m and n. The first data portion ends on a memory page boundary. The second data portion precedes and is contiguous with the first data portion in the bitstream. The method for reading involves accessing an n-bit representation for a single frame of image data. An offset and a size of the n-bit data for the single frame in the bitstream is determined. The offset is rounded down to the nearest memory boundary. The size is rounded up to the nearest boundary. A read operation is performed on the bitstream using the rounded offset and rounded size.","In another aspect, a method and computer program product writes m-bit image data into a bitstream. For each frame of the image data, memory for the bitstream is allocated. The n most significant bits of each m-bit value of the frame are gathered to provide n-bit values. N is an integer and a power of two. The gathered n-bit values are placed as a contiguous block in a first data portion of the bitstream in the allocated memory. The first data portion ends on a memory boundary. The k least significant bits of each m-bit value of the frame are gathered into n-bit words of the k-bit values. The n-bit words of k-bit values are placed as a contiguous block in a second data portion of the bitstream in the allocated memory. The second data portion precedes and is contiguous with the first data portion in the bitstream.","Image data having a bit depth of m bits, where m is not a power of two, may be divided into two parts for storage. The first part is the n most significant bits, where n is a power of two. The second part is the k least significant bits, where k=m\u2212n and k<n. In the following example, 10-bit data is separated into 8-bit and 2-bit parts.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","102","102","104","106","108","110"]},"The reading application  reads, in a manner described below, either a single frame or multiple frames of 8-bit image data or a single frame or multiple frames of 10-bit image data from the bitstream. The reading application  provides the read image data  to an image processing application .","The image processing application  performs operations on the image data to produce processed image data . For example, such image processing operations may include, but are not limited to, operations for combining images, such as compositing, blending, and keying, or operations within an image, such as resizing, filtering, and color correction, or operations between two images, such as motion estimation. The results of such image processing operations may be image data in a 10-bit format or may be in another format. The image processing application also may be an application that captures and\/or creates digital image data, without using any input image data. The image processing application also may manipulate metadata about the image data, for example to define a sequence of scenes of motion video information. The image processing application also may playback image data in one or more formats, without providing any output data.","Although  shows only one image processing operation, there may be multiple image processing operations that may operate in parallel on the data or may operate as a sequence of operations. There are a variety of ways in which an image processing operation may process image data, and the invention is not limited thereby. As an example, the reading application and\/or the image processing application and\/or the writing application may be part of a larger application for editing video information and may access the image data in the same buffer in memory. As another example, the reading application and\/or image processing application and\/or the writing application may \u201cplug-in\u201d to an editing application that permits access to image data in memory through an application programming interface (API). The reading and writing applications may be implemented in hardware that is accessed by the image processing application.","Referring now to , the 8-bit data for a given image is placed in the bitstream as a contiguous block  with the end  of the data aligned with a memory boundary, such as a page boundary. The 2-bit data is collected into bytes that are placed in the bitstream as a contiguous block . The block of 2-bit data is placed in the bitstream preceding and contiguous with the block  of 8-bit data. Padding  may be provided to align the beginning of the image data with a memory boundary. The image data for multiple images may be placed in a bitstream contiguously for storage.","10-bit data for an alpha channel, if any, also may be split into 8-bit and 2-bit parts. The 8-bit alpha data for a given image is placed in the bitstream as a contiguous block  with the beginning  of the data aligned with a memory page boundary. The 2-bit alpha data is collected into bytes that are placed in the bitstream as a contiguous block . The block of 2-bit alpha data is placed in the bistream subsequent to and contiguous with the block  of 8-bit alpha data. Padding  may be provided to align the end of the alpha data with a memory boundary. The alpha data for multiple images may be placed in a bitstream contiguously for storage.","For storage, the alpha data may be stored in a data file that is separate from the data file that stores the image data. In that manner the alpha data need not be accessed if it is not to be processed. When the alpha data is to be processed, it can be read from the alpha data file and interleaved with the image data from the image data file in memory for efficient processing. Thus the image data and alpha data for each image are contiguous in the bitstream, and data for multiple images are contiguous in the bitstream.","Data is continguous in a bitstream if the offset and size of one block of data in the bitstream can be used to determine the offset of another block of data that is contiguous with it in that bitstream. Contiguous does not mean that data are stored in adjacent storage locations in any storage medium. Each block of data may have header and\/or footer information stored in the block. The presence of such headers and footers does not affect whether blocks of data are contiguous.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 2"],"b":["300","302","304","306"]},"For example, assume an image has a total active image data size of 5184000 bytes. Assuming a page size of 4096 (4K) bytes, the total size of the data is 5185536 bytes. Therefore, the block of data representing the image includes padding of 1536 bytes, 2-bit data of 1036800 bytes and 8-bit data of 4147200 bytes. The offset of the 8-bit portion is the sum of the padding size and the 2-bit data size, thus, 1038336 bytes. The offset for the read operation is the 8-bit offset less that offset modulo 4096, and thus 1036288. The size for the read operation is the 8-bit size plus the 8-bit offset modulo 4096, and thus 4149248. Thus, 2048 bytes at the beginning of the read data is discarded. Any alpha information for the image is not read.","If there is alpha information, the 8-bit alpha information for a single frame may be accessed in the following way. A read operation starts reading at the beginning of the 8-bit alpha information for the image. The size of the read operation is the size of the 8-bit alpha information, rounded up to the nearest page size. The difference between the read size and the actual size of the 8-bit alpha information indicates the amount of data to discard at the end of the read data. The beginning of the 10-bit alpha information may be placed in a bitstream contiguous with the end of the 10-bit image data.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":["400","402","404","406","408"]},"If there is alpha information, the 10-bit alpha information for a single frame may be accessed in a similar manner. A read operation starts reading at the beginning of the 8-bit alpha information. The entire amount of 8-bit alpha, 2-bit alpha and padding data for the frame is read into a buffer. The 8-bit and 2-bit alpha data is processed into 10-bit data represented as 16-bit integers in the same manner as the 8-bit and 2-bit image data. The beginning of the 10-bit alpha information may be placed in a bitstream contiguous with the end of the 10-bit image data.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 5","FIG. 3"]},"More particularly, the offset and size of the first frame of 8-bit data in the bitstream, to the nearest page boundary, is determined () in the same manner as described above in connection with . For each subsequent frame, the offset and size of the 8-bit data is determined (). The offset and size of the padding and 2-bit data of that frame also is determined (). These computations (, ) are repeated () until the offset and size of the 2-bit and 8-bit data for all frames has been determined. A list of offsets and sizes for 8-bit and 2-bit data is then built (). This list is provided as a parameter to a scatter\/gather read operation request () to the operating system. The operating system is requested in particular to direct the padding and 2-bit data to the same memory locations to discard it.","If there is alpha information in a separate data file, and the alpha information is not being used, it can be ignored. If there is alpha information in a separate data file, and the 8-bit alpha information is being used, then the offset and size in the bitstream of each part of the alpha information also is determined. This information is added to the scatter\/gather list to instruct the operating system to read the 8-bit alpha information into appropriate buffers interleaved with the 8-bit image data. This information also is used in the scatter\/gather list to instruct the operating system to discard the 2-bit alpha information and padding during a read operation in the same manner that the 2-bit image data or padding is discarded.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 6","FIG. 4"],"b":["600","602","604","606","608","600","602","604","606","608","610"]},"If there is alpha information in a separate data file, and the alpha information is not being used, it can be ignored. If there is alpha information in a separate data file, and alpha information is being used, then the alpha information is read and processed in the same manner as the image data using the scatter\/gather list to interleave the image data and the alpha data in memory. The alpha data also may be converted into 10-bit data represented using 16-bit integers.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7","b":["700","702","704","706"]},"Any alpha information may be processed in a similar manner. In particular, 8-bit portions of alpha information may be gathered and placed in a first alpha portion at the beginning of a buffer in a bitstream. The 2-bit portions of the alpha information are gathered and placed in a second alpha portion in the bitstream after the 8-bit alpha portion. Padding or header\/footer information is then placed in the buffer to the end of the buffer. The alpha data for multiple images are placed contiguously in the bitsteam and may be stored in a file separate from the image data.","The various components of the system shown in , and the flowcharts of , may be implemented as a computer program using a general-purpose computer system. Such a computer system typically includes a main unit connected to both an output device that displays information to a user and an input device that receives input from a user. The main unit generally includes a processor connected to a memory system via an interconnection mechanism. The input device and output device also are connected to the processor and memory system via the interconnection mechanism.","One or more output devices may be connected to the computer system. Example output devices include, but are not limited to, a cathode ray tube (CRT) display, liquid crystal displays (LCD) and other video output devices, printers, communication devices such as a modem, and storage devices such as disk or tape. One or more input devices may be connected to the computer system. Example input devices include, but are not limited to, a keyboard, keypad, track ball, mouse, pen and tablet, communication device, and data input devices. The invention is not limited to the particular input or output devices used in combination with the computer system or to those described herein.","The computer system may be a general purpose computer system which is programmable using a computer programming language, such as \u201cC++,\u201d Visual Basic, JAVA or other language, such as a scripting language or even assembly language. The computer system may also be specially programmed, special purpose hardware. In a general-purpose computer system, the processor is typically a commercially available processor, such as various processors available from Intel, AMD, Cyrix, Motorola, and IBM. The general-purpose computer also typically has an operating system, which controls the execution of other computer programs and provides scheduling, debugging, input\/output control, accounting, compilation, storage assignment, data management and memory management, and communication control and related services. Example operating systems include, but are not limited to, the UNIX operating system and those available from Microsoft and Apple Computer.","A memory system typically includes a computer readable medium. The medium may be volatile or nonvolatile, writeable or nonwriteable, and\/or rewriteable or not rewriteable. A memory system stores data typically in binary form. Such data may define an application program to be executed by the microprocessor, or information stored on the disk to be processed by the application program. The invention is not limited to a particular memory system.","A system such as described above may be implemented in software or hardware or firmware, or a combination of the three. The various elements of the system, either individually or in combination may be implemented as one or more computer program products in which computer program instructions are stored on a computer readable medium for execution by a computer. Various steps of a process may be performed by a computer executing such computer program instructions. The computer system may be a multiprocessor computer system or may include multiple computers connected over a computer network. The components shown in  may be separate modules of a computer program, or may be separate computer programs, which may be operable on separate computers. The data produced by these components may be stored in a memory system or transmitted between computer systems.","Having now described an example embodiment, it should be apparent to those skilled in the art that the foregoing is merely illustrative and not limiting, having been presented by way of example only. Numerous modifications are within the capabilities of one of ordinary skill in the art and are contemplated as falling within the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
