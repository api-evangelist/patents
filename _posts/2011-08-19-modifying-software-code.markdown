---
title: Modifying software code
abstract: A computer-implemented method for modifying software code includes: processing a command to modify a first module of software code stored on a production system in a distributed computing environment, where the software code includes a first plurality of data objects and a first plurality of notes; generating at least one queue comprising the second plurality of notes; modifying a second module of software code stored on a development system in the distributed computing environment with the second plurality of notes, where the second module of software code comprising a version of the first module of software code; and transferring the second module of software code to the production system to modify the first module of software code such that the first plurality of notes are modified by the second plurality of notes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667477&OS=08667477&RS=08667477
owner: SAP AG
number: 08667477
owner_city: Walldorf
owner_country: DE
publication_date: 20110819
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","TECHNICAL BACKGROUND","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority under 35 U.S.C. \u00a7119 to U.S. Provisional Patent Application Ser. No. 61\/460,759, filed on Dec. 30, 2010, and entitled \u201cModifying Software Code,\u201d the entire contents of which are incorporated by reference as if fully set forth herein.","This disclosure relates to upgrading software systems and, more particularly, to automatically upgrading software systems with varying versions of software present on the upgraded systems.","Software applications often require extensive maintenance throughout the lifecycle of the application. Changes, however, to the application by a customer or developer outside of the original code developed by the software manufacturer may complicate the maintenance efforts. To support the maintenance effort while also staying current with changes made by the customer or developer, specially designed tools may be used to ensure that the latest updates or upgrades to the software application may be made without disturbing the customer's customizations. This may be especially true for enterprise software, where customers are expected to customize the application to reflect its own business processes by, for example, creating their own application settings.","Further complicating matters is the desirability for maintaining a secure, business-critical productive environment in which the software application executes. For example, security concerns may warrant first applying any updates or upgrades to the software application outside of the productive environment. The changes may then be tested to ensure compatibility and workability before being made to the productive environment.","Another concern is that updates and upgrades to the software application may be preferably performed during downtimes rather than mission-critical time periods of application use by the customer. System downtime during an update or upgrade may need to be predictable. Any unexpected interruption of the procedure can ruin the downtime management of the customer. In addition, system inconsistencies caused by errors in the delivery of the update or upgrade should be prevented proactively.","In one general embodiment, a computer-implemented method for modifying software code includes the following steps performed by one or more processors: processing a command to modify a first module of software code stored on a production system in a distributed computing environment, where the software code includes a first plurality of data objects and a first plurality of notes; generating at least one queue comprising a second plurality of notes; modifying a second module of software code stored on a development system in the distributed computing environment with the second plurality of notes, where the second module of software code comprising a version of the first module of software code; and transferring the second module of software code to the production system to modify the first module of software code such that the first plurality of notes are modified by the second plurality of notes.","One or more specific aspects of this general embodiment may further include: transmitting a request for a development user to an administrator of the development system; receiving the requested development user; and verifying the received development user.","One or more specific aspects of this general embodiment may further include: generating a control file comprising the second plurality of notes; verifying the control file to determine whether the second plurality of notes is incomplete; and delivering the verified control file to the development system to generate the at least one queue.","One or more specific aspects of this general embodiment may further include: verifying the at least one queue comprising the second plurality of notes; based on the verification, creating an update request comprising the at least one queue; and exporting the update request to the development system.","One or more specific aspects of this general embodiment may further include: asking for an update request; receiving the update request; and verifying the update request.","In one or more specific aspects of this general embodiment, modifying a second module of software code stored on a development system in the distributed computing environment with the second plurality of notes may include modifying the second module of software code stored on a source repository of the development system.","One or more specific aspects of this general embodiment may further include: modifying a third module of software code stored on a shadow repository in the distributed computing environment with the second plurality of notes, the second module of software code comprising a version of the first module of software code.","In one or more specific aspects of this general embodiment, generating at least one queue including the second plurality of notes may include exposing an API.","The present disclosure also provides a computer-readable, non-transitory storage medium coupled to one or more processors and having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.","The present disclosure further provides a system for implementing the methods provided herein. The system includes at least a server including one or more processors, and a computer-readable storage medium coupled to the one or more processors having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.","Various embodiments of and including an application update tool may include one or more of the following features or advantages. For example, the update tool may facilitate the application of an update or upgrade to a particular software system automatically. The update tool may also facilitate the automatic application of the update or upgrade to a particular repository among several repositories of the software system, such as a target repository. The update tool may thus minimize if not substantially prevent inconsistencies in the software application through error corrections, thereby minimizing stopped processes in a productive environment of the software system. The update tool may also facilitate performance improvements without extending the downtime by manual interaction from the administrator. As yet another example, the update tool may enable the update or upgrade to react correctly to the repository level present at the customer system in different phases of the procedure. Further, the update tool may verify the update or upgrade through a registration process prior to it being added to an update or upgrade procedure.","These general and specific aspects may be implemented using a device, system or method, or any combinations of devices, systems, or methods. Put differently, while generally described as computer implemented software that provides for test seams of software code to be tested, some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","100","100"]},"The illustrated distributed computing system  includes or is communicably coupled with server  and one or more enterprise systems, such as the illustrated enterprise system , at least some of which communicate across network . In general, distributed computing system  depicts an example configuration of a system capable of updating and\/or upgrading an enterprise software system with an update tool . The distributed computing system  also supports one or more servers  (e.g., servers located at, or controlled by or under the direction of a software provider or software servicer) operable to provide a set of services to the enterprise system  in which the one or more servers can be logically grouped and accessible within a cloud computing network. Accordingly, a unified runtime framework and graphical, process-centric user interface may be provided to an enterprise system  or server  as an on-demand solution through the cloud computing network or as a traditional server-client system.","The enterprise system , at a high level, includes a development system  and a productive system  communicably coupled to the network  (and thus the server  and other servers and, possibly, other enterprise systems) through an interface . In some embodiments, the enterprise system  may include additional systems besides the development system  and the productive system , such as, for example, a quality assurance system (not shown here). Moreover, in some embodiments, the development system  may include all or a portion of such a quality assurance system, which, in some aspects, may perform and\/or facilitate quality assurance testing on any changes to software on or associated with the enterprise system . For instance, changes (e.g., updates and\/or upgrades) to enterprise or business applications on the enterprise system , such as enterprise application , may first be made in the development system  and then transferred or copied to the quality assurance system for testing prior to being introduced in the productive system. As described in more detail below, the enterprise system  also includes a source repository , a shadow repository , and a target repository  communicably coupled to each development system  and productive system  through a transport service . More specifically, each development system  and\/or productive system  within the enterprise system  may have access to a unique set of repositories , , and . Thus, for each system  and\/or , the repositories may be changed in setup over time starting, for example, with a source repository, then a shadow repository that exists in parallel, and ending with a target repository.","The server , generally, is any server that stores one or more hosted applications , where at least a portion of the hosted applications  are executed via requests and responses sent to users or clients within and communicably coupled to the illustrated distributed computing system  of . For example, server  may be a Java 2 Platform, Enterprise Edition (J2EE)-compliant application server that includes Java technologies such as Enterprise JavaBeans (EJB), J2EE Connector Architecture (JCA), Java Messaging Service (JMS), Java Naming and Directory Interface (JNDI), and Java Database Connectivity (JDBC). In some instances, the server  may store a plurality of various hosted applications , while in other instances, the server  may be a dedicated server meant to store and execute only a single hosted application  or other applications. In some instances, the server  may comprise a web server or be communicably coupled with a web server, where the hosted applications  represent one or more web-based applications accessed and executed via network  by the enterprise system  to perform the programmed tasks or operations of the hosted application .","At a high level, the server  comprises an electronic computing device operable to receive, transmit, process, store, or manage data and information associated with the distributed computing system . The server  illustrated in  can be responsible for receiving application requests from one or more software applications on or associated with the enterprise system , such as an enterprise application  or other or business applications associated with additional enterprise systems of distributed computing system , and responding to the received requests by processing said requests in the associated hosted application , and sending the appropriate response from the hosted application  back to the requesting enterprise application . Alternatively, the hosted application  at server  can be capable of processing and responding to local requests from a user accessing server  locally. Accordingly, in addition to requests from the enterprise system  illustrated in , requests associated with the hosted applications  may also be sent from internal users, external or third-party customers, other automated applications, as well as any other appropriate entities, individuals, systems, or computers. Further, the terms \u201centerprise application\u201d and \u201cbusiness application\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure.","As used in the present disclosure, the term \u201ccomputer\u201d is intended to encompass any suitable processing device. For example, although  illustrates a single server , distributed computing system  can be implemented using two or more servers , as well as computers other than servers, including a server pool. Indeed, server  may be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), Macintosh, workstation, UNIX-based workstation, or any other suitable device. In other words, the present disclosure contemplates computers other than general purpose computers, as well as computers without conventional operating systems. Further, illustrated server  may be adapted to execute any operating system, including Linux, UNIX, Windows, Mac OS, or any other suitable operating system. According to one embodiment, server  may also include or be communicably coupled with a mail server.","The interface  is used by the server  for communicating with other systems in a client-server or other distributed environment (including within distributed computing system ) connected to the network  (e.g., enterprise system , as well as other systems communicably coupled to the network ). Although  depicts a server-client environment, other implementations of the runtime environment for testing one or more CUT modules utilizing the test framework  and one or more test seams. For example, the runtime environment may be provided or accessed locally at a computer. Generally, the interface  comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with the network . More specifically, the interface  may comprise software supporting one or more communication protocols associated with communications such that the network  or interface's hardware is operable to communicate physical signals within and outside of the illustrated distributed computing system .","Generally, example server  may be communicably coupled with a network  that facilitates wireless or wireline communications between the components of the distributed computing system  (i.e., between the server  and enterprise system  as well as other enterprise systems), as well as with any other local or remote computer, such as additional clients, servers, or other devices communicably coupled to network  but not illustrated in . In the illustrated environment, the network  is depicted as a single network in , but may be comprised of more than one network without departing from the scope of this disclosure, so long as at least a portion of the network  may facilitate communications between senders and recipients. The network  may be all or a portion of an enterprise or secured network, while in another instance at least a portion of the network  may represent a connection to the Internet. In some instances, a portion of the network  may be a virtual private network (VPN), such as, for example, the connection between the enterprise system  and the server . Further, all or a portion of the network  can comprise either a wireline or wireless link. Example wireless links may include 802.11a\/b\/g\/n, 802.20, WiMax, and\/or any other appropriate wireless link. In other words, the network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated distributed computing system . The network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. The network  may also include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the Internet, and\/or any other communication system or systems at one or more locations. The network , however, is not a required component of the present disclosure.","In the illustrated implementation, and as shown in , each of the server , the development system , and the productive system  include or are communicably coupled with a processor , a memory , and a Graphical User Interface (GUI) .","Each of the GUIs  comprise a graphical user interface operable to, for example, allow the user of the server  (or development system  or productive system ) to interface with at least a portion of the platform for any suitable purpose, such as creating, preparing, requesting, or analyzing data, as well as viewing and accessing source documents associated with business transactions. Generally, the GUI  provides the particular user with an efficient and user-friendly presentation of business data provided by or communicated within the system. The GUI  may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, buttons, and other controls operated by the user. For example, GUI  may provide interactive elements that allow a user to enter or select elements of business process instances in GUI . More generally, GUI  may also provide general interactive elements that allow a user to access and utilize various services and functions of hosted applications . The GUI  is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g., site or micro-site). Therefore, the GUI  contemplates any suitable graphical user interface, such as a combination of a generic web browser, intelligent engine, and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","Although illustrated as a single processor  in certain components shown in , two or more processors may be used according to particular needs, desires, or particular embodiments of distributed computing system . Each processor  may be a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), or another suitable component. Generally, the processor  in the server  executes instructions and manipulates data to perform the operations of server  and, specifically, the one or more plurality of operations of the hosted application  and the update tool . Specifically, the server's processor  executes the functionality required to receive and respond to requests from the enterprise system  and its respective business applications, such as business application , as well as the functionality required to perform the other operations of the hosted application . The processors  in the development system  and the productive system  execute instructions and manipulate data to perform the operations of the respective systems and, specifically, the one or more plurality of operations of the enterprise application , as well as any other software.","Regardless of the particular implementation, \u201csoftware\u201d may include computer readable instructions, firmware, wired or programmed hardware, or any combination thereof on a non-transitory, tangible medium operable when executed to perform at least the processes and operations described herein. Indeed, each software component may be fully or partially written or described in any appropriate computer language including C, C++, Java, Visual Basic, Assembler, Perl, any suitable version of 4GL, as well as others. It will be understood that while portions of the software illustrated in  are shown as individual modules that implement the various features and functionality through various objects, methods, or other processes, the software may instead include a number of sub-modules, third party services, components, libraries, and such, as appropriate. Conversely, the features and functionality of various components can be combined into single components as appropriate.","At a high level, each of the one or more hosted applications , enterprise application , and\/or update tool  is any application, program, module, process, or other software that may execute, change, delete, generate, or otherwise manage information according to the present disclosure. In certain cases, only one hosted application  may be located at a particular server . In others, a plurality of related and\/or unrelated hosted applications  may be stored at a single server , or located across a plurality of other servers , as well. In certain cases, distributed computing system  may implement a composite hosted application . For example, portions of the composite application may be implemented as Enterprise Java Beans (EJBs) or design-time components may have the ability to generate run-time implementations into different platforms, such as J2EE (Java 2 Platform, Enterprise Edition), ABAP (Advanced Business Application Programming) objects, or Microsoft's .NET, among others. Additionally, the hosted application  and\/or enterprise application  may represent web-based applications accessed and executed by the enterprise system  via the network  (e.g., through the Internet). Further, while illustrated as internal to server  and the enterprise system , respectively, one or more processes associated with a particular hosted application  and\/or enterprise application  may be stored, referenced, or executed remotely. For example, a portion of a particular hosted application  and\/or enterprise application  may be a web service associated with the application that is remotely called, while another portion of the hosted application  and\/or enterprise application  may be an interface object or agent bundled for processing at a remote enterprise system . Moreover, any or all of the hosted applications  and\/or enterprise application  may be a child or sub-module of another software module without departing from the scope of this disclosure. Still further, portions of the hosted application  and\/or enterprise application  may be executed by a user working directly at server , as well as remotely at enterprise system .","As illustrated, processor  can also execute the update tool . As explained more fully below, the update tool , in some embodiments, may implement a systematic procedure to automatically apply one or more corrections to an upgrade and\/or update to the enterprise software , thereby preventing inconsistencies and stopped processes and providing performance improvements without extending downtime of the enterprise application . For example, the update tool  may automatically apply corrections in form of notes without requiring manual interaction from an administrator of the enterprise system  to take account of customizations or changes made to the enterprise application  after the original delivery of the application  from the software provider. In some embodiments, as explained more fully below, the update tool  may execute multiple repository levels (e.g. three levels) to reach a target release of the enterprise application . For instance, one repository level may be a present enterprise system repository\u2014also called source repository. Secondly, there may be a shadow repository, such as a fixed repository (e.g., a DVD or other tangible media) in case of an application update or a clone repository based on the source repository in the case of a new version of the enterprise application  (i.e., upgrade). There may also be a target repository, which results from adding extensions and corrections to the shadow repository.","In general, each component of the distributed computing system  (e.g., the server , the development system , and the productive system ) includes memory  for storing data and program instructions. Memory  may include any memory or database module and may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), removable media, or any other suitable local or remote memory component. Memory  may store various objects or data, including classes, frameworks, applications, backup data, business objects, jobs, web pages, web page templates, database tables, repositories storing business and\/or dynamic information, and any other appropriate information including any parameters, variables, algorithms, instructions, rules, constraints, or references thereto associated with the purposes of the server  and its one or more hosted applications , as well as the development system  and productive system  and the enterprise application .","Memory  may also store data objects, for example, all or portions of the update corrections  in the server . The update corrections , in some embodiments, may be delivered to the enterprise system  by the update tool  in order to automatically update and\/or upgrade the enterprise application . Further, in some aspects, the update corrections  may make or correct, among other errors and\/or issues with the enterprise application , product errors, product modifications, product upgrades, consulting notes, customizing notes, program corrections, code corrections, methods for table\/field additions, customization changes, and otherwise. In short, the update corrections  may be applied to the code, data, objects, and other portions of the enterprise application .","The productive system  of the enterprise system , as illustrated, includes one or more internal clients . Internal client  may be any computing device operable to connect to or communicate with the productive system  (or other system within the enterprise system  or computer or system external to the enterprise system ) using a wireline or wireless connection. For example, internal clients  may be a part of the business enterprise that owns, controls, and\/or operates the enterprise system  that operates and\/or executes the enterprise application  stored on or associated with the productive system . Further, while illustrated internal to the enterprise system , one or more internal clients  may be located external to the enterprise system . For example, distributed computing system , as illustrated, includes one or more external clients  communicably coupled to one or more of the server  and\/or enterprise system  through network . External clients , in some aspects, may be clients not associated with, owned, or controlled by the business enterprise that controls, owns, and\/or operates the enterprise system . Alternatively, external clients  may be similar to the internal clients  illustrated as internal to the enterprise system . In any event, there may also be one or more additional clients  (or ) external to the illustrated portion of distributed computing system  that are capable of interacting with the distributed computing system  via the network . Further, the terms \u201cclient\u201d and \u201cuser\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover, while each internal client  and\/or external client  is described in terms of being used by a single user, this disclosure contemplates that many users may use one computer, or that one user may use multiple computers.","As used in this disclosure, each of the development system , the productive system , and the clients  and  are intended to encompass a personal computer, touch screen terminal, workstation, server, network computer, kiosk, wireless data port, smart phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device. For example, each of the development system  and the productive system  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept user information, and an output device that conveys information associated with the operation of the server  (and hosted application ) or the enterprise system  itself, including digital data, visual information, or the enterprise application . Both the input and output device may include fixed or removable storage media such as a magnetic storage media, CD-ROM, or other suitable media to both receive input from and provide output to users of enterprise system  through the display, namely, the GUIs .","As illustrated, the enterprise system  also includes a transport service  communicably coupling the development system , the productive system  (as well as other systems not shown) with sets of repositories, including a source repository , a shadow repository , and a target repository . More specifically, as illustrated, each of the development system , the productive system  may be communicably coupled to a unique set of repositories including a source repository , a shadow repository , and a target repository .","At a high level, the transport service  may be any communication mechanism to facilitate data transfer between the illustrated components of the enterprise system . For example, the transport service  may be all or a portion of an enterprise or secured network, while in another instance a connection to the Internet. In some instances, a portion of the transport service  may be a virtual private network (VPN) and can comprise either a wireline or wireless link. The transport service  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information, such as, for example, the update corrections , all or a portion of an updated or upgraded version of the enterprise application , or other application. The transport service  may also include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the Internet, and\/or any other communication system or systems at one or more locations.","A source repository  within a unique set of repositories may be communicably coupled to a particular one of the development system  or the productive system  through the transport service  or by other techniques. The source repository , as illustrated, includes or stores source content . In some aspects, the source content  may be a current version of a software system, such as, for example, the enterprise application  stored on and\/or executed on the development system  and the productive system .","A shadow repository  within a unique set of repositories may also be communicably coupled to a particular one of the development system  or the productive system  through the transport service  or by other techniques. The shadow repository , as illustrated, includes or stores shadow content . In some aspects, the shadow content  may be an update or upgrade to the current version of a software system located on the enterprise system , such as, for example, the enterprise application . For example, in some embodiments, such as when the shadow content  is an upgrade to the enterprise application , the shadow repository  may be a fixed repository delivered to the enterprise system , e.g., by DVD or other media. In some embodiments, such as when the shadow content  is an update to the enterprise application , the shadow repository  may be a clone of the source repository .","A target repository  within a unique set of repositories may also be communicably coupled to a particular one of the development system  and or the productive system  (and other systems of the enterprise system ) through the transport service  or by other techniques. The target repository , as illustrated, includes or stores target content . In some aspects, the target content  may a result of adding content (e.g., delta packages or other content) to the shadow content  in the shadow repository .","In any event, one or more of each the illustrated repositories , , and  may be any form or structure of data storage. For example, the repositories illustrated in  may be hardware storage locations and structure, such as servers, fixed or removable storage media such as a magnetic storage media, CD-ROM, or other suitable storage location.","While  is described as containing or being associated with a plurality of elements, not all elements illustrated within distributed computing system  of  may be utilized in each alternative implementation of the present disclosure. For example, although  depicts a server-client environment implementing a hosted application at server  that can be accessed by the enterprise system , in some implementations, server  executes a local application that features an application UI accessible to a user directly utilizing a GUI  at one or more of the external clients , the internal clients , or the development system  or productive system . Further, although  depicts a server  external to network , servers may be included within the network  as part of a cloud network solution, for example. Additionally, one or more of the elements described herein may be located external to distributed computing system , while in other instances, certain elements may be included within or as a portion of one or more of the other described elements, as well as other elements not described in the illustrated implementation. Further, certain elements illustrated in  may be combined with other components, as well as used for alternative or additional purposes in addition to those purposes described herein.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 2","b":["200","200","104","100","108","110","106","200","104"]},"As illustrated, process  includes a development sub-process  executed (or executable) on a development system (e.g., development system ) of an enterprise environment and a productive sub-process  executed (or executable) on a productive system (e.g., productive system ) of the enterprise environment. In each of the development sub-process  and the productive sub-process , an update case  and an upgrade  are illustrated at various stages (, , , , and ) within each sub-process  and . One or more actions (, , , , , and ) may be performed by the update tool during each stage of the development sub-process  and the productive sub-process .","Beginning with a preparation stage , the update tool may perform an action  in the development sub-process  and the productive sub-process . In the development sub-process , the update tool may request a development user at the action . For example, the update tool may ask an administrator of the development and\/or productive system for the credentials of the development user if, for example, certain content (e.g., corrections, notes or otherwise) are to be applied to a shadow repository in the enterprise environment. With respect to the productive sub-process , the update tool may execute a \u201cget request\u201d at the action . As illustrated, action  may be taken by the update tool in both the update case  and the upgrade case .","Continuing in the preparation stage , the update tool may perform an action  in the development sub-process  and the productive sub-process . As illustrated, however, the action  may only be taken by the update tool in the upgrade case  and includes building one or more queues by the update tool. For example, a list of required content to be upgraded may be built, for instance, into an implementation queue of content and a shadow queue of content.","At a shadow run stage , the update tool may perform an action  in the development sub-process  and the productive sub-process . As with the action , however, action  may only be taken by the update tool in the upgrade case . Action  includes implementing the shadow queue in the development sub-process  and checking the shadow queue in the productive sub-process .","Continuing in the shadow run stage , the update tool may perform an action  in the development sub-process  and the productive sub-process . In the illustrated embodiment, action  may only be taken by the update tool in the update case . Action  includes implementing a late update queue in the development sub-process  and the productive sub-process . The late update queue may include updates (e.g., notes, objects, and other update content) that may be made to the enterprise application at a late stage of the update case , such as after other updates (e.g., in the implementation and shadow queues) are implemented. Further, during the shadow run stage , an export process  may occur, in which the implementation, shadow, and late update queues may be exported from a development system in the enterprise environment to a productive system in the enterprise environment.","Next, at an import stage , the implementation, shadow, and late update queues may be imported from the development system in the enterprise environment to the productive system in the enterprise environment.","Next, at a post-importation stage , the update tool may perform an action  in the development sub-process  and the productive sub-process . In the update case , the update tool may implement the late update queue, while in the upgrade case , the update tool may check the late update queue. For example, in the update case , the late update queue may be implemented in, for example, a development system in the enterprise environment. Further, during the post-importation stage , an export process  may occur in which the late update queue may be exported from the development system in the enterprise environment to the productive system in the enterprise environment.","Next, at a completion stage , the update tool may perform an action  in the development sub-process . In some embodiments, the action  performed by the update tool may be identical or substantially identical in both the update case  and the upgrade case , but as illustrated, action  may be confined to the development sub-process . Action  includes determining and\/or presenting changes made to the enterprise action by the implementation, shadow, and\/or late upgrade queues, such as changes made to data and\/or objects customized by a user or administrator of the enterprise application. For instance, in some instances, the administrator of the enterprise application (e.g., an IT administrator of the business enterprise) may customize data and objects, such as repository objects or other business objects. A business object, as used herein, is a capsule with an internal hierarchical structure, behavior offered by its operations, and integrity constraints. Business objects are generally semantically disjointed, i.e., the same business information is represented once.","Further, during the completion stage , an export process  may occur in order to, for example, transport customized changes overwritten by the implementation, shadow, and\/or late upgrade queues from the development sub-process  to the productive sub-process . For instance, customizations by the administrator of the enterprise application may be reapplied (manually or automatically) to the productive system of the enterprise system.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIGS. 3A-3B","FIG. 1"],"b":["300","350","300","350","104","300","350"]},"Turning to  and method  in particular, this method may be implemented, for example, in an update process, such as when an enterprise application needs to be updated (e.g., with bug fixes, notes, and otherwise). Method  may begin at step , when an update upgrade process begins. At step , a determination is made whether there are update corrections (i.e., content to update a software application) in a repository. If there are no update corrections in a repository, then method  returns to a normal update process (e.g., to fix bugs and otherwise) in step . If there are update corrections in a repository at step , then the update tool asks for a user at step . For example, the update tool may request a development user if, for example, certain content (e.g., notes or otherwise) are to be applied to an enterprise application. At step , the update tool may verify the user. If the user is not verified at step , then the update tool may request an alternate user at step .","If, however, the user is verified at step , then the update corrections are fed to the update tool at step . In some aspects, for example, this may be done as a control file. In step , the update tool may determine if the update corrections, for example in the control file, are already present, and complete. If update corrections are missing or are incomplete, then the update tool requests a notes download at step . The missing and\/or incomplete notes are uploaded at step  and the process returns to step  where the update corrections (now including the missing and\/or incomplete notes) are fed to the update tool.","If the update corrections, for example in the control file, are not missing or incomplete at step , then the update tool generates a queue, such as a notes implementation queue, at step . The implementation queue includes the complete update corrections. At step , the update tool checks the implementation queue to determine if it is empty. If the implementation queue is empty, then the method  returns to a normal update process (e.g., to fix bugs and otherwise) in step .","If the implementation queue is not empty at step , then the implementation queue is fed to the update tool at step . For instance, step  may include feeding the implementation queue (including the update corrections) to an API (i.e., application programming interface) of the update tool. After the implementation queue is fed to the update tool at step , the update tool checks for any errors at step . If errors have occurred in feeding the implementation queue to the update tool, then a request is presented to the user to try again at step . If the user responds affirmatively to the request at step , then another attempt is made to feed the implementation queue (including the update corrections) to the update tool (e.g., via the API). If the user responds negatively to the request at step , then the user is requested to apply the update corrections (e.g., to the enterprise application) outside of the update tool at step . The method  then returns to step .","If no errors have occurred in feeding the implementation queue to the update tool, or the user has confirmed the reached state as correct, then the update tool creates a request that is exported at step . For instance, the request may include all update content including the update corrections (e.g., objects, corrections, and otherwise). The request may then be imported to a system of an enterprise environment, different than the development system, where it may be applied to update a software application, such as the enterprise application. Method  may then return to a normal update process in step .","Turning to  and method  in particular, this method may be implemented, for example, in an upgrade process to a productive system, such as when an enterprise application is upgraded to a new version. Method  may begin at step , when an update upgrade process begins. At step , a determination is made with there are update corrections (i.e., content within an upgrade of a software application) in a repository. If there are no update corrections in a repository, then method  returns to a normal upgrade process (e.g., to upgrade the enterprise application to a new version) in step . If there are update corrections in a repository at step , then the update tool asks for a request (e.g., an update corrections request) at step . At step , the update tool may verify the request. For example, a request may be verified if it fulfills certain requirements, such as, for example, it contains the upgrade content (e.g., changed objects, notes, and other content). If the request is not verified at step , then the update tool may ask for an alternate request at step  and continue from this step.","If, however, the request is verified at step , then the request is added to a buffer. For example, the update corrections request may be added to a main buffer for a source repository and\/or a shadow buffer of a shadow repository of an enterprise system. In some aspects, this may be accomplished through a transport service, such as the transport service  illustrated in . Next, the update corrections in a list are fed to the update tool via an API at step . After the update corrections list is fed to the update tool via the API at step , the update tool checks for any errors at step . If no errors have occurred in feeding the notes list to the update tool, then the method  returns to a normal upgrade process (e.g., to upgrade the enterprise application to a new version) in step .","If errors have occurred in feeding the notes list to the update tool, then a request is presented to the user to apply the update corrections outside of the update tool at step  (e.g., through a conventional notes upgrade process). The method  then returns to a normal update process in step .","A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made. For instance, the illustrated steps of methods  and  may be performed in different orders than those shown in . Further, one or more of the illustrated steps of methods  and  may not be performed. One or more additional steps not illustrated herein may be implemented in some embodiments of methods  and . In addition, other methods related to the form transformation module according to the present disclosure may be implemented. Accordingly, other embodiments are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 3A-3B"}]},"DETDESC":[{},{}]}
