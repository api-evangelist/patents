---
title: Imaging extension API for isolating web content from user resources and services
abstract: A method, system and program product for operating a web imaging system for use with a browser on an imaging client, comprising the steps of: receiving a request from external web content for a reference to a resource; translating the request to an imaging client specific command; creating an opaque reference that is mapped to the imaging client specific command; and providing this opaque reference to the web content, without supplying a reference to the resource or the imaging client specific command to the web content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06944868&OS=06944868&RS=06944868
owner: Hewlett-Packard Development Company, L.P.
number: 06944868
owner_city: Houston
owner_country: US
publication_date: 20010808
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","GLOSSARY OF TERMS AND ACRONYMS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","i. User Profile Store Service API","ii. Composition Store Service API","iii. Graphic Store Service API","ii. BrowseToPreferredDestination"],"p":["The present invention generally relates to an improved method, system and program product for performing web imaging operations, and more particularly, to a method, system, and program product for isolating web content and for other purposes.","The use of web applications has been growing over the years as the Internet becomes more sophisticated. Because most web applications are designed to work with cross-platform browsers, they operate independently from the operating system (\u201cOS\u201d). In other words, most web applications can work with any operating systems, such as LINUX\u00ae, WINDOWS\u00ae, or MACINTOSH\u00ae.","A specific problem encountered in operating on the web is the appearance of malicious code, which may attempt to gain access to various resources at the imaging client, or the associated storage or services. One aspect of the present invention is to isolate the web content from various user and system resources and services.","Briefly, the present invention comprises, in one embodiment, a computer implemented method for operating a web imaging system for use with a browser on an imaging client, comprising the steps of: receiving a request from external web content for a reference to a resource; translating the request to an imaging client specific command; creating an opaque reference that is mapped to the imaging client specific command; and providing this opaque reference to the web content, without supplying a reference to the resource or the imaging client specific command to the web content.","In a further aspect of the present invention, an imaging extension performs the receiving, translating and mapping steps, and wherein the imaging extension does not accept a reference from the web content.","In a further aspect of the present invention, the resource is associated with the personal imaging repository of a user.","In a further aspect of the present invention, a reference from the web content will be accepted if the reference or the web content meets a criteria.","In a further aspect of the present invention, the criteria is that the reference is from the same source as the external web content.","In a further aspect of the present invention, the criteria is that the external includes predetermined credentials.","In a further aspect of the present invention, the steps are provided of calling an imaging extension API that interacts with the personal imaging repository resources; and wherein the mapping step comprises mapping to a resource from the user's personal imaging repository.","In a further aspect of the present invention, the API creates a session with a session id that is used to facilitate obtaining the opaque reference.","In a further aspect of the present invention, the opaque reference is mapped in the mapping step to a reference for a personal imaging repository resource, but this mapping is deleted when the session ends.","In a further aspect of the present invention, the imaging extension API calls at least one API for one of the personal imaging repository resources.","In a further aspect of the present invention, the opaque reference is originated by the imaging extension and is only recognized by the imaging extension.","In a further aspect of the present invention, the steps are provided of receiving at the imaging extension a reference from the web content; accessing an imaging extension API to map the reference received from the web content to an opaque reference and creating a mapping relationship in the imaging extension between the received reference and the opaque reference; and adding the opaque reference to a graphic.","In a further aspect of the present invention, the imaging extension API is only accessed if credentials of the web content are accepted by the imaging extension.","In a further embodiment of the present invention, a program product is provided for operating a web imaging system for use with a browser on an imaging client, comprising machine readable program code for causing a machine to perform the following method steps: receiving a request from external web content for a reference to a resource; translating the request to an imaging client specific command; creating an opaque reference that is mapped to the imaging client specific command; and providing this opaque reference to the web content, without supplying a reference to the resource or the imaging client specific command to the web content.","In a further embodiment of the present invention, a system is provided for operating a web imaging system for use with a browser on an imaging client, comprising: a component for receiving a request from external web content for a reference to a resource; a translator for translating the request to an imaging client specific command; a component for creating an opaque reference that is mapped to the imaging client specific command; and a component for providing this opaque reference to the web content, without supplying a reference to the resource or the imaging client specific command to the web content.","The following terms and acronyms are used throughout the detailed description:","\u201cAPI\u201d. An application programming interface (API) is a library of programmatic methods provided by a system of some kind (an example is a web-based imaging system, as in the present invention) that enables client programs (web content operating within the browser is one example) to interact with that system. One method of creating an API is to create a library. For example, in Java, a library (conventionally called a jar file) is created by defining a class or classes, compiling the class or classes, and grouping the class or classes into a library. For example, the following class could be created:\n\n","NOTE: Programs are typically stored in text files, which are \u201ccompiled\u201d in order to create \u201cobject files\u201d which contain the executable (or interpretable) instructions. In this case, the program is contained in the file BaseConversionAPI.java. The act of compiling creates a file named \u201cBaseConversionAPI.class\u201d containing instructions for a specific computing architecture (in this case the Java Virtual Machine) corresponding to the program.","Next in this example, a Jar file would be created:\n\n","References regarding the creation of APIs:\n\n","Note that the APIs to networks services (graphic store, composition store, and user profile store, all to be discussed below) would be created to be accessible through a remote invocation technology such as CORBA, JAVA-RMI, DCOM, RPC, or SOAP. A wide variety of printed references are available that describe how APIs can be created to be accessible through a remote invocation technology, such as one of the technologies noted above.","Although libraries are referred to as APIs through out this patent, it is important to realize that an API is not really a library; an API is an interface that a library implements. However, to simplify the text in this patent an API and the implementation of an API as a library will be used interchangeably.","\u201cClient-Server\u201d. A model of interaction in a distributed system in which a program at one site sends a request to a program at another site and waits for a response. The requesting program is called the \u201cclient,\u201d and the program which responds to the request is called the \u201cserver.\u201d In the context of the World Wide Web (discussed below), the client is a \u201cWeb browser\u201d (or simply \u201cbrowser\u201d) which runs on the computer of a user; the program which responds to browser requests by serving Web pages, or other types of Web content, is commonly referred to as a \u201cWeb server.\u201d","\u201cComposition.\u201d Composition, also referred to as a \u201cgraphics composition,\u201d comprises a file with links to graphic data serviced as a single unit, i.e., a graphic. The file also usually includes information on the placement of those graphics on a sequence of canvases. It describes how to combine one or more graphics from one or more sources onto a sequence of canvasses, in a variety of different ways. The use of compositions allows multiple compositions to reference a graphic in a graphic store without having to duplicate the graphic.","\u201cComposition store\u201d. Composition store refers to a service (ideally implemented as a network service) that stores and provides access to imaging composition(s) that can be accessed by the user or web services. In this context, providing \u201caccess\u201d includes providing methods for building compositions, modifying compositions, and accessing them piecemeal. For example, a set of methods available for execution via the composition store might include the methods Get a Composition, Create a Composition, Delete a Composition, and Modify a Composition.","\u201cContent\u201d. A set of executable instructions that is served by a server to a client and that is intended to be executed by the client so as to provide the client with certain functionality. Web content refers to content that is meant to be executed by operation of a Web browser. Web content, therefore, may non-exhaustively include one or more of the following: HTML code, SGML code, XML code, XSL code, CSS code, Java applet, JavaScript and C-\u201cSharp\u201d code.","\u201cExchange infrastructure.\u201d An exchange infrastructure is a collection of services distributed throughout a network that stores imaging data associated with a particular user through a user profile.","\u201cFirewall.\u201d A firewall filters out unwanted communication packets in one or more directions. By way of example but not by way of limitation, in one implementation of a firewall, requests from inside a firewall may be made to access data on the outside of the firewall, and responses to such requests are typically permitted. Communications initiated from outside the firewall to devices inside of the firewall are typically not permitted. Generally, the firewall may be implemented by a firewall proxy server that allows devices inside the firewall to pass HTTP requests to web servers outside the firewall. Obviously, other protocols may be used to implement communication through the firewall.","\u201cGeneric access instructions.\u201d A generic access instruction refers to an executable instruction that is intended to cause the executing device to generate generic access requests in order to access a set of graphics data. These instructions call methods provided by, for example, an imaging extension. Methods provided by the environment in which the program is executed are typically called an \u201cApplication Programming Interface\u201d (API). Note that a generic access instruction does not include the location of the target graphic data. Typically, the target graphic data is pre-selected (generally by a user) and its location is determined from information that is maintained locally within the executing device.","\u201cHyperlink.\u201d A navigational link from one document to another, from one portion (or component) of a document to another, or to a Web resource, such as a Java applet. Typically, a hyperlink is displayed as a highlighted word or phrase that can be selected by clicking on it using a mouse to jump to the associated document or document portion or to retrieve a particular resource.","\u201cHypertext System.\u201d A computer-based informational system in which documents (and possibly other types of data entities) are linked together via hyperlinks to form a user-navigable \u201cweb.\u201d","\u201cGraphics data.\u201d Graphics data refers to digital data capable of being represented as two or more dimensional graphics, such as a Portable Document Format (\u201cPDF\u201d) file or a Joint Photographic Experts Group (\u201cJPEG\u201d) file.","\u201cGraphics store.\u201d Graphics store refers to a network service or a storage device for storing graphics data that can be accessed by the user or other network services. The graphics data store preferably accepts the graphics data in multiple standard file formats, and the graphics data is converted into these file formats when necessary depending on the implementation.","\u201cInternet.\u201d A collection of interconnected or disconnected networks (public and\/or private) that are linked together by a set of standard protocols (such as TCP\/IP and HTTP) to form a global, distributed network. (While this term is intended to refer to what is now commonly known as the Internet, it is also intended to encompass variations which may be made in the future, including changes and additions to existing standard protocols.)","\u201cWorld Wide Web\u201d (\u201cWeb\u201d). Used herein to refer generally to both (i) a distributed collection of interlinked, user-viewable hypertext documents (commonly referred to as Web documents or Web pages) that are accessible via the Internet, and (ii) the client and server software components which provide user access to such documents using standardized Internet protocols. Currently, the primary standard protocol for allowing applications to locate and acquire Web documents is HTTP, and the Web pages are encoded using HTML. However, the terms \u201cWeb\u201d and \u201cWorld Wide Web\u201d are intended to encompass WAP and WML for mobile phone web browsers, as well as other current and future markup languages and transport protocols which may be used in place of (or in addition to) HTML and HTTP.","\u201cWeb Site.\u201d A computer system that serves informational content over a network using the standard protocols of the World Wide Web. Typically, a Web site corresponds to a particular Internet domain name, such as \u201cHP.com,\u201d and includes the content associated with a particular organization. As used herein, the term is generally intended to encompass both (i) the hardware\/software server components that serve the informational content over the network, and (ii) the \u201cback end\u201d hardware\/software components, including any non-standard or specialized components, that interact with the server components to perform services for Web site users. Importantly, a Web Site can have additional functionality, for example, a Web site may have the ability to print documents, scan documents, etc.","\u201cHTML\u201d (HyperText Markup Language). A standard coding convention and set of codes for attaching presentation and linking attributes to informational content within documents. (HTML 2.0 is currently the primary standard used for generating Web documents.) During a document authoring stage, the HTML codes (referred to as \u201ctags\u201d) are embedded within the informational content of the document. When the Web document (or HTML document) is subsequently transferred from a Web server to a browser, the codes are interpreted by the browser and used to display the document. Additionally in specifying how the Web browser is to display the document, HTML tags can be used to create links to other Web documents (commonly referred to as \u201chyperlinks\u201d). For more information on HTML, see Ian S. Graham, The HTML Source Book, John Wiley and Sons, Inc., 1995 (ISBN 0471-11894-4).","\u201cHTTP\u201d (HyperText Transport Protocol). The standard World Wide Web client-server protocol used for the exchange of information (such as HTML documents, and client requests for such documents) between a browser and a Web server. HTTP includes a number of different types of messages which can be sent from the client to the server to request different types of server actions. For example, a \u201cGET\u201d message, which has the format GET <URL>, causes the server to return the document or file located at the specified URL.","\u201cURL\u201d (Uniform Resource Locator). A unique address which fully specifies the location of a file or other resource on the Internet or a network. The general format of a URL is protocol: \/\/machine address:port\/path\/filename.","\u201cUser Information.\u201d User information is identification and security information used in accessing graphics composition(s) and graphics data associated with a particular user profile. It is preferably accessed either directly or indirectly through methods provided by an extension component integrated into the web browser.","\u201cPDA\u201d (Personal Digital Assistant). A small hand-held computer used to write notes, track appointments, manage email and browse the web, generally with far less storage capacity than a desktop computer.","\u201cPersonal imaging repository\u201d A personal imaging repository is a conceptual term describing the exchange infrastructure used to exchange graphics composition and graphics data with web services. Users are associated with their graphics data through user profiles. It should be noted that the personal imaging repository can represent any type or combination of data storage devices.","\u201cReference\u201d A reference is intended to be a generic term that includes a URL reference, or in some cases a pointer, socket number or other backroom detail, to another internal or external location.","\u201cWeb service\u201d A web service is intended to refer to a service that is provided (at least in part) by a web server. But a web service is a broader concept than a web server. In this regard, a \u201cWeb server\u201d is a program that, using the client\/server model and the World Wide Web's Hypertext Transfer Protocol (Hypertext Transfer Protocol), serves the files that form Web pages to Web users (whose computers contain HTTP clients that forward their requests). Every computer on the Internet that contains a Web site must have a Web server program. The most popular Web servers currently are Microsoft's Internet Information Server (Internet Information Server), which comes with the Windows NT server; Netscape FastTrack and Enterprise servers; and Apache, a Web server for UNIX-based operating systems. Other Web servers include Novell's Web Server for users of its NetWare operating system and IBM's family of Lotus Domino servers, primarily for IBM's OS\/390 and AS\/400 customers.","Web servers often come as part of a larger package of Internet- and intranet-related programs for serving e-mail, downloading requests for File Transfer Protocol files, and building and publishing Web pages. This larger package is referred to as the web service. Parameters for a Web server include how well it works with various operating systems and other servers, its ability to handle server-side programming, and publishing, search engines, and site building tools in the package.","\u201cXML\u201d XML (Extensible Markup Language) is a flexible way to create common information formats and share both the format and the data on the World Wide Web, intranets, and elsewhere. XML is \u201cextensible\u201d because, unlike HTML, the markup symbols are unlimited and self-defining. XML is a simpler and easier-to-use subset of the Standard Generalized Markup Language (SGML), the standard for how to create a document structure. XML is similar to the Hypertext Markup Language (HTML). Both XML and HTML contain markup symbols to describe the contents of a page or file. HTML, however, describes the content of a Web page (mainly text and graphic images) only in terms of how it is to be displayed and interacted with. For example, the letter \u201cp\u201d placed within markup tags starts a new paragraph. XML describes the content in terms of what data is being described. For example, the word \u201cphonenum\u201d placed within markup tags could indicate that the data that followed was a phone number. This means that an XML file can be processed purely as data by a program or it can be stored with similar data on another computer or, like an HTML file, that it can be displayed.","The following pending application is hereby incorporated by reference, in its entirety: \u201cSYSTEM AND METHOD FOR PROCESSING DATA IN A DISTRIBUTED SYSTEM\u201d by Shell Simpson and Philip Verghese, Ser. No. 09\/712336 filed on Nov. 13, 2000.","An example of a client-server architecture in which the present invention can be implemented is shown in FIG. .","The present invention, in one aspect, is directed to implementing the concept of allowing a user's information to follow him\/her around, i.e., be accessible from a variety of different locations, both inside a firewall and outside of the firewall, as well as from a variety of different machines. This concept is implemented using one or more user profiles  and  in combination with the concept of a personal imaging repository  for storing user graphics across a distributed environment. The personal imaging repository  can be distributed across multiple locations, multiple machines and multiple architectures. For example, some graphic information might be stored in a local graphics store  behind a firewall , while other graphics might be stored in external graphics stores  outside of the firewall . One such local or external graphics store could be on the user's hard drive. Another local or external graphics store could be the hard disk storage for a multi-functional peripheral, such as a printer\/copier\/fax machine. Another local or external graphics store might be on an Intranet server, or an Internet server. The actual storage location is determined according to user preference and application. Thus, graphics information gathered from the multi-function peripheral device could stay in a graphics store on that device and be subject to access by the user, thereby improving performance. Likewise, graphics information intended for Internet destinations might be stored in a graphics store on a server accessible via the Internet. Graphics information, where wide accessibility is desired, might be stored on the Internet. From the perspective of imaging destinations, i.e., web sites that use graphics information, all available information would be available without special knowledge. In the present discussion, the term \u201cgraphic\u201d is intended to mean any image, including a text image, a photo image, PDF files and anything else that can be represented in two or more dimensional graphics. For further information, see the definition for \u201cgraphics data\u201d in the definition section. For further information on the meaning of a \u201cgraphics store,\u201d see the detailed discussion below.","For purposes of an overview of , an imaging client machine  is shown behind a firewall . The imaging client  may access by means of a browser  web content  obtained from servers  and  inside the firewall , and web content obtained from servers  and  outside of the firewall. The imaging client may store graphics obtained from this web content in its personal imaging repository , in the form or context of a composition (see the definition of \u201ccomposition\u201d above), either inside or outside of the firewall .","IMAGING EXTENSION. The imaging client  includes an imaging extension  (also shown as  in FIG. ). The imaging extension  is configured to respond to the execution of generic access instructions from the web content  by generating\/mapping to corresponding imaging client specific commands of the imaging client . However, this will only happen if user information  (containing references ,  to the user's profiles , ) is available to the imaging extension , to access the user's personal imaging repository .","The imaging extension  may be implemented\/thought of as an application programming interface (API). The API used for the imaging extension is preferably in accordance with a system wide standard. The generic access instructions from the web content, when executed, may cause imaging extension API calls to be issued to the API in order to effect, via imaging client specific instructions, access to the user's personal imaging repository . It will be recognized that there are many other ways (both hardware and software) to implement this same functionality. The present invention is not limited to any one way. In essence, the imaging extension  is for accessing user information , and for providing an opaque interface between the web content  executing in the browser  and the personal imaging repository  and other functionality of the imaging client. An example implementation of the imaging extension will be discussed in more detail below.","The user information  in  comprises at least one or more references to one or more user profiles. Each reference would, by way of example but not by way of limitation, be implemented by a URL reference, or in some cases a pointer, socket number or other backroom detail. The reference for the user profile could be to a location within the imaging client itself, or to a location external to the imaging client, such as the server  or the server  shown in FIG. . In  the user information  includes a reference  to an internal user profile  and a reference  to an external user profile  that are located in a servers  and , respectively.","Each referenced user profile  and  might include user identification information and at least a reference to all or a portion of a personal imaging repository  for that user profile. As noted above, a reference may include a URL reference (or pointer, socket or other backroom detail) to one or more composition stores. In the example of , the internal user profile  includes a reference  to a default composition store  on a separate server . Additionally, the internal user profile  includes a reference  to a default graphics store  on a separate server , and a reference  to a default composition within some composition store, which could be the default composition store . Note that unlike the default composition store reference  and the default graphic store reference , which generally do not change and are used by the imaging extension to locate the default graphic store service and default composition store service, the default composition reference , in many embodiments, is intended to change often. It is a reference to the composition that is accessed by \u201cdefault\u201d by \u201cimaging destination services\u201d. Imaging source services typically ignore the existing value of a default composition reference  and are only interested in changing the value of default composition reference  so that it refers to a composition created by the imaging source service.","Note also, that in general, the profile references will determine which compositions will be enumerated\/are available to the user using that profile.","Likewise, in  there is also shown the reference  to the external user profile . In , the external user profile is disposed on the server  external to the imaging client  and external to the firewall . Note that typically the firewall provides the boundary between a private intranet and the public Internet. The external user profile  includes a reference  to a default composition store  on a server  that is external to the firewall , a reference  to a default graphics store  on a server  that is likewise external to the firewall , and a reference  to a default composition in the default external composition store  or another composition store external to the firewall.","It should be noted that there may be multiple internal and\/or external user profiles, selectable automatically or manually based on one or more criteria. For example, there could be a different internal and external user profile for each different imaging client that the user may use, with the particular internal or external user profile selected by providing the user identification information, other information including location information, and the imaging client machine information to the imaging extension .","Note that the same user can have multiple user profiles. This is particularly advantageous when firewalls are used. This is because, as noted above, different graphic stores and composition stores would be used, depending on whether the imaging client was inside the firewall or outside the firewall. Multiple user profiles for the same user may result in multiple personal imaging repository segments associated to that single user, each accessible via a different user profile. Note that multiple users in a group (each with their own personal imaging repository) can refer to the same imaging information using shared services, i.e., a group composition store, as noted above. Part of each user's personal imaging repository, in this scenario, can be shared by a group having a common association, such as a group project.","In order to select a user profile if more then one is provided, the imaging client  will include code (typically residing in the imaging extension , for example) for selecting one from the internal user profile  and the external user profile . In one embodiment, this could simply be implemented by code that provides a menu to the user of the imaging client  to allow the manual selection of the reference to the desired user profile. Alternatively, or in addition, the code could be implemented to automatically select the user profile based on a criteria such as the imaging client machine being used, or whether the imaging client is connected to a network inside the firewall  or is otherwise inside the firewall, or whether it is outside of the firewall .","In operation, in order to obtain the default composition store, the default graphics store, and the default composition, the web content invokes a method provided by the imaging extension  (the imaging extension API). The imaging extension , in turn, obtains a reference to the appropriate user profile in an imaging client profile store in the user information section  and invokes (using remote invocation technologies like CORBA, SOAP, etc.) methods provided by the profile store for the purpose of obtaining the default composition store, default graphic store, or default composition.","Profile Store. Note that the profile store is simply a service in the user information section  that includes appropriate methods to create, modify, access, and cancel profiles in a profile storage. Such a user profile store service might include data, i.e., one or a plurality of user profiles, and a plurality of typical methods for accessing and modifying the stored user profiles. For example, the service might include methods entitled \u201cGet a User Profile,\u201d \u201cModify a User Profile,\u201d and \u201cDelete a User Profile.\u201d Accordingly, the imaging extension API will map to the appropriate methods in the user profile store in which the user profile is stored in order to obtain the reference to the items (such as default graphic store, default composition store, and default composition) in the user profile.","It should be noted that the imaging client, shown located inside of the firewall , can access web content outside the firewall from the web servers  and . Likewise, either user profile may reference composition stores and graphic stores outside the firewall .","Typically, each web server will serve different web content, depending on the services and graphics that it is offering. Each web content is pre-configured with specific executable instructions depending on the type of service the server machine provides. In this example, the web server  may be for a printing service, whereas the web server  may provide a special photo graphics service. Consequently, the web content from the server  may be very different from the web content from the server , with each including different executable instructions to the browser .","The user will typically initially store graphics that are to be operated on by a selected web service (a printer service, for example) in the user's personal imaging repository, with the particular storage chosen within the user's personal imaging repository in accordance with the user profile that is active, or as manually selected by the user, or alternatively as selected by the web service or other application that is operating in the browser. By way of example, the user could store a graphic to be operated on in his\/her personal imaging repository  inside of the firewall  in an internal graphics store, which could be the default internal graphics store . The particular internal graphic store used for this storage would be selected for example, either manually via a pop-up menu presentation to a user, or automatically by an imaging extension  that references and uses the information in one or more internal user profiles  on a server . As noted above, internal user profile  would typically include a reference , such as a uniform resource locator (URL) for example, to a default internal composition store , which could be any internal composition store selected by the user or the system. The internal user profile would also include a reference  to the default internal graphics store , which could again be any internal graphics store chosen by the user of the system. Additionally, the internal user profile would include a reference  to a default composition. This default composition would be the last internal composition selected by the user.","Alternatively, the user could choose to store the graphic to be operated on in a graphics store in the user's personal imaging repository  outside of the firewall , or this could be required because the imaging client  is outside of the firewall . This external graphics store could be a default external graphics store . Note that the particular graphics referenced by a composition in an external composition store will also be located external to the firewall. The particular external graphic store used for this storage would be selected, either manually via a pop-up menu, for example, or automatically by the imaging extension  that references and uses the information in the external user profile  on a server . As noted, the external user profile would include a reference , such as a URL for example, to the default external composition store , which could be any external composition store selected by the user or the system. The external user profile would also include a reference  to the default external graphics store , which could again be any external graphics store chosen by the user of the system. Additionally, the external user profile  would include a reference  to a default composition. This default composition would be the last external composition selected by the user.","The default composition could be set in a variety of ways. The two most common ways are: 1) the user previously selected a composition through an Internet Imaging home page, or through any other Internet service that displays a list of available compositions that the user may select. Once selected, the default composition reference in the user's profile is updated to refer to the selected composition. It is important to note that the Internet Imaging Home page is merely one example of a service that allows the user to choose which composition should be the default composition. Other web services could provide the same sort of capability; 2) the user interacted with a web service that created a new composition. Typically, web services (web server+web content running in a user's browser) that create new compositions want the new composition to be readily available (which is accomplished by making the newly created composition the default composition).","Thus, it is important to note that the user can implicitly or explicitly select the default composition in his\/her profile. As noted above, the user can explicitly choose the default composition by interacting with a web service (such as an Internet Imaging Home service), which provides content capable of changing the \u201cdefault composition\u201d. Alternatively, the user can implicitly select the default composition by interacting with web services that create new compositions and makes those new compositions the default composition in order to make the new composition readily available as the user subsequently browses to other web services.","As an example of default composition selection for use so that another web service may operate on a graphic, assume a graphics store on a camera server, which store contains photo graphics that the user wishes to print. The user browses to the camera's web page, wherein he\/she chooses a desired photo image and retrieves that into the user's personal imaging repository, where it becomes a graphic in a new composition. This photo composition chosen by the user is now the default composition.","Referring now to the individual components, the imaging client, by way of example, but not by way of limitation, would typically include a configuration with a web browser , a storage module of some type  with user information and other information, an imaging extension , and some form of user interface (not shown), e.g., a keyboard and display device. Generally, the browser would be implemented under control of a microprocessor. An example imaging client , in the form of a personal computer, is shown in FIG. .  is a high level diagram of a personal computer\/imaging client . As shown, the personal computer  includes a processor , a memory , the WEB browser , the imaging extension , a reserved storage area , and an input\/output (I\/O) port(s) . All of these components are connected by one or more local interfaces . The I\/O port  links to the servers previously described. The processor  is used to execute the WEB browser .","Web Content. In operation, the browser  initially accesses a web site and using appropriate request commands (HTTP for the current generation of browsers), downloads therefrom web content. As noted by the definition herein, the web content  includes a set of executable instructions that are intended to be executed in the browser  so as to provide the imaging client  with predetermined functionality. These executable instructions comprise generic access instructions (see the definition above) which are system wide instructions, expressed in some language (e.g., Java) and that call the methods of an imaging extension API to access the user's personal imaging repository to perform web imaging operations. Such generic access instructions can be, by way of example but not by way of limitation, Java, JavaScript, C-sharp instructions. The system wide standard typically specifies \u201cgeneric access instructions,\u201d \u201cgeneric access requests,\u201d and \u201ctarget graphics.\u201d","A variety of functionality could be provided by the web content. For example, the web content might include executable instructions for causing the imaging client  to display target graphics, i.e., show available graphics on the accessed web site. Another web content might include executable instructions for displaying a print button, and if the print button is clicked, causing the imaging client to generate a print job that describes a graphic in the personal imaging repository for the user and transmits the print job to a printer. It could also provide a preview of the target graphic. Accordingly, the web content  in  refers to a set of executable instructions that are downloaded into the browser  to perform a service requested by the user.","The web browser executes the web content, whether it is HTML interpreted\/executed by the browser into marks displayed on a user's screen, or Java and JavaScript or some other appropriate language. As previously noted, the web content contains executable instructions that use the API provided by the imaging extension  to indirectly access the user's personal imaging repository. For example, the executable instructions of the web content might obtain an opaque access to the information from the user's profile (in order to specify the user's personal imaging repository) by interacting with a user profile store service in which the user's profile is located.","The executable instructions of the web content might perform this access in order to obtain an opaque reference to the reference  to the user's internal default composition store and an opaque reference to the reference  to the user's internal default graphics store. The web content might further use the API provided by the imaging extension  to add a new graphic to the internal default graphic store via this opaque reference to the reference .","Imaging Extension. In a preferred embodiment, the imaging extension  is constructed to prevent the web content  (i.e., the executable instructions from the web service), from directly accessing arbitrary services and the user's personal imaging repository. In essence, the web content uses the imaging extension as the gateway to access everything in the user's personal imaging repository, including the information in the user profile. In the discussion herein, the term \u201copaque reference\u201d is used. An \u201copaque reference\u201d is a reference that does not expose information about an underlying resource. The possessor of an opaque reference is unable to determine anything about the resource from the opaque reference or to modify the opaque reference so as to alter which resource is being referenced. (In contrast, if a URL is provided, for example, \u201chttp:\/\/www.hp.com\u201d, it would be fairly straightforward for the web content to modify the URL to refer to a different resource, for example, \u201chttp:\/\/www.xerox.com\u201d.)","This restricted access imposed on the web content can be implemented using a variety of methods. The designer can implement the API for the imaging extension  so that the API only accepts references from the web content that were previously provided thereto by the imaging extension . In essence, the imaging client\/web content would not be able to arbitrarily supply references when calling the API provided by the imaging extension. The web content  (running on the imaging client ), in order to communicate to imaging client resources and the user's personal imaging repository , must first obtain opaque references using the API of the imaging extension . For example, if the web content  wanted to access the default graphics store , the web content  would be required to call a method (provided by the API of the imaging extension ) that provides an opaque reference to the default graphic store. This reference could then be used in subsequent calls by the web content to the API of the imaging extension .","By way of example but not by way of limitation, one approach to accomplishing this restriction would be to create a session. For example, an imaging extension API for a particular operation might comprise:\n\n","Accordingly, the web content would be required to call the imaging extension API to first create a session by calling CreateParticularOperationSession, which would return a SessionID. This SessionID would be used to subsequently refer to the particular session. Next, the web content would call the PerformOperation in the imaging extension API with particular input and the session id. The web content can then perform a variety of manipulations, but will not be able to directly access parameters and operations which are \u201cassociated\u201d with the session id, because the association is accomplished in a way that is \u201copaque\u201d to the client. The imaging extension API and that API alone knows how to use the session id to determine\/map to imaging client parameters. Often, the session id will be a reference such as a pointer to a data structure containing information relevant to the session. This data structure might contain the parameters and other pertinent information. When the web content has completed its operation, the web content calls the DeleteParticularOperationSession in the imaging extension API with the session id as a parameter. This instructs the imaging extension API to free whatever resources (such as memory) are associated with the session. Note that if the web content changes the session id, that will not allow the web content to obtain the restricted parameters, but will only confuse the imaging extension with the previously unseen session id.","The API provided by the imaging extension may typically be implemented as a library of methods that provide controlled access to the APIs provided by the network services participating in the user's personal imaging repository. This imaging extension API is implemented so as to invoke the APIs provided by the user profile store, composition store, and graphic store. The API provided by the imaging extension is generally not accessed through remote invocation technology, although it may be implemented to use remote invocation technology to access the APIs provided by the network services participating in the user's personal imaging repository. The API provided by the imaging extension is not an exact replication of the APIs provided by the user profile store, composition store, and graphic store, since this API seeks to provide controlled access to those network services through (among other techniques) opaque references.","From the above example, it can be seen that the web content is prevented from using the API provided by the imaging extension to access arbitrary services. The key to this restriction is that the web content would not be able to supply the addresses for these arbitrary services. The web content would only be able to refer to services through opaque references provided by the imaging extension API (so as not to expose the actual reference\/URL to the web content). For example, the web content might use the API to obtain a list of opaque references to available compositions. This list of opaque references would map to the real references\/URLs in the imaging extension alone. Thus, in subsequently referring to these compositions, the web content would not be allowed to supply a URL (which might be one of its own creation), because that created URL would not map within the imaging extension to real resources. Instead, the web content would be required to use references provided to it by the API, which only make sense in the context of the current session with that API. Specific unusual aspects of the foregoing are that the code attempting to use particular resources is externally obtained web content, and the resources it is attempting to access\/use are network services.","To state the foregoing in a different way, only references obtained through the imaging extension (by calling the API) can be subsequently used by web content. Other \u201cmade up\u201d references are effectively treated as gibberish by the imaging extension .","The web content might start off by getting an opaque reference to the default composition store from the imaging extension (using the appropriate API). Later, the web content might use the opaque reference to the default composition store to obtain a set of references to content within the default composition store. These opaque references could, in turn, be used to obtain opaque references to the graphics associated with each composition, so that the web content obtains an opaque reference to each individual graphic. But it is important to note that each of these opaque references only makes sense in the context of the web content's interaction with the imaging extension. It's also important to note that only the opaque references originating from the imaging extension would be recognized by the imaging extension. (In a likely implementation, the \u201creferences\u201d provided by the imaging extension would simply be gibberish strings of characters that only make sense to the imaging extension.)","Accordingly, the imaging extension prevents malicious web content from inappropriately accessing services. Note that the API of the imaging extension  typically does not supply references to actual resources,i.e., composition stores, user profile stores, located on the network, and it only accepts these references under controlled circumstances (such as when adding a reference for a graphic located in a website's graphic store to a composition).","As noted above, normally web content isn't allowed to supply URL's to the imaging extension. The reason for this is that if the web content were able to supply URL's, it could exploit this capability to attempt to inappropriately gain access to network services that the web content has no business trying to access. e.g., it could arbitrarily choose and \u201chack\u201d graphic store services. Although normally inappropriate to allow web content to supply URL's to the imaging extension, there are some circumstances where it may make sense from a security and risk standpoint. As noted above, a web site supplying web content can have its own graphic store. The graphics in this graphic store (whether real or virtual) have URL's or other references that must be used in referencing these graphics. If the web content wants to create a composition that contains such a reference, it must have some way of supplying this reference to the imaging extension. Allowing web content to supply references to graphics coming from the same location as the web content is usually fairly benign. Thus, instead of allowing web content to arbitrarily choose any URL in the user's personal imaging repository, under the controlled situation of supplying a URL to the same web site as the web content or based on credentials, the web content may be allowed to supply the URL to the imaging extension. This allows web site provided graphics to be referenced, while still maintaining a reasonable level of security.","Accordingly, in the example of the web content desiring to create, host and use a graphic store on the web content's own web site's server, the web content may be permitted to add a reference to the graphics hosted by it's web site to a composition that the web content is creating or modifying. In this example, the web content would make use of an API method (a CreateOpaqueRefFromURL(Session, URL) in the imaging extension API\u2014that would convert the URL of a graphic in the web site's graphic store into an opaque reference. The web content could then use the opaque reference to add the graphic to a composition. Access to this API method functionality would likely be based on the site's credentials or on a determination that the URL supplied from the web site is to the same web site as the web content that has originated this operation.","GRAPHIC STORE The present invention includes as an important aspect thereof the use of a graphic store configuration. The graphic store, in contrast to storage at a web server which operates to simply \u201cGET\u201d whatever data corresponds to a given URL, provides services that get\/operate on\/create\/reformat\/translate graphics. In one aspect of the invention, the graphic store can dynamically create graphics with current data by referencing data in common with associated web services. A given graphic store can provide remote storage for a user and can become part of the user's personal imaging repository, so that the user does not need to provide storage for a graphic he\/she wishes to process\/operate on. This aspect is particularly important for a user operating PDA's and other devices without high capacity storage capabilities\u2014such as is typically required to store graphic data. Of great importance, the graphics store can provide the ability to communicate with the web content of various web services. For example, web content from a printer web service can ask questions of the graphics store, such as how many pages are in the graphic to be printed (typically, the web content would query the composition for the number of pages, which would in turn request this information from each graphic store that contains a graphic referenced in the composition, if required). The printer web content can also request that the pages of the graphic be transmitted in a desired order other than chronological order to thereby improve printer performance.","A graphic store can be implemented in a variety of ways, but there are two typical variations, each with slightly different elements:","Variation 1 (shown as graphic store  in FIG. ):\n\n","Variation 2 (shown as graphics store  in FIG. ):\n\n","Note for , the connection between the web service and the graphic store may be indirect, through the specification of information about the shared resource that is placed by the web service in the URL referencing the desired graphic. The web service initially generates a URL that represents a virtual graphic, i.e., one that must be obtained\/created by reference to a shared resource. Accordingly, the URL itself specifies the shared resource where the graphic may be obtained\/created. This URL also specifies the graphic store where the virtual graphic can be accessed. When the user clicks on a button in the web content in the user's browser in order to obtain this graphic, the above noted URL for the graphic is referenced by the web content, and is subsequently supplied to the graphics store. The URL contains information about the shared resource (in addition to specifying the graphic store), which is later used to identify the shared resource. For example, the virtual graphic might be referenced by the URL","http:\/\/graphicstore.webmail.com\/msg?mailserver=imap.webmail.com&user=joe&msgid=12453. This URL has encoded within it several key pieces of information. It contains the identity of the graphic store, graphicstore.webmail.com, the identity of the mail server, imap.webmail.com, the identity of the user, joe, and the identity of the mail message, 12453. On receipt of this URL from the web content, the graphics store calls a method to interpret the URL and to generate a call to the shared resource to obtain\/create the desired graphic.","For example, if the graphic store received a request for a thumbnail JPEG bitmap of page one of the virtual graphic referenced by http:\/\/graphicstore.webmail.com\/msg?mailserver=imap.webmail.com&user=joe&msgid=12453, the graphic store would contact the email server imap.webmail.com using the IMAP protocol and request data regarding message 12453 for user joe. The graphic store would then convert the email message data into a thumbnail JPEG bitmap of page one and use that bitmap to satisfy the request. The email message data might be converted into a series of pages using conventional mechanisms that allow text to be converted into printable graphics (i.e. PDF). The printable graphics could be converted into a bitmap using conventional mechanisms that allow print graphics to be converted into bitmaps (such as the open source Ghostscript graphics translator).","The graphic store interface (API) could take a variety of different forms depending on the services that the graphic store wishes to provide and the types of dialogue it wishes to support with web content. For example, it could take the form of:\n\n","NOTE: The desired page order can be achieved by obtaining the entire graphic with the pages in the desired order or obtaining in the desired order each individual page.","Typically, the resource, as well as the web service associated with the graphics store, and the graphics store itself, each has its own reference, which may be a URL. The graphic store, as noted above, can provide remote storage for a user that has downloaded web content from the associated web service. The graphic store can also be accessed indirectly by users through other web services.","Note that the association between a web service and a graphics store is particularly advantageous where a user needs temporary or permanent storage in order to operate on\/process graphics from one web service at another web service. For example, a user might access with his\/her browser a first web service (a web cam, for example) and use the web content therefrom to create a web cam image graphic within a graphics store associated with that first web service and to also create a composition therefor in a default composition store in the user's personal imaging repository, and add a reference to the newly created composition (typically a URL) of the web cam graphic in the graphic store. The user can then browse to a second web service (for example, a printer to print the web cam image). The web content from the second web service can then access the web cam image graphic through the reference in the newly created composition and perform its printing function with that web cam image data. One of the advantages to this sequence is that the user does not have to provide storage for the web cam graphic.","It should be noted that in a further aspect of the present invention, some web services, both inside and outside the firewall, may find it to be commercially important to have graphic stores associated therewith that have long term stability, so that there is no need to create a new graphic for them in another graphics store. As noted above, the graphic store associated with the web service could be made part of the personal imaging repository by referencing it via a URL, pointer or other convenient reference. (A graphic store is effectively made to be part of a user's personal imaging repository by referencing a graphic within that graphic store from the user's personal imaging repository. It's actually more accurate to think of graphics, compositions, and user profiles as being part of the user's personal imaging repository rather than thinking of the individual services. In fact, it's possible to have only part of the graphics available through a graphic store referenced by the user's personal imaging repository.) An example of such an associated graphics store might be a server repository for archival storage of news articles, with the graphics store functionality described herein. A reference in a composition could reference this graphic within the graphics store in the archival storage service.","As noted earlier, a special aspect of the present invention is the ability in the graphics store to create graphics \u201con the fly.\u201d This aspect is facilitated by the association of the web service and a graphics store and a resource, as in the configuration shown in  reference can be provided in a composition to a resource that doesn't really exist in the graphics store, if there is the ability to simulate the existence of that resource. For example, assume that a web service that has a graphics store associated therewith adds to the user's personal imaging repository (through web content acting on its behalf) a URL reference to a famous document in the associated graphics store as follows:","\u201chttp:\/\/famousdocs.com?doc=declarationofindependence\u201d. A user might subsequently ask, via the web content (presumably from another web service or the same web service) in his browser, for a bitmap (e.g., jpeg) image of the first page of the document referenced by this URL. The graphics store, which would be accessed (indirectly through the imaging extension) by the web content via this reference, might not have the actual JPEG image of the first page, but only a text file of the famous document in question. But the graphics store might include various services including a text-to-bitmap conversion service. From this text file, the graphics store would generate with this conversion service a bitmap of the first page and return the requested bitmap to the user at his\/her browser.","In a second example, a user might browse to a webmail service and get a URL like","\u201chttp:\/\/graphicstore.webmail.com?imap=imap1.webmail.com&user=johns mith&messageid=23456\u201d corresponding to an email message of the user. Later, the user might request, via the web content in his browser indirectly contacting the graphics store, for the first page of this email message formatted to be printed in the form of a jpeg image. In this case, the email message is actually stored in another network service like an \u201cIMAP service,\u201d which is responsible for storing and providing access to email messages. In response to the user's request, since the graphics store does not actually have what the user is asking for, the graphics store would contact the IMAP service using the information embedded within the reference, obtain the user's email message, format the email message for printing using a service that also may be available at the graphics store, and then using a different service at the graphics store to generate a bitmap of the first page. (The services mentioned in the previous sentence might be replaced with simple code libraries that would be used by the graphic store service. In fact, in the preferred implementation, this would be done.)","Note that the graphic store does not need to be on the same machine as the web server for the web service. It may be located on another machine. The key point is that web content coming from the web service associated with the graphic store \u201cknows\u201d about the graphic store and uses the graphic store by generating an appropriate URL (or more generally a reference) that refers back to the graphic store. As discussed here, the graphics store doesn't even need to have the resource in question\u2014just the ability to respond to requests regarding that resource. This is important because it reduces the need for storage at the graphics store, ensures that information is up-to-date (because multiple copies introduce the possibility that one copy will become out-of-date), and allows some operations to be completed more quickly. For example, if a graphics store is asked by web content whether or not a particular graphic (in this case a virtual graphic) contains any color, the composition store may be able to respond very quickly to that question based on knowledge about the underlying information (for example an email message).","It should be understood that there is a distinction between a graphic store interface and a graphic store implementation. The graphic store interface is the set of methods that all graphic store services must implement in order to be a graphic store. The graphic store implementation is how these interfaces are implemented. The implementation may vary widely from graphic store to graphic store.","The term \u201cassociated\u201d in the context of a web service and a graphics store may take a number of variations. In the example in the paragraph above with the graphics store associated with a web service, the graphic store would preferably be implemented in such a way so as to know about the way the web applications in the associated web service store data internally. Every web application in a web service has its own internal data representation that is used during the operation of the application. A properly implemented graphic store that is tightly integrated with an application on a web service would have access to and could use this internal data representation to optimize its behavior (since the graphic store and web server could be implemented as part of a larger web service and could share the internal data representation). For example, an application providing graphics used to produce a booklet might have information in its internal data about the number of pages available. This page count information could be accessed directly by the graphics store without generating print ready data, if the application is tightly integrated with that graphics store. Providing timely information about the number of pages would enhance the operation of the booklet making web service, since this information is required to format the booklet correctly.","A variety of different stores and other configurations including the imaging extension have been described, each with their own APIs. A set of example APIs are set forth below for a number of the stores and the imaging extension disclosed herein. Note that the example API sets are not complete sets, but are set forth to provide a representative idea of the typical APIs that would be present. Notably missing from the API sets are error handling and position information methods. The API sets below are not intended to be limiting in any sense, and are intended as examples only. The API sets are expressed using C\/C++\/Java\/Perl style syntax (loosely). Also note that these are ad hoc APIs that would not mesh with certain broader aspects of web-based imaging provided in this patent application, and are provided as one example only.","The API is written using conventional notation. This notation is described in most introductory texts for most programming languages. However, this notation is example notation and no limitation thereto is intended. The general form of a method that makes up an API is:\n\n","Where, returnType is the type returned by the method. Typically, the meaning of the value returned is obvious from the name of the method. For example, the method \u201cstring GetPresidentsAddress( )\u201d returns a value of type \u201cstring\u201d, which from the name of the method can be determined to contain the President's address.","MethodName is the name of the method. This name should be a concise description of the purpose of the method.","ParameterTypeN is the type for parameter N, where N is the nth parameter in the argument list of the method. Parameter types indicate the data format of the parameter that is passed to the method, such as string, integer, or more complex structures\/objects. Parameter types may or may not be descriptive of the meaning of the parameter. If they are not, it is necessary to include a parameter name to ensure that the reader understands the meaning of the parameter.","parameterNameN is the name for parameter N, where N is the nth parameter in the argument list of the method. Parameter names should indicate the meaning of the parameter. Sometimes they are redundant and can be optionally omitted. For example, a parameter described as \u201cSession session\u201d with a parameter type of Session and a parameter name of session is needlessly redundant. In these cases, it is typical to omit the parameter in describing the method of the API.","It should be noted that a parameter named \u201cOpaqueRef preferredDestination\u201d is compatible with return values of type OpaqueRef. The name \u201cpreferredDestination\u201d is merely the descriptive name of the parameter and does not determine parameter compatibility. Return values do not typically have names, since the meaning of the return value is implied by the method name. Any notes are identified by \/\/.","Programming Interfaces (APIs)",". Network Service APIs",{"@attributes":{"id":"p-0126","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["UserProfileStoreSession OpenSession(UserIdentification, Credentials);","CloseSession(UserProfileStoreSession);","URL GetReferenceToDefaultGraphicStore(UserProfileStoreSession);","URL GetReferenceToDefaultCompositionStore(UserProfileStoreSession);","URL GetReferenceToDefaultComposition(UserProfileStoreSession);","URL[ ] GetReferencesToAvailableCompositionStores(UserProfileStoreSession);","URL[ ] GetReferencesToCandidateDefaultGraphicStores(UserProfileStoreSession);","URL[ ] GetReferencesToCandidateDefaultCompositionStores(UserProfileStoreSession);","URL[ ] GetReferencesToCandidateDefaultCompositions(UserProfileStoreSession);","URL[ ] GetReferencesToGroupCompositionStores(UserProfileStoreSession);","AddReferenceToCandidateDefaultGraphicStore(UserProfileStoreSession, URL candidateDefaultGraphicStoreReference);","AddReferenceToCandidateDefaultCompositionStore(UserProfileStoreSession, URL candidateDefaultCompositionStoreReference);","AddReferenceToCandidateDefaultComposition(UserProfileStoreSession, URL candidateDefaultCompositonReference);","PrioritizeReferencesToCandidateDefaultGraphicStore(UserProfileStoreSession, URL candidateDefaultGraphicStoreReferences[ ]);","PrioritizeReferencesToCandidateDefaultCompositionStore(UserProfileStoreSession, URL candidateDefaultCompositionStoreReferences[ ]);","PrioritizeReferencesToCandidateDefaultComposition(UserProfileStoreSession, URLcandidateDefaultCompositionReferences[ ]);","AddReferenceToGroupCompositionStore(UserProfileStoreSession, URL groupCompositionStore);","RemoveReferenceToGroupCompositionStore(UserProfileStoreSession, URL groupCompositionStore);","URL GetReferenceToPreferredPrinterListDestination(UserProfileStoreSession);","URL GetReferenceToPreferredPrinterDestination(UserProfileStoreSession);","URL GetReferenceToPreferredPrintNowDestination(UserProfileStoreSession);","URL GetReferenceToPreferredImagingHomeDestination(UserProfileStoreSession);","SetReferenceToPreferredPrinterListDestination(UserProfileStoreSession, URL preferredPrinterListDestination);","SetReferenceToPreferredPrinterDestination(UserProfileStoreSession, URL preferredPrinterDestination);","SetReferenceToPreferredPrintNowDestination(UserProfileStoreSession, URL preferredPrintNowDesination);","SetReferenceToPreferredImagingHomeDestination(UserProfileStoreSession, URL preferredImagingHomeDestination);","PrintActionCriteria GetPrintActionCriteria(UserProfileStoreSession);","SetPrintActionCriteria(UserProfileStoreSession, PrintActionCriteria);"]}},{"@attributes":{"id":"p-0127","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":["CompositionStoreSession OpenSession(UserIdentification, Credentials);","CloseSession(CompositionStoreSession);","URL CreateComposition(CompositionStoreSession);","DeleteComposition(CompositionStoreSession, URL composition);","URL[ ] GetCompositions(CompositionStoreSession);","URL[ ] GetElementsInComposition(CompositionStoreSession, URL composition);","URL GetGraphicCorrespondingToElementInComposition(CompositionStoreSession, URL composition, URL element);","PositionInformation GetPositionInformationcorrespondingToElementIncomposition(CompositionStoreSession, URL composition, URL element);","URL AddElementToComposition(CompositionStoreSession, URL composition, URL graphic, PositionInformation);","RemoveElementFromComposition(CompositionStoreSession, URL composition, URL element);","CompositionInfo GetCompositionInfo(CompositionStoreSession, URL composition); \/\/number of pages, color, etc.","GraphicFormat[ ] GetGraphicFormatsInWhichEntireCompositionIsAvailable(CompositionStoreSession, URL composition);","GraphicFormat[ ]\n    \n    ","GraphicFormat[ ] GetGraphicFormatsInWhichAGivenCanvasIsAvailable(CompositionStoreSession, URL composition, int canvasNumber);","GraphicData GetGraphicDataForEntireComposition(CompositionStoreSession, URL composition, GraphicFormat);","GraphicData GetGraphicDataForEntireCompositionInGivenCanvasOrder (CompositionStoreSession, URL composition, CanvasOrder, GraphicFormat);","GraphicData GetGraphicDataForAGivenCanvas(CompositionStoreSession, URL composition, int canvasNumber, GraphicFormat);"]}},{"@attributes":{"id":"p-0128","num":"0000"},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":["GraphicStoreSession OpenSession(UserIdentification, Credentials);","CloseSession(GraphicStoreSession);","\/\/NOTE: Each page is a distinct graphic (this is a design decision made in creating these APIs)","URL CreateGraphic(GraphicStoreSession, GraphicFormat, GraphicData); \/\/creates at most one graphic from the graphic data","URL[ ] CreateGraphics(GraphicStoreSession, GraphicFormat, GraphicData); \/\/creates one or more graphics from the graphic data","DeleteGraphic(GraphicStoreSession, URL graphic);","\/\/NOTE:  describes a process where a graphic is created, opened, written to, and closed. For purposes of the present API example, the process has been simplified. However, for consistency, the following five methods that track the methods described in the flow chart are included. These methods would create a single graphic, which based on the design decision used in this example, would result in a single \u201cpage\u201d (or canvas).","\/\/URL CreateGraphic(GraphicStoreSession, GraphicFormat);","\/\/Graphic OpenGraphic(GraphicStoreSession, URL graphic);","\/\/WriteGraphic(GraphicStoreSession, Graphic, Data);","\/\/Data ReadGraphic(GraphicStoreSession, Graphic);","\/\/CloseGraphic(GraphicStoreSession, Graphic);","GraphicInfo GetGraphicInfo(GraphicStoreSession, URL graphic); \/\/color, etc.","GraphicFormat[ ] GetGraphicFormatsInWhichGraphicIsAvailable(GraphicStoreSession, URL graphic);","GraphicData GetGraphicDataForGraphic(GraphicStoreSession, URL graphic, GraphicFormat);"]}},"b. Imaging Extension API\n\n","c. Web Content Redirecting Browser to a Web Imaging Home\n\n","d. Implementation of Selected Methods of Imaging Extension API","i. GetReferenceToPreferredImagingHomeDestination\n\n","\/\/Note: This is a private method, i.e., not exposed as part of the imaging extension API, which returns the user identity UserIdentification by opening the method GetUserIdentification with the argument \u201csession\u201d obtained in the previous method relating to redirecting the browser.","UserIdentification useridentification=GetUserIdentification(session);","\/\/Note: The following pseudo code obtains a reference to the user profile store using a private method, which obtains the identity of the user profile store \u201cUserProfileStore\u201d from the user identity","UserProfileStore userProfileStore=GetUserProfileStore(session);","\/\/Note: The following psuedo code calls an \u201cOpenSession\u201d method on the user profile store service to \u201clog into\u201d the user profile store using the arguments \u201cUserIdentification\u201d and \u201cCredentials\u201d obtained earlier, and returns \u201cUserProfileStoreSession.\u201d As noted above, the arrow sign \u201c\u2014>\u201d in this notation means calling\/invoking a method of an object, where the object is on the left side and the method inside the object on the right side-object\u2014>method(parameter) using the arguments set forth. In this example, the method \u201cOpenSession\u201d is called within the object \u201cUserProfileStore.\u201d","UserProfileStoreSession userProfileStoreSession=UserProfileStore\u2014>OpenSession(UserIdentification, Credentials);","\/\/Note: The following pseudo code calls\/invokes a method \u201cGetReferenceToPreferredImagingHomeDestinationURL\u201d provided by the UserProfileStore object or service that returns an imaging home destination preferred by the user (in this example a URL).","URL preferredImagingHomeDestinationURL=userProfileStore\u2014>GetReferenceToPreferredImagingHomeDestination(UserProfileStoreSession);","\/\/Note: The following pseudo code creates and returns an opaque reference \u201cOpaqueRef\u201d corresponding to the URL using a private imaging extension method with the arguments \u201csession\u201d and \u201cpreferredImagingHomeDestinationURL.\u201d.","OpaqueRef preferredImagingHomeDestination=CreateOpaqueReferenceFromURL(session, preferredImagingHomeDestinationURL);","\/\/Note: The following pseudo code ends communication with the user profile store.","CloseSession(UserProfileStoreSession);","\/\/Note: The following pseudo code returns the opaque reference.","return preferredImagingHomeDestination.\n\n",{"@attributes":{"id":"p-0147","num":"0000"},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":["OpaqueRef BrowseToPreferredDestination(Session session, OpaqueRef destination);","{"]}},"\/\/The following pseudo code is a private method, not exposed as part of the imaging extension API, which converts an opaque reference to a URL.","URL destinationURL=GetURLFromOpaqueReference(session, destination);","\/\/The following is a method that redirects the browser to a destination given a URL","RedirectBrowser(destinationURL);","The foregoing includes a plurality of innovative APIs. Note in the example APIs the Set of methods for setting a destination for redirecting a browser based on some form of received redirection initiation. Such redirection initiation could be any form of input from the browser, a network, or any other convenient input obtained directly or indirectly. Typically, the process would comprise receiving a redirection initiation to redirect a browser; getting a direct or indirect reference to a destination; and then causing the browser to browse to that destination.","One example of such redirection, is printer destinations. Example printer destination redirection methods, by way of example, could comprise a preferred printer list destination (PreferredPrinterDestinationList, i.e., a list of printers that will be displayed or otherwise offered for selection), a preferred printer destination (PreferredPrinterDestination, i.e., a single preferred printer that will be selected and a printer settings page displayed or otherwise offered for selection), and a preferred print now destination (PreferredPrintNowDestination, i.e., a printer selected for use with preset settings\u2014no opportunity to set the print settings) in the User's Profile in the User Profile Store, as well as a method for selecting a preferred print destination based on criteria (PrintActionCriteria) and a context (PrintActionContext). These methods use the arguments \u201cuserProfileStoreSession\u201d and \u201cURLpreferred . . . \u201d or \u201cprintActionCriteria.\u201d Typically, the reference will be a URL, but may also be some other convenient reference, such as a proprietary encoding scheme for identifying (and thus referencing) the resource in question.","Likewise, note the various Get methods \u201cGetReference . . . \u201d or \u201cGetPrintActionCriteria\u201d for getting one of the references set by the setting method for the preferred printer list destination, the preferred printer destination, the preferred printnow destination, and the PrintActionCriteria in the User's Profile in the User Profile Store. These methods use the argument \u201cUserProfileStoreSession\u201d and return a \u201cURL, or the \u201cPrintActionCriteria.\u201d","The GetDestinationPrintActionCriteriaAndContext is of particular interest. This method is used to Get the user's preferred print action in a particular situation (context), based on criteria, i.e., prescribed rules. This method would redirect the browser to the preferred printer list, PreferredPrinterListDestination, (so he or she can choose from a number of available printers), or redirect the browser to the preferred printer PreferredPrinterDestination (so he or she can choose options relating to that printer), or redirect the browser to the preferred print now destination PreferredPrintNowDestination (so printing will begin immediately), or some other printer that is preferred in a particular context. Although each of these three or more destinations can be designated specifically, i.e., the application explicitly provides a mechanism for the user to choose \u201cPrinterList,\u201d or \u201cPrinter,\u201d or \u201cPrintNow,\u201d other applications might simply provide a mechanism for the user to generically choose \u201cprint,\u201d without specifying which of the \u201cPrinterList,\u201d \u201cPrinter,\u201d \u201cPrintNow,\u201d or other destination that the user's browser should be directed to. Alternatively, the web content could provide a web page that contains both a \u201cprint\u201d button and a \u201cPrintNow\u201d button. The generic \u201cprint\u201d button would use the PrintActionCriteria and PrintActionContext and GetPrintActionDestinationUsingCriteriaAndContext (or whatever the function is called) discussed below to determine the actual URL the user's browser would be redirected to. The \u201cPrintNow\u201d button would simply use the \u201cPrintNow\u201d destination as obtained using the function \u201cGetPrintNowDestination\u201d (or whatever the function is called).","The purpose of GetDestinationUsingPrintActionCriteriaAndContext is to help determine which of the available print actions should be undertaken and return a reference to the preferred destination to which the browser should be redirected. This method takes as parameters Session, and type PrintActionContext and type PrintActionCriteria. PrintAction Context provides information that might be useful in determining the destination using the GetDestinationUsingPrintActionCriteriaAndContext method. Such context information might be the URL of the current website, the type of the current website (for example, as determined by a tag in the current website), where the user is located, whether the user is inside or outside of a firewall, and various other information. The PrintActionCriteria may be a set of rules, conditional logic or other criteria to use\/interpret the context information to determine the preferred destination. By way of example but not by way of limitation, a set of rules\/conditional logic might be:","If website is\u2014Amazon.com, then destination is Preferred PrintNowDestination;","If website is\u2014a productivity website (based on a tag in the web content for the website, for example), then the destination is Preferred PrinterDestination;","If user location is\u2014outside of office, then the destination is PrinterA;","If user location is\u2014in office, then the destination is PreferredPrinterListDestination;","If the firewall status is\u2014outside of office, then use PrinterB.","The method GetDestinationUsingPrintActionCriteriaAndContext would interpret the forgoing rules in the data structure of the PrintActionCriteria based on the information from the PrintActionContext to determine the destination.","Note in the imaging extension example API the methods for browsing to a preferred print destination using an opaque reference. The methods include \u201cCreateOpaqueRefFromURL, which uses the \u201cURL\u201d as an argument and returns \u201cOpaqueRef;\u201d and the method \u201cBrowseToPreferredDestination\u201d which uses the arguments \u201cSession, OpaqueRef preferredDestination\u201d to cause the browser to browse to the URL reference without exposing the URL to the Web content.","Referring to the example API for the imaging extension, note the comparable method set for getting an opaque reference \u201cOpaqueRef\u201d for the printer list destination, the preferred printer destination, the print now destination, and the preferred imaging home page destination using the appropriate GetReference methods. Likewise, note the set of methods for setting the reference to the preferred destination, i.e., the PreferredPrintListerDestination, PreferredPrinterDestination, PreferredPrintNowDestination, and the Preferred ImagingHomePageDestination, using the appropriate \u201cSetReferenceTo . . . \u201d method with the arguments of type \u201cSession, OpaqueRef.\u201d","Likewise, note the method for setting print action criteria for determining an automatic print destination, i.e., \u201cSetPrintActionCriteria\u201d which uses the arguments \u201cUserProfileStoreSession\u201d and \u201cPrintActionCriteria.\u201d Also included is a Get method \u201cSessions, PrintActionDestinationPreference.\u201d The SetPrintActionDestinationPreference is the default destination which is used if no PreferredPrinterList, or PreferredPrinter or PreferredPrintNow or PreferredImagingHomePage has been selected at the browser. Also included is a Get method for getting an opaque reference \u201cOpaqueRef\u201d for the PrintActionDestinationPreference set in the setting reference using the arguments \u201cSessions, PrintActionDestinationPreference.\u201d Also included is a Get method \u201cGet PrintActionDestinationPreference\u201d using the argument \u201cSession\u201d to get the PrintActionDestinationPreference.","Referring now to , there is shown the same configuration as , but with the imaging client  outside of the firewall . In this situation, none of the servers inside of the firewall , including the composition stores and the graphic stores, would be accessible. This is illustrated by graying out the servers inside the firewall and also graying out the reference to the internal user profile.","Referring now to , a different configuration of the present invention is provided. Like-numbered blocks take the same meaning as in . In this configuration, the imaging client  includes a web browser  that has downloaded web content , an imaging extension , and a user information block , which operate substantially as described previously. However, in this configuration, the imaging client  includes thereon the user profile . The user profile  is designed for both internal (inside the firewall) operation, and external (outside the firewall) operation. Accordingly, this user profile  includes a user identification (not shown), as well as a reference  to a default internal composition store , a reference  to a default internal graphics store , a reference  to a default external composition store , a reference  to a default external graphics store , and may include a reference  to a default composition.","Additionally, in the imaging client there is code for invoking a method to access the references stored in the user profile . Typically, this invoked method would also include code to select the appropriate references based on a criteria. By way of example, this code could provide a user interface to allow the user to select manually the default composition store and the default graphics store. Alternatively or in addition, the code could automatically select a default composition store and a default graphics store based on a criteria, such as for example but not by way of limitation, the type or identification of the imaging client machine being used by the user, or whether the imaging client has connected to a network inside the firewall  or is otherwise inside the firewall or whether it is outside the firewall.","Note that the imaging client  is shown in  inside of the firewall . Accordingly, the browser  in the imaging client has access to the web servers  and  inside of the firewall, as well as the servers  and  outside of the firewall. Also, the user has the option to select a default composition store and a default graphics store either inside or outside of the firewall.",{"@attributes":{"id":"p-0170","num":"0337"},"figref":["FIG. 4","FIG. 3"],"b":["300","14","30","32","62","60","14","30","32","60","62","367","368"]},"GROUP COMPOSITION STORE Referring now to , there is shown a configuration of the present invention wherein there is at least one composition store  and one graphics store  that is shared by a plurality of imaging clients  and . Like numbered references have the same meaning as per FIG. . Note that each imaging client  and  includes a web browser  that has downloaded web content , as well as an imaging extension , and a user identification . In the example shown for illustration of the concepts, the web content  for the imaging client  includes web content from either of the web servers  or  that are inside of the firewall, while the web content  for the imaging client  includes web content from a web server  outside of the firewall. (Note that this diagram is for ease of illustration only. Both imaging clients  and , because they are inside of the firewall , have access to all of the web servers, inside of and outside of the firewall , and may download web content therefrom.) The user identification  in or loaded into the imaging client , includes a reference to a server  that contains the user profile  of interest. Likewise, the user information  in or loaded into the imaging client  includes a reference  to a user profile  on the server .","It should be noted that a given \u201cimaging client\u201d might just be a public machine at an airport. This public machine might be used by inserting a \u201csmart card\u201d into the public machine. The smart card would contain the \u201cuser information \u201d. Accordingly, the user profile is generally associated with the user\u2014not the imaging client machine, per se. Note that there might be many distinct \u201cuser identification 's\u201d that all reference the same user profile (or set of user profiles). For example, there might be one \u201cuser identification \u201d in the user's laptop and another in the user's mobile phone\u2014both of which refer to the same user profile.)","Referring again to , the user profile  includes a reference  to a default composition store , a reference  to a default graphics store , a reference  to a default composition, and a reference  to the group composition store .","Likewise, the user profile  includes a reference  to a default composition store , a reference  to a default graphics store , a reference  to a default composition, and a reference  to the group composition store .","It can be seen that the group composition store  and the group graphics store  are disposed on the same server , for ease of illustration. However, they may be on different servers. The group composition store  includes a plurality of compositions that each references a graphic in the group graphics store for ease of illustration. There is no requirement that a composition in the group composition store reference a graphic in the group graphics store. It could reference a graphic anywhere. Additionally, one composition  references a graphic  in a graphics store  in a server  outside of the firewall .","Note that when the web content uses the imaging extension to obtain and then display to the user a list of all available compositions (for use with the web content currently operating in the imaging client ), all accessible compositions in the various composition stores, including the group composition store(s) will be on the list. A dialogue is then commenced with the user to select the desired composition, which selection may include a composition in the group composition store.","There can be several group composition stores available for different groups. For each group composition store that the user accesses, there will be a reference to that group composition store in one of that user's profiles. Note that a reference to a particular group composition store is typically added to the user's profile by the user \u201csubscribing\u201d to the group composition store. This might be accomplished by the user browsing to a web service, which downloads web content into the user's browser which uses an imaging extension to add a reference to that group composition store to the user's profile. This reference could later be removed by browsing to another web service that is allowed to remove references to group composition stores from the user profile. Once the reference is added to the user profile for the group composition store, then whenever the web content enumerates all of the compositions available, the compositions contained within the group composition store will be included (along with compositions in other composition stores associated with the user's profile, such as the default composition store). Thus, whatever compositions happen to be in the group composition store are automatically available to the web content\/user. For example, if the user subscribes to People Magazine (making the user a member of the \u201cPeople magazine subscribers group\u201d), a reference to the people magazine group composition store might be provided to the user's profile. This group composition store might contain issues of People magazine. As new issues come out, these new issues would be added to the People magazine group composition store. Because the user has a reference to the People magazine group composition store in his\/her user profile, the new issues of people magazine (represented as compositions in the group composition store) would automatically be a part of the user's personal imaging repository. The user would be able to select them like any other composition available in the user's personal imaging repository and subsequently use them. The user would not need to explicitly choose the group composition store\u2014once a reference thereto is added to the user's profile, it is always a part of the user's personal imaging repository and compositions from it will be enumerated when available compositions are listed for selection by the user through the web content, unless the user removes it. It should be noted that the user would not necessarily be aware that he\/she was specifically choosing a composition from the group composition store\u2014the user would just think he\/she was choosing a composition.","Note that there may be two or more group composition stores and group graphics stores, with some being inside the firewall and some being outside the firewall. Accordingly, if the imaging client is outside of the firewall, then the available compositions enumerated by the web content for selection by the user would not include compositions in group composition stores that are inside of the firewall.","The use of a group composition store  and\/or the group graphic store  is particularly advantageous for making a set of compositions available to a group of users. For example, a monthly newsletter could be added to the group composition store. This newsletter composition could then be accessed for the purpose of printing, and other manipulations. The group composition store\/graphics store makes imaging information automatically available to a user based on his\/her affiliation with some group. This affiliation would be indicated in the user profile for each person. Note that there could be several distinct group composition store\/graphic stores for each group with which the user is affiliated. As additional imaging information becomes available in these group composition stores, the user would automatically have that imaging information in his\/her personal imaging repository because the group composition store is a part of that user's personal imaging repository, via the reference to the group composition store in the user's user profile.","As another example, inventors might imagine sharing patent application information. A patent application comprises (at least) three parts: Descriptive text, claims, and figures. One inventor could work on the descriptive text and then create a composition in the group composition store that references a graphic that contains the descriptive text. Another inventor could do the same thing for the figures. A third inventor could do the same thing for the claims. Because compositions representing these elements are in the group composition store, all of the inventors would have access to them, via their respective personal imaging repositories. If new items are added or updated, all of the inventors would have access to the latest versions.","The group composition store simply makes the same compositions available to a group of people. If two users have user profiles that contain a reference to a group composition store, both users will have access to the compositions stored within that group composition store. If a new composition is added or an existing composition updated in some way, both users will have access to that added\/updated composition. The compositions (and the graphics referenced by those compositions) stored within the group composition store become a part of the \u201cpersonal imaging repository\u201d for each of the users. Note that if the imaging client for a given user is outside the firewall, any group composition store (there can be several) that is located within the firewall will become inaccessible to that imaging client.","Referring now to , one example implementation of the operation of the present invention is illustrated to provide an ease of understanding. The invention is not intended to be limited to this specific sequence of operational steps. In addition, one of ordinary skill in the art would realize that each of the steps could be implemented in other comparable ways.","In  the operation begins at the start block , indicating that the imaging client  has been activated. Typically, this is accomplished by the user inputting his\/her user's login name and password or inserting a card into a generic imaging client. The execution then moves to block , wherein a user profile is selected. The details for the selection of the user profile will be discussed in more detail with respect to FIG. . In this example, the browser on the imaging client  then browses to a supplier web server , for example, in block . A supplier web server would supply graphics for subsequent processing, possibly at another web service, i.e., a consuming web service.","The operation then moves to block , wherein supplier web content from the server  is requested and downloaded to the imaging client . The foregoing steps of browsing to the web server and obtaining supplier web content, in one embodiment, would comprise the user inputting an appropriate URL for a web page of a web site. The browser  at the imaging client  would receive this URL input, and in response, transmit an appropriate request (in some cases through a firewall) for the web page to a web server. The web server, for example web server , would receive this request and respond by transmitting the desired web page to the web browser. The browser  would receive the transmitted web page and display it.","Web pages comprise a series of tags, most of which describe the way that the web page should look, but also include tags to specify hyperlinks to other locations (another web site, web page on the current site, or location within the current page, for example). Conceptually, the web page would include a text portion and one or more hyperlinks, such as a \u201cget document service\u201d hyperlink to provide the graphic for the document. The text portion may include information regarding the document creation service provided by the web server , and potentially also information on the cost to use the service and a means for the user to enter payment. The hyperlink is formatted such that, when selected by the user, the browser will transmit an appropriate request back to the web server  for the document creation supplier web content, which is then downloaded to the browser .","Thus, the supplier web content , now residing in the imaging client , presents a variety of options for accessing, manipulating and otherwise using the graphics at or accessible by the web server.","The operation then moves to block , wherein it is assumed that the user chooses via the hyperlink, or by means of automatic selection, an option to do something with the graphic, such as get the document. The browser  receives this user input and transmits an appropriate request to the web server  for the document creation web content.","The operation then moves to block , wherein the supplier web content requests from the user profile a reference to a graphics store in the user's personal imaging repository. Typically, this would be an opaque reference for reference  to a default graphics store . To accomplish this, the supplier web content calls a method that is part of the API provided by the imaging extension . This method logs into the referenced graphics store. At this time, the web content may determine whether or not the graphic store prefers a particular graphic format and generally what graphic formats are supported by the graphic store. The graphic format doesn't necessarily need to be compatible for any specific purpose, such as printing. It merely needs to be compatible with the graphic store so that the graphic store can operate on the supplied graphic format.","It should be noted that there are two web contents operating, typically sequentially: web content from a supplier web service and web content from a consumer web service. The user adds graphic data supplied from one web service (the supplier web service) to their personal imaging repository, then uses that graphic data by browsing to another web service for processing (the consuming web service). Initially, the supplying web service downloads its web content to the user's browser and uses that web content to add a graphic to the user's personal imaging repository, as discussed in more detail herein. Then the consuming web service downloads its web content to the user's browser and accesses the graphic in the user's personal imaging repository to operate on it. The web content provided by the consuming web service will deliver web content that indicates those data formats supported by the consuming web service. Typically, consuming web services will use JPEG, PNG, GIF formats will use information about the graphic such as size, number of pages, etc. By way of example but not by way of limitation, assume that graphic data is to be processed by a consuming web service, such as a printer web service, because the user has browsed to the printer web service and caused the web content of the printer web service to be downloaded to the browser. The printer web service web content will interact with the graphics store in the user's personal imaging repository  and will select a data format with which it is compatible; for a printer web service, typically PDF, PCL, PS, and PCL6. In other words, the consuming web content from the printer web service will \u201cknow\u201d (by virtue of its origin) what data format is appropriate\/compatible with that printer web service and will query the graphics store to determine if there is a match between the data format that may be used at the consuming printer web service and the data format that is available from the graphics store, and will then make the appropriate selection from the formats available from the graphics store.","This format information could be selected automatically, or manually via an input from the user through a user interface.","In block , based on these graphics format options, the consuming web content would choose a graphics format for the graphic on the server .","At this or an earlier point the supplier web content would also display a user interface with selectable options that might include a pull-down menu to allow the user to indicate where he\/she would like the document saved, i.e., in a graphics store associated with the web service from which the graphic was supplied (which graphic store could then be referenced by a composition in a composition store that is part of the user's personal imaging repository and thereby made a part of the user's personal imaging repository), or in a default graphics store in the user's personal imaging repository. It is better to use the user's default graphic store in the user's personal imaging repository if the web service in question is not always available (or more particularly, the graphic store associated with that web service). Some web services will not have a graphic store or cannot be counted on to reliably provide graphics. For example, a web service representing a camera (such as one that runs on the user's local machine\u2014i.e. the imaging client machine) won't have a graphic store since it is likely that the camera will only be connected to the user's imaging client temporarily.","Assuming that the save option has been selected and the graphics store selected either manually or automatically, the operation would then move to block  wherein the supplier web content via appropriate opaque references would create a new graphic in the selected graphics store, which could be the default graphics store  referenced by the user profile. The operation then moves to block , wherein the web content opens the created graphic in the default graphics store  for the purpose of writing data.","The operation then moves to block , wherein the web content generates a message or a sequence of messages requesting the desired graphic data from the web server  in the appropriate format. The operation then moves to block , wherein the web content receives one or more messages in the selected format and writes, via the imaging extension API, the graphic data in these messages to the open graphic in the graphics store.","More specifically, the imaging extension  receives the generic access requests from the web content and responds with a method in its API using appropriate opaque references in the preferred embodiment, to cause the data in the message(s) to be stored in the graphics store . As noted previously, this may involve a communication over a communication link to a remote graphics store, or it may simply involve storage to a designated section of a hard drive on the imaging client , both of which may be in the personal imaging repository for the user. Note that since the HTTP protocol may be used, the extension may communicate these messages containing the graphic through the firewall . The graphics store responds to these commands by storing the messages in one or more graphics files.","The operation then moves to block , wherein the supplier web content retains an opaque reference through the imaging extension API to the newly created graphic and then closes the open graphic. The operation then moves to block , wherein the web content retrieves a reference  in the user profile for a default composition store. This default composition store  may be determined in accordance with a predetermined criteria set by the user or may be set automatically.","The operation then moves to block , wherein the supplier web content, through the opaque references from the imaging extension API, logs into the default composition store  and creates a composition within the composition store . The operation then moves to block , wherein the supplier web content, through the opaque references from the imaging extension API, adds a reference to the newly created graphic in the graphic store  to the composition just created in the composition store .","The operation then moves to block , wherein the supplier web content, through the opaque references from the imaging extension API, changes the reference  in the user profile  for the default composition to refer to the composition just created in the composition store . The operation then moves to block , wherein the supplier web content directs the browser to initiate the use initially selected by the user for the graphic, for example printing. Because the newly created composition is set as the default composition, it will be selected and used by follow-on web services, e.g., printers, to perform services thereon.","Referring to , there are disclosed details for one example implementation of block  in FIG. . In  the initial operation in block  is for a request to be made by the supplier web content to the imaging extension API for user identification information regarding available user profiles. As with other operations, this request would actually be transmitted through the imaging extension's API that would operate to provide opaque references to the user profile and resources therein back to the web content. These opaque references would permit an association of the web content commands to the appropriate resources at the imaging client and with the appropriate personal user repository. The operation then moves to block , wherein it is determined if more than one user profile is available for selection. If the determination is NO, then the operation moves to block , wherein the single active user profile is associated through the imaging extension API to the web content. If the determination is YES, then the operation moves to block , wherein a method is invoked for determining the correct user profile. By way of example, this method may comprise displaying a user interface with buttons to allow the selection of one from a plurality of available user profiles. Alternatively or in addition, the method invoked may default to a particular user profile selected earlier by the user or selected based on a predetermined criteria, such as whether the imaging client is within a firewall, or based on which machine the user has activated as the imaging client .","The operation then moves to block , wherein the user profile selected or automatically determined is associated through the imaging extension API with the web content.","The process described in  may also be performed on behalf of the web content by the imaging extension.","Referring now to , there is shown a schematic example of the operation of the present invention to create, address and stamp an envelope.  shows a single composition  that references two graphics\u2014one for an envelope  and one for a stamp . The graphic of the envelope  includes a sending address and a destination address. These are not necessarily the same graphic\u2014but for simplicity they are part of the same graphic (the envelope graphic). The graphic of the envelope  may be generated from a document using a desktop application  (for example, Microsoft Word) and a \u201cweb imaging printer\u201d (an operating system print destination that captures print data from the application when printing and conveys that information into the user's personal imaging repository) and placed in the user's default graphic store . The stamp graphic  shown in the figure may be generated by a stamp web service  and placed in the user's default graphic store . Presumably, (although not specifically depicted in the diagram), the envelop graphic may exist first.","In operation, the user creates the envelop graphic with the \u201cweb imaging printer\u201d along with the corresponding composition  from the application . After the envelope graphic  and composition  are created using the application  and the web imaging printer and placed in the user's default graphics store , the user browses to a stamp service web site  and purchases a stamp. The stamp service web site  generates image data corresponding to a stamp (typically a barcode for an electronic stamp) and, using stamp service web site web content, places the image data in a graphic  within the user's default graphic store . Having accomplished this, the stamp service web content then adds the graphic  to the envelope composition  in a location appropriate for a stamp. Thus, the diagram illustrates one composition  referencing two graphics  and . This composition could then subsequently be printed\u2014with the stamp.","Although the foregoing description was made in the context of one imaging client  and two server machines  and  within the firewall, and two server machines  and  outside the firewall for ease of explanation, the preferred implementation would likely involve many server machines to which the client machine has access and can communicate. For better readability, \u201ca\u201d client machine or server machine has sometimes been referred to. However, it should be understood that the use of \u201ca\u201d also refers to \u201cone or more\u201d.","It should be noted that although the flow charts provided herein shows a specific order, it is understood that the order of these steps may differ from what is depicted. Also, two or more steps may be performed concurrently or with partial concurrence. Such variation will depend on the software and hardware systems chosen and generally on designer choice. It is understood that all such variations are within the scope of the invention. It is also to be understood that one or more of the steps may be performed or implemented by a programmed machine, or by a hardwired device, or manually. It should also be understood that many of the aspects of the aspects of the present invention are independent of, and may be implemented independently of the API disclosed herein. For example, although the use of an imaging extension is preferred in order to provide an interface between web content and imaging system resources, many aspect of the present invention may be implemented without using an imaging extension.","The foregoing description of a preferred embodiment of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed, and modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. The embodiments were chosen and described in order to explain the principles of the invention and its practical application to enable one skilled in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto, and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7","b":"6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},"FIG. . is a schematic block diagram of a second embodiment of a graphics store."]},"DETDESC":[{},{}]}
