---
title: Organizing messages into conversation threads
abstract: A messaging system that organizes and presents messages to users of the messaging system. The messaging system includes a mailbox module that receives messages and generates conversation threads from the messages. Messages received from different electronic message channels may be aggregated into a common conversation thread. The conversation threads are also organized in a message interface and then presented to a user of the messaging system. The messaging system may include a social networking system that stores social information about users, which can be used to organize the conversation threads. Other features include a multi mode message interface, and a method for adding contextual information to messages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09219704&OS=09219704&RS=09219704
owner: Facebook, Inc.
number: 09219704
owner_city: Menlo Park
owner_country: US
publication_date: 20111028
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION(S)","FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority under 35 U.S.C. \u00a7119(e) to U.S. Provisional Patent Application Ser. No. 61\/413,127, \u201cMessaging System,\u201d filed Nov. 12, 2010. The subject matter of all of the foregoing is incorporated herein by reference in their entirety.","The present disclosure relates generally to messaging systems, and more specifically to a messaging system that organizes messages into conversation threads.","People communicate with each other in an online environment by sending and receiving messages. One area in which large numbers of messages are involved is in social networking Social networking systems allow users to form relationships with other users, applications, events, and many other objects. Users can then communicate with other users in the social network by sending messages such as electronic mail (\u201cemail\u201d) and web-chat messages. When large numbers of messages are involved, whether it be in a social networking system or otherwise, it is easy for a user to become overwhelmed with a constant stream of incoming messages. Thus, it has become a challenge to organize and present messages to users in a manner that is both efficient and user-friendly.","The present invention generally relates to various aspects of a messaging system. Embodiments of the present invention include a mailbox module for organizing and presenting messages to a user of the messaging system by aggregating messages between a set of users into continuous conversation threads. In some embodiments, the messaging system may also be a social networking system.","In one embodiment, the mailbox module aggregates messages from different messaging channels into conversation threads. A first message is received via a first electronic message channel (e.g., email). A second message is received via a second electronic message channel (e.g., web-chat) that is different than the first electronic message channel. Both messages are associated with the same set of users of the messaging system. For example, the first message may be sent by user A to user B and user C, and the second message may be sent by user B to user A and user C. Both of these messages are considered to be associated with user A, user B and user C. Both messages are added to the same conversation thread that is associated with the set of users and includes a collection of messages previously sent between the users of the thread. The conversation thread can be presented for display to one of the users of the thread, resulting in a seamless messaging experience that integrates different messages into conversation threads regardless of the messaging channel associated with the message.","In another embodiment, the mailbox module includes a message interface for sending messages that operates in different message modes. The mailbox module presents the messages of a conversation thread in one region of the interface and a text entry element in another region of the interface. The text entry element accepts message text for updating the conversation thread with a new message. The text entry element operates in at least two different modes. In one mode, pressing the keyboard return key sends the message text in the text entry element as a message. In another mode, pressing the keyboard return key does not send the message, but instead opens an additional line of text in the text entry element. A mode selection element is also presented in the interface that allows the user to switch between the supported message modes.","In another embodiment, the mailbox module organizes conversation threads according to social information that is indicative of social relationships between the participants of a thread. The mailbox module maintains a plurality of conversation threads. Each conversation thread is associated with different plurality of participants that are also users of a social networking system. For example, one thread may be for messages sent between user A and user B. Another thread may be for messages sent between user A and user C. The mailbox module generates a message interface with folders for grouping of the conversation threads. At least one conversation thread is placed into a folder based on social information (e.g., social affinity, relationship degrees, existence of a relationship, etc) about a social relationship between the participants of the thread. The message interface is then presented for display to a participant of the thread. Thus, by using social information to organize conversation threads into folders, conversations can be grouped together based on their perceived social relevance.","In a further embodiment, the mailbox module adds contextual information to a message before delivering a message notification to a recipient of the message. The mailbox module receives a message associated with a plurality of users of a messaging system. A set of messages that were previously sent between the users is identified. From these messages, a subset of recent messages is identified. The subset of messages include messages that are more recent than other messages in the set. For each message, additional contextual information such as a profile picture or profile link for the user that sent the message is identified and associated with the content of the message. A message notification is generated that organizes the associated message contents and profile pictures in chronological order. The message notification is then delivered for display to one or more of the users associated with the original message.","The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["10","10","100","180","190","170","100","180","190","180"]},"A user of the messaging system  uses the client device  to interact with the messaging system  via an application, such as a web browser or a native application, to perform operations such as browsing content, posting and sending messages, retrieving and sorting messages received from other users, and the like. The application may load a message interface provided by the messaging system , which is used for sending and receiving messages. Messages can be sent or received through different electronic message channels\/formats. Generally speaking, a messaging channel is any technology that may be used for delivering electronic messages to a user of the messaging system. Examples of messaging channels include web-chat (e.g., a chat application of a web-page hosted by the messaging system ), e-mail, extensible messaging and presence protocol (XMPP), short message service (SMS) texting and mobile chat (e.g., via an application installed on a mobile client ). Messages can contain plain text, or they can contain other content such as pictures, videos, and attachments.","In one embodiment, the messaging system  is also a social networking system. The social networking system  comprises an object store , a graph information store , an application programming interface (API) , a conversation thread index , and a mailbox module . Through the API , a third party website  can interact with the social networking system . For example, the third party website  can perform operations supported by the API , such as delivering messages to the social networking system , retrieving messages stored by the social networking system , and obtaining social information about users of the social networking system .","The object store  stores information on various objects, such as users , tracked by the social networking system . These objects may represent a variety of things with which a user  may interact in the social networking system , including, without limitation, other users  of the social networking system (represented, e.g., as a profile object for the user), applications  (e.g., a game playable within the social networking system), events  (e.g., a concert that users may attend), groups  to which users may belong, pages or hubs  (e.g., pages constituting a particular organization's presence on the system), items of media  (e.g., pictures, videos, audio, text, or any other type of media content), locations  associated with a user (e.g., \u201cSanta Clara, Calif., USA\u201d), and even concepts  or other terms (e.g., \u201cVictorian literature\u201d). An object in the object store  may represent an entity existing within the social networking system (e.g., an application  available on the social networking system), a virtual entity that exists outside the domain of the social networking system (e.g., a website), or a real-world entity (e.g., a sports team or a retail store). The object store  may further store objects representing other data routinely produced by users  of the social networking system , such as messages , status updates, photos, and videos.","The object store  may store all of the objects existing within the social networking system , such as messages , or the image data associated with an image media item . Alternatively, for virtual entities existing outside of the social networking system , the object store  may contain some form of pointer or reference to the entities, such as the uniform resource locator (URL) of an external media item . Additionally, the object store  may also store metadata associated with the objects, such as a name describing the object (e.g. \u201cCharles Williams\u201d for a person, \u201cBirthday Reminder\u201d for an application, or \u201cPenguin Fanciers\u201d for a group), an image representing the object (e.g., a user profile picture), one or more labels assigned to the object by users (e.g. the textual strings \u201cgame\u201d, \u201ccrime\u201d, and \u201cstrategy\u201d for a strategy game application), or different email addresses of a user object (e.g., \u201cjeremy1234@ gmail.com\u201d and \u201cjeremy1234@ yahoo.com\u201d). Different types of objects may have different types of metadata, such as a set of associated users  for a group , a media type (e.g., \u201cvideo\u201d) for a media item object , and a unique user ID and name tokens (e.g., separate first and last names \u201cCharles\u201d and \u201cWilliams\u201d) for a user object .","The graph information store  stores information on the relationships of the objects in the object store . In one embodiment, the graph information store  represents the objects of the object store  as nodes that are linked together in a \u201csocial graph.\u201d The graph information store  thus comprises information about the relationships between or among the objects, represented as the edges connecting the various object nodes. Various examples of edges in the social graph include: an edge between two user objects representing that the users are have a relationship in the social networking system (e.g., are friends, or have communicated, viewed the other's profile, or interacted in some way), an edge between a user object and an application object representing that the user has used the application, an edge between a user object and a group object representing that the user belongs to the group, and an edge between a user object and a page object representing that the user has viewed the page, to name just a few. For example, if one user establishes a relationship with another user in the social networking system, the two users are each represented as a node, and the edge between them represents the established relationship; the two users are then said to be connected in the social network system. Continuing this example, one of these users may send a message to the other user within the social networking system. This act of sending the message is another edge between those two nodes, which can be stored and\/or tracked by the social networking system. The message itself may be treated as a node. In another example, one user may tag another user in an image that is maintained by the social networking system. This tagging action may create edges between the users as well as an edge between each of the users and the image, which is also a node. In yet another example, if a user confirms attending an event, the user and the event are nodes, where the indication of whether or not the user will attend the event is the edge. Using a social graph, therefore, a social networking system may keep track of many different types of objects and edges (the interactions and connections among those objects), thereby maintaining an extremely rich store of socially relevant information.","In one embodiment, edges in the graph information store  have associated metadata, such as a label describing the type of relationship (e.g., \u201cfriend\u201d as the label between two user objects, \u201cfamily\u201d as the label between brother and sister), or an affinity value quantifying the strength of the relationship. Affinity may be determined, for example, from positive and negative interactions between two objects. Further, a relationship degree, or \u201cdistance,\u201d between any two objects can be ascertained by determining the number of edges on the shortest path between the objects. For example, two user objects that have an edge between them (e.g., denoting a friendship relationship) have a relationship degree (or \u201cdistance\u201d) of one and are considered first-order connections. Similarly, if a user object A is a first-order connection of user object B but not of user object C, and B is a first-order connection of C, then objects A and C have a relationship degree of two, indicating that C is a second-order connection of A (and vice-versa).","In one embodiment, the social networking system  adds information to the graph information store  in real time as it observes events taking place indicating relationships between the various objects, such as a user  interacting with an application . Alternatively and\/or additionally, the graph information store  may be created based on existing stored information from which relationships can be inferred. For example, the friend list of a user  might indicate that the user has a friend relationship with another user, or the data for a group  might indicate that some set of users has a membership relationship with that group, and this information could be reflected in the graph information store .","The conversation thread index  stores information about a large number of \u201cconversation threads\u201d. Each conversation thread is associated with a different set of users (\u201cparticipants\u201d of the thread) and includes a collection of messages sent between the participants of the conversation thread. For example, one conversation thread may include messages sent between user Adam and user Bob. Another conversation thread may include messages sent between user Bob and user Charlie. Another conversation thread may include messages sent between users Adam, Bob and Charlie. A conversation thread can thus be viewed as a historical record of correspondence between a given set of users. A conversation thread may be a historical record of substantially all correspondence sent via the messaging system  between a set of users, or alternatively, a conversation thread may be a record of less than all correspondence.","In one embodiment, the messages  are stored in the object store  and the conversation thread index  links each conversation thread to the messages  that are part of the conversation thread. As conversation threads can include many messages , each conversation thread may be linked to several different messages . Other information stored in the index  for each thread can include, for example, participants of the thread, a folder or category that the thread belongs to, a state of the thread, timestamps of the messages in the thread, an electronic message channel associated with each message, as well as other types of information that are appropriate for indexing.","The mailbox module  accesses the conversation thread index  to retrieve information about conversation threads, update information about conversation threads, and to generate new conversation threads. The mailbox module may also access the object store  and graph information store  to retrieve information about the objects of the social networking system . Additionally, the mailbox module  receives, organizes, and presents messages to\/from users of the social networking system  via an interactive message interface. The message interface can be, for example, a webpage that is viewed by a user at a client device  with a web browser.","The functionality provided by the mailbox module  is described in greater detail in conjunction with . Examples of the functionality provided by the mailbox module include organizing messages into conversation threads, a multi-mode reply interface, organizing conversation threads using social network information, conversation thread states, conversation thread searching, new message notification, New User Experience (NUX) setup bar, adding contextual information to messages, forwarding messages between conversation threads, and invitation based features, among others.","1. Organizing Messages into Conversations","In one embodiment, the mailbox module  aggregates messages into conversation threads that include messages sent between the participants of the conversation thread. For example, assume that Adam and Bob are users of the social networking system . If Adam sends a message to Bob, the mailbox module  creates a new Adam-Bob conversation thread in the conversation thread index  associated with Adam and Bob. Each time Adam sends a \/new message to Bob, that new message is added to the existing Adam-Bob conversation thread. Similarly, each time Bob sends a new message to Adam, that new message is also added to the existing Adam-Bob conversation thread. A conversation thread thus becomes a historical record of correspondence between a set of users.","Organizing messages into conversation threads is in contrast to conventional messaging systems that group messages together based on the subject of the message. Furthermore, many conventional messaging systems separate outgoing messages and incoming messages by organizing them in separate folders (e.g., a \u201csent\u201d folder and an \u201cinbox\u201d folder). By contrast, each conversation thread can include both outgoing and incoming messages within the same conversation thread.","In one embodiment, the mailbox module  also aggregates messages of different electronic message formats received via different types of electronic message channels (e.g., email, short message service (SMS) text, web-chat) into conversation threads. Each conversation thread thus becomes a historical record of correspondence between a set of users regardless of the format of the messages. For example, if Adam sends an online chat message to Bob and also separately sends an email to Bob via the messaging system, the mailbox module  places both of these messages into the same conversation thread (i.e., the Adam-Bob thread). This allows a conversation between a set of participants to continue uninterrupted, even as the participants switch between different message channels across a single client device  or while switching from one client device  to another.","The participants of a conversation thread can include two users, or more than two users. For example, if Adam sends an email message to Bob and copies Charles, this message creates a new three-way conversation thread between Adam, Bob, and Charles. This three-way conversation thread is distinct from the one on one conversation between Adam and Bob that was created in the prior example. Messages in the Adam-Bob conversation thread are not included in the Adam-Bob-Charles conversation thread, and vice versa.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 14","b":["170","1405","170","1410","110","170"]},"In step , the mailbox module determines if a thread already exists for the message. For example, if the sender and recipient(s) of a message match the participants of an existing thread of the thread index , then the thread exists for that message. In step , if the thread already exists, the message is added to that thread. In step , if a thread does not yet exist, the mailbox module generates a new thread for the message. For example, a new thread can be generated by adding a new entry to the conversation thread index . The message is then added to the new thread. A large number of messages from different electronic message channels can be processed and combined in this manner to generate a large number of conversation threads.","Additionally, the mailbox module  may generate a message interface for the conversation threads that can be presented to a user of the messaging system.  is a message interface including a list of conversations according to an embodiment. The interface is for a user named Drew Hamlin . Drew has selected  to view his messages, which opens up a list  of conversation threads (e.g.,  and ). The first conversation thread  represents a conversation between six users - Drew Hamlin, Joel Seligstein, Dan Hsiao Will Bailey, and 2 others. The second conversation thread  represents a conversation between three users\u2014Drew Hamlin, Joseph Lai, and Francis Luu.","For each conversation thread, a brief summary of the conversation is presented in the interface. In one embodiment, the summary includes the names  of the conversation participants, pictures  of the conversation participants, and an excerpt  from the most recent message in the conversation. The summaries are organized by time\/date so that conversations with the most recent messages are placed higher in the interface. The name and\/or picture of the user that the mailbox belongs to (the \u201cmailbox owner\u201d) is not displayed in the summary because it is understood that the mailbox only includes conversations in which the mailbox owner is a participant. In this figure, Drew Hamlin  is the mailbox owner, so his name\/picture are not shown in the summaries.","When a conversation thread has multiple participants, the names of each participant can be displayed in a summary. For example, in conversation , the names of users Joseph Lai and Francis Luu are displayed in the summary. In one embodiment, the object store  includes a profile for each user that comprises a profile name, an email address, a profile picture, and other identifying information. In one embodiment, the name of a participant as displayed in the summary is identified from the participant's profile. For example, an email received from Josephi.Lai@ yahoo.com can be identified from information in the object store  as being an email from the user Josephi Lai.","When a conversation thread has a large number of participants, in one embodiment only a sub-set of the participant names are presented to simplify the summary. The sub-set can be any number of participants from the conversation. For example, conversation  has six participants. Only the names of three conversation participants (Joel Seligstein, Dan Hsiao, and Will Bailey) are displayed. The name of the mailbox owner is not shown in the summary. The names of the other two participants are grouped together and presented as \u201c2 others.\u201d The mailbox module  can select the sub-set of names in any of a number of ways. For example, the sub-set may include the names of the participants who created the most recent messages in the conversation, the name of the participant who started the conversation, or the names of the participants that the mailbox owner has the strongest affinity for or social relationship with.","When a conversation thread has multiple participants, the picture of each participant can be displayed in the summary. The picture of a participant can be identified from a participant's profile that is stored in the object store . However, when a conversation has a large number of participants, in one embodiment only a sub-set of the pictures are presented. For example, conversation  has six participants. Only the pictures for two participants are displayed using a split profile picture . The mailbox module  can select the sub-set of pictures for display in a manner that is similar to selecting the sub-set of names. For example, the sub-set may include the pictures of the participants who created the most recent messages in the conversation, the picture of the participant who started the conversation, or the pictures of the participants that the mailbox owner has the strongest affinity for or social relationship with. In one embodiment, the split profile picture  includes the pictures of the last two participants who replied to the conversation, excluding the mailbox owner.","In one embodiment, the brief excerpt  may be extracted from the content of the most recent message in the conversation thread. For example, in conversation , the excerpt  includes the text \u201cThanks,\u201d which is the most recent message from this conversation . In other embodiments, the brief excerpt is extracted from other information that is not message content, such as metadata associated with the message. For example, the brief excerpt could be the title of the most recent email message in the conversation.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 3","FIG. 2"],"b":["315","315","314","320","319","325","324"]},"The conversation thread can be updated live as new messages are received that update the conversation thread. As discussed above, a conversation thread is akin to a historical record of correspondence between a set of users. Through the interface, a mailbox owner can scroll backwards in time to view the entire history of the messages in the conversation thread. In one embodiment, some of the messages can have attachments such as pictures, videos, documents, etc. The pictures and video can be shown in the interface with a preview of the attachment instead of just a link to the attachment. For example, an attached picture can be shown in the interface with a thumbnail of the picture.","The conversation thread also includes both outgoing and incoming messages. For example, the conversation thread in  includes message , which is a message sent by the mailbox owner Drew Hamlin. The conversation thread also includes message , which is a message sent to the mailbox owner from user Dan Hsiao.","In one embodiment, conversation threads that have more than two participants behave like chat rooms. A conversation participant can send a message to the conversation thread, which is then distributed by the mailbox module  to all conversation participants.  is a conversation thread between more than two users according to an embodiment. As shown, this conversation thread involves Drew Hamlin , Tom Occhino , and  other users . Conversation thread participants can create new messages that update and add to the existing list of messages in the conversation thread in near real-time. Conversation thread participants can add new users to a conversation thread, which updates the conversation thread with an indication  that a user was added. Conversation thread participants can also leave the conversation thread, which updates the conversation thread with an indication  that a user has left. When a conversation thread is updated with a new message, it can also trigger a notification message that is sent to the participants of the conversation thread. A notification message can be sent via a number of different message channels (e.g., email, SMS, etc.).",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":"505"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 6","FIG. 17"],"b":"605"},"2. Multi Mode Message Reply Interface",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIGS. 7 and 8","FIG. 7"],"b":["705","710","705","705","705","705"]},"The quick reply bar  includes a text entry box  and a mode selection box . The text entry box  is an element of the interface that accepts message text for updating the conversation thread. The quick reply bar can operate in two different messaging modes: quick reply mode or standard mode. The mode can be selected by toggling the interactive mode selection box  in the quick reply bar . The interactive selection box  thus allows a user to switch between the quick reply mode and the standard mode or to select a particular mode of operation. In other embodiments, more than two message modes may be supported by the quick reply bar  and the mode selection box  may allow the user to switch between any of the modes. Additionally, in other embodiments the text entry box  and mode selection box  may have a different appearance than that shown in .","The quick reply mode is similar to an instant messaging mode for sending messages. When operating in quick reply mode, a user can enter a message in the text entry box  and send it by pressing the enter key. This allows for messages to be sent with keyboard-based input without requiring the user to switch between a keyboard and a mouse, allowing for a quicker reply. The message is sent to the mailbox module  that adds the message to the conversation thread and updates the message interface with the new message. Any message text in the text entry box  is also cleared out to allow the user to start typing a new message.","Referring to , when operating in non-quick reply (standard mode), a reply all button  is provided for sending messages. The reply all  button is an interface element that can be selected with a mouse click. In some embodiments, the reply all button  may only be shown when operating in the standard mode but hidden during the quick reply mode.","When operating in a non-quick reply (standard) mode, pressing the enter key does not send the message. Instead, pressing the enter key has the effect of generating a carriage return and moves the cursor below the current line of text in the text entry box , similar to how pressing the enter key when writing an email creates another line of text. This method of sending messages may be slower because it requires the use of a mouse, but is preferable for some users. Additionally, this also allows for the creation of more complex and longer messages that have multiple lines of text and spaces in-between the lines.","In one embodiment, the settings for the quick reply bar  are persistent. As the mailbox owner moves from one conversation thread to the next, the settings for the quick reply bar  are maintained. For example, if the mailbox owner sets the quick reply bar  to a standard mode when viewing one conversation thread and then switches to viewing a different conversation thread, the quick reply bar  will remain in standard mode.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 15","b":["170","1505","170","1510","170","1515","170","703","1520","170","715"]},"The user enters message text into the text interface element and sends the message in one of the two supported message modes by selecting the appropriate mode using the mode selection element. If the quick reply mode is selected, a keyboard return input sends the message text in the text entry element as a message. If the standard reply mode is selected the keyboard return input operates as a carriage return that opens an additional line of text in the text entry element. As used herein, a keyboard return input refers to an input from any keyboard-type interface (e.g., physical keyboard or touch screen keyboard) that typically returns a cursor to a next line or executes a command. When operating in the standard reply mode, a message reply element (e.g. reply all button ) may also be presented in the interface.","In step , the mailbox module  receives the message text entered via the text entry element. In step , the mailbox module  adds the message to the conversation thread presented in the first region of the interface. The mailbox module  also updates the message interface with the new message to indicate that the conversation has been updated with the new message.","3. Organizing Conversation Threads using Social Network Information","In one embodiment, the mailbox module  organizes conversation threads using social networking information from the graph information store . Social network information is indicative of social relationships between the users of a conversation thread and allows the conversation threads to be organized by their social relevancy. When a user has a large number of messages and conversation threads, organizing conversation threads using social networking information helps to avoid information overload.","In one embodiment, organizing includes categorizing conversation threads in a user's mailbox into different folders that reflect the perceived importance of the conversation thread. Referring back to , shown is a list of conversation threads organized into different folders. Important conversation threads can be placed into the \u201cmessages\u201d  folder, less important conversation threads can be placed into an \u201cother\u201d  folder, and unimportant conversation threads can be placed into a \u201cspam\u201d folder (not shown). In , the messages folder  is selected, and so the conversation threads in the messages folder  are displayed in the primary window . In one embodiment, information about a folder that a conversation thread belongs to may be stored in the conversation thread index .","In one embodiment, the messaging module  applies a set of heuristic rules to place messages into the different folders. For example, one rule may be that if a certain type of social relationship (e.g., friends, family) exists between the participants of a thread, the conversation thread is placed into the messages  folder. Other types of social relationships are placed into the other  folder. If a social relationship does not exist at all, the conversation may be also be placed into the other  folder. Another rule may be that if an affinity between the thread participants exceeds a threshold, the message is placed into the message  folder. A further rule may be that if a distance (e.g. degrees of separation) between the participants is less than a threshold, the message is placed into the messages  folder. Variations on these rules are possible.","In other embodiments, the messaging module  can calculate relationship scores for the conversation threads as a function of the social information. For example, the relationship score may be calculated as a function of affinity such that a higher affinity results in a higher relationship score. Higher scores indicate that a thread is socially relevant, whereas lower scores indicate that a thread is less relevant. Threads with relationship scores exceeding a threshold are placed into the messages folder, threads with scores under a threshold are placed into the spam folder, and all other messages are placed into the other folder. In other embodiments, there may be a different number of conversation categories and the names of the categories may be different.","In other embodiments, organizing conversation threads includes sorting conversation threads according to social network information. For instance, conversation threads with a higher affinity may be placed in the message interface above conversation threads with a lower affinity, which indicates that the higher affinity threads are of greater social relevancy. The threads may be sorted according to heuristic rules, or by calculating a score for each conversation thread and sorting the threads according to their scores.","In yet another embodiment, organizing conversation threads includes filtering conversation threads according to social networking information. For instance, a user may select only to view conversation threads that involve \u201cfriends\u201d of the user. In response, the mailbox module \u2014presents only conversation threads where one or more participants of the thread are friends of the user. Other conversation threads not involving participants that are \u201cfriends\u201d are hidden from view.","When a thread has more than two participants, the type of social information used to organize a thread may depend directly on which participant the thread is being presented to. For example, if user A, B and C are participants of a thread, the social relationship between user A and user B may be used to organize the thread for presentation to user A. Additionally or alternatively, the social relationship between user A and user C may also be used to organize the thread for presentation to user A. The social relationship between user B and user C may not be used to organize the thread for user A because that relationship is irrelevant to user A.","The mailbox module  may also consider other factors, either alone or in combination with the social information when organizing conversation threads. These factors include, but are not limited to:\n\n","In one embodiment, once the mailbox module  categorizes conversation threads into folders, a user can override the default placement by selecting a new placement for any of the conversation threads. For example, referring back to , suppose the default placement for a particular conversation thread is in a \u201cmessages\u201d folder. Through functionality provided in the user interface, such as an option  in a drop down list, the mailbox owner can select the conversation thread and move the conversation thread into the \u201cother\u201d folder. The settings are persistent so that the conversation thread remains in the \u201cother\u201d folder as new messages are received that update the conversation thread.",{"@attributes":{"id":"p-0079","num":"0085"},"figref":"FIG. 16","b":["1605","170"]},"In step , the mailbox module generates a message interface for viewing conversation threads, an example of which is shown in . The message interface has several different folders that grouping together conversation threads. The folders may be indicative of a relative importance of the conversation threads in the folder or some topic that is shared by the conversation threads in the folder.","In step , the mailbox module  organizes the conversation thread in the message interface using social information that is indicative of relationships between the participants of the thread. The social information may be directly retrieved from the graph information store . Alternatively, it may be retrieved from a pre-built index of social information that allows for faster retrieval of the social information in the graph information store . In one embodiment, the mailbox module  organizes the conversation thread into a folder using the social information. In another embodiment, organizing may include sorting or filtering the conversation thread based on the social information.","In step , the mailbox module  presents the message interface for display to a participant of the thread. The user may also select to over-ride the default folder assigned to a conversation thread by the mailbox module . In step , the mailbox module  receives a selection of a conversation thread from the user. The mailbox module  also receives a selection of a new category for the conversation thread from the user. In step , the mailbox module then adds the conversation thread to the selected folder.","4. Conversation States and Archiving","In one embodiment, conversation threads have \u201cstates\u201d that indicate the status of a conversation thread. Examples of states include whether a conversation thread is read, unread, or archived. In other embodiments, other states are also possible. States may be stored by the mailbox module  in the conversation thread index  as metadata associated with a conversation thread. As a conversation thread may have several participants, a separate state for the thread can be stored for each participant of a thread.",{"@attributes":{"id":"p-0084","num":"0090"},"figref":"FIG. 17","b":["172","1705","1710","1715","1705","1710","1715"]},"A conversation thread marked as being in the read state  is updated to the unread state  when a new message is received and added  the conversation thread. A conversation thread marked as being in the archived state  is also updated to the unread state  when a new message is received and added  to the conversation thread. A conversation thread marked as being in the unread state  is updated to the read state  when the mailbox module receives an indication that the user has read  the new message of the conversation thread. Additionally, a user may manually select to change the state of a conversation from one state to a different state, which causes the mailbox module to update the state of the conversation in accordance with the user input.","Referring again to , shown is an interface where read and unread conversation threads within the messages  folder are presented in the interface. In one embodiment, the state of a conversation thread is used to determine how the conversation thread is presented in the message interface. For example, conversation threads in an unread state (e.g., threads  and ) can be visually distinguished, e.g., highlighted with a purple color, to indicate that the conversation thread is unread. Conversation threads in a read state can be presented without any highlighting to indicate that the conversation thread is read. To simplify the appearance of the interface, archived conversation threads are hidden in the interface unless the mailbox owner specifies that the archived conversation thread should be shown. However, by selecting the Archived  button, the archived messages can be shown and all other messages can be hidden from view.","The state of a conversation thread can be automatically set by the mailbox module . A conversation thread is automatically marked as unread when new messages are received for the conversation thread. A conversation thread is automatically marked as read when the mailbox owner opens the conversation thread to read the messages in the conversation thread. The state of a conversation thread can also be set by the mailbox owner. Through the user interface, the mailbox owner can manually mark a conversation thread as being archived, read, or unread. For example, referring still to , a conversation thread can be marked as being read or unread with the o-shaped icon . A conversation thread can be marked as archived with the x-shaped icon . Both icons are selectable with a single mouse click to change the state of the conversation thread.","A conversation thread that is marked as unread or archived will maintain its state until a new message is received for the conversation thread. Once a new message is received, the mailbox module  marks the conversation thread as unread, even if the conversation thread was previously archived by the user. For archived conversation threads that were previously hidden from view, this has the effect of un-hiding the conversation thread and bringing it to the mailbox owner's attention. For example, a mailbox owner may archive a conversation thread for confirmation emails received from orders.amazon.com, indicating that he does not want to see this conversation thread. Archiving the conversation thread hides the conversation thread from view. However, once a new message is received from orders.amazon.com, the mailbox module  marks the entire conversation thread as unread. The conversation thread now appears in the user's mailbox to notify the mailbox owner that a new message was received.","5. Searching Messages and Conversation threads",{"@attributes":{"id":"p-0089","num":"0095"},"figref":["FIGS. 9 and 10","FIG. 9"],"b":["905","170","910","920","925","930","940","930"]},"In one embodiment, the scope of the search can be limited through the use of search options. The search options can be entered in a number of ways, such as with an additional command in the search query or through a list of selectable options. Using the search options, the scope of the search can also be limited in a number of ways. For example, the search can be limited to particular conversation threads or can be an unrestricted search of a user's entire mailbox. Searches can also be restricted by time, user names, message channel (i.e., email or web-chat), etc.","In one embodiment, the interface also includes a \u201csee more\u201d button  that provides additional context for a select message, such as messages from the same conversation thread that are adjacent in time to the select message. Displaying additional context facilitates the mailbox owner's understanding of messages in the search results. Referring to , shown is the message interface after the mailbox owner has selected the see more button  from . As a result, the mailbox module  identifies and presents two additional messages ,  are shown in the interface. One message  is the preceding message from the same conversation thread as the original message  and is presented directly above the original message . Another message  is the subsequent message from the same conversation thread as the original message  and is presented directly below the original message .","Additional messages from the conversation thread can be shown by selecting the \u201cmore\u201d buttons , . One more button  causes the mailbox module  to show additional preceding messages. The other more button  causes the mailbox module  to show additional subsequent messages. The conversation thread can thus be expanded as much as necessary to provide the user with more information about the conversation thread that the selected message belongs to.","6. New Message Notification","In one embodiment, when a new message is received, the mailbox module  sends a notification to the mailbox owner. The notification can be delivered in a number of different ways, such as through a chat window, an email, a SMS message, a visual indication in a user interface, an application installed on a mobile device (e.g., IPHONE or ANDROID powered device), or any other method of delivering a notification. The notification may or may not contain the contents of the message itself For example, Adam may send an email intended for Bob that is received by the mailbox module  and updates the Adam-Bob conversation thread. To notify Bob of the new message, the mailbox module  can convert the contents of the email into an SMS message and forward the SMS message to Bob's phone number.","The mailbox module  considers the following policies in determining how to deliver the notification. In general, the mailbox module considers information such as social context, information about the message, information about the sender, and information about the recipient. The policies can be balanced against each other to determine the best method for sending a notification. Exemplary policies include:\n\n",{"@attributes":{"id":"p-0095","num":"0112"},"figref":"FIG. 11","b":"1105"},"In one embodiment, the NUX bar  divided into three different interactive sections. One section  is for activating an email address. Activating an email address enables the mailbox module  to send messages to the mailbox owner's email address. For example, in this figure, the mailbox owner has selected to activate the email address drew@ facebook.com. As a result of activating this email address, the mailbox owner may start receiving email messages, such as message notifications and other emails, at this email address.","A second section  enables the mailbox owner to turn on SMS text messaging. Activating text messaging enables the mailbox module  to send messages, such as message notifications, to the mailbox owner's phone number. Selecting this option may open a separate window for entering a phone number, which is then received and stored by the mailbox module  in association with the mailbox owner.","A third section  enables the mailbox owner to chat online. Selecting this option allows the user to start chatting online with other users in the social networking system . This feature allows users who are unfamiliar or uncomfortable with the design of the messaging interface to communicate with other users via a conventional chatting interface.","8. Adding Contextual Information to Messages","In one embodiment, message notifications sent by the message module  are formatted in a manner that is similar in appearance to the user interface of . The formatting allows the mailbox module to add additional contextual information to a message before sending the message to the recipient of a message. The contextual information can include, for example, recent messages from the conversation history, and profile pictures of the participants in the conversation.",{"@attributes":{"id":"p-0100","num":"0117"},"figref":"FIG. 18","b":["170","1805","170"]},"In step , the mailbox module  identifies a thread that the message belongs to. For example, the thread can be identified from the conversation thread index  by matching the participants of a thread to the sender and recipients of the message. Alternatively, the message may include an explicit indication of the conversation that it belongs to, which is used to identify the appropriate conversation. Generally speaking, by identifying the conversation thread, the mailbox module  is identifying a collection of messages previously sent between the participants of the thread.","In step , the mailbox module  identifies a subset of one or more recent messages from the conversation thread. To reduce the amount of contextual information that is to be added to the message, the mailbox module  only selects the most recent messages in the conversation thread while excluding messages that are not recent (i.e., older messages). The number of messages in the subset can be set to any pre-determined number, or may be limited to messages that are within some pre-determined window of time. In one embodiment, recent messages are identified by identifying time-stamps of the messages in a thread and then selecting the messages with the most recent time-stamps.","In step , the mailbox module  obtains a profile picture and profile link for both the received message and any messages in the subset of recent messages. For a given message, the user who sent the message is first identified. The user's profile picture is then obtained from the user's profile that is stored within the messaging system . Similarly, a link (e.g. a hyperlink) to the user's profile is also generated that can be used to access additional information about the user that sent the message.","For each message, the content of the message is also associated with its profile picture and profile link. Associating the content of the message with its profile picture\/profile link allows a visual association to be created between the content of the message and its profile picture\/profile link, which provides the user with an indication of who sent the message.","In step , a contextual message (e.g., a message notification) is generated by organizing the received message and each message in the subset of recent messages in chronological order. Specifically, the content of each message and its associated profile picture and profile link are added to the contextual message such that they appear in chronological order. The appearance of the contextual message is explained in greater detail by reference to  and . In some embodiments, the profile link may be embedded into the picture such that selecting the profile picture accesses a user profile. In other embodiments, the profile link may be embedded into a name of a user who sent the message such that selecting the user's name accesses the user profile.","In step , the mailbox module delivers the contextual message via one or more message channels (e.g., email) for display to one or more recipients of the original message. The notification may be delivered via the same message channel as the original message, or may be delivered through a different message channel. The recipient is thus provided with a notification of an incoming message that also includes additional context for understanding the message, such as a conversation history or profile pictures of the conversation participants.",{"@attributes":{"id":"p-0107","num":"0124"},"figref":"FIG. 12","b":["1205","1206","1207","1208","1210","1205","1210"]},"The messages in the conversation history  provide context for understanding the events leading up to the most recent message . The profile pictures provide context for understanding which user sent each of the messages, and are placed just adjacent to the message content to create a visual link between the profile pictures and the message content. Additionally, the messages are organized in chronological order from most recent to least recent to represent the flow of the conversation. In other embodiments, the messages may be organized in a different chronological order, such as from least recent to most recent.","In one embodiment, the names (e.g. ) in the email are active links to the profile of the participant. For example, clicking on the name \u201cMatthew Short\u201d will pull up the profile of Matthew Short from the object store . Alternatively, the profile pictures (e.g. ) themselves may be active links to the user profiles. The message also includes a link  to the conversation thread for viewing other messages of the conversation thread. Selecting the link opens a message interface, such as the interface shown in  or .",{"@attributes":{"id":"p-0110","num":"0127"},"figref":["FIG. 13","FIG. 3"],"b":["1305","1310","1310","1315","1315","1320","4"]},"9. Forwarding Messages Between Conversation Threads","In one embodiment, the message module  allows the user to forward messages from one conversation thread to a different conversation thread (the \u201ctarget conversation thread\u201d). Messages can be forwarded through options provided by the user interface, such as with selection boxes that are placed next to each message. Using the selection boxes, one or more messages within a conversation thread can be selected for forwarding. Entire conversation threads can also be forwarded to a target conversation thread in a similar manner through options provided by the user interface. For example user Adam can forward the entire Adam-Bob conversation thread to the Adam-Bob-Charles conversation thread.",{"@attributes":{"id":"p-0112","num":"0129"},"figref":"FIG. 19","b":["170","1905","180","1910","180"]},"In step , the mailbox module  adds the selected messages to the target conversation thread. The mailbox module  may also add additional information to the conversation thread index for the forwarded messages. Examples of information that may be added to the index include whether the messages were forwarded, the user who forwarded the messages, when the messages were forwarded, etc.","In step , the mailbox module generates a message interface for the target conversation thread. In one embodiment, the message interface may have the appearance shown in  or . In step , the message interface is then output to the client device for display to a user of the messaging system.","Referring back to , as shown, user Dan Hsiao has forwarded a single message  from user Ross Bayer to this target conversation thread. The forwarded message  appears in the target conversation thread with the full text of the forwarded message, the name of the original sender (Ross Bayer) of the message, the picture of the original sender, and the date (October 6) the message was sent. The message is also displayed with an indication of the participant who forwarded the message (Dan Hsiao) and the date the message was forwarded to the target conversation thread (October 10). In one embodiment, if Dan Hsiao had forwarded multiple messages from Ross Bayer at once, each of the forwarded messages would appear below message  as a list of messages.","In one embodiment, the forwarded messages are grouped together and appear as an attachment in the target conversation thread. In another embodiment, the messages are combined into one large message, assigned a timestamp based on the date the messages were forwarded, and appear as a single message within the new conversation thread. For example, if the messages \u201cThank you\u201d and \u201cI like Halloween candy\u201d are forwarded as a group, they would appear as a single message of \u201cThank you. I like Halloween candy.\u201d within the target conversation thread. In yet another embodiment, forwarded messages are integrated into the target conversation thread using their original timestamps. This in essence updates the target conversation thread with new messages, making messages appear as if they were always part of the target conversation thread.","10. Invitation-Based Features","In one embodiment, the messaging system contains a large number of messages  that are not organized into conversation threads. To achieve the benefits of conversation threading, the mailbox module  must organize these messages  into conversation threads. However, this can be a challenge for messaging systems that have millions of users and multiple-petabytes of data.","To facilitate a smooth transition from a messaging system that is not conversation-based into a messaging system that is conversation-based, the mailbox module  selectively invites users to convert their messages into a conversation-based format. Inviting users comprises any action that, if accepted, initiates the conversion and does not have to be an explicit invitation for conversion. For example, in one embodiment an invitation comprises inviting a user to sign up for an email address. When the request is accepted, the mailbox module  then begins the conversion for that user. Furthermore, invitations may be sent in a variety of manners, such as via email, through a notification when the user logs on to the messaging system, etc.","In one embodiment, a sub-set of users is first invited to initiate the conversion process. The sub-set of users includes the most frequent users of the messaging system, as indicated by a user's actions within the messaging system . For example, actions can include messages sent or messages received. If the messaging system includes a social networking system, the actions may also include, for example, number of friends, time spent browsing content in the social networking system , number of objects interacted with in the social networking system, etc. Other types of social information may also be used to determine the most frequent users. In one embodiment, an activity score is computed for the users as a function of such activity information, and users with scores exceeding a threshold are considered the frequent users. Frequent users are invited to initiate the process, whereas other users are not.","In one embodiment, frequent users are also given a limited number of invitations to distribute to other users. The number of invitations to be given to a user can be determined in any manner. For example, a user may be given just enough invitations to cover all the user's friends. In one embodiment, any users that accept an invitation are given invitations to distribute to other users. In another embodiment, there may be a pre-determined amount of time that passes between when a user accepts an invitation and when the user is given additional invitations to distribute. The process continues until all the users in the messaging system have their mailboxes migrated into conversation-based mailboxes or until the need for sending invitations is no longer necessary.","Generally speaking, invitations may be provided for initiating any type of feature provided by the messaging system, and not just for initiating conversation-based messaging. For example, if the messaging system includes a social networking system, the invitations may be for initiating the use of a new social networking feature, the use of a new social networking application, or the use of a new social networking interface.",{"@attributes":{"id":"p-0122","num":"0139"},"figref":"FIG. 20","b":["170","2005","2010","2015","2020","170","2025"]},"Additional Considerations","The foregoing description of the embodiments of the invention has been presented for the purpose of illustration; it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.","Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations, while described functionally, computationally, or logically, are understood to be implemented by computer programs or equivalent electrical circuits, microcode, or the like. Furthermore, it has also proven convenient at times, to refer to these arrangements of operations as modules, without loss of generality. The described operations and their associated modules may be embodied in software, firmware, hardware, or any combinations thereof","Any of the steps, operations, or processes described herein may be performed or implemented with one or more hardware or software modules, alone or in combination with other devices. In one embodiment, a software module is implemented with a computer program product comprising a non-transitory computer-readable medium containing computer program code, which can be executed by a computer processor for performing any or all of the steps, operations, or processes described.","Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, and\/or it may comprise a general-purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non-transitory computer readable storage medium or any type of media suitable for storing electronic instructions, and coupled to a computer system bus. Furthermore, any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.","Finally, the language used in the specification has been principally selected for readability and instructional purposes, and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description, but rather by any claims that issue on an application based hereon. Accordingly, the disclosure of the embodiments of the invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
