---
title: Data processing system and method for managing memory of an interpretive system
abstract: A data processing system and method manage the storage of instructions used in applications developed using an interpretive programming language, such as Java, REXX, BASIC, and the like, when those instructions are compiled into byte-codes to be used by a virtual machine stored in a “heap.” In the data processing system and method, an exception is registered in a page manager of an operating system to identify that compiled code should be stored within the heap of the virtual machine. After that code has been compiled and deleted from the heap, an exception occurs when the virtual machine attempts to subsequently access the compiled code. At that point, the virtual machine is then enabled to retrieve the desired code from an interpreted programming language application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06862650&OS=06862650&RS=06862650
owner: International Business Machines Corporation
number: 06862650
owner_city: Armonk
owner_country: US
publication_date: 19971114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND INFORMATION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates in general to data processing systems, and in particular, to the management of a memory of an interpretive system environment.","The worldwide network of computers, commonly known as the \u201cInternet,\u201d has seen explosive growth in the last several years. This growth has been typically fueled by the introduction and widespread use of \u201cweb\u201d browsers that allow for simple graphical user interface-based access to network servers. Such network servers typically support documents formatted as \u201cweb pages.\u201d The \u201cWorld Wide Web\u201d (www) is a collection of servers on the Internet that utilize the Hypertext Transfer Protocol (HTTP), a known application protocol that provides users access to files using a standard page description language referred to as Hypertext Markup Language (HTML). It should be noted that files may be provided in different formats such as text, graphics, images, sound, and video, among others. HTML provides basic document formatting and allows a developer to specify \u201clinks\u201d to other servers and files. Use of an HTML-compliant client browser involves specification of a link via a Uniform Resource Locator, commonly known by the acronym, \u201cURL.\u201d Upon specification of a URL, a client may make a TCP\/IP (Transmission Control Protocol\/Internet Protocol) request to the server identified in the link and receive a \u201cweb page\u201d in return, where the \u201cweb page\u201d is a document formatted according to HTML.",{"@attributes":{"id":"P-00004","num":"00004"},"figref":"FIG. 1","b":["110","112","112","112","114","116","114","116","112","110","114","116","110","112","110"]},"In such a communication system, Java is a programming language that is often used to program applications made available on the Internet because Java is very flexible and may be easily used on any operating system, as long as that system implements a Java virtual machine. During execution of a Java-based application, a Java program is compiled into an architecture-neutral byte format that allows the application to be executed on any system platform that also implements the Java virtual machine.","It should be noted that the flexibility and neutrality of Java applications results from Java's implementation as an \u201cinterpreted\u201d language. In interpreted languages, a compiler typically generates byte-codes to be used by a programming virtual machine, rather than native machine code, to provide control and data necessary to execute an application. More specifically, in Java, a Java compiler typically generates byte-codes to be used by the Java Virtual Machine (JVM), rather than native machine code, to provide the control and data signals necessary to execute a Java application. Subsequently, to actually execute a Java application, a Java interpreter executes the compiled byte-codes generated by the Java compiler. As previously mentioned, Java applications may be executed on any platform that the A JVM has been ported to as such byte-codes are platform-independent. An advantage of the interpreted environment is that a standard \u201ccompile\u201d phase of program development is significantly diminished when viewed in contrast with the compile-link-run cycles required by programming languages such as C and C++.","In contrast, a disadvantage of interpreted programming languages, such as Java, is that that programming language is not executed as quickly as a compiled language, such as the C programming language. To boost the performance of applications written in Java, many Java interpreters include \u201cJust In Time\u201d (JIT) compilers that are able to translate certain Java byte-code segments into machine code for a particular central processing unit at run-time. This block of compiled code (also referred to as JIT'ed code) is then stored in a storage space, referred to as a \u201cheap.\u201d","By storing the JIT'ed code in a heap, the code may be repeatedly accessed and is not required to be compiled a second time. In current operating systems supporting Java, the heap is stored as part of the Java virtual machine. Therefore, heaps for storing the compiled code tend to grow larger until the memory space allocated for the heap is exceeded in current Java applications that implement JIT compilation. Upon exceeding the physical memory space, certain portions of the data stored within the heap are then transferred to a \u201cpaging file.\u201d The paging file is a paging space, or an area on a disk, which is used to store physical memory data pages that may not be stored within a current memory used by an operating system or application.","When the \u201cpaged\u201d data is required again, the data is retrieved from the disk and used again. While this methodology allows for the compiled code to be retrieved and not recompiled, this paging process requires an excessive amount of time and does not allow the heap to become smaller than a predefined size. This requirement may then result in an efficient use of memory within a Java virtual machine supporting a Java application.","Therefore, a need exists for a method and apparatus for managing a heap in a Java virtual machine to ensure efficient and timely execution of applications implemented using the Java programming language.","The previously mentioned needs are fulfilled with the present invention. Accordingly, there is provided, in a first form, a data processing system for executing a software program. The data processing system includes a virtual machine for converting a first portion of the software program to a first plurality of data values. The software program is an interpreted language program. The data processing system also includes a memory. A first portion of the memory selectively stores the first plurality of data values. The data processing system also includes an operating system device for managing removal and replacement of the first plurality of data values from the memory. The operating system device is connected to the virtual machine and to the memory.","Additionally, there is provided, in a second form, a method for executing a software program in a data processing system. The method includes the steps of receiving a software program written in an interpreted programming language and initiating operation of a virtual machine to selectively convert at least a first portion of the software program to a first plurality of byte-code values. The method also includes the steps of selectively storing the first plurality of byte-code values in a first memory and selectively providing the first plurality of byte-code values to an operating system. As well, the method includes the steps of enabling the operating system to execute the software program and enabling the operating system to selectively remove the first plurality of byte-code values from the first memory.","Furthermore, there is provided, in a third form, a computer program in a computer readable medium. The computer program includes a device for receiving a software program written in an interpreted programming language and a virtual machine. Operation of the virtual machine is initiated to selectively convert at least a first portion of the software program to a first plurality of byte-code values. The computer program also includes a first memory for selectively storing the first plurality of byte-code values. As well, the computer program includes an operating system device for selectively receiving the first plurality of byte-code values, for selectively executing the software program, and for selectively discarding the first plurality of byte-code values from the first memory.","These and other features, and advantages, will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings. It is important to note the drawings are not intended to represent the only form of the invention.","The present invention implements a data processing system and method for managing the storage of instructions used in applications developed using an interpretive programming language, such as Java, REXX, BASIC, and the like, when those instructions are compiled into byte-codes to be used by a virtual machine and stored in a \u201cheap.\u201d It should be noted that a \u201cheap\u201d refers to an area of memory in a virtual machine where the byte-codes utilized during execution of an application implemented using the interpretive programming language. The present invention recognizes that the heap continues to store more and more information until the application is finished executing and the heap is cleared. However, this may not be the most efficient use of the memory space associated with the heap. Therefore, the present invention proposes a method and data processing system that implement extensions in an operating system to manage the heap associated with the virtual machine. Thus, a page manager for managing physical memory pages associated with most operating systems, may be used to manage pages for the virtual machine. Implements and operation of the present invention will subsequently be described in greater detail. Prior to that description, however, an environment in which the present invention may be implemented will be provided in greater detail.","In the following description, numerous specific details are set forth to provide a thorough understanding of the present invention. However, it will be obvious to those skilled in the art that the present invention may be practiced without such specific details. In other instances, well-known devices have been shown in block diagram form in order not to obscure the present invention in unnecessary detail. For the most part, details concerning timing considerations and the like have been omitted inasmuch as such details are not necessary to obtain a complete understanding of the present invention and are within the skills of persons of ordinary skill in the relevant art.","Refer now to the drawings wherein depicted elements are not necessarily shown to scale and wherein like or similar elements are designated by the same reference numeral through the several views.","A general environment in which the communication network and methodology of the present invention may be implemented is illustrated in , which has been previously discussed.  illustrates a data processing system which may implement one embodiment of the present invention. It should be noted that the data processing system of the present invention may be utilized to implement a personal computer, a personal digital assistant (PDA), and a myriad of Internet devices (e.g., set top boxes, web television, etc.).","Referring first to , an example is shown of a data processing system  which may be used for the invention. The system has a central processing unit (CPU) , such as a PowerPC microprocessor (\u201cPowerPC\u201d is a trademark of IBM Corporation) according to \u201cThe PowerPC Architecture: A Specification for a New Family of RISC Processors\u201d, 2d Edition, 1994, Cathy May, et al. Ed., which is hereby incorporated herein by reference. A more specific implementation of a PowerPC microprocessor is described in the \u201cPowerPC 604 RISC Microprocessor Users Manual\u201d, 1994, IBM Corporation, which is hereby incorporated herein by reference. The history buffer (not shown) of the present invention is included in CPU . The CPU  is coupled to various other components by system bus . Read only memory (\u201cROM\u201d)  is coupled to the system bus  and includes a basic input\/output system (\u201cBIOS\u201d) that controls certain basic functions of the data processing system . Random access memory (\u201cRAM\u201d) , I\/O adapter , and communications adapter  are also coupled to the system bus . I\/O adapter  may be a small computer system interface (\u201cSCSI\u201d) adapter that communicates with a disk storage device . Communications adapter  interconnects bus  with an outside network enabling the data processing system to communication with other such systems. Input\/Output devices are also connected to system bus  via user interface adapter  and display adapter . Keyboard , track ball , mouse  and speaker  are all interconnected to bus  via user interface adapter . Display monitor  is connected to system bus  by display adapter . In this manner, a user is capable of inputting to the system throughout the keyboard , trackball  or mouse  and receiving output from the system via speaker  and display . Additionally, an operating system such as AIX (\u201cAIX\u201d is a trademark of the IBM Corporation) is used to coordinate the functions of the various components shown in FIG. .","Preferred implementations of the invention include implementations as a computer system programmed to execute the method or methods described herein, and as a computer program product. According to the computer system implementation, sets of instructions for executing the method or methods are resident in the random access memory  of one or more computer systems configured generally as described above. Until required by the computer system, the set of instructions may be stored as a computer program product in another computer memory, for example, in disk drive  (which may include a removable memory such as an optical disk or floppy disk for eventual use in the disk drive ). Further, the computer program product can also be stored at another computer and transmitted in a computer readable medium when desired to the user's work station by a network or by an external network such as the Internet. One skilled in the art would appreciate that the physical storage of the sets of instructions physically changes the medium upon which it is stored so that the medium carries computer readable information. The change may be electrical, magnetic, chemical or some other physical change. While it is convenient to describe the invention in terms of instructions, symbols, characters, or the like, the reader should remember that all of these and similar terms should be associated with the appropriate physical elements.","Note that the invention describes terms such as comparing, validating, selecting or other terms that could be associated with a human operator. However, for at least a number of the operations described herein which form part of the present invention, no action by a human operator is desirable. The operations described are, in large part, machine operations processing electrical signals to generate other electrical signals.",{"@attributes":{"id":"P-00029","num":"00029"},"figref":["FIG. 3","FIG. 3"],"b":["302","302","220","240","302","302"]},"To describe operation of the Java operating environment illustrated in , an example will be provided below. In this example, assume that Java Virtual Machine (JVM)  uses system services provided by operating system  to execute a function specified in a Java applet or application. A Java applet is actually a program written in the Java programming language that is typically linked to a web page. To call an applet or application, a Java programmer creates a file on a server in which the Java source code is stored. Upon creation of the file, an HTML page is created with a special tag to indicate that a browser (located on client ) should download the file and interpret it as a Java applet or application. Assume that the Java applet or application requires that the browser within a client provide the appropriate data and control signals to draw a window on a display device ( of FIG. ). To provide those data and control signals, JVM  translates the Java program into byte-codes, also referred to as API (application programming interface) calls. JVM  provides the API calls to API . API  subsequently translates the calls to the appropriate control and data signals required to enable operating system  to provide the signals required by display adapter  and display device  of  to draw a window thereon.","In interpreted programming systems, JIT compiler  compiles portions of Java code that are repeatedly used by operating system . Thus, rather than merely compiling codes into a byte-code format that is subsequently compiled by JVM , JIT compiler  compiles Java program portions into native instructions utilized by the hardware platform upon which the operating system is implemented. When the code is compiled into actual native code, the native code may execute directly within operating system  and is not required to run through an interpreted programming device, such as JVM .","After Java programming code is compiled by either JVM  or JIT , the code is stored in \u201cpages\u201d in a heap  in JVM  or JIT compiler . During operation, a size of the heap grows as the number of pages and amount of data stored therein increases. When the application is subsequently terminated, the pages and data stored within the heap is cleared. However, heap  may need to be cleared or have selected portions therein deleted during execution of the application should more memory be required by the application. Alternatively, Java code that has been previously compiled may be utilized by subsequently executing applications and, therefore, may be required even after the heap is cleared. To address these issues, the present invention proposes that the heap, whether in JVM  or JIT compiler , should be managed by a page manager within operating system .","Typically, operating systems, such as operating system , implement page managers that determine an amount of memory utilized during execution of an application therein. Furthermore, in prior art implementations, Java applications are typically managed by JVM  and JVM  is managed by operating system . In prior art implementations such as that illustrated in , Java applets or applications are managed by JVM . Thus, in the course of execution of the Java applet or application, JVM  may determine that heap  is becoming too full. At that point, operating system  will swap memory from a portion of JVM  heap ) to an external memory (not illustrated herein). The external memory may be a disk that stores a plurality of paging files.","In contrast, the present invention proposes that the heap managed by JVM  will be managed by a page manager within operating system . Typically, such a page manager manages physical memory pages within a data processing system. Physical memory pages are representative of the \u201creal\u201d memory found in a data processing system (e.g., RAM). The physical memory pages are aliased by the virtual pages to allow for more addressability than an amount of RAM physically located in the data processing system. The use of virtual memory to support an operating system having a memory model that requires more memory than that physically addressed on an implementing system is well-known to those with skill in the data processing art.",{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 3","b":["306","304","302","314","310","308","310","304","302","310","302","310","302"]},"Thus, by using a methodology that treats Java applets or applications in a same manner as any other application within operating system , the page manager of the operating system may be used to monitor and control use of memory within operating system  in a timely and efficient manner. Thus, the same page manager with the same operating algorithm may be used to monitor and control use of memory during interpretation and execution of a Java applet or application. If such an implementation were not available, the prior art techniques would either not provide such a monitoring and control function, or would be required to implement a separate page manager for controlling the memory associated with Java applets and applications. Such an added page manager would result in increased overhead associated with a communication system in which it was implemented. For instance, in one embodiment of the present invention, should operating system  require more memory to execute a Java applet or application, the page manager could be used to automatically discard the pages out of the heap () to allow other applications to execute efficiently within the operating system. It should be noted that the operating system will utilize a page manager algorithm to determine the pages to be discarded in one embodiment of the present invention. Typically, the page management algorithm is a \u201cleast used\u201d algorithm that clears memory that has not been used in a longest amount of time.","Thus, in one embodiment of the present invention, a heap management system is implemented to take advantage of the functionality of an operating system () and does not require overhead associated with typical swapping routines implemented by JVMs in the previously described prior art implementations of Java operating environments. A more detailed description of a methodology executed in accordance with the present invention will be described in greater detail in FIG. . It should be noted that the following discussion of  will reference elements identified in the organizational overview of the present invention illustrated in FIG. .","Refer now to step  of FIG. . In step , a data processing system, such as a browser of a client (), calls a Java application through well-known methods. When the Java application is called, operation of JVM  is launched in step . Subsequently, Java application  provides a \u201cjava my.class\u201d command to JVM . In response to this command, JVM  then reads in Java class files required to execute the Java application in a step .","Once JVM reads in the required Java class files, JVM  begins execution of class methods in a step . In Java it should be noted that the term \u201cmethod\u201d is an object-oriented term for a procedure or function. Furthermore, it should be noted that every method in Java resides in a class file and may be declared as static or instant. During execution of the class methods, JVM  receives environment variables that indicate whether a JIT compiler is enabled. It should be noted that in current Java implementations, the JIT compiler is enabled by default. A user may disable a JIT compiler in a number of different ways. Specifically, the user may use a command line option or a command to modify the command shell of the environment to effectively disable the JIT compiler. To disable the JIT compiler upon launching the Java application, the user could insert the following code:\n\n","It should be noted that other options are also available to disable and enable the JIT compiler.","During execution of the class methods in step , JVM  determines whether or not code previously compiled by JIT compiler  is present. If JVM  determines that the code being presented to operating system  does not include JIT compiled code, the byte-code instructions compiled by JVM  are stored in Java heap  in a step . Subsequently, JVM  interprets and executes the byte-code instructions stored in heap  for a class of instructions that have been called and should be executed by operating system . A program flow then returns to step  to obtain additional instructions to be executed. In an alternative system, should JVM  determine that JIT compiled code is present in the software provided by Java application , JIT compiler  is launched in a step . JIT compiler  subsequently interprets a block of instructions and converts them directly into native instructions for execution on operating system . JIT compiler  is enabled to compile a block of instructions by a predetermined block code provided from Java application  to JVM . Upon receipt of this preselected byte code, JVM  provides the appropriate control and data information to JIT compiler  to enable JIT compiler  to compile the byte-code instructions for a certain number of instructions. After JIT compiler  has converted the byte-code instructions into native code, the native instructions are stored in heap . Thus, executable code is being stored in heap . Subsequently, JVM  provides the native instructions from the heap to operating system  where they are executed in accordance with a step . A program flow subsequently returns to step .","As data, whether byte-code instructions or native instructions, are stored in heap , a method and processing system for efficiently utilizing heap  resources is implemented by the present invention. The present invention utilizes a function referred to as Java garbage collector  (as illustrated in FIG. ). Generally, the Java garbage collector () runs as a low-priority thread and performs most of its operations when the system is relatively idle. For example, Java garbage collector  may run during idle time while waiting or user input in the form of keystrokes or mouse events. It should be noted, however, that in certain high-priority situations, the garbage collector may run while other operations are being executed. Such high-priority situations occur when there is no longer enough memory space.","Thus, during operation, Java garbage collector  either waits for a timer call or an explicit garbage collector call (). Upon receipt of the timer call or the explicit garbage collector call, JVM  determines a class that is being referenced in Java application . JVM  is therefore able to check a scope of the class being referenced in Java application . Stated another way, JVM  is determining whether there is an outstanding pointer to the object being executed in Java application . If the class is being referenced when Java garbage collector  is operating, the memory associated with that class is being used and, therefore, should not be removed from heap . Subsequently, Java garbage collector  waits for another timer or an explicit garbage collection call. In the alternative, if the class is not being referenced by Java application , Java garbage collector  is enabled to collect the class from heap  and release memory occupied in the heap for future use.","To determine the class being referenced and to be collected, several implementations may be utilized. For instance, a single class may be identified and then referenced accordingly. More commonly, Java garbage collector  may enable JVM  to scan through all of the classes utilized by Java application  to determine which classes are available and which are not. If all classes are currently being referenced by Java application , then Java garbage collector  remains in a waiting state. However, if one of the classes is not being referenced, garbage collector  is enabled to garbage collect the unused class. Basically, Java garbage collector  may be implemented as a collector that scans a dynamic memory area used by the Java application for objects and marks both objects that are referenced. After all possible paths to objects are investigated, those objects that are not marked are known to be garbage and are collected.","Refer now to  for an organizational overview of the operation executed by the present invention. As illustrated in , Java application  is executing and launches JVM . When JVM  is launched, it registers for an exception during an initialization process. JVM  also reserves a range of memory that JVM  will use during its occupation of the class being loaded. This allocation may be performed dynamically. Furthermore, as previously described, JVM  registers for a page fault exception to operating system . JVM  would call a registration API in operating system  for invalid access exception (e.g. page fault exception). Depending on an exception manager in the operating system, the registration is performed on a per thread basis or a per process basis. When JVM is registering the exception during initialization, JVM  issues a class to API layer . JVM  also reserves a range of write-execute system level memory through an API call for the occupation of the byte-code of the executing Java application. It should be noted that the memory is reserved, but not mapped. The memory will actually be mapped upon an invalid exception occurrence.","As Java application  is executing, class files are called by JVM . Each of class files is processed directly as byte-code instructions or converted to native instructions (using JIT compiler ) and stored in heap . As heap  becomes full or should operating system  require additional memory space for execution of application , code is cleared from heap . Subsequently, when Java application  reaccesses a memory location associated with compiled code and that compiled code has been cleared from heap , kernel  identifies that the heap memory is no longer valid. Page manager  within kernel  determines that the accessed data is no longer stored within heap  and generates an Invalid Access exception (not illustrated herein). The Invalid Access exception is communicated to operating system exception manager . Operating system exception manager  subsequently communicates the call to exception handling routine  of JVM . Within exception handling routine , control and data signals are generated to access the missing code from the Java application. Furthermore, exception handling routine  enables JIT compiler  to compile the code, where necessary. Exception handling routine  then stores the code in heap . Subsequently, exception handling routine  sends a message to kernel  to indicate that kernel  should resume execution. Such a resume execution message is then transmitted to page manager  such that it continues executing properly. The code may be translated into either byte-code instructions or passed to JIT compiler  where it is converted to native instructions, in accordance with specifications of Java application .","Furthermore, as illustrated in , page manager  provides the appropriate control for deleting information from heap . Page manager  utilizes algorithmic or heuristic methodologies to determine when data should no longer be stored on heap .","It should be noted that the description provided herein is but one example of an implementation of the present invention. It should be noted that many additional implementations may also be utilized to realize the present invention. For example, while the present invention has been explained in the context of the Internet, it should be noted that the present invention may be implemented on a complete stand-alone system that is executing a Java application. Stated another way, there is no requirement that the present invention be utilized only within the context of the Internet, as it may just as easily be used by a single stand-alone data processing system executing Java applications.","While there have been described herein the principles of the invention, it is to be clearly understood to those skilled in the art that this description is made by way of example only and not as a limitation to the scope of the invention. Accordingly, it is intended, by the appended claims, to cover all modifications of the invention which fall within the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, and the advantages thereof, reference is now made to the following descriptions taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
