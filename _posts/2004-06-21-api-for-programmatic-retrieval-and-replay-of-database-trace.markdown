---
title: API for programmatic retrieval and replay of database trace
abstract: Trace and replay objects can be designed to automatically perform operations concerning database trace data upon invocation by custom computer processes. Trace data can be saved to any of variety of locations. It can be manipulated for the purpose of storage or replay. Trace data can be played back against any database server using numerous replay configuration options. Replay notifications allow data to be changed just before it is submitted to a database for execution, and allow immediate examination of replay results and validation of playback correctness. Thus, trace and replay objects greatly simplify manageability of trace data. Custom processes can now completely automate security audit and health monitoring of traced database servers. Automatic verification of new server releases and security packs can also be performed. Custom processes can use the provided objects to flexibly access and manipulate the retrieval, storage, and replay of database trace data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07822741&OS=07822741&RS=07822741
owner: Microsoft Corporation
number: 07822741
owner_city: Redmond
owner_country: US
publication_date: 20040621
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE AND PERMISSION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document: Copyright \u00a9 2004, Microsoft Corp.","This invention relates to computing, and more particularly to analysis of database actions and performance, and more particularly to an application programming interface that allows customized and automated retrieval and replay of trace data emitted by a database.","A database comprises a collection of data, typically describing the activities of one or more related organizations. For example, a university database might include information about entities, such as students, faculty, courses, and classrooms, and relationships between entities, such as student enrollment in courses, faculty teaching courses, and the use of rooms for courses. A database management system, or DBMS, is software designed to assist in maintaining and utilizing large collections of data. For the purpose of this document, however, the term \u201cdatabase,\u201d or \u201cdatabase server\u201d refers to either or both of a collection of data and DBMS software. Thus, database  in  can be considered both a collection of data and DBMS.","Many kinds of databases are in use. The first database model is widely attributed to Charles Bachman of General Electric in the early 1960's. This was called the Integrated Data Store, and followed the network data model. Later in the 1960's, IBM developed the Information Management System, which formed the basis for a hierarchical data model. In 1970, Edgar Codd of IBM proposed the relational data model, which proved to be a watershed in the development of database systems. The popularity of relational databases changed the commercial landscape. Their benefits were widely recognized, and the use of databases for managing corporate data became standard practice. Relational databases are the dominant model in use today.","Various DBMS products, e.g. MICROSOFT SQL SERVER\u00ae, IBM DB2\u00ae, ORACLE DATABASE\u00ae, and SYBASE IQ\u00ae have greatly extended the capabilities of databases. Databases can store a wide variety of data types, such as images and text, and can perform complex queries on stored data. Specialized systems have been developed by numerous vendors for creating data warehouses, consolidating data from several databases, and for carrying out specialized analysis.","Databases have entered the internet age. The use of a database to store data accessed through a web browser is widespread. Queries are generated through Web-accessible forms and answers are formatted using a markup language such as Hyper Text Markup Language (HTML) or Extensible Markup Language (XML) which can be displayed in a browser. Databases continue to gain importance as more and more data is brought online and made ever more accessible through computer networking. Today the field is being driven by exciting visions such as multimedia databases, interactive video, streaming data, digital libraries, a host of scientific projects, and corporate data consolidation and data mining. Access to databases over global computer networks is commonplace.","Referring to , a multitude of clients , , and  may request services from a database . Typically, the service requests , , and are Structured Query Language (SQL) queries which ask a database for data matching certain criteria. For example, the database introduced above might be requested via service request , to return a list of all students with the last name of \u201cSmith.\u201d The database  may determine a strategy for the best way to process such a service request , gather the appropriate data, format the gathered data, and send the data back to client . A modern database  may be asked to perform hundreds or thousands of such operations simultaneously.","In addition to retrieving data, databases may also be requested to update data. For example, if database  is a bank database with account information, the data will need to be updated every time there is a deposit or a withdrawal from a particular account. Another function of a database is to organize access to data to ensure that is updated in an orderly way, and to provide the most updated version of data for the multitude of requests that are made.","There is no single best way to store, update, and manage access to data. Changes in the way that data is stored can vastly improve the performance of a database. Likewise, changes in the techniques for managing data requests and updates to data can increase performance. On the other hand, such changes in data layout and access techniques can cause problems for the proper functioning of a database. Changes may lead to poor performance, inability to process certain requests, errors in the data gathered and returned, and instability of a database.","As a result, there is a need to monitor and analyze the performance of modern databases. Through understanding the conditions that cause a database to perform well, or conversely, to experience problems, databases can be improved. In response to this need, many modern databases are equipped with the ability to emit a trace data stream ","A trace data stream contains information about the various operations of a database . Such a stream may contain any information that is considered relevant for analysis. In general, trace data streams contain information describing the various service requests , , that were made for a database. Such descriptions may include the request made, the time of the request, and the client that issued the request. Any output returned by the database may also be included in a trace data stream . As modern databases increase the number of services they provide, an increasing variety of data is available for inclusion in a trace data stream ","Typically, access to a trace data stream is made through a client computer . The client computer  may send a trace data request to a database , thereby opening a connection to the trace data stream . Traditionally, a profiler application  is installed on the client computer . The profiler  allows a human to initiate a session through a Graphic User Interface (GUI). The profiler can display accumulated trace data in a window . The profiler can provide a menu of items allowing numerous functions  for the access and manipulation of trace data . Some of these functions  are shown in the exemplary profiler GUI  in , such as save, open, print, replay, etc. Using this profiler application , a user may specify a database  to analyze, open a connection to the corresponding trace data stream , and save the trace data collected in any number of locations, such as in a file, in a table, or on a server.","Moreover, a user can instruct a profiler  to replay trace data. Trace replay allows a sequence of queries represented in trace data to be generated and run on a database. Thus, if, for example, changes or improvements are made to a database that experienced problems, a human can run a set of queries against the improved database to determine if it was properly fixed.","As databases proliferate, the cost of analyzing and improving databases also increases. Keeping a running store of all trace data for a single database could be very costly, an expense that multiplies with multiple databases. Therefore it is necessary to strategically chose when to access and store trace data. If a first database experiences a particular problem, it may be desired to replay the trace corresponding to the problem against a variety of other databases. Occasionally trace data is modified prior to replay to gather additional information and potentially narrow the possible causes of a database problem. These modified traces may also be replayed against a large number of databases. Thus the collection, modification, and replay can become an expensive and cumbersome task. The traditional approach for database trace data accumulation, analysis, and replay can involve too much human time in operating a profiler application.","In light of the heretofore unforeseen difficulties in the industry set forth above, there is an unacknowledged and unfilled need for improved systems and methods for gathering and replaying trace data.","In consideration of the above-identified shortcomings of the art, the present invention provides systems and methods for programmatic retrieval and replay of database trace data. A plurality of objects\u2014trace and replay objects\u2014can be designed to automatically perform operations upon invocation by custom computer processes. Trace data can be saved to any of variety of locations. It can be manipulated for the purpose of storage or replay. Trace data can be played back against any database server using numerous replay configuration options. Replay notifications allow data to be changed just before it is submitted to a database for execution, and allow immediate examination of replay results and validation of playback correctness.","Trace and replay objects greatly simplify manageability of trace data from several perspectives. Designers of custom processes can now completely automate security audit and health monitoring of traced database servers. Automatic verification of new server releases and security packs can also be performed. Custom processes can use the provided objects to flexibly access and manipulate the retrieval, storage, and replay of database trace data. Such custom processes can be designed to use the invention in ways that suit the particular needs of a given organization.","Other advantages and features of the invention are described below.","Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the invention. Certain well-known details often associated with computing and software technology are not set forth in the following disclosure, however, to avoid unnecessarily obscuring the various embodiments of the invention. Further, those of ordinary skill in the relevant art will understand that they can practice other embodiments of the invention without one or more of the details described below. Finally, while various methods are described with reference to steps and sequences in the following disclosure, the description as such is for providing a clear implementation of embodiments of the invention, and the steps and sequences of steps should not be taken as required to practice this invention.","Various aspects of the invention pertain to an API for programmatic retrieval and replay of database trace data. To fully disclose these various aspects, this description will begin by defining an API, a database, and trace data. It will proceed to describe retrieval and replay of trace data. Aspects and implementations of programmatic retrieval and replay will be discussed next. Finally, a description of the general computing and network environments suitable for use with the various embodiments of the invention is provided.","An application programming interface (\u201cAPI\u201d) is a computer process or mechanism that allows other processes to work together. In the familiar setting of a personal computer running an operating system and various applications such as MICROSOFT WORD\u00ae and ADOBE ACROBAT READER\u00ae, an API allows the applications to communicate with the operating system. An application makes calls to the operating system API to invoke operating system services. The actual code behind the operating system API is located in a collection of dynamic link libraries (\u201cDLLs\u201d).","Database software can also provide an API. A database API allows processes to make calls to a database to invoke database services. Modern database software such as MICROSOFT SQL SERVERS, IBM DB2\u00ae, ORACLE DATABASE\u00ae, and SYBASE IQ\u00ae, all provide APIs. The vast majority of enterprise applications today use databases, and therefore also use the APIs that allow applications to access and manipulate those databases. It is desirable to provide these applications, whether client-side, middle-tier, or server-side applications, with the most responsive and scalable database API possible. This is especially true for data access-intensive applications. The API provided here can be incorporated into an operating system API, a database API, an API for some other application or service, or can stand alone. The functions provided here are not limited to a particular device or host software environment.","An API can be implemented, just like the operating system, application, or other software whose services are invoked, in the form of computer executable instructions. These instructions can be embodied in many different forms. Eventually, instructions are reduced to machine-readable bits for processing by a computer processor. Prior to the generation of these machine-readable bits, however, there may be many layers of functionality that convert an API implementation into various forms. For example, an API that is implemented in C++ will first appear as a series of human-readable lines of code. The API will then be compiled by compiler software into machine-readable code for execution on a processor.","Recently, the proliferation of programming languages, such as C++, and the proliferation of execution environments, such as the PC environment, the environment provided by APPLE\u00ae computers, handheld computerized devices, cell phones, and so on has brought about the need for additional layers of functionality between the original implementation of programming code, such as an API implementation, and the reduction to bits for processing on a device. Today, a computer program initially created in a high-level language such as C++ may be first converted into an intermediate language such as MICROSOFT\u00ae Intermediate Language (MSIL) or JAVA\u00ae. The intermediate language may then be compiled by a Just-in-Time (JIT) compiler immediately prior to execution in a particular environment. This allows code to be run in a wide variety of processing environments without the need to distribute multiple compiled versions. In light of the many levels at which an API can be implemented, and the continuously evolving techniques for creating, managing, and processing code, the invention is not limited to any particular programming language or execution environment. The implementation chosen for description of various aspects of the invention is that of a managed MICROSOFT\u00ae .NET class library. This choice provides a convenient environment both for practicing and describing the invention, but is in no way intended to limit the invention to this implementation.","Features of the API set forth herein provide a vehicle for automating the retrieval and replay of database trace data. Various embodiments of the contemplated systems and methods are provided in . Those interested in analyzing database performance can create custom objects , ,  that can use the API  to gather, manipulate, and replay trace data according to their individual needs. The potential operations performed by custom objects , ,  cannot be foreseen, as they will vary with the skills and requirements of a wide number of programmers. However, the provided API  gives robust support for the various objects , ,  that may be created. While the invention is not limited to the set of functions  disclosed in this document, the functions  provided are considered novel and useful both individually and as a group. These functions  will be explained in further detail below, in connection with the automation of retrieval and replay of trace data ","Custom objects , , , and any other element identified as an object in the illustrations are discrete units of software typically generated using object-oriented programming techniques. Moreover, the API  itself can be implemented as one or more objects. One such exemplary object is illustrated in , which diagrams the features of a typical COM object . Other object types are available and widely used in the industry, and the object  described here is intended as a nonlimiting example for the purpose of illustration. Objects such as  generally support one or more interfaces , , , each of which includes methods . A method  is typically a function or a procedure that performs a specific action and can be called by software, e.g. called by another object such as , , and . Such calling software is referred to as the \u201cclient\u201d of the \u201cserver\u201d object . The methods  that make up an interface  are usually related to each other in some way. In general, clients can access the services provided by an object  by invoking the methods  in the object's interfaces , , . Clients are generally prohibited from accessing an object's data. It should be noted that functions described herein and in the claims as accomplished by an object may also be achieved through multiple objects designed to interface with each other.","Typically, an object  is an instance of a specific class. One class, for example, might contain objects that provide services for opening a connection to a database server, while another class might contain objects for writing data to a file. Typically, a programmer knows an object's class prior to running an instance of that object. The class of an object is looked up in a class library. Such a library has access to a directory of all available classes of objects. A client can call a function in a library specifying the class of object it wants and the first supported interface to which it wants a pointer. The library then causes a server that implements an object of that class to start running. The library also passes back to the initiating client a pointer to the requested interface on the newly instantiated object. The client can then ask the object directly for pointers to any other interfaces the object supports.","Interfaces supported by objects are generally thought of as a contract between the object and its clients. The object promises to support the interface's methods as the interface defines them, and the clients promise to invoke the methods correctly. Thus, an object and the clients must agree on a way to explicitly identify each interface, a common way to describe, or define, the methods in an interface, and a concrete definition of how to implement an interface.","Thus, objects can be described in terms of the interface parameters that they inherit, as well as the class parameters that they inherit. Where a class of objects has a function for writing data to a file, for example, an instance that inherits the class will also be able to write data to a file, as well as any additional features and functions provided in the instance. Where a class supports a particular interface, an instance of the class inherits the \u201ccontract\u201d and therefore also supports the interface. The objects through which aspects of the invention are implemented generally conform to these programming principles and understandings of the definitions for objects, classes, inheritance, and interfaces. However, it should be clear that modifications and improvements to object-oriented programming techniques are constantly occurring, and the invention is not limited to objects of a particular type or with any specific features. The API provided can be implemented through objects of any kind now in use or later developed.","A database is a collection of data, typically describing the activities of one or more related organizations. For example, a university database might contain information about entities, such as students, faculty, courses, and classrooms, and relationships between entities, such as student enrollment in courses, faculty teaching courses, and the use of rooms for courses. A database management system, or DBMS, is software designed to assist in maintaining and utilizing large collections of data. For the purpose of this document, however, the term \u201cdatabase,\u201d or \u201cdatabase server\u201d refers to either or both of a collection of data and DBMS software. Thus, database  in ,  in , and  in  illustrate database servers comprising both collections of data and DBMS. Further distinction will be made when necessary.","Many kinds of databases are in use. The first database model is widely attributed to Charles Bachman of General Electric in the early 1960's. This was called the Integrated Data Store, and followed the network data model. Later in the 1960's, IBM developed the Information Management System, which formed the basis for a hierarchical data model. In 1970, Edgar Codd of IBM proposed the relational data model, which proved to be a watershed in the development of database systems. The popularity of relational databases changed the commercial landscape. Their benefits were widely recognized, and the use of databases for managing corporate data became standard practice. While relational databases are the dominant model in use today, the various aspects of the invention are suitable for use in connection with any database presently in use or later developed that is capable of emitting trace data.","Various DBMS products, e.g. MICROSOFT SQL SERVER\u00ae, IBM DB2\u00ae, ORACLE DATABASE\u00ae, and SYBASE IQ\u00ae have greatly extended the capabilities of databases. Databases can store a wide variety of data types, such as images and text, and can perform complex queries on stored data. Specialized systems have been developed by numerous vendors for creating data warehouses, consolidating data from several databases, and for carrying out specialized analysis. All such products and database configurations are suitable for use in connection with the systems and methods herein.","Databases have entered the internet age. The use of a database to store data accessed through a web browser is widespread. Queries are generated through Web-accessible forms and answers are formatted using a markup language such as Hyper Text Markup Language (HTML) or Extensible Markup Language (XML) which can be displayed in a browser. Databases continue to gain importance as more and more data is brought online and made ever more accessible through computer networking. Today the field is being driven by exciting visions such as multimedia databases, interactive video, streaming data, digital libraries, a host of scientific projects, and corporate data consolidation and data mining. Where access to databases over global computer networks is commonplace, it should be clear that the systems and methods provided herein can be used regardless of the distance or type of connection between a client and a database.","An API for programmatic retrieval and replay of database trace data is provided. The above generally describes an API and a database. Trace data will be discussed next, followed by a discussion of retrieval and replay of trace data, followed by a discussion of programmatic retrieval and replay, which will serve to particularly point out the features of the API described generally above.","Trace data is data indicating the operations of a database. A typical database, such as  in , will be requested to perform services for any number of clients, e.g. , , . Such requests are generally queries formulated in Structured Query language (SQL), although as databases such as  grow more complex and provide a greater range of services, the types and volumes of requests also increase. Modern databases are capable of emitting a stream of trace data that contains information about requests and corresponding database operations. Trace data can be useful in analyzing what a database  is requested to do and how the database  satisfies the requests. Through this analysis, databases can be improved in terms of how data is stored, how queries are managed, and in terms of the host of other services that modern databases provide.","Trace data can be emitted from a database in any format. Typically, because databases provide continuous services, trace data is emitted as a constant stream of data organized according to a data transfer protocol. By opening a connection to the trace data stream , a client  can analyze and record the operations of the database . In this regard, trace data is typically stored in one of three locations, as suggested in . These locations comprise a file , a table , and a server . Because database trace data is well understood in the industry, a detailed explanation of the precise formats for recording trace data  is not necessary here. It will be appreciated that trace data can be recorded in any format. In general, however, formats for trace data, regardless of whether it is stored in a file , a table , or a server  may comprise a plurality records, or discrete units of data that convey some independent meaning.","As an example of how trace data is typically divided into records, consider a typical file  in which trace data is stored. Such a file  may include the following records:","Header","2 bytes\u2014header length","48 bytes\u2014provider name","2 bytes\u2014provider version","48 bytes\u2014definition type","4 bytes\u2014file options","48 bytes\u2014Traced server name","Data Section","Each new database event usually starts with a TRACE_BEGIN_RECORD special column followed by one byte, which represents the length of the column followed by an event identifier and overall length of the event. Then any other columns for the event are described. Each event column record may contain information corresponding to a column identifier, a data length, and the data itself. The data length is usually a single byte field.","The above provides an example of how trace data may be divided into records in a trace data file . Exemplary record divisions for trace data stored in a table and trace data stored in a server are not provided here, because storage of trace data in these formats is commonplace, and in general comprises dividing data into records similar to the above while varying some parameters to format the trace data in the desired layout. The above example suffices to show that trace data can be divided into any number of records, and records can be organized in any number of ways. The invention is not limited to a particular number or layout of records in a trace data file, a trace data table, or a trace data server.","Retrieval of trace data refers to acquiring trace data electronically. In various embodiments of the invention, retrieval may occur in a scenario such as that of  in which a client  sends a request for trace data to a database . The request causes the database  or some other intermediate process (not shown) to transmit a trace data stream to the client . While  represents a typical retrieval of trace data, It will be appreciated that any processes, or portions of processes, may run on or across any number of devices not shown, as explained with reference to the exemplary computing and networked environments below.","Retrieval of trace data may be accompanied by storing the retrieved data, as in . Trace data may be stored in a file , a table , or a server . Note that the process of storing trace data may involve some conversion of the trace data stream from the initial signal coming from a database . As explained above, the trace data may be formatted into a number of records according to the particular layout and presentation of the data desired in storage. As suggested in , the API  provided allows an exemplary custom object  to request retrieval of trace data and to specify storage of the trace data in a file , table , or server . Exemplary requests , , and  submitted to API  can specify retrieval of trace data. The implementation of the API can connect to an appropriate database, retrieve the trace data stream, and write an appropriate output to , , or . In various embodiments, the API may be configured to automatically select a default storage location, e.g. , , or  to be used when no storage location is indicated by exemplary custom object .","Replay of trace data refers to causing a database to perform a series of operations identical to, or related to, a series of operations represented in a set of trace data. For example, consider a set of trace data stored in a file . Imagine that the set of trace data in question caused a database  to perform abnormally, e.g. by returning incorrect, abnormal, or untimely results to a client , or to destabilize or crash. To investigate the series of events that led to the abnormality, it may be desirable to subject the database  to the same conditions as those that led to the abnormality. In this situation, the appropriate set of trace data in file  can be used to formulate a sequence of service requests to replicate the former requests, e.g. . Submitting such a sequence of requests amounts to replay of trace data. Note that there may be a host of reasons to replay trace data, and investigation of abnormalities is merely one example. The systems and methods herein can be used to replay trace data regardless of the purpose or intent of those who initiate such replay.","Replay of trace data need not be against the same database as the database that initially emitted the trace. Just as any database can be selected for retrieval of trace data, any database can be selected for replay. This allows a database to be used for testing purposes that is separate from a database that has real-world responsibilities. It also allows replay of trace data against a variety of database platforms and products, as desired.","Just as trace data in a file  can be replayed to a database , trace data in a table  or a server  can be replayed. Data stored in these various formats requires appropriate handling to properly format and submit the trace for replay, however identical trace data stored in any format , ,  can be used to generate an identical replay sequence for a database . As shown in , an exemplary custom object  can request replay of trace data through the API  provided. The request can specify the trace data to replay\u2014which may also indicate that the data is stored in file , table , or server , by generating requests , , , and the API implementation  can then retrieve the specified set of trace data from the file , table , or server  where the trace data resides and replay the trace data against a specified database.","Occasionally it is desirable to modify trace data prior to replay. For example, it may be suspected that a certain type of query is the cause of trouble. A number of additional queries of the suspect type may be added to a stored set of trace data prior to replay to test this theory. Alternatively, it may be beneficial to modify individual records of existing trace data sets. Again, there may be any number of reasons alteration of trace data is desired prior to replay and the invention is not limited to any particular intent of those making use of the API herein. Because it can be desirable to alter trace data prior to replay, the term replay as used herein refers not only to submitting an set of requests identical to those of recorded trace data, but also to submitting a set of requests related to those of recorded trace data. As suggested in , the API provided allows an exemplary custom object  to request the modification of trace data such as in requests , , and . The implementation  of the API  can then modify the specified trace data whether it is located in file , table , or server .","An API for programmatic retrieval and replay of database trace data is provided. The above generally describes an API, a database, trace data, and retrieval and replay of trace data. Systems and methods for programmatic retrieval and replay are discussed next, which will serve to particularly point out additional features of the API described generally above.","For the purpose of this application, the term programmatic refers to being accessible by automated functions. In other words, computerized instructions can be written that trigger a programmatic function with zero or reduced human involvement. For example, consider a computer user who has a bunch of numbers stored in a MICROSOFT WORD\u00ae document. The user wishes to add the numbers. One way to do this is to use a calculator application. The computer user can open a calculator application and add any numbers using a mouse device for selecting the appropriate numbers. But a calculator function does not typically expose the ability to write a computer program that programmatically retrieves and adds numbers. A user with a very large amount of numbers to add or many sets of numbers may find it onerous to use the calculator application for such a task.","Similarly, a computer user desiring to retrieve and\/or replay a large amount of database trace data, or many sets of such trace data, may find it onerous to use a profiler application to do so \u201cby hand.\u201d Instead, such a user may prefer to write a program that programmatically retrieves, stores, and replays trace data. A user can specify when to retrieve trace data, from where to retrieve it, how to store it, how to modify it, when to replay it, and so on, as described in connection with the various aspects and embodiments herein. All of these operations can be performed programmatically pursuant to the users specifications. Using the systems and methods described herein, the creation of such programs is greatly facilitated.","Retrieval of trace data in accordance with various embodiments of the inventions is illustrated in  and .  points out the process and context for retrieval of trace data, while  illustrates an implementation of the object(s) and interface(s) used in providing the programmatic retrieval function. Retrieval in connection with  is discussed above, and the exemplary implementation in  is discussed below.","With reference to , a Uniform Modeling Language (UML) diagram setting forth an implementation for an API in accordance with the systems and methods herein is provided. At the top of , element  provides functions of providing connection information, such as for connecting to a server or database, to the other objects of . Element  provides functions for error reporting that can be accessed by the various other objects. Element  is an interface for a data record, and element  is an interface for retrieving data. The IDataReader interface  is known in the art. It is a managed interface defined in the System.Data namespace of the released with the MICROSOFT\u00ae .NET framework. The inclusion of this interface  in  is for the purpose of specifically identifying the potential functions of an exemplary API, and is not intended to limit the invention to the IDataReader  interface in particular.","Objects , , , , and  inherit from the IDataReader  interface. The objects , , and  provide the functions of retrieving trace data to a server, to a table, and to a file, respectively. Separate objects for these functions is beneficial, because a different set of operations is required in reading and writing data to a file, table or server. In the case of a server, access to trace data for modification of records is typically unavailable, so object  inherits directly from object , without also inheriting from , as with objects  and . Functions provided by object  for retrieving trace data and storing it in a file include TraceServer( ), which formats trace data for storage in a server; Start( ), which starts a retrieval of trace data from a specified server; Pause( ), which pauses a running retrieval of trace data from a specified server; and Stop( ), which stops a running retrieval of trace data from a specified server. Because object  inherits from object ,  also provides the functions Read( ) for reading incoming data and Close( ) for closing a location in which data is stored. Further, object  provides the functions specified in the IDataReader interface . By providing these functions, object  allows users to access these functions programmatically and thereby automate","Objects  and  are illustrated as inheriting from object  as well as object . This is for the reasons described above, namely, in preferred embodiments, it is beneficial to support record modification functions when trace data is saved to a table, as in , or a file, as in . To achieve this, object  inherits from  and provides an additional write function that can alter the records of stored trace data. As illustrated in , the write function conforms to an ITraceDataWriter interface , which sets up the requirements for writing data and for properly notifying the appropriate objects of such a write operation. Interface , in turn, makes use of an IDataRecordChanger interface  which inherits from the established IDataRecord interface . The IDataRecordChanger interface  is illustrated in another form in .","In the embodiment of , two methods are specified for the IDataRecordChanger interface. Those of skill will acknowledge that different or additional methods may be specified in such an interface without changing the fundamental operation of the invention. The purpose of the interface as illustrated in  is to provide a means to change data as data is being written or replayed. In this regard, method SetValue( )can takes an index of a column to be replaced (int i) and places a new value (object value) in that location. Method AddColumn( ), on the other hand, adds a new column to trace data. In this regard, a column identifier (int columnid) is provided to such a method as an argument, and an index for the newly generated column can be returned.","Thus, the use of an interface  to specify the requirements for changing trace data records delivered according to another interface  ultimately allows objects  and  to perform record modification operations. Such record modification is useful for the purpose of replay. When used in connection with the automated replay techniques provided herein, it allows for on the fly modification and replay of trace data to provide high-powered database analysis never before achieved.","All of the functions inherited by objects  and  are accessible programmatically by users, e.g. by exemplary custom object . Thus, while objects  and  are capable of writing trace data from a database stream to a table or file, respectively, as indicated by the TraceTable( ) and TraceFile( ) notations in the UML diagram, by virtue of their inheritance from object  they also support modification of the records stored in tables and files. Further, by virtue of the inheritance from object , functions of reading database trace streams and closing connections to database trace streams are also supported by objects  and . Those who understand UML diagrams will appreciate this, and will further recognize the IDataReader interface  and the corresponding exemplary functions inherited from that interface.","Moving now to embodiments of the invention that support programmatic replay of database trace data, refer to , , , , , and .  provides a diagram that schematically illustrates the various operations that may be performed via an API that allows for programmatic replay of trace data.  through  provide information about the various calls that can be exposed to access replay functions. Note that a UML diagram is not provided here because such a diagram would not be interesting or informative. This is because, in a preferred embodiment, the replay function objects need not inherit from any preexisting objects. That said, implementations of the invention which utilize inheritance could certainly be devised.","Turning to , again an exemplary custom object  is provided that can make various function calls , ,  to an API . The API  can be supported by an implementation  for carrying out the various operations that are requested of the API . The implementation  may utilize the various object oriented design principles discussed herein, such as with reference to . In carrying out the requested functions, the API implementation  may access and or modify trace data stored in a file , trace data stored in a table , and trace data stored in a server . The implementation  may also formulate and send a series of queries or other communications, related to trace data in , , and  to a database . The implementation may concurrently retrieve the trace data stream return  for the purpose of again storing such data in , , or  for further analysis.","The API may expose the ability to start, pause, or stop replay of trace data . These features are also demonstrated in  which provides pseudo code definition for a trace replay class of objects. A custom object  that makes a call such as those provided in  can specify a start operation for starting a replay, along with any number of start parameters. Such parameters might specify the location of the trace to be replayed, the time of replay, the database for the replay, and so on. Similarly, pause and stop functions, as shown in , may be accessed by exemplary custom object .","The API may also expose the ability to request a notification  upon the occurrence of any number of events. Such notifications can be used by custom object  for further useful advantage in replaying trace data. These custom notifications are also illustrated in . For example, custom object  might request notification prior to starting a replay. This is shown also by the \u201cevent ReplayNotifyDelegate . . . \u201d line in . This feature allows custom object  to, for example, examine trace data just before replay, and make any changes to the various records as desired. Similarly, notifications may be requested when replay is paused, as indicated in  by the \u201cevent ReplayPauseDelegate ReplayPauseNotify\u201d line. Notifications may be requested when replay is restarted, as indicated in  by the \u201cevent ReplayPauseDelegate ReplayStartNotify, or when the trace data replay is stopped, as indicated in  by the \u201cevent ReplayStopDelegate ReplayStopNotify\u201d line. Notifications may be requested when trace data output from a particular replay is ready, as indicated in  by the \u201cevent ReplayOutputNotifyDelegate ReplayOutputNotify\u201d line. Conversely, custom object  may not make a request for notification , and may simply choose to ignore these events.","The ways in which these notifications  may be used by custom object  to coordinate the modification and replay of trace data are unlimited. The scope of this patent extends to the use of the API disclosed, and to objects that make use of the API, regardless of whether those objects also include additional features beyond the scope of the invention. The notion of providing notifications via an API for replaying trace data as disclosed herein is an advancement in itself that will support flexible, powerful design of custom objects making use of the provided API.","The notification in  represents the notification signal from the API  to the custom object. It will be appreciated that any form of notification known in the art may be used, such as event objects or .NET delegates, as suggested by the language of . In various preferred embodiments, where a .NET delegate is used for callback notification, the notification events may be declared as illustrated in . The example here may be extended to other embodiments, with minor implementation differences. As shown in , the ReplayNotifyDelegate may declare the data pertaining to the subject notification. This is also true of the other exemplary notification events.","The notification events illustrated in  are designed to carry sufficient information to allow for an event handler to intelligently choose appropriate actions in response to the notifications. These notifications may also comprise mechanisms to influence the execution of Replay. In this regard, the following exemplary information can be included with notification events such as those of :","RecordNumber\u2014can specify a row number of a trace record to be replayed.","currentRecord\u2014can be a trace record currently being replayed. A custom object could examine the columns of such a record, and modify it directly.","skipRecord\u2014by setting a skip record flag to \u201ctrue,\u201d a custom object handler could ask the API not to replay a particular trace record.","The additional features illustrated in  are, first, a function identified here as a \u201cTraceReaderWriter Output\u201d function. As implied by the language used, this allows a custom object  to retrieve the trace data output that is emitted by a database as a result of a replay. Such output data may be modified prior to storage. A \u201cConnectionInfoBase Connection\u201d function allows a custom object to specify information pertaining to connecting to a database or other appropriate server. For instance, a particular database address and communications protocol might be specified. The API can then programmatically open a connection to the specified database at such time as required by a custom object .","Finally with respect to , the \u201cTraceReplayOptions\u201d function allows custom object  to specify any number of additional options. Exemplary options that might be made available in a preferred API are illustrated in . The object that provides the options for the trace data API can provide any of the illustrated five options as well as any other options that may be devised or found to be useful. A size of a replay thread pool can be controlled. This option can be utilized to prevent replay from opening too many threads and overburdening system resources. A wait time can be specified prior to \u201ckilling\u201d or terminating a hung process. For instance, if a connection to a database is not properly executing, that process can be given a specified amount of time before termination. A frequency of polling for hung processes can be set. This allows a user to specify how much system resources should be devoted to polling. In very stable environments, it is likely that less frequent polling is desired. A replay mode can be specified. This option is further illustrated in . Two modes are contemplated herein. First, a sequential replay mode, in which trace data is replayed to a database in the same order it was collected in a trace data storage area. Second, a \u201cconnection level synchronized\u201d mode, in which all events pertaining to a particular client are replayed sequentially, but any global sequence of events is not preserved, i.e. client requests are assumed to be independent of each other. For example, if a single client generated one-tenth of the requests for particular database, an aspect of the invention allows that same one-tenth of database requests to be replayed sequentially against a database. As with the other functions herein that can be accessed programmatically, this allows for flexible control of the details of replay.","Finally, referring back to , an object may specify whether actual database query results should be returned, or simply the results for operations that generated errors. This option highlights a useful aspect of the invention, namely that in addition to trace data, the actual results\u2014query results or errors\u2014can be collected during replay, and this feature can, moreover, be controlled by an object that provides for control of replay options.","Thus the API and the various supporting objects disclosed herein greatly simplify the management of trace data from several perspectives. First, they enable user to completely automate security audit and health monitoring of traced server. Second, they allow for automatic functional verification of new server releases and security packs.","Exemplary Computing and Network Environment","With reference to , an exemplary computing device  suitable for use in connection with the systems and methods of the invention is broadly described. In its most basic configuration, device  typically includes a processing unit  and memory . Depending on the exact configuration and type of computing device, memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. Additionally, device  may also have mass storage (removable  and\/or non-removable ) such as magnetic or optical disks or tape. Similarly, device  may also have input devices  such as a keyboard and mouse, and\/or output devices  such as a display that presents a GUI as a graphical aid accessing the functions of the computing device . Other aspects of device  may include communication connections  to other devices, computers, networks, servers, etc. using either wired or wireless media. All these devices are well known in the art and need not be discussed at length here.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 2","FIG. 2"],"i":["b ","a "],"b":["220","220","220"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be implemented in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation, illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only, illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through an non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through a output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","It should be understood that the various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device generally includes a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may implement or utilize the processes described in connection with the invention, e.g., through the use of an API, reusable controls, or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","Although exemplary embodiments refer to utilizing the present invention in the context of one or more stand-alone computer systems, the invention is not so limited, but rather may be implemented in connection with any computing environment, such as a network or distributed computing environment. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Such devices might include personal computers, network servers, handheld devices, supercomputers, or computers integrated into other systems such as automobiles and airplanes.","An exemplary networked computing environment is provided in . One of ordinary skill in the art can appreciate that networks can connect any computer or other client or server device, or in a distributed computing environment. In this regard, any computer system or environment having any number of processing, memory, or storage units, and any number of applications and processes occurring simultaneously is considered suitable for use in connection with the systems and methods provided.","Distributed computing provides sharing of computer resources and services by exchange between computing devices and systems. These resources and services include the exchange of information, cache storage and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may implicate the processes described herein.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 2","i":"c ","b":["271","272","276","277","273","274","275","278","271","272","273","274","275","276","277","278","271","272","273","274","275","276","277","278","271","272","273","274","275","276","277","278","271","272","273","274","275","276","277","278","270","278"]},"This network  may itself comprise other computing entities that provide services to the system of , and may itself represent multiple interconnected networks. In accordance with an aspect of the invention, each component , , , , , ,  and  may contain discrete functional program modules that might make use of an API, or other object, software, firmware and\/or hardware, to request services of one or more of the other components , , , , , ,  and .","It can also be appreciated that an object, such as , may be hosted on another computing device . Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wired or wireless systems, by local networks or widely distributed networks. Currently, many networks are coupled to the Internet, which provides an infrastructure for widely distributed computing and encompasses many different networks. Any such infrastructures, whether coupled to the Internet or not, may be used in conjunction with the systems and methods provided.","A network infrastructure may enable a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. In computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer, e.g., a server. In the example of , any component , , , , , ,  and  can be considered a client, a server, or both, depending on the circumstances.","A server is typically, though not necessarily, a remote computer system accessible over a remote or local network, such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server. Any software objects may be distributed across multiple computing devices or objects.","Client(s) and server(s) communicate with one another utilizing the functionality provided by protocol layer(s). For example, HyperText Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW), or \u201cthe Web.\u201d Typically, a computer network address such as an Internet Protocol (IP) address or other reference such as a Universal Resource Locator (URL) can be used to identify the server or client computers to each other. The network address can be referred to as a URL address. Communication can be provided over a communications medium, e.g., client(s) and server(s) may be coupled to one another via TCP\/IP connection(s) for high-capacity communication.","In light of the diverse computing environments that may be built according to the general framework of provided in and , and the further diversification that can occur in computing in a network environment such as that of , the systems and methods provided herein cannot be construed as limited in any way to a particular computing architecture. Instead, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The API for programmatic retrieval and replay of database trace in accordance with the present invention are further described with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","i":"a "},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","i":"b "},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","i":"c "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
