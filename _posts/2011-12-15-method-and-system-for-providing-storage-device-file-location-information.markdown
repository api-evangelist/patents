---
title: Method and system for providing storage device file location information
abstract: A method and system are disclosed that permit a host application to obtain cluster location data, for example logical addresses associated with the clusters of a file, and to allow a host application to communicate the logical block address mapping information to firmware of a storage device. The method includes the host transmitting one or more clusters or partial clusters having a signature to the storage device where the storage device knows or has been instructed by the host to look for the signature. The storage device may receive clusters having a signature and, responsive to a host request, return logical address information to a host for the location in the storage device of the marked clusters. The host may parse a data structure on the storage device to obtain remaining cluster location information using a file's first cluster location or may request that the storage device return the cluster location information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152641&OS=09152641&RS=09152641
owner: SanDisk Technologies Inc.
number: 09152641
owner_city: Plano
owner_country: US
publication_date: 20111215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application relates to co-pending U.S. application Ser. No. 13\/327,463 entitled \u201cMethod and System for Providing Storage Device File Location Information,\u201d filed the same day as the present application, the entirety of which is hereby incorporated herein by reference.","This application relates generally to a method and system for providing an application on a host device with logical mapping information for a file on a storage device.","Non-volatile memory systems, such as flash memory, are used in digital computing systems as a means to store data and have been widely adopted for use in consumer products. Flash memory may be found in different forms, for example in the form of a portable memory card that can be carried between host devices or as a solid state disk (SSD) embedded in a host device. These memory systems typically work with data units called \u201cblocks\u201d that can be written, read and erased by a storage manager often residing in the memory system.","When writing data to a conventional flash memory system, a host typically assigns unique logical addresses to sectors, clusters or other units of data within a continuous virtual address space of the memory system. The host writes data to, and reads data from, addresses within the logical address space of the memory system. The memory system then commonly maps data between the logical address space and the physical blocks or metablocks of the memory. The memory system keeps track of how the logical address space is mapped into the physical memory but the host is almost always unaware of this. The host keeps track of the addresses of its data files within the logical address space but the memory system usually operates without knowledge of this mapping.","Applications on a host, however, may not have access to information on the logical addresses, referred to herein as a logical block addresses (LBAs), that the host operating system has assigned to files, directories or system areas. Applications on a host may only have high level file system application programming interfaces (APIs). Thus host applications do not generally have direct access to the file system structures maintained by the host operating system and cannot determine how the storage device driver on the host will translate requests made via the APIs into LBAs for file writes.","In many instances, it is desirable for a storage device, such as a flash memory card, to perform operations such as encryption, data optimization, or other processing on a specific file. However, while storage devices have full visibility regarding sectors actually written to the card, they generally lack the processing power to parse and maintain the file system themselves. Furthermore, the assumption in host environments is that the host owns and maintains the file system, and thus data relating to file structures is not communicated to storage devices in a simple or timely manner. Further complicating matters, host applications typically do not have direct access to the file system structures maintained by the host operating system, and thus do not have the ability to directly communicate parameters such as LBA maps to the storage device.","One possible approach for providing LBA information to host applications is to use a host that is configured to give applications direct access to the storage device's logical address space. Such direct access to a storage device by a host application is generally not available in hosts such as portable handsets, and is limited in many personal computer (PC) operating systems as well. Another possible approach for providing LBA information to host applications is to use a storage device-based approach where the storage device is aware of the file system. In such a storage device-based approach, the storage device would need the ability to read and navigate the file system, monitor writes to a file, force flushing of host file system caches, and do look-up operations to find files within folders in the file system. This approach would be resource intensive and not particularly practical in storage devices such as flash memory cards with limited controller capabilities.","In order to address the problems and challenges noted above, a system and method for communicating file system information to an application on a host is disclosed. According to a first aspect, a method for managing a storage device is disclosed. The method includes, in a host operatively coupled to a storage device, the host writing a signature to a cluster for transmission to the storage device, for each of a plurality of clusters corresponding to a particular host file. The signature may be written to any sector within the cluster, one or multiple times, and with fixed or random offsets within the cluster. For example, the signature may only be written to the first sector within the cluster and only the first sector written to the storage device. The host transmits each of the plurality of clusters with the signature to the storage device. The host receives cluster location data from the storage device in response to transmitting the plurality of clusters with the signature to the storage device, where the cluster location data is information on a location in the storage device logical address space in the form of LBAs or offsets or indices of clusters of the particular host file. In other embodiments, the method may include transmitting a signature definition command to the storage device prior to transmitting each of the plurality of clusters, where the signature definition command may include a signature that may be associated with a particular host file. The method may also include transmitting a stop or disable signature command to the storage device after transmitting a last cluster of the particular host file which will indicate to the storage device that it can stop looking for the signature sent via the preceding signature definition command.","In another aspect, a method for managing a storage device includes, in a host operatively coupled to a storage device, the host writing a signature associated with a particular host file to only a first sector, block or cluster of the particular host file for transmission to the storage device. The host transmits a first portion of file content for the particular host file with the signature to the storage device and receives cluster location data from the storage device, where the cluster location data contains information on a location in the storage device of the first cluster of the particular host file. The host then instructs the storage device, based on the location of the first cluster, to read a file system data structure in the storage device and return information on the locations of additional clusters of the particular host file.","In yet another aspect, a storage device is disclosed. The storage device includes a memory configured to store host files and a file system data structure containing information on a location of clusters for host files in the memory system, and a controller in communication with the memory. The controller is configured to receive a plurality of clusters from the host and identify sectors or clusters marked by a signature. The controller of the storage device, in response to a host request, is further configured to provide location information for sectors or clusters marked by the signature. In one implementation, the storage device is configured to continuously look for marked sectors or clusters from the host. In other implementations the controller of the storage device is configured to look for sectors or clusters signed by an application of the host after receiving a signature definition command from the host, and configured to stop looking for signed sectors or clusters after receiving a signature stop or disable command.","In other implementations, the controller of the storage device receives only a first sector or cluster of the particular host file having the signature, and returns the sector or cluster location data on only a location in the storage device of the first sector or cluster of the particular host file. The controller of the storage device is configured to start looking for a pre-determined signature or for a unique signature that may be associated with a specific file after it receives a signature definition command from the host and can be configured to stop looking for a signature when it receives a stop or disable signature command from the host. The controller of the storage device may be configured to look for a new signature when it receives a different signature definition command and stop looking for the old signature. The controller of the storage device may also be configured to look for multiple signatures at once.","A flash memory system suitable for use in implementing aspects of the invention is shown in . A host system  stores data into, and retrieves data from, a storage device . The storage device  may be embedded in the host system  or may exist in the form of a card or other removable drive, such as a solid state disk (SSD) that is removably connected to the host system  through a mechanical and electrical connector. The host system  may be any of a number of fixed or portable data generating devices, such as a personal computer, a mobile telephone, a personal digital assistant (PDA), or the like. The host system  communicates with the storage device over a communication channel .","The storage device  contains a controller  and a memory . As shown in , the controller  includes a processor  and a controller memory . The processor  may comprise a microprocessor, a microcontroller, an application specific integrated circuit (ASIC), a field programmable gate array, a logical digital circuit, or other now known or later developed logical processing capability. The controller memory  may include volatile memory such as random access memory (RAM)  and\/or non-volatile memory, and processor executable instructions  for handling memory management.","As discussed in more detail below, the storage device  may include functions for memory management. In operation, the processor  may execute memory management instructions (which may be resident in instructions ) for operation of the memory management functions, such as detailed in . The memory  may include non-volatile memory (such as flash memory). One or more memory types may compose memory , including without limitation single level cell (SLC) type of flash configuration and multi-level cell (MLC) type flash memory configuration. The SLC flash may be configured as a binary cache  and SLC or MLC may be used as main storage . The binary cache and main storage of memory  includes physical blocks of flash memory that each consist of a group of pages, where a block is a group of pages and a page is a smallest unit of writing in the memory. The physical blocks in the memory include operative blocks that are represented as logical blocks to the file system . The storage device  may be in the form of a portable flash drive, an integrated solid state drive or any of a number of known flash drive formats.","The host  of  may include a processor  that runs one or more application programs . The application programs , when data is to be stored on or retrieved from the storage device , communicate through one or more operating system application programming interfaces (APIs)  with the file system . The file system  may be a software module executed on the processor  and manages the files in the storage device . The file system  manages clusters of data in logical address space. Common operations executed by a file system  include operations to create, open, write (store) data, read (retrieve) data, seek a specific location in a file, move, copy, and delete files. The file system  may be circuitry, software, or a combination of circuitry and software. Accordingly, the file system  may be a stand-alone chip or software executable by the processor of the host . A storage device driver  on the host  translates instructions from the file system  for transmission over a communication channel  between the host  and storage device . The interface for communicating over the communication channel may be any of a number of known interfaces, such as SD, MMC, USB storage device, SATA and SCSI interfaces. A file system data structure , such as a file allocation table (FAT), may be stored in the memory  of the storage device . Although shown as residing in the binary cache portion  of the memory , the file system data structure  may be located in the main memory  or in another memory location on the storage device .","In a system such as described above, one method of providing LBA information to a host application  includes \u201ccluster walking\u201d such as set forth in . In the embodiment of , the storage device  works cooperatively with the host  to construct a table of LBAs corresponding to the clusters stored on the storage device . In this implementation, some of the work may be performed by the host and some by the storage device . The host application  sends the storage device file path information of the file for which the application  wants the LBA information (at ). The communication between the host  and storage device  may be over a file based communication channel (FBCC) which is a virtual channel where commands are recognized by the storage device and the host because of a pattern embedded in the data. Any of a number of types of patterns may be implemented by the FBCC to flag the presence of a command. For example, the storage device  may be configured to look for a pattern at the beginning of each burst of data (e.g. cluster) received that would alert the storage device  that a command is contained in that burst of data.","The controller  of the storage device  first examines the boot sector of the file system  to find the root directory (at ). The storage device controller  then searches through the root directory to find the next part of the path. If there are subdirectories in the path, the storage device  will recursively find and follow each subdirectory until if finds the file of interest or determines that there is no file on the storage device  that matches the path (at ). For example, for the path \u201cC:\\folder1\\folder1-2\\filename.jpg\u201d, the root contains the folder \u201cfolder1\u201d which contains the folder \u201cfolder1-2\u201d, which contains the file \u201cfilename.jpg\u201d.","Once the file has been located, the controller  will find the directory entry of the file, which will contain the location of the beginning of the file. For FAT file systems, this is instantiated as a First Cluster Number (FCN) of the file. The controller  will extract the FCN (at , ). The FCN is the logical address in the storage device memory  which contains the data at the beginning of the file. There should be a corresponding entry in the file system data structure , such as a FAT table, for this cluster address (at ). This entry in the FAT table points to the NEXT entry in the FAT table, which is the next 32K of data (for example if the cluster size is 32K) in the file, and so forth, so the controller  can index into the FAT using the current FAT entry and read the corresponding FAT sector to obtain the cluster addresses in the FAT sector associated with the file as shown in , . Cluster addresses are related to LBA addresses in the logical address space of the storage device . The LBA address can be computed from the cluster address using a simple calculation, such as multiplying the cluster address by the cluster size (the number of LBAs per cluster) used by the storage device (at ) and adding the offset of the start of the file system (whose location is provided in the file system root directory at ). The controller  will then follow the FAT pointers for any FAT entries in the current FAT sector that are contained within the file, until the next entry points to outside of the current FAT sector (at ). If the next entry is an end of file marker, then all the LBA information for the file has been retrieved and the cluster walking process stops (at , ). If the next entry does not indicate that the end of the file has been reached, then the controller  indexes into the FAT using the current FAT entry and another corresponding FAT sector is read (at , , ).","The storage device  can either communicate the entire cluster chain (list of LBAs that may be maintained in, for example, a table) it has found within the file to the host application  at one time, or it can communicate interactively with the host  and build the cluster chain for the file one or more FAT sectors at a time until the entire list has been transmitted. In the latter iterative approach, one or more LBAs may be returned each time the host application  requests LBA information. For example, the storage device may return as many LBAs as it finds for the current FAT sector, where there are multiple FAT entries per FAT sector. In order for the storage device  to send the entire list of LBAs for the file at once, the storage device  may store the list in a hidden location in memory  on the storage device, where the hidden memory may be a location not mapped to a host addressable LBA.","Cluster walking generally requires elevated processing overhead and functional capabilities, such as a knowledge of the directory structure and of the FAT, on the part of the storage device .","In another implementation, an approach for obtaining LBA information, or for allowing a host application  to direct the storage device to immediately act on data at an LBA address without knowing in advance the LBA address, is through cluster painting. Cluster painting is a more host-intensive process and generally requires less processing overhead and functional capabilities from the storage device  than the cluster walking technique. Cluster painting involves the host  marking or \u201cpainting\u201d the cluster prior to or in addition to writing data to it. As described in greater detail below, the host  paints a cluster by providing a special signature associated with data written to the storage device  that the storage device can detect and act on. A primary purpose of cluster painting is to tag clusters so that certain clusters are marked as a spot where certain operations are to take place. This painting technique avoids the need for a full file path look-up that is needed in the cluster walking technique described above. In fact, with the cluster painting technique, the storage device  does not need to understand anything about the format or geometry of the host file system at all. If the host application  desires to obtain the LBAs for the marked (painted) clusters, then a separate command, such as a read LBA command sent over the FBCC, may be utilized to instruct the storage device  to return the LBA for the most recently marked cluster, or the LBA can be returned as a required or optional part of the status return for the command used to mark the cluster.","In the cluster painting approach, the signature sent by the host  with one or more clusters of data may be a predetermined signature already known to the storage device , or may be a signature provided to the storage device by the host in a signature definition command that informs the storage device of what to look for. Also, the host  may instruct the storage device  to initiate and stop looking for clusters marked by a signature, or the storage device may be configured to always look for marked clusters. In embodiments where the storage device  is not preconfigured to always look for marked clusters, the host  may \u201cswitch\u201d the storage device in and out of a mode where the storage device is looking for clusters marked with a signature. In one implementation, the signature definition command sent by the host  to the storage device  acts as a start command to cause the storage device to begin looking for clusters marked with the signature, and a signature stop or disable command causes the storage device to stop looking for signed clusters.","In an alternative implementation, the host  may switch the storage device  in and out of a mode where the storage device looks for signed clusters with a paint accumulate start command and a paint accumulate stop command. The paint accumulate start command may also cause the storage device  to create a list of all marked clusters. The paint accumulate start and stop commands are useful if the host  wants the storage device  to mark and remember multiple or all the clusters in a file and then have the storage device transmit location information for the marked clusters all at once. If the host  will send separate commands to ask for the cluster location information after, or as part of, each paint (i.e. concurrently with or after each signed cluster is sent and before another signed cluster is sent) then there is no need for using paint accumulate start and stop commands to tell the storage device  when to start and stop compiling the list.","Referring to , an example of cluster painting which returns location information using a paint accumulate start and paint accumulate stop command is illustrated. To initiate the cluster painting process, the host processor , executing a host application API , may cause the host  to transmit a paint accumulate start command to the storage device , which indicates to the storage device controller  that it should start to accumulate a new list of locations that will be marked while painting. This initialization command, or a separate one transmitted before or after the paint accumulate start command, may include a signature that can be (but doesn't need to be) associated with one particular host file (at ). The application  on the host  instructs an API  to cause the file system  to write the signature to each cluster or sector of data corresponding to the particular host file for transmission to the storage device  (at ). The host  transmits each of the clusters or partial clusters (which may be a little as a single sector if the particular host file system architecture permits) with the signature to the storage device  (at ). The host  will typically be configured to transmit an entire cluster at once, but can also transmit only part of a cluster to the storage device . The storage device  may only understand individual sectors or blocks of sectors. Optionally, the command may also cause the data to be transmitted to have an operation applied to it, such as for the data to be encrypted or decrypted. The storage device controller  understands where the operation should occur because the command or operation code is transmitted concurrently with the signature or afterwards in the vicinity where the signature was written (e.g. the command may contain offsets from the actual location where the sector was painted).","Note that the immediate command which is executed \u201chere\u201d and the return of the LBA information about where \u201chere\u201d is located are independent. The paint command may paint a location merely to locate it. The paint command may paint a location to apply an immediate or subsequent operation on the data written at that location. Alternatively, the paint command may both specify an immediate command and collect location information at the same time.","After transmitting a last cluster of the particular host file, the host  may transmit a command indicating the end of the process for accumulating location information (e.g. a paint accumulation stop command) to the storage device  (at ). The host  may then retrieve either the entire list at once or parts of the list for the entire file (at ). Alternatively, the paint accumulate stop command may be used to cause the storage device  to reset a list of accumulated locations of the signature and restart accumulation of location information at the storage device on subsequent instances of the signature detected in received data.","In another implementation, as shown in , the host  can iteratively request LBA information immediately after painting each cluster or a number of clusters rather than send a paint accumulate start and stop command to continuously accumulate a list of cluster locations marked with a signature. Also, as in the technique described in , cluster painting may be used to cause the storage device  to immediately execute a command on the marked cluster rather than waiting to paint all the clusters in the file and finding out the LBA information associated with the painted clusters. In the implementation of , the host  writes a signature to a cluster (at ) and may send a command or operation code concurrently with the signature (at ). The command or operation code may be, for example, an instruction for the storage device  to encrypt the marked cluster. The storage device  may then execute any immediate command (operation) associated with the marked cluster and, if also requested in the command, return the location information for the marked cluster (at ). In other alternative implementations, a command from the host  sent concurrently with marking the cluster may be an instruction to implement the command on a range of clusters. In yet other implementations, the signature may be sent from the host  to the storage device  with a command to have the storage device remember that marked cluster for a later action to be taken, rather than taking immediate action on the marked cluster.","As illustrated in , in the cluster painting process the host  may write the signature  to the beginning of each cluster  in the identified host file and then write cluster data  for the host file to the same location. In one embodiment, the cluster data  may be written to the cluster  such that it is appended to the signature  in the same cluster. In another embodiment, the cluster data  may be written to the same cluster  as the signature , but the cluster data overwrites the signature. The signature  may be written to any sector within the cluster , one or multiple times, and with fixed or random offsets within the cluster. For example, the signature  may only be written to the first sector within the cluster  and only the first sector written to the storage device .","The storage device  may receive commands to initialize the process of scanning for or accumulating locations painted using the cluster painting technique, or to define or redefine the signature that will indicate a command or paint operation, by a command transmitted over a standard command channel, such as an ASSD (Advanced Security SD) channel, that supports commands that are independent of data to be written to the storage device memory . The signatures and LBA information may then be communicated using a command channel protocol that supports transmission of LBA information, such as FBCC or any other command channel recognized by both the host  and the storage device . Alternatively, commands to initialize or end the scanning for a signature or the accumulation of LBA location information, may be included as part of standard host read or write commands all within an FBCC command channel protocol. Also, the storage device  may utilize any of a number of file system data structures , such as an array or table, for example a FAT32 or exFAT file system.","The transmission of a signature definition command to alert the storage device to start or stop looking for clusters marked with a particular signature is entirely optional. In the embodiments of , the cluster painting procedure may be turned on or off by the host  using a start command and an end command (e.g. paint accumulate start and stop or signature identification and signature stop commands) to alert the storage device  to look for clusters that are signed. Because the storage device  uses processing resources when monitoring for the signatures, the use of these start and stop commands may be advantageous to avoid wasting limited processing resources in the storage device when the host is not interested in obtaining LBA information. In an alternative embodiment, the storage device  may be configured to always look for the signed clusters. In this alternative embodiment, no signature definition or start or end commands are necessary or utilized because the storage device  will monitor all incoming clusters for possible signatures. In this alternative embodiment, the storage device  may be pre-programmed to recognize one or more signatures and the host is aware of the signature(s) that the storage device is preprogrammed to recognize. In embodiments that utilize a cluster painting start and\/or end command, the host  may inform the storage device  of what signature to look for as part of the start or end command.","In one implementation of cluster painting, the host  may sign all or a plurality of the clusters of a file. Any of a number of signature formats may be used by the host  to paint the relevant cluster or clusters of a particular file. One example of a suitable signature  is illustrated in . The signature  may contain a BaseSignature  that may be a fixed value or may be set via a signature definition command. A FileID  may be included that corresponds to a specific host file. If the BaseSignature  is set as part of a signature definition command, then the FileID is optional. The BaseSignature+FileID may uniquely identify a specific host file. A ClusterLength  can be a fixed or variable value and may be the number of sectors in the cluster being transmitted with the signature . The FileOffset  represents the offset of the current cluster within the file. The signature  may be written anywhere within a cluster or always to a predetermined location or offset within a cluster, for example the beginning of a cluster.","With cluster painting, the storage device  need not be aware of the file system and the storage device  avoids the processing overhead involved in the cluster walking technique of . Instead, cluster painting places more of the burden on the host  so that the storage device  simply needs to monitor for any writes from the host  that begin with a particular signature. If the signature is detected in a standard file write, then the storage device  is made aware that data written to the range of LBAs starting from that location is to be treated specially, for example that the data is to be encrypted. Part of the information written with the signature may be the size of the range of LBAs. An advantage of the cluster painting technique is that no matter what the internal state of the operating system file system tables is within the host system , the correct LBA will be referenced. Writing the signature informs the firmware in the storage device  to, in effect, \u201cwrite the data here\u201d. The host application  doesn't need to know the final LBA of the data written. The storage device  can keep track of the cluster range of sectors and can perform a desired function, such as encryption, on any sector written within the range. This process is duplicated for each cluster in the file. As described above, in some embodiments, at the end of the file, another command or a different signature received from the host  can tell the storage device  to stop looking for the signature.","If the host  sends a command to the storage device to return LBA information, the storage device  may then return the LBAs associated with the \u201cpainted\u201d clusters via a command channel to the host application . The cluster painting technique effectively provides to the host application  a low-level access to the logical block addresses that are missing from the host operating system and file system. A host application  can use the LBA information received from the storage device  to build its own table of LBA addresses. This is simpler to implement for the storage device  than cluster walking, especially when more than one file system format or multiple cluster sizes may be in use in the storage device memory .","In embodiments where the storage device  provides start and end commands to alert the storage device to initiate and terminate monitoring for painted clusters, information that identifies a specific file may be omitted. Thus, any signed clusters will be identified during the period between receipt of the start and stop commands regardless of whether they may belong to the same host file. Assuming the host  sends a command to return LBA information with the signed clusters, the storage device  will return LBA information for the signed clusters without knowledge or data on whether all the signed clusters it received belonged to different host files. Similarly, in embodiments where the cluster painting technique is always on in the storage device  (i.e. where no start or stop commands limit the period of time the storage device is monitoring for a signature), the storage device may only be made aware of a single signature, or have a preloaded signature it looks for, and will simply execute a command or operation requested by the host  on each marked cluster it sees regardless of whatever host file the cluster is associated with. In such embodiments, the host may transmit to the storage device a \u201cclear\u201d command that resets the storage device buffers used to accumulate LBA location information.","Another embodiment of providing LBA information for a file to a host application  is shown in . In the method of , a combination of the cluster walking technique () and the cluster painting technique () is shown, herein referred to as hybrid cluster walking. Hybrid cluster walking permits the task of locating the LBA information for a cluster chain of a file to be split up between the host  and the storage device . The host  provides information to the storage device  regarding the first cluster of the file using any of the cluster painting technique embodiments described above to only \u201cpaint\u201d (i.e., to only write a signature to) the first cluster of the file (at ). The host  obtains the LBA of the first cluster either via a return LBA parameter included in the paint command or by sending a subsequent read LBA command to the storage device to obtain the LBA information for the painted cluster.","Once the first cluster number (FCN) is returned by the storage device , the host  can use the first cluster number to compute the logical address within the file system data structure  of the beginning of the cluster chain or the location within host directory where space allocation is described for the file. The host  can then instruct the storage device  to then read the portions of the file system data structure  directly from the storage device memory  using a command channel read command (at ). The storage device  will then retrieve and transmit to the host the portions of the file system data structure  requested in the read command and the host  will parse the file system data structure  (e.g. FAT) and determine, based on the retrieved information, what additional portions of the file system data structure  are needed next to locate the entire cluster chain for the file associated with the first cluster number (at ). Thus, the host  parses the FAT, following all FAT pointers in a FAT sector on the storage device , and retrieves LBA information for the file until the end of the file is located in the FAT (at ). This cluster chain information may then be communicated to the card firmware to allow the host application  to inform the storage device  to implement a feature such as encryption directly to all the LBA locations in the particular file.","Unlike the cluster walking version discussed with respect to  above where the controller  of the storage device  performed the task of parsing the FAT or other file system data structure , in the hybrid cluster walking technique of  the host may parse the FAT based on the FCN returned from the storage device . In this embodiment of hybrid cluster walking, the host  uses the starting cluster address obtained via cluster painting, computes the FAT sector LBA where this cluster entry can be found and then walks the remaining chain of the FAT table in order to obtain a complete list of LBAs for all clusters in the file. The host  may construct this list of LBAs by directly reading FAT sectors one or more sectors at a time and walking the cluster chain using host software that only needs to be file-system aware enough to follow the FAT chain. Alternatively, the host  can provide the FCN back to the storage device  and request that the storage device follow the cluster chain. This variation is similar to the logic in full cluster walking but allows simplified logic in the storage device . Specifically, the storage device  does not need to understand how to follow a file path to a specific starting cluster, and only needs to understand the chain information in file system data structure  that allows it to accumulate the cluster locations of the entire file. The storage device  may include instructions  to parse the file system data structure , for example a FAT table as illustrated in , by following pointers in the FAT table until an end of file identifier is found. Thus, the host may iteratively request portions of the FAT to walk through to find relevant clusters for the file, may request the entire FAT at one time, or may ask the storage device to walk through the sectors of the FAT and return, at one time or in blocks or chunks of sector addresses, all clusters in the chain for the file associated with the FCN.","In the implementation where the host  paints the first cluster to obtain the FCN for a file from the storage device  and then asks the storage device  to use the FCN and accumulate the cluster information for that file, the procedure is very similar to full cluster walking () except that steps - are replaced with the paint operation, and then the storage device \u201caccumulates\u201d the cluster locations following steps -. Another way of looking at this is that in , the loop of steps - can either be executed by the host (reading FAT sectors and parsing them) or by the storage device.","In one implementation of hybrid cluster walking, only three storage device commands need to be implemented: a command to initiate cluster painting that may incorporate parameters such as BaseSignature  and FileID  discussed previously; a write command to paint a cluster and return the LBA number for the painted cluster (i.e., the cluster where the signature is written); and a command to return arbitrary LBA sector or block contents from the FAT. In other embodiments of hybrid cluster walking, where no start command is used for cluster painting and the storage device is always actively monitoring for signed clusters, there may only be a need for two of these commands: a write command to paint a cluster and a command to read arbitrary LBA sector or block contents from the FAT. The read arbitrary LBA sector or block command can be limited to only the file system data structure  area of the storage device memory  or it may have access to the entire storage device memory . Similarly in the implementation of hybrid cluster walking where the host  asks the storage device  to parse and accumulate cluster information, only two commands may be needed: a write command to paint a cluster and a read command to return cluster chain addresses, with the FCN passed in as a parameter to the read command.","Referring to , a simplified example is provided of how file system data structure entries (here FAT chains) and clusters in memory relate to each other and to host files. Two files, File1.dat  and File2.dat  are illustrated in the context of the clusters stored in the main memory  (corresponding to main memory  in the storage device ) that make up the files ,  and the corresponding FAT entries that map the clusters in main memory . Each of the files ,  have information in a FAT file directory stored in main memory , including the filename, starting sector, and length of the file in bytes. In other file systems, this directory information may be interspersed with the file allocation information.","File1.dat  is 100 k bytes in length or 3 full 32 k byte clusters plus 4 k bytes in a fourth cluster in main memory . All the links in the FAT chain for File1.dat happen to be entirely within the first two sectors ,  of the FAT . For File1.dat  the 4 clusters in main memory  containing the data for File1.dat are at cluster addresses 0x118000, 0x138000, 0x130000 and 0x41000. The cluster addresses are mapped in the sectors of the FAT , where each sector may include 1 or more entries identifying clusters of a file. For File1.dat , the FAT entries corresponding to the file are entries , ,  in the first FAT sector  and entry  in the second FAT sector , where entry  contains an end of file (EOF) marker indicating the last cluster of File1.dat. Each entry in the FAT  includes a FAT pointer that points to the next entry for the file, as indicated by the next entry number at each entry and the curved arrow to that next entry, until the EOF marker is reached.","Two sectors of FAT, as shown within the dashed line , is one example of a reasonable quantity of FAT data that the host  might read in at once (although the number could be much higher, including the entire FAT in some circumstances) as the host  predicts where the next set of cluster chain links might appear. Assuming that links are forward chained is usually a good assumption when the main memory  is empty and new. Over time, usage and fragmentation tend to introduce the backward pointing links in the FAT , at which point the host may need to re-request earlier sectors of the FAT when later sectors have pointers linking back to earlier sectors of the FAT.","File2.dat  is 200 k bytes in length (6 full clusters plus 8 k from a seventh). The entries of the FAT chain for File2.dat spill over to a 3rd FAT sector  so a second access would be needed by a host caching two FAT sectors at a time. Because the end of file (EOF) link for File2.dat is actually back in the second FAT sector , a re-read by the host  of that sector might be necessary.","The example of  is a very simplified example that assumes a FAT  type of file system data structure with a cluster size of 32K (the default format and cluster size for SD cards between 2 GB and 32 GB). A single 2 GB video file would typically have over 61,000 cluster links requiring 477 sectors of FAT in a best case scenario where the video file is perfectly contiguous. , however, demonstrates how sectors in the FAT  can be read by the host  either one at a time or as groups of sectors and parsed to extract the cluster location information of where the data for files, such as example files File1.dat  and File2.dat , using hybrid cluster walking or any combination of the LBA acquisition techniques described herein.","Although LBA acquisition using techniques of cluster walking, cluster painting and hybrid cluster walking have been described above with the respect to FAT file structures, it is contemplated that these techniques may be utilized for any of a number of known file system data structure formats that maintain a record of clusters, where clusters are defined herein as a group of sequential LBAs of a size determined by the file system . Also, the invention contemplates the possibility of use in file system aware storage devices, i.e., in the presence of a file system and file system management within the storage device. In such cases, the embodiments discussed above may coexist with, and be used alongside, file system aware capabilities of the storage device. These features may operate in the storage device independently and unaware of each other.","Multiple embodiments may also be operative at the same time, e.g. the storage device may implement cluster painting, regular cluster walking using file system aware capabilities, and hybrid cluster walking as independent options for the host application. As one example, a file system aware storage device and host might use hybrid cluster walking to write an encrypted file, and use file system aware capabilities to read the same file once it has been closed or written, to duplicate, stream, send or backup the file or to transform the file into another format. The host is aware of reading and using the LBA list to write the file, but may be unaware of asynchronous activities that the file system aware storage device has undertaken contemporaneously.","Systems and methods for allowing efficient use of host and storage device resources for permitting a host application to communicate file system layout information to firmware applications on a storage device have been disclosed. According to one method, a cluster painting technique may be initiated by a host where each cluster of a file has a signature written to it by the host so that the storage device knows to perform an operation relating to the signed cluster. In one example, the signed cluster may be accompanied by a command to encrypt the cluster, while in other examples, the storage device may be configured or instructed to add each cluster having a signature for a particular file to a list of cluster information that can be used to return a complete cluster chain for the file.","According to another method, a hybrid method of cluster painting and cluster walking may be implemented where the host signs only the first cluster of a file and the storage device returns a first cluster number for use by the host to then read the file system data structure (e.g. FAT) to obtain the entire cluster chain for the file. A storage device is also disclosed having a memory and a controller configured to either receive a signature definition command from a host before beginning to monitor for clusters signed by the host, or to continuously monitor for incoming clusters having a known signature. The storage device may then receive clusters for the particular file from the host, where all the clusters for the particular file include the signature (cluster painting technique), or only the first cluster of the particular host file is \u201cpainted\u201d to include the signature (hybrid cluster walking technique). The controller of the storage device may then receive a signature stop or disable command after receiving a last cluster of the particular host file and may transmit cluster location data accumulated by the storage device, or it may provide cluster location information as it receives marked clusters in embodiments where the storage device is configured to return location information after each paint operation. The controller of the storage device may be configured to look for a new signature when it receives a different signature definition command and stop looking for the old signature. The controller of the storage device may also be configured to look for multiple signatures at once.","In the cluster painting technique, the processor of the storage device may use the marked cluster in a number of alternative ways. For example, the processor may immediately perform an operation on the marked cluster or a range of clusters relative to the marked cluster, may be instructed to later perform an operation on the marked cluster or a range of clusters relative to the marked cluster, may send cluster location back to the host immediately after receipt of a marked cluster or may accumulate cluster location data and send out the cluster location data for the entire cluster chain of the file. Other variations are also contemplated. In the hybrid cluster walking technique, only the first cluster is signed by the host and the processor of the storage device only sends a location in the storage device of the first cluster number (FCN) of the particular host file. The host can then use that FCN to parse the file system data structure (e.g. FAT), determine what additional FAT information to request from the storage device, and send host data structure read commands (e.g. a Read LBA command) with the locations in the FAT the storage device is to access for LBA information. Once the location information has been obtained by the host using cluster walking after determining the first cluster number via cluster painting of the first cluster, the host application may then utilize the file location information for more efficiently executing operations on the desired data in the storage device.","It is therefore intended that the foregoing detailed description be regarded as illustrative rather than limiting, and that it be understood that it is the following claims, including all equivalents, that are intended to define the spirit and scope of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 4","FIGS. 3A and 3B"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIGS. 3A and 3B"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 2","FIGS. 3A and 3B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
