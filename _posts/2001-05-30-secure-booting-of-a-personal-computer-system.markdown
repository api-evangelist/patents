---
title: Secure booting of a personal computer system
abstract: Methods for securing booting a personal computer system. One method includes establishing a secret between two or more devices and securing the secret in each of the two or more devices. Another method includes processing BIOS code instructions and accessing security hardware. The method also includes accessing a first device, locking the security hardware, and calling boot code. Another method includes reading a secret from a first location, storing the secret in a secure location different from the first location, and locking the first location. Another method includes requesting authentication for a device, receiving authentication for the device, and setting a timer associated with the device. Another method includes requesting authentication for a device, failing authentication for the device, and preventing access to the device upon failing authentication for the device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07007300&OS=07007300&RS=07007300
owner: Advanced Micro Devices, Inc.
number: 07007300
owner_city: Austin
owner_country: US
publication_date: 20010530
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,395, entitled, \u201cEnhanced Security and Manageability using Secure Storage in a Personal Computer System,\u201d filed on May 11, 2001, whose inventors are Geoffrey S. Strongin and Dale E. Gulick. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,446, entitled, \u201cResource Sequester Mechanism,\u201d filed on May 11, 2001, whose inventor is and Dale E. Gulick. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,447, entitled, \u201cIntegrated Circuit for Security and Manageability,\u201d filed on May 11, 2001, whose inventors are Dale E. Gulick and Geoffrey S. Strongin. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,225, entitled, \u201cSystem Management Mode Duration and Management,\u201d filed on May 11, 2001, whose inventors are Geoffrey S. Strongin and Dale E. Gulick. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,226, entitled, \u201cMechanism for Closing Back Door Access Mechanisms in Personal Computer Systems,\u201d filed on May 11, 2001, whose inventor is Geoffrey S. Strongin. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/854,040, entitled, \u201cCryptographic Randomness Register for Computer System Security,\u201d filed on May 11, 2001, whose inventor is Dale E. Gulick. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,465, entitled, \u201cCryptographic Command-Response Access to a Memory in a Personal Computer System,\u201d filed on May 11, 2001, whose inventor is Geoffrey S. Strongin. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,443, entitled, \u201cProtection Mechanism for Biometric Input Data,\u201d filed on May 11, 2001, whose inventors are Dale E. Gulick and Geoffrey S. Strongin. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,437, entitled, \u201cPersonal Computer Security Mechanism,\u201d filed on May 11, 2001, whose inventors are Geoffrey S. Strongin and Dale E. Gulick. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,335, entitled, \u201cAsset Sharing between Host Processor and Security Hardware,\u201d filed on May 11, 2001, whose inventors are Geoffrey S. Strongin and Dale E. Gulick. This Application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 09\/853,234, entitled, \u201cInterruptable and Re-enterable System Management Mode Programming Code,\u201d filed on May 11, 2001, whose inventors are Geoffrey S. Strongin and Dale E. Gulick. This Application is also continuation-in-part, as are each of the above filed on May 11, 2001, of co-pending U.S. patent application Ser. No. 09\/852,372, entitled, \u201cSecure Execution Box and Method,\u201d filed on May 10, 2001, whose inventors are Dale E. Gulick and Geoffrey S. Strongin. This Application is also a continuation-in-part, as are each of the above filed on May 11, 2001, of co-pending U.S. patent application Ser. No. 09\/852,942, entitled, \u201cComputer System Architecture for Enhanced Security and Manageability,\u201d filed on May 10, 2001, whose inventors are Geoffrey S. Strongin and Dale E. Gulick.","1. Field of the Invention","This invention relates generally to computing systems, and, more particularly, to methods for secure components in personal computer systems.","2. Description of the Related Art",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1A","b":["100","100","102","104","106","108","110","112","114","116","118","120","122","104","112","100"]},"The processor  is coupled to the north bridge . The north bridge  provides an interface between the processor , the memory , the AGP memory , and the PCI bus . The south bridge  provides an interface between the PCI bus  and the peripherals, devices, and subsystems coupled to the IDE interface , the USB interface , and the LPC bus . The battery  is shown coupled to the south bridge . The Super I\/O\u2122 chip  is coupled to the LPC bus .","The north bridge  provides communications access between and\/or among the processor , memory , the AGP memory , devices coupled to the PCI bus , and devices and subsystems coupled to the south bridge . Typically, removable peripheral devices are inserted into PCI \u201cslots\u201d (not shown) that connect to the PCI bus  to couple to the computer system . Alternatively, devices located on a motherboard may be directly connected to the PCI bus .","The south bridge  provides an interface between the PCI bus  and various devices and subsystems, such as a modem, a printer, keyboard, mouse, etc., which are generally coupled to the computer system  through the LPC bus  (or its predecessors, such as an X-bus or an ISA bus). The south bridge  includes the logic used to interface the devices to the rest of computer system  through the IDE interface , the USB interface , and the LPC bus .",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B","b":["112","113","125","112","126","128","125","126","126","126","126","129","127","112","125","132","133","134","134","134","134"]},"Time and date data from the clock circuit  are stored as the clock data  in the RTC RAM B. The checksum data  in the RTC RAM B may be calculated based on the CMOS RAM A data and stored by BIOS during the boot process, such as is described below, e.g. block , with respect to . The CPU interface  may include interrupt signal controllers and processor signal controllers. The power and system management units  may include an ACPI (Advanced Configuration and Power Interface) controller.","From a hardware point of view, an x86 operating environment provides little for protecting user privacy, providing security for corporate secrets and assets, or protecting the ownership rights of content providers. All of these goals, privacy, security, and ownership (collectively, PSO) are becoming critical in an age of Internet-connected computers. The original personal computers were not designed in anticipation of PSO needs.","From a software point of view, the x86 operating environment is equally poor for PSO. The ease of direct access to the hardware through software or simply by opening the cover of the personal computer allows an intruder or thief to compromise most security software and devices. The personal computer's exemplary ease of use only adds to the problems for PSO.","In one aspect of the present invention, a method of booting a computer system is presented. The method includes establishing a secret between two or more devices and securing the secret in each of the two or more devices.","According to another aspect of the present invention, a method of booting a computer system including a processor coupled to a memory, to security hardware, and to a first device is presented. The method includes processing BIOS code instructions and accessing security hardware. The method also includes accessing a first device, locking the security hardware, and calling boot code.","According to yet another aspect of the present invention, a method of booting a personal computer system is provided. The method includes reading a secret from a first location, storing the secret in a secure location different from the first location, and locking the first location.","According to still another aspect of the present invention, a method of booting a computer system is provided. The method includes requesting authentication for a device, receiving authentication for the device, and setting a timer associated with the device.","According to still yet another aspect of the present invention, a method of booting a computer system is provided. The method includes requesting authentication for a device, failing authentication for the device, and preventing access to the device upon failing authentication for the device.","According to yet another aspect of the present invention, a method of booting a computer system is provided. The method includes requesting authentication through security hardware using master mode and placing one or more bus interface logics in master mode by setting master mode bits therein. The method also includes receiving authentication data through the one or more bus interface logics in master mode and verifying the authentication data.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof have been shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the description herein of specific embodiments is not intended to limit the invention to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the invention as defined by the appended claims.","Illustrative embodiments of the invention are described below. In the interest of clarity, not all features of an actual implementation are described in this specification. It will, of course, be appreciated that in the development of any such actual embodiment, numerous implementation-specific decisions must be made to achieve the developers' specific goals, such as compliance with system-related and business-related constraints, which will vary from one implementation to another. Moreover, it will be appreciated that such a development effort might be complex and time-consuming, but would nevertheless be a routine undertaking for those of ordinary skill in the art having the benefit of this disclosure. The use of a letter in association with a reference number is intended to show alternative embodiments or examples of the item to which the reference number is connected.","System Management Mode (SMM) is a mode of operation in the computer system that was implemented to conserve power. The SMM was created for the fourth generation x86 processors. As newer x86 generation processors have appeared, the SMM has become relatively transparent to the operating system. That is, computer systems enter and leave the SMM with little or no impact on the operating system.","Referring now to the drawings, and in particular to , a flowchart of a prior art method of initializing a computer system using code stored in the BIOS  is shown. During initialization of the power supply, the power supply generates a power good signal to the north bridge, in block . Upon receiving the power good signal from the power supply, the south bridge (or north bridge) stops asserting the reset signal for the processor, in block .","During initialization, the processor reads the default jump location, in block . The default jump location in memory is usually at a location such as FFFF0h. The processor performs a jump to the appropriate BIOS code location (e.g. FFFF0h) in the ROM BIOS, copies the BIOS code to the RAM memory, and begins possessing the BIOS code instructions from the RAM memory, in block . The BIOS code, processed by the processor, performs a power-on self test (POST), in block .","The BIOS code next looks for additional BIOS code, such as from a video controller, IDE controller, SCSI controller, etc. and displays a start-up information screen, in block . As examples, the video controller BIOS is often found at C000h, while the IDE controller BIOS code is often found at C800h. The BIOS code may perform additional system tests, such as a RAM memory count-up test, and a system inventory, including identifying COM (serial) and LPT (parallel) ports, in block . The BIOS code also identifies plug-and-play devices and other similar devices and then displays a summary screen of devices identified, in block .","The BIOS code identifies the boot location, and the corresponding boot sector, in block . The boot location may be on a floppy drive, a hard drive, a CDROM, a remote location, etc. The BIOS code next calls the boot sector code at the boot location to boot the computer system, such as with an operating system, in block .","It is noted that for a cold boot or a hard (re)boot, all or most of the descriptions given in blocks \u2013 may occur. During a warm boot or a soft (re)boot the BIOS code usually jumps from block  into block , skipping the POST, memory tests, etc.","In , a flowchart of a prior art method of operating a computer system in SMM using code stored in the BIOS  is shown. An interrupt controller receives a request for SMM, in block . The interrupt controller signals the request for SMM to the processor by asserting a system management interrupt (SMI#) signal, in block .","The processor recognizes the request for SMM and asserts an SMI ACTive (SMIACT#) signal, in block . The system recognizes the SMIACT# signal, disables access to the system RAM, and enables access to system management RAM (SMRAM) space, in block .","The current processor state is saved to SMRAM, in block . The processor resets to the SMM default state and enters SMM, in block . The processor next reads the default pointer and jumps to the appropriate place in SMRAM space, in block . In block , the source and\/or nature of the SMI request is identified.","An SMI handler services the SMI request, in block . After servicing the SMI request, the SMI handler issues a return from SMM (RSM) instruction to the processor, in block . Upon operating on the RSM instruction, the processor restores the saved state information and continues normal operation, in block .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 3","b":["260","205","210","210","215","100","215","220","225","230"]},"According to one aspect of the present invention, the drivers  and the hardware  are part of a secure execution box configured to operate in a secure execution mode (SEM) . Trusted privacy, security and ownership (PSO) operations, also referred to simply as security operations, may take place while the computer system is in SEM . Software calls propagated from the user I\/O  and\/or the applications  may be placed into the secure execution box in SMM  via an SMM initiation register B (or SMM initiator A) discussed below with respect to  (or ). Parameters may be passed into and out of the secure execution box in SEM  via an access-protected mailbox RAM , also discussed below with . The software calls have access to the secure execution box in SEM  to various security hardware resources, such as described in detail below.","In various embodiments of the present invention, power management functions may be performed inside SEM . One current standard for power management and configuration is the Advanced Configuration and Power Interface (ACPI) Specification. The most recent version is Revision 2.0, dated Jul. 27, 2000, and available from the ACPI website currently run by Teleport Internet Services, hereby incorporated herein by reference in its entirety. According to the ACPI specification, control methods, a type of instruction, tell the system to go do something. The ACPI specification does not know how to carry out any of the instructions. The ACPI specification only defines the calls, and the software must be written to carry out the calls in a proscribed manner. The proscribed manner of the ACPI specification is very restrictive. One cannot access some registers in your hardware. To access those registers, various aspects of the present invention generate an SMI# to enter SMM and read these registers. As power management has the potential to be abused e.g. change the processor voltage and frequency, raised above operating limits to destroy the processor, or lowered below operating limits leading to a denial of service, ACPI calls should be carried out in a secure manner, such as inside SEM .","Inside SEM , each ACPI request can be checked against some internal rules for safe behavior. Using terminology more completely described below, the ACPI request would be placed in the inbox of the mailbox, parameter values read from the inbox, the ACPI request evaluated using the inbox parameters for acceptability, and then either carryout the request or not, based on the evaluation results. For additional details of various embodiments, see , A, and B below.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 4","b":["100","370","330","305","330","370","365","134","134","365","102","134","315","320","325","118","330","134","305","118","310","305","310","355","305","370"]},"The security hardware  in the south bridge  may be operable to provide an SMI interrupt request to the IC  for the processor . The security hardware  may also interact with the crypto-processor . Access to the BIOS  is routed through the crypto-processor . The crypto-processor  is configured to accept and transfer access requests to the BIOS . The crypto-processor  therefore may understand the address mappings of the BIOS . According to one aspect of the present invention, the security hardware  allows the computer system  to become an embodiment of the secure execution box  shown in .","In one embodiment, the crypto-processor  is configured to accept an input from the biometric device  and\/or the smart card reader  over the USB interface, i.e. through the optional USB hub  and the USB interface logic C, and over the LPC bus . Other interfaces, such as IDE or PCI, may be substituted. The crypto-processor  may request one or more inputs from the biometric device  and\/or the smart card reader  to authenticate accesses to the BIOS , other storage devices, and\/or another device or subsystem in the computer system .","It is noted that the IC  may be included in the processor instead of the south bridge . The IC  is also contemplated as a separate unit or associated with another component of the computer system . It is also noted that the operations of the LPC bus  may correspond to the prior art Low Pin Count Interface Specification Revision 1.0 of Sep. 29, 1997. The operations of the LPC bus  may also correspond to the extended LPC bus disclosed in co-pending U.S. patent application Ser. No. 09\/544,858, filed Apr. 7, 2000, entitled \u201cMethod and Apparatus For Extending Legacy Computer Systems\u201d, whose inventor is Dale E. Gulick, which is hereby incorporated by reference in its entirety. It is further noted that the USB interface logic C may couple to the LPC BIL D is any of a variety of ways, as is well known in the art for coupling different bus interface logics in a bridge.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIGS. 5A and 5B","FIG. 5A"],"b":["330","370","330","370","365","370","401","402","420","100","401","405","406","407","408","402","410","415","425"]},"As shown in , the control logic  is coupled to control operation of the SMM timing controller A, the SMM access controller A, and the SMM initiator A. Input and output (I\/O) to the security hardware A pass through the SMM access filters  and are routed through the control logic A.","The SMM timing controller A includes the duration timer A, which measures how long the computer system  is in SMM. The kick-out timer A, also included in the SMM timing controller A, counts down from a predetermined value while the computer system  is in SMM. The control logic A is configured to assert a control signal (EXIT SMM ) for the processor to exit SMM, such as in response to the expiration of the kick-out timer A. The restart timer , included in the SMM timing controller A, starts counting down from a predetermined value after the kick-out timer A reaches zero. The SMM indicator , also included in the SMM timing controller A, is operable to monitor the status of one or more signals in the computer system, such as the SMI# (System Management Interrupt) signal and\/or the SMIACT# (SMI ACTive) signal to determine if the computer system is in SMM.","The SMM access controller A includes the SMM access filters , which are configured to accept input requests for the sub-devices within the security hardware A. When the computer system  is in SMM, the SMM access filters are configured to pass access requests (e.g. reads and writes) to the control logic A and\/or the target sub-device. When the computer system  is not in SMM, the SMM access filters are configured to respond to all access requests with a predetermined value, such as all \u20181\u2019s. The SMM access controller A also includes the mailbox RAM . In one embodiment, the mailbox RAM  includes two banks of RAM, such as 512 bytes each, for passing parameters into and out of the secure execution box . Parameters passed to or from the sub-devices included within the security hardware  are exchanged at the mailbox RAM . One bank of RAM , an inbox, is write-only to most of all of the computer system in most operating modes. Thus, parameters to be passed to the sub-devices included within the security hardware  may be written into the inbox. During selected operating modes, such as SMM, both read and write accesses are allowed to the inbox. Another bank of RAM , an outbox, is read-only to most of all of the computer system in most operating modes. Thus, parameters to be received from the sub-devices included within the security hardware  may be read from the outbox. During selected operating modes, preferably secure modes, such as SMM, both read and write accesses are allowed to the outbox.","The SMM initiator A may advantageously provide for a convenient way to request that the computer system  enter SMM. A signal may be provided to the SMM initiator A over the request (REQ) line. The signal should provide an indication of the jump location in SMM memory. The SMM initiator A is configured to make a request for SMM over the SMM request (SMM REQ) line, for example, by submitting an SMI# to the interrupt controller . The SMM initiator A is also configured to notify the control logic A that the request for SMM has been received and passed to the interrupt controller .","In , the south bridge B includes the security hardware B. The IC  is shown external to the south bridge B. The security hardware B includes an SMM timing controller B, an SMM access controller B, and control logic B. The SMM timing controller B includes an SMM indicator , a duration\/kick-out timer B, and a restart timer . The SMM access controller B includes SMM access filters  and mailbox RAM . An SMM initiation register B is shown external to the south bridge B.","As shown in , the control logic B is coupled to control operation of the SMM timing controller B and the SMM access controller B. Input and output (I\/O) signals to the security hardware B pass through the SMM access filters  and are routed through the control logic B. The control logic B is also coupled to receive an indication of a request for SMM from the SMM initiation register B.","The SMM timing controller B includes the duration\/kick-out timer B measures how long the computer system  is in SMM, counting up to a predetermined value while the computer system  is in SMM. The control logic B is configured to assert a control signal for the processor to exit SMM in response to the duration\/kick-out timer B reaching the predetermined value. The restart timer  starts counting down from a predetermined value after the duration\/kick-out timer B reaches the predetermined value. The SMM indicator  is operable to monitor the status of one or more signals in the computer system, such as the SMI# (System Management Interrupt) signal and\/or the SMIACT# (SMI ACTive) signal, to determine if the computer system is in SMM.","The SMM access controller B includes the SMM access filters , which are configured to accept input requests for the sub-devices within the security hardware B. When the computer system  is in SMM, the SMM access filters are configured to pass access requests (e.g. reads and writes) to the control logic B and\/or the target sub-device. When the computer system  is not in SMM, the SMM access filters may be configured to respond to all access requests with a predetermined value, such as all \u20181\u2019s. The SMM access controller B also includes the mailbox RAM , described above with respect to .","The SMM initiation register B may advantageously provide for a convenient way to request that the computer system  enter SMM. A signal may be provided to the SMM initiation register B over the request (REQ) line. The signal should provide an indication of the jump location in SMM memory. The SMM initiation register B is configured to provide the indication to the control logic B. The control logic B is configured to make a request for SMM over the SMM request (SMM REQ) line, for example, by submitting an SMI# to the interrupt controller .","It is noted that in the embodiment illustrated in , the SMM initiator A includes internal logic for handling the SMM request. In the embodiment illustrated in , the SMM initiation register B relies on the control logic B to handle the SMM request. It is also noted that the SMM initiator A is part of the security hardware A, while the SMM initiation register B is not part of the security hardware B.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 6","FIGS. 5A and 5B"],"b":["330","370","370","401","402","420","430","435","440","455","470","450","445","402","460","410","401","402","420"]},"The embodiment of the SMM access controller  illustrated in  includes the one or more access locks  within the SMM access filters . The access locks  provide a means of preventing (or locking) and allowing (or unlocking) access to one or more of the devices within the security hardware C. Various embodiments for the one or more access locks  are shown in  and described with reference thereto.","In one embodiment, the access locks  are open at reset (OAR), allowing the BIOS software access to the security hardware . The BIOS software then closes the access locks  prior to calling the boot sector code, shown in block  in . In various embodiments, the access locks  may be opened by software or hardware to allow for access to the security hardware . For example, the access locks  may be opened by a signal from the IC  or the processor  (or A or B from ) or the control logic . The access locks  may be opened in response to an SMI# or in response to the processor  or  entering SMM. Additional information on the access locks  may be obtained from one or more of the methods A\u2013C described below with respect to .","The TCO counter (or timer)  may include a programmable timer, such as a count-down timer, that is used to detect a lock-up of the computer system . Lock-up may be defined as a condition of the computer system  where one or more subsystems or components do not respond to input signals for more than a predetermined period of time. The input signals may include internal signals from inside the computer system  or signals from outside the computer system , such as from a user input device (e.g. keyboard, mouse, trackball, biometric device, etc.). It is also noted that the lock-ups may be software or hardware in nature. According to various aspects of the present invention, the TCO counter  may be programmed and read from inside SMM. The TCO counter  is preferably programmed with value less than a default duration for the kick-out timer . In one embodiment, the TCO timer  generates an SMI# upon a first expiration of the TCO timer , and the TCO timer  generates a reset signal for the computer system upon a second, subsequent expiration of the TCO timer .","In one embodiment, the TCO timer  may be accessed by the computer system  or software running in the computer system  for the computer system  to recover from lock-ups when the computer system is not in SMM. In another embodiment, the TCO timer  may be accessed by the computer system  both in and out of SMM.","The monotonic counter A comprises a counter, preferably at least 32 bits and inside the RTC battery well , which updates when the value stored in the monotonic counter A is read. The monotonic counter A is configured to update the value stored to a new value that is larger than the value previously stored. Preferably, the new value is only larger by the smallest incremental amount possible, although other amounts are also contemplated. Thus, the monotonic counter A may advantageously provide a value that is always increasing up to a maximum or rollover value. Additional details may be found below with respect to , , and .","The scratchpad RAM  includes one or more blocks of memory that are available only while the computer system  is in certain operating modes, such as SMM. It is also contemplated that other sub-devices of the security hardware  may use the scratchpad RAM  as a private memory. One embodiment of the scratchpad RAM  includes 1 kB of memory, although other amounts of memory are also contemplated. In one embodiment, the scratchpad RAM is open at reset to all or most of the computer system , while in another embodiment, the scratchpad RAM is inaccessible while the computer system is booting.","The random number generator (RNG)  is configured to provide a random number with a number of bits within a predetermined range. In one embodiment, a new random number with from 1 to 32 bits in length is provided in response to a request for a random number. It is noted that restricting access to the RNG, such as only in SMM, may advantageously force software to access the RNG through a standard API (application programming interface), allowing for increased security and easing hardware design constraints. Additional details may be found below with respect to .","The OAR locks  may include a plurality of memory units (e.g. registers), which include associated programming bit (or lock bits) that lock the memory (or memories) used to store BIOS information or other data, for example, BIOS ROM  and SMM ROM  in  below. Each memory unit may have, by way of example, three lock bits associated with it. In one embodiment, four 8-bit registers may store the lock bits for each 512 kB ROM-page, one register for every two 64-kB segment. With sixteen blocks of four registers, a maximum of 8 MB of ROM may be locked. Addressing may be as follows:",{"@attributes":{"id":"p-0098","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"64-kB segment","Register","ADDRESS"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0, 1","Register 0","FFBx,E000h"]},{"entry":[{},"2, 3","Register 1","FFBx,E001h"]},{"entry":[{},"4, 5","Register 2","FFBx,E002h"]},{"entry":[{},"6, 7","Register 3","FFBx,E003h"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The lock registers from the OAR locks  may include:",{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Register\\Bits","7","OAR Lock 6:4","3","OAR Lock 2:0"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register 0","Reserved","Segment 1","Reserved","Segment 0"]},{"entry":["Register 1","Reserved","Segment 3","Reserved","Segment 2"]},{"entry":["Register 2","Reserved","Segment 5","Reserved","Segment 4"]},{"entry":["Register 3","Reserved","Segment 7","Reserved","Segment 6"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, one bit controls write access, one bit controls read access, and one bit prevents the other two bits from being changed. In one embodiment, once the locking bit is set (also described as the state being locked down), the write access bit and read access bit cannot be reprogrammed until the memory receives a reset signal. The layout of each register may include:",{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"9","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}},{"entry":["Bit","7","6","5","4","3","2","1","0"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Value","Rsvrd","Lock 2","Lock 1","Lock 0","Rsvrd","Lock 2","Lock 1","Lock 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]}}}}},"With a decode of the three lock bits including:",{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},"Read Lock","Lock-Down","Write Lock",{}]},{"entry":["Decode","Data 2","Data 1","Data 0","Resulting block state"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0x00","0","0","0","Full access"]},{"entry":["0x01","0","0","1","Write locked (default"]},{"entry":[{},{},{},{},"state)"]},{"entry":["0x02","0","1","0","Lock open (full access"]},{"entry":[{},{},{},{},"locked down)"]},{"entry":["0x03","0","1","1","Write locked down"]},{"entry":["0x04","1","0","0","Read locked"]},{"entry":["0x05","1","0","1","Read and write locked"]},{"entry":["0x06","1","1","0","Read locked down"]},{"entry":["0x07","1","1","1","Read and write locked"]},{"entry":[{},{},{},{},"down"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The embodiment of the security hardware C illustrated in  also includes the OAR override register . The OAR override register  provides a mechanism for allowing (or unlocking) and preventing (or locking) access to one or more of the devices within the security hardware C. The OAR override register  also provides a mechanism to override the access locks . In one embodiment, the OAR override register  includes a first indicator that the access locks  are to be ignored, with access to the security hardware locked by the access locks  either always available or never available, as implemented. The OAR override register  may also include a second indicator that the status of the first indicator may be changed, or not. If the second indicator shows that the first indicator may not be changed, then the device including the OAR override register  preferably needs reset for the second indicator to be changed. In other words, the second indicator is preferably OAR, similar to one embodiment of the access locks .","Methods that include using the access locks  and\/or the OAR override indicators are described below with respect to . Various embodiments for the one or more access locks  are shown in  and described with reference thereto, and an embodiment of the OAR override register  is shown in  and described with reference thereto.","Example embodiments of the secure system management registers  are shown below in  and described therewith. Briefly, in one embodiment, the secure system management registers  include one or more ACPI lock bits  to secure various ACPI or related functions against unauthorized changes. The ACPI lock bits , once set, prevent changes to the ACPI or related functions. A request to change one of the ACPI or related functions requires that a respective ACPI lock bit N be released before the respective one of the ACPI or related functions is changed. In another embodiment, the secure system management registers  include one or more ACPI range registers  and\/or one or more ACPI rule registers . Each ACPI range register  may be configured to store a value or values that define allowable or preferred values for a specific ACPI or related function. Each ACPI rule register  may be configured to store part or all of a rule for determining if a change to one of the ACPI or related functions should be allowed. Examples of ACPI or related functions include changing a voltage, changing a frequency, turning on or off a cooling fan, and a remote reset of the computer system.","In one embodiment, the access locks  are open at reset (OAR), allowing the BIOS software access to the security hardware . The BIOS software then closes the access locks  prior to calling the boot sector code, shown in block  in . In various embodiments, the access locks  may be opened by software or hardware to allow for access to the security hardware . For example, the access locks  may be opened by a signal from the IC  or the processor  (or A or B from ) or the control logic . The access locks  may be opened in response to an SMI# or in response to the processor  or  entering SMM. Additional information on the access locks  may be obtained from one or more of the methods A\u2013C described below with respect to .","It is noted that in one embodiment, all of the security hardware  (and the SMM initiation register B are inside the RTC battery well . In other embodiments, selected sub-devices of the security hardware  are excluded from the RTC battery well . In one embodiment, only a portion of the scratchpad RAM  is inside the RTC battery well  with the remaining portion outside the RTC battery well . For example, in one embodiment, the mailbox RAM  is outside the RTC battery well .",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIGS. 7A and 7B","FIG. 7A","FIG. 7B"],"b":["355","550","118","305","610","355","118","555","118","555","355","550"]},"BIOS ROM  memory space in the computer system  may include anywhere from 128 kB to 4 MB, divided into 64 kB segments. An additional one or more 4 MB of SMM ROM  memory space may be addressed via a paging mechanism, for example, where the second page of ROM memory space is within separate chips and selected by an additional set of identification select (IDSEL) pins. Each segment of the BIOS ROM  memory space and the SMM ROM  memory space may be lockable, and open at reset. In one embodiment, the access protection mechanism (i.e. the lock) is not implemented in the BIOS ROM  or SMM ROM , but, for example, in the south bridge C in the security hardware C, as previously described with respect to .","In one embodiment, the BIOS ROM  includes 4 MB of memory space. Read access to the BIOS ROM  memory space may be unrestricted at any time. Write locks on the BIOS ROM  memory space may be OAR and cover the memory space from FFFF,FFFFh to FFC0,0000h, in 32-bit address space on the LPC bus .","In one embodiment, the crypto processor  is a specialized processor that includes specialized cryptographic hardware. In another embodiment, the crypto processor  includes a general-purpose processor programmed with cryptographic firmware or software. In still another embodiment, the crypto processor  includes a general-purpose processor modified with specialized cryptographic hardware. Selected methods that may use or include the crypto processor  are described with respect to , with an example of a prior art challenge-response authentication (or verification) method shown in .","Other embodiments are also contemplated. For example, the BIOS ROM  may be coupled to the LPC bus , and the crypto processor  may be coupled between the SMM ROM  and the LPC bus . Also, the crypto processor  may be coupled between the extended BIOS ROM  and the LPC bus .",{"@attributes":{"id":"p-0115","num":"0114"},"figref":["FIG. 7C","FIG. 7D","FIG. 7D"],"b":["605","605","118","609","610","605","305","610","605","605","305","605","608","609","606","607","610"]},{"@attributes":{"id":"p-0116","num":"0115"},"figref":["FIGS. 8A and 8B","FIG. 8A"],"b":["355","550","355","608","610","606"]},"As shown in , the SMM ROM  may be divided into a plurality of SMM ROM blocks \u2013, a stored secret , a plurality of public ROM blocks \u2013, one or more reserved ROM blocks , one or more registers , and a monotonic counter B.","The plurality of SMM ROM blocks \u2013 may include an SMM ROM  block , an SMM ROM  block , and an SMM ROM  block . The plurality of public ROM blocks \u2013 may include a public ROM block   and a public ROM block  . One embodiment of access rights, lock status, and 32-bit address ranges in the LPC bus  space are given here in table form.",{"@attributes":{"id":"p-0119","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["ROM","READ","WRITE","ADDRESS"]},{"entry":["BLOCK","ACCESS","LOCK","RANGE"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SMM ROM 0","SMM","Write","FFBx,1FFFh : FFBx,0000h"]},{"entry":["605","Only","Once"]},{"entry":["SMM ROM 1","SMM","Never","FFBx,3FFFh : FFBx,2000h"]},{"entry":["610","Only","Erase"]},{"entry":["SMM ROM 2","SMM","None","FFBx,5FFFh : FFBx,4000h"]},{"entry":["615","Only"]},{"entry":["SMM Counter","SMM","None","FFBx,7FFFh : FFBx,6000h"]},{"entry":["620","Only"]},{"entry":["Public 0","Unrestricted","Write","FFBx,9FFFh : FFBx,8000h"]},{"entry":["625",{},"Once"]},{"entry":[{},{},"In SMM"]},{"entry":["Public 1","Unrestricted","Never","FFBx,BFFFh : FFBx,A000h"]},{"entry":["630",{},"Erase,"]},{"entry":[{},{},"Write"]},{"entry":[{},{},"in SMM"]},{"entry":["Reserved","N\/A","N\/A","FFBx,DFFFh : FFBx,C000h"]},{"entry":"635"},{"entry":["Registers","N\/A","N\/A","FFBx,FFFFh : FFBx,E000h"]},{"entry":"640"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The \u2018x\u2019 in the address ranges given in the table may denote the strapping pin decode or their inverse. In one embodiment, the ROM blocks \u2013 and \u2013 in the table are each 64 kB in size. In one embodiment, the computer system may support up to 8 MB of extended BIOS ROM  storage, divided into sixteen pages of  kB each. In another embodiment, the memory address range from FFBx,FFFFh down to FFBx,0000h includes the plurality of SMM ROM blocks \u2013, the SMM counter , the plurality of public ROM blocks \u2013, the one or more registers , and the monotonic counter B.","The one or more reserved ROM blocks  may be used for future expansion. The one or more registers  may store additional data, as needed.","In one embodiment, the monotonic counter B is stored flat, such as a chain of 8-bit values in an 8 K-byte ROM. This embodiment provides 8 K bits that counted by noting the number of changed bits (or the most significant bit that is the different). It is noted that 8 K bits stored flat translates into 13 bits binary (i.e. 8\u00d71024=8192=2) The monotonic counter B is initially in the erased state, such as with all bits set to one. Any time the computer system is reset as a result of a power failure and there is an invalid RTC checksum, such as when the RTC battery  is not present, boot software inspects the monotonic counter B and updates it. The boot software may look for the most significant byte including at least one changed bit, such as zero. Initially, byte  (zero) is chosen when the monotonic counter B is in the erased state. Typically, the RTC checksum  is typically calculated by boot code from the BIOS whenever it updates the CMOS RAM A in the RTC battery well . The RTC checksum  is then stored in the RTC RAM B, also in the RTC battery well , which also holds date and time data. Typically, the RTC RAM B may be 256 bytes in size.","Flat encoding of the monotonic counter B is preferred to other methods of encoding primarily when the monotonic counter B is stored in flash memory. Other methods of encoding may be preferred when other memory types are used to store the values for the monotonic counter B. One consideration in choosing the method of encoding is which method of encoding provides for a maximum use.","Continuing with the above embodiment for updating the monotonic counter B, the next most significant bit, in the most significant byte including at least one zero, is set to zero. For example, if byte five of the monotonic counter B returns 0000,0000b and byte six of the monotonic counter B returns 1111,1000b, then the boot software will write byte six of the monotonic counter B as 1111,0000b. If byte five of the monotonic counter B returns 0000,0000b and byte six of the monotonic counter B returns 1111,1111b, then the boot software would write byte six of the monotonic counter B as 1111,1110b.","Reading the monotonic counter B as the most significant bits and the monotonic counter A shown in  as the least significant bits, a 45-bit monotonic counter  may be read to obtain an always-increasing 48-bit value, when monotonic counter B provides 13 bits and monotonic counter A provides 32 bits. In this embodiment, the monotonic counter A provides bytes zero, one, two, and three, while the monotonic counter B provides bytes four and five of the six byte value. Numbers of bits other than 45 are likewise contemplated.","Two special conditions are contemplated. If the monotonic counter A is read when storing the default or erased value, such as all ones, then the monotonic counter B in the SMM ROM  is updated. If the monotonic counter B in the SMM ROM  is updated a predetermined number of times, such as 65,536 times, then the boot software must erase the monotonic counter B in the SMM ROM  and start over with the default value, e.g. all ones.","By way of example and not limitation, consider the monotonic counter A and the monotonic counter B each storing one byte of eight bits. For this example, the monotonic counter A, in the south bridge , returns with \u201800001111\u2019, while the monotonic counter B, in the SMM ROM , returns \u201811110000\u2019. The value from the flat encoded monotonic counter B is converted to standard binary as \u201800000100b\u2019. The 16-bit monotonic value becomes \u2018000001000000111b\u2019 when the binary value from monotonic counter B is combined with the binary value from monotonic counter A.","A flat encoding may advantageously allow for increased reliability if the monotonic counter B is stored in flash memory. Updating the monotonic counter B has no cost, while erasing the flash memory does have a cost in long-term reliability. The monotonic counter B should be stored in non-volatile memory. Other memory types contemplated include encapsulated RAM with an included power supply.","One use of the monotonic counters A and B is as a source for a nonce. Each nonce must be different. Differences may be predictable or unpredictable. Nonces may be used to help prevent replay attacks. When a message is encrypted, changing even one bit changes the encrypted message. Any strong encryption method distributes even a one-bit change extensively. A nonce may be used in a challenge-response method, such as described below.","Providing the monotonic counters A and B as two counters, instead of one, may advantageously allow for larger values while minimizing the number of bits stored in the non-volatile memory. Access to the monotonic counter A is typically faster than access to the monotonic counters B, so monotonic counter A may be used independently when a fast access time is important, so long as the length of the monotonic value stored in the monotonic counter A is adequate for the desired purpose.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIGS. 9A and 9B","FIGS. 9A and 9B"],"b":["800","800","805","810","106","330","807","807","810","815","330","401","440","810","805","330","805","808","330","110","810","805"]},"In the embodiment of , the computer system A signals that the processor  is in SMM using standard processor signals (e.g. SMIACT# to the north bridge ) and\/or bus cycles on the local bus  and PCI bus . In the embodiment of , the computer system B signals that the processor  is in SMM using standard processor signals (e.g. SMIACT#) to both the north bridge  and the south bridge . An exit SMM signal  is also shown between the SMM timing controller  and the SMM exit controller .","While the processor  is in SMM, the processor  knows that it is in SMM and asserts SMIACT# to either the north bridge  and\/or the south bridge . The processor  may, for example, set and read one or more hardware flags or signals associated with SMM. These hardware flags or signals may be in the processor , or in the north bridge . In one embodiment, the north bridge  receives the SMIACT# signal and in response to receiving the SMIACT# signal, signals the south bridge  that the processor is in SMM by sending a special bus cycle or an encoded bus cycle over the PCI bus . In another embodiment, the SMIACT# signal is received directly by the south bridge .","In one embodiment, an SMM-specific hardware flag at an internal memory interface in the processor  is set when the processor  enters SMM. Any address call by the processor  is routed through the internal memory interface. The internal memory interface determines where the address call should be routed. If the SMM-specific hardware flag is set, then memory calls to SMM memory addresses are recognized as valid SMM memory calls. If the SMM-specific hardware flag is not set, then memory calls to SMM memory addresses are not recognized as valid SMM memory calls.","It is noted that other buses using other bus protocols may couple the processor , the north bridge , and the south bridge . These buses may use bus protocols that include a bus cycle that indicates that the computer system  is in SMM. It is also noted that processor signals other than SMIACT# may be directly received by the south bridge , such as the SMI# signal or another dedicated signal.","The SMM exit controller  in the processor  is configured to receive a request to the processor  to exit SMM. In one embodiment, the SMM exit controller  is operable to exit SMM prior to completing the task for which the SMI# was originally asserted that led to the processor  being in SMM. Upon receiving the request to exit SMM, the SMM exit controller  is configured to read the contents of the one or more SMM MSRs  to obtain a jump location for a clean-up routine, preferably stored in ROM, in SMM memory space. The SMM MSRs  may also store one or more bits to indicate that an SMM routine has been interrupted and\/or a re-entry point (e.g. an address in SMM memory space) in the interrupted SMM routine. The SMM exit controller  may be configured to store the one or more bits indicating that the SMM routine has been interrupted and the re-entry point.",{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 10A","b":["805","905","905","905","905","407","910"]},"The method next checks to determine if the kick-out timer  has expired in decision block . If the kick-out timer  has not expired, then the method continues checking to determine if the kick-out timer  has expired in decision block . If the kick-out timer  has expired in decision block , then the method transmits a request to the processor to exit SMM without completing the SMI request that invoked SMM, in block . The processor saves the state of the SMM session without finishing the SMM session and exits SMM, in block .","The request to the processor to exit SMM, in block , may include submitting an RSM (Resume from System Management mode) instruction, or other control signal delivered over the system bus, to the processor. Upon executing the RSM instruction, or receiving the control signal through the interface logic to the system bus, the processor exits SMM and the processor's previous state is restored from system management memory. The processor then resumes any application that was interrupted by SMM. In another embodiment, the request to the processor to exit SMM includes another device in the computer system, such as the south bridge, asserting a control signal, such as the exit SMM signal, to the processor to exit SMM.","The processor saving the SMM state, in block , may include setting a bit to indicate that the SMM session was not finished. If the SMM code has multiple entry points, then the processor may also save an indication of which entry point should be used upon re-entering SMM, to finish the unfinished SMM session. These indications may be saved in any of a number of places, such as the one or more SMM MSRs  or the scratchpad RAM . It is also contemplated that another specific storage location could be designed into or associated with the processor , the north bridge , the interrupt controller , and\/or the south bridge .",{"@attributes":{"id":"p-0141","num":"0140"},"figref":["FIG. 10B","FIG. 10B","FIG. 1A","FIG. 10B"],"b":["408","1010","408","1015","408","408","1015"]},"If the restart timer  has expired in decision block , then the method asserts an SMI request to the processor, in block . The processor enters SMM and looks for an entry indicating that a previous SMM session has been ended prior to fulfilling the previous SMM request, in block . The entry may be, as examples, a flag bit that has been set, or a stored jump location in a default location. The method checks for an unfinished SMM session in decision block . If there is no unfinished SMM session in decision block , then the method starts a new SMM session, in block . If there is unfinished SMM session in decision block , then the method reads the saved status information about the previous SMM session, in block , and continues the previous SMM session, in block . It is noted that the method may make use of the saved status information, from block , when continuing the previous SMM session, in block .",{"@attributes":{"id":"p-0143","num":"0142"},"figref":["FIGS. 11A and 11B","FIG. 11A"],"b":["1100","1100","435","550","1100","1105","1110","1100","1110","1100","435","550","1115","1120","435","550"]},"In decision block A, if the value stored in the monotonic counter B in SMM ROM  is the default value, then the method A updates the value stored in the monotonic counter B to an incremental value, in block A, preferably the smallest possible incremental value. In decision block A, if the value stored in the monotonic counter B in the SMM ROM  is not equal to the default value, then the method A identifies the value stored in monotonic counter B in the SMM ROM , in block A. After identifying the value stored, in block A, the method A updates the value stored in the monotonic counter B in the SMM ROM  by the incremental value, in block A.","The method B, shown in , includes checking the RTC checksum, in block . In decision block , if the RTC checksum is valid, then the method A exits. In decision block , if the RTC checksum is not valid, then the method  inspects the monotonic counter B in the SMM ROM  in block . In decision block B, the method checks if the values stored in the monotonic counter B in the SMM ROM  are all ones.","In decision block B, if all values in the monotonic counter B in SMM ROM  are equal to one (i.e. the reset value), then the method B updates the first byte so that a zero is stored as the least significant bit in block B. In decision block B, if all values in the monotonic counter B in the SMM ROM  are not equal to one, then the method B identifies the highest numbered byte with a zero in a most significant bit location, in block B, or the first byte if no byte has a zero in the most significant bit position. After identifying a highest numbered byte with a zero in its most significant bit location or the first byte, in block B, the method B updates the next highest numbered byte or the first byte with a zero in its next most significant bit location without a zero, in block B.",{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIGS. 12A and 12B","b":["1200","1200","435","330","1200","435","330","1205","435","330","1205","1200","435","330","1205","1200","435","550","1210","1200","435","550","1215"]},"If in decision block A, the value stored in the monotonic counter B in the SMM ROM  is the default value, then the method A updates the value stored in the monotonic counter B in the SMM ROM  with an incremental value, in block A, preferably the smallest possible incremental value. If, in decision block A, the value stored in the monotonic counter B in SMM ROM  is not the default value, then the method A identifies the value stored in the monotonic counter B in the SMM ROM , in block A. After the method A identifies value stored, in block , the method A updates the value stored in the monotonic counter B in the SMM ROM  by the incremental value, in block A.","The method B, shown in , checks to see if all values in the monotonic counter A in the south bridge  are equal to one (i.e. the reset value), in decision block B. If all values in the monotonic counter A in the south bridge  are not equal to one, in decision block B, then the method B exits. If all values in the monotonic counter A in the south bridge  are equal to one, in decision block B, then the method B inspects the monotonic counter B in the SMM ROM , in decision block . The method B checks to see if all values in the monotonic counter B in the SMM ROM  are equal to one, in decision block B.","If in decision block B, all values in the monotonic counter B in the SMM ROM  are equal to one, then the method B updates the first byte with a zero in its least significant bit, in block B. If, in decision block B, all values in the monotonic counter B in SMM ROM  are not equal to one, then the method B identifies the highest numbered byte with a zero in its most significant bit location, in block B, or the first byte if no byte has a zero in the most significant byte location. After the method B identifies the highest numbered byte with a zero in its most significant bit location or the first byte, in block B, the method B upgrades the next highest numbered byte, or the first byte, with a zero in the next most significant bit location, in block B.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":["FIG. 13A","FIG. 13B"],"b":["1300","1300","435","1300","435","1305","1300","435","330","1310","1300","435","330","1315","1300","435","330","1320"]},"In decision block , if the rollover value has been reached, then the method A updates the value in the monotonic counter B in the SMM ROM  in block . If the rollover value has not reached in decision block , or if the method A has updated the value in the monotonic counter A in the SMM ROM  in block , then the method A provides the updated value from the monotonic counter A in the south bridge  in block .","The method B requests the value from the monotonic counter B in the SMM ROM , in block . The method B receives the value from the monotonic counter B in the SMM ROM  in block . The value from the monotonic counter A in the south bridge  is combined with the value from the monotonic counter B in the SMM ROM  in block . The method B provides the combined value in response to the request for the value from the monotonic counter in block .","As noted above, the monotonic counter A in the south bridge  may include a 32-bit value, while the monotonic counter B in the SMM ROM  may include a 15-bit value. The returned value from the monotonic counter , provided in response to the request for the value of the monotonic counter, would then include a 45-bit value.","It is noted that the 32-bit value from the monotonic counter A in the south bridge  may be provided by software instead of being read from the south bridge . In the software embodiment, the software itself provides a 32-bit, always increasing, i.e. monotonic value, which is combined with the value from the monotonic counter B in the SMM ROM  to provide a unique 45-bit value. It is also noted that the size of the monotonic counters A and B in the south bridge  and in the SMM ROM , respectively, may be designed with other bit sizes, as desired.","Although the methods A, B, A, and B show updates to the monotonic counters A and B as being in-line with monotonic value requests, it is also contemplated that software or hardware may be used to update the monotonic counters A and B separately from the monotonic value requests. Such updates could occur, for example, after the monotonic value request that leads to the monotonic value reaching the rollover value.",{"@attributes":{"id":"p-0157","num":"0156"},"figref":["FIGS. 14A and 14B","FIG. 6","FIG. 14A","FIG. 14B"],"b":["805","805","455","455","1410","455","1410","805","1405","1405","1406","455","805","1405","1405","1406","455"]},"Common to both , the performance registers A through N each store a value indicative of a different performance metric. Exemplary performance metrics may include first-level-cache hit rate, second-level-cache hit rate, third-level-cache hit rate, branch target cache, and\/or other model specific registers (MSRs), such as those used for measuring performance. In one embodiment, the performance registers include any register that updates the least significant bit at a rate asynchronous to the local and\/or system clock.","In one embodiment, each of the plurality of bit lines  couple between the least significant bit entry in one of the performance registers  and an entry in an entropy register  in the RNG . Each entry of the entropy register  may couple to a different one of the performance registers . In another embodiment, each entry of the entropy register  may couple to one or more entries in one or more of the performance registers  or other sources of single bits within the processor .",{"@attributes":{"id":"p-0160","num":"0159"},"figref":"FIG. 14A","b":["455","1415","805","1415","1410","1410","1415","1410","805"]},{"@attributes":{"id":"p-0161","num":"0160"},"figref":["FIG. 14B","FIG. 14B"],"b":["455","1410","1410","805","1410","1406","1410","805"]},"It is noted that the RNG A and the RNG B may be included in other devices in the computer system other than the processor . Contemplated locations for the RNG A and the RNG B include the north bridge  and the south bridge . It is also noted that the performance registers  are not normally accessible to a user of the processor  once the processor  is in a computer system, as the performance registers  are primarily used for testing during the design and engineering stages of the manufacturing process. This may advantageously allow for better randomness with less likelihood of tampering with the random number obtained from the entropy register .",{"@attributes":{"id":"p-0163","num":"0162"},"figref":"FIG. 15","b":["455","455","0","7","1514","1514","1515","1520","1525","1530","1535","1511","1545","1540"]},"The CLK signal  is received by the RNG C by the LFSR , the sample and hold circuit , the CRC , and the counter . Either a system reset signal (SYSTEM_RESET)  or a read strobe (READ STROBE) are received by the counter  at the reset (RST) input port. The LFSR  receives output signals of each of the ring oscillators (RO\u2013RO) A\u2013H at one input port (RO[7:0]) and the output signals of the sample and hold circuit at another input (IN) terminal. A plurality of values are provided by the LFSR  at the output (OUT) terminal. As shown, one of the plurality of values delivered by the LFSR  is XORed with the CLK signal  before all of the plurality of values provided by the LFSR  are delivered to the D\/A . The analog output signal of the D\/A  is provided as a control signal to the VCO .","The output of the VCO  is provided to the input (IN) terminal of the sample and hold circuit  and clocked on the CLK signal . The output (OUT) signal of the sample and hold circuit  is provided to the input terminal of the CRC  and clocked on the CLK signal , as well as to the IN terminal of the LFSR , as described above. A plurality of output values is provided to the MUX  through the CRC output port (OUT). The MUX  selects between the output values of the CRC  and ground (GND). The MUX  provides the random number over output lines (RN[31:0]).","A request for a random number over the read strobe line (READ_STROBE) results in the counter  counting a prerequisite number of clock cycles prior to asserting a signal (FULL) to the selection input (SEL) of the MUX . The FULL signal may also be read by the requestor of the random number as a signal (DONE) that the requested random number is available over the RN[31:0] lines. The system reset signal  also asserts a signal on the reset input terminal of the counter . A self test circuit  may be present to provide a known value to the MUX  to be read on the RN[31:0] lines in place of a random number generated by the RNG C.","The RNG C is preferably configured to meet all appropriate requirements for an RNG in Federal Information Processing Standards Publication FIPS-140-1, entitled SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES, issued on Jan. 11, 1994, by the U.S. National Institute of Standards and Technology (NIST), which is hereby incorporated by reference. The Federal Information Processing Standards Publication Series of the NIST is the official series of publications relating to standards and guidelines adopted and promulgated under the provisions of Section 111(d) of the Federal Property and Administrative Services Act of 1949 as amended by the Computer Security Act of 1987, Public Law \u2013.","It is noted that for increased randomness, the ring oscillators A\u2013H may be operated at frequencies and phases that do not correlate between or among the plurality of ring oscillators . It is also noted that the RNG C may be included in locations other than the south bridge . Contemplated locations include the processor  and the north bridge .",{"@attributes":{"id":"p-0169","num":"0168"},"figref":["FIGS. 16A\u201316G","FIG. 16A","FIG. 16B","FIG. 16C","FIG. 16D","FIG. 16E","FIG. 16F","FIG. 16G"],"b":["1600","1600","370","1600","370","1600","370","1600","370","1600","370","100","1600","460","1600","370","100","1600","370","100"]},"Referring now to , the method A includes the processor executing the BIOS code instructions from SMM space in the RAM memory, in block . The BIOS code, executed by the processor, performs a power-on self test (POST), in block . The method A includes accessing the security hardware , in block . The accesses to the computer hardware  may initiate an unlocking of the security hardware , if the security hardware  is not open-at-reset. The accesses to the security hardware  may be by the BIOS code or other device or subsystem in the computer system , or from outside the computer system , if allowed. The method A may optionally include entering a BIOS management mode, in block . The BIOS management mode could allow for, for example, remote booting instructions, remote or secure permission to continue the boot sequence, other remote operations or remote hardware accesses or set-ups, or choosing between or among boot choices, such as hardware configurations and\/or operating systems or other software choices.","The BIOS code next looks for additional BIOS code, such as from a video controller, IDE controller, SCSI controller, etc. and displays a start-up information screen, in block . As examples, the video controller BIOS is often found at C000h, while the IDE controller BIOS code is often found at C800h. The BIOS code may perform additional system tests, such as a RAM memory count-up test, and a system inventory, including identifying COM (serial) and LPT (parallel) ports, in block . The BIOS code also identifies plug-and-play devices and other similar devices and then displays a summary screen of devices identified, in block .","The method includes closing the access locks to the security hardware, in block . The BIOS code or another device or agent in the computer system  may close the access locks. The BIOS code identifies the boot location, and the corresponding boot sector, in block . The boot location may be on a floppy drive, a hard drive, a CDROM, a remote location, etc. The BIOS code next calls the boot sector code at the boot location to boot the computer system, such as with an operating system, in block .","Referring now to , the method B includes opening the access locks to the security hardware, in block . The processor executes the BIOS code instructions from SMM space in the RAM memory, in block . The computer system accesses the security hardware  while in SMM, while booting, in block . The method B may optionally include entering a BIOS management mode, in block .","The BIOS code next looks for additional BIOS code, such as from a video controller, IDE controller, SCSI controller, etc. and displays a start-up information screen, in block . As examples, the video controller BIOS is often found at C000h, while the IDE controller BIOS code is often found at C800h. The BIOS code also identifies plug-and-play devices and other similar devices and then displays a summary screen of devices identified, in block .","The BIOS code closes the access locks to the security hardware, in block . The BIOS code identifies the boot location, and the corresponding boot sector, in block . The boot location may be on a floppy drive, a hard drive, a CDROM, a remote location, etc. The BIOS code next calls the boot sector code at the boot location to boot the computer system, such as with an operating system, in block .","Turning now to , the method C includes deciding whether to set the OAR-lock, in decision block . The OAR-lock in decision block  may correspond to the first indicator described above with respect to . The OAR-lock in decision block  may also correspond to setting the OAR lock override bit  described below with respect to . If the decision is made to set the OAR-lock, then, according to one embodiment, all access to the security hardware  is blocked, in block . If the decision is made not to set the OAR-lock, then the method C moves to decision . In decision block , the method C decides whether to set the OAR-lock change bit. The OAR-lock change bit in decision block  may correspond to the second indicator described above with respect to . The OAR-lock change bit in decision block  may also correspond to setting the change OAR lock override bit  described below with respect to . If the decision is made to set the OAR-lock change bit, in decision block , then, according to one embodiment, the OAR-lock cannot be changed, thereafter, as changes to the OAR-lock are themselves locked out, in block .","Turning now to , the method D includes a processor, such as processors , , etc., operating in a mode that is not SMM, in block . In block , code being processed by the processor attempts to access any part of the security hardware , or other hardware whose access may require a check of an access lock similar to the access locks . The method checks, at decision block , to see if the security hardware  is available. If the security hardware  is not available, at decision block , then the method D exits or returns. If the security hardware  is available, at decision block , then the method D accesses the security hardware , at block . The method, optionally, closes the access locks to the security hardware, if necessary, at block .","Turning now to , the method E includes an embodiment of decision block  from . The method E includes checking if access to all security hardware is locked out, i.e. forbidden, at decision block . If access to all security hardware is locked out, then at decision block  the method E moves to decision block . If access to all security hardware is not locked out, then the method E moves to decision block . In decision block , the method E checks if the requested security hardware is locked out (e.g. separately using one or more access locks).","If the requested security hardware is locked out, then the method E moves to decision block . If the requested security hardware is not locked out, then the method E moves directly to block . In decision block , the method E checks if the access lock for the requested security hardware can be changed, e.g., unlocked. If the access lock for the requested security hardware cannot be changed, then in decision block  the method E aborts the access to the security hardware. If the access lock for the requested security hardware can be changed, then in decision block  the method E requests authorization, such as from a user, to change the access lock for the requested security hardware, in decision block . If the authorization to change the access lock for the requested security hardware is not given, then the method E aborts the access to the security hardware. If the authorization to change the access lock for the requested security hardware is not given, then the method E moves to block  and changes the lock to allow access to the requested security hardware.","It is noted that any authorization method described herein may be used in decision block . Any other authorization methods known in the art that have equivalent or better security properties in the presence of an observer may also be used.","Turning now to , the method F includes the processor loading code instructions into SMM space in the RAM memory, in block . For example, loading code instructions into SMM space may occur in response to an SMI#. The access locks to the security hardware are opened in block . The opening of the access locks may be through the SMM code instructions or through a hardware mechanism, or both.","The processor processes the code instructions from SMM space in the RAM memory, in block . It is noted that the SMM timing controller , described above, may interrupt the processing of the code instructions. The method F includes accessing the security hardware , in block . As the computer system is in SMM and the access locks have been opened, in block , the security hardware is available to most or all of the subsystems of the computer system  (or ), as desired.","The method F includes closing the access locks to the security hardware , in block . The processor reloads the previous state and continues operating, in block . It is noted that the processing of the SMM code instructions, in block , may continue while the actions described in block  occurs. Preferably, the actions described in block  occur after the processing of the SMM code instructions, in block , has ceased. The processing may have finished or have been interrupted.","Turning now to , the method G includes the processor loading code instructions into SMM space in the RAM memory, in block . For example, the loading of code instructions into SMM space may occur in response to an SMI#. The method G next checks if the security hardware is available, in decision block . If the security hardware is not available, then in decision block  the method G aborts the access to the security hardware. If the security hardware is available, then the method G continues with block .","The processor executes the code instructions from SMM space in the RAM memory, in block . It is noted that the SMM timing controller , described above, may interrupt the processing of the code instructions. The method F includes accessing the security hardware , in block . As the computer system is in SMM and the access locks are open, as determined in decision block , the security hardware is available to most or all of the subsystems of the computer system  (or ), as desired.","The method G includes closing the access locks to the security hardware , in block . The processor reloads the previous state and continues operating, in block . It is noted that the executing of the SMM code instructions, in block , may continue while the actions described in block  occurs. Preferably, the actions described in block  occur after the processing of the SMM code instructions, in block , has ceased. The processing may have finished or have been interrupted.","It is noted that other processes of locking and unlocking the security hardware , other than the access locks, may be used. The methods A\u2013G are intended to extend to those other processes.","For the purposes of this disclosure, the computer system is considered to have two operating modes, normal and SMM. There are boot phases that are not in SMM, but they are, by definition, as trusted as SMM, and therefore considered equivalent to SMM herein. The boot code configures and arranges how SMM will work. SMM derives its trustworthiness from the trustworthiness of the boot code. It is contemplated that the standard boot sequence could be varied. Variations include a transition to a setup environment where the user may have the opportunity to input parameters. The input parameters may, for example, modify the BIOS code. Most setup environments return to reset before loading the operating system and operating in normal mode. This is a form of maintenance mode that is an alternative to loading the operating system and is not part of the normal mode. As contemplated, the access locks would not be set in this mode. It would be part of the boot process and as trusted as SMM, although security measures could be used if remote accesses are possible inside the setup environment.",{"@attributes":{"id":"p-0189","num":"0188"},"figref":["FIGS. 17A","FIG. 6","FIG. 17D","FIG. 6","FIG. 17A","FIG. 17B","FIG. 17C"],"b":["17","17","460","460","460","460","455","460","460","1705","1705","460","460","370","1705","460","1715","1715","370"]},"In , the OAR override  includes an OAR-lock override register  that stores at least one OAR-lock override bit, and a change OAR-lock override register  that stores at least one change OAR-lock override bit. According to one embodiment of the present invention, if the OAR-lock override bit is not set, then access to the security hardware  is determined by the settings of the access locks . If the OAR-lock override bit is set, then the access locks  are ignored in favor of the security hardware  being either always available or never available, based on the implementation. Preferably, the security hardware is never available when the OAR-lock override bit is set. The setting of the OAR-lock override bit may be changed in SMM (or with authorization) unless the change OAR-lock override bit is set. Preferably, the change OAR-lock override bit is OAR, similar to one embodiment of the access locks , and may be set, in various embodiments, with the access locks  at boot time, such as in block .",{"@attributes":{"id":"p-0191","num":"0190"},"figref":"FIG. 18A","b":["1800","1800","1805","1810","1895","1800","1805","1895"]},{"@attributes":{"id":"p-0192","num":"0191"},"figref":"FIG. 18B","b":["1800","1800","1800","1805","1810","1815","1820","1895"]},"Also in contrast to the prior art SMM program A,  illustrates an embodiment of operation of a computer system running the interruptible and re-enterable SMM program B, according to one aspect of the present invention. The operations C of the computer system includes a start . The operations also include receiving a request to enter SMM, at  and saving the system state at . The method checks, at , for a saved SMM state, as could be found from exiting the SMM program B at . If no saved SMM state is found at , then load the requested default SMM state at . If a saved SMM state is found at , then load the saved SMM state, at .","The method C executes the loaded SMM state, at , either the default state from  or the saved state at . If the SMM processing is finished, at , then the method moves to  and exits SMM. If the SMM processing is not finished, then the method continues execution of the SMM state, if no exit request is received at . If the exit request is received at , then the method saves the current SMM state at  and exits SMM at . The saved system state is reloaded at , and the method ends at the stop .","While only one entry\/exit point  is shown in the embodiment of , other embodiments may include two or more entry\/exit points  in an SMM program B or the operations of the method C shown in . In these embodiments, each entry\/exit point  would have one or more instructions for execution in SMM, similar to blocks B and , both before and after the entry\/exit point .","For example, in one embodiment, block B includes one instruction for execution in SMM, followed by an entry\/exit point A. Entry\/exit point A is followed by another single instruction for execution in SMM, in block A. Block A is followed by another entry\/exit point B. Entry\/exit point B is followed by another single instruction for execution in SMM, in block B. Block B is followed by the stop . While a single instruction in blocks B, A, and B may be small, the concept of regularly spaced Entry\/exit points  is illustrated. In other embodiments, two, three or more instructions for execution in SMM may be substituted for the single instructions. In still other embodiments, there may be a variable number of instructions for execution in SMM in blocks B, and . The number of instructions may depend on the execution times for each set of instructions, so that SMM may be interruptible every so often during execution.","It is noted that forced exits from SMM, as are taught herein in one aspect of the present invention, for example, with respect to , and re-entry into SMM, as is also taught herein in another aspect of the present invention, for example, with respect to , are but two examples of how interruptible, re-enterable SMM code could be implemented or used. Those of skill in the art of computer programming with full appreciation of this disclosure will appreciate that many programming techniques used with non-SMM code that used interruptible, re-enterable code flow will now be available in SMM code.",{"@attributes":{"id":"p-0198","num":"0197"},"figref":"FIGS. 19A","b":["19","19","3000","3000","3000","355","805","330","805","330","3010","3005","305","355","805","330","3010","3005","805","355","330"]},"In , embodiment A shows the processor  coupled to one part (A) of the boot switch . Part A of the boot switch  is open, as would occur after booting. The control logic  is coupled to the boot switch  to control the operations of the boot switch . The south bridge  is coupled to Part B of the boot switch . Part B of the boot switch  is closed, again as would occur after booting. The south bridge  is shown coupled to the bus to which the BIOS is coupled, shown as being through the crypto-processor . Other hardware A and B are also shown coupled to the bus, which may be an LPC bus , or another bus.","In , embodiment B shows the processor  coupled to one part (A) of the boot switch  through an instance of LPC bus interface logic (BIL) D. Part A of the boot switch  is closed, as would occur during booting. The processor  is coupled to a north bridge  through a local bus . The north bridge  includes the control logic , coupled to the boot switch  to control the operations of the boot switch . The north bridge  is further coupled to the south bridge  through a PCI bus . The south bridge  is coupled to Part B of the boot switch  through another instance of LPC BIL D. Part B of the boot switch  is open, again as would occur during booting. The south bridge  is shown coupled to an LPC bus to which the BIOS  is coupled, shown as being through the crypto-processor . Other hardware A and B are not shown in this embodiment, but may be present. The connection between Part A of the boot switch  and Part B of the boot switch  is shown as an LPC bus segment .","As illustrated, during the booting process, the processor  is operable to use an LPC bus protocol to access the BIOS  directly, without going through the north bridge  or the south bridge . By providing a more direct connection between the processor  and the BIOS ROM , the computer system B may advantageously boot or reboot faster than using more usual methods of accessing the BIOS ROM . After booting, accesses to the BIOS ROM  are through the south bridge  using the LPC bus .","In , embodiment C shows the processor  coupled to one part (A) of the boot switch  through the local bus . Part A of the boot switch  is closed, as would occur during booting. The processor  is also coupled to the north bridge  through the local bus . The processor  includes the control logic , coupled to the boot switch  to control the operations of the boot switch . The north bridge  is further coupled to the south bridge  through a PCI bus . The south bridge  is coupled to the LPC bus  an instance of LPC BIL D. Part B of the boot switch  is coupled to the LPC bus . Part B of the boot switch  is open, again as would occur during booting. The BIOS ROM  is coupled through the crypto-processor  to the local bus  when Part A of the boot switch  is closed and to the LPC bus  when Part B of the boot switch  is closed. The crypto-processor  may include bus interface logic for the local bus  and the LPC bus , or the crypto-processor  may be configured to translate the bus protocols as necessary to pass bus cycles to the BIOS ROM . Other hardware A and B are not shown in this embodiment, but may be present.","As illustrated, during the booting process, the processor  is operable to use the local bus protocol to access the BIOS  directly, without going through the north bridge  or the south bridge . By providing a more direct connection between the processor  and the BIOS ROM , the computer system C may advantageously boot or reboot faster than using more usual methods of accessing the BIOS ROM . After booting, accesses to the BIOS ROM  are through the south bridge  using the LPC bus .","It is noted that the control logic  may be signaled to or configured to operate the boot switch  at times other than booting to allow for faster access to the BIOS ROM , the crypto-processor  (when present), or, for example, other hardware  on the LPC bus.","In various embodiments of the present invention, the security of SMM is assumed. It is noted that one or more so-called \u201cbackdoors\u201d may exist that could be exploited to compromise the security of SMM. The issues contemplated include misuse of the hardware debug test (HDT) mode of the processor  as well as the ability of the processor  to load and replace microcode. Illustrated in  are various embodiments A, B, C, D of the processor , each of which includes various security protections against one or more backdoor attacks.","In , the processor A includes HDT control logic A, HDT reset logic A, and one or more registers, including an HDT enable register  and non-volatile random access memory (NVRAM) . As shown, the HDT control logic A is coupled to receive a plurality of input signals through a plurality of HDT pins . The HDT control logic A is further coupled to the HDT enable register . The HDT reset logic A is coupled to receive a RESET signal over a line  and to access (i.e. read and write) the HDT enable register  and the NVRAM .","In , the processor B of  includes HDT control logic B, HDT reset logic B, and two registers, including the HDT enable register  and an HDT enable lock register . As shown, the HDT control logic B is coupled to receive a plurality of input signals through the plurality of HDT pins . The HDT control logic B is further coupled to the HDT enable register  and the HDT enable lock register . The HDT reset logic B is coupled to receive the RESET signal over the line  and a signal, such as over a line , through a pull-up (or pull-down) resistor .","In , the processor C includes microcode control logic , microcode loader enable reset logic , and one or more registers, including a microcode loader enable register . As shown, the microcode control logic  is coupled to receive a plurality of input signals through a plurality of microcode input pins . The microcode control logic  is further coupled to the microcode loader enable register . The microcode loader enable reset logic  is coupled to receive the RESET signal and to access the microcode loader enable register .","In , the processor D includes HDT control logic  integrated with the microcode control logic , the HDT reset logic , and the MLE reset logic  to form control\/reset logic . The HDT enable register  and the microcode loader enable register  are integrated into a multibit lock register . A plurality of inputs  are shown to the control\/reset logic . The plurality of inputs  may include the HDT inputs , the microcode inputs , and\/or the reset signaling means. Other embodiments (not shown) integrate only the HDT control logic  and the microcode control logic , or just the HDT reset logic  and the MLE reset logic .","According to various embodiments of the present invention, the registers , , and , as well as the NVRAM  include storage space for one or more bits. In one embodiment, each register is configured to store a single bit. It is noted that the enable registers  and  may also be integrated into a single lock register, and the HDT enable lock register  may be used as a microcode enable lock register. It is contemplated that the registers , , , and\/or  could be included in the SMM MSRs .","In various embodiments, the HDT enable register  is configured to store one or more HDT enable bits signifying whether HDT mode is enabled or disabled. The HDT reset logic  is configured to set the one or more HDT enable bits to a default state upon a reset of the processor .","Multiple embodiments for controlling the HDT modes are contemplated, such as those illustrated in . In one embodiment, the HDT mode is enabled as the default on non-production processors  used for engineering and testing. The HDT mode may be disabled as the default in standard production processors . In another embodiment, illustrated in , the default state may be stored in and read from the NVRAM . In this embodiment, the default state may be changeable, but in the illustrated embodiment, the default state is set to disabled. In still another embodiment, illustrated in , the default state is set using a strapping option. The default value is provided to the HDT reset logic B through the pull-up (or pull-down) resistor .","Multiple embodiments for controlling the microcode loader modes are also contemplated, such as those illustrated in . In one embodiment, not illustrated, the microcode update mode is enabled as the default on non-production processors  used for engineering and testing. The microcode update mode may be disabled as the default in standard production processors . In another embodiment, similar to that illustrated in , the default state may be stored in and read from the NVRAM . In this embodiment, the default state may be changeable, but in the illustrated embodiment the default state is set to disabled. In still another embodiment, illustrated in , the default state is using a strapping option. The default value is provided to the MLE reset logic  through the pull-up (or pull-down) resistor .","Turning now to , a method  for initiating the HDT mode is shown. In response to receiving a request to enter the HDT mode (step ), the HDT control logic  checks the status of the one or more HDT enable bits to see if the HDT mode is enabled or disabled (step ). If the HDT mode is enabled (step ), then the HDT control logic  initiates the HDT mode (step ). If the HDT mode is disabled (step ), then the HDT control logic  will not initiate the HDT mode.","Turning now to , a method  for changing the HDT mode enable status, which includes an HDT mode lock, is shown. In response to receiving a request to enter the HDT mode (step ), the HDT control logic  checks the status of the one or more HDT enable lock bits to determine if the HDT lock mode is locked or unlocked (step ). If the HDT lock mode is unlocked (step ), then the HDT control logic  initiates HDT mode (step ). If the HDT lock mode is locked (step ), then the HDT control logic  requests authorization to change the HDT lock mode status (step ). If the change is authorized (step ), then the HDT control logic  changes the HDT mode lock bit to unlocked (step ). If the change is not authorized (step ), then the HDT control logic  does not change the HDT mode lock bit.","In various embodiments, the HDT enable status may be changed by setting or resetting the one or more HDT enable status bits. For example, the HDT mode may be disabled, but inside SMM, a predetermined input to the HDT control logic  may signal the HDT control logic  to change the HDT mode status to enabled. In the embodiment of , for example, once signaled, the HDT control logic  would change the status of the HDT enable bit from disabled to enabled.","Referring back to the embodiment of , for example, in response to receiving a request to change the HDT mode status, the HDT control logic  checks the status of the one or more HDT enable lock bits to see if the HDT lock mode is enabled or disabled. If the HDT lock mode is disabled, then the HDT control logic  may change the HDT mode status. If the HDT lock mode is enabled, then the HDT control logic  will not change the HDT mode status.","It is noted that the method  may alternatively terminate if the microcode update lock status is locked (step ), instead of requesting authorization to change the microcode update lock status (step ). The method  may also include receiving a request to change the microcode update lock status (not shown) prior to the method  requesting authorization (step ).","Turning now to , a method  for initiating the microcode loader is shown. In response to receiving a request to initiate the microcode update mode (step ), the microcode control logic  checks the status of the one or more microcode enable bits to see if microcode update mode is enabled or disabled (step ). If the microcode update mode is enabled (step ), then the microcode control logic  initiates the microcode update mode (step ). If the microcode update mode is disabled (step ), then the microcode control logic  will not initiate the microcode update mode.","Turning now to , a method  for changing the microcode update mode enable status, which includes a microcode mode lock, is shown. In response to receiving a request to enter the microcode mode (step ), the microcode control logic  checks the status of the one or more microcode enable lock bits to see if the microcode mode is locked or unlocked (step ). If the microcode lock mode is unlocked (step ), then the microcode control logic  initiates the microcode mode (step ). If the microcode lock mode is locked (step ), then the microcode control logic  requests authorization to change the microcode mode lock status (step ). If the change is authorized (step ), then the microcode control logic  changes the microcode mode lock bit to unlocked (step ). If the change is not authorized (step ), then the microcode control logic  does not change the microcode mode lock bit.","In various embodiments, the microcode enable status may be changed by setting or resetting the one or more microcode enable status bits. For example, the microcode mode may be disabled, but inside SMM, a predetermined input to the microcode control logic  may signal the microcode control logic  to change the microcode mode status to enabled. In the embodiment of , for example, once signaled, the microcode control logic  will change the status of the one or more microcode enable bits from disabled to enabled.","In response to receiving a request to change the microcode mode status, the microcode control logic  may check the status of the one or more microcode enable lock bits to determine if the microcode lock mode is enabled or disabled. If the microcode lock mode is disabled, then the microcode control logic  may change the microcode mode status. If the microcode lock mode is enabled, then the microcode control logic  will not change the microcode mode status.","It is noted that the method  may alternatively terminate if the microcode update lock status is locked (step ), instead of requesting authorization to change the microcode update lock status (step ). The method  may also include receiving a request to change the microcode update lock status (not shown) prior to the method  requesting authorization (step ).",{"@attributes":{"id":"p-0224","num":"0223"},"figref":["FIGS. 25A","FIG. 25A","FIG. 25B","FIG. 26","FIG. 27"],"b":["25","26","27","3600","3600","3610","3620","3600","3600","3610","3620"]},"Turning to , the method A includes the security device receiving a transaction request for a storage location associated with the storage device connected to the security device (block A). The security device provides access control for the storage device (block A). One embodiment of the access control shown in block A is illustrated by the method B shown in .","According to the method A, the security device maps the storage location in the transaction request according to the address mapping of the storage device (block A). The security device provides the transaction request to the storage device (block A). Under normal circumstances, the storage device will perform the requested transaction (block A).","In various embodiments, the security device associated with the method A may include a crypto processor or a block of logic configured to provide security for the storage device. The storage device may include an electronic storage medium like a memory or a magnetic or optical storage medium like a hard drive or an optical drive. The memory may include a RAM, a ROM, or a flash memory. The hard drive or optical drive may be fixed or removable. The transaction request may include, for example, a read request, a write request, or a combination of read and write requests.","It is noted that in various embodiments, the memory (or the storage device) may include further security hardware of its own. The further security hardware may include access logic, a random number generator, and a secret, such as is illustrated above in  or D.","Turning to , the method B includes the crypto-processor receiving a transaction request for a memory location associated with the memory connected to the crypto-processor (block B). The crypto-processor provides access control for the memory (block B). One embodiment of the access control shown in block B is illustrated in .","According to the method B, the crypto-processor maps the memory location in the transaction request according to the address mapping of the memory (block B). The crypto-processor provides the transaction request to the memory (block B). Under normal circumstances, the memory will perform the requested transaction (block B).","Turning to , the method A includes the security device determining if a lock is in place for the storage location (block ). A transaction request may have been received for the storage location. If the lock is not in place (block ), then the method A moves past the authentication portion. If the lock is in place (block ), then the security device provides a challenge for the storage location (block ). The challenge may be associated with the storage location or with the storage device that includes the storage location. The challenge may be in response to the transaction request. Next, the security device receives a response to the challenge (block ). The security device evaluates the response by comparing the response to an expected response (block ). If the evaluation is not correct (block ), then the method ends. If the evaluation is correct (block ), then the method proceeds with the security device providing the transaction request to the storage device (block ).","In various embodiments, the security device associated with the method A may include a crypto processor or a block of logic configured to provide security for the storage device. The storage device may include an electronic storage medium like a memory or a magnetic or optical storage medium like a hard drive or an optical drive. The memory may include a RAM, a ROM, or a flash memory. The hard drive or optical drive may be fixed or removable. The transaction request may include, for example, a read request, a write request, or a combination of read and write requests.","Turning to , the method  includes storing a secret in a storage device (block ). The storage device may include only a portion of a physical device. The storage device itself may be embodied as any storage device known in the art. The method  may also include storing data in the storage device (block ) and storing code in the storage device (block ). The method  may also include providing a lock (e.g. a lock bit or bits) to secure data stored in the storage device or the storage device itself (block ). Note that the above steps of method  (blocks \u2013) may be performed relatively proximate in time, such as when the storage device is manufactured, installed, or initialized.","The method  also includes reading the secret from the storage device (block ), such as, for example, when the computer system including the storage device or coupled to communicate with the storage device is booted. For the secret to remain secure, the reading of the secret preferably occurs when the storage device is in a secure or trusted configuration. The method  may also read the code from the storage device (block ). The method  stores the secret in a secure location (block ) and also may store the code in the secure location (block ). The secure location may be in the SMM memory space previously described, or in a secure memory, register, or other storage location in the computer system , such as in the processor  or in the south bridge .","In various embodiments, the storage device associated with the method  may include an electronic storage medium like a memory or a magnetic or optical storage medium like a hard drive or an optical drive. The memory may include a RAM, a ROM, or a flash memory. The hard drive or optical drive may be fixed or removable. A read in method  may describe any transaction request, such as, for example, a read request, a write request, or a combination of read and write requests.",{"@attributes":{"id":"p-0236","num":"0235"},"figref":"FIG. 28","b":["3900","3905","3910","3915","3920"]},"In decision block , the gatekeeper determines if the response is equal to the expected response. If the response is not equal to the expected response, in decision block , then the method ends, preventing the requestor from completing the access request. If the response is equal to the expected response, in decision block , then the method continues with block . In block , the gatekeeper approves the access request. Typically, a sha hash, well known in the art, of the secret and a number known to both the gatekeeper and the requester is used to demonstrate knowledge of the secret.","Turning to , B, C, D, and E, an embodiment of computer subsystem A, including a south bridge D and I\/O devices, an embodiment of a processor E, an embodiment of a processor F, an embodiment of a computer subsystem B, including a processor  and other system devices, and an embodiment of a computer system C, including an embodiment of a processor  and various devices are shown, including Globally Unique IDentifiers (GUIDs)  and\/or a stored secret  and\/or a system GUID .","In , the south bridge D includes an embodiment of the security hardware  coupled to the LPC BIL D and the USB interface logic C. The embodiment of the security hardware  includes the random number generator (RNG) , a storage location storing a secret , and storage locations for storing a GUID table . The GUID table  may include a GUID for the south bridge D itself. The south bridge D is coupled through the USB interface logic C to a USB hub  including a GUID B. Coupled to the USB hub  are a biometric device  and a smart card reader . The biometric device  includes the secret  and a storage location for storing a GUID A. The smart card reader  includes the secret  and a storage location for storing a GUID D. Coupled through the LPC bus  to the LPC BIL D are the Super I\/O chip  and a keyboard , including a GUID C.","In , the processor E includes a GUID E. In , the processor F includes the GUID table , either in place of or in addition to the GUID table  shown in the south bridge D, shown in . The GUID table  of the processor F may include a GUID for the processor F itself.","In , the computer subsystem B includes the processor , which may represent any of the embodiments of the processor , such as the processor E shown in  or the processor F shown in , coupled to a north bridge  including a GUID F through the local bus . The north bridge  is shown coupled to an AGP device  including a secret  (could also include a GUID G) and a memory  including a plurality of memory modules, shown as DIMMs (Dual In-line Memory Modules) A\u2013C. Each of the DIMMs A\u2013C includes a GUID H\u2013K, respectively. In alternative embodiments, the GUIDs  may be replaced by a storage location to store the secret  (such as shown the AGP  and as in ) or augmented by the storage location to store the secret  and the GUID . Note that the computer system A and B may connect between the north bridge  and the south bridge D.","According to one embodiment of the present invention, at boot time or during some other trusted set-up, the south bridge D and\/or the processor F or other master device transmits the secret  to each of the devices coupled to the master device capable of storing the secret . Thus, in the illustrated embodiment of , the USB hub , the biometric device , and the smart card reader  would each store the secret . In other words, during the trusted set-up, the device or devices become known to the master device through an authentication routine, and the master device communicates the secret  to those devices that authenticate properly as a trusted component of the computer subsystem  or some part of the computer system. During data requests or transfers, the master device transmits a random number (or at least a nonce, a number that is used only once) to the device along with the data request. The device may encrypt the data using the random number (or the nonce) and the secret before transmitting the data to the master device. Whether or not the data is encrypted, the device returns the random number (or the nonce) with the data as an authenticator of the data.","As an example of this embodiment, consider the biometric device  of  as a fingerprint scanner . Placing a finger on the fingerprint scanner  may cause the fingerprint scanner  to send an interrupt to the system. The fingerprint scanner  scans the fingerprint of the finger on the fingerprint scanner  to create fingerprint data. The system notifies the south bridge D, which sends the nonce to the fingerprint scanner . The fingerprint scanner  receives the nonce and returns the fingerprint data and the nonce to the south bridge D in response to receiving the nonce. The fingerprint scanner  may also encrypt the fingerprint data using the nonce in lieu of sending the fingerprint data in the clear (i.e. not encrypted).","According to another embodiment of the present invention, at boot time or during some other trusted set-up, the south bridge D and\/or the processor F or other master device reads the GUIDs from each device coupled to the south bridge D (i.e. the master device) capable of storing or actually storing a GUID . Thus, in the illustrated embodiment of , the USB hub , the biometric device , the smart card reader , and the keyboard  each have GUIDs B, A, D, and C, respectively. The south bridge D stores the GUIDs for each device in the GUID table . In other words, during the trusted set-up, the device or devices become known to the south bridge D through an authentication routine, and the devices communicate their respective GUIDs  to the south bridge D that authenticates them as a trusted component of the computer subsystem  or some part of the computer system.","During data requests or transfers, the south bridge D or other master device (e.g. the processor E or F) transmits a random number (or at least a nonce) to the device along with the data request. The device may encrypt the data using the random number (or the nonce) and the GUID before transmitting the data to the south bridge D. Whether or not the data is encrypted, the device returns the random number (or the nonce) with the data as an authenticator of the data.","As an example of this embodiment, consider a request from the system (e.g. the master device) to the keyboard  for data. The system may request the keyboard  to submit the GUID C with the data. The GUID C in this case may be combined with the data using a hash function (i.e. a one way function well known in the art). The data are transmitted from the keyboard  to the system along with the GUID C. The master device, such as the security hardware  (alternatively the crypto-processor , such as shown in ) authenticates the data.","In another embodiment of the present invention, one or more devices (such as  shown in ) include both the GUID  and the storage location for the secret . In this embodiment, the system master, e.g. the south bridge D, and the devices  use the GUID , the secret , or both to authenticate data transmissions.","It is noted that other I\/O buses besides the USB  and the LPC bus  may be used in various embodiments of the present invention. For example, a hard drive (not shown) including a GUID  and\/or storage locations for the secret  may be coupled to the IDE interface  (shown in ). In another example, the biometric device  may couple to the computer subsystem  through the PCI bus  or a serial port or a parallel port, such as through the Super I\/O chip . Other I\/O buses and connections are contemplated.","As currently implemented by some manufacturers, using 128 bits for the GUID , up to 1036 possible values are available for any GUID . The sheer number of possible values allows for a device without a GUID  to be assigned a random GUID  with a very low possibility of duplication. The use of the random number or the nonce may prevent a replay attack using a device, such as the biometric device . Note that devices without GUIDs  established during manufacturing may create a random GUID , either for each boot or reset or for each data transmission.","It is contemplated that, for example, a part of the memory, such as a memory controller (e.g. see memory  in ) could include a GUID table  and be the master device for the memory modules, such as DIMMs A\u2013C. The memory controller could register the GUIDs  for the DIMMs . The memory controller could then give its own GUID  to another master device (e.g. north bridge  or processor ). In this way, transmissions between and among system devices could be registered as being from known devices. Other subsystem master device arrangements are also contemplated, such as the north bridge  and the south bridge D as local masters, with the processor  being the system master. Additional master devices could include the USB hub  for the other USB devices and a drive controller for its attached storage drives (e.g. hard drives or optical drives).","Turning now to , an embodiment of the computer system C is illustrated with a further embodiment of system components that are recognized by the computer system. As shown, an embodiment of the processor  is coupled to an embodiment of the north bridge . A memory subsystem  and an embodiment of a south bridge E are also coupled to the north bridge . A generic device  and an embodiment of the crypto-processor  are coupled to the south bridge E. The south bridge E includes security hardware , including a storage location for a system GUID  and the GUID table  described above. In the illustrated embodiment of the computer system C, each of the processor , memory , the north bridge , the device , and the crypto-processor  includes logic , a storage location for the system GUID , a storage location for an introduced bit , and a respective GUID , such as GUIDs P, F, M, or L. Note that the logic  of  may be implied in .","In one embodiment, upon first being placed in the computer system C, a system master introduces each device  to the computer system C. For the purposes of this aspect of the present invention, a \u201cdevice\u201d may be any component or subsystem or master device that may be a part of the computer system C. Examples include the processor , the north bridge , the memory controller  or memory modules (not shown), the south bridge , USB devices (shown elsewhere), other I\/O devices, and the crypto-processor . For the purposes of this discussion, reference will be made to device , but device  is intended to be generic. In particular, the device  may be removable from the computer system C and normally usable in another computer system (not shown) other than computer system C, including data drives and I\/O devices. The system master shown in  is the south bridge E. The processor  may alternatively be the system master. A logic circuit (not shown) on or a part of a motherboard (not shown) for the computer system C, or on a daughter card (not shown), may also be the system master.","As each device , , , E, , etc. is introduced to the computer system C, the system master provides the system GUID  to the device . The device  stores the system GUID . The device  provides the system master with its GUID M and the system master stores the GUID M of the device in the GUID table . Upon exchanging GUIDs, the device  sets the introduced bit . While the introduced bit  is set, the device  is \u201cmarried\u201d to the computer system C and will only exchange data with the computer system C. The device  and the computer system C may also \u201cdivorce by mutual consent\u201d by authenticating their respective GUIDs and having the device  reset the introduced bit.","Each data transfer in the computer system C may involve the exchange of the GUID  and\/or the system GUID . A failure to authenticate the system GUID  results in the device  not responding with the requested data or simply not responding to the data request. Should the device  request data from another device in the computer system C without providing or authenticating its own GUID M, the computer system C will not respond with the requested data or simply does not respond to the data request from the device .","To prevent complete loss of data or use of the device  and the computer system C, a maintenance mode or \u201cdivorce court\u201d may be available to force the introduced bit  to be reset. For example, a manufacturer may place a master ID value in each of a batch of components to allow for a repair facility to reset the introduced bit .","In various embodiments, the logic  may be configured to provide requested data using a hash function on the GUID M and either a nonce, a random number, or the requested data. For example, the processor  may request data from the memory . The processor  may provide a random number and the result of a hash of the random number and either the GUID N for the memory  or the system GUID . The memory  compares the result of the hash from the processor  with its own calculation of the hash value before responding to the data request from the processor .","In another embodiment, the device  (as well as other system devices) does not store the system GUID . In this embodiment, the device  only responds to a data transaction when its GUID M is provided with the data transaction. To initiate a data transaction, the device  demonstrates its own GUID  to the system master E, which authenticates the device  as being introduced to the computer system C and thus trusted. Note that the secret  may be substituted for the system GUID  and used in place of the respective GUIDs . Note also that the device  may be used in other computer systems other than computer system C so long as the device  has not been introduced to the computer system C. After the device  has been introduced to the computer system C and the introduced bit  has been set, the device is only usable in the computer system C until the introduced bit  has been reset. Note that the introduced bit  is preferably stored in non-volatile memory.","Turning now to , flowcharts of embodiments of methods A and B for operating a computer system including a biometric device, such as the biometric device  shown in . In , the method A includes the biometric data being sent in the clear along with the result of a hash program using a secret and a nonce or random number. In , the method B includes the biometric data being sent in encrypted form and an indication of the nonce or random number is sent as the result of the hash using the secret and the nonce or random number. The nonce or random number may be sent in the clear in all or only some of transmissions in the data transaction. Note that the secret may be an individual secret, such as a GUID of a device, or a group secret, such as a system GUID, a sub-system GUID, or both the individual secret and the group secret. The secret may be programmed at manufacture, established at boot time, or a random number picked during a trusted set-up, or a combination thereof.","In , the method A includes a biometric data transaction being requested involving a biometric device, in step . A nonce or random number is provided to the biometric device, in step . The biometric device responds to the biometric data transaction request with the requested biometric data and the result of the hash function using the secret and the nonce or random number, in step A. The result of the hash function is compared to an expected value for the hash function, in step A. If the result of the hash function is not the same as the expected value, in the decision block , then the transmitted biometric data are rejected, in step . If the result of the hash function is the same as the expected value, in the decision block , then the transmitted biometric data are accepted as the requested biometric data, in step .","In , the method B includes a biometric data transaction being requested involving a biometric device, in step . A nonce or random number is provided to the biometric device, in step . The biometric device responds to the biometric data transaction request with the requested biometric data in encrypted form and the result of the hash using a secret and the nonce or random number, in step B. The result of the hash is compared to an expected value for the hash of the secret and the nonce or random number, in step B. If the result of the hash for is not the same as the expected value for the result of the hash, in the decision block , then the transmitted biometric data are rejected, in step . If the result of the hash is the same as the expected value for the result of the hash, in the decision block , then the transmitted biometric data in encrypted form are accepted as the requested biometric data, in step .","Another embodiment of the method  includes providing a nonce or random number, receiving biometric data, transmitting the biometric data and the nonce or random number or the random number, and authenticating the biometric data using the nonce or random number. In still another embodiment, the method  may further include encrypting the biometric data, receiving the encrypted biometric data and the nonce or random number, and decrypting the encrypted biometric data. This embodiment may only transmit the encrypted biometric data and the nonce or random number. In still another embodiment, the method  may include encrypting the biometric data using the nonce or random number and decrypting the encrypted biometric data using the nonce or random number.","The method  may also include receiving a secret, storing the secret, transmitting at least an indication of the secret with the biometric data, receiving at least the indication of the secret, and authenticating the biometric data using at least the indication of the secret In a further embodiment, the method  may include encrypting the biometric data using the secret, and decrypting the encrypted biometric data using the secret. In still another embodiment, the method  may include encrypting the biometric data using the secret and the nonce or random number, and decrypting the encrypted biometric data using the secret and the nonce or random number. In one embodiment, the secret may include a system GUID. The method  may also include providing a GUID, encrypting the biometric data using the GUID, the secret, and the nonce or random number, and decrypting the encrypted biometric data using the GUID, the secret, and the nonce or random number.","It is noted that in various embodiments, receiving the biometric data may occur in response to providing the nonce or random number. In other embodiments, receiving the biometric data may occur only in response to providing the nonce or random number. Various steps of various embodiments of the method may be performed by different entities, including, but not limited to, the biometric device, the master device, and the system master.","Turning now to , B, A, B, C, and , flowcharts of embodiments of methods A, B, A, B, C, and  for authenticating a device in a computer system, such as computer systems including computer subsystems A, B, and C of , D, and E, are illustrated. In the method of , a secret is passed in encrypted form for authentication, but the data are transmitted in the clear. In the method of , the secret and data are both passed in encrypted form. In the method of , a device GUID is passed in encrypted form for authentication, but the data are transmitted in the clear. In the method of , the device GUID and data are both passed in encrypted form. In the method of , the secret, the device GUID, and the data are passed in encrypted form. In the method of , the device and the computer system are authenticated to each other as the device is united to the computer system using the introduced bit  shown in .","In the method A of , a master device in the computer system transmits a secret to a device in the computer system during a trusted set-up, in block . As noted elsewhere, the trusted set-up may occur, as examples, when the device is first introduced to the computer system or during a boot sequence of the computer system. A data transaction is requested involving the device in the computer system that knows the secret, in block . It is contemplated that one or more or all of the devices in the computer system will follow the method A and know the secret. A nonce or random number is provided to the device in the computer system that knows the secret, in block .","If the data transaction request is a read of data from the device, in block A, the device responds to the data transaction request with the requested data and a result of a hash using the secret and the nonce or random number. If the data transaction request is a write of data to or through the device, in block A, the device responds to the data transaction request with the result of the hash using the secret and the nonce or random number. Thus, in block A, the device responds to the data transaction request and verifies its authorization to complete the data transaction request.","The method A continues with the result of the hash using the secret and the nonce or random number being compared to an expected value for the result of the hash using the secret and the nonce or random number, in block . If the comparison results are not the same, in decision block , then the method continues by rejecting the transmitted data from the read or by not sending the data for the write, in block . If the comparison results are the same, in decision block , then the method continues by accepting the transmitted data from the read or by sending the data for the write, in block A.","In the method B of , a master device in the computer system transmits a secret to a device in the computer system during a trusted set-up, in block . A data transaction is requested involving the device in the computer system that knows the secret, in block . It is contemplated that one or more or all of the devices in the computer system will follow the method B and know the secret. A nonce or random number is provided to the device in the computer system that knows the secret, in block .","If the data transaction request is a read of data from the device, in block B, the device responds to the data transaction request by encrypting the requested data using the secret and the nonce or random number and a result of a hash using the secret and the nonce or random number. If the data transaction request is a write of data to or through the device, in block B, the device responds to the data transaction request with the result of the hash using the secret and the nonce or random number. Thus, in block B, the device responds to the data transaction request and verifies its authorization to complete the data transaction request.","The method B continues with the result of the hash using the secret and the nonce or random number being compared to an expected value for the result of the hash using the secret and the nonce or random number, in block . If the comparison results are not the same, in decision block , then the method continues by rejecting the transmitted data from the read or by not sending the data for the write, in block . If the comparison results are the same, in decision block , then the method continues by accepting the transmitted data from the read or by encrypting the data using the secret and the nonce or random number and sending the encrypted data for the write, in block B.","In the method A of , a master device in the computer system reads the GUID for a device in the computer system during a trusted set-up, in block . A data transaction is requested involving the device in the computer system with the known GUID, in block . It is contemplated that one or more or all of the devices in the computer system will follow the method A and have their GUIDs known to the computer system. A nonce or random number is provided to the device in the computer system with the known GUID, in block .","If the data transaction request is a read of data from the device, in block A, the device responds to the data transaction request with the requested data and a result of a hash using the GUID and the nonce or random number. If the data transaction request is a write of data to or through the device, in block A, the device responds to the data transaction request with the result of the hash using the GUID and the nonce or random number. Thus, in block A, the device responds to the data transaction request and verifies its identity and authorization to complete the data transaction request.","The method A continues with the result of the hash using the GUID and the nonce or random number being compared to an expected value for the result of the hash using the GUID and the nonce or random number, in block . If the comparison results are not the same, in decision block , then the method continues by rejecting the transmitted data from the read or by not sending the data for the write, in block . If the comparison results are the same, in decision block , then the method continues by accepting the transmitted data from the read or by sending the data for the write, in block A.","In the method B of , a master device in the computer system reads the GUID for a device in the computer system during a trusted set-up, in block . A data transaction is requested involving the device in the computer system with the known GUID, in block . It is contemplated that one, more than one, or all of the devices in the computer system will follow the method B and have their GUIDs known to the computer system. A nonce or random number is provided to the device in the computer system with the known GUID, in block .","If the data transaction request is a read of data from the device, in block B, the device responds to the data transaction request by encrypting the requested data using the GUID and the nonce or random number and a result of a hash using the GUID and the nonce or random number. If the data transaction request is a write of data to or through the device, in block B, the device responds to the data transaction request with the result of the hash using the GUID and the nonce or random number. Thus, in block B, the device responds to the data transaction request and verifies its identity and authorization to complete the data transaction request.","The method B continues with the result of the hash using the GUID and the nonce or random number being compared to an expected value for the result of the hash using the GUID and the nonce or random number, in block . If the comparison results are not the same, in decision block , then the method B continues by rejecting the transmitted data from the read or by not sending the data for the write, in block . If the comparison results are the same, in decision block , then the method B continues by accepting the transmitted data from the read or by encrypting the data using the GUID and the nonce or random number and sending the encrypted data for the write, in block B.","In the method C of , a master device in the computer system reads the GUID for a device in the computer system and transmits a secret to the device during a trusted set-up, in block . A data transaction is requested involving the device in the computer system with the known GUID that knows the secret, in block . It is contemplated that one or more or all of the devices in the computer system will follow the method C and have their GUIDs known to the computer system and know the secret. A nonce or random number is provided to the device in the computer system with the known GUID that knows the secret, in block .","If the data transaction request is a read of data from the device, in block C, the device responds to the data transaction request by encrypting the requested data using the secret, the GUID, and the nonce or random number and a result of a hash using the secret, the GUID, and the nonce or random number. If the data transaction request is a write of data to or through the device, in block C, the device responds to the data transaction request with the result of the hash using the secret, the GUID, and the nonce or random number. Thus, in block C, the device responds to the data transaction request and verifies its identity and authorization to complete the data transaction request.","The method C continues with the result of the hash using the secret, the GUID, and the nonce or random number being compared to an expected value for the result of the hash using the secret, the GUID, and the nonce or random number, in block . If the comparison results are not the same, in decision block , then the method C continues by rejecting the transmitted data from the read or by not sending the data for the write, in block . If the comparison results are the same, in decision block , then the method C continues by accepting the transmitted data from the read or by encrypting the data using the secret, the GUID, and the nonce or random number and sending the encrypted data for the write, in block C.","In the method  of , a master device in the computer system reads the GUID for a device in the computer system and records the GUID in a GUID table during a trusted set-up where the device joins the computer system, in block . The device may receive a system GUID from the master device and store the system GUID, in block . The device sets an introduced bit in response to joining the computer system, in block . The device is now considered to be \u201cmarried\u201d to the computer system. It is contemplated that one, more than one, or all of the devices in the computer system will follow the method  and be \u201cmarried\u201d to the computer system.","The device receives a transaction request from the computer system, and the device checks if the introduced bit is set, in block . If the introduced bit is not set, in decision block , then the method  continues by not fulfilling the transaction request or by not responding to the transaction request, in block . If the introduced bit is set, in decision block , then the method  may continue with the device requesting authentication from the computer system using the GUID before responding to the transaction request, in block .","If the device requests authorization, or if the computer system authenticates directly, a nonce or random number may be provided to the device. If the transaction request is a read of data from the device, the device may respond to the transaction request by encrypting the requested data using the GUID and the nonce or random number and a result of a hash using the GUID and the nonce or random number. If the data transaction request is a write of data to or through the device, the device may respond to the data transaction request with the result of the hash using the GUID and the nonce or random number.","The method  continues with the result of the authentication, in decision block . If the authentication is not successful, in decision block , then the method  continues by not fulfilling the transaction request, in block . If the authentication is successful, in decision block , or if authentication is not used for the transaction request, then the method  continues by fulfilling the transaction request, in block .","In alternative embodiments, the authentication may be performed by different methods. As an example, the master device may authenticate itself to the device by providing at least an indication of the system GUID to the device. Additional authentication methods, known in the art, may also be used other than challenge-response.","Turning now to , flowcharts of embodiments of methods  and  for removing the device from the computer system once the device has been united with (\u201cmarried to\u201d) the computer system using the introduced bit  shown in  are illustrated. In the method  of , the removal of the device from the computer system is by joint consent, a \u201cno-fault divorce.\u201d In the method  of , the removal of the device from the computer system is forced in a maintenance mode using a maintenance (backdoor) key, a \u201ccourt-ordered divorce.\u201d","The method  of  includes the device or the master device initiating a request for the device to leave the computer system, in block . The device and the master device authenticate themselves to each other using the GUID and\/or the system GUID, in response to the request for the device to leave the computer system, in block . The device resets the introduced bit in response to the device and the master device successfully authenticating each other, in block .","The method  of  may advantageously allow for easy removal of a device married to the computer system while maintaining system security. Authentication between the device and the master device may include any combination of the device providing at least an indication of the GUID to the master device, the device providing at least an indication of the system GUID to the master device, the master device providing at least an indication of the GUID to the device, and the master device providing at least an indication of the system GUID to the device. Any appropriate mechanism may be used for providing at least the indication, including the challenge-response method or other authentication method known in the art.","The method  of  includes the device receiving a command for the device to leave the computer system, in block . The device also receives at least an indication of a maintenance key that the device can successfully authenticate, in block . The device resets the introduced bit in response to the device receiving at least the indication of the maintenance key that the device can successfully authenticate, in block .","The method  of  may advantageously allow for easy removal of a device married to the computer system when the computer system is unresponsive or the device must be removed from the computer system for repair, while maintaining system security. The maintenance key may be programmed by the manufacturer of the device for each device, or for a class of devices. Authorized, trusted repair facilities are preferably the only ones with access to the maintenance key. A purchaser of a large number of similar devices could request a single maintenance key for all devices purchased.","Turning now to , a block diagram of an embodiment of a computer subsystem  including bus interface logics B, C, D, and E with master mode capabilities in an embodiment of the south bridge F, according to one aspect of the present invention, is illustrated. In the embodiment shown, the south bridge F is coupled through the LPC bus  to an embodiment of a crypto-processor , including master mode logic . The crypto-processor  is coupled to secure a protected storage . The bus interface logics B, C, D, and E of the south bridge F include IDE interface logic B, USB interface logic C, LPC bus interface logic D, and SMBus bus interface logic E. Each bus interface logic B, C, D, and E include a master mode register  including a master mode bit. Coupled to the USB interface logic C are the USB hub , the biometric device , and the smart card reader .","Master mode operations of the computer subsystem  may advantageously allow for secure input of data, such as biometric data or smart card data, without the unencrypted data being accessible to the operating system. Master mode creates a secure communications channel between the master mode logic  and the data input device.","Although the illustrated embodiment of  shows the master mode logic  in the crypto-processor , it is contemplated that the master mode logic  may also be incorporated into other devices in the computer system, such as in the security hardware  shown above. It is also contemplated that other devices, such as the USB hub , that pass-through data may also include the master mode register . In various embodiments, secure data input devices; such as the biometric device , the smart card reader , or a keyboard, also include the master mode register .","Note that the storage location or locations for storing the master mode bit may also include space for storing one or more addresses in an appropriate format for the bus interface logic. The one or more addresses may be used by the bus interface logics to provide data to and from only those addresses, only within the address range defined by those addresses, or to exclude data from or to those addresses or the address range the addresses define. The crypto-processor or security hardware may store the one or more addresses or the crypto-processor or security hardware may indicate to the bus interface logic or logics to store the addresses themselves.","Turning now to , a flowchart of an embodiment of a method  for operating in a master mode outside the operating system is illustrated. The master mode operation may advantageously allow for user authentication, such as via a biometric device or a smart card reader, without the operating system or a program running under the operating system from snooping on the authentication data stream.","The method  shown in  includes transmitting a master mode signal to one or more bus interface logics or other devices that include a master mode register, in block . The method  also includes setting a master mode bit in the master mode register of each of the one or more bus interface logics or other devices that include the master mode register to establish a secure transmission channel between the master mode logic and the data input device, in block . The master mode logic and the data input device exchange data outside the operating system of the computer system through the bus interface logics or other devices that include the master mode register, in block .","The master mode logic flushes, or signals the bus interface logics or other devices that include the master mode register to flush, the buffers of the bus interface logics or other devices that include the master mode register after concluding the data transmissions, in block . The master mode logic finally signals the bus interface logics or other devices that include the master mode register to reset the master mode bits after flushing the buffers of the bus interface logics or other devices that include the master mode register so that the operating system can again access the bus interface logics or other devices that include the master mode register, in block .","As used herein, operating outside the operating system means that programs running under the operating system are unable to access the bus interface logics or other devices including a master mode register when the master mode bit is set. This may advantageously allow for a program running under the operating system to request the crypto-processor or other master device including the master mode logic to perform a secure data read. The master mode logic is configured to read secure data from an input device such as a biometric device, a smart card reader, a signature verification reader, or a keyboard. As described herein, the biometric device may measure any one or more of any number of physiological and\/or behavioral features, including but not limited to fingerprints, hand geometry, voice prints, retinal scans, facial scans, body odor, ear shape, DNA profile, keystroke dynamics, pen stroke dynamics, and vein checking.","Turning now to , flowcharts of embodiments of methods A and B for booting a computer system including authentication via the master mode logic are shown. In , the crypto-processor is used to control the master mode logic, while in , the security hardware is used to control the master mode logic.","In , the processor executes BIOS code instructions from SMM space, in . After optionally accessing the security hardware, in , the method A requests authentication from the crypto-processor, preferably using the master mode logic, in A. The method A places the bus interface logics in master mode, in . The bus interface logics would typically be between the crypto-processor and the authentication device. The method A receives the authentication data while the bus interface logics are in master mode, in . The method A exits master mode and flushes the buffers of the bus interface logics, in . The method A next verifies the authentication data, in . Verifying the authentication data may include the crypto-processor providing an indication of the authentication data to a remote security device. If the authentication data are verified in , then the method A continues the boot process, in . If the authentication data are not verified in , then the method A returns to A and again requests authentication.","In , the processor executes BIOS code instructions from SMM space, in . After optionally accessing the security hardware, in , and optionally entering a BIOS management mode, in , the method B requests authentication from the security hardware, using the master mode logic, in B. The method B places the bus interface logics in master mode, in . The bus interface logics would typically be between the security hardware, e.g. the south bridge, and the authentication device. The method B receives the authentication data while the bus interface logics are in master mode, in . The method B exits master mode and flushes the buffers of the bus interface logics, in . The method B next verifies the authentication data, in . Verifying the authentication data may include the security hardware providing an indication of the authentication data to a remote security device. If the authentication data are verified in , then the method B continues the boot process, in . If the authentication data are not verified in , then the method B returns to A and again requests authentication.","Note that the relative position of steps of the methods A and B in the boot process (or sequence), such as shown in  would typically be prior to step . The relative position of various steps of the methods A and B in the boot process may also be between steps  and  of . Various BIOS code segments may be necessary for correct response of various devices in the computer system, such as the south bridge and authentication devices coupled thereto.","Turning now to , B, and C, block diagram of embodiments of systems A, B, and C for securing a device, a computer subsystem, and\/or a computer system using timers to enforce periodic authentication. In , the system A includes each of a computer system , a computer subsystem , and a device  as well as a network security authenticator . In , the system B includes a portable computer  coupled to a server  for authentication. In , the system C includes two computer systems A and B coupled to the server  including the network security authenticator .","In , the system A, as shown, includes the computer system  coupled to the network security authenticator  through a network . The computer system  includes logic , a timer , a security authenticator , and the computer system . The computer subsystem  includes logic , a timer , a security authenticator , and the device . The device  includes logic  and a timer .","In one embodiment, the device  authenticates to the computer subsystem , using the security authenticator , and the logic  sets and monitors the timer . In another embodiment, the device  authenticates to the computer system , using the security authenticator , and the logic  sets and monitors the timer . In still another embodiment, the device  authenticates to the network security authenticator  over the network , and the logic  sets and monitors the timer .","In one embodiment, the computer subsystem  authenticates to the computer system, using the security authenticator , and the logic  sets and monitors the timer . In another embodiment, the computer subsystem  authenticates to the network security authenticator  over the network , and the logic  sets and monitors the timer . In another embodiment, the computer system  authenticates to the network security authenticator  over the network , and the logic  sets and monitors the timer . Note that not all of these embodiments are mutually exclusive.","In , the system B includes the portable computer coupled over a remote connection to the server . The operations of the system B may be given in  below. The portable computer  may include the logic  and the timer  shown in . The server  may include the network security authenticator .","In , the system C includes two computer systems A and B coupled over the network  to the server  including the network security authenticator . The computer system A includes a south bridge G that includes security hardware . The security hardware , as shown, includes the logic  and the timer . The computer system B includes a crypto-processor , in place of the logic , coupled to the timer .  illustrates that the security hardware  or the crypto-processor  may control the timer  and the interactions with the network security authenticator .","Turning now to , flowcharts of embodiments of methods A and B for securing a device, a computer subsystem, or a computer system, such as a portable computer, by limiting use to finite periods of time between successive authorizations are illustrated. The methods A and B may advantageously discourage theft of the device, the computer subsystem, or the computer system as its usefulness is limited outside of or without its authorizing computer subsystem, computer system, or network security connections. While the method A of  is a general method applicable to any of device, computer subsystem, or computer system, the method B of  is an example of a specific method applicable to a portable computer adapted to communicate over a computer network.","In , the method A authenticates the device, the computer subsystem, or the computer system to the computer subsystem, the computer system, or the network security device, in . Typically, the device will authenticate to the computer subsystem or the computer system, while the computer subsystem will authenticate to the computer system or the network security device, and the computer system will authenticate to the network security device. Deviations from this typical behavior may include a device authenticating to the network security device, or the computer system authenticating to another computer system.","The method A sets a starting value on a timer in response to successfully authenticating the device, the computer subsystem, or the computer system, in . The timer is updated in a periodic fashion, in . The method A checks in  if the timer has expired. If the timer has not expired, in , then the method A continues the normal operation of the device, the computer subsystem, or the computer system in , and returns to . If the timer has expired, in , then the method A attempts to re-authenticate the device, the computer subsystem, or the computer system to the appropriate master, in . If the re-authentication in  is successful, in , then the method A returns to  and resets the starting value on the timer. If the re-authentication in  is not successful, in , then the method A shuts down the device, the computer subsystem, or the computer system until the device, the computer subsystem, or the computer system can be re-authenticated, such as during the boot process.","Note that the timer may be implemented as a count down timer running from a set value down to the expired value of zero or a counting timer running from zero up to a predetermined value as the expired value. The set value or the predetermined value may be a constant or may be randomly selected. The set value or the predetermined value may also vary according to a predetermined algorithm, if desired. Updating the timer may occur with each increment of the system clock or a local clock, or only while the device, the computer subsystem or the computer system is operating.","The method B established a network connection to the network security device (or system) in . The method B authenticates a portable computer to the network security system, in . The authentication may occur during the boot process. The method B sets a starting value on a timer in response to successfully authenticating the portable computer, in . The timer is updated in a periodic fashion, in . The method B checks in  if the timer has expired. If the timer has not expired, in , then the method B continues the normal operation of the device, the computer subsystem, or the computer system in , and returns to . If the timer has expired, in , then the method B attempts to establish network connection to the network security system, in , and to re-authenticate the portable computer to the network security system, in . If the re-authentication, in , is successful, in , then the method B returns to  and resets the starting value on the timer. If the re-authentication, in , is not successful, in , then the method B shuts down the portable computer and requires authentication during the boot process, in , before normal operations of the portable computer are allowed to resume.","Note that the device  may represent any device  in the computer system  or . The computer subsystem  may represent any computer subsystem  in the computer system  or . Also note that code for the authentication and timer settings may be stored in the security hardware  or the secure storage shown elsewhere in this disclosure, such as the BIOS ROM , the SMM ROM , the extended BIOS , or the protected storage .","Turning now to , a flowchart of an embodiment of a method  for booting a computer system including initializing a timer to enforce periodic authentication and authorization is shown. The method includes the processor executing BIOS code instructions from SMM space, in . The method  may also access the security hardware, in . The method  may also optionally enter BIOS management mode, in . The method  authenticates the computer system through the security hardware, in . Authentication data are provided to the security hardware, in . If the authentication is not successful, in , then the method  shuts down the computer system until successful authentication is provided, in . If the authentication is successful, in , then the method  sets a starting value on the timer, in response to successfully authenticating, in . The method  then continues the boot process, in .","Turning now to , block diagrams of embodiments of the system management registers A and B are illustrated. In the embodiment shown in , the secure system management registers A include one or more ACPI lock bits A through N to secure various ACPI or related functions against unauthorized changes. The ACPI lock bits , once set, prevent changes to the ACPI or related functions. A request to change one of the ACPI or related functions requires that a respective ACPI lock bit N be released before the respective one of the ACPI or related functions is changed.","In the embodiment shown in , the secure system management registers  include one or more ACPI range registers  and\/or one or more ACPI rule registers . Each of the one or more ACPI range registers  may be configured to store a value or values that define allowable or preferred values for a specific ACPI or related function. Each of the one or more ACPI rule registers  may be configured to store part or all of a rule for determining if a change to one of the ACPI or related functions should be allowed. Each of the one or more ACPI rule registers  may also be configured to store code for evaluating the rules for determining if a change to one of the ACPI or related functions should be allowed or comparing a requested value or change to the value or values that define allowable or preferred values for a specific ACPI or related function stored in one of the ACPI range registers .","Examples of ACPI or related functions include changing a voltage, changing a frequency, turning on or off a cooling fan, and a remote reset of the computer system. It is contemplated that other ACPI or related functions may also be used. It is noted that the voltage may be a processor voltage, the frequency may be a processor operating frequency or a bus or interface frequency, the cooling fan may be operable or intended to cool any component in the computer system, including devices or subsystems not described herein, such as a power supply. It is noted that in various embodiments, the SMM access filters , such as shown in , may include address range traps for directing access requests to evaluate the contents of the ACPI management registers A or B.","For the purposes of this disclosure, references to ROM are to be construed as also applying to flash memory and other substantially non-volatile memory types. Note that while the methods of the present invention disclosed herein have been illustrated as flowcharts, various elements of the flowcharts may be omitted or performed in different order in various embodiments. Note also that the methods of the present invention disclosed herein admit to variations in implementation.","Some aspects of the invention as disclosed above may be implemented in hardware or software. Thus, some portions of the detailed descriptions herein are consequently presented in terms of a hardware implemented process and some portions of the detailed descriptions herein are consequently presented in terms of a software-implemented process involving symbolic representations of operations on data bits within a memory of a computing system or computing device. These descriptions and representations are the means used by those in the art to convey most effectively the substance of their work to others skilled in the art using both hardware and software. The process and operation of both require physical manipulations of physical quantities. In software, usually, though not necessarily, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantifies. Unless specifically stated or otherwise as may be apparent, throughout the present disclosure, these descriptions refer to the action and processes of an electronic device, that manipulates and transforms data represented as physical (electronic, magnetic, or optical) quantities within some electronic device's storage into other data similarly represented as physical quantities within the storage, or in transmission or display devices. Exemplary of the terms denoting such a description are, without limitation, the terms \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining,\u201d \u201cdisplaying,\u201d and the like.","Note also that the software-implemented aspects of the invention are typically encoded on some form of program storage medium or implemented over some type of transmission medium. The program storage medium may be magnetic (e.g., a floppy disk or a hard drive) or optical (e.g., a compact disk read only memory, or \u201cCD ROM\u201d), and may be read only or random access. Similarly, the transmission medium may be twisted wire pairs, coaxial cable, optical fiber, or some other suitable transmission medium known to the art. The invention is not limited by these aspects of any given implementation.","The particular embodiments disclosed above are illustrative only, as the invention may be modified and practiced in different but equivalent manners apparent to those skilled in the art having the benefit of the teachings herein. Furthermore, no limitations are intended to the details of construction or design herein shown, other than as described in the claims below. It is therefore evident that the particular embodiments disclosed above may be altered or modified and all such variations are considered within the scope and spirit of the invention. Accordingly, the protection sought herein is as set forth in the claims below."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may be understood by reference to the following description taken in conjunction with the accompanying drawings, in which like reference numerals identify similar elements, and in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1A","FIG. 1B"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 7A","b":["7","7","7"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 10A","FIG. 10B"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIGS. 11A and 11B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 13A and 13B"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 14A and 14B"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIGS. 16A","b":["16","16","16","16","16","16"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIGS. 17A","FIG. 6","FIG. 17D"],"b":["17","17","460"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 18A","FIG. 18B","FIG. 18C"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIGS. 19A","b":["19","19"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 20A\u201320D"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIGS. 25A","b":["25","26","27"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIGS. 29A","b":["29","29","29","29"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 30A and 30B","FIG. 29A"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 31A","FIGS. 29A"],"b":["31","32","32","32","33","29","29"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIGS. 34 and 35"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 38A","FIG. 38B"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIGS. 39A","b":["39","39","5000"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 40A and 40B"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIGS. 42A and 42B"}]},"DETDESC":[{},{}]}
