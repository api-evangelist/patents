---
title: Platform and method for generating and utilizing a protected audit log
abstract: Briefly, one embodiment of a platform for generating and utilizing a protected audit log is described. The platform comprises a system memory and a memory to contain an audit log. The audit log includes a plurality of single-write, multiple read entries. At least one of the entries of the audit log includes stored data integrity information loaded into the system memory during its power cycle.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07073071&OS=07073071&RS=07073071
owner: Intel Corporation
number: 07073071
owner_city: Santa Clara
owner_country: US
publication_date: 20000331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DESCRIPTION"],"p":["1. Field","This invention relates to the field of platform security.","2. Background","Advances in technology have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce (e-commerce) and business-to-business (B2B) transactions are now becoming popular, reaching the global markets at a fast rate. Unfortunately, while electronic platforms like computers provide users with convenient and efficient methods of doing business, communicating and transacting, they are also vulnerable for unscrupulous attacks. Examples of these attacks include virus, intrusion, security breach, and tampering, to name a few. Therefore, it is becoming more and more important to protect the integrity of data stored within or downloaded into a platform.","Various cryptographic mechanisms may be used to protect the integrity of data. One type of cryptographic mechanism involves the use of authorization certificates to provide sufficient protection during a boot cycle of a platform. For example, an \u201cauthorization certificate\u201d can provide verifiable evidence of which software modules are authorized to run on a platform. Although these authorization certificates provide some levels of platform security, they are quite restrictive because no new software modules can be run without prior approval from a certificate issuer with the requisite authority. This requirement would greatly impede current software development and the on-going progression toward open software.","The present invention relates to a platform and method for generating and utilizing a protected audit log to enhance security. Herein, certain details are set forth in order to provide a thorough understanding of the present invention. It is apparent to a person of ordinary skill in the art, however, that the present invention may be practiced through many embodiments other that those illustrated. Well-known circuits and hashing techniques are not set forth in detail in order to avoid unnecessarily obscuring the present invention.","In the following description, terminology is used to discuss certain features of the present invention. For example, a \u201cplatform\u201d includes hardware equipment and\/or software that perform different functions on stored information. Examples of a platform include, but are not limited or restricted to a computer (e.g., desktop, a laptop, a hand-held, a server, a workstation, etc.), desktop office equipment (e.g., printer, scanner, a facsimile machine, etc.), a wireless telephone handset, a television set-top box, and the like. A \u201csoftware module\u201d includes code that, when executed, performs a certain function. A \u201cnub\u201d is a series of code instructions, possibly a subset of code from an applet acting as a lesser sized software module. A \u201clink\u201d is broadly defined as one or more information-carrying mediums (e.g., electrical wire, optical fiber, cable, bus, or wireless signaling technology).","In addition, the term \u201cinformation\u201d is defined as one or more bits of data, address, and\/or control. A \u201csegment\u201d is one or more bytes of information. A \u201cpage\u201d is a predetermined number of bytes, usually a power of two in length (e.g., 512, 1024, etc.). A \u201chash function\u201d is a function, mathematical or otherwise, that performs a one-way conversion of information to a fixed-length representation. Normally, this representation, referred to as a \u201chash value\u201d or a \u201cdigest\u201d, is substantially less in size than the original information. It is contemplated that, in some cases, a 1:1 conversion of the original information may be performed.","I. Architecture Overview","A. Isolated Execution Platform","One principle for providing additional platform security is through configuration of the platform with an isolated execution (ISOX\u2122) architecture. The ISOX\u2122 architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of a platform. Herein, the operating system and a processor of the platform may have several levels of hierarchy, referred to as rings, which correspond to various operational modes. A \u201cring\u201d is a logical division of hardware and software components that are designed to perform dedicated tasks within the operating system. The division is typically based on the degree or level of privilege, namely the ability to make changes to the platform. For example, a ring- is the innermost ring, being at the highest level of the hierarchy. Ring- encompasses the most critical, privileged components. Ring- is the outermost ring, being at the lowest level of the hierarchy. Ring- typically encompasses user level applications which are normally given the lowest level of privilege. Ring- and ring- represent the intermediate rings with decreasing levels of privilege.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1A","b":["50","50","50","0","10","1","20","2","30","3","40","52","50","50","52"]},"Ring-  includes two portions: a normal execution Ring-  and an isolated execution Ring- . The normal execution Ring-  includes software modules that are critical for the operating system. Typically, these software modules include a primary operating system  referred to as the \u201ckernel\u201d (e.g., the unprotected segments of the operating system), software drivers , and hardware drivers . The isolated execution Ring-  includes an operating system (OS) nub  and a processor nub  as described below. The OS nub  and the processor nub  are instances of an OS executive (OSE) and processor executive (PE), respectively. The OSE and the PE are part of executive entities that operate in a secure environment associated with the isolated area  and the isolated execution mode. The processor nub loader  is a protected bootstrap loader code held within the chipset itself and is responsible for loading the processor nub  from the processor or chipset into an isolated area as further described below.","Similarly, ring- , ring- , and ring-  include normal execution ring- , ring- , ring- , and isolated execution ring- , ring- , and ring- , respectively. In particular, normal execution ring- includes N applications \u2013and isolated execution ring- includes M applets \u2013(where \u201cN\u201d and \u201cM\u201d are positive whole numbers).","One concept of the isolated execution architecture is the creation of a region in system memory protected by the processor and\/or chipset in the platform. This region of protected memory is referred to as an \u201cisolated area\u201d. Access to the isolated area is permitted using special memory read and write cycles, which are referred to as \u201cisolated read and write\u201d cycles. The isolated read and write cycles are issued by the processor operating in the isolated execution mode.","The processor nub loader  verifies and loads a ring- nub software module (e.g., processor nub ) into the isolated area. The processor nub  provides the basic hardware-related services to support isolated execution. For example, one task of the processor nub  is to verify and load the ring- OS nub  into the isolated area  as shown in .","The OS nub  provides links to services in the primary operating system , provides page management within the isolated area, and has the responsibility for loading some ring- software modules as well as ring- software modules  (e.g., \u2013) into protected pages allocated in the isolated area. The OS nub  may also support encrypting and hashing the isolated area pages before evicting the page(s) to the ordinary (unprotected) memory, and\/or checking the page contents upon restoration of the page.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1B","b":["10","0","10","3","40","50","60"]},"The accessible physical memory  includes an isolated area  and a non-isolated area . The isolated area  includes applet pages  and nub pages . The non-isolated area  includes application pages  and operating system (OS) pages . The isolated area  is accessible only to elements of the operating system and processor operating in isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and processor.","The normal execution ring-  including the primary OS , the software drivers , and the hardware drivers , can access both the OS pages  and the application pages . The normal execution ring-, including applications \u2013, can access only to the application pages . Neither the normal execution ring-  nor ring- , however, can access the isolated area .","The isolated execution ring- , including the OS nub  and the processor nub , can access both the isolated area  (including the applet pages  and the nub pages ) and the non-isolated area  (including the application pages  and the OS pages ). The isolated execution ring- , including applets \u2013, can access only the application pages  and the applet pages . The applets \u2013reside in the isolated area .","Referring to , a first block diagram of an illustrative embodiment of a platform utilizing the present invention is shown. The platform  comprises a processor , a system memory  and an input\/output control hub (ICH)  in communication with each other. In this embodiment, however, the platform  further includes a memory control hub (MCH)  and a non-volatile memory (e.g., flash)  coupled to the ICH . The MCH  is further coupled to the processor  via a host bus . The ICH  may be integrated into a chipset together or separate from the MCH .","It is contemplated that the platform  may be in communication with peripheral components such as a mass storage device , one or more input\/output (I\/O) devices , and a token  via a token bus  and\/or a token reader . For clarity, the specific links for these peripheral components (e.g., Peripheral Component Interconnect \u201cPCI\u201d, accelerated graphics port \u201cAGP\u201d, Industry Standard Architecture \u201cISA\u201d, Universal Serial Bus \u201cUSB\u201d, etc.) are not shown.","The processor  represents a central processing unit of any type of architecture, such as complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor  is compatible with the Intel Architecture (IA) processor, such as the IA-32 and the IA-64. The processor  includes an isolated execution circuit . The isolated execution circuit  provides a mechanism to allow the processor  to operate in an isolated execution mode. The isolated execution circuit  provides hardware and software support for the isolated execution mode. This support includes configuration for isolated execution, definition of the isolated area, definition (e.g., decoding and execution) of isolated instructions, generation of isolated access bus cycles, and generation of isolated mode interrupts.","The host bus  provides interface signals to allow the processor  to communicate with other processors or devices, e.g., the MCH . In addition to normal mode, the host bus  supports an isolated access bus mode with corresponding interface signals for isolated read and write cycles when the processor  is configured in the isolated execution mode. The isolated access bus mode is asserted on memory accesses initiated while the processor  is in the isolated execution mode if the physical address falls within the isolated area address range. The isolated access bus mode is also asserted on instruction pre-fetch and cache write-back cycles if the address is within the isolated area address range. The processor  responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  provides interface circuits to recognize and service isolated access assertions on memory reference bus cycles, including isolated memory read and write cycles. In addition, the MCH  has memory range registers (e.g., base and length registers) to represent the isolated area in the system memory . Once configured, the MCH  aborts any access to the isolated area when the isolated access bus mode is not asserted.","The system memory  stores code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory  includes the accessible physical memory  (shown in ). The accessible physical memory includes a loaded operating system (OS) , the isolated area  (shown in ), and an isolated control and status space . The loaded OS  is the portion of the operating system that is loaded into the system memory . The loaded OS  is typically loaded from mass storage device  via some boot code in a boot storage such as a boot read only memory (ROM).","As shown in , the isolated area  is the memory area that is defined by the processor  when operating in the isolated execution mode. Access to the isolated area  is restricted and is enforced by the processor  and\/or the MCH  or other chipset that integrates the isolated area functionalities.","Referring back to , the isolated control and status space  is an input\/output (I\/O)-like, independent address space defined by the processor  and\/or the MCH . The isolated control and status space  contains (i) isolated execution control and status registers, and (ii) related initialization code invoked directly by the isolated instructions executed by the processor . The isolated control and status space  does not overlap any existing address space and is accessed using the isolated bus cycles. The system memory  may also include other programs or data that are not shown.","As shown in , the ICH  has a number of functionalities that are designed to support isolated execution in addition to the traditional I\/O functions. In this embodiment, the ICH  comprises at least the processor nub loader  (shown in ), a hardware-protected memory , and a cryptographic hash unit . For clarity, only one ICH  is shown although platform  may be implemented with multiple ICHs. When there are multiple ICHs, a designated ICH is selected to control the isolated area configuration and status. This selection may be performed by an external strapping pin. As is known by one skilled in the art, other methods of selecting can be used.","The processor nub loader , as shown in , includes a processor nub loader code and its hash value (or digest). After being invoked by execution of an appropriate isolated instruction (e.g., ISO_INIT) by the processor , the processor nub loader  is transferred to the isolated area . Thereafter, the processor nub loader  copies the processor nub  from the non-volatile memory  into the isolated area , verifies and places the hash value of the processor nub  into some hardware-protected memory. The hardware-protected memory  is implemented as any memory array with single write, multiple read capability. This non-modifiable capability is controlled by logic or is part of the inherent nature of the memory itself. For example, as shown, the protected memory  may include a plurality of single write, multiple read registers.","The cryptographic hash unit  includes logic that performs a one-way hash function on input information. The term \u201cone-way\u201d indicates that there does not readily exist an inverse function to recover any discernible portion of the original information from the fixed-length hash value. Examples of a hash function include MD5 provided by RSA Data Security of Redwood City, Calif., or Secure Hash Algorithm (SHA-1) as specified a 1995 publication Secure Hash Standard FIPS 180-1 entitled \u201cFederal Information Processing Standards Publication\u201d (Apr. 17, 1995).","As shown in , the protected memory  is configured to operate as an audit log . An \u201caudit log\u201d  is a listing of information that represents (or identifies) what information has been successfully loaded into the system memory , normally in the isolated area , after power-on of the platform . This information, referred to as a \u201clog entry,\u201d is information of interest to a verifier of the audit log , presumably including a hash of data, of a software module, or of any other information. For example, the log entry may include a hash of a software module and a ring number on which the software module is authorized to run during the current power cycle of the platform . These software modules may include the processor nub , the OS nub , and\/or any other critical software modules (e.g., ring- modules) loaded into the isolated area . Thus, the audit log  can act as a fingerprint that identifies information loaded into the platform (e.g., the ring- code controlling the isolated execution configuration and operation), and is used to attest or prove the state of the current isolated execution.","In another embodiment as further described in , both the protected memory  and unprotected memory (e.g., a memory array in the non-isolated area  of the system memory  of ) may be collectively utilized to provide a protected audit log . Instead of storing the entire audit log  in protected memory , a pointer to the beginning of a memory array in the unprotected memory is stored in the protected memory . In addition, the length of the audit log  and a hash value of the contents of the audit log  may be stored with the pointer.","In yet another embodiment as further described in , both the protected memory  and the unprotected memory may be collectively utilized to provide a protected audit log . While a memory array in the unprotected memory would store the audit log, the protected memory  would store a state value. As an option, the length of the audit log  and\/or the total hash value may be stored in protected memory .","Referring still to , the non-volatile memory  stores non-volatile information. Typically, the non-volatile memory  is implemented in flash memory. The non-volatile memory  includes the processor nub  and a binding key storage . The processor nub  provides the initial set-up and low-level management of the isolated area  of the system memory , including verification, loading, and logging of the OS nub , and the management of the symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware. The processor nub  may also be distributed by the original equipment manufacturer (OEM) or operating system vendor (OSV) via a boot disk.","The mass storage device  stores archive information such as code (e.g., processor nub ), programs, files, data, applications (e.g., applications \u2013), applets (e.g., applets to ) and operating systems. The mass storage device  may include a compact disk (CD) ROM , a hard drive , or any other magnetic or optic storage devices. The mass storage device  also provides a mechanism to read processor readable medium. When implemented in software, the elements of the present invention are stored in a processor readable medium. The \u201cprocessor readable medium\u201d may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable ROM (EROM), a floppy diskette, a CD-ROM, an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, etc.","I\/O devices  may include any I\/O devices to perform I\/O functions. Examples of I\/O devices  include controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), communication card (e.g., network. modem, etc.), and any other peripheral controllers.","The token bus  provides an interface between the ICH  and one or more tokens  in the system. The \u201ctoken\u201d  is a device that performs dedicated I\/O functions with security. The token  may be stationary (e.g., a motherboard token) or portable when coupled via the token reader . The token bus interface  in the ICH  couples the token bus  to the ICH  and ensures that when commanded to prove the state of the isolated execution, the corresponding token  signs only valid isolated digest information.","B. Standard Platform","Referring to , a second block diagram of an illustrative embodiment of a platform utilizing the present invention is shown. The platform  includes a first (unprotected) memory  and a second (protected) memory  coupled together by one or more links . The access to contents stored in the second memory  is controlled by protected system logic  (e.g., an integrated circuit, combinatorial elements, and\/or software). It is contemplated that the logic  includes a hash unit , which produces hash values of information loaded therein. Logic  may be placed physically separate from the second memory  as shown or contained within the same package. The techniques for generating and utilizing a protected audit log are also set forth in .","II. Generating and Utilizing a Protected Audit Log","Referring now to , a flowchart of the illustrative operations of the platform to generate a protected audit log is shown. After power-on of the platform, segments of information are loaded into the system memory for processing by a processor (block ). Each segment of information may be a portion of the operating system, a software module, a nub, an applet, and the like. Concurrent with their loading into the system memory, these segments of information undergo a cryptographic hash operation to produce log entries (blocks  and ). The log entries are placed into the audit log in protected memory (block ). The memory is deemed \u201cprotected\u201d when the contents of the memory are readable and non-modifiable as described above. As subsequent segments of information are being loaded into system memory, their log entries are concurrently appended to the audit log behind the previously appended log entries (block ).","As shown in , a flowchart of the illustrative operations of the platform to utilize the protected audit log is shown. To determine whether certain segments of information were loaded without authorization, the log entries for these certain segments would be re-computed and compared to corresponding log entries recovered from the audit log (blocks  and ). If none of the re-computed log entries differ from its corresponding log entry, then the segments of information have not been modified (blocks  and ). In general, if we determine that the information loaded into the isolated area includes only segments of information that are known to be safe (e.g., recognized as being an approved software module, does not match a known virus, compares with a recognized log entry, etc.), then the entire area is safe. However, if any recovered log entry differs from its re-computed log entry value, an error signal is provided to indicate that the information loaded into the isolated area is not known to be safe (block ). Then, the isolated area should be treated as if it is insecure.","Referring to , illustrative flowcharts of a first embodiment of the operations of the platform to generate a protected audit log utilizing both protected and unprotected memory is shown. After power-on of the platform, memory space in unprotected memory is reserved for a memory array configured to store an audit log having data that represents what information has been successfully loaded into the system memory during the current power cycle, namely after power-on of the platform (block ). The beginning location of the audit log (e.g., a pointer) is stored in protected memory possibly with the length of the audit log (block ). Of course, the length may be any measurable unit (e.g., bytes).","Thereafter, segments of information are loaded into the system memory, such as the isolated area for example, for processing by a processor. Each segment of information may be a portion of the operating system, a software module such as a nub, an applet and the like. In particular, the first segment of information undergoes a cryptographic hash operation upon being loaded into system memory (block ). This produces a log entry of the first segment and this log entry is appended to the audit log stored in the unprotected memory (blocks  and ). The length parameter is incremented by the size of the log entry and the total hash value of the audit log is equivalent to the computed hash value of the first segment (blocks  and ). Both the length parameter and the total hash value are stored in either protected or unprotected memory (block ).","Subsequently, a new segment of information undergoes a cryptographic hash operation within the platform (block ). This produces a new log entry of the new segment and the new log entry is appended into the audit log (blocks  and ). The logic responsible for controlling access to the protected memory is provided with the size (e.g., number of bytes) of the new log entry but the length parameter is not yet incremented (block ).","The cryptographic hash unit computes the total hash value for the entire audit log by reloading the log entries stored in the audit log starting at the beginning location of the memory array and ending with the entry prior to the new log entry, as determined by the length parameter (block ). If the computed hash value matches the total hash value, the new log entry is loaded into the cryptographic hash unit to compute the new total hash value (blocks ,  and ). Thereafter, the new total hash value and the updated length parameter (old length plus the additional bytes associated with the new hash value) are recorded in the protected memory (blocks ). If the computed hash value differs from the total hash value, an error is reported (block ).","Referring to , an illustrative diagram of a second embodiment of the operations of the platform to generate a protected audit log utilizing both protected and unprotected memory is shown. Herein, the protected memory  includes (i) a beginning location  of a memory array of unprotected memory (i) the audit log, (ii) a state , and optionally (iii) a current length of the audit log  and (iv) a total hash value of the contents of the audit log , as identified by dashed lines. The \u201cstate\u201d includes a state value  being a series of log entries stored in a block of memory (e.g., 64 bytes). The placement of the log entries is controlled by a state pointer  as further shown in . When the memory block becomes full (e.g., the pointer has come to the end of the memory block), logic may be used to compute an updated total hash value based on the current total hash value  and the state value  as shown in .","More specifically, as shown in , after power-on of the platform, memory space in unprotected memory is reserved for a memory array configured to store an audit log having data that represents what information has been successfully loaded into the system memory (block ). The beginning location of the memory array is stored in protected memory along with the state value and possibly contents of the length parameter of the audit log (block ).","Thereafter, segments of information are loaded into the system memory for processing by a processor. In particular, a segment of information is undergoes a cryptographic hash operation, possibly performed by a software module stored in the isolated area (block ). Thereafter, a log entry of the first segment is produced as a result of the cryptographic hash operations and this log entry is appended into both the audit log in unprotected memory and the memory block storing the state value (blocks ,  and ). The length parameter and the state pointer are incremented by the size of the log entry (block ).","Thereafter, new segments of information undergo the cryptographic hash operations (block ). The cryptographic hash operations produce a log entry of each new segment and that log entry is appended to the listing in unprotected memory and placed in the memory block as shown in  (block ). When the logic responsible for updating the total hash value determines that the state memory is full or is sufficiently full where padding is used, the cryptographic hash unit performs a cryptographic operation on both total hash value currently stored (see element  of ) and the state value to produce a new total hash value (blocks  and ). Then, the state pointer is set to the beginning of the state memory block (block ). This is advantageous because the cryptographic hash unit does not need to re-compute the total hash value from the audit log saved in unprotected memory for each segment of information loaded.","To determine whether the audit log is correct, as shown in , the total hash value may be re-computed from the audit log by accessing the location and length parameters from the protected memory (blocks  and ). Also, the current total hash value can be computed from the state value and the total hash value stored in the protected memory (blocks  and ). If these hash values compare, then the information presented by the log entries has not been modified and the audit log has not been tampered with (blocks  and ). However, if these hash values differ, an error signal is provided to indicate that the loaded information has been tampered with (block ).","Referring to , an illustrative diagram of an embodiment of the operations of the platform to generate a protected audit log accounting for modules loaded during the life of the platform is shown. At least a portion of the protected memory is non-volatile such as flash or battery-backed random access memory (RAM). The non-volatile memory is configured to contain the total hash value of the audit log.","Upon detecting an event such as new power-on cycle or the size of the audit log in the current power cycle exceeds a predetermined size, a LOG_CHAINING instruction is issued for execution by the processor (block  and ). In response to execution of the LOG_CHAINING instruction by the processor, a new audit log is started with the total hash value of the previous audit log recorded as its first entry (block ). Thus, since hashing operations are an incremental process, the hash value for the entire product cycle of the platform may be preserved by repeating these operations for every subsequent event.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 9A","FIG. 6"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 9B","FIG. 6"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
