---
title: Apparatus, system, and method for automatically discovering and grouping resources used by a business process
abstract: An apparatus, system, and method are provided for automatically discovering and grouping files and other resources used by a business process. The present invention includes a monitoring module that collects trace data representative of operational behavior of software applications. An analysis module analyzes the trace data to discover resources affiliated with the business process. A determination module defines a logical application corresponding to the business process and includes the resources discovered by the analysis module. The logical application is automatically defined such that business policies may be readily implemented on the logical application as a whole. Manual identification of resources for a business process is eliminated or substantially reduced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546601&OS=07546601&RS=07546601
owner: International Business Machines Corporation
number: 07546601
owner_city: Armonk
owner_country: US
publication_date: 20040810
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The invention relates to enterprise computer systems. Specifically, the invention relates to apparatus, systems, and methods for automatically discovering and grouping resources used by a business process.","2. Description of the Related Art","Computer and information technology continues to progress and grow in its capabilities and complexity. In particular, software applications have evolved from single monolithic programs to many hundreds or thousands of object-oriented components that can execute on a single machine or distributed across many computer systems on a network.","Computer software and its associated data is generally stored in persistent storage organized according to some format such as a file. Generally, the file is stored in persistent storage such as a Direct Access Storage Device (DASD, i.e., a number of hard drives). Even large database management systems employ some form of files to store the data and potentially the object code for executing the database management system.","Business owners, executives, managers, administrators, and the like concentrate on providing products and\/or services in a cost-effective and efficient manner. These business executives recognize the efficiency and advantages software applications can provide. Consequently, business people factor in the business software applications in long range planning and policy making to ensure that the business remains competitive in the market place.","Instead of concerning themselves with details such as the architecture and files defining a software application, business people are concerned with business processes. Business processes are internal and external services provided by the business. More and more of these business processes are provided at least in part by one or more software applications. One example of a business process is internal communication among employees. Often this business process is implemented largely by an email software application. The email software application may include a plurality of separate executable software components such as clients, a server, a Database Management System (DBMS), and the like.","Generally, business people manage and lead most effectively when they focus on business processes instead of working with confusing and complicated details about how a business process is implemented. Unfortunately, the relationship between a business process policy and its implementation is often undefined, particularly in large corporations. Consequently, the affects of the business policy must be researched and explained so that the burden imposed by the business process policy can be accurately compared against the expected benefit. This may mean that computer systems, files, and services affected by the business policy must be identified.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":"100"},"Generally, a business process is simple and clearly defined. Often, however, the business process is implemented using a variety of cooperating software applications comprising various executable files, data files, clients, servers, agents, daemons\/services, and the like from a variety of vendors. These software applications are generally distributed across multiple computer platforms.","In the example system , an E-commerce website is illustrated with components executing on a client , a web server , an application server , and a DBMS . To meet system  requirements, developers write a servlet  and applet  provided by the web server , one or more business objects  on the application server , and one or more database tables  in the DBMS . These separate software components interact to provide the E-commerce website.","As mentioned above, each software component originates from, or uses, one or more files  that store executable object code. Similarly, data files  store data used by the software components. The data files  may store configuration settings, user data, system data, database rows and columns, or the like.","Together, these files ,  constitute resources required to implement the business process. In addition, resources may include Graphical User Interface (GUI) icons and graphics, static web pages, web services, web servers, general servers, and other resources accessible on other computer systems (networked or independent) using Uniform Resource Locators (URLs) or other addressing methods. Collectively, all of these various resources are required in order to implement all aspects of the business process. As used herein, \u201cresource(s)\u201d refers to all files containing object code or data as well as software modules used by the one or more software applications and components to perform the functions of the business process.","Generally, each of the files ,  is stored on a storage device -identified by either a physical or virtual device or volume. The files ,  are managed by separate file systems (FS) -corresponding to each of the platforms , , .","Suppose a business manager wants to implement a business level policy  regarding the E-commerce website. The policy  may simply state: \u201cBackup the E-commerce site once a week.\u201d Of course, other business level policies may also be implemented with regard to the E-commerce website. For example, a load balancing policy, a software migration policy, a software upgrade policy, and other similar business policies can be defined for the business process at the business process level.","Such business level policies are clear and concise. However, implementing the policies can be very labor intensive, error prone, and difficult. Generally, there are two approaches for implementing the backup policy . The first is to backup all the data on each device or volume -. However, such an approach backs up files unrelated to the particular business process when the device -is shared among a plurality of business processes. Certain other business policies may require more frequent backups for other files on the volume -related to other business processes. Consequently, the policies conflict and may result in wasted backup storage space and\/or duplicate backup data. In addition, the time required to perform a full copy of the devices -may interfere with other business processes and unnecessarily prolong the process.","The second approach is to identify which files on the devices -are used by, affiliated with, or otherwise comprise the business process. Unfortunately, there is not an automatic process for determining what all the resources are that are used by the business process, especially business processes that are distributed across multiple systems. Certain logical rules can be defined to assist in this manual process. But, these rules are often rigid and limited in their ability to accurately identify all the resources. For example, such rules will likely miss references to a file on a remote server by a URL during execution of an infrequent feature of the business process. Alternatively, devices -may be dedicated to software and data files for a particular process. This approach, however, may result in wasted unused space on the devices -and may be unworkable in a distributed system.","Generally, a computer system administrator must interpret the business level policy  and determine which files ,  must be included to implement the policy . The administrator may browse the various file systems -, consult user manuals, search registry databases, and rely on his\/her own experience and knowledge to generate a list of the appropriate files , .","In , one implementation  illustrates the results of this manual, labor-intensive, and tedious process. Such a process is very costly due to the time required not only to create the list originally, but also to continually maintain the list as various software components of the business process are upgraded and modified. In addition, the manual process is susceptible to human error. The administrator may unintentionally omit certain files , .","The implementation  includes both object code files  (i.e., e-commerce.exe. Also referred to as executables) and data files  (i.e., e-comdata1.db). However, due to the manual nature of the process and storage space concerns, efforts may be concentrated on the data files  and data specific resources. The data files  may be further limited to strictly critical data files  such as database files. Consequently, other important files, such as executables and user configuration and system-specific setting files, may not be included in the implementation . Alternatively, user data, such as word processing documents, may also be missed because the data is stored in an unknown or unpredictable location on the devices -","Other solutions for grouping resources used by a business process have limitations. One solution is for each software application that is installed to report to a central repository which resources the application uses. However, this places the burden of tracking and listing the resources on the developers who write and maintain the software applications. Again, the developers may accidentally exclude certain files. In addition, such reporting is generally done only during the installation. Consequently, data files created after that time may be stored in unpredictable locations on a device -","From the foregoing discussion, it should be apparent that a need exists for an apparatus, system, and method that automatically discovers and groups files and other resources used by a business process. Beneficially, such an apparatus, system, and method would automatically discover substantially all the resources used by a business process such that a business level policy can be applied to the business process as a whole. In addition, the apparatus, system, and method would apply heuristic routines to ensure that all the appropriate resources are included. Furthermore, the set of resources identified as affiliated with a business process would be modifiable to accommodate user needs and system changes over time.","The present invention has been developed in response to the present state of the art, and in particular, in response to the problems and needs in the art that have not yet been met for automatically discovering and grouping files and other resources used by a business process. Accordingly, the present invention has been developed to provide an apparatus, system, and method for automatically discovering and grouping resources used by a business process that overcomes many or all of the above-discussed shortcomings in the art.","An apparatus according to the present invention includes a monitoring module, an analysis module, and a determination module. The monitoring module collects trace data representative of operational behavior of one or more software applications included within a business process. Certain trace data may be collected during execution of the software application while other trace data may be collected regardless of whether the software application is executing. In one embodiment, the monitoring module collects trace data for all software applications of a computer system.","The analysis module analyzes the trace data to discover resources affiliated with the business process. Preferably, the analysis module applies one or more heuristic routines to identify both direct and indirect relationships between resources and the business process. The determination module defines a logical application that includes the discovered resources. Preferably, the logical application corresponds directly to the business process. As used herein, \u201clogical application\u201d refers to a set of all files and other resources required to provide the business level services defined for the business process. The term \u201clogical\u201d combined with \u201capplication\u201d is intended to include software applications within a single computer system and\/or those which may be distributed across multiple computer systems, but is not limited to this interpretation. In one embodiment, the analysis module and determination module operate iteratively on a logical application to ensure that all appropriate files are included in the logical application.","In certain embodiments, the business process is identified by an identifier or a characteristic of the software application. The identifier or characteristic may be provided through an interface. The identifier may comprise the name of an executable file or data file, name of a running process, or the like. The characteristic may comprise a well-known function performed by the software application. Preferably, the function is specific to the particular business process. For example, the software application may perform network communications using a well-known port number to communicate with a particular server or software module. Preferably, the identifier or characteristic is unique to the particular business process and clearly definable.","In one embodiment, the monitoring module and analysis module utilize information about resources previously identified as belonging to the logical application. Consequently, the monitoring module and analysis module may iteratively identify additional resources using an identifier and\/or information about previously identified resources. Once defined, the logical application may be provided to a management module that applies a business level policy to the logical application.","The monitoring module may include a launch module that initiates one or more activity monitors. The activity monitors may trace a specific type of activity relating to a resource. The activity monitors may operate independent of, or concurrent with, execution of the business process. A controller within the monitoring module may control the activity monitors. A storage module in the monitoring module may store trace data that describes a specific type of activity involving the resource. In one embodiment, the monitoring module includes a scanner that scans system information for trace data describing a specific type of activity by the business process. The monitoring module may operate concurrently with or separate from the analysis module.","The analysis module may include a query module, an evaluation module, and a discovery module. The query module, in one embodiment, may filter the trace data to produce a result set based in part on an identifier. The evaluation module may apply one or more heuristic routines to the result set to discover one or more resources affiliated with the identifier. The discovery module discovers one or more resources in response to the application of the one or more heuristic routines.","A method of the present invention is also presented for automatically discovering and grouping resources used by a business process. In one embodiment, the method includes receiving an identifier for a business process. The identifier is directly related to a resource that implements the business process. Next, trace data is collected relating to the resource and is representative of operations performed by one or more software components implementing the business process. Alternatively, trace data may be collected for all operations involving resources of a computer system. The trace data is analyzed (as referred to as data mining) to discover one or more resources affiliated with the identifier. Finally, a logical application is defined that includes the one or more discovered resources.","It should be noted that while the present invention is described in relation to logical applications that correspond to business processes, the logical applications are not limited to business processes. A logical application may correspond to any set of software resources employed for benign or malicious purposes. For example, the present invention may be used to identify a logical application defining spy-ware, ad-ware, viruses, and other software applications. The present invention may be particularly useful in defining logical applications for software applications which attempt to conceal what software resources are being used. In addition, the business process may correspond to a single software application.","The present invention also includes embodiments arranged as a system, computer readable code, and an apparatus that comprise substantially the same functionality as the components and steps described above in relation to the apparatus and method. The features and advantages of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","It will be readily understood that the components of the present invention, as generally described and illustrated in the figures herein, may be arranged and designed in a wide variety of different configurations. Thus, the following more detailed description of the embodiments of the apparatus, system, and method of the present invention, as presented in the Figures, is not intended to limit the scope of the invention, as claimed, but is merely representative of selected embodiments of the invention.","Many of the functional units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like.","Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, function, or other construct. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module.","Indeed, a module of executable code could be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network. Where a module or portions of a module are implemented in software, the software portions are stored on one or more computer readable media. A computer readable medium may take any form capable of storing machine-readable instructions executable on a digital processing apparatus.","Reference throughout this specification to \u201ca select embodiment,\u201d \u201cone embodiment,\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201ca select embodiment,\u201d \u201cin one embodiment,\u201d or \u201cin an embodiment\u201d in various places throughout this specification are not necessarily all referring to the same embodiment.","Furthermore, the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, user interfaces, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","The illustrated embodiments of the invention will be best understood by reference to the drawings, wherein like parts are designated by like numerals throughout. The following description is intended only by way of example, and simply illustrates certain selected embodiments of devices, systems, and processes that are consistent with the invention as claimed herein.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 2","FIG. 2"],"b":"200"},"The apparatus  may include an operating system  that provides general computing services through a file I\/O module , network I\/O module , and process manager . The file I\/O module  manages low-level reading and writing of data to and from files  stored on a storage device , such as a hard drive. Of course, the storage device  may also comprise a storage subsystem such as various types of DASD systems. The network module  manages network communications between processes  executing on the apparatus  and external computer systems accessible via a network (not shown). Preferably, the file I\/O module  and network module  are modules provided by the operating system  for use by all processes -. Alternatively, custom file I\/O module  and network modules  may be written where an operating system  does not provide these modules.","The operating system  includes a process manager  that schedules use of one or more processors (not shown) by the processes -. The process manager  includes certain information about the executing processes -. In one embodiment, the information includes a process ID, a process name, a process owner (the user that initiated the process), process relation (how a process relates to other executing processes, i.e., child, parent, sibling), other resources in use (open files or network ports), and the like.","Typically, the business process is defined by one or more currently executing processes -. Each process  includes either an executable file  or a parent process which initially creates the process . Information provided by the process manager  enables identification of the original files  for the executing processes -, discussed in more detail below.","In certain embodiments, the apparatus  includes a monitoring module , analysis module , and determination module . These modules , ,  cooperate to dynamically identify the resources that comprise a logical application that corresponds to the business process. Typically, these resources are files . Alternatively, the resources may be other software resources (servers, daemons, etc.) identifiable by a network address such as a URL or IP address.","In this manner, operations can be performed on the files  and other resources of a logical application (business process) without the tedious, labor intensive, error prone process of manually identifying these resources. These operations include implementing business level policies such as policies for backup, recovery, server load management, migration, and the like.","The monitoring module  communicates with the process manager , file I\/O module , and network I\/O module  to collect trace data. The trace data is any data indicative of operational behavior of a software application (as used herein \u201capplication\u201d refers to a single process and \u201clogical application\u201d refers to a collection of one or more processes that together implement a business process). Trace data may be identifiable both during execution of a software application or after initial execution of a software application. Certain trace data may also be identifiable after the initial installation of a software application. For example, software applications referred to as installation programs can create trace data simply by creating new files in a specific directory.","Preferably, the monitoring module  collects trace data for all processes -. In one embodiment, the monitoring module  collects trace data based on an identifier (discussed in more detail below) known to directly relate to a resource implementing the business process. Alternatively, the monitoring module  may collect trace data for all the resources of an apparatus  without distinguishing based on an identifier.","In one embodiment, the monitoring module  communicates with the process manager  to collect trace data relating to processes  currently executing. The trace data collected represents processes -executing at a specific point in time. Because the set of executing processes -can change relatively frequently, the monitoring module  may periodically collect trace data from the process manager . Preferably, a user-configurable setting determines when the monitoring module  collects trace data from the process manager .","The monitoring module  also communicates with the file I\/O module  and network module  to collect trace data. The file I\/O module  maintains information about file access operations including reads, writes, and updates. From the file I\/O module, the monitoring module  collects trace data relating to current execution of processes  as well as historical operation of processes .","Trace data collected from the file I\/O module  may include information such as file name, file directory structure, file size, file owner\/creator, file access rights, file creation date, file modification date, file type, file access timestamp, what type of file operation was performed (read, write, update), and the like. In one embodiment, the monitoring module  may also determine which files  are currently open by executing processes . In certain embodiments, the monitoring module  collects trace data from a file I\/O module  for one or more file systems across a plurality of storage devices .","As mentioned above, the monitoring module  may collect trace data for all files  of a file system or only files and directories clearly related to an identifier. The identifier and\/or resources presently included in a logical application may be used to determine which trace data is collected from a file system.","The monitoring module  collects trace data from the network I\/O module  relating to network activity by the processes -. Certain network activity may be clearly related to specific processes  and\/or files . Preferably, the network I\/O module  provides trace data that associates one or more processes  with specific network activity. A process  conducting network activity is identified, and the resource that initiated the process  is thereby also identified.","Trace data from the network I\/O module  may indicate which process  has opened specific ports for conducting network communications. The monitoring module  may collect trace data for well-known ports which are used by processes  to perform standard network communications. The trace data may identify the port number and the process  that opened the port. Often only a single, unique process uses a particular network port.","For example, communications over port eighty may be used to identify a web server on the apparatus . From the trace data, the web server process and executable file may be identified. Other well-known ports include twenty for FTP data, twenty-one for FTP control messages, twenty-three for telnet, fifty-three for a Domain Name Server, one hundred and ten for POP3 email, etc.","In certain operating systems , such as UNIX and LINUX, network I\/O trace data is stored in a separate directory. In other operating systems  the trace data is collected using services or daemons executing in the background managing the network ports.","In one embodiment, the monitoring module  autonomously communicates with the process manager , file I\/O module , and network I\/O module  to collect trace data. As mentioned, the monitoring module  may collect different types of trace data according to different user-configurable periodic cycles. When not collecting trace data, the monitoring module  may \u201csleep\u201d as an executing process until the time comes to resume trace data collection. Alternatively, the monitoring module  may execute in response to a user command or command from another process.","The monitoring module  collects and preferably formats the trace data into a common format. In one embodiment, the format is in one or more XML files. The trace data may be stored on the storage device  or sent to a central repository such as a database for subsequent review.","The analysis module  analyzes the trace data to discover resources that are affiliated with a business process. Because the trace data is collected according to operations of software components implementing the business process, the trace data directly or indirectly identifies resources required to perform the services of the business process. By identifying the resources that comprise a business process, business management policies can be implemented for the business process as a whole. In this way, business policies are much simpler to implement and more cost effective.","In one embodiment, the analysis module  applies a plurality of heuristic routines to determine which resources are most likely associated with a particular logical application and the business process represented by the logical application. The heuristic routines are discussed in more detail below. Certain heuristic routines establish an association between a resource and the logical application with more certainty than others. In one embodiment, a user may adjust the confidence level used to determine whether a candidate resource is included within the logical application. This confidence level may be adjusted for each heuristic routine individually and\/or for the analysis module  as a whole.","The analysis module  provides the discovered resources to a determination module  which defines a logical application comprising the discovered resources. Preferably, the determination module  defines a structure  such as a list, table, software object, database, a text eXtended Markup Language (XML) file, or the like for recording associations between discovered resources and a particular logical application. As mentioned above, a logical application is a collection of resources required to implement all aspects of a particular business process.","The structure  includes a name for the logical application and a listing of all the discovered resources. Preferably, sufficient attributes about each discovered resource are included such that business policies can be implemented with the resources. Attributes such as the name, location, and type of resource are provided.","In addition, the structure  may include a frequency rating indicative of how often the resource is employed by the business process. In certain business processes this frequency rating may be indicative of the importance of the resource. In addition, a confidence value determined by the analysis module  may be stored for each resource.","The confidence level may indicate how likely the analysis module  has determined that this resource is properly associated with the given logical application. In one embodiment, this confidence level is represented by a probability percentage. For certain resources, the structure  may include information such as a URL or server name that includes resources used by the business process but not directly accessible to the analysis module .","Preferably, the analysis module  cooperates with the determination module  to define a logical application based on an identifier for the business process. In this manner, the analysis module  can use the identifier to filter the trace data to a set more likely to include resources directly related to a business process of interest. Alternatively, the analysis module  may employ certain routines or algorithms to propose certain logical applications based on clear evidence of relatedness from the trace data as a whole without a pre-defined identifier.","A user interface (UI)  may be provided so that a user can provide the identifier to the analysis module . The identifier  may comprise one of several types of identifiers including a file name for an executable or data file, file name or process ID for an executing process, a port number, a directory, and the like. The resource identified by the identifier  may be considered a seed resource for the logical application, as the resource identified by the identifier  is included in the logical application by default and is used to add additional resources discovered by searching the trace data.","For example, a user may desire to create a logical application according to which processes accessed the data base file \u201cUsers.db.\u201d In the UI , the user enters the file name users.db. The analysis module  then searches the trace data for processes that opened or closed the users.db file. Heuristic routines are applied to any candidate resources identified, and the result set of resources is presented to the user in the UI .","The result set includes the same information as in the structure . The UI  may also allow the user to modify the contents of the logical application by adding or removing certain resources. The user may then store a revised logical application in a human readable XML structure . In addition, the user may adjust confidence levels for the heuristic routines and the analysis module  overall.","In this manner, the apparatus  allows for creation of logical applications which correspond to business processes. The logical applications track information about resources that implement the business process to a sufficient level of detail that business level policies, such as backup, recovery, migration, and the like, may be easily implemented. Furthermore, logical application definitions can be readily adjusted and adapted as subsystems implementing a business process are upgraded, replaced, and modified. The logical application tracks business data as well as the processes\/executables that operate on that business data. In this manner, business data is fully archivable for later use without costly conversion and data extraction procedures.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 3","FIG. 2"],"b":["200","302","304","306","308"]},"In one embodiment, the monitoring module  collects trace data  as a business process is executing. In other words, the monitoring module  collects trace data as applications implementing the business process are executing. However, the monitoring module  may also collect sufficient trace data  when a business process is not being executed\/operated. In addition, the interface  may receive an identifier that directly relates a resource implementing a business process to the business process. Preferably, the identifier is unique to the business process, although uniqueness may not always be required. This identifier may be used by the analysis module  in analyzing the trace data .","The monitoring module  includes a launch module , a controller , a storage module , and a scanner . The launch module  initiates one or more activity monitors . The launch module  may launch activity monitors  when the monitoring module  starts or periodically according to monitoring schedules defined for each activity monitor  or for the monitoring module  as a whole.","An activity monitor  is a software function, thread, or application, configured to trace a specific type of activity relating to a resource. The activity monitor may gather the trace data by monitoring the activity directly or indirectly by gathering trace data from other modules such as the process manager , file I\/O module , and network I\/O module  described in relation to .","In one embodiment, each activity monitor  collects trace data for a specific type of activity. For example, a file I\/O activity monitor  may communicate with a file I\/O module  and capture all file I\/O operations as well as contextual information, such as which process made the file I\/O request, what type of request was made and when. One example of an activity monitor  that may be used with the present invention is a shim application described in U.S. patent application number ###, hereby incorporated by reference. Of course, various other types of activity monitors may be initiated depending on the nature of the activities performed by the business process. Certain activity monitors may trace Remote Procedure Calls (RPC).","The controller  controls the operation of the activity monitors  in one embodiment. The controller  may adjust the priorities for scheduling of the activity monitors to use a monitored system's processor(s). In this manner, the controller  allows monitoring to continue and the impact of monitoring to be dynamically adjusted as needed. The control and affect of the controller  on overall system performance is preferably user configurable.","The storage module  interacts with the activity monitors  to collect and store the trace data collected by each individual activity monitor . In certain embodiments, when an activity monitor  detects a resource (executable file, data file, or software module) conducting a specific type of activity, the activity monitor  provides the activity specific trace data to the storage module  for storage.","The storage module  may perform certain general formatting and organization to the trace data before storing the trace data. Preferably, trace data for all the activity monitors  is stored in a central repository such as a database or a log\/trace file.","Typically, activity monitors  monitor dynamic activities performed during operation of a business process while the scanner  collects trace data from relatively static system information such as file system information, processes information, networking information, I\/O information, and the like. The scanner  scans the system information for a specific type of activity performed by the business process.","For example, the scanner  may scan one or more file system directories for files created\/owned by a particular resource. The resource may be named by the identifier such that it is known that this resource belongs to the logical application  that implements the business process. Consequently, the scanner  may provide any trace data found to the storage module  for storage.","In one embodiment, the monitoring module  produces a set or batch of trace data  that the analysis module  examines at a later time (batch mode). Alternatively, the monitoring module  may provide a stream of trace data  to the analysis module  which analyzes the trace data  as the trace data  is provided (streaming mode). Both modes are considered within the scope of the present invention.","The analysis module  may include a query module , an evaluation module , a discovery module , and a modification module . The evaluation module  and discovery module  work closely together to identify candidate resources to be associated with a logical application .","The evaluation module  applies one or more heuristic routines -to a set of trace data . Preferably, the query module  filters the trace data  to a smaller result set. Alternatively, the heuristic routines -are applied to all available trace data .","The filter may comprise an identifier directly associated with a business process. The identifier may be a resource name such as a file name. Alternatively, the filter may be based on time, activity, type, or other suitable criteria to reduce the size of the trace data . The filter may be generic or based on specific requirements of a particular heuristic routine -","In one embodiment, the evaluation module  applies the heuristic routines -based on an identifier. The identifier provides a starting point for conducting the analysis of trace data. In one embodiment, an identifier known to be associated with the business process is automatically associated with the corresponding logical application . The identifier is a seed for determining which other resources are also associated with the logical application . The identifier may be a file name for a key executable file known to be involved in a particular business process.","Each heuristic routine -analyzes the trace data based on the identifier or a characteristic of a software application represented by the identifier. For example, the characteristic may comprise the fact that this software application always conducts network I\/O over port . An example identifier may be the inventorystartup.exe which is the first application started when an inventory control system is initiated.","Each heuristic routine -may analyze the trace data in relation to the members of the logical application . A heuristic routine -is an algorithm that examines trace data  using a member of the logical application . The heuristic routine -seeks to identify candidate resources for which the trace data  indicates a potential relationship between a candidate resource and members of the logical application . Because the relationship is heuristically determined, the heuristic routine -assigns a probability that a candidate resource is associated to the logical application . This determination is very complex and difficult given such little information, about the logical application . Consequently, a plurality of heuristics of different probabilities are applied to provide as accurate of a determination as possible.","As used herein, the term \u201cheuristic\u201d means \u201ca technique designed to solve a problem that ignores whether the solution is probably correct, but which usually produces a good solution or solves a simpler problem that contains or intersects with the solution of the more complex problem.\u201d (See definition on the website www wikipedia org.).","In a preferred embodiment, an initial set of heuristic routines -is provided, and a user is permitted to add his\/her own heuristic routines -. The heuristic routines -cooperate with the discovery module . Once a heuristic routine -identifies a resource associated with the logical application, the discovery module  discovers the resources and creates the association of the resource to the logical application.","One heuristic routine identifies all resources that are used by child applications of the application identified by the identifier. Another heuristic routine identifies all resources in the same directory as a resource identified by the identifier. Another heuristic routine analyzes usage behavior of a directory and parent directories that store the resource identified by the identifier to identify whether the sub or parent directories and all their contents are associated with the logical application.","One heuristic routine determines whether the resource identified by the identifier belongs to an installation package, and if so, all resources in the installation package are deemed to satisfy the heuristic routine . Another heuristic routine examines resources used in a time window centered on the start time for execution of a resource identified by the identifier. Resources used within the time window satisfy the heuristic routine . Finally, one heuristic routine may be satisfied by resources which meet user-defined rules. These rules may include or exclude certain resources based on site-specific procedures that exist at a computer facility.","In one embodiment, the evaluation module  cooperates with the discovery module  to discover resources according to two distinct methodologies. The first methodology is referred to as a build-up scheme. Under this methodology, the heuristic routines -are applied to augment the set of resources currently within a set defining the logical application. In this manner, the initial resource identified by the identifier, the seed, grows into a network of associated resources as the heuristic routines -are applied. Use of this scheme represents confidence that the heuristic routines will not miss relevant resources, but runs the risk that some resources may be missed. However, this scheme may exclude unnecessary resources.","The second methodology, referred to as the whittle-down scheme, is more conservative but may include resources that are not actually associated with the logical application. The whittle-down scheme begins with a logical application comprising a pre-defined superset representing all resources that are accessible to the computer system(s) implementing the logical application, business process. The heuristic routines -are then applied using an inverse operation, meaning resources that satisfy a heuristic routine -are removed from the pre-defined superset.","Regardless of the methodology used, the evaluation module  produces a set of candidate resources which are communicated to the modification module . The modification module  communicates the candidate resources to the determination module  which adds or removes the candidate resources from the set defined in the logical application . The determination module  defines and re-defines the logical application  as indicated by the modification module .","Preferably, the evaluation module  is configured to apply the heuristic routines -for each resource presently included in the logical application . Consequently, the modification module  may also determine whether to re-run the evaluation module  against the logical application . In one embodiment, the modification module  may make such a determination based on a user-configurable percentage of change in the logical application  between running iterations of the evaluation module . Alternatively, a user-configurable setting may determine a pre-defined number of iterations.","In this manner, the logical application  continues to grow or shrink based on relationships between recently added resources and resources already present in the logical application . Once the logical application  changes very little between iterations, the logical application may be said to be stable.","Once the modification module  determines that the logical application  is complete (stable or the required number of iterations have been completed), the determination module  provides the logical application  to the interface . Preferably, the interface  allows a user to interact with the logical application  using either a Graphical User Interface  (GUI) or an Application Programming Interface  (API).",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":["308","308","402","402","330","330"],"i":["a","f "]},"User input  may be provided through a GUI . The GUI  may include an editor  which allows a logical application to be edited. The editor  may present the name and other details of the logical application as well as a list of resources currently associated with the logical application. A user may then add or delete resources from this list using the editor .","Once defined, a logical application may be exported from the interface  in a variety of formats using a formatter . In one embodiment, the formatter  produces a human-readable XML file that includes one or more logical applications and their associated resources.","Other software applications  may use the interface  to identify logical applications for use in these other software applications . For example, a management module  may call functions or methods of the API  in order to identify logical applications. In response, the API  provides logical application definitions in a published format.","The management module  may then apply business level policies  to the logical application. For example, the management module  may comprise the Tivoli storage manager . Given a logical application provided by the API , the storage manager  may apply a backup policy  to the logical application as a whole. In this manner, the backup policy  is automatically implemented for resources that may be spread across a number of storage devices and file systems. The labor intensive and error prone process of manually identifying the resources involved in satisfying the backup policy is avoided because the present invention has automatically identified the logical application.","Of course, logical applications representative of business processes may be used by various other software applications  to implement a variety of business level policies . For example, certain software applications  may implement load balancing policies, software migration policies, and the like using logical applications. In addition, the present invention allows these logical applications to be revised and re-defined as resources, and sub-components are upgraded or replaced.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 5","b":["500","500","502","504","506","502","504","506"]},"The system  may include a plurality of file systems (FS) -that use corresponding storage devices -. The I\/O module  may provide file information for all the file systems -","A monitoring module  collects trace data  during execution of software applications by the operating system . The monitoring module  may interact with the process manager , I\/O module , and file systems -to collect trace data . To collect certain types of trace data , the monitoring module  may include a process monitor , I\/O monitor , network monitor , and FS monitor . In one embodiment, the monitors , , ,  perform substantially the same functions in gathering trace data  as the activity monitors  discussed in relation to .","The monitoring module  provides the trace data  to an analysis module  which analyzes the trace data to discover resources affiliated with a business process. The analysis module  functions substantially similar to the analysis module  described in the embodiment of . The analysis module  may also define a logical application . The logical application  may be defined within a markup language data structure such as XML.","An interface  may allow a user to interact with the logical application  using a GUI . Alternatively, or in addition, the logical application  may be provided to other software applications  (See ) by way of an API .","The system  automatically discovers the resources (files, ports, etc.) used by a business process in a single system. Typically, business processes are implemented using a plurality of software applications. Even a single software application can have a high number of resources stored in various known and unknown locations on the same system. The system  automatically identifies the logical application that corresponds to the business process.","In certain instances, this logical application corresponds to a single software application. Because a logical application is automatically discovered, operations can be performed on the logical application as a whole rather than on sub-systems and sub-modules independently. These operations may include upgrading a logical application, deleting a logical application, backing up a logical application, and the like.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 6","b":["600","600","602","604"],"i":["a","e"]},"In the embodiment of , the present invention automatically discovers and groups resources associated with the business process. Specifically, a monitoring module -may execute on each computer system -that implements a portion of the business process. For example, a web server may implement a web interface with clients  over the Internet . Several application servers , may execute middleware software modules, and a couple of database management systems (DBMS) , may handle data for the business process. The computer systems -may operate a variety of operating systems including Linux, Mac, Windows, z\/OS, and the like.","Preferably, each monitoring module -collects trace data representative of operations of software applications on its host computer system -. The monitoring modules -may monitor all file I\/O, network, and process activity for all software applications executing on the host computer system -to ensure that trace data is collected for all resources that could potentially belong to the business process. Alternatively, the monitoring modules -may be more selective in determining what software applications are monitored.","A storage module  may execute on one computer system . The storage module  may communicate with each monitoring module -to collect trace data. The storage module  may periodically contact the monitoring modules -. Alternatively, the monitoring modules -may send trace data to the storage module  once a certain quantity of trace data is collected or trace data has been collected for a certain period of time. The storage module  may store the trace data in a central repository .","An analysis module , preferably on the same computer system as the storage module , analyzes trace data in the repository . The analysis module  in the embodiment of  functions in substantially the same manner as the analysis module  described in the embodiment of . One difference is that the trace data comes from a plurality of computer systems -rather than just the host computer system ","A user may use a GUI  to interact with the analysis module  to define and revise logical applications using the interface . Preferably, the user provides an identifier that identifies a first resource to be included in a list of resources comprising a logical application. Alternatively, or in addition, another software application may interact with the analysis module  using the API .","Together the storage module , analysis module , and interface module  cooperate in a subsystem  configured to automatically discover and group resources used by a business process according to trace data provided by the monitoring modules -. The system  defines logical applications by the resources the logical application actually uses.","These logical applications may be used by software management applications to apply business level policies to the logical application as a whole. Typically, these resources include data files and executable files. However, resources may also include service applications, such as web services, servers, agents, and daemons, enlisted by some portion of the logical application in performing its desired functions.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 7","b":["700","700","702"]},"The logical application is defined to include at least this resource. In one example, the identifier may comprise a file name of an executable file known to execute in order to implement the business process. As mentioned above, the identifier may comprise a port number or other distinguishing feature.","Alternatively, or in addition, a traceable characteristic of a software application that implements the business process may be identifiable using the identifier. For example, the identifier may comprise a data file name. The method  may be used to determine a logical application comprising all resources that access the data file directly or indirectly.","Next, activity monitors are initiated  to trace specific types of activities of resources. The activity monitors may function substantially the same as activity monitors  described in relation to . One activity monitor  may trace file I\/O, another may trace network communication, while another may trace executing processes. Preferably, the activity monitors  are not limited to operations performed by the resource identified by the identifier.","Preferably, while the activity monitors  operate, the business process is executed such that the behavior of the computer system includes operations performed by resources implementing the business process. Next, trace data defined by the activity monitors  is collected . In addition, the trace data may be reorganized and\/or formatted into a common format. The combined trace data is then stored . In certain embodiments, the trace data is stored in a central repository  (See ).","In addition to trace data collected during operation of software applications implementing a business process, system information may be scanned  for trace data. For example, file systems may be scanned for files having creation timestamps and\/or access timestamps indicative of software application activity. These scans may comprise a snapshot of the current status of the file system. Such information (trace data) may be used later to identify behavior of certain resources in implementing a business process.","System information may include resource related information. For example, system information may include the contents of directories and relationships between files and directories in a file system. System information may also include the listing of current processes running as well as relationships between processes and logs of permitted and prohibited network activity.","Next, collected trace data is analyzed  in view of the identifier provided in step  in order to discover resources affiliated with the identifier. In one instance, the affiliation may be between files. In another instance, the affiliation is between a file and network activity on a certain port number. Resources identifiable in the trace data are determined to be affiliated with the identifier and\/or other resources in a logical application according to one or more heuristic routines. Preferably, the discovered resources are affiliated with a business process that includes a software application for which trace data has been collected.","The process  defines  a logical application beginning with a resource identified by the identifier. In one embodiment, the analysis step  builds a collection (build-up) of related resources beginning with the resource identified by the identifier. As new resources are discovered, these are added  to the logical application. The logical application is modified to include resources that are affiliated with resources already associated with the logical application. If new resources have been added , the process continues with the analysis step  to determine if other resources are directly related to the newly added resources. If no new resources are added, the process  may end.","In another embodiment, the logical application is defined to include a pre-defined superset. The superset includes all resources accessible to a computer system (i.e., all the files in connected files systems). The analysis step  then applies heuristic routines to determine which resources to remove from the superset (whittle-down). If resources are removed, the analysis step  may be repeated until very few resources are removed on each additional iteration.","Alternatively, rather than repeating the analysis step  until no more resources are added\/removed, or only a few new resources are added\/removed, the process  may repeat the analysis for a predetermined, user-defined number of iterations. Those of skill in the art will recognize that the steps - relating to collection and storage of trace data may be performed separately from the steps  and - for receiving the identifier and performing the analysis. Consequently, the method  is not limited to the order of operation illustrated in .",{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 8","b":["800","800","802","606"],"i":["a","e "]},"Next, trace data is gathered  preferably by way of the monitoring modules  (See ). The monitoring modules  allow the behavior of the business process to be traced while placing a minimal overhead on the operation of the computer systems implementing the business process. The monitoring modules  may provide the trace data to a storage module  for storage in a central repository . The trace data serves as a historical record of the behavior of substantially all the processes on each of the inter-networked computer systems .","The trace data is then analyzed to discover resources affiliated with the business process by identifying those resources that are affiliated with the identifier (i.e., file name, port number, process ID, etc.). In one embodiment, certain heuristic routines are used to analyze the trace data in view of the identifier and characteristics of a resource identified by the identifier. According to the heuristic routines, the trace data may be searched  using a search criteria derived using the identifier and a heuristic routine.","For example, the heuristic routine may be based on resources accessed after a pre-determined time. Consequently, the trace data may be searched  using search criteria that includes trace records for resources accessed after the pre-determined time. Alternatively, the search criteria may simply comprise the identifier, such as a file name.","Typically, a search of the trace data produces a result set comprising trace records. In certain embodiments, a heuristic routine is applied  to the result set such that resources satisfying the heuristic routine are discovered. Alternatively, the heuristic routine may be applied  as all of the trace data is scanned. In yet another alternative embodiment, depending on the type of heuristic routine, the trace data may be scanned repeatedly to ensure that the heuristic routine is properly applied and that the trace data is fully utilized.","Next, resources satisfying at least one heuristic routine are assembled  into a logical application under the build-up scheme. Under the whittle-down scheme, resources satisfying at least one heuristic routine are removed  from a logical application comprising a superset of all resources available to the inter-networked computer systems .","Finally, business level policies both automated and manual are applied  to the logical application. Examples of business policies may include transaction load balancing, data and\/or software recovery, software migration, and backup. Other policies may include identification of a logical application comprising resources affected by a virus attack including resources comprising the virus as well as resources altered by the virus in one or more computer systems.","Those of skill in the art will quickly recognize the potential benefits provided by the present invention. The ability to automatically identify logical applications which correspond to legitimate business processes and\/or illegitimate processes and other distributed systems greatly simplifies the implementation of offensive and defensive business policies.","In summary, the present invention provides an apparatus, system, and method for automatically discovering and grouping resources used by a business process or other distributed system. The present invention is highly accurate because such extensive trace data is collected, and a plurality of accurate heuristic routines are employed in identifying resources. In addition, the present invention is highly configurable. A user may edit the automatically defined logical application, define heuristic rules if desired, and adjust the sensitivity of the heuristic routines that are applied. In this manner, the present invention may operate more conservatively or more liberally depending on the importance of the particular business process involved. The present invention may also interface with other software management systems to facilitate implementation of business policies. Furthermore, defined logical applications may be refined as more trace data becomes available. In this manner, logical applications may be modified to accommodate upgrades and changes to subcomponents of a business process over time.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
