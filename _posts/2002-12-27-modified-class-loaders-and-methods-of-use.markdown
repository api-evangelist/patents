---
title: Modified class loaders and methods of use
abstract: Methods and apparatus, including computer program products, implement a hierarchical arrangement of class loaders. Each class loader has a naming token, and each token driven class loader has one or more delegation tokens. A class definition request is received in a first, token driven class loader. If the first class loader has a parent class loader, the class definition is requested from the parent. If the parent is a token driven class loader, delegation tokens are used to delegate the class definition request to the parent. If the class definition is not obtained from a parent class loader, an attempt is made to obtain the class definition from the resources of the first class loader. If that also fails, the delegation tokens of the first class loader are used to find a matching child class loader and the class definition is requested from the matching child class loader.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985909&OS=06985909&RS=06985909
owner: SAP AG
number: 06985909
owner_city: Walldorf
owner_country: DE
publication_date: 20021227
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority under 35 U.S.C. \u00a7119 to commonly owned U.S. patent application No. 60\/346,440, filed Dec. 28, 2001, the disclosure of which is incorporated herein by reference.","The present invention relates to data processing and more particularly to class loading in an object oriented programming language, such as the JAVA programming language.","In the JAVA 2 environment classes are loaded only when they are used for the first time, thereby reducing memory usage and improving system response time. During runtime, the JAVA Virtual Machine (JVM) invokes one or more class loaders to load any necessary classes. Class loaders are objects that can be defined using the JAVA 2 programming language and represent instances of the class java.lang.ClassLoader. The java.lang.ClassLoader.loadClass method accepts a class name as an argument, and returns a class object that is the runtime representation of a class type. These class loaders may be user defined. For example, a user may create a class loader that is capable of providing class definitions from a remote location or to assign security attributes to a class loaded from a particular source.","A class loader needs to provide class definition data in the form of a byte array, containing valid JAVA byte code, to the Virtual Machine implementation. It is up to the specific class loader implementation how to actually do this. Some may read that data from files in the file system, some others may fetch that data remotely over a network.","A class loader L may create a class object C by defining it directly or by delegating to another class loader. If L creates C directly, we say that L defines C or, equivalently, that L is the defining loader of C. When one class loader delegates to another class loader, the loader that initiates the loading is not necessarily the same loader that completes the loading and defines the class. If L creates C, either by defining it directly or by delegation, we say that L initiates the loading of C or, equivalently, that L is an initiating loader of C.","At run time, a class is identified by a pair consisting of the name of the class and the defining loader for the class. This can be expressed by the notation C=<N,L> where C is the class, N is the name of the class, and L is the defining loader for the class. A class can also be described in terms of the initiating loader for the class using the notation C=Nwhere C is the class, N is the name of the class, and L is the initiating loader for the class. A class loader may initiate the loading of a class but delegate to another class loader the task of actually loading the class. For example, L may initiate the loading of the class named D but may delegate the responsibility for actually loading the class named D to another class loader L. If L is actually capable of providing the class, we end up having D=D. If L is the defining loader of the class then D=<D,L>=D.","For the sake of simplicity, we will frequently restrict our explanations to provision of class definitions, although class loaders can be used in the JAVA 2 environment to provide arbitrary other binary resources in an equivalent fashion.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1","b":["100","105","110","115","120","125","130","120","130","135"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2","b":["1","202","2","204","3","206","4","208","0","200","1","2","3","4","0"]},"In many JAVA based framework applications, the class loader tree approach is chosen to isolate the class loader relevant resources of framework entities (for example, applications running on the framework) from each other. This helps avoid class collisions on the one hand and enables dynamic loading and unloading of framework entities on the other hand. Since the different framework entities do not interfere with each others' class loader resources, the class definitions of the one entity may be loaded and unloaded without affecting other framework entities. A common parent loader enables provision of shared definition, commonly used Application Programming Interfaces (APIs) of the respective framework, for example.","However, in more complicated framework applications it is desirable that framework entities, as understood above, make use of each other by providing shared class definitions (and other class loader relevant resources), e.g., APIs. In order to so, a class loader assigned to a specific framework entity must be able to delegate to other class loaders that provide the APIs of other framework entities. The tree-based approach, as described above, is not sufficient when targeting for a dynamic model (loading and unloading of framework entities), where publishers of shared class definitions and users of shared class definitions are not known beforehand. Also, in complex situations, the tree-based approach is not sufficient to cover all valid combinations of use-relationships.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3","b":["1","2","1","2","1","1","2","2","1","2","1","300","300","305","2","1","1","2","315","2","305","2","1","310","300"]},"However, the running framework may not be aware of all the dependency relations in advance. For example, App may be loaded at an earlier point of time before App is loaded. A requirement that App, loaded after App, depends on API and has conflicts with API might require the framework to choose a completely different setup. For example, the framework may have to unload App in order to load App.","Alternatively, assume that there is a third application, App, that depends on API but would have conflicts with API. There is no valid tree-based setup that satisfies all dependencies.","In general, in one aspect, the invention provides methods and apparatus, including computer program products, for implementing a class loader in a hierarchical arrangement of class loaders. A method includes receiving a request for a class definition in a first class loader in an arrangement of class loaders, the first class loader being a token driven class loader, each class loader having a naming token, and each token driven class loader having one or more associated delegation tokens. The method determines whether the first class loader has a parent class loader and, if so, whether the parent class loader is a token driven class loader, and if the first class loader has a parent class loader, requests the class definition from the parent class loader, where if the parent class loader is a token driven class loader, requesting the class definition comprises using the delegation tokens to delegate the class definition request to the parent class loader. The method attempts to obtain the class definition from the resources of the first class loader, if the class definition is not obtained from a parent class loader. The method also uses the delegation tokens of the first class loader to find a matching child class loader and requests the class definition from the matching child class loader, if the class definition is not obtained from a parent class loader or from the resources of the first class loader.","Advantageous implementations of the invention include one or more of the following features. Using the delegation tokens to find a matching child class loader can include identifying a child class loader that has a naming token that matches one of the delegation tokens associated with the first class loader.","In general, in another aspect, the invention provides methods and apparatus, including computer program products, for providing a class definition. A method includes receiving a request for a class definition and delegation tokens associated with the request in a first class loader in an arrangement of class loaders, the first class loader being a token driven class loader, and each class loader having a naming token. The method determines whether the first class loader has a parent class loader and, if so, whether the parent class loader is a token driven class loader, and if the first class loader has a parent class loader, requests the class definition from the parent class loader, where if the parent class loader is a token driven class loader, requesting the class definition comprises using the delegation tokens to delegate the class definition request to the parent class loader. The method attempts to obtain the class definition from the resources of the first class loader, if the class definition is not obtained from a parent class loader. The method uses the delegation tokens of the first class loader to find a matching child class loader and requests the class definition from the matching class loader, if the class definition is not obtained from a parent class loader or from the resources of the first class loader.","Advantageous implementations of the invention include one or more of the following features. Using the delegation tokens to find a matching child class loader can include identifying a child class loader that has a naming token that matches one of the delegation tokens associated with the first class loader.","Advantages of the invention may include one or more of the following. The token driven class loader can be used to resolve complex dependency relations that cannot be resolved using tree-based class loaders. Framework applications may be designed to load and unload dynamically framework entities having complex dependency relations. The management of the class loader hierarchy and the class loader setup and runtime is easy because only the right set of delegation tokens must be computed for each class loader in order to resolve the dependency relations, rather than having to decide the placement of the class loader in the hierarchy of class loaders.The details of one or more implementations of the invention are set forth in the accompanying drawings and the description below. Other features and advantages of the invention will become apparent from the description, the drawings, and the claims.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["402","1","406","408","410","412"]},"The TDCL illustrated in  uses the naming token T () and the delegation tokens D, . . . , Dn () to provide a class definition when it is asked to do so by the runtime environment. The method loadClass () is called by the runtime environment to request a class definition from the TDCL. The loadClass method is the only method called by the runtime environment. The other methods implemented by the TDCL are used to implement the delegation by token mechanism. Table 1 illustrates pseudocode for the method loadClass.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"loadClass (name) : Class"]},{"entry":[{},"begin"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return loadClassByTokenDelegation (name, [D,...,Dn])"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Table 2 illustrates pseudocode for the method loadClassByTokenDelegation.",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"loadClassByTokenDelegation (name, tokens) : Class"},{"entry":"begin"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(P is defined) then \u2003\/\/i.e., if this loader has a parent class loader"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(P is a TDCL)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"C = P.loadClassByTokenDelegation(name, tokens)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"C = P.loadClass(name)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fi"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"fi"]},{"entry":[{},"if(C is defined) \/\/i.e., P was able to provide a class for the specified"]},{"entry":[{},"name"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return C"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return loadClassByTokenDelegationLocally (name, tokens)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fi"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"end"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table 3 illustrates pseudocode for the method loadClassByTokenDelegationLocally.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"loadClassByTokenDelegationLocally (name, tokens) : Class"]},{"entry":[{},"begin"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ by some implementation dependent means try to obtain"]},{"entry":[{},"\/\/ C from the assigned class definition resources."]},{"entry":[{},". . ."]},{"entry":[{},"\/\/end of non-specified code"]},{"entry":[{},"if (C is defined)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return C"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (tokens [ ] non-empty)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for all child loaders L of type TDCL that have a"]},{"entry":[{},"naming token that is in tokens"]},{"entry":[{},"begin"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"C = L.loadClassByTokenDelegationLocally"]},{"entry":[{},"(name, tokens)"]},{"entry":[{},"if (C is defined)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return C"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fi"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fi"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"fi"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5","b":["500","502","516","517","518","515","525"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 6","FIG. 6"],"b":["600","605","610","605","610","615","620","620","625","630","620","635","615","640"]},"The order in which a TDCL implementation checks the potential sources of a suitable class definition, the parent loader, its own resources, suitable child loaders, can be implementation specific. In one impementation of the TDCL, it is preferred to have class definitions flow from the root class loader to the class loaders that are lower in the hierarchy by checking the parent class loader first, the local resources of the class loader next, and the child class loaders whose naming token matches the current delegation token of the TDCL. The order in which the child class loaders with matching tokens are checked for a class definition is also implementation specific.","The delegation by token mechanism implemented by the TDCL as illustrated in  and  is backward compatible with the class loading delegation pattern implemented by the JAVA 2 environment. In a conventional JAVA 2 environment there is a tree of class loaders and the class definition knowledge propagates from the root of the tree to its leaves. In a conventional JAVA 2 environment the set of delegation tokens associated with the class is empty. Since the set of delegation tokens is empty, the TDCL will not delegate to child loaders. If there is no parent class loader associated with the TDCL or if the delegation to the parent class loader was not successful, the TDCL tries to obtain a class definition from the resources associated with the TDCL (step )",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 7A\u20137C","FIG. 3"],"b":["1","2","700","1","706","2","708","1","702","1","2","2","704","1","1","1","2","1","2","2","1","1","3","2","1","2"]},"The invention can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Apparatus of the invention can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by a programmable processor; and method steps of the invention can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","The invention can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), and the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","The invention has been described in terms of particular embodiments. Other embodiments are within the scope of the following claims. For example, the steps of the invention can be performed in a different order and still achieve desirable results."],"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7C","b":["2","1"]}]},"DETDESC":[{},{}]}
