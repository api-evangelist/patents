---
title: System and method for representing user interaction with a web service
abstract: Disclosed is a system and method for representing user interaction with a web service. The method comprises the steps of: acquiring a representation of the actions of a user performing a task with the web service; analyzing the acquired actions to determine semantics and at least one variable describing the user actions; and representing the semantics and the at least one variable in at least one script file, the at least one script file supporting performance of user interaction with the web service based on the semantics and a value provided for the variable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183004&OS=09183004&RS=09183004
owner: Hewlett-Parkard Development Company, L.P.
number: 09183004
owner_city: Houston
owner_country: US
publication_date: 20090605
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Web services are web applications that can be invoked via a Uniform Resource Locator (URL). Web service interfaces are typically complex as they require a user to remember websites, perform complex navigations, fill multiple forms and\/or undertake a sequence of action, often across multiple sites, in order to accomplish a specific task. This can be further complicated in the field of mobile communication where difficulties may be provided due to mobile device limitations (such as screen size, functionality restrictions, etc.) and connectivity issues, for example.","An appliance or widget model for customized packaging of complex actions or configurations to perform a specific single function is a known paradigm of simplification. For example, a weather widget may be activated to obtain weather information. Since different users perform different personal tasks on the web, and possibly in diverse ways, use of pre-packaged widgets does not scale. Also, creating a personal widget or appliance today means development of new web applications which mandates programming knowledge at least one of Java, JSP, Servlets, AJAX, JavaScript, Flex or similar technologies.","Embodiments provide a platform for developing personal software packages or appliances (hereinafter referred to as \u201cwidgets\u201d) simply by undertaking browser actions and without programming knowledge. Such widgets may then be invoked (or executed) in various different ways using various different devices. These widgets may also be shared for use by others.","Thus, there is provided a system that provides for automatic program generation enabling an end-user to create new widgets for completing favorite or regular tasks on the web.","Embodiments use a system that receives a sequence of user web actions or user web browser operations. The system then analyses the received action and associates them with higher level semantics to describe the users actions or intent so as to represent the user's task. The action sequences may be executed at a later time with different input parameters and\/or variable values when a similar task arises in future. Embodiments may also transform the user actions into a web program and\/or an executable application (such as a widget) to enable re-execution from a range of different client devices. Thus, embodiments provide a scalable mechanism to package typical user interaction patterns into instances which can be invoked using a single action (such as a single mouse-click) via an intuitive or simple interface appropriate for a client device. In other words, embodiments may simplify the use of web services so that a user can perform tasks with just a single click from different devices.","For the avoidance of doubt, reference to web services should be understood to include applications using conventional website-based or portal-based interfaces.","According to one aspect, there is provided a method for representing user interaction with one or more web services comprising the steps of: acquiring a representation of the actions of a user performing a task with the web service; analysing the acquired actions to determine semantics and at least one variable describing the user actions; and representing the semantics and the at least one variable in at least one script file, the at least one script file supporting performance of user interaction with the web service based on the semantics and a value provided for the variable.","According to another aspect, there is provided a method for representing task-based user interaction with a web service comprising the steps of: acquiring a sequence of, actions performed by a user of a web service; analyzing the actions to determine semantics and at least one variable which represent the recorded sequence of actions; and representing the semantics and variables in at least one file.","Thus, a users personally valuable web interaction across multiple web sites may be packaged into a simplified interaction. To enable an end user to easily specify such an interaction, embodiments allow the user to perform the interaction once on his web browser, which then records these browser actions and performs a semantic analysis of the actions and the web pages on which the actions were performed in order to generate a personal widget (TaskLet) which represents the user actions. The TaskLet can be invoked from different devices to perform the user actions at a later time. Further, the widget may be associated with a unique address (such as a Uniform Resource Locator (URL)) so as to be selectable to remotely initiate or invoke the performance of the user action(s) represented by the widget through other modalities.","By storing these widgets on remotely located storage system or server which are accessible via a communication network, the widgets can be invoked using a suitable communication device that can access the storage system or server via the communication network. Thus, a mobile telephony device can be used to invoke a widget using a mobile web browser, a short message service (SMS) message or even a voice commence, for example. This simplified interface to a personal task will enable non-Internet-enabled very low-end mobile phones to access Internet. Further, it may spare a great deal of non-productive time that would otherwise be spent executing frequent web-service interactions.","Embodiments define a concept called a TaskLet which represents a task-based personal interaction pattern and also provide a platform for automatically creating, sharing and executing TaskLets.","A TaskLet is used to capture and represent a user's preferred way of accomplishing a task. These TaskLets can be user-created, shared, customized and composed with other TaskLets and web services. For example, if a user frequently goes on 2-day trips from Bangalore to Delhi by Jet Airways, the user can create a custom TaskLet which, given just the date of travel, can book his regular flights and even reserve a hotel room (at his favorite hotel).",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","110"]},"A recording process  is used to record browser actions (referred to as \u201cBARs\u201d)  of a user. To achieve this the web browser application can be modified to record a user's web browser actions by recording the user actions into a file. For example, a users click of a button can be recorded by the modified web browser as button-click at x=100, y=200, wherein the values of the x and y variables records the x and y coordinates of the cursor when the button was clicked. Alternatively, a browser plug-in may be added into a web browser so as to record a user's web browser actions. The plug-in modifies HTML pages shown to the user to introduce java-scripts at all \u2018actionable\u2019 elements of the HTML DOM tree. Any action on this modified HTML page will be captured and written out like example provided above for the modified web browser. Purely by way of an example, such a browser plug-in may be implemented by building upon a public domain tool called \u201cGreasemonkey\u201d (a FireFox\u2122 extension by Anthony Lieuallen, Aaron Boodman, Johan Sundstr\u00f6m and available from http:\/\/www.greasespot.net).","The BARs are then parsed and analyzed to remove the instance-level detail. More specifically, the BARs  undergo a cleaning and templatization process .","In the cleaning and templatization process , firstly, the BAR action is converted to a semantic form where \u201cbutton click at x=100 y=200\u2019 is converted into a semantic representation such as \u2018SUBMIT for m=employee-registration\u201d, for example. This is achieved using a BAR code parser together with a HTML analyzer that associates the \u2018click actions\u2019 to \u2018DOM structure of the web page\u2019. Certain elements of these new representations can contain input parameters, such as \u201cTEXT_INPUT John as name\u201d having \u201cJohn\u201d as a potential input parameter. Also, \u201cHYPERLINK Gemini\u201d may have \u2018Gemini\u2019 as a potential input \u2018Gemini\u2019. Such elements that can be represented as parameters are automatically identified and are replaced with variable names in the semantic representation. \u201cTEXT_INPUT $var1 as name\u201d","The results of the cleaning and templatization process  are then passed to a parameterization process  which introduces variables instead of specific instance values. At the end of the cleaning and templatization process , a list of possible input parameters for a specific interaction pattern is generated, which can then be used to determine a list of free and bound variables for the task. A free variable is one which may change its value on future execution of the task, while a bound variable of a task typically retains its value across multiple executions of the task. For example, the user may be prompted to specify if for subsequent runs, they wish to be able to change parameters such as \u2018date\u2019 and\/or \u2018destination\u2019 of a flight booking TaskLet. Alternatively, the user may be asked to perform the action multiple times with different input parameters and the system can automatically determine the free and bound variables by analyzing the differences, in the inputs used on multiple recordings. The task is now represented as a script template together with a set of files defining free\/bound variables and the action-analysis data. Of course, it will be appreciated that the task may be represented using a single script file comprising a representation of the task, variables and action-analysis data. This new representation of web interactions can be treated as new language for programming web-based applications, where each web action is an instruction and variables represent potential alternative actions on web pages. Further since the above program itself was not programmer-written, but was automatically generated when the user performed the web actions using a web browser, it is an instance of a technical area called Programming-By-Demonstration or Programming-By-Example, here performed in the context of web interactions.","The actions are then optimized in an action optimization process  based on website  and user  models. Such optimizations enable faster execution of web actions and eliminate spurious actions.","The optimizer analyses the intermediate representation of the web instructions to determine actions that can be eliminated, by looking for common patterns. For example \u201cGOTO http:\/\/msn.com\u201d followed by \u201cGOTO http:\/\/hp.com\u201d clearly mean the first one is not used. Another \u201cGOTO http:\/\/msn.com; \u201cHYPERLINK Horoscope\u201d can possibly be replaced with \u201cGOTO http:\/\/msn.com\/horoscope\u201d. The results of the optimization process  are then passed to a TaskLet generator  which generates the task model which primarily consists of a TaskLet Template Script (TTS) file, representing the user actions. The task model may also comprise further files defining free and\/or bound variables and user data, for example.","The TTS supports replay of user's task (the recorded user interaction with multiple web sites) at a later time based upon new values provided for variables using possibly new modes of interaction (such as SMS, for example).","The TaskLet authoring environment  comprises a plurality of modules, each being appropriately adapted to perform a function which supports generations of TaskLets. By way of example, a TaskLet authoring environment according to an embodiment comprises an Input Format Handler (IFH) module, a task generalizer module, an action analyzer, a variable generator, a web page analyzer, and a user data parameterizer.","While the primary form of generating a TaskLet is through Programming-by-demonstration (by recording the user actions on the web browser), the embodiment allows other alternate mechanisms to specify the web task or user actions, such as human written instructions provided either directly in the TaskLet script language or in a natural language, or any other graphical tool or User Interface (UI) that enables the user to specify actions defining a web task or user interaction with a web service. Every such different way of task input will be processed by an Input Format Handler (IFH) adapted to handle many input formats of input actions. A specific example of an IFH is the BAR parser described earlier which is adapted to understand the BAR format .","A TaskLet generalizer module performs the process of TaskLet cleaning, templatization  and parameterization . The variable generator creates and maintains the set of variables provided as a result of templatization  of the task. The action analyzer creates and analyses an in-memory intermediate representation of the task actions to determine optimizable patterns used by the TaskLet optimizer . The variable generator also analyses multiple user action recordings to determine free and bound variables for automatic parameterization. A web page analyzer is used to analyze the web pages on which the actions were performed in order to extract and add to semantics of the task. For example, the visual labels for widget inputs are extracted from the page semantics for every free variable. A user data parameterizer is provided as a graphical interface allowing a user to identify changing variables (and possible values for the variable) across multiple tasks\/interactions.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},"Task. Models (or TaskLets)  generated according to an embodiment are stored in and\/or registered to a remote storage system, otherwise referred to as a TaskLet repository . The TaskLet repository  is accessible via a communication link  so as to enable sharing, adaptation, searching and execution of the TaskLets . By way of example, suitable communication devices, such as a computer , mobile telephony device  or a VoIP telephone , can access the TaskLet repository  via the communication link . Further, each TaskLet  is associated with a unique address (such as a Uniform Resource Locator (URL)) enabling it to be individually selectable and\/or executable. In other words, the TaskLet repository  is a repository of user tasks. Here it provides a cloud (web) service that enables task execution as a web service.","A TaskLet execution environment  comprises a TaskLet execution engine  (e.g. an appropriately programmed processor), a store of user data , a change handler  and a post processing unit . The TaskLet execution environment  also provides access to web sites and web services .","Thus, by way of example, a mobile telephony device  can be used to invoke a TaskLet by entering the URL associated with the TaskLet into a web browser provided by the mobile telephony device . A data request containing the URL generated by the web browser is then received by the repository  via the communication link  and the TaskLet uniquely associated with the URL is provided to the TaskLet execution engine  via the communication link .","The TaskLet is then interpreted by the TaskLet execution engine  taking account of the stored user data  and processing by the post processing unit  (according to output language requirements, for example).","The execution and effect of the TTS instructions in a Task model can depend on the current state of the HTML page on which the action needs to be executed. The change handler  determines the differences between the original HTML page and the current page from the website and determines the exact changes that may have happened to the webpages. This analysis together with the semantic instructions helps the TaskLet to be executed even when the web pages have been modified. For example, the \u201cSUBMIT\u201d button may have moved from (x,y)=(100,200) to (x,y)=(300,400), but the \u201cSUBMIT\u201d element on the for m=\u201cemployee-registration\u201d may not have changed.","In this way, the individual TaskLet is invoked by the mobile telephony device  so as to perform a desired user interaction with a web service . The performance may simply repeat a previous web service interaction in its entirety, or may replicate a previous web service interaction using different values (provided by the user data , for example) for one or more variables so as to undertake a different but related interaction.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3"},"A communication network  providing a plurality of web services, including media transcoding, summarization and language translation, for example, is accessible to mobile communication devices  (such as mobile telephony devices, PDAs, etc.), Personal Computer (PC) networks , and single PCs  via a TaskLet execution environment  (similar to that of ).","Provision of the TaskLet execution environment  as a web service thus enables voice\/SMS based invocation from mobile phones through Voice\/SMS Gateways  of a telecommunications infrastructure . Also, a client-side cache  on the mobile communication devices  enables TaskLets to be available or responsive when a communication link between the mobile communication device  and the TaskLet execution environment  is hindered or unavailable.","Additionally, the TaskLet repository may enable a full download of the a TaskLet to a client device, in which case, the user task represented by the task model of the TaskLet is transformed into a complete standalone Windows application that can be downloaded and executed on the client machine. One simple way of doing this is to package the TaskLet execution engine  and the TaskLet script as the core of the application and provide a graphical interface for the client application (widget).","Further, the TaskLet repository supports different web APIs (REST, SOAP, RSS feeds) for each TaskLet enabling composition and embedded use of TaskLets within other web services and web-based applications.","It will therefore be understood that TaskLets according to embodiment can be deployed on a client device, in a cloud of web services or at a telecom provider network. This enables intuitive web interaction through widgets, web browsers and from mobile phones via SMS and voice, for example.","For a better understanding, embodiments will now be described in the following sections.","Overall Architecture","As above, there is defined a \u2018TaskLet\u2019 for capturing a web-service interaction pattern. A TaskLet represents a user-specific way of performing a task with a web-service. For example, to book a flight from Bangalore to Delhi, a TaskLet will represent the browser action required to do the same (accessing the airline website, specifying source and destination airports, date(s), flight selection, and completing payment so as to obtain a booking reference number or electronic ticket). This TaskLet can be executed again at a later time with a different set of parameters so as to book a flight from Bangalore to Delhi on a different date and\/or using a different payment method, for example. A TaskLet can be, created even for a simple task, such as applying for annual leave through a company website, completing a bank transaction, or checking the forecast for tomorrows tide, for example.","A TaskLet is created by the user undertaking the web-service interaction actions on a browser (see section below entitled \u201cCreation of TaskLets\u201d for more details. Once created, a TaskLet can be stored and\/or registered with a personal repository. A user may use TaskLet stored in a different user's repository, with the TaskLet being appropriately adapted to the user (by binding with stored user data  for example).","Thus, when a same or similar task needs to be executed, the appropriate TaskLet is invoked using an appropriate mechanism (voice command, SMS message, mouse-click, touch gesture, etc.) which is mapped to a TaskLet execution URL. By addressing this URL, an instance of the TaskLet is executed by the execution engine  so as to perform the appropriate actions without further action being required by the user.","Creation of TaskLets","As mentioned above, embodiments record a user's actions to create new personal widgets. For this, the embodiments analyse the browser action recordings (BARs), extract the possible input parameters (by parsing the browser recording instructions and also analyzing the HTML pages on which the actions were performed) to perform parameterization and templatization of the recording.","This results in the generation of a special script called a TaskLet Template Script (TTS) which is then stored as a part of the Task model to the TaskLet repository of the user. An example of a TTS to convert a given input from Indian Rupees to Great British Pounds using a currency convertor website (www.xe.com) is provided below:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003GOTO URL=http:\/\/www.xe.com\/ucc\/"},{"entry":"\u2003INPUT position=1 TYPE=TEXT FORM_NAME=ucc "},{"entry":"\u2003ATTR=NAME:Amount"},{"entry":"CONTENT=$TLVAR1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003SELECT","position=1","FORM_NAME=ucc","ATTR=NAME:From"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CONTENT=$TLVAR2"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003SELECT","position=1","FORM_NAME=ucc","ATTR=NAME:To"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CONTENT=$TLVAR3"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003SUBMIT","position=1","TYPE=IMAGE","FORM_NAME:ucc"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ATTR=NAME:image"},{"entry":"\u2003EXTRACT TYPE=TEXT position=3 TYPE=H2 "},{"entry":"\u2003ATTR=CLASS:XE TEXT=*"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As will be noted from the exemplary script above, instead of specific syntactic raw actions on the web browser being captured, the script captures the operational semantics of the recorded interaction (far example, SUBMIT, SELECT, EXTRACT, HYPERLINK, etc.) which can be appropriately executed by the execution engine later according to the current state of the website.","Variable parameters (TLVAR, TLVAR, and TLVAR) have also been created. These variables are bound at the time of TaskLet instantiation (i.e. when the TaskLet is invoked), and the values they take may be defined as appropriate or desired (for example, by the user, the website, user data, or any combination thereof).","An example of a TTS for completing a search for a research paper within a digital library (of HP\u00ae Labs) at a (http:\/\/lib.hpl.hp.com) is provided below:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003GOTO URL=http:\/\/lib.hpl.hp.com\/"},{"entry":"\u2003HYPERLINK position=1 TYPE=A ATTR=TXT:ACMDigitalLibrary"},{"entry":"\u2003INPUT position=1 TYPE=TEXT FORM_NAME=emp "},{"entry":"\u2003ATTR=NAME:UID"},{"entry":"CONTENT=$TLVAR1"},{"entry":"\u2003SUBMIT position=1 FORM_NAME:emp ATTR=NAME:ACTION"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003INPUT","position=1 ","TYPE=TEXT","FORM_NAME=qiksearch"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ATTR=NAME:query CONTENT=$TLVAR2"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003SUBMIT","position=1 ","TYPE=IMAGE","FORM_NAME=qiksearch"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ATTR=NAME:Go"},{"entry":"\u2003EXTRACT TYPE=HREF position=1 TYPE=A "},{"entry":"\u2003ATTR TEXT=*Pdf*"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above sample TTS for a TaskLet takes the title of a research, paper and returns the URL of the paper after authentication with employee id (in step 3). The variables TLVAR and TLVAR are bound at the time of execution. TLVAR is bound with the employee id and TLVAR with the title of the paper being searched. Note that TLVAR can be bound the first time a user receives this TaskLet and uses it.","It will be understood that the TTS provides a new procedural programming language for the Web. It comprises operators with web action semantics, and opcodes as primitive browser web actions. This language provides an extendable instruction set for newer type of web analysis (for example, thick opcodes: EXTRACT TABLE for semantic table extraction using techniques such as MDR and RoadRunner, TOPIC DETECT for detecting topics from web pages, etc). Further, an extendable instruction set may be provided for new web browser support (INTERPRET JavaScript, EXPAND XSL).","Slots are provided to enable for composite TaskLets to be constructed for undertaking more complex web interactions.","In the TTS, each user-determinable input becomes a program variable, each alternate selectable paths become a program variable, and the concept of a user-bound web variable and free-web variable is provided. Further, the TTS enables subsequent binding (i.e. binding at a later time) of user-bound variables, makes sharing a means of authoring.","TaskLets may be composed or chained with other TaskLets and\/or web-services to provide more complex task workflows.","URL-Based Activation","Where embodiments store or register TaskLets with a repository, each TaskLet is allocated a unique TaskLet URL, which can then be used for invoking the TaskLet. If the TaskLet has unbound parameters (i.e. variables not having a value defined), standard URL conventions for passing arguments may be used. Thus, embodiments create a new paradigm of \u2018compressing a sequence of web actions\u2019 into a single web reference.","Dynamic Execution Engine","Invoking a TaskLet (by addressing its associated URL, for example) triggers the execution engine of a TaskLet after instantiation with appropriate parameter values. The execution engine interprets the TTS script and instructions to perform the required action on the website (web page). To accommodate dynamic content on websites, the execution engine can perform structural modeling of the websites (DOM structure is extracted) and uses the DOM attributes captured in the TTS to perform the action on the website.","For example, the first SELECT instruction in the exemplary script above is describing that the execution should fill up text box named \u201cFrom\u201d on the HTML FORM named \u201cucc\u201d with the current value of the variable \u201cTLVAR\u201d.","The execution engine is like a servlet engine in that its action results in a web service invocation to output only the required result. This enables execution of TaskLets from simple browsers available on mobile devices. Other embodiments can implement a Smart Telecom Gateway to map a user's telephone number to a TaskLet URL and perform appropriate speech-to-text and text-to-speech conversions at the input and output of the TaskLets, thereby enabling voice-based interactions with TaskLets. These text\/speech conversions are driven by dynamically generated voiceXML template files every time a new TaskLet is created, enabling a mechanism for dynamic voice-activated services.","Tracking and Audit Logs","An additional value provided by embodiments executing personal tasks through TaskLets (apart from simplification) is the ability to track all web actions (for example transactions) performed using TaskLets. The execution engine can be configured to log all the parameters and actions performed through the engine. This log can be searched at a later point in time to bring out useful history information which is not possible today with conventional browser-based electronic transactions. For example, a user may use this to search for all the booking reference numbers of his\/her Delhi visits in the previous six months, or to search for all transactions in the previous month where he\/she spent more than a specific amount of money.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 4","b":["400","410","420","440","450","410","410","440","450","430","450","410"]},"Embodiments enable TaskLets to be deployed either on a client device (desktop computer, laptop computer, mobile telephony device, personal digital assistant, etc.) or hosted as a cloud (web) service with a client-interfacing component. Because the platform decouples the task execution from the interface, it enables more simple and natural interfaces to be used from devices.","User-created TaskLets may be shared and executed in the field of mobile communications. Furthermore, since TaskLets can be addressed via a URL, embodiments separate the program from its interaction enabling familiar interfaces to be used for web transactions.","Embodiments enable simplification of personally valuable tasks on the web. The invocation mechanisms (such as mobile devices, SMS messages and voice-based commands) enable users to, use web-services without being aware of the even the URL of the website. Further, user adaptation while sharing TaskLets bridges the gap between an expert user and inexperienced user of the end widget.","Using embodiments, users can create new web services over existing web tools and portals without any explicit programming knowledge. Simple actions on the browser can be used to automatically generate web applications, empowering end users to create their own services. These services, if hosted on a telecom infrastructure (such as a cloud) can be a useful for hosted services as well as pay-per-use models for personal services.","End-user's can share their knowledge of a specific web interaction pattern with other users and other devices. For example, personal TaskLets created by one user can be shared with other users by having the required levels of customization by just sharing the URL of the TaskLet.","Also users can track personal web interactions and search the same at a later point in time:","Embodiments have the ability to capture web interactions in a website independent way, possibly enabling execution of similar tasks on multiple similar websites.","While specific embodiments have been described herein for purposes of illustration, various modifications will be apparent to a person skilled in the art and may be made without departing from the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of the invention, embodiments will now be described, purely by way of example, with reference to the accompanying drawings, in which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
