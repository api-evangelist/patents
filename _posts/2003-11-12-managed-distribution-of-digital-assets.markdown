---
title: Managed distribution of digital assets
abstract: A technique for establishing usage control over digital assets such as computer files. The system model not only tracks authorized users' access to files, but monitors passage of such files to uncontrollable removable storage media or through network connections and the like which may indicate possible abuse of access rights. In accordance with a preferred embodiment, an autonomous independent agent process running at a point of use, such a background process in a client operating system kernel, interrupts requests for access to resources. The agent process senses low level system events, filters, and aggregates them. A policy engine analyzes sequences of aggregate events to determine when policy violations occur.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814021&OS=07814021&RS=07814021
owner: Verdasys, Inc.
number: 07814021
owner_city: Waltham
owner_country: US
publication_date: 20031112
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/442,464 entitled \u201cMethod and System for Adaptive Identification and Protection of Proprietary Electronic Information,\u201d filed on Jan. 23, 2003. The entire teachings of the above-referenced application are hereby incorporated by reference.","Data security has been a significant issue facing system administrators since almost the inception of the data processing industry. Most computer users recognize the possibility of theft or misuse of data by unauthorized outsiders. The terms \u201chackers\u201d and \u201ccrackers\u201d are often used to describe outsiders who attempt to gain access to a system, and who are typically not involved in any way with an organization's operations, its internal employees or systems. Many different solutions already exist to protect an organization's data processing infrastructure from this kind of threat. These include physical access control, firewalls, sniffers and other network monitors, data encryption, intrusion detection systems and other solutions. These solutions are generally recognized as being adequate for their intended purpose most of the time.","However, there is a second class of computer users that also pose a security threat. Protection from these unauthorized insiders requires a different approach, but one that is also well known. Almost since the inception of disk-based storage systems, the concept of access control has been applied to limit the ability of certain users to access certain important files. Using these techniques, now a universal feature of almost every Operating System (OS), a desktop and\/or network file server can provide for limited read, write, public, private and other types of access to files, directory structures and the like, depending upon permissions granted to particular users. Permissions can be attached to user accounts by a system administrator, based on the need to know, the departments in an organization of which a user is a member, and so forth.","Even when users obtain access to only a portion of a system, however, they can still use a variety of techniques to steal and\/or damage information. These can include simple browsing for unsecured information in a network, and\/or removal or deletion of information made available as a result of poor security practices. More sophisticated rogue insiders will employ network packet sniffers and\/or spying software. A variety of approaches, such as centralized document and digital rights management systems, network auditing, and file management tools, can be effective tools against unauthorized use by insiders in some instances.","For example, U.S. Pat. No. 6,510,513 issued to Danieli and assigned to Microsoft Corporation describes a security and policy enforcement system that utilizes a series of transactions between a server and a client using electronic security certificates. A first client generates a request for access to data by submitting a security certificate containing a digest to a trusted arbitrator server. The trusted arbitrator authenticates the first client's credentials and returns the security certificate. The data and security certificate are then combined to create a distribution, which, in turn, is acquired by a second client. The second client extracts the security certificate and generates a digest from the data in the distribution. If the digest from the second client matches the digest from the first client, then data is considered to be valid. Depending upon the certificate type and a policy level, the trusted arbitrator server can provide services such as notification of improper usage.","U.S. Pat. No. 6,427,140 assigned to Intertrust Technologies is another type of digital rights management system. A system such as this was intended, however, to protect the rights of various participants in a transferring sensitive data, such as in an electronic commerce or other electronic facilitated transactions.","Neither of these solutions does much to protect misuse of information by authorized insiders. This class of users has a trusted status, as they are supposed to have access to important data files to carry out their assigned tasks. Thus, they are routinely granted permission to use such information on a daily basis. Their access to sensitive data therefore is not normally suspect. The problem comes when this class of trusted users abuse that trust\u2014by copying and then distributing sensitive information to outsiders or other unauthorized people. Such events can happen quite easily, and has been occurring with increasing frequency when a disgruntled or departing employee wishes to damage an organization.","What prior art security systems fails to account for is the fact that once granted access to sensitive information, it is quite easy for authorized users to distribute it in many different ways. The proliferation of Internet connections, e-mail, instant messaging, removable media storage devices, such as Compact Disk-Read Write (CD-RW) drives, Universal Serial Bus (USB) type memory and storage devices, and the like, make it a trivial task to copy vast amounts of information almost instantaneously. Other peripheral devices, such as wireless modems, wireless local network cards, portable computers, Personal Digital Assistants (PDAs), network tunnels, and the like, provide all too convenient vehicles by which an authorized user may distribute copies of files outside of the trusted system environment.","Even the most sophisticated file management systems cannot presently prevent such abuse. The root of the problem stems from the fact that once an authorized user opens a file, its contents are no longer controllable. Specifically, copies of the file contents may be taken \u201cout of\u201d the controlled environment of a network or file management system all too easily.","The present invention is intended to address security problems that originate when authorized users abuse their authority. The invention accomplishes this by restricting access at the point of use of a file, rather than simply controlling access at a storage point.","Specifically, an autonomous, independent agent process, such as running in the background of a client Operating System (OS) kernel, interrupts requests for access to resources. Such resource access requests may include, for example, requests to read a file, open a network connection, mount a removable media device, and the like. Since access is detected at the point of use, in the OS kernel interrupt mechanism, tracking of resource utilization will occur regardless of whether the original directly access request originated from an application program that is being executed by an end user, indirectly by applications on behalf of users, or even by system requests made independently of application software.","The autonomous independent agent process contains sensors that capture low level system events. These sensors may include operations such as file read, file write, file copy, clipboard cut, clipboard copy, CD-RW access, TCP\/IP network message inbound, TCP\/IP network message outbound and the like.","Low level events are then associated with one or more file names (handles) and filtered against an approved list. Thus, the raw events are filtered to remove references to files such as operating system files (.EXE, .DLL, etc. in the case of Microsoft Windows) and the like that do not contain sensitive application data. Only events relating to application files that may contain sensitive data are thus further tracked.","For example, an aggregate \u201cFileEdit\u201d event might be reported when a user has opened and modified a sensitive financial document, with that user then attempting to save it to a newly attached USB portable hard drive.","Other aggregate events can provide control over user access to files, applications, networks and peripheral bus interfaces. Such aggregate events are typically defined by a system administrator to actively enforce policies governing the acceptable use of system resources. Enforcement can then take place at the time and place of information access, via the agent process.","For example, the administrator may develop logic predicates that control the use of desktop applications, networks and interfaces that are otherwise unmanaged conduits for information leakage. These predicates may prevent, restrict, or require documentation for access to peripheral devices that are capable of storing massive amounts of information, such as Universal Serial Bus (USB), hard disk drives, Compact Disk-Read Write (CD-RW) burners, Instant Messaging (IM) applications and peer-to-peer network connections. Policies governing the use of these resources can be as detailed as required by the organization. Thus, the agent process' response to policy violations can be aggressive as the assessed risk demands, in accordance with the particular organization's requirements. The autonomous disconnected operation of the access control allows enforcements of policies to be carried out in a way that is as mobile as the user's other system.","Specific enforcement options can include: allowing the user action with a prompt for required user input (such as specifying a business justification); blocking the user action, or generation of a warning and\/or an alert to a compliance or security manager. Optional warnings to a user and\/or prompts for input reinforce the user's understanding and acceptance of acceptable use policies.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","102","104","108","106","108","110"]},"Traditional security models attempt to prevent access by an untrusted outsider  to devices  and\/or file servers  within the protected network . Thus, a network perimeter  is typically associated with network points of access, such as through router  and specifically at a firewall . The firewall  can thus prevent attempts by unauthorized users of outside computers  to access information stored in the server  or otherwise manipulate the local computers . Firewalls  can also establish a perimeter  for outgoing access such as, for example, by users attempting to access certain undesirable outside computers  that contain restricted or harmful websites, game servers, and the like.","Rather than establishing a perimeter at external points of physical access to a network, the present invention establishes a perimeter of accountability for file usage at the point of use. The accountability model can not only track authorized users of the computer  accessing files stored on a local server , but more importantly also monitors attempts to access or move such files to peripherals that distribute or record information, or other possible abuse events.","Such possible abuse events may occur whenever a user accesses devices which are not visible to or controllable by a local file server  or firewall . These events may include writing files to uncontrolled media such as Compact Disk-Read Write (CD-RW) drives , Personal Digital Assistants (PDA) , Universal Serial Bus (USB) storage devices , wireless devices , digital video recorders , or even printing of files. Other suspect events can include running external Peer-to-Peer (P2P) applications , sending files via external e-mail applications , running Instant Messaging (IM) applications, uploading files to web sites via the Internet , and the like. Thus, the invention can provide enterprise-wide monitoring of all file, application and network use. As will be understood shortly, the heart of this approach consists of a high level contextual stream that characterizes user activity as it occurs at the point of use, such as the desktop , and then potentially controlling its occurrence according to defined policies.","Turning attention to , the process for controlling distribution of digital assets will now be described in more detail. A first system component, called an agent process , is interposed between an Operating System (OS)  and applications  as they run on clients  and\/or servers  within the network . The agent process  has sensors or shims to detect and track file, printing, clipboard, and I\/O device operations, such as file read or write operations. These sensors may include, but are not limited to, file system sensor  (including CD\/DVD burn sensor ), network sensor , print sensor , clipboard sensor , API spy  and process spy .","While the clients normally include desktops - which have a direct wired (or wireless) connection  to the local network , the agent  may also run on disconnected client computers such as laptops -, making a report of events once a connection is eventually made to the network .","The agent  reports atomic events  to an activity journaling process typically running on an activity journaling server -. The journaling server - (also referred to herein as the Digital Guardian\u2122) processes atomic event data and coalesces it into what are called aggregate events . Aggregate events  are detected when a certain predetermined sequence of atomic events occurs. Each aggregate event  is thus composed of one or more atomic events  that conform to some predetermined pattern indicative of activity that should be monitored.","Specific types and\/or sequences of atomic events  that lead to aggregate events  will be described in detail later. It should be appreciated here, however, that the particular events reported and their aggregation types depend upon the specific activities sought to be monitored.","In addition, predicates  that define enforcement policies are forwarded to the agent process . These may originate from configuration commands entered at management console - and be sent through the Digital Guardian server -.","To protect the network completely, the agent process  would typically reside on all desktops  and file servers  associated with an enterprise's networks. The activity journaling server  and agent process  may communicate through secure, networking based applications such as the Microsoft \u201c.NET\u201d infrastructure or other secure networking systems. The management console - also permits access to the database stored in the Digital Guardian server -, and is used specifically to provide risk compliance, forensic reporting, and similar reports  to administrative users of the system.","The journaling server - may typically run within a Windows 2000 Server environment having a secure .NET framework. The journaling server - also has access to a database, such as Microsoft SQL Server 2000 for example, to provide record storage and retrieval functions. It is to be understood, of course, that the processes described herein can be implemented on other types of operating systems, server platforms, database systems, and secure networking environments.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["300","500","520","530","580","585","590","595","300"]},"The agent  preferably runs as a kernel process in a client Operating System (OS). For example, the agent  may run within the kernel of Microsoft Windows 2000 or Windows XP. Autonomous operation of the agent  provides for detection of atomic events  even when client  is disconnected from the network . Any such events are reported when the client  is reconnected and can communicate with the Digital Guardian server -.","In a preferred embodiment, the agent  will run multiple services under Windows so that if one service is stopped by a malicious user, the other one may restart the other process. The process is also hid from a task manager or similar processes in the operating system and will be able to work with safe mode boot features in order to guarantee full protection.","Atomic event sensors  report atomic events as an output when actions, typically associated with Input\/Output (I\/O) drivers, are intercepted at the OS kernel. The agent process  is therefore transparent to the end user and tamper resistant. The intercept may, for example, occur during an I\/O Request Packet (IRP) in an interruptible kernel. Events may also be provided by Windows services and kernel level drivers.","The sensors  may include file operation sensor  (including CD\/DVD burn sensor ), network operation sensor , print queue sensor , clipboard sensor , Application Programming Interface (API) spy sensor  and other sensors such as process spy .","Data collected with an event depends on the event type, but can include:\n\n","An approved file filter  operates to automatically filter the dozens of inconsequential events generated by standard calls to system files. For example, it is quite common for many different .EXE and .DLL operating system files to be opened and accessed repeatedly in a typical executing Microsoft Windows application. In order to reduce the data flow to the journaling server -, the file filter  uses an approved file list  to filter atomic (raw) sensor events .","The approved file list  may be implemented as a list of file names associated with events. However, in a preferred embodiment, the well known MD5 algorithm is used to generate a hash code for each file name. The MD5 hash code for a filename associated with an event is then matched against the approved list , rather than the complete file handle, to speed up the filtering process. Thus, only events associated with unapproved files are passed down to the coalescing stage .","The next stage is an atomic event coalescing stage  that attempts to aggregate atomic events . The coalescing stage  further filters atomic events  associated with or related to a single user action between the agent  and the Digital Guardian server . In general, applications frequently read small chunks of a file and not the entire file at the same time. For example, a user may open a 2 MegaByte (MB) spreadsheet file. However the OS may at a given time actually only access chunks of the spreadsheet file that are much smaller than that, such as 5 or 10 KiloBytes (KB) at a time. Thus, a typical pattern of access is to see a file open atomic event, followed by multiple read atomic events to the same file. If this sequence of atomic events is seen from the same process and the same executable with the same thread ID and the same file handle, event coalescing  will thus count only a single \u201cFileOpen\u201d event. In a preferred embodiment, there is a time attribute associated with event coalescing  such that if a time limit typically measuring in minutes of time is exceeded, at least one event will be reported between raw level events.","A comprehensive list of typical low level atomic events and high level event patterns is shown in . For example,  different action types, some of which are low level atomic events and others which are high level aggregate events, are defined in the preferred embodiment. A given event is composed of several fields in the database, including perhaps an action type , level , event category , event name , event table ID , action detail , action detail value , and discriminants .","Event categories are associated with each event type. For example, in an event category \u201cfile\u201d, event names include file read, file write, file rewrite, file copy, file rename, file delete, file move, file recycle, file restore. Similarly, network related events are TCP\/IP inbound, TCP\/IP outbound, USB inbound and so forth.","A scope is also associated with each event type. A scope is defined as either being a thread, process, login, machine, or all type scope. For example, \u201cprocess\u201d scope is an event that is consolidated into a high level event in the same process but not necessarily executing the same thread. \u201cMachine\u201d means that a reboot could occur between two events that occurred on the same machine.","Attributes commonly recorded for all high level events include an action type, an event count, bytes read count, bytes written count, event start, event end, and other possible actions. Source and destination hold numerous other attributes including the file, path, process, thread, and application identifying information that performed the event.","Other types of system events may include print events, disk write events, clipboard, user and machine events. The final type of low level event may be process events including process start and process end.","High level aggregate events are created by detecting a combination of the occurrence of low level events. More particularly, a high level aggregate event (action types 26-42) is determined after seeing a specific sequence of lower level events (action types 1-25). For example, action type 26 is a high level event called \u201cFileEdited\u201d. This is an aggregate event that determines when a file has been edited. As the table indicates, the high level event aggregation process  may detect that a particular process, thread, and file has performed one or more reads to a particular file handle, followed by a write operation to the same process, thread and file handle. The event is then defined as an aggregate \u201cFile Edited\u201d event.","Aggregate events are defined in greater detail in , B, C and D. For example, a \u201cClipboard to File\u201d aggregate event  is defined as detecting a clipboard cut or copy followed by a clipboard paste to file operation.","Similarly, a \u201cBurnFile\u201d event is associated with detecting a CD write atomic event followed by a file read atomic event. Thus, if a series of file reads are detected from one file handle, followed by a series of CD write events with the same process, the application is recognized as having written a file to a CD-RW.","Numerous other aggregate events are possible; the list in , B and C is only meant to illustrate a few of the many possibilities.","An event bus  serves to distribute if one or more aggregate events to predicate rules -, . . . , -. An event cache  may also share events occurring during a certain time interval for use by the predicates . Events are thus fed to one or more predicates , which serve to implement policy logic. As one example of a predicate, logic might be implemented to block peer-to-peer file transfer applications. A predicate -can thus be developed to detect a \u201cnetwork open\u201d event followed by a \u201cread hard disk drive\u201d event. As mentioned previously, the code to implement predicates  is typically downloaded from the Digital Guardian server -, such as driving a user  boot process.","Another example of a multi-event control predicate  would be to prevent files that originate from a specific server from being removed from that machine. This involves placing the files on a tracking list to watch for all derivative file re-names, copies, etc, and remembering these derivative names as well as the where a user first identifies source when removal actions are attempted.","Another predicate  can be used for blocking of a file, or a series of files from being burned to CD\/DVD. The process of burning files is a multi step process, to the file burning application of choice which file to burn, and then an actual attempt to burn them. So, a series of small file reads occur, followed by writing to a temporary file for buffering of data, followed by the actual burn operation.","When predicates -detect a policy violation, notification is given to a policy enforcement engine . The policy enforcement engine  then takes steps to enforce the policies as represented by the predicate  at the point of use\u2014that is, within the user kernel. One such enforcement mechanism may be via kernel IRP control. Thus, events that result in an IRP request may be intercepted by the kernel and examined by the policy enforcement engine . If the requested IRP is not a violation, then the policy enforcement engine , through the IRP filer , allows the requested action to proceed.","However, if the requested action is a potential policy violation, then the policy engine  will take additional appropriate actions. These may include a number of actions , such as having the OS fail the IRP, such as action . The user and\/or application thus interpret this as a failure of the specific operating system service or hardware device implicated in the request.","However, other types of actions can take place. For example, the operating system may generate a usual warning to the user that the requested action violates policy. This can occur by sending a message but then allowing the request to continue, as in a warn action .","A warn-requiring-reason action  is similar, but also requires the user to provide input to document the reason for the policy violation.","In a notify-block action , the user is notified that the request violated a policy and the action is blocked.","Finally, in a server alert action , an alert may be given to the journaling server - to indicate that the policy has been violated, providing additional information such as the identification of the user, the files involved and so forth.","It can now thus be seen how actions  which may occur as a result of the policy enforcement engine  may have a range of severities including simply failing the request, allowing the request to continue but logging the event, prompting the user for information as to why the policy is about to be violated and\/or prompting with other restrictive and\/or permission requesting notices.",{"@attributes":{"id":"p-0065","num":"0072"},"figref":"FIG. 6","b":["590","602","603","604","605","700","604","604"]},"Similarly, a block clipboard copy action - can be implemented to prevent clipboard copy operations from originating inside enterprise application .","A warn-on-file-copy action - has also been implemented which warns a user - when attempting to copy a file to a USB type device. The warn action - can send a message to the user but then allow the copy request to continue.","A policy may also be implemented to implement a warn-requiring-reason action - to prompt for a business purpose when a user attempts to burn a file to a CD. The action - causes a notice box  to be displayed at the user - requiring a response. Once the box is completed with a reason for the policy violation, the burn request is allowed to continue.","Finally, an alert action  may be implemented to control Instant Messaging (IM) file transfers. Here, information relating to the attempted activity can be provided to the journaling server - to indicate that the policy has been violated providing additional information, such as identification of the user, the files involved and so forth, in a way that is completely transparent to the user.","The policy enforcement engine  can also implement other policy schemes. For example, it may tally violations and take appropriate actions according to a \u201cdemerit\u201d procedure. For example, one of the predicates  may be a demerit predicate that counts the number of times that a particular user attempts to violate a security policy. The demerit system can thus be used to determine when a user is attempting to \u201choard\u201d digital assets. For example, a user may be detected as opening or copying many files in a very short time period such as a day. If the source is a network share location and the user has for example copied greater than 100 MegaBytes (MB) in a single day, and counting predicate violations can rise to a more severe system report and denial of further usage.","With this system of actions, the applications and\/or user do not necessarily know what is happening. That is, actions can be taken entirely with the operating system kernel which simply denies the IRP.","If the user confirms an action, this may also be used to provide evidence of the user's intent in a later analysis of a situation where valuable assets have been misappropriated.","While this invention has been particularly shown and described with references to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 5A-5D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
