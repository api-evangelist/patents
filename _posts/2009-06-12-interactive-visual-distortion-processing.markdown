---
title: Interactive visual distortion processing
abstract: A system includes a computing device that includes a memory for storing one or more computer graphics, and a graphics distorter. The graphics distorter applies a distortion model to the computer graphic to produce a distorted version of the computer graphic, while substantially simultaneously allowing user interactions with the computer graphic. The applied distortion model represents lens distortion.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08446433&OS=08446433&RS=08446433
owner: Lucasfilm Entertainment Company Ltd.
number: 08446433
owner_city: San Francisco
owner_country: US
publication_date: 20090612
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This document relates to interactively processing computer graphics to simulate visual distortions such as lens distortion.","In the ever expanding field of analog and digital photography, camera lens may be designed to suit nearly any photographic situation. For example, by selecting an appropriate lens for a particular situation, unique and breathtaking photographs may be captured that might not be visual with the naked eye. Zoom, wide-angle, macro, telephoto, and other types of lens may be available from an overwhelming array of camera lens. In general, lens direct light rays to recreate an image as accurately as possible on film, a digital sensor, etc. As with most manufactured products, imperfections may be introduced during production or through use (e.g., mishandling of lens, accidents, etc.). Based upon the introduced imperfections, optical aberrations may occur when the directed light rays do not appropriately translate though the lens, causing image blurring, reduced contrast or color misalignment or other similar phenomena.","The systems and techniques described here relate to applying models that represent lens distortion to a computer graphics while allowing a user to interact with the computer graphics.","In one aspect, a computer-implemented method includes applying a distortion model to a computer graphic to produce a distorted version of the computer graphic, while substantially simultaneously allowing user interactions with the computer graphic. The applied distortion model represents lens distortion.","Implementations may include any or all of the following features. For example, the method may further include combining the distorted computer graphic with an image captured with a lens. The distortion model may represent distortion provided by the lens. User interactions may include manipulating the computer graphic as the distortion model is applied. In some arrangements, the distortion model may include a reduced sample set. A predefined threshold may be used to determine the size of the reduced sample set. For example, the predefined threshold may be based upon a comparison of the reduced sample set distortion model and a distortion model that includes a complete sample set. The predefined threshold may also represent the difference between a pixel represented in the reduced sample set distortion model and a pixel represented in the complete sample set distortion model. The predefined threshold may represent various quantities such as a fraction of a pixel. Portion of the computer-implemented method may be repeated. For example, applying the distortion model to the computer graphic may include repetitively applying the distortion model during user interactions with the computer graphic. The computer graphic may also include a computer generated three dimensional object, an image or other type of object. The computer graphic may also represent a user selection device. The distorted version of the computer graphic may also have a relatively low resolution.","In another aspect, a system includes a computing device that includes a memory for storing one or more computer graphics, and a graphics distorter. The graphics distorter applies a distortion model to the computer graphic to produce a distorted version of the computer graphic, while substantially simultaneously allowing user interactions with the computer graphic. The applied distortion model represents lens distortion.","In another aspect, a computer program product tangibly embodied in an information carrier and comprising instructions that when executed by a processor perform a method that includes applying a distortion model to a computer graphic to produce a distorted version of the computer graphic, while substantially simultaneously allowing user interactions with the computer graphic. The applied distortion model represents lens distortion.","Like reference symbols in the various drawings indicate like elements.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100"]},"The exemplary visual processing system  includes a camera , however multiple cameras may be utilized in some implementations. The camera , for example, may be configured to capture moving or still images. Along with other components, the camera  includes a lens  that may fall into one of many categories (e.g., macro lens, wide-angle lens, telephoto lens, fisheye lens, zoom lens, etc.). Such lenses are typically afflicted with small imperfections that can distort captured images. In some cases, such imperfections may be minute and barely noticeable, or, in other cases noticeable distortions may be detected even by the untrained eye. Regardless of severity, distortion caused by imperfections may be characterized and cataloged like individual fingerprints. For example, the distortion may be characterized by one or more distortion patterns and cataloged with information associated with the corresponding lens (e.g., lens type, model, serial number, manufacturer, date of manufacture, etc.).","To characterize and catalog these lens distortions, in this particular example, the visual processing system  includes a computer system . To provide such functionality, the computer system  can include one or more components such as processing devices (e.g., one or more microprocessors), input devices (e.g., camera interfaces), output devices (e.g., displays), and storage devices (e.g., memories, hard drives, CD-ROMs, etc.).","To characterize lens distortion, one or more techniques and methodologies may be implemented. For example, calibration images can be produced and captured in images by the lens  to develop one or more distortion profiles that characterize the lens distortions. In this particular arrangement, a calibration image  can be captured in an image (at a perspective represented by a sight line ) by the camera  using the lens . Various types of designs and patterns (e.g., grids) with known characteristics (e.g., pattern elements, element size and position, etc.) may be illustrated on the calibration image  to allow the distortion to be quantified. As shown by process arrow A, aspects of the calibration image  can be made available to the computer system , for example, by one or more representations (e.g., visual image, numerical data). As such, an undistorted representation of the calibration image  may be used by the computer system , for example, in comparisons of distorted representations of the image.","As illustrated by process arrow B, a captured calibration image  can be captured by the camera  (using the lens ) in which the calibration image  is the subject of the image. Depending upon properties of the lens  the captured calibration image  can include, for example, varying types and amounts of distortion. As shown by process arrow C, one or more representations (e.g., visual, numerical data, etc.) of the captured calibration image  can be provided to the computer system . In some implementations, the captured calibration image  can be transferred to the computer system , for example, as an image or data file. For this particular system layout, processing the captured calibration image  is primarily executed at the computer system , however, in some implementations, the camera capturing the calibration image or another computing device operating nearby the camera can process the captured calibration image. For example, upon processing the calibration image , the camera  may transfer associated image data (e.g., relative positions and sizes of pattern elements as distorted by the lens ) to the computer system  for additional processing, storage and use.","As shown by process arrow D, in some implementations, the computer system  uses the calibration image  and the captured calibration image  to produce a distortion model  that represents the distortion introduced by the lens . One or more techniques and methodologies may be used to produce such distortion models. For example, characteristics of the calibration image  can be compared with characteristics of the captured calibration image  to produce the distortion model  (e.g., a mathematical model) that may be used in one or more applications (e.g., applying the lens distortion on computer-generated graphics). Various representations may be implemented to define the distortion model , for example, a high-order polynomial or other types of numerical expressions can be used to represent lens distortion. Once represented, the polynomial may be applied to a set of point coordinates, which represents a computer generated graphic, to adjust the coordinates and produce a distorted version of the computer graphic. In some implementations, the distortion model  can be enhanced by adding additional information such as additional polynomial terms to represent aspects such as higher order coefficients, non-centered principal point(s), non-radial distortion, and anamorphic aspect ratios, or other similar aspects.","One or more storage or archiving techniques may be implemented by the visual processing system . For example, the distortion model  can be stored in a library (e.g., a database accessible by the computer system ). Based upon such storage capabilities, one or more distortion models (e.g., the distortion model ) can be produced and cataloged for a variety of camera lenses (e.g., the lens ). To assist with cataloging, a lens identifier (or other type of catalog mechanism) can be assigned and stored with each distortion model to assist with cataloging and storage operations (e.g., model retrieval, logging, etc.). In some arrangements, multiple models may be produced for a single lens. For example, a lens can have varying distortion characteristics associated with varying lens settings (e.g., focus, zoom, etc.). As such, a set of distortion models can be produced across a range of possible settings. Using one or more data processing and storing techniques, multiple models (e.g., associated with one lens) can be combined and stored for later retrieval by the computer system  (e.g., based upon lens identifiers and lens settings).","Various techniques can be employed to apply the distortion model , for example, the distortion model  can be applied to an undistorted object . The undistorted object , for example, can include three-dimensional graphic content generated by the computer system  or content generated by another system and transferred to the system . As shown by process arrows E and F, the computer system  may apply the distortion model  to the undistorted object . From this data, as shown by process arrow G, the computer system  may produce a distorted object  by applying the distortion model  to the undistorted object . In this particular example, the distorted object  may represent the undistorted object  if captured in an image using the camera lens .","In some implementations, the distortion model  may be applied to one or more computer generated graphics (e.g., to produce distorted objects) in a substantially simultaneous manner as a user interacts with the computer system . As such, relatively little latency may be experienced as the user manipulates an object, the object is distorted (by application of the distortion model ), and the distorted object is presented. For example, using a mathematical model to distort each point included in the undistorted object  (to produce the distorted object ) may be computationally intensive as the calculations can involve computing the roots of a high-order polynomial. As such, one or more techniques may be implemented to reduce processing latency caused by the computation needs that may hinder user interactivity. For example, a reduced set of data points (sampled from the distortion model ) may be used rather than applying a complete distortion model, thereby reducing computations (e.g., performed by a central processing unit (CPU), a graphical processing unit (GPU), etc.) of the computer system . To process the reduced sample set, one or more techniques may be implemented, for example, interpolation and similar techniques may also be used applying a distortion model represented with a reduced number of samples.","In some implementations, the distorted object  (e.g., a computer graphic image distorted by the distortion model ) can be combined with one or more images captured by the lens from which the distortion model was produced (e.g., lens ). For example, real-world images or footage captured by the camera  and the lens  can be interactively combined with the distorted object , and a user of the system can view composite images or footage substantially in real-time. An interactive, real-time combination of actual images (or footage) captured by a lens and distorted computer graphics (based upon the lens) can allow a user of the computer system  to view and work with a composite that substantially appears as a final product. Such an interactive technique may be computationally efficient compared to methods that first remove distortion from images (to enable undistorted images and undistorted computer generated graphics to be combined) and secondly distort the combined images.","In some implementations, to reduce latency, objects may be initially rendered with a relatively low resolution to increase processing speeds. For example, a lower resolution can be specified for generating the distorted object  (and to provide expedited rendering). The rendered lower quality can be comparable to the resolution of a video game, a wire-frame resolution, or a shaded environment, to name a few examples. Once the low resolution object is manipulated, e.g., into a desired position, a final rendering of the object may be produced at a high-quality resolution in preparation for display.","Various types of imagery and graphic representations may also be processed by the visual processing system  to apply distortions associated with a lens. For example, distortion may be applied to computer-generated images, virtual photography or footage, etc. For example, images generated without the use of a physical lens can be altered to appear as though they were captured by a physical lens (e.g., the lens ). Distortion may be applied in an interactive manner such that a distorted version of the images may be viewed substantially in real time.","Similar to applying distortion, distortion associated with a lens may be removed by the visual processing system . For example, images captured by a physical lens can be altered to appear without distortion or altered to appear as if the images were captured by another physical lens. As such, one or more distortion models (e.g., the distortion model ), for example, can be interactively applied to images by the computer system  to enable a user to view a distorted or corrected version of the images in an interactive manner (e.g., substantially in real time).","Referring to , an exemplary visual processing system  is capable of performing various operations (e.g., calibrating, distorting, storing, etc.) to produce and use distortion models. In some arrangements, distortion models may be produced and applied in an interactive manner to distort computer-generated graphics, similar to distortion produced by a camera lens. In this particular example, the visual processing system  includes a computer system  (similar to the computer system  shown in ) in communication with a storage device  (e.g., a hard-drive, CD-ROM, etc.). To provide the operations, the computer system  includes software modules such as a graphics package  and a graphics distorter , however, in some arrangements, the functionality of one or both of the modules may be incorporated into a hardware (e.g., circuitry) or a combination of hardware and software. Further, while two distinct modules (e.g., the graphics package  and the graphics distorter ) are illustrated, the functionality of the modules may be combined into a single module or distributed across additional modules (e.g., three or more).","In general, the graphics package  allows a user (e.g., graphic artist, developer, etc.) to produce, edit and manage image content. For example, the graphics package  may provide an interface for creating, manipulating, and organizing one or more graphical representations (e.g., computer-generated graphics, images captured by lenses, etc.). For example, the graphics package  may be used to retrieve images, models or other types of graphical representations from a library (e.g., stored on the storage device ), interactively allow a user to operate on the images and models, and store the created, modified, or combined images, models and other graphical representations in the library. To produce and apply one or more distortion models, the graphics distorter  can operate in association with the graphics package , for example, the graphics distorter may generate distortion models (e.g., mathematical models based on calibration images) and to apply distortion models (e.g., adjusting vertices of computer generated graphics or image pixels).","In general, the storage device  is capable of storing various types of data such as one or more calibration images (e.g., a calibration image ), one or more captured calibration images (e.g., a captured calibration image ), and one or more distortion models (e.g., a distortion model , similar to the distortion model ). The calibration image , for example, can be an image with determinable characteristics and can include data related to the image defining attributes. The captured calibration image , for example, can be an image representing the calibration image  as captured by a lens (e.g., the lens  as shown in ) and can include data that represents attributes of the image. The distortion model  can be based on aspects of the calibration image  and the captured calibration image . In some implementations, the distortion model  can include a mathematical model produced by the graphics distorter . For example, aspects of the captured calibration image  can be compared with aspects of the calibration image  by the computer system  to generate the distortion model . As such, the model  may represent distortion of the calibration image  as viewed through a lens. Along with be represented with images (e.g., the calibration image , the capture calibration image , etc.), various type of representations may be used. For example, numerical values, numerical expressions, etc. may be used individually or in combination to represent the calibration and captured calibration information. To collect such calibration information (e.g., the captured calibration image ) and for passing data and information between the computer system  and the storage device  various communication techniques may be implemented. For example, hardwire or wireless techniques (or a combination of wired and wireless techniques) may be implemented.","Referring to  a diagram of a lens configuration  illustrates one typical type of distortion that may be provided by a lens . A point A represents, e.g., a point in a three-dimensional scene being captured by the lens . To represent the capture, light rays , \u2032 propagate from the point A, traverse an aperture  provided by the lens  (and perpendicular to an optical axis  of the lens) and enter the lens . Due to attributes of the lens  (e.g., shape, imperfections, etc.), the projection of the point A provided by the lens is distorted. In particular, point B, which represents a projection of the point A, does not properly lie on an image plane  of the lens. Rather the point B is located in front of the image plane  (referring to the exploded view of the point and the image plane) and a circle of confusion is projected onto the image plane. In this example, a point C represents the distorted projection of the point B, based upon the lens  (e.g., the radius  of the lens). Correspondingly, a point D represents the undistorted projection of the point B onto the image plane . While the radius  of the lens  causes distortion in this instance, other phenomena and properties (e.g., shape, thickness, materials, etc.) can cause and affect an amount and type of distortion.","Referring to , various examples of image distortion are illustrated that may be provided by a lens (e.g., lens ). The type and level of distortion can differ based upon lens type, model, manufacturer, and other type of production specification information. For demonstrative purposes, an undistorted image , which includes a pattern of vertical and horizontal lines, may be captured through a lens. Based upon imperfections of the lens, the captured image may be distorted. For example, a captured image may exhibit pincushion distortion as represented by a pincushion distortion pattern . Generally, a pincushion pattern, which may exhibit increased image magnification with the distance from the optical axis of a lens, can be produced by a telephoto or similar lens. In another example, distortion may exhibit a decrease in image magnification with increased distance from the optical axis of the lens. Such a distort, referred to as barrel distortion, is represented by a barrel distortion pattern  and can be caused by a fisheye or similar lens. Other types of distortion (e.g., combinations of pincushion and barrel distortion, irregular distortion, etc.) are possible, depending on one or more lens properties (e.g., shape, thickness, materials, etc.).","In some implementations, the undistorted image pattern  can serve as a calibration image (e.g., similar to the calibration image ). Being provided to the visual processing system  (shown in ), the undistorted image pattern  may be used by the graphics distorter  as a reference image to quantify the distortion (e.g., pincushion distortion, barrel distortion, combinations of distortions, etc.) provided by the image capturing lens. Once quantified, the data representing the distortion can be used by the graphics distorter  for distorting computer generated graphics or similar imagery.","In some implementations, other calibration patterns can be used. Referring to , a checkerboard calibration pattern  is shown. The calibration pattern  can have known characteristics (e.g., variously sized and positioned shapes, alternating colors, etc.). In one arrangement, the calibration pattern  can be compared (e.g., by the graphics distorter ) to an image of the pattern  captured through a lens (e.g., the lens  as shown in ) for quantifying differences to model characteristics of the lens. Various patterns, formats and graphical styles may be incorporated in a calibration pattern, for example, the calibration pattern  can be framed such that the center of the pattern  is aligned along and perpendicular to the optical axis of a lens.","In some implementations, the calibration pattern  can be selected that includes additional detail for providing a greater level of differentiation with a captured image of the pattern. For example, considering a lens producing a greater amount of distortion close to the optical axis, a calibration pattern may be selected to provide a finer level of detail near the center of the pattern. As another example, considering a lens that produces more distortion further away from the optical axis, a calibration pattern can be selected with a finer level of detail away from the center of the pattern.","As shown in  and , calibration images (e.g., patterns) and captured calibration images (e.g., distorted patterns) can be used to generate one or more distortion models (e.g., the distortion models  and ). Referring to , in some implementations, warping grids may be produced from one or more distortion models. In general, a warping grid can distort or remove distortion by being applied to an image (e.g., a computer generated graphic, an image captured by a lens, etc.). For example, as shown in , a warping grid A is shown overlaying an image of a flower A. The warping grid A includes a vertices (e.g., vertices A, A, etc.) that can be individually manipulated to distort (or correct) the image A. In this example, the vertices are uniformly positioned over the image A. To manipulate the image A, each vertex of the warping grid A is associated with the respective pixel located below the vertex. Based upon the association, as the vertex changes position, the pixel beneath similarly changes position. As such, by changing positions of the vertices, the image may be distorted (or corrected). Referring to , by manipulating the positions of warping grid vertices, pixels of an image (associated with the vertices) are similarly manipulated. In this example, positions of some vertices (e.g., vertex B) of a warping grid B are significantly altered compared to other vertices (e.g., vertex B) included in the grid. Tracking the manipulations, pixels of an image B that are associated with the vertices are correspondingly altered to distort the image.","In this implementation, each of the warping grids A and B include a reduced number of samples compared to the distortion model from which the grids are produced. For example, each of the illustrated warping grids A, B include twenty-five vertices that may be used to manipulate a pixel associated with each vertex. As such, the positions of twenty-five pixels may be adjusted by the vertices. To adjust the other image pixels, one or more techniques may be implemented. For example, interpolation techniques may be used by the graphics distorter  to determine position adjustments for pixels located between vertices of a warping grid. As such, the movement of one or more vertices may factor into interpolating the movement of one or more neighboring pixels. The influence of vertices may also be weighted, for example, vertex manipulations relatively close to a pixel may be more heavily weighted than manipulations of a more remote located warping grid vertex. Pixel grouping may also be implemented for pixel manipulation. For example, a group of neighboring pixels may be grouped and the pixel group may be associated with a particular warping grid vertex (located above the pixel group). Interpolation and movement weighting operations may similarly be executed on pixel groups, or a combination of pixel groups and individual pixels, for example, to increase computation efficiency.","Along with using one or more techniques to quantify pixel movements based upon a warping grid, the graphics distorter  may also determine the appropriate amount of samples to include in a warping grid. In general, computational efficiency increases (e.g., reduced processing time periods, reduced memory needs, etc.) by reducing the number of grid samples. However, reducing the number of samples increases the use of interpolation (or a similar technique) and the appropriate amount of distortion may not be properly applied to images. As such, the graphics distorter  may utilize one or more techniques to determine sampling amounts. For example, pixel variations between a reduced sample amount (e.g., included in a warping grid) and a complete sample set may be compared. In one implementation, the graphics distorter  may apply the complete sample set of a distortion model to an image (e.g., image A) and a reduced sample set the distortion model (e.g., the warping grid A) to the same image. The two distorted images may then be compared, for example, to determine if one predefined threshold (or multiple thresholds) have been met. For example, the difference between each of the two distorted images may be calculated per pixel (or pixel group) and the maximum pixel difference may be calculated. Once identified, the maximum pixel difference can be compared to a predefined threshold. If the difference is equivalent or less than the predefined threshold (e.g., 1\/100 of a pixel), the reduced sample set may be considered a valid representation of a complete sample set. If the difference exceeds the predefined threshold, the reduced sample set may be considered an overly coarse representation and the graphics distorter  may increase the sample size. After applying the increased sample set of the distortion model to the image, calculations may be repeated to determine if the maximum difference is equivalent to below the threshold value. Once the threshold is met, the reduced sample set may be used to distort a variety of images, computer generated graphics, or other type of graphics in a computationally efficient manner.","Various thresholds may be implemented for defining a distortion model, for example, a threshold ranging above or below particular values (e.g., 1\/100 of a pixel) may be specified. In one example, as a threshold can represent an amount of disparity indistinguishable by the human eye, a determination can be made to perform a smaller number of computations to achieve a result visually similar to that of performing a larger number of computations.","As such, reduced sample sets of a distortion model such as a warping grid (e.g., grids A and B) may be applied and reapplied in a relatively rapid manner. Further, since the warping grid need not be redefined for each instance it is applied to an image (or a computer generated graphic), a user can interact nearly in real time with the image as it is distorted based upon the user interactions. So, the reduced sample distortion model allows images to be efficiently altered with relatively little latency during user interactions. For example, setting an error threshold can enable the graphics distorter  to designate a set of sample points (e.g., vertices) in a warping grid for optimizing processing speed and accuracy associated with image distortion and correction","Referring to , a graphic object (e.g., a computer-generated graphic or model) may also be distorted by a distortion model similar to an image. As shown in the figure, an undistorted object A can be transformed into a distorted object B by applying a warping grid (e.g., warping grid A). Similarly, the distorted object B can be transformed into the undistorted object A by applying the counterpart warping correction grid.","One or more techniques and methodologies may be implemented for applying a warping grid, or other functionality provided by the graphics distorter . For example, one or more software modules or processes may provide the application. In one implementation, a process used to transform the attributes (e.g., position, color, etc.) of vertices (referred to as a vertex shader) may be used to apply one or more warping grids to graphic objects (e.g., the objects A and B). Along with being executed by a processor, a process such as a vertex shader can be incorporated into various types of computational hardware. For example, for one or more graphics boards optimized for processing computer-generated graphics and models (e.g., 3D graphics), a vertex shader can be used to process graphical elements.","Referring to , an exemplary rendering process  exploits central processing unit (CPU) technology and graphical processing unit (GPU) technology capabilities. As illustrated in the figure, some functionality is provided by a CPU while other functions are provided by a GPU. To separate CPU and GPU functions, a CPU\/GPU boundary  is illustrated. However, in some arrangements distribution of the functions may be altered. For example, functionality of the CPU may be moved to the GPU, and vice versa. One or more CPU's and GPU's may be used to provide this functionality. Additionally, while an equivalent number of CPU's and GPU's may be used in some arrangements, the amount of processing units in other arrangements may not match.","For this implementation, a vertex shader technique is used for applying one or more warping grids. To execute the technique, one or more computational platforms and devices (e.g., computer system , computer system , etc.) may be utilized. In this example, CPU provided functionality includes an application  (e.g., the graphics package , a virtual environment or game, etc.) that communicates with an application programming interface (API)  (e.g., OpenGL, Direct3D, etc.) by using API commands (e.g., 3D commands). The API , for example, may translate commands from the application  and communicate with a GPU front end  across the CPU\/GPU boundary . Various types of information may be passed over this boundary, for example, commands (e.g., GPU commands, CPU commands, etc.) and data (e.g., data streams, etc.) may be exchanged.","The GPU front end , for example, may send a stream of vertices (e.g., a vertex index stream) to a primitive assembly . The GPU front end  may also send vertices to a programmable vertex processor . For example, the provided vertices may be in a pre-transformation condition and the programmable vertex processor  may execute operations to transform the vertices. In this arrangement, operations of the programmable vertex processor  may include operations of a vertex shader that includes applying one or more warping grids to distort the vertices. In general, such operations of a vertex shader may introduce low latency during execution, thereby allowing a user to substantially interact with objects (e.g., images and computer graphics) in real-time while the objects are being processed by the vertex shader.","In this implementation, a primitive assembly  receives transformed vertices produced by the programmable vertex processor  along with a vertex index stream from the GPU front end . From the provided data, the primitive assembly  may generate assembled polygons, lines and points, and provide the generated information to a rasterizer and interpolator . Along with providing subsequent processing operations (e.g., interpolation, etc.), the rasterizer and interpolator  may be used to produce one or more images for presentation (e.g., on an output device such as a computer display). In addition to these operations, additional operations may be provided by the process . For example, processing individual pixels (e.g., pixel shading operations to change to appearance of pixels) or pixel groups may be provided in preparation of producing one or more frames (e.g., and storing frames a buffer) prior to presentation.","Along with distorting images, computer generated graphics and similar types of graphics, other types of objects may also be distorted by the graphics distorter  to account for lens attributes. For example, a selection device (e.g., an on-screen pointer) may be distorted in a similar manner. In general, selection devices allow a user to interact with presented graphics and imagery. For example, based upon a linear projection from the selection device onto the screen, a user may control the selection of one or more displayed objects. However, if the displayed objects have been distorted (to account for a particular lens), a proper linear projection between the selection device and the distorted objects may not be provided. To provide proper alignment, the selection device may be distorted in a manner similar to the displayed objects. For example, the graphics distorter  may also be used to distort the presentation of a selection device to enhance user interactions. In one arrangement, a user of a computer graphic processing system (e.g., the system  or the system ) may use an input device (e.g., a mouse, tablet, etc.) to direct a corresponding pointer, e.g., for selecting a displayed object. As the object processed to be rendered in distorted space (as provided by the graphics distorter ), a pointer position may also be similarly distorted by the graphics distorter. In one implementation, the distortion may be provided by a vertex shader to reduce latency. As such, a warping grid may be applied to the coordinates of the pointer to allow the user to interact with similarly distorted graphical objects in substantially real-time.","Referring to , a flowchart  represents some operations of the graphics distorter . The operations may be executed by a single computer system (e.g., the computer system  or the computer system ) or multiple computing devices. Along with being executed at a single site (e.g., at one computer system), operation execution may be distributed among two or more sites.","Operations include receiving  a distorted image (e.g., the captured calibration image ) and receiving  undistorted image content (e.g., the calibration image ). In some implementations, additional information may also be provided, for example, information that particularly identifies image content (e.g., for cataloging), information identifying particular image capturing equipment (e.g., a lens, camera, etc) or other similar information. Operations may also include determining  distortion model sample size such as the number of samples to include in a warping grid. For example, a distortion model sample size can be based on a specified error threshold (e.g., equal to or less 1\/100 of a pixel). By repetitively comparing the distortion provided by a distortion model with a complete sample set and the distortion provided by a model with a reduced sample size, an appropriate reduced sample size may be determined. For example, a reduced sample size may be selected from the comparison in which the error threshold is not exceeded.","Operations of the graphics distorter  may also include producing  a distortion model from undistorted image content, a distorted image and the determined reduced sample size. For example, known and determined characteristics of undistorted image content (e.g., the calibration image ) and a distorted image (e.g., the captured calibration image ) may be used by the graphics distorter  to produce one more mathematical models that may be applied to graphical objects to incorporate the distortion effects. Operations may also include storing  the one or more distortion models. For example, a distortion model (e.g., the distortion model ) can be stored in a library (e.g., in the storage device ) for retrieval by subsequent operations.","Referring to , a flowchart  also represents some operations of the graphics distorter . The operations may be executed by a single computer system (e.g., the computer system  or the computer system ) or multiple computing devices. Along with being executed at a single site (e.g., at one computer system), operation execution may be distributed among two or more sites.","Operations include selecting and retrieving  a distortion model (e.g., the distortion model ). For example, the graphics distorter  can select and retrieve a distortion model from a library (e.g., stored on the storage device ) that includes models associated with a variety of lens and associated lens parameters (e.g., lens type, manufacturer, etc.). The selection and retrieval  of a distortion model, for example, could also be based on characteristics and settings to emulate a particular camera lens. Operations may also include receiving  a computer graphic. For example, a graphic such as the undistorted object A (as shown in ) can be received by the graphics distorter . Graphics, for example, can be retrieved from a database or library (e.g., in the storage device ), or provided by a software module or package (e.g., the graphics package ) that is interacting with a user (e.g., via a computer system). Operations may also include applying  a distortion model to a computer graphic. For example, as shown in , a distortion model, such as the distortion model , can be applied to a computer graphic, such as the undistorted object . Based upon the application, a distorted graphic (e.g., the distorted object ) can be produced, and, in some implementations, can be combined with a distorted image (e.g., an image captured by the lens ), substantially in real-time with user interactions. In some implementations, the distortion model may be applied to an object with relatively low resolution. As such, the applied model may be efficiently applied and reapplied to the object. Thereby, in some arrangements a user may interact in real time with the object (e.g., select, manipulate the object, etc.) as the distortion model is applied. Furthermore, in some arrangements, once a desired appearance is achieved for the low resolution version, a relatively higher resolution version may be computed (e.g., online or offline) for presentation.","To perform the operations described in flow charts  and , one or both of the graphics package  and the graphics distorter  may perform any of the computer-implemented methods described previously, according to one implementation. For example, a computer system such as the computer system  (shown in ) or the computer system  (shown in ) may execute the graphics package  or the graphics distorter . The computer system  or the computer system  may include a processor (not shown), a memory (not shown), a storage device (e.g., the storage device ) and an input\/output device (not shown). Each of the components may be interconnected using a system bus or other similar structure. The processor is capable of processing instructions for execution within the computer system  or the computer system . In one implementation, the processor is a single-threaded processor, however, one or more multi-threaded processors may be used in other implementations. The processor is capable of processing instructions stored in memory or on a storage device (e.g., the storage device ) to display graphical information for a user on an input\/output device.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 8","b":["800","800","800","810","820","830","840","810","820","830","840","850","810","800","810","810","810","820","830","840"]},"The memory  stores information within the system . In some implementations, the memory  is a computer-readable medium. The memory  is a volatile memory unit in some implementations and is a non-volatile memory unit in other implementations.","The storage device  is capable of providing mass storage for the system . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.","The input\/output device  provides input\/output operations for the system . In one implementation, the input\/output device  includes a keyboard and\/or pointing device. In another implementation, the input\/output device  includes a display unit for displaying graphical user interfaces.","The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4C and 4D"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4E"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 6 and 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
