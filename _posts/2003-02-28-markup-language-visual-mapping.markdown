---
title: Markup language visual mapping
abstract: Methods and systems are provided for mapping markup language data and schema, such as eXtensible Markup Language (XML) data and XML schema, to selected fields (cells, columns, rows) of a spreadsheet application document. An XML schema file is associated with a spreadsheet application document by providing a mechanism of adding the schema definitions to the spreadsheet application document. Furthermore, XML schema constructs such as elements, attributes, and simple content are associated to regions in the spreadsheet application document by providing a tree view structure of a generalized instance of a given XML schema file. A user may drag and drop markup language nodes representing elements, attributes and simple data content, from the tree view structure of the generalized instance of the XML schema file onto a spreadsheet worksheet grid. Once a cell, column or row in worksheet grid accepts the dropped element or attribute, an association is made between the target location in the worksheet grid, and the definition, data type and rules associated with the dropped element or attribute by setting an XML path language (XPATH) marker to point the target location back to the selected element or attribute in the XML schema file. Having all or partially all desired markup language elements or attributes associated with desired target locations in the spreadsheet grid, a general mapping of marked-up locations in the spreadsheet grid and their associated elements and/or attributes in an associated XML schema file is created.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07096422&OS=07096422&RS=07096422
owner: Microsoft Corporation
number: 07096422
owner_city: Redmond
owner_country: US
publication_date: 20030228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This invention relates to methods and systems for mapping markup language elements to a document. More particular, the present invention relates to mapping eXtensible Markup Language (XML) elements from an XML schema file to a spreadsheet document to which the schema file is associated.","Computer software applications allow users to create a variety of documents for use in work, education and leisure. For example, a spreadsheet application allows users to store, manipulate, print and display a variety of alphanumeric data. A word processing application allows users to create letters, articles, books, memoranda, and the like. Such applications have a number of well-known strengths, including rich editing, formatting and calculation.","To keep up with demands for more advanced functionality for such computer software applications, software developers have begun to use structured data formats, including markup languages, such as eXtensible Markup Language (XML), to allow users to annotate a software application document to give the document a useful structure apart from the normal functionality of the software application responsible for creating the document or apart from the visible formatting associated with the document. For example, the user may wish to create using her spreadsheet application a template document for preparation of a purchase order to be used in her company's sales department. By applying structure to the document, purchasers or other institutions or persons receiving the document make use of the structure by processing the document to utilize data defined by the document structure.","Some software applications, such as word processing applications, allow users to annotate a document with XML elements so that the user may define certain data types and data definitions for data inserted into the document. A resume document, for example, may include an \u201cexperience\u201d section in which the user will include present and past work experience. Using XML, the user may desire to markup the \u201cexperience\u201d section of the document to define that certain allowable information in a prescribed order and in a prescribed number may be included in the experience section of the document. For example, the user may wish to markup the experience section of the document to allow four present or past experience items.","Unfortunately, prior art spreadsheet applications allow very limited use of XML data. Bulk XML data may be imported where the user points to an XML file and the spreadsheet application imports that file into the spreadsheet grid. But, the user gets no control over how the data is laid out or which data is imported because all of the data is imported. Under prior spreadsheet applications, manual coding of XML data to a spreadsheet application may be required in which a programmer writes their own custom code for handling import and\/or export of XML data. This code may be in the form of an XSLT transformation file, or it may be a more traditional programming language like VBA or C++. Such custom programming is time consuming, expensive and is difficult to apply generally to spreadsheet application documents.","Prior spreadsheet applications do not establish a relationship between the XML data and the spreadsheet grid. A relationship between the XML data and the grid allows the user to have a custom view of the XML data. For example, if a user only wants elements <a>, <b>, and <e> to show up in the grid, and to skip elements <c> and <d>, that preference needs to be stored somewhere. Furthermore, if the user wants element <b> to be displayed first and show up in column A, followed by elements <a> and <e> in columns B and C, that preference needs to be stored as well. If the user wants the data to begin appearing in row  rather than at the top of the grid sheet, that preference will need to be stored as well. Because prior spreadsheet applications allow no custom control over how the data is imported and displayed, there is nothing for the spreadsheet application to remember about the data. Accordingly, no relationship, between the spreadsheet and the XML data is established.","It is with respect to these and other considerations that the present invention has been made.","Embodiments of the present invention provide methods and systems for applying XML data to a spreadsheet application document. Embodiments further provide for establishing a relationship between the XML data and a spreadsheet application grid to which it is applied so that imported XML data is positioned in the proper location in the grid, and so upon export of XML data from a spreadsheet application grid, the correct data in the grid is used to generate the correct and resulting XML data for export.","Generally described, methods and systems of the present invention enable XML schema files to be associated with a spreadsheet application document by providing a tree view structure of a generalized instance of a given XML schema file. A user may drag and drop markup language elements, simple content and attributes from the tree view structure of the generalized instance of the XML schema file onto a spreadsheet worksheet grid by selecting nodes of the tree view structure representing the elements, simple content, and attributes. Once a cell, column (range of vertical cells) or row (range of horizontal cells) in worksheet grid accepts the dropped element or attribute, an association is made between the target location in the worksheet grid, and the definition, data type and rules associated with the dropped element or attribute by setting an XML path language (XPATH) marker to point the target location back to the selected element or attribute in the XML schema file. Once all desired markup language elements or attributes are associated with desired target locations in the spreadsheet grid, a general mapping of marked-up locations in the spreadsheet grid and their associated elements and\/or attributes in an associated XML schema file is created.","More particularly described, a method for mapping eXtensible Markup Language (XML) data to a spreadsheet application document is provided. An XML schema file is associated with a spreadsheet application document defining permissible data definitions for the document. An instance structure associated with the XML schema file is built having XML nodes representing all available elements and attributes defined by the associated schema file and simple data content that may be applied to the document and representing a relationship of the available elements and attributes to one another as defined by the associated schema file. A tree view of the instance structure is displayed for providing a visual representation of the instance structure of the associated XML schema file whereby the tree view contains hierarchically-structured nodes visually representing XML nodes (elements and attributes) defined by the associated schema file that may be validly applied to the document according to the associated schema file. An element or attribute selected from the tree view is applied to a target location in the document by a user operation such as drag & dropping the nodes from the tree view onto the workbook grid. An XPATH pointer is written to the target location for pointing the target location to the selected element or attribute in the associated schema file via the instance structure. A mapping is created between the document and the associated schema file including building a collection of XPATH pointers associated with all selected elements or attributes that are applied to the document for pointing target \u2018mapped\u2019 spreadsheet grid range locations to corresponding nodes in the associated schema file for defining each element and attribute applied to the document. A visual indication is provided in the tree view of any elements or attributes that have been applied to the document. A visual indication is provided in the target location that a selected element or attribute has been applied to the target location.","These and other features and advantages, which characterize the present invention, will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed.","The following description of the embodiments of the present invention is made with reference to the above-described drawings wherein like numerals refer to the like parts or components throughout the several figures. The present invention is directed to methods and systems for mapping markup language elements or attributes to a spreadsheet application grid.","Referring now to , a typical spreadsheet application screen display  is illustrated. A suitable spreadsheet application for presentation of the screen display  in accordance with an embodiment of the present invention is Excel\u00ae manufactured by Microsoft Corporation in Redmond, Wash. According to the exemplary screen display  illustrated in , a spreadsheet application workspace grid (hereafter \u201cgrid\u201d)  is illustrated for entering, manipulating, and calculating data including text and numeric data. On the right hand side of the screen display , a tree view structure  of a generalized instance of an eXtensible Markup Language (XML) schema file is presented in a task pane . The tree view structure  includes nodes representing XML elements, attributes and simple data content. The tree view structure  includes a root element , child elements  and  and a plurality of child elements  and  under the elements  and , respectively. As will be described in detail below, the tree view structure  illustrated in  represents a generalized instance of an XML schema file associated with the spreadsheet application document illustrated in the spreadsheet grid .","Referring to the grid , cells , , and  illustrate single non-repeating elements dragged to the grid  from the tree view structure . The column list  illustrates repeating elements, <date>, <description> and <amount> dragged from the tree view structure  to the grid . As illustrated in , data associated with those elements is also illustrated. A help text  is illustrated for providing helpful information for how to map repeating or non-repeating elements from the tree view structure  to the grid . As described below, dragging a given element or attribute from the tree view structure  to the grid  allows the user to annotate a target location in the grid  with markup language structure associated with the dragged and dropped element or attribute. For example, referring to , the <date> element  is dragged from the tree view structure  to a target location D4 in the spreadsheet grid . Data associated with that target location, for example \u201c2001-01-01\u201d as illustrated in , is shown in the target spreadsheet cell D4 after the user performs and Import or Refresh operation to import that data to the grid. Initially, after each drag and drop, only empty cells are populated with XML data. User data such as the date, shown above, is imported. However, if the target range already contains user data, such as the date, that data is kept and becomes associated with the XML data applied to the target range. Accordingly, a previously prepared spreadsheet document containing user data may be annotated with XML data.","When a selected element or attribute is dragged from the tree view structure  and is dropped onto a target location in the spreadsheet grid , an XPATH maker is written to the target location to point the target location back to the markup language schema file element or attribute to which the target location is now associated. The mapping of the markup language elements or attributes to target locations in the spreadsheet grid, as described above, is advantageous because a subsequent user may utilize data in the spreadsheet application grid according to the data definitions of the associated markup language schema file. For example, a subsequent user of the XML data file created by the spreadsheet grid  may utilize that data file in accordance with the associated markup language schema file. For example, if the consumer wishes to extract the \u201cdate\u201d from the spreadsheet grid , the consuming application may make use of the mapping between the <date> element of the XML schema file to the grid location D4 to readily locate data associated with the \u201cdate\u201d for extracting that data or otherwise utilizing that data. If the data contained in the grid  is consumed, by a word processing application, for example, even if functionality associated with the spreadsheet application may not be used by the consuming word processing application, data from the spreadsheet grid  may be utilized by the word processing application in accordance with the associated markup language schema file defining the data associated with the spreadsheet application document.","Advantageously, the tree view structure  presents a visual representation of an associated schema file in the tree view pane  and allows a user to interactively drag and drop elements or attributes of the XML schema file to the spreadsheet grid and immediately see the result of associating the markup language elements or attributes with a target location in the spreadsheet grid. Creating the mapping between the selected schema file and the spreadsheet grid thus creates a mapping for a whole class of data defined by the associated schema file.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},"With reference to , an exemplary system for implementing the invention includes a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples the system memory to the processing unit . The system memory  includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage for the personal computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD-ROM disk, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the drives and RAM , including an operating system  and one or more application programs , such as a spreadsheet application program, a word processor program, or other type of program module. Other program modules illustrated in  include an XML processing module , a document object model (DOM) parser , and a simple application programming interface for XML (SAX) parser . According to an embodiment of the invention, the XML module  is used by the spreadsheet application  for processing data formatted according to the eXtensible Markup Language. A suitable XML processing module is MSXML manufactured and marketed by Microsoft Corporation of Redmond, Wash.","A user may enter commands and information into the personal computer  through a keyboard  and pointing device, such as a mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers or printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In order to provide XML data with a set of grammatical and data type rules governing the types and structure of data that may be included in a given XML data file an XML schema file is associated with the XML data for providing the rules governing each of the XML elements and tags with which the user may annotate the given XML data. For example, a \u201cpurchase order\u201d XML data file may have an attached or associated schema such as \u201cpurchaseorder-schema.xsd\u201d for providing the allowable set of XML elements such as a <date> element, <price> element, <quantity> element, and so on. The schema includes the rules governing the order with which those elements may be applied to the XML data and specific rules associated with individual elements applied to the XML data. For example, a schema attached or associated with the \u201cpurchase order\u201d XML data file may prescribe that data associated with a given element, for example a <date> element, must include a day element, followed by a month element, followed by a year element. Additionally, the schema may require that a <date> element must immediately precede a <shipment destination> element, for example.","As is understood by those skilled in the art, developers of XML schemas determine the names of XML elements and the associated data types and data structures allowed for those elements. Then, all users of XML data annotated with XML structure according to a given schema may utilize the data contained within the XML structure without regard to the overall type and structure of the XML data. For example, if a \u201cpurchase order\u201d XML data, described above, is transmitted to a purchaser of the goods, the purchaser may develop software applications for parsing the XML data to locate specific types of data within the XML data for use by the purchaser. The purchaser may, for example only wish to print serial numbers and associated prices for certain goods. Using the schema attached to the XML data, the purchaser will know that the data associated with the XML elements have been prepared according to the schema governing the XML data. Accordingly, the purchaser may develop a software application or an Extensible Stylesheet Language Transformation (XSLT) file for locating the <price> element and for extracting the data associated therewith for insertion into the purchaser's own XML data.","Following with this example, a number of different purchasers may subscribe to the same schema for dictating the rules associated with the \u201cpurchase order\u201d XML data so that each purchaser may then receive the \u201cpurchase order\u201d XML data from the author of the XML data and use the data contained in the purchase order according to the XML elements structuring the data. That is, a first purchaser may only be interested in the data contained within the <price> element, while a second purchaser may be interested in extracting only the data contained in a <shipment terms> element. Each purchaser may extract the data it desires without regard to other aspects or elements of the XML data by using their own software applications or XSLT transformation files for locating the desired data according to the XML structure. This is made possible by the fact that each user of the XML data follows the data type and data structure rules prescribed in the schema attached to or associated with the XML data.","As understood by those familiar with the eXtensible Markup Language, XML namespaces provide a method for qualifying elements and attribute names used in XML documents by associating those elements and attribute names with namespaces identified by uniform resources identifier (URI) references. An XML namespace is a collection of names, identified by a URI reference, which are used in XML documents as element types and attribute names. A single XML document may contain nodes that are defined for and used by multiple software modules. For example, in accordance with an embodiment of the present invention, a single XML document, such as a spreadsheet document, may contain nodes (elements, attributes and simple data content) defined and used by different software modules. For example, an XML document may have nodes defined for and used by a spreadsheet application XML processing module, or the document may contain nodes defined for and used by or associated with one or more schema files associated with the document. For example, nodes may be associated with the spreadsheet document to associate the document with a schema file associated with a purchase order, resume document, a legal document, and the like. Accordingly, an individual document, such as an exemplary spreadsheet document may have a namespace identifying the element types and attribute names associated with each of the different software modules that may consume or use data from the document.","Referring back to , the non-repeating elements ,  and  are shown to be applied to cells D3, D4, and D5 of the grid . Associated data is entered into each of those cells, as shown in . The repeating elements <date>, <description> and <amount> are applied at target locations D8, E8, an F8 respectively. As described in the background section above, without the functionality of the present invention, the structure associated with a markup language is lost when the associated data is imported to the spreadsheet grid .  illustrates the data of the spreadsheet grid , illustrated in , entered into the grid  without the benefit of the data structure applied to that data by associating the markup language schema file with the associated data.","Visual Mapping","In accordance with embodiments of the present invention, application of markup language elements or attributes from an associated XML schema file is facilitated through a visual mapping user interface provided to the user. As shown in , when the user selects an element such as the <name> element  from the tree view structure  in the pane  for application to a cell in the grid , the <name> element  is highlighted in the tree view structure. When the user selects the element  from the tree view structure  and drags the element onto the grid , the user places the cursor  at a target location in the grid  such as cell H8, illustrated in , for placement of the annotation and structure related to the <name> element . If the <name> element  is a single non-repeating element in the tree view structure, a border  is drawn around the target location, for example the cell H8 of the grid  illustrated in . According to an embodiment of the present invention, the border may be colored, for example blue, to visually highlight to the user the location of the deposited markup structure.","Once the structure is dropped onto the grid  as described, the target cell range is now mapped to the schema file, which contains the associated markup and structure information. In order to provide additional assistance to the user, the associated element  in tree view structure is preferably bold faced or highlighted to indicate to the user that the element has been mapped to the grid . According to a preferred embodiment, if the user subsequently selects the element  in the tree view structure, the border  is shown to highlight the selected cell or range of cells. To show the user the location in the grid  to which that element is mapped, regardless of whether any data has been entered into that location of the grid. Likewise, if the user selects a given cell in the grid , any corresponding element or attribute in the tree view structure that has been mapped to that grid location is highlighted in the tree view structure to indicate to the user any element or attribute that has been mapped to the target location corresponding to the active cell range.","Referring to , if the user selects a repeating element or attribute from the tree view structure  for application to the grid , a list object  with associated headings is shown to the user when the user drops the selected repeating element or attribute onto the grid . For example, as illustrated in  the <date> element , <description> element , and <amount> element  are repeating elements under the parent element <expense item>. According to an embodiment of the present invention, the user may create a data structure in the grid  to assemble data for the <date>, <description> and <amount> elements in a structured manner in the grid . By selecting each of the date, description and amount elements and dragging those elements to the grid , the list  is generated by creating a list object, defining both columns and rows, whose top left corner is the target cell location where the user releases the mouse (the \u2018drop\u2019 part of drag & drop), and whose number of list objects equal the number of nodes being dragged from the tree view, and placing the top most element (in the tree view) in the left most column of the list, followed by placement of the next element in the next column to the right in the selected list, followed by placement of the third element in the next column to the right, and so on. Subsequently, data associated with the <date>, <description>, and <amount> elements may be entered in the columns underneath the selected positions to create a structured list whereby the \u201cdate\u201d, \u201cdescription\u201d, and \u201camount\u201d for a first item may be placed in row  of grid , the \u201cdate\u201d, \u201cdescription\u201d, and \u201camount\u201d for a second item may be placed in row , and so on. The list object  becomes a structured region in the grid  that may be expanded down the rows of the grid  beneath the selected rows as data is added to the list  associated with the structure elements. For example, for each additional item having a date, description and amount entered into the list object , the structured region grows down the page of the grid  beneath the first selected row, for example row  illustrated in .","Advantageously, because the markup language structure of the associated schema file is now mapped to the grid  as selected by the user, the structure of the list whereby data associated with the \u201cdate\u201d, \u201cdescription\u201d, and \u201camount\u201d for a number of items will be maintained for subsequent consumption. For example, if the data entered into the grid  within the cell structured, as described, is exported to a different consuming application, such as a word processing application capable of processing the markup language used to annotate the grid , the structure applied to the grid  may be utilized by the subsequent consuming application. For example, a markup language-processing module of a word processing application may utilize the associated schema file to extract the data entered in the list  to place that data in a similar context and presentation in a word processing application document. For example, the user may wish to export to a word processing document such as a letter, the list  containing data associated with the \u201cdate\u201d, \u201cdescription\u201d, and \u201camount\u201d for a variety of purchased items.","As with the single element border  described in , the list  is synchronized with the tree view structure  in the pane . That is, if the user places the cursor or otherwise selects an element from the tree view structure such as the <date> element , a correspondingly-structured region (that region is a column of the list) in the grid  containing the list  is highlighted to the user to show the user the location of the list  associated with the selected element. Conversely, if the user selects a cell in the list  in the grid  where the list  has been structured, the corresponding elements in the tree view structure  are highlighted to indicate to the user the elements and\/or attributes associated with the selected region in the grid .","The list  illustrated in  shows an additional aspect of embodiments of the present invention whereby the user has not only selected three repeating elements, namely the <date>, <description>, and <amount> elements, but the user has also selected a single non-repeating <name> element  as a part of the initial drag and drop of the selected elements or attributes to the grid . Consequently, the list  not only includes the repeating elements <date>, <description>, and <amount>, but the list also includes the non-repeating element <name>. According to an embodiment of the present invention, if a name, for example, John Doe, is imported in the target cell associated with the <name> element, and a plurality of data is imported for the <date>, <description>, and <amount> elements, the name data column, for example John Doe, is copied down the column underneath the \u201cname\u201d header, illustrated in  adjacent to each new row of data underneath the <date>, <description>, and <amount> elements.","If it is an undesirable result that the name data is copied down the column alongside associated data for the <date>, <description>, and <amount> elements, the user may avoid this result by first dragging and dropping the repeating elements to the grid  followed by a separate dragging\/dropping of the non-repeating element to the grid . Accordingly, the <name> element will be treated as a single non-repeating element and data associated therewith will not repeat down the column underneath the target cell along with data entered or imported to the target cells for the list . Additionally, if a first repeating element, such as the <date> element  is dropped to a target location in the grid , such as location I8, followed by subsequent but separate drops of other associated repeating elements such as the <description> element and the <amount> element in the positions immediately adjacent to the first dropped element (for example, the <date> element), a the list  is still created by assuming that the user intended to create the list  by selecting each of the repeating elements separately as opposed to selecting, dragging, and dropping the three elements simultaneously. Alternatively, each dropped node may be treated as a separate list object.","Referring still to , help text  may be provided to the user to provide the user helpful information on dragging and dropping elements from the tree view structure  to the grid . For example the Help text  illustrated in  provides information on dragging and dropping a non-repeating element to the grid , and the help text  illustrated in  provides helpful information on dragging repeating elements to the grid . Also illustrated in  is a tool bar  where a variety of tools for providing additional functionality to the structured target location may be provided to the user. For example, the user may be allowed to toggle the total row, copy data from a target location, import data to a target location, print data from a target location, etc.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 6","FIG. 6"],"b":["120","120","350","350","360","370","380"]},"As discussed above, other visual indicators may be provided according to embodiments of the present invention. An element or attribute that has been applied to the grid  may be boldfaced to indicate that the associated element or attribute has been applied to the grid. Also, as mentioned above, synchronization between an element and the tree view structure  and a target location in the grid  is maintained so that if the user selects the target location, the corresponding element or attribute in the tree view structure is highlighted. Conversely, if the user selects an element or attribute in the tree view structure , the corresponding target location in the grid  is highlighted to show the user the location in the grid associated with the element or attribute. Additionally, a small amount of XML data that has been imported into the grid  may be shown adjacent to a corresponding element or attribute in the tree view structure . For example, referring back to , once the data \u201cRob Collie\u201d is imported to the target location, cell D3, a portion of that data, for example \u201cRob Collie\u201d may be shown next to the associated <name> element  in the tree view structure . Thus, the user is provided helpful contextual information for quickly associating an element or attribute from the tree view structure  with a corresponding target location and data entry in the grid .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["120","110","120","115","700","705","710","110","110","120"]},"Alternatively, if the schema file is not attached to or associated with the document opened by the user into the grid , a schema file must be obtained and associated with or attached to the document. As should be understood by those skilled in the art, the user may create a schema file for the document, the user may obtain a schema file from a list of available schema file resources.","Once the schema file is obtained at step , the method proceeds to step , and the schema file is parsed by the XML module , such as MSXML5.0 manufactured by Microsoft Corporation, to expose a Schema Object Model (SOM) that enables the spreadsheet application to extract definitions given by the XSD (schema). For example, a definition might include that a <name> element requires a first name, followed by a middle name, followed by a last name. Accordingly, a document having data entered within a markup element associated with the <name> element must be entered according to the definition for that element in order for the schema file to successfully validate the document.","After the schema file has been parsed to determine all definitions, data types and data requirements according to the schema file, the method proceeds to step . At step , a determination is made as to whether more than one valid document may be validated according to the associated schema. As understood by those skilled in the art, XML files contain one root that contains the rest of the marked up data. However, a single schema file may define multiple root elements. For example, one schema file may include both a root defined for the purchase order schema, as well as an additional root element (sibling to the first root element in the schema definition) that defines some additional structure. According to embodiments of the present invention one schema file may only define elements and attributes for one namespace. When a spreadsheet application encounters a schema that defines multiple root elements, the user is queried to clarify which root element they want to work with to consume and create XML instance files.","At step , the selected schema file is compiled by the XML module  to create a SOM that is put into a collection of compiled schemas for use with the selected document. As should be understood, any given document may be associated with more than one XML namespace. That is, just as one schema file may be used to validate a number of different documents, any given document may be associated with a number of different schema files that may be used to validate data contained in the document. For example, one document may include employee information for a given company in addition to financial data for a given company. Accordingly, the document may be associated with one schema file for defining data rules associated with financial information for the document, and the document may be associated with a second schema file for defining data rules associated with the employee information contained in the document. At step , if more than one schema file is associated with the document, each of the required schema definitions are programmatically gathered without requiring user input. A user annotating a given spreadsheet grid  with markup language structure according to the present invention would select a tree view structure  associated with one schema file for annotation of the grid  according to that schema file, followed by selection of a different tree view structure  associated with a different schema file if the user desires to annotate the grid  according to a second schema file.","At step , the XML module  builds a generalized instance structure (tree view structure ) from the selected schema for presentation to the user in the pane . According to one embodiment, the generalized instance structure may be built using a DLL accessible by the spreadsheet application such as \u201cmso.dll\u201d manufactured by Microsoft Corporation. According to an embodiment of the present invention, the generalized instance structure created from the selected schema file represents a schema structure that would be associated with the document where all applicable markup language elements and\/or attributes associated with the selected schema file are applied to the document. That is, all available options for annotating a document associated with the selected schema are shown in the tree view structure for potential selection by the user. On the other hand, any elements or attributes that may not be applied to a spreadsheet application grid  are omitted from the tree view structure  created at step . For example, if a given markup language element associated with the selected schema cannot be mapped to a spreadsheet application document, that element or attribute will not be shown in the tree view structure .","According to an embodiment of the present invention the generalized instance structure is created where each node of the instance structure represents the hierarchical elements and attributes, associated sibling elements and attributes and associated parent elements along with information as to the name and location of each element or attribute associated with selected schema file. Additionally, an XPATH for locating a given element and attribute in the associated schema file is written to the generalized instance structure for each element and attribute. Accordingly, when an element or attribute is subsequently dropped to a target location within the grid , the XPATH for locating the dropped element or attribute is written to the target location for pointing the target location in the grid  back to the dropped element and\/or attribute.","Once the generalized instance structure is built at step , the method proceeds to step  and a tree view control for drawing tree view structures such as the tree view structure  illustrated in  draws the tree view structure  in the pane  associated with the generalized instance of the selected schema. That is, the hierarchical structure of the schema where a root element may include a number of child elements, which may be parent elements of other child elements, where each parent element includes a number of child elements and\/or attributes in a hierarchical structure is drawn to visually represent the relationship between each child element and\/or attribute with its associated sibling elements the relationship between child elements to their associated parent elements, and the association between a variety of parent elements to a root element. As should be understood, the tree view control for drawing the tree view structure  and pane  may be an application programming interface for drawing tree view structures, or the tree view structure may be drawn by a separate software program module such as a DLL or API associated with the software application providing the grid  and the pane . The method ends at .","According to an embodiment of the present invention, the data type, for example integer, string, etc., is not shown in the tree view structure  in association with each illustrated element or attribute. That is, if the element is a \u201cdate\u201d data type, that information is not provided in the tree view structure , but if that element is dragged and dropped to a target location within the grid , the target location will be formatted according to the data type for \u201cdate\u201d. If subsequent data is inserted into the target location, for example cell H8 in the grid , that data will be formatted according to the data type \u201cdate\u201d associated with the dropped <date> element.","As described above with reference to , a tree view structure  representing a generalized instance structure of a schema associated with a document is created and presented to a user via a \u201cTree View\u201d control hosted by the \u201cXML Source\u201d tree view task pane  to allow the user to annotate a document, such as a spreadsheet application document, by dragging and dropping selected elements or attributes from the tree view structure to target locations in the associated document. As should be understood by those skilled in the art, elements and\/or attributes from the tree view structure  may be applied to the document through other methods in addition to dragging\/dropping, such as highlighting the selected element or attribute followed by clicking on the target location within the document.","According to embodiments of the present invention, data structure associated with the tree view structure  may be applied to a document according to a number different methods. For example, elements or attributes from the tree view structure  may be dropped onto a blank spreadsheet grid  where the user is creating a new document having no data or other data structure. Alternatively, the user may open a document into the grid  that already contains some data and\/or data type structure, and the user may apply elements or attributes from the tree view structure  to the opened document and currently present data. Likewise, the user may open a preformatted document such as a time card, purchase order, and the like in order to apply markup language elements or attributes associated with a selected schema file. For example, the user may wish to markup a time card template with XML schema to allow the time card data in the spreadsheet to be expressed in a time care XML data format, to be consumed by other applications utilizing the schema file with which the time card data is annotated. Of course, as should be understood, for all of the above-described methods, a schema file must be associated with the new or previously prepared document so that the tree view structure  may be created for use with the document as described above with reference to . However, other applications that consume the XML data are not always required to use the schema file. For example, an XSLT transformation file or other suitable code may be written to parse the XML data and get at the data of interest without using the schema file.","Referring then to , a flow chart is described illustrating a method for mapping elements and\/or attributes of a markup language schema file from a tree view structure  representing a generalized instance of the schema file to target locations in a spreadsheet application workspace grid . The method  illustrated in  begins with start step  and proceeds to step  where a user opens a document into the grid  of the spreadsheet application  for creation of a new document or for editing an existing document. In order to apply XML structured to the document, the user associates a selected schema file to the document, or the user selects a document that has been previously associated with a selected schema file. Upon opening the new document or existing document with an associated schema file, the user may select to have the tree view structure  for the associated schema file created and presented in the pane  to allow the user to apply markup language elements associated with the schema file to the document. According to an embodiment of the present invention, the user may be allowed to selectively create the tree view structure , or the tree view structure  may be created automatically for the schema file associated with the document.","After the user opens the document for creation or editing and after the associated tree view structure  is created as described above with reference to , the method proceeds to step . The user selects one or more nodes from the tree view structure  for application to a target location in the document displayed in the grid  of the spreadsheet application. As shown in , the user may select a single non-repeating element such as the <name> element  for application to a target location such as cell H8 in the grid . Alternatively, the user may select a plurality of repeating elements from the tree view structure  for application to the document, as described in  where repeating elements , , and  are selected and dropped to the grid . Alternatively, the user may select a plurality of repeating elements and one or more single non-repeating elements for application to a target location in the grid , as illustrated in . At step , the selected nodes are dragged from the pane  to the grid . At step , a task pane programming module tracks information about all nodes being dragged from the tree view structure  to the grid . As described above, each node in the tree view structure  has an associated XPATH so that the eventual target location in the grid  may relate itself to the element or attribute dropped to it from the schema file associated with the tree view structure . At step , the task pane  obtains the XPATHs of the nodes being dragged from the tree view structure . Additionally, the task pane  determines whether the selected element or attribute is single or repeating.","At step , the user drops the selected element or attribute onto the grid  at the target location. For example, referring to , the user drops a selected <name> element  onto a target location, cell H8, of the grid . At step , the spreadsheet application grid  queries the task pane  for the XPATH of the node that has been dropped to the target location, and the grid  queries the task pane  to determine whether the dropped element or attribute is single or repeating. Also at step , the spreadsheet application grid  queries the task pane  for the data type of the node that has bee dropped to the target location. At step , the spreadsheet application sets the range XPATH property for the target cell to the first XPATH provided by the task pane. For example, if the user selected a single non-repeating element such as the <name> element  illustrated in , the XPATH property will be set as the XPATH provided for the single non-repeating <name> element . Alternatively, if the user selects a plurality of repeating elements , , and , at step , the spreadsheet sets the range XPATH property to the XPATH for the first element provided by the task pane, for example the <date> element .","At step , a determination is made as to whether at least one of the selected nodes is single or repeating. If yes, the method proceeds to step , and the spreadsheet application sets a repeating property associated with the dropped node. According an embodiment of the present invention the task pane  builds a collection of XPATHS associated with what has been dragged from the pane  to the target location in the grid . If the user has selected, for example, a plurality of repeating items , , and , a list such as described with reference to  is created having columns beginning at the target location to which the selected elements are dropped and including a number of columns equal to the number of repeating elements or attributes selected by the user. For example, if the user selects the <date> element , the <description> element , and the <amount> element  illustrated in  and drops those selected elements to target cell location I8 in the grid , a repeating property is set in the target cell I8 associated with a three-column list object for receiving repeating data under each of the data types date, description, and amount. At step , any list objects created at step  are merged with adjacent list objects if present.","If the user first selects the repeating <date> element , as illustrated in  and drags that element to a target cell I8 in the grid , a single list object associated with the repeating element <date> is created and a repeating property is set in the target cell I8. If the user subsequently drags the repeating <description> element  from the tree view structure  to the target cell J8 immediately adjacent to the previous target cell I8, a list object associated with the <description> element  is created and merged with the list object created for the <date> element  to create a two-column list. If repeating elements are dropped in non-adjacent locations, the resulting list objects are not merged and separate list objects are created.","Referring back to step , if all of the nodes selected from the tree view structure  for dropping onto a target cell in the grid  are single non-repeating nodes, then the method proceeds to step , and a \u201csingle\u201d property is set at the target cell location meaning that the data associated with the dropped element or attribute will effect only the target cell as illustrated in  where the single non-repeating <name>  is dropped to the target H8 in the grid . If the user selects multiple nodes, all of which are single non-repeating elements, a series of single mapped cells are created, from left to right just like the list objects.","After the single or repeating elements or attributes are dropped to the target locations in the grid , as described with reference to steps  or , the method proceeds to step , and a determination is made as to whether more XPATHS are being dropped. That is, a determination is made as to whether any other elements or attributes have been selected from the tree view structure  in the task pane  for dropping to target locations in the grid . If yes, the method proceeds back to step  and the spreadsheet application sets the range XPATH property equal to the next XPATH provided by the task pane  for the subsequently selected elements or attributes.","If no additional XPATHs are being dropped, the method proceeds to step  and the appropriate list or single mapped cell user interface is created for presentation to the user. For example, as illustrated in , if a single non-repeating <name> element  is dragged from the tree view structure  in the task pane  to the target cell location H8 in the grid , the border  is created and presented to the user to show the user visually the location of the single non-repeating element application to the grid . For another example, referring to , if the user has selected the single non-repeating <name> element and the repeating elements , , and , a list user interface  is created and is shown to user beginning at the target cell location H8 and extending across columns H, I, J, and K to show the user visually the location of the list objects that will be associated with repeating data associated with the <date>, <description> and <amount> elements, and to show the user the location of the single non-repeating name element associated with the repeating elements ,  and . After the single cell or list object user interfaces are provided to the user, as described, the method proceeds to step  where the user may select additional elements for application to the grid .","According to an embodiment of the present invention, if the user selects more than one single non-repeating element for dropping to the grid , each element is represented by a single border  in the grid . On the other hand, if the user selects a repeating element, the repeating will be shown visually as a list within the grid  starting at the target location of the dropped repeating element. If the user selects a mix of single and repeating elements, as illustrated in , list objects will be created for each element including the single non-repeating elements. That is, if ten non-repeating elements and one single element are selected and dropped to a target location, eleven list objects are created. According to one embodiment of the present inventions, a user interface may be provided to the user in such a case to allow the user to convert single non-repeating elements back to non-repeating single cells. Otherwise, the single non-repeating cell is treated as a list object because it has been selected along with repeating elements and will be \u201cfilled down\u201d with data associated with data items under the list objects. For example referring to , if data associated with the <date>, <description>, and <amount> elements is added to the grid  for five different expense items, the date, description, and amount for each expense item will be filled into the grid starting at row  and continuing to row  in columns beneath the target row H.","As shown in , according to the schema associated with the document created in the grid , headings for the <date>, <description>, and <amount> elements are inserted into the target row  when those elements are dropped to the target location. Following with the present example, if data associated with the <date>, <description>, and <amount> is entered under the \u201cdate\u201d, \u201cdescription\u201d and \u201camount\u201d headings in columns beneath those headings, a <name> associated with the name element  will be \u201cfilled down\u201d in a column beginning at cell H9 and extending down for each row of data entered under the <date>, <description>, and <amount> elements. If this result is acceptable to or desired by the user, the user may accept the result, but if this result is not acceptable to or desirable by the user, the user may select to convert the <name> element annotation to the grid  back to a single non-repeating element. According to one embodiment of the present invention, any time a mixture of single and repeating elements is applied to the grid , as described, a user interface for allowing the user to convert the single non-repeating element from a list object back to a single cell may be provided to the user so that if the data associated with the document created in the grid  is exported to a separate application, the single non-repeating element is properly applied to the document as a single non-repeating element.","As described above, and as illustrated in , additional options may be provided to the user such as the creation of headers associated with the elements dropped to the grid . Accordingly, if the user drags data associated with a header such as the <date>, <description>, or <amount> elements , , and , illustrated in , headers associated with those elements are created in the target cells of the grid . Additionally, as described above, other visual indicators of the application of the elements or attributes to the grid  are provided. For example, according to the embodiments of the present invention elements or attributes applied to the grid  are boldfaced or otherwise highlighted to show the user visually what elements or attributes have been applied to the document in the grid . Additionally, as described above, if the user selects an element or attribute in the tree view structure  a corresponding cell or list object target location in the grid  is highlighted to show the user the location in the grid  to which the element or attribute has been applied. Conversely, if the user selects a given location in the grid  to which an element or attribute has been mapped, the corresponding node in the tree view structure  is highlighted to show the user an element or attribute associated with given location in the grid .","It will be apparent to those skilled in the art that various modifications or variations may be made in the present invention without departing from the scope or sprit of the invention. Other embodiments of the invention will be apparent to those skilled in the art from consideration of this specification and practice of the invention disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
