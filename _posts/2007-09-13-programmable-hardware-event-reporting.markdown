---
title: Programmable hardware event reporting
abstract: Approaches for reporting hardware events from circuitry implemented in an integrated circuit (IC). The IC is configured with a circuit to be analyzed and an event monitor circuit. A process invokes an application programming interface (API) function that references an operating system managed object. The API function includes a parameter value that references the object. The process is operated in a first manner when the object is in a first state. An interrupt signal is generated by the event monitor circuit to the processor in response to an input signal from the circuit under analysis, which initiates execution of an interrupt handler. The object is placed in a second state by the interrupt handler. The process is operated in a second manner different from the first manner in response to the object transitioning to the second state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271911&OS=08271911&RS=08271911
owner: Xilinx, Inc.
number: 08271911
owner_city: San Jose
owner_country: US
publication_date: 20070913
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["The present invention generally relates to reporting events occurring in a circuit implemented on a programmable logic device via an operating system software file object.","The technology of programmable logic devices (PLDs) has progressed to a level such that it is possible to implement a microprocessor on a PLD and host an operating system such as Linux. Not only may this support various system on a chip (SOC) applications, but with the capabilities of a PLD such as a Virtex\u2122 field programmable gate array (FPGA) from Xilinx, the SOC is reconfigurable to suit changing requirements or adjust to changing environmental conditions.","The configuration of a PLD, such as an FPGA, generally refers to the state of the configurable logic resources of the device as programmed to accomplish a set of required functions. Data that is loaded into the device to program a desired configuration may be referred to as configuration data. The state of the device generally refers to the contents of registers in the device at a chosen time while the device is performing the desired functions.","Devices such as the Virtex FPGA have various modes available for accessing the configuration data and state. For example, for general needs the SelectMap interface of the Virtex FPGA may be used to load a configuration bitstream into the device or read back configuration data from the device. For testing and diagnostic activities, a boundary scan interface may be used to establish or read back state data. The internal configuration access port (ICAP) may be implemented on a Virtex FPGA to manipulate configurable resources after the device has already been configured.","Even though these interfaces for accessing configuration data or device state are suitable for most purposes, the interfaces are low-level (less abstract) and may be unnecessarily complex for some applications. For example, to the developer of an application in which the PLD is to be re-configured while being part of a running system (run-time reconfiguration), the low-level interface may not be familiar. The developer's lack of familiarity may present scheduling, reliability, and cost issues for debugging a circuit design.","The present invention may address one or more of the above issues.","The various embodiments of the invention provide a number of approaches for reporting hardware events from circuitry implemented in a programmable logic device (PLD). In one embodiment, a method comprises configuring the PLD with a logic circuit and an event monitor circuit. A process invokes an application programming interface (API) function that references an operating system managed object. The API function includes a parameter value that references the object. The process is operated in a first manner when the object is in a first state. An interrupt signal is generated by the event monitor circuit to the processor in response to an input signal from the logic circuit, which initiates execution of an interrupt handler. The object is placed in a second state by the interrupt handler. The process is operated in a second manner different from the first manner in response to the object transitioning to the second state.","In another embodiment, an apparatus is provided for reporting hardware events from circuitry implemented in a programmable logic device (PLD). The apparatus comprises means for configuring the PLD with a logic circuit and an event monitor circuit coupled to the logic circuit; means for invoking by a process an application programming interface (API) function that references an object managed by an operating system (OS) executing on a processor, wherein the invoking of the API function includes a parameter value that references one of a plurality of OS-managed objects; means for operating the process in a first manner in response to the invoking of the API function and the object being in a first state; means for generating an interrupt signal by the event monitor circuit to the processor in response to an input signal from the logic circuit; means for executing an interrupt handler on the processor in response to the interrupt signal; means for accessing the object by the interrupt handler, wherein the object is placed in a second state by the interrupt handler; and means for operating the process in a second manner different from the first manner in response to the object transitioning to the second state.","An electronic system with reporting of hardware events to software is provided in another embodiment. The system comprises a programmable logic device (PLD), an interrupt controller, and a processor. The programmable logic device (PLD) is configured with a logic circuit and an event monitor circuit coupled to the logic circuit. The event monitor is configured to generate an interrupt signal in response to an input signal from the logic circuit. The interrupt controller is coupled to the event monitor circuit and is configured to activate an interrupt handler in response to the interrupt signal. The processor is coupled to the interrupt controller and is configured to execute the interrupt handler, an operating system (OS), and a process. The process invokes an application programming interface (API) function that references an object managed by the OS, and the invoking of the API function includes a parameter value that references one of a plurality of OS-managed objects. The process is configured to operate in a first manner in response to the invoking of the API function and the object being in a first state. The interrupt handler is configured to access and place the object in a second state, and the process is further configured to operate in a second manner different from the first manner in response to the object transitioning to the second state.","It will be appreciated that various other embodiments are set forth in the Detailed Description and Claims which follow.","The various embodiments of the invention provide reporting of hardware events from circuitry implemented in a programmable logic device (PLD). Reports of the events are easily accessible to a software process via standard operating system-managed objects and standard interfaces. One or more event monitor circuits are configured on the PLD to detect the desired hardware event(s). In response to detecting a hardware event, the event monitor circuit generates an interrupt signal to a processor, and an interrupt handler is executed on the processor in response to the interrupt signal. The interrupt handler is adapted to access the operating system object associated with the event. The software process receives notification of the event by way of accessing the operating system object via an application programming interface (API) call. The process may be suspended based on the state of the object. The event monitor(s) operate independent of the software process that waits for the events. Once the interrupt handler accesses the object and changes the object's state, the operating system awakens the software process, and the process may take action based on the occurrence of the event.","For example, the event reporting mechanism may be used for analyzing or debugging a hardware design that is implemented on a PLD. That is, output data from the hardware design may be logged, or state data may be read from the hardware design and analyzed. Depending on the design being debugged, the clock may be halted, stepped, or allowed to run freely. The operating system (OS) object provides a simple and easy-to-use interface for a software process to receive notification of hardware events from monitoring circuits that operate independent of the software process.","The various embodiments of the invention use standard, OS-provided objects and interfaces to provide application access to events triggered by PLD-implemented circuitry. Examples of standard objects include software signals and file system objects, such as those supported by the POSIX operating system. In one embodiment, one or more standard OS-provided software signals (e.g., the POSIX SIGSEGV and SIGIO signals) may be used by one or more interrupt handlers to signal the occurrence of one or more events triggered by the PLD-implemented circuitry. In another embodiment, one or more standard OS-provided file system objects (e.g., sockets and\/or pipes) may be accessed by one or more interrupt handlers to signal the event occurrence. The wide use of software signal and file system APIs by software developers may reduce the development costs associated with applications needing to act upon PLD triggered events.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["102","104","106","1","106","108","1","108","106","1","106"],"i":["n","n ","n "]},"The occurrence of a hardware event is detected by an event monitor and signaled to a software process via the interrupt controller  and processor . Even though the interrupt controller and processor are shown as being integrated as part of the PLD , it will be appreciated that the interrupt controller and\/or processor may be located on a device or integrated circuit that is separate from that of the PLD. Through the signaling of an interrupt to the processor, interrupt handler software executing on the processor is executed and the interrupt handler changes the state of a software-accessible object that is managed by the operating system.","Application software may be implemented to respond to a change in state of the object. In using the object to respond to hardware events, the application software first makes an API call to the operating system to access the object. The actions of the application software in accessing the object depend on the state of the object as well as on the particular implementation requirements. Generally, the object is in one state if no event has been reported and in another state when an event has been reported. Example alternative implementations of the actions of the applications software when the state of the object indicates that no event has been reported include returning control to the software and the software polling the object at a later time, suspending execution of the software until an event is reported, and returning control to the application software after registering a callback function that is to be invoked when an event is reported. In response to the change in state of the object, the operating system awakens or resumes execution of the application software.","The software object used to signal the occurrence of a hardware event may be selected according to implementation requirements. For example, the POSIX\u00ae interface supports software signals that are analogous to hardware signals (e.g., SIGSEGV for memory events and SIGIO for input\/output events). In one embodiment, an OS-provided signal may be used to report events. An application software process may register with the operating system to have a callback function invoked in response to the signal being issued by the operating system. In another embodiment, a socket may be used to indicate the occurrence of an event. With a socket, the application software process may listen for a connection request on a socket, and the interrupt handler may make a connection request on that socket in response to an interrupt signal, which signals the occurrence of the hardware event. When a connection request is present on the socket, the software process resumes and processes the request according to implementation requirements. In another embodiment, a pipe, such as that supported on the UNIX\u00ae operating system, may be used by the application software process to receive notification of a hardware event. When the software process calls the operating system to read from the pipe and the pipe is empty, the operating system suspends execution of the software process. The operating system resumes execution of the software process once the interrupt handler has written data in the pipe, which can then be read by the process.","As an alternative to or in combination with the event monitors ---, an event monitor  may be implemented to monitor configuration memory of the PLD. The event monitor  is coupled to an internal configuration controller , which provides access to the configuration state of the PLD over general interconnect circuitry within the device. For example, in one embodiment, the PLD  is a field programmable gate array (FPGA) such as a Virtex FPGA from Xilinx, Inc., and the configuration controller  may be implemented with functions such those provided by the internal configuration access port (ICAP) in that FPGA. The configuration controller  may also interface with the processor via bus .","The event monitor  may be configured to continually read back a subset of configuration data from the configuration memory of the PLD via the internal configuration controller . In response to detecting a certain state in the configuration data, the event monitor  generates an interrupt signal to the interrupt controller .","Depending on application and implementation requirements, the PLD may be configured with additional controllers, for example, controllers  and , that provide access to off-chip resources. For example, controller  may be a memory controller that provides access to memory . It will be appreciated that a variety of commercially available or proprietary memory architectures and interfaces may be used to implement the memory controller and memory. Other types of controllers, illustrated by block , may provide network or communications interfaces and access to persistent storage systems such as tape drives and disk drives.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["202","204","206"]},"The interrupt handler(s)  is a kernel-level routine that is activated in response to an interrupt signal. The action taken by the interrupt handler depends on the object through which the hardware events are communicated. As described above, for example, the object may be an operating system-supported software signal, a socket, or a named pipe, which is a file. The software signal is supported by signal layer , the socket is supported by socket layer , and the named pipe is supported by file system .","The debug process  uses operating system API calls to indicate the desire to be notified of the occurrence of a hardware event. For an operating system-supported software signal, the process registers a callback function with the signal layer  to be invoked when the signal is asserted. The signal layer saves a reference to the callback function and returns control to the debug process, whose further processing is application dependent. In response to an interrupt, the interrupt handler changes the state of the signal associated with the interrupt, which causes the signal layer to invoke the callback function.","For a socket-based approach, the debug process makes an API call to the operating system to listen on a specified socket. In response, the socket layer suspends execution of the process. When the interrupt handler is executed in response to an interrupt signal, the interrupt handler makes a connection request on the socket via the socket layer. The debug process is awakened and thereafter accepts the connection request. If implemented to provide further data, the interrupt handler may write event and\/or state data to the socket. The data may be streamed from the event monitor block in the programmable logic. The state data can be extra data from the circuit or the event data could be state data. The data written by the interrupt handler may be any permutation of event data and state data and may vary, depending on the event monitor being used. While not shown, it will be appreciated that another kernel space process may read from the socket data that is written by the user application process , and thereafter interface with the internal configuration controller (, ) to update registers or configuration memory of the PLD.","It will be appreciated that the socket-based approach for hardware event reporting is amenable to networked control. For example, a process on a monitor\/control node  may be coupled to the socket layer  via network . Through the socket, a process on node  may be notified of hardware events reported by interrupt handler .","In another embodiment, the user process may be notified of hardware events by way of files such as named pipes, which are supported by the UNIX\u00ae operating system. The user process  may reference a particular named pipe that is created for purposes of reporting hardware events. The file may be referenced by its hierarchical directory and file name. To use a pipe, the user process makes a file system call to read from the named pipe. If there is no outstanding (not yet recognized by the user process) hardware event, the pipe will be empty and the user process is suspended by the operating system until there is data available in the pipe. Once the interrupt handler is activated in response to an interrupt signal, the interrupt handler makes a file system call to write to the named pipe, and the data is written to a file  in user space. The named pipe is maintained along with other files  in user space.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3"},"At step , the PLD is configured with the logic under analysis and one or more suitable event monitors. The logic under analysis and event monitor(s) may be prepared using conventional design tools. Some tools may include a library of analyzer cores that may be adapted to generate an interrupt signal to a processor and integrated with a user's design. An analyzer core may implement a simple level or edge triggered circuit or more complex logic if required. Alternatively or in combination, an event monitor may be implemented as a circuit that monitors the configuration state of the PLD via an internal configuration access port as described above.","A PLD may also have a processor that is integrated with the programmable logic circuitry on the same integrated circuit die. Alternatively, the processor may be implemented on an integrated circuit die other than that of the programmable logic circuitry. In both implementations, at step  the processor is configured with an operating system, which includes a file system, and an application process. As discussed above, the application process may be useful for debugging the logic that is implemented on the PLD.","The logic on the PLD and the processor are started at step  to initiate analysis of the logic. The processor boots the operating system, and the application process is also started. At step , the application process makes an API call to access an operating system object. In one example embodiment, the object is an operating system-managed software signal. In another embodiment, the object is one supported by the file system, such as a socket or named pipe.","At step , the operation of the application process depends on the state of the object, which indicates whether an event was reported. For example, if the signal is not asserted, there is no connection request on the socket, or the pipe is empty. The logic under analysis continues to operate according to the input stimuli, and the application process is operated in an application-specific manner until an event is detected and reported. It will be appreciated that the different manners of operating the application process may include returning control to the application process so that the process may at some later time again poll the state of the object. Alternatively, the application may be suspended by the operating system when the object is in the first state and then resumed once the object transitions to the second state. In another embodiment, the application process may register a callback function with the operating system, and the operating system may invoke that callback function in response to the object changing to the second state.","In response to the state of a signal within or provided by the logic under analysis, an event monitor generates an interrupt signal to the processor at step . In response to the interrupt signal, the processor activates an interrupt handler at step . The interrupt handler executes on the processor and accesses the application-accessible object that is used to report the occurrence of the event. The access to the object depends on the object that is used to implement the event reporting.","At step , the operating system awakens the application process and resumes execution of the process in response to the interrupt handler's access to the operating system object. The application process may thereafter process the event. The actions taken in response to an event may vary between applications and may include actions such as storing data descriptive of the event in an event log, inputting and logging other data from the logic under analysis, analyzing the state of various data output by the logic under analysis, and\/or halting or stepping the clock of the logic.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["402","404"]},"The operating system calls the callback function registered by the application process in response to the changed state of the software signalat step . It will be appreciated that the application process may have different signal handlers for different types of signals.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["502","504","506"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6","b":["602","604","606"]},"At step , the application process accepts the connection request, and at step , the interrupt handler writes event-related data to the socket. The application process may then read the event-related data from the socket at step .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7","b":["700","701","702","703","704","705","706","707","708","710"]},"In some FPGAs, each programmable tile includes a programmable interconnect element (INT ) having standardized connections to and from a corresponding interconnect element in each adjacent tile. Therefore, the programmable interconnect elements taken together implement the programmable interconnect structure for the illustrated FPGA. The programmable interconnect element (INT ) also includes the connections to and from the programmable logic element within the same tile, as shown by the examples included at the top of .","For example, a CLB  can include a configurable logic element (CLE ) that can be programmed to implement user logic plus a single programmable interconnect element (INT ). A BRAM  can include a BRAM logic element (BRL ) in addition to one or more programmable interconnect elements. Typically, the number of interconnect elements included in a tile depends on the height of the tile. In the pictured embodiment, a BRAM tile has the same height as four CLBs, but other numbers (e.g., five) can also be used. A DSP tile  can include a DSP logic element (DSPL ) in addition to an appropriate number of programmable interconnect elements. An IOB  can include, for example, two instances of an input\/output logic element (IOL ) in addition to one instance of the programmable interconnect element (INT ). As will be clear to those of skill in the art, the actual I\/O pads connected, for example, to the I\/O logic element  are manufactured using metal layered above the various illustrated logic blocks, and typically are not confined to the area of the input\/output logic element .","In the pictured embodiment, a columnar area near the center of the die (shown shaded in ) is used for configuration, clock, and other control logic. Horizontal areas  extending from this column are used to distribute the clocks and configuration signals across the breadth of the FPGA.","Some FPGAs utilizing the architecture illustrated in  include additional logic blocks that disrupt the regular columnar structure making up a large part of the FPGA. The additional logic blocks can be programmable blocks and\/or dedicated logic. For example, the processor block PROC  shown in  spans several columns of CLBs and BRAMs.","Note that  is intended to illustrate only an exemplary FPGA architecture. The numbers of logic blocks in a column, the relative widths of the columns, the number and order of columns, the types of logic blocks included in the columns, the relative sizes of the logic blocks, and the interconnect\/logic implementations included at the top of  are purely exemplary. For example, in an actual FPGA more than one adjacent column of CLBs is typically included wherever the CLBs appear, to facilitate the efficient implementation of user logic.","Those skilled in the art will appreciate that various alternative computing arrangements, including one or more processors and a memory arrangement configured with program code, would be suitable for hosting the processes and data structures of the different embodiments of the present invention. In addition, the processes may be provided via a variety of computer-readable media or delivery channels such as magnetic or optical disks or tapes, electronic storage devices, or as application services over a network.","The present invention is thought to be applicable to a variety of systems for reporting events occurring in PLD hardware to software. Other aspects and embodiments of the present invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and illustrated embodiments be considered as examples only, with a true scope and spirit of the invention being indicated by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various aspects and advantages of the invention will become apparent upon review of the following detailed description and upon reference to the drawings, in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
