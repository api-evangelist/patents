---
title: Code framework for generic data extraction, analysis and reduction
abstract: A system and a method are provided for processing data from a computer that executes an application program. The system includes an extraction engine, a reduction program and an analysis program. The extraction engine retrieves execution data from the application program and records the data to nonvolatile memory as extract data. The reduction program reads the extract data from the memory and reduces the data into human readable format as reduce data. The analysis program analyzes the reduce data in accordance with operator-provided instructions and produces event data that identify at least one sequence associated with the execution data. A management console further displays the implemented processes. The extraction engine can further include a classes assigner for categorizing said execution data into classes. The reduction program can further include a structure builder for formatting said extract data. The reduction program can further include an event layout builder for formatting said event data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=H0002272&OS=H0002272&RS=H0002272
owner: The United States of America as represented by the Secretary of the Navy
number: H0002272
owner_city: Washington
owner_country: US
publication_date: 20090910
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","STATEMENT OF GOVERNMENT INTEREST","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Pursuant to 35 U.S.C. \u00a7119, the benefit of priority from provisional application 61\/192,869, with a filing date of Sep. 17, 2008, is claimed for this non-provisional application.","The invention described was made in the performance of official duties by one or more employees of the Department of the Navy, and thus, the invention herein may be manufactured, used or licensed by or for the Government of the United States of America for governmental purposes without the payment of any royalties thereon or therefor.","The invention relates generally to data extraction techniques. In particular, the invention relates to data extraction reduction and analysis, together with interfaces that operate to present the information from the data as events.","Modern software systems typically consist of a large number of interdependent software applications that run simultaneously on one or more physical hardware systems. These applications employ well-defined software interfaces in order to communicate data and invoke commands on remote software processes that enable the proper execution of the software system as a whole. The success of large software systems is directly tied to the correct implementation of these software interfaces.","Conventional data extraction techniques yield disadvantages addressed by various exemplary embodiments of the present invention. In particular, these suffer from deficiencies related to portability to a variety of platforms.","Various exemplary embodiments provide a system and a method for processing data from a computer that executes an application program. The system includes an extraction engine, a reduction program and an analysis program. The extraction engine retrieves execution data from the application program and records the data to nonvolatile memory as extract data. The reduction program reads the extract data from the memory and reduces the data into human readable format as reduce data. The analysis program analyzes the reduce data in accordance with operator-provided instructions and produces event data that identify at least one sequence associated with the execution data.","In various exemplary embodiments a management console displays the implemented processes. The extraction engine can further include a classes assigner for categorizing said execution data into classes. The reduction program can further include a structure builder for formatting said extract data. The reduction program can further include an event layout builder for formatting said event data.","In the following detailed description of exemplary embodiments of the invention, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized, and logical, mechanical, and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","The importance of the interfaces used in conventional display systems has led software projects to typically perform data extraction, data reduction, and data analysis. These operations provide verification of the data and command instructions provided via software interfaces, and isolate problems should these occur. Traditionally, software projects have developed support applications that perform the data extraction, data reduction, and data analysis functions required by the project. However, these support applications were focused on the data formats and interfaces used by the particular software project and could not be reused on other projects without expending significant amounts time, money, and resources on code modification, rework, testing, and maintenance.","Various exemplary embodiments provide a software framework that enables data extraction, data reduction and data analysis technology applications across a wide variety of software development projects. The framework clearly and deliberately separates the data extraction, data reduction, and data analysis functions from the specific computer hardware, computer software, interface protocols, and data formats used within a particular software development project. This facilitates the development of additional value-added data extraction, data reduction, and data analysis functions independent of the specific technologies used by a particular software development project.","Additionally, the framework does not enforce the use of a particular set of hardware, software, interface protocols, or data formats on a software development project. The framework executes on a variety of computer hardware running a variety of software operating systems, and allows the end- user (i.e., operator) to control the specific technologies used within their projects without adding additional dependencies upon them. The framework thereby enhances the productivity of software projects by allowing the operator to gain the advantages of data extraction, data reduction, and data analysis technologies without incurring the expense of designing, developing, testing, and maintaining a custom set of tools that implement these functions.","Modern software systems typically consist of a large number of interdependent software applications running simultaneously on one or more physical hardware systems. These applications employ well-defined software interfaces in order to communicate data and invoke commands on remote software processes that enable the proper execution of the software system as a whole. The success of large software systems is directly related to the correct implementation of these software interfaces. Due to the importance of these interfaces, software projects typically perform data extraction, data reduction, and data analysis to verify the data and command provided in software interfaces and to isolate problems if they occur.","Traditionally, a software project supports applications that perform the data extraction, data reduction, and data analysis functions required by the project for a specific platform. However, these support applications have been focused on the data formats an interlaces used by the particular software project and could not be reused on other projects without expending significant amounts time, money, and resources on code modification, rework, testing, and maintenance.","Due to these limitations, development of a set of tools was initiated to overcome these limitations by utilizing the capabilities of the C++ computer programming language, freely available open source software, and object oriented design principles. Their concept involved the development of a framework that clearly separated the data extraction, data reduction, and data analysis functions from the software interlaces and data formats used by these functions. The actual implementation of the software interfaces and data formats would be left to the users of the framework.","The framework itself only contains functionality that is common across multiple software projects, and enables the operator to customize the features specific to their individual needs. Additionally, this framework can be highly portable in order to execute on a variety of computer hardware and software systems. By doing so, the framework could be usable by many different software projects thereby dramatically reducing the time, money, and resources required to implement data extraction, data reduction, and data analysis capabilities in a software system.","A framework called Generic Data Extraction, Analysis and Reduction (GeDEAR) is currently being used by the Tomahawk Weapon Control System and the Littoral Combat Ship: Surface Warfare Mission Package: Module Engagement Controller software systems. The GeDEAR framework is being considered by other programs as well, however at the time of this writing no other formal commitments have been received.","Software systems that utilize data extraction, data reduction, and data analysis capabilities typically organization these functions into several software applications. The first is an application capable of receiving data from other software applications and recording the data to some form of persistent storage. In the GeDEAR framework, this is referred to as the Extraction Server (ES). The second is an application that reads the data from persistent storage, reduces the data into a human readable format, and analyzes the data according to rules specified by the operator. In the GeDEAR framework, this is referred to as the Data Reduction Program (DRP).","Some systems may include an additional application that controls the operation of the ES. In the GeDEAR framework, this is referred to as the Management Console (MC). The interactions between the software system and the data extraction, data reduction, and data analysis capabilities are outlined in the following system example of using the GeDEAR framework.","In this example, the software system consists of two physical hardware machines, computer-A and computer-B. Within these machines, several software applications are executing and communicating with each other. Additionally, one application is communicating with some external interface. This interface may be hardware or software. The ES runs on a machine and records any data provided thereto. The ES stores these data to some persistence (i.e., nonvolatile) storage. Within this configuration, the state of the ES is monitored and controlled from the MC application. At some point in the future, the DRP opens the persistent storage created by the ES, reads the stored events, applies some logic to decode the events, and outputs the events to the operator.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","110","115","110","120","125","130","110","140","145","150","155","140"]},"Application-B  communicates with application-A  and application-C , and all three programs communicate with the server  through the interface block . The server  provides data to memory storage  through a format block . The data can be extracted from the storage  to a reduction program  via a format block . The program  can receive initial condition information from event descriptions  to provide an event output .","The external interface , applications ,  and  are specific to a project that uses the GeDEAR framework, which imposes no additional dependency. The project using GeDEAR is at liberty to implement these sections using any means necessary to complete the project. The server , console  and program  represent core elements of the GeDEAR framework and provide the functionality common across all data formats and interface protocols.","The interface and format blocks , , ,  are customizable by the operator to meet their specific needs. Within the GeDEAR framework, these are referred to as plug-ins. Although the GeDEAR framework does provide some out-of-the-box reference implementations for these customizable sections, the project using the framework may treat these as optional and thereby may implement its own.","This separation between the interface\/format blocks and the core elements in  represents the result of the careful and deliberate isolation of the software interfaces and data formats used by data extraction, data reduction, and data analysis capabilities from the particular data being extracted. This separation provides the GeDEAR framework with the flexibility required to enable generic data extraction, data reduction, and data analysis capabilities. This enables the GeDEAR framework to focus on providing value-added data extraction, data reduction, and data analysis functions without delving into the intricacies of the underlying software interfaces and data formats.","The components of the GeDEAR framework operate with extracted data through a collection of abstract C++ classes that define the interface that all software interfaces and data formats conform to in order to be supported by the framework. These interfaces are further explained subsequently in this disclosure. From an end-user perspective, these interfaces take the form of plug-ins. These plug-ins can be written by inheritance from a base C++ class and implementing the required C++ methods. The code for the plug-in can be compiled into a standalone library that is loaded dynamically at run-time by the GeDEAR plug-in framework. All of the GeDEAR applications contain support for extension and modification through the use of plug-ins.","The following sections of this document provide additional details of the three main components of the GeDEAR framework, the Data Reduction Program (DRP), Extraction Server (ES), and Management Console (MC). Operators of the various framework components specify the plug-ins to load into the application as well as the software interfaces and data formats that should be used for any given execution of the DRP, ES, or MC through the use of an extended markup language (XML) configuration file. This configuration file is loaded during application startup processing. For example:\n\n","In this example, the operator instructs the DRP to load two plug-in libraries. The first library is the named \u201cgedear_binary_format\u201d and is located in \/usr\/lib. The second library is named \u201cgedear_output_mods\u201d and located in the current working directory.","The default EventDataSourceLoader can be set to \u201cGeDear::Plugins::Formats::Binary\u201d as the type. Additionally the DRP is informed the file extension of this file type is in the format \u201cDx* . dx\u201d This example also sets the default StructureBuilder to the type \u201cGeDear::Plugins::Formats::Binary\u201d.","There are no dependences between the components of the GeDEAR framework. The DRP may be used to reduce and analyze data that were not extracted from the ES, and the ES does not require use of the DRP for reduction and analysis. Likewise, the ES does not require the MC be used to monitor and control it. The GeDEAR framework does not make use of any custom written inter-application protocols.",{"@attributes":{"id":"p-0043","num":"0056"},"figref":"FIG. 2","b":["200","210","215","220","230","235","250","255","260","265","255","260","250"]},"The object event layout  consists of one or more interface event layout structure  objects and one or more interface displayable  objects. There are at least three implementations of interface displayable . These are object constant , object field , and object array . Object field  consists of a single interface event layout field  object. Object array  consists of one or more interface Displayable  objects.","In the flowchart , solid diamonds denote aggregation between items, open triangles denote inheritance and dash arrows indicate dependency. For example, the classes set  is aggregated with the interfaces  and  to combine their functionalities at its penultimate block. Each interface provides block for aggregation represents a shell to implement the instructions or establish formats therein. The classes provide methods, definitions and implementation procedures (i.e., executable functions) for reporting and analyzing data. The interface  inherits definitions from the interface  and  to permit operation using lower levels of instructions without controlling details of those functions. The interface  provides an operator-defined declaration for retrieving information fields within the data.","The Loading Events sequence begins with the operator informing the DRP Human Computer Interface (HCI) to load events. The DRP HCI responds by invoking the build method on the StructureBuilder instance to construct an EventLayout::Structure in accordance with the XML definition provided. The structure of the XML and the conversion of the XML into an EventLayout::Structure occurs via some implementation-specific means.","The DRP HCI then constructs an instance of EventLayout with the newly built EventLayout::Structure. EventLayout iterates through the event display definitions contained with a separate XML structure and constructs all the Displayable elements required by this event layout. EventLayout accomplishes this by invoking methods on the EventLayout::Structure in order to obtain the correct EventLayout::Item needed for display.","The Loading Data File sequence begins with the operator informing the DRP human computer interface to load a data file. The DRP HCI responds by invoking the build method on each successive EventDataSourceLoader object until identifying a loader that can parse the provided data in the file. The EventDataSourceLoader, through some implementation-specific means, returns a new instance of EventDataSource able to parse these data.","The processing events sequence begins with the DRP operator informing the DRP HCI that processing should being. The DRP HCI then calls the EventDataSource for the MoreEvents method. If this source has more events, the DRP HCI retrieves the next event from the EventDataSource. From the event data, the DRP HCI locates the event definition able to display the extracted data. The DRP HCI then determines whether this event is valid for display, or else the event should be skipped as part of the filtering processing. This filtering is performed based upon user-supplied criteria such as event number, event sequence number, event extraction time, or the actual values within fields within the events.","For the condition in which the event is valid and should be displayed, the DRP HCI invokes the print method on the correct EventLayout object. The EventLayout object iterates through the Displayable objects contained therein and invoke the print method on each respective Displayable object. If this Displayable object actually represents a Field, the underlying EventLayout::Field contained within the Displayable object is called to return the actual value contained within the extracted data.",{"@attributes":{"id":"p-0051","num":"0064"},"figref":"FIG. 3","b":["300","300","310","312","314","320","322","324","326","330","332","334","340","342","344","346","348"]},"The second cycle  builds structure until completion at the third trigger , whereas the third trigger  creates classes until completion at the fourth trigger . An EventLayout::Structure mark  initiates a fifth trigger  with a construction loop  and a sixth trigger . The fourth cycle  creates event layouts until completion at the fifth trigger . The fifth cycle  obtains names until completion at the sixth trigger . A Display mark  provides a seventh trigger . The sixth cycle  creates layout structures until completion at the seventh trigger .",{"@attributes":{"id":"p-0053","num":"0066"},"figref":"FIG. 4","b":["400","410","412","414","420","422","424","430","432","440"]},{"@attributes":{"id":"p-0054","num":"0067"},"figref":"FIG. 5","b":["500","510","512","514","520","521","522","514","521","522","523","524","525","526","527"]},"An Event Data Source mark  initiates third and fourth triggers ,  that respectively terminate the third and fourth cycles , . An Event Layout mark  initiates a fifth trigger  validates events in a seventh cycle , together with a sixth trigger  with a sub-trigger  that prints in an eighth cycle .","A Display mark  initiates a seventh trigger  for obtaining display values in a ninth cycle . An EventLayout::Structure mark  initiates an eighth trigger ; and an Event Layout::file  initiates a ninth trigger . The seventh cycle  validates until completion at the eighth trigger . The eighth cycle  prints until completion at the seventh trigger , while the ninth cycle  obtains values until completion at the ninth trigger .",{"@attributes":{"id":"p-0057","num":"0070"},"figref":"FIG. 6","b":["600","610","620","630","610","620","630"]},{"@attributes":{"id":"p-0058","num":"0071"},"figref":"FIG. 7","b":["700","710","720","722","710","730","732","734","736","738"]},"An ExtractionEngine mark  initiates a third trigger  for sequencing requests in queuing loop , and a fourth trigger  for performing requests in a third cycle  together with updating status in an updating loop . An EventDataSink  initiates a fifth trigger , which completes the third cycle  to perform requests. A separate thread  can also interact with the fourth trigger .",{"@attributes":{"id":"p-0060","num":"0073"},"figref":"FIG. 8","b":["800","810","820","830","820","830"]},{"@attributes":{"id":"p-0061","num":"0074"},"figref":"FIG. 9","b":["900","910","912","914","916","918","920","921","922","923","924","925","926"]},"The first cycle  selects server types until completion at the second trigger , and the second cycle  begins monitoring until completion at the third trigger . A ServerFactory  initiates fourth, fifth and sixth triggers ,  and , the last of which creating a server in a sixth cycle  until completion. A Server  initiates a seventh trigger that provides a terminus for the sixth cycle .","The parameters provided or created by these operations can be summarized, as provided by , by a series of descriptions in tabular form, with identification by name, description and implementation. These lists, or portions of an overall list are described briefly as follows.",{"@attributes":{"id":"p-0064","num":"0077"},"figref":["FIG. 10","FIG. 11"],"b":["1000","1010","1020","1030","1040","1050","1100","1110","1120","1130"]},{"@attributes":{"id":"p-0065","num":"0078"},"figref":["FIG. 12","FIG. 13"],"b":["1200","1210","1220","1230","1300","1310","1320","1330"]},{"@attributes":{"id":"p-0066","num":"0079"},"figref":["FIG. 14","FIG. 15"],"b":["1400","1410","1420","1430","1500","1510","1520","1530"]},"Various exemplary embodiments describe the design that enables development of GeDEAR tools, rather than particular GeDEAR applications. The following examples provide a typical usage scenario of the GeDEAR Data Reduction Program (DRP) to demonstrate the context of when processing occurs and how the operator is informed of the processing status.","The first step involves loading the extracted data. In this sequence, the operator loads a file that contains extracted data. The first phase is to inform the DRP that a data file should be loaded by selecting a file from the directory control or through the File menu. Upon selecting the appropriate file, the DRP automatically opens the file and performs the processing described in the sequence diagram .",{"@attributes":{"id":"p-0069","num":"0082"},"figref":"FIG. 16","b":["1600","1610","1620","1630","1610","1640","1620","1650","1660"]},"Upon completion of file loading, the operator may select a menu command to generate an event summary. This summary lists the events within the loaded data file, when the events occur and how often the events occur.",{"@attributes":{"id":"p-0071","num":"0084"},"figref":"FIG. 17","b":["1700","1710","1620","1710","1660","1720","1650"]},"The second step involves loading the events. In this sequence, the operator loads events into the DRP to allow for their reduction and display. The event file is an XML file that describes the data and optionally defines the formatting for display in the box . The first phase is to inform the DRP that events should be loaded. This can be accomplished through a file menu above the upper menu  or through a load toolbar icon.  shows a third exemplary GeDEAR DRP window  with the file menu , which can be expanded. This results in the DRP providing a standard file selection box to the operator enabling selection of the event file or files to load into the DRP.","The third step is performed internal to the DRP. This step involves loading the event definitions described within the XML as prescribed in the flowchart .  shows a fourth exemplary GeDEAR DRP window  in which events in the upper menu  is selected. A window box  provides a list of event XML files, including a highlighted line that identifies drp.dat.xml as the selected file.","Upon loading these events, the operator can be provided with a listing of all the events known to the DRP.  shows a fifth exemplary GeDEAR DRP window . The events are displayed as a list  within an expanded events content box , with associated parameters listed under their corresponding parameters in the header .","The fourth step involves the operator activating at least one event after the events have been loaded. An active event represents the event to be reduced from the extracted data and displayed to the operator. An event may be activated by either selecting the activate button or through right-click context menus.  shows a sixth exemplary GeDEAR DRP window . A selection  of the events shown in the list  can be distinguished by highlighting. Activation opens a menu box  that includes an \u201cactivate\u201d command, from which  displays a seventh exemplary GeDEAR DRP window . The DRP denotes those events that are active in the events table.","The fifth step involves reducing the data. With the extracted data file selected and events loaded the operator may reduce the data. This causes the DRP to display the active events within the data file in by performing the processing described in sequence diagram .  shows an eighth exemplary GeDEAR DRP window . Selection of the \u201coutput\u201d in upper menu  yields within a window box  a descriptor list  identifying actions performed from activation of the selected files.","The GeDEAR framework has the following advantages over the old methods:\n\n","While certain features of the embodiments of the invention have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and various other features and aspects of various exemplary embodiments will be readily understood with reference to the following detailed description taken in conjunction with the accompanying drawings, in which like or similar numbers are used throughout, and in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 10-15"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 16-23"}]},"DETDESC":[{},{}]}
