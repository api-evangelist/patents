---
title: Generic command interface for multiple executable routines having character-based command tree
abstract: A processor based system includes a parser, configured for identifying whether an input word received from a user is a new command word relative to a character-based command parse tree, and a tree management process configured for managing the character-based command parse tree. The character-based command parse tree includes multiple element levels for respective character positions for each known command word, and at least one character element at each level. Each character element specifies at least one corresponding character component and a corresponding at least one index value. The parser determines whether the input word is a new command word based on whether the characters of the input word match successive elements, with the last character matching an end node, within the character-based parse tree; if the parser determines that the input word is a new command word, the tree management process performs update operations to accommodate the new command word, including updating the character-based command parse tree with the new command word.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06980996&OS=06980996&RS=06980996
owner: Cisco Technology, Inc.
number: 06980996
owner_city: San Jose
owner_country: US
publication_date: 20040312
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["This application is a divisional of application No. 09\/778,773, filed Feb. 8, 2001, now U.S. Pat. No. 6,738,781, which is a continuation-in-part of commonly-assigned, copending application Ser. No. 09\/604,880, filed Jun. 28, 2000, entitled GENERIC COMMAND INTERFACE FOR MULTIPLE EXECUTABLE ROUTINES, the disclosure of which is incorporated in its entirety herein by reference.","1. Field of the Invention","The present invention relates to command and interface control of Operating Administration and Monitoring (OAM) executable routines within software systems.","2. Description of the Related Art","Operating Administration and Monitoring (OAM) tools are software-based resources used as administration and\/or diagnostic tools for complex processor-based executable software systems, such as software-based unified messaging software systems. A subset of OAM tools includes Real Time Monitoring (RTM) programs, used to monitor and control selected states and processes within the software based system. For example, a given RTM program may generate a real-time display (i.e., \u201ca screen\u201d) of selected parameters during execution of a prescribed process; the RTM program may also provide a diagnostic resource that enables resetting of various states or variables within the prescribed process. Other administration and diagnostic tools include external binary files that execute in response to a procedure call, and Simple Network Management Protocol (SNMP) agents or scripts configured for generating an e-mail message as an alarm in response to a detected event.","Hence, system administrators may attempt to utilize multiple tools within a software system in order to increase the available administration and diagnostic tools for improved system performance. The use of multiple RTM programs and other OAM tools, however, requires the users to remember the names and syntaxes of numerous commands for the respective RTM programs and OAM tools. Hence, an increase in the number of OAM tools would result in the system administrator needing to develop expertise in the command names and syntaxes for the respective OAM tools.","The commonly-assigned, copending application Ser. No. 09\/604,880 discloses validation of a generic command relative to a command parse tree. The command parse tree includes multiple elements, each specifying at least one corresponding generic command component and a corresponding command action value. A parser, upon identifying a best match between the command parse tree elements and the received generic command, issues a prescribed command for a selected management program according to the corresponding command format. Hence, a user may control multiple management programs having respective command formats in a manner that eliminates the necessity that the user needs to know detailed command formats and syntaxes of each management program.","The addition of new commands, however, requires maintenance processing for the addition of new elements to the command parse tree. For example, each word in the new command needs to be compared to a dictionary of valid words in the system. In addition, for any new words found, a token number needs to be defined, and the word to token algorithm needs to be modified to include any new word in the string to token encoding.","There is a need for an arrangement that enables a simple command language to be utilized for control of multiple RTM programs having respective command formats, wherein new commands can be automatically added without manual reconfiguration of the system by a system administrator.","These and other needs are attained by the present invention, where a processor based system includes a parser, configured for identifying whether an input word received from a user is a new command word relative to a character-based command parse tree, and a tree management process configured for managing the character-based command parse tree. The character-based command parse tree includes multiple element levels for respective character positions for each known command word, and at least one character element at each level. Each character element specifies at least one corresponding character component and a corresponding at least one index value. The parser determines whether the input word is a new command word based on whether the characters of the input word match successive elements, with the last character matching an end node, within the character-based parse tree; if the parser determines that the input word is a new command word, the tree management process performs update operations to accommodate the new command word, including updating the character-based command parse tree with the new command word.","One aspect of the present invention provides a method in a processor-based system configured for executing a plurality of management programs according to respective command formats. The method includes receiving from a user an input word representing at least a portion of a generic command, and determining whether the input word is a new command word relative to a character-based command parse tree configured for identifying known command words. The method also includes selectively adding the input word to the character-based command parse tree based on determining that the input word is a new command word. The method also includes validating the generic command, and issuing a prescribed command of a selected one of the management programs according to the corresponding command format, based on validating the generic command.","Another aspect of the present invention provides a system configured for executing a plurality of management programs according to respective command formats. The system includes a parser configured for accessing a character-based command parse tree for identifying whether an input word of a generic command received from a user is a new command word, and a command parse tree for validating the generic command. The system also includes a tree management process configured for selectively adding the input word to the character-based command parse tree and the command parse tree based on a determination that the input word is a new command word, and translators. The translators are configured for issuing commands for the management programs according to respective command formats, the parser outputting a prescribed command to a selected one of the translators based on the validating of the generic command.","Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.","The disclosed embodiment is directed to an improvement of the generic command interface disclosed in the above-incorporated application Ser. No. 09\/604,880, where a character-based command parse tree and a tree management process is added to enable the generic command interface system to automatically update itself upon detecting a new command word. In particular, the character-based command parse tree is used to determine whether an input word is a new command word relative to known command words; if the input word is determined to be a new command word, the tree management process updates the character-based command parse tree and existing data structures within the generic command interface (e.g., the command parse tree and associated command word translation tables), enabling the automatic addition of the new command word.","Hence, the disclosed arrangement eliminates the necessity for manually modifying hard-coded data structures in response to the addition of new command words to the generic command interface, improving the overall flexibility of the generic command interface.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIGS. 2A and 2B"],"b":["10","12","10","14","12","15","22","23","14","16","18","22","23"]},"As shown in , the management programs , implemented for example by different OAM tools such as RTM programs, may be executed within the processor based system or externally as external agents accessible using a prescribed application programming interface (API). The management programs  may provide different administration and maintenance functions, for example initiating various real-time screens used to monitor the internal state of executable processes within the software based system ; alternately, different tools  may allow the user to control the various states within the various component of the software based system  via external programs (e.g., programs or ), or may be used to issue external alarms (e.g., SNMP manager scripts) for external routines such as message waiting indicator routines.","A disadvantage of utilizing many different tools  is that each tool  tends to have its own screen and\/or command, providing difficulties for the system administrator to determine which tool is the best tool (and\/or which is the best syntax) to use for a given problem.","According to the disclosed embodiment, the parser  and the translators  provide a unified administration and diagnostic tool which incorporates the functionality of all external administrative executable binary files, RTM programs, agent manipulation scripts, and various requested snapshot queries, as well as including an extensive help system. In particular, the parser  and the translators  provide a generic command syntax that integrates the functionality of the different tools  and that automatically selects the appropriate command for the best tool for executing a given generic command. As illustrated in Part A. of the attached appendix, the new syntax provides a generic instruction set that provides an abstraction of the tool-specific command formats and syntax, enabling a user to issue command based on the relative functions, as opposed to the specific syntax for a corresponding tool .","In addition, the tree management process  enables the data structures within the processor based system  to be dynamically updated upon detecting a new command word using the character-based command parse tree , described below with respect to .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2A","FIG. 1","FIG. 2B"],"b":["14","14","20","22","23","23"]},"The command word translation table  of  is configured for storing, for each prescribed command word , a corresponding token value  that is used by the parser  to identify a specific command for a selected one of the translators . In particular, the command word translation table  includes all the command words  that are valid according to the generic syntax, illustrated for example in Part B of the attached appendix.","The parser  is configured for determining whether an input word is a new command word or a known command word using the character-based command parse tree , and validating a received generic command. In particular, assuming an input generic command includes all known command words, the parser  validates the received generic command by comparing each input command word to the command parse tree  to determine for the received generic command a tree element  identified as a best match. Each tree element  includes at least one token-command key pair  that specifies a token (T)  and a corresponding command key (CK) , enabling the parser  to identify the appropriate prescribed command based on the command key specified for the matching token. In particular, the parser  recursively traverses the command parse tree  for each command word to identify the best match for the generic command. If only a portion of the generic command is identified as valid (e.g., only the first three command words are valid), the parser  selects the command key  for the matching token  from the last valid tree element .","As described above, the parser  is configured for accessing whether an input word is a new command word or a known command word using the character-based command parse tree . The character-based command parse tree , illustrated in , includes multiple levels  of character elements  representing characters of known command words. Each character element  has a corresponding character component and a corresponding integer word key  (i.e., index value) that uniquely identifies the character element . Hence, each known known command word is identified by a corresponding word token identified by the word key  of the last character of the word, where the word \u201cget\u201d has a corresponding word token \u201c3\u201d from the word key  of character element , and the word \u201cwatch\u201d has a corresponding word token \u201cA\u201d (hexadecimal representation for \u201c10\u201d) from the word key  of character element . In addition, each level  corresponds to a character position of a known command word, where the root level includes character elements and that correspond to the initial character of known command words \u201cget\u201d, \u201cwait\u201d, and \u201cwatch\u201d. The adjacent levels , , , and are used to identify the second, third, fourth, and fifth character positions of a command word, respectively.","Hence, the parser  is able to determine that the input word \u201cget\u201d is a known command word based on parsing the tree  on a character by character basis until the last character of the word matches an end node. Similarly, the parser  is able to determine that the input word \u201cwait\u201d is a known command word based on parsing the tree  to reach the end node having the word key \u201c7\u201d. The parser  is able to determine that the input word \u201cwatch\u201d is a known command word based on parsing the tree  to reach the end node having the word key \u201cA\u201d.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 3A and 3B","FIGS. 2A"],"b":["2","3","3"]},"The method begins in step , where the parser  receives an input word from the user input interface . The parser  compares in step  the first character of the input word with the character elements , at the root level . If in step  the parser  does not detect a match between the first character and the root level character elements, the parser  notifies the tree management process , causing the tree management process  to add in step  the new word to the trees  and , as well as the translation table . If the parser  detects in step  a match between the first character and one of the root level character elements, the parser checks in step  whether there are additional characters for comparison. If there are more characters for comparison, the parser  compares the next character with the linked character elements of the next (adjacent) level in step  and checks for a match in step , similar to step . The parser  then checks for more characters in step , and continues until all characters of the input word have been parsed relative to the tree .","After all the characters of the input word have been parsed, if the parser  determines in step  that the last matching character does not correspond to an end node (i.e., the matching character element  for the last character was not an end node), the tree management process adds the new word in step ; however if the last matching character corresponds to an end node (e.g., , , or ), the parser  identifies in step  the command word by the corresponding word key in the end node. Hence, the new word can be dynamically added to the data structures, without the necessity of manual manipulation by a software engineer.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3B","FIG. 2A"],"b":["140","20","28","14","14","22","142","28","14","24","14","144","14","146","24","14","156"],"i":["a","a "]},"The parser  then parses the next word (e.g., \u201ctcp\u201d) of the received generic command in step  by locating the corresponding token  (e.g., \u201c6\u201d for \u201ctcp\u201d) in the table , and then traversing in step  the tree elements that depend from the matched tree element (e.g., ). The parser  determines a match between the token  (\u201c6\u201d) corresponding to the command word \u201ctcp\u201d in the token-command key pair in step , enabling the parser to continue for the next command word. As described above, the parser  repeats the process in step  for the third command word \u201cconnections\u201d having the token \u201c2\u201d and identifying a match between the entire generic command and the token-command key  specified in the tree element . The parser  identifies in step  the prescribed command for a selected one of the translators  based on the value of the command key  within the matching token-command key pair  (e.g., \u201cCK=3\u201d) of the last valid command word, which maps to a translation table that specifies a specific command for a specific translator .","As described above, the parser  can identify a command key  even if only a portion of the command is valid. Assume for example that the parser  receives the invalid command \u201cget udp connection info\u201d. In this case, the individual command words are valid from the command word translation table , however, the sequence is invalid. In particular, the command word \u201cget\u201d having a token value of \u201c3\u201d reaches the token-command key pair , however the command word \u201cudp\u201d having a token value of \u201c7\u201d does not reach any child of the tree element . Hence, the parser  uses the last valid command key (\u201c6\u201d) in step  based on the matching token for the first valid word located in the token-command key pair . The command key is mapped to a selected one of the translators  in an attempt to provide a command to the corresponding resource . If the selected resource  determines that the command is invalid, the selected resource  at that time may prompt the user for a correct command.","The disclosed arrangement enables the use of generic commands for multiple OAM tools that have respective command syntax, resulting in a single point of entry for administering and maintaining complex software based systems. The disclosed arrangement provides the user a single set of commands and syntax to learn, facilitating the use of multiple administrative and maintenance tools. Moreover, the disclosed arrangement enables new command words to be identified and automatically added without manual reconfiguration of executable code or data structures.","While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not limited to the disclosed embodiments, but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIGS. 2A and 2B","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 3A and 3B","FIG. 1"]}]},"DETDESC":[{},{}]}
