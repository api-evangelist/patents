---
title: Method of creating target storage layout table referenced for partitioning storage space of storage device and related electronic device and machine-readable medium
abstract: An exemplary method of creating a target storage layout table referenced for partitioning a storage space of a storage device includes following steps: identifying defective storage areas in the storage space of the storage device, and accordingly generating an identification result; and creating the target storage layout table according to the identification result; wherein when the identification result indicates that an actual storage area corresponding to a pre-defined partition with a pre-defined partition size has at least one defective area, setting a partition size of a partition defined in the target storage layout table according to the pre-defined partition size and a size of the at least one defective area.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069480&OS=09069480&RS=09069480
owner: MEDIATEK INC.
number: 09069480
owner_city: Science-Based Industrial Park, Hsin-Chu
owner_country: TW
publication_date: 20140919
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. application Ser. No. 12\/912,751 (filed on Oct. 27, 2010), which claims the benefit of U.S. Provisional Application No. 61\/333,785 (filed on May 12, 2010). The entire contents of related applications are incorporated herein by reference.","The disclosed embodiments of the present invention relate to partitioning a storage space of a storage device, and more particularly, to a method of creating a target storage layout table referenced for partitioning a storage space of a storage device (e.g., a flash device) and related electronic device and machine-readable medium.","Recently, handheld devices become more and more popular. Most of them aim at low price, small size, high computing power, and powerful functionality. Therefore, there is a need for an embedded operating system. For example, the Linux-based embedded system has some advantages such as no proprietary problem, high portability, and comparatively easy to be implemented. The Linux-based embedded system is usually a diskless system. In order to keep permanent data in the Linux-based embedded system, using a flash device as its disk system is a widely adopted strategy.","In general, a storage device may be partitioned into a plurality of partitions to facilitate the use of the storage device. Taking a Linux-based embedded system for example, a memory technology device (MTD) subsystem provides an abstract layer for raw flash devices, which makes it possible to use the same application programming interface (API) when working with flash devices of different flash types and technologies. The Linux-based embedded system is internally assigned a flash layout table referenced for partitioning an employed flash device (e.g., a NAND flash) into a plurality of partitions for different MTDs.","However, the flash device may have bad blocks scattered around the flash device when manufactured in the factory. For example, 80 bad blocks may be located anywhere in the flash device. However, there is no information available in the flash device for indicating the exact locations of these bad blocks scattered in the flash device after the flash device is manufactured and then shipped to the market. The conventional partitioning strategy has to consider the worst case when defining each partition in the flash device. Please refer to , which is a diagram illustrating a conventional flash layout table . The desired partitions PA, PB, PC, and PD originally required by the system have the sizes Size_A, Size_B, Size_C, and Size_D, respectively. As mentioned above, there are bad blocks scattered around the flash device, and the exact locations of these bad blocks are unknown after the manufactured flash device is shipped to the market. The conventional partitioning strategy therefore makes each actually used partition larger by having a reserved area included therein. As shown in , each of the reserved areas RSV_A, RSV_B, RSV_C, and RSV_D has the same size Size_R corresponding to an estimated maximum number of bad blocks scattered around the flash device. For example, each of the reserved areas RSV_A, RSV_B, RSV_C, and RSV_D contains at least 80 blocks. As a result, the flash layout table  defines four partitions PA\u2032, PB\u2032, PC\u2032, and PD\u2032 having the actual sizes Size_A+Size_R, Size_B+Size_R, Size_C+Size_R, and Size_D+Size_R, respectively. After the additional reserved areas are assigned to the partitions PA\u2032-PD\u2032, the remaining storage area with the size Size_R\u2032 may act as a spare reserved area RSV_R of the flash device that can be used for other purposes such as data buffering.","Actually, some of the actual storage areas corresponding to the partitions PA\u2032, PB\u2032, PC\u2032, and PD\u2032 may have many bad blocks, and the remaining may have no bad block. Regarding an actual storage area corresponding to one of the partitions PA\u2032, PB\u2032, PC\u2032, and PD\u2032 that does not have bad blocks at all, the blocks included in the reserved area are not used, resulting in a waste of the storage space of the flash device. Moreover, as the partitions PA\u2032-PD\u2032 have reserved areas RSV_A-RSV_D included therein, the spare reserved area RSV_R which may be used for other purposes would be small due to limited storage capacity of the flash device. As a result, the flash device initialized using the conventional flash layout table  shown in  may lack flexibility in the use of the spare reserved area RSV_R. In a worst case, the flash device partitioned using the conventional partitioning strategy may have no remaining storage area available for acting as the aforementioned spare reserved area RSV_R. Regarding an application which is equipped with a storage device with small storage space, applying the conventional partitioning strategy to the storage device is impractical.","In accordance with exemplary embodiments of the present invention, a method of creating a target storage layout table referenced for partitioning a storage space of a storage device (e.g., a flash device) and related electronic device and machine-readable medium are proposed.","According to a first aspect of the present invention, an exemplary method of creating a target storage layout table referenced for partitioning a storage space of a storage device is disclosed. The exemplary method includes following steps: identifying defective storage areas in the storage space of the storage device, and accordingly generating an identification result; and creating the target storage layout table according to the identification result; and when the identification result indicates that an actual storage area corresponding to a pre-defined partition with a pre-defined partition size has at least one defective area, setting a partition size of a partition defined in the target storage layout table according to the pre-defined partition size and a size of the at least one defective area.","According to a second aspect of the present invention, an exemplary electronic device is disclosed. The exemplary electronic device includes a processor, a storage device, and a machine-readable medium. The machine-readable medium stores a program code. The processor is configured to execute the program code for identifying defective storage areas in a storage space of the storage device, and accordingly generating an identification result; and creating a target storage layout table referenced for partitioning the storage space of the storage device according to the identification result, wherein when the identification result indicates that an actual storage area corresponding to a pre-defined partition with a pre-defined partition size has at least one defective area, setting a partition size of a partition defined in the target storage layout table according to the pre-defined partition size and a size of the at least one defective area.","According to a third aspect of the present invention, an exemplary machine-readable medium is disclosed. The exemplary machine-readable medium stores a program code that, when executed by a processor, causes the processor to perform following steps: identifying defective storage areas in a storage space of a storage device, and accordingly generating an identification result; and creating a target storage layout table referenced for partitioning the storage space of the storage device according to the identification result, wherein when the identification result indicates that an actual storage area corresponding to a pre-defined partition with a pre-defined partition size has at least one defective area, setting a partition size of a partition defined in the target storage layout table according to the pre-defined partition size and a size of the at least one defective area.","According to a fourth aspect of the present invention, an exemplary method of partitioning a storage space of a storage device is disclosed. The exemplary method includes: identifying defective storage areas in the storage space of the storage device, and accordingly generating an identification result; and partitioning the storage space of the storage device according to the identification result, wherein when the identification result indicates that an actual storage area corresponding to a pre-defined partition with a pre-defined partition size has at least one defective area, setting a partition size of a partition defined in a target storage layout table according to the pre-defined partition size and a size of the at least one defective area.","These and other objectives of the present invention will no doubt become obvious to those of ordinary skill in the art after reading the following detailed description of the preferred embodiment that is illustrated in the various figures and drawings.","Certain terms are used throughout the description and following claims to refer to particular components. As one skilled in the art will appreciate, manufacturers may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function. In the following description and in the claims, the terms \u201cinclude\u201d and \u201ccomprise\u201d are used in an open-ended fashion, and thus should be interpreted to mean \u201cinclude, but not limited to . . . \u201d. Also, the term \u201ccoupled\u201d is intended to mean either an indirect or direct electrical connection. Accordingly, if one device is electrically connected to another device, that connection may be through a direct electrical connection, or through an indirect electrical connection via other devices and connections. Technical features of the present invention are detailed as follows.","The main conception of the present invention is to identify defective storage areas in the storage space of the storage device and accordingly generate an identification result, and then create a target storage layout table according to the identification result. Please refer to , which is a flowchart illustrating a method of creating a target storage layout table referenced for partitioning a storage space of a storage device according to an exemplary embodiment of the present invention. Please note that if the result is substantially the same, the steps are not required to be executed in the exact order shown in . The exemplary method includes the following steps.","Step : Start.","Step : Check if a pre-defined storage layout table of a storage device is changed. If yes, go to step ; otherwise, go to step .","Step : Check if the storage device is initialized for the first time. If yes, go to step ; otherwise, go to step .","Step : Identify defective storage areas in a storage space of the storage device and accordingly generate an identification result.","Step : Check if an actual storage area of the storage device that corresponds to a pre-defined partition with a pre-defined partition size defined in the pre-defined storage layout table has one or more defective areas by referring to the identification result. If yes, go to step ; otherwise, go to step .","Step : Set a partition size of the pre-defined partition defined in the created target storage layout table according to the pre-defined partition size. Go to step .","Step : Set a partition size of the pre-defined partition defined in the created target storage layout table according to the pre-defined partition size and a total size of the identified defective area(s) included in the actual storage area corresponding to the pre-defined partition with the pre-defined partition size defined in the pre-defined storage layout table.","Step : Check if the created target storage layout table includes partitions corresponding to all pre-defined partitions with pre-defined partition sizes defined in the pre-defined storage layout table. If yes, go to step ; otherwise, go to step  to deal with another pre-defined partition with a corresponding pre-defined partition size defined in the pre-defined storage layout table.","Step : End.","The exemplary method shown in  may be employed by an electronic device such as a Linux-based embedded system or other computer system. Please refer to , which is a block diagram illustrating an electronic device according to an exemplary embodiment of the present invention. The exemplary electronic device  includes, but is not limited to, a processor , a storage device , and a machine-readable medium . The machine-readable medium  stores a program code PROG (e.g., a flash driver) that, when executed by the processor , causes the processor  to perform steps shown in . That is, the processor  is configured to perform the steps shown in  for creating the desired target storage layout table. By way of example, but not limitation, the machine-readable medium  may be a read-only memory or other data carrier capable of providing the program code PROG to the processor . In one exemplary embodiment, the target storage layout table TB referenced for partitioning the storage space of the storage device  is created in response to a change of the pre-defined storage layout table TB or a first-time initialization of the storage device . That is, when the pre-defined storage layout table TB is modified\/changed, for example, due to firmware\/program upgrade, the steps directed to creating the target storage layout table TB are performed by the processor  executing the program code PROG loaded from the machine-readable medium  (step ). In addition, when the storage device  is initialized for the first time (e.g., when system's first startup occurs), the steps directed to creating the target storage layout table TB are performed by the processor  executing the program code PROG loaded from the machine-readable medium  (step ). That is, the steps directed to creating the target storage layout table TB are performed in response to a first-time initialization of the storage device , and is not performed in response to a subsequent initialization of the storage device . It should be noted that the order of executing steps  and  may be adjusted. For example, in another exemplary embodiment, step  may be executed before step  is executed.","In a case where the pre-defined storage layout table TB is modified or the storage device  is initialized for the first time, the processor  executes the program code PROG for scanning part or all of the storage space of the storage device  to identify defective storage area(s). In one exemplary implementation, only the storage areas belonging to pre-defined partitions with pre-defined partition sizes defined in the pre-defined storage layout table are scanned for defective storage area identification. However, in an alternative implementation, all of the storage areas included in the storage device  may be scanned for defective storage area identification.","By way of example, but not limitation, the storage device  is a flash device, such as a NAND flash. Thus, the storage device  has a plurality of blocks included therein, each block is composed of a plurality of pages, and each defective storage area to be identified is a bad block.  is a diagram illustrating a block of a flash device. As shown in , the block  includes many pages Page_, Page_, . . . , Page_N. Before the flash device manufactured in the factory is shipped to the market, the flash device is programmed\/erased to make each bit within the flash device store a predetermined logic value (e.g., 1). Consider a case where the storage device  is initialized for the first time, meaning that the content in the storage device is not modified yet. The processor  may check the last byte _ of the first page Page_, the last byte _ of the second page Page_, and the last byte _N of the last page Page_N to determine whether the block  is a bad block. For example, when at least one bit of the checked last bytes _, _, and _N is not the predetermined logic value (e.g., 1), the processor  judges that the block  is a bad block; otherwise, the processor  regards the block  as a good block. However, this is for illustrative purposes, and is not meant to be a limitation of the present invention. That is, any means capable of identifying defective storage areas (e.g., bad blocks) of the storage device  (e.g., a flash device) can be adopted to generate the identification result which will be referenced for creating the target storage layout table TB.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIG. 5"],"b":["1","1","304","2","1","304","302","2"]},"Please refer to  in conjunction with  and .  is a diagram illustrating defective storage areas scattered in the storage device  shown in , and  is a diagram illustrating the target storage layout table TB according to an exemplary embodiment of the present invention. As shown in , the identification result generated in step  indicates that the storage device  has a plurality of defective storage areas DS_, DS_, DS_, and DS_ with sizes Size_A\u2032, Size_B\u2032, Size_C\u2032, and Size_D\u2032, respectively. For example, each of the defective storage areas DS_, DS_, DS_, and DS_ may include one or more bad blocks when the storage device  is a flash device. Please note that the number of the identified defective storage areas and the sizes of the identified defective storage areas are for illustrative purposes only.","Regarding the first pre-defined partition PA with the pre-defined partition size Size_A in the pre-defined storage layout table TB, the processor  checks if an actual storage area corresponding to the pre-defined partition PA defined in the pre-defined storage layout table TB (i.e., an actual storage area delimited by addresses ADDR0 and ADDR1 shown in ) has one or more defective areas by referring to the identification result (step ). In a case where there is no defective area in the actual storage area delimited by addresses ADDR0 and ADDR1, the processor  will set a partition size of the pre-defined partition PA defined in the created target storage layout table TB according to the pre-defined partition size Size_A as defined in the pre-defined storage layout table TB. For example, the pre-defined partition PA defined in the created target storage layout table TB is assigned by the same pre-defined partition size Size_A as defined in the pre-defined storage layout table TB. In another case where the actual storage area delimited by addresses ADDR0 and ADDR1 has at least one defective storage area DS_ as shown in , the processor  sets a partition size of the pre-defined partition PA defined in the created target storage layout table TB according to the pre-defined partition size Size_A defined in the pre-defined storage layout table TB and a total size Size_A\u2032 of identified defective area(s) included in the actual storage area delimited by addresses ADDR0 and ADDR1. For example, the partition size of the pre-defined partition PA is set by summing up the pre-defined partition size Size_A and the total size Size_A\u2032 of identified defective area(s) included in the actual storage area delimited by addresses ADDR0 and ADDR1, as shown in . However, this is for illustrative purposes only. That is, the partition size of the pre-defined partition PA may be set by any computational result derived from the pre-defined partition size Size_A and the total size Size_A\u2032 of identified defective area(s). This also obeys the spirit of the present invention. As the partition sizes of other pre-defined partitions PB-PD in the created target storage layout table TB are not determined yet, the processor  proceeds to dealing with another pre-defined partition defined in the pre-defined storage layout table TB (step ).","Regarding the second pre-defined partition PB with the pre-defined partition size Size_B in the pre-defined storage layout table TB, the processor  checks if an actual storage area corresponding to the pre-defined partition PB defined in the pre-defined storage layout table TB (i.e., an actual storage area delimited by addresses ADDR1\u2032 and ADDR2 shown in , where ADDR1\u2032=ADDR1+Size_A\u2032) has one or more defective areas by referring to the identification result (step ). In a case where there is no defective area in the actual storage area delimited by addresses ADDR1\u2032 and ADDR2, the processor  will set a partition size of the pre-defined partition PB defined in the created target storage layout table TB according to the pre-defined partition size Size_B as defined in the pre-defined storage layout table TB. For example, the pre-defined partition PB defined in the created target storage layout table TB is assigned by the same pre-defined partition size Size_B as defined in the pre-defined storage layout table TB. In another case where the actual storage area delimited by addresses ADDR1\u2032 and ADDR2 has at least one defective storage area DS_ as shown in , the processor  sets a partition size of the pre-defined partition PB defined in the created target storage layout table TB according to the pre-defined partition size Size_B defined in the pre-defined storage layout table TB and a total size Size_B\u2032 of identified defective area(s) included in the actual storage area delimited by addresses ADDR1\u2032 and ADDR2. For example, the partition size of the pre-defined partition PB is set by summing up the pre-defined partition size Size_B and the total size Size_B\u2032 of identified defective area(s) included in the actual storage area delimited by addresses ADDR1\u2032 and ADDR2, as shown in . Similarly, this is for illustrative purposes only. That is, the partition size of the pre-defined partition PB may be set by any computational result derived from the pre-defined partition size Size_B and the total size Size_B\u2032 of identified defective area(s).","As a person skilled in the art can readily understand how to set partition sizes of the remaining pre-defined partitions PC and PD in the created target storage layout table TB after reading above paragraphs, further description is omitted here for brevity.","Please note that the spare\/reserved area RSV defined in the created target storage layout table TB has the size Size_E\u2032 which is determined by subtracting Size_A\u2032, Size_B\u2032, Size_C\u2032, and Size_D\u2032 from Size_E. Compared to the conventional flash layout table  shown in , the target storage layout table TB created using the proposed exemplary method shown in  has the spare reserved area RSV larger than the spare reserved area RSV_R. In addition, the partition size of the pre-defined partition in the target storage layout table TB is properly set by either the pre-defined partition size as defined in the pre-defined storage layout table TB or adjusting the pre-defined partition size as defined in the pre-defined storage layout table TB according to the defective storage areas actually detected rather than an estimated maximum number of defective storage areas contained in the storage device (e.g., an estimated maximum number of bad blocks scattered around a flash device). In this way, the storage device initialized using the exemplary target storage layout table TB shown in  has improved flexibility in the use of the spare reserved area RSV and less waste of the storage space of the storage device. Thus, the overall performance of the electronic device  can be improved accordingly.","It should be noted the exemplary method proposed in the present invention is not limited to creating a flash layout table of a flash device. Actually, the exemplary method proposed in the present invention may be applied to any storage device having the need for partitioning its storage space. Besides, no matter whether a target flash layout table is created and referenced, any application that partitions a storage space of a storage device by referring to an identification result of defective storage area(s) still obeys the spirit of the present invention and falls within the scope of the present invention. To put it another way, the present invention may also be regarded as proposing a method of partitioning a storage space of a storage device by identifying defective storage areas in the storage space of the storage device and accordingly generating an identification result, and partitioning the storage space of the storage device according to the identification result. In one exemplary implementation, the step of partitioning the storage space of the storage device according to the identification result includes the steps of creating a target storage layout table according to the identification result, and partitioning the storage space of the storage device according to the target storage layout table.","It should be noted that the flow shown in  would create a target storage layout table by checking all pre-defined partitions in the pre-defined storage layout table to determine whether the corresponding pre-defined partition sizes should be adjusted. However, this is for illustrative purposes only, and is not meant to be a limitation of the present invention. In an alternative design of creating a target storage layout table, some of the pre-defined partitions defined in the pre-defined storage layout table are checked to see if the corresponding pre-defined partition sizes originally defined in the pre-defined storage layout table should be adjusted according to the identification result of defective storage area(s), and the remaining pre-defined partitions are still assigned with corresponding pre-defined partition sizes originally defined in the pre-defined storage layout table. That is, step  in  is optional and may be omitted according to actual design consideration.","Those skilled in the art will readily observe that numerous modifications and alterations of the device and method may be made while retaining the teachings of the invention. Accordingly, the above disclosure should be construed as limited only by the metes and bounds of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
