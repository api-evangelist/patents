---
title: System and method for providing a programming-language-independent interface for querying file system content
abstract: A system and method for providing a programming-language-independent interface for querying file system content. In one embodiment, the system may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device and to store file system content. The file system may include a programming-language-independent interface whereby an application queries the file system content. In various specific implementations of the system, file system content may include file data stored in one or more of the plurality of files, or metadata stored in a named stream corresponding to a given file, respectively. In another specific implementation of the system, the application querying file system content may include the application generating a query in a query language, the application submitting the query to a query engine via the programming-language-independent interface, and the query engine evaluating said query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08306991&OS=08306991&RS=08306991
owner: Symantec Operating Corporation
number: 08306991
owner_city: Mountain View
owner_country: US
publication_date: 20040607
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to file-based storage systems.","2. Description of the Related Art","Computer systems often process large quantities of information, including application data and executable code configured to process such data. In numerous embodiments, computer systems provide various types of mass storage devices configured to store data, such as magnetic and optical disk drives, tape drives, etc. To provide a regular and systematic interface through which to access their stored data, such storage devices are frequently organized into hierarchies of files by software such as an operating system. Often a file defines a minimum level of data granularity that a user can manipulate within a storage device, although various applications and operating system processes may operate on data within a file at a lower level of granularity than the entire file.","In some file-based computer systems, various types of information about files, also referred to as metadata, may be stored in addition to the files themselves. However, in typical conventional computer systems, access to files and their metadata by application software is provided by an interface specific to a particular programming language, operating system, or hardware architecture. In such systems, for applications using a new programming language, operating system, or hardware architecture to be given access to files and metadata, a separate interface may need to be provided. Further, such interfaces may vary substantially according to the type of data access desired, the programming language used, or other factors.","Creating and supporting new interfaces may require additional programmer effort, such as coding and verification effort. Further, as types of interfaces multiply, the effort required to maintain them over time increases. Additionally, if a unique interface is provided for each programming language, operating system, or architecture scenario, such interfaces may diverge considerably in their support for various features of file and metadata access. For example, not all interfaces may provide all programming languages the same level of access to file data and metadata. Some interfaces may require a programmer to engage in numerous platform-specific preliminary steps to initialize and prepare for accessing data before any actual data transfer is performed. Such divergence among interfaces may complicate the application programming task and hinder acceptance of a given file content format among developers.","Various embodiments of a system and method for providing a programming-language-independent interface for querying file system content are disclosed. In one embodiment, the system may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device and to store file system content. The file system may include a programming-language-independent interface whereby an application queries the file system content.","In various specific implementations of the system, file system content may include file data stored in one or more of the plurality of files, or metadata stored in a named stream corresponding to a given file, respectively. In another specific implementation of the system, the application querying file system content may include the application generating a query in a query language, the application submitting the query to a query engine via the programming-language-independent interface, and the query engine evaluating said query.","A method is also contemplated which, in one embodiment, may include storing file system content and querying the file system content via a programming-language-independent interface.","In another aspect of the invention, a system is disclosed that may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device and to store file system content. The file system may include an XML Query (XQuery) query language interface whereby an application queries the file system content.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Storage System and File System Overview","Turning now to , a block diagram of one embodiment of a storage system is shown. In the illustrated embodiment, storage system  includes a plurality of host devices and coupled to a plurality of storage devices and via a system interconnect . Further, host device includes a system memory  in the illustrated embodiment. For simplicity of reference, elements referred to herein by a reference number followed by a letter may be referred to collectively by the reference number alone. For example, host devices and and storage devices and may be referred to collectively as host devices  and storage devices .","In various embodiments of storage system , host devices  may be configured to access data stored on one or more of storage devices . In one embodiment, storage system  may be implemented within a single computer system, for example as an integrated storage server. In such an embodiment, for example, host devices  may be individual processors, system memory  may be a cache memory such as a static RAM (SRAM), storage devices  may be mass storage devices such as hard disk drives or other writable or rewritable media, and system interconnect  may include a peripheral bus interconnect such as a Peripheral Component Interface (PCI) bus. In some such embodiments, system interconnect  may include several types of interconnect between host devices  and storage devices . For example, system interconnect  may include one or more processor buses (not shown) configured for coupling to host devices , one or more bus bridges (not shown) configured to couple the processor buses to one or more peripheral buses, and one or more storage device interfaces (not shown) configured to couple the peripheral buses to storage devices . Storage device interface types may in various embodiments include the Small Computer System Interface (SCSI), AT Attachment Packet Interface (ATAPI), Firewire, and\/or Universal Serial Bus (USB), for example, although numerous alternative embodiments including other interface types are possible and contemplated.","In an embodiment of storage system  implemented within a single computer system, storage system  may be configured to provide most of the data storage requirements for one or more other computer systems (not shown), and may be configured to communicate with such other computer systems. In an alternative embodiment, storage system  may be configured as a distributed storage system, such as a storage area network (SAN), for example. In such an embodiment, for example, host devices  may be individual computer systems such as server systems, system memory  may be comprised of one or more types of dynamic RAM (DRAM), storage devices  may be standalone storage nodes each including one or more hard disk drives or other types of storage, and system interconnect  may be a communication network such as Ethernet or Fibre Channel. A distributed storage configuration of storage system  may facilitate scaling of storage system capacity as well as data bandwidth between host and storage devices.","In still another embodiment, storage system  may be configured as a hybrid storage system, where some storage devices  are integrated within the same computer system as some host devices , while other storage devices  are configured as standalone devices coupled across a network to other host devices . In such a hybrid storage system, system interconnect  may encompass a variety of interconnect mechanisms, such as the peripheral bus and network interconnect described above.","It is noted that although two host devices  and two storage devices  are illustrated in , it is contemplated that storage system  may have an arbitrary number of each of these types of devices in alternative embodiments. Also, in some embodiments of storage system , more than one instance of system memory  may be employed, for example in other host devices  or storage devices . Further, in some embodiments, a given system memory  may reside externally to host devices  and storage devices  and may be coupled directly to a given host device  or storage device  or indirectly through system interconnect .","In many embodiments of storage system , one or more host devices  may be configured to execute program instructions and to reference data, thereby performing a computational function. In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store such program instructions and data. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM included in storage system  as storage devices . A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of storage system  as system memory . Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link, which may be included in some embodiments of storage system  as system interconnect .","In some embodiments, program instructions and data stored within a computer-accessible medium as described above may implement an operating system that may in turn provide an environment for execution of various application programs. For example, a given host device  may be configured to execute a version of the Microsoft Windows operating system, the Unix\/Linux operating system, the Apple Macintosh operating system, or another suitable operating system. Additionally, a given host device may be configured to execute application programs such as word processors, web browsers and\/or servers, email clients and\/or servers, and multimedia applications, among many other possible applications.","During execution on a given host device , either the operating system or a given application may generate requests for data to be loaded from or stored to a given storage device . For example, code corresponding to portions of the operating system or an application itself may be stored on a given storage device , so in response to invocation of the desired operation system routine or application program, the corresponding code may be retrieved for execution. Similarly, operating system or application execution may produce data to be stored.","Many operating system embodiments provide data and control structures for organizing the storage space provided by storage devices  into files. In various embodiments, the data structures may include one or more tables configured to store information such as, for example, the identity of each file, its location within storage devices  (e.g., a mapping to a particular physical location within a particular storage device), as well as other information about each file as described in greater detail below. Also, in various embodiments, the control structures may include executable routines for manipulating files, such as, for example, function calls for changing file identity and for modifying file content as described in greater detail below. Collectively, these data and control structures may be referred to herein as a file system, and the particular data formats and protocols implemented by a given file system may be referred to herein as the format of the file system.","In some embodiments, a file system may be integrated into the operating system such that any access to data stored on storage devices  is governed by the control and data structures of the file system. Different operating systems may implement different native file systems using different formats, but in some embodiments, a given operating system may include a file system that supports multiple different types of file system formats, including file system formats native to other operating systems. In such embodiments, the various file system formats supported by the file system may be referred to herein as local file systems. Additionally, in some embodiments, a file system may be implemented using multiple layers of functionality arranged in a hierarchy, as illustrated in .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["200","210","220","210","212","212","210","200","200","200","212","230","214","214","212","205","220","230","30","200","212","20","25"]},"As described above with respect to storage system  of , a given host device  may reside in a different computer system from a given storage device , and may access that storage device via a network. Likewise, with respect to operating system , in one embodiment a given process such as process A may execute remotely and may access storage devices  over a network. In the illustrated embodiment, file system  includes network protocols  to support access to the file system by remote processes. In some embodiments, network protocols  may include support for the Network File System (NFS) protocol or the Common Internet File System (CIFS) protocol, for example, although it is contemplated that any suitable network protocol may be employed, and that multiple such protocols may be supported in some embodiments.","File system  may be configured to support a plurality of local file systems. In the illustrated embodiment, file system  includes a VERITAS (VxFS) format local file system A, a fast file system (FFS) format local file system B, and a proprietary (X) format local file system X. However, it is contemplated that in other embodiments, any number or combination of local file system formats may be supported by file system . To provide a common interface to the various local file systems , file system  includes a virtual file system . In one embodiment, virtual file system  may be configured to translate file system operations originating from processes  to a format applicable to the particular local file system  targeted by each operation. Additionally, in the illustrated embodiment operating system  includes device drivers  through which local file systems  may access storage devices . Device drivers  may implement data transfer protocols specific to the types of interfaces employed by storage devices . For example, in one embodiment device drivers  may provide support for transferring data across SCSI and ATAPI interfaces, though in other embodiments device drivers  may support other types and combinations of interfaces.","In the illustrated embodiment, file system  also includes filter driver . In some embodiments, filter driver  may be configured to monitor each operation entering file system  and, subsequent to detecting particular types of operations, to cause additional operations to be performed or to alter the behavior of the detected operation. For example, in one embodiment filter driver  may be configured to combine multiple write operations into a single write operation to improve file system performance. In another embodiment, filter driver  may be configured to compute a signature of a file subsequent to detecting a write to that file. In still another embodiment, filter driver  may be configured to store information, such as records, associated with particular files subsequent to detecting certain kinds of operations on those files, as described in greater detail below. It is contemplated that in some embodiments, filter driver  may be configured to implement one or more combinations of the aforementioned operations, including other filter operations not specifically mentioned.","It is noted that filter driver  is part of file system  and not an application or process within user space . Consequently, filter driver  may be configured to operate independent of applications and processes within the user space . Alternatively, or in addition to the above, filter driver  may be configured to perform operations in response to requests received from applications or processes within the user space .","It is further noted that in some embodiments, kernel space  may include processes (not shown) that generate accesses to storage devices , similar to user space processes . In such embodiments, processes executing in kernel space  may be configured to access file system  through a kernel-mode API (not shown), in a manner similar to user space processes . Thus, in some embodiments, all accesses to storage devices  may be processed by file system , regardless of the type or space of the process originating the access operation.","Numerous alternative embodiments of operating system  and file system  are possible and contemplated. For example, file system  may support different numbers and formats of local file systems , or only a single local file system . In some embodiments, network protocol  may be omitted or integrated into a portion of operating system  external to file system . Likewise, in some embodiments virtual file system  may be omitted or disabled, for example if only a single local file system  is in use. Additionally, in some embodiments filter driver  may be implemented within a different layer of file system . For example, in one embodiment, filter driver  may be integrated into virtual file system , while in another embodiment, an instance of filter driver  may be implemented in each of local file systems .","Files and Metadata","As described above, file system  may be configured to manage access to a plurality of files stored on storage devices . In many embodiments, each stored file may have an associated identity used by the file system to distinguish each file from other files. In one embodiment of file system , the identity of a file may be a file name, which may for example include a string of characters such as \u201cfilename.txt\u201d. However, in embodiments of file system  that implement a file hierarchy, such as a hierarchy of folders or directories, all or part of the file hierarchy may be included in the file identity. For example, a given file named \u201cfile1.txt\u201d may reside in a directory \u201csmith\u201d that in turn resides in a directory \u201cusers\u201d. The directory \u201cusers\u201d may reside in a directory \u201ctest1\u201d that is a top-level or root-level directory within file system . In some embodiments, file system  may define a single \u201croot directory\u201d to include all root-level directories, where no higher-level directory includes the root directory. In other embodiments, multiple top-level directories may coexist such that no higher-level directory includes any top-level directory. The names of the specific folders or directories in which a given file is located may be referred to herein as the given file's path or path name.","In some embodiments of file system  that implement a file hierarchy, a given file's identity may be specified by listing each directory in the path of the file as well as the file name. Referring to the example given above, the identity of the given instance of the file named \u201cfile1.txt\u201d may be specified as \u201c\/test1\/users\/smith\/file1.txt\u201d. It is noted that in some embodiments of file system , a file name alone may be insufficient to uniquely identify a given file, whereas a fully specified file identity including path information may be sufficient to uniquely identify a given file. There may, for example, exist a file identified as \u201c\/test2\/users\/smith\/file1.txt\u201d that, despite sharing the same file name as the previously mentioned file, is distinct by virtue of its path. It is noted that other methods of representing a given file identity using path and file name information are possible and contemplated. For example, different characters may be used to delimit directory\/folder names and file names, or the directory\/folder names and file names may be specified in a different order.","The files managed by file system  may store application data or program information, which may collectively be referred to as file data, in any of a number of encoding formats. For example, a given file may store plain text in an ASCII-encoded format or data in a proprietary application format, such as a particular word processor or spreadsheet encoding format. Additionally, a given file may store video or audio data or executable program instructions in a binary format. It is contemplated that numerous other types of data and encoding formats, as well as combinations of data and encoding formats, may be used in files as file data. In addition to managing access to storage devices, the various files stored on storage devices, and the file data in those files as described above, in some embodiments file system  may be configured to store information corresponding to one or more given files, which information may be referred to herein as metadata. Generally speaking, metadata may encompass any type of information associated with a file. In various embodiments, metadata may include information such as (but not limited to) the file identity, size, ownership, and file access permissions. Metadata may also include free-form or user-defined data such as records corresponding to file system operations, as described in greater detail below. Metadata corresponding to a file as well as the data content of files may collectively be referred to herein as file system content.","In some embodiments, file system  may be configured to provide an application-language independent query interface whereby an application may query file system content. For example, in one embodiment file system content may be stored along with tags that describe various aspects of the content, as described in greater detail below. In such an embodiment, an application may be configured to query the file system content in order to identify specific content according to various specified tag values. For example, an application may query the file system content to identify all files written by a particular application within a certain date range.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 3","FIG. 3","FIG. 2"],"b":["205","205","221","310","320","310","205","330","340","310","320","310","320","310","320","310","320","310","320"],"i":["a","n","a","n ","a","n","a","n ","a","n ","a","n ","a","n "]},"Files  may be representative of files managed by file system , and may in various embodiments be configured to store various types of data and program instructions as described above. In the illustrated embodiment, each of files  has a corresponding named stream . Each of named streams  may be configured to store metadata pertaining to its corresponding file. It is noted that files  and named streams  may be physically stored on one or more storage devices, such as storage devices  of . However, for purposes of illustration, files  and named streams  are shown as conceptually residing within file system .","In some embodiments, filter driver  may be configured to access file data stored in a given file . For example, filter driver  may be configured to detect read and\/or write operations received by file system , and may responsively cause file data to be read from or written to a given file  corresponding to the received operation. In some embodiments, filter driver  may be configured to generate metadata corresponding to a given file  and store the generated metadata in the corresponding named stream . For example, upon detecting a file write operation directed to given file , filter driver  may be configured to update metadata corresponding to the last modified time of given file  and to store the updated metadata within named stream . Also, in some embodiments filter driver  may be configured to retrieve metadata corresponding to a specified file on behalf of a particular application.","Metadata also may be generated in response to various types of file system activity initiated by operating system  or processes  of . In some embodiments, the generated metadata may include records of arbitrary complexity. For example, in one embodiment filter driver  may be configured to detect various types of file manipulation operations such as file create, delete, rename, and\/or copy operations as well as file read and write operations. After detecting a particular file operation, filter driver  may be configured to generate a record of the operation and store the record in the appropriate named stream  as metadata of the file  targeted by the operation.","The stored metadata record may in various embodiments include various kinds of information about the file  and the operation detected, such as the identity of the process generating the operation, file identity, file type, file size, file owner, and\/or file permissions, for example. In one embodiment, the record may include a file signature indicative of the content of file . A file signature may be a hash-type function of all or a portion of the file contents and may have the property that minor differences in file content yield quantifiably distinct file signatures. For example, the file signature may employ the Message Digest 5 (MD5) algorithm, which may yield different signatures for files differing in content by as little as a single bit, although it is contemplated that any suitable signature-generating algorithm may be employed. The record may also include additional information not specifically listed.","In one embodiment, the metadata record stored by filter driver  subsequent to detecting a particular file operation may be generated and stored in a format that may include data fields along with tags that describe the significance of an associated data field. Such a format may be referred to as a \u201cself-describing\u201d data format. In one embodiment, Extensible Markup Language (XML) format may be used as a self-describing format for storing metadata records, although it is contemplated that in other embodiments, any suitable format may be used, including formats that are not self-describing.","XML-format records may allow arbitrary definition of record fields, according to the desired metadata to be recorded. One example of an XML-format record is as follows:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<record sequence=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"<type>application\/pdf<\/type>"]},{"entry":[{},"<user id=1598>username<\/user>"]},{"entry":[{},"<group id=119>groupname<\/group>"]},{"entry":[{},"<perm>rw-r--r--<\/perm>"]},{"entry":[{},"<md5>d41d8cd98f00b204e9800998ecf8427e<\/md5>"]},{"entry":[{},"<size>0<\/size>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/record>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["320","310","310","310","205","310","221","221","310","221","310","221","310"],"i":["a","a","a","a ","a "]},"It is noted that in some embodiments, metadata may be stored in a structure other than a named stream. For example, in one embodiment metadata corresponding to one or more files may be stored in another file in a database format or another format. Also, it is contemplated that in some embodiments, other software modules or components of file system  may be configured to generate, store, and\/or retrieve metadata. For example, the metadata function of filter driver  may be incorporated into or duplicated by another software module.","Querying File System Content","As described above, in some embodiments file system  may be configured to store various types of file system content. File system  may store numerous types of file data within one or more files, and may store metadata of arbitrary complexity corresponding to a given file. File system  may also be configured to consume file system content. For example, file system  may implement particular storage policies whereby files having certain usage characteristics as indicated in their metadata are assigned to particular types of storage. In one embodiment, for example, files that are more recently used or are accessed by certain types of processes may be assigned to faster types of storage, whereas other files may be assigned to slower storage.","In some embodiments, application or operating system processes external to file system  (such as processes  of ) may also be configured to consume file system content. For example, a programmer writing an application software module may wish to create and manipulate specific files and their associated file data in order to store or retrieve application data. Additionally, such a programmer may wish to perform actions contingent on the metadata characteristics of certain files, such as configuring a backup program to select only files that have been modified since the time of the last backup. In some embodiments, API  of  may provide an interface of function calls whereby an application process  may interact with file system  to interact with file system content.","In embodiments where file system content is stored in a self-describing format, such as the XML format described above, a process or application may be configured to select the desired file system content by performing a query of the file system content using the self-describing features of that content. Generally speaking, a query may specify how a subset of data is to be selected from a larger set of data, such as through the evaluation of one or more data fields of a record stored in a self-describing format. For example, a user may wish to select all stored records that correspond to the file\/test1\/foo.pdf for further analysis. Correspondingly, the user may construct a query that specifies the selection of all records having a data field tagged \u201cpath\u201d where the data field equals a particular value, such as \u201c\/test1\/foo.pdf\u201d.","Queries may be constructed in a query language, which may provide syntactic constructs for the selection of sets of data based on the value of one or more tagged data fields. In some embodiments, a given query language may support procedural features, such as functions, for example, in addition to set-selection features. Further, in some embodiments a given query language may support the embedding within a query of procedural routines coded in other programming languages, such as Java or C, for example. Where the XML format is used to structure file system content, a given application may construct a query to select particular file system content in the XML Query (XQuery) language as specified by the World Wide Web Consortium (W3C) or any future XQuery standard or variant thereof. However, it is contemplated that any suitable query language may be employed.","In the illustrated embodiment, queries may be submitted to query engine  for evaluation. Query engine  may parse and evaluate received queries, and may coordinate with filter driver  to retrieve file system content corresponding to a particular query. Query engine  may then cause these query results to be conveyed to the application originating the query. It is noted that in one embodiment, query engine  may be configured to operate in the user space illustrated in , rather than in kernel space.","In some conventional embodiments, applications may submit queries to query engine  through a specific API configured to provide database-type connectivity to applications, such as the Java Database Connectivity (JDBC) standard API or the Open Database Connectivity (ODBC) standard API. Such APIs typically provide applications with a set of function calls, methods, or other interface mechanisms whereby an application may connect to a query engine, authenticate itself as authorized to submit queries, and actually convey queries to the query engine, among other types of activities.","However, such query APIs are typically specific to a particular programming language, operating system, and\/or hardware architecture. For example, in one embodiment the query API presented to a given application may consist of language-specific interface mechanisms, such as library or stub files written to interface with applications coded in particular languages, such as C, Java, or another language. Augmenting the query API to support applications written in languages not currently supported may require the coding of an additional API targeted to the desired language.","Further, in some embodiments, a given query API may reflect specific underlying characteristics of an operating system or hardware architecture, and in some instances where file system  supports interfaces to different operating systems or architectures, multiple query APIs may be required even for the same target application language. For example, some hardware architectures may use different byte ordering conventions (e.g., \u201cendianness\u201d) for data storage, requiring API libraries and\/or stub files conforming to each desired byte ordering convention.","Finally, conventional query APIs may require application programmers to understand not only the syntax and semantics of the query language in which queries will be formed and submitted to query engine , but also the syntax and semantics of a particular query API which may differ according to the programming language or operating system. For example, the JDBC and ODBC query APIs each specify a set of functional procedures by which a user may connect to a query engine and authenticate itself. However, such procedures may be merely preliminary to the actual formation and submission of a query, and if the identical query were to be performed in an application coded in a different language or for a different platform, different preliminaries might need to be employed prior to submission of the query.","In the illustrated embodiment, file system  provides a programming-language independent query interface  whereby an application may query file system content. In one embodiment, query interface  may be implemented as a query language interpreter configured to receive a query from an application and to perform the necessary actions to establish a connection to query engine , negotiate privileges, submit a query to query engine , and convey query results to the requesting application. For example, query interface  may be implemented in a manner similar to a shell script interpreter, such as the perl or csh script interpreters commonly used in Unix\/Linux-type environments. In one such embodiment, an application may write a specific query to a text file and then cause that text file to be interpreted by query interface . In another embodiment, an application may establish an interactive session with query interface  and may send a query directly to query interface  without writing the query to a file first.","For example, a given application may seek to retrieve all of the metadata stored in a named stream associated with a given file having the identity \u201c\/test1\/spreadsheet.xls\u201d. In one embodiment, the application may create a text file named, for example, \u201cls_meta.vxq\u201d that includes the following contents:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#!\/usr\/lib\/fs\/cas\/bin\/vxq -x"]},{"entry":[{},"xquery version \u201d1.0\u201d"]},{"entry":[{},"default element namespace = \u201chttp:\/\/veritas.com\/casmeta\u201d"]},{"entry":[{},"define function current($m1 as element(filemeta)*) as"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"element(record)* {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for $i in $m1"]},{"entry":[{},"return"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"let $maxseqno := max($i\/record\/@sequence)"]},{"entry":[{},"return $i\/record[@sequence = $maxseqno]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"let $path := \u201c\/test1\/spreadsheet.xls\u201d"]},{"entry":[{},"return current(\/filemeta)\/path[. = $path]\/ancestor::filemeta"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"214","figref":"FIG. 2"},"In the illustrated example, the first line of the file \u201cls_meta.vxq\u201d may specify the location of the query interface  that should be invoked to interpret the remainder of the file. In this case, query interface  is implemented as an executable application or shell named \u201cvxq\u201d, although it may have any name. The remainder of the file specifies a file system content query composed in the XQuery language. The query includes a definition of a function procedure current( ) that is configured to select the most current record within the metadata stored in a named stream , defined as the record with the highest sequence number. The query further applies the current( ) function to the metadata stored in the named stream  associated with the file \u201c\/test1\/spreadsheet.xls\u201d to select its most current record, and then applies the \u201cancestor\u201d operator to return the entire metadata stream (i.e., all records) in which the most current record resides. Thus, the query results in returning all metadata in named stream associated with file , \u201c\/test1\/spreadsheet.xls\u201d. Numerous variants of this query are possible and contemplated, as are numerous other possible queries.","After writing the foregoing contents into a text file, in one embodiment the application may cause the text file to be executed. For example, in some embodiments, various programming language environments may provide a generic system call that may allow programs external to an application to be invoked. In one such embodiment, where the querying application is coded in C, the example text file shown above may be invoked by the function call system(ls_meta.vxq). A relative or complete path to file \u201cls_meta.vxq\u201d may be provided in some instances. Alternatively, if a user is directly editing the contents of file \u201cls_meta.vxq\u201d, such as via a text editor, the user may cause the text file to be executed by entering the file name at a command line prompt. It is noted that in some embodiments, a user or application may need to ensure that the text file including the query to be submitted has an executable file attribute prior to attempting to execute the file.","When a text file such as \u201cls_meta.vxq\u201d is executed, the first line of the file may be examined by the operating system to determine if it specifies an interpreter intended to process the remainder of the file. In one embodiment, upon encountering a specification of the \u201cvxq\u201d interpreter, query interface  may be invoked. Subsequently, query interface  may establish a connection to query engine  and perform any other preliminary steps needed to submit a query to query engine , such as authentication, for example. Following these steps, query interface  may cause the remainder of the file (i.e., the query) to be submitted to query engine .","After query engine  evaluates a submitted query, it may generate output. For example, the query illustrated above may yield a sequence of metadata records when evaluated. Alternatively, if the query is malformed (i.e., syntactically incorrect), if query interface  was unable to establish a connection to query engine  (e.g., due to a system or authentication failure), or if some other exceptional condition occurs, an error condition may be generated. In either case, query interface  may be configured to convey the query output or error condition to the querying application. In some embodiments, such output or error information may be displayed on a display device, logged to an output or error file, or returned as text data directly to an application for further processing, or some combination of these or other behaviors.","In the foregoing discussion, query interface  was invoked by specifying a query language interpreter in a text file, along with a query, and then executing the text file. However, in other embodiments, query interface  may be invoked more directly. For example, in one embodiment, an application may create a file including a query but omitting specification of an interpreter (i.e., omitting the line beginning with \u201c#!\u201d in the example shown above). The application may then directly invoke query interface  by calling the command interpreter, and may pass the text file including the query to the command interpreter as a parameter or by redirecting the input stream of the command interpreter. For example, rather than invoking the system(ls_meta.vxq) call illustrated above, a C application may submit a query by invoking the call system(\u201cvxq\u2212x\u2212i ls_meta.vxq\u201d) or the call system(\u201cvxq\u2212x<ls_meta.vxq\u201d), or a similar call depending on the application's programming language and the conventions for passing parameters to or redirecting input of query interface .","Regardless of the exact manner in which query interface  is invoked, it is noted that an application may submit a query to query engine  via query interface  without being aware of interface syntax or semantics beyond the technique used to invoke query interface . That is, for submitting a query in some embodiments, an application need only be aware of the syntax and semantics of the query language supported by query engine , such as XQuery, for example. In such embodiments, further details regarding query submission may be handled by query interface  in a manner transparent to the querying application.","In some embodiments of file system , query interface  may support applications running on different operating system platforms. For example, query interface  may support query submissions from Windows-based applications as well as Unix\/Linux-based applications, or from other types of applications. In one such embodiment, file system  may provide a separate instance of query interface  native to each supported platform. In another embodiment, query interface  may be implemented in a platform-independent language. For example, query interface  may be implemented in Java and executed in a Java Virtual Machine provided by each platform. In yet another embodiment, a given platform may implement separate utilities to provide cross-platform functionality, enabling the given platform to use a version of query interface  implemented for a different platform. For example, in one embodiment query interface  may be implemented as a Unix-type shell interpreter. A Windows platform including the Windows Services for Unix utilities, or similar cross-platform utilities, may be capable of executing Unix-style shell scripts. Such a Windows platform may thereby directly interact with query interface , without necessitating a native Windows version of that interface. Also, it is noted that like query engine , in one embodiment query interface  may be configured to operate in the user space illustrated in , rather than in kernel space.","It is contemplated that in some embodiments, query interface  may be configured to accept parameters or arguments that a querying application may specify when invoking the interface. For example, in one embodiment query interface  may accept optional arguments that enable various levels of debugging output or verbosity of returned status messages. In another embodiment, query interface  may accept optional arguments that specify how query input and output should be handled, e.g., read from or written to specific files or devices. However, it is contemplated that in some embodiments where query interface  is configured to accept parameters, an application may be able to submit a query without specifying such parameters.","Additionally, it is contemplated that in one embodiment, query interface  and query engine  may be configured to inherit the general security model implemented by the file system. That is, a given application's privileges regarding the type of file system content it may access via a query may be governed by the general file access privileges established by the file system, such that a given query may be performed contingently based upon the security model provided by file system . For example, file system  may establish a system of privileges based on file ownership and file permissions, such that a user (or an application executing with a user's identity and\/or privileges) may only have access to certain files owned by the user or for which the user has been granted access privileges by the owner. File system  may reject an attempt by a user or application to access file system content for which the user or application is not privileged. Similarly, query interface , query engine , or another module of file system  may be configured to assess the file system content requested by a given query in light of the querying application's privileges as established by file system  generally, and may reject an attempt to query file system content for which the querying application is insufficiently privileged. It is contemplated that in various embodiments, file system  may implement numerous other types of security models that may be inherited by the query environment.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","221","320","310","310"]},"Subsequently, a given application or process may generate a query of file system content in a particular query language (block ). For example, the application or process may generate a query of XML-format file system content in the XQuery language. In one embodiment, the application or process may cause the query to be written to a file, which in another embodiment, the query may be buffered internally to the application.","After generating the query, the given application or process may submit the query to query engine  via query interface  (block ). For example, as variously described above, the given application may directly or indirectly invoke query interface  as a shell-type interpreter and may cause query interface  to read a file including the query or to receive the query directly through interprocess communication techniques such as streams or buffers.","Upon receiving a submitted query, query interface  may be configured to establish a connection with query engine  and convey the query to query engine  for evaluation (block ). In some embodiments, query engine  may also be configured to establish that the querying application is authorized to submit a query, such as by evaluating a security model inherited from file system . In other embodiments, such authentication may be performed by a different software module at a different step.","Query engine  may then evaluate the submitted query and return results and\/or exceptional status, such as error conditions, to the querying application via query interface  (block ). In some embodiments, query engine  may cause results to be written to a file, such as an output file specified by the querying application or a default output file, while in other embodiments the results may be returned directly to the querying application through interprocess communication techniques.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
