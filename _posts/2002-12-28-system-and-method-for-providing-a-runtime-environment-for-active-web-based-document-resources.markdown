---
title: System and method for providing a runtime environment for active web based document resources
abstract: A computer program product provides an active interactive document resource with an active shell surrounding its data. The shell operates in a runtime environment, a nest, and can operate with a helper process for the coordination and distribution of tasks. The active document in conjunction with its shell provides functionality in basic document management features, interactivity features, search, and other miscellaneous features such as imbedding dynamically generated content. Basic document features include automatic update or synchronization of document content, maintaining a list of similar documents, adding related or updated content, automatic update of the document's index, and automatic update and conversion of the underlying document format. Interactivity features include interacting with other documents within the same nest or other nests, interacting with users, and maintaining security.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634728&OS=07634728&RS=07634728
owner: International Business Machines Corporation
number: 07634728
owner_city: Armonk
owner_country: US
publication_date: 20021228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention generally relates to active documents, and more specifically to an active shell surrounding the active document, for providing basic management and connectivity features. The shell operates in a runtime environment and operates with a helper process for the coordination and distribution of tasks.","Typical documents created using current technology are passive. Documents are files that do not typically have executable code. The lowest representation level of data is the binary representation in a computer's memory, which data requires an interpreter to retrieve the semantics of that data. In a higher level context, a document adheres to a specification of its format to allow exchange and compatibility. Some application software is required to interpret, view, print, and interact with that document, reflecting the essentially passive nature of current document technology.","Associating code and an execution environment with a document would transform it from a passive state to an active entity. The term \u201cactive document\u201d is widely used in various different contexts. For the purposes of this discussion, an \u201cactive document\u201d is defined as representing a lightweight executable software code that acts as a container for static or dynamically generated document resources. The active document provides a workplace to store additional data. In addition, it has a well-defined interface to interact with other live active documents, networks, persons, or other entities.","An active document has an associated set of behaviors that have been referred to as activities. Activities are arbitrary actions performed as a result of a user opening, scrolling, editing, or closing a document. Although a document's activities are actually triggered by the document editor, they are associated with the document and preserved when the document is filed, copied, or even electronically mailed. Users have conventionally marked arbitrary items in a document as active or associate queries. However, a specific application, typically a special document-editor application, is still required to load and then execute the active document. If this document editor application is terminated, the document is no longer active.","The Internet currently comprises mostly documents that are either static or dynamically generated. Transforming these passive resources into active participants would change the way the Internet behaves in various ways. First, live active documents are smart about their content. They can update document format, synchronize with newer versions, add related content, etc. Second, active documents can interact with other documents and users, exchange information, notify persons about their existence, and even trigger actions in a user's personal information manager (e.g. active calendar). Thus, there is a need for active documents that can be edited or otherwise manipulated by a variety of applications and can be treated as a process instead of a file. The need for such a system has heretofore remained unsatisfied.","The present invention satisfies this need, and presents a system, a computer program product, and a associated method (collectively referred to herein as \u201cthe system\u201d or \u201cthe present system\u201d) for providing a runtime environment for interactive and live web based document resources. The present system is a live interactive document resource with an active shell surrounding its data.","The shell comprises software code, such as Java, that provides basic management and connectivity features. The shell acts as a container holding the document data along with a work place to store additional data. Each shell has an interface accessible through an application programming interface (API) or a graphical user interface (GUI). One example of an API in this instance would be Internet services. The shell operates in a runtime environment called a nest and can operate with a helper process for the coordination and distribution of tasks.","The active document in conjunction with its shell provides novel functionality in basic document management features, interactivity features, search, and other miscellaneous features, such as imbedding dynamically generated content. Basic document management features include automatic update or synchronization of document content, maintaining a list of similar documents, adding related or updated content, automatic update of the document's index, and automatic update and conversion of the underlying document format. Interactivity features include interacting with other documents within the same nest or other nests, interacting with users, and maintaining security.","To synchronize the document content, the user provides to the document's shell the origin of the document (e.g. the URL of the document). The shell is then able to compare and synchronize its content with the original document on an automatic or user specified schedule. Consequently, the user will always have access to a document with current content. The document initiates the content synchronization, reflecting the active nature of the document.","To maintain a list of similar documents, the shell requests the helper to search for particular documents (e.g. using the indexed keywords as a search criteria). The active document can automatically search for similar documents in the same nest or in one or more different nests. When searching for similar documents, the helper \u201casks\u201d other shells if they are related or similar to the shell originating the request. A related or similar shell responds to the helper's request. The helper then forwards this response to the shell that originated the request. It is also possible for a shell to ask the helper for a list of shells within the nest; the shell can then submit the request directly to the neighboring shells.","When a new shell is added to a nest, the helper informs all shells occupying the same nest that a new shell has arrived. Other shells can then add this event to their event queue. After some random time delay, these shells can contact their new neighbor. This time delay allows the new shell time to \u201crest\u201d.","Similarly, if a shell is deleted, the deleted shell sends its list of similar documents to the helper. The helper notifies the documents on this list of the deletion, eliminating pointers to nonexistent similar documents. In general, a relation between two shells is always a two-way relation; referential integrity in this relation will be enforced. The functionality of a reference list of similar documents provides a fast and convenient lookup for a user. The size of the list may be limited to a specific manageable size.","Each document in the list will have a similarity score, managed by a priority queue. If a new document is similar, it will be entered in the list only if its similarity score is at least as large as the least similar document. The least similar document may then be deleted from the list, and the relationship with the least similar document is terminated.","Another document management feature is adding related or updated content, making the active document a living document. A living document actively adds pertinent content without user intervention. Periodically, the shell may look for additional or updated content from various sources. For example, a document might represent a hub for computing resources. A shell is equipped with a web crawler or search module to crawl or search the web for related documents, updated content, etc. When located, this new content is added to the shell's workplace. Crawling and search tasks may be assigned to the helper to balance the work load between the shell and the helper.","In principal, every task of a shell might be propagated to the helper. The helper uses models of distributed processing to coordinate and run the tasks, returning the results to the shell at a later time. A user is able to customize this gathering process. A GUI for the shell would allow the user set an update schedule, specify which portions of the document to update, etc.","A third document management feature is automatic update of the document's index. The shell automatically updates its index when content is added or modified. In addition, the shell sends a notification request to similar shells (stored in the list of similar documents) to verify that these documents are still similar. A key feature of the present system is that the shell for each document maintains an index for that document. As opposed to a centralized index maintained by the application, the index is decentralized and maintained on the document level.","Another document management feature is automatic update and conversion of the underlying document format. A user may not have an appropriate viewing device for interpreting the document data. For example, a shell may contain a PostScript\u00ae document. A user with no PostScript\u00ae viewer will be unable to view the document as stored. However, the user does have a JPG viewer. In situations such as this, the shell then asks the helper to convert the data on the fly and store the additional data in a supported format in the shell. The document content can now be displayed in the user's JPG viewer.","In addition, a document format might change over time. For example, the document format of word processing documents might be upgraded to support more features. HTML documents on the Internet might change as document standards evolve. A shell monitors its document format and automatically modifies the new format as required. The helper performs the conversion; the new format is saved in the shell.","One interactivity feature of the present system is the ability to interact with other documents. A shell can interact with other shells in the same nest or with shells in other nests. It can request a list of shells in the same nest from the helper. The helper itself can register with other helpers. Consequently, helpers can contact other helpers to retrieve a list of shells of other nests. The shell itself can get in touch with a different shell using standard networking protocols, such as SOAP.","A shell can be identified through its unique address. The interaction feature of shells might be used to exchange data. For instance, a shell could exchange the list of similar documents with a similar shell. This merges the two lists into one, enhancing the list of similar documents for both shells. In addition, shells might exchange various content, synchronize content, and so forth.","Another interactivity feature of the present system is the ability to interact with users. A shell can be connected to a personal and social automation management system, providing novel features for that management system. An active document recognizes that a particular user might be interested in its content and notifies this user. Consequently, instead of a user searching for documents, the documents come to the user.","One method for implementing this feature is through the user listing their hobbies and interests with the management system. A shell might then contact the management system to locate users who might be interested in its content. The management system might then reply with a list of potential users. The shell might then send an email, instant message, or other message to this user providing a thumbnail or preview of its content. An interested user can interact with the shell, clone the shell to have a copy in the user's nest, etc. Furthermore, if the user likes the document content, the shell could notify similar shells to send a preview to this user. In addition, a shell can store the contact information for interested users for future occasions.","Another interactivity feature of the present system is security. A nest will have security features implemented to maintain access control over its shells. In addition, all shells will have an access control list. In principle, a shell could derive its access control list from the access control list of the document. Standard security technologies such as those used in operating systems can be applied to help coordinate access permission and prevent unauthorized document access.","A feature of the present system is its active search architecture. Current search technology is based on the principle of gathering information from the Internet, indexing it, and making it available for search. However, the Internet grows so rapidly that most of the major search engines are unable to keep up. Documents on the Internet are frequently modified, added, deleted, etc. Many new Internet sites appear on a daily basis. Active documents provide the basis for a new and novel search architecture that can complement the existing standard Internet search architecture.","The active search architecture allows a shell to register its index and identity with a search engine supporting active documents. The search engine can then integrate this data in a searchable index. Once a document is deleted, it will send an erase request to the search engine. The active document will also notify a search engine automatically of changes in its index. The active search architecture eliminates the need for crawling or re-crawling resources; the document itself acts when modified. Furthermore, an active document can have a reference list of search engines with which it is registered (similar to the reference list for similar active documents).","In an alternate embodiment, the helper could be responsible for maintaining a global index for a nest and for registering or exchanging that index with a search engine that supports active documents. This intermediary hierarchy could help to distribute and eliminate some network traffic.","Another feature of the present invention is the ability to embed dynamically, generated content in a document. The features previously discussed primarily address static documents. A static document is created at a specific time and its content is not changing. In contrast, a dynamically generated document is created by some script or is executable at run time (e.g. at the user's request). Active documents can support dynamically generated documents by providing a runtime environment inside the shell for scripts, executables, etc. The content of such a document is then generated on demand or request based on various input parameters and may differ each time requested.","With XML as a standard for describing content and structure and the advances in Java and web services architecture, the implementation of live active documents is technically feasible. Different vendors can implement different products based on the technology. Existing document resources can easily be converted into live documents using the appropriate tool. Current document technology and applications adhere to predefined standards; consequently, communication between different products is no problem.","The following definitions and explanations provide background information pertaining to the technical field of the present invention, and are intended to facilitate the understanding of the present invention without limiting its scope:","Active Document: A lightweight executable software code that acts as a container for static or dynamically generated document resources.","Hit: A response to a search query. The response is a document found by the search engine that contains key words or other attributes relevant to the search query.","HTML (Hypertext Markup Language): A standard language for attaching presentation and linking attributes to informational content within documents. During a document authoring stage, HTML \u201ctags\u201d are embedded within the informational content of the document. When the web document (or \u201cHTML document\u201d) is subsequently transmitted by a web server to a web browser, the tags are interpreted by the browser and used to parse and display the document. In addition to specifying how the web browser is to display the document, HTML tags can be used to create hyperlinks to other web documents.","HTTP (HyperText Transport Protocol): The communications protocol used to connect to servers on the World Wide Web. Its primary function is to establish a connection with a Web server and transmit HTML pages to the client browser.","Internet: A collection of interconnected public and private computer networks that are linked together with routers by a set of standards protocols to form a global, distributed network.","SGML (Standard Generalized Markup Language): A generic language for writing markup languages. SGML enables different presentations of the same information by defining the general structure and elements of a document.","SOAP (Simple Object Access Protocol): A protocol that provides a way for applications to communicate with each other over the Internet, independent of platform, or the underlying hardware or software for a system.","URL (Uniform Resource Locator): A unique address that fully specifies the location of a content object on the Internet. The general format of a URL is protocol:\/\/server-address\/path\/filename.","World Wide Web (WWW, also Web): An Internet client\u2014server hypertext distributed information retrieval system.","XML: extensible Markup Language. A standard format used to describe semi-structured documents and data. During a document authoring stage, XML \u201ctags\u201d are embedded within the informational content of the document. When the XML document is subsequently transmitted between computer systems, the tags are used to parse and interpret the document by the receiving system.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 1","b":["10","15","10","10","10"]},"The cloud-like communication network  is comprised of communication lines and switches connecting servers such as servers , , to gateways such as gateway . The servers ,  and the gateway  provide the communication access to the WWW or Internet. Users, such as remote Internet users, are represented by a variety of computers such as computers , , , and can query the host server  for desired information through the network . Computers , ,  each include software that will allow the user to browse the Internet and interface securely with the host server . The host server  is connected to the network  via a communications link  such as a telephone, cable, or satellite link. The servers ,  can be connected via high-speed Internet network lines ,  to other computers and gateways.","The high-level architecture of system  is illustrated by the block diagram of . System  comprises a shell , a runtime environment called a nest , and a coordination manager and task distribution unit called a helper . Shell  comprises software code implemented, for example, in Java\u00ae that provides some basic management and connectivity features. Shell  acts as a container holding the data for the active document . Shell  operates in nest . Nest  can easily be integrated into current operating systems.","A block diagram for the architecture of shell  is shown in . A tool can be used to convert a standard document resource into a live active document . The conversion process integrates the content of the standard document into shell . During this process, the standard document is converted into a normalized structure for internal representation within shell . This normalized structure is the active document , typically written in languages such as SGML or XML. However, the normalized structure is not required.","If necessary, a shell  can contain multiple copies of the data in different formats. A shell  has a control unit  that manages all interactions with other shells, nests, and helpers. The plug in space  provides storage for additional software code, providing extensibility. The communication interface management  manages the external communication with other shells similar to the functionality of a protocol handler. The implementation of the communication interface management  should be based on communications standards such as SOAP. Each shell  has a work place  for persistent data storage in addition to storage space for its index  and reference space . System  decentralizes the index; each active document  now has its own index  referring to its content. When the user queries against the active document , the active document  itself responds to the query.","The method  of system  for implementing a shell for an active document is described by the process flow chart of . The user creates an active document  or converts an existing document to an active document  at block . System  then creates a shell  for the active document  at block . Shell  is then registered with a dedicated runtime environment, nest , at block . At block , system  activates shell . Shell  could be implemented as a thread of control within nest . Nest  will keep shell  active and alive and provides it with the necessary computation cycles. Some workload will be produced on the user's machine; the workload volume will depend on the number of shells  that nest  is serving. Implementing smart process management in nest  and moving non time-critical tasks to idle hours of the machine will alleviate machine usage.","During its lifetime, the active document  will gradually collect additional data and state information. This data and state information is stored in the workplace  of shell . Shell  can be stored in persistent storage such as a file system, database, etc. The software code of shell  contains a well defined API that provides connectivity, query, search, and various other document management features.","The design goal of system  is to keep shell  itself lightweight to avoid unnecessary overhead for each active document . Consequently, shell  has a basic execution framework that allows the user to add more functionality in form of plug-ins. These plug-ins are stored in a portion of the work place  or in nest . In addition, a nest  will contain some API such that the operating system or a client can interact with the active document .","Once system  activates a shell , shell  registers with the helper . Helper  provides additional processing power to shell  and performs various tasks and services for shell  on demand. Shell  is small and can't manage large computational tasks. Updating or maintaining the data in active document  or the index  may involve computationally intensive tasks. Consequently, shell  generates a task for helper . One such task would be converting the active document from XML to PDF\u00ae format. The helper  may reside on a different server machine for load balancing. Companies may provide these helper servers as a service or the helper  may be a grid of computers using a distributed approach. The main functions performed by shell  are communicating with other shells, nests, and helpers; indexing; delegating tasks to the helper; receiving results; parsing and converting.","Once system  registers shell  with helper , shell  sends its document content to the helper  at block . The helper  analyzes the document format at block . Continuing on to , system  converts the document format to a common standardized XML format at block . System  then indexes the content according to the selected format at block . This index and other metadata is returned to shell  at block . Shell  stores the index data in index  and stores additional data such as metadata in workplace  for future access.","A user can interact with shell  directly by sending commands to shell . Sample commands are \u201cview content\u201d or \u201cprint content\u201d. Shell  will then invoke the appropriate document format viewer to display the content of active document . In addition, nest  will provide network connectivity for each shell . Consequently, shell  can be accessed over a network using a standardized protocol such as HTTP, SOAP, etc.","The ability of a user to initiate commands implemented by the active document  is a novel feature of system . Currently, a user selects a document using a pointing device in a file explorer (e.g. Windows Explorer\u00ae). The operating system has a mapping table of registered applications for the particular file type. From this mapping table, the operating system invokes the appropriate registered application with the name of the document as a parameter. Conversely, shell  receives a command from the user to view the content of its active document . Shell  then performs the actions required to open the viewer application, etc. The operating system is not directly involved with opening active document . System  might provide a GUI to help facilitate user input. Shell  models itself as a web service to provide users programmatic access.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 5","b":["10","505","510","515","520","510","525","530","535","540","525","510","545","545","550","545","505","10","510","525","510","525","505","515","520","510","510","510","530","535","540","525","525"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 6A","FIG. 6B"],"b":["600","10","10","605","610","615","615","610","605","1","620","2","625","610","605","1","620","2","625","1","620","2","625"],"br":[{},{}],"in-line-formulae":[{},{}],"o":"V","sub":["1","2","3","4","i"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 7","b":["700","10","705","710","715","720","725","725","730","725","705","720","725","725","710","720","710","725","710","720","720"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 8","b":["800","10","10","1","805","2","810","3","815","820","825","825","820","830"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 9","b":["900","10","905","910","915","920","925","920","915","930","910","905","915","910","920","915","920","915"]},"User  may wish to read active document  in PDF format. User  then opens Acrobat\u00ae ; it sends a command to shell  requesting active document . Shell  converts the XML format of active document  to PDF format  and returns to Acrobat\u00ae  a byte stream of data, not a file. In addition, web browser  may send a command to shell  requesting active document  in HTML format. Shell  converts the XML format of active document  to HTML  for web browser . The active document  is stored only once in a general format. The active document  renders itself in the format required by the application used to modify or view the document.","It is to be understood that the specific embodiments of the invention that have been described are merely illustrative of certain application of the principle of the present invention. Numerous modifications may be made to the system and method for providing a runtime environment for interactive and live web based document resources invention described herein without departing from the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various features of the present invention and the manner of attaining them will be described in greater detail with reference to the following description, claims, and drawings, wherein reference numerals are reused, where appropriate, to indicate a correspondence between the referenced items, and wherein:",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIGS. 4A and 4B","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 6","FIGS. 6A and 6B","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 7","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 8","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 9","FIGS. 1 and 2"]}]},"DETDESC":[{},{}]}
