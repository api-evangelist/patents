---
title: System and method for customized provisioning of application content
abstract: The current state of art for over-the-air (OTA) provisioning typically consists of a rigid set of operations that are suited to deliver a fixed content type. The runtime environment on the terminal is designed to handle a limited set of predefined content types and incapable of any content-adaptive or customized provisioning by the content provider or publisher. Systems and methods are provided for customized provisioning of an application program on a runtime environment of a terminal. The application includes application content having at least one specified content type. A method comprises: obtaining the application content by the runtime environment; and obtaining by the runtime environment a set of provisioning instructions related to the application content. The provisioning instructions are coupled to the application for specifying a provisioning API set for provisioning the application content. This method also executes the provisioning instructions for employing the API set to provision the application according to the specified content type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08387039&OS=08387039&RS=08387039
owner: Research In Motion Limited
number: 08387039
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20040130
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Network System","EXAMPLE","Provisioning of Ringtones vs Game Application"],"p":["The present application relates to provisioning of applications on a terminal.","There is a continually increasing number of terminals in use today, such as mobile telephones, PDAs with wireless communication capabilities, personal computers, self service kiosks and two-way pagers. Software applications which run on these terminals increase their utility. For example, a mobile phone may include an application which retrieves the weather for a range of cities, or a PDA may include an application that allows a user to shop for groceries. These software applications take advantage of the connectivity to a network in order to provide timely and useful services to users. However, due to the restricted resources of some terminals, and the complexity of delivering large amounts of data for processing to the terminals, developing and maintaining data processing capabilities of software applications remains a difficult and time-consuming task.","The current state of art for over-the-air (OTA) provisioning typically consists of a rigid set of operations that are suited to deliver a fixed content type. The runtime environment on the terminal is designed to handle a limited set of predefined content types and incapable of any content-adaptive or customized provisioning by the content provider or publisher. The conventional provisioning process is typically carried out by software that contains certain knowledge of the downloaded content and the installation steps. Due to this built-in knowledge, the content provider and device user are left with an inflexible \u201cone size fits all\u201d model. The limitations of this approach can include: an inability to handle arbitrary content; an inability to dynamically extend existing applications with new features; and an inability to provide customized provisioning capabilities based on content type and\/or requirements.","Disclosed herein are systems and methods of customized provisioning of application content to obviate or mitigate at least some of the above presented disadvantages.","The current state of art for over-the-air (OTA) provisioning typically consists of a rigid set of operations that are suited to deliver a fixed content type. The runtime environment on the terminal is designed to handle a limited set of predefined content types and incapable of any content-adaptive or customized provisioning by the content provider or publisher. The limitations of this approach can include: an inability to handle arbitrary content; an inability to dynamically extend existing applications with new features; and an inability to provide customized provisioning capabilities based on content type and\/or requirements. Contrary to current provisioning systems there is provided herein systems and methods for providing customized provisioning of an application program on a runtime environment of a terminal. The application includes application content having at least one specified content type. One such method comprises: obtaining the application content by the runtime environment of such a terminal; and obtaining a set of provisioning instructions related to the application content. The provisioning instructions are coupled to the application for specifying a provisioning API set for provisioning the application content. The method also executes the provisioning instructions for employing the API set to provision the application according to the specified content type.","A method for providing customized provisioning of an application program on a runtime environment of a terminal is disclosed, the application including application content having at least one specified content type, the method comprising the steps of: obtaining the application content by the runtime environment; obtaining by the runtime environment a set of provisioning instructions related to the application content, the provisioning instructions coupled to the application for specifying a provisioning API set for provisioning the application content; and executing by the runtime environment the provisioning instructions for employing the API set to provision the application according to the specified content type.","A terminal for providing customized provisioning of an application program on a runtime environment is also provided, the application including application content having at least one specified content type, the terminal comprising: a processing framework for obtaining the application content; a provisioning API set included in the processing framework for provisioning the application content; and a set of provisioning instructions related to the application content, the provisioning instructions coupled to the application for specifying selected ones of the provisioning API set.","Further disclosed is a method for providing customized provisioning of an application program on a runtime environment of a terminal, the application including application content having at least one specified content type, the method comprising the steps of: sending the application content for receipt by the runtime environment; sending a set of provisioning instructions related to the application content for receipt by the runtime environment, the provisioning instructions coupled to the application for specifying a provisioning API set for provisioning the application content; and making available selected ones of the API provisioning set for use by the provisioning instructions; wherein execution of the provisioning instructions employs the API provisioning set to provision the application according to the specified content type.","Also provided is a computer program product for providing customized provisioning of an application program on a runtime environment of a terminal, the application including application content having at least one specified content type, the computer program product comprising: a computer readable medium; a processing framework module stored on the computer readable medium for obtaining the application content; a provisioning module coupled to the framework module, the provisioning module configured for utilising a provisioning API set for provisioning the application content; and an interpreter module coupled to the framework module, the interpreter module configured for executing a set of provisioning instructions related to the application content, the provisioning instructions associated with the application for specifying selected ones of the provisioning API set.","Referring to , a network system  comprises a plurality of terminals  for interacting with one or more application servers  accessed by a server , via a coupled Wide Area Network (WAN)  such as but not limited to the Internet. These generic terminals  can be such as but not limited to wired devices such as personal computers , wireless devices , PDAs, self-service kiosks and the like. The server  provides access to application programs  through messages . The system  provides the capability of the terminal  to provision the content of the application program , such as but not limited to expressed in a structured definition language (e.g., XML), that has associated provisioning instructions  for interacting with various provisioning Application Program Interfaces (API)  used by a provisioning service  of a processing framework  (see ). The provisioning instructions  represent a customizable provisioning scheme tailored to the desired implementation of the application  on the terminal . The instructions  can be code\/script and\/or provisioning data such as an XML definition.","The content of the application  is provisioned on the terminal  according to the associated customized provisioning instructions , such as but not limited to supplied by the content provider (for example the server ) or publisher (not shown). Accordingly, the content has provisioning control to help specify the requirements and actions of application  provisioning through the associated provisioning instructions . Further, the Framework  shares the provisioning control of the application  by recognizing the content provisioning control and customizing the provisioning process of the framework to accommodate. The framework  provides the capability to request the provisioning API  as needed, and address that API  tailored to content type of the application . The framework  can be referred to as a union of collaborating modules that collectively provision, store and evaluate applications .","The provisioning API  requested by the provisioning instructions  could be retrieved locally (terminal  storage) or remotely for example from an API repository\/database  accessed through a repository server . Alternatively, the remote server  could push the provisioning API  on demand, or in connection with delivery of application , to the terminal  in conjunction with the needed customized API  of the provisioning instructions  of the application . It is recognized that XML represents only one example of a structured definition language that can be used to define the content of the application . Other example languages can include, without limitation, HTML, XHTML, XSML, RDF, Machine Readable Cataloging (MARC), and Multipurpose Internet Mail Extensions (MIME). It is recognized that the system  can be suitable to any range of defined applications  to be used in conjunction with terminals  that may be limited in terms of connectivity, memory and\/or storage. It is further recognized that the servers , ,  could be implemented by a service provider  providing a schema defined service, such as a web service by example. A single environment could provide all server , ,  functionality in a single computer system, or across multiple computer systems.","The system  operates such that the application  and the framework  have separate but operatively coupled provisioning control (e.g. application provisioning intelligence) of the provisioning process. The first area of intelligence is with the Content of the application , which contributes to the specification of the requirements and actions of provisioning through the provisioning instructions . The remaining intelligence is with the framework , which provides the provisioning service  and associated provisioning API  (see ). Optionally, the framework  can also include an extension module  that allows introduction of specific API  access for provisioning the content type associated with the application . The shared provisioning control of the application  and framework  is adaptable according to the selected provisioning instructions  and the correspondingly selected provisioning API  available over the network  of the system .","Further, it is recognised the system  can also have a gateway server  for connecting the desktop terminals  via a Local Area Network (LAN)  to the server . Further, the system  can have a wireless network  for connecting the wireless devices  to the WAN . It is recognized that other terminals and computers (not shown) could be connected to the server , via the WAN  and associated networks other than as shown in . The generic terminals , wireless devices  and personal computers  are hereafter referred to as the terminal  for the sake of simplicity. Further, the networks , ,  of the system  will hereafter be referred to as the network , for the sake of simplicity. It is recognized that there could be multiple servers , , , and\/or that the functionality of the servers ,  and\/or  could be combined in various configurations, if desired.","Generic Terminal","Referring to , the terminals  are such as but not limited to mobile telephones (or other wireless devices), PDAs, two-way pagers or dual-mode communication terminals. The terminals  include a network connection interface , such as a wireless transceiver or a wired network interface card or a modem, coupled via connection  to a terminal infrastructure . The connection interface  is connectable during operation of the terminals  to the network , such as to the wireless network  by, for example, IR links, RF links, etc. (see ), which enables the terminals  to communicate with each other and with external systems (such as the server \u2014see ) via the network  and to coordinate the requests\/response messages  between the terminals  and the servers , . The network  supports the transmission of the provisioning API  in the requests\/response messages  between terminals  and external systems, which are connected to the network . The network  may also support voice communication for telephone calls between the terminals  and terminals which are external to the network . A wireless data transmission protocol can be used by the wireless network , such as but not limited to DataTAC, GPRS or CDMA.","Referring again to , the terminals  also have a user interface , coupled to the terminal infrastructure  by connection , to facilitate interaction with a user (not shown). The user interface  can include one or more user input devices such as but not limited to a QWERTY keyboard, a keypad, a trackwheel, a stylus, a mouse, a microphone and the user output device such as an LCD screen display and\/or a speaker. If the screen is touch sensitive, then the display can also be used as the user input device as controlled by the terminal infrastructure . The user interface  is employed by the user of the terminal  to coordinate the requests\/response message messages  over the system  (see ) as employed by the processing framework .","Referring again to , operation of the terminal  is enabled by the terminal infrastructure . The terminal infrastructure  includes the computer processor  and the associated memory module . The computer processor  manipulates the operation of the network interface , the user interface  and the framework  of the communication terminal  by executing related instructions, which are provided by an operating system; the computer processor  can include one or more processing elements that may include one or more general purpose processors and\/or special purpose processors (e.g., ASICs, FPGAs, DSPs, etc). Further, it is recognized that the terminal infrastructure  can include a computer readable storage medium  coupled to the processor  for providing instructions to the processor for loading\/updating client application programs , the provisioning instructions  and the provisioning API . The computer readable medium  can include hardware and\/or software such as, by way of example only, magnetic disks, magnetic tape, optically readable medium such as CD\/DVD ROMS, and memory cards. In each case, the computer readable medium  may take the form of a small disk, floppy diskette, cassette, hard disk drive, solid state memory card, or RAM provided in the memory module . It should be noted that the above listed example computer readable mediums  can be used either alone or in combination.","Processing Framework","Referring to , the framework provides the provisioning service  and associated provisioning API . Optionally, the framework  can also include an extension module  that allows introduction of specific API  access for provisioning the content type associated with the application . A client runtime environment is provided by the processing framework . Multiple such runtime environments could potentially be available for use by the processing framework  of a given terminal . The framework  of the terminal  is coupled to the infrastructure  by the connection  and is an interface to the terminal  functionality of the processor  and associated operating system of the infrastructure . The client runtime environment of the terminals  is preferably capable of generating, hosting and executing client application programs  on the terminal ; if multiple runtime environments are available, a particular one can be selected for use with a given application program . Further, specific functions of the client runtime environment can include such as but not limited to service framework  support for language, coordinating memory allocation, networking, management of data during I\/O operations, coordinating graphics on an output device of the terminals  and providing access to core object oriented classes and supporting files\/libraries. Examples of the runtime environments implemented by the terminals  can include such as but not limited to Common Language Runtime (CLR) by Microsoft and Java Runtime Environment (JRE) by Sun Microsystems. It is recognised that the components of the processing framework  can include software, hardware or a combination thereof.","The processing framework  manages the application  provisioning, retrieving and removing from the runtime environment of the terminal . The processing framework  provides ability to dynamically manage the provisioning API . It is recognized that the control of provisioning the content of the application  is distributed between the application  through the provisioning instructions  and the provisioning service  of the Framework , which represents the separation as Application  Intelligence and Framework  Intelligence. Having made this separation, the application  may no longer be bound by static provisioning procedures that would normally be imprinted on terminal  prior provisioning procedures.","The Framework  provisioning control is responsible for recognizing application  provisioning intelligence and customizing the provisioning process to accommodate. The framework  provides the capability to request the provisioning API  needed, and address those API  with the specified content type of the application . Specific actions of the framework  can include such as but not limited to: recognising the API  required for the Content of the application  (as specified by the provisioning instructions  for example); lookup of the API  on the terminal  or via the network ; downloading the API  from the specified remote network  location if needed; and removing or otherwise suspending\/caching the API  no longer required by the terminal  (such as in the case of an application program upgrade). In the environments with centralized management of the terminals  is being enforced (e.g. corporate space), a central server (not shown) could initiate removal of obsolete API  on the respective terminals .","Referring again to , the Processing Framework  can provide generic service framework  functionality as part of, or separate from, the application program  such as but not limited to; an Application Manager , the optional provisioning extension module , the Provisioning service , a Communication Service , a provisioning Script Interpreter , and a Persistence Manager . Other services (not shown) can include a presentation service, a terminal access service and a security manager. It is recognised that separate service  functionality can be shared by a plurality of application programs , or can be represented as a series of respective services  on an application  per application  basis.","Referring again to , the communication service  manages connectivity between the terminals  and the servers , via the network , including the ability to send and receive data in the framework  and to fetch remotely stored API  as required. The persistence manager  allows the API  to be locally stored in the memory module . The provisioning service  co-ordinates the process of provisioning the application  into the Framework . The Provisioning Service  can represent the application  in a format that is recognized by the Application Manager  for evaluation\/execution in the runtime environment, as further described below. The Application Manager  can be used to interact with the user interface  (see ), manages application lifetime, etc. The Application Manager  can also evaluate the internal representation of the Content of the application  as provisioned. The optional Extension Module  can offer a requested API  to the Provisioning Service  to operate on the content. The provisioning Script Interpreter  can interpret the Provisioning instructions  and direct provisioning actions. Further, the provisioning API  can be referred to as an arbitrary set of operations utilized by the Provisioning Service  to perform customized application  provisioning. The Provisioning API  can be offered by the Extension Module .","Optionally, the framework  can include the Security Manager that may perform validation of provisioning tasks, the Screen Manager that may interact with the Framework user to collect required provisioning data, and the terminal Access Service that may be used to interrogate terminal specific information required to complete provisioning. It is recognized that other configurations of the processing framework  with respective services , , , , ,  for implementing the application  provisioning can be other than shown, as desired. Further, it is recognized that the framework  can be part of the operating system of the terminal infrastructure .","Referring to , the provisioning service  of the framework  has the capability to query for the desired API required at provisioning time. Further, the Provisioning Service  optionally can have the capability to query for a particular API set\/Content Type combination, according to the provisioning instructions  given to the application  as a series of code and\/or script. This facility is utilized by generic content of the application  to dynamically request the appropriate API be made available for its provisioning procedure, further described below in relation to . The Provisioning Service  may provide a built in API set  to satisfy a standard provisioning procedure. Custom APIs sets  are made available to the provisioning script interpreter  on request. The steps for this procedure are as follows:\n\n","It is recognized that the above described architecture of , regarding an example of the provisioning instructions  as code\/script, could be adapted to provision the application  content via the provisioning instructions  defined as provisioning Data, or as a combination thereof.","Customized Provisioning","To provide customized provisioning capability, the provisioning control of the application  on the terminal  is distributed between the application  (through the provisioning instructions ) and the framework . This separation of control as Application  provisioning control (Intelligence) and Framework  provisioning control (Intelligence) helps the application  to be no longer bound by a static provisioning procedure that would normally be implemented by current terminals .","Framework  Intelligence","The Framework  is responsible for recognizing application  provisioning intelligence and customizing the provisioning process to suit it, as described above. The framework  provides the capability to request the provisioning API  required, and address that API  with any content type.","Application  Intelligence","Application control implies that the content of the application  is able to influence, through the coupled provisioning instructions , the operations conducted at provisioning time. Application intelligence in the form of the provisioning instructions  may take on three general forms: a separate unit of provisioning code (provisioning script); a set of provisioning data; or a combination thereof.","Provisioning Script","A Provisioning Script, as the provisioning instructions , represents a distinct unit of executable instructions that can direct the Framework  during provisioning. The Provisioning Script relies on the fact that the Framework  makes available the appropriate API  to satisfy provisioning operations. The Framework  provides the API  of choice, as specified by the script, suitable to the content type(s) of the application .","Embedded Script","A provisioning script, as the provisioning instructions , may be attached to the content of the application  at download time to the terminal  (for example from the server \u2014see ). The script is immediately available to be executed within the Framework .","External Script","It may be desirable to reuse a particular provisioning script. In this case, the script may be separated from the Content of the application  and requested by the Provisioning Service  (see ) at provisioning time. The script (i.e. the provisioning instructions ) could be fetched either remotely or locally as circumstances dictate.","Provisioning Configuration Data","Provisioning Data consists of an arbitrary set of properties, which can be referred to as an embedded or otherwise coupled version of the provisioning instructions , that may be specified in the content of the application . This approach to application  intelligence relies on the fact that the Framework  recognizes the set of possible properties and modifies the provisioning process to suit customized settings. It is recognised that the provisioning data could be designed as external to the content of the application .","Arbitrary Provisioning API, Generic Content Provisioning","A further example of the system framework  is provisioning Generic Content (GC) of the application  via an arbitrary set of provisioning operations. Accordingly, the provisioning process is detached from how the GC is embodied (the content type) in the application . Referring to , the Framework  (see ) is enhanced to provide the Extension Module  and a generic Provisioning Service  that offers API querying coupled to content type(s) of the application .","The Extension Module  provides a Service Provider Interface (SPI)  to plug-in handlers or enablers  for API extensions. The API extensions in this case are distinct provisioning API sets . The ability to address a particular API choice of the set  to provision a desired content type of the application  is supplied through the appropriate enabler . The provisioning service  offers the capability to query for the desired generic API from the set  required at provisioning time. It should be recognised that the generic API  are each able to interact with a generic content, i.e. each API  can interact with a variety of different content types through a predefined generic content type interface, such as but not limited to transforming the data of the content type to a generic representation format recognisable by the generic API . The enabler  would be in this case a translation mechanism between a specific content type of the application  and the generic processing capabilities of the API . The Extension Module  permits a service provider to register the API enabler  on the terminal  for selected content types and selected API . The Extension Module  allows use of a particular provisioning API  for provisioning of a generic content type (defined as a specific type through the specified enabler ). The Extension Module  typically implements a standard API set  for the most common set of operations, the so-called Standard Provisioning API A of . The Extension Module  also contains custom API , which can be made available according to the provisioning instructions  (see ) which would contain a reference to the custom API  needed to provision the application . These custom API  could be obtained either locally on the terminal  if available or remotely such as on the repository  (see ).","Generic Content Type","The Framework  that conducts the provisioning process is now insensitive to the type of the GC. This property is imparted through introduction of the plugin SPI  for API Extensions (through the enablers ). The enablers  are available for digestion of a predefined content type (such as one per enabler ) for presenting to the generic provisioning API  selected by the provisioning service .","Plugin SPI ","The plugin SPI  for API Extensions provides the capability for Service Providers to introduce enablers  to the Extension Module , i.e. the SPI  provides an interface for connecting the enablers  to the Extension Module . As plugin enablers  may apply to new content types, the plugin SPI  provides the capability of the Extension Module  to dynamically extend the processing scope of the Framework . Referring to , it is recognized that the Extension Module  can search for or otherwise obtain unavailable or new enablers  from the local storage  or remotely from such as the repository .","API Enabler","Referring to , the enabler  is an instructional component that provides access to a desired API  for provisioning a predefined content type for the respective enabler . The enabler can be written by the service provider  (see ) and integrated with the Extension Module  via the plugin SPI . The enabler  can therefore be referred to as an executable unit that executes provisioning instruction requests (such as code and\/or script) in the context of the known content type to which the enabler  is assigned. The enabler  performs the requested function on the provisioning API, and operates on its known content type as is appropriate to fulfilling the requests. There are such as but not limited to three ways in which a required enabler  may be resolved:\n\n","Consider the case where a custom generic \u201cProvisioning Compression API\u201d  exists that provides ability to compress data at installation time. This API  provides an operation called flatten( ). A selected enabler \u201cA\u201d is provided that operates on content type A: ringtone data, and a separate enabler \u201cB\u201d operates on the game (i.e. content type B). The provisioning script included with both enablers  make use of the same generic compression API .","During provisioning of the ringtone, the provisioning service  makes a request for the Provisioning Compression API's flatten( ) operation. In this case, enabler A extracts the sound bytes of the ringtone description and passes them to the flatten( ) method for compression. During provisioning of the game, enabler B extracts graphic and sound sequences from the game content description and passes those to the same flatten( ) for compression. It should be recognised that only one version of the generic API  is used to process multiple different content types.","Sample Extension Module  Configuration","Consider the case where the Extension Module  offers two provisioning API's.\n\n","In this scenario, Enabler A addresses access to the standard API.A for provisioning content type X and Enabler B addresses access to new API.B (contained) for a known content type Y. It is recognized that this example could be extended to support any set of provisioning operations for any content type.","Sample Provisioning Procedure","The following procedure illustrates the Generic Provisioning Model using application intelligence specified via the provisioning instructions . Referring to ;\n\n","In view of the above, a system  of adaptable provisioning is described with the capabilities of the ability to customize the provisioning process (dynamic) and neutrality to application content type (generic). To facilitate the adaptable provisioning scheme, the system  uses: application  defined provisioning; framework  managed provisioning API; and optionally provisioning extension enablers .","Provisioning Extensibility Example","Given the capabilities of the system  a general application of dynamic provisioning can be illustrated. This is the ability to enhance or otherwise adapt the provisioning instructions  as an application  is deployed throughout a network of collaborating parties. This approach is presented through the following example Provider Refined Provisioning Process with reference to .\n\n","The above description relates to one or more exemplary systems and methods. Many variations will be apparent to those knowledgeable in the field, and such variations are within the scope of the application. It is recognized that structured definition languages for the content of the application  other than XML can be used, as well as a plurality of different terminals , such as PC's, PDA's, kiosks, mobile devices. The terminals  can be deployed on wired and\/or wireless network  topologies. For example, it is recognised that implementation of the system  can include a processing framework module for obtaining the application content; a provisioning module configured for utilising a provisioning API set for provisioning the application content; and an interpreter module configured for executing a set of provisioning instructions related to the application content, the provisioning instructions associated with the application for specifying selected ones of the provisioning API set."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features will become more apparent in the following detailed description in which reference is made to the appended example drawings, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 6"]}]},"DETDESC":[{},{}]}
