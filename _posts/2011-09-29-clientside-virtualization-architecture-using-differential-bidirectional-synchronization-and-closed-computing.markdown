---
title: Client-side virtualization architecture using differential bi-directional synchronization and closed computing
abstract: The invention discloses the architecture of client-side virtualization, utilizing the techniques of differential bi-directional synchronization of layered data and closed computing, as an extension to virtual desktop infrastructure. Both the client and server run a virtual machine monitor on top of which user application data, system data, personal application, group application, and guest operating system are layered independently. Layer independence is achieved by system data redirection, cache acceleration, and application composing/decomposing method. The client can be securely protected via the push-OS concept, security links, and closed computing services, including virtual machine subscription management control and network resource control services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08943506&OS=08943506&RS=08943506
owner: Transoft (Shanghai), Inc.
number: 08943506
owner_city: Shanghai
owner_country: CN
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","FIELD OF INVENTION","PRIOR ART","SUMMARY OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CSV Architecture"],"p":["This application is the national phase under 35 USC 371 of international application no. PCT\/CN2011\/080339, filed Sep. 29, 2011, which claims the benefit of the priority date of Chinese application no. 201010505636.3 filed Oct. 12, 2010. The contents of the aforementioned applications are incorporated herein in their entirety.","The invention involves the domain of virtualization, specifically the architecture of client-side virtualization using differential synchronization and closed computing.","In the past, diskless workstation is a computer with no hard disk to operate remote desktop. The desktop is delivered from an operating system (OS) of a physical server in a remote data center.","The technique of OS virtualization enables multiple OSs running on one physical server, fully utilizes the power of the server, and saves cost of server purchasing. The reason of such virtualization is that multiple \u201cguest\u201d operating systems (or Virtual Machine, or VM, or Guest) runs on top of Virtual Machine Monitor (VMM, or hypervisor), and VMM is running directly on top of physical machine.","Upon the prevalence of virtualization, virtual desktop infrastructure (VDI) is used to replace diskless workstation. Virtual desktop is operated as a remote desktop delivered from the physical server in the data center. It is different from the diskless workstation in that the desktop is from a virtual machine, not the OS running on the physical machine. The client of virtual desktop uses a small box, called thin client, with small memory, to provide functions of communication and display.","Since users have a need to operate when line is disconnected, \u201cOffline VDI\u201d (different from \u201cclient-side virtualization\u201d) starts emerging. This technique installs a VMM at the client-side, thus VM image as well as mandatory applications (abbrev. as \u201capp\u201d hereafter) are streamed from server and users are able to operate when line is disconnected. A reconnection after the disconnected operation enables both user and administrator of data center to synchronize the change of data, application, and OS to keep content consistency. The above disconnect-reconnect steps can be repeated.","Around 2009, US companies MICROSOFT, VMWARE, and CITRIX all released an initial version of offline VDI. US companies such as MOKA5 earlier also released an offline VDI product that took advantage of VMWARE's free client product WORKSTATION. MOKA5 product is based on the result of a research project \u201cCollective\u201d from US STANFORD UNIVERSITY, emphasizing the utilization of cache to resolve the latency problem of image delivery. This technique however does not use differential to reduce the size of content delivered. \u201cDifferential\u201d here is defined as the difference of images between the client and server since last synchronization. This greatly reduces the amount of data transferred on the network. Furthermore, since VMWARE product is not open source, MOKA5 cannot take advantage of the homogeneity of VM (e.g. all VMs are Windows or all are Linux) to reduce the application\/VM image storage for large-size users.","The differential synchronization algorithm has been around for long time, e.g. open source ideas such as rsync and unisom. However, the algorithm has not been widely used in the field of offline VDI. In other words, the technique to calculate and compare hash value for blocks of file differential is pretty generic, but comparing the hash value amongst client\/server (or slave\/master) parties, all in VMM environment, is first seen in U.S. Pat. No. 7,447,852 to Cannon, et al. \u201cTracking and replicating changes to a virtual disk\u201d, December 2005.","Offline VDI uses layering method. However, those applications tightly-coupled with OS during deployment and runtime are often influenced by system registry and other OS files, hence the layering (or isolating application from OS) is difficult. In order to isolate an application from its OS, there is a handy technology used in the field of application virtualization, also called application virtualization engine (or briefly \u201cAVE\u201d, such as MICROSOFT APP-V, TRANSOFT TRANSOD, CITRIX XEN-APP, VMWARE THINSTALL, etc.). There are normally three parts of this technology: (a) a preprocessor decomposes the original application from its OS information, (b) a delivering method to send the packaged app+OS info from a server to AVE client, and (c) the AVE client to re-compose the received package and run the application on top of the AVE client platform. The decomposing function in (a) and composing functions in (c) become a must in order to layer the images of application and OS properly.","Further, the feature of offline VDI cannot be used in many lines of business. For example, schools and government agencies require security at the hardware level, which cannot be satisfied by offline VDI. In cyber caf\u00e9, the technique of \u201creverting card\u201d for PC currently cannot be replaced by offline VDI. Further, the training centers have a requirement for their workstations to swap OS environments often. This cannot be satisfied either. Therefore, the methods of offline VDI do not resolve deeper problems. The invention of client-side virtualization is able to provide solutions for the above deficiencies in various lines of business applications.","The purpose of the invention is to disclose a method of Client-Side Virtualization (CSV), called CSV differential synchronization and closed computing. Specifically it involves solutions to deeper CSV problems based on differential synchronization. The solutions include the following functions, to be realized with client\/server technique:","Function 1, differential synchronization;","Function 2, cache acceleration;","Function 3, closed computing;","Function 4, the way to place the individual user system data into a state to be differential synchronized via redirection;","Function 5, the way to isolate an application from OS, and to extract the parts that are able to be differential-synchronized;","Function 6, hoteling guest OS;","Function 7, push-OS;","Function 8, VM subscription management control and network resource control;","Function 9, client-side closed computing services, and four (4) secure links.","In order to realize the above functions, the invention uses client-side virtualization which includes:","The client is one or more computers, which can be desktops, laptops, netbooks, and even removable storage (e.g. USB storage), to communicate with servers in the data center via network. The servers in the data center contain one or more server computers, a.k.a hosts. If more than one hosts then they are operated in clusters. Any server host of a cluster is installed with virtualization software VMM, on top of which one or more VM is running.","The client computer also runs VMM. The VMM may be pre-installed, or delivered at power-up. Whatever the way it is, the client OS must be delivered from the server at system initialization to run. Actually, the OS delivered to client also includes one or more applications running on top of the OS. The application may be virtualized to package together with the OS for delivery. Such a package is called golden image.","Consequently, if the system starts running, user app data, system data, newly-added or upgraded application, even swapped VM, are bi-directional, differential-synchronized between client and server. The user is able to operate offline, but the changes made during offline are synchronized upon reconnection.","If the client is a removable storage, a VMM is still in it. This removable storage may be downloaded in a school or office environment with data, application, and golden image, and is plugged into a third-party computer (e.g. a home computer). The computer then loads the whole running environment and conducts offline job.","The CSV architecture of the invention provides a method of CSV, which is built upon client\/server architecture. When the user is online, the client constantly synchronizes the data, application and OS with the server. Additionally, user operations are protected with security mechanisms, preventing hacker attack. Such a system extends the VDI technology, and also has many specific business applications. For example, CSV becomes an eSchoolbag for education communities, an eBriefcase for enterprises or government agencies (the terminology \u201ceBag\u201d is used hereafter as a generalization for eSchoolbag and eBriefcase), a desktop with reverting function in cyber caf\u00e9s, and a workstation that swaps amongst many OSs for training centers.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 1","b":["011","012","013","011","012"]},"In the system shown in , CSV client manager  handles the following data: user data , application image , VM image , and VMM . As to hardware , it can be a desktop, laptop, netbook, or removable storage. CSV client manager itself contains the most important components: the mechanism of synchronization and streaming , which synchronizes the image between CSV client and CSV server; other CSV client component  such as repository system, cache system, and security system; VDI\/VMI client  communicates with VDI\/VMI server via screen delivery technology.","CSV server  includes CSV server manager , user database , application image, OS image, VMM binary code , and server virtualization component . CSV server manager  further includes the most important mechanism of server synchronization and streaming , as well as other CSV server management components .","The embodiment of  also explains the interaction between CSV client and CSV server is based on synchronization and streaming technology. The above introduction covers CSV architecture.","CSV Client\/Server Layered Data Processing",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 2","FIG. 5A"],"b":["011","012","021","022","023","0503"]},"Step , begin PC BIOS initialization and VMM hypervisor startup;","Step , determine is the operation is VDI\/VMI. If yes, go to step , otherwise go to step ;","Step , VDI\/VMI client initializes and communication starts up. Go to step ;","Step , VDI\/VMI client\/server interaction; Step , VDI\/VMI server initializes and communication starts up. Go to step ;","Step , determine if the operation is CSV. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is user application data or user system data. If yes, go to step , execute those data redirected, and use backup at disaster recovery. Otherwise, go to step ;","Step , determine if the operation is user application. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is company application. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is golden OS. If yes, go to step . Otherwise, go to step ;","Step , execute various functions of client-side repository system, and go to step ;","Step , execute various functions of client-side cache system, and go to step ;","Step , execute client-side bi-directional synchronization, and go to step ;","Step , execute streaming protocol, and go to step  or step ;","Step , CSV server initializes. Go to step ;","Step , determine if the operation is user application data or user system data. If yes, go to step , execute those data redirected, and use backup at disaster recovery. Otherwise, go to step ;","Step , determine if the operation is user application. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is company application. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is golden OS. If yes, go to step . Otherwise, go to step ;","Step , return with error;","Step , execute various functions of server-side repository system, and go to step ;","Step , execute various functions of server-side cache system, and go to step ;","Step , perform server-side bi-directional synchronization, and go to step .","Client Initialization\/BIOS",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 3"},"Step , carry out PC BIOS initialization and VMM\/hypervisor startup;","Step , determine if the operation is to download hypervisor. If yes, go to step . Otherwise, go to step ;","Step , read the hypervisor binary code from peripheral media. Go to step ;","Step , write hypervisor binary code into EPROM;","Step , determine if the operation is other BIOS operation. If yes, go to step . Otherwise, go to step ;","Step , execute other BIOS operation;","Step , determine if the operation is reset BIOS variable. If yes, go to step . Otherwise, go to step ;","Step , set all BIOS value;","Step , enter hypervisor startup.","Bare Machine Hypervisor Startup",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 4"},"In , bare machine must have storage for caching (except USB e-briefcase or e-schoolbag). Cached OS is always the most-updated version. And e-briefcase & e-schoolbag are examples of bare machine.","The Workflow Comprises:","Step , hypervisor (bare-machine) starts up. Go to step ;","Step , determine if the operation is upgrading, resetting, and downward synchronizing the OS. If yes, go to step . Otherwise, go to step ;","Step , read hypervisor binary code from peripheral media. Go to step ;","Step , designate the target OS as \u201cdefault OS\u201d. Go to step ;","Step , determine if the operation is switching OS. If yes, go to step . Otherwise, go to step ;","Step , save current OS to cache, and setup target OS switched to. Go to step ;","Step , determine if the target OS is already in cache. If yes, go to step . Otherwise, go to step ;","Step , load target OS from cache. Go to step ;","Step , target OS is streamed from server to cache. Go to step ;","Step , determine if the operation synchronizing OS upward. If yes, go to step . Otherwise, go to step ;","Step , send most updated OS image to server and organization computer. Go to step ;","Step , enter OS startup.","Repository System",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 5A","b":["051","052"]},"The workflow of client file system  comprises:","Step , client-side repository system initializes. Go to step ;","Step , place user system file into sync area with re-direction technique; synchronize to backup user system file (except temporary files such as IE history);","The workflow of server file system  comprises:","Step , server-side repository system initializes. Go to step ;","Step , determine if the operation is allocating users to the repository. If yes, go to step . Otherwise, go to step ;","Step , each user uses repository directory (local or network disk), each sub-directory is an image version (name of sub-directory is the version number). Go to step ;","Step , the most-updated image is under main directory. Go to step ;","Step , determine if the operation is reading data. If yes, go to step . Otherwise, go to step ;","Step , determine if local or network storage. If local, go to step . Otherwise, go to step ;","Step , don't delete file in repository unless file too old to make room. Go to step ;","Step , execute pre-fetch mechanism. Go to step ;","Step , Mount NFS capable to penetrate secure SSH. Go to step ;","Step , determine if the operation is writing data. If yes, go to step . Otherwise, go to step ;","Step , determine if local or network storage. If network storage, go to step . Otherwise, go to step ;","Step , Mount NFS capable to penetrate secure SSH. Go to step ;","Step , determine if image is in WIM format. If yes, go to step . Otherwise, go to step ;","Step , network block device (NBD) is mounted to VM system to visit disk in user \u201cgolden VM image\u201d directly. Go to step ;","Step , intercept WIM file write operation, replace write to file with write to sector, then replace write to sector with write to qcow2. Go to step ;","Step , save new image version to repository. Go to step ;","Step , set different privilege for network channel (at various mount points, from mount NFS server to assign TCP connector with different privilege). Go to step ;","Step , do fsync each 64 Kbyte to minimize dirty data residing in the memory of NFS client. Go to step ;","Step , return normally;","Step , return with error.","Distributed Repository System",{"@attributes":{"id":"p-0136","num":"0135"},"figref":["FIG. 5B","FIG. 5B","FIG. 23"],"b":["5","1","5","2"]},"The workflow of client file system B comprises:","Step B, client-side repository system initializes. Go to step B;","Step B, place user system file into sync area with re-direction technique; synchronize to backup user system file (except temporary files such as IE history);","The workflow of server file system B comprises:","Step B, server-side repository system initializes. Go to step B;","Step B, determine if the operation is allocating users to the repository. If yes, go to step B. Otherwise, go to step B;","Step B, each user uses repository directory (local or network disk), each sub-directory is an image version (name of sub-directory is the version number). Go to step B;","Step B, the most-updated image is under main directory. Go to step B;","Step B, determine if the operation is reading data. If yes, go to step B. Otherwise, go to step B;","Step B, determine if local or network storage. If local, go to step B. Otherwise, go to step B;","Step B, don't delete file in repository unless file too old to make room. Go to step B;","Step B, execute pre-fetch mechanism. Go to step B;","Step B, mount a loosely-coupled distributed File System (dFS), such as CEPH or other commercial storage FS. Go to step B;","Step B, determine if the operation is writing data. If yes, go to step B. Otherwise, go to step B;","Step B, determine if local or network storage. If network storage, go to step B. Otherwise, go to step B;","Step B, mount a loosely-coupled distributed File System (dFS), such as CEPH or other commercial storage FS. Go to step B;","Step B, determine if image is in WIM format. If yes, go to step B. Otherwise, go to step B;","Step B, network block device (NBD) is mounted to VM system to visit disk in user \u201cgolden VM image\u201d directly. Go to step B;","Step B, intercept WIM file write operation, replace write to file with write to sector, then replace write to sector with write to qcow2. Go to step B;","Step B, save new image version to repository. Go to step B;","Step B, set different privilege for network channel (at various mount points, from mounted dFS server, assign TCP connector with different privilege). Go to step B;","Step B, return normally;","Step , return with error.","Cache System",{"@attributes":{"id":"p-0161","num":"0160"},"figref":"FIG. 6"},"Step , initialize the cache system. Go to step ;","Step , determine if the operation is to allocate data objects into the cache system. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is COW file block. If yes, go to step . Otherwise, go to step ;","Step , duplicate small data, metadata & user data (maybe large), and write to small-object cache. Go to step ;","Step , background process frequently merges server updates into cache data objects to be read. Go to step ;","Step , place into COW cache. Go to step ;","Step , assign URL, file name, image version # as disk name. Go to step ;","Step , assign v-disk offset as the name of file block, to get ready for reading. Go to step ;","Step , determine if the operation is to handle disk crash and file crash. If yes, go to step . Otherwise, go to step ;","Step , compute MD5 hash values for each disk sector in size of 512 k bytes. Go to step ;","Step , if storage (or file) crashes the checking fails. Data is then regarded as not in cache. Go to step ;","Step , determine if the operation cache pre-fetch. If yes, go to step . Otherwise, go to step ;","Step , set priority for cache block according to access frequency to pre-fetch important data. Go to step ;","Step , calculate latency percentage of network or disk latest request. Go to step ;","Step , determine if latency percentage>threshold. If yes, go to step . Otherwise, go to step .","Step , decrease the request rate by half. Go to step ;","Step , determine if latency percentage equal to threshold. If yes, go to step . Otherwise, go to step .","Step , request rate incrementing or decrementing a certain value according to the latency of previous request. Go to step ;","Step , double request rate; and go to step ;","Step , return normally;","Step , return with error.","By-Directional Synchronization",{"@attributes":{"id":"p-0184","num":"0183"},"figref":["FIG. 7","FIG. 8"],"b":["071","072"]},"The workflow of server  comprises:","Step , image synchronization initializes. Go to step ;","Step , determine if the operation is to form application image. If yes, go to step . Otherwise, go to step ;","Step , determine if the application is a Windows application. If yes, go to step . Otherwise, go to step ;","Step , determine if the application uses system resource. If yes, go to step . Otherwise, go to step ;","Step , the first decomposition step: capture the private resource in shared resources operated by application. Go to step ;","Step , the second decomposition step: extract from OS those files belong to that application to form application image. Go to step ;","Step , application image is formed directly if it is green software. Go to step ;","Step , generate OS image. Go to step ;","Step , form a VM or VM template according to request. Go to step ;","Step , determine if operating the Windows application uses system resource. If yes, go to step . Otherwise, go to step ;","Step , composition: Application image & OS image form a readable file, then proceed to compose at the file level, and go to step ;","Step , Agent changes the content of resource of guest OS, and then merge with OS to become an image. Go to step ;","The workflow of client  comprises:","Step , user session starts. Go to step ;","Step , determine if the operation is online or offline. If online, go to step . Otherwise, go to step ;","Step , determine if the operation is local task directly operates remote network resources. If yes, go to step . Otherwise, go to step ;","Step , determine if remote image uses differential. If yes, go to step . Otherwise, go to step ;","Step , read\/write those resources whose differential changes, (but golden OS image never changes), then compose image according to policy. Go to step ;","Step , application & OS are in same image. Go to step ;","Step , Check-out: download the read-only network OS image needed by the user to local machine, & create image differential (aka workspace). Go to step ;","Step , Check-in: check into workspace, & compose image for the user according to policy at the remote server or storage. Go to step ;","Step , Local task uses local increment resource, and read-only network OS image. Go to step ;","Step , Enter differential algorithm, & use streaming protocol during communication.","The Composition & Decomposition for Application Image Formation",{"@attributes":{"id":"p-0210","num":"0209"},"figref":["FIG. 8","FIG. 7"],"b":["0705","0706","0711","0717"]},"Further, the app.pkg in steps ,  and  is normally in a compressed format to compose with the golden image of VM, and is then saved to the server disk. When the composed image needs to be modified (e.g. new applications are added), or when it is streamed to the client, the image is read from disk. If the VMM supports Linux OS (e.g. LXC, KVM, XEN), it is necessary first replace read\/write-to-file with read\/write-to-sector, and then replace read\/write-to-sector with read\/write-to-qcow2.","The composing and decomposing method disclosed here under the general context of CSV is part of the application virtualization technology, while the method is applied to a VM\/VMM environment in this invention.","The Workflow Comprises:","Step , initialize the application image formation using OS system resource. Go to step ;","Step , determine if the operation is decomposing a virtual application. If yes, go to step . Otherwise, go to step ;","Step , install hypervisor and run VM on top of it. This is done in data center. Go to step ;","Step , install a composition tool at the VM to form a \u201cgolden VM image\u201d. Go to step ;","Step , golden VM image=hypervisor+VM+composition tool. Go to step ;","Step , Get all files of Golden VM image. Go to step ;","Step , Install app, & monitor kernel API. Go to step ;","Step , Write detected system info into file sys.msg. Go to step ;","Step , Get the added files from the golden VM image after the app is installed. Go to step ;","Step , Compress the added files into file.pkg. Go to step ;","Step , sys.msg+file.pkg=app.pkg. The app.pkg is written to disk. Go to step ;","Step , determine if the operation is to compose virtual application. If yes, go to step . Otherwise, go to step ;","Step , the repository system writes \u201cgolden VM image\u201d into disk (See step  to  in ). When image is to be deployed into multiple VMs, the image is first read from disk into ring buffers, then go to step ;","Step , determine if all VM members complete deployment of this app. If yes, go to step . Otherwise, go to step ;","Step , return normally;","Step , hypervisor upcall broadcast to the next VM;","Step , Visit disk, & release files of app.pkg into the VM of \u201cgolden VM image\u201d. Go to step ;","Step , compose file \u201csys.msg\u201d into VM (e.g. insert registry information into Windows registry, Windows service & COM\/DCOM information into Windows VM). Go to step ;","Step , return with error.","Differential Algorithm",{"@attributes":{"id":"p-0234","num":"0233"},"figref":"FIG. 9","b":["091","092"]},"To compare this invention with the patent U.S. Pat. No. 7,447,854B1 to Cannon, et al. on the high-level operation, Cannon does not apply to the general context of CSV and does not use the ideas like application isolation, bi-directionness, metadata comparison, proxy server and virtual client. As to the comparison of the low-level disk operation, please see the embodiments of , , and .","The workflow of client  comprises:","Step , client initializes itself. Go to step ;","Step , determine if the golden OS image is received. If yes, go to step . Otherwise, go to step ;","Step , inform server the OS image is received. Go to step ;","Step , determine if client has just become online from offline. If yes, go to step . Otherwise, go to step ;","Step , read the metadata saved in the proxy server. Go to step ;","Step , determine if the client has any operation during the preset time-interval. If yes, go to step . Otherwise, go to step ;","Step , calculate the MD5 of file blocks modified. Go to step ;","Step , send concurrently Meta-data & MD5 of file block to server to check differential change. Metadata keep file blocks modified, the file it belongs to, & whether the file is user app, user system data, or app+OS image, etc. Go to step ;","Step , determine if the client requests offline operation. If yes, go to step . Otherwise, go to step , and keep on checking in the loop;","Step , client becomes offline. Go to step ;","Step , when user operates in offline mode, metadata and MD5 are saved in proxy server;","The workflow of server  comprises:","Step , server initializes itself. Go to step ;","Step , determine if the operation is sending out OS image. If yes, go to step . Otherwise, go to step ;","Step , send OS-image to the client. Go to step ;","Step , acknowledge the golden OS image is received by the client. Go to step ;","Step , determine if there is any operation at server when client operation is offline. If yes, go to step . Otherwise, go to step ;","Step , Metadata is kept at virtual client. Go to step ;","Step , determine if client is online. If yes, go to step . Otherwise, go to step ;","Step , if just switch from offline to online, get metadata from virtual client. Go to step ;","Step , compare the metadata at client and at server. Go to step ;","Step , specify the file blocks of differential change (i.e. difference) at client & at server. Go to step ;","Step , perform Difference Mediator. Go to step ;","Step , save the difference by taking the snapshot if it is within the time interval of taking a snapshot.","Difference Mediator",{"@attributes":{"id":"p-0262","num":"0261"},"figref":"FIG. 10","b":["101","102"]},"The workflow of server  comprises:","Step , difference solution initializes itself. Go to step ;","Step , compare the MD5 of the following file blocks: those blocks have difference at client and at server, and those blocks correspond to the latest snapshot. Go to step ;","Step , compare MD5. Determine if Client file blocks don't match latest snapshot file blocks. If not, go to step . Otherwise, go to step ;","Step , compare MD5. Determine if server file blocks don't match latest snapshot file blocks. If not, go to step . Otherwise, go to step ;","Step , server file blocks don't match snapshot but client file blocks match snapshot. Go to step ;","Step , server file blocks match snapshot but client file blocks don't match snapshot. Go to step ;","Step , server file blocks don't match snapshot & client file blocks don't match snapshot. Go to step ;","Step , inform administrator to merge the difference on client and server. Server acquires modified client file block via client's step . The details of the merge operation are illustrated in . Finally, remind client to wait merging result. Go to step ;","Step , send the merged file blocks to client of step . Go to step ;","Step , replace those file blocks that don't pass check with merged file blocks, and compose with those file blocks. Go to step ;","Step , send those file blocks that do not pass check to client step . Go to step ;","Step , inform client about the file block not matched, and then send out these file block via client step . Replace those file blocks that don't pass check with received client file blocks, and compose with those file blocks. Go to step ;","Step , return normally.","The workflow of client  comprises:","Step , send to server those file blocks requested by server;","Step , replace those client file blocks that don't pass check with received file blocks, and compose those blocks.","Merge Operation",{"@attributes":{"id":"p-0281","num":"0280"},"figref":"FIG. 11"},"Step , track the properties of those file blocks with difference. Go to step ;","Step , determine if difference is in user application data or system data. If it is application data, go to step . Otherwise, go to step ;","Step , determine if difference is in a text file. If yes, go to step . Otherwise, go to step ;","Step , mark the difference of the two files. Go to step ;","Step , administrator compares two text-files and merges by hand. Go to step ;","Step , determine if difference belongs to application (or OS) image. If yes, go to step . Otherwise, go to step ;","Step , overwrite merge. Go to step ;","Step , determine if auto-overwrite by policy. If yes, go to step . Otherwise, go to step ;","Step , client file blocks auto write-over server file blocks, or server file blocks auto write-over client file blocks. Go to step ;","Step , pop out dialogue box to let administrator decide who overwrites whom. Go to step ;","Step , return normally;","Step , return with error.","Streaming Protocol",{"@attributes":{"id":"p-0295","num":"0294"},"figref":"FIG. 12"},"If the client is a removable storage device, the hypervisor and golden image must be stored on it first. During runtime, the differential is sent from the server to the device. When the user plugs the removable storage into a third-party computer (e.g. home computer), the client manager automatically launch a client at the computer. After user login, the offline task can be performed. At the reconnection, the \u201ccheck-in\u201d method is used to synchronize with the server. The workflow comprises:","Step , come from image synchronization of . Go to step ;","Step , determine if the operation is a file-block request to client from server. If yes, go to step . Otherwise, go to step ;","Step , compare the metadata of requested file blocks. If cached in server due to earlier sends by client, the data is returned immediately without data communication. Go to step ;","Step , determine if the operation is communication protocol. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is long connection or short connection. If it is a long connection, go to step . Otherwise, go to step ;","Step , at a TCP connection, send multiple data packets in sequence. During TCP connection, if no packet is sent, a checking packet is sent by both sides to maintain the connection. Go to step ;","Step , build TCP connection when there is data exchange on both ends. After data is sent, stop this TCP connection. Go to step ;","Step , handle the network security of encryption in protocol (https or SSL). Go to step ;","Step , determine if the operation is for removable storage. If yes, go to step . Otherwise, go to step ;","Step , store hypervisor, client manager program, and user's own golden image. Plus, at runtime, the differential is sent from server to the removable storage device. Go to step ;","Step , use third-party computer to launch automatically the removable storage, as the client manger starts up the client at the third-party computer. Go to step ;","Step , after logging into his or her home computer, the user starts his own VM. Go to step ;","Step , finish the task when user is offline. Go to step ;","Step , when user is online, synchronize with server using \u201ccheck in\u201d. Go to step ;","Step , return normally.","The eBag Architecture",{"@attributes":{"id":"p-0313","num":"0312"},"figref":"FIG. 13","b":["131","132","133","132"]},"The following is the sample specification of a mobile eBag:\n\n","Block  virtual client also comprises the block  \u201cresource and access\u201d. This is an important function of eBag. Resource and access  describes eBag's 2 states of data and application: Block  online data and application, as well as block , offline data and application. When the state is changed, there is resource migration. Block  online data and application depend on block  network access. Block  offline data and application is in a none-network access state of block . The interchange between online state and offline state indicates state switch between network access of block  and none-network access of block .","Branch server  also comprises online resource , where the most important resources are: (1) Push-OS; (2) Application aggregating resources; (3) Player for optimally aggregated video\/audio; and (4) Subscription management control service.","The eBag architecture can be used for both education environment and office environment. For office environment, \u201ceBreifcase\u201d architecture includes block  as eBriefcase, block  as branch server, and block  as headquarter server. For education environment, \u201ceSchoolbag\u201d architecture includes block  as eSchoolbag, block  is school server, and block  is education bureau server.","Push-OS Server",{"@attributes":{"id":"p-0318","num":"0329"},"figref":"FIG. 14"},"Step , push-OS server prepares VMs. Go to step ;","Step , determine if the operation is upgrade and clearup of data, application and resource. If yes, go to step . Otherwise, go to step ;","Step , upgrade and clearup of data, application and resource;","Step , determine if the operation is the audit of data, application and resource. If yes, go to step . Otherwise, go to step ;","Step , determine if the realtime audit. If yes, go to step . Otherwise, go to step ;","Step , perform realtime audit. Go to step ;","Step , perform none-realtime audit. Go to step ;","Step , determine if the operation is document correction and batch dissemination. If yes, go to step . Otherwise, go to step ;","Step , teacher corrects homework or manager corrects documents. Go to step ;","Step , determine if batch dissemination to student or subordinate is completed. If yes, go to step . Otherwise, go to step ;","Step , determine if the operation is network resource control. If yes, go to step . Otherwise, go to step ;","Step , perform network resource control service. Go to step ;","Step , determine if it is personal gateway. If yes, go to step . Otherwise, go to step ;","Step , VM subscription management control service stops unauthorized person to access from network. Go to step ;","Step , determine if the online client has storage. If yes, go to step . Otherwise, go to step ;","Step , closed computing service (see ): stop unauthorized application or OS accessed from network. Go to step ;","Step , perform client\u2190\u2192server bi-directional differential synchronization. Go to step ;","Step , deliver the screen to client. Go to step ;","Step , return normally;","Step , return with error.","Push-OS Client",{"@attributes":{"id":"p-0340","num":"0351"},"figref":"FIG. 15"},"The client device with CPU and able to go offline, when it is offline, uses closed computing service to prohibit any unauthorized application, and uses network resource control service to stop connection with any website except the designated ones;","The removable storage without CPU, being offline only, accesses the third-party device, prohibits any unauthorized application via closed computing services, and prohibits connection to any undesignated website via network resource control services;","The client device without storage and being online only, has to use, online, the VDI client-side display device to display the screen of the VM on the server.","The client device with CPU and able to go offline, synchronized the differential of VM with the server.","The removable storage without CPU, being offline only, synchronize the differential with the online device, and also synchronize the differential with the server.","The Workflow Comprises:","Step , push-OS client initializes itself. Go to step ;","Step , determine if the operation is offline. If yes, go to step . Otherwise, go to step ;","Step , determine if the offline state belongs to a client device able to go offline (with CPU). If yes, go to step . Otherwise, go to step ;","Step , Mobile device stops any unauthorized app by closed computing service. Go to step ;","Step , Mobile device stops access to any website except authorized ones by network resource control service. Go to step ;","Step , determine if offline state belongs to a offline OS storage (no CPU). If yes, go to step . Otherwise, go to step ;","Step , access the third-party device. Go to step ;","Step , third-party device BIOS starts the mobile storage. Go to step ;","Step , third-party device stops unauthorized app by closed computing service. Go to step ;","Step , third-party device stops access to any website except authorized ones by network resource control service. Go to step ;","Step , user may create his or her own data. Go to step ;","Step , return with error;","Step , determine if the operation is online. If yes, go to step . Otherwise, go to step ;","Step , determine if online state=online client device only (no storage). If yes, go to step . Otherwise, go to step ;","Step , client manger uses VDI client to display VM screen. Go to step ;","Step , determine if online state=client device able to go offline (with CPU). If yes, go to step . Otherwise, go to step ;","Step , determine if there is any change of client VM. If yes, go to step . Otherwise, go to step ;","Step , synchronize the VM differential change to server. Go to step ;","Step , perform online office work or learning. Go to step ;","Step , determine if Online state=offline OS storage (no CPU). If yes, go to step . Otherwise, go to step .","Step , access the terminal of office or school. Go to step ;","Step , reverse-seamless: synchronize differential with office or school terminal. Go to step ;","Step , Reverse-seamless: synchronize differential with server. Go to step ;","Step , return normally;","Step , return with error.","VM Subscription Management Control and Network Resource Control",{"@attributes":{"id":"p-0373","num":"0384"},"figref":"FIG. 16","b":["161","162","1621","1622"]},"This control system may be implemented by a RESTful architecture on top of HTTP or HTTPs. The client  requests to the server  with signals and commands, but not data payloads. The payload is conveyed by the CSV bi-directional synchronization mechanism, independent of the RESTful communication. The step  described below is the \u201cjoint\u201d between these two mechanisms. The step may manage the requested resources, inform the CSV bi-directional synchronization mechanism for data payload, and send response back to the client.","Block  describes client steps:","Step , push-OS client initializes itself. Go to step ;","Step , Client requests regarding server resources. Go to step ;","Block  describes steps of VM management control service:","Step , determine if User subscribed VM before. If yes, go to step . Otherwise, go to step ;","Step  is a Subscriber\/VM database. It provides data to step ;","Step , return with error. Inform client to execute the software component of step ;","Block  describes the steps of network resource control service:","Step , permit the client to access. After the client requests resource, go to step ;","Step , resource policy manager provides policies to facilitate the execution of step ;","Step , resource policy base contains the index table of permitted r\/w resource ACL, including authorized URL, authorized resource index (REST index), etc. It uses resource policy manager to perform step ;","Step , determine if the client passes the authentication of resource management control. If yes, go to step . Otherwise, go to step ;","Step , write to log. Go to step ;","Step , manage resources per client request and send response to the client who makes the request regarding server resources. Managing server resources may trigger the CSV bidirectional synchronization mechanism so that data, application and OS on the server may be changed (e.g. automatically or by an administrator) and then synchronized with the client;","Step , network resource base provides resource to step ;","Step , write to log. Go to step ;","Step , return with error, and inform step  of the client which requests the resource.","Client-Side Closed Computing Service",{"@attributes":{"id":"p-0393","num":"0404"},"figref":"FIG. 17"},"Block  of the diagram is a reference monitoring model. This is based on a complete Reference Monitor Model formulated by the following TCB model (called trust computing, or TC, model). Block  is the client-side Trust Computing Base (TCB). TCB includes block  application\/data control link, block  eBag TCB, and block  audit.","The application\/data control link of Block  exercises control via computing resource permission policies, and realizes permission check mechanism to computing requests: only after being permitted by the permission policy can a computing request be handled. The application and data are permitted by local policy manager. This is the fifth security link beyond the following 4 security link. An embodiment is described by .","Block  describes the trust control base of eBag. The control base comprises the hardware of block , the software of block , and the network of block .  is actually an open hardware industrial standard (e.g. TCM or TPM).  software further comprises application of block  and OS of block . Amongst these blocks, 4 security links are formed:","(1) Link : the total-lifecycle link control for OS startup due to hardware bootstrap (see )","(2) Link : the realization of closed OS (see )","(3) Link : closed local computing requirement (see )","(4) Link : hardware TPM\/TCM trust link to assure the security of network access (see )","Further, here is the threat analysis to prevent hacker attacks described by client-side closed computing service:","(1) To the hardware of , if a client connects to any other unauthorized disk, the OS kernel and MBR cannot be trusted by TPM\/TCM, hence cannot operate.","(2) To the OS of , if a client uses any other unauthorized OS, similarly, the OS kernel and MBR cannot be trusted by TPM\/TCM, hence cannot operate.","(3) To the network of , if a user connects to other computer via a network line, the connection fails since there is no SLIRP protocol.","(4) To the whole client trust computing base, if a user intends to use any other unauthorized hardware platform, e.g. uninstall the eBag hard disk and install it to other authorized machine, (4.1) then install other OS: although the installation cannot be stopped, TPM\/TCM prohibits the eBag OS and the other OS to operate again on the eBag platform. (4.2) copy data to an eBag disk: although the copying cannot be stopped, the data copied cannot be analyzed or utilized due to its use of private file system protocol of eBag OS.","Link : The Total-Lifecycle Link Control for OS Startup",{"@attributes":{"id":"p-0407","num":"0418"},"figref":"FIG. 18","b":"1"},"Step , execute the initialization code of the CPU, Chipset, memory, and stack. Build C execution environment. Go to step ;","Step , PEI core code: schedule CRTM code and initialize TPM. Go to step ;","Step , install TMP protocol, recover protocol, & hash protocol. Go to step ;","Step , PEI measures trust of DXE code and save trust measure log. Go to step ;","Step , determine if the DXE trust measure is successful. If yes, go to step . Otherwise, go to step ;","Step , load the core code to execute DXE. Go to step ;","Step , if needed, load DXE core code: internal & external EFI driver, EFI app, or optional ROM for the device. Go to step ;","Step , DXE measures trust of the code loaded by DXE; save trust measure log. Go to step ;","Step , determine if the loaded DXE code is successful in trust measure. If yes, go to step . Otherwise, go to step ;","Step , DXE core code measures trust of BDS; save trust measure log;","Step , determine if the BDS trust measure is successful. If yes, go to step . Otherwise, go to step ;","Step , load & execute BDS. Go to step ;","Step , BDS loads optional ROM of device according to needs. Go to step ;","Step , BDS measures trust of the code loaded by BDS; save trust measure log. Go to step ;","Step , determine if the code loaded by BDS is successful in trust measure. If yes, go to step . Otherwise, go to step ;","Step , load and execute TSL. Go to step ;","Step , TSL loads hypervisor Loader code. Go to step ;","Step , TSL trust measure hypervisor Loader code; save trust   measure log. Go to step ;","Step , determine if the hypervisor loader trust measure is successful. If yes, go to step . Otherwise, go to step ;","Step , load and execute hypervisor. Go to step ;","Step , hypervisor streams VM code. Go to step ;","Step , hypervisor measures trust of VM code; save trust measure log. Go to step ;","Step , determine if the VM trust measure is successful. If yes, go to step . Otherwise, go to step ;","Step , return normally;","Step , return with error.","Link : The Realization of Closed OS",{"@attributes":{"id":"p-0434","num":"0445"},"figref":"FIG. 19","b":"2"},"Step , deploy TCB hardware to realize OS kernel total-lifecycle trust control. Go to step ;","Step , posess trust OS kernel. Go to step ;","Step , use the private kernel file system protocol. Go to step ;","Step , cancel the SLIRP communication protocol stack. Go to step ;","Step , use the network protocol-stack of bi-directional synchronization.","Link : Local Application Closed Requirement",{"@attributes":{"id":"p-0441","num":"0452"},"figref":"FIG. 20","b":"3"},"(1) All user application and data are isolated and packaged into Push-OS,","(2) Application and data may be varied in all links of kernel level or application level, or app-data level, but those links are supervised and audited by hardware-OS.","Further, regarding state migration of application and data, the application persists locally even if the client is disconnected from the network. On the other hand, once online, the synchronization starts. After the application is synchronized online, it can run locally according to local rules.","The Workflow is as Follows:","Step , link  starts checking. Go to step ;","Step , determine if it is an application to run specifically in the closed OS. If yes, go to step . Otherwise, go to step ;","Step , determine if the application is authorized. If yes, go to step . Otherwise, go to step ;","Step , the application is permitted to run. Go to step ;","Step , determine if the application requests to install other application. If yes, go to step . Otherwise, go to step ;","Step , hardware OS is completely closed, permitting no installation and running of any program not assigned. TPM hardware realizes this control (software & TPM upgrade via network);","Step , prohibit the installation and running of this app, & stop it immediately once its residence is detected;","Step , determine if the application asks to upgrade. If yes, go to step . Otherwise, go to step ;","Step , determine if the application forces OS kernel to change changes so that TPM\/TCM's distrust leads to application failure. If yes, go to step . Otherwise, go to step ;","Step , determine if the user continuously self-creates applications. If yes, go to step . Otherwise, go to step ;","Step , determine if the application is of variety & randomness. If yes, go to step . Otherwise, go to step ;","Step , push-OS runs on hardware OS which applies trust control (TCB) to it. Thus,","(1) All user app & data are isolated and packaged inside of Push-OS,","(2) App & data may change at will, including the total-lifecycle link of any core, app-layer data & application, but are monitored & audited by hardware OS;","Step , return normally;","Step , determine if it is the state migration of application and data. If yes, go to step . Otherwise, go to step ;","Step , application and data persist locally even after disconnected from the network. Go to step ;","Step , perform synchronization once online. Go to step ;","Step , the online application after synchronization enters into local client and operates according to local rules;","Step , return with error.","Link : Hardware TPM Trust-Link Assuring the Security of Network Access",{"@attributes":{"id":"p-0467","num":"0478"},"figref":"FIG. 21","b":["4","211","212","213","214"]},"The workflow of client manager  comprises:","Step , PC BIOS initializes itself; hypervisor starts up. Go to step ;","Step , determine if it is a user operation. If yes, go to step . Otherwise, go to step , go on to check if it is a user operation;","Step , perform golden image synchronization with the sync component  of the server. Bi-directional synch PUSH mechanism assures trusted network computing environment. Meanwhile, request the operation to system application. Go to step ;","Step , run system application after authorized by server. Go to step ;","Step , perform local audit. Go to step ;","The workflow of server manager  comprises:","Step , CSV server initializes itself. Go to step ;","Step , TPM\/TCM virtual hardware mapping. Go to step ;","Step , determine if it is an administrator operation. If yes, go to step . Otherwise, go to step , continue to check if it is an administrator operation;","Step , perform golden image synchronization with the sync component  of the client. Bi-directional synch PUSH mechanism assures trusted network computing environment.","Hypervisor for Hotelling-OS",{"@attributes":{"id":"p-0480","num":"0491"},"figref":"FIG. 22"},"The Workflow Comprises:","Step , the hotelling-OS hypervisor starts up. Go to step ;","Step , determine if the operation is streaming (includes upgrading) OS. If yes, go to step . Otherwise, go to step ;","Step , target OS=default OS. Go to step ;","Step , target OS is streamed to cache. Go to step ;","Step , determine if the operation is switching OS. If yes, go to step . Otherwise, go to step ;","Step , set the target OS to switch to. Go to step ;","Step , determine if the target OS is in cache already. If yes, go to step . Otherwise, go to step ;","Step , load target OS from cache. Go to step ;","Step , target OS is streamed to cache. Go to step ;","Step , determine if the operation is reverting OS. If yes, go to step . Otherwise, go to step ;","Step , load target OS from cache. Go to step ;","Step , enter OS startup.","Synchronization Between Local Disk and Distributed File System",{"@attributes":{"id":"p-0495","num":"0506"},"figref":["FIG. 23","FIG. 9"],"b":"0923","ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["(a) The non-directional synchronization, where client and server are in the same host (e.g. VDI). The data in virtual disk is synchronized to a mounted dFS via virtual disk sync optimizer;","(b) The uni-directional synchronization, where only the client change is synchronized to the server. The data is first written to the proxy then to the dFS via virtual disk sync optimizer; and","(c) The bi-directional synchronization, where via a mediator client and server, changes are synchronized to each other's virtual disk via virtual disk sync optimizer and difference mediator. In addition, user workspace data is synchronized too."]}}}},"As described, the disk operation is done via a loosely-coupled dFS. The patent U.S. Pat. No. 7,447,854B1 to Cannon, et al. uses virtual disk with a tightly-coupled VMWare file system under VMM environment for block-level synchronization. While both methods use synchronization algorithm of open knowledge such as open-source rsync or unisom, the loosely-coupled dFS disclosed in our invention has the advantage of easy-adaptness to NFS, CEPH, and\/or other professional storage file systems. The synchronization between local and dFS also suits for three different cases: no directional, uni-directional and bi-directional synchronization while Cannon does not make such distinctions. Besides, because of the tightly-coupled nature, Cannon does not recover local data in case of network disconnection. Local data can be recovered with mapped metadata and algorithm shown in steps  to  of .","The Workflow Comprises:","Step , select a distributed file system (dFS) amongst NFS, CEPH, and any other professional storage file system. Initialize it. Go to step ;","Step , mount the dFS. Go to step ;","Step , synchronize local disk & dFS. Go to step ;","Step , determine if non-directional synch & host only. If yes, go to step . Otherwise, go to step ;","Step , host VMM producer gets changed block from VM image. Go to step ;","Step , run virtual disk sync optimizer. Go to step ;","Step , IO write buffer to dFS. Go to step ;","Step , determine if uni-directional synch from client to server. If yes, go to step . Otherwise, go to step ;","Step , client VMM producer gets changed block from VM image. Go to step ;","Step , run virtual disk sync optimizer. Go to step ;","Step , perform an IO-write of buffer data to a server proxy. Go to step ;","Step , write the data to server buffer. Go to step ;","Step , write the server buffer data to dFS. Go to step ;","Step , bi-directional synch between client & server, do VM Image data change operation. Go to step ;","Step , both client & server VMM producers get changed block from respective VM image. Go to step ;","Step , run virtual disk sync optimizer. Go to step ;","Step , synch via difference mediator. Go to step ;","Step , perform user workspace data operation for both server and client. Go to step ;","Step , perform user workspace data synchronization. Go to step ;","Step , determine if just changed from offline to online. If yes, go to step . Otherwise, go to step ;","Step , determine if completed all online\/offline operations. If yes, go to step . Otherwise, go to step ;","Step , unmount the dFS. Go to step ;","Step , come to the end.","Virtual Disk (VD) Synchronization Optimizer",{"@attributes":{"id":"p-0522","num":"0536"},"figref":["FIG. 24","FIG. 23"],"b":["2306","2310","2316"],"sup":["st","nd"],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["(a) Normal operation during online and offline;\n        \n        ","(b) The recovery operation caused by an erroneous line disconnection between client and server. The recovery utilizes recorded bitmap metadata with an algorithm similar to offline VD-synch algorithm, which does not allow migration error and is not triggered but following a disconnection-detection procedure."]}}}},"The Workflow Comprises:","Step , perform hypervisor initialization and vd-sync optimizer Setup. Go to step ;","Step , perform optimizer setup: build a separate thread to synch data in real-time to minimize the impact to hypervisor. Go to step ;","Step , perform optimizer setup: build dynamic virtual disk mapping tables. The 1-level mapping table is based on cluster (64 kb or  sectors) with no more than 128 clusters. The 2-level mapping table is based on sector where a bit represents a sector and 128 bits represent a cluster. Go to step ;","Step , run optimizer. Go to step ;","Step , generate metadata\/payload. Go to step ;","Step , use buffering algorithm: each write operation writes sector # & data to a linked list. Go to step ;","Step , the sync thread synchronizes the latest-written data to the server. Go to step ;","Step , determine if disk & dFS disconnected. If yes, go to step . Otherwise, go to step ;","Step , determine if disconnection caused by user. If yes, go to step . Otherwise, go to step ;","Step , change from online to offline. Go to step ;","Step , record VD sector # if data is changed: calculate the cluster number first. Go to step ;","Step , determine if the 1-level mapping table is hit. If yes, go to step . Otherwise, go to step ;","Step , set the corresponding bit to 1 in its 2-level mapping table. Go to step ;","Step , add cluster # to the 1st-level mapping table and build the 2-level table corresponding to the cluster. Go to step ;","Step , User is online; the disconnection is caused by error; hence start handling error. Go to step ;","Step , determine if user reconnected within the sync period. If yes, go to step . Otherwise, go to step ;","Step , ignore the surge of dis-connection and re-connection. Go to step ;","Step , record the bitmap metadata with an algorithm similar to offline VD-synch algorithm (steps  to ), which does not allow migration error and is not triggered but following the disconnection-detection procedure as in steps , ,  and . Go to step ;","Step , recover buffered data (steps -) according to the bitmap table when re-connected. Go to step ;","Step , return normally.","In an actual deployment environment, the techniques of synchronization, streaming, closed computing service and other methods of the invention are completely independent of client hardware model, VMM type, and guest OS type. Therefore, the disclosed method can be adjusted to fit any client such as desktop, laptop, netbook, removable storage, and other mobile devices, including smart phone; the VMM may be any commercial hypervisor, including TRANSOFT TVM, CITRIX XEN, VMWARE WORKSTATION, etc; the guest OS may be Windows, Linux, Android, and other cellphone VM. Further, the applied business lines are not limited to those described in this patent such as school, office, cyber caf\u00e9, and training classroom. Lastly, the disclosed CSV method may also cover X86 hardware virtualization technology beyond Intel and AMD, as well as any non-X86 hardware architecture.","From the above workflow descriptions, we conclude the following: the method of CSV on one hand provides for enterprises the technology of CSV, which is based on bi-directional synchronization and closed computing to build CSV architecture, such that IT administrators of different departments may manage respective layer of images at the server: user application data, user system data, cache, individual application, organizational application, VM, and VMM. On the other hand, due to the synchronized nature and secured nature of the system, a user during offline is able to access his personal network (e.g. home LAN), or take advantage of hotelling hypervisor to launch VM, such that the client-side hardware may be used by multiple persons at different time frames.","In summary, the invention combines client-side virtualization functions and server-side counterpart functions to do synchronization and closed computing secured service for various lines of businesses. The CSV architecture of this invention also provides a method based on client\/server architecture, such that an online user gets synchronized data, application and OS from the server. Further, the user OS is strictly protected from hacker attacks. The system, as an extension of VDI technology, may be applied to several business lines such as: the eSchoolbag of education community, the eBriefcase of enterprises and government agencies, the invertable desktop of cyber caf\u00e9, and the student workstation to switch to different OSs of a training center.","The above embodiments enable those skilled in the art to realize or utilize the invention. Those skilled in the art may make various modifications to the invention as long as the modification is within the bounds of the inventive ideas. Therefore the protection range of the invention is not limited to the above embodiments. Rather, it should have the largest protection range described by the technical characteristics of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The most objective way to explain the embodiments of the invention is to use the following diagrams, either in the format of block diagram or flow chart. For those skilled in the art, it is obvious from the detailed description of the preferred embodiments, referenced by the following diagrams, to understand the purposes, characteristics and advantages of the invention.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 1"],"b":["0111","0121"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 2"],"b":"0201"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 3"],"b":"0309"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 5A","FIG. 2"],"b":"0211"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 5B","FIG. 2"],"b":"0211"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 6","FIG. 2"],"b":"0212"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 7","FIG. 2"],"b":"0213"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 8","FIG. 7"],"b":["0705","0706","0711","0717"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 9","FIG. 7"],"b":"0722"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 10","FIG. 9"],"b":"0922"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 11","FIG. 10"],"b":"1008"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 12","FIG. 2"],"b":"0214"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 14","FIG. 13"],"b":"1321"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 15","FIG. 13"],"b":"1321"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 16","FIG. 14","FIG. 14","FIG. 15"],"b":["1621","1414","1622","1412","1505","1514"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 17","FIG. 14","FIG. 15"],"b":["1416","1504","1509"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 18","FIG. 17"],"b":["1","1"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 19","FIG. 17"],"b":["2","2"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 20","FIG. 17"],"b":["3","3"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 21","FIG. 17"],"b":["4","4"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 23","FIG. 9"],"b":"0923"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 24","FIG. 23"],"b":["2306","2310","2316"]}]},"DETDESC":[{},{}]}
