---
title: Apparatus, method and system that stores bios in non-volatile random access memory
abstract: A non-volatile random access memory (NVRAM) is used in a computer system to perform multiple roles in the platform storage hierarchy. The NVRAM is byte-rewritable and byte-erasable by the processor. The NVRAM is coupled to the processor to be directly accessed by the processor without going through an I/O subsystem. The NVRAM stores a Basic Input and Output System (BIOS). During a Pre-Extensible Firmware Interface (PEI) phase of the boot process, the cache within the processor can be used in a write-back mode for execution of the BIOS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430372&OS=09430372&RS=09430372
owner: Intel Corporation
number: 09430372
owner_city: Santa Clara
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/054417, filed Sept. 30, 2011, entitled APPARATUS, METHOD AND SYSTEM THAT STORES BIOS IN NON-VOLATILE RANDOM ACCESS MEMORY.","1. Field of the Invention","Embodiments of the invention relate to a computer system; and more specifically, to the use of byte-addressable non-volatile random access memory for BIOS storage.","2. Description of the Related Art","A. Current Memory and Storage Configurations","One of the limiting factors for computer innovation today is memory and storage technology. In conventional computer systems, system memory is typically implemented by dynamic random access memory (DRAM). DRAM-based memory consumes power even when no memory reads or writes occur because it must constantly recharge internal capacitors. DRAM-based memory is volatile, which means data stored in DRAM memory is lost once the power is removed.","With respect to mass storage, conventional mass storage devices typically include non-volatile magnetic media (e.g., hard disk drives) and\/or flash memory (also referred to as \u201cflash\u201d) (e.g., solid state drives (SSDs)). These storage devices are block-addressable, which means that a single byte of storage cannot be accessed individually. Rather, bytes are read and written as multi-byte (e.g., 16 bytes) blocks of data. Generally, these storage devices are considered I\/O devices because they are accessed by the processor through various I\/O adapters that implement various I\/O protocols. These I\/O adapters and I\/O protocols consume a significant amount of power and can have a significant impact on the die area and the form factor of the platform. Additionally, for portable or mobile devices (e.g., tablet computers, cameras and mobile phones) that have limited battery life, their storage devices (e.g., Embedded Multimedia Card (eMMC) and Secure Digital (SD) card) are typically coupled to the processor via low-power interconnects and I\/O controllers in order to meet active and idle power budgets. These interconnects and I\/O controllers cannot consistently deliver the bandwidth required for a satisfying user experience.","With respect to firmware memory, a conventional computer system typically uses flash memory devices to store persistent system information that is read often but seldom (or never) written to. For example, Basic Input and Output System (BIOS) images are typically stored in a flash memory device. Flash memory devices that are currently available in the market generally have limited speed (e.g., 50 MHz). This speed is further reduced by the overhead for read protocols (e.g., 2.5 MHz). In order to speed up the BIOS execution speed, conventional processors generally cache a portion of BIOS code during the Pre-Extensible Firmware Interface (PEI) phase of the boot process. However, the processor cache has a very limited amount of capacity. Thus, the amount of BIOS code that can be used for the initial system configuration is also very limited. The size limitation of the processor cache places a significant restriction on the size of the BIOS code used in the PEI phase (also known as the \u201cPEI BIOS code\u201d). Therefore, the PEI BIOS code cannot be easily extended to support a large mix of memory configurations and multiple processor families. With the rising demand for initialization of processors, process interconnects, memory and storage implemented with various technologies and multiple processor families, the need for more versatile PEI BIOS code also grows. One solution is to build a larger processor cache for caching the code. However, the size of the processor cache cannot be easily increased without a negative impact on the rest of the system.","B. Phase-Change Memory (PCM) and Related Technologies","Phase-change memory (PCM), also sometimes referred to as PCME, PRAM, PCRAM, Ovonic Unified Memory, Chalcogenide RAM and C-RAM, is a type of non-volatile computer memory which exploits the unique behavior of chalcogenide glass. As a result of heat produced by the passage of an electric current, this material can be switched between two states: crystalline and amorphous. Recent versions of PCM can achieve two additional distinct states, effectively doubling memory storage capacity. PCM is one of a number of new memory technologies competing in the non-volatile role with flash memory. Flash memory has a number of practical problems which these replacements hope to address.","For example, PCM can offer much higher performance in applications where writing quickly is important, in part because the memory element can be switched more quickly, and also because individual bits may be changed to either 1 or 0 without the need to first erase an entire block of cells (as is the case with flash). The high performance of PCM makes it potentially very beneficial in non-volatile memory roles that are currently performance-limited by memory access timing.","Additionally, while PCM devices degrade with use (like flash), they degrade much more slowly. A PCM device may survive approximately 100 million write cycles. PCM lifetime is limited by mechanisms such as degradation due to GeSbTe (GST) thermal expansion during programming, metal (and other material) migration, and other mechanisms.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to obscure the understanding of this description.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","In the following description and claims, the terms \u201ccoupled\u201d and \u201cconnected,\u201d along with their derivatives, may be used. It should be understood that these terms are not intended as synonyms for each other. \u201cCoupled\u201d is used to indicate that two or more elements, which may or may not be in direct physical or electrical contact with each other, co-operate or interact with each other. \u201cConnected\u201d is used to indicate the establishment of communication between two or more elements that are coupled with each other.","Bracketed text and blocks with dashed borders (e.g., large dashes, small dashes, dot-dash, dots) are sometimes used herein to illustrate optional operations\/components that add additional features to embodiments of the invention. However, such notation should not be taken to mean that these are the only options or optional operations\/components, and\/or that blocks with solid borders are not optional in certain embodiments of the invention.","Embodiments of the invention described below define platform configurations that enable hierarchical memory subsystem organizations for the use of NVRAM. The use of NVRAM in the memory hierarchy also enables new usages such as expanded boot space and mass storage implementations, as described in detail below.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","130","100","100","130","130","130"]},"In one embodiment, NVRAM  can be configured to implement the roles in a typical platform storage hierarchy as one or more of the following: cache, system memory (also known as main memory, primary memory, executable memory), storage (also known as secondary storage and mass storage), and firmware memory (such as boot memory (also known as BIOS flash), Trusted Platform Module (TPM) memory, and the like). Platform storage hierarchies with different roles are also contemplated and the application of NVRAM  is not limited to the roles described above.","NVRAM  is distinguishable from other instruction and data memory\/storage technologies in terms of its characteristics and\/or its application in the platform storage hierarchy. For example, NVRAM  is different from:\n\n","NVRAM (e.g., NVRAM ) in one embodiment of the invention has the following characteristics:\n\n","As mentioned above, in contrast to flash memory, which must be rewritten and erased a complete \u201cblock\u201d at a time, the level of granularity at which NVRAM is accessed in any given implementation may depend on the particular memory controller and the particular memory bus or other type of bus to which the NVRAM is coupled. For example, in some implementations where NVRAM  is used as system memory, NVRAM may be accessed at the granularity of a cache line (e.g., a 64-byte or 128-byte cache line), notwithstanding an inherent ability to be accessed at the granularity of a byte, because cache line is the level at which the memory subsystem accesses memory. Thus, when NVRAM is deployed within a memory subsystem, it may be accessed at the same level of granularity as the DRAM (e.g., the \u201cnear memory\u201d) used in the same memory subsystem. Even so, the level of granularity of access to the NVRAM by the memory controller and memory bus or other type of bus is smaller than that of the block size used by flash and the access size of the I\/O subsystem's controller and bus.","NVRAM  may be used as instruction and data storage that has sufficiently short access time requirements to cause little impact on the processors. Here, program instructions and data may be loaded into NVRAM  from deeper, flash\/magnetic\/optical mass storage  prior to being executed by the processors. Moreover, as described in detail below, NVRAM  may be placed on a memory bus and may communicate directly with a memory controller that, in turn, communicates directly with the processors.","The presence of the new memory technology for NVRAM  provides for a wealth of new possibilities. Although discussed at much greater length further below, some of these possibilities are quickly highlighted immediately below.","According to one possible implementation, NVRAM  acts as a total replacement or supplement for traditional DRAM technology in system memory. In one embodiment, NVRAM  represents the introduction of a second-level system memory (e.g., system memory is as a combination of DRAM  and some or all of NVRAM ). As such, the system memory may be viewed as having a near memory part NM A and a far memory part FM . It is appreciated that in different embodiments, a near memory can serve as a memory-side cache (e.g., near memory cache B), a scratch pad, and other roles that are different from the system memory. In the embodiments described herein, the NM A portion of NVRAM  serves only as system memory to simplify the discussion.","According to some embodiments, NVRAM  provides NVRAM storage, which acts as a total replacement or supplement for traditional mass storage, e.g., flash\/magnetic\/optical mass storage . The term \u201ctraditional mass storage\u201d in the application refers to mass storage that is based on optical, magnetic and\/or flash technology, such as disk and flash memory. For simplicity of the discussion, flash\/magnetic\/optical mass storage  is also referred to as traditional mass storage . Thus, the non-volatile mass storage for computing system  may be implemented using NVRAM, flash memory, magnetic storage, or any combination thereof. In an embodiment where NVRAM storage  acts as a total replacement for traditional mass storage , it is not necessary to use storage drivers for block-addressable storage access. The removal of storage driver overhead from storage access can increase access speed and save power. In alternative embodiments where it is desired that NVRAM storage  appears to the OS and\/or applications as block-accessible and indistinguishable from traditional mass storage , emulated storage drivers can be used to expose block-accessible interfaces (e.g., Universal Serial Bus (USB) Bulk-Only Transfer (BOT) 1.0, Serial Advanced Technology Attachment (SATA) 3.0, and the like) to the software for accessing NVRAM storage . That is, the byte addressability of NVRAM  can be used by the storage driver to move blocks of NVRAM storage  and emulate block accessible mass storage without incurring the cost of I\/O interfaces in these alternative embodiments.","According to some embodiments, NVRAM  provides BIOS NVRAM  and TPM NVRAM , which act as a total replacement or supplement for firmware memory such as BIOS flash  and TPM flash . Firmware memory is commonly implemented with flash technology and commonly stores the initial instructions (e.g., BIOS) executed by a processor to initialize key system components during a boot process. Firmware memory can also store system persistent states used by a TPM  to protect sensitive system information (e.g., encryption keys). In one embodiment, the use of NVRAM  for firmware memory removes the need for third party flash parts to store code and data that are critical to the system operations.","The choice of memory and storage devices may depend on the type of platform on which the devices are used. For example, in a personal computer, tablet computer, notebook computer, mobile device (e.g., smartphone or PDA), the non-volatile mass storage may be implemented using NVRAM storage  alone, or using NVRAM storage  in combination with flash\/magnetic storage. In other implementations (e.g., large-scale servers), the non-volatile mass storage may be implemented using magnetic storage (e.g., hard drives) or any combination of magnetic storage, flash, and NVRAM storage . In such a case, computer system hardware and\/or software responsible for storage may implement various intelligent persistent storage allocation techniques to allocate blocks of persistent program code and data between the FM \/NVRAM storage  and traditional mass storage  in an efficient or otherwise useful manner. In some embodiments, NVRAM  may become the sole memory\/storage device off chip (i.e., off the processor chip). In some embodiments, instead of the off-chip DRAM , DRAM may be used to provide an on-chip cache (e.g., near memory cache B). These embodiments can be specifically relevant to very small platforms (e.g., smartphone or PDA), where multiple memory classes\/technologies may be cost prohibitive and more transistors (including storage) can be placed on chip.","The NVRAM  may incorporate \u201cwear leveling\u201d algorithms to account for the fact that the storage cells at the far memory level begin to wear out after too many write accesses. Since high cycle count blocks are most likely to wear out in this manner, wear leveling spreads writes across the far memory cells by swapping addresses of high cycle count blocks with low cycle count blocks. Note that most address swapping is typically transparent to the end user because it is handled by hardware, software (e.g., a low level driver or operating system), or a combination of the.","In one embodiment, NVRAM  can be implemented with a non-volatile random access memory (NVRAM) such as PCM or, more specifically, PCMS (also known as (PRAM or PCRAM), Ovonic Unified Memory (OUM), (CRAM). Other possible technology choices for far memory include, but are not limited to byte-addressable persistent memory (BPRAM), storage class memory (SCM), universal memory, Ge2Sb2Te5, Programmable metallization cell (PMC), Resistive memory (RRAM), RESET (amorphous) cell, SET (crystalline) cell, PCME, Ovshinsky, ferroelectric memory (also known as polymer memory and poly(N-vinylcarbazole)), ferromagnetic memory (also known as Spintronics, SPRAM (spin-transfer torque RAM), STRAM (spin tunneling RAM), Magnetoresistive, Magnetic memory, and Magnetic random access memory (MRAM)), and Semiconductor-oxide-nitride-oxide-semiconductor (SONOS, also know dielectric memory).","For convenience of explanation, most of the remainder of the application will sometimes refer to \u201cPCM\u201d or \u201cPCMS\u201d as the technology selection for NVRAM . As such, the terms NVRAM, PCM and PCMS may be used interchangeably in the following discussion. However it should be realized, as discussed above, that different technologies may also be utilized for NVRAM .","Continuing then with a discussion of the system of , in some embodiments, the architecture of computer system  may include multiple processors, although a single processor  is illustrated in  for simplicity. Processor  may be any type of data processor including a general purpose or special purpose central processing unit (CPU), an application-specific integrated circuit (ASIC) or a digital signal processor (DSP). For example, processor  may be a general-purpose processor, such as a Core\u2122 i3, i5, i7, 2 Duo and Quad, Xeon\u2122, or Itanium\u2122 processor, all of which are available from Intel Corporation, of Santa Clara, Calif. Alternatively, processor  may be from another company, such as ARM Holdings, Ltd, of Sunnyvale, Calif., MIPS Technologies of Sunnyvale, Calif., etc. Processor  may be a special-purpose processor, such as, for example, a network or communication processor, compression engine, graphics processor, co-processor, embedded processor, or the like. Processor  may be implemented on one or more chips included within one or more packages. Processor  may be a part of and\/or may be implemented on one or more substrates using any of a number of process technologies, such as, for example, BiCMOS, CMOS, or NMOS.","In one embodiment, the processor  includes an integrated graphics unit  which includes logic for executing graphics commands such as 3D or 2D graphics commands. While the embodiments of the invention are not limited to any particular integrated graphics unit , in one embodiment, the graphics unit  is capable of executing industry standard graphics commands such as those specified by the Open GL and\/or Direct X application programming interfaces (APIs) (e.g., OpenGL 4.1 and Direct X 11).","The processor  may also include one or more cores , although a single core  is illustrated in , again, for the sake of clarity. In many embodiments, core  includes internal functional blocks such as one or more execution units, retirement units, a set of general purpose and specific registers, etc. If core  is multi-threaded or hyper-threaded, then each hardware thread may be considered as a \u201clogical\u201d core as well. The cores  may be homogenous or heterogeneous in terms of architecture and\/or instruction set. For example, some of the cores may be in order while others are out-of-order. As another example, two or more of the cores may be capable of executing the same instruction set, while others may be capable of executing only a subset of that instruction set or a different instruction set.","The processor  may also include one or more caches, such as cache  which may be implemented as a SRAM and\/or a DRAM. In many embodiments that are not shown, additional caches other than cache  are implemented so that multiple levels of cache exist between the execution units in the core(s)  and memory devices A and . For example, the set of shared cache units may include an upper-level cache, such as a level 1 (L1) cache, mid-level caches, such as level 2 (L2), level 3 (L3), level 4 (L4), or other levels of cache, a last level cache (LLC), and\/or different combinations thereof. In different embodiments, cache  may be apportioned in different ways and may be one of many different sizes in different embodiments. For example, cache  may be an 8 megabyte (MB) cache, a 16 MB cache, etc. Additionally, in different embodiments the cache may be a direct mapped cache, a fully associative cache, a multi-way set-associative cache, or a cache with another type of mapping. In other embodiments that include multiple cores, cache  may include one large portion shared among all cores or may be divided into several separately functional slices (e.g., one slice for each core). Cache  may also include one portion shared among all cores and several other portions that are separate functional slices per core. In one embodiment, cache  may include a DRAM near memory cache B.","The processor  may also include a home agent  which includes those components coordinating and operating core(s) . The home agent unit  may include, for example, a power control unit (PCU) and a display unit. The PCU may be or include logic and components needed for regulating the power state of the core(s)  and the integrated graphics unit . The display unit is for driving one or more externally connected displays.","In some embodiments, processor  includes an integrated memory controller (IMC)  to provide an interface for communicating with a memory and storage subsystem . More specifically, in one embodiment, IMC  contains logic necessary for reading from, writing to and refreshing DRAM device . IMC  can be on the same chip as processor , or on a separate chip and\/or package connected to processor .","In some embodiments, processor  includes an I\/O subsystem  coupled to IMC . I\/O subsystem  enables communication between processor  and the following serial or parallel I\/O devices: one or more networks  (such as a Local Area Network, Wide Area Network or the Internet), storage I\/O device (such as traditional mass storage , BIOS flash , TPM flash ) and one or more non-storage I\/O devices  (such as display, keyboard, speaker, and the like). I\/O subsystem  may include a platform controller hub (PCH) (not shown) that further includes several I\/O adapters  and other I\/O circuitry to provide access to the storage and non-storage I\/O devices and networks. To accomplish this, I\/O subsystem  may have at least one integrated I\/O adapter  for each I\/O protocol utilized. I\/O subsystem  can be on the same chip as processor , or on a separate chip and\/or package connected to processor .","I\/O adapters  translate a host communication protocol utilized within the processor  to a protocol compatible with particular I\/O devices. For traditional mass storage , some of the protocols that I\/O adapters  may translate include Peripheral Component Interconnect (PCI)-Express 3.0, Universal Serial Bus (USB) 3.0, Serial Advanced Technology Attachment (SATA) 3.0, Small Computer System Interface (SCSI), Redundant Array of Inexpensive Disks (RAID) and 1394 \u201cFirewire,\u201d among others. For BIOS flash , some of the protocols that I\/O adapters  may translate include Serial Peripheral Interface (SPI), Microwire, among others. Additionally, there may be one or more wireless protocol I\/O adapters. Examples of wireless protocols are Bluetooth 4.0, IEEE 802.11-based wireless protocols, and cellular protocols, among others.","In some embodiments, I\/O subsystem  also includes a Management Engine (ME) , which is a microprocessor that allows a system administrator to monitor, maintain, update, upgrade, and repair computer system . In one embodiment, a system administrator can remotely configure computer system  through ME  via networks . In one embodiment, the configuration can be stored in a decode table  within processor . Decode table  can be read by IMC  and I\/O subsystem , which then decide where a data access request should be directed.","In some embodiments, processor  includes a Trusted Platform Module (TPM)  to control access to system persistent states, such as secure data, encryption keys, platform configuration information and the like. In one embodiment, these system persistent states are stored in a TPM NVRAM , which can be implemented with PCM-based memory such as PCMS. In the embodiment shown in , TPM NVRAM  is part of NVRAM .","In one embodiment, TPM  is a secure micro-controller with cryptographic functionalities. TPM  has a number of trust-related capabilities; e.g., a \u201cseal\u201d capability for ensuring that data protected by a TPM is only available for the same TPM. TPM  can protect data and keys (e.g., secrets) using its encryption capabilities. In one embodiment, TPM  has a unique and secret RSA key (which is generated based on the RSA algorithm developed by Ron Rivest, Adi Shamir and Leonard Adleman), which allows it to authenticate hardware devices and platforms. For example, TPM  can verify that a system seeking access to data stored in computer system  is the expected system. TPM  is also capable of reporting the integrity of the platform (e.g., computer system ). This allows an external resource (e.g., a server on a network) to determine the trustworthiness of the platform but does not prevent access to the platform by the user. In one embodiment, TPM  includes an NVRAM interface to communicate with NVRAM .","It should be understood that a computer system can utilize NVRAM  for system memory, mass storage, firmware memory and\/or other memory and storage purposes even though its processor does not have all of the above-described components of processor , or has more components than processor .","In one embodiment, computer system  includes a NVRAM controller  to control data access to NVRAM . NVRAM controller  is coupled to IMC  and I\/O subsystem . NVRAM controller  can read the configuration data from decode table , or alternatively, can rely on the decoding results passed from IMC  and I\/O subsystem . In an embodiment where NVRAM  is implemented with PCMS, NVRAM controller  is a PCMS controller that performs byte-level access with protocols consistent with the PCMS technology. Although IMC  and NVRAM controller  can be two discrete controllers (as shown in  with a dotted line separating the two controllers), in some embodiments these two controllers can be implemented as one combined controller to control the access to memory and storage. In alternative embodiments, NVRAM controller  can be located within NVRAM  to control the access to the NVRAM memory cells. In these alternative embodiments, an NVRAM interface (not shown) can be provided on the processor chip to interface with NVRAM .","In , NVRAM controller  is shown connected to FM , NVRAM mass storage  and BIOS NVRAM  using three separate lines. This does not necessarily mean, however, that there are three separate physical buses or communication channels connecting NVRAM controller  to these portions of the NVRAM . Rather, in some embodiments, a common memory bus or other type of bus is used to communicatively couple the NVRAM controller  to the FM , NVRAM mass storage , and BIOS NVRAM . For example, in one embodiment, the three lines in  represent a bus, such as a memory bus (e.g., a DDR3, DDR4, etc.) over which NVRAM controller  implements a transactional protocol to communicate with NVRAM . NVRAM controller  may also communicate with NVRAM  over a bus supporting a native transactional protocol such as a PCI express (PCI-E) bus, desktop management interface (DMI) bus, or any other type of bus utilizing a transactional protocol.",{"@attributes":{"id":"p-0054","num":"0067"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","130","152","162","172","200","210","280","280","140","130","130","142","150","160","170","210","110","238","138","130","152","162","172"]},"Configurable Partitioning of the NVRAM","As described before, NVRAM  can be partitioned into multiple partitions that have different roles in a platform storage hierarchy. As discussed above, the term \u201cplatform storage hierarchy\u201d refers to cache, system memory, mass storage, and firmware memory that serves different purposes (e.g., BIOS storage and TPM storage). In one embodiment, the means by which access is steered to different partitions of NVRAM  is via a decode logic. For example, at either manufacturing time or in the field, computer system  can program decode table  to mark different regions of NVRAM  as system memory, mass storage, firmware, among others.","In the embodiment of , NVRAM  is partitioned into FM , NVRAM storage , BIOS NVRAM  and TPM NVRAM . The address range of each partition can be defined in decode table . In one embodiment, when IMC  receives an access request, the target address of the request is decoded to reveal whether the request is directed toward memory or I\/O. If it is a memory request, IMC  further determines from the target address whether the request is directed to NM A or FM . For FM  access, IMC  forwards the request to NVRAM controller . IMC  passes the request to the I\/O subsystem  if this request is directed to I\/O (e.g., non-storage and storage I\/O devices). I\/O subsystem  further decodes the address to determine whether the address points to NVRAM storage , BIOS NVRAM , or other non-storage and storage I\/O devices. If this address points to NVRAM storage  or BIOS NVRAM , I\/O subsystem  forwards the request to NVRAM controller . If this address points to TPM NVRAM , I\/O subsystem  passes the request to TPM  to perform secured access. In one embodiment, each request forwarded to NVRAM controller  is accompanied with an attribute (also known as a \u201ctransaction type\u201d) to indicate the type of access. In one embodiment, NVRAM controller  may emulate the access protocol for the requested access type, such that the rest of the platform remains unaware of the multiple roles performed by NVRAM  in the platform storage hierarchy. In alternative embodiments, NVRAM controller  may perform memory access to NVRAM  regardless of which transaction type it is. It is understood that the decode path can be different from what is described above. For example, IMC  may decode the target address of an access request and determine whether it is directed to NVRAM . If it is directed to NVRAM , IMC  generates an attribute according to decode table . Based on the attribute, IMC  then forwards the request to appropriate downstream logic (e.g., NVRAM controller  and I\/O subsystem ) to perform the requested data access. In yet another embodiment, NVRAM controller  may decode the target address if the corresponding attribute is not passed on from the upstream logic (e.g., IMC  and I\/O subsystem ). Other decode paths may be implemented.","Enabling Compression of PEI Bios Code","As mentioned above, processors provide a small amount of cache for executing pre-EFI (Pre-Extensible Firmware Interface, also known as PEI) BIOS code during boot time. The PEI BIOS code is typically written in a high-level language (e.g., the C programming language) that uses stack and\/or heap during execution. The PEI BIOS code is responsible for the initial system configuration, such as the initialization of processor, chipset, processor and chipset interconnects (such as HyperTransport 3.0, Quick-Path Interconnect (QPI) 1.1 as well as memory and storage subsystems. The PEI BIOS code is also responsible for interleaving memory and handing off to the higher-level BIOS modules called Driver Execution Environment (DXE), as defined in the Unified EFI (UEFI) standard.","In some systems, the processor cache is set to No Eviction Mode (NEM) during the PEI phase of the boot process. The NEM is also known as the Cache as RAM (CAR) mode, which means that the cache appears to the executing code stream as a memory store such that all data memory accesses are a hit and cause no cache evictions. The \u201cno evictions\u201d prevents a write-back to system memory before the memory controller and system interconnects are initialized. In some scenarios, a write-back can cause a fault condition such as machine-check abort.","During PEI phase of the boot process (i.e., when the processor executes the PEI BIOS code), a major portion of the processor cache is partitioned into a first partition, which is mapped to the BIOS flash address range in which the PEI BIOS code is stored, and a second partition used for the stack and heap. The combination of the first and second partitions of the processor cache is also referred to as \u201cNEM cache,\u201d because its content cannot be evicted during execution of the PEI BIOS code. Only a very small portion of the processor cache (e.g., a few kilobytes) can be used for \u201cregular\u201d caching purposes; for example, for caching the data that is generated during execution and is likely to be reused in the near future.","Due to the slow speed of the I\/O interface (e.g., Serial Peripheral Interface (SPI)) between the processor and the BIOS flash device, the PEI BIOS code is copied into the first partition of the NEM cache. In conventional systems, the address range mapping between the first partition of the NEM cache and the PEI BIOS code area in the BIOS flash is 1:1 to make sure any fetch of the PEI BIOS code can be cached to speed up the PEI execution. Therefore, in such systems, the PEI BIOS code in the BIOS flash cannot be compressed. In conventional systems, the NEM cache is split between the two partitions with a typical size ratio of 2:1. In a system where the NEM cache is 1.5 MB, this split means that 1 MB is used for the PEI BIOS code and 0.5 MB is used for stack and heap. As mentioned before, this size limitation of the NEM cache places a significant restriction on the functionality and execution of the PEI BIOS code.",{"@attributes":{"id":"p-0061","num":"0074"},"figref":"FIG. 3","b":["300","300","310","380","510","520","310","520"]},"In one embodiment, computer system  stores a compressed BIOS image  in flash device (\u201cBIOS flash\u201d) . BIOS flash  is coupled to processor  via I\/O subsystem . The use of BIOS flash  allows processor , upon reset, to find the BIOS in the same location as in a legacy system; that is, in a flash device that is accessible via I\/O subsystem . Compressed BIOS image  stores program code, parameters and other resources that are used for purposes of establishing the BIOS for computer system  during boot time. The uncompressed BIOS image (after compressed BIOS image  is uncompressed) contains various BIOS modules. Each BIOS module, in turn, contains program instructions, or \u201ccode,\u201d that can be executed by processor  of computer system . In one embodiment, one or more of the BIOS modules contains PEI BIOS code, which, when executed, allows processor  to detect and initialize various system resources (e.g., memory and storage subsystem  and non-storage I\/O devices ) during an initial boot phase (\u201cPEI phase\u201d) of the computer system. The PEI BIOS code includes a minimum amount of code needed to discover the minimum amount of memory needed to establish the initial system resources.","In one embodiment, computer system  further includes BIOS NVRAM  coupled to processor  via a high-speed link that follows the same protocol as the inter-processor protocol (e.g., HyperTransport 3.0, QPI, and the like). Due to its larger capacity and lower latency on reads (compared to BIOS flash ), BIOS NVRAM  can be used to store the uncompressed PEI BIOS code (i.e., BIOS image ), provide the space for stack and heap and store debugging or error or progress status messages generated during the code execution. As a result, cache  can be freed up and used for \u201cregular\u201d caching purposes; for example, for caching the data that is generated during execution and is likely to be reused in the near future. Cache  can also be used for caching some of the PEI BIOS code to speed up code execution. Additionally, the use of BIOS NVRAM  allows compression of the PEI BIOS code, because processor  can now uncompress the code into BIOS NVRAM  and execute the code directly from BIOS NVRAM . As a result, the size of the PEI BIOS code is no longer constrained by the size of the NEM cache, and can accommodate more functionality and build in more support.","During the PEI phase, processor  performs a sequence of operations that fetches compressed PEI BIOS image  from BIOS flash , uncompresses it into a BIOS image  in BIOS NVRAM , and executes BIOS image  from BIOS NVRAM . Processor  also sets cache  to Write Back (WB) mode. Thus, processor  can utilize the full capacity of cache  for caching the PEI BIOS code and the data generated during the execution of the PEI BIOS code. When cache  is full and new code and\/or data needs to be cached, the older content of cache  can be written back to BIOS NVRAM , taking advantage of the high capacity of BIOS NVRAM  and the high speed interface to BIOS NVRAM . This contrasts to the limited accessibility (e.g., a few kilobytes for caching purposes) when cache  is in NEM.","In one embodiment, the BIOS NVRAM  is implemented by the same memory\/storage technology as NVRAM , such as PCMS or other PCM-based technology. A PCMS device can be built at very high capacity in the order of multiple gigabytes and can be coupled to a processor by a high-speed link (e.g., a HyperTransport 3.0 link, a QPI link, and the like. The address space of the PCMS device can be mapped into the regular system address space. The benefit of using PCMS or other PCM-based memory compared with DRAM-based memory has been discussed above. However, it is understood that other high capacity, low latency and byte-addressable non-volatile memory devices that have similar read and writes access characteristics to PCMS can be used to implement BIOS NVRAM .","It should also be understood that the use of BIOS NVRAM  for enabling the PEI BIOS code compression is independent of the configuration of memory and storage subsystem . More specifically, BIOS NVRAM  can be used regardless whether NVRAM  is used in memory and storage subsystem . In the embodiment shown in , memory and storage subsystem  includes NVRAM  partitioned into FM , NVRAM storage  and TMP NVRAM . In this embodiment, it is not necessary for NVRAM  to include a BIOS NVRAM partition, because the BIOS can reside in BIOS NVRAM  and\/or BIOS flash . In alternative embodiments, memory and storage subsystem  may not include NVRAM , or may include NVRAM  with partitions different from what is shown in . Further, in embodiments where memory and storage subsystem  does not include NVRAM , processor  does not necessarily include NVRAM controller  and decode table , and TPM data can be stored in a block-addressable non-volatile device (e.g., flash device). In the following description, computer system  and these alternative embodiments are collectively referred to as \u201ccomputer system  and its variants.\u201d",{"@attributes":{"id":"p-0067","num":"0080"},"figref":["FIG. 4","FIG. 3","FIG. 4","FIG. 3","FIG. 3","FIG. 4"],"b":["400","400","300","310","520","560"]},"In one embodiment, when the platform (e.g., computer system ) is powered on (block ), the platform generates a power-on reset signal to reset processor  (block ). Processor  sets the cache mode as NEM and initializes the NEM space in cache  (block ). In embodiments where heap and\/or stack space are needed for PEI BIOS code execution, processor  also sets up the heap and\/or stack space in cache . Processor  then initializes the QPI link in the local processor socket, where the QPI link couples processor  to BIOS NVRAM  (block ).","After BIOS NVRAM  device is located, processor  initializes BIOS NVRAM  and determines the size of BIOS NVRAM  through parameters received from the QPI link. Processor  then initializes BIOS NVRAM  and creates an address range for accessing BIOS NVRAM  (block ). In one embodiment, processor  creates the address range by configuring a source address decoder (SAD)  to map the size of BIOS NVRAM  into the processor memory address space.","Subsequently, when the reset is released, processor  copies a relatively small portion of PEI BIOS code from a pre-defined location in BIOS flash  into BIOS NVRAM  (block ). In one embodiment, the pre-defined location is in the system address space of 4 GB to 4 GB-16 MB, which can be pre-configured into SAD . This small portion of the PEI BIOS code can uncompress the rest of the BIOS PEI code (i.e., compressed BIOS image ). At this point, processor  can also copy NEM data (which is the data cached in the NEM cache) into BIOS NVRAM  (block ), and uncompress the rest of PEI BIOS code into BIOS NVRAM  (block ) using the small portion of the PEI BIOS code that has been copied to BIOS NVRAM  earlier.","After the copying, processor  jumps to the address space of BIOS NVRAM  and starts executing the uncompressed PEI BIOS code (i.e., BIOS image ) (block ). Processor  disables (i.e., closes) NEM and enables WB mode in cache  (block ). Processor  then executes the uncompressed PEI BIOS code out of BIOS NVRAM , using the full capacity of cache  to store code and data that may be needed during the execution. Subsequently, processor  initializes the remaining QPI links (e.g., the links that connect to other processors ), sets up QPI link routes (block ), initializes the memory (e.g., DIMM) in each processor socket (block ) and sets up global system memory address routing (block ). Processor  further copies the rest of BIOS image from BIOS NVRAM  to system memory (e.g., NM A) and jumps to the memory for subsequent phases of the BIOS execution (block ). Processor  then initializes the I\/O devices (e.g., I\/O devices  and other I\/O interfaces, if any) (block ), and boots up the OS (block ).","In one embodiment, a portion of BIOS NVRAM  can be set up as writable. Hence, errors that occur during the PEI BIOS execution can be logged into this writable area as debug or error or progress status messages even if DIMM memory initialization fails. In one embodiment, video and display error messages can also be initialized during execution of the PEI BIOS code.","Supporting Large Bios Images and Firmware","In some embodiments, a BIOS image can be stored in a high capacity, low latency and byte-addressable non-volatile memory device that is directly coupled to a processor without being routed through an I\/O subsystem. In one embodiment, this device can be implemented by the same memory\/storage technology as NVRAM , such as PCMS or other PCM-based technology. This device can store a large BIOS image with additional new features. The large BIOS image may support multiple platforms to thereby reduce support costs. This device can also store configuration and updates to platform firmware, such as configuration and updates to the BIOS, Management Engine (ME), Power Control Unit (PCU), Voltage Control Unit (VCU) and microcode. By consolidating platform firmware into a single, large-scale persistent memory, embodiments of the invention open up the possibility for efficient platform firmware updates, platform configuration and application management support.",{"@attributes":{"id":"p-0074","num":"0087"},"figref":["FIG. 5","FIG. 3"],"b":["500","500","730","560","560","510"]},"In one embodiment, computer system  may also include BIOS flash  as one option. That is, in one embodiment, computer system  includes both BIOS flash  and BIOS NVRAM . Alternatively, computer system  may include BIOS NVRAM  but not BIOS flash . In the embodiment where computer system  includes both BIOS flash  and BIOS NVRAM , processor  can be configured to choose executing the PEI BIOS code from either BIOS flash  or BIOS NVRAM . The configuration may be set via a pin of processor . The strap can be soft strap, meaning that the default can be BIOS flash ; however, ME  or other platform hardware can change the configuration to BIOS NVRAM  before releasing the processor reset at boot time. If processor  is configured to choose BIOS flash , then the existence of BIOS NVRAM  can be ignored and the PEI BIOS code will be executed from BIOS flash .","In the embodiments where processor  is hard-coded to use only BIOS NVRAM  at boot time, it is unnecessary for computer system  to include BIOS flash . One advantage of removing BIOS flash  is the reduction of platform cost.","Similar to the embodiment of , it should be understood that the use of BIOS NVRAM  for supporting large-sized BIOS code and firmware is independent of the configuration of memory and storage subsystem . More specifically, BIOS NVRAM  can be used regardless whether NVRAM  is used as memory and\/or storage. In the embodiment shown in , memory and storage subsystem  includes NVRAM  partitioned into FM , NVRAM storage  and TMP NVRAM . In this embodiment, it is not necessary for NVRAM  to include a BIOS NVRAM partition, because the BIOS can reside in BIOS NVRAM  or BIOS flash . In alternative embodiments, memory and storage subsystem  may not include NVRAM , or may include NVRAM  with partitions different from what are shown in . Further, in embodiments where memory and storage subsystem  does not include NVRAM , processor  does not necessarily include NVRAM controller  and decode table , and TPM data can be stored in a block-addressable non-volatile device (e.g., flash device). In the following description, computer system  and these alternative embodiments are collectively referred to as \u201ccomputer system  and its variants.\u201d",{"@attributes":{"id":"p-0078","num":"0091"},"figref":["FIG. 6","FIG. 5","FIG. 6","FIG. 5","FIG. 5","FIG. 5","FIG. 6"],"b":["600","600","500","510","520","560"]},"In one embodiment, when the platform (e.g., computer system ) is powered on (block ), computer system  generates a power-on reset signal to reset processor  (block ).","As mentioned before, in one embodiment, processor  supports both BIOS flash  and BIOS NVRAM , and can be configured to choose one of the two for the PEI BIOS execution. If processor  is configured to choose BIOS NVRAM  for BIOS storage, ME  or other platform hardware can set the configuration to BIOS NVRAM  before releasing the processor reset. Subsequently, ME , hardware-level code (e.g., power control code (pcode) or microcode (ucode)), or other platform hardware can initialize the QPI link coupled to BIOS NVRAM , determine the size of firmware partitions  within BIOS NVRAM  by examining the parameters exchanged on the QPI link, and configure SAD  with the addresses of firmware partitions  (block ). SAD  needs to be configured such that addresses that fall in the firmware partitions' address space can be forwarded to BIOS NVRAM .","In an embodiment (not shown in ) where processor  is hard-coded to use only BIOS NVRAM  at boot time, processor  can initialize the QPI link coupled to BIOS NVRAM , determine the size of firmware partitions  within BIOS NVRAM  by examining parameters exchanged on the QPI link, and configure SAD  with the addresses of firmware partitions .","Continuing with the operation of block , upon release of the reset signal, processor  fetches the information from a Firmware Interface Table (FIT)  at a pre-determined BIOS access region (e.g., 4 GB to 4 GB-16 MB region of the system memory address space) (block ). This region is within BIOS NVRAM . This region (now in BIOS NVRAM ) contains a Firmware Interface Table (FIT)  and necessary information to enable access to firmware partitions . Firmware partitions  can store one or more BIOS images  and other platform firmware code and data . In one embodiment, FIT  contains the size information of each partition of firmware partitions , as well as a partition that serves as NVRAM. FIT  has the mechanism to specify the location of each BIOS image  and a corresponding type definition. The type definition can be used to specify the version of the BIOS image and the type of platforms for which the BIOS image is intended, among others.","Continuing with the operation of block , processor  programs MTRR Memory Type Range Registers (MTTR) such that cache  is set to Write Back (WB) mode for executing the PEI BIOS code contained in one of BIOS images  (block ). Processor  then jumps to the firmware partition containing the PEI BIOS code and executes the code (block ).","Subsequently, processor  initializes the remaining QPI links (e.g., the links that connect to other processors ) and sets up QPI link routes (block ), initializes the memory (e.g., the DIMM) in each processor socket (block ) and sets up global system memory address routing (block ). Processor  further copies the rest of the BIOS image from BIOS NVRAM  to system memory (e.g., NM A) and jumps to the memory for subsequent phases of BIOS execution (block ). Processor  also initializes the I\/O devices (e.g., I\/O devices  and other I\/O interfaces, if any) (block ), and boots up the OS (block ).","During the execution of the PEI BIOS code, if the latest version of the code fails to boot, the failure can be recorded in a BIOS flag area within BIOS NVRAM  and the boot process can be re-started with an earlier version of the code, using handling code defined in FIT .","In one embodiment, a portion of BIOS NVRAM  can be set up as writable. Hence, errors that occur during the PEI BIOS execution can be logged into this writable area even if DIMM memory initialization fails. In one embodiment, video and display error messages can also be initialized during execution of the PEI BIOS code.","Once cache  is set to WB mode for the PEI BIOS code execution out of BIOS NVRAM , the BIOS code has the ability to write back data into BIOS NVRAM . Thus, the portion of BIOS code that has not been executed up to this point can be stored in BIOS NVRAM  as compressed code. After cache  is set to WB node, processor  can uncompress the rest of the PEI BIOS code, write the uncompressed code into BIOS NVRAM , and execute out of the uncompressed area of BIOS NVRAM .","The techniques shown in the flow diagrams of  can be implemented using instructions and data stored on non-transitory machine-readable or computer-readable media, such as non-transitory machine-readable or computer-readable storage media (e.g., magnetic disks; optical disks; random access memory; read-only memory; flash memory devices; and phase-change memory).","Embodiments of the invention may also be provided as a computer program product which may include a non-transitory machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic device) to perform a process. The non-transitory machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, propagation media or other type of media\/machine-readable medium suitable for storing electronic instructions. Embodiments of the invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).","While the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described, can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
