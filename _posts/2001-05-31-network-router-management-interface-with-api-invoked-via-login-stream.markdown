---
title: Network router management interface with API invoked via login stream
abstract: A network router management interface for use in configuring a router and obtaining operational information provides an application programming interface (API) that permits clients to formulate requests and receive replies according to an extensible markup language such as XML. The router may transform a login stream at a router command line interface (CLI) to implement the XML-based API. For example, the management server accepts input from the CLI and, upon receipt of a particular command from the client, transforms the CLI into a programmatic interface for exchange of XML-tagged requests and XML-tagged replies according to the XML-based API. Providing access to the XML-based API via the CLI login shell enables the use of standard login, security, authentication and authorization techniques.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07072946&OS=07072946&RS=07072946
owner: Juniper Networks, Inc.
number: 07072946
owner_city: Sunnyvale
owner_country: US
publication_date: 20010531
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates to computer networks and, more particularly, to managing network routers.","A computer network is a collection of interconnected computing devices that exchange data and share resources. In a packet-based network, such as the Internet, the computing devices communicate data by dividing the data into small blocks called packets. The packets are individually routed across the network from a source device to a destination device. The destination device extracts the data from the packets and assembles the data into its original form. Dividing the data into packets enables the source device to resend only those individual packets that may be lost during transmission.","Devices within the network, often referred to as routers, maintain tables of routing information that describe available routes through the network. Each route defines a path between two locations on the network. Upon receiving an incoming data packet, the router examines header information within the packet to identify the destination for the packet. Based on the header information, the router accesses the routing table, selects an appropriate route for the packet and forwards the packet accordingly.","A router management interface provides access to software modules and other resources residing on the router. In particular, the router management interface permits various entities, such as human users and automated scripts, to configure the router and obtain operational information. Using the router management interface, the entities can make changes to the present router configuration and more efficiently manage router resources, policies and relationships with other routers. In addition, the router management interface provides access to a variety of information relating to router configuration, protocols, firewalls, interfaces, router chassis inventory, system parameters, routing policies, forwarding options, network flow statistics, error logs, and performance metrics.","The invention provides a network router management interface for use in configuring a router and obtaining operational information. The network router management interface provides an application programming interface (API) that permits clients to formulate requests and receive replies according to an extensible markup language, such as XML. XML is one example of an extensible markup language in the class encompassed by the Standard Generalized Markup Language (SGML) specification, and will be described herein for purposes of illustration. A network router management interface consistent with the principles of the invention offers a more robust and structured platform for processing of client requests and router output than conventional interfaces.","The invention may involve transformation of a command line interface (CLI) login stream into an XML-based API. In general, a client application may establish a secure connection with the router using a standard secure access protocol. Examples of suitable standard access protocols include Secure Shell (ssh) and Telnet. Other protocols, such as Secure Sockets Layer (SSL) and Simple Object Access Protocol (SOAP), also may be used in some applications. An access protocol client establishes a secure connection to the router, opens a login session, and starts a login shell. The access protocol client then transmits a command via the CLI that invokes direct communication between the client and a management server module on the router according to the XML API.","Clients may submit configuration requests, operational requests or both. Configuration requests include requests to change router configuration or obtain information about the current configuration. Operational requests include requests for information about router status such as network flow and performance. Based on data type definition (DTD) files or XML Schema language files, clients, such as human users or automated scripts, can encode the requests with XML tags. The self-describing XML tags map to information associated with the various software modules and other resources on the router.","A management server software module running on the router parses the XML-tagged requests and returns XML-tagged replies to the client. For example, the management server module may direct the XML-tagged requests to the appropriate software modules. In particular, the management server module may access a stored schema that maps the XML tags to information associated with appropriate software modules and other router resources. The software modules may include, for example, a chassis module, a device configuration module, and a routing protocol module. Some of the information associated with the software modules can be stored in a database on the router for access by the management server module and the software modules themselves.","The software modules may emit XML-tagged replies. In some cases, one or more of the software modules may emit replies in other formats, such as ASCII. The management server module can be configured to encode ASCII replies with XML tags before transmitting them to the client. For example, the management server module may merely \u201cwrap\u201d a raw ASCII reply in XML tags. In other instances, the management server module acts as a conduit for XML replies emitted by the software modules. In either case, the network router management interface transmits XML-tagged requests and replies, which are more readily parseable by client applications and the management server module alike.","The management server module offers clients an XML-based application programming interface (API) to streamline the process of accessing configuration and operational information. In some embodiments, the management server module may execute a process that modifies a login stream at a router command line interface (CLI) to automatically invoke the XML-based API. For example, the management server module accepts input from the CLI and, upon receipt of a particular command from the client, transforms the CLI into a programmatic interface for exchange of XML-tagged requests and XML-tagged replies according to the XML-based API. In some embodiments, the management server module can be configured to take the place of the CLI, assume control of the CLI access connection, and thereby transform the CLI login stream into a direct XML-based API. Providing access to the XML-based API via the CLI login shell enables the use of standard login, security, authentication and authorization techniques.","In one embodiment, the invention provides a method comprising establishing a secure connection between a network router and a client, initiating a command line interface (CLI) process on the network router, and receiving from the client a CLI command. In response to the CLI command, the method replaces the CLI process with a management server process that provides an extensible markup language-based application programming interface (API) to the client. A computer-readable medium that carries instructions for performing such a method is also contemplated.","In a further embodiment, the invention provides a network router management interface comprising a secure protocol module that provides a secure connection between a network router and a client, a command line interface (CLI) module that receives CLI commands from a client, and a management server module that receives the CLI commands from the CLI module and, in response to one of the CLI commands, accepts commands encoded in accordance with an extensible markup language.","In an added embodiment, the invention provides a network router management interface. The network router management interface includes a client interface that receives, from a network router client, configuration requests and operational requests encoded with extensible markup language tags. A storage device stores a network management interface schema that maps the extensible markup language tags to configuration and operational information associated with software modules running on a network router. The software modules include a chassis software module that defines an inventory of components in the network router chassis, a device configuration software module that defines a physical configuration of the network router, and a routing protocol module that administers protocols supported by the network router. A management server software module parses the configuration requests and the operational requests received at the client interface and accesses the corresponding configuration and operational information associated with the chassis software module, the device configuration software module, and the routing control software module according to the network management interface schema. In addition, the management server software module emits replies encoded with extensible markup language tags according to the network management interface schema.","In another embodiment, the invention provides a method comprising receiving, from a network router client, configuration requests and operational requests encoded with extensible markup language tags. The method further includes accessing a network management interface schema that maps the extensible markup language tags to configuration and operational information associated with software modules running on a network router. The software modules include a chassis software module that defines an inventory of components in the network router chassis, a device configuration software module that defines a physical configuration of the network router, and a routing protocol module that administers protocols supported by the network router. The method also includes parsing the configuration requests and the operational requests, and accessing the corresponding configuration and operational information associated with the chassis software module, the device configuration software module, and the routing control software module according to the network management interface schema. The method then includes emitting replies encoded with extensible markup language tags according to the network management interface schema. A computer-readable medium that carries instructions for performing such a method is also contemplated, as well as a computer-readable medium that carries the network management interface schema.","In a further embodiment, the invention provides a network router interface comprising a client interface that receives, from a client, requests encoded with extensible markup language tags. A management server accesses information associated with one or more software modules running on the router according to a schema that maps the tags to the information. In addition, the management server emits to the client interface replies encoded with extensible markup language tags.","In another embodiment, the invention provides a method comprising receiving, from a network router client, requests encoded with extensible markup language tags. The method obtains information associated with one or more software modules running on the network router according to a schema that maps the tags to the information. The method also emits to the network router client, replies encoded with extensible markup language tags. A computer-readable medium that carries instructions for performing such a method is also contemplated.","A network router management interface in accordance with the principles of the invention can provide a number of advantages, both in submitting requests to the router and in receiving router output. When receiving router output, for example, tag names and structural rules provided by a DTD of XML Schema Language file facilitate a better understanding of the content and structure of the data produced by the network router.","The tags make it much easier for client applications to parse router output and extract specific information, e.g., for use in network management applications. In particular, the parsing function of the client application does not need to be updated when the format or ordering of router output changes. Instead, such changes are reflected in the DTD or XML Schema Language file, while the resulting information is delimited by appropriate XML tags.","The parsing function simply relies on identification of elements between opening and closing XML tags to extract particular information in the router output. In this manner, the parsing performance of the client application is generally insensitive to changes in the position of elements within the output string, and can resist errors prevalent in existing parsing applications.","Tagged output is also easier to transform into different display formats. In particular, each client application is generally free to render the XML output to any desired format or appearance, providing significant flexibility to developers of network management systems. This flexibility is in contrast to many existing systems in which router output is fixed to a particular output format, such as eighty-column TTL output. Consequently, client applications can render output in a variety of formats that may be more appropriate for human viewing or machine processing, depending on the application.","When requesting information from a router, the XML API provides a true programmatic interface in which options for every command and all elements in configuration statements are well-defined. The XML tag names clearly indicate the function of an element in a command or configuration statement. The uniformity provided by the XML-based API liberates client application developers, who can concentrate less on basic command syntax and more on the design of value-added client applications for router configuration and network management.","Automatic transformation of an existing interface, such as a CLI, into an XML-based API permits the API to more readily coexist with legacy interfaces. Thus, a network router management interface in accordance with the principles of the invention may include a number of different interfaces including a CLI, an XML-based API, a script client interface (SCI), and can support a number of secure access methods. Moreover, providing access to the XML-based API via the CLI login shell enables the use of standard login, security, authentication and authorization techniques such as ssh, Telnet, SSL, SOAP and the like, which have been proven reliable.","The above summary of the invention is not intended to describe every embodiment of the invention. The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","A network router management interface in accordance with the principles of the invention provides an application programming interface (API) that permits clients to formulate requests and receive replies according to an extensible markup language such as XML. Router clients encode configuration requests and operational requests with extensible markup language tags. Likewise, a management server module running on the router encodes replies with extensible markup language tags.","The tags map to corresponding configuration and operational information associated with software modules running on the router. In this manner, the network router management interface provides structured input and output that is readily parseable and capable of adaptation to changes in the format or syntax of information emitted by the router. In particular, the streams of tags emitted by the client application and management server constitute a well-formed extensible markup language document that obeys the structural rules defined in a DTD or XML Schema Language file for the type of information exchanged. Moreover, client applications are free to render the output in a flexible manner for a given application.","In accordance with the invention, the XML API can be accessed by transforming a command line interface (CLI) login stream. In general, a client application may establish a secure connection with the router using a standard secure access protocol. An access protocol client establishes a secure connection to the router, opens a login session, and starts a login shell. The access protocol client then transmits a command via the CLI that invokes direct communication between the client and a management server module on the router according to the XML API. Providing access to the XML-based API via the CLI login shell enables the use of standard login, security, authentication and authorization techniques.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","10","12","14","16","10","18","20","22","12","20","22","12","21","10"]},"Routing engine  maintains and updates the routing information within routing table . Forwarding engine  analyzes the contents of routing table  prior to receiving packets and pre-selects routes to be used when forwarding packets. Forwarding engine  then stores the selected routes in forwarding table . Upon receiving an inbound packet, forwarding engine  examines information within the packet to identify the destination of the packet. Based on the destination, forwarding engine  selects an available route and forwards the packet to one of the IFCs . IFCs  may be configured according to one of several different network protocols.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 2"],"b":["12","12","14","16","12","14","24","24"]},"As examples, routing engine  may include a chassis module , a device configuration module , and a routing protocol module  running as processes within the operating environment of operating system . A management server module  provides a user interface for interaction with software modules , , . Chassis module  defines an inventory and status of components installed in the chassis of network router , including IFCs . Device configuration module  defines and controls the physical configuration of network router . Routing protocol module  administers protocols supported by network router . For example, routing protocol module  may implement protocols for exchanging route information with other routing devices and for updating routing table  (shown in ).","Management server module  communicates with one or more client interface modules running on routing engine . In the example of , management server module  communicates with a command line interface (CLI) module . CLI module  serves as a daemon process that listens for requests from clients. In some embodiments, CLI module  may give way to direct communication between clients and management server module , e.g., via script commands such as JUNOScript commands. The clients may take the form of human users such as system administrators or automated script applications. Initially, command line interface module  listens for CLI commands, and passes them to management server module  for handling. In accordance with the principles of the invention, however, the command line interface presented by control unit  is dynamically replaced with an XML-based API upon receipt of a particular CLI command from a client. More specifically, upon receipt of the command, referred to herein as the \u201cxml-mode\u201d command, management server module  receives subsequent incoming commands directly and, as described below, services the XML encoded CLI commands based on the XML API.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["36","10","10","38","10","34"]},"The access protocol client preferably creates a secure communication channel that is both authenticated and encrypted. One effective protocol for establishing the secure channel is ssh. Alternative access methods such as Telnet, SSL, or SOAP also may be useful in some applications. The ssh protocol uses public-private key technology for effective encryption, and is widely accepted as a reliable protocol for secure communication. In operation, an ssh client running on the client application machine provides a password to an ssh daemon running on packet routing engine . The ssh client can obtain the password from an ssh-agent program that provides key management, a local disk location where the password is stored, or as authentication information entered by a user.","The access protocol client transmits an \u201cxml-mode\u201d command () to CLI module . In response, CLI module  executes the xml-mode command (), which transforms the existing CLI connection into a communication path for the XML-based API. In one embodiment, management server module  replaces CLI module , e.g., using the UNIX Exec command (). The client application then communicates directly with management server module  using the XML-based API presented by management server module  () and the existing communication channel. Following execution of the Exec command, management server module  assumes control of the access session previously opened between CLI module  and the access protocol client on the client machine. At that point, the router presents the XML API to the client application, and management server module , in effect, acts as a web server.  is a block diagram illustrating a network router incorporating a management interface that supports an XML-based API. XML is one example of an extensible markup language in the class encompassed by the Standard Generalized Markup Language (SGML) specification, and will be described herein for purposes of illustration. The official XML specification is governed by the World Wide Web Consortium and is available on the web at http:\/\/www.w3.org\/TR\/REC-xml. The structure of the XML tags communicated via the XML API may be defined using Data Type Definition (DTD) files, XML Schema Language files, or other similar devices for XML tag definition. As an example, the XML tags may conform to the evolving JUNOScript\u2122 API developed by Juniper Networks, Inc. of Sunnyvale, Calif. The JUNOScript\u2122 API is described, for example, in JUNOScript\u2122 API Guide and Reference, Version 4.3, available from Juniper Networks, Inc., the entire content of which is incorporated herein by reference.","In the example of , management server module  accesses one or more software modules ,  running on routing engine , as well as other router resources such as router configuration database , to serve client requests. Software modules ,  may include a variety of software modules such as chassis module , device configuration module , and routing protocol module  described with reference to . Router configuration database  may store information associated with software modules ,  and router hardware such as configuration information. Management server module  may obtain operational information from software module , , indicating operational status of the router. A management interface schema  maps extensible markup language tags received by management server module  to information associated with software modules , , including the information in database  and information that may be obtained directly from software modules , . Schema  may take the form of a data definition language (DDL) file, and can be stored on hard disk or other data storage medium.","A variety of clients such as CLI client , web browser client , or script client  may establish independent communication sessions with management server module . Management server module  presents to each client , ,  an XML API , which can be made accessible by the secure CLI login process described above with reference to . CLI client  may take the form of a remote computer operated by a human user who enters CLI commands encoded with XML tags that conform to the API. In this case, CLI client application  may render the XML output received from management server module  as command line output. Web browser client  may graphically render the XML output for human users, e.g., using style sheets communicated or identified by management server module  with particular XML replies. Script client  may take the form of an automated script application running on a client computer, and may render XML output into reports, logs, and the like. In addition, script client  may respond to XML replies with additional requests according to script code loaded into the script client.","In operation, management server module  receives both configuration requests and operational requests encoded with XML tags from clients , , . Configuration requests include requests to change router configuration or obtain information about the current configuration. Management server module  can make changes to the router configuration by modifying configuration records in database . The configuration information may be stored hierarchically in database , which may reside on a hard disk or other data storage medium. Operational requests include requests for information about router status such as network flow and performance. Management server module  can obtain operational information from database  or directly from modules , .","Management server module  serves requests received from clients , ,  by parsing the extensible markup language tags, and accessing schema  to map the tags to pertinent configuration or operational information associated with modules , , database , or both. The tags may include, for example, chassis tags pertaining to information about the chassis components installed in the router chassis, device configuration tags pertaining to information about the physical configuration of the network router, and routing protocol tags pertaining to information about the protocols supported by the network router. Upon accessing the corresponding configuration and operational information according to the network management interface schema, management server module  emits replies encoded with extensible markup language tags.","Clients , ,  parse the respective XML replies, extract pertinent information, and render the XML output as specified by the client application. Client applications , ,  may parse the XML tags in the replies using a parser that implements a standard API such as the Document Object Model (DOM) or Simple API for XML (SAX). DOM implementations are available for several programming languages, including C, C++, Perl, and Java. Management server module  may parse the requests using a similar API. XML API  greatly facilitates the parsing of requests and replies. Tag names and structural rules provided by a DTD or XML Schema Language file make the tag streams highly structured and predictable.","When a client ,  or  needs to extract a specific piece of data from formatted ASCII output, it must rely on the location of the data within the output string. Unfortunately, if the number of characters in the output is unpredictable, or the format or ordering of the output changes as new software versions are introduced, the parsing function must be updated manually to avoid an error. On the contrary, with XML-encoded output provided by XML API , the XML tags describe and delimit each element of information in a structure manner. As a result, the parsing routines executing within clients ,  and  are able to extract information between adjacent opening and closing tags, without regard to position within the output string. Thus, adding an new tag in the future does not affect the ability of a client application to parse existing tags and extract their contents.","With further reference to , management server module  may receive output from software modules ,  or database  in either XML or ASCII format. In particular, some of the router resources , ,  may be configured to emit XML-encoded output, while others may simply emit ASCII output. When management server module  receives XML-encoded output, it may simply act as a conduit and communicate the output to a client application , , . If management server module  receives ASCII output, however, it can be configured to encode the ASCII output with XML tags before sending it to a client application , , . Thus, in some instances, management server module  may \u201cwrap\u201d the ASCII output in XML tags to present replies that conform to XML API . Management server module  accesses one or more DTD or XML Schema Language files for router  to ensure that the tags conform.","The following are some examples of operational and configuration requests made by client applications , ,  according to XML API  and corresponding replies emitted by management server module . The examples are from the JUNOScript\u2122 API. Again, an operational request may be a request for information about router status. As a first example, the following request is for detailed information about a router interface called \u201cge-2\/3\/0\u201d:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<rpc>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<get-interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<interface-name>ge-2\/3\/0<\/interface-name>"]},{"entry":[{},"<detail\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/get-interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/rpc>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"A configuration request involves a request to change router configuration or for information about the current candidate configuration. The candidate configuration usually matches the configuration currently in use on the router, but the two can diverge if there are uncommitted changes to the candidate configuration. As a second example, the following request asks for information at the [edit system login] level of the current candidate configuration:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<rpc>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<get-configuration>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configuration>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<system>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<login\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/system>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/configuration>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/get-configuration>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/rpc>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"32"},"The reply from management server module  for the operational request described above provides reply tags for all of the request tags, as specified by XML API . For example, management server module  returns the information requested by the <get-interface-information> tag in a response tag called <interface-information>, and the information requested by the <get-chassis-inventory> tag in a response tag called <chassis-inventory>. The following sample reply includes information about the interface called \u201cge-2\/3\/0\u201d:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<rpc-reply>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<interface-name>ge-2\/3\/0<\/interface-name>"]},{"entry":[{},"<interface-index>20<\/interface-index>"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/rpc-reply>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"32"},"The following is an example response to the above-described configuration request for information at the [edit system login] level of the configuration hierarchy. For the sake of brevity, this example assumes there is only one user defined at this level:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<rpc-reply>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configuration>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<system>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<login>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<user>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>admin<\/name>"]},{"entry":[{},"<full-name>Administrator<\/full-name>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/user>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/login>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/system>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/configuration>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/rpc-reply>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["62","32","32"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5","FIG. 5"],"b":["56","10","56","56","64","66","68","56","70","72","64","32","66","66","68","72","56"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 6","FIG. 5","FIG. 5","FIG. 6"],"b":["60","56","60","74","76","78","60","80","82","62","60","58"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 7","FIG. 7","FIG. 3"],"b":["84","32","86","88","48","50","52","32","90"]},"If management server module  receives an ASCII format reply from the router resource (), it \u201cwraps\u201d the ASCII format reply in appropriate XML tags () specified by the XML API . If management server module  receives an XML-encoded reply (), there may be no need for additional encoding. In each case, management server module  transmits the XML-encoded reply to the client application (). The client application parses the XML reply (), accesses the render library () for rendering support, and renders output based on the contents of the XML reply () and style sheets, ODL files, or other information provided by the render library. To avoid congestion, the client application typically waits for a reply before transmitting another request.","When a client application is finished making requests, it may end the session by emitting an empty <request-end-session\/> tag within <rpc> tags. Management server module  then emits an <end-session\/> tag enclosed in <rpc-reply> tags. The client application waits to receive this reply before emitting its closing session tag. The client application can then close the communication channel, e.g., ssh, by using a routine defined for that purpose in the standard library for the client application programming language.","Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
