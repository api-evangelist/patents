---
title: Dynamically generating statically-typed proxies for dynamically-typed functions
abstract: Embodiments of the present application may simplify an integration of statically typed and dynamically typed languages by automatically generating an implementation of a statically typed native interface for a given set of dynamically typed functions. In an embodiment, functions in a dynamically typed language are automatically interconnected with functions in a statically typed language. Code that bridges and/or connects a statically typed interface and a dynamically typed interface embodied in the dynamically typed source code may be automatically generated. The statically typed interface may be provided by a user. Further, an extensible set of runtime rules that determine how to convert between statically typed and dynamically typed data may be provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769486&OS=08769486&RS=08769486
owner: The MathWorks, Inc.
number: 08769486
owner_city: Natick
owner_country: US
publication_date: 20110705
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","DETAILED DESCRIPTION"],"p":["This application claims the benefit of provisional patent application U.S. Ser. No. 61\/430,536, filed Jan. 6, 2011, the content of which is hereby incorporated by reference.","The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar features illustrated in the drawings.","According to various embodiments, a computer-implemented method is provided. The method may include receiving a specification of a statically typed first interface to a first function. The first interface may include a specification of a data type of a parameter of the first function. The method may further include identifying a second function corresponding to the specification of the statically typed first interface to a first function. The second function may be written using a dynamically typed language. The method may also include generating an implementation of the first function that invokes the second function.","In some embodiments, one or more tangible computer-readable storage media is provided. The tangible computer-readable storage media may store one or more instructions for receiving a specification of a statically typed first interface to a first function. The first interface may include a specification of a data type of a parameter of the first function. The tangible computer-readable storage media may further store one or more instructions for identifying a second function corresponding to the specification of the statically typed first interface to a first function. The second function may be written using a dynamically typed language. The tangible computer-readable storage media may also store one or more instructions for generating an implementation of the first function that invokes the second function.","According to some embodiments, a system including a first processor is provided. The first processor may receive a specification of a statically typed first interface to a first function. The first interface may include a specification of a data type of a parameter of the first function. The first processor may also identify a second function corresponding to the specification of the statically typed first interface to a first function. The second function may be written using a dynamically typed language. The first processor may further generate an implementation of the first function that invokes the second function.","A computer program may be generated through a series of stages. For example, at a source code development stage, a programmer may write source code. At a compilation stage, a compiler may transform the source code into a machine-readable object code. At a runtime stage, a computer may load and execute the object code. The execution of the object code may invoke functions written by the programmer. An example of a member function may be a member function of an object class, such as a member function of a C++ or JAVA object class.","The programmer may write the source code in a dynamically typed language, such as the MATLAB\u00ae language, and\/or in a statically typed language, such as C++ or C#. If both types of languages are used, the programmer may indicate functions in the dynamically typed language that are required by the statically typed language.","Dynamically typed languages dynamically bind data type information to data at or during runtime. Moreover, in a dynamically typed language a data type associated with data may change during runtime. Exemplary dynamically typed languages may include, among others, Lisp, Perl, Python, MATLAB, Mumps, Smalltalk, Ruby, Logo, Tcl, Self, Common Lisp, Objective-C, Rebol, Squeak. Statically typed languages, on the other hand, bind data type information to data prior to runtime, such as during source code development and\/or compilation. During runtime, the data type of data may remain static, i.e., not change. Exemplary statically typed languages may include, among others, Ada, C++, C#, Pascal, Eiffel, Fortran, Fantom, Java, PEARL, Scala, SPARK.","Passing data between a statically typed language and a dynamically typed language may be complicated. For example, a programmer may have to develop an appropriate interface between a statically typed language and a dynamically typed language. The interface may involve additional code that may be used to connect functions in the dynamically typed language to functions in the statically typed language. A compiler may transform the additional code into machine readable instructions. A computer may load and execute the machine readable instructions. When a dynamically typed function is invoked, the computer may execute the additional code written by the programmer. The additional code may transform statically typed input data into dynamically typed input data, call the dynamically typed function and then transform dynamically typed data that may be output from the dynamically typed function into a data type that may be returned to a function written in the statically typed language.","Embodiments of the present application automatically interconnect functions in a dynamically typed language with functions in a statically typed language. In an embodiment, code that bridges and\/or connects a statically typed interface and a dynamically typed interface embodied in the dynamically typed source code may be automatically generated. The statically typed interface may be provided by the user. Further, an extensible set of runtime rules that determine how to convert between statically typed data and dynamically typed data may be provided.","Embodiments of the present application may simplify integration of statically typed and dynamically typed languages by automatically generating an implementation of a statically typed native interface for a given set of dynamically typed functions. Users may provide a statically typed interface expressed with types native to the statically typed language. Embodiments of the present application may automatically convert the statically typed data provided to the statically typed native interface into dynamically typed data suitable for passing to the corresponding dynamically typed functions. Alternatively, data may be passed by reference between the two environments without being converted. Embodiments of the present application may also convert dynamically typed data output by the dynamically typed functions into statically typed data suitable for return from the functions in the statically typed interface. Users may customize the interface generation process. The generated implementation may not require familiarity with data types or programming models of the dynamically typed language. The generated implementation may not require a programmer to master concepts of both the statically typed language and the dynamically typed language. Furthermore, because the statically typed language interacts with the dynamically typed functions via the generated interface, the dynamically typed functions may execute in a separate location (e.g., a different process, a difference machine, etc.). Embodiments of the present application may preserve human-readability of the interface code. Accordingly, programmers may read and use a resulting application programming interface (API) that may be generated based on the interface code.","One or more embodiments of the invention may be implemented on one or more computing devices. The one or more computing devices may be a system or part of a system. The one or more computing devices may include, for example, a desktop computer, laptop computer, client computer, server computer, mainframe computer, personal digital assistant (PDA), netbook computer, tablet computer, web-enabled cellular telephone, smart phone, or some other computing device.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","120","130","150","160","170","180","110","190","100"]},"The I\/O bus  may be an interconnect bus that enables communication between various components in the computing device , such as processing logic , secondary storage , input devices , output devices , and communication interfaces . The communication may include, among other things, transferring information (e.g., data, control information, executable instructions) between the components.","The memory bus  may be an interconnect bus that may enable information to be transferred between the processing logic  and the primary storage . The information may include instructions and\/or data that may be executed, manipulated, and\/or otherwise processed by processing logic . The instructions and\/or data may include instructions and\/or data that may implement one or more embodiments of the invention.","The processing logic  may include logic that may interpret, execute, and\/or otherwise process information contained in, for example, the primary storage  and\/or secondary storage . The information may include computer-executable instructions and\/or data that may implement one or more embodiments of the invention. The processing logic  may comprise a variety of heterogeneous hardware. The hardware may include, for example, some combination of one or more processors, microprocessors, field programmable gate arrays (FPGAs), application specific instruction set processors (ASIPs), application specific integrated circuits (ASICs), complex programmable logic devices (CPLDs), graphics processing units (GPUs), or other types of processing logic that may interpret, execute, manipulate, and\/or otherwise process the information. The processing logic  may comprise a single core or multiple cores. Moreover, processing logic  may comprise a system-on-chip (SoC) or system-in-package (SiP). An example of a processor that may be used to implement processing logic  is the Intel\u00ae Xeon\u00ae processor available from Intel Corporation, Santa Clara, Calif.","The secondary storage  may include a non-transitory tangible computer-readable storage media that is accessible to the processing logic  via I\/O bus . The secondary storage  may store information for the processing logic . The information may be executed, interpreted, manipulated, and\/or otherwise processed by the processing logic . The secondary storage  may comprise, for example, a storage device, such as a magnetic disk, optical disk, random-access memory (RAM) disk, and\/or flash drive. The information may be stored on one or more non-transitory tangible computer-readable media contained in the storage device. This media may include, for example, magnetic discs, optical discs, and\/or memory devices (e.g., flash memory devices, static RAM (SRAM) devices, dynamic RAM (DRAM) devices, or other memory devices). The information may include data and\/or computer-executable instructions that may implement one or more embodiments of the invention.","Input devices  may include one or more devices that may be used to input information into computing device . Devices that may be used to input information into computing device  may include, for example, a keyboard (e.g., hardware keyboard, software keyboard), computer mouse, microphone, camera, trackball, gyroscopic device (e.g., gyroscope), mini-mouse, touch pad, stylus, graphics tablet, touch screen, joystick (isotonic or isometric), pointing stick, accelerometer, palm mouse, foot mouse, eyeball controlled device, finger mouse, light pen, light gun, eye tracking device, gesture tracking device, steering wheel, yoke, jog dial, space ball, directional pad, dance pad, soap mouse, haptic device, tactile device, neural device, multipoint input device, discrete pointing device, or some other input device. The information may include spatial (e.g., continuous, multi-dimensional) data that may be input into computing device , for example, using a device such as a computer mouse. The information may also include other forms of data, such as, for example, text that may be input using a keyboard.","Output devices  may include one or more devices that may output information from the computing device . Devices that may output information from the computing device  may include, for example, a cathode ray tube (CRT), plasma display device, light-emitting diode (LED) display device, liquid crystal display (LCD) device, vacuum florescent display (VFD) device, surface-conduction electron-emitter display (SED) device, field emission display (FED) device, haptic device, tactile device, neural stimulation device, printer (e.g., a three-dimensional (3D) printer, laser printer), speaker, video projector, volumetric display device, plotter, actuator (e.g., electrical motor) or some other output device. Output devices  may be directed by, for example, the processing logic , to output the information from the computing device . The information may be presented (e.g., displayed, printed) by output devices . The information may include, for example, graphical user interface (GUI) elements (e.g., windows, widgets, dialog boxes, or other GUI elements), graphical representations, pictures, text, or other information that may be presented by output devices . Note that the information may be presented on one or more output devices  in a stereoscopic view to enable, for example, a perception of depth.","Communication interfaces  may include one or more devices that contain logic configured to (1) interface the computing device  with, for example, one or more communication networks and (2) enable the computing device  to communicate with one or more devices connected to the communication networks.","Communication interfaces  may include one or more transceiver-like mechanisms that enable the computing device  to communicate with devices connected to the communication networks. Communication interfaces  may include a built-in network adapter, network interface card (NIC), Personal Computer Memory Card International Association (PCMCIA) network card, card bus network adapter, wireless network adapter, Universal Serial Bus (USB) network adapter, modem, or other device suitable for interfacing the computing device  to the communication networks.","The primary storage  is accessible to the processing logic  via bus . The primary storage  may be a non-transitory tangible computer-readable media that may store information for processing logic . The information may include computer-executable instructions and\/or data that may implement operating system (OS) , windows manager (WM) , an application  (APP), and a technical computing environment (TCE) . The instructions may be executed, interpreted, and\/or otherwise processed by processing logic .","The primary storage  may comprise a RAM that may include RAM devices that may store the information. The RAM devices may be volatile or non-volatile and may include, for example, one or more DRAM devices, flash memory devices, SRAM devices, zero-capacitor RAM (ZRAM) devices, twin transistor RAM (TTRAM) devices, read-only memory (ROM) devices, ferroelectric RAM (FeRAM) devices, magneto-resistive RAM (MRAM) devices, phase change memory RAM (PRAM) devices, or other types of RAM devices.","OS  may be a conventional operating system that may implement various conventional operating system functions. These functions may include, for example, scheduling one or more portions of APP  and\/or TCE  to run on the processing logic , managing the primary storage , controlling access to various components associated with the computing device  (e.g., secondary storage , input devices , output devices , communication interfaces ), and controlling access to data received and\/or transmitted by these components. The OS  may execute directly on hardware or in a virtual machine.","A virtual machine may be provided to handle a process running on multiple processors so that the process may appear to be using only one computing resource rather than multiple computing resources. Virtualization may be employed in the computing device  so that infrastructure and resources in the computing device may be shared dynamically.","Examples of operating systems that may be used to implement OS  include, but are not limited to, the Linux operating system, Microsoft Windows operating system, the Symbian operating system, Mac OS, Chrome OS, and the Android operating system. A version of the Linux operating system that may be used is Red Hat Linux available from Red Hat Corporation, Raleigh, N.C. Versions of the Microsoft Windows operating system that may be used include Microsoft Windows Phone, Microsoft Windows 7, Microsoft Windows Vista, and Microsoft Windows XP operating systems available from Microsoft Inc., Redmond, Wash. The Chrome OS and Android operating systems are available from Google, Inc., Mountain View, Calif. The Mac OS operating system is available from Apple Inc., Cupertino, Calif. The Symbian operating system is available from the Symbian Foundation, London, United Kingdom.","WM  may be a conventional window manager that may manage GUI elements, such as widgets, dialog boxes, and windows, that may be part of the OS , TCE , and APP . The GUI elements may be displayed on an output device . The WM  may also be configured to (1) capture one or more positions of interactions with input devices  and\/or other data associated with the input devices , and (2) provide the positions and\/or data to, for example, OS , APP , and\/or TCE . The positions and\/or data may be provided in messages that are sent to the OS , APP , and\/or TCE . Examples of window managers that may be used to implement WM  may include, but are not limited to, X windows, GNOME, and KDE, which are often used with the Linux operating system, and window managers used with the Microsoft Windows Phone, Microsoft Windows XP, Microsoft Windows Vista, and Microsoft Windows 7 operating systems. It should be noted that other window managers or components that implement various functions associated with window managers may be used to implement WM .","APP  may be designed to perform a particular task or tasks. APP  may be an executable and\/or interpretable version of a software application that may be written in a programming language, such as C, C++, or some other programming language. The programming environment may be a statically typed development environment. Some or all of APP  may be written by a user of computing device , supplied by a vendor, or generated by TCE . Some or all of APP  may operate under the control of OS . APP  may include computer-executable instructions and\/or data that may implement one or more embodiments of the invention.","TCE  may include hardware-based and\/or software-based logic, which may provide a computing environment that may allow various tasks, related to various disciplines, such as mathematics, science, engineering, mechanics, physics, medicine, business, biology, and\/or finance, to be performed.","In addition, the TCE  may perform matrix and\/or vector formulations that may be used for data analysis, data visualization, application development, simulation, modeling, and\/or algorithm development. These matrix and\/or vector formulations may be used in many areas, such as mathematics, science, engineering, mechanics, physics, medicine, business, biology, and\/or finance.","The TCE  may further provide functions and\/or tools for generating, for example, plots, surfaces, images, volumetric representations, or other representations. The TCE  may provide these functions and\/or tools using toolboxes (e.g., toolboxes for signal processing, image processing, data plotting, and\/or parallel processing). In addition, the TCE  may provide these functions as block sets. The TCE  may also provide these functions in other ways, such as via a library or a database.","Examples of TCEs that may be adapted to implement one or more embodiments of the invention may include, but are not limited to, Simulink\u00ae, Stateflow\u00ae, Simscape\u2122, SimMechanics\u2122, and SimEvents\u00ae, which are available from MathWorks, Inc.; Unified Modeling Language (UML); profiles associated with UML (e.g., Modeling Analysis and Real-Time Embedded Systems (MARTE), Systems Modeling Language (SysML), Avionics Architecture Description Language (AADL)); GNU Octave from the GNU Project; MATRIXx and LabView\u00ae from National Instruments; Mathematica from Wolfram Research, Inc.; Mathcad from Mathsoft Engineering & Education Inc.; Maple from Maplesoft; Extend from Imagine That, Inc.; Scilab and Scicos from The French Institution for Research in Computer Science and Control (INRIA); Modelica or Dymola from Dynasim AB; VisSim from Visual Solutions; SoftWIRE from Measurement Computing Corporation; WiT from DALSA Coreco; Advanced Design System, VEE Pro, and SystemVue from Agilent Technologies, Inc.; Vision Program Manager from PPT Vision, Inc.; Khoros from Khoral Research, Inc.; VisiQuest from Pegasus Imaging Corporation; Gedae from Gedae, Inc.; Virtuoso from Cadence Design Systems, Inc.; Rational Rose, Rhapsody, and Tau from International Business Machines (IBM), Inc.; SCADE from Esterel Technologies; Working Model 2D from Design Simulation Technologies, Inc.; Working Model from Design Simulation Technologies, Inc.; Computer Aided Three-dimensional Interactive Application (CATIA) and SolidWorks from Dassault Systems; and Ptolemy from the University of California at Berkeley.","An exemplary programming and execution environment  that may implement one or more embodiments of the present invention is illustrated in . Referring to , the programming and execution environment  may include a statically typed development environment  that may use a statically typed language  and a dynamically typed development environment  that may use a dynamically typed language . The statically typed development environment  may include an editor  for generating application , which may contain code (e.g., source code) written in a statically typed language. The dynamically typed development environment  may also include an editor .","The statically typed development environment  may generate the statically typed application , which may use standard functions and services provided by statically typed execution environment . The standard services may include loading and executing application . The dynamically typed execution environment  may provide similar functions and services for a dynamically typed function . TCE  is an example of a dynamically typed execution environment .","A type-safe API generator  provided in the programming and execution environment  may enable communication between the statically typed development environment  and the dynamically typed development environment . Specifically, the type-safe API generator  may analyze a dynamically typed function  developed in the dynamically typed development environment . The type-safe API generator  may generate an implementation of a statically typed function  that may be suitable for use in the statically typed development environment . The statically typed function  may invoke the dynamically typed function . This analysis and generation may be performed before the source code of the statically typed program  is compiled into object code.","Alternatively, the analysis and generation may be performed while the statically typed program  is executing. Here, for example, after the statically typed execution environment  sends a call to a dynamically typed function  in the dynamically typed execution environment , the type-safe API generator  may generate an implementation of the function in the statically typed language  of the statically typed development environment . The type-safe API generator  may compile and load this implementation dynamically into the statically typed execution environment .","According to various embodiments, the statically typed programming language may include a language, where a data type of data may be determined before runtime, such as C#. The dynamically typed programming language may include a language, where a data type of data may be determined at runtime, such as MATLAB. The statically typed execution environment  may include, for example, the Common Language Runtime (CLR) developed by Microsoft, and the dynamically typed execution environment  may include, for example, the MATLAB Compiler Runtime developed by the MathWorks, Inc.","When a statically typed language and a dynamically typed language are used simultaneously in an exemplary software program, the application generated in the statically typed language may make a call to a function in the dynamically typed language. Various embodiments may manage data conversion between the statically typed language and the dynamically typed language in both directions, i.e. from the statically typed language to the dynamically typed language and from dynamically typed language to the statically typed language.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIGS. 3A","FIG. 3A","FIG. 3B","FIG. 4A"],"b":["3","4","210","380","350","210"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 3A","b":["300","312","312","300","324","322"]},"A statically typed function specification  may be provided in a statically typed interface . The interface , may be, for example, a prototype definition. In an embodiment, a user may provide at least a part of the statically typed interface . According to other embodiments, the statically typed interface  may be automatically generated using, in part, data derived from runtime analysis of the typical uses of dynamically typed function . Automatic generation of the statically typed interface  may use, in part, data provided by the user. The statically typed function specification  may be analyzed to determine a function signature associated with the statically typed function specification . The function signature may include a name of the function. The function signature may also include names and data types of the inputs and\/or the outputs of the function that may be defined in the statically typed function specification . The statically typed function specification  may include zero or more inputs and zero or more outputs. The statically typed function specification  may also include zero or more statically typed function parameters .","After the statically typed function specification  is provided one or more dynamically typed functions  in the dynamically typed language  that match the statically typed function specification  may be identified. The identification may be done, for example, by analyzing a dynamically typed function specification  associated with the dynamically typed function . The dynamically typed function specification  may include zero or more dynamically typed function parameters . The dynamically typed function specification  may also include zero or more inputs and zero or more outputs.","After identifying one or more dynamically typed functions  in the dynamically typed language  that match the statically typed function specification , a type-safe API generator  may automatically generate a statically typed function  as a proxy of the identified dynamically typed function  in the statically typed language . The statically typed function  may invoke the dynamically typed function  from the statically typed language . The statically typed function  may include a statically typed function specification  that matches the statically typed function specification , and a statically typed function parameter  that matches the statically typed function parameter . The statically typed implementation  of the statically typed function  may invoke the dynamically typed function  through a dynamically typed function specification . The invoking may cause the execution of the dynamically typed function implementation  of the dynamically typed function .","According to various embodiments, the statically typed function  and\/or the dynamically typed function  may have multiple input and\/or output parameters. Alternatively, the statically typed function  and\/or the dynamically typed function  may have no input parameters and\/or no output parameters.","Referring now to , an exemplary embodiment is illustrated where a dynamically typed function  may be requested by a statically typed language . In  rectangles represent processes and the ellipses represent data elements.","As illustrated in , the dynamically typed function  may be, for example, a MATLAB function . The MATLAB function  may be provided to the MATLAB function deployment tool , which may generate from that function  a type-unsafe API. The MATLAB function  may be invoked from the statically typed language  using a type-unsafe API , for example a vendor supplied API such as an API provided by the MathWorks, Inc.","Before using the MATLAB function  in a program or an application generated in the statically typed language , a type-safe API  may be generated by a type-safe API generator , for example by following the process illustrated in . The type-safe API generator  may automatically generate the type-safe API . The generated type-safe API  may be used to convert a data type of the zero or more input parameters to the MATLAB function  from a data type that may be used by the statically typed language  to a data type recognized by the dynamically typed language , such as the MATLAB language. The user may provide a type-safe interface , such as the statically typed interface , and type conversion rules  to the type-safe API generator  for controlling and\/or customizing the conversion of data types in the dynamically typed language  to data types in the statically typed language . Alternatively, the data types of the parameters of the MATLAB function  may be passed by reference to the statically typed language without being converted.","The type-safe API  generated by the type-safe API generator  may interact with the data conversion engine  and the type-unsafe API  for converting the data type of the zero or more outputs from the dynamically typed function  to data types that may be used by the statically typed language . A more detailed description of some of the technical details is provided below in connection with  in a functional diagram for an exemplary implementation. In , rectangles represent processes and the ellipses represent data elements.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 4A","FIG. 4A"],"b":["310","402","310","300","410","300","330","412","412","330","412","320"]},"Referring to ,  and , a MATLAB program  may comprise multiple MATLAB files and MATLAB functions . A MATLAB function  may perform one or more operations on input data  and , producing one or more output results  and . The data types of the inputs and outputs , ,  and  may be different. A MATLAB function  may contain one or more type-specific logic blocks  and . A type-specific logic block  or  may perform different operations depending on the type of the input data. For example, function invocation  may provide input data  of input data type  to MATLAB function . This may activate data type specific block  and produce output data  of data type . The output data  may be returned via function return .","Function invocation  may provide input data  of input data type  to MATLAB function . This may activate data type specific block  and produce output data  of data type . The output data  may be returned via function return . Accordingly, a single MATLAB function  may accept various input data types  and . This is not the case for statically typed functions.","A parameter  of a statically typed function  may accept data of a fixed type. For example, statically typed function  may accept data of type  and return data of type . Data types  and  may be defined in statically typed language . A combination of input and output data types  and  may define a different statically typed function . Since a single MATLAB function  may accept and return many different combinations of input and output data types  and , multiple statically typed functions  may be required to call a single MATLAB function  with a combination of input and output data types  and . The target environment interface  may comprise these multiple statically typed functions . According to various embodiments, the user may provide the statically typed functions . Alternatively, a signature discovery tool  may analyze the dynamically typed function specification , usage of MATLAB files  and MATLAB functions  and automatically generate all or part of the target environment interface . Statically typed interface  is an example of target environment interface.","A type-safe API generation tool  may generate the type-safe API  using, for example, the target environment interface  and information about MATLAB files , such as the dynamically typed function specification . A statically typed language compiler, such as the C# compiler developed by Microsoft, may derive object code from API  with the type-safe API . This object code and additional files  may be packaged together in a deployable component  suitable for use in the statically typed language. The deployable component  may contain a statically typed function  capable of calling the implementation of the MATLAB function  provided in the MATLAB file . According to various embodiments, the deployable component  may be a part of a program or an application  provided in the statically typed language.","As illustrated in , interaction with the MATLAB file  may be achieved using API  that depends on data types of the dynamically typed language , i.e. MATLAB. Embodiments of the present invention may generate a type-safe API  for each exported dynamically typed function. API  and the type-safe API  may be compiled by a compiler  for generating the deployable component  at the target environment, i.e. the statically typed development environment. According to various embodiments, a test suite for the dynamically typed language may be automatically generated based on the specification of the type-safe API . The test suite may be used to check whether the dynamically typed functions conform to the specification provided by the statically typed language interface. The test suite, i.e. the dynamically typed language data type validating API , may optionally be re-run for determining if the data conversion violates any type constraints.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 5A","FIG. 4A"],"b":["500","502","504","506","508","510"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 5B","b":["550","552","554","556","558","560","562","564","566"]},"According to various embodiments, target environments may support class instances and\/or methods. Some environments may support global, i.e. unclassified functions. Unclassified functions may include functions that are not part of a class. Both MATLAB and the target environments may support passing references to executable data as function parameters. If the programming environments permit, function parameters may be passed between the native environment and the MATLAB environment. For example, MATLAB function handles may be returned to the native environment and invoked in the native environment. Invocation may result in activation of a corresponding compiler such as, for example, the MATLAB Compiler Runtime (MCR), and execution of the appropriate code. Alternatively, native function references, such as delegates or functions, may be passed to MATLAB and invoked by the MATLAB functions.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5C","b":["580","582","584","586"]},"The following example illustrates the type safe API generation in the MATLAB\u00ae programming environment. The MATLAB\u00ae programming environment is used in connection with the following example for illustrative purposes only, and should not be construed limiting. The example produces a MATLAB-based software component with dual, parallel, type safe and non-type safe interfaces. The generated component is able to run outside of the MATLAB\u00ae environment, and therefore may be used in other programming environments, such as, for example, Microsoft's Visual Studio. The generated type safe interface provides one or more interface functions containing only types native to the external programming environment. Accordingly, developers working in the external environment do not have to learn how to use data types of the MATLAB\u00ae language.","Consider, for example, the following exported function named addOne. The function may add 1 to its input. The input may be numeric and may be either a scalar or a matrix.",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function y = addOne(x)"]},{"entry":[{},"% ADDONE Add one to numeric input."]},{"entry":[{},"%"]},{"entry":[{},"% Helper function used in testing type-safe API."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ~isnumeric(x)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"error(\u2018Input must be numeric. Input was %s.\u2019, class(x));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},"y = x + 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the foregoing code segment, function y=addOne(x) defines the function name, i.e. addOne, and specifies the inputs, i.e. x, and outputs, i.e. y. The block of comment text following the symbol % explains the purpose and operation of the function. The comment text is not executed when the code segment is executed. The first statement in the function, if \u02dcisnumeric(x), tests the input, x, to determine if the input is numeric. The \u02dcoperator represents logical negation. Accordingly, this line of code can be read as \u201cif the input matrix x is not numeric\u201d. If the input is not numeric, addOne invokes the error function to indicate that the function received an input that the function cannot process. Finally, the function addOne adds one to the input with the statement, y=x+1. Addition represented by the symbol \u201c+\u201d is a matrix operator that adds one to each element of x. According to various embodiments x may be a 1-by-1 matrix, i.e. a scalar. Note that the dynamic nature of the MATLAB\u00ae language allows calling the addOne function with many different types of inputs: integers, doubles, scalars and matrices.","A component may be created from the addOne function using either mcc or deploytool. For example, the component may be named Antikythera and the addOne class function may be placed into a class named Mechanism:","mcc \u2018-B\u2019 \u2018dotnet:Antikythera,Mechanism,2.0,private,local\u2019 \u2018addOne\u2019","The IAddOne interface is a .NET interface that defines the boundary between the statically typed language, e.g. C#, and the dynamically typed function addOne. As noted above, in the MATLAB\u00ae language, the addOne function may be called with many different types of inputs. The IAddOne interface specifies the valid ways to invoke the addOne function in the statically typed language C#: with scalar integers, scalar doubles, a vector of doubles and a 2D matrix of doubles. The first three functions in the IAddOne interface take the same type, e.g. integer, and number of inputs, e.g. one. Each function may express a different order of inputs and outputs, which demonstrates the flexibility of the function matching algorithm. The IAddOne interface consists of types native to the statically typed language C#. There are no non-native types, e.g. no MATLAB types, in the IAddOne interface. The IAddOne interface specifies six overloads of the addOne function. All of the overloads may have one input and one output to match the MATLAB addOne function, though the type and position of these parameters may vary:",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public interface IAddOne"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int addOne(int x);"]},{"entry":[{},"void addOne(out int y, int x);"]},{"entry":[{},"void addOne(int x, out int y);"]},{"entry":[{},"double addOne(double x);"]},{"entry":[{},"System.Double[ ] addOne(System.Double[ ] x);"]},{"entry":[{},"System.Double[,] addOne(System.Double[,] x);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The IAddOne interface may be compiled into an assembly.","csc \/target:library \/out:IAddOne.dll IAddOne.cs","In this case, code that contains only the IAddOne interface may be created. The IAddOne interface may already be part of an already-compiled assembly at the user site. In fact, the interface may be created before the MATLAB function is written. There are many ways to create the interface. The approach used in the present example is for illustrative purposes only and should not be construed as limiting.","If a program is written in the statically typed language C#, and the program calls the addOne function with a combination of inputs and\/or outputs that differs from those specified in the IAddOne interface, the compiler of the statically typed language C# will deliver an error message. The error message indicates that the type safe requirements are not met. Accordingly, the error may be identified by the compiler before the runtime of the program.","Once the IAddOne interface has been compiled into an assembly and the addOne function has been compiled into a non-type safe component, ntswrap tool can analyze the assembly and component for generating a type safe wrapper. The type safe component automatically manages the conversion of the native static types of the IAddOne interface into the MATLAB types required by the inputs of the addOne function, and the conversion of the MATLAB outputs of the addOne function into the native return values of the IAddOne interface.","The ntswrap tool may be used to generate a type-safe API. According to various embodiments, this tool may be available as a MATLAB function or a Windows console executable.","ntswrap.exe -c Antikythera.Mechanism -i IAddOne -a IAddOne.dll","ntswrap may accept command line switches in any order. A type-safe API for the Builder NE class Mechanism may be generated in the namespace AntikytheraNative. The signatures given by the .NET interface IAddOne may be matched. The binary definition of IAddOne is identified in IAddOne.dll. The binary definition of Mechanism is identified in AntikytheraNative.dll. The -b switch may be used for specifying the path to the directory containing the Builder NE component. This produces a type-safe API in the form of a new class MechanismIAddOne, which is generated into MechanismIAddOne.cs. By default, ntswrap may compile the source code into an assembly MechanismIAddOne.dll.","The type safe component generated by the ntswrap tool may then be used by a statically typed program. If the statically typed language, e.g. C#, is an object-oriented language, the generated type safe component may contain a generated class, e.g. MechanismIAddOne that conforms to the IAddOne interface. The client C# program may create an instance of the MechanismIAddOne class, and invoke the functions in the IAddOne interface via the methods in the generated MechanismIAddOne class. The following exemplary main program calls all the overloads of addOne defined by the IAddOne interface:",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using System;"},{"entry":"using System.Text;"},{"entry":"public class Program"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static public int Main(string[ ] argList)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"% The object instance is created:"]},{"entry":[{},"IAddOne m = new MechanismIAddOne( );"]},{"entry":[{},"try"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Output as return value"]},{"entry":[{},"int one = 1;"]},{"entry":[{},"int two = m.addOne(one);"]},{"entry":[{},"Console.WriteLine(\u201caddOne({0}) = {1}\u201d, one, two);"]},{"entry":[{},"\/\/ Output: first parameter"]},{"entry":[{},"int i16 = 16;"]},{"entry":[{},"int o17;"]},{"entry":[{},"m.addOne(out o17, i16);"]},{"entry":[{},"Console.WriteLine(\u201caddOne({0}) = {1}\u201d, i16, o17);"]},{"entry":[{},"\/\/ Output: second parameter"]},{"entry":[{},"int three;"]},{"entry":[{},"m.addOne(two, out three);"]},{"entry":[{},"Console.WriteLine(\u201caddOne({0}) = {1}\u201d, two, three);"]},{"entry":[{},"\/\/ Scalar doubles"]},{"entry":[{},"double i495 = 495.0;"]},{"entry":[{},"double third = m.addOne(i495);"]},{"entry":[{},"Console.WriteLine(\u201caddOne({0}) = {1}\u201d,i495, third);"]},{"entry":[{},"\/\/ Vector addition"]},{"entry":[{},"% A vector of doubles is created:"]},{"entry":[{},"System.Double[ ] i = { 30, 60, 88 };"]},{"entry":[{},"% System adds one to the vector of doubles:"]},{"entry":[{},"System.Double[ ] o = m.addOne(i);"]},{"entry":[{},"Console.WriteLine("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201caddOne([{0} {1} {2}]) = [{3} {4} {5}]\u201d,"]},{"entry":[{},"i[0], i[1], i[2], o[0], o[1], o[2]);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Matrix addition"]},{"entry":[{},"System.Double[,] i2 = { {0, 2}, {3, 1} };"]},{"entry":[{},"System.Double[,] o2 = m.addOne(i2);"]},{"entry":[{},"Console.WriteLine("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201caddOne([{0} {1}; {2} {3}]) = [{4} {5}; {6} {7}]\u201d,"]},{"entry":[{},"i2[0,0], i2[0,1], i2[1,0], i2[1,1],"]},{"entry":[{},"o2[0,0], o2[0,1], o2[1,0], o2[1,1]);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"catch (Exception Ex)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Console.WriteLine(\u201cException \u201d + Ex.Message);"]},{"entry":[{},"return(\u22121);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Console.WriteLine(\u201cNo Exceptions\u201d);"]},{"entry":[{},"return(0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"csc.exe \/debug \/out:AddMaster.exe AddMaster.cs"]},{"entry":[{},"\/r:MechanismIAddOne.dll \/r:IAddOne.dll \/r:AntikytheraNative.dll"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"c:\\>AddMaster"]},{"entry":[{},"addOne(1) = 2"]},{"entry":[{},"addOne(16) = 17"]},{"entry":[{},"addOne(2) = 3"]},{"entry":[{},"addOne(495) = 496"]},{"entry":[{},"addOne([30 60 88]) = [31 61 89]"]},{"entry":[{},"addOne([0 2; 3 1]) = [1 3; 4 2]"]},{"entry":[{},"No Exceptions"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"According to another exemplary implementation, both primitive (strings and arrays) and composite (structures).NET native types may be used in a single program. Composite .NET data types may be permitted both as inputs and outputs. The following example defines a second interface IAdd. The IAdd interface includes functions that take numeric and non-numeric inputs. The IAdd interface does not call the addOne MATLAB function from the previous example. Instead, the IAdd interface calls a more flexible MATLAB function named add:",{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"function result = add(x, y)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"% Add numbers or concatenate strings. Mixed inputs yield string output."},{"entry":"% Type check inputs"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if ~isnumeric(x) && ~ischar(x) && ~isstruct(x)"]},{"entry":[{},"\u2003error(\u2018add: first input must be string, struct, or number, was"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2018\u2019%s\u2018\u2019\u2019, class(x));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},"if ~isnumeric(y) && ~ischar(y)"]},{"entry":[{},"\u2003error(\u2018add: second input must be string or number, was \u2018\u2019%s\u2018\u2019\u2019,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"class(y));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"% Perform addition \/ concatenation"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if isnumeric(x)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if isnumeric(y)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"result = x + y;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"x = sprintf(\u2018%d \u2019, x);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elseif isnumeric(y)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"y = sprintf(\u2018%d \u2019, y);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elseif isstruct(x)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"data = cellfun(@(f) x.(f), fieldnames(x), \u2018UniformOutput\u2019,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"false);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"x = [data{:}];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},"if ~exist(\u2018result\u2019, \u2018var\u2019)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"result = [x, \u2018 \u2019, y];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The add function accepts strings, doubles and structures. If the inputs are numeric matrices, the add function adds the inputs together. If any of the inputs is a string, the add function changes the other input into a string and concatenates the strings together. Concatenating two strings is similar to adding two strings. If the inputs are structures containing strings, the add function concatenates the fields of the structure together.","The .NET interface IAdd defines the behavior of the add function in a statically typed language. The IAdd interface specifies valid ways to call the add function from the statically typed language, e.g. C#, using only types native to the statically typed language. The complexity of the IAdd interface demonstrates that the type safe API generation process is not limited to simple, primitive types, but that it is capable of managing complex, structured, .NET native types. The generated wrapper code marshals, i.e. converts, the .NET structures to MATLAB structures and vice versa, as necessary.","One or more embodiments of the invention may be implemented in a distributed environment.  illustrates an example of a distributed environment  that may implement one or more embodiments of the invention. Referring to , environment  may contain various components including computing device , target environment , service provider , cluster , and communications network . Note that the distributed environment  is just one example of a distributed environment that may be used with one or more embodiments of the invention. Other distributed environments that may be used with one or more embodiments of the invention may contain more components or fewer components than illustrated in . Moreover, the components in the distributed environments may be arranged differently than the arrangement shown in . In addition, the distributed environments may implement various \u201ccloud computing\u201d frameworks.","Details of computing device  were described above with respect to . In distributed environment , computing device  may, among other things, exchange information (e.g., data) with other components in the communications network  (e.g., target environment , service provider , and cluster ). Computing device  may interface with the communications network  via a communication interface .","Target environment  may be configured to interpret and\/or execute, for example, one or more embodiments of the invention, which may be generated in or otherwise made available to the distributed environment . The communications network  may include digital and\/or analog aspects. Information exchanged in communications network  may include machine-readable information having a format that may be adapted for use, for example, in the communications network  and\/or with one or more components in the communications network .","For example, the information may be encapsulated in one or more packets that may be used to transfer the information through the communications network . Information may be exchanged between components in the communications network  using various communication protocols, such as, but not limited to, the Internet Protocol (IP), Asynchronous Transfer Mode (ATM), Synchronous Optical Network (SONET), the User Datagram Protocol (UDP), Transmission Control Protocol (TCP), Institute of Electrical and Electronics Engineers (IEEE) 802.11, or other communication protocol.","The communications network  may comprise various network devices, such as gateways, routers, switches, firewalls, servers, repeaters, address translators, etc. Some, or all, of the communications network  may be wired (e.g., using wired conductors, optical fibers) and\/or wireless (e.g., using free-space optical (FSO), radio frequency (RF), acoustic transmission paths). Some, or all, of the communications network  may include a substantially open public network, such as the Internet. Some, or all, of the communications network  may include a more restricted network, such as a private corporate network or virtual private network (VPN). It should be noted that implementations of communications networks and\/or devices operating on communications networks described herein are not limited with regards to, for example, information carried by the communications networks, protocols used in the communications networks, and\/or the architecture\/configuration of the communications networks.","Cluster  may include a number of units of execution (UEs)  that may execute or interpret one or more embodiments of the invention or portions thereof on behalf of computing device  and\/or another component, such as service provider . The UEs  may reside on a single device or chip or on multiple devices or chips. For example, the UEs  may be implemented in a single ASIC or in multiple ASICs. Likewise, the UEs  may be implemented in a single computer system or multiple computer systems. Other examples of UEs  may include, for example, some combination of FPGAs, CPLDs, ASIPs, processors, multiprocessor systems-on-chip (MPSoCs), graphic processing units, and\/or microprocessors. The UEs  may be configured to perform operations on behalf of another component in the distributed environment . For example, in an embodiment, the UEs  are configured to execute portions of code associated with TCE . Here, TCE  may dispatch certain activities pertaining to one or more embodiments of the invention to the UEs  for execution. The service provider  may configure cluster  to provide, for example, the above-described services to computing device  on a subscription basis (e.g., via a web service).","The foregoing description of embodiments is intended to provide illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from a practice of the invention. For example, non-dependent acts may be performed in parallel. Also, the term \u201cuser\u201d, as used herein, is intended to be broadly interpreted to include, for example, a computing device (e.g., a workstation) or a user of a computing device, unless otherwise stated.","It will be apparent that one or more embodiments, described herein, may be implemented in many different forms of software and hardware. Software code and\/or specialized hardware used to implement embodiments described herein is not limiting of the invention. Thus, the operation and behavior of embodiments were described without reference to the specific software code and\/or specialized hardware\u2014it being understood that one would be able to design software and\/or hardware to implement the embodiments based on the description herein.","Further, certain embodiments of the invention may be implemented as logic that performs one or more functions. This logic may be hardware-based, software-based, or a combination of hardware-based and software-based. Some or all of the logic may be stored in one or more tangible computer-readable storage media and may include computer-executable instructions that may be executed by processing logic, such as processing logic . The computer-executable instructions may include instructions that implement one or more embodiments of the invention. The tangible computer-readable storage media may be volatile or non-volatile and may include, for example, flash memories, dynamic memories, removable disks, and non-removable disks.","No element, act, or instruction used herein should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d is intended to include one or more items. Where only one item is intended, the term \u201cone\u201d or similar language is used. Further, the phrase \u201cbased on\u201d is intended to mean \u201cbased, at least in part, on\u201d unless explicitly stated otherwise.","It is intended that the invention not be limited to the particular embodiments disclosed above, but that the invention will include any and all particular embodiments and equivalents falling within the scope of the following appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more embodiments described herein and, together with the description, explain these embodiments. In the drawings:",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
