---
title: Tool for converting SQL queries into portable ODBC
abstract: A method, computer program product and system for converting Structured Query Language (SQL) statements into the Open Database Connectivity (ODBC) standard. The source code of a database application may be parsed to identify one or more keywords. These keywords may be used to identify SQL statements as well as variables that are used to process the SQL statements. Upon identifying the SQL statements, the SQL statements may be evaluated. The SQL statements evaluated may then be matched with particular functions in a function library, i.e., a collection of functions stored in data files. These functions may implement particular ODBC calls thereby enabling SQL statements to be converted into the ODBC standard. A function call, i.e., a call to that function, may be substituted for the corresponding SQL statement. The function call may then be implemented resulting in the execution of the ODBC calls.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06877000&OS=06877000&RS=06877000
owner: International Business Machines Corporation
number: 06877000
owner_city: Armonk
owner_country: US
publication_date: 20010822
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND INFORMATION","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to the field of database management systems, and more particularly to converting Structured Query Language (SQL) queries into an Open Database Connectivity (ODBC) standard which is portable across various database management systems.","Databases are computerized information storage and retrieval systems. A Relational Database Management System (RDBMS) is a Database Management System (DBMS) which uses relational techniques for storing and retrieving data. Relational databases are organized into tables which consist of rows and columns of data. The rows are formally called tuples. A database will typically have many tables and each table will typically have multiple tuples and multiple columns. The tables are typically stored on random Access Storage Devices (DASD) such as magnetic or optical disk drives for semi-permanent storage.","A DBMS is structured to accept commands to store, retrieve, and delete data. One widely used and well known set of commands is called the Structured Query Language (SQL). The current SQL standard is known informally as SQL\/92. The definitions for SQL provide that a DBMS should respond to a particular query with a particular set of data given a specified database content, but the method that the DBMS uses to actually find the required information in the tables on the disk drives is left up to the DBMS. Typically there will be more than one method that can be used by the DBMS to access the required data. The DBMS will optimize the method used to find the data requested in a query in order to minimize the computer time used and, therefore, the cost of doing the query.","A method for accessing data in a DBMS may be to embed SQL statements within an application program, e.g., COBOL, C, C++. Typically, a DBMS may include one or more language specific pre-compilers. A pre-compiler may be configured to process the language program source code including the embedded SQL statements. Processing may include removing SQL statements from the source code, checking the syntax of the SQL statements and inserting calls to private DBMS routines in substitution of the SQL statements. Since each DBMS may include one or more language specific pre-compilers, an application program with embedded SQL statements that is executed on more than one DBMS may have to be pre-compiled using the language specific pre-compiler for each DBMS.","However, an application program using SQL queries may be able to be executed on more than one DBMS without requiring the use of language specific pre-compilers through the use of the Open Database Connectivity (ODBC) standard. The ODBC standard, promulgated by Microsoft\u2122, provides a standard database access Application Programming Interface (API) that is portable across multiple database management systems. Subsequently, an application may utilize the ODBC interface to access data in various DBMSs using SQL. That is, the ODBC interface provides interoperability, where a single application program may access data from different DBMSs. This interoperability may allow an application developer to develop, compile, and ship an application program without targeting a specific DBMS. The ODBC interface is more clearly described in ODBC 2.0 Programmer's Reference and SDK guide, Microsoft Press (1994), which is hereby incorporated herein by reference.","However, not all application programs are ODBC compliant. That is, not all application programs with embedded SQL statements may be able to utilize an ODBC interface to access data in various DBMSs using SQL.","It would therefore be desirable to develop a tool to convert an application that uses embedded SQL API calls to access data in a DBMS to an application that uses ODBC API calls to access data in a DBMS.","The problems outlined above may at least in part be solved in some embodiments by matching Structured Query Language (SQL) statements with functions storing particular Open Database Connectivity (ODBC) calls in a library thereby converting SQL statements into the ODBC standard.","In one embodiment of the present invention, a method for converting SQL statements into the ODBC standard may comprise the step of parsing the source code of an application comprising embedded SQL calls to identify one or more keywords, e.g., \u201cEXEC SQL SELECT\u201d, \u201cEXEC SQL BEGIN DECLARE\u201d, \u201cEXEC SQL END DECLARE\u201d. The keywords may be used to identify SQL statements, e.g., SELECT<clause>FROM<clause>WHERE<clause>, as well as variables that are used to process the SQL statements. Upon identifying the variables, a data structure associated with each variable may be built. These data structures may be used to store information required to process the SQL statements as well as store the results of processing the SQL statements. Upon identifying the SQL statements, the SQL statements may be evaluated. That is, the particular query requested and the operations to be performed to process the request may be determined.","The parameters in the SQL statements evaluated may be extracted where the parameters comprise data required to process the SQL statements, e.g., data that identifies the tables and columns from which the data is being selected in a SELECT SQL statement. The SQL statements evaluated may then be matched with particular functions in a function library, i.e., a collection of functions stored in data files. For example, the SELECT SQL statement may correspond to a particular function in the function library. These functions may store particular ODBC calls thereby enabling SQL statements to be converted into the ODBC standard.","The parameters extracted from the SQL statements as well as the addresses associated with the data structures built may be incorporated in the matched function. A function call, i.e., a call to that function, may be substituted for the corresponding SQL statement. The new version of the application, i.e., the application source code comprising the substituted function call, may be compiled and executed. Upon executing the new version of the application, the function call may then be implemented resulting in the execution of the ODBC calls. The results from the execution of the ODBC calls may be returned in the appropriate data structures based on the addresses of the data structures incorporated into the function. These results are the same results as if the SQL statements were directly processed instead of converting the SQL statements into the ODBC standard.","The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention.","FIG. \u2014Database System",{"@attributes":{"id":"P-00019","num":"00019"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","110","130","120","120","130","140","150","150","100","110","130","150","110","120","120","130","110","120","130","100","130","110"]},"A database application of client  may issue Structured Query Language (SQL) statements to server  that are commands to store, retrieve or delete data stored in relational database . These SQL statements may be converted into the ODBC standard as described further hereinbelow in conjunction with . By converting the SQL statements into the ODBC standard, the application may be portable across various database management systems. A detailed description of client  is provided below.","FIG. \u2014Hardware Configuration of Client",{"@attributes":{"id":"P-00022","num":"00022"},"figref":["FIG. 2","FIGS. 3A and 3B","FIGS. 3A and 3B"],"b":["110","110","210","212","240","210","2","250","240","240","250","250","216","212","110","214","218","234","212","240","250","214","218","220","220","250"]},"Communications adapter  interconnects bus  with an outside network enabling client  to communicate with other such systems via a Local Area Network (LAN), e.g., Ethernet, Token Ring, ARCnet, or a Wide Area Network (WAN), e.g., Internet. Input\/Output devices are also connected to system bus  via a user interface adapter  and display adapter . Keyboard , mouse  and speaker  are all interconnected to bus  through user interface adapter . Event data may be input to client  through any of these devices. A display monitor  is connected to system bus  by display adapter . In this manner, a user is capable of inputting to client  through keyboard  or mouse  and receiving output from client  via display  or speaker .","Implementations of the invention include implementations as a computer system programmed to execute the method or methods described herein, and as a computer program product. According to the computer system implementation, sets of instructions for executing the method or methods are resident in the random access memory  of one or more computer systems configured generally as described above. Until required by the computer system, the set of instructions may be stored as a computer program product in another computer device, for example, in disk drive  (which may include a removable memory such as an optical disk or floppy disk for eventual use in the disk drive ). Further, the computer program product can also be stored at another computer and transmitted when desired to the user's workstation by a network or by an external network such as the Internet. One skilled in the art would appreciate that the physical storage of the sets of instructions physically changes the medium upon which it is stored so that the medium carries computer readable information. The change may be electrical, magnetic, chemical, biological, or some other physical change.","FIGS. A and B\u2014Method for Converting Structured Query Language (SQL) Queries into an Open Database Connectivity (ODBC) Standard",{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIGS. 3A and 3B","b":["300","300"]},"In step , the program of the present invention may parse the source code of a database application to identify one or more keywords, e.g., \u201cEXEC SQL\u201d, \u201cEXEC SQL BEGIN DECLARE\u201d, \u201cEXEC SQL END DECLARE\u201d. The source code of the database application may comprise one or more keywords that are used to indicate embedded SQL statements. For example, the keywords \u201cEXEC SQL\u201d may signify the beginning of an SQL statement, e.g., SELECT<clause>FROM<clause>WHERE<clause>, comprising an SQL call. The end of the segment may be indicated by a semi-colon. The source code of the database application may comprise one or more keywords that are used to indicate variables that are required to process the SQL statements. For example, the keywords \u201cEXEC SQL BEGIN DECLARE\u201d may indicate the beginning of a list of variables that are used to process the SQL statements. The keywords \u201cEXEC SQL END DECLARE\u201d may indicate the end of the list of variables that are used to process the SQL statements. Each variable may have a data structure associated with it that may be used to store information required to process the SQL statements via ODBC, e.g., employee name=Bobby, as well as store the results of processing the SQL statements, e.g., name, social security number, phone number and address for Bobby, as further described below.","In step , upon identifying one or more keywords in step , one or more SQL statements may be identified. As stated above, the keywords \u201cEXEC SQL\u201d may signify the beginning of an SQL statement, e.g., SELECT<clause>FROM<clause>WHERE<clause>, where the <clauses> are parameters that provide data required to process the SQL statement as discussed further below. The end of the segment may be indicated by a semi-colon.","In step , one or more variables may be identified based on the one or more keywords identified in step . As stated above, the keywords \u201cEXEC SQL BEGIN DECLARE\u201d may indicate the beginning of a list of variables that are used to process the SQL statements. The keywords \u201cEXEC SQL END DECLARE\u201d may indicate the end of the list of variables that are used to process the SQL statements. For example, in the source code of the database application shown below","EXEC SQL BEGIN DECLARE SECTION;\n\n","EXEC SQL END DECLARE SECTION;","variables \u201cName\u201d, \u201cSSN\u201d, \u201cPhone\u201d and \u201cAddress\u201d may each be associated with a data structure configured to store information required to process the SQL statements via ODBC as well as store the results of processing the SQL statements, e.g., name, social security number, phone number and address.","In step , a data structure associated with each of the variables identified in step  may be built. These data structures may be used to store information required to process the SQL statements as well as store the results of processing the SQL statements. For example, referring to the source code of the database application illustrated above, a data structure of the variable \u201cSSN\u201d may be configured to provide the social security number of an employee in order to process an SQL statement. The data structures of the variables \u201cName\u201d, \u201cPhone\u201d and \u201cAddress\u201d may store the results of processing an SQL statement such as the name, phone number and address for employees.","In step , the SQL statements identified in step  may be evaluated. That is, the program may determine the particular query requested and the operations to be performed to process the request. For example, in the SELECT SQL statement, the SELECT <clause> may cause the retrieval of a subset of data from one or more existing tables stored in relational database  where the FROM <clause> identifies the table from which data is being selected. The items specified in the SELECT <clause> may determine the columns that will be returned in the result table from the table(s) identified in the FROM <clause>. The WHERE <clause> may then determine which rows should be returned in the result table.","In step , the parameters, e.g., <clauses>, from each of the one or more SQL statements evaluated in step  may be extracted. That is, the program may extract data required to process the SQL statement. For example, the program may extract the data in the SQL statement that identifies the table from which the query data is being selected in a SELECT SQL statement.","In step , the one or more SQL statements evaluated in step  may be matched with a particular function stored in a function library, i.e., a collection of functions stored in data files. For example, the SELECT SQL statement may correspond to a particular function in the function library. These functions may store particular ODBC calls thereby enabling SQL statements to be converted into the ODBC standard.","In step , the parameters extracted from the one or more SQL statements in step  as well as the address(es) of the data structure(s) built in step  may be incorporated in the function identified in step . For example, the data in the SQL statement that identifies the table from which the query data is being selected in a SELECT SQL statement may be incorporated into the function identified in step .","In step , a function call, i.e., a call to the function identified in step , may be substituted for each of the one or more SQL statements identified in step .","In step , the new version of the application source code comprising the function calls substituted for each of the one or more SQL statements identified in step  may be compiled. In step , the compiled new version of the application source code may then be executed.","In step , the function call may then be implemented resulting in the execution of ODBC calls. In step , the results from the execution of ODBC calls may be returned in the appropriate data structure(s) built in step  based on the address(es) of the data structure(s) incorporated into the function identified in step . For example, the name, address and phone number of the employee with the SSN of 111-11-1111 may be stored in the data structures name, address, and phone number, respectively. The converted application program returns the same results using ODBC to access the DBMS as the original applications program would using embedded SQL to access the DBMS.","In step , the database application may access the results from the appropriate data structure(s). In step , the database application may output the results in a variety of forms such as displaying the results on display . It is noted that other means of outputting the results would be recognized by an artisan of ordinary skill in the art and that such embodiments employing such means would fall within the scope of the present invention.","It is noted that method  may be executed in a different order presented and that the order presented in the discussion of  is illustrative. It is further noted that certain steps may be executed almost concurrently.","Although the method, computer program product and system are described in connection with several embodiments, it is not intended to be limited to the specific forms set forth herein, but on the contrary, it is intended to cover such alternatives, modifications, and equivalents, as can be reasonably included within the spirit and scope of the invention as defined by the appended claims. It is noted that the headings are used only for organizational purposes and not meant to limit the scope of the description or claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIGS. 3A and 3B"}]},"DETDESC":[{},{}]}
