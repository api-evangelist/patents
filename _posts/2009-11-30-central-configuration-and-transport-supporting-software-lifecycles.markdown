---
title: Central configuration and transport supporting software lifecycles
abstract: Implementations of the present disclosure provide computer-implemented methods including retrieving a predefined configuration model from a plurality of predefined configuration models electronically stored in a configuration repository, the predefined configuration model providing predefined configuration data for a particular software application, comparing the predefined configuration data to existing configuration data of one or more target systems to generate a first delta, a first system landscape including the one or more target systems, determining one or more configuration actions based on the first delta, and executing the one or more configuration actions to update a configuration state of the one or more target systems from an initial configuration state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572565&OS=08572565&RS=08572565
owner: SAP AG
number: 08572565
owner_city: Walldorf
owner_country: DE
publication_date: 20091130
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Typically, software solutions that implement business processes are developed, tested, and released before becoming available for productive use. In order to support the above stages of the software lifecycle, a number of landscape segments may be implemented by a central configuration system. For example, the central configuration system may implement a development landscape segment, where a software solution may be implemented and adapted; a test and quality assurance landscape segment, where the testing of the software solution can take place; and a production landscape segment, on which the software solution can be deployed for productive use.","Implementations of the present disclosure provide computer-implemented methods including retrieving a predefined configuration model from a plurality of predefined configuration models electronically stored in a configuration repository, the predefined configuration model providing predefined configuration data for a particular software application, comparing the predefined configuration data to existing configuration data of one or more target systems to generate a first delta, a first system landscape including the one or more target systems, determining one or more configuration actions based on the first delta, and executing the one or more configuration actions to update a configuration state of the one or more target systems from an initial configuration state.","In some implementations, the method further includes transporting the configuration state of the first system landscape to a second system landscape, the second system landscape comprising one or more target systems different from the one or more target systems of the first system landscape, comparing the predefined configuration data to transported configuration data to generate a second delta, determining one or more configuration actions based on the second delta, and executing the one or more configuration actions to update a configuration state of the one or more target systems of the second system landscape. In such implementations, the method can further include posting configuration steps to enable productive use of the software application, the first system landscape comprising a testing landscape and the second system landscape comprising a production landscape.","In some implementations, the method further includes executing consistency checks and functional testing of the one or more target systems.","In some implementations, the method further includes determining that execution of a configuration action failed, and executing one or more compensation actions, the compensation actions comprising at least one of reverting the configuration state to the initial configuration state, pausing execution of the configuration actions, and skipping the failed configuration action. In such implementations, the method can further include selecting the one or more compensation actions during execution of the one or more configuration actions.","In some implementations, the configuration data includes technical configuration data including at least one of property value pairs corresponding to settings of a processing engine, user role information, certificates and cross-system configuration data.","In some implementations, the configuration data includes business configuration data including at least one of table and view entries that describe a behavior of a business process.","Implementations of the present disclosure further provide a computer-readable storage medium coupled to one or more processors and having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with methods provided herein.","Implementations of the present disclosure also provide a system including a configuration repository that electronically stores a plurality of predefined configuration models, and one or more processors in communication with a computer-readable storage medium, the storage medium having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with methods provided herein.","The details of one or more implementations of the present disclosure are set forth in the accompanying drawings and the description below. Other features and advantages of the present disclosure will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.","As discussed in further detail herein, implementations of the present disclosure are generally directed to the consistent transport of technical and business configuration data along the software lifecycle, which can span one or more system landscapes. Exemplar system landscapes can include, but are not limited to, a development landscape, a test, or quality assurance landscape, and a production landscape. More specifically, implementations of the present disclosure can include a central configuration repository with one or more configuration models stored therein that support technical configuration attached to business processes and solutions, and that processes the configuration data through different lifecycle stages of software.","Referring now to , a block diagram of an exemplar system architecture  that can be used to execute implementations of the present disclosure is illustrated. The architecture  may represent any client\/server system that spans one or more networks. In one example, the architecture  represents a central configuration management system that can manage the lifecycle of software within a number of systems. For example, the architecture  may employ techniques to support technical configuration transport and processing consistently over a number of systems.","In some implementations, the architecture  includes a group of computer system landscapes that define a purpose within the software lifecycle. By way of one non-limiting example, a test system landscape can be defined for use in testing the robustness and functionality of software. In this example, the test system landscape can be grouped to form a test environment within the architecture . By way of another non-limiting example, a user may define a set of computer systems that are used for a development environment, a production environment, or other networked environment.","System landscapes may be represented by a number of back-end systems (or a logical grouping of a set of systems) that require similar processes, such as mobile clients. System landscapes may define a number of system roles. A system role represents the use of a system-client combination in systems of a logical component. The system role typically describes the usage criteria for a particular system-client combination in a user-specific system. Each role may include a role type that pertains to the function in a specific application system within a landscape. By way of one non-limiting example, a programmer role type may be assigned as a developer function for an application in a development landscape. In general, users may define system roles within each system landscape. In some implementations, system landscapes may include roles that correlate to other roles in other system landscapes","In some implementations, the layout of systems within an environment may be represented by a number of system landscapes. The system landscapes provide a hierarchical tree structure of systems within a specified set of systems. In particular, the system landscape can represent a technical representation of one or more groups in a correlation model that can be provided as, but is not limited to, a Common Information Model (CIM). The system landscape is typically the highest node within a system hierarchy.","The architecture  can, for example, produce environments that generate new configurations of system landscapes using predefined configurations of system landscapes. In particular, the architecture  can generate and assign correlations between system environments (e.g., landscapes) such that the landscapes can be accessible for reuse in other systems. For example, the architecture  can generate a selectable list of system landscapes for users (based on correlation data, landscape type, or other input). Each landscape within the list can be employed as a template for creating new system landscapes and\/or system landscape types for an environment or system. For example, users can select a system landscape and generate other landscapes based on the selected system landscape.","In some implementations, the architecture  may represent a client\/server system supporting multiple computer systems including a client , a client , and\/or one or more servers  and  that are connectively coupled for communication with one another over a network . In some implementations, the clients ,  may be directly connected to the servers  or  (without connecting via network ).","The clients ,  are intended to represent various forms of processing devices including, but not limited to, a desktop computer, a laptop computer, a handheld computer, a personal digital assistant (PDA), a cellular telephone, a network appliance, a camera, a smart phone, an enhanced general packet radio service (EGPRS) mobile phone, a media player, a navigation device, an email device, a game console, or a combination of any two or more of these data processing devices or other data processing devices. Each client ,  may access application software on server system  and\/or server system .","The server systems ,  are intended to represent various forms of servers including, but not limited to a web server, an application server, a proxy server, a network server, a server farm, etc. The server system  can, for example, be provided as an application server that executes software accessed by client computers , . The software can include systems such as a solution manager, a transport manager, or a portal, to name a few examples. The server system  can, for example, be used to execute the central configuration manager and store the central configuration repository, discussed in further detail with respect to  below.","In operation, multiple clients (e.g., clients , ) can communicate with server system  or server system  via network . In some implementations, a user can invoke applications available from the server system  in a web browser running on client , . Each application can individually access data from a number of repository resources. For example, the server system  can access one or more repositories  and similarly, the server system  can access one or more repositories .","In some implementations, the client devices ,  may communicate wirelessly through a communication interface (not shown), which may include digital signal processing circuitry where necessary. The communication interface may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through a radio-frequency transceiver (not shown). In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver.","In some implementations, the architecture  can be a distributed client\/server system that spans one or more networks such as network . The network  can be provided as a large computer network, such as a local area network (LAN), wide area network (WAN), the Internet, a cellular network, or a combination thereof connecting any number of mobile clients, fixed clients, and servers. In some implementations, each client (e.g., clients , ) can communicate with the server systems ,  via a virtual private network (VPN), Secure Shell (SSH) tunnel, or other secure network connection. In some implementations, the network  can include the Internet, a wireless service network and may include the Public Switched Telephone Network (PSTN). In other implementations, the network  may include a corporate network (e.g., an intranet) and one or more wireless access points.","Referring now to , a block diagram depicts a configuration system  in accordance with implementations of the present disclosure. The exemplar configuration system  can manage, configure, and store any number of system landscapes within a software architecture. Each landscape may include a type identifier that describes the software functionality of the system landscape. Some examples of landscape types may include, but are not limited to, a development landscape type , a test landscape type , or a production landscape type . Although only three landscape types are depicted in , any number of landscape types can be configured in system .","The configuration system  includes a central configuration manager . The central configuration manager  is communicably coupled with the development landscape , the test landscape , and the production landscape  to configure, maintain, and\/or update the landscapes -. The central configuration manager  can perform configurations, maintenance, and updates on system landscapes. The central configuration manager  can also determine whether to transport a specific configuration from one landscape into another. For example, the manager  can compare predefined configuration data to existing configuration data of one or more target systems to generate a difference, or delta between the configurations. The delta can be used to execute configuration actions that cause an update of a configuration state of the one or more target systems.","The central configuration manager  is shown connected to a central configuration repository . The central configuration repository  maintains all configurations of the software solutions that are deployed in a system. In particular, the central configuration repository  maintains a number of system landscape configurations (e.g., in various different versions) depending on the specific type of landscape. In some implementations, the central configuration manager  can obtain access to any number of repositories including, but not limited to repository  or  (). In general, the central configuration repository may store data about which systems exist, transport paths between systems, system roles, technical configurations, business configurations, and other system data.","Exemplar system landscapes - include a number of systems including system (A) and system (B) to system (n). Each system represents processes executed in an application. The development landscape  includes a development system (A) , a development system (B) , and a development system (n) . Each development system - includes an associated local configuration repository. For example, the development system  includes a local configuration repository , which contains specific configuration details for the current executing development system (A) . The configuration details may include technical details, role details, business object details, predefined configuration data, and other data. Similar to the development system (A) , the development system (B)  includes a local configuration repository  and development system (n)  includes a local configuration repository .","The test landscape  includes a quality assurance (QA) system (A)  that contains a local configuration repository , a QA system (B)  that contains a local configuration repository , and a QA system (n)  that contains a local configuration repository . The production landscape  includes a production system (A)  that contains a local configuration repository ; a production system (B)  that contains a local configuration repository ; and a production system (n)  that contains a local configuration repository .","In general, each landscape - includes a logical grouping of systems that require similar processes. For example, a user may define a set of systems  that are primarily used for development purposes. In a similar fashion, a user may define a set of systems testing purposes, production purposes, accounting purposes, etc.","In operation, the central configuration manager  can manage different stages of the lifecycle of a software solution within any or all systems in environment . For example, the manager  may configure different technical settings of a landscape depending on the state of the landscape. In addition, the manager  can ensure that technical configurations are applied consistently across all landscapes. In one example, the central configuration manager  can manage target systems in each different landscape where each target system may have different configurations and software release states.","In some implementations, a user can choose to transport configurations from one landscape system to another landscape system. For example, the user can select a configuration state created in the development landscape  and transport the configuration into the test landscape , as shown by arrow . Similarly, the user can select a configuration state modified in the test landscape  and transport the modified configuration into the production landscape , as shown by arrow .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":"300"},"The model  may be an example of a predefined landscape configuration model, which can be stored in the central configuration repository , a local configuration repository, or other repository. The landscape configuration may include a number of steps and sub-steps. For example, sub-steps for planning the production of a product may include (a) connecting all data which belongs to a product (b) checking availability of materials (c) checking availability of machines to generate product, and (d) checking availability of transport to a customer.","The model  includes a logical system component  connected to a technical system . The logical system component  may guide business steps  and business processes . For example, the logical system component  may dictate a transport path for specific steps and processes. In some implementations, business processes  may run within business steps  that may run on the logical system component . The logical system component  may be connected to the technical system  to perform the business steps  and the business processes . Each business step  may be assigned configuration data . Similarly, each business process may be assigned configuration data .","In one example, configuration data values can be assigned to business steps  and business processes  by the example process shown in model . The example process may be divided into one or more sub-business steps . Each sub-business step  may be assigned configuration data . The configuration data  may specify which supplies, resources, and\/or personnel to implement for use in a specific process or step.","Configuration data , , and  may be divided into a particular configuration data type. For example, configuration data , , or  may represent technical configuration data and\/or business configuration data. Technical configuration data can, for example, include property value pairs corresponding to configurations settings of a processing engine (e.g., required user role information, technical system user, or certificates), user role information, certificates, and cross system configuration data (e.g., destinations to other systems, exchange certificates, or trusting connections between the system). The configuration settings can be imported into a system by a process which configures low-level settings in a user interface. In some implementations, configuring settings may be automated and controlled by a system procedure.","Business configuration data can include complex table and view entries that describe the behavior of business processes within a system. Business configuration data may be used to configure business processes and system roles. For example, business configuration data may be used to differentiate which targeted or authorized destinations are selected for performing specific processes. Business configuration data may also be used to configure system roles. For example, settings may be set or modified depending on which system role is performing a particular task.","The model  can include cardinality rules between steps. The cardinality rules may define the numeric relationship between occurrences of entities happening in the systems, steps, or processes within . As an example, the logical system component  includes (n) occurrences , while the technical system includes (1) occurrence  for each occurrence of the logical system component . This example of cardinality conveys that the logical system component  belongs to more than one technical system (e.g., n technical systems), but only one technical system  occurrence is used for a particular role. In another example, the logical system component  includes (1) occurrence , while the business steps  include (n) occurrences . This example of cardinality conveys that each business step  is implemented in one particular logical system component, but a logical system component could host multiple (n) business steps. Similarly, business processes  may include a number of business step occurrences (m)  and business steps  may include a number of business process occurrences (n) . In yet another example, sub-business steps  may include a number of business step occurrences (n) , while business steps  may include a number of sub-business step occurrences (m) .","In some implementations, certain entities include a cardinality value within itself. For example, the sub-business steps  may include any number of occurrences (n)  with another sub-business step  having occurrences (m) .","Referring now to , a flow-diagram illustrates an exemplar process  that can be executed to perform configuration tasks in accordance with implementations of the present disclosure. The process  can perform tasks in any or all of a development environment , a QA environment , or a production environment . In general, the process  can maintain business processes with multiple technical configurations  and determine whether to transport a development status to another system landscape (e.g., environment). In some implementations, the steps below can be performed in system , for example, to synchronize configuration states between one or more systems utilizing system data.","In the development environment, the process  can select one or more business processes and software solutions, in step . For example, the central configuration manager  selects a business process and a configuration for a particular set of target systems. The business processes and solutions may include configuration information that is maintained in the central configuration repository . In general, a business process may have one or more configurations depending on the particular use case or scenario. For example, productive systems and test systems may have different availability settings.","The existing configuration is compared to selected (e.g., user desired) configuration requirements, in step . For example, the central configuration manager can  compare the configuration of a selected business process with the existing configuration of the target systems in the particular landscape segment. In this example, the central configuration manager  performs the comparison in the development environment . The comparison can be performed to calculate the steps required to upload the new configuration into a particular system. As such, any number of procedures can be used to calculate discrepancies between a current stored configuration state and a desired configuration state. Execution of business steps and\/or sub-business steps is triggered in step . For example, the central configuration manager  invokes one or more application programming interfaces (APIs) of the particular target system and issues a request to set a particular configuration.","In some implementations, other actions can be invoked if, for example, execution of one or more steps fails. For example, the central configuration manager  may perform compensating actions when executions of the steps fail. The compensating actions may include rolling back a configuration state to an initial configuration state, pausing the execution and allowing a user to resolve failures manually, or skipping the failed steps. These compensating actions (e.g., policies) may be chosen by the user either during the execution of the steps or prior to the execution of any steps. Other actions are also possible.","Consistency checks and functional tests are performed for one or more target systems (e.g., development systems -) in step . For example, once the execution is finalized, the central configuration manager  runs a test of the configuration state of the target system. The tests are typically performed to verify that a particular configuration can function in the intended system. If the tests succeed, the user can transport the tested configuration to another target system.","Before transporting the configuration, the user can decide whether to perform the transport of the tested configuration. Collaborative processes to ensure that regulatory policies are adhered to may be used to support a user with this decision. For example, the central configuration manager  can provide the user with information about company policies that require confirmation of a transport based on system policies. Once the user determines that a transport can be performed, in step , the transport can be executed. Execution of the transport induces the target systems in the target environment to update to a desired configuration state.","At this point, the configuration state of the development environment  has been transported into the QA environment . In step , the existing configuration at the managed system (e.g., system ) is compared the selected configuration requirements. In this case, the existing configuration is that configuration transported from the development environment . In step , a delta is determined and any necessary configuration steps to bring the target system to the desired configuration state are determined based on the delta. In step , business steps necessary to execute a particular configuration are triggered. In step , consistency checks and functional tests of the QA system  are performed. In step , the user can determine whether a transport of the QA state to the production system can be performed. Execution of the transport induces the target systems in the target environment to update to a desired configuration state.","At this point, the configuration state of the QA environment  has been transported into the production environment . In step , the existing configuration at the managed system (e.g., system ) is compared to the selected configuration requirements. In this case, the existing configuration is that configuration transported from the QA environment . In step , a delta of the configuration is calculated and any necessary configuration steps to be performed to bring the target system to the desired configuration state are determined based on the delta. In step , execution of business steps necessary to execute a particular configuration are triggered. In step , consistency tests and functional tests of the production system are performed.","The overall process  ends in the production landscape segment  where final post configuration steps are performed in step . These post steps include configuration aspects that enable a system to run in a productive mode. The steps can include, but are not limited to, setting up a monitoring infrastructure, setting a high-availability configuration, and load-balancing.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 5","FIG. 5"],"b":["100","102","104","106","108","208"]},"In step , the process retrieves one or more predefined configuration models from a configuration repository. For example, the configuration manager  retrieves a predefined configuration model from a number of predefined configuration models electronically stored in the central configuration repository . The retrieved predefined configuration model provides predefined configuration data for a particular software application. In step , the predefined configuration data is compared to existing configuration data. For example, the retrieved, predefined configuration data is compared to existing configuration data of one or more target systems. In step , a delta is generated based on the comparison between the predefined configuration data and the existing configuration data of the target system. The target system may include a first system landscape such as a testing landscape.","In step , one or more configuration actions are determined based on the delta. For example, the central configuration manager determines configuration actions such that can be used to update a current configuration to a desired configuration. In step , configuration actions are executed to update a configuration state. For example, configuration actions are executed to update the configuration state of one or more target systems from an initial configuration state. In step , it is determined whether the executed configuration actions have failed. If one or more configuration actions has failed, one or more compensation actions are selected and executed in step . The compensation actions may include, but are not limited to, reverting the configuration state to an initial configuration state, pausing execution of the configuration actions, and\/or skipping the failed configuration action. In one example, the execution actions are selected during the execution of the one or more configuration actions.","If none of the performed configuration actions fail, it is determined whether to transport the configuration to another landscape in step . If it is determined to transport the configuration to another system landscape, the transport is executed in step . The next landscape (e.g., QA landscape , production landscape ) may include one or more target systems different form the target systems in the originating system landscape. If the process determines not to transport the configuration to the another landscape, it is determined whether the system is ready for production use in step . If it is determined not to transport to production, the process loops back to step . If it is determined to transport to production, steps to enable production use are executed in step .","Referring now to , a schematic diagram of an exemplar computer system  is provided. The system  can be used for the operations described in association with the method described in  according to one implementation. For example, the system  may be included in any or all of the client , the client , the server , the server , the central configuration manager , or systems  or  described in . The system  includes a processor , a memory , a storage device , and an input\/output device . Each of the components , , , and  are interconnected using a system bus . The processor  is capable of processing instructions for execution within the system . In one implementation, the processor  is a single-threaded processor. In another implementation, the processor  is a multi-threaded processor. The processor  is capable of processing instructions stored in the memory  or on the storage device  to display graphical information for a user interface on the input\/output device .","The memory  stores information within the system . In one implementation, the memory  is a computer-readable medium. In one implementation, the memory  is a volatile memory unit. In another implementation, the memory  is a non-volatile memory unit. The storage device  is capable of providing mass storage for the system . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device. The input\/output device  provides input\/output operations for the system . In one implementation, the input\/output device  includes a keyboard and\/or pointing device. In another implementation, the input\/output device  includes a display unit for displaying graphical user interfaces.","The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.","A number of implementations of the present disclosure have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the present disclosure. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
