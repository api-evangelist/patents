---
title: Consistent operating system servicing for distributed nodes
abstract: Methods, systems, and computer-readable media for deploying an updated image to nodes propagated throughout a distributed computing platform are provided. Upon receiving an indication to install a patch to an operating system residing on the nodes, an existing image of the operating system is accessed at a staging service. The staging service generates the updated image by applying the patch to the existing image. The process of applying the patch includes mounting the existing image of the operating system to a virtual machine, copying the patch to the mounted existing image, setting a command within the existing image that executes upon activating the virtual machine, and activating the virtual machine, thereby executing the command. This directs the patch to be installed. The updated image is pushed to the nodes. The nodes are configured to utilize the updated image as the operating system without performing an individual installation of the patch.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189221&OS=09189221&RS=09189221
owner: Microsoft Technology Licensing, LLC
number: 09189221
owner_city: Redmond
owner_country: US
publication_date: 20090127
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Large-scale networked systems are commonplace systems employed in a variety of settings for running applications and maintFaining data for business and operational functions. For instance, a data center may provide a variety of services (e.g., web applications, email services, search engine services, etc.). These large-scale networked systems typically include a large number of nodes distributed throughout the datacenter, in which each node resembles a physical machine or a virtual machine running on a physical host. Due partly to the large number of the nodes that may be included within such large-scale systems, deployment of software (both operating systems (OSs) and applications) to the various nodes and maintenance of the software on each node can be a time-consuming and costly process.","Traditionally, software is installed and upgraded locally on each node in place such that installation and updates are specific to the individual nodes. Because the nodes will be installing the software upgrades individually, there is a likely chance of failure or variability upon performing the installation. Further, other specific operations, such as servicing or customization, may also be performed on the individual nodes. Potentially, these operations change the state of the operating system that is running on a computer node, and often the operations result in introducing indeterminism in the operating system state (as measured from node to node). Further, the operations applied specifically to each individual node may cause reliability and repeatability issues because the operation is repeated many times, thus, increasing the chance of failure.","Accordingly, when updating thousands of nodes, there is no guarantee that all of the nodes will be running software consistently or providing a similar operating system state. For instance, changes to a local software state (e.g., operating system configuration state) may occur due to human or software errors. Often, state changes cause the behavior of the node to become unpredictable. Also, there is no guarantee that each node will achieve a successful update.","By way of example, consider two machines receiving a servicing package that is being installed on each of the machines individually. Upon installing the package to the two different machines, there is no real guarantee that upon completion of the installation that both machines will reboot in exactly the same state. This is often caused by not knowing or accounting for a difference in the initial state of each machine, or numerous other factors that can make the machines distinct. Thus, it is indeterminate what the final state of the machines will be. Because there is no guarantee of consistency between the machines, a service application running thereon will execute unpredictably and provide various users of the service application an incongruent experience.","As such, the current solutions for installing software applications, which rely on curators of the data center to manually install the software applications individually, are ad hoc solutions, are labor-intensive, and are error-prone. Further, these current solutions do not guarantee a reliable result that is consistent across the data center. These shortcomings of manual involvement are exaggerated when the data center is expansive in size, comprising a multitude of interconnected hardware components, that support the operation of a multitude of software applications.","This Summary is provided to introduce concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Embodiments of the present invention relate to computer systems, computerized methods, and computer-readable media for deploying an updated image to one or more nodes propagated throughout a distributed computing platform. Initially, the nodes represent computing devices capable of running role instances of the service application within a distributed computing platform, where instances comprise replications of at least one role that resembles a component program for supporting particular functional aspects of the service application. In embodiments, the computerized method involves receiving an indication to install a patch to an operating system residing on the nodes of the data center. Typically, an existing image of the operating system is stored at a staging service. The staging service is capable of engaging a virtual machine to generate the updated image by applying the patch to the existing image. In one instance, generating the updated image includes separating the existing image into a variant state and an invariant state of the operating system, performing an installation of the patch on the variant state, and recombining the variant state and the invariant state to form the updated image.","In another instance, generating the updated image involves executing an application process. The application process is conducted by performing one or more of the following steps: mounting in the virtual machine the existing image of the operating system; copying the patch to the mounted existing image; setting a command within the existing image that executes upon activating the virtual machine; activating the virtual machine such that the command to execute is invoked, which directs the patch to be installed; capturing a snapshot of the existing image with the patch installed; saving the snapshot as the updated image; and utilizing the updated image for upgrading the operating system of the nodes upon receiving a subsequent indication to install a patch. Upon generating the updated image, it may be pushed to the nodes of the data center. In one instance, the process of pushing involves removing the nodes to an offline condition, loading the updated image to the offline nodes, and booting the offline nodes such that the nodes do not attempt to reinstall the operating system carried in the updated image. As a result, the one or more nodes can utilize the updated image as the operating system without performing an installation of the updated image.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","The subject matter of embodiments of the present invention is described with specificity herein to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventors have contemplated that the claimed subject matter might also be embodied in other ways, to include different steps or combinations of steps similar to the ones described in this document, in conjunction with other present or future technologies. Moreover, although the terms \u201cstep\u201d and\/or \u201cblock\u201d may be used herein to connote different elements of methods employed, the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.","Embodiments of the present invention relate to methods, systems, and computer-storage media having computer-executable instructions embodied thereon that, when executed, perform methods in accordance with embodiments hereof, for updating an operating system of a plurality of nodes (e.g., computing devices) within the context of a distributed computing environment. Generally, a staging service is responsible for capturing an existing image of the operating system being executed on the plurality of nodes. Upon receiving a patch, the staging service is configured to employ a virtual machine to copy the patch to the existing image and reboot, thereby installing the patch to the existing image. The staging service may also separate a variant state and an invariant state of the existing image, process the states separately (e.g., perform individual software modifications to each of the states), and recombine the states to form an updated image. This updated image is configured to function as a new operating system upon simply being stored to the nodes-without conducting a second installation of the patch locally at each node. Accordingly, because the installation of the patch is remote and does not take into account the varied computing environments inherent to each of the nodes, the new operating system is consistent and determinant across the nodes.","Accordingly, in one aspect, embodiments of the present invention relate to one or more computer-readable media that has computer-executable instructions embodied thereon that, when executed, perform a method for deploying an updated image to one or more nodes propagated throughout a distributed computing platform. In embodiments, the method includes receiving an indication to install a patch to an operating system residing on the nodes of a data center. Typically, the existing image of the operating system is stored at a staging service. The method further includes generating the updated image by applying the patch to the existing image at a virtual machine. The process of generating the updated image may comprise, at least, the following steps: separating the existing image into a variant state and an invariant state of the operating system; performing an installation of the patch on the variant state and\/or the invariant state; and recombining the variant state and the invariant state to form the updated image. This updated image is replicated and pushed to the nodes of the data center. Incident to loading the updated image of a new operating system, the nodes are configured to utilize the new operating system without performing an individual second installation of the patch.","In another aspect, embodiments of the present invention relate to a computerized method for upgrading an operating system on a computing device without installing a patch at the computing device. Initially, the computing device provides the operating system. An existing image of the operating system is stored at a remotely located staging service. In embodiments, the operating system is composed of at least one differencing disk that overlays a virtual disk. In operation, a service application supported by the operating system is allowed to write data to the differencing disk and is prevented from writing to the virtual disk. The computing device is configured to execute the computerized method that includes following instructions to enter an offline condition and downloading an updated image of a new operating system.","Downloading the updated image may include receiving the updated image comprising an updated virtual disk and storing the updated virtual disk such that the new operating system is ready to use upon booting the hard drive. As discussed more fully below, the updated virtual image includes an updated virtual disk and at least one empty differencing disk that is cleared of externally-written data. Typically, the updated image is generated by installing a patch to the existing image at the staging service. The computerized method may further involve the steps of following instructions to enter an online condition by booting a hard drive of the computing device and utilizing the new operating system without performing an installation of the patch.","In a third aspect, an exemplary computer system is provided for performing a method that deploys a patch to one or more nodes of a data center upon performing a single installation at a virtual computer. In embodiments, the computer system includes a processing unit coupled to a computer storage medium that stores a plurality of computer software components executable by the processing unit. Initially, the computer software components include a fabric controller, a staging service, a virtual machine, and the nodes. The fabric controller is configured for making a determination to roll out the patch to the operating system and communicating the indication to install the patch. Incident to receiving the indication to install the patch, the staging service conveys to the virtual machine an existing image of an operating system stored on each of the nodes. The virtual machine that executes an application process for generating an updated image by performing an installation of the patch on the existing image, and for iteratively propagating the updated image to the nodes. The nodes are configured for replacing the operating system with the updated image of a new operating system without performing an installation of the updated image.","Embodiments, of the present invention relate to deploying an upgrade to operating systems accommodated by nodes that are propagated throughout a distributed computing environment, or data center. In one instance, the nodes represent computing devices capable of running role instances of the service application within a distributed computing platform. As used herein, the term \u201croles\u201d or role instances is not meant to be limiting, but may include any replication of at least one role, which generally resembles a component program that supports particular functional aspects of a service application.","As such, \u201croles\u201d provide a template description of a functional portion of the service application. Roles are described by indicating the computer code implementing the role, the conditions within the hosting environment that are required by the role, configuration settings to be applied to the role, and the role's set of endpoints for communication with other roles, elements, etc. In one instance, the role's configuration settings may include collective settings which are shared by all instances of the role, or individual settings that are particular to each instance of the role. In an exemplary embodiment, the roles each represent a particular class of component of the service application. Typically, the service model delineates how many instances of each of the one or more roles to place within the data center, where each of the instances is a replication of the particular class of component, or role. In other words, each role represents a collection of instances of each class of components, where the service application may have any number of classes of components for carrying out functions thereof.","Having briefly described an overview of embodiments of the present invention, an exemplary operating environment suitable for implementing embodiments of the present invention is described below.","Referring to the drawings in general, and initially to  in particular, an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device  is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the present invention. Neither should the computing environment  be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.","Embodiments of the present invention may be described in the general context of computer code or machine-useable instructions, including computer-executable instructions such as program components, being executed by a computer or other machine, such as a personal data assistant or other handheld device. Generally, program components including routines, programs, objects, components, data structures, and the like refer to code that performs particular tasks, or implements particular abstract data types. Embodiments of the present invention may be practiced in a variety of system configurations, including hand-held devices, consumer electronics, general-purpose computers, specialty computing devices, etc. Embodiments of the invention may also be practiced in distributed computing platforms where tasks are performed by remote-processing devices that are linked through a communications network.","With continued reference to , computing device  includes a bus  that directly or indirectly couples the following devices: memory , one or more processors , one or more presentation components , input\/output (I\/O) ports , I\/O components , and an illustrative power supply . Bus  represents what may be one or more busses (such as an address bus, data bus, or combination thereof). Although the various blocks of  are shown with lines for the sake of clarity, in reality, delineating various components is not so clear, and metaphorically, the lines would more accurately be grey and fuzzy. For example, one may consider a presentation component such as a display device to be an I\/O component. Also, processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of  is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as \u201cworkstation,\u201d \u201cserver,\u201d \u201claptop,\u201d \u201chand-held device,\u201d etc., as all are contemplated within the scope of  and reference to \u201ccomputer\u201d or \u201ccomputing device.\u201d","Computing device  typically includes a variety of computer-readable media. By way of example, and not limitation, computer-readable media may comprise Random Access Memory (RAM); Read Only Memory (ROM); Electronically Erasable Programmable Read Only Memory (EEPROM); flash memory or other memory technologies; CDROM, digital versatile disks (DVDs) or other optical or holographic media; magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to encode desired information and be accessed by computing device .","Memory  includes computer storage media in the form of volatile and\/or nonvolatile memory. The memory may be removable, nonremovable, or a combination thereof. Exemplary hardware devices include solid-state memory, hard drives, optical-disc drives, etc. Computing device  includes one or more processors that read data from various entities such as memory  or I\/O components . Presentation component(s)  present data indications to a user or other device. Exemplary presentation components include a display device, speaker, printing component, vibrating component, etc. I\/O ports  allow computing device  to be logically coupled to other devices including I\/O components , some of which may be built-in. Illustrative components include a microphone, joystick, game pad, satellite dish, scanner, printer, wireless device, etc.","Turning now to , a block diagram is illustrated showing a distributed computing environment , suitable for use in implementing embodiments of the present invention. Generally, the distributed computing environment  is configured to generate updated images , , and  and deploy them to nodes of a data center . The distributed computing environment  includes the data center  configured to accommodate and support operation of component programs, or instances of roles, of a particular service application according to the fabric controller . It will be understood and appreciated by those of ordinary skill in the art that the data center  shown in  is merely an example of one suitable for accommodating one or more service applications and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the present invention. Neither should the data center  be interpreted as having any dependency or requirement related to any single resource, combination of resources, combination of nodes (e.g., nodes A , B , and C ), or set of APIs to access the resources and\/or nodes. Further, although the various blocks of  are shown with lines for the sake of clarity, in reality, delineating various components is not so clear, and metaphorically, the lines would more accurately be grey and fuzzy.","Per embodiments of the present invention, the nodes A , B , and C  that execute the operating systems may be described within the context of a distributed computing environment  of a data center . The data center  includes various resources, such as a staging service , a virtual machine , and the nodes A , B , and C , that are interconnected. In addition, the role instance(s) (not shown) that reside on the nodes A , B , and C , and support operation of service applications, may be interconnected via application programming interfaces (APIs). In one instance, one or more of these interconnections may be established via a network cloud (not shown). These resources, as described herein, may include software components (e.g., fabric controller ) as well as tangible computing elements, such as nodes A , B , and C . The network cloud interconnects these resources such that the role instances of service applications, which may be distributably placed across various physical resources, may recognize a location of other instances in order to establish communication therebetween. In addition, the network cloud facilitates this communication over channels connecting the instances of the service application and any other elements. By way of example, the network cloud may include, without limitation, one or more local area networks (LANs) and\/or wide area networks (WANs). Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. Accordingly, the network is not further described herein.","Generally, the data center  provides underlying support for operation of the service application(s) within the distributed computing environment . In particular, the nodes A , B , and C  may accommodate a plurality of component programs, or the role instances of the service application, running independently on separate operating systems installed on one or more of the nodes A , B , and C . As described supra, the term \u201cnode\u201d is not meant to be limiting and may encompass any computing device capable of executing the role instances in support of the service application. Moreover, the nodes A , B , and C  may represent any form of computing devices, such as, for example, a personal computer, a desktop computer, a laptop computer, a handheld device, a mobile handset, consumer electronic device, and the like. In one aspect, the nodes A , B , and C  represent a computing device of a plurality of distributed computing devices interconnected via the network cloud. Generally, these distributed computing devices are capable of executing a plurality of instances of various roles of the service application. In one instance, a particular node may be capable of accommodating two or more role instance(s). These role instances may run on the nodes A , B , and C  in complete isolation, in partial communication with instances of other roles, or in an interactive state with one or more other roles of the service application.","Typically, each of the nodes A , B , and C  include, or is linked to, some form of a computing unit (e.g., central processing unit, microprocessor, etc.) to support operations of the component(s) running thereon. As utilized herein, the phrase \u201ccomputing unit\u201d generally refers to a dedicated computing device with processing power and storage memory, which supports operating software that underlies the execution of software, applications, and computer programs thereon. In one instance, the computing unit is configured with tangible hardware elements, or machines, that are integral, or operably coupled, to the nodes A , B , and C  to enable each device to perform a variety of processes and operations. In another instance, the computing unit may encompass a processor (not shown) coupled to the computer-readable medium accommodated by each of the nodes A , B , and C . Generally, the computer-readable medium stores, at least temporarily, a plurality of computer software components that are executable by the processor. As utilized herein, the term \u201cprocessor\u201d is not meant to be limiting and may encompass any elements of the computing unit that act in a computational capacity. In such capacity, the processor may be configured as a tangible article that processes instructions. In an exemplary embodiment, processing may involve fetching, decoding\/interpreting, executing, and writing back instructions.","Also, beyond processing instructions, the processor may transfer information to and from other resources that are integral to, or disposed on, the nodes A , B , and C . Generally, resources refer to software and hardware mechanisms that enable the nodes A , B , and C  to perform a particular function.","With continued reference to , the staging service  may be installed to a node of the data center , or to various nodes propagated throughout a distributed computing platform . Initially, the staging service  may be a software application that generates an update to an existing image of an operating system accommodated on one or more of the nodes A , B , and C . As used herein, the term \u201cimage\u201d is not meant to be limiting, but may encompass any data or information that is related to an operating system residing at a remote machine. In one instance, an image is a representation of both a variant state and invariant state of an operating system. In another instance, the term image refers to all the bits that are required to run the operating system, thus, exposing the state of the operating system. Accordingly, the \u201cexisting image\u201d may refer to a snapshot that captures various characteristic of the latest operating system deployed throughout the data center . As such, the existing image is substantially a pristine copy the current operating system within no external data written thereto.","In embodiments, the staging service  is invoked to update an existing image. Updating the existing image and subsequently deploying it allows the distributed computing environment  to generate, modify, and capture the variant state and the invariant state remotely, without the need to act directly on the target nodes intended to receive an update. Invoking the staging service  to update the existing image may result from a variety of triggers. For instance, the trigger to generate the updated image may be a timer mechanism that sends a signal at the expiration of a determined interval (e.g., four months), a real-time response to detecting a new patch to be installed, or at the request of another component. By way of example, the fabric controller  may make a determination to roll out a patch to the operating system and communicate an indication  to install the patch to the staging service.","Upon being instructed to generate the updated image, the staging service  may carry out these instructions by implementing various procedures. In one instance, generating the updated image may include engaging the virtual machine  that can install a patch to an image in isolation without placing an active node in an offline condition. As used herein, the phrase \u201cvirtual machine\u201d is not meant to be limiting, and may refer to any software, application, or program that is executed by a processing unit to achieve a particular directive. Upon engaging the virtual machine , the staging service  may transfer the existing image , and any other information pertinent to an update, to the virtual machine . Incident to receiving the existing image , the virtual machine  may execute an application process for generating an updated image. One goal of the application process is to perform an installation of a patch on the existing image , and iteratively propagate the updated image to the A , B , and C . In instances, installing the patch to the existing image  at a virtual machine  includes targeting one or more of the nodes  A,  B, and  C, selecting differencing disks based upon attributes of the nodes  A,  B, and  C that are targeted for receiving the patch, combining the selected differencing disk with a virtual disk upon installing the patch thereto, and directing the resultant updated images , , and  to the appropriate targeted nodes  A,  B, and  C, respectively. Once the nodes  A,  B, and  C receive the respective updated images , , and  that are targeted thereto, each of the nodes  A,  B, and  C replace their operating systems with the updated image , , and  of a new operating system without performing an installation of the applied patch. Accordingly, the nodes  A,  B, and  C may utilize the new operating system to support operations of the role instances assigned thereto.","In a particular embodiment, each of the nodes  A,  B, and  C may have an operating system running thereon that is replaced by the updated image of the new operating system. The operating systems to be retired may comprise an invariant state (i.e., portion of the operating system that does not change) and an variant state (e.g., portion of the operating system that is affected by roles instances and other applications running on the operating system). In one instance, the variant state includes a registry to which applications write data and use as a temporary memory, or cache. Accordingly, the invariant states , , and  of the nodes  A,  B, and  C, respectively, may vary in content or state. Because the invariant states  of the operating systems loaded to the nodes  A,  B, and  C disallow data being written thereto, the invariant states  are common to each of the nodes of the data center .","Returning to the process of generating an updated image, the virtual machine  is instructed to apply the patch to the existing image . In other embodiments, the virtual machine  automatically applies the patch upon accepting the existing image . Applying the patch may include mounting the existing image  (e.g., a pristine representation of the current operating system) copy the patch into it, and set a command in the existing image that instructs the virtual machine , upon reboot, to finish running the patch. That is, when the virtual machine  is booted, the patch finishes running (installing itself).","Upon installing the patch, the virtual machine  may be used to test the functionality of the updated image. Implementing testing is useful to ensure that the installed patch is functioning according to specification. Upon reaching satisfaction that the updated image is functioning properly, the virtual machine  is shut down and the updated image is saved, thereby replacing the existing image . Saving the updated image may include several steps, such as capturing a snapshot of the existing image  with the patch installed, and saving the snapshot as the updated image. In the future, the updated image may be utilized for upgrading the new operating system of the nodes  A,  B, and  C upon receiving a subsequent indication to install a patch.","In other embodiments of the process of generating the updated image, the existing image  of the current operating system may be divided into a variant state and an invariant state of the operating system. These states may be encapsulated as artifacts, where the artifacts comprise a virtual disk (for maintaining the invariant state) and at least one differencing disk (for maintaining aspects of the variant state). In embodiments, the artifacts may comprise a plurality of differencing disks that each maintain a portion of the variant state, where each can be stacked on top of each other and on the virtual disk to build the complete operating system. In embodiments, the virtual disk represents a pristine model of the operating system that is common to each of the targeted nodes.","Upon dividing the operating system into the virtual disk and the differencing disks, an installation of the patch may be performed on the invariant state of the virtual disk and\/or the variant state of the differencing disk. Upon completing the installation(s), and optionally the testing, the variant state and the invariant state are recombined to form the updated image. In one instance, the generated variant state is then stored in the staging service  ready to be deployed together with the invariant state to the appropriate nodes.","As used herein, the term \u201cartifacts\u201d is not meant to be limiting, but may encompass any representative model of a section, attribute, or set of values of an operating system. Accordingly, artifacts are not limited to simply a virtual disk and one or more differencing disks. Further, artifacts may be created upon capturing an image of an operating system or may be dynamically generated during the processing of the image. Further, upon generating the updated image, the updated image may be stored in an artifact referred to as a base virtual hard drive (VHD). The base VHD is generally a file that looks like a hard drive. In other embodiments, just the common pristine model, or virtual disk, is stored to the base VHD. In operation, the base VHD may be deployed to the nodes  A,  B, and  C to install the operating system, or may be retained in the staging service for  in order to maintain a clean copy of the latest operating system deployed.","Upon generating the updated image (e.g, updated images , , and ), the updated images are replicated and each replication is distributed and loaded to the nodes  A,  B, and  C, respectively. In embodiments, during loading, the virtual disk of the updated image replaces the invariant state  of the operating systems residing at the nodes  A,  B, and  C, while the differencing disk of the updated image replaces the variant states , , and  of the operating systems residing at the nodes  A,  B, and  C, respectively. Accordingly, the data written to the variant states , , and  is lost and the operating system are provided one or more stacked differencing disks that include clean variant states. As such, the updated images of the new operating system (e.g., fully transformed replications of an operating system with an installed patch), upon loading, are consistent across the nodes  A,  B, and  C because they are not subject to variations caused by internal inconsistencies of the nodes  A,  B, and  C.","In embodiments, deployment comprises pushing, or propagating, the updated image to the nodes  A,  B, and  C based on a persistence algorithm. Generally, the persistence algorithm selects an order and timing for removing the nodes  A,  B, and  C to an offline condition to ensure that active redundant nodes are available for supporting the particular functional aspects of the service application that are supported by nodes in the data center . From the perspective of the nodes  A,  B, and  C, deployment involves following instructions to enter an offline condition, downloading the updated image of the new operating system, and following instructions to enter an online condition by booting a hard drive of the computing device. Accordingly, the nodes  A,  B, and  C are configured to utilize the new operating system without performing an installation of the patch. Further, in embodiments, the nodes  A,  B, and  C are able to retain the common virtual disk as part of the operating system as the hardware therein is configured with a common set of values that allow them to run a single base VHD.","This distributed computing environment  is but one example of a suitable environment that may be implemented to carry out aspects of the present invention, and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the illustrated exemplary system architecture of the distributed computing system  be interpreted as having any dependency or requirement relating to any one or combination of the components , , and  as illustrated. In some embodiments, one or more of the components , , and  may be implemented as stand-alone devices. In other embodiments, one or more of the components , , and  may be integrated directly into the nodes. It will be understood by those of ordinary skill in the art that the components , , and  illustrated in  are exemplary in nature and in number and should not be construed as limiting.","With reference to , a graphical representation is shown of an exemplary image  of an operating system that is separated into multiple states, in accordance with an embodiment of the present invention. As illustrate, the differencing disk A  and differencing disk B  are stacked and each maintains a portion of the variant state  of an operating system. These differencing disks A  and B  may overlay the virtual disk  that maintains the invariant state  of the operating system. During operation, the variant state  accumulates data and other modifications thereto. Accordingly, upon replacing the differencing disks A  and B  with the differencing disks of the updated image (e.g., by erasing the overlay) the invariant state  is removed and a pristine image is restored. That is, upon applying the updated image, the overlay is not reinstalled, but thrown away. Generally, the invariant state is not modified. This may be due to an application model that ensures that the state of the role instances are maintained outside the invariant state . As such, the application model ensures that anything the application chooses to write is used for temporary memory and can be recreated by the application if access is denied to a cache.","In embodiments, the differencing disks A  and B  are linked to the underlying virtual disk  and provide a composite view of the contents of both to applications running thereon. Accordingly, adding, subtracting, or replacing the differencing disks A  and B  allows the staging service to represent unique customized physical installations of the operating system. By way of example, the differencing disk A  may be an internet information service (IIS) element that is combined with the virtual disk  to create a specialized version of an operating system with IIS incorporated. The differencing disk B  may be another windows-optional component that provides an interface with the running application. Accordingly, the application's view comprises the three disks , , and  stacked on top of each other. Thus, each differencing disk can have a small amount of customization to create the unique operating system environment that is adaptable to support a variety of applications and loads. As such, in instances, customization is directed toward different services or applications.","Some examples of the variant state  that gets generated and stored in the differencing disks include the secrets from joining a domain. When a computer joins a domain, it exchanges secret keys with the domain. These keys are stored and accessed upon attempting to communicate with the domain so that the machine is recognized. Because the key is now known to the data center, it may be sent to each node that is reached during deployment of the updated image. That is, the data center can leverage the collection of a key at one node and distribute the key to any other nodes that are designated to talk with the domain, thereby avoiding repeating the initial action of joining a domain. In another example, the variant state  includes a unique machine identifier that is sent individually to the nodes. In yet another example, the variant state  comprises custom configuration data generated when operating system roles are installed, removed, etc.","Although three different configurations of the variant state  have been described, it should be understood and appreciated by those of ordinary skill in the art that other types of suitable configurations and content may be used, and that embodiments of the present invention are not limited to those variant-state-models described herein.","Turning now to , a flow diagram is shown that illustrates an overall method  for deploying an updated image to one or more nodes propagated throughout a distributed computing platform, in accordance with an embodiment of the present invention. Accordingly, in one aspect, the method  includes receiving an indication to install a patch to an operating system residing on the nodes of a data center (e.g. utilizing the staging service  of ). This is depicted at block . Typically, the existing image of the operating system is stored at the staging service. As depicted at block , the method  further includes generating the updated image by applying the patch to the existing image at a virtual machine (e.g., utilizing the virtual machine  of ). The process of generating the updated image may comprise, at least, the following steps: separating the existing image into a variant state and an invariant state of the operating system (see block ); performing an installation of the patch on the variant state and\/or the invariant state (see block ); and recombining the variant state and the invariant state to form the updated image (see block ). This updated image is replicated and pushed to the nodes of the data center, as depicted at block  and . Incident to loading the updated image of a new operating system, the nodes are generally configured to utilize the new operating system without performing an individual second installation of the patch.","With reference to , a flow diagram is shown that illustrates an overall method  for upgrading an operating system on a computing device without installing a patch at a computing device, in accordance with an embodiment of the present invention. Initially, the computing device provides the operating system, as depicted at block . An existing image of the operating system is stored at a remotely located staging service. In embodiments, the operating system is composed of at least one differencing disk that overlays a virtual disk. In operation, a service application supported by the operating system is allowed to write data to the differencing disk and is prevented from writing to the virtual disk. The computing device (e.g., node A , B, , or C  of ) is configured to execute the computerized method that includes following instructions to enter an offline condition (see block ) and downloading an updated image of a new operating system (see block ).","Downloading the updated image may include receiving the updated image comprising an updated virtual disk (see block ) and storing the updated virtual disk such that the new operating system is ready to use upon booting the hard drive (see block ). As discussed more fully below, the updated virtual image includes an updated virtual disk and at least one empty differencing disk that is cleared of externally-written data. Typically, the updated image is generated by the installing a patch to the existing image at the staging service. The computerized method may further involve the steps of following instructions to enter an online condition by booting a hard drive of the computing device (see block ) and utilizing the new operating system without performing an installation of the patch (see block ).","Embodiments of the present invention have been described in relation to particular embodiments, which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which embodiments of the present invention pertain without departing from its scope.","From the foregoing, it will be seen that this invention is one well adapted to attain all the ends and objects set forth above, together with other advantages which are obvious and inherent to the system and method. It will be understood that certain features and sub-combinations are of utility and may be employed without reference to other features and sub-combinations. This is contemplated by and is within the scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are described in detail below with reference to the attached drawing figures, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
