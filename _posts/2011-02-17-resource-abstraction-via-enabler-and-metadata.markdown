---
title: Resource abstraction via enabler and metadata
abstract: Embodiments of the invention provide systems and methods for managing an enabler and dependencies of the enabler. According to one embodiment, a method of managing an enabler can comprise requesting a management function via a management interface of the enabler. The management interface can provide an abstraction of one or more management functions for managing the enabler and/or dependencies of the enabler. In some cases, prior to requesting the management function metadata associated with the management interface can be read and a determination can be made as to whether the management function is available or unavailable. Requesting the management function via the management interface of the enabler can be performed in response to determining the management function is available. In response to determining the management function is unavailable, one or more alternative functions can be identified based on the metadata and the one or more alternative functions can be requested.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038082&OS=09038082&RS=09038082
owner: Oracle International Corporation
number: 09038082
owner_city: Redwood Shores
owner_country: US
publication_date: 20110217
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present application claims benefit under 35 USC 119(e) of U.S. Provisional Application No. 61\/305,293, filed on Feb. 17, 2010 by Maes and entitled \u201cResource Abstraction via Enabler and Metadata,\u201d and is a Continuation-in-part of U.S. patent application Ser. No. 12\/490,540, filed Jun. 24, 2009 by Maes and entitled \u201cResource Abstraction via Enabler and Metadata,\u201d which claims the benefit of U.S. Provisional Application No. 61\/075,823, filed Jun. 26, 2008 by Maes and entitled \u201cResource Abstraction Via Enabler and Metadata,\u201d all of which the entire disclosure of each is incorporated herein by reference for all purposes.","This application is also related to the following commonly-owned, applications (the \u201cRelated Applications\u201d), of which the entire disclosure of each is incorporated herein by reference for all purposes:","U.S. patent application Ser. No. 10\/855,999, filed May 28, 2004 by Maes and entitled \u201cMethod and Apparatus for Supporting Service Enablers Via Service Request Handholding\u201d; U.S. patent application Ser. No. 11\/130,636, filed May 16, 2005, by Maes and entitled \u201cMethods and Systems for Exposing Access Network Capabilities Using an Enabler Proxy\u201d; U.S. patent application Ser. No. 11\/070,317, filed Mar. 1, 2005, by Maes and entitled \u201cPolicy Interface Description Framework\u201d; U.S. patent application Ser. No. 11\/357,653, filed Feb. 16, 2006, by Maes and entitled \u201cFactorization of Concerns to Build a SDP (Service Delivery Platform)\u201d; U.S. patent application Ser. No. 12\/019,335, filed Jan. 24, 2008, by Maes and entitled \u201cIntegrating Operational and Business Support Systems with a Service Delivery Platform\u201d; U.S. Provisional Patent Application No. 61\/262,964, filed Nov. 20, 2009, by Maes and entitled \u201cMethods and Systems for Generating Metadata Describing Dependencies for Composable Elements\u201d; and U.S. patent application Ser. No. 12\/490,540, filed Jun. 24, 2009, by Maes and entitled \u201cResource Abstraction via Enabler and Metadata.\u201d","This application is also related to commonly-owned U.S. Pat. No. 7,209,734, filed Jun. 30, 2004 by Maes and entitled \u201cVirtual Mobile Service Provider\u201d, of which the entire disclosure is incorporated herein by reference for all purposes.","Embodiments of the invention provide systems and methods for managing an enabler and dependencies of the enabler. According to one embodiment, a method of managing an enabler can comprise requesting a management function or interacting or receiving data or events via a management interface of the enabler. The management interface can provide an abstraction of one or more management functions for managing the enabler and\/or dependencies of the enabler. For example, the management function can consist of a function for provisioning of the enabler, a function for activation of the enabler, a function for state monitoring of the enabler, a function for usage monitoring of the enabler, a function for health monitoring of the enabler, a function for updating of the enabler, a function for de-activation of the enabler, or another function. The metadata can be defined consistent with an interface definition for the management interface and may be stored in a metadata repository, for example, maintained by a supporting enabler.","In some cases, prior to requesting the management function metadata associated with the management interface can be read and a determination can be made as to whether the management function is available\/sufficient or unavailable\/insufficient. Requesting the management function via the management interface of the enabler can be performed in response to determining the management function is available. In response to determining the management function is unavailable or insufficient, one or more alternative functions can be identified based on the metadata and the one or more alternative functions can be requested. In some cases, prior to requesting the management function, a determination can be made based on the metadata as to whether an alternative function is available for one or more dependencies of the enabler. In response to determining an alternative function is available for at least one dependency, the alternative function can be requested.","Additionally or alternatively, in response to requesting the management function, an error can be received via the management interface indicating the management function cannot be performed by the enabler. In such cases, metadata associated with the enabler can be read and an alternative function can be selected based on the metadata. The alternative function can then be requested. For example, the alternative functions can consist of calls to a management interface of another enabler, calls to a functional interface of another enabler, a workflow, other processes, etc.","According to another embodiment, an enabler can comprise a management interface providing an abstraction of one or more management functions for managing the enabler or dependencies of the enabler. Metadata can be associated with the management interface. The metadata can be defined consistent with an interface definition for the management interface and can identify one or more alternative functions for at least one of the one or more functions. For example, the management function any one or more of a function for provisioning of the enabler, a function for activation of the enabler, a function for state monitoring of the enabler, a function for usage monitoring of the enabler, a function for health monitoring of the enabler, a function for updating of the enabler, a function for de-activation of the enabler, etc. The one or more alternative functions can be any one or more of calls to a management interface of another enabler, calls to a functional interface of another enabler, a workflow, etc. In some cases, the metadata may be stored in a metadata repository that can be maintained by a supporting enabler.","According to yet another embodiment, a system can comprise an enabler comprising a management interface providing an abstraction of one or more management function for managing the enabler and\/or dependencies of the enabler. For example, the management function can consist of a function for provisioning of the enabler, a function for activation of the enabler, a function for state monitoring of the enabler, a function for usage monitoring of the enabler, a function for health monitoring of the enabler, a function for updating of the enabler, a function for de-activation of the enabler, or another function. Metadata can be associated with the management interface and through the enabler to do the same to the resources\/dependencies. The metadata can be defined consistent with an interface definition for the management interface and can identify one or more alternative functions for at least one of the one or more functions. A requestor can be communicatively coupled with the enabler and can request a management function via the management interface of the enabler. The requestor can comprise a management process, a workflow, another enabler, another process, etc.","In some cases, the requestor can, prior to requesting the management function, read metadata associated with the management interface and determine whether the management function is available\/sufficient or unavailable\/insufficient. In such cases, requesting the management function via the management interface of the enabler can be performed in response to determining the management function is available or sufficient. Further, in response to determining the management function is unavailable or insufficient, the requestor may identify one or more alternative functions based on the metadata and request the one or more alternative functions. Even if the management function is available or sufficient, the requestor may, prior to requesting the management function, determine based on the metadata whether an alternative function is available or required for one or more dependencies of the enabler and, in response to determining an alternative function is available or sufficient for at least one dependency, request the alternative function.","Additionally or alternatively, in response to a request from the requestor, the enabler may generate an error in response to not being able to perform the management function. In such cases, the requestor can receive the error via the management interface indicating the management function cannot be performed by the enabler, read metadata associated with the enabler, select an alternative function based on the metadata, and request the alternative function. For example, the one or more alternative functions can comprise one or more of calls to a management interface of another enabler, calls to a functional interface of another enabler, a workflow, etc.","In some cases, the system may also include a metadata repository. In such cases, the metadata can be stored in the metadata repository. Additionally, the system may include a supporting enabler communicatively coupled with the enabler. The supporting enabler may provide access to the metadata repository.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of various embodiments of the present invention. It will be apparent, however, to one skilled in the art that embodiments of the present invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form.","The ensuing description provides exemplary embodiments only, and is not intended to limit the scope, applicability, or configuration of the disclosure. Rather, the ensuing description of the exemplary embodiments will provide those skilled in the art with an enabling description for implementing an exemplary embodiment. It should be understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the invention as set forth in the appended claims.","Specific details are given in the following description to provide a thorough understanding of the embodiments. However, it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example, circuits, systems, networks, processes, and other components may be shown as components in block diagram form in order not to obscure the embodiments in unnecessary detail. In other instances, well-known circuits, processes, algorithms, structures, and techniques may be shown without unnecessary detail in order to avoid obscuring the embodiments.","Also, it is noted that individual embodiments may be described as a process which is depicted as a flowchart, a flow diagram, a data flow diagram, a structure diagram, or a block diagram. Although a flowchart may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed, but could have additional steps not included in a figure. A process may correspond to a method, a function, a procedure, a subroutine, a subprogram, etc. When a process corresponds to a function, its termination can correspond to a return of the function to the calling function or the main function.","The term \u201cmachine-readable medium\u201d includes, but is not limited to portable or fixed storage devices, optical storage devices, wireless channels and various other mediums capable of storing, containing or carrying instruction(s) and\/or data. A code segment or machine-executable instructions may represent a procedure, a function, a subprogram, a program, a routine, a subroutine, a module, a software package, a class, or any combination of instructions, data structures, or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and\/or receiving information, data, arguments, parameters, or memory contents. Information, arguments, parameters, data, etc. may be passed, forwarded, or transmitted via any suitable means including memory sharing, message passing, token passing, network transmission, etc.","Furthermore, embodiments may be implemented by hardware, software, firmware, middleware, microcode, hardware description languages, or any combination thereof. When implemented in software, firmware, middleware or microcode, the program code or code segments to perform the necessary tasks may be stored in a machine readable medium. A processor(s) may perform the necessary tasks.","Embodiments of the invention provide systems and methods for abstraction of a resource via an enabler and metadata. As described in the Related Applications cited above, an enabler can be defined as a reusable component that exposes capabilities from resources (e.g. other enablers, applications or services and network, OSS or BSS capabilities) via a functional interface. The exposure can be realized with an adapter architecture and layered architecture as described for example in the Related Application entitled \u201cFactorization of Concerns to Build a SDP (Service Delivery Platform)\u201d that allows the same component(s) to abstract different resources or composition of resources or technologies that provide a particular capability. The capabilities exposed in this way may be used to \u201cuse\u201d or access the resource or capabilities of the resource.","An enabler may also be used to \u201cmanage\u201d the resource. Embodiments of the present invention are directed to systematic ways to enable and automate such management. Generally speaking, management functions can be exposed by the enabler via a management interface of the enabler. Through this interface, the enabler and\/or resources or dependencies of the enabler can be managed. Management functions exposed by the management interface of the enabler can include but are not limited to provisioning of the resource (i.e., configuration), activation of the resource, state monitoring of the resource (by querying or by registering\/subscribing\/listening), usage monitoring of the resource (by querying or by registering\/subscribing\/listening, health monitoring of the resource (by querying or by registering\/subscribing\/listening), updating of the resource, de-activation of the resource, and\/or other functions. According to one embodiment, an enabler can comprise a software component. Additionally or alternatively, the enabler may itself be the result of composition by and\/or from other enablers, e.g., other software components. Various embodiments can include cases where the enabler is itself the composition of enablers and adapters to resources where some of the enabler management operations are either not implemented as acting on the resources (e.g., because the resource requires an explicit action like push a button or because the enabler's adapters are not implementing the necessary actions to manage the resource) or composing enablers (e.g., because the composing enablers would not have been implemented in ways that also composes appropriately their management interfaces assuming that these have even been implemented) or these implementations are not in usage in a particular deployment (e.g. because they are behind a firewall, not allowed by policy to be performed by the management requester, etc).","According to one embodiment, metadata can be used to accommodate any gap in the enabler's abstraction of the resource capabilities for usage or management. That is, it is possible that the enabler is unable to manage some resources, for example, because the adapter of the enabler can't, the resource does not expose interfaces or ways to manage that resource, because policies prevent management, or because the resources are in different domains where they can't be managed for technical or governance reasons. It may therefore be impossible to completely manage the lifecycle of an enabler without also managing these resources separately. It is also possible that the enabler does not offer management interfaces to perform all the lifecycle management operation that are desired. Again this would require other ways to perform these operations. In such cases, additional information can be provided via metadata associated with the enabler and indicating how to manage the enabler and its dependencies. In other words, what the adapter, governance, or deployment allows to be managed via the enabler can be managed through the enabler's management interface and its adapter(s) to the resource(s). Management functions which are not permitted, available, exposed, etc. via the management interface can be captured in metadata associated with the enabler and indicating or identifying alternate ways to perform the management. Additional details of various embodiments of the present invention will be described below with reference to the figures.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","105","110","105","110","105","110","105","110","115","100"]},"In some embodiments, the system  may also include a network . The network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially-available protocols, including without limitation TCP\/IP, SNA, IPX, AppleTalk, and the like. Merely by way of example, the network  maybe a local area network (\u201cLAN\u201d), such as an Ethernet network, a Token-Ring network and\/or the like; a wide-area network; a virtual network, including without limitation a virtual private network (\u201cVPN\u201d); the Internet; an intranet; an extranet; a public switched telephone network (\u201cPSTN\u201d); an infra-red network; a wireless network (e.g., a network operating under any of the IEEE 802.11 suite of protocols, the Bluetooth protocol known in the art, and\/or any other wireless protocol); and\/or any combination of these and\/or other networks such as GSM, GPRS, EDGE, UMTS, 3G, 2.5 G, CDMA, CDMA2000, WCDMA, EVDO etc.","The system may also include one or more server computers , ,  which can be general purpose computers and\/or specialized server computers (including, merely by way of example, PC servers, UNIX servers, mid-range servers, mainframe computers rack-mounted servers, etc.). One or more of the servers (e.g., ) may be dedicated to running applications, such as a business application, a web server, application server, etc. Such servers may be used to process requests from user computers , . The applications can also include any number of applications for controlling access to resources of the servers , , .","The web server can be running an operating system including any of those discussed above, as well as any commercially-available server operating systems. The web server can also run any of a variety of server applications and\/or mid-tier applications, including HTTP servers, FTP servers, CGI servers, database servers, Java servers, business applications, and the like. The server(s) also may be one or more computers which can be capable of executing programs or scripts in response to the user computers , . As one example, a server may execute one or more web applications. The web application may be implemented as one or more scripts or programs written in any programming language, such as Java\u2122, C, C# or C++, and\/or any scripting language, such as Perl, Python, or TCL, as well as combinations of any programming\/scripting languages. The server(s) may also include database servers, including without limitation those commercially available from Oracle\u00ae, Microsoft\u00ae, Sybase\u00ae, IBM\u00ae and the like, which can process requests from database clients running on a user computer , .","In some embodiments, an application server may create web pages dynamically for displaying on an end-user (client) system. The web pages created by the web application server may be forwarded to a user computer  via a web server. Similarly, the web server can receive web page requests and\/or input data from a user computer and can forward the web page requests and\/or input data to an application and\/or a database server. Those skilled in the art will recognize that the functions described with respect to various types of servers may be performed by a single server and\/or a plurality of specialized servers, depending on implementation-specific needs and parameters.","The system  may also include one or more databases . The database(s)  may reside in a variety of locations. By way of example, a database  may reside on a storage medium local to (and\/or resident in) one or more of the computers , , , , . Alternatively, it may be remote from any or all of the computers , , , , , and\/or in communication (e.g., via the network ) with one or more of these. In a particular set of embodiments, the database  may reside in a storage-area network (\u201cSAN\u201d) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers , , , ,  may be stored locally on the respective computer and\/or remotely, as appropriate. In one set of embodiments, the database  may be a relational database, such as Oracle 10g, that is adapted to store, update, and retrieve data in response to SQL-formatted commands.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","200","200","255","205","210","215","200","220","220"]},"The computer system  may additionally include a computer-readable storage media reader , a communications system  (e.g., a modem, a network card (wireless or wired), an infra-red communication device, etc.), and working memory , which may include RAM and ROM devices as described above. In some embodiments, the computer system  may also include a processing acceleration unit , which can include a DSP, a special-purpose processor and\/or the like.","The computer-readable storage media reader can further be connected to a computer-readable storage medium , together (and, optionally, in combination with storage device(s) ) comprehensively representing remote, local, fixed, and\/or removable storage devices plus storage media for temporarily and\/or more permanently containing computer-readable information. The communications system  may permit data to be exchanged with the network  and\/or any other computer described above with respect to the system .","The computer system  may also comprise software elements, shown as being currently located within a working memory , including an operating system  and\/or other code , such as an application program (which may be a client application, web browser, mid-tier application, RDBMS, etc.). It should be appreciated that alternate embodiments of a computer system  may have numerous variations from that described above. For example, customized hardware might also be used and\/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input\/output devices may be employed. Software of computer system  may include code  for implementing embodiments of the present invention as described herein.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3"},"As described in the Related Applications, different resources, technologies, combination of resources, etc. can be used by an enabler using different adapters. In general, an enabler  provides abstract\/logical functions and may rely on one or multiple resources , which in some cases may also be other enablers, to perform these functions via one or more adapters (south bound interfaces)  specific to the resource(s) . For example, the resource(s)  can comprise a service or a plurality of services or other elements, e.g., network resources, gateways, servers, clients, hardware, operating system or other software, etc. The enabler  also provides a northbound interface  to expose function(s) logically and\/or abstractly and can be realized in any protocol\/API\/technology binding, e.g. Java, WS (SOAP or REST), SIP, C, C++, C#, etc. According to one embodiment of the present invention, the enabler  can also provide a management interface  to expose\/provide management of the enabler  and its dependencies (i.e. resources  that the enabler implementation manages through the adapter ). Management functions exposed by the management interface  of the enabler  can include but are not limited to provisioning of the enabler  (i.e., configuration), activation of the enabler , state monitoring of the enabler , usage monitoring of the enabler , health monitoring of the enabler , updating of the enabler , de-activation of the enabler , and\/or other functions. Functions for monitoring various aspects of the enabler , e.g., state, usage health, etc., can be implemented, for example, by management interface(s)  for responding to queries from other components or on a registration\/subscription and notification basis in which registered\/subscribed and authorized listeners are informed\/notified of changes in a state of the enabler  through a the management interface .","As noted, it is possible that the enabler  is unable to manage some resources  on which its lifecycle or execution depends, for example, because the adapter  of the enabler  can't, the resource  does not expose interfaces or ways to manage that resource , because policies prevent management, or because the resources  are in different domains where they can't be managed for technical or governance reasons. It may therefore be impossible to completely manage the lifecycle of the enabler  without also managing these resources  separately. It is also possible that the enabler  does not offer management interfaces  to perform all the lifecycle management operation that are desired. Again this would require other ways to perform these operations. In such cases, additional information can be provided via metadata  associated with the enabler  and indicating how to manage the enabler  and its dependencies. In other words, management functions which are not permitted, available, exposed, etc. via the management interface  can be captured in metadata  associated with the enabler  and indicating or identifying alternate ways to performed the management function. Therefore, what the adapter , governance, or deployment allows to be managed via the enabler  can be managed through the enabler's management interface  and its adapter(s)  to the resource(s)  and metadata  can be used to accommodate any gap in the enabler's  abstraction of the resource  capabilities for usage or management.","According to one embodiment, the metadata  can be stored in one or more metadata repositories  that are associated with the enabler . Associating the metadata  with the management interface  can comprise compiling the metadata  and storing it in a repository  wherein it can be associated at registration, discovery, or retrieval with the management interface of the enabler  or enabler instance. The metadata  can be associated and maintained consistently with the management interface description and how it is stored or made available. This means that the metadata  can correctly represent changes of dependencies throughout the state of the enabler  and its instances, i.e., the association may be to an enabler  or an enabler instance (a structure of the enabler in a data model). It should be understood that other implementations that realize these concepts are contemplated and arte considered to be within the scope of the present invention. For example, these functions can be done also by adding pointers in metadata to a management interface or to an enabler or conversely in an interface (functional or management) to the metadata. Additionally or alternatively, the metadata could be embedded in the enabler interface description. Additionally or alternatively, the repositories for interface description and the metadata (as well as other metadata about the enabler (functional) or its business usage (e.g. product\/service catalog) can be combined to contain all or some subset less than all of this information or separated in different entities.","Requesters of the management functions of the enabler  or policy enforcers can be then informed of the metadata  associated with the enabler  or management interfaces  as described in the Related Applications cited above. For example, see the Related Applications entitled \u201cPolicy Interface Description Framework\u201d, \u201cMethod and Apparatus for Supporting Service Enablers Via Service Request Handholding\u201d, \u201cMethods and Systems for Exposing Access network Capabilities Using an enabler Proxy\u201d, and \u201cFactorization of Concerns to Build a SDP (Service Delivery Platform)\u201d. It should be understood that, while illustrated here as separate from the enabler , the metadata  and\/or repository , if any, need not be separate from the enabler . Rather, in some cases, the metadata  may be maintained\/stored by the enabler . In other cases, the metadata  and\/or repository  may be separate and accessible by\/with another enabler (not shown here). Various other implementations are contemplated and considered to be within the scope of the present invention. Regardless of exactly how or where it is maintained, the metadata  can, according to one embodiment, document missing capabilities of the management interface , document a recipe of what needs to be done to affect those functions, and optionally provide details or recipe (e.g. composition\/BPEL) of other enablers\/services\/interfaces that can be used instead to affect the particular management function.","Therefore, if a resource  is to be managed, it can be exposed through an enabler  as explained above and in the Related Applications. The same is true for services that are the result of composition of other services. So for example, a Web 2.0 marketplace of services can be managed even if the services are provided by different service providers. Metadata  can also be combined with the intangible dependencies described in the Related Application entitled \u201cMetadata Describing Dependencies for Composable Elements.\u201d Metadata  or management interfaces  may also describe and\/or support extensible attribute sets and schemas for the management interfaces .","When the enabler  or a resource  is to be managed, a requesting service, application, etc. can access and read the metadata  associated with that enabler  and determine how to perform the desired management function. For example, the requestor, upon reading the metadata  may determine that a particular management function is not available through the management interface  of the enabler . However, the metadata  may indicate one or more alternative functions, workflows, processes, other enablers, etc. for performing the unavailable function(s). Therefore, the requestor may then decide to implement or perform the management function according to the indications of the metadata . Additionally or alternatively, the requestor can request a desired management function and, if the requested management function is not available through the management interface  of the enabler , the enabler  can return an error message, i.e., a \u201cno-op\u201d message, to the requestor indicating the unavailability of the requested function. According to one embodiment, the error message may include or indicate the metadata  associated with the management interface  and requested function. The requestor, upon receiving such an error message may then implement or perform the management function according to the indications of the metadata .","Stated another way, an enabler  can comprise a management interface  providing an abstraction of one or more management functions for managing the enabler  or dependencies of the enabler  such as resources , for example. Metadata  can be associated with the management interface . The metadata  can be defined consistent with an interface definition for the management interface  and can identify one or more alternative functions for at least one of the one or more functions. For example, the management function can comprise any one or more of a function for provisioning of the enabler or resource , a function for activation of the enabler or resource , a function for state monitoring of the enabler or resource , a function for usage monitoring of the enabler or resource , a function for health monitoring of the enabler or resource , a function for updating of the enabler or resource , a function for de-activation of the enabler or resource , etc. The one or more alternative functions can be any one or more of calls to a management interface  of another enabler, calls to a functional interface, i.e., northbound interface, of another enabler, a workflow, etc. In some cases, the metadata  may be stored in a metadata repository  that can be maintained by a supporting enabler as will be described in greater detail below.","Managing such an enabler  and\/or dependencies of the enabler , e.g., resources , can be performed by a requestor, i.e., an application, another enabler, a workflow, etc., requesting a management function via a management interface  of the enabler . For example, prior to requesting the management function, the requestor may read the metadata  associated with the management interface  and make a determination as to how to perform or request the management function. For example, the requestor can determine whether the management function is available or unavailable. Requesting the management function via the management interface  of the enabler  can be performed in response to determining the management function is available or sufficient. In response to determining the management function is unavailable or insufficient, one or more alternative functions can be identified by the requestor based on the metadata  and the one or more alternative functions can be requested. Additionally or alternatively, the requestor can make a determination based on the metadata  as to whether an alternative function is available or sufficient for one or more dependencies of the enabler . In response to determining an alternative function is available or sufficient for at least one dependency the requestor can request the alternative function as indicated by the metadata .","In another exemplary use, the requestor may make a request to the enabler  before or without checking the metadata . In such cases, the enabler  may generate and return a \u201cno-op\u201d or other error message if the request is for a function or dependency of the enabler  that is not support. Therefore, in response to requesting the management function, the requestor may receive an error via the management interface  indicating the management function cannot be performed by the enabler. In such cases, metadata  associated with the enabler  can be read by the requestor and an alternative function can be selected and requested by the requestor based on the metadata .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["400","305","305","310","320","305","315","315","320"]},"As noted in the Related Applications, the enabler  can abstract or hide the underlying technologies of the resources . That is, the enabler  can communicate and\/or interact with the resources  in a protocol appropriate to those resources  via the adapters  or southbound interfaces and provide access to those resources  in a manner abstracted from the underlying protocols or technologies of those resources  via the northbound interface . Actions of the enabler  and\/or resources can also be controlled or affected by a management interface  to affect one or more management functions and\/or one or more policies applied by policy execution, enforcement, and management module .","According to one embodiment, the enabler  can be implemented as part of a Service Delivery Platform (SDP)  such as described, for example, in the Related Application entitled \u201cFactorization of Concerns to Build a SDP (Service Delivery Platform)\u201d referenced above. As noted therein, the SDP  can include an Enterprise Service Bus (ESB) . In such cases, the enabler  can be adapted to communicate with or through the ESB  via the northbound interfaces  of the enabler . That is, the enabler  can be adapted to place abstracted notifications or other information from the resources  and\/or enabler  or events thereof on the ESB  via the northbound interface  and\/or the management interface . Additionally or alternatively, the northbound interface  and\/or management interface  of the enabler  can receive instructions and\/or other information from other elements of the system  from the ESB .","For example, ESB  coupled with\/implemented as part of Event Driven Architecture (EDA)  as described, for example, in U.S. patent application Ser. No. 12\/045,220 filed Mar. 10, 2008 by Maes and entitled \u201cPresence-Based Event Driven Architecture\u201d the entire disclosure of which is incorporated herein by reference for all purposes. As noted therein the EDA  can also include or be coupled with an event monitor  and\/or other application as well as  and Operation Support Systems\/Business Support Systems (OSS\/BSS) . In use, events or information from the resources  can come in from the adapters  and be placed on the bus\/ESB  by the northbound interface  of the enabler . Additionally or alternatively, events or information from the resources  and\/or from the logic of the enabler  can be placed on the bus\/ESB  by the management interface  of the enabler . The events can then be distributed to a target listener (e.g., the event monitor  or other registered application(s) if any). In between the events may be managed, for example based on policies enforced by policy execution, enforcement, and management module  to order the events with a strategy, e.g., a concurrency strategy, that decides when multiple events are to be processed, who and when they are put on the bus , how the bus  processes them and how the listeners process them etc.","In summary, embodiments of the present invention provide an enabler  that can be resource and\/or technology independent with adapters , wherein the adapters  and resources  support particular functions. Enabler adapters  can also be built to abstract resource  details for use in the service layer (i.e. instead of using resources  and\/or adapters  to have an enabler  function supported, an enabler  can be used to expose enabler functions). The enabler  can be used to abstract resources  for management (instead of just capabilities) via the management interface  and metadata associated with the enabler  for management functions that may be unavailable or insufficient through the enabler  for any of a variety of reasons noted above. According to one embodiment, if a requested capability or management function can not be provided through or by the enabler , it can be reacted to as an error by enabler . The error can include a pointer to the metadata (place holder in specs). The metadata can be maintained consistent with or associated\/coordinated with the definition of the management interface  of the enabler . Thus, it can be changed if the resource  changes. The metadata can also represent composed resources\/services and thus can change if the composition changes. The requestor, upon receiving such an error message, may then implement or perform the management function according to the indications of the metadata","According to another embodiment, a requester of the function of the enabler , such as an event monitor  or another application, can find the metadata in the overall system, for example, at system setup, via an out-of-band message or communication, by association with the interface or in the interface. As noted above, the metadata can provide alternate interfaces\/ways\/recipes to execute the functions, access the requested capability, or perform the management functions requested. For example, the enabler  can provide an alternative interface to manage the resource  or initiate a workflow (e.g. including possible steps of provisioning, replacing pieces, configuring, etc.) Interfaces then may describe with metadata also how to manage a system through the generic interface (e.g., describe a schema of information to pass or where to get that description etc.) when it can't be described with a logic function (e.g. function with extensible\/discoverable attribute set). Therefore, the requestor may then decide to implement or perform the management function according to the indications of the metadata",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 5","b":["330","502","505","505","510","515","502","520","520"]},"The metadata  can also include or indicate management dependencies  of the enabler. The management dependencies  can comprise, for example, information capturing a logical flow of alternate and\/or additional management operations (using other enablers (via their northbound interfaces) or using other management interfaces of other enablers) with their associated functional properties related to the enablers and the resources which should be managed consistently. The metadata  can also include management state  information for the enabler. The management state  information can comprise design state  if in a design phase, deployment state  if in a deployment phase, operation state  if in operation phase, etc. The metadata can be \u201cassociated with\u201d the management interface description of the enabler. That association may (but does not need) be captured in the metadata.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 6","b":["605","610","615","620"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 7","b":["705","710","710","715","720","725"]},"As introduced above, a requestor of management functions of an enabler can comprise any service, application, workflow, another enabler, etc. Similarly, dependencies of an enabler can comprise any number of services, applications, components, other enablers, etc. Thus, it is contemplated that multiple enablers providing different management functions based on embodiments of the present invention can be employed to implement an infrastructure. An exemplary infrastructure implemented in such a manner is described with reference to .",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 8","b":"800"},"The enabler management repository SE  is an SE that can hold the interface description of the management interface of enablers and their instances. In addition to the management interface descriptions, the enabler definition may include the description of the enabler's functional behaviour, as well as functional interface descriptions but these latter two aspects are not mandated and can reuse common UDDI models\/techniques. In either case, the enabler management repository SE  provides a functional interface through which enablers' management interface descriptions can be stored, accessed, and manipulated.","The enabler lifecycle metadata repository SE  is an SE that holds the enabler lifecycle metadata for various phases of the enabler lifecycle. The enabler lifecycle metadata repository SE  can provide a functional interface through which the enabler lifecycle management metadata can be stored, accessed, and manipulated.","The enabler metadata coordinator SE  can provide the front-end to access or manage information in the enabler management repository SE  and enabler service lifecycle metadata repository SE . The enabler metadata coordinator SE  can act as a proxy to any management interaction of other entities (e.g. ME and other management processes\/requesters) to the enabler management repository SE  or enabler lifecycle management metadata repository SE  so that appropriate association can be maintained between the enabler lifecycle management metadata and the management interface of the enabler to which it is associated.","One or more management enablers (MEs)  can be provided including but not limited to a provisioning management enabler, a quality\/problem management enabler, a usage monitor enabler, a state monitor enabler, and\/or others. A provisioning management enabler can support the fulfillment processes for enablers. For this function, it may rely on traditional resource management support systems and\/or on the resource activation enabler described below. A quality\/problem management enabler can support assurance processes for enablers. For this function, it may rely on traditional resource management support systems and\/or on the resource and state monitor enablers described below. An enabler usage monitor can allow monitoring of the usage of enablers by querying or subscribing to usage information through the enabler management interface. It can support, for example, billing processes for enablers. For this function, it may rely on traditional billing support systems and\/or on the usage monitor enabler described herein. A state monitor enabler can be an SE that monitors state or dependency updates of an enabler and uses the service lifecycle metadata coordinator enabler SE  to update this information in the enabler lifecycle metadata repository SE . The state of an enabler can be modeled as: un-configured, i.e., an enabler without a set attributes (e.g., newly created or retired enablers); configured, i.e., an enabler with a set of attributes including associated to metadata (e.g., updates, versions, etc.); activated, i.e., the enabler is available for a particular context; instantiated, i.e., the enabler is in use; rogue, i.e., there are problems when using an instantiated enabler; and\/or de-activated, i.e., the enabler is unavailable in a particular context.","One or more resource management SEs  can be provided including but not limited to a resource activation enabler SE, resource monitor enabler SE, and\/or a usage monitor enabler SE. A resource activation enabler SE can abstract the activation and\/or configuration of resources. It can provide a functional interface through which a request to activate and\/or configure a resource can be made and responses received. A service resource activation\/configuration enabler SE can be provided to model activation or configuration of resources or services or enablers that can not be managed through the management interfaces of an enabler (e.g. because of policies, resource limitations or distribution across domains, implementation of the enabler as described above). The implementation of the resource activation\/configuration enabler SE can be done case by case (e.g. via other adapters and workflows that abstract the steps to actually perform the task for the resources that are to be managed). A resource monitor enabler SE can abstract the monitoring of resources. It can provide a functional interface through which a request to monitor a resource can be made and responses received. The resource monitoring enabler SE can model monitoring (listening or querying health, usage or state) of resources or services that can not be managed through management interface of an enablers (e.g. because of policies, resource limitations or distribution across domains, implementation of the domain as described above). A usage monitor enabler SE can be a particular SE that allows monitoring of the usage of resources or enablers by querying or subscribing to usage information for the enabler.","The various enablers described here can expose various interfaces abstracting the functions performed by the enabler. For example, the various enablers can provide an enabler management interface as introduced above that can logically expose operations including but not limited to:\n\n","Additionally, the MEs and SEs described with reference to  can provide one or more functional interfaces. For example, a functional interface of the enabler management repository SE  can logically exposes the following operations: Add Enabler; Modify Enabler; Delete Enabler; List Enablers; Get details on Enabler; Find Enabler; etc. In another example, a functional interface of an enabler lifecycle metadata repository SE can logically exposes operations such as get, set, modify, create, delete, list, etc. on identified metadata structure elements. In yet another example, a functional interface of the enabler lifecycle metadata coordinator SE  can logically expose operations including but not limited to:\n\n","It should be understood that details of embodiments of the present invention can vary between implementations without departing from the scope of the present invention. For example, embodiments of the present invention can be implemented with Web Services Description language (WSDL), Universal Description Discovery and Integration (UDDI), service catalogs, etc. Furthermore, the generic interfaces of the enablers can be used to manage any resource or service. Various systems can be implemented to enforce\/coordinate the embodiments of the invention and\/or use the interface to manage any resource of service. The enablers can expose to applications and\/or 3parties the resource or service capabilities (possibly with policy enforcement). In some cases, enablers can do out-of-band management of resources or provide alternatives to missing capabilities\/functions. Various other alternatives and variations are contemplated and considered to be within the scope of the present invention.","While exact implementations can vary, an exemplary embodiment of metadata will be described for illustrative purposes. This example is based on life cycle management metadata as discussed above and which comprises additional information about management interface of enablers, management dependencies of enablers, and management state of the enablers. This example is focused on how to address the problem of management dependencies of a enablers. Management dependencies of an enabler can be considered amounts for associating a recipe on how to manage dependencies with management interface operations and attributes. A recipe can be a program (e.g. script) that performs the additional management instructions. Per the philosophy so far of the pattern to manage enablers and dependencies that we described above, the recipe can be \u201creadable\u201d by the management requester so that it can either execute it or use the information to decide itself what to do and can be machine readable, human readable, or something facilitated with a declarative approach. Typically, the recipe can involve calling (management) interfaces of other enablers and\/or calling Functional Interfaces (FIs) of other supporting enablers (to manage resources without management interfaces or deal with other limitations, e.g., cross domain policies etc.) These may involve \u201chuman workflows\u201d.","Such recipes match the concept of a \u201cbusiness process.\u201d For example, reusing existing standards and industry practices, the recipe can be modeled by Business Process Management (BPM). A possible standard to reuse is Business Process Execution Language (BPEL). This can be illustrated by the following use case:\n\n","In various implementations, recipes can be associated to instances, operations, and\/or attributes. To do so, one could push the problem to the lifecycle management supporting enablers interface\/behavior or split the problem as follows:\n\n","Another exemplary use case illustrates manage of an enabler with dependencies that it can't manage itself. In this example, the business process can orchestrate calls to appropriate SES SMIs and ISS FIs, e.g., the BPEL executes pre-conditions, calls enabler management interface operation with appropriate attributes, then orchestrates calls to other enablers' management interfaces and supporting enablers. If, for example, a human intervention (e.g. to reset a resource or initiate an operation in a firewalled domain) is needed, it can be performed by an orchestrated supporting enabler call or even modeled in BPEL. Different approaches are therefore:\n\n","Going beyond this to support full metadata as discussed in this invention. Management metadata aspects are discussed above. Based on this description, additional information about an enabler can be included declaratively in the business process (e.g., as BPEL comments). Convention could be specified or ignored. Things like pre or post conditions to SMI can also be model-able as part of the business process associated to certain SMI operations or as additional business processes","Another exemplary use case illustrates management of an enabler with dependencies that it can't manage itself. In this example, the business process can orchestrate calls to appropriate SES SMIs and ISS FIs, e.g., the BPEL executes pre-conditions, calls SES SMI operation with needed attributes, then orchestrates necessary calls to other SES SMIs and ISSs. If, for example, a human intervention (e.g., to reset a resource or initiate an operation in a firewalled domain) is needed, it can be performed by an orchestrated ISS call or even modeled in BPEL.","Note that it is also possible to have a case where the metadata is a schema and data driven. However, a business process can contain such information and can encompass much more. Additionally, a data structure would involve pushing much enabler specific knowledge to the requester\/manager. Accessing the management metadata for an enabler would not help determine what to do next without that knowledge. A recipe forces the design and deployment stage to capture not just the information but hints on how to actually automatically exploit. During operation again maintaining the recipe is straightforward and involves concretizing the interface instances to point to in the recipe for an enabler instance. Implementing the recipe as XML\/human readable allows approaches that would decide themselves on the management requester side what to do and therefore supports anything that the data schema only approach would support. The recipe approach limits the semantic to specify while being able to support any use case. The data schema only approach, because it contains no recipe, would rely on specification of a semantic to allow a requester to infer a recipe. That is a tremendous task and risks being enabler specific. Even in such cases, the management requester still would need to know much about the enabler specific meanings which is huge task that is not finite, 2) recipe for no adoption at least cross industry, assuming the size of the task is overcome, and 3) is not needed because with a recipe approach the problems are avoided. With BPEL even if the recipe specification exists, the trigger and passage of operation can be specified and attributes and may be a metadata skeleton structure for the BPEL document.","In the foregoing description, for the purposes of illustration, methods were described in a particular order. It should be appreciated that in alternate embodiments, the methods may be performed in a different order than that described. It should also be appreciated that the methods described above may be performed by hardware components or may be embodied in sequences of machine-executable instructions, which may be used to cause a machine, such as a general-purpose or special-purpose processor or logic circuits programmed with the instructions to perform the methods. These machine-executable instructions may be stored on one or more machine readable mediums, such as CD-ROMs or other type of optical disks, floppy diskettes, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, flash memory, or other types of machine-readable mediums suitable for storing electronic instructions. Alternatively, the methods may be performed by a combination of hardware and software.","While illustrative and presently preferred embodiments of the invention have been described in detail herein, it is to be understood that the inventive concepts may be otherwise variously embodied and employed, and that the appended claims are intended to be construed to include such variations, except as limited by the prior art."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
