---
title: Power-aware debugging
abstract: A debugging system produces displays in response to an IC design and results of a logic simulation of IC behavior based on the IC design. The IC design includes a hardware description language (HDL) model of the IC describing the IC as comprising cell instances communicating via data signals and power sources for supplying power to the cell instances. The IC design also includes power definition markup language (PDML) model describing a power intent of the IC design. The debugging system generates displays representing HDL code that are annotated to indicate how the power intent of the IC design described by the PDML model relates to the portion of the HDL model represented by the display. The debugging system also generates signals trace displays indicating how both the logic and power intent of the IC design affect the value of a user-selected signal at a user-selected time during the logic simulation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08176453&OS=08176453&RS=08176453
owner: Springsoft USA, Inc.
number: 08176453
owner_city: San Jose
owner_country: US
publication_date: 20090911
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims benefit under 35 USC 119(e) of Provisional Application No. 61\/146,895 filed Jan. 23, 2009, the entire disclosure of which is hereby incorporated by reference herein for all purposes.","1. Field of the Invention","The invention relates in general to systems for verifying integrated circuit (IC) designs, and in particular to a system for debugging power-aware IC designs.","2. Description of Related Art","An IC that is not designed to conserve power can use up to ten times more power than an IC of similar capability that is designed to conserve power. Low-power design not only increases the battery usage for mobile devices but also improves system reliability and lowers the cost of packaging. Low-power techniques such as clock-gating, gate-optimization, multi-VDD, and multi-threshold have been studied for decades and been proved to be effective at reducing dynamic power consumption. However, as manufacturing processes continue to advance, leakage power consumption has begun to play a more critical role in power consumption. Power management (PM) techniques such as power-shutoff (PSO), and dynamic voltage frequency scaling (DVFS), multi-voltage design, and power aware memories can be more effective to reduce both dynamic and leakage power consumption.","Power Shutoff (PSO), also called \u201cpower gating\u201d, involves temporarily shutting down a section of an IC not currently in use to halt power dissipation in that section. An IC designer partitions an IC into several \u201cpower domains\u201d (or \u201cpower islands\u201d), each power domain having a separate primary power supply. The power supply to a \u201cgated\u201d power domain can be turned off so that the devices in that power domain do not consume power when they are not needed. Before switching off the supply to a gated power domain, it may be necessary to store data indicating states of various signals within that domain so the stored data can be used for resetting devices within that domain to their last states when the domain's power is restored. An IC may therefore include memory devices (\u201cretention cells\u201d) to store such data while a gated power domain's supply is off. A gated power domain may also require \u201cisolation cells\u201d to isolate one or more of the domain's output ports from the external environment when the domain's power is off to prevent those output ports from supplying floating inputs to devices in active power domains that can drive those devices to unexpected states. An IC having gated power domains will include a special controller for turning on and off gated power domains under appropriate conditions and for controlling each domain's retention and isolation cells.","A multi-voltage IC is organized into various \u201cvoltage domains\u201d that receive differing supply voltages. Since both the speed and power dissipation of a circuit device increase with its supply voltage, devices that must work at high speed receive the full supply voltage while devices that can operate more slowly can operate at reduced voltages. Supplying each device with only the voltage it needs reduces overall power consumption. A multi-voltage design employs special buffers (\u201clevel-shifters\u201d) to shift logic levels of signals crossing voltage domain boundaries. A multi-voltage IC may employ dynamic Voltage and Frequency Scaling (DVFS), also known simply as Dynamic Voltage Scaling (DVS), a technique for temporarily reducing both the voltage and clock frequency of devices within a voltage domain in order to reduce energy consumption when high-speed operation is not needed. In such cases, the IC's power controller must be able to signal the domains level-shifters to accommodate the changes in supply voltage.","Power Definition Markup Language","Since adding power gating, multi-voltage domains or dynamic voltage and frequency scaling late in the design process, at a low gate level of abstraction, can introduce unanticipated bugs in the design, an IC designer should try to plan power management at the register-transfer-level (RTL) or earlier architecture stage of the IC design process.","Although designers typically employ a hardware description language (HDL) to describe an IC design, HDL lacks the capability to model power management. Designers now use Power Definition Markup Languages (PDML) to compensate the lack of power modeling capability in HDL. PDML enables a designer to incorporate a design's \u201cpower-intent\u201d into each level of design abstraction by specifying power and DVFS domains, by indicating signals requiring state retention, isolation and level shifting, and by specifying the manner in which such power management devices are to be controlled.","PDML focuses only on the power related aspects of a design by inferring a virtual power network that is parallel to the HDL design and working in tandem with it, but which is not a part of the HDL design itself. Hence it is not necessary to modify an HDL language description of an IC to provide power-aware capability to a circuit design. PDML models can overlay power-aware behaviors onto an HDL design and allow verification systems to verify those behaviors. Thus PDML provides a high-level abstract model of the intended power management behavior for use when the IC design is at a high level of abstraction, and it also allows a designer to subsequently match the specified behavior to devices implementing that power behavior","Verification","An IC designer can compile an HDL\/PDML design and various instructions into a testbench program for a logic simulator that simulates the response of the IC to a specified input signal pattern. The simulator generates and stores value change data representing the behavior of selected circuit signals so that the designer, employing a debugging tool processing the value change data, can determine whether an IC constructed in accordance with the HDL design will behave as expected. A debugging tool can display waveforms representing signal behavior, HDL code, and schematic diagrams representing the HDL design and can annotate the waveform, code and schematic diagram displays to relate signal behavior to portions of the HDL design that are responsible for that signal behavior.","A conventional logic simulator can take into account a PDML model of the IC when it simulates and HDL design by connecting the PDML model to clock, reset, power on\/off and other power control signals of the HDL design. Those signals tell the PDML model when to trigger power-aware behavior by telling the simulator when to change normal RTL behavior to reflect results of power control network activity. For example, if a power domain is shutoff at a particular time during a logic simulation, the PDML model will tell the HDL simulator to cancel all events within that power domain and force values of signals within that domain as \u201cunknown\u201d. Thus an HDL simulator can impose the power intent specified by the PDML description on the circuit behavior of the HDL design during a logic simulation run thereby allowing a designer to verify whether the simulated IC behavior satisfies the specified power intent.","Even though a simulator can take into account the power intent of a PDML when simulating IC behavior, it can be difficult and time-consuming for a designer to debug an HDL design having associated PDML power-intent. When employing a conventional debugging tool to debug an HDL design, the designer loads the HDL design and the logic simulation output data into the debugging tool and then uses the debugging tool to trace through the design to determine why various signals may take on unexpected values at various times during the logic simulation. Since traditional debugging tools don't take the PDML aspects of a design into consideration, designers must manually cross reference the HDL and PDML designs to determine whether an unexpected signal value is caused by a defect in the HDL design or by PDML introduced effects. Debugging an HDL\/PDML design can therefore be tedious and error-prone, particularly when the HDL and PDML aspects of a design are developed by different design teams at different stages of the design process.","What is needed is a debugging tool that takes the PDML portion of an HDL\/PDML design into account to make it easier for a designer to determine the causes of unexpected circuit behavior.","The present invention relates to an automated power-aware debugging system for a hardware description language (HDL) integrated circuit design having a corresponding power-intent described in a Power Definition Markup Language (PDML).","A debugging system in accordance with the invention produces displays in response to an IC design and results of a logic simulation of IC behavior based on the IC design.","The IC design includes a hardware description language (HDL) model of the IC describing the IC as being formed by a set of cell instances communicating via data signals and a set of power sources for supplying power to the cell instances. The IC design also includes power definition markup language (PDML) model describing a power intent of the IC design by indicating which power sources can be turned on and off or have output voltages that can vary during IC operation and by indicating which data signals are subject to level-shifting, isolation or retention.","The debugging system generates a display representing HDL code that is annotated to indicate how the power intent of the IC design described by the PDML model relates to the portion of the HDL model represented by the display. Displayed code referencing any data signal is annotated to indicate whether the data signal is subject to retention, isolation or level-shifting and to indicate whether the data signal was saved, restored or isolated at a user-selected time.","The debugging system also generates a signal trace display indicating how both the logic and power intent of the IC design affect the value of a user-selected signal at a user-selected time during the logic simulation. The trace display includes representations of cell instances and data signals that can influence the value of the user-selected data signal, representations of power supplies supplying power to the represented cell instances and representations of retention, isolation and level-shifting cells that can influence the value of the user-selected data signal. The power supply representations are annotated to represent their on\/off states and output signal voltages at the user-selected simulation time. The retention and isolation cell instance representations are annotated to indicate the operating modes at the user selected simulation time.","The debugger also generates a display describing a set of legal power intent states of the IC described by the PDML code, identifying the legal power state of the IC, if any, at the user-selected simulation time, and providing a warning when the IC is an illegal power state at the user-selected simulation time.","An IC design may include a power management system to help the IC conserve power.  is a block diagram of an example RISC processor IC  including an I\/O controller , a set of data, address and instruction registers A-D, a program counter , a state sequencer , a register file unit  and an arithmetic logic unit (ALU)  and a power control unit  that communicate through a bus . ALU  includes an arithmetic unit (AU)  and a logical unit (LU) . A set of power switches  couple the devices to various power sources and a clocking system  supplies clock signals to the various devices for controlling their frequency of operation. As discussed below, power control unit  controls various power management features of IC .","Power Domains, Power Gating","A \u201cpower domain\u201d (also known as a \u201cpower island\u201d) is a set of devices within an IC that receive power from a common source. An IC may have more than one power domain, and some of the power domains may be gated. The supply to a \u201cgated\u201d power domain can be temporarily turned off when devices within that domain are not needed. An IC that selectively turns on and off gated power domains is said to engage in \u201cpower gating\u201d or \u201cpower shutoff\u2019 (PSO). In the example of , IC  includes a set of five power domains P-P (also known as \u201cpower islands\u201d), each having its own primary power supply connected though separate power switch  controlled by power control unit . The power to domain P is always on, but power domains P-P are gated through power switches  so that power control unit  can turn them off to save power when state sequencer  tells power control unit  that devices in those domains are to be inactive and can turn them back on when state sequencer  tells power control unit  that those devices are to be active.","Multi-Voltage and Multi-Frequency Domains","Since both the speed and power consumption of a circuit device increase with its supply voltage, it is possible to reduce the power consumption of devices that can operate more slowly by reducing their supply voltages. In a multi-voltage IC, not all power domains operate at the same supply voltage. Thus in a multi-voltage IC, each device resides not only in a particular power domain based on the source of its power supply, but also in a particular \u201cvoltage domain\u201d based on the voltage of its supply. Devices that must operate at high frequency are assigned to higher voltage domains while devices that may operate at lower frequency are assigned to lower voltage domains. In the example IC of , domains P-P normally operate at 5.0V whereas domain P operates at 3.6V.","An IC employing \u201cDynamic Voltage and Frequency Scaling (DVFS)\u201d, also known simply as \u201cDynamic Voltage Scaling (DVS)\u201d, can temporarily reduce the voltage and frequency of devices to save power during times when the devices need not operate at high speed. For example, power control unit  of  reduces power consumption by signaling power switches  and clocking system  to reduce the voltage and frequency operation of devices within power domain P when they can operate at low speed and otherwise increases the voltage and frequency of operation of those devices when they can operate at high speed.","Power Intent","The strategy that an IC uses to reduce power consumption is called its \u201cpower intent\u201d.  depicts the power intent of the IC  design with respect to supply voltage. In the example of , IC is depicted as having four power modes of operation PM-PM. State sequencer  selects the current power mode based on the current demands on the processor. In power mode PM, power is supplied to all power domains P-P, each power domain P-P is connected to a 5.0 v supply while domain P is connected to a 3.6 v supply. In power mode PM the supply to power domain P is reduced to 3.6 v and the supply to power domain P is turned off. In power mode PM, the supplies to power domains P and P are also turned off. In power mode PM, the supply to power domain P is reduced to 3.6 v and the supply to power domain P is turned off.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["1","1","2","4","5"]},"Retention Cells","When power control unit  turns off the supply to any of power domains P-P, it may be necessary to store data indicating current states of various signals produced or received by devices within the domain so that when power control unit  later restores power to that domain, those devices can resume operation from the states they had before the power was turned off. \u201cRetention cells\u201d retain signal information that would otherwise be lost when a power domain's power supply is turned off and restore signals to their original states when the domain's power is turned back on. In the example of , a set of low-power, low speed retention cells  store some of the data normally stored in higher-power, higher speed register file  when the power to register file  is turned off. When state sequencer  signals power unit  that the system is entering power mode PM, the power control unit signals retention cells  to store the data currently in register files. When state sequencer  later signals power control unit  that the system is leaving power mode PM and entering one of power modes PM-PM, power control unit  signals retention cells  to write that data back into register file . A data signal subject to retention is supplied as input to a retention cell, which also has a control signal input. When the control signal indicates that the value of the data signal is to be saved, the retention cell stores the current value of the data signal. The retention cell normally drives its output signal to the value indicated by its input data signal. However when the control signal indicates the data signal is to be \u201crestored\u201d, the retention cell drives its output signal to the last stored value of the data signal.","Isolation Cells","A power gating domain may include \u201cisolation cells\u201d controlled by power control unit  for disconnecting output ports of various devices within the domain from other parts of the IC when the domain's power is off to prevent those output ports from providing floating inputs to other circuits that can produce unexpected behavior. For example, when power control unit  turns off AU  or LU  as the IC enters power mode PM, it signals isolation cells  or  to isolate the outputs of AU  or LU from inputs of other devices within ALU  to prevent those inputs from being driven to unexpected states. Similarly a set of isolation cells  controlled by power control unit  can isolate outputs of ALU  or register file  from bus  during power mode PM or PM when ALU or register file  is off. A data signal subject to isolation is supplied as input to an isolation cell. The isolation cell also has a control signal input and a clamp signal input. The control signal input indicates whether the isolation cell is activated. When the control signal indicates isolation is \u201coff\u201d, the isolation cell delivers the data signal to its output. When the control signal indicates isolation is \u201con\u201d, the isolation cell drives its output to the level of its clamp signal input.","Level-Shifting Cells","A multi-voltage IC employs a set of buffers (\u201clevel-shifting cells\u201d) to shift logic levels of signals crossing voltage domain boundaries. For example while ALU  of  operates at 5.0 v in power modes PM and PM, it must communicate via bus  with devices of domains P and P that can operate at 3.6V. In order to allow ALU  to communicate with devices operating at the lower voltage, level shifting cells  are provided to appropriately shift signals on bus  between 3.6 and 5 volts as they pass between voltage domains. Since domain P can switch between 5 v operation in power mode PM and 3.6 v operation in power modes PM-PM, power control unit  tells level shifting cells  to adjust their level shifting behavior depending on whether the system is in power mode PM or one of power modes PM-PM.","Logic Simulation","Referring to , an IC designer generates an RTL or gate level IC design in the form of a conventional hardware description language (HDL) data file . The designer can also create a Power Definition Markup Language (PDML) file  specifying the IC's power-intent. PDML file  provides a high-level abstract model of the IC's power intent at the RTL level of the design. At the gate level of the design, HDL file  describes the IC as including instances of standard cells specified in a cell library  and PDML file  correlates specified power intent behavior to cell instances referenced by HDL file .","To verify that the IC described by HDL file  and PDML file  will behave as expected, the designer creates a testbench file  and supplies it, along with cell library , as inputs to a verification system  including a logic simulator  and possibly an emulator . A compiler  within verification system  compiles test bench  and cell behavioral models contained in cell library  into programs for simulator  and emulator  enabling them to simulate the response of the IC to a set of input signals and to produce a value change data (VCD) file  containing data indicating how selected IC signals behaved during the logic simulation. Testbench file , based on HDL file  and PDML file , also includes a specification  of the behavior of the IC's input signals during the logic simulation and instructions  for controlling various aspects of the logic simulation.","Dynamic Power-Aware Debugging","The invention relates to a \u201cpower-aware debugger\u201d  for processing the data in VCD file , HDL file  and PDML file  to produce various displays as discussed below that help the designer to determine whether the simulated IC signals represented by the data in VCD file  behaved as expected, and to determine which portions of the HDL and PDML designs led to any unexpected signal behavior.","Module Browser Window",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 3","FIG. 4"],"b":["54","60","30","60","62","34","68","54","62"]},"A box  indicates a current user-selected simulation time. Since at any time during the logic simulation, the supply to a power domain will be either on or off, debugger  annotates icons in module browser window  representing modules residing in switchable power domains with \u201cON\u201d or \u201cOFF\u201d to indicate the on\/off power states of the modules at the currently selected simulation time and with the current voltage level supplied to that module. In the example of , the power to the AU module is OFF and at 0 volts while the power to the LU module is on and set at 5 v.","When the user uses a mouse click to select an icon in module browser window , debugger  highlights the module's name and annotations and displays the name, current On\/Off state and current supply voltage of its power domain in a power information bar . In the example of , the user has selected a \u201cREG_FILE\u201d module which resides in a power domain P having a 3.6 v power supply that is currently on.","Code Browser Window","When a user selects an icon representing a module defined by a block of HDL code in HDL file , debugger  displays the HDL code in code browser window , In the example of , code browser window  currently displays lines - of the code implementing the currently selected REG_FILE module. A scroll bar  enables the user to scroll through the code. In accordance with the invention, debugger  annotates references in the HDL code to signals or data subject to level-shifting, retention, and isolation. For example, debugger  annotates references in code browser window  to signals, such as the clock, VMA and R_W signals, requiring level shifting through a level shifting cell with the symbol \u201cLvs\u201d.","Debugger  annotates references in code browser window  to signals whose values are stored in retention cells during power off conditions with one of symbols \u201cRET\u201d, \u201cRET(Save)\u201d, or \u201cRET(Restore)\u201d. The \u201cRET\u201d symbol indicates the signal is subject to retention but that the state of the signal is controlled by the HDL logic at the currently selected simulation time. The \u201cRET(Save)\u201d symbol indicates the state of the signal is controlled by HDL logic but is being saved in a retention cell during the current logic simulation cycle in anticipation of the module's power being turned off during a next logic simulation cycle. The \u201cRET (Restore)\u201d symbol indicates that the state of the signal was saved in a retention cell at an earlier time and is being restored to that state during the current logic simulation cycle. In the example of , the annotation RET(Save) indicates data conveyed by the macroram[addr] bus is currently being saved in a retention cell in anticipation of turning off the power supply to the P power domain of the REG_FILE","Debugger  annotates references in code browser window  to signals such as the Out signal that are subject to isolation via an isolation cell with one of symbols \u201cISO(On)\u201d or \u201cISO(Off)\u201d. The ISO(On) symbol indicates that the annotated signal is isolated from receiving device input ports as of the current user-selected simulation time, while the ISO(Off) symbol indicates that the signal is not currently isolated from receiving device input ports. In the example of  the ISO(Off) annotation indicates that the OUT2 signal passes through an isolation cell but is not currently isolated.","Dynamic Power-Intent Annotation of Netlist Schema","When the user mouse clicks a button  of the browser window  of , debugger  displays a pop-up window containing a schematic diagram (a \u201cnetlist-schema\u201d) of the currently selected module of the netlist as illustrated, for example in . The netlist-schema graphically depicts the various component instances of the module and the nets that interconnect them. In accordance with the invention, debugger  annotates each instance's power-domain and on\/off\/voltage status. For example, in the display of , debugger  indicates that the ALU module is formed by a set of interconnected modules 1-alu, AU and LU. The display further indicates that the 1-alu module resides in power domain P, that its voltage supply is on, and set at 5V, that the AU module resided is power domain P, which is off (at 0 volts), and that the LU module resides in power domain P, which is on and at 5 v. Furthermore, in , the module blocks and signals are set to different colors to represent their power domains.","System Power State Table","When the user mouse clicks a button  of browser  of , debugger  displays a system power state table  as illustrated in  in a pop-up window. Power state table  indicates the currently selected simulation time in a cell . The cells of row  indicate the power domains P-P and the name vdd-vdd of the power supply signal for each power domain and the cells of column  indicate the four power states PM-PM. Each cell residing at the intersection of a power mode row and a power domain column indicates the voltage and state of the power supply for that power domain. For example cell  indicates that when the IC is in power mode PM, the voltage of power supply signal vdd for power domain P is 3.6V and cell  indicates that the power supply signal vdd for power domain P is off. The row of cells for the power mode PM currently in effect at time 365 ns is highlighted (in bold face).","When debugger  responds to a user request to display system power state table , it determines whether the voltage or on\/off state of each supply voltages vdd-vdd at the indicated simulation time matches the voltage or state specified in the PDML file . If debugger  finds that one or more of supply voltages vdd-vdd is of an incorrect voltage or on\/off state, it displays an \u201cillegal power state\u201d warning message in a pop-up window, as illustrated in . It also displays both the current state and expected state of the supply voltage in the appropriate cell in state table  and flashes the cell to attract the user's attention. In the example of , the vdd supply to power domain P is currently OFF even though the PM power mode requires it to be at 5V.","Power-Aware Incremental Driver Tracing","When a user determines that an IC signal had an unexpected state at some time during a logic simulation, a conventional debugger will help the user determine the logic that caused that unexpected state by displaying a schematic diagram depicting the fan-in cone of the signal. The fan-in cone of a signal is the set of circuit devices that can have a logical effect on the state of the signal. When implementing \u201cincremental driver tracing\u201d the debugger initially displays the schematic only of the module instance that generates the signal and then adds schematics of other module instances to the fan-in cone schematic in response to user input.","For example referring to , a user wanting to know why a signal A is of a particular state at a particular time may select the signal and request an \u201cincremental driver trace\u201d for that signal. A conventional debugger will then produce a schematic diagram, for example as shown in , including a schematic diagram of the module instance INST that produces that signal along with the input signals A-A to that instance. The simulator sets a signal value to X (unknown) rather than to a value such as 0 or 1, when it cannot determine the signal's state. This can happen when logic fails to set the signal to a known value, or when power supply to a domain producing the signal is off, or when the signal is a logical result of another signal having an unknown value.","Although the debugger will display a detailed schematic diagram of the instance if available, for simplicity  depicts the schematic diagram only as a box. If the user wishes to view schematic diagrams of the sources of input signals A-A, the user can select those signals and request the debugger to update the display to include their source module instances INST-INST and their input signals A-A as illustrated in . If the user then wants the display to include the source module instance of signal A, the user can select signal A and request the debugger to include that source instance INST as shown in .","A debugger in accordance with the present invention improves the prior art incremental driver tracing debugging feature to provide incremental, \u201cpower-aware\u201d driver tracing wherein the display depicts not only the data signal connectivity of the device and module instances within the fan-in cone of the selected signal defined by the HDL code but also the power connectivity of the fan-in cone introduced by the PDML code. For example,  shows a Power-Aware fan-in display that is similar to that of  except that it also includes a depiction of the power source  supplying the power signals vdd and vss to module instance INST with a graphic depiction of those power signals. The power supply signals vdd and vss are dashed or depicted in distinctive colors to distinguish them from data signals A-A. Power source  is annotated to indicate the current voltage (5V) of vdd at the currently selected simulation time.  shows an improved, power-aware, version of the fan-in cone of  including power source  supplying vdd and vss to instances INST, INST and INST, and a second power source  supplying vdd and vss to instance INST. Power supply  is annotated as being OFF at the currently selected simulation time. The power-aware incremental driver trace of  is advantageous over the prior art incremental driver trace of , for example when the unexpected state of signal A arose because vdd was OFF and not because of any error in the logic of INST-INST.","Instances of isolation, retention and level shifting cells are included in the fan-in cone of a power-aware incremental driver trace. For example, as illustrated in , the fan-in cone depicts an isolation cell ISO in the A signal path and includes not only its input and output data signals A\u2032 and A\u2033, but also the name and ON\/OFF state of the control signal CNT that determines whether the isolation cell is on (isolating) or off (not isolating) and the voltage of the clamp signal CLAMP controlling the logic state of the output A\u2033 when isolation is on. When an instance of a level-shifting cell LS is included in a power-aware driver trace, the display includes its input and output data signals A\u2033 and A, and their states and the power supply signals.","As illustrated in , when an instance of a retention cell RET is included in a power-aware driver trace, the display includes its input and output data signals D and D, and their states and the power supply signals, the name and state of the control signal SAV that tells the retention cell when to save the state of its input signal D and the name and state of its restore signals REST that tells the retention cell whether it is to use its input signal D or its stored data to drive its output signal D.","Power-Aware Active Driver Tracing","A conventional debugger implementing Incremental driver tracing determines which module instances are to be included in the fan-in cone of a selected signal only by analyzing the topology of the circuit described by the HDL code. For example in , a conventional debugger will include instance INST in the display when the user selects signal A simply because its output signal A is an input to INST and because INST generates the signal of interest A. A conventional debugger can implement \u201cactive driver tracing\u201d, which is similar to incremental driver tracing described above, except that the debugger analyzes circuit logic to determine which signals may have contributed to the current state of the selected signal and highlights those signals.","For example, as illustrated in , when a user selects signal A and requests an active driver trace, a conventional debugger will produced a fan-in display including the module instance INST that produced the A signal and the input signals A-A to instance ISNT. The debugger will analyze the logic of INST based on the HDL description of it to determine which of signals A-A influenced the state of A and will highlight those signals. In the example of , the debugger determined that signals A and A affected the state of signal A. The debugger can determine whether an input signal to a module instance can change the state of any output signal by changing the state of the input signal and, based on the instance's logic, determining whether the state of its output signal will change. The debugger determined that signal A was \u201cinactive\u201d, in the sense that it had no influence on the state of signal A while signals A and A were active. With the active signals highlighted as in , the user need request an active incremental trace only of signals A and A as illustrated in  so that the fan-in display is not obscured by module instances such as instance INST of  whose output signal states are not relevant to the state of the selected signal A of interest.","A debugger in accordance with the invention implements \u201cpower-aware active driver tracing\u201d similar to conventional active driver tracing except that it includes the power connectivity of the fan-in cone introduced by the PDML code. For example the prior art active driver trace fan-in displays of  are expanded as shown in  to include the vdd and vdd power sources, the isolation cell ISO and the level-shifting cell LS. Power aware active driver tracing will highlight clamp signal, restore signal and unknown values caused by power shut-off. For example in , the CNT signal is highlighted because the debugger determined that the on\/off state of the control signal could affect the state of active signal A\u2033.","Automated Power-Aware Active Driver Tracing","As discussed above, when a conventional debugger operates in the active driver trace mode, the fan-in display initially includes only the instance that produced the selected signal of interest as shown, for example, in . The debugger then incrementally expands the fan-in display, for example as shown in , whenever the user selects a signal in the current fan-in display and requests an incremental trace of that signal.","Referring to , when a conventional debugger operates in an \u201cautomated active driver tracing\u201d mode, the initial fan-in display will automatically include all module instances INST-INST that could have affected the selected signal A because the debugger automatically carries out an incremental trace of all active signals.","Referring to , a debugger in accordance with the invention includes an \u201cautomated power-aware active driver tracing\u201d mode that is similar to the conventional automated active driver tracing mode but which expands the fan-in cone to include the power connectivity introduced by the PDML code. For example as shown in , the fan-in cone includes the power sources vdd, vdd and vdd, isolation and level shifting cells ISO and LS.","Automated Power-Aware X-Source Tracing","A debugger in accordance with the invention provides an \u201cautomated power-aware X-source tracing\u201d mode in which it generates a fan-in display for a user-selected signal having an unknown value (X) that helps the user to determine whether the unknown value was caused by HDL logic or by PDML power-intent behavior. In this mode, the debugger will trace back signals having unknown values until it reaches any of the following stopping conditions:","1. An instance which gets power-shut-off (VDD==off \u2225 VSS==off).","2. A retention cell having a store-control is on, and stored value is unknown (\u201cX.\u201d).","3. An isolation cell whose isolation-control is on, and whose clamp signal value is unknown.","4. An instance for which all input signals have known values.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 20","b":["1","1","2","4"]},"Thus has been shown and described a power-aware debugging system in accordance with the invention. While the foregoing specification and the drawings depict exemplary embodiments of the best mode(s) of practicing the invention, and elements or steps of the depicted best mode(s) exemplify the elements or steps of the invention as recited in the appended claims, the appended claims are intended to apply to any mode of practicing the invention comprising the combination of elements or steps as described in any one of the claims, including elements or steps that are functional equivalents of the example elements or steps of the exemplary embodiment(s) of the invention depicted in the specification and drawings."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 4-7","FIG. 3"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 8-10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 11-13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 14 and 15"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 16 and 17"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
