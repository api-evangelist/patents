---
title: Preventing and responding to disabling of malware protection software
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for responding to an attempt to disable a malware protection program and performing an identification process and one or more protection processes to prevent the execution of potentially malicious code. In one aspect, a method includes monitoring for attempts to disable a malware protection program, identifying a process that generated an attempt to disable the malware protection program, determining whether the process is an approved process, and in response, performing one or more protection processes on the process so as to prevent the execution of potentially malicious code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015829&OS=09015829&RS=09015829
owner: McAfee, Inc.
number: 09015829
owner_city: Santa Clara
owner_country: US
publication_date: 20091020
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This specification relates to malware protection software, and more particularly to preventing and responding to an attempt to disable malware protection software.","Malware is any kind of malicious software such as, for example, a computer virus, Trojan horse, spyware, and malicious active content. Malware can spread via infected email attachments, shared files, or malicious websites. Malware attach to files so when the infected file executes, the malware also execute and, for example, self-replicate without user knowledge or permission. Other malware target a computer's memory and infect files as the computer opens, modifies, or creates files. Some malware can lie dormant and not show any signs of existence, e.g., key capture software, monitoring software, etc.","Malware protection software generally operates by scanning a computer's memory and disk drives or monitoring network traffic for malicious code. Some malware can disable or otherwise attack or infect the malware protection software itself. If such malware attacks are not detected by the malware protection software, the malware protection software becomes compromised and the malware causes further damage to the system such as infecting system files, downloading and installing other malware, stealing confidential information, etc. Even if the attempt to disable the malware protection software is prevented, the malware protection software may fail to prevent the malware from causing further damage to the system.","This specification describes technologies relating to preventing and responding to attacks on malware protection software and preventing further damage to the system.","In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of monitoring, by a first computer, for attempts to disable a malware protection program; in response to monitoring an attempt to disable the malware protection program: identifying, by the first computer, a first process that generated the attempt to disable the malware protection program; preventing, by the first computer, the first process from disabling the malware protection program; determining, by the first computer, whether the first process is an approved process; in response to determining that the first process is an approved process, providing, by the first computer, a user prompt to terminate the first process; and in response to determining that the first process is not an approved process, performing, by the first computer, one or more protection processes on the first process. Other implementations of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer-readable storage devices.","Particular implementations of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. A computer process that attempts to disable the malware protection software is monitored and prevented from disabling the malware protection software. The process is identified and information is collected so that a determination can be made as to what protection processes should be provided. Approved processes attempting to disable the malware protection software will be prevented from doing so and the user will be provided the option to terminate the approved process. Non-approved processes attempting to disable the malware protection software will be prevented from doing so and one or more protection processes will be performed.","The details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.","Like reference numbers and designations in the various drawings indicate like elements.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},"As illustrated in , the process  attempts to disable a malware protection program  and execute potentially malicious code on a computer device , such as a workstation, server, router, or other data processing apparatus. The process  is deemed to be a suspicious process as it is attempting to disable  the malware protection program . A suspicious process can disable a malware protection program by using a variety of techniques. For example, on a Microsoft Windows operating system, the malware protection program  may operate as a Windows service that performs malware scanning functions and which is designed not to require user intervention. Likewise, on a Unix operating system the malware protection program  may operate as a daemon that runs in the background rather than under direct control of a user, and on a Macintosh operating system, the malware protection program  may operate as an extension or daemon that continuously runs in the background without the need for user intervention. In such cases, and others, the suspicious process  may attempt to disable  the malware protection program  by attempting to stop the malware protection program's service, daemon, or extension, e.g., by issuing a kill command.","Alternatively, the suspicious process may attempt to delete or modify registry entries for the malware protection program. On a Microsoft Windows operating system, computer hardware and software configuration settings are stored as keys in a registry. When a user installs new software or computer configuration settings are otherwise altered, the values of these keys change. If viruses, other malware, or other programs modify these keys, they can do damage to the hardware or software to which the key corresponds, or the system generally. Thus, the suspicious process  may attempt to disable  the malware protection program  by deleting or modifying registry entries or keys that control the configuration and operation of the malware protection program . The suspicious process  may also attempt to disable  the malware protection program  by, for example, attempting to terminate the respective malware protection program process or processes, delete one or more malware protection program files, or prevent the malware protection program from being updated by a remote computer.","As further illustrated in , the malware protection program  prevents  the suspicious process  from disabling  the malware protection program, by, for example, blocking the suspicious process from stopping the malware protection program service, daemon, or extension, or blocking the suspicious process from deleting files required by the malware protection program for proper operation.","Without doing more, however, the malware protection program does not prevent the possible malware from executing its potentially malicious code . Malicious code is a piece of code designed to damage a system and the data it contains, or to prevent the system from being used in its normal manner. For example, if the suspicious process  is a relatively new instance of malware for which the malware protection program does not have a signature file, the suspicious process  may execute malicious code  without intervention by the malware protection program .","Therefore, the identification and protection module  performs an identification process  on the suspicious process. The identification and protection module  can be embodied in software code and, for example, form part of the malware protection program or run independently as a separate program with its own processes, services, etc. The identification process  collects information on the suspicious process . This information may include the identity of the suspicious process that generated the attempt to disable the malware protection program.","The identification process  determines whether the suspicious process is an approved process based on data descriptive of the suspicious process including, for example, data descriptive of the executable machine code associated with the suspicious process. An approved process can be, for example, a digitally signed process or a pre-approved system process such as that required by the operating system. Depending on the outcome of this determination, the suspicious process may be optionally terminated or other protection processes  may be performed on the suspicious process, thereby preventing  the execution of the potentially malicious code .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["116","100","202","204","206","204","204","208","116","208","204"]},"A signature  is one example of data descriptive of the suspicious process in accordance with one example implementation of the present invention. A signature is a data pattern\u2014often a simple string of characters or bytes\u2014that can be used to identify a particular file, process, or other electronic data. Examples of signatures include hashes of a file or hashes of portions of the file. Malware protection programs can use signatures, for example, to detect and locate specific malware such as viruses, or otherwise identify services, processes, or files.","As illustrated in , the signature  descriptive of the suspicious process is generated by the identification process  and sent to the remote computer . The remote computer  compares the received signature  to data descriptive of approved processes contained in the database or other stored compilation  and returns data  indicative of whether the suspicious process is an approved process. Data descriptive of approved processes contained in the database or other stored compilation may include signatures of approved files. Based on the received data , a determination is made in the identification process  as to whether the suspicious process is an approved process. The suspicious process can also be flagged as malware based on the received data , where, for example, the malware protection program has not received the latest update.","In other implementations, the database or other stored compilation of data descriptive of approved processes  can be stored locally on the computer device  on which the suspicious process and malware protection program are running. That is, the signature  can be generated and compared to a locally stored database or other locally stored compilation of data descriptive of approved processes and known malware.","The signature  is one example of data descriptive of the suspicious process. Other data can be generated and used to make the determination of whether the suspicious process is an approved process, including even a complete data copy of the one or more files associated with the suspicious process, e.g., the executable machine code associated with the suspicious process.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["300","300","104"]},"The process  detects an attempt to disable a malware protection program (). Such an attempt can be detected, for example, by monitoring any attempt to stop the malware protection program service, daemon, or extension, terminate the malware protection program process or processes, delete one or more files associated with the malware protection program, delete or modify registry entries for the malware protection program, or prevent the malware protection program from being updated.","The process  may monitor for attempts to disable the malware protection program () by installing \u201chooks\u201d in the computer operating system. For example, in the Microsoft Windows operating system, the process  may install hooks that intercept Windows API (application programming interface) calls to delete files, modify registry entries, terminate processes, and disable services. When a process attempts to disable the malware protection program by tampering with the malware protection program files, for instance, the process  would detect the attempt () by intercepting the Windows API \u201cDeleteFile\u201d call targeting a malware protection program file. Similarly, the process  may detect an attempt to disable the malware protection program by intercepting a Windows API \u201cTerminateProcess\u201d call targeting the malware protection program process, or a Windows API \u201cRegRemoveKey\u201d call targeting a registry entry for the malware protection program.","The process  identifies the process that generated the attempt to disable the malware protection program (). The process  may identify the process that generated the attempt to disable the malware protection program by, as in the example above, intercepting a Windows API call and collecting information on the process that generated the Windows API call. For example, the process  may collect information on the process that generated the Windows API call such as that process's ID, name, and file path.","The process  determines whether the process is an approved process (). The process may be identified as an approved process, for example, based on whether the process's executable machine code is approved. Executable machine code can be approved if, for example, the executable machine code is digitally signed by an approved vendor.","In response to determining that the process is an approved process, the process  provides a process termination prompt (), as further illustrated in . Even if a process is an approved process, there may be reasons to terminate the approved process. For example, an installation program for a reputable program may attempt to disable a malware protection program, and a user may decide to not install the software, as the user may not want to have the computer device operated in an unprotected state. By way of another example, it may be possible that malware has modified a process created from approved executable machine code by, for example, injecting malicious code into the process. To accommodate for these types of situations, the process  provides a termination prompt () by which a user can terminate the approved process.","Alternatively, if the process  determines that the process is not an approved process, one or more protection processes are performed on the process (). Protection processes can include, for example, terminating the process or deleting or renaming one or more files associated with the process, such as the process's executable machine code, as further illustrated, by way of example, in .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":"400"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5","b":["500","502","504","506","508","510"]},"Terminating  the suspicious process may involve terminating the suspicious process only or terminating the suspicious process and all other processes directly and\/or indirectly initiated by the suspicious process.","Deleting files  may involve deleting one or more files associated with the suspicious process. Renaming files  may involve assigning a new name or extension to one or more files associated with the suspicious process. Malware protection programs such as antivirus software may rename infected files, virus files, or other files associated with suspicious processes so that they become unusable until they are manually cleaned, deleted, or otherwise handled.","Quarantining files  may involve safely isolating and neutralizing one or more files associated with the suspicious process until future action can be taken. There are several situations when it is appropriate to quarantine a file. One situation, for example, is where the suspicious process is identified as a non-approved process but it cannot be determined whether the suspicious process and the one or more files associated with it are malware, or the one or more files associated with the suspicious process cannot be deleted. One example of quarantining  can involve encrypting the one or more files associated with the suspicious process, renaming the one or more files, and moving the one or more files to a quarantine directory or folder. In conjunction, for example, with renaming  or quarantining , the one or more files associated with the suspicious process can be further sent to a remote computer for analysis  as illustrated, by way of example, in .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 6","FIG. 6"],"b":["602","604","606","602","604"]},"Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).","The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.","The term \u201cdata processing apparatus\u201d encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.","A computer program (also known as a program, software, software application, script, or code) embodying the processes and logic flows described in this specification can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, such as user prompt  illustrated in , implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Implementations of the subject matter described in this specification can be implemented in a computing system that includes clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Thus, particular implementations of the subject matter have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
