---
title: Open framework for the definition of metadata
abstract: A family of Java interfaces defines methods to provide common information about a property, such as data type and editing capabilities. The interfaces identify the methods used to get generic metadata. Implementers may extend these classes, as needed, to provide the metadata for their specific properties. The common metadata description interface of the present invention allows multiple metadata sources to be used interchangeably within the same software product without the software code being specifically written for each metadata source.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06983448&OS=06983448&RS=06983448
owner: International Business Machines Corporation
number: 06983448
owner_city: Armonk
owner_country: US
publication_date: 20010712
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates to data processing and, in particular, to the definition of metadata in the Java programming language. Still more particularly, the present invention provides an open framework for the definition of metadata.","2. Description of Related Art","Java is a programming language designed to generate applications that can run on all hardware platforms without modification. Java is an interpreted language. The source code of a Java program is compiled into an intermediate language called \u201cbytecode,\u201d which cannot run by itself. The bytecode must be converted (interpreted) into machine code at runtime. Upon finding a Java applet, e.g., in a Web page, a Web browser invokes a Java interpreter (Java Virtual Machine (JVM)) which translates the bytecode into machine code and runs it. JVMs are available for most hardware platforms. Thus, Java programs are not dependent on any specific hardware and will run in any computer with the Java Virtual Machine software. On the server side, Java programs can also be compiled into machine language for fastest performance, but they lose their hardware independence as a result.","JavaBeans are a component software architecture that runs in the Java environment. JavaBeans are independent Java program modules that are called for and executed. They have been used primarily for developing user interfaces at the client side. The server-side counterpart is Enterprise JavaBeans (EJBs). Java programs may also reference data sources other than JavaBeans and EJBs. For example, a Java program may reference a database made up of tables. Each source of data may have a different associated metadata. Metadata is data that describes other data. Data dictionaries and repositories are examples of metadata.","With different metadata sources, programmers must anticipate every possible metadata source and write code to communicate properly with each metadata source. If code is written for a plurality of metadata sources, the code may become very complicated. Furthermore, it is impossible to anticipate new metadata formats in the future. If an enterprise wishes to add a new data type and, thus, a new metadata source, the code must be completely rewritten. Therefore, it would be advantageous to provide an open framework for the definition of metadata.","The present invention provides a family of Java interfaces that define methods to provide common information about a property, such as data type and editing capabilities. The interfaces identify the methods used to get generic metadata. Implementers may extend these interfaces, as needed, to provide the metadata for their specific properties. For example, when a relational database is added, a programmer may write an object descriptor and a property descriptor classes that extend the interfaces. The common metadata description interface of the present invention allows multiple metadata sources to be used interchangeably within the same software product without the software code being specifically written for each metadata source.","With reference now to the figures,  depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system  is a network of computers in which the present invention may be implemented. Network data processing system  contains a network , which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network  may include connections, such as wire, wireless communication links, or fiber optic cables.","In the depicted example, a server  is connected to network  along with storage unit . In addition, clients , , and  also are connected to network example, personal computers or network computers. In the depicted example, server  provides data, such as boot files, operating system images, and applications to clients \u2013. Clients , , and  are clients to server . Network data processing system  may include additional servers, clients, and other devices not shown. In the depicted example, network data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the TCP\/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the present invention.","In accordance with a preferred embodiment of the present invention, Java programs may be called from within HTML documents or launched stand alone within network data processing system . When a Java program runs on a client, such as clients , , , it is often called a \u201cJava applet.\u201d When it is run on a server, such as server , it is called a \u201cservlet.\u201d","The present invention provides a family of Java interfaces that define methods to provide common information about a property, such as data type and editing capabilities. Implementers may extend these classes as needed to provide the metadata for their specific properties. For example, one embodiment of the present invention is an implementation that provides metadata descriptions of columns in a database table could be realized using Java DataBase Connectivity. Another example may be an implementation that uses Java introspection to glean metadata information about any bean object. The common metadata description interface of the present invention allows these two implementations to be used interchangeably within the same software product.","Referring to , a block diagram of a data processing system that may be implemented as a server, such as server  in , is depicted in accordance with a preferred embodiment of the present invention. Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors  and  connected to system bus . Alternatively, a single processor system may be employed. Also connected to system bus  is memory controller\/cache , which provides an interface to local memory . I\/O bus bridge  is connected to system bus  and provides an interface to I\/O bus . Memory controller\/cache  and I\/O bus bridge  may be integrated as depicted.","Peripheral component interconnect (PCI) bus bridge  connected to I\/O bus  provides an interface to PCI local bus . A number of modems may be connected to PCI bus . Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers \u2013 in  may be provided through modem  and network adapter  connected to PCI local bus  through add-in boards.","Additional PCI bus bridges  and  provide interfaces for additional PCI buses  and , from which additional modems or network adapters may be supported. In this manner, data processing system  allows connections to multiple network computers. A memory-mapped graphics adapter  and hard disk  may also be connected to I\/O bus  as depicted, either directly or indirectly.","Those of ordinary skill in the art will appreciate that the hardware depicted in  may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.","The data processing system depicted in  may be, for example, an IBM e-Server pSeries system, a product of International Business Machines Corporation in Armonk, New York, running the Advanced Interactive Executive (AIX) operating system or LINUX operating system.","With reference now to , a block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system  is an example of a client computer. Data processing system  employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor  and main memory  are connected to PCI local bus  through PCI bridge . PCI bridge  also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus  may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter , SCSI host bus adapter , and expansion bus interface  are connected to PCI local bus  by direct component connection. In contrast, audio adapter , graphics adapter , and audio\/video adapter  are connected to PCI local bus  by add-in boards inserted into expansion slots. Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . Small computer system interface (SCSI) host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system . \u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the present invention may be applied to a multiprocessor data processing system.","As another example, data processing system  may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system  comprises some type of network communication interface. As a further example, data processing system  may be a Personal Digital Assistant (PDA) device, which is configured with ROM and\/or flash ROM in order to provide nonvolatile memory for storing operating system files and\/or user-generated data.","The depicted example in  and above-described examples are not meant to imply architectural limitations. For example, data processing system  also may be a notebook computer or hand held computer. Data processing system  also may be a kiosk or a Web appliance.","With reference to , a block diagram illustrating the structure of the family of Java interfaces used to provide common information about generic properties is shown in accordance with a preferred embodiment of the present invention. The interface IMetaPropertyDescriptor  defines methods that describe a single property. For example, IMetaPropertyDescriptor may describe one column in a database and the methods defined by the interface may include getName( ), getValueClass( ), createDefaultValue( ), clonevalue( ), getPropertyEditor( ), canConvertValue( ), and convertvalue( ).","The interface IMetaPropertySetDescriptor  describes a set of properties, such as a group of columns in a database. The IMetaObjectDescriptor interface  extends IMetaPropertySetDescriptor to collect multiple associated property descriptions into a single object description. Interface  is a subclass of interface . The arrow between interface  and  represents association. The arrow indicates that an object that implements interface  has a one-way association with objects that implement interface . Besides inheritance and association, relationships may include aggregation, using, instantiation, and meta-class. The \u201c1 . . . *\u201d indicates the cardinality of the association; a property set is associated with one or more properties. This is a one-to-many association. Other cardinalities may include one-to-one or many-to-many.","The methods of the IMetaProperty Descriptor are as follows:\n\n","The methods of the IMetaPropertySetDescriptor interface are as follows:\n\n","The methods of the IMetaObjectDescriptor interface are as follows:\n\n","With reference now to , a block diagram illustrating an implementation of the common interface is shown in accordance with a preferred embodiment of the present invention. The interface IMetaPropertyDescriptor  defines methods that describe a single property. The interface IMetaPropertySetDescriptor  describes a set of properties, such as a group of columns in a database. The IMetaObjectDescriptor interface  collects multiple associated property descriptions into a single object description.","An ObjectDescriptor class  that implements the interface IMetaObjectDescriptor is created. For example, if an enterprise uses a relational database, a programmer may create an ObjectDescriptor specifically for the relational database. The ObjectDescriptor includes the actual code for the methods identified in interface  and may glean information about an object. Next, a PropertyDescriptor class  that implements interface IMetaPropertyDescriptor  is created to expose information about each property in the object. In other words, the PropertyDescriptor class includes the actual code for the methods that are identified in the IMetaPropertyDescriptor interface. These methods may be called to return metadata for a property. For example, for a relational database, each property may be represented by a column and the PropertyDescriptor may be written to provide the actual code for the methods identified in interface .","Interfaces , ,  are universal. ObjectDescriptor and PropertyDescriptor classes are specific to a metadata source. An enterprise may create an OjbectDescriptor and one or more PropertyDescriptors when a metadata source is added. ObjectDescriptor and PropertyDescriptor classes may also be shared between enterprises. In fact, a developer of a data source, such as a database, may write an ObjectDescriptor and appropriate PropertyDescriptors to ship with the product. Once this framework is in place, software may be written as if all the programmer knows is that there is an object that has properties. This simplifies the programming significantly when multiple metadata sources are being used. Furthermore, software written for this open framework may be used even after new data sources are added.","Turning to , an example of an implementation of the common interface is shown in accordance with a preferred embodiment of the present invention. The interface IMetaPropertyDescriptor  defines methods that describe a single property. The interface IMetaPropertySetDescriptor  describes a set of properties, such as a group of columns in a database. The IMetaObjectDescriptor interface  collects multiple associated property descriptions into a single object description.","A DBTableObjectDescriptor class  that implements the interface IMetaObjectDescriptor is created. The DBTableObjectDescriptor class may glean information about the appropriate database table using APIs that talk to the backend database and use the methods defined in interface IMetaObjectDescriptor  to expose that information. Next, a DBColumnPropertyDescriptor class  that implements the IMetaPropertyDescriptor interface  is created to expose information about each appropriate database table column (again using APIs that talk to the backend database) and use the methods defined in interface IMetaPropertyDescriptor  to expose that information.","Similarly, a JavaBeanObjectDescriptor class  that implements the interface IMetaObjectDescriptor is created. The JavaBeanObjectDescriptor class may glean information about the JavaBean using Java's built-in object introspection mechanism and use the methods defined in interface IMetaObjectDescriptor  to expose that information. Next, JavaBeanPropertyDescriptor class  that implements the IMetaPropertyDescriptor interface  is created to expose information about each property in the JavaBean using Java's built-in method introspection mechanism. Thus, the family of Java interfaces that make up the common interface may be implemented to expose information from multiple metadata sources, in this example one source being a relational database and the other being a Java Bean object.","An example Java program for a property sheet editor written using the open framework of the present invention follows:",{"@attributes":{"id":"p-0043","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This is an example of a property sheet editor that uses"]},{"entry":[{},"\/\/ Java interfaces for describing property metadata in a"]},{"entry":[{},"\/\/ generic way."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1000","public class Example"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This method loads a set of text field editor GUIs with"]},{"entry":[{},"\/\/ the values of properties contained within an object"]},{"entry":[{},"\/\/ whose metadata is described using the"]},{"entry":[{},"\/\/ \u201cIMetaObjectDescriptor \u201dinterface."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1005","public void load(IMetaObjectDescriptor objDesc, Object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003objValue)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Loop through all the property descriptors contained"]},{"entry":[{},"\/\/ within the object descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1010","for (int i=0; i < objDesc.getPropertyDescriptorcount( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003i++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Get a property descriptor from the object"]},{"entry":[{},"\/\/ descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1015","IMetaPropertyDescriptor propDesc ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003objDesc.getPropertyDescriptor (i);"]},{"entry":[{},"\/\/ Get the programmatic name of the property"]},{"entry":[{},"\/\/ descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1020","String propName = propDesc.getName( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Extract from the object's value the value of the"]},{"entry":[{},"\/\/ property named by the property descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1025","Object propValue ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003objDesc.getPropertyValue(propName, objValue);"]},{"entry":[{},"\/\/ Get a property editor for the property's value"]},{"entry":[{},"\/\/ from the property descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1030","PropertyEditor propEditor ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"propDesc.getPropertyEditor( );"]},{"entry":[{},"\/\/ Set the property editor to the value of the"]},{"entry":[{},"\/\/ property."]},{"entry":[{},"propEditor.setValue(propValue);"]},{"entry":[{},"\/\/ Create a text field editor GUI for the property."]},{"entry":[{},"JTextField textField = new JTextField( );"]},{"entry":[{},"\/\/ Set the text field editor GUI's display text to"]},{"entry":[{},"\/\/ the textual representation of the property's"]},{"entry":[{},"\/\/ value. (The \u201cgetAsText\u201d method of the property"]},{"entry":[{},"\/\/ editor performs the conversion to textual"]},{"entry":[{},"\/\/ representation.)"]},{"entry":[{},"textField.setText(propEditor.getAsText( ));"]},{"entry":[{},"\/\/ Associate the programmatic name of the property"]},{"entry":[{},"\/\/ descriptor with the text field editor GUI and"]},{"entry":[{},"\/\/ store it in the lookup table so that it can be"]},{"entry":[{},"\/\/ accessed later."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1035","textEditors.put(propName, textField);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ This method saves a set of property values contained"]},{"entry":[{},"\/\/ within text field editor GUIs to an object whose"]},{"entry":[{},"\/\/ metadata is described using the \u201cIMetaObjectDescriptor\u201d"]},{"entry":[{},"\/\/ interface."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1050","public void save(IMetaObjectDescriptor objDesc, Object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"objValue)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Loop through all the property descriptors contained"]},{"entry":[{},"\/\/ within the object descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1055","for (int i=0; i < objDesc.getpropertyDescriptorCount( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003i++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Get a property descriptor from the object"]},{"entry":[{},"\/\/ descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1060","IMetaPropertyDescriptor propDesc ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"objDesc.getPropertyDescriptor(i);"]},{"entry":[{},"\/\/ Get the programmatic name of the property"]},{"entry":[{},"\/\/ descriptor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1065","String propName = propDesc.getName( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Get a property editor for the property's value"]},{"entry":[{},"\/\/ from the property descriptor."]},{"entry":[{},"PropertyEditor propEditor ="]},{"entry":[{},"propDesc.getPropertyEditor( );"]},{"entry":[{},"\/\/ Access the text field editor GUI for the"]},{"entry":[{},"\/\/ property descriptor from the lookup table using"]},{"entry":[{},"\/\/ the property's programmatic name."]},{"entry":[{},"JTextField textField ="]},{"entry":[{},"(JTextField)textEditors.get(propName);"]},{"entry":[{},"\/\/ Set the property editor to the textual"]},{"entry":[{},"\/\/ representation of the property's value from the"]},{"entry":[{},"\/\/ text field editor GUI. (The \u201csetAsText\u201d method"]},{"entry":[{},"\/\/ of the property editor performs the conversion"]},{"entry":[{},"\/\/ from textual representation.)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1070","propEditor.setAsText(textField.getText( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Get the new value of the property from the"]},{"entry":[{},"\/\/ property editor."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1075","Object propValue = propEditor.getValue( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Insert the new value of the property named by"]},{"entry":[{},"\/\/ the property descriptor into the object's value."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1080","objDesc.setPropertyValue(propName, objValue,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"propValue);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Lookup table structure for storing text field GUIs used"]},{"entry":[{},"\/\/ to edit property values."]},{"entry":[{},"private HashMap textEditors = new HashMap( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["1000","1005"],"figref":"FIG. 6"},"Next, in line , the program uses the methods in the framework to get the number of properties and loops through the properties. Line  gets the property descriptor from the object descriptor. Line  gets the property name and line  gets the property value. Next, line  gets a property editor from the property descriptor. (For a description of property editors see SUN Java Bean specification, Java Platform Second Edition, version 1.1 API.) This is used to populate a text field user interface widget with a textual representation of the property's value. In line , this text field widget is associated with the property's name and is saved to a lookup table.","Thereafter, line  defines a method called \u201csave\u201d that takes an ObjectDescriptor and an object as values. Next, in line , the program uses the methods in the framework to get the number of properties and loops through the properties. Line  gets the property descriptor from the object descriptor. Line  gets the property name. Next, line  extracts the textual representation of the edited property value from the text field widget that was previously saved to a lookup table and converts it to the property value object using the property editor. Line  gets the property value object from the property editor. Thereafter, in line , the property's new value is saved back into the containing object. This completes the editing process.","As can be seen in the above example, a program may be written without identifying an object type or a metadata source. The example property sheet program may be used for multiple data sources and may be reused in any environment taking advantage of the open framework of the present invention. While the example program is written in Java, other programming languages may be used, such as C++.","With reference now to , a flowchart is shown illustrating the operation of an application implementing the common interface in accordance with a preferred embodiment of the present invention. The process begins and creates an ObjectDescriptor class for an object that implements the interface IMetaObjectDescriptor (step ). The process uses the methods in the interface to expose information for the object (step ). Next, the process creates a PropertyDescriptor class for an object that implements the IMetaPropertyDescriptor interface (step ) and uses the methods in the interface to expose information about each property in the object (step ). Thereafter the process ends.","Thus, the present invention solves the disadvantages of the prior art by providing a family of Java interfaces that makes up a common interface for multiple metadata sources. Classes that implement these interfaces may extend these classes as needed to provide the metadata for their specific properties. Multiple implementations may be used interchangeably within an application because of the common metadata description provided by the interfaces. This technique is useful in cases in which properties are dynamically created at runtime and, therefore, cannot be described using a concrete bean object defined at compile time.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
