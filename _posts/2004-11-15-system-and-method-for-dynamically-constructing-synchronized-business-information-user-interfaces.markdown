---
title: System and method for dynamically constructing synchronized business information user interfaces
abstract: Embodiments of the invention enable data that is synchronized between businesses to be displayed and interacted with by dynamically constructing graphical user interfaces to display the data. The graphical user interfaces are dynamically created via declarations that describe the data and how the data should be displayed along with the dependencies, validation and required characteristics of the data. The resulting dynamically created graphical user interfaces allow separate views of the data to be interacted with depending on the data pool that the data is intended for and a different data pool may be utilized by using a different declarative configuration at run time without recompiling and redistributing the application. The user interface files may be for example an XML file that may be parsed with any compliant schema based or DTD based XML parser. In at least one embodiment of the invention an N-tier architecture may be employed wherein a web server comprising Java Server Pages may utilize java class files that parse and construct the graphical user interface from an XML user interface configuration file. In this embodiment of the invention, HTML pages are output to a diverse array of computing devices capable of executing a HTML compliant browser. Another embodiment of the invention may utilize a standalone application utilizing the same java classes to construct java widgets instead of HTML widgets. Standalone applications may provide quicker responses than HTML applications since there are no round trips required for certain operations such as validation since the validation occurs directly in the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577907&OS=07577907&RS=07577907
owner: SAP, Aktiengesellschaft
number: 07577907
owner_city: Walldorf
owner_country: DE
publication_date: 20041115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","Embodiments of the invention described herein pertain to the field of computer software. More particularly, but not by way of limitation, one or more embodiments of the invention enable the dynamic creation of graphical user interfaces (GUIs) containing a set of one or more components configured to operate on data that is synchronized between businesses.","2. Description of Related Art","The business of manufacturing and distributing products to various retailers worldwide requires extensive collaboration, organization and the efficient exchange of information between parties involved in the supply chain. For instance, the synchronization of information that uniquely describes a product or service exchanged between trading partners is fundamental to building collaborative commercial relationships among retailers, manufacturers, and other supply chain participants. Various systems exist for synchronizing such business-to-business information between trading partners. These systems, often referred to as Global Data Synchronization (GDS) systems, are important because effective GDS systems lead to consolidation and management of master product data, which greatly increases internal supply chain efficiency. Many also consider GDS as a fundamental building block for realizing the full potential of Radio Frequency Identification (RFID) and Electronic Product Code (EPC) tags on various product configurations (e.g., pallets and cases of a particular product). GDS and EPC initiatives are designed to work together to improve business performance amongst a set of interrelated trading partners through the sharing of well-formed data that describes information associated with a set of products or services.","Entities referred to as data pools act as an interface point between supply chain entities such as manufacturers and retailers. These data pools provide a message-based framework for synchronizing item, organization and pricing data. For instance, manufactures publish data to the data pool in accordance with a set of specific rules defined by the data pool and other parties such as retailers or other manufactures subscribed to the data pool are kept in sync with information published to the data pool.","In order to find a product of interest, an entity known as the \u201cGlobal Registry\u201d may be employed in order to lookup the basic parameters of a product. The lookup generally includes the location of the data pool where the full product information can be found. The predominant registry in the industry is known as the \u201cGS1 Global Registry\u2122\u201d. The Global Registry stores unique product identifiers (referred to as GTINs and discussed in further detail below) and location information about each of the respective parties in the supply chain (e.g., Global Location Numbers called GLNs and also discussed in more detail below). Put generally a GTIN describes what an item is and a GLN describes who has and where the item is located. The association of data pools and the Global Registry described herein are known as the Global Data Synchronization Network (GDSN).","To enable the manufacturers (data suppliers) and retailers (data pool customers) to utilize the Global Registry and synchronize data with one another each party should perform the following basic steps. First internal supplier data is reviewed and if necessary modified to conform to generally accepted standards. For instance, each product or unit of sale is given a GTIN. The GTIN provides a basis for identifying when a unit of sale passes through a retail point of sale, is delivered, ordered, invoiced, or is otherwise involved in a transaction. A GTIN comprises up to 14 digits and can be associated with raw materials or completed end user products and may also include services. The number allocated to a product needs to be communicated from the manufacturer through the supply chain in advance of transaction, so that business transactions can be set up.","The internal supplier may also define information that uniquely identifies itself and other legal entities, trading parties and locations considered part of or needing access to supply chain information. This identifying information, typically referred to as a Global Location Number (GLN), provides a standard means of identification. The GLN is simply a 13-digit number used to uniquely identify any legal, functional or physical entity. Some examples of parties and locations that can be identified with GLNs, include but are not limited to, functional entities such as a purchasing department or customer number within a legal entity, an accounting department, a returns department, a nursing station, or any other group that performs a definable set of functions. GLNs may also act as a mechanism for identifying physical entities such as a particular room or section of a building, a warehouse, or aspects of a physical location such as a loading dock, delivery point, cabinet, or other location specific information. It is also feasible to utilize GLNs to identify buyers, sellers, companies, subsidiaries or divisions such as suppliers, customers, financial services companies, or any other entity or trading partner.","Once the supplier's internal data is prepared that data is then uploaded to a source data pool that complies with appropriate standards. There are various data pools and each data pool has mandatory and optional aspects. For instance, a data pool may collect descriptive data that contains a standardized set of attributes, values, trade item information, trading partner information, product and packaging information (e.g., shipping unit information such as a pallet), consumer unit (e.g., typically a trade item in its retail form). In at least one instance attributes are used as a mechanism to name associated data (e.g., Color) and values identify the data itself associated to the attribute name (e.g., Blue). Both attributes and values can be recursive and thereby identified as a repeatable attribute\/value. Any product or service having a need to retrieve pre-defined information that may be priced, ordered or invoiced at any point in any supply chain is typically referred to as a trade item. In this context, the term consumer unit is intended to indicate to the retailer that a particular item should be considered as a potential unit of sale.","The data pool sends basic information about the uploaded data to the Global Registry that in turn holds the information and stores the location of the supplier's data pool. Customers may search the Global Registry via their own destination data pool for information about the supplier that the customer may wish to obtain as part of its subscription to the destination data pool. The Global Registry identifies the source data pool of information that customers may request.","A synchronization engine enables trading partners to perform the publication\/subscription process for sending and receiving information and synchronizes information between each of the respective data pools. The synchronization engine allows each trading partner to maintain a single point of entry to its chosen data pool. Once implemented, GDS allows for the continuous updating of data attributes related to products for example between a plurality of computing systems in order to ensure that the data is kept identical in all locations that access the data. This synchronization process occurs in order to keep businesses up to date with changes and modifications to products and prices for example. The proper update of product data also enables a more efficient supply chain and eliminates transactions with erroneous prices or discontinued products for example.","On the manufacturer\/supplier side the process of reviewing and publishing items for registration and publication to retail trading partners is in most cases a laborious process that involves development of customized applications that obtain the relevant information from the manufacture side and provide that information to the data pool in a publishable form. In addition, current systems employed in the GDS arena suffer from hardcoded graphical user interfaces that embed references to schema elements within the control logic of the application. Mixing user interface code with control logic, business logic and database schema yields higher development, maintenance costs and increases the likelihood of errors. Furthermore, the time required to update an application is significant in that the application itself must be altered and sent to all users that require the modification. Because of these and other limitations present in current systems there is a need for a dynamic user interface that is easily adjusted to interface with different data pools and can allow for users to edit declarative definitions for the interfaces, validation rules, dependency rules and various data requirements that make up an application without requiring recompilation and redistribution of an application.","Embodiments of the invention enable data that is synchronized between businesses to be displayed and interacted with by dynamically constructing graphical user interfaces to display the data. Different entities synchronizing data throughout a supply chain will typically utilize different data pools and have different requirements for interacting with their data pool of choice. Even though multiple entities may utilize the same underlying standards based system to synchronize data the user interface requirements of one entity may significantly differ from the user interface requirements of another. Current systems lack a mechanism for dynamically creating a set of user interfaces customized to fit the definable needs of the entity that is to utilize the interface.","One or more embodiments of the invention overcome these and other limitations present in current systems by implementing a system and method for dynamically constructing customizable user interfaces that provide mechanisms for acting upon or inputting data into a repository of synchronized business information. Thus the invention enables each respective entity in the supply chain to generate and make use of an interface that suits their specific needs. For instance, systems incorporating one or more aspects of the invention are capable of dynamically generating a set of user interfaces that enables suppliers to input and publish data to a synchronization system configured to share the published data across a supply chain.","There are various techniques for creating these user interfaces. In one embodiment of the invention for instance, the system creates a user interface via declarations that describe the data to be displayed and how the data should be displayed along with what dependencies, validations and required characteristics are associated with the data. In a typical case systems implementing embodiments of the invention employ the use of a configuration file to define the declarations that detail the layout, content and behavior of the user interface. The configuration file configuration may contain XML or other data used to define key aspects of the user interface that is to couple with the synchronization system. Any compliant schema or DTD based XML parser can be used to parse the XML data.","Systems implementing one or more aspects of the invention may employ an N-tier architecture wherein a web server comprising Java Server Pages and\/or Servlets may utilize java class files that parse and construct the graphical user interface from an XML user interface configuration file. In this embodiment of the invention, HTML pages are output to a diverse array of computing devices capable of executing a HTML compliant browser. When used in a Global Data Synchronization context the resulting dynamically created set of user interfaces can provide separate views of the data the interface is associated with. For instance, the type of interaction that is feasible may vary depending on the data pool the data is intended to be associated with. If a customer wishes to switch data pools or if a separate customer to the same data pool wishes to interact with different data, it is feasible using one or more embodiments of the invention to define different declarative configurations at run time and thereby generate a customized interface that fits the customer requirements. Because users can modify the declarative configuration at run time it is not necessary to recompile and redistribute applications that contain a new interface.","On startup, the systems implementing one or more embodiments of the invention open a configuration file. This configuration file is then read for declarative definitions of containers, sub-containers, groups and fields. The processing loops until all items have been instantiated. If a field or sub-container interface appearance attribute is dependent upon the value of another field or fields then the logic rule is obtained as an external JAR file. An instance of the logic rule class may then be created via the Java Reflection API. For a web client interfacing to the system through a Java ServerPage (JSP), then the instance is local to the web server. For an applet instance or standalone application, the logic rule class is instantiated and utilized within the executable. The logic rule may set the dependent field or sub-container to enabled or disabled, visible or not visible, mandatory or not mandatory depending on the value of the current field or may set the enabled, visible or mandatory attributes of other fields based on the setting of the current field.","For security purposes embodiments of the invention may determine whether to display a field of the main database by checking the user name with regards to the table and field of the main database. The field may be visible or invisible to a given user or enabled or disabled to a given user depending on the user name and\/or role of the user.","Embodiments of the invention may utilize java reflection to generate verification scripts for construction of Dynamic HTML validators. In another embodiment of the invention, a Java applet or standalone application may use the validation JAR file(s) as is and perform validation, dependency checking and required field checking on the client machine.","Although HTML widgets are widely used as a mechanism for generating user interfaces one or more embodiments of the invention are capable of providing the same functionality to standalone applications that execute independent of the HTML browser. These standalone applications may utilize the java classes to construct java widgets instead of HTML forms. Standalone applications typically provide for more efficient execution than HTML applications because there is no need to send and receive information to a server in order to perform certain operations such as validation. When the application is standalone validation occurs directly in the application itself. The downside to using standalone applications is that it is important to utilize a know Virtual Machine (VM) to execute the application. If control over the VM is not feasible information technology personal have a limited ability to successfully maintain the application.","A system and method for dynamically constructing user interfaces to a repository of synchronized business information will now be described. In the following exemplary description numerous specific details are set forth in order to provide a more thorough understanding of embodiments of the invention. It will be apparent, however, to an artisan of ordinary skill that the present invention may be practiced without incorporating all aspects of the specific details described herein. In other instances, specific features, quantities, or measurements well known to those of ordinary skill in the art have not been described in detail so as not to obscure the invention. Readers should note that although examples of the invention are set forth herein, the claims, and the full scope of any equivalents, are what define the metes and bounds of the invention.","One or more embodiments of the invention provide systems and methods for dynamically constructing customizable user interfaces. These user interfaces provide interface components and functions for acting upon or inputting data into a repository of synchronized business information. By way of example, but not limitation, user interfaces generated in accordance with the methods described herein can act as a mechanism for publishing Global Data Synchronization (GDS) information to a data pool. In this case the invention enables each respective entity in the supply chain to generate and make use of a user interface customized to suits their specific needs. For instance, a supplier (or someone acting on behalf of the supplier) may dynamically generate a set of user interfaces that enables the supplier to input and publish data to a data pool that will then share the published data across a supply chain.","User interfaces made in accordance with one or more embodiments of the invention are generated through the use of declarations that describe the data to be displayed and how the data should be displayed along with what dependencies, validations and required characteristics are associated with the data. In a typical case, systems implementing embodiments of the invention employ the use of a configuration file to define the declarations that detail the layout, content and behavior of the user interface. This configuration file configuration may contain XML or other data used to define key aspects of the user interface that is to couple with the synchronization system. Any compliant schema or DTD based XML parser can parse the XML data.","In at least one embodiment of the invention an N-tier architecture may be employed wherein a web server comprising Java ServerPages and\/or Servlets may utilize java class files that parse and construct the graphical user interface from an XML user interface configuration file. In this embodiment of the invention, HTML pages are output to a diverse array of computing devices capable of executing a HTML compliant browser. The resulting dynamically created graphical user interfaces allow separate views of the data to be interacted with depending on the data pool that the data is intended for and these data pools may be switched by using a different declarative configuration at run time without recompiling and redistributing the application.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 1"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 1A","FIG. 1","FIG. 1A"],"b":["117","118","114","114","116","119","118","106","110","114","117","118"]},"Operation of the implementation shown in  starts with a user making a request through browser  over a known URL for the application. Once the access over a known URL is accepted by Servlet , Servlet  acts as the controller in a Model-View-Controller (MVC) pattern and calls upon the dynamicUI package to determine if there are any dependent fields or dependencyClientFields classes  required to obtain the set of widgets or markup that are required. The instance of the UI configuration file to utilize is determined based on the incoming URL and\/or the username and role of the user. In at least one embodiment of the invention the UI configuration file is targeted at a data pool as set by a data such as a flag, a file, a default or by the URL. Servlet  may branch based on the role and supply more or less information to browser  based on the role. For example, an administrator may be provided with a widget or markup that is enabled to allow the administrator to edit a price where a normal user may not have the privilege to edit.","When dynamicUI class  requests data to fill the markup or widgets it accesses application server , and requests the information from EJB GtinManager  residing in EJB container  that may be thought of conceptually as the \u201capplication server\u201d instance. EJB GtinManager  acts as the Model in the MVC architecture and requests information from interface library Accelerator Interface  which requests data from Accelerator Server  that hosts main database . Accelerator Interface  comprises data access routines that allow for the retrieval of data from main database .","Although  only shows one Web Server and one Application it will be apparent to one skilled in the art that a cluster of web servers and\/or a cluster of application servers may be utilized to provide unlimited scalability.","Requests to publish to the data pool are sent via Servlet  upon activation by a user controlling browser . Browser  or some other application may be used in order to alter user interface configuration file  in order to edit the layout, dependencies, validation or required field metadata. Once edited, all new instances of the application are automatically updated without recompiling and transmitting the application to client machines.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1B","FIG. 1A"],"b":["118","116"],"i":["b ","b "]},"On startup, user interface configuration file  is opened and read for declarative definitions of containers, sub-containers, groups and fields. Checks for valid and well-formed XML may be performed at this time or may be performed before saving an edited user interface configuration file to minimize application initialization time. The processing loops until all elements defined by the user interface configuration file have been instantiated. In the case of , this involves instantiating widgets and filling the widgets with data until there are no more widgets declared in user interface configuration file . User interface configuration DTD  is the element that is used in order to verify that user interface configuration file  is valid. This applies to the description of  as well.","If a field or sub-container interface appearance attribute is dependent upon the value of another field or fields then the logic rule is obtained as an external JAR file as per dependencyClientFields.jar . An instance of the logic rule class is then created via the Java Reflection API. For a web client interfacing to the system through a Java ServerPage (JSP) which acts as the view in the MVC architecture as per , then the instance is local to the web server. For an applet instance or standalone application, the logic rule class is instantiated and utilized within the executable. The logic rule may set the dependent field or sub-container to enabled or disabled, visible or not visible, mandatory or not mandatory depending on the value of the field comprising the dependency. In addition, the dependency rule may be used to verify the basic nature of the data itself, or alternatively another attribute of the XML may declaratively specify an optional verifyField JAR file that provides basic single field input validation.","For security purposes embodiments of the invention may determine whether to display a field of the main database by checking the user name with regards to the table and field of the main database. The field may be visible or invisible to a given user or enabled or disabled to a given user depending on the user name and\/or role of the user. This functionality may exist in Accelerator Interface  for example with the resulting boolean functions isVisible and isEnabled implementing the functionality required to determine if a table, field and user input yield a visible or enabled widget.","Embodiments of the invention utilizing a Java applet or standalone application may use the dependency JAR file(s) to validate fields, for dependency checking and required field checking on the client machine in the executable. For markup version of the application running in browsers, the dependency code may be written in JavaScript to enable local browser validation. Optionally, the dependency code for applet or standalone applications may be written in JavaScript or ECMAScript and parsed with a freeware embedded JavaScript interpreter such as FESI or Rhino. In this manner a code set may be utilized to provide the functionality for altering dependent fields regardless of the application ultimately utilizing the script, e.g., browser based markup or standalone executable application.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 1A"],"b":["201","201","202","202","203","203","204","204"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 2","FIG. 3","FIG. 1A"],"b":["201","202","202","203","204"],"sup":"th "},"By looping through the user interface configuration file and creating Containers, SubContainers, Groups and Fields for all entries in the file, the graphical user interface is created. By encoding the data pool desired for viewing into the incoming URL or as a configuration parameter in the case of a standalone application, the proper user interface configuration file may be opened and read in order to create the graphical user interface that corresponds to the desired data pool. This dynamic functionality allows for a company to switch allegiance to another company's data pool product without requiring massive reconstruction, compilation and distribution of a global data synchronization application.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4","b":"401"},"One embodiment of the invention comprises the following Application Programming Interface enabling the construction and operation of the graphical dynamic user interfaces generated:\n\n","Main Methods:\n\n","Main Methods:\n\n","Main Methods:\n\n","Main Methods:\n\n","Main Methods:\n\n","DependencyClientFields Jar","This package contains the following two classes.\n\n","Main Methods:\n\n","The class contains three fields:\n\n","Thus embodiments of the invention directed to a system and method for dynamically constructing user interfaces to a repository of synchronized business information have been exemplified to one of ordinary skill in the art. The claims, however, and the full scope of any equivalents are what define the metes and bounds of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1A","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
