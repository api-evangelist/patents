---
title: Selection and assessment of software components
abstract: The present disclosure involves systems, software, and computer implemented methods for providing selection and assessment of software components. One process includes operations for identifying a software component for assessment. Dependencies associated with the software component are analyzed, wherein analyzing dependencies includes identifying at least one relevant perspective associated with the software component, identifying a scope associated with the at least one relevant perspective, and determining whether the software component is associated with at least one related infrastructure component based on the scope or at least one other software component that the software component depends on based on the scope. The software component and each of the at least one related infrastructure component or the at least one other software component are assessed against a set of criteria.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170810&OS=09170810&RS=09170810
owner: SAP SE
number: 09170810
owner_city: Walldorf
owner_country: DE
publication_date: 20111011
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to software, computer systems, and computer implemented methods for providing comprehensive selection and assessment of software components.","Software products may be composed of smaller components, partitioned according to their functionalities. In some instances, software components may be marketed, priced, sold, and delivered separately. For example, the software component may define an application programming interface (API) that provides access to a particular function of the software product. Different software components may be developed and distributed by different parties. For example, one company may manage overall development of a particular software product but include software components developed by third parties in the software product to perform specific functions. Incorporating third party software into the lifecycle of a software product, however, may lead to risks or complications with respect to licensing, support, delivery, production, and other factors. In some instances, third party software may be associated with a complicated network of libraries interlinked through various dependencies.","The present disclosure describes techniques for providing selection and assessment of software components. A computer program product is encoded on a tangible storage medium, where the product comprises computer readable instructions for causing one or more processors to perform operations. These operations can include identifying a software component for assessment. Dependencies associated with the software component are analyzed, wherein analyzing dependencies includes identifying at least one relevant perspective associated with the software component, identifying a scope associated with the at least one relevant perspective, and determining whether the software component is associated with at least one related infrastructure component based on the scope or at least one other software component that the software component depends on based on the scope. The software component and each of the at least one related infrastructure component or the at least one other software component are assessed against a set of criteria.","These and other embodiments can optionally include one or more of the following features. The set of criteria includes at least one of licensing, supportability, delivery, platform availability, or architecture assessment. The at least one relevant perspective includes at least one of a platform perspective, a design time perspective, or a runtime perspective. Identifying the scope includes defining relevant criteria to include in the set of criteria for assessing the software component. Determining whether the software component is associated with at least one other software component that the software component depends on includes identifying software components related to the software component based on transitive properties. The operations further include iteratively analyzing dependencies for each of the at least one related infrastructure component or the at least one other software component to identify additional software components or infrastructure components for assessment; and assessing the additional software components or infrastructure components against the set of criteria. The operations further include extending the scope to include potential components upon which the at least one related infrastructure component or the at least one other software component depend.","While generally described as computer implemented software embodied on tangible, non-transitory media that processes and transforms the respective data, some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.","This disclosure generally describes computer systems, software, and computer implemented methods for providing comprehensive selection and assessment of software components. Certain software components (e.g., third party components) may need to be assessed for compatibility, security, and other issues before they are selected for inclusion in a software product. Software components are identified for assessment, and other components that are related to the software components through various dependencies are identified for assessment as well. The dependencies may be identified based on use cases, perspectives, boundary conditions, and other factors associated with a particular software component. The process may be performed iteratively, in some instances, to identify additional related components at multiple layers of dependencies for assessment. The software components and each of, or at least a portion, of the related components are then assessed against a set of criteria. For example, the software components may be assessed based on various licensing, support, delivery, production, platform, or architecture requirements associated with the software product.","In some instances, software products can include one or more software components that may be developed by third parties. For example, the developer of a particular software product may select an existing third party component that performs a particular function to reduce the cost of development and to accelerate the time to market. The use of third party components, however, may result in additional risk or challenges due to various factors. For example, a company may sell a product under its own license, but if the product also contains third party components, the company may need to determine how the third party components are licensed. The company may also need to determine how to provide timely and reliable support to customers, even if the product contains third party components that have different support models, or may not be supported at the time or at all.","In some instances, the company may need to create a consistent policy and process for delivery of product changes, service packages, or patches, which may be complicated if some third party components have independent lifecycles. The company may also face difficulties in producing the product if certain components have different production lifecycles or are owned by other organizations. The company may need to evaluate platform availability and the resulting platform availability matrix if the product includes third party components capable of running only on certain platforms. Other considerations may be relevant, such as whether the use of certain components violate patents.","Assessment of the potential risks may be particularly important in certain use cases. For example, in the acquisition of a software vendor by another software vendor, the acquiring vendor may trigger a special assessment to determine the implications of use of software components of the acquired vendor, including assessment of any third party software used in the acquired vendor's products. In other cases, a vendor consuming open source and freeware software components for use in its commercial products may need to evaluate the effectiveness and risk of using community-controlled components given the various factors described above.","Analyzing each aspect, implication, or risk exposed when certain third party software components are used as part of another commercial software product may be difficult, time consuming, and tedious without a definite scope for identifying each of the components and dependencies needed in the analysis. Overlooking one aspect in the analysis may have negative consequences for the software product.  illustrates an example system  implementing a commercial software product in which the use of third party components may require specific assessment of potential risks. In particular, a business application may run on a JEE engine  for performing business processes for a client . The vendor of the product including business application may be able to provide the business logic for the application but may have difficulties selecting a user interface (UI) technology for providing a rich user experience, easing integration with server-side implementation, or enabling fast UI development.","As seen in , there may be a developer  that will use a third party web toolkit application  to build user interfaces in a software development environment (e.g., Eclipse-based environment) . The web toolkit application  may be designed for creating and maintaining complex user interfaces, and may provide a technology stack including both runtime and development artifacts, such as a web toolkit compiler , which may be associated with an automated software build tool  and the automated software build tool script  specific to the web toolkit application , for example. The artifacts may also include a native-code web toolkit developer plugin  for debugging in a browser  of the developer , a web toolkit application editor , web toolkit design time libraries  for creation of widgets, a web toolkit runtime container , and runtime libraries . In the illustrated example, the components associated with the web toolkit application , such as the web toolkit compiler , web toolkit developer plugin , web toolkit application editor , web toolkit design time libraries , web toolkit runtime container , and web toolkit runtime libraries , used by developer  for the business application implemented in the system  of  may be regarded as third party components. The vendor of the business application may want to assess a number of factors regarding the implications of using the third party components.","For example, the vendor may need to determine whether the third party technology meets functional and non-functional expectations, and whether or how the expectations may be altered or adjusted if necessary. In some instances, a default set of widgets may not be sufficient to meet functional requirements, and so third party libraries  associated with another developer\/vendor may need to be used to design another set of widgets using the web toolkit application . Accordingly, the newly added libraries may also need to be included in the assessment for using the third party components supplied by the third party vendor. In other cases, a selected widget may work only with a particular browser while a product requires support for all major browsers. Thus, various third party components may need to be assessed for functionality.","In certain instances, every artifact associated with a third party component may need to be assessed to determine whether the third party component meets supportability requirements. The artifacts may include the particular third party software component and its dependencies, infrastructure elements and their dependencies, additional libraries and their dependencies, and so on. In the illustrated example, the web toolkit application  may be fully supported by the third party, but the software development environment  may be provided by a different vendor with a different support policy. An Eclipse-based software development environment , for example, may only be supported for the latest version but not for historical versions. A conflict may arise if a bug fix for the web toolkit application  is tightly coupled to an older release of the software development environment .","Other factors, such as licensing requirements, may need to be included in the assessment of various components and artifacts. Accordingly, a model and method for comprehensive selection of third party components for assessment against a set of criteria may facilitate assessment of the necessary components to avoid potential problems with respect to incorporating third party components into a particular software product.","Turning to the illustrated example,  illustrates an example environment  for providing comprehensive selection and assessment of software components. The illustrated environment  includes or is communicably coupled with one or more clients  and servers , , and , at least some of which may communicate across network . In general, environment  depicts an example configuration of a system capable of identifying a particular software component and additional components for assessment by analyzing the dependencies of the particular software component. In some implementations, the dependency check module  and component check module  for identifying relevant components for assessment can be implemented as hosted applications on a server, such as server , accessible to a user at client  through a network . Further, the dependency check module  and component check module  and other services provided by server  can be distributed across multiple servers, such as servers  and , in a distributed cluster-based environment, for example. In a distributed cluster-based environment, one or more additional servers (e.g., servers  and ) can be included in environment , each server having components similar to those depicted in  for server  and providing services associated with distributed applications hosted by the servers in the distributed cluster-based environment. In certain instances, client  and servers , , and  can be logically grouped within a cloud computing network. Accordingly, the system may be provided as an on-demand solution through the cloud computing network as well as a traditional server-client system or a local application at client . Alternatively, the dependency check module  and component check module  may be provided through a traditional server-client implementation or locally at client  without the need for accessing a hosted application through network .","In general, server  is any server that stores one or more applications , where at least a portion of the applications  may be hosted applications executed via requests and responses sent to users or clients within and communicably coupled to the illustrated environment  of . For example, server  may be a Java Platform, Enterprise Edition (JEE)-compliant application server that includes Java technologies such as Enterprise JavaBeans (EJB), JEE Connector Architecture (JCA), Java Messaging Service (JMS), Java Naming and Directory Interface (JNDI), and Java Database Connectivity (JDBC). In some instances, the server  may store a plurality of various applications , while in other instances, the server  may be a dedicated server meant to store and execute only a single application . In some instances, the server  may comprise a web server or be communicably coupled with a web server, where the applications  represent one or more web-based applications accessed and executed via network  by clients  of the system to perform the programmed tasks or operations of the application .","At a high level, the server  comprises an electronic computing device operable to receive, transmit, process, store, or manage data and information associated with the environment . The server  illustrated in  can be responsible for receiving application requests from one or more client applications or business applications associated with clients  of environment , responding to the received requests by processing said requests in the associated application , and sending the appropriate response from the application  back to the requesting client application. The server  may also receive requests and respond to requests from other components on network . Alternatively, the application  at server  can be capable of processing and responding to requests from a user locally accessing server . Accordingly, in addition to requests from the external clients  illustrated in , requests associated with the applications  may also be sent from internal users, external or third-party customers, other automated applications, as well as any other appropriate entities, individuals, systems, or computers.","As used in the present disclosure, the term \u201ccomputer\u201d is intended to encompass any suitable processing device. For example, although  illustrates a single server , environment  can be implemented using one or more servers such as servers  and , as well as computers other than servers, including a server pool. Indeed, server  and client  may be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), Macintosh, workstation, UNIX-based workstation, personal digital assistant (PDA), mobile phone, palmtop computer, tablet, or any other suitable device. In other words, the present disclosure contemplates computers other than general purpose computers, as well as computers without conventional operating systems. Further, illustrated server  and client  may be adapted to execute any operating system, including Linux, UNIX, Windows, Mac OS, or any other suitable operating system.","In the present implementation, and as shown in , the server  includes a processor , an interface , a memory , and one or more applications . The interface  is used by the server  for communicating with other systems in a client-server or other distributed environment (including within environment ) connected to the network  (e.g., clients , as well as other systems communicably coupled to the network ). Generally, the interface  comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with the network . More specifically, the interface  may comprise software supporting one or more communication protocols associated with communications such that the network  or interface's hardware is operable to communicate physical signals within and outside of the illustrated environment .","In some implementations, server  may include a user interface, such as a graphical user interface (GUI). The GUI comprises a graphical user interface operable to, for example, allow the user of the server  to interface with at least a portion of the platform for any suitable purpose, such as creating, preparing, requesting, or analyzing data, as well as viewing and accessing source documents associated with business transactions. Generally, the GUI provides the particular user with an efficient and user-friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, and buttons operated by the user. For example, GUI may provide interactive elements that allow a user to select from a list of suggested entries for input into a data field displayed in GUI. More generally, GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g. site or micro-site). Therefore, the GUI contemplates any suitable graphical user interface, such as a combination of a generic web browser and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","Generally, example server  may be communicably coupled with a network  that facilitates wireless or wireline communications between the components of the environment  (i.e., between the server  and clients ), as well as with any other local or remote computer, such as additional clients, servers, or other devices communicably coupled to network  but not illustrated in . In the illustrated environment, the network  is depicted as a single network in , but may be a continuous or discontinuous network without departing from the scope of this disclosure, so long as at least a portion of the network  may facilitate communications between senders and recipients.","Network  may be all or a portion of an enterprise or secured network, while in another instance at least a portion of the network  may represent a connection to the Internet. In some instances, a portion of the network  may be a virtual private network (VPN), such as, for example, the connection between client  and server . Further, all or a portion of network  can comprise either a wireline or wireless link. Example wireless links may include 802.11a\/b\/g\/n, 802.20, WiMax, and\/or any other appropriate wireless link. In other words, network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. Network  may also include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the Internet, and\/or any other communication system or systems at one or more locations. Network , however, is not a required component of the present disclosure, and the elements hosted by server , such as the dependency check module  and component check module , may be implemented locally at a client  or locally at server .","Client(s)  may have access to resources such as server  within network . In certain implementations, the servers within the network , including server  in some instances, may comprise a cloud computing platform for providing cloud-based services. The terms \u201ccloud,\u201d \u201ccloud computing,\u201d and \u201ccloud-based\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Cloud-based services can be hosted services that are provided by servers such as , , and  and delivered across a network to a client platform to enhance, supplement, or replace applications executed locally on a client computer. Clients  can use cloud-based services to quickly receive software upgrades, applications, and other resources that would otherwise require a lengthy period of time before the resources can be delivered to clients . Additionally, other devices may also have access to cloud-based services, such as on-demand services provided by servers accessible through network . A cloud platform deployment implementation, however, is not a required element of the present disclosure, and other distributed infrastructures such as cluster-based systems can also be used.","As illustrated in , server  includes a processor . Although illustrated as a single processor  in , two or more processors may be used according to particular needs, desires, or particular embodiments of environment . Each processor  may be a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or another suitable component. Generally, processor  executes instructions and manipulates data to perform the operations of server  and, specifically, the one or more plurality of applications . Specifically, the server's processor  executes the functionality required to receive and respond to requests from client system  and respective client applications  or other servers  and  in environment , as well as the functionality required to perform the other operations of the application .","Regardless of the particular implementation, \u201csoftware\u201d may include computer-readable instructions, firmware, wired or programmed hardware, or any combination thereof on a tangible, non-transitory, medium operable when executed to perform at least the processes and operations described herein. Indeed, each software component may be fully or partially written or described in any appropriate computer language including C, C++, Java, Visual Basic, assembler, Perl, any suitable version of 4GL, as well as others. Some software may be associated with BPM notations including BPMN, BPEL, UML state charts, event-driven process chains (EPC), Petri Nets, and the like. It will be understood that while portions of the software illustrated in  are shown as individual modules that implement the various features and functionality through various objects, methods, or other processes, the software may instead include a number of sub-modules, third party services, components, libraries, and such, as appropriate. Conversely, the features and functionality of various components can be combined into single components as appropriate. In the illustrated environment , processor  executes one or more applications  on server .","At a high level, each of the one or more applications  is any application, program, module, process, or other software that may execute, change, delete, generate, or otherwise manage information according to the present disclosure, particularly in response to and in connection with one or more requests received from the illustrated client system  and its associated client applications  or from other servers or components through a network . In certain cases, only one application  may be located at a particular server . In others, a plurality of related and\/or unrelated applications  may be stored at a single node , or located across a plurality of other nodes , as well. In certain cases, environment  may implement a composite business process application . For example, portions of the composite application may be implemented as Enterprise Java Beans (EJBs) or design-time components may have the ability to generate run-time implementations into different platforms, such as JEE (Java Platform, Enterprise Edition), ABAP (Advanced Business Application Programming) objects, or Microsoft's .NET, among others.","Additionally, one or more of the applications  may represent web-based applications accessed and executed by remote system  or client applications  via the network  (e.g., through the Internet). Further, while illustrated as internal to server , one or more processes associated with a particular application  may be stored, referenced, or executed remotely. For example, a portion of a particular application  may be a web service associated with the application that is remotely called, while another portion of the application  may be an interface object or agent bundled for processing at a client system . Moreover, any or all of the applications  may be a child or sub-module of another software module or enterprise application (not illustrated) without departing from the scope of this disclosure. Still further, portions of the application  may be executed by a user working directly at server , as well as remotely at client system .","As illustrated, server  can also include a dependency check module  and a component check module . In certain implementations, the dependency check module  can analyze a particular software component, which may include checking for dependencies associated with the software component, such as other software or infrastructure components upon which the particular software component depends, and identify relevant components for assessment based on the dependencies. In some implementations, given a particular software component and use case, the dependency check module  may select a relevant perspective and particular scope for analyzing potential components within the particular scope. The components within the particular scope may be identified for assessment to determine whether the particular component and any other relevant components (e.g., components identified based on dependencies) are suitable for use with another software product, for example. The component check module  may be configured to perform tasks related to assessment of various components against a set of criteria, such as whether a particular component complies with licensing, support, delivery, platform, or architecture requirements.","In some implementations, the dependency check module  and the component check module  can be executed by a different processor or server external to server , such as by a server communicably coupled to server  through network . For example, the dependency check module  and the component check module  may be provided as an on-demand service through a cloud computing network, as a web service accessible via network , as a service provided on a dedicated server, or as an application in a cluster-based distributed network. The dependency check module  and the component check module  may be separate from application , while in other instances, they may be embedded within or part of a particular one or more hosted applications. In some instances, application  may be communicably coupled to the dependency check module  or the component check module , allowing application  to access and take advantage of the functionality provided by the dependency check module  and the component check module .","In general, server  also includes memory  for storing data and program instructions. Memory  may include any memory or database module and may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), removable media, or any other suitable local or remote memory component. Memory  may store various objects or data, including classes, frameworks, applications, backup data, business objects, jobs, web pages, web page templates, database tables, repositories storing business and\/or dynamic information, and any other appropriate information including any parameters, variables, algorithms, instructions, rules, constraints, or references thereto associated with the purposes of server  and its one or more business process applications .","Memory  may also store data objects such as software components  and artifacts . In general, software components  may include stand-alone applications, modules, embedded applications, user interfaces, widgets, functions, or any other application that may be assessed against a set of criteria. In some implementations, software components  may include binary units that export and import functionality using a standardized interface mechanism. Software components  may represent one or more logical or organization-related processes or tasks. The underlying infrastructure of a software component  may support composition of components by providing mechanisms for introspection, event-handling, persistence, dynamic linking, and layout management. In certain instances, software components  may be independent of a particular system, language, platform, application, or tool. Accordingly, software components  may be integrated with other software components from different providers, for example, into a common system. Artifacts  may include any by-product produced during development of software, including use cases, class diagrams, models, requirements, source code files, documentation, executable files, and design documents. Artifacts  associated with software components may also be used to generate documentation for the software components.","The illustrated environment of  also includes one or more clients . Each client  may be any computing device operable to connect to or communicate with at least the server  and\/or via the network  using a wireline or wireless connection. In some implementations, as illustrated in , client  can also include a processor , an interface , a graphical user interface (GUI) , a client application , and a memory . In general, client  comprises an electronic computer device operable to receive, transmit, process, and store any appropriate data associated with the environment  of . It will be understood that there may be any number of clients  associated with, or external to, environment . For example, while illustrated environment  includes one client , alternative implementations of environment  may include multiple clients communicably coupled to the server , or any other number of clients suitable to the purposes of the environment . Additionally, there may also be one or more additional clients  external to the illustrated portion of environment  that are capable of interacting with the environment  via the network . Further, the term \u201cclient\u201d and \u201cuser\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover, while each client  is described in terms of being used by a single user, this disclosure contemplates that many users may use one computer, or that one user may use multiple computers.","The GUI  associated with client  comprises a graphical user interface operable to, for example, allow the user of client  to interface with at least a portion of the platform for any suitable purpose, such as creating, preparing, requesting, or analyzing data, as well as viewing and accessing source documents associated with software components. Generally, the GUI  provides the particular user with an efficient and user-friendly presentation of data provided by or communicated within the system. The GUI  may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, and buttons operated by the user. For example, GUI  may provide interactive elements that allow a user to enter, modify, select, or model elements of software components in GUI . A view of a software component and related components may be presented and accessible to the user through GUI , such as through a web browser, for example. More generally, GUI  may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI  is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g. site or micro-site). Therefore, the GUI  contemplates any suitable graphical user interface, such as a combination of a generic web browser, intelligent engine, and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","As used in this disclosure, client  is intended to encompass a personal computer, touch screen terminal, workstation, network computer, kiosk, wireless data port, smart phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device. For example, each client  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept user information, and an output device that conveys information associated with the operation of the server  (and application ) or the client  itself, including digital data, visual information, client application , or GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media, CD-ROM, or other suitable media to both receive input from and provide output to users of client  through the display, namely, GUI .","While  is described as containing or being associated with a plurality of elements, not all elements illustrated within environment  of  may be utilized in each alternative implementation of the present disclosure. For example, although  depicts an environment implementing a hosted application at server  that can be accessed by client computer , in some implementations, server  executes a local application that features an application UI accessible to a user directly utilizing GUI . Further, although  depicts a server  external to network , servers may be included within the network  as part of a cloud network solution, for example. Additionally, one or more of the elements described herein may be located external to environment , while in other instances, certain elements may be included within or as a portion of one or more of the other described elements, as well as other elements not described in the illustrated implementation. Further, certain elements illustrated in  may be combined with other components, as well as used for alternative or additional purposes in addition to those purposes described herein.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","304","304","310","310","304","304"]},"Certain boundary conditions  may also apply to the component  during assessment. For example, software created for certain industries may need to comply with boundary conditions related to specific security or auditing requirements. As seen in , examples of boundary conditions may include licensing requirements , cross-site scripting safety requirements , or platform independence requirements . The use case  may determine whether a particular boundary condition  is applicable to a software component . The relevant subset of the aspects  giving the boundary conditions  are to be selected based on the use case . For example, the aspects applicable to a software component  based on use case may include legal regulations , product standards , or architecture guidelines . Further, each boundary condition  is associated with at least one check  to be applied to the component  according to the definition in the use case . Each check  may be a specific analysis or determination of whether a software component  meets a formalized functional requirement as defined by the boundary conditions .","As illustrated in , a boundary condition  may affect not only the specific checks  to be applied to a software component  but also may affect the scope  for determining which additional components may be identified for further assessment. In other words, the scope  for analyzing components may be extended depending on the boundary conditions  involved. Accordingly, the boundary conditions  may require different perspectives  to be considered depending on the demands of the use case . A perspective may consist of a view of software components, such as whether certain components are relevant from a platform perspective , a design time perspective , or a runtime perspective . Consequently, the perspective specific view may extend the scope  to include new components to be analyzed as a part of the initial component assessment. A different but related component may then be identified for assessment if the related component is within the extended assessment scope . In other words, relevant components in addition to the original software component may need to be included in the assessment of the original software component due to dependencies and other related factors. Accordingly, an additional component is designated for assessment if it is within the relevant assessment scope . Additional components may be identified and included in the assessment as more components are analyzed for dependencies.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 4-7","FIG. 4","FIG. 3","FIG. 2"],"b":["400","402","300","402","406","402","406","272","274","402","404","402","406","402","402","404","402","404","310","306","314","308","302"]},"Given the software component  and assessment context  inputs, the Check Component and Dependencies function  may call a Check Component function  to perform the appropriate checks  of the component  based on the boundary condition , use case , or other factors associated with the assessment context . In some implementations, the Check Component function  is performed by the component check module . Alternatively, the Check Component function  may be performed manually by a user. The Check Component function  determines whether the particular software component  meets the requirements defined by the assessment context , such as licensing, support, or architecture requirements. If the software component  does not pass the check , the process exits the Check Component and Dependencies function . If the software component  passes the check , the Check Dependencies function  may be called.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 4","FIG. 5"],"b":["500","410","402","410","402","272","410","504","502","504","404","504"]},"For example, if a particular component is to be shipped to a customer, the component may be associated with a shipment perspective as well as a runtime perspective. The shipment perspective may include components within the entire shipment package and any delivery infrastructure dependencies, in case the dependencies contain, for example, separate artifacts specific to a particular technology. The component may also be configured for a runtime platform, and so the runtime perspective for the component may need to include the component and its runtime dependencies as well as the runtime infrastructure (e.g., a specific runtime container and the libraries used by the runtime container).","As described above, each relevant perspective may correspond to a particular scope, and if there are additional components within each scope, the additional components in each of the scopes may need to be identified. Accordingly, a determination is made at  as to whether the scope for all relevant perspectives associated with a particular component to check  has been collected. If the scopes for all perspectives, as well as any additional components that may be found within the scopes, have been collected, the process exits the Check Dependencies function  and proceeds to get the next component to check by calling the Check List of Components function , described in further detail in relation to . If, however, not all scopes for all relevant perspectives have been collected, the next perspective is identified at . For each of the identified perspectives , the components within the particular scope associated with the identified perspective  may need to be collected. Accordingly, the Get Components in scope function  may be called to collect any components  within the scope associated with the current perspective .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIG. 5"],"b":["600","600","510","402","402"]},"As illustrated in , the inputs to the Get Components in Scope function  are the current component to check  and the current perspective . Each perspective may be associated with a particular scope. Accordingly, the components within the scope associated with the current perspective  are collected using the Get Components in Scope function .","First, the components that are related to the component to be checked , including components identified via transitive closure, are collected at . For example, a first component may depend on a second component because the first component calls the second component. The second component would be identified as a related component based on a dependency. The transitive closure process would then determine whether the second component depends on other components. If the second component depends on a third component (e.g., the second component calls the third component during execution of the second component), the third component is also identified at  as related to the first component based on transitive properties. Accordingly, both the second and third components may need to be assessed with the first component. The Get Components in Scope function  also identifies any related infrastructure components that may also need to be assessed at . Accordingly, the Get Components in Scope function  returns the components  found within the particular scope associated with the current perspective , which may include related software components and infrastructure components.","Using the example commercial product described above in relation to , for example, the relevant components within a scope associated with a design time perspective for the commercial software product may include the web toolkit design time library  and elements associated with the web toolkit build infrastructure. The elements associated with the web toolkit build infrastructure may include, for example, the web toolkit compiler , the automated software build tool , the automated software build tool script  specific to the web toolkit application , or libraries associated with the automated software build tool . Accordingly, the Get Components in Scope function  may return the elements described above if applied to the commercial software product described above in connection with .","Returning to , the components  in the scope associated with the current perspective  are returned by the Get Components in Scope function . The process may then call a Check List of Components function  to determine whether there are additional components to check.  illustrates an example process , which may correspond to the Check List of Components function , for determining whether there are additional components to be checked for assessment. First, a list of components to check  is included as an input to the Check List of Components function . Based on the list of components to check , the next component is determined at . Given the next component , a recursive call to the Check Component and Dependencies function  may be performed. By recursively calling the Check Component and Dependencies function , the same check included in the Check Component function  may be applied to infrastructure elements. For example, in cases where the runtime container also requires a specific build infrastructure and may need to be deployed to a runtime platform, the infrastructure components may also be checked for any relevant requirements.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8","b":["800","802","804","806","800","824","800","802","808","810","812"]},"A determination is made as to whether additional components are within the scope at . If an additional component is found within the scope, the additional component is designated as the current component at . The process  then returns to  to repeat the steps for determining whether other components related to the additional component may be identified for assessment. If the determination at  does not identify additional components, a determination is made at  for whether there are additional perspectives associated with the current component at . If there are additional perspectives associated with the current component, the additional perspective is designated as the identified perspective at . The process  then returns to  to repeat the steps for determining whether additional components may be identified within the scope associated with the additional perspective. If the determination at  does not identify additional perspectives associated with the current component, then each of the additional components identified in the process , if any, are assessed at .","The preceding figures and accompanying description illustrate example processes and computer implementable techniques. Environment  (or its software or other components) also contemplates using, implementing, or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time, including concurrently, individually, or in combination. In addition, many of the steps in these processes may take place simultaneously and\/or in different orders than as shown. Moreover, environment  may use processes with additional steps, fewer steps, and\/or different steps, so long as the methods remain appropriate.","In other words, although this disclosure has been described in terms of certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 7","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 8","FIG. 2"]}]},"DETDESC":[{},{}]}
