---
title: Reliability and performance of SNMP status through protocol with reliability limitations
abstract: A system for an interceptor client is utilized to improve the reliability of data transfer between devices on a network. In particular, the interceptor client may be configured to monitor transactions between a SNMP manager application and a SNMP application. The interceptor client may be further configured to monitor and to identify a “Get” command requesting multiple object identifiers (OIDs), e.g., OID.a, OID.b, . . . , OID.n, from a destination agent. The interceptor client may be further configured to preprocess the requested OIDs to the nearest possible previous OIDs, i.e., OID.a−1, OID.b−1, . . . , OID.n−1. The interceptor client may be further configured format the requested “Get” command as a “Get-Next” command requesting the modified OIDs from the destination agent. “Get-Next” command will always retrieve the next value in the tree of the MIB, regardless of whether or not a valid OID was specified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985921&OS=06985921&RS=06985921
owner: Hewlett-Packard Development Company, L.P.
number: 06985921
owner_city: Houston
owner_country: US
publication_date: 20010206
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","SUMMARY OF INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The invention relates to computer networks. More particularly, the invention relates to improving the reliability of a block transfer of data from a server to a client utilizing SNMP protocol.","Network communications have become a fundamental part of today's computing. It is not uncommon to find two or more computer systems collaboratively working together to solve problems such as simulations, modeling, forecasting, etc. In fact, these efforts have been so successful, users have been inclined to design and implement larger networks.","As the networks grow larger, increasingly complex, and interface with a variety of diverse networks, it is the task of a network manager to keep track of the devices on the networks, to monitor performances and load, diagnose, and correct problems with the network.","While products that manage homogeneous networks have been available, managing heterogeneous networks is more complex, and a generally accepted heterogeneous network management standard did not exist. More recently, Simple Network Management Protocol (SNMP) was developed to provide a heterogeneous network management standard.","SNMP has since become widely accepted as the protocol of choice for managing Transmission Control Protocol\/Internet Protocol (TCP\/IP) based network systems. SNMP provides network managers the capability to monitor and to control network devices and the systems which contain SNMP agents, independent of the network topology or complexity.","The SNMP model of a managed network consists of four types of components: (1) managed nodes; (2) management stations; (3) management information; and, (4) a management protocol. The managed nodes can be hosts, routers, bridges, printers or any other devices capable of communicating status information to the management stations. Management stations monitor and manage the devices on the network. The management information contains information on the components of the network. The management protocol is the format in which this information is communicated to the management system.","A management station communicates with agents over the network using the SNMP protocol, which allows the management station to query the state of the specified agent's local objects and modify them as necessary. Therefore, the management station communicates with the management information bases of each agent. SNMP provides the following four basic operations for communication: (1) \u201cGet\u201d, which is used to retrieve specific management information; (2) \u201cGet-Next\u201d, which is used to retrieve via traversal, management information; (3) \u201cSet\u201d, which is used to manipulate management information; and, (4) \u201cTrap\u201d, which is used to report extraordinary events. By using these operators, the SNMP manager application may communicate with the agents to identify the agents and to determine statistical information, such as network traffic flow through a given computer network.","SNMP messages contain two parts: (1) a message header and (2) a protocol data unit. The message header comprises a version number and a community name. The community name serves to define an access environment for a set of network management stations using the community name. Additionally, since devices which do not know the proper community name are precluded from SNMP operations, network managers may also use the community name as a weak form of authentication.","The data portion of an SNMP message contains the specified SNMP operation, e.g., \u201cGet\u201d, \u201cGet-Next\u201d, \u201cSet\u201d or \u201cTrap\u201d, as well as the operation's associated data.  depicts the format for the data portion. The format for a \u201cGet\u201d, \u201cGet-Next\u201d, or \u201cSet\u201d command  includes four fields. The first is a request-ID field , which associates requests with responses. The second is an error status field , which indicates an error and an error type. The third is an error index field , which associates the error with a particular variable in the variable bindings. The fourth is a variable bindings field , which comprises the data. Each variable binding associates a particular variable with its current value (except in \u201cGet\u201d and \u201cGet-Next\u201d requests, where the value is ignored).","The format for a \u201cTrap\u201d command  includes six fields. The first is an enterprise field , which identifies the type of the object generating the trap. The second is an agent address field , which provides the address of the object generating the trap. The third is a generic trap type field , which provides the generic trap type. The fourth field is a specific trap type code , which provides the specific trap type. The fifth field is a time stamp field , which provides the amount of time that has elapsed between the last network re-initialization and generation of this trap. The sixth field is the variable bindings field , which provides a list of variables containing information of interest about the trap.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 7","FIG. 7"],"b":["710","712","712","712","718","718","712","712","720","712","710","714","714","718","718","714","720"],"i":["a, ","b, ","c ","a, ","b ","a, ","b, ","c. ","a, ","b ","a, ","b, ","c "]},"In the SNMP protocol, each SNMP agent may maintain one or more variables that describe the node's state. These variables are also called \u201cobjects\u201d and are identified by an \u201cObject Identifier\u201d (OID). Related managed objects are grouped together in a data structure called a \u201cManagement Information Base\u201d (MIB).  illustrates two different examples of SNMP agents. The first agent  contains a management information base . It is also possible to have multiple management information bases within each agent, as seen in the second agent , which contains management information bases  and . In addition, each node on the network may have different types of management information bases such as expression MIB , .","A MIB is maintained by its respective agent which contain OIDs that may describe the current and past states of the node to which it is assigned, as well as provide instructions to affect the operation of the node. The management stations then carry out the management of the network. The management stations have one or more processes that communicate with the SNMP agents through the network by issuing commands and getting responses. One of the advantages of this design is much of the complexity of the system is located in the management stations, rather than in the SNMP agents, allowing the agents to be as simple as possible in order to minimize their effect on the nodes on which they are running.","In typical communication with an agent, a management station may request multiple objects with a single \u201cGet\u201d command from a destination agent. However, if one of the requested objects does not exist on the destination agent, the entire \u201cGet\u201d command fails. The SNMP protocol cannot guarantee that the retrieved data is reliable. Accordingly, a user of the management station is not assured of the reliability of the requested objects.","In response to this failure, a user of the management station may decide to issue single \u201cGet\u201d command on each of the requested objects. However, this increases the time that a user has to spend in retrieving the requested objections. Moreover, issuing multiple \u201cGet\u201d commands increases the traffic on the network between the agent and the management station, which may lead to congestion and performance degradation in the network.","In accordance with the principles of the present invention, a method for transferring data between a local device and a remote device over a network where the local device has a communication architecture having at least an application layer and an interceptor layer. The method includes receiving by the interceptor layer a first command from the application layer, the first command specifying a first plurality of identifiers where the first command is configured to return an associated value for each identifier of the plurality of identifiers. The method further includes issuing a second command by the interceptor layer, the second command specifying a second plurality of identifiers where the second command is configured to return a next identifier and associated value for each identifier of the another plurality of identifiers in response to said receiving of the first command.","One aspect of the present invention provides for a system for improving reliability of data transfer. The system includes an interface, at least one processor, a memory coupled to the one processor, and an interceptor client. The interceptor client, residing in the memory and executed by at least one processor, is configured to receive by the interceptor layer a first command from the application layer, the first command specifying a first plurality of identifiers where the first command is configured to return an associated value for each identifier of the plurality of identifiers. The interceptor client is further configured to issue a second command by the interceptor layer, the second command specifying a second plurality of identifiers where the second command is configured to return a next identifier and associated value for each identifier of the another plurality of identifiers in response to the receiving of the first command.","Another aspect of the present invention provides for a computer-readable storage medium on which is embedded one or more computer programs. The one or more computer programs implements a method for improving reliability of data transfer. The one or more computer programs include a set of instructions for receiving by the interceptor layer a first command from the application layer, the first command specifying a first plurality of identifiers wherein the first command is configured to return an associated value for each identifier of the plurality of identifiers, and issuing a second command by the interceptor layer, the second command specifying a second plurality of identifiers where the second command is configured to return a next identifier and associated value for each identifier of the another plurality of identifiers in response to the receiving of the first command.","In comparison to known prior art, certain embodiments of the invention are capable of achieving certain advantages, including some or all of the following: (1) improvement of the reliability of the data, or object, transferred; (2) improve network performance; and, (3) decreased network traffic.","Additional advantages and novel features of the invention will be set forth in part, in the description which follows, and in part, will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed in the appended claims.","For simplicity and illustrative purposes, the principles of the present invention are described by referring mainly to an exemplary embodiment thereof. Although the preferred embodiment of the invention may be practiced as a software system, one of ordinary skill in the art would readily recognize that the same principles are equally applicable to, and can be implemented in, a hardware system, and that any such variation would be within such modifications which do not depart from the true spirit and scope of the present invention.","In accordance with the principles of the present invention, an interceptor client is utilized to improve the reliability of data transfer between devices on a network. In particular, the interceptor client may be configured to monitor transactions between a SNMP manager application and a SNMP application. The interceptor client may be further configured to monitor and to identify a \u201cGet\u201d command requesting multiple object identifiers (OIDs), e.g., OID.a, OID.b, . . . , OID.n, from a destination agent. The interceptor client may be further configured to preprocess the requested OIDs to the nearest possible previous OIDs, i.e., OID.a\u22121, OID.b\u22121, . . . , OID.n\u22121. The interceptor client may be further configured format the requested \u201cGet\u201d command as a \u201cGet-Next\u201d command requesting the modified OIDs from the destination agent. The \u201cGet-Next\u201d command will always retrieve the next value in the tree of the MIB, regardless of whether or not a valid OID was specified. Accordingly, when the interceptor client reformats the \u201cGet\u201d command to a \u201cGet-Next\u201d command, the user is assured of the fact that the requested data will always be returned and is not invalidated by an error message as with the \u201cGet\u201d command.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","110","120","130","140","150","100","100","102"]},"The SNMP protocol is a client-server-based application protocol. Management station  executes a SNMP manager application  that communicates with SNMP agent processes , , , and . In particular, the SNMP manager  communicates with one or more of the client processes, i.e., agent process  on workstation , agent process  on bridge , agent process  on router , and agent process  on printer  using the SNMP protocol. An agent computer process must be programmed for each of the computer network elements, and the actions that are to be taken must be specifically programmed for each computer network element.","Each of agent processes , , , and  monitors and controls the operation of the computer network element containing the agent process, i.e., elements , , , and , respectively, by maintaining a data base of objects , , , and , respectively, called the Management Information Base (MIB). The MIB reflects the status of the managed computer network element. Each of the agent processes , , , and  responds to network management requests from SNMP manager . Manager  maintains statistics that define the operation of network  in MIB .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":"100"},"The present invention is platform independent. For example management station  may be a personal computer (PC) system running an operating system such as WINDOWS 95\u2122 or OS\/2\u2122, a MAC\u2122, or a UNIX\u2122 based system. However, the invention is not limited to these platforms. Instead, the invention can be implemented on any appropriate computer system running any appropriate operating system, such as SOLARIS\u2122, IRIX\u2122, LINIX\u2122, etc.","An exemplary computer system  implementing the management station  is shown in . The functions of the management station  are implemented in program code. In particular, the computer system  includes one or more processors, such as processor  which provides an execution platform for the management station . Commands and data from the processor  are communicated over a communication bus . The computer system  also includes a main memory , preferably Random Access Memory (RAM), where the software for the management station  is executed from during runtime, and a secondary memory . The secondary memory  includes, for example, a hard disk drive  and\/or a removable storage drive , representing a floppy diskette drive, a magnetic tape drive, a compact disk drive, etc., where a copy of software for the management station  is stored. The removable storage drive  reads from and\/or writes to a removable storage unit  in a well-known manner. A user interfaces with the management station  with a keyboard , a mouse , and a display . The display adaptor  interfaces with the communication bus  to receive display data from the processor  and convert the display data into display commands from the display .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4"],"b":["402","115","402","406","402","404","406","408","410","412","117","420","422","424","426","428"]},"The SNMP manager application  may be configured to issue SNMP commands in response to user attempts to manage the network . A user of the SNMP manager application  initiates an action, e.g., a \u201cGet\u201d, \u201cGet-Next\u201d, etc., to a destination agent, e.g., agent , and the SNMP manager application  calls the associated functions with the object identifier(s) as a parameter(s) from an \u201cApplication Programming Interface\u201d (API) of the SNMP application function  in order to process the requested action. The SNMP application function  may be configured to packetize the request in response to the called function. The request packet is then encapsulated by the TCP\/IP protocol application  and transported to the destination agent by the lower layer  as TCP\/IP data packets. The agent receives the TCP\/IP data packets through the lower layer , and the TCP\/IP application  reformats the data packets and reassembles the request for the SNMP application function . The agent application  responds to the request by performing the requested action.","The interceptor client  may be configured to monitor transactions between the SNMP manager application  and the SNMP application . In particular, the interceptor client  may be configured to monitor and to identify a \u201cGet\u201d command requesting multiple object identifiers (OIDs), e.g., OID.a, OID.b, . . . , OID.n, from a destination agent. The interceptor client  may be further configured to preprocess the requested OIDs to the nearest possible previous OIDs, i.e., OID.a\u22121, OID.b\u22121, . . . , OID.n\u22121. The interceptor client  may be further configured to format the requested \u201cGet\u201d command as a \u201cGet-Next\u201d command requesting the modified OIDs from the agent.","In the SNMP protocol, a \u201cGet-Next\u201d command is used to retrieve the next OID in the MIB tree of data. As opposed to the \u201cGet\u201d command, which returns requested data, the \u201cGet-Next\u201d command returns the next OID in the tree and its value. Furthermore, unlike the \u201cGet\u201d command, the \u201cGet-Next\u201d command does return data for an OID that is too short or is missing the index part of the OID. For instance, if an OID was misidentified, the \u201cGet\u201d command would return an error for the misidentified OID. With \u201cGet-Next\u201d command, the \u201cGet-Next\u201d command still returns an answer, because \u201cGet-Next\u201d command will always retrieve the next value in the tree of the MIB, regardless of whether or not a valid OID was specified. Accordingly, when the interceptor client  reformats the \u201cGet\u201d command to a \u201cGet-Next\u201d, the user is assured of the fact that the returned data is valid, and thus, highly reliable.","When the requested data is returned, the retrieved data is in a form of object pairs since \u201cGet-Next\u201d command returns an OID and a value. The interceptor client  compares each retrieved OID with the associated requested OID. If the OID matches, the requested OID is updated with the returned data. If the requested OID is less than the retrieved OID, this implies that the requested OID did not exist on the agent; the requested OID is updated with a status of non-existent, unavailable, etc. Finally, if the requested OID is greater than the retrieved OID, this implies the OID arithmetic did not succeed in identifying the previous OID and a single \u201cGet\u201d command is issued on the requested OID.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIGS. 5","FIG. 5"],"i":["a ","b "],"b":["5","500","406","406","404","408","502","504","406","408","406","406","306","300"]},"The application client , in step , is further configured to pre-process the original requested OIDs. In particular, the application client  may be configured to take each requested OID (OID.a, OID.b, . . . , OID.n) and attempt to reconfigure the requested OIDs to the nearest possible previous OID, i.e., OID.a\u22121, OID.b\u22121, . . . , OID.n\u22121. It is expected that the arithmetic on the indices of the requested objects may not achieve the desired subtraction due to the openness of the SNMP protocol standard.","In step , the interceptor client  may be further configured to reformat the \u201cGet\u201d command to a \u201cGet-Next\u201d command using the modified indices in the Request ID  field, shown in , of the \u201cGet-Next\u201d command. Subsequently, the interceptor client  is configured to pass the \u201cGet-Next\u201d command with the modified OIDs to the SNMP application . The SNMP application  may be configured to packetize the \u201cGet-Next\u201d command with the modified OIDs in response to the called function. The request packet is then encapsulated by the TCP\/IP protocol application  and transported to the destination agent by the lower layer application  as TCP\/IP data packets.","In step , the destination agent has responded to the request packet and has returned the requested data based on the modified OIDs, e.g., OID.a\u22121, OID.b\u22121, . . . , OID.n\u22121, through the lower layer application , TCP\/IP application  and the SNMP application . The interceptor client  temporarily stores the returned object pairs (OID and value) in a temporary memory location.","In step , the OID of one of the returned object pairs is compared against the requested OIDs. If the requested OID is the same as the retrieved OID, the requested OID value is updated with the instance of the retrieved OID, in step . If the requested OID is greater than the retrieved OID, this situation indicates that the original OID arithmetic performed in step  did not succeed in identifying the previous OID. In response, a \u201cGet\u201d command with the original requested OID, in step . If the requested OID is less than the retrieved OID, this situation indicates that the requested OID is does not exist on the destination agent, and the interceptor client  may be configured to note the status as non-existent for the original OID, in step .","In step , the interceptor client  checks whether there are any more comparisons of retrieved OIDs with the requested OIDs. If there are more comparisons, the interceptor client  returns to step ; otherwise, the interceptor client  may be further configured to return the results for the requested OIDs, e.g., OID.a, OID.b, . . . , OID.n, to the SNMP manager application , in step .","While the invention has been described with reference to the exemplary embodiments thereof, those skilled in the art will be able to make various modifications to the described embodiments of the invention without departing from the true spirit and scope of the invention. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular, although the method of the present invention has been described by examples, the steps of the method may be performed in a different order than illustrated or simultaneously. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope of the invention as defined in the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":["Features and advantages of the present invention will become apparent to those skilled in the art from the following description with reference to the drawings, in which:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 5","i":["a ","b "],"b":"5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
