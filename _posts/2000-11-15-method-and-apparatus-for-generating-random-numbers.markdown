---
title: Method and apparatus for generating random numbers
abstract: A system collects entropy data and stores the entropy data in a nonvolatile memory. The entropy data stored in the nonvolatile memory is updated with newly collected entropy data. The entropy data stored in the nonvolatile memory is used to generate a string of random bits. The entropy data is collected from multiple sources within a computer system and may include data related to a processor in the computer system and an operating system executing on the computer system. The entropy data is maintained in a protected portion of an operating system kernel. A hashing algorithm is applied to the entropy data to generate random seed data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07571199&OS=07571199&RS=07571199
owner: Microsoft Corporation
number: 07571199
owner_city: Redmond
owner_country: US
publication_date: 20001115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to random number generators and, more particularly, to computer-implemented random number generators that create strings of random bits.","Random number generation is an important part of the security infrastructure in many application programs and operating systems. For example, random numbers are used to generate session keys and cryptographic keys for encoding data that is transmitted between two locations (such as between a client and a server). The use of such keys protects the integrity of the data and provides for the authentication of the data and authentication of the user attempting to access the data.","The quality of the random numbers generated is associated with the quality of the security provided by the application program or operating system. A perfect random number generator that produces a truly random sequence of bits is considered by many to be impossible. Thus, designers attempt to create \u201cpseudo\u201d random number generators that produce unpredictable sequences of bits in which no particular bit is more likely to be generated at a given time or place in the sequence than any other bit. This disclosure uses the terms \u201crandom number generator\u201d and \u201cpseudo random number generator\u201d interchangeably.","The quality of the random seed used by the random number generator affects the quality of the random number created by the random number generator. Common techniques for creating a random seed include using operating parameters of the computer, such as time of day, date, available memory, and the like. In general, these types of parameters are regarded as sufficient for certain types of simple applications, but can lead to predictability in certain situations. For example, systems that use the computer's system time as the random seed can be predicted if the approximate system time is known, such as the time at which an email was generated. An analyst could test all possible times near the known approximate system time until the seed for the random number is discovered, thereby breaking the security of the system.","Many existing random number generation systems use data that is reset each time the computer system is reset, thereby limiting the quality of the seed data. Other random number generation systems use data that may be similar from one computer system to the next, such as time of day or date, thereby reducing the randomness of the seed data.","The system and method described herein addresses these limitations by providing a random number generator that uses random seed data that has been generated over the lifetime of the computer system.","The system and methods described herein provide a computer-implemented random number generator that creates strings of random bits using entropy data that is collected over the lifetime of the computer system. The quality of this entropy data (i.e., the randomness of the data) is improved as compared to systems that use entropy data that is reset each time the computer or application program is restarted. Further, the system and methods described herein collect entropy data from multiple sources, thereby reducing the likelihood that two computer systems will have the same entropy data. Thus, the systems and methods described herein generate random numbers having an improved quality.","In one embodiment, entropy data is collected and stored in a nonvolatile memory. The entropy data stored in the nonvolatile memory is updated with newly collected entropy data. A string of random bits is generated from the entropy data stored in the nonvolatile memory.","In a described embodiment, the entropy data is collected from multiple sources within a computer system.","In a particular embodiment, the entropy data includes data related to a processor in a computer system and data related to an operating system executing on the computer system.","In a described implementation, the entropy data is maintained in a protected portion of an operating system kernel such that the entropy data is inaccessible to application programs executing on the system.","In one embodiment, generating a string of random bits includes hashing the entropy data to generate random seed data.","A particular embodiment includes communicating the string of random bits to an application program requesting a random number.","The system and methods described herein provide a random number generator that creates strings of random bits using entropy data that is collected over the lifetime of the computer system. Entropy data refers to the data (such as computer system state information) used as a random seed for the random number generator. Using data that is collected over the lifetime of the computer system improves the quality of the resulting random numbers because the data is not reset each time the computer system or application program is restarted. The collected data continues to change as additional operations, functions, and application programs are executed on the computer system. As time passes, the likelihood that two different computer systems would produce the same entropy data is reduced.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","102","104","102","104","102","104"]},{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"CPU Data","Operating System Data"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"timestamp counter","boot time"]},{"entry":[{},"cache misses per second","time of day"]},{"entry":[{},"branch mispredictions per","time zone bias"]},{"entry":[{},"second"]},{"entry":[{},"CPU-specific counters","page size"]},{"entry":[{},{},"number of processors"]},{"entry":[{},{},"current cache size"]},{"entry":[{},{},"peak cache size"]},{"entry":[{},{},"I\/O read operation count"]},{"entry":[{},{},"I\/O write operation count"]},{"entry":[{},{},"cache read count"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"102"},"A random number generator  receives the collected CPU data  and operating system data . The random number generator  stores the collected data in a nonvolatile memory , such as a hard disk, floppy disk, flash memory device or an EEPROM. Since the data is stored in the nonvolatile memory , the data is available to the random number generator  after a computer system restart. Thus, the data is collected and stored over the operating lifetime of the computer system. The random number generator  is capable of processing the CPU data  and the operating system data  to generate a string of random bits (or bytes). Periodically, the random number generator  retrieves current CPU data  and current operating system data . This current data is used to update the data stored in nonvolatile memory , thereby modifying the seed data used by the random number generator . In one embodiment, the data stored in nonvolatile memory  is updated at regular time intervals, as controlled by a timer . In another embodiment, the data stored in nonvolatile memory  is updated after a particular number of requests for random numbers (e.g., after every tenth request for a random number).","In a particular embodiment, a system device driver resides in the operating system kernel and generates random numbers at the request of an application program or other function accessing the device driver. This device driver is responsible for collecting and maintaining entropy data as discussed herein. An application programming interface (API) is provided to allow application programs to request a random number. The API communicates random number requests to the device driver, which generates a random number (a string of random bits or bytes) based on the entropy data. In a particular implementation, application programs use the RtlGenRandom( ) API provided by the Windows\u00ae operating system, developed by Microsoft Corporation of Redmond, Wash. The RtlGenRandom( ) API communicates with the device driver via the Win32\u00ae application programming interface call DeviceIoControl( ), which is a commonly used API call for communicating with device drivers in the Windows\u00ae operating system.","As discussed below, the device driver applies a hash function to the various entropy data collected. The result of the hash function is used as the random seed for the random number generator. The entropy data and the random seed data are maintained in a protected portion of the operating system kernel (i.e., a portion of the operating system kernel that is not accessible by an application program). Maintaining the entropy data and the random seed data in a protected portion of the operating system kernel prevents an application program from predicting or deriving random numbers issued to another application program on the same computer system. In a particular embodiment, the device driver manages the memory used to store the entropy data and the random seed data. In this embodiment, entropy data is maintained in the operating system kernel as well as the non-volatile Windows\u00ae registry.","A typical computer system has multiple processes executing simultaneously, one or more of which may require random numbers. The system and methods described herein allow the generation of multiple random numbers for use as session keys, cryptographic keys, and the like. Although particular embodiments are discussed with reference to a device driver residing in the operating system kernel that generates random numbers, it will be appreciated that any type of software component and\/or firmware component can be used to implement the random number generator.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"],"b":["200","202","204","108","206"]},"At block  in , the procedure  determines whether to update the entropy data. The entropy data may be updated at periodic intervals (e.g., every fifteen minutes) or after generating a particular number of random numbers (e.g., after every tenth random number is generated). Alternatively, an application program may specifically request an update of the entropy data. A particular implementation updates the data the first time that an application program makes a request for a random number. If the entropy data needs to be updated, then the procedure continues to block , where the device driver collects the current entropy data (i.e., the CPU data and the operating system data). After collecting the current entropy data, the device driver updates the data in the nonvolatile memory by replacing the previous entropy data with the new entropy data (block ). Alternatively, the device driver may update the data in the nonvolatile memory by hashing the previous entropy data with the new entropy data (this process may be referred to as \u201cchaining\u201d). Finally, the updated entropy data is hashed to generate updated random seed data (block ). The resulting random seed data overwrites the previous seed data stored in a register or other storage location. The procedure  then returns to block  to await the next update of the entropy data.","When a system is first initialized (i.e., no entropy data is stored in the nonvolatile memory), the procedure shown in  is executed beginning at block . However, when a system is reset or rebooted (i.e., entropy data is already stored in the nonvolatile memory), then the procedure shown in  is executed beginning at block . Thus, resetting or rebooting a system does not cause the deletion of any previously stored entropy data. The entropy data stored in the nonvolatile memory is continually updated over the life of the system, thereby providing continually changing entropy data and higher quality random numbers generated from the entropy data.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["300","302","304","306","308"]},"In a particular embodiment, the entropy data is hashed to produce a 640 bit hash, which is the seed data for the random number generator. The random number generator uses the 640 bit hash to generate a 256 byte random number, which is also referred to as a \u201ckey.\u201d The 256 byte random number can be used as a session key, a cryptographic key, or in any other situation requiring a random number. In one implementation, the RSA RC4 stream cipher (available from RSA Security of Bedford, Mass.) is used to generate a 256 byte random number from the 640 bit hash.","Although particular implementations have been described above with reference to specific stream ciphers, other types of ciphers can be used to generate a random number from the 640 bit hash. Further, the 640 bit hash and the 256 byte random numbers represent an exemplary embodiment. The system and methods described herein can be used with a hash (i.e., seed data) of any size to generate a random number having any number of bits (or bytes).",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["342","342","342","344","346","348","346","344"]},"The bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . Computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, connected to bus  via a hard disk drive interface  (e.g., a SCSI, ATA, or other type of interface); a magnetic disk drive  for reading from and writing to a removable magnetic disk , connected to bus  via a magnetic disk drive interface ; and an optical disk drive  for reading from and\/or writing to a removable optical disk  such as a CD ROM, DVD, or other optical media, connected to bus  via an optical drive interface . The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to the processing unit  through an interface  that is coupled to the system bus (e.g., a serial port interface, a parallel port interface, a universal serial bus (USB) interface, etc.). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown) such as speakers and printers.","Computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. In certain embodiments, computer  executes an Internet Web browser program (which may optionally be integrated into the operating system ) such as the \u201cInternet Explorer\u201d Web browser manufactured and distributed by Microsoft Corporation of Redmond, Wash.","When used in a LAN networking environment, computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via a serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Computer  typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other media which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules and includes any information delivery media. Combinations of any of the above should also be included within the scope of computer readable media.","The invention has been described in part in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.","For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Thus, a system and method has been described that generate random numbers based on entropy data collected over the lifetime of the computer system. The entropy data is maintained in a persistent storage device and can be updated at regular intervals.","Although the description above uses language that is specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
