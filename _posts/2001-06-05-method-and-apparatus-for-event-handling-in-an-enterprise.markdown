---
title: Method and apparatus for event handling in an enterprise
abstract: An event-handling system assigns multiple devices in an enterprise to a group. At least one event-handling policy is assigned to the group of devices. The event-handling policy assigned to the group is associated with each of the multiple devices in the group. A current state of each device is evaluated before the event-handling policy is applied to the device. A particular device may be assigned to two or more groups. The event-handling policy may define how the device is configured or the types of events that are provided to each device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07444395&OS=07444395&RS=07444395
owner: Microsoft Corporation
number: 07444395
owner_city: Redmond
owner_country: US
publication_date: 20010605
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/210,347, filed Jun. 7, 2000.","The present invention relates to computing systems and, more particularly, to the handling of events generated by components, services and applications in a computing environment.","Computer systems, such as servers and desktop personal computers, are expected to operate without constant monitoring. These computer systems typically perform various tasks without the user's knowledge. When performing these tasks, the computer system often encounters events that require a particular action (such as logging the event, generating an alert for a particular system or application, or performing an action in response to the event). Various mechanisms are available to handle these events.","A computing enterprise typically includes one or more networks, services, and systems that exchange data and other information with one another. The enterprise may include one or more security mechanisms to safeguard data and authenticate users and may utilize one or more different data transmission protocols. At any particular time, one or more networks, services or systems may be down (e.g., powered down or disconnected from one or more networks). Networks, services or systems can be down for scheduled maintenance, upgrades, overload or failure. Application programs attempting to obtain event data must contend with the various networks, services, and systems in the enterprise when they are down. Additionally, application programs must contend with the security and network topology limitations of the enterprise as well as the various protocols used in the enterprise.","Existing operating system components, services, and applications generate events having a variety of different formats. Typically, the events are stored in different files or databases (e.g., a file or database on the local system). These stored events are accessed via different application programs using different application programming interfaces (APIs). Thus, to retrieve event data in this type of system, an application program must know where to locate the stored event data and how to read or \u201cdecode\u201d the particular event data. Each time a new type of event (e.g., having a new storage location, a new format, and\/or a new API) is introduced, each application program that desires the new event data must be adapted to locate and retrieve the new event data.","The systems and methods described herein address these limitations by providing a centralized mechanism for collecting and storing event data. The systems and methods also provide a uniform event-handling process and infrastructure.","The event-handling system and method described herein provide a centralized architecture and procedure for managing event data. The centralized handling of event data uses a common interface to access event data, regardless of the event source, event data format, network topology or security mechanisms contained in the enterprise. Additional event sources can be added to the enterprise without requiring changes to the event-handling system. The event-handling system is also capable of grouping together multiple devices and assigning a common policy to all devices in the group.","In one embodiment, multiple devices are assigned to a group. At least one event-handling policy is assigned to the group such that the assigned policy is associated with each of the multiple devices in the group. A current state of each device is evaluated before the assigned policy is applied to the device.","In a described embodiment, a particular device may be assigned to two or more groups.","In a particular embodiment, the event-handling policy identifies the types of events that are provided to each device.","The systems and methods described herein provide for the centralized handling of event data generated by various event sources in an enterprise. The use of a common data format, a centralized event data storage device, and a common interface to obtain event data improves access to the event data and reduces administrative tasks associated with the handling of event data generated throughout the enterprise. The same event data format is used regardless of the source of the event data (also referred to as an event provider) or the users of the event data (also referred to as an event consumer). As the systems, applications, and topology of the enterprise changes, the event data format remains unchanged.","Web-Based Enterprise Management (WBEM) provides uniform access to management information throughout an enterprise. WBEM is an industry initiative to develop technology for accessing management information in an enterprise environment. This management information includes, for example, information on the state of system memory, inventories of currently installed client applications, and other information related to the status of the system. A particular embodiment of the event-handling system is implemented using Windows Management Instrumentation (WMI) developed by Microsoft Corporation of Redmond, Washington, which provides an infrastructure to handle various events generated by event sources throughout an enterprise. WMI is Microsoft Corporation's implementation of WBEM.","WMI technology enables systems, applications, networks, and other managed components to be represented using the Common Information Model (CIM) designed by the Distributed Management Task Force (DMTF). CIM is an extensible data model for representing objects that exist in typical management environments. CIM is able to model anything in the managed environment, regardless of the location of the data source. The Managed Object Format (MOF) language is used to define and store modeled data. In addition to data modeling, WMI provides a set of base services that include query-based information retrieval and event notification. Access to these services and to the management data is provided through a single programming interface.","WMI classes define the basic units of management. Each WMI class is a template for a type of managed object. For example, Win32_DiskDrive is a model representing a physical disk drive. For each physical disk drive that exists, there is an instance of the Win32_DiskDrive class. WMI classes may contain properties, which describe the data of the class and methods, which describe the behavior of the class.","WMI classes describe managed objects that are independent of a particular implementation or technology. WMI includes an eventing subsystem that follows the publish-subscribe model, in which an event consumer subscribes for a selection of events (generated by one or more event providers) and performs an action as a result of receiving the event. WMI also provides a centralized mechanism for collecting and storing event data. This stored event data is accessible by other systems via WMI tools and\/or application programming interfaces (APIs).","Although particular embodiments are discussed herein as using WMI, alternate embodiments may utilize any enterprise management system or application, whether web-based or otherwise. The event providers and event consumers discussed herein are selected for purposes of explanation. The teachings of the present invention can be used with any type of event provider and any type of event consumer. Additionally, the event-handling system and method described herein can be applied to any type of enterprise or other arrangement of computing devices, applications, and\/or networks.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","108","102","100","106","108","102","108","110","104"]},"WMI module  shown in  represents the managed node layer of the WMI module. As discussed below, the WMI module  may also include a central store layer, which may include user interface functionality. The different layers of WMI module  manage different types of activities and\/or perform different types of functions.","Event providers  include, for example, systems, services or applications that generate event data. An exemplary event provider is a disk drive (or an application that monitors the status of a disk drive). The disk drive may generate an event indicating the available storage capacity on the disk drive or indicating the amount of data currently stored on the disk drive. The disk drive may also generate an event indicating that the disk drive is nearly full of data (e.g., when ninety-five percent or more of the disk drive's capacity is used).","Event consumers  may request to be notified of certain events (also referred to as \u201csubscribing\u201d to an event). An example event consumer is an application that manages multiple storage devices in an enterprise. The application may request to receive events generated by any of the disk drives or other storage devices in the enterprise. The application can use this event information to distribute storage tasks among the multiple storage devices based on the available capacity of each device and\/or the quantity of read or write requests received by each storage device.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["150","150","106","152","152","106","106","106","162","106","104","110"]},"System  also includes a set of policies , which are accessible by WMI module . Policies  may control the configuration of one or more systems in the enterprise. Other policies may define various activities, such as event filtering, event correlation, and the forwarding of events to particular devices or applications. A database  is coupled to WMI module . Database  stores various information related to the enterprise. For example, database  can store event data (i.e., creating an event log), policy data, and enterprise configuration information.","WMI module  is also coupled to an event log . The event log  uses WMI features to provide a distributed architecture that is capable of selecting, filtering, correlating, forwarding, storing, and delivering event data in an enterprise. The event log  allows users, such as administrators, to request data related to a particular event, request data from a particular node or device in the enterprise, define the manner in which events are correlated with one another, define how certain events should be forwarded, and define how to store event data. Data requests may be accessed from the event log  using, for example, a particular UI application . The event log  uses an event provider model that allows an application, device or driver to generate events.","The event log  provides a policy-based administration of the enterprise. The policy infrastructure allows administrators to set a policy in the Directory Service (DS) and the event log ensures that the proper set of WMI objects (e.g., filters, bindings, correlators, consumers, and configuration objects) are delivered to the proper devices or applications in the enterprise. Table 1 below identifies various types of event providers available in a particular embodiment. Additionally, the table includes a description of the events generated by each event provider. For example, the Win32 Provider generates events that include information related to the operating system, computer system, peripheral devices, file systems, and security for a particular device (such as a computer system) in the enterprise.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Event Provider","Description of Events Provided"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Win32 Provider","Supplies information about the"]},{"entry":[{},{},"operating system, computer system,"]},{"entry":[{},{},"peripheral devices, file systems, and"]},{"entry":[{},{},"security."]},{"entry":[{},"WDM Provider","Supplies low-level Windows Driver"]},{"entry":[{},{},"Model (WDM) information for user"]},{"entry":[{},{},"input devices, storage devices, network"]},{"entry":[{},{},"interfaces, and communications ports."]},{"entry":[{},"Event Log Provider","Allows the reading of Windows NT"]},{"entry":[{},{},"event log entries, controls the"]},{"entry":[{},{},"configuration of event log"]},{"entry":[{},{},"administrative options, and event log"]},{"entry":[{},{},"backup."]},{"entry":[{},"Registry Provider","Allows registry keys to be created,"]},{"entry":[{},{},"read, and written. WMI events can be"]},{"entry":[{},{},"generated when specified Registry"]},{"entry":[{},{},"keys are modified."]},{"entry":[{},"Performance","Exposes the raw performance counter"]},{"entry":[{},"Counter Provider","information used to compute various"]},{"entry":[{},{},"performance values."]},{"entry":[{},"Active Directory","Acts as a gateway to information"]},{"entry":[{},"Provider","stored in Microsoft Active Directory"]},{"entry":[{},{},"services. Allows information from"]},{"entry":[{},{},"both WMI and Active Directory to be"]},{"entry":[{},{},"accessed using a single API."]},{"entry":[{},"Windows Installer","Supplies information about"]},{"entry":[{},"Provider","applications installed with the"]},{"entry":[{},{},"Windows Installer."]},{"entry":[{},"SNMP Provider","Acts as a gateway to systems and"]},{"entry":[{},{},"devices that use SNMP for"]},{"entry":[{},{},"management. Allows SNMP traps to"]},{"entry":[{},{},"be automatically mapped to WMI"]},{"entry":[{},{},"events."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["200","202","200","204","206"]},"At block , the procedure  determines whether a new subscription for event information has been received. The procedure  may also determine whether a request to revise an existing subscription has been received. If a new subscription (or a revised subscription) is received, the procedure continues to block  where the WMI module retrieves the requested event information and provides the information to the requesting event customer. Alternatively, the procedure may log the subscription request and notify the requesting event consumer when the next event is received that qualifies under the consumer's subscription request.","The WMI module allows multiple systems in an enterprise to be grouped together such that various event policies are assigned to the group of systems, rather than assigning the same set of policies to each individual system. This grouping of systems simplifies the administrative task of assigning event policies to systems within the enterprise.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":"300"},"The rule-based grouping of systems simplifies the administrative tasks by not requiring the manual maintenance of lists identifying the current configuration and current state of each system in the enterprise. The current state of each system is evaluated before each policy is applied, thereby reducing the likelihood that previously determined state information is no longer valid. As systems enter and leave the enterprise or change configuration, the correct policies are applied to the systems regardless of these ongoing changes to the enterprise.","Environment  in  includes three separate groupings , , and . Each grouping - is coupled to event log , which maintains and evaluates the state and configuration information of the systems in environment . Group  includes five systems, group  includes two systems, and group  includes two systems, one of which is also included in group . Thus, a particular system may be located in two or more groups.","As mentioned above, the grouping of systems is used to simplify the assignment of policies by assigning similar policies to the group instead of assigning the same policies to each individual system. Additionally, this grouping of systems simplifies the management of the system by allowing the administrator to work with fewer groups instead of a larger number of individual systems, many of which have redundant policies.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","b":["400","402","404","406"]},"At block , the procedure  determines whether a new group has been defined. If a new group has been defined, then the administrator assigns policies to the new group (block ). The procedure then returns to block  to determine whether a particular system is a member of the new group as well as other existing groups. Administrators (or other users) may generate new policies and apply those new policies to particular systems and\/or groups of systems. New policies that are applied to a group are automatically applied to all systems in the group.","In a particular embodiment, systems in an enterprise are grouped according to the department or organization division with which they are associated. For example, one group of systems may be associated with the production department, another group associated with the marketing department, and a third group associated with the customer service department. Each department may have different needs with respect to their policies, but the systems within a particular department are likely to have many policies in common. For example, an accounting department may have stricter security requirements and, therefore, require a different set of policies.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6","b":["502","504","506","508","510","512","510"]},"The policy elements that are complementary with one another are appended to the new, merged policy set . If two or more policy elements are in conflict with one another, then the conflict is resolved by applying a conflict-resolution algorithm, discussed below.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7","b":["600","600","602","604","606","608","600","610","612","604"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 8","b":"700"},"The arrangement  is used to eliminate conflicts between multiple policies being merged into a single policy set. As mentioned above with respect to block  in , the policy templates are arranged from global policy templates (e.g., policies that define the broad configuration and operation objectives for the entire enterprise) at the top of  to local policy templates (e.g., policies that are specific to a particular device or application) at the bottom of . For example, a global policy template  may be created or defined by one or more administrators that are responsible for administering the entire enterprise. A local policy template  may be created or defined by an administrator that is responsible for a particular portion of an enterprise, such as a particular group of systems or systems in a specific location. Additional policy templates , , , and  each contain varying levels of policies ranging from nearly global policies (policy template ) to nearly local policies (policy template ).","After the policy templates are arranged as shown in , it is necessary to find the intersection of all policy templates. In the example of , the intersection of five of the policy templates is shown by the two broken lines  and . This intersection of five policy templates defines an \u201callowed range\u201d that satisfies the majority of policy templates. Note that policy template  is discarded because the policies are in conflict with (e.g., opposed to) the policy range defined by the intersection of the other five policy templates , , , , and . Within each policy template , , , ,  and , is a preferred range or preferred value  (identified by a \u201cP\u201d surrounded by a box) associated with the policy template.","Finally, a \u201cpreferred range\u201d is selected. The preferred range (or preferred policy) has all properties set to preferred properties. Each preferred property is a preferred policy from the policy closest to the system (i.e., the bottom of ) and still within the \u201callowed range\u201d. In the example of , the preferred range for the merged policy template is the preferred range associated with policy template , because it is the preferred range closest to the system that is also within the allowed range. The preferred range associated with policy template  is not selected because that preferred range is not within the allowed range.","The conflict resolution procedure discussed above achieves customization of the policies on a particular system based on the preferences of the administrator closest to the system (i.e., the administrator most knowledgeable about the system and responsible for the system) while staying within the policy ranges dictated by all administrators with a higher level of authority.","The following are example policy templates:","Policy template 1:\n\n","Policy template 2:\n\n","Policy template Merged:\n\n",{"@attributes":{"id":"p-0058","num":"0066"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0059","num":"0067"},"figref":"FIG. 9","b":["842","842","842","844","846","848","846","844"]},"The bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. The system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . Computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, connected to bus  via a hard disk drive interface  (e.g., a SCSI, ATA, or other type of interface); a magnetic disk drive  for reading from and writing to a removable magnetic disk , connected to bus  via a magnetic disk drive interface ; and an optical disk drive  for reading from and\/or writing to a removable optical disk  such as a CD ROM, DVD, or other optical media, connected to bus  via an optical drive interface . The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to the processing unit  through an interface  that is coupled to the system bus (e.g., a serial port interface, a parallel port interface, a universal serial bus (USB) interface, etc.). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown) such as speakers and printers.","Computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. In certain embodiments, computer  executes an Internet Web browser program (which may optionally be integrated into the operating system ) such as the \u201cInternet Explorer\u201d Web browser manufactured and distributed by Microsoft Corporation of Redmond, Washington.","When used in a LAN networking environment, computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via a serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Computer  typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example, and not limitation, computer readable media may comprise computer storage media computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other media which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The invention has been described in part in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.","For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although the description above uses language that is specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
