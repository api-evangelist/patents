---
title: Lightweight framework for web applications
abstract: Various technologies described herein pertain to developing a web application using a scripting language-based framework. A call can be received via an interface of the scripting language-based framework. The call can manage a control included in the scripting language-based framework. Further, the call can be provided by an application that references the scripting language based framework. Moreover, a user interface can be generated based on the control managed by the call, and backend cloud-based services provided by a distributed data store on a cloud platform can be accessed based on the control managed by the call.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08671417&OS=08671417&RS=08671417
owner: Microsoft Corporation
number: 08671417
owner_city: Redmond
owner_country: US
publication_date: 20111212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A web application is an application that can be accessed over a network such as the Internet. A web application can be coded in a browser-supported language (e.g., scripting language combined with markup language) that can be accessed and used through a client-side web browser or another application on a client device (e.g., mobile application, desktop application, etc.). Web applications have become increasingly popular due to ubiquity of web browsers and convenience of using web browsers as clients. Moreover, the popularity of web applications has led to growth of centralized application marketplaces.","Recently, cloud computing has become more pervasive. Accordingly, web applications can be built on a cloud platform, where the web applications can run in the cloud and\/or use backend services provided by the cloud. Conventional development of an application built on a cloud platform commonly involves a web programmer having an understanding of various cloud platform specific information (e.g., protocols, data structures, etc.) in order to read data from the cloud, write data to the cloud, use other backend services, and the like. In addition to such complexity associated with developing an application on a cloud platform, conventional development oftentimes can be time consuming. With the growth of the centralized application marketplaces, web programmers are increasingly looking for ways to write powerful applications in less time that work across mobile devices and web browsers.","Described herein are various technologies that pertain to developing a web application using a scripting language-based framework. An interface of the scripting language-based framework can be exposed. Moreover, a call can be received via the interface of the scripting language-based framework. The call can manage a control included in the scripting language-based framework. Further, the call can be provided by an application that references the scripting language based framework. Moreover, a user interface can be generated based on the control managed by the call, and backend cloud-based services provided by a distributed data store on a cloud platform can be accessed based on the control managed by the call.","The scripting language-based framework can include a set of controls that are pre-programmed to access the backend cloud-based services and generate user interfaces when enabled. According to an example, an application can be developed that provides calls to enable, disable, set values of properties of, etc. one or more of the controls included in the scripting language-based framework. For instance, the calls can be generated from scripting language code included in the application. Thus, an application can be developed that employs functionality incorporated into the scripting language-based framework (e.g., by managing the set of controls) rather than by including custom code in the application to perform such functionality.","In various embodiments, the backend cloud-based services provided by the distributed data store on the cloud platform can include one or more of writing data to the distributed data store, reading data from the distributed data store, searching for data retained in the distributed data store, indexing data in the distributed data store, and so forth. Additionally or alternatively, one or more third party services can be accessible via the distributed data store on the cloud platform and\/or directly from the scripting language-based framework.","The above summary presents a simplified summary in order to provide a basic understanding of some aspects of the systems and\/or methods discussed herein. This summary is not an extensive overview of the systems and\/or methods discussed herein. It is not intended to identify key\/critical elements or to delineate the scope of such systems and\/or methods. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.","Various technologies pertaining to developing web applications using a lightweight, client-side framework are now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of one or more aspects. It may be evident, however, that such aspect(s) may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing one or more aspects. Further, it is to be understood that functionality that is described as being carried out by certain system components may be performed by multiple components. Similarly, for instance, a component may be configured to perform functionality that is described as being carried out by multiple components.","Moreover, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor.\u201d That is, unless specified otherwise, or clear from the context, the phrase \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, the phrase \u201cX employs A or B\u201d is satisfied by any of the following instances: X employs A; X employs B; or X employs both A and B. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims should generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from the context to be directed to a singular form.","As set forth herein, a lightweight framework can facilitate rapid web application development by a web programmer The lightweight framework described herein can be a scripting language-based framework. Moreover, the lightweight framework can enable device-compatible user interface creation and access to data retained in a distributed data store on a cloud platform and\/or backend cloud-based services provided by or available via the distributed data store on the cloud platform. In contrast, conventional frameworks used for web application development oftentimes support user interface creation without supporting data access. Accordingly, in conventional web application development, a web programmer oftentimes needs to have knowledge of cloud technologies, data structures, protocols, and so forth to develop a web application that reads data from the cloud, writes data to the cloud, or employs other backend cloud-based services.","Referring now to the drawings,  illustrates a system  that facilitates developing web applications. The system  includes a scripting language-based framework , which, in an exemplary embodiment, is a client-side framework. For instance, the scripting language-based framework  can be a feature-rich, lightweight framework. Moreover, the scripting language-based framework  can support development of web applications by mitigating overhead associated with common activities performed during application development. Thus, a web programmer need not perform such common activities during application development since functionality associated with these activities can be incorporated into the scripting language-based framework , and instead, the web programmer can create an application that uses the functionality supplied by the scripting language-based framework .","Developing a web application typically involves building a set of user interfaces and building data access to a backend system (and\/or building the backend system). The user interfaces can collect various forms of input from a user and can process the input to conform to specifications of the backend system. Moreover, the user interfaces can present an output to a user. The scripting language-based framework  simplifies development of a web application by allowing a web programmer to manage both data access to the backend system and creation of user interfaces with basic scripting language code and\/or markup language code. For example, the scripting language can be JavaScript\u00ae. An example of the markup language can be HTML. It is to be appreciated, however, that the claimed subject matter is not limited to the foregoing examples.","The scripting language-based framework  includes a data access component  and a user interface (UI) creation component . The data access component  integrates with a cloud-based backend system. In particular, the data access component  can access backend cloud-based services provided by a distributed data store  on a cloud platform . For example, the data access component  can read data from the distributed data store , write data to the distributed data store , employ third party backend cloud-based service(s) abstracted by the distributed data store , and so forth. The data access component  can be designed to automatically use the distributed data store ; thus, a web application developed by a web programmer can automatically use the distributed data store  without the web programmer needing to integrate access to backend cloud-based services provided by the distributed data store .","Moreover, the UI creation component  can generate a set of user interfaces. The UI creation component  can generate user interfaces that can collect various forms of input from a user and can process the input to conform to specifications of the backend system. Further, the UI creation component  can generate user interfaces that can present an output to a user.","Further, the scripting language-based framework  includes a set of controls . According to an example, the scripting language-based framework  can include one or more scripting language libraries that include the controls . The controls  can be utilized by the UI creation component  to create user interfaces and the data access component  to access backend cloud-based services provided by the distributed data store  on the cloud platform . According to an illustration, when a given control from the controls  is enabled, the UI creation component  can generate a user interface based on the given control and the data access component can access backend cloud-based services provided by the distributed data store  on the cloud platform  based on the given control. Thus, the given control can be utilized by the web programmer as opposed to the web programmer writing custom code to provide the functionality of the given control.","The scripting language-based framework  can further include an interface component . The interface component  can be a scripting language interface for an application  (e.g., a web application), where the application  can include scripting language code and\/or markup language code. The application  can reference the scripting language-based framework  via the interface component  to employ functionality incorporated into the scripting language-based framework . Moreover, the application  can provide call(s) to the scripting language-based framework  via the interface component . For instance, the call(s) can manage one or more of the controls  (e.g., a call can manage a control from the controls ). According to an example, a call can be generated from scripting language code included in the application ; thus, the application  can include scripting language code that can generate one or more calls that manage one or more of the controls , where the one or more calls can be provided to the scripting language-based framework  via the interface component .","The controls  in the scripting language-based framework  can be enabled or disabled based upon the scripting language code included in the application  (e.g., in response to the call(s) provided by the application  via the interface component ). Moreover, the controls  can have properties and effects that can be managed by the scripting language code in the application  (e.g., in response to the call(s) provided by the application  via the interface component ). According to an example, one or more of the controls  can be dynamically stylized based on the scripting language code in the application . By way of another example, one or more of the controls  can have a range of properties that can be set in response to the scripting language code in the application .","The scripting language-based framework  can be used by a web programmer when developing the application . The scripting language-based framework  provides functionality related to data access (e.g., via the data access component ) and user interface generation (e.g., via the UI creation component ). Accordingly, use of the scripting language-based framework  can reduce an amount of time spent by a web programmer when developing the application . Thus, the scripting language-based framework  can improve an ability of the web programmer of the application  to manage data access and user interface creation using scripting language code and\/or markup language code.","The data access component  can directly access the distributed data store  on the cloud platform . Accordingly, the web programmer can generate the application  to read from and\/or write to the distributed data store  using simple scripting language code and\/or markup language code. The web programmer can create the application  without having knowledge of cloud technologies, data structures, protocols, and the like. Rather, the application  can manage (e.g., enable, disable, set a value of a property or effect, stylize, etc.) one or more of the controls ; based on the one or more of the controls  as managed by the application , the data access component  can directly access the distributed data store  on the cloud platform .","The distributed data store  is built on the cloud platform . The distributed data store  can be a fully scalable, replicated data store on the cloud platform . In an exemplary embodiment, the distributed data store  can be a NoSQL store. Further, the distributed data store  can be built on a search component  and an index component . The search component  can be a search engine that provides full text and\/or image search. The cloud platform  can also provide other backend services in addition to or instead of the search component  and the index component . Thus, according to an example, the data access component  can search for data in the distributed data store  using the search component , index data in the distributed data store  using the index component , and so forth.","The distributed data store  on the cloud platform  is exposed through a set of application programming interfaces (APIs) . The APIs  can be RESTful (representational state transfer) APIs. Moreover, the APIs  can be integrated into the scripting language-based framework . For example, the data access component  can employ the APIs  to access the distributed data store . Accordingly, the scripting language-based framework  can abstract the APIs  such that a web programmer need not learn how to utilize the APIs . Rather, the interface component  can expose a simple scripting language interface that can be employed by the web programmer for developing the application . By way of example, the controls  available in the scripting language-based framework  can be exposed via the interface component .","Moreover, a set of third party services can be integrated into the distributed data store : namely, a third party service  , . . . , and a third party service N , where N can be substantially any integer (collectively referred to herein as third party services -). Accordingly, the distributed data store  can provide access to APIs of the third party services -. Hence, the data access component  can access the third party services - (e.g., third party backend cloud-based services) via the distributed data store  on the cloud platform . Examples of the third party services - can include a web search service, an image search service, a video search service, a social networking service, a microblogging service, a mapping service, a semi-structured database search service, an authentication service, a cloud platform service, and so forth. It is to be appreciated, however, that the claimed subject matter is not limited to the foregoing examples of the third party services -, and rather, any third party service is intended to fall within the scope of the hereto appended claims.","Further, upon completion of development, the application  can be uploaded to a web hosting service (not shown). Since the application  can be written in scripting language code and\/or markup language code, the application  can be embedded or uploaded to substantially any website, for example. Upon being made available, the application  can be retrieved and loaded onto a web browser of a client device (not shown) for execution. Further, the application  can be client device agnostic such that it can work across modern desktop, laptop, and mobile browsers.","The following illustration demonstrates a conventional approach for developing an application that maintains an address book in a cloud-based data store. A web programmer can initially define data objects and relationships between the data objects (e.g., people, organizations to which people belong, etc.). Thereafter, the web programmer can build a set of user interfaces. According to an example, the web programmer can build a user interface to create a contact, a user interface to associate the contact with other contacts, a user interface to update a contact, a user interface to delete a contact, a user interface to search over contacts, and so forth. Upon developing the user interfaces and defining the data objects, the web programmer can build a set of backend services (e.g., backend cloud-based services) and\/or build a system that accesses a set of backend services. Examples of the backend services can include a service to write data to the cloud-based data store, a service to read data from the cloud-based data store, a service to search over the data retained in the cloud-based data store, a service to edit data in the cloud-based data store, a service to delete data from the cloud-based data store, and so forth. The foregoing approach can be time consuming for the web programmer Moreover, such development can involve significant understanding of various protocols, data structures, and so forth.","In contrast, the scripting language-based framework  is integrated with the distributed data store  on the cloud platform . Moreover, the scripting language-based framework  includes the set of controls  that can be managed as a function of the scripting language code included in the application . Further, the controls  can be pre-programmed within the scripting language-based framework  to access the cloud-based backend system (e.g., the distributed data store  on the cloud platform ). Thus, instead of the web programmer having to perform a range of backend programming as well as user interface development, the web programmer can write scripting language code and\/or markup language code to manage the controls  of the scripting language-based framework , which are integrated into the rich backend of the distributed data store  on the cloud platform .","Now referring to , illustrated is a system  that facilitates developing web applications that employ third party services. The system  includes the scripting language-based framework , which can further comprise the data access component , the UI creation component , the set of controls , and the interface component . As described above, the data access component  can directly access the distributed data store  on the cloud platform  via the APIs .","Moreover, one or more third party services can be directly integrated into the scripting language-based framework . Thus, APIs of a third party service  , . . . , and a third party service M  (collectively referred to herein as third party services -) can be exposed to the data access component  of the scripting language-based framework , where M can be substantially any integer. The scripting language-based framework  can abstract the APIs of the third party services -. Accordingly, the application  can include scripting language code that manages one or more of the controls , where the controls  can cause the data access component  to employ one or more of the third party services - without the web programmer of the application  needing to have knowledge of the data structures, protocols, etc. for the APIs of the one or more third party services -. Thus, the web programmer need not write code that accesses the one or more third party services - when developing the application  as such integration is incorporated into the scripting language-based framework .","Examples of the third party services - can include a web search service, an image search service, a video search service, a social networking service, a microblogging service, a mapping service, a semi-structured database search service, an authentication service, a cloud platform service, and so forth. Yet, the claimed subject matter is not limited to the foregoing examples of the third party services -. According to an example, a third party service can be integrated into both the distributed data store  and the data access component  (e.g., the third party service can be one of the third party services - and one of the third party services -). Additionally or alternatively, a third party service can be integrated into either the distributed data store  or the data access component  (e.g., the third party service can be one of the third party services - or one of the third party services -).","By way of example, when an Internet Protocol (IP) address of a client device (e.g., a device executing the application ) is to be provided to a third party service (e.g., to return content relevant to the IP address), a control (e.g., from the controls ) can cause the data access component  to directly supply the IP address to the third party service rather than indirectly passing the IP address to the third party service. Thus, the data access component  can send the IP address to one or more of the third party services - directly integrated there with rather than sending the IP address to one or more of the third party services - accessible via the distributed data store  on the cloud platform .","Now turning to , illustrated is a system  for developing the application  using the scripting language-based framework . The scripting language-based framework  includes the data access component  that can access cloud-based backend system(s) (e.g., the distributed data store  on the cloud platform  of , the third party services - of , etc.), the UI creation component  that generates user interfaces, and the interface component  that can interface with the application .","Moreover, the scripting language-based framework  includes the controls . The controls  can be based on the model-view-controller (MVC) model, for example. The controls  can be enabled or disabled as a function of the scripting language code included in the application . For instance, when one or more of the controls  are enabled in the application , the enabled control(s)  can cause the UI creation component  to generate user interface(s). Further, the controls  can have a range of properties and effects that can be applied to them. According to an illustration, one or more of the controls  can be stylized based on the scripting language code included in the application . For example, one or more of the controls  can be managed by the application  to cause the UI creation component  to animate user interface(s) rendered on a display of a client device. Possible animations can be incorporated into the controls  included in the scripting language-based framework . Pursuant to a further example, the controls  included in the scripting language-based framework  can have dependencies on each other; following this example, the dependencies between the controls  can allow the UI creation component  to provide for rich animation in generated user interface(s). By way of another example, the controls  may have a number of properties such as, for instance, a name, title, and so forth.","Pursuant to an example, one or more of the controls  can manage authentication for the application . For example, the application  can include scripting language code that chooses an authentication scheme from a set of available authentication schemes (e.g., provided by different third party services). Thereafter, the selected authentication scheme can be employed across the system from the backend (e.g., the distributed data store  on the cloud platform  of ) to through the frontend.","Further, the UI creation component  can include a tailoring component  that can detect capabilities of client device on which the application  is running and modify user interfaces generated based on one or more of the controls  as a function of the detected capabilities. For example, if the application  is loaded on a smartphone, the tailoring component  can detect that the client device includes a camera and a microphone. Following this example, the tailoring component  can modify the user interfaces generated by the UI creation component  based on the one or more of the controls  to include features related to the camera and microphone of the smartphone, whereas such features can be omitted in the user interfaces generated by the UI creation component  when the tailoring component  detects that a client device lacks a camera and a microphone. By including the tailoring component , the scripting language-based framework  can enable the application  to employ capabilities of a client device on which the application  is executing. Moreover, the application  can work across mobile devices, desktops, laptops, etc. by utilizing the tailoring component  incorporated in the scripting language-based framework  without coding by the web programmer to support the various types of devices.","The UI creation component  can further include a flighting component  that can rollout features of the application  in phases. For instance, a web programmer can desire that a certain subset of users have access to a feature of the application . Thus, the flighting component  can provide the feature of the application  in user interface(s) generated for the subset of users while hiding the feature in user interface(s) generated for the remainder of the users of the application . By including the flighting component  in the scripting language-based framework , custom code to enable staggered rollout of features of the application  need not be written by a web programmer.","Moreover, the scripting language-based framework  can include a notification component  that receives notifications from and sends notifications to the controls . Thus, in the scripting language-based framework , the notification component  can exchange information between the controls , which can allow for having dependencies between the controls . According to an illustration, the application  can be a scripting language shell, which can include scripting language code that generates calls to a plurality of the controls . Following this illustration, the plurality of the controls  called within the application  can receive shell-wide notifications from the notification component , thereby facilitating interaction between the plurality of controls .","For example, two controls (e.g., from the controls ) can be included on a webpage; one control can be a list view of names and the other control can be a detailed view, for instance. Following this example, the two controls can exchange information via the notification component . Thus, for instance, if a name is selected (e.g., clicked on) in the list view, then the detailed view can show details corresponding to the name selected in the list view. Moreover, the notification component  can exchange information used by the controls  to effectuate event chaining. Accordingly, behaviors of the controls  can be chained based on events (e.g., loading data, processing a transaction, completion of an animation, received user input, etc.).","Further, the data access component  can include a source binding component  that can bind controls  to data sources (e.g., cloud-based backend system(s)). According to an example, the source binding component  can bind two of the controls  to objects from different sources. Pursuant to this example, the source binding component  can bind one of the controls  to objects from a first social networking service, and the other one of the controls  to objects from a second social network service; yet, it is to be appreciated that the claimed subject matter is not limited to the foregoing example. Since the source binding component  can bind controls  to different data sources, the data access component  can employ a normalized schema for information from the various data sources. Such normalization of the schema can allow for flexible exchange of information between the controls . In various embodiments, the source binding component  can bind one or more of the controls  to an open data protocol (ODdata) source; however, it is to be appreciated that the claimed subject matter is not so limited.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIGS. 4-5"},"Moreover, the acts described herein may be computer-executable instructions that can be implemented by one or more processors and\/or stored on a computer-readable medium or media. The computer-executable instructions can include a routine, a sub-routine, programs, a thread of execution, and\/or the like. Still further, results of acts of the methodologies can be stored in a computer-readable medium, displayed on a display device, and\/or the like.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4","b":["400","402","404","406","408"]},"Now turning to , illustrated is a methodology  for developing a web application. At , an interface for a scripting language-based framework that includes a set of controls pre-programmed to access backend cloud-based services and generate user interfaces when enabled can be exposed. At , a call that enables a control from the set of controls included in the scripting language-based framework can be received via the interface. The call can be provided by an application that references the scripting language-based framework. At , a user interface can be generated based on the control enabled by the call. At , the backend cloud-based services provided by a distributed data store on a cloud platform can be accessed based on the control enabled by the call.","Referring now to , a high-level illustration of an exemplary computing device  that can be used in accordance with the systems and methodologies disclosed herein is illustrated. For instance, the computing device  may be used in a system that develops a web application using a scripting language-based framework. By way of another example, the computing device  may be used in a system that executes a web application built upon a scripting language-based framework. The computing device  includes at least one processor  that executes instructions that are stored in a memory . The instructions may be, for instance, instructions for implementing functionality described as being carried out by one or more components discussed above or instructions for implementing one or more of the methods described above. The processor  may access the memory  by way of a system bus . In addition to storing executable instructions, the memory  may also store an application, a scripting language-based framework, and so forth.","The computing device  additionally includes a data store  that is accessible by the processor  by way of the system bus . The data store  may include executable instructions, an application, a scripting language-based framework, etc. The computing device  also includes an input interface  that allows external devices to communicate with the computing device . For instance, the input interface  may be used to receive instructions from an external computer device, from a user, etc. The computing device  also includes an output interface  that interfaces the computing device  with one or more external devices. For example, the computing device  may display text, images, etc. by way of the output interface .","Additionally, while illustrated as a single system, it is to be understood that the computing device  may be a distributed system. Thus, for instance, several devices may be in communication by way of a network connection and may collectively perform tasks described as being performed by the computing device .","As used herein, the terms \u201ccomponent\u201d and \u201csystem\u201d are intended to encompass computer-readable data storage that is configured with computer-executable instructions that cause certain functionality to be performed when executed by a processor. The computer-executable instructions may include a routine, a function, or the like. It is also to be understood that a component or system may be localized on a single device or distributed across several devices.","Further, as used herein, the term \u201cexemplary\u201d is intended to mean \u201cserving as an illustration or example of something.\u201d","Various functions described herein can be implemented in hardware, software, or any combination thereof If implemented in software, the functions can be stored on or transmitted over as one or more instructions or code on a computer-readable medium. Computer-readable media includes computer-readable storage media. A computer-readable storage media can be any available storage media that can be accessed by a computer. By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc, as used herein, include compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk, and blu-ray disc (BD), where disks usually reproduce data magnetically and discs usually reproduce data optically with lasers. Further, a propagated signal is not included within the scope of computer-readable storage media. Computer-readable media also includes communication media including any medium that facilitates transfer of a computer program from one place to another. A connection, for instance, can be a communication medium. For example, if the software is transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio and microwave are included in the definition of communication medium. Combinations of the above should also be included within the scope of computer-readable media.","What has been described above includes examples of one or more embodiments. It is, of course, not possible to describe every conceivable modification and alteration of the above devices or methodologies for purposes of describing the aforementioned aspects, but one of ordinary skill in the art can recognize that many further modifications and permutations of various aspects are possible. Accordingly, the described aspects are intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is used in either the details description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
