---
title: Providing a network-accessible malware analysis
abstract: In certain embodiments, a computer-implemented method comprises receiving, via a computer network and from a first computer system, a first malware analysis request. The first malware analysis request comprises a file to be analyzed for malware by a malware analysis system. The method includes initiating a malware analysis by the malware analysis system of the first file for malware. The method includes communicating to the first computer system a response for the first file determined by the malware analysis system to the first computer system. The response comprises an indication of whether the first file comprises malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003532&OS=09003532&RS=09003532
owner: Raytheon Company
number: 09003532
owner_city: Waltham
owner_country: US
publication_date: 20110915
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["Malware (such as viruses, trojans, and other malicious software) has become increasingly more difficult to contest. Various methods have been used to combat malware, but more sophisticated malware continues to abound. Methods of detection have grown more complex, but often take longer to execute due to this complexity. Malware protection techniques applied in certain computer systems often lack the complexity or other sophistication to detect or otherwise address certain types of malware such as zero-day attacks and other types of malware.","In certain embodiments, a computer-implemented method comprises receiving, via a computer network and from a first computer system, a first malware analysis request. The first malware analysis request comprises a file to be analyzed for malware by a malware analysis system. The method includes initiating a malware analysis by the malware analysis system of the first file for malware. The method includes communicating to the first computer system a response for the first file determined by the malware analysis system to the first computer system. The response comprises an indication of whether the first file comprises malware.","Particular embodiments of the present disclosure may provide one or more technical advantages. Certain embodiments allow computer systems to access malware analysis services provided by a malware analysis system by invoking those malware detection services using a web services interface. Embodiments of the present disclosure may provide a network-accessible interface, which may be a universal interface, to a malware analysis system and its associated data repository of historical malware analyses. Providing a web services interface for communicating with the malware analysis system may ease the use of such a system, thereby potentially encouraging its use. Communication of files to a remote malware analysis system for analysis may allow for more robust malware analysis to be performed than might be possible or practical with typical host-based or other local malware analysis systems. In certain embodiments, the remote malware analysis system further provides a mechanism for a human analyst to contribute to the malware analysis of certain files, if appropriate.","Certain embodiments of the present disclosure may provide some, all, or none of the above advantages. Certain embodiments may provide one or more other technical advantages, one or more of which may be readily apparent to those skilled in the art from the figures, descriptions, and claims included herein.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","102","104","106","108","100","100"]},"Embodiments of system  implement a web service interface for malware analysis. Although described as a \u201cweb service\u201d or \u201cweb service interface,\u201d the present disclosure contemplates malware detection services being provided via a computer network  in any suitable manner. In general, client system  determines that one or more files should be analyzed for malware and requests using a web services interface analysis of those files by malware analysis system . Details of certain example embodiments of the present disclosure are described below. In certain embodiments, the web services interface provides a universal messaging format for communicating between client systems  and malware analysis system .","Client system  may include one or more computer systems at one or more locations. Each computer system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each computer system may include a personal computer, workstation, network computer, kiosk, wireless data port, personal data assistant (PDA), one or more Internet Protocol (IP) telephones, one or more cellular\/smart phones, one or more servers, a server pool, a network gateway, a router, a switch, one or more processors within these or other devices, or any other suitable processing device. Client system  may be a stand-alone computer or may be a part of a larger network of computers associated with an entity. Client system  may be implemented using any suitable combination of hardware, firmware, and software. \u201cClient system \u201d and \u201cuser of client system \u201d may be used interchangeably throughout this description. Client system  may be one of a number of client systems .","Client system  may include a processing unit  and a memory unit . Processing unit  may include one or more microprocessors, controllers, or any other suitable computing devices or resources. Processing unit  may work, either alone or with other components of system , to provide a portion or all of the functionality of its associated computer system  described herein. Memory unit  may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, read-access memory (RAM), read-only memory (ROM), removable media, or any other suitable memory component.","Client system  may include an application , which may be implemented using any suitable combination of hardware, firmware, and software. Client system  also may include file , file information , and callback information . Each of these is described in greater detail below.","Application  may include any suitable application (or combination of applications) that is operable to access a computer network, such as the Internet, and to initiate a web services call to web services system  to request that malware analysis system  analyze file . Application  may be configured to interface with web services module  of web services system . In certain embodiments, a portion or all of application  may include a web service (e.g., that may be distinct from the web service provided by web services system ).","Application  may be operable to communicate various types of malware analysis requests . These malware analysis requests  may be implemented as web services requests. Malware analysis requests  may include status requests, file analysis requests, a callback request, and any other suitable types of requests. For example, a status request may be a synchronous request. As another example, a file analysis request with a callback request may be an asynchronous request. These example malware analysis requests  are described in greater detail below. Application  may be operable to receive results , from web services system  and\/or malware analysis system  for example. In certain embodiments, results  may include an indication of whether or not a file  submitted to be analyzed for malware is determined by malware analysis system  to be malware.","In certain embodiments, application  is operable to access one or more policies to determine whether to initiate malware analysis request  (e.g., as a web services request) for malware analysis system  to perform a malware analysis of file . For example, these policies may filter which files  are communicated to malware analysis system  (via a web services request) to be analyzed for malware.","Files  may have any suitable format, according to particular needs. For example, file  may include one or more of the following in any suitable combination: (1) a data file; (2) a data record; (3) an email message; (4) an attachment to an email message; (5) a Uniform Resource Locator (URL) or other suitable address identifier; and (6) any other suitable target object for which malware detection may be appropriate. In some embodiments, the term file as used herein may refer to a collection of files. For example, a ZIP file or other archive or compressed file type may include multiple embedded files. The present disclosure contemplates client system  having any suitable number of files  and requesting that malware analysis system  perform a malware analysis of any suitable number of files .","File information  may include any suitable combination of an identifier for client system  (e.g., an IP address, a user name, a machine identification number, and\/or any other suitable identifying information), a file type of file , a hash value (or other identifier) computed from file , timestamp information associated with the addition of file  to client system  (and\/or any other suitable time information), an identification of a manner in which file  was added to client system , an identification of one or more policies (e.g., of client system  and\/or an entity associated with client system ) that resulted in file  being communicated to remote malware analysis system , and any other suitable information. File information  may be included in certain malware analysis requests , as described in greater detail below.","The hash value of file  may provide a reasonably reliable identifier for file . In certain embodiments, application  is operable to compute the hash value and any other suitable file information. For example, application  may generate one or more hashes of content of file  (such as any suitable combination of a checksum, an MD5 hash, a SHA1 hash, and any other suitable type of hash).","Callback information  may include any suitable information that may be used by web services system  and\/or malware analysis system  to communicate a message to client system . For example, callback information  may include any suitable combination of an IP address of client system , a port number of client system , and any other suitable information that can be used by web services system  and\/or malware analysis system  to communicate a message to client system . As described below, client system  may provide a portion or all of callback information  to web services system  and\/or malware analysis system  to request a return communication from web services system  and\/or malware analysis system upon completion of the malware analysis of file  (or at any other suitable point depending on the configuration of system ).","Computer network  facilitates wireless or wireline communication. Computer network  may communicate, for example, IP packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. Computer network  may include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), mobile networks (e.g., using WiMax (802.16), WiFi (802.11), 3G, 4G, or any other suitable wireless technologies in any suitable combination), all or a portion of the global computer network known as the Internet, and\/or any other communication system or systems at one or more locations, any of which may be any suitable combination of wireless and wireline.","Web services system  may include one or more computer systems at one or more locations. Each computer system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each computer system may include a personal computer, workstation, network computer, kiosk, wireless data port, PDA, one or more IP telephones, one or more cellular\/smart phones, one or more servers, a server pool, switch, router, disks or disk arrays, one or more processors within these or other devices, or any other suitable processing device. Web services module  may be a stand-alone computer or may be a part of a larger network of computers associated with an entity. In certain embodiments, web services system  is a proxy server.","Web services system  may include a processing unit  and a memory unit . Processing unit  may include one or more microprocessors, controllers, or any other suitable computing devices or resources. Processing unit  may work, either alone or with other components of system , to provide a portion or all of the functionality of its associated web services system  described herein. Memory unit  may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, RAM, ROM, removable media, or any other suitable memory component.","Web services system  may comprise a web services module , which may be implemented in any suitable combination of hardware, firmware, and software. Web services module  may implement a web services interface for communication between client system  and malware analysis system . In certain embodiments, web services module  provides a universal interface to malware analysis system , allowing an external application (e.g., application ) to make use of the malware analysis capabilities of malware analysis system . The external application (e.g., application ) also may take advantage of the storage capabilities associated with web services system  and\/or malware analysis system  (e.g., storage module , described below) for storing historical malware data associated with previous malware analyses. In certain embodiments, web services module  may implement the web services interface using web service technology such as Simple Object Access Protocol (SOAP) Remote Procedure Calls (RPCs), Representational State Transfer (REST), Web RPC, Asynchronous JavaScript and Extensible Markup Language (AJAX)-based Application Programming Interfaces (APIs), and\/or other suitable network-based APIs.","Web services module  may implement a variety of communications between client system  and malware analysis system . For example, web services module  may provide for a synchronous mechanism for client system  to request a status of a malware analysis of a file . As another example, web services module  may provide for an asynchronous mechanism for uploading single or multiple files  for a malware analysis to be performed on those file(s)  by malware analysis system . Web service module  then optionally may call back to client system  (e.g., using callback information ) upon completion of the malware analysis of the file  with the results of the malware analysis. These example communications are described in greater detail below following the description of the other components of system .","Malware analysis system  may include any processing system operable to analyze one or more files  for malware. For example, malware analysis system  may analyze files  for malware in response to a malware analysis request  from client system . Malware analysis system  may return the results (e.g., as a results ) of the analysis of the files  for malware to client system .","In certain instances, malware analysis system  may identify a file  as being and\/or containing (terms and their variations of which may be used interchangeably throughout this disclosure) malware if the file  includes any of a variety of forms of hostile or intrusive computer-readable logic designed to infiltrate a computer system. Particular forms of malware may include computer viruses, worms, trojan horses, spyware, adware, scareware, crimeware, rootkits, and other malicious and\/or unwanted software. Malware may be designed to disrupt or deny operation of a computer system, gather information from a computer system (e.g., that leads to a loss of privacy or exploitation), gain unauthorized access to computer system resources, or engage in other abusive behavior.","Malware analysis system  may be operable to run one or more malware detection processes on files  and determine a status of the files . Running the one or more malware detection processes on a file  accessed by malware analysis system  may, in certain instances, result in a detection of malware. Malware detection by malware analysis system  may conclusively indicate that the file  or files  in question are known not to contain malware. Malware detection by malware analysis system  may conclusively indicate that the file  or files  in question are known to contain malware. Alternatively, malware detection by malware analysis system  may indicate that the file  or files  in question are suspected of malware, though such detection may not conclusively indicate that the file  or files  are known to contain malware. These and other example statuses are described in greater detail below.","In certain embodiments, a portion of malware analysis system  may generate information that is accessible by a human analyst (e.g., using analysis console , described in greater detail below with reference to ) for further malware analysis of one or more files  suspected of malware. The information may correspond to one or more files  subjected to a set of malware detection process run by malware analysis system .","In certain embodiments, malware analysis system  may generate a response  indicating a result of the malware analysis of the file  or files  performed by malware analysis system . In certain embodiments, response  may be communicated to client system  (via web services system ) in response to a callback request submitted by client system  and\/or in response to a status request submitted by client system .","In certain embodiments, malware analysis system  may publish available operations\/interactions as a web service (e.g., via web services system ). Thus, client system  and malware analysis system  may communicate with one another via the web service, using one or more messages formatted according to the web service interface provided by web services system . For example, client system  may communicate files  and\/or other information to malware analysis system  via the web service, requesting that malware analysis system  analyze file  for malware or otherwise provide a result .","Malware analysis system  may include any suitable combination of hardware, firmware, and software. For example, malware analysis system  may include one or more computer systems at one or more locations. Each computer system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each computer system may include a personal computer, workstation, network computer, kiosk, wireless data port, PDA, one or more IP telephones, one or more cellular\/smart phones, one or more servers, a server pool, switch, router, disks or disk arrays, one or more processors within these or other devices, or any other suitable processing device. Malware analysis system  may be a stand-alone computer or may be a part of a larger network of computers associated with an entity.","Malware analysis system  may comprise a processing unit  and a memory unit . Processing unit  may include one or more microprocessors, controllers, or any other suitable computing devices or resources. Processing unit  may work, either alone or with other components of system , to provide a portion or all of the functionality of system  described herein. Memory unit  may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, RAM, ROM, removable media, or any other suitable memory component. In certain embodiments, a portion of all of memory unit  may include a database, such as one or more SQL servers or relational databases.","In certain embodiments, malware analysis system  may include a malware analysis module . Malware analysis module  may be implemented in any suitable combination of hardware, firmware, and software. Malware analysis module  may be a web service running on malware analysis system  and may implement the web service interface used by client system  and malware analysis system . For example, when communicating with one another using the web service interface, client system  and malware analysis system  may communicate messages (e.g., requests  and responses ) via malware analysis module , which may enforce and interpret the message formats of the web service interface for communicating with malware analysis system .","A particular example implementation of malware analysis system  is illustrated in  and described below in greater detail. Although that particular example implementation of malware analysis system  is illustrated and described, the present disclosure contemplates implementing malware analysis system  in any suitable manner, according to particular needs. Although illustrated separately, web services system  and malware analysis system  may be combined or separated in any suitable manner, according to particular needs.","Web services system  and\/or malware analysis system  may be coupled to or otherwise associated with a storage module . Storage module  may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, RAM, ROM, removable media, or any other suitable memory component. In certain embodiments, a portion of all of storage module  may include a database, such as one or more structured query language (SQL) servers or relational databases. Storage module  may be a part of or distinct from a memory unit  and\/or memory unit  of web services module  and\/or malware analysis system , respectively.","Storage module  may store a variety of information that may be used by web services module  and\/or malware analysis system . In the illustrated example, storage module  stores files , file information , callback information , and historical detection data , each of which are described in greater detail below. Although storage module  is described as including particular information, storage module  may store any other suitable information. Furthermore, although particular information is described as being stored in storage module , the present description contemplates storing this particular information in any suitable location, according to particular needs.","Files  in storage module  may be copies of files  received from client systems  (e.g., as part of certain malware analysis requests ) via web services system . File information  in storage module  may be any suitable information about files . For example, file information  in storage module  may include any suitable combination of a portion or all of file information  (possibly received from client system  as part of a request ), information about file  generated by web services system  and\/or malware analysis system , and any other suitable information about file . Callback information  in storage module  may include callback information  received from client system  as part of a request . Historical detection data  may include historical results of past and\/or ongoing malware analyses of files  by malware analysis system . In certain embodiments, historical detection data  is indexed by hashes or other identifiers of files , and web services system  and\/or malware analysis system  may use the hashes or other identifiers of files  to determine if a file  identified in a request  (e.g., a status request) has been analyzed previously for malware.","As described above, web services module  of web services system  may implement a web services interface, which may include mechanisms by which client system  and malware analysis system  may interact. This web services interface may implement message formats communicated between client system  and malware analysis system  (e.g., malware analysis requests  and responses ), possibly via web services system . As described above, client system  (e.g., application ) may communicate malware analysis requests  to web services system . In certain embodiments, example malware analysis requests  may include a status request, a file analysis request, a callback request, and other suitable types of requests. Each of these example types of requests are described below.","As a first example, web services module  may provide a synchronous mechanism for client system  to request a status of a malware detection analysis of a file . This synchronous mechanism may be implemented as a status request . Client system  may submit a status request  prior to sending file  to malware analysis system  for a malware analysis, after sending file  to malware analysis system  for a malware analysis to be performed on file , or at any other suitable time.","The status request  may identify one or more files  for which the status is requested. For example, the status request may identify a file to be validated by including for each file  any suitable combination of a file name, a file identifier (e.g., a hash value computed for the file ), and any other suitable metadata. In certain embodiments, application  may compute the hash value using MD5, SHA-1, or any other suitable hash algorithm. The status request may include an identity of the caller (e.g., an identity of client system  and\/or a user of client system  communicating the status request). The status request may include any other suitable information about the one or more files  and client system , along with any other suitable information.","In certain embodiments, the status request  prompts a substantially immediate response from web services system  regarding whether the one or more files  identified in the status request  have been previously analyzed (or are currently being analyzed) for malware by malware analysis system . In certain embodiments, to have a particular file  analyzed for malware by malware analysis system , a client system  first submits a status request  regarding the file . This may filter traffic (e.g., file analysis requests ) that actually are delivered to malware analysis system  for a malware analysis to be performed by first determining whether malware analysis system  already has determined (or currently is determining) a malware status for the file .","As a second example, web services module  may provide an asynchronous mechanism for uploading single or multiple files for a malware analysis to be performed on those file(s)  by malware analysis system . Web service module  then optionally may call back to client system  upon completion of the malware analysis of the file with results of the malware analysis, such as a status of file  determined by malware analysis system . This asynchronous mechanism may be implemented as a file analysis request  with a possible callback request . For example, file analysis request  may provide an asynchronous mechanism for uploading single or multiple binary files  for a malware analysis of that file  or those files  to be performed by malware analysis system . If a callback request  has been submitted by client system , web services system  may call back to client system  substantially upon completion of the malware analysis of file  by malware analysis system  with a status of file .","In certain embodiments, web services module  is operable to provide for secure communication between client system  and malware analysis system , which may include authenticating a user of client system  and\/or client system . For example, client system  may provide one or more of a user name, a password, and a nonce. The user name and password may be used to authenticate client system  to web services system . The nonce may be used by web service system  to authenticate back to client system  on completion of determination of a status of file  (e.g., to provide response  to client system ). In certain embodiments, the nonce is random and not a sequence to prevent replay attacks. Web services system  also may use secure sockets layer (SSL) or any other suitable secure communication protocol for the transportation layer security, if appropriate. Certain embodiments may use one or more of digital signing of caller credentials and\/or message body and Web Services Security.","Response  may include one or more status messages. In certain embodiments, a status message may be returned for each file  submitted to web service system  for a malware analysis to be performed by malware analysis system . The following provides just one example set of status messages that may be returned by malware analysis system . Although these particular examples are described, the present disclosure contemplates malware analysis system  returning any suitable status messages, according to particular needs.\n\n","In certain embodiments, client system  may pre-filter which files  are communicated to malware analysis system  for analysis. For example, client system  may store policies that limit which types of files  are communicated to malware analysis system  for analysis. In certain embodiments, the types of files  that may be communicated to malware analysis system  for analysis may be limited by what types of files malware analysis system  is configured to analyze. In certain embodiments, client system  may simply pass files  according to its own policies, and web services module \/malware analysis system  may inform client system  if malware analysis system  is unwilling\/incapable of analyzing a particular type of file. For example, client system  may determine a file extension of file  and\/or a magic MIME type of file  and communicate these parameters as part of a call to malware analysis system  (which could then apply its own internal ingest policies to determine if it is willing to\/capable of processing the file ).","The following provides an example implementation of the web services operations that may be used in certain embodiments of the present disclosure. The various requests\/calls, outputs, and associated parameters are provided for example purposes only. Additionally, the names provided for these requests\/calls, outputs, and associate parameters are for example purposes only. Furthermore, particular parameters may be designated as required (e.g., by the web services protocol), while others may be designated as optional; however, any such indications below are merely examples. In certain embodiments, some or all of these operations are implemented by web services module .","CheckFile Operation","In certain embodiments, the status request  and associated output (e.g., response ) may be implemented using a \u201cCheckFile\u201d web services call. CheckFile may receive a list of file names, hashes, and file meta data and may check the list against storage module  (e.g., historical detection data ). If the file  has been encountered before, malware status for the file  and the results from each malware detection agent (examples of which are described below with respect to detection module  in ) including reason codes may be returned. If the file  has not be encountered, a status of UNKNOWN may be returned. Client systems  may pass files  with a status of UNKNOWN on using the AnalyzeBinaryFile operation, described below. The Checkfile web services call may be published as a SOAP action at a network address (e.g., a URL), such as http:\/\/www.website.com\/malwaredetectionsystem\/CheckFile, which is merely provided as an example.","Input: CheckFileSyncRequest","An input of the CheckFile request  may be a CheckFileSyncRequest request . An input type may be checkFileStatusInput. Example parameters for this input type may be the following:\n\n","File information may be passed as part of a CheckFile request . A fileInfo request  may be unbounded and of type fileInfo and may include any suitable combination of the following parameters:\n\n","Output: CheckFileSyncResponse","An output of the CheckFile web services call may be the CheckFileSyncResponse response . An output type may be fileStatusOutput. Example parameters for this output type may be the following:\n\n","Fault","In certain embodiments, web services system  may determine when a fault, such as a processing fault, has occurred. In certain embodiments, web service system  may use the JAVA Application Program Interface (API) for XML Web Services (JAX-WS) fault mapping to communicate the error to the caller (e.g., client system ). This may be represented by a Fault message of type Fault, which may include one or more of the following parameters:\n\n","In certain embodiments, the malware analysis request  and associated output (e.g., response ) may be implemented using a \u201cAnalyzeBinaryFile\u201d web services call. The AnalyzeBinaryFile operation may be used for asynchronous calls to web services system \/malware analysis system . The client (e.g., client system ) may send callback information (e.g., a callback URL and message id), stored in a WS-Addressing header, for web services system \/malware analysis system  to respond to once a status has been completed for file .","A replyTo field within the WS-Addressing header may be used to store the callback URL, and the messageId field may be used to store a unique ID identifying the request to the client system  upon callback. Web services system  and\/or malware analysis system  may use this unique ID in the relatesTo field when calling back to the client (e.g., client system ).","Due to the length of time that may transpire for malware analysis system  to reach a disposition of file , it may be appropriate for the receiver (e.g., application ) at the requesting client system  to be persistent. In certain embodiments, the receiver may be implemented as another web service. The WS-Addressing may be optional for services that do not request a callback. Files  received without addressing may be processed by web services system  and\/or malware analysis system , and the status may be available through the CheckFile web service call.","The AnalyzeBinaryFile web services call may be published as a SOAP action at a network address (e.g., a URL), such as http:\/\/www.website.com\/malwaredetectionsystem\/AnalayzeBinaryFile, which is merely provided as an example. The operation type of the AnalyzeBinaryFile may be request-response such that the endpoint may receive a message and send a correlated message.","Input: AnalyzeBinaryAsyncRequest","An input of the AnalyzeBinaryFile request  may be an AnalyzeFileAsync request . An input type may be analyzeBinaryFileInput. Example parameters for this input type may be the following:\n\n","One or more of these parameters may be provided by an administrator associated with malware analysis system  to services approved for calling web services system \/malware analysis system  in this manner.","A copy of file  and\/or any other suitable information (e.g., file information ) may be passed as part of a AnalyzeBinaryFile request . A fileBinary request  may be unbounded and of type fileBinary. A fileBinary request  may include a fileInfo component that may be unbounded and of type fileInfo. The fileInfo component may include any suitable combination of the following parameters:\n\n","Output: AnalyzeFileAsyncResponse","An output of the AnalyzeBinaryFile web services call may be the AnalyzeFileAsyncResponse response . An output type may be response. Example parameters for this output type may be the following:\n\n","Fault","In certain embodiments, web services system  may determine when a fault, such as a processing fault, has occurred. In certain embodiments, web service system  may use the JAX-WS fault mapping to communicate the error to the caller (e.g., client system ). This may be represented by a Fault message of type Fault, which may include one or more of the following parameters:\n\n","In certain embodiments, a subsequent response  from web services module \/malware analysis system  to an AnalyzeBinaryFile web service call from client system  may be a callback operation. In certain situations, this may not be a substantially immediate response to the AnalyzeBinaryFile web services call, but may be communicated at a later time after malware analysis system  has completed its analysis of the file  communicated in association with the AnalyzeBinaryFile request . Web services system \/malware analysis system  may call a persistent listener (e.g., application ) on client system  and pass the results of the malware analysis performed by malware analysis system  (e.g., a status of file ). The listener on client system  may be implemented as a web service and may be configured to receive a callback message from web services system \/malware analysis system . An example format for the callback message is provided below.","In certain embodiments, the callback message is listed as \u201cCallBackRequest\u201d in the WSDL. The listener being implemented on client system  may use WS-Addressing. Web services system \/malware analysis system  may either use WS-Addressing headers to identify the original request sent by client system  or the transactionID (e.g., provided by the caller (e.g., client system )). The header may include a \u201cRelatedTo\u201d tag, which may include the original MessageId sent in the WS-Addressing by client system  during the \u201cAnalyzeBinaryFile\u201d request in addition to the transactionID in the message body. Some or all of this information may be included as part of the callback information provided by client system . Details of an example callback operation are provided below.","Input: CallBackRequest","An input of the CallBackRequest request  may be a fileStatusCallBack request . An input type may be fileStatusCallBack. Example parameters for this input type may be the following:\n\n","Particular embodiments of the present disclosure may provide one or more technical advantages. Certain embodiments allow computer systems (e.g., client systems ) to access malware analysis services provided by malware analysis system  by invoking those malware detection services using a web services interface. Embodiments of the present disclosure may provide a network-accessible interface, which may be a universal interface, to malware analysis system  and its associated data repository (e.g., storage module ) of historical malware analyses (e.g., historical detection data ). Providing a web services interface for communicating with malware analysis system  may ease the use of such a system, thereby potentially encouraging its use. Communication of files  to a remote malware analysis system  for analysis may allow for more robust malware analysis to be performed than might be possible or practical with typical host-based or other local malware analysis systems. In certain embodiments, the remote malware analysis system  further provides a mechanism for a human analyst to contribute to the malware analysis of certain files , if appropriate.",{"@attributes":{"id":"p-0077","num":"0154"},"figref":"FIG. 2","b":["200","200","108","108","108","108","200","202","204","206","208","210","212"]},"Modules - may communicate between or among each other via one or more internal networks , referred to for simplicity in the singular. Internal network  facilitates wireless or wireline communication. Internal network  may communicate, for example, IP packets, Frame Relay frames, ATM cells, voice, video, data, and other suitable information between network addresses. Internal network  may include one or more LANs, RANs, MANs, WANs, mobile networks (e.g., using WiMax (802.16), WiFi (802.11), 3G, 4G, or any other suitable wireless technologies in any suitable combination), all or a portion of the global computer network known as the Internet, and\/or any other communication system or systems at one or more locations, any of which may be any suitable combination of wireless and wireline. In certain embodiments, internal network  includes a system bus. Malware analysis system  may communicate with an external network , which in certain embodiments may be substantially similar to network  of .","Modules - may be implemented using any suitable combination of hardware, firmware, and software. For example, modules - may be implemented using one or more computer systems at one or more locations. Each computer system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each computer system may include a personal computer, workstation, network computer, kiosk, wireless data port, PDA, one or more IP telephones, one or more cellular\/smart phones, one or more servers, a server pool, one or more processors within these or other devices, or any other suitable processing device. Modules - may be a stand-alone computer or may be a part of a larger network of computers associated with an entity.","Modules - may include one or more processing units and one or more memory units. Each processing unit may include one or more microprocessors, controllers, or any other suitable computing devices or resources. Each processing unit may work, either alone or with other components of system , to provide a portion or all of the functionality of its associated computer system described herein. Each memory unit may take the form of a suitable combination of volatile and non-volatile memory including, without limitation, magnetic media, optical media, RAM, ROM, removable media, or any other suitable memory component.","In certain embodiments, the implementation and\/or operation of modules - is implemented generally as follows. Ingest module  may access a file  and determine one or more tests that should be performed on file  to determine whether file  is suspected of malware. In response, detection module  may perform the test(s) that were determined by ingest module  in accordance with scheduling performed by scheduler module . Disposition module  uses the results of the tests performed by detection module  to determine whether the file  should be sent to server module  for quarantine purposes while a second analytical stage for file  is processed (e.g., at analysis console ). Further details regarding the implementation and\/or operation of modules - are described below.","Ingest module  may be operable to extract and cause to be analyzed file  accessed by malware analysis system . Ingest module  may analyze file  and determine one or more tests that should be performed on file  to determine whether file  is suspected of malware. In certain embodiments, ingest module  may be configured to determine a type of a file ingest module  receives. For example, ingest module  may examine an extension associated with the file name of file  to determine the type of the file. As another example, ingest module  may examine portions of the file content of file  to determine its type. Ingest module  may examine characters in a header of file  to determine its type. Such characters may be referred to as magic numbers or magic bits. In this manner, in certain embodiments, ingest module  may detect the correct type of file  even if the extension of the filename of file  has been removed or changed (e.g., falsified). As another example, for certain types of files  (e.g., MICROSOFT OFFICE files), ingest module  may determine the file type based on both magic number(s) and the file extension, possibly examining the magic number(s) prior to examining the file extension.","In certain embodiments, ingest module  may determine whether file  has been previously analyzed for malware. Ingest module  may use one or more techniques to determine if file  has been previously analyzed for malware. For example, ingest module  may generate one or more hashes of content of file  (such as a checksum, an MD5 hash, and\/or a SHA1 hash). These value(s) may be compared to a database containing hash values of previously analyzed files . If the hash value is found in data storage, ingest module  may determine that file  has been previously analyzed. If the hash value is not present in data storage, ingest module  may determine that file  has not been previously analyzed. In certain embodiments, ingest module  may use the name of file  and\/or its extension, as well as variations on those items, to determine if file  has been previously analyzed.","In certain embodiments, if it is determined that file  has been analyzed previously, malware detection schemes may not be applied to file ; instead, the results of the previous analysis of file  may be determined using a database that contains results of a previous analysis of file . If the results indicate that file  is known not to be malware, then the analysis of file  may end. If it is determined that file  was previously determined to be malware, then it may be determined that file  should be quarantined. If it is determined that file  has been previously received and is currently being analyzed (e.g., possibly including review by human analysts associated with analysis console ), then action may be taken once the outcome of the ongoing analysis is known. In certain embodiments, this ability to check whether a file  previously has been analyzed previously may allow for more efficient use of the resources that perform the malware detection schemes on the files  and may reduce the workload of a machine and\/or human analyst.","While in this example, ingest module  is described as generating the information (e.g., the one or more hashes) used to determine whether file  has been previously analyzed, in certain embodiments, the sender of file  (e.g., client system  and\/or processing system ) may generate this information and communicate this information to malware analysis system  (e.g., to ingest module ). For example, prior to or in addition to sending the actual file  to malware analysis detection system , the sender of file  may send this information to malware analysis system  so that malware analysis system  can determine whether file  previously has been analyzed for malware. If malware analysis system  determines that file  has not been analyzed previously for malware, then (if file  was not sent previously) malware analysis system  may request that the sender send the actual file  for analysis.","In certain embodiments, ingest module  may be used to determine whether file  should undergo malware detection and\/or which malware detection schemes should be applied. For example, ingest module  may determine that a file  received by ingest module  is a plain text file. Ingest module  then may retrieve one or more policies associated with plain text files. A retrieved policy may indicate that plain text files are not to be analyzed for malware. As a result, the plain text file  may be ignored. As another example, ingest module  may determine that a file  is a document created by the MICROSOFT WORD application. Ingest module  may then retrieve one or more policies associated with MICROSOFT WORD documents. Ingest module  may examine the retrieved policy or policies and determine that the received file  should be analyzed for malware. Ingest module  may also examine the retrieved policy or policies and determine the malware detection schemes that should be applied to the MICROSOFT WORD document. Ingest module  then may create and store entries in data storage consistent with the determined malware detection schemes.","Scheduler module , in certain embodiments, may determine the order in which malware detection processes are performed. Scheduler module  may assign processes to various computing resources of malware analysis system  using any suitable method. For example, scheduler module  may use a first-in-first-out (FIFO) algorithm to assign processes. Processes may also be prioritized. For example, scheduler module  may use a FIFO approach to schedule jobs initially, but it may be determined to prioritize one job over another in response to results provided by the detection nodes. Schedule policies may be used by scheduler module  to determine how to schedule jobs and how to prioritize jobs. Priorities for jobs, in certain embodiments, may also be determined based on the context associated with the file . For example, if the file  undergoing analysis was part of an e-mail attachment, it may be prioritized higher than other files .","In certain embodiments, policies used by scheduler module  may be modified when a new malware detection scheme is added. Information may be entered regarding how to apply the malware detection scheme. For example, such information may be entered using a tabbed interface, a wizard-style interface, or other interfaces for entering information. The information entered may include how jobs should be prioritized, the context associated with file , which malware detection nodes  are involved in implementing the malware detection scheme, and\/or other items associated with applying a malware detection scheme.","Detection module , in certain embodiments, may be operable to perform the test(s) that were determined by ingest module  in accordance with scheduling performed by scheduler module . In certain embodiments, detection module  may conform to an interface standard for applying malware detection. Such an interface may include standards for one or more of the following: specifying file  (including, possibly, a URL) that is to be analyzed configuration parameters for applying the detection scheme, time limit for completing the analysis, format of results, specifying the reason for indicating that an analyzed item is suspect, providing log files, and other suitable items involved with applying malware detection schemes.","In certain embodiments, having such an interface may be advantageous because it may allow policies to call for the application of malware detection schemes without having to give precise parameters based on the configuration of the detection node. In this manner, in certain embodiments, new detection schemes may be added to the system without needing to recode various parts of the system since the detection node applying the new malware detection scheme would conform to the interface standard. For example, to add a new malware detection scheme, the detection node applying the new malware detection seem may be configured to conform to the interface standard by being configured to receive files  for analysis in the same or similar manner as other configuration nodes applying other malware detection schemes. In addition, for example, the configuration node applying the new malware detection scheme may be configured to report the results of applying the new malware detection scheme in the same or similar manner as other configuration nodes applying other malware detection schemes. This may allow malware analysis system  to adapt to new malware detection schemes.","Detection module  may be implemented on a variety of types of hardware. For example, detection module  may be configured in a blade architecture or on physical hosts. Detection module  may be configured utilizing clusters or other suitable distributed computing architectures. Detection module  may use virtualization and\/or may include virtual machines. Detection module  may be used to apply a variety of malware detection schemes to a file  (which, in certain embodiments, may include one or more URLs). In certain embodiments, detection module  may be specialized such that malware analysis system  may be configured to apply a type of malware detection scheme. For example, detection module  may be configured to apply behavior-based malware detection schemes and\/or metadata-based detection schemes when metadata of file  is analyzed. In yet another example, detection module  may be configured to apply signature-based detection schemes to files . As another example, detection module  may also apply classification-based detection schemes. As described above, detection module  may be configured to apply other forms of detection schemes that conform to an interface to facilitate the incorporation of new or different detection schemes.","Disposition module , in certain embodiments, may be operable to use the results of the tests performed by detection module  to determine what should be done with the file(s) . In certain embodiments, disposition module  may access the one or more results received from detection module  (which may include a number of malware detection agents) and determine a status of file  based on those results. In some cases, disposition module  may characterize the file  as being suspected of malware. In response, malware analysis system  may send information corresponding to the file(s)  and\/or actual content of the file(s)  (e.g., the file  itself) for further review at analysis console . In certain embodiments, disposition module  may respond to the results of detection module  regardless of whether it sends the file(s)  to analysis console . For example, disposition module  may determine that the file(s)  should be quarantined and send the file  to server module  to quarantine the file . In certain embodiments, disposition module  may determine that the file(s)  are not malware and may perform suitable corresponding actions. For example, disposition module  may indicate that it would be appropriate to release for delivery a message to which the analyzed file(s)  were attached, in response to the determination by disposition module  that the file(s)  are not malware.","Analysis console , in certain embodiments, is operable to facilitate malware analysis for files  that have been identified (e.g., by disposition module  or another suitable component of malware analysis system ) as requiring further malware analysis. In certain embodiments, analysis console  may be operable to access information generated by disposition module  or another suitable component of malware analysis system , and to facilitate the propagation of a final disposition, if appropriate. The information propagated (e.g., for communication to another suitable component of malware analysis system  and\/or to client system ) may include malware analysis outputs generated by analysis console , such that the recipient may benefit from the results of malware analysis performed using analysis console . In certain embodiments, the output of analysis console  is a status of file , which in certain embodiments may override any status determined by disposition module . Additional details of an example analysis console  are described below with respect to .","Server module  may include, for example, a file server, a domain name server, a proxy server, a web server, a computer workstation, or any other tangible device and associated logic operable to communicate with modules , , , , and\/or  through network . Server module  may execute with any of the well-known MS-DOS, PC-DOS, OS-2, MAC-OS, WINDOWS\u2122, UNIX, or other appropriate operating systems, including future operating systems. In certain embodiments, server module  may include one or more of the following in any suitable combination: a processor, data storage, a network interface, input functionality, and output functionality.",{"@attributes":{"id":"p-0095","num":"0172"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["300","300","210","300","302","304","306","308","310","312","314","302","304","306","308","310","312","314","302","304","306","308","310","312","314","302","304","306","308","310","312","314"]},"In certain embodiments, workflow manager  may determine a workflow. A workflow is an ordered list of one or more tasks related to malware analysis. Execution of a workflow starts with a task in the list. Upon completion of a task, the active task calls the subsequent task in the ordered list using, for example, a defined API. When the final task of the workflow finishes, the workflow is complete. Certain workflows may facilitate malware analysis by a human analyst and\/or by various analysis modules of analysis console . The information analyzed may correspond to a file  and\/or may include actual content of the file .","In certain instances, the information to be analyzed may be presented to a human analyst for review based on a prior characterization of the file . For example, if malware analysis system  characterizes the file  as being suspected of malware, then a human analyst may review the file  to determine if it is in fact malware. As another example, if the file  is determined to be malware rather than merely to be suspected malware, a human analyst may review the file  to learn more about the malware in the file  and\/or to start an incident response review (e.g., to clean up the file ).","In such and other scenarios, workflow manager  may determine a workflow associated with reviewing the file . In certain embodiments, workflow manager  may generate a set of tasks to be performed by a human analyst reviewing the file  based on a variety of factors. Such factors could include the type of file  being reviewed and the characterization of the file  by malware analysis system . Other factors may include whether the system is operating in a passive, active, a hybrid passive\/active mode, or another mode. For example, if operating in an active mode, a determination that the file  is suspected malware may invoke an advanced malware analysis workflow to be followed by a human analyst. As another example, if the file  is determined to be known malware, then workflows associated with cleaning up the environment(s) the file  has been in as well as other incident response workflows (e.g., notifying a user or an administrator) may be determined. Other suitable workflows may be generated based on these or other suitable factors.","In certain embodiments, workflow manager  may, automatically perform certain tasks to facilitate the review of the file  by the human analyst. For example, it may be determined that for a file  to be properly reviewed by a human analyst, all strings in the file  should be extracted. Workflow manager  may automate this extraction procedure. Workflow manager  may also provide a priority associated with the review of the file . For example, if it is determined that a file  has a higher probability of containing malware, then a higher priority may be assigned to the review of the file . Workflow manager  may also provide a display that enables the human analyst to review the workflow, the file  being analyzed, and\/or information pertaining to that file .","Output generator , in certain embodiments, may be operable to generate a malware analysis output (a portion or all of which may be or may be included with response ). In certain embodiments, the output may include an identifier of the file  or files  analyzed. For example, an identifier might include a hash of all or a portion of a file  analyzed at analysis console . The hash may be at least substantially equivalent to a hash generated by the ingest module  of the node  requesting the file  to be further analyzed for malware. Certain outputs generated by output generator  may include an indication of whether the file  (or files ) analyzed at output generator  contain malware.","Memory  and data storage  may take the form of a suitable combination of volatile and non-volatile memory including, without limitation, magnetic media, optical media, RAM, ROM, removable media, or any other suitable memory component. Additionally, all or part of memory  and\/or data storage  could reside locally within analysis console  or could reside at a location external but accessible to analysis console . Additionally, portions or all of memory  and data storage  may be combined, if appropriate.","Processor  may include one or more microprocessors, controllers, or any other suitable computing devices or resources. Each processor may work, either alone or with other components of analysis console , to provide a portion or all of the functionality of its associated computer system described herein. In certain embodiments, processor  may comprise the primary element or elements executing or realizing various logic-based functions, including, for example, the functions of workflow manager  and an output generator .","I\/O functionality  may comprise, for example, any communication method of analysis console  (e.g., from an image buffer to a display). In certain embodiments, input functionality may comprise, for example, the receiving signals or data by analysis console . In other embodiments, output functionality may comprise, for example, the communication of signals or data by analysis console. These terms may also refer to part of an action, such as, for example, to \u201cperform I\/O\u201d may involve performing an input and\/or output operation. In some cases, one or more communication devices of analysis console  may be used to implement both input and output functionality.","Interface  may comprise, for example, any tangible device(s) that may be used (e.g., by a person, or by another device or system) to communicate with analysis console . For example, keyboards and mice may be considered input interfaces  of some analysis consoles , while monitors and printers may be considered output interfaces of some analysis consoles .",{"@attributes":{"id":"p-0105","num":"0182"},"figref":["FIGS. 4A-4B","FIGS. 4A-4B","FIG. 1","FIGS. 4A-4B"],"b":["122","100","100","102","106","108","124","116","108"]},"At step , client system  (e.g., application ) accesses a file , possibly stored in memory  of client system . The present disclosure contemplates file  being made accessible to application  in any suitable manner. At step , application  may determine whether to initiate communication of file  for a remote malware analysis of file  to be performed. For example, application  may determine whether to communicate file , file information , and\/or other suitable information to malware analysis system  for a remote malware analysis to be performed on file . If at step  application  determines not to initiate communication of file  and\/or other suitable information to malware analysis system , then the method may return to step  for application  to access another file  (e.g., at that time or at a later time). If at step  application  determines to initiate communication of file  and\/or other information to malware analysis system  for a remote malware analysis of file  to be performed by malware analysis system , then the method may proceed to step .","At step , application  may determine file information  associated with file . Example file information  is described above with reference to . At step , application  may communicate a status request  to web services system  (e.g., to web services module ). For example, application  may communicate status request  to web services system  to determine whether a status for file  has already been determined by malware analysis system . In certain embodiments, the status request  communicated at step  may be considered a preliminary malware analysis request  that may be used determine whether malware analysis system  already has performed (or currently is performing) a malware analysis of file . This may filter traffic (e.g., file analysis requests ) that actually are delivered to malware analysis system  for a malware analysis to be performed by first determining whether malware analysis system  already has determined (or currently is determining) a malware status for the file .","At step , web services module  may receive the status request  communicated by application . At step , web services module  may determine whether a malware status of file  is known. Web services module  may determine whether a malware status of file  is known in any suitable manner. In certain embodiments, to determine whether a malware status of file  is known, web service module  may access file information  included in status request  and compare the accessed file information  to information stored in storage module  to determine whether a malware status of file  is known. As a more particular example, web services module  may access a hash (or other identifier) of file  included in status request  and compare the hash (or other identifier) to historical detection data  (e.g., stored in storage module ) to determine whether historical detection data  includes a status indexed by a hash (or other identifier) corresponding to the hash (or other identifier) of file .","If at step  web services module  determines that a malware status of file  is known, then at step  web services module  may communicate a response  to client system  that includes the malware status of file . For example, web services module  may determine that a malware analysis of file  has already been performed by malware analysis system  or that a malware analysis of file  currently is being performed by malware analysis system . In response to either of these determinations (or another appropriate determination), web services module  may notify client system  not to send file  to malware analysis system . This notification may be a part of or separate from the response  that includes the malware status of file .","If at step  web services module  determines that a malware status of file  is not known, then at step  web services module  may communicate a response  to client system  indicating that the malware status of file  is not known. For example, web services module  may determine that a malware analysis of file  has not already been performed by malware analysis system  or that a malware analysis of file  is not currently being performed by the malware analysis system . In response to either of these determinations (or another appropriate determination), web services module  may notify client system  to send file  to malware analysis system  (e.g., via web services system  if appropriate).","At step , client system  (e.g., application ) may communicate a file analysis request  that includes file  for a remote malware analysis to be performed on the file  by malware analysis system . For example, in response to the indication that the malware status of file  is not known (i.e., at step ), application  may communicate the file  to remote malware system  (e.g., via web services system ) so that remote malware analysis system  can perform an analysis of the file . In other words, the malware analysis request  that includes file  may be communicated by client system  in response to the notification sent by web services module  for client system  to send file  to malware analysis system .","At step , client system  (e.g., application ) may communicate a callback request  to web services system . Callback request  may include callback information , requesting that web services system  and\/or malware analysis system  return a response  including the results of the malware analysis of file  once the results (e.g., a status) are known. In certain embodiments, when a callback request  is made, this response  may be communicated automatically by malware analysis system  and\/or web services system  without further prompting by client system . Although described separately, the present disclosure contemplates the file analysis request  communicated at step  and the callback request  communicated at step  to be communicated as part of the same request . For example, the request  for remote malware analysis system  to perform an analysis of file  (the file analysis request including file ) may also include callback information .","At step , web services system  and\/or malware analysis system  may receive the file analysis request  including file , and at step  web services system  and\/or malware analysis system  may store file  and any other suitable information of file analysis request . For example, malware analysis system  may receive file analysis request  via web services system , and web services system  and\/or malware analysis system  may store a portion or all of file analysis request  in storage module . The stored information may include file , file information , and any other suitable information.","At step , web services system  and\/or malware analysis system  may receive callback request , callback request  including callback information , and at step  web services system  and\/or malware analysis system  may store callback information . For example, malware analysis system may receive callback request  via web services system , and web services system and\/or malware analysis system  may store a portion or all of callback request  in storage module . The stored information may include callback information  and any other suitable information (e.g., a flag or other indication that may cause web services system  and\/or malware analysis system  to automatically return a result of a malware analysis of file  once known.","At step , web services system  and\/or malware analysis system  may initiate a malware analysis by malware analysis system  of file  for malware. For example, web services module  may forward file analysis request  to malware analysis system  to cause malware analysis system  to analyze file  for malware, and malware analysis system  may analyze file  in response to this file analysis request  (e.g., according to any queuing or other scheduling configurations of malware analysis system ). The present disclosure contemplates malware analysis system  performing this malware analysis of file  in any suitable manner according to particular needs. A particular example implementation of malware analysis system  is described above with reference to .","At step , web services system  and\/or malware analysis system  may determine whether a result of the malware analysis of file  is known. For example, when malware analysis system  completes an analysis of file  (e.g., by determining a malware status of file ), malware analysis system  may store the result (e.g., the determined malware status of file ) in storage module  (e.g., as part of historical detection data ) and may inform web services system  that the malware analysis of file  is complete (or of any other suitable status of the malware analysis of file  by malware analysis system ). Additionally or alternatively, in certain embodiments, web services system  may check at any suitable interval whether a result of the malware analysis of file  has been determined. If after a predetermine threshold a result of the malware analysis of file  is still not completed, web services system  may return a status update to client system  using callback information , informing client system  that a result of a malware analysis is not yet known but that the analysis is ongoing (or has been discontinued, if appropriate).","If at step  web services module  and\/or malware analysis system  determines that a result of the malware analysis of file  is known, then at step  web services system  and\/or malware analysis system  may communicate a response  to client system  and the method may end. For example, as described above at step , when malware analysis system  completes an analysis of file  (e.g., by determining a malware status of file ), malware analysis system  may store the result (e.g., the determined malware status of file ) in storage module  (e.g., as part of historical detection data ) and may inform web services system  that the malware analysis of file  is complete (or of any other suitable status of the malware analysis of file  by malware analysis system ). This informing of web services system  may be a response  communicated by malware analysis system  to be passed on by web services system  to client system  according to the client system's callback information . The communicated response  may include the determined malware status of file . For example, response  may include a disposition resulting from the malware analysis performed on file , a recommended action, and\/or any other suitable information. For example, a result  may conclusively indicate that the file  is known to contain malware, that the file  is suspected of malware (though such detection may not conclusively indicate that file  is known to contain malware), that file  is not malware, and\/or any other suitable result of the malware analysis performed by malware analysis system .","If at step  malware analysis system  and\/or web services system  determines that a result of the malware analysis of file  is not known, then at step  web services system  and\/or malware analysis system  may determine whether a timeout has occurred. Such a timeout may include any suitable circumstance that results in the malware analysis of file  by malware analysis system  becoming stalled beyond an acceptable time period. If at step  web services system  and\/or malware analysis system  determine that a timeout has occurred, then at step  web services system  and\/or malware analysis system  may return an error and the method may end. For example, web services system  may notify (via a response ) client system  that an error has occurred, potentially requesting that client system  resubmit the file analysis request  or another suitable request .","Although the method in  is illustrated as ending after step \/, it will be understood that the method may be performed substantially continuously (or at any other suitable interval) as client system  continues to monitor for files  for which a malware analysis is appropriate and as those files  or other related information is processed by system .",{"@attributes":{"id":"p-0120","num":"0197"},"figref":["FIGS. 5A-5B","FIGS. 5A-5B","FIG. 1"],"b":["122","100","100"]},"In the example method of , rather than submitting a callback request for receiving a result of the malware analysis, client system  submits a status request after submitting a file  to malware analysis system  to request the result of the malware analysis on the file . However, it should be understood that the present disclosure contemplates client system  using any suitable combination of callback requests and query requests. For example, client system  may submit a file  to malware analysis system  for a malware analysis to be performed on the file, along with callback information that the malware analysis system  may use to communicate a response to client system . Additionally, client system  may submit one or more query requests to malware analysis system  while waiting for the call back from malware analysis system , if appropriate.","At step , client system  (e.g., application ) accesses a file , possibly stored in memory  of client system . The present disclosure contemplates file  being made accessible to application  in any suitable manner. At step , application  may determine whether to initiate communication of file  for a remote malware analysis of file  to be performed. For example, application  may determine whether to communicate file  and\/or other suitable information to malware analysis system  for a remote malware analysis to be performed on file . If at step  application  determines not to initiate communication of file  and\/or other suitable information to malware analysis system , then the method may return to step  for application  to access another file  (e.g., at that time or at a later time). If at step  application  determines to initiate communication of file  and\/or other information to malware analysis system  for a remote malware analysis of file  to be performed by malware analysis system , then the method may proceed to step .","At step , client system  (e.g., application ) may determine file information  associated with file . Example file information  is described above with reference to . At step , application  may communicate a status request  to web services system  (e.g., to web services module ). For example, application  may communicate status request  to web services system  to determine whether a status for file  has already been determined by malware analysis system . In certain embodiments, the status request  communicated at step  may be considered a preliminary malware analysis request  that may be used determine whether malware analysis system  already has performed (or currently is performing) a malware analysis of file . This may filter traffic (e.g., file analysis requests ) that actually are delivered to malware analysis system  for a malware analysis to be performed by first determining whether malware analysis system  already has determined (or currently is determining) a malware status for the file .","At step , web services module  may receive the status request  communicated by application . At step , web services module  may determine whether a malware status of file  is known. Web services module  may determine whether a malware status of file  is known in any suitable manner. In certain embodiments, to determine whether a malware status of file  is known, web service module  may access file information  included in status request  and compare the accessed file information  to information stored in storage module  to determine whether a malware status of file  is known. As a more particular example, web services module  may access a hash (or other identifier) of file  included in status request  and compare the hash (or other identifier) to historical detection data  (e.g., stored in storage module ) to determine whether historical detection data  includes a status indexed by a hash (or other identifier) corresponding to the hash (or other identifier) of file .","If at step  web services module  determines that a malware status of file  is known, then at step  web services module  may communicate a response  to client system  that includes the malware status of file . For example, web services module  may determine that a malware analysis of file  has already been performed by malware analysis system  or that a malware analysis of file  currently is being performed by malware analysis system . In response to either of these determinations (or another appropriate determination), web services module  may notify client system  not to send file  to malware analysis system . This notification may be a part of or separate from the response  that includes the malware status of file .","If at step  web services module  determines that a malware status of file  is not known, then at step  web services module  may communicate a response  to client system  indicating that the malware status of file  is not known. For example, web services module  may determine that a malware analysis of file  has not already been performed by malware analysis system  or that a malware analysis of file  is not currently being performed by the malware analysis system . In response to either of these determinations (or another appropriate determination), web services module  may notify client system  to send file  to malware analysis system  (e.g., via web services system  if appropriate).","At step , client system  (e.g., application ) may communicate a file analysis request  that includes file  for a remote malware analysis to be performed on the file  by malware analysis system . For example, in response to the indication that the malware status of file  is not known (i.e., at step ), application  may communicate the file  to remote malware system  (e.g., via web services system ) so that remote malware analysis system  can perform an analysis of the file . In other words, the malware analysis request  that includes file  may be communicated by client system  in response to the notification sent by web services module  for client system  to send file  to malware analysis system .","At step , web services system  and\/or malware analysis system  may receive the file analysis request  including file , and at step  web services system  and\/or malware analysis system  may store file  and any other suitable information of file analysis request . For example, malware analysis system  may receive file analysis request  via web services system , and web services system  and\/or malware analysis system  may store a portion or all of file analysis request  in storage module . The stored information may include file , file information , and any other suitable information.","At step , web services system  and\/or malware analysis system  may initiate a malware analysis by malware analysis system  of file  for malware. For example, web services module  may forward file analysis request  to malware analysis system  to cause malware analysis system  to analyze file  for malware, and malware analysis system  may analyze file  in response to this file analysis request  (e.g., according to any queuing or other scheduling configurations of malware analysis system ). The present disclosure contemplates malware analysis system  performing this malware analysis of file  in any suitable manner according to particular needs. A particular example implementation of malware analysis system  is described above with reference to .","At step , client system  (e.g., application ) may access a portion or all of file information  determined for file . Example file information  is described above with reference to . At step , client system  (e.g., application ) may communicate a status request  to web services system  (e.g., to web services module ). For example, application  may communicate status request  to web services system  to determine whether a status for file  has been determined by malware analysis system . This status request  may be sent by client system  at any suitable regular or irregular interval, according to particular needs. In certain embodiments, the status request  communicated at step  may be considered a follow-up malware analysis request  that may be used determine whether malware analysis system  has performed (or currently is performing) the malware analysis of file  requested at step . For example, after submitting a malware analysis request  requesting that malware analysis system  perform a malware analysis of a file  (or at any other suitable time), client system  may communicate a status request  to request of malware analysis system  and\/or web services system  a current status of the malware analysis of file . In certain embodiments, the status request  communicated at step  is substantially similar to the status request  communicated at step .","At step , web services system  and\/or malware analysis system  may receive the status request  communicated by client system . For example, web services module  may receive, via network  and subsequent to receiving the file analysis request  for file  (the file analysis request  including file ), the status request  communicated by client system , the status request  including file information  (e.g., file identification information) for file .","At step , web services system  may determine whether the malware status of file  is known. Web services module  may determine whether a malware status of file  is known in any suitable manner. In certain embodiments, to determine whether a malware status of file  is known, web service module  may access file information  included in status request  and compare the accessed file information  to information stored in storage module  to determine whether a malware status of file  is known. As a more particular example, web services module  may access a hash (or other identifier) of file  included in status request  and compare the hash (or other identifier) to historical detection data  (e.g., stored in storage module ) to determine whether historical detection data  includes a status indexed by a hash (or other identifier) corresponding to the hash (or other identifier) of file .","If at step  web services module  determines that a malware status of file  is known, then at step  web services module  may communicate a response  to client system  that includes the determined malware status of file . For example, web services module  may determine that a malware a malware analysis of file  has been completed by malware analysis system  or that a malware analysis system of file  currently is being performed by malware analysis system . In response to either of those determinations (or another appropriate determination), web services module  may communicate response  for file  to client system . Response  may include a disposition resulting from the malware analysis performed on file , a recommended action, and\/or any other suitable information. For example, a result  may conclusively indicate that the file  is known to contain malware, that the file  is suspected of malware (though such detection may not conclusively indicate that file  is known to contain malware), that file  is not malware, and\/or any other suitable result of the malware analysis performed by malware analysis system .","If at step  web services module  determines that a result (e.g., a malware status) of the malware analysis of file  is not known, then at step  web services module  may determine whether a timeout has occurred. Such a timeout may include any suitable circumstance that results in the malware analysis of file  by malware analysis system  becoming stalled beyond an acceptable time period. If at step  web services system  and\/or malware analysis system  determines that a timeout has occurred, then at step  web services system  and\/or malware analysis system  may return an error and the method may end. For example, web services system  may notify (via a response ) client system  that an error has occurred, potentially requesting that client system  resubmit the file analysis request  or another suitable request . If at step  web services system  and\/or malware analysis system  determines that a timeout has not occurred, then at step  web service module  may communicated a response  to client system  indicating that the malware analysis of file  has not completed and the malware status of file  is not yet known. The method may end.","Although the method in  is illustrated as ending after step \/\/, it will be understood that the method may be performed substantially continuously (or at any other suitable interval) as client system  continues to monitor for files  for which a malware analysis is appropriate and as those files  or other related information is processed by system .","Although the methods of  have been described separately, the present disclosure contemplates client system  providing a callback request and querying for status, if appropriate. For example, client system  may be configured to submit a callback request with a malware detection request, and to follow up with a query request if client system  does not receive a call back from web services system  within a predefined time period.","Regarding the methods described above with respect to  and A-B, web services module  or another suitable component of system  may authenticating a user of client system  and\/or client system . For example, client system  may provide one or more of a user name, a password, and a nonce. The present disclosure contemplates the use of this or another suitable authentication technique at one or more points throughout the method described below. For example, this authentication may be performed once when client system  initially establishes a connection to malware analysis system  using web services system . Additionally or alternatively, as another example, this authentication may be performed each time client system  submits a request or other communication using web services system .",{"@attributes":{"id":"p-0138","num":"0215"},"figref":"FIG. 6","b":["600","600","600","100","600"]},"Computer system  may have one or more input devices  (which may include a keypad, keyboard, mouse, stylus, or other input devices), one or more output devices  (which may include one or more displays, one or more speakers, one or more printers, or other output devices), one or more storage devices , and one or more storage media . An input device  may be external or internal to computer system . An output device  may be external or internal to computer system . A storage device  may be external or internal to computer system . A storage medium  may be external or internal to computer system .","System bus  couples subsystems of computer system  to each other. Herein, reference to a bus encompasses one or more digital signal lines serving a common function. The present disclosure contemplates any suitable system bus  including any suitable bus structures (such as one or more memory buses, one or more peripheral buses, one or more a local buses, or a combination of the foregoing) having any suitable bus architectures. Example bus architectures include, but are not limited to, Industry Standard Architecture (ISA) bus, Enhanced ISA (EISA) bus, Micro Channel Architecture (MCA) bus, Video Electronics Standards Association local (VLB) bus, Peripheral Component Interconnect (PCI) bus, PCI-Express bus (PCI-E), and Accelerated Graphics Port (AGP) bus.","Computer system  includes one or more processors  (or central processing units (CPUs)). A processor  may contain a cache  for temporary local storage of instructions, data, or computer addresses. Processors  are coupled to one or more storage devices, including memory . Memory  may include RAM  and ROM . Data and instructions may transfer bi-directionally between processors  and RAM . Data and instructions may transfer uni-directionally to processors  from ROM . RAM  and ROM  may include any suitable computer-readable storage media.","Computer system  includes fixed storage  coupled bi-directionally to processors . Fixed storage  may be coupled to processors  via storage control unit . Fixed storage  may provide additional data storage capacity and may include any suitable computer-readable storage media. Fixed storage  may store an operating system (OS) , one or more executables (EXECs) , one or more applications or programs , data  and the like. Fixed storage  is typically a secondary storage medium (such as a hard disk) that is slower than primary storage. In appropriate cases, the information stored by fixed storage  may be incorporated as virtual memory into memory . In certain embodiments, fixed storage  may include network resources, such as one or more storage area networks (SAN) or network-attached storage (NAS).","Processors  may be coupled to a variety of interfaces, such as, for example, graphics control , video interface , input interface , output interface , and storage interface , which in turn may be respectively coupled to appropriate devices. Example input or output devices include, but are not limited to, video displays, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styli, voice or handwriting recognizers, biometrics readers, or computer systems. Network interface  may couple processors  to another computer system or to network . Network interface  may include wired, wireless, or any combination of wired and wireless components. Such components may include wired network cards, wireless network cards, radios, antennas, cables, or any other appropriate components. With network interface , processors  may receive or send information from or to network  in the course of performing steps of certain embodiments. Certain embodiments may execute solely on processors . Certain embodiments may execute on processors  and on one or more remote processors operating together.","In a network environment, where computer system  is connected to network , computer system  may communicate with other devices connected to network . Computer system  may communicate with network  via network interface . For example, computer system  may receive information (such as a request or a response from another device) from network  in the form of one or more incoming packets at network interface  and memory  may store the incoming packets for subsequent processing. Computer system  may send information (such as a request or a response to another device) to network  in the form of one or more outgoing packets from network interface , which memory  may store prior to being sent. Processors  may access an incoming or outgoing packet in memory  to process it, according to particular needs.","Certain embodiments involve one or more computer-storage products that include one or more tangible, computer-readable storage media that embody software for performing one or more steps of one or more processes described or illustrated herein. In certain embodiments, one or more portions of the media, the software, or both may be designed and manufactured specifically to perform one or more steps of one or more processes described or illustrated herein. Additionally or alternatively, one or more portions of the media, the software, or both may be generally available without design or manufacture specific to processes described or illustrated herein. Example computer-readable storage media include, but are not limited to, compact discs (CDs) (such as CD-ROMs), field-programmable gate arrays (FPGAs), floppy disks, optical disks, hard disks, holographic storage devices, integrated circuits (ICs) (such as application-specific ICs (ASICs)), magnetic tape, caches, programmable logic devices (PLDs), RAM devices, ROM devices, semiconductor memory devices, and other suitable computer-readable storage media. In certain embodiments, software may be machine code which a compiler may generate or one or more files containing higher-level code which a computer may execute using an interpreter.","As an example and not by way of limitation, memory  may include one or more tangible, computer-readable storage media embodying software and computer system  may provide particular functionality described or illustrated herein as a result of processors  executing the software. Memory  may store and processors  may execute the software. Memory  may read the software from the computer-readable storage media in mass storage device  embodying the software or from one or more other sources via network interface . When executing the software, processors  may perform one or more steps of one or more processes described or illustrated herein, which may include defining one or more data structures for storage in memory  and modifying one or more of the data structures as directed by one or more portions the software, according to particular needs.","In certain embodiments, the described processing and memory elements (such as processors  and memory ) may be distributed across multiple devices such that the operations performed utilizing these elements may also be distributed across multiple devices. For example, software operated utilizing these elements may be run across multiple computers that contain these processing and memory elements. Other variations aside from the stated example are contemplated involving the use of distributed computing.","In addition or as an alternative, computer system  may provide particular functionality described or illustrated herein as a result of logic hardwired or otherwise embodied in a circuit, which may operate in place of or together with software to perform one or more steps of one or more processes described or illustrated herein. The present disclosure encompasses any suitable combination of hardware and software, according to particular needs.","Although the present disclosure describes or illustrates particular operations as occurring in a particular order, the present disclosure contemplates any suitable operations occurring in any suitable order. Moreover, the present disclosure contemplates any suitable operations being repeated one or more times in any suitable order. Although the present disclosure describes or illustrates particular operations as occurring in sequence, the present disclosure contemplates any suitable operations occurring at substantially the same time, where appropriate. Any suitable operation or sequence of operations described or illustrated herein may be interrupted, suspended, or otherwise controlled by another process, such as an operating system or kernel, where appropriate. The acts can operate in an operating system environment or as stand-alone routines occupying all or a substantial part of the system processing.","Although the present disclosure has been described with several embodiments, diverse changes, substitutions, variations, alterations, and modifications may be suggested to one skilled in the art, and it is intended that the disclosure encompass all such changes, substitutions, variations, alterations, and modifications as fall within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present disclosure and its advantages, reference is made to the following descriptions, taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 4A-4B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
