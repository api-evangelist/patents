---
title: Manager component for checkpoint procedures
abstract: A manager component of an apparatus in one example handles one or more checkpoint procedures for one or more software components of a distributed software application that runs within a plurality of executables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08181162&OS=08181162&RS=08181162
owner: Alcatel Lucent
number: 08181162
owner_city: Paris
owner_country: FR
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application contains subject matter that is related to the subject matter of the following applications, which are assigned to the same assignee as this application. The below-listed applications are hereby incorporated herein by reference in their entireties.\n\n","The invention relates generally to distributed software applications and more particularly to management of distributed software applications.","In known distributed software applications, software components are distributed among a plurality of executables (i.e., software capsules or software entities). Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. The software components often store state information, for example, a checkpoint, to reduce recovery time of a failed software component. In known distributed software applications, the software components individually manage checkpoints and their associated checkpoint procedures.","As one shortcoming, the software developer must create extra software within the first and second executables to perform the checkpoint procedures. Thus, a need exists to alleviate software components of the responsibility of handling checkpoint procedures.","In one embodiment, there is provided an apparatus comprising a manager component, for a distributed software application, that handles one or more checkpoint procedures for one or more software components of a distributed software application that runs within a plurality of executables.","In another embodiment, there is provided a method for establishing a communication channel for a software component of a distributed software application between the software component and a checkpoint destination; receiving a checkpoint with state information from the software component; and sending the checkpoint to the checkpoint destination through employment of the communication channel.","In yet another embodiment, there is provided an apparatus comprising a high availability manager component of a high availability infrastructure for a distributed software application that comprises a plurality of software components. One software component of the plurality of software components comprises application software and management support software. The application software performs a portion of functionality of the distributed software application. The management support software comprises a portion of the high availability infrastructure. The high availability manager component and the management support software cooperate to handle one or more checkpoint procedures for the one software component of the plurality of software components.","Turning to , an apparatus  in one example comprises a distributed software application  and one or more management infrastructures . The distributed software application  represents a software application divided among a plurality of executables (i.e., software capsules or software entities). For example, the distributed software application  comprises a plurality of executables , , ,  and . The distributed software application  may run on a single central processing unit (\u201cCPU\u201d) or may be divided between multiple CPUs. For example, the executable  may run on a processor  and the executable  may run on a processor .","The executables , , ,  and  comprise one or more software components , , , , ,  and  of the distributed software application , as described herein. For example, the executable  encapsulates the software components  and  and the executable  encapsulates the software component . Within each of the executables , , ,  and  may be tens, hundreds, or even thousands of other software components (e.g., analogous to the software components , , , , ,  and ).","The distributed software application  comprises a plurality of software components, for example, the software components , , , , ,  and . The software components , , , , ,  and  represent software sub-entities of the executables , , ,  and . For example, the software components , , , , ,  and  represent logical software blocks and\/or software objects. The software components  and  in one example are developed independently and then put together within the executable . For example, the software components  and  are compiled into the executable . The distributed software application  may provide any functionality for a computer system. The distributed software application  in one example comprises a call processing software application. For example, the distributed software application  sets up and\/or tears down telecommunication sessions in a telecommunication network.","The management infrastructure  performs one or more management procedures for the distributed software application . For example, the management infrastructure  provides a reusable software framework for one or more management procedures. For example, the management infrastructure  handles one or more of starting, stopping, initializing, and monitoring the distributed software application , detecting failures of the distributed software application , recovering the distributed software application , propagating state changes about the distributed software application , establishing communication channels between the software components , , , , ,  and , and the like.","The management infrastructure  in one example comprises one or more manager components , one or more executable managers  and  and\/or one or more management support components . The management infrastructure  may run on one or more of the processors , , and\/or a remote processor (not shown). The manager component  in one example handles startup, shutdown, initialization, failure detection, recovery, and other functions for the distributed software application , as will be appreciated by those skilled in the art.","One or more of the components of the management infrastructure , for example, the manager component , the executable managers  and , and the management support software  of the software components , , , , ,  and\/or , in one example detect one or more failures and\/or faults of the distributed software application  and\/or the management infrastructure . In one example, the software component  of the distributed software application  returns a response to the manager component  during initialization that indicates an error. In another example, the manager component  employs a timer to determine a timeout for a message response. For example, the manager component  determines an error has occurred if it has not received a message response from the software component  within a pre-determined time interval, for example, thirty seconds. The components of the management infrastructure  in one example communicate through employment of a fault-tolerant and\/or redundant messaging protocol. For example, the fault-tolerant messaging protocol comprises handshake procedures, delivery confirmations, message timeouts, fault detection procedures, and fault escalation procedures, as will be appreciated by those skilled in the art.","The manager component  comprises a communication interface  for receiving incoming communications. The communication interface  is employable for receiving a configuration file  for the distributed software application . The manager component  may employ other means to receive the configuration file , such as reading the configuration file  directly from a disk or file system. The manager component  may also use the communication interface  for receipt of external system information from an external environment . The external environment  in one example represents other components of the system that are in communication with the manager component . The communication interface  may also receive communications from the executable managers  and , as well as communications from the software components , , , , ,  and . The manager component  is encapsulated with zero or more other software components in an executable . The executable  that contains the manager component  may be run on either of the processors  and .","The manager component  in one example establishes one or more communication channels between the software components , , , , ,  and . In one example, the manager component  establishes a communication channel  between the software component  and the software component . In another example, the manager component  establishes a communication channel  between the software component  and the software component . The manager component  sends one or more messages, for example, the messages  and , to the management support software  of the software components  and , respectively, to establish the communication channels  and .","The executable managers  and  comprise a communication interface  for communication with the manager component . The executable managers  and  in one example receive instruction from the manager component . For example, the executable managers  and  may receive instructions at the communication interface  from the manager component . The executable managers  and  in one example are encapsulated in an executable  and an executable , respectively.","The executable managers  and  monitor executables and\/or software components of the distributed software application  that run on the processors  and , such as the executables , , ,  and  and the software components , , , , ,  and\/or . For example, the executable managers  and  monitor communication channels and\/or diagnostics on behalf of the executables , , ,  and , and the software components , , , , ,  and . Should one or more of the executables , , ,  and  and\/or the software components , , , , ,  and  fail, the respective executable manager informs the manager component  of the failure.","In one example, the management infrastructure  comprises one executable manager per processor. For example, the executable  of the executable manager  runs on the processor . The executable manager  monitors the executables  and  and the software components ,  and . The executable  of the executable manager  runs on the processor . The executable manager  monitors the executables ,  and  and the software components , ,  and .","Each of the software components , , , , ,  and  comprise application software , management support software , a management support software communication interface , and one or more application software communication interfaces . The software components , , , , ,  and  employ the management support software communication interface  to receive communications from the manager component . The software components , , , , ,  and  employ the application software communication interfaces  to receive communications from other software components of the software components , , , , ,  and . An application programming interface (\u201cAPI\u201d)  communicatively couples the application software  with the management support software  in each of the software components , , , , ,  and . The application software  and the management support software  can exchange information through the application programming interface . The manager component  in one example generates the application programming interface  through employment of a code generator.","The software components , , , , ,  and  each perform some portion of the overall functionality of the distributed software application . The software components , , , , ,  and  work together to make the distributed software application  achieve the desired operation. For example, the software components , , , , ,  and  process incoming requests from each other and perform operations to provide the overall functionality.","An application developer creates the application software  of the software components , , , , ,  and  to perform the designated functionality of the software components , , , , ,  and . For example, the application developer creates the application software  of the software components , , , , ,  and  to achieve the overall functionality of the distributed software application . The management support software  of the software components , , , , ,  and  communicatively couples the software components , , , , ,  and  to allow the application software  to perform the functionality of the distributed software application .","To alleviate the application developers from being required to write software into each of the software components , , , , ,  and  for the management procedures, the manager component , the executable managers  and , and the management support software  cooperate to perform the management procedures for the software components , , , , ,  and . A code generator of the management infrastructure  in one example automatically generates the management support software . The code generator of the management infrastructure  employs the configuration file  to create the management support software . For example, the configuration file  comprises connection information and\/or architecture information of the distributed software application . The code generator creates code for the management support software . The code for the management support software  is compiled and linked with the application software  in the software components , , , , ,  and . The management support software  may be different for each of the software components , , , , ,  and , as will be appreciated by those skilled in the art.","One or more of the manager component , the executable managers  and , and\/or the software components , , , , ,  and  in one example comprise a portion of an active\/standby group. Each active\/standby group comprises a first component (i.e. active component) and a second component (i.e. standby component). The first component performs a portion of the overall functionality of the distributed software application  or the management infrastructure  while the second components remain inactive. Upon a failure of the first component, the second component is promoted to an active status. For example, the standby component becomes an active component and begins to perform the portion of the overall functionality. The standby component provides a redundancy in operation of the distributed software application  and\/or the management infrastructure . The active\/standby group promotes a reduction in downtime for the distributed software application  and\/or the management infrastructure , as will be appreciated by those skilled in the art.","Checkpoint procedures comprise procedures for storing state information of software components. State information is stored as a checkpoint for later use, for example, recovery or initialization of a software component to a known state, as will be understood by those skilled in the art. The manager component  in one example handles one or more checkpoint procedures for one or more of the software components , , and\/or . For example, the manager component  starts, manages, and maintains the checkpoint procedures for the software components ,  and\/or . Since the manager component  handles the checkpoint procedures, the application software  does not require resources for management of the communication channel or the checkpoint destination. For example, the destination is transparent to the application software , as will be appreciated by those skilled in the art.","Under the direction of the manager component , the management support software  receives notification about the destination for checkpoints from the application software  and sets up a communication channel for checkpoints to the pre-determined destination. The checkpoint may comprise a complete set of state information of a software component, or only a portion of the state information, for example, an incremental checkpoint. Exemplary destinations comprise memory, disk storage arrays, databases, other software components, and console displays. The management support software  in one example uses a null destination, for example, to indicate that the checkpoint should be discarded. The checkpoint is discarded if the checkpoint is not needed, or if no destination is available to store it. The management support software  provides a function call interface to the application software  to handle the checkpoint procedures. Exemplary functions save the checkpoints, delete the checkpoints, get the destination, and set the destination, as will be appreciated by those skilled in the art.","Referring to , an illustrative description of exemplary operation of the apparatus  is presented, for explanatory purposes. The manager component  causes a startup of the software component . Upon the startup, the manager component  makes a determination that the software component  comprises a checkpoint relationship. The manager component  makes the determination based on the configuration file . The configuration file  in one example describes a checkpoint relationship between the software component  and the software component  where the software component  sends checkpoint data to the software component . For example, the software component  comprises a destination for a checkpoint from the software component . The manager component  causes a startup of the software component  such that the software component  can receive the checkpoint data from the software component . For example, the manager component  causes the startup of the software component  after the startup of the software component .","Upon the startup of the software component , the manager component  establishes a communication channel  from the management support software  of the software component  to the software component  through application interface . For example, the manager component  sends a message to the management support software  of the software component . The message comprises an object reference to application interface  of the software component . The management support software  of the software component  employs the object reference to the application interface  of software component  to establish the communication channel  with the software component . In one example, the management support software  of the software component  establishes the communication channel  with the application software  of the software component  through application interface . In another example, the management support software  of the software component  establishes the communication channel  with the management support software  of the software component . For example, the software components  and  comprise an active\/standby group, as will be appreciated by those skilled in the art.","During operation of the software component , the application software  of the software component  performs a checkpoint procedure. The application software  in one example determines a start of the checkpoint procedure, for example, based on a timer expiration and\/or an occurrence of a pre-determined event. In another example, the management support software  requests a start of the checkpoint procedure. The application software  identifies state information to be checkpointed and passes the state information to the management support software . The application software  employs the application programming interface , for example, a function call to a \u201cdump\u201d procedure, to pass the state information to the management support software .","The application programming interface  of the software component  in one example employs one or more parameters to perform the dump procedure. Exemplary parameters comprise a key, data, and a logical timestamp. A checkpoint in one example comprises the key, the data, and the logical timestamp. The key corresponds to an identifier for the state information to be checkpointed. For example, where the application software  checkpoints a plurality of distinct portions of state information, the key serves to identify which distinct portion is currently being checkpointed. The key in one example comprises a data structure identifier. The data corresponds to the state information that is being checkpointed. The logical timestamp serves to provide a sequential and\/or chronological ordering for multiple checkpoints. For example, a checkpoint with an earlier timestamp may be overwritten with a checkpoint with a later timestamp. The key and the logical timestamp uniquely identify the state information for each checkpoint, as will be appreciate by those skilled in the art.","Upon receipt of the state information, the management support software  of the software component  in one example sends the checkpoint to the software component . For example, the management support software  sends one or more messages that comprise the checkpoint over the communication channel  to the software component . In one example, the management support software  of the software component  receives the checkpoint. The management support software  passes the checkpoint to the application software  of the software component  through employment of the application programming interface . The software component  employs the checkpoint to promote redundancy of the state information within the checkpoint, as will be appreciated by those skilled in the art.","The manager component  and\/or the management support software  of the software component  in one example manage the checkpoint procedures for the software component . In one example, the manager component  and the management support software  cooperate to validate the communication channel  between the software component  and the software component . In another example, the manager component  sends to the software component  an indication that a checkpoint is valid.","The manager component  in one example changes the destination of the checkpoint for the software component  while the software component  is operational. The manager component  sends a message to the management support software  of the software component  to change the destination. In one example, the manager component  changes the destination upon a change in priority of the software component . For example, the manager component  changes the destination upon an escalation of the software component  from a standby component to an active component of an active\/standby group. In another example, the manager component  changes the destination upon a fault detection and\/or failure of the software component . The application software  of the software component  continues operation while the management support software  of the software component  changes the destination, as will be appreciated by those skilled in the art.","The apparatus  in one example comprises a plurality of components such as one or more of electronic components, hardware components, and computer software components. A number of such components can be combined or divided in the apparatus . An exemplary component of the apparatus  employs and\/or comprises a set and\/or series of computer instructions written in or implemented with any of a number of programming languages, as will be appreciated by those skilled in the art.","The apparatus  in one example employs one or more computer-readable media. The computer-readable media store software, firmware and\/or assembly language for performing one or more portions of one or more embodiments of the invention. Examples of a computer-readable medium for the apparatus  comprise recordable data storage media of the management infrastructure . The computer-readable medium for the apparatus  in one example comprise one or more of a magnetic data storage medium, electrical data storage medium, optical data storage medium, biological data storage medium, and atomic data storage medium. For example, the computer-readable medium comprise floppy disks, magnetic tapes, CD-ROMs, DVD-ROMs, hard disk drives, and electronic memory. In another example, the computer-readable medium comprises a network. The network comprises or is coupled with the apparatus , for instance, one or more of a telephone network, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, and a wireless network.","The steps or operations described herein are just exemplary. There may be many variations to these steps or operations without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted, or modified.","Although exemplary implementations of the invention have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions, and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Features of exemplary implementations of the invention will become apparent from the description, the claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0010","num":"0018"},"figref":"FIG. 1"}]},"DETDESC":[{},{}]}
