---
title: Power estimation in high-level modeling systems
abstract: A computer-implemented method of estimating power usage for high-level blocks of a high-level modeling system (HLMS) circuit design can include generating a low-level circuit design from the HLMS circuit design. The method can include simulating the low-level circuit design and storing power usage data, from the simulating, for each of a plurality of circuit elements of the low-level circuit design. The circuit elements can be correlated with the high-level blocks of the HLMS circuit design. A power query of a selected block of the HLMS circuit design can be received and a measure of power usage for the selected high-level block can be determined according to the power usage data for selected ones of the plurality of circuit elements correlated with the selected high-level block. The measure of power usage for the selected high-level block can be output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082530&OS=08082530&RS=08082530
owner: Xilinx, Inc.
number: 08082530
owner_city: San Jose
owner_country: US
publication_date: 20090220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RESERVATION OF RIGHTS IN COPYRIGHTED MATERIAL","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The embodiments disclosed herein relate to integrated circuit devices (ICs). More particularly, the embodiments relate to estimating power usage, within a high-level modeling system, of blocks of a circuit design to be implemented within an IC.","A High-Level Modeling System (HLMS) refers to a computer-based circuit design tool that allows circuit designers to graphically create circuits within the HLMS. Typically, an HLMS provides a graphical design environment in which circuit designers can visually create circuits through a drag-and-drop type of design paradigm. Graphical blocks, each representing a particular circuit function, can be dragged into the graphical design environment. For example, each block can represent functions such as multiplexing, addition, multiplication, filtering, or the like. Each of these \u201chigh-level\u201d blocks also can be associated with one or more models that may be used to simulate the circuit being developed. Communication among the blocks can be specified by drawing lines, representing signals, that graphically link the blocks placed in the graphical design environment.","Within an HLMS, simulation of a circuit is a high-level analysis that is implemented using a model for each respective block of the circuit. When the circuit is simulated within the HLMS, the models are used without first converting each block of the circuit into a lower-level implementation that specifies actual circuit elements and\/or connections among the circuit elements. As a result, information derived through simulation within an HLMS may not be entirely accurate. For example, estimates of power consumption of a system specified within an HLMS will be limited to using power consumption models that exist within the HLMS for each block without regard for the eventual implementation of those blocks within a particular integrated circuit device.","In some cases, a circuit designer may decide to continue with implementation of the circuit from the HLMS implementation into a lower-level implementation. That low-level circuit design can be simulated, thereby generating more accurate simulation data. Unfortunately, the simulation data that is generated, while more accurate, corresponds to the low-level circuit elements that exist within the low-level circuit design, not to the high-level blocks within the HLMS. Any problem with the low-level circuit design that may manifest itself with respect to particular low-level circuit elements may not be traced back to the original block in the HLMS circuit design from which the low-level circuit elements were derived.","The embodiments disclosed within this specification relate to estimating power usage, within a high-level modeling system (HLMS), of blocks of a circuit design to be implemented within a programmable integrated circuit (IC). One embodiment of the present invention can include a computer-implemented method of estimating power usage for high-level blocks of an HLMS circuit design. The method can include generating a low-level circuit design including a plurality of low-level circuit elements from the HLMS circuit design and simulating the low-level circuit design. Power usage data, from the simulating, can be stored for each of the plurality of low-level circuit elements. The plurality of low-level circuit elements can be automatically correlated with high-level blocks of the HLMS circuit design. A query for power usage of a selected high-level block of the HLMS circuit design can be received. The method can include determining a measure of power usage for the selected high-level block according to the power usage data for selected ones of the plurality of low-level circuit elements correlated with the selected high-level block. The measure of power usage for the selected high-level block can be output.","In one aspect, the computer-implemented method can include selecting the low-level circuit design to be a hardware description language (HDL) circuit design and selecting each of the plurality of low-level circuit elements to be an HDL circuit element. Generating a low-level circuit design can include generating the HDL circuit design from the HLMS circuit design. The method also can include generating and storing name translation data mapping the plurality of HDL circuit elements to the high-level blocks of the HLMS circuit design. Automatically correlating the plurality of low-level circuit elements with the high-level blocks can include associating each of the plurality of low-level circuit elements with one of the high-level blocks according to the name translation data.","In another aspect, the computer-implemented method can include selecting the low-level circuit design to be a netlist and selecting each of the plurality of low-level circuit elements to be a netlist circuit element. Generating a low-level circuit design can include generating an HDL circuit design from the HLMS circuit design, wherein the HDL circuit design includes a plurality of HDL circuit elements, and generating and storing name translation data mapping the plurality of HDL circuit elements to the high-level blocks of the HLMS circuit design. The netlist can be generated from the HDL circuit design.","Automatically correlating the plurality of low-level circuit elements with high-level blocks can include mapping netlist circuit elements to HDL circuit elements according to a selected match approximation technique and associating HDL circuit elements with the high-level blocks according to the name translation data. Mapping netlist circuit elements according to a selected match approximation technique can include, for each HDL circuit element, calculating a distance metric between a name of the HDL circuit element and a name of each of the plurality of netlist circuit elements and mapping each netlist circuit element to the HDL circuit element with a smallest distance metric.","Automatically correlating the plurality of low-level circuit elements with the high-level blocks also can include determining a component type for each of a plurality of netlist circuit elements of the netlist and determining a circuit structure to which the plurality of netlist circuit elements map that is available within a programmable IC in which the HLMS circuit design is to be implemented. Each of the plurality of netlist circuit elements can be mapped to one of the high-level blocks of the HLMS circuit design that represents the circuit structure available within the programmable IC.","The computer-implemented method further can include receiving the query for power usage of the selected high-level block of the HLMS circuit design through an application programming interface, provided as part of an HLMS, that returns the measure of power usage for the selected high-level block of the HLMS circuit design, as calculated from the power usage data for each of the plurality of low-level circuit elements.","Another embodiment of the present invention can include a computer-implemented method of estimating power usage for high-level blocks of an HLMS circuit design. The computer-implemented method can include generating a low-level circuit design including a plurality of low-level circuit elements from the HLMS circuit design, simulating the low-level circuit design and storing power usage data, from the simulating, for each of the plurality of low-level circuit elements, and automatically correlating the plurality of low-level circuit elements with the high-level blocks of the HLMS circuit design. High-level power usage data for at least one of the high-level blocks of the HLMS circuit design, as calculated from power usage data for selected ones of the plurality of low-level circuit elements correlated with the at least one of the high-level blocks, can be output.","In one aspect, the computer-implemented method can include selecting the low-level circuit design to be an HDL circuit design and selecting each of the plurality of low-level circuit elements to be an HDL circuit element. Generating a low-level circuit design can include generating the HDL circuit design from the HLMS circuit design. The method further can include generating and storing name translation data mapping the plurality of HDL circuit elements to high-level blocks of the HLMS circuit design. Accordingly, automatically correlating the plurality of low-level circuit elements can include assigning each of the plurality of low-level circuit elements to one of the high-level blocks according to the name translation data.","In another aspect, the computer-implemented method can include selecting the low-level circuit design to be a netlist and selecting each of the plurality of low-level circuit elements to be a netlist circuit element. Generating a low-level circuit design can include generating an HDL circuit design from the HLMS circuit design, wherein the HDL circuit design includes a plurality of HDL circuit elements, generating and storing name translation data mapping the plurality of HDL circuit elements to the high-level blocks of the HLMS circuit design, and generating a netlist from the HDL circuit design.","Automatically correlating each of the plurality of low-level circuit elements can include mapping netlist circuit elements to HDL circuit elements according to a selected match approximation technique and mapping HDL circuit elements to the high-level blocks according to the name translation data.","Responsive to receiving a user query for power usage of a selected high-level block of the HLMS circuit design, a measure of power usage for the selected high-level block, as calculated from the power usage data for selected ones of the low-level circuit elements correlated with the selected high-level block, can be output.","Yet another embodiment of the present invention can include a computer program product including a computer-usable medium having computer-usable program code that, when executed by a data processing system, such as a computer, causes the data processing system to perform the various steps and\/or functions disclosed herein.","While the specification concludes with claims defining the features of the invention that are regarded as novel, it is believed that the invention will be better understood from a consideration of the description in conjunction with the drawings. As required, detailed embodiments of the present invention are disclosed herein; however, it is to be understood that the disclosed embodiments are merely examples of possible implementations of the invention, which can be embodied in various forms. Therefore, specific structural and functional details disclosed herein are not to be interpreted as limiting, but merely as a basis for the claims and as a representative basis for teaching one skilled in the art to variously employ the inventive arrangements in virtually any appropriately detailed structure. Further, the terms and phrases used herein are not intended to be limiting but rather to provide an understandable description of the invention.","The embodiments disclosed within this specification relate to estimating power usage of a circuit implemented within a High-Level Modeling System (HLMS). In accordance with the embodiments disclosed herein, a circuit design created or specified within an HLMS can be processed to generate a low-level circuit design. That low-level circuit design can be simulated and power usage analysis can be performed. Power usage data generated through the simulation can be automatically correlated with the high-level blocks that specify the circuit design within the HLMS. This allows a user of the HLMS to conduct more detailed and accurate power usage analysis through simulation of a low-level circuit design. The user retains the ability to attribute the power usage data calculated for low-level circuit elements of the low-level circuit design to the high-level blocks used to specify the circuit design within the HLMS.","Within a conventional HLMS, users have been restricted to performing high-level power usage analysis using the models provided by the HLMS. These models lack the detail that is achieved through generating low-level representations of each high-level block, as is performed when processing the circuit design for implementation within a target programmable integrated circuit (IC). Within a conventional HLMS, when more detailed power usage data is desired, the user invokes various implementation tools to generate lower-level representations of the circuit design. Simulations could then be performed upon the lower-level representations to derive power usage data. The power usage data is typically output from such tools in the form of a text report. Often, however, it is difficult to determine the relationship between the low-level circuit elements that are listed in the power usage report and the high-level blocks used to specify the circuit design within the HLMS.","The embodiments disclosed within this specification facilitate the automated correlation of power usage data, determined from a low-level representation of the circuit design, to high-level blocks within the HLMS. The power usage data can be correlated with the high-level blocks of the circuit as specified within the HLMS. This allows a circuit designer to obtain detailed and accurate power usage data for particular high-level blocks of the HLMS. The embodiments of the present invention also provide an application programming interface (API) through which users may query for power usage of particular high-level blocks of the HLMS.","The embodiments disclosed within this specification can be applied to circuits specified within an HLMS that are to be implemented within a programmable IC. Programmable ICs are a well-known type of IC that can be programmed to perform specified logic functions. One type of programmable IC, the field programmable gate array (FPGA), typically includes an array of programmable tiles. These programmable tiles can include, for example, input\/output blocks (IOBs), configurable logic blocks (CLBs), dedicated random access memory blocks (BRAM), multipliers, digital signal processing blocks (DSPs), processors, clock managers, delay lock loops (DLLs), and so forth.","Each programmable tile typically includes both programmable interconnect and programmable logic. The programmable interconnect typically includes a large number of interconnect lines of varying lengths interconnected by programmable interconnect points (PIPs). The programmable logic implements the logic of a user design using programmable elements that can include, for example, function generators, registers, arithmetic logic, and so forth.","The programmable interconnect and programmable logic are typically programmed by loading a stream of configuration data into internal configuration memory cells that define how the programmable elements are configured. The configuration data can be read from memory (e.g., from an external PROM) or written into the FPGA by an external device. The collective states of the individual memory cells then determine the function of the FPGA.","Another type of programmable ICs is the complex programmable logic device, or CPLD. A CPLD includes two or more \u201cfunction blocks\u201d connected together and to input\/output (I\/O) resources by an interconnect switch matrix. Each function block of the CPLD includes a two-level AND\/OR structure similar to those used in programmable logic arrays (PLAs) and programmable array logic (PAL) devices. In CPLDs, configuration data is typically stored on-chip in non-volatile memory. In some CPLDs, configuration data is stored on-chip in non-volatile memory, then downloaded to volatile memory as part of an initial configuration (programming) sequence.","For all of these programmable ICs, the functionality of the device is controlled by data bits provided to the device for that purpose. The data bits can be stored in volatile memory (e.g., static memory cells, as in FPGAs and some CPLDs), in non-volatile memory (e.g., FLASH memory, as in some CPLDs), or in any other type of memory cell.","Other programmable ICs are programmed by applying a processing layer, such as a metal layer, that programmably interconnects the various elements on the device. These programmable IC are known as mask programmable devices. Programmable ICs can also be implemented in other ways, e.g., using fuse or antifuse technology. The phrase \u201cprogrammable IC\u201d can include, but is not limited to these devices and further can encompass devices that are only partially programmable. For example, one type of programmable IC includes a combination of hard-coded transistor logic and a programmable switch fabric that programmably interconnects the hard-coded transistor logic.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 1","FIG. 1"],"b":["100","100"]},"A computer suitable for storing and\/or executing computer-usable program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some computer-usable program code in order to reduce the number of times computer-usable program code must be retrieved from bulk storage during execution.","Input\/output (I\/O) devices such as, for example, keyboards, displays, pointing devices, etc., can be coupled to the computer either directly or through intervening I\/O controllers. Network adapters may also be coupled to the computer to enable the computer to become coupled to other computers, devices, or remote printers or storage devices through intervening private or public networks. Modems, cable modems, and Ethernet cards are just a few of the currently available types of network adapters.","One example of an HLMS is the Xilinx System Generator for Digital Signal Processing (DSP), also known as \u201cSysgen.\u201d Simulink, which runs in Matlab from The Math Works, Inc., of Natick, Mass., is an interactive tool for modeling, simulating, and analyzing dynamical systems. SysGen is a high-performance design tool that executes as part of Simulink to provide a high-level, graphical modeling environment.","As shown, an HLMS circuit design  can be specified or loaded into an HLMS . HLMS circuit design  can be a high-level representation of a circuit design that can be, for example, specified in the native format used by HLMS . As such, HLMS circuit design  will specify one or more high-level, functional, blocks (blocks) connected by graphic lines representing signals exchanged among the blocks.","HLMS  can automatically translate HLMS circuit design  into a hardware description language (HDL) circuit design  through an HDL generation process illustrated as HDL generation block . HDL generation block  outputs an HDL circuit design . As used herein, \u201coutputting\u201d and\/or \u201coutput\u201d can mean, for example, writing to a file, writing to a user display or other output device, storing in memory, playing audible notifications, sending or transmitting to another system, exporting, or the like.","HLD circuit design  can be a programmatic description of the circuit design specified in an HDL such as Verilog or VHDL. That is, HDL circuit design  will be an HDL representation of HLMS circuit design . HDL circuit design  can be considered a low-level representation of HLMS circuit design . As such, HDL circuit design  will include a plurality of HDL circuit elements. Each of the blocks of HLMS circuit design  will be implemented as, or translated into, one or more HDL circuit elements within HDL circuit design .","In translating HLMS circuit design  into HDL circuit design , HDL generation block  can perform various processing functions including, but not limited to, name translation to avoid naming conflicts in HDL circuit design . In general, the names used to represent blocks and lines within HLMS circuit design  will be different from the names used to represent HDL circuit elements. Such is the case as each respective programmatic format, in general, will have different naming rules and\/or a different naming syntax that must be observed.","When generating HDL circuit design , HDL generation block  will apply different name modification techniques to change names, as necessary, from those specified in HLMS circuit design  to an acceptable format or syntax for use within HDL circuit design . In addition to conforming to an accepted naming syntax, this processing also avoids naming conflicts within HDL circuit design . Name changes can be applied to the HDL circuit elements that, in various combinations, represent blocks of HLMS circuit design . For example, HDL generation block  can apply name changes to low-level entities and\/or modules of HDL circuit design  that represent blocks within HLMS circuit design . In another example, HDL generation block  can apply name changes to low-level signal names within HDL circuit design  that represent lines within HLMS circuit design .","HDL generation block  can create and\/or store a record of the different name changes that are applied when generating HDL circuit design  from HLMS circuit design within name translation data  in memory, e.g., as one or more name translation files. Name translation data  can specify a one-to-one mapping of the blocks of HLMS circuit design  to HDL circuit elements, such as entities and\/or modules, of HDL circuit design . Name translation data  also can specify a one-to-one mapping of lines specified within HLMS circuit design  to HDL circuit elements such as low-level signals and\/or wires within HDL circuit design . In this manner, each HDL circuit element will be mapped to at least one block of HLMS circuit design  by name translation data .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1","b":["100","115","125","125","130","130","115","125"]},"HLMS  can include a power usage estimation (PUE) block . PUE block  can correlate low-level power usage data such as HDL power usage data  and netlist power usage data , to be described herein, back to, or with, blocks of HLMS circuit design . The correlation of HDL power usage data  to blocks can be performed using name translation data . In other words, PUE block  can attribute the power usage for each HDL circuit element, as specified within HDL power usage data , to the block of HLMS circuit design  to which each respective HDL circuit element is mapped according to the name translation data .","After generating HDL circuit design , HLMS  can apply one or more implementation tools  to HDL circuit design  to generate, and output, a netlist . Implementation tools  can perform functions such as synthesis, mapping, placing, and routing. Implementation tools  may be included as part of HLMS  or may be provided by a manufacturer other than the manufacturer of HLMS . In either case, implementation tools  may be invoked automatically through HLMS .","The term \u201csynthesis,\u201d in general, refers the process of converting an HDL description of a circuit design, e.g., HDL circuit design , into a gate level description of the circuit design. In this sense, the circuit design is \u201ccompiled\u201d using a logic synthesis tool into an implementation of low level logic gates referred to as a netlist. \u201cMapping,\u201d in general, refers to the process of identifying constructs of the logical netlist, e.g., primitive logic gates, and associating those logic primitives with the actual physical resources of the target programmable IC within which the netlist will be implemented. For example, one or more individual logic gates may be mapped to look-up tables (LUTs), latches, flip-flops, block random access memories (BRAMs), or the like. Mapping adds \u201cmap\u201d data to the netlist.","\u201cPlacing,\u201d in general, refers to the process of assigning the circuit elements, to which logic primitives of the synthesized circuit design have been mapped, to actual locations of the target device. The assignment information can be added to the netlist. For example, once logic gates are assigned to LUTs for implementation, combinations of logic gates can be assigned to a particular LUT on the target device, where that LUT has a particular, physical location on the target device. \u201cRouting,\u201d in general, refers to the process of programming the interconnect circuitry to establish the necessary signaling links among the various circuit elements of the target device. Routing information also can be added to the netlist that is generated by the implementation tools.","When HDL circuit design  is processed by implementation tools  to generate netlist , implementation tools  will modify names of HDL circuit elements. The name transformations can avoid naming conflicts and reconcile differences in naming rules and\/or naming syntax. Unlike the transformation of HLMS circuit design  to HDL circuit design , name translation data is not available for the conversion of HDL circuit design  to netlist .","As noted, name changes arise when generating netlist  for a variety of reasons. In one example, name changes arise in consequence of \u201cflattening\u201d HDL circuit design  into netlist . That is, HDL circuit design  can be hierarchical, permitting multiple instances of a single element, whereas netlist  is not hierarchical, thereby requiring name changes to avoid conflicts. In another example, implementation tools  may eliminate components and\/or wires found in HDL circuit design , combine components and\/or wires found within HDL circuit design , or create components and\/or wires during implementation to be included within netlist  that were not explicitly specified in HDL circuit design . For example, given a constraint that places a limitation on the maximum fanout of a device, implementation tools  may duplicate one or more components and\/or wires to obey the fanout constraint and\/or to optimize performance of the resulting circuit.","In any case, predicting the name changes performed by implementation tools  is not practical. Moreover, when third party implementation tools are used, a record of the name changes performed by the implementation tools is simply not available to HLMS .","As pictured in , netlist  can be provided to netlist simulation block . Netlist simulation block  can simulate netlist  and, through that simulation, generate and output netlist power usage data . In order to generate power usage data  from a simulation of netlist , which may be a post place and route netlist, a value change dump (VCD) file that specifies waveforms for all signals of netlist  and how those signals transition during operation of the circuit specified by netlist  is needed. The VCD file further can provide the necessary timing information indicating when each of the signals transitions. HLMS  can automatically generate the VCD file as part of the processing functions offered.","Netlist power usage data  can specify power usage on a per netlist element basis. That is, the amount of power used by a given netlist element, e.g., a particular wire or circuit component, can be determined from performing a simulation of netlist  using information provided within the VCD file.","In order to correlate netlist power usage data  to blocks of HLMS circuit design , PUE block  must correlate power usage of individual netlist circuit elements to HDL circuit elements, and then correlate HDL circuit elements to blocks of HLMS . Given the lack of name translation data available for netlist , PUE block  must estimate the particular HDL circuit element with which each netlist circuit element is related, or from which each netlist circuit element is derived. One or more match approximation techniques can be used to perform this function.","In one embodiment, the match approximation technique can involve determining a measure of distance between two strings. Using such a match approximation technique, PUE block  can compare names of netlist circuit elements with names of HDL circuit elements. PUE block  can determine that a pair of circuit elements including a netlist circuit element and an HDL circuit element having a lowest measure of distance will be related. That is, the netlist circuit element will have been derived from the HDL circuit element.","One example of a technique for determining distance between two strings is called the \u201cLevenshtein distance\u201d or \u201cLD.\u201d LD is a measure of the similarity between two strings, which can be referred to as the source string (s), e.g., the name of an HDL circuit element, and the target string (t), e.g., the name of a netlist circuit element. The LD is the number of deletions, insertions, or substitutions required to transform string s into string t. For example, if string s is \u201ctest\u201d and string t is also \u201ctest\u201d, the LD is zero because no transformations are needed. The strings are already identical. If string s is \u201ctest\u201d and string t is \u201ctent\u201d, the LD is one because one substitution, e.g., a change of letter \u201cs\u201d to letter \u201cn,\u201d will transform string s into string t. In general, the greater the LD for a given pair of strings, the more different the strings are.","In another embodiment, PUE block  can perform an analysis of netlist circuit element names to identify different netlist circuit elements that share a particular formative. For example, consider the case where a plurality of netlist circuit elements have names that have been completely changed from that specified in HDL circuit design . It may be the case that each name of one of the plurality of netlist circuit elements includes the formative \u201cs123.\u201d In that case, PUE block  can perform an analysis of each type of netlist circuit element having the formative \u201cs123\u201d in its name and determine the type of component represented by that netlist circuit element. PUE block  then can evaluate the types of circuit structures that are available within the target programmable IC within which netlist  is to be implemented. If a circuit structure, e.g., an adder, a BRAM, a DSP, or the like, is found to which that the set of netlist circuit elements would be matched, PUE block  can determine that the set of netlist circuit elements with the common formative defines that circuit structure. The identified circuit structure then can be compared with blocks of HLMS circuit design  to determine whether HLMS circuit design  includes a block representing the identified circuit structure. If so, the netlist circuit elements, and the power usage of each such netlist circuit element, can be attributed to the identified block.","Other examples of approximation techniques can include string matching techniques in those cases where names are not completely changed when generating netlist  from HDL circuit design . String matching can be used, for example, when circuit element names are changed by appending data, leaving the original name largely intact. The examples provided within this specification are intended for purposes of illustration only. As such, the examples are not intended to limit the embodiments to any one particular match approximation technique.","PUE block  can evaluate the different sets of power usage data generated, e.g., HDL power usage data  and netlist power usage data , and correlate each set of data power usage data back to different ones of the blocks of HLMS circuit design . PUE block  can generate and output high-level power usage data , which can specify the power usage of high-level blocks of HLMS circuit design  as calculated using the low-level power usage data of HDL power usage data  and\/or netlist power usage data .","In one embodiment, PUE block  can begin automatically correlating data as low-level power usage data becomes available through different simulations. In another embodiment, the correlation of low-level power usage data with blocks can be performed responsive to a user query for power usage of a selected block of HLMS circuit design .","HLMS  further can include a power usage API . Through power usage API , a user may directly query HLMS  for the power usage of any of the blocks specified within HLMS circuit design . The power usage data returned for a given block through power usage API  will be derived from the low-level power usage data described as correlated with the particular block that is the subject of the user-specified query.","It should be appreciated that the various functions such as generating HDL circuit design , simulating HDL circuit design , deriving HDL power usage data  for circuit design , generating netlist , simulating netlist , generating netlist power usage data , and correlating power usage data, whether HDL power user data  and\/or netlist power usage data , using the PUE block  can be performed automatically and completely from within the design environment provided by HLMS .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["205","210","215","205","215","220","225","230","215","235","235","240","245","250"]},"As shown, the PUE of the HMLS can, using name translation data, determine that HDL circuit elements  and  were derived from block . Accordingly, the PUE can map, or assign, HDL circuit elements  and  to block . In this regard, as HDL circuit elements  and  are correlated with block , any power usage determined for HDL circuit elements  and  within an HDL testbench, for example, can be attributed to block . More particularly, power usage of HDL circuit element  and HDL circuit element  can be summed to provide a measure of power usage for block .","In the case where HLMS circuit design  has been transformed into netlist , using match approximation techniques as described, the PUE can determine that netlist circuit element  is derived from HDL circuit element . Similarly, the PUE can determine that netlist circuit elements  and  are derived from HDL circuit element . Accordingly, the PUE can assign, or map, netlist circuit element  to HDL circuit element . The PUE can assign, or map, netlist circuit elements  and  to HDL circuit element . By correlating netlist circuit elements - with block , any power usage determined for netlist elements - may be attributed to block . That is, the power usage of netlist circuit elements - can be summed to provide a measure of power usage of block .","Arc  represents the match approximation technique described where the PUE can determine the type of each of netlist circuit elements - and determine that the set of netlist circuit elements - can be mapped to a particular type of circuit structure, such as a DSP, within the target programmable IC. Further analysis by the PUE can determine that block  in HLMS circuit design  represents a DSP. Accordingly, the PUE can infer a relationship and correlate netlist circuit elements - with block  in this manner.","When reporting power consumption of a block within the HLMS, in general, the power consumed by clocks sources, clock buffers, and clock nets will not be included in the power usage data provided. Typically, the data available is not sufficient to attribute portions of clock networks to different blocks. Accordingly, power usage by the clock network is reported independently and, therefore, excluded from power usage data reported for any given block of the HLMS for which power usage may be requested.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","300"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 3","b":["300","300","305","305"]},"Block  represents an example of the power usage data generated for an HDL circuit design generated from HLMS circuit design  within a conventional HLMS. In general, within a low-level circuit design, individual output ports of HLMS circuit design  will be broken out into their constituent parts. For example, a line within HLMS circuit design  that represents a 32-bit output, will be broken out into 32 individual lines, each having a width of a single bit, within the low-level circuit design. The power usage data generated from such low-level circuit designs will be specified in this manner, e.g., a power usage value for each of the 32 individual data lines. Though not shown, information such as average power consumption, capacitance, operational frequency, current flow through the circuit element, and number of loads may be specified for each circuit element.","In the example pictured in , output port , also shown as fir_output, has been broken out into top-level ports fir_output(0), fir_output(1), fir_output(2), fir_output(3), fir_output(4), fir_output(5), and fir_output(6) within block . Similarly, output port , corresponding fir_output_monitor, has been broken out into top-level output ports fir_output_monitor(0), fir_output_monitor(1), and fir_output_monitor(2). The PUE of the HLMS can process the power usage data specified for each of the individual HDL circuit elements shown in block  to generate high-level power usage data represented, at least in part, in block . Block  shows each HDL circuit element that correlates with output port . The power usage of each HDL circuit element shown in block  can be summed to determine a measure of power usage for output port .","Regarding logic, block  within HLMS circuit design  is labeled \u201cFIR compiler v32.\u201d Block  is labeled \u201cCapture Register\u201d. In order to derive a measure of power usage of block  and block , the PUE can first determine each of the HLD circuit elements that form block  and each of the HDL circuit elements that form block . This can be performed, as noted, using the name translation data that is generated when HLMS circuit design  is converted into an HDL circuit design. For purposes of illustration, block  will be renamed \u201cfir_x0\/fir_compiler_v32\u201d within the HDL circuit design and block  will be renamed \u201cfir_x0\/capture_register\u201d.","Taking block  as an example, within any power usage data generated from a netlist, the netlist circuit elements corresponding to HDL circuit element \u201cfir_x0\/fir_compiler_v32\u201d must be identified. A match approximation technique, as described, can be applied. For each netlist circuit element specified in the netlist power usage data, the HDL circuit element having the smallest distance measure with respect to that netlist circuit element can be determined. As noted, the distance measure can be the LD, sometimes referred to as the \u201cedit distance.\u201d In this manner, each netlist circuit element can be mapped to, or correlated with, an HDL circuit element, e.g., one HDL circuit element, that yields the smallest LD distance for that netlist circuit element. Any netlist circuit elements correlated with HDL circuit element \u201cfir_x0\/fir_compiler_v32\u201d will also be correlated with block . Accordingly, any power usage of the netlist circuit elements correlated with HDL circuit element \u201cfir_x0\/fir_compiler_v32\u201d can be summed and attributed to block .","For example, the netlist power usage data will specify, at least in part, the following netlist circuit elements, each with a value measure of power usage, as named below:\n\n","Regarding signals, the power usage data for netlist circuit design generated from HLMS circuit design  can specify power usage for each of the following signals named as below:\n\n","The examples provided with reference to  are provided for purposes of illustration only. While string matching may be used, particularly with regard to the simplified examples shown in , it should be appreciated that the use of a distance metric works in situations where string matching may fail. For example, when the implementation tools modify names in a way that is unknown, a particular string, e.g., a remnant of the original name of a circuit element or block, to search for within the resulting power usage data will also be unknown. A distance metric, however, may still be used to identify those names of circuit elements that are closest to the HDL circuit element names.","As noted, a power usage API can be provided within the HLMS that allows a user to directly query the power usage of a particular block. Responsive to the query, the power usage of the block, as determined using low-level power usage data, can be returned. In one embodiment, the power usage API can support an \u201cxlget_power\u201d command as is available within Matlab, though any of a variety of different commands or syntaxes may be used. In one embodiment, the syntax of the command can be \u201cpower=xlget_power(blockHandle)\u201d. The block handle used within the HLMS circuit design can be provided as the \u201cblockHandle\u201d argument. In another embodiment, the syntax of the command can be \u201cpower=xlget_power(blockPath)\u201d, where the block path used within the HLMS circuit design can be specified as the \u201cblockPath\u201d argument.","For example, the commands below can return the power consumption of the \u2018fir_output\u2019 Gateway Out block, e.g., block , of HLMS circuit design  and the \u201cFIR Compiler v32 block, e.g., block , of HLMS circuit design :","p_fir_output=xlget_power(\u2018fir\/fir_output\u2019);","p_fir_compiler=xlget_power(\u2018fir\/FIR Compiler v32\u2019);","Using these commands, one further may be able to invoke, through the power usage API, a find function to find or locate the power usage, e.g., consumption, of any blocks of interest within HLMS circuit design .",{"@attributes":{"id":"p-0081","num":"0086"},"figref":["FIG. 4","FIG. 4","FIGS. 1-3"],"b":["400","400"]},"In step , a power query can be received from a user via the power usage API of the HLMS. In step , the HLMS can determine the particular block that is the subject, or argument, of the query. In step , each HDL circuit element that corresponds to the specified block can be identified. As noted, the HDL circuit elements can be identified using the name translation data.","In step , a measure of power usage for each HDL circuit element identified in step  can be retrieved from the power usage data for the HDL circuit design. The measures of power usage for each HDL circuit element can be specified in terms of average power consumption as determined during the simulation of the HDL circuit design. In step , the measures of power usage retrieved for each HDL circuit element correlated with the specified block can be summed. In step , the result from the summation performed in step  can be output as the power usage for the specified block in response to the received power usage query. Appreciably, in the case of a user querying the HLMS, the power usage can be presented upon a display.",{"@attributes":{"id":"p-0084","num":"0089"},"figref":["FIG. 5","FIG. 5","FIGS. 1-4"],"b":["500","500"]},"In step , a power query can be received from a user via the power usage API of the HLMS. In step , the HLMS can determine the particular block that is the subject, or argument, of the query. In step , each HDL circuit element of the HDL circuit design that corresponds to the specified block can be determined. As noted, the HDL circuit elements can be identified using the name translation data.","In step , each netlist circuit element that corresponds to the HDL circuit elements determined in step  can be determined or identified. Netlist circuit elements can be determined using one or more selected match approximation techniques. In step , the measure of power usage for each netlist circuit element identified in step  can be retrieved. In step , the measures of power usage retrieved for the netlist circuit elements can be summed. It should be appreciated that the netlist circuit elements identified in step  will be correlated to the specified block by virtue of the established correlations with HDL circuit elements identified in step . In step , the result from the summation performed in step  can be output as the measure of power usage for the specified block in response to the received power usage query.","The embodiments described within this specification provide an automated technique for ascribing low-level power usage data for a circuit design to high-level blocks within an HLMS. Conventional systems output reports that specify power usage data for various circuit elements without any correlation to the high-level blocks used within an HLMS. Often, the relationship between the low-level circuit elements and the high-level blocks formed from the low-level circuit elements is not readily determinable from the power usage reports. The embodiments disclosed herein provide techniques for performing a multi-level analysis that evaluates the transformation of the circuit as specified within an HLMS, through transformation into an HDL representation of the circuit, and further through transformation into a netlist. The power usage API allows a user to directly query for power of a selected block within the HLMS.","It should be appreciated that the processing required to correlate circuit elements to blocks in an HLMS circuit design can be performed responsive to a query or may be performed as power usage data becomes available, as noted. Accordingly, depending upon the particular implementation, when a power query is received, the HLMS may search and retrieve power usage for blocks that has already been calculated and exists within the HLMS or, alternatively, may perform the correlation and summation operations responsive to each respective query.","The flowcharts in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowcharts may represent a module, segment, or portion of code, which comprises one or more portions of computer-usable program code that implements the specified logical function(s).","It should be noted that, in some alternative implementations, the functions noted in the blocks may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It also should be noted that each block of the flowchart illustrations, and combinations of blocks in the flowchart illustrations, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Embodiments of the present invention can be realized in hardware or in a combination of hardware and software. The embodiments can be realized in a centralized fashion in one data processing system or in a distributed fashion where different elements are spread across several interconnected data processing systems. Any kind of data processing system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general-purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","Embodiments of the present invention further can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein. The computer program product can include a computer-usable or computer-readable medium having computer-usable program code which, when loaded in a computer system, causes the computer system to perform the functions described herein. Examples of computer-usable or computer-readable media can include, but are not limited to, optical media, magnetic media, magneto-optical media, computer memory such as random access memory or hard disk(s), or the like.","The terms \u201ccomputer program,\u201d \u201csoftware,\u201d \u201capplication,\u201d \u201ccomputer-usable program code,\u201d variants and\/or combinations thereof, in the present context, mean any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form. For example, a computer program can include, but is not limited to, a subroutine, a function, a procedure, an object method, an object implementation, an executable application, an applet, a servlet, a source code, an object code, a shared library\/dynamic load library and\/or other sequence of instructions designed for execution on a computer system.","The terms \u201ca\u201d and \u201can,\u201d as used herein, are defined as one or more than one. The term \u201cplurality,\u201d as used herein, is defined as two or more than two. The term \u201canother,\u201d as used herein, is defined as at least a second or more. The terms \u201cincluding\u201d and\/or \u201chaving,\u201d as used herein, are defined as comprising, i.e., open language. The term \u201ccoupled,\u201d as used herein, is defined as connected, although not necessarily directly, and not necessarily mechanically, e.g., communicatively linked through a communication channel or pathway or another component or system.","The embodiments disclosed herein can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the various embodiments of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
