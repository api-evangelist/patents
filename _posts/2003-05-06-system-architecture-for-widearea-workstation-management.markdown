---
title: System architecture for wide-area workstation management
abstract: A system architecture for managing a group of heterogeneous workstations that may be widely dispersed geographically. A system according to the present teachings enables users to access remote workstations and run applications on the remote workstations transparently and enables seamless integration of remote desktop sharing and distributing desktops among heterogeneous workstations. The system also provides enforcement of protections among user and workstations, user account management and workstation allocation management. The present architecture is platform independent and enables workstations to be accessed from anywhere using a graphical user interface through the Internet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07584239&OS=07584239&RS=07584239
owner: Hewlett-Packard Development Company, L.P.
number: 07584239
owner_city: Houston
owner_country: US
publication_date: 20030506
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of Invention","The present invention pertains to the field of workstation management. More particularly, this invention relates to a system architecture for wide-area workstation management.","2. Art Background","A variety of workstations exist that provide users with the capability of executing a wide variety of applications. Examples of workstations are numerous and includes workstations implemented according to a variety of heterogeneous computing platforms. A computing platform is typically characterized by a particular variety of operation system and\/or processor architecture. Examples of workstation platforms include Windows platforms, Macintosh platforms, Unix platforms, etc.","It is often desirable to enable users of workstations to access the resources of other workstations. For example, it is often desirable to enable a user of one workstation to access files and run applications that reside on other workstations. The acts of accessing files, applications, or other resources on other workstations may be referred to as workstation sharing. It may also be desirable to provide workstation sharing among heterogeneous workstations that are widely distributed geographically.","Some prior systems for providing workstation sharing are highly platform-dependent. Such systems usually are not readily adaptable for sharing among heterogeneous workstations, i.e. workstations that implement different computing platforms. Other prior systems for providing workstation sharing may not support sharing among workstations that are widely distributed geographically.","A system architecture is disclosed for managing a group of heterogeneous workstations that may be widely dispersed geographically. A system according to the present teachings enables users to access remote workstations and run applications on the remote workstations transparently and enables seamless integration of remote desktop sharing and distributing desktops among heterogeneous workstations. The system also provides enforcement of protections among user and workstations, user account management and workstation allocation management. The present architecture is platform independent and enables workstations to be accessed from anywhere using a graphical user interface through the Internet.","A system according to the present techniques includes a set of workstations and a set of workstation sharing agents that execute under virtual machines that run on the workstations. The system further includes a management server that enables the workstation agents to form a workstation sharing pool among the workstations and share desktops and files and applications.","Other features and advantages of the present invention will be apparent from the detailed description that follows.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["40","48","10","40","48","40","48","40","48","10"]},"The workstations - execute workstation sharing agents and management components for coalescing the workstations - into a workstation sharing pool. The workstation sharing agents and management components enable users of the workstations - to access remote workstations in the workstation sharing pool and run applications on the remote workstations in the workstation sharing pool transparently. The workstation sharing agents and management components enable seamless integration of remote desktop sharing among the workstations - and distribution of desktops among the workstations - in a platform independent manner. The workstation sharing agents and management components enable any of the workstations - to be accessed from anywhere using a GUI interface via the network .","The workstation sharing agents and management components are implemented in cross-platform code that is readily executable on a variety of heterogeneous computing platforms. In one embodiment, the workstation sharing agents and management components are implemented in Java code and each of the workstations - includes a Java virtual machine that support these components.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["40","48","50","52","20","28","30","38","20","28","30","38","40","48","50","52","40","48","40","48"]},"The client agents - obtain user inputs and remote access requests from the users of the corresponding workstations -. In addition, the client agents - communicate the remote access requests to the management server . If a client agent and the management server  are deployed on different workstations then that client agent and the management server  communicate via the network  using Internet protocols that support high-level application-interoperable protocols such as SOAP and http. If a client agent and the management server  are deployed on the same workstation then that client agent and the management server  communicate using internal calling mechanisms.","The workstation agents - have the capability to provide access to the corresponding workstations - in the workstation sharing pool. The workstations agents - enable invocation of remote applications and sharing of desktop information among the workstations - in the workstation sharing pool. The workstation agents - also have the capability of enforcing workstation protection and monitoring.","The client agents - have the capability of accepting remote desktop information obtained from the workstation agents - and sending results back to the corresponding users. For example, the client agent  has the capability of accepting remote desktop information from any one or more of the workstation agents -, respectively, and displaying the obtained remote desktop on a local display of the workstation .","In one embodiment, remote desktop information is transferred between the workstation agents - and the client agents - via the network  using a virtual network computing (VNC)-like protocol. A VNC-like protocol enables the transfer of frame buffer information from the workstation agents - to the client agents - and the transfer of user input information from the client agents - to the workstation agents - via the network .","The management server  authenticates user requests obtained from the client agents -. The management server  manages user accounts and registration of the client workstations - into the workstation sharing pool. The management server  allocates the workstations - in the workstation sharing pool in response to user requests, controls user access sessions and remote desktop sharing, and enforces access and workstation protection.","The directory server  is an information repository for persistently maintaining user and workstation information.","Each client agent - provides a graphical user interface (GUI) to users of the corresponding workstation -. In one embodiment, the client agents - generate a graphical user interface using the Java-swing technique.","In one embodiment, the graphical user interfaces generated by the client agents - include a main manual bar and a main table window. The main manual bar has three drop-down manuals that include a file manual, a service manual, and an admin manual.","The file manual provides a set of selection functions including a FILE COPY selection and an EXIT selection. The FILE COPY selection enables a user to transfer files between any two of the workstations - in the workstation sharing pool. The EXIT selection enables the user to exit the workstation sharing system.","The service manual provides a set of selection functions including a CHECK-IN selection, a CHECK-OUT selection, an ACCESS selection, a STOP-ACCESS selection, a DELEGATION selection, a STOP DELEGATION selection, and a GET-ALL selection. The CHECK-IN selection enables a user to check a workstation into the workstation sharing pool. The CHECK-OUT selection enables a user to check out a workstation from the workstation sharing pool.","The ACCESS selection of the service manual enables a user to obtain a remote desktop from a remote workstation in the workstation sharing pool and display the obtained remote desktop on a local screen of their local workstation. An obtained remote desktop enables a user to interact with a remote workstation in the workstation sharing pool by selecting items on the remote desktop. The STOP-ACCESS selection pops up to stop an open remote desktop session.","The DELEGATION selection of the service manual enables a user to push a remote desktop obtained from one remote workstation in the workstation sharing pool onto another remote workstation in the workstation sharing pool. The STOP DELEGATION selection stops a delegation between two remote workstations.","The GET-ALL selection of the service manual enables a user to obtain a list of all of the workstations that are currently the workstation sharing pool. The workstations in the workstation sharing pool are presented to a user in a table form.","In one embodiment, communication between the client agents - and the management server  via the network  is based on request\/response model of remote procedure calls (RPC) using the simple object access protocol (SOAP) which is an XML-based protocol. The SOAP RPC on the top of http mechanism enables the client agents - to penetrate through any firewall in the network  by using the public http port to access a remote desktop.","The client agents - digitally sign all requests that are sent to the management server  and the digital signatures are used for authentication purposes. In one embodiment, the management server  returns a credential to each client agent - after an initial successful login. The credentials are then used by the client agents - for signing all subsequent requests to the management server .","The workstation agents - each implement a light weight http server that only accepts requests from the management server  and the workstations that are authorized by the management server . The workstation agents - provide support for SOAP RPC. The SOAP RPC protocol is used to encode information exchange between the workstation agents - and the management server  and workstations authorized by the management server .","The workstation agents - enable the execution of applications on the corresponding workstations -. The workstation agents - provide application start, application stop, application control, and application monitoring functionality. Each workstation agent - also provides as needed a remote desktop sharing server for supporting desktop sharing. The remote desktop sharing servers push the local desktops forward to remote desktop sharing clients in the client agents -.","Each workstation agent - keeps track of any corresponding run-time application threads on the corresponding workstation - and monitors system resource utilization in the corresponding workstation -. The workstation agents - also provide file management functionality and can traverse the directory trees, create directories and files on the corresponding workstations -, and read\/write files on the corresponding workstations - on behalf of a remote peer via an RPC application programming interface (API).","The management server  is the central workstation management component of the present system architecture. For scalability, the management server  may be replicated over the wide-area of the geographically dispersed workstations - so that the global management is reached by the cooperation among a group of management servers. The cooperation may be facilitated by the directory server .","In one embodiment, the management server  is implemented as a multi-threading process with SOAP based RPC API. The management functionalities of the management server  include user account management, workstation management, and applications management.","The user account management functions of the management server  include user account creation, user account deletion, and user account query. A user account class in one embodiment includes the following fields: user name, password, group ID, privilege, and description. Users include ordinary users and administrators. An administrator may access user account management functions, workstation management functions, and applications management functions of the management server . An ordinary user may only access workstations and applications without privilege to do any management functionalities.","The management server  includes a workstation check-in function and work station check-out function. The workstation check-in and check-out functions are two synchronized functions for maintaining consistency in workstation information contained in the directory server . The workstation sharing agents perform remote procedure calls to the check-in and check-out functions of the management server  to check-in and check-out their corresponding workstations - in and out of the workstation sharing pool in response to menu selections from the users of the workstations -.","The management server  provides a function that enables a user to query the shared workstation pool and select workstation resources. For remote desktop sharing, the management server  includes two types of sharing functions including remote desktop access where a user locally accesses the desktop of a remote workstation and desktop delegation where a user causes the management server  to push the desktop of a remote workstation onto another remote workstation. The desktop delegation function includes the delegation of access rights.","The management server  also includes a set of basic file management functions that enable a user to traverse the directory tree of a remote workstation and do perform file copying transparently. These file management functions in one embodiment are implemented using a SOAP based RPC application programming interface (API) on each of the workstations -.","The management server  keeps track of the registered applications that the users of the workstations - may remotely invoke. The management server  also includes functions for registering applications and for deregistering applications that may be remotely invoked.","In one embodiment, the management server  enforces security using an SSL-based login session, signed requests, and access control. When a user initially performs a login, the password and login name provided by the user are passed to the management server  by a client agent using an https session. Thereafter, all requests from that user are signed with the credential returned by the management server  to the client agent of the user in the login session. For protection of each workstation - in the sharing pool, access control lists are maintained by the workstation agents -. Each workstation agent - verifies each request to a workstation against the corresponding access control list.","The directory server  may be held in a persistent storage in a local file system of one or more of the workstations - or on a separate workstation. In one embodiment, the directory server  maintains user account information and workstation information using the Java HasMap class. The HasMap class enables fast key-based information retrieval. The front end of the directory server  is a SOAP RPC based http server that performs directory access.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["40","46"]},"A user of the workstation  makes an ACCESS selection in the service manual of the graphical user interface generated by the client agent  on a local display of the workstation . In response to the ACCESS selection, the client agent  launches a desktop sharing client  on the workstation  and sends an access remote workstation request to the management server . The desktop sharing client  enables a remote workstation in the workstation sharing pool to send a remote desktop back to the client agent . The remote workstation access request sent to the management server  identifies the remote workstation  as the target of the request.","In response to receipt of the remote workstation access request, the management server  performs the appropriate security checks and forwards the remote workstation access request to the workstation agent  in the workstation .","In response to receipt of the forwarded remote workstation access request, the workstation agent  launches a desktop sharing server . The desktop sharing server  services desktop sharing requests from the desktop sharing client  in the workstation . The desktop sharing client  and the desktop sharing server  establish a VNC-like communication channel via the network  that enables the transfer of frame buffer display information for a local display of the workstation  to the workstation  and the transfer of user input information from the user input devices of the workstation  to the workstation .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["40","46"]},"A user of the workstation  in this example initiates the file copy operation by making an FILE COPY selection in the service manual of the graphical user interface generated by the client agent  on a local display of the workstation . In response to the FILE COPY selection, the client agent  sends a file copy request to the management server . The file copy request identifies the workstation  as the source of the file copy and the workstation  as the destination of the file copy and identifies the file that is to be copied.","In response to receipt of the file copy request from the client agent , the management server  performs the appropriate security check and sends messages to the workstation agents  and  in the workstations  and , respectively, that trigger the file copy.","In response to the triggering messages, the workstations  and  perform a file copy operation via the network . The file copy operation in one embodiment is performed between the workstation agents  and  using a SOAP-based RPC protocol for file exchange. The workstation agents  and  include functionality for reading and writing files on the file systems of the corresponding workstations  and .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 5","b":["20","20","60","64","62"]},"The GUT thread  provides a graphical user interface to users of the workstation  including a main manual bar and a main table window with a file manual, a service manual, and an admin manual as described above.","The service thread  runs concurrently with the GUT thread  and transfers information between the GUT thread  and the management server . The service thread  transfers requests to the management server  in response to selections made by users via the GUT thread .","For example, the service thread  sends a remote workstation access request to the management server  when a user makes an ACCESS selection via the GUT . Similarly, the service thread  sends a file copy request to the management server  when a user makes an FILE-COPY selection via the GUT . A GET-ALL selection in the service manual by a user causes the service thread  to obtain a list of all workstations currently in the workstation sharing pool from the management server  and display the list to the user of the workstation .","In one embodiment, communication between the service thread  and the management server  is based on a SOAP RPC mechanism. The service thread  digitally signs all requests that are sent to the management server .","An ACCESS selection in the service manual of the GUI thread  by a user of the workstation  causes the GUI thread  to send a remote workstation access request to the service thread . In response to receipt of the remote workstation access request, the service thread  starts the application thread . The application thread  in turn launches the desktop sharing client  on the workstation . The desktop sharing client  enables a remote workstation in the workstation sharing pool to send a remote desktop back to the client agent . The application thread  is active during the period of a remote desktop access session. The application thread  has the capability of starting and stopping the desktop sharing client , and monitoring and controlling remote desktop sessions. Remote desktop accessing sessions in one embodiment do not interact with the management server .","In one embodiment, the client agent  is a pure java application with the exception of the remote desktop sharing client  which is VNC-like software.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6","b":["36","36","70","72","74"]},"The agent daemon thread  is the service communication component of the workstation agent . The agent daemon thread  is a light weight http server that only accepts requests from the management server  and the workstations that are authorized by the management server . The agent daemon thread  provides support for SOAP based RPC.","The agent thread  is a work dispatching thread that spans application threads in the workstation agent  to handle service requests. The agent thread  keeps track of run-time application threads and monitors system resource utilization in the workstation . The agent thread  also provides file management functionality and can traverse the directory trees, create directories and files on the workstation , and read\/write files on the workstation  on behalf of a remote peer via an RPC application programming interface (API).","The application thread  provides for the execution of an application on the workstation . The application thread  provides application start, stop, control, and monitoring functionality. The application thread  starts the remote desktop sharing server  for supporting desktop sharing. The remote desktop sharing server  is started by the application thread  using Java native interface. The remote desktop sharing server  pushes the local desktop of the workstation  forward to the remote desktop sharing client  of the client agent .","The agent daemon thread , the agent thread , and the application thread  are all active in a process and are pure Java programs so that the workstation agent  can run on any platform or device having a Java virtual machine.","The present architecture may be deployed in a variety of arrangements on a variety of platforms. For example, a client agent, a management server, a directory server, and a workstation agent may be loaded from computer readable storage media and may be deployed on a single workstation by being loaded onto tangible computer readable storage media of the workstation. A management server, a directory server, and a client agent may be deployed on a workstation for a single user. For easing installation, a client agent and a workstation agent may be put in a web-server for a user to download. The same web server may also host a management server. The client and workstation agents may be downloaded using web protocols by a web browser executing in a workstation. In addition, an execution environment, for example a Java virtual machine, may be downloaded from a management server or some other server.","The present teachings provide a pure Java based portable middleware architecture that can run on any computers and devices that include a Java virtual machine. The architecture enables aggregation of a variety of heterogeneous computers into a shared pool and management of the computers in the pool. The use of communication based on SOAP RPC enables a wide range of services and the integration of the present architecture with existing and future XML-based services, e.g. UDDI.","The code that implements the present architecture consumes relatively little storage space and may be deployed in a variety of different environments. The present component based architecture enables extensibility. The present techniques seamlessly provide remote desktop sharing in a user-transparent way among a group of geographically distributed workstations. Directory browsing and file transfer may be performed between any two heterogeneous workstations.","The foregoing detailed description of the present invention is provided for the purposes of illustration and is not intended to be exhaustive or to limit the invention to the precise embodiment disclosed. Accordingly, the scope of the present invention is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is described with respect to particular exemplary embodiments thereof and reference is accordingly made to the drawings in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
