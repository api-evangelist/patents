---
title: Method, system, and program for specifying multidimensional calculations for a relational OLAP engine
abstract: Provided is a system, method, and program for specifying multidimensional calculations. Selection of a subset of a cube model metadata object that is generated from a facts metadata object and one or more dimension metadata objects is received. The facts metadata object references one or more measure metadata objects. A statement is generated for retrieving multidimensional information using metadata in the cube model metadata object and the measure metadata objects, wherein each of the measure metadata objects specifies one or more aggregations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07953694&OS=07953694&RS=07953694
owner: International Business Machines Corporation
number: 07953694
owner_city: Armonk
owner_country: US
publication_date: 20030113
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Additional Implementation Details"],"p":["1. Field of the Invention","The present invention relates to specifying multidimensional calculations for a relational on-line analytical processing (OLAP) engine.","2. Description of the Related Art","On-line analytical processing (OLAP) has become increasingly popular. Instead of reviewing piles of static reports printed on green-bar paper, an OLAP analyst can explore business results interactively, dynamically adjusting the view of the data and asking questions and getting answers almost immediately. This freedom from static answers to fixed questions on a fixed schedule allows business analysts to operate more effectively and to effect improvements in business operations.","Nigel Pendse introduced the term \u201cFASMI\u201d to characterize OLAP systems. The FASMI characteristics are: Fast, Analysis, Shared, Multidimensional, and Information. For further information, see N. Pendse, \u201cWhat Is OLAP?\u201d The OLAP Report.","As for fast, in keeping with the spirit of the \u201cO\u201d in OLAP, such systems need to provide results very quickly usually in just a few seconds, and seldom in more than 20 or 30 seconds. This level of performance is key in allowing analysts to work effectively without distraction.","As for analysis, considering the \u201cA\u201d in OLAP, OLAP systems generally provide rich analytic functions appropriate to a given application, with minimal programming.","As for shared, an OLAP system is usually a shared resource. This means that there is a requirement for OLAP systems to provide appropriate security and integrity features. Ultimately, this can mean providing different access controls on each cell of a database.","As for multidimensional, multidimensionality is the primary requirement for an OLAP system. OLAP products present their data in a multidimensional framework. Dimensions are collections of related identifiers, or attributes (product, market, time, channel, scenario, or customer, for example) of the data values of the system. The identifiers (\u201cThe Lord of the Rings-DVD,\u201d \u201cSan Jose, Calif.,\u201d \u201c2002,\u201d \u201cRetail Rental,\u201d and \u201cJohn Q. Public,\u201d for example) belonging to the collection for a particular dimension generally have some sort of structure, such as hierarchical. Sometimes there is more than one natural structure for these identifiers.","The multidimensional characteristic means that an OLAP system can quickly switch among various orientations of dimensions, as well as among various subsets and structural arrangements of a dimension. Because of the multidimensional nature of OLAP systems, the collections of data that they implement are referred to as cubes. As for information, OLAP systems store and calculate information. Data for OLAP systems often come from one or more operational systems. Analytical models are applied to these data, and the results are either stored in the system or generated at query time. The quantity of information that a particular OLAP system can manage is one characteristic of that system.","Enterprises have been storing multidimensional data, using a star or snowflake schema, in relational databases for many years. Over time, relational database vendors have added optimizations that enhance query performance on these schemas. During the 1990s many special purpose databases were developed that could handle added calculational complexity and that generally performed better than relational engines.","Multidimensional OLAP (MOLAP) refers to the family of OLAP systems in which special-purpose file systems or indexes are used to store cube data. Express Web Publisher, Essbase\u2122, TM1, and Pilot Suite are a few examples of products based on special-purpose storage and indexing technology. Microsoft's OLAP offering also includes a MOLAP engine. These systems are often read-only systems that are loaded with base data periodically, then derived results are calculated, stored, and indexed. Scalability of MOLAP systems is often limited by the size of the batch window within which derived results are calculated and stored. To improve scalability, such systems often have a means for deferring calculation of some derived results until query time.","For relational OLAP (ROLAP), star schemas have been used for many years as a means for representing multidimensional data in a relational database. Many commercial software development companies, such as MicroStrategy, Brio, Business Objects, Metacube, Hyperion, and Metaphor, have developed batch or interactive multidimensional reporting and exploration interfaces for relational star schemas. These systems were all designed and implemented before super aggregate operators were added to the Structured Query Language (SQL) language definition.","In particular, until a few years ago, relational databases allowed the calculation of aggregates at only a single level per query. For example, one SELECT statement with a GROUP BY clause would be used to retrieve a result set at a quarter level (i.e., for a set of quarters), while another SELECT statement with a GROUP BY clause would be used to retrieve a result set at a month level (i.e., for a set of months). This forced relational OLAP systems to run multiple queries against the database in order to calculate cells at varying levels.","To facilitate OLAP-type query creation and provide more advanced optimizations, a DB2\u00ae Relational Database Management System (RDBMS), available from International Business Machines Corporation, implemented three new super aggregate operators that were added to the SQL standard to allow a single query to generate multiple aggregates: ROLLUP, CUBE, and GROUPING SETS. These super aggregate operators are extensions to the GROUP BY clause and specify that aggregates be generated at multiple levels. For example, one SELECT statement may be used to obtain a result set of calculations of aggregates at multiple levels (e.g., both quarter and month).","Note that these super aggregate operators are more than mere shorthand for generating multiple grouping sets. Because multiple grouping sets are requested in a single statement, the DB2\u00ae RDBMS can build an execution plan that generates all the grouping sets in such a way that each input row needed for the calculation is referenced only once. This can result in performance improvements of orders of magnitude, especially when the set of input rows does not fit in the buffer pool (i.e., cache).","Prior art systems are designed to produce multidimensional reports showing results with different levels of granularity by issuing multiple queries. Multiple result sets are obtained for the multiple queries, and the result sets are merged to form a single report. Such systems depend on some sort of description (metadata) of the roles for the tables and columns in a star schema for generating the necessary SQL statements to retrieve the data to produce the multidimensional reports. The precise metadata varies from product to product.","Multidimensional on-line analytical processing (OLAP) systems (e.g., from companies such as Hyperion, Cognos, and Microsoft) are designed to return multidimensional result sets naturally, when given sets of members for each edge of a multidimensional cube. The multidimensional OLAP systems are also designed to compute some or all of the results in advance of any query.","Multidimensional analysis has been done using SQL since the introduction of relational databases, but relational OLAP systems have not been able to return multidimensional results sets naturally or compute some or all of the results in advance of a query.","Thus, there is a need in the art for an improved relational OLAP system.","Provided are a method, system, and program for specifying multidimensional calculations. Selection of a subset of a cube model metadata object that is generated from a facts metadata object and one or more dimension metadata objects is received. The facts metadata object references one or more measure metadata objects. A statement is generated for retrieving multidimensional information using metadata in the cube model metadata object and the measure metadata objects, wherein each of the measure metadata objects specifies one or more aggregations.","The described implementations of the invention provide a method, system, and program for specifying multidimensional calculations in a relational OLAP system.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several implementations of the present invention. It is understood that other implementations may be utilized and structural and operational changes may be made without departing from the scope of the present invention.","A. Multidimensional Metadata Introduction","In certain implementations, the invention provides multidimensional metadata objects and techniques for using the multidimensional metadata objects. For ease of reference, the invention will be referred to as an \u201cOLAP multidimensional metadata system \u201d herein, and multidimensional metadata objects will be referred to as \u201cmetadata objects.\u201d","In certain implementations, the OLAP multidimensional metadata system  is implemented in a DB2\u00ae Universal Database (UDB) RDBMS, available from International Business Machines Corporation. Although the present specification describes the use of IBM's DB2\u00ae UDB RDBMS software, those skilled in the art will recognize that the present invention can use other RDBMS software, such as RDBMS software available from Oracle, IBM Informix, Sybase. Additionally, the present invention can run on computers using various operating systems, such as IBM z\/OS\u00ae, IBM AIX\u00ae, Microsoft Windows\u00ae 2000, Microsoft Windows\u00ae XP, Linux, Solaris, HP-UX.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 1","b":["110","120","150","110","130","140","130","140"]},"An OLAP multidimensional metadata system  includes multidimensional metadata software  (e.g., a stored procedure application programming interface (API)), a user interface , and multidimensional metadata objects . The multidimensional metadata software  is used to create, store, and access the multidimensional metadata objects . Optionally, a user interface  may be provided for a user or administrator to send commands to the multidimensional metadata software . A user may create, access, modify, or delete multidimensional metadata objects  by submitting commands via the user interface . The commands are received and processed by the multidimensional metadata software . For example, the multidimensional metadata software  may create and store multidimensional metadata objects .","In certain implementations, the OLAP multidimensional metadata system  provides an add-on feature for an RDBMS , such as DB2\u00ae Universal Database (referred to herein as DB2\u00ae UDB), that improves the ability of the RDBMS  to perform OLAP processing. The invention streamlines the deployment and management of OLAP solutions, and improves the performance of OLAP tools and applications.","In particular, the OLAP multidimensional metadata system  provides metadata objects. The new metadata objects are stored in, for example, a database catalog (e.g., the DB2\u00ae UDB catalog) that describes the dimensional model and OLAP constructs of existing relational data. The database catalog provides a single repository from which OLAP applications can capture multidimensional metadata. In certain implementations, the metadata objects may reside on a data store other than the database catalog or may reside across multiple data stores. With the information in the central repository, a database optimizer is able to use techniques specific to star schemas for optimizing the execution of queries.","With the metadata objects, the invention can optimize OLAP query performance by aggregating data in summary tables and creating indexes. The OLAP multidimensional metadata system  also provides a metadata programming interface. In particular, the OLAP multidimensional metadata system  provides a SQL-based and extensible mark-up language (XML)-based application programming interface (API) for OLAP tools and application developers. Through, for example, Command Line Interface (CLI), Open Database Connectivity (ODBC), or Java Database Connectivity (JDBCTM) connections or by using, for example, embedded SQL to DB2\u00ae UDB, applications and tools can use a single stored procedure (i.e., an example of multidimensional metadata software ) to create, modify, and retrieve metadata objects. In certain implementations, multiple stored procedures may provide the functionality for creating, modifying, and retrieving metadata objects.","OLAP multidimensional metadata system  metadata objects describe relational information as intelligent OLAP structures, but the multidimensional metadata objects provided by the invention are different from traditional OLAP objects. The metadata objects of the invention store metadata, meaning the metadata objects store information about the data in the base tables. Metadata objects describe where pertinent data is located and can also describe relationships within the base data. For example, a facts metadata object is a specific metadata object that stores information about related measures, attributes and joins, but does not include the data specifically from the base fact table.","Metadata provides a new perspective from which to understand data. Without metadata objects, a database catalog only knows about table and column names and cannot store information about the meanings of the tables and columns or how the tables and columns relate to each other. With metadata objects, this information may be stored.","Each metadata object completes a piece of the big picture showing what the relational data means. Some metadata objects act as a base to directly access relational data by aggregating data or directly corresponding to particular columns in relational tables. Other metadata objects describe relationships between the base metadata objects and link these base metadata objects together. Ultimately, all of the metadata objects can be grouped together by their relationships to each other, into a metadata object called a cube model. A cube model represents a particular grouping and configuration of relational tables. The purpose of a cube model is to describe OLAP structures to a given application or tool. Cube models tend to describe all cubes that different users might want for the data that are being analyzed. A cube model groups dimensions and facts, and offers the flexibility of multiple hierarchies for dimensions. A cube model conveys the structural information needed by query design tools and applications that generate complex queries on star schema databases.","The multidimensional metadata object model is designed to describe the schemas used in relational databases to represent multidimensional data. One way to organize such data is by using a star or snowflake schema (in snowflake schemas the dimension tables are normalized). However, the model is flexible enough to handle any type of schema (e.g., more normalized schemas).","A.1 Multidimensional Metadata Overview","The multidimensional metadata enables maintenance of metadata about OLAP structures stored in data warehouses. This information was not previously available in the database catalog and frequently is not documented by data warehouse metadata repositories. Multidimensional metadata helps the data warehouse designer represent the structural relationship among tables and their columns. Once this metadata exists in the database catalog, other components of the RDBMS , such as a database optimizer (e.g., a DB2\u00ae UDB optimizer), can take advantage of the structural information and perform queries, against data described by these new OLAP metadata objects, faster. The metadata objects can also assist business intelligence tools by providing the base structural information needed to generate multidimensional queries against the data warehouse. In order to capture OLAP structural information, the OLAP multidimensional metadata system  defines several new metadata objects. These metadata objects are able to describe key aspects of schemas frequently used to model OLAP data, such as star-join and snowflake schemas.","Adding the metadata objects to a database catalog provides full functionality and integration with other database components. The new metadata objects are owned by a schema, in the same way as regular tables. Another design point for the metadata objects is that most of them are independently useful. That is, the metadata objects provide information about the underlying relational schema, whether or not the metadata objects are included in a more complex multidimensional structure.","A cube model can be constructed in many ways, but is often built to represent a relational star schema or snowflake schema. A cube model based on a simple star schema is built around a central facts metadata object that describes aggregated relational data from a fact table. Measure metadata objects describe data calculations from columns in a relational table and are joined together to create the facts metadata object.  illustrates that a facts metadata object  and measure metadata objects ,  relate to relational data  in accordance with certain implementations of the invention.","Dimension metadata objects are connected to the facts metadata object in a cube model just as the dimension tables are connected to the fact table in a star schema. Columns of data from relational tables are represented by attribute metadata objects that are joined together to make up a dimension metadata object.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 3","b":["310","320","330","300","300","310","320","330","310","320","330","330"]},"Three joins join each dimension table , ,  to the central facts table  on the corresponding dimensional key attributes. In this example, the dimension tables , ,  are joined with the facts table  based on either the TimeID, ProductID, or RegionID attributes.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 4","b":["406","410","450","406","408","408","452","410","412","414","416","454","456","450"]},"Hierarchies store information about how the attributes within a dimension are related to each other and structured. As a metadata object, a hierarchy provides a way to calculate and navigate a dimension. Each dimension has a corresponding hierarchy with levels defined for each member attribute. For example, the Region dimension has a RegionH hierarchy with levels defined for the State and City attributes, and also references the CityPop AR attribute relationship. In a cube model, each dimension can have multiple hierarchies, but the example star schema has one hierarchy defined for each dimension.","In a star schema, all of the dimension metadata objects are connected in a star shape to a central facts metadata object to create a cube model. Join metadata objects can join tables to create a facts metadata object or a dimension metadata object. Metadata joins can also act as glue within the cube model by joining facts metadata objects to dimension metadata objects. The dimension metadata objects have information about all of their component hierarchies, attributes, attribute relationships and related joins. Facts metadata objects have information about all of their component measures, attributes, and related joins.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 5","b":["500","550","510","512","514","516","518","520"]},"Cube model metadata objects are flexible metadata objects whose components may be reused to create more precise cube metadata objects for specific applications. For example, a cube model metadata object may have 37 facts, but one cube metadata object generated from the cube model metadata object may eliminate one or more dimension metadata objects, one or more levels of a dimension metadata object, and\/or one or more measure metadata objects.","In addition to cube model metadata objects, there is a more specific metadata object called a cube metadata object. A cube metadata object is the closest metadata object to an OLAP conceptual cube. A cube metadata object is a specific instance or subset of a cube model metadata object. A cube metadata object has a specific set of similar but more restrictive metadata objects derived from the parent cube model metadata object including: cube dimensions, cube hierarchies, and cube facts. For example, a RegionCubeDim is a cube dimension that is a subset of attributes derived from the Region dimension. RegionCubeDim references the State and City attributes, but does not reference the City_Population attribute or CityPop AR attribute relationship. The RegionCubeDim references the Region dimension that it scopes and all of the structural information, including the join information, stays with the cube model Region dimension.","In certain implementations, a cube metadata object has one cube hierarchy defined per cube dimension, while a dimension metadata object can have many hierarchies defined for the cube model metadata object. This structural difference between a cube metadata object and a cube model metadata object allows retrieval of a cube metadata object with a single SQL statement.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 6","b":["600","610","620","600","610","600","620","620"]},"An example is provided for better understanding of the invention. The example is based on a common structure used in data marts, a star-join schema. For the star join schema, instances of the metadata objects are created based on the Base\/Relational, Multidimensional, and OLAP layers.  illustrates a simple star-join schema consisting of a fact table , Fact, and three dimension tables Time , Product , and Region  in accordance with certain implementations of the invention.","Existing database catalogs typically store table and column names. The information about what roles these tables and columns play, and how the tables and columns relate to each other is lost. However, with the OLAP multidimensional metadata system , this information is captured by creating metadata objects.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 7","b":"700"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 8","b":["800","810","820","800","810","820","820","850","860","870","850","860","870","850","860","870"]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 9","b":["900","900","910","920","930"]},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 10","b":["1000","1010","1020","1030"]},"The OLAP layer is composed by cube model and cube metadata objects. A cube model metadata object describes the facts and dimensions that are interesting to a given application. The dimensions of a cube model metadata object can have multiple hierarchies defined, which makes a cube model metadata object a very flexible structure. A cube metadata object is derived from a cube model metadata object, and so all cube dimensions, cube hierarchies, and cube facts metadata objects are derived from the cube model metadata object. A difference between a cube model metadata object and a cube metadata object is that in a cube metadata object one hierarchy is defined per dimension, which makes it possible to retrieve a cube metadata object with a single SQL statement.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 11","FIG. 3"],"b":["1100","1150"]},"A.2 Metadata Object Properties","Each metadata object has a set of general properties in addition to metadata object-specific properties. The general properties are used to identify the metadata object instances, to describe the usage or role of the metadata object instances, and to track metadata object instance changes. In certain implementations, the metadata objects are named using a schema in the same way that other database metadata objects are named. Full qualifications of the metadata object may be required when the default user name schema is not desired.","Table 1 describes the general properties that exist for all metadata objects in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Name of the metadata object."]},{"entry":[{},"Schema","Schema that owns the metadata object."]},{"entry":[{},"Business","Name presented to the end user. This name may be"]},{"entry":[{},"name","used in graphic user interfaces as a name more"]},{"entry":[{},{},"meaningful to the end user."]},{"entry":[{},"Comments","Textual description or comment on the nature or"]},{"entry":[{},{},"usage of the metadata object."]},{"entry":[{},"Create time","Time the metadata object was created."]},{"entry":[{},"Creator","User (schema) that defined the metadata object."]},{"entry":[{},"Modify time","Time the metadata object was last modified."]},{"entry":[{},"Modifier","User (schema) that performed the modification."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In addition to a common set of general properties shared by all metadata objects, each metadata object has a set of metadata object specific properties. These metadata object specific properties describe the components and qualities that define the metadata object.","The cube model is a representation of a logical star schema. The cube model is a grouping of relevant dimension metadata objects around a central facts metadata object. Each dimension can have multiple hierarchies, which increases the flexibility of the cube model. The structural information about how to join the tables used by the facts and dimension metadata objects is stored in the cube model. Also stored in the cube model is enough information to retrieve OLAP data. Other reporting and OLAP tools that understand the cube model and can handle multiple hierarchies of a specific dimension can benefit from the use of a cube model.","Cube models define a complex set of relationships and can be used to selectively expose relevant facts and dimensions to an application. Each join metadata object connecting a dimension to the central facts metadata object is stored with the corresponding dimension as a set. Subsets of cube model components can be used by many cubes for different analysis purposes.","An empty cube model may be created that does not have a facts metadata object or any dimensions. However, the cube model is completed before creating a corresponding cube. The OLAP multidimensional metadata system  validates a cube model by ensuring that the cube model includes a facts metadata object, at least one dimension, and joins between the existing facts and dimensions, and that all of the attributes reference valid tables. A hierarchy is not required to consider a cube model complete, however, to be able to define a cube from a cube model, at least one hierarchy per dimension is defined.","Each metadata object has a set of metadata object-specific properties that describe the components and qualities that define the metadata object. The metadata object specific properties of a cube model are described Table 2 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Facts","Facts used in the cube model."]},{"entry":["Set of","Dimensions that are used in the cube model and their"]},{"entry":["(dimension,","corresponding joins."]},{"entry":"join)"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The facts metadata object groups related measures which are interesting to a given application. Multiple relational fact tables can be joined on specific attributes to map additional related measures. The facts metadata object stores information about the attributes used in fact to dimension joins, and the attributes and joins used to map the additional measures across multiple database tables. Therefore, in addition to a set of measures, a facts metadata object stores a set of attributes and a set of joins. A facts metadata object is used in a cube model as the center of a star schema.","The facts metadata object plays the role of a fact table in a star schema. Just as a fact table does, a facts metadata object gathers measurement entities, represented in the database catalog by measures. These need not come from the same table, allowing the designer to group measures as required for any OLAP application.","The metadata object specific properties of a facts metadata object are described in Table 3 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Set of","Set of all related measures in the facts metadata"]},{"entry":[{},"measures","object."]},{"entry":[{},"Set of","Set of all attributes used in the facts metadata object."]},{"entry":[{},"attributes",{}]},{"entry":[{},"Set of joins","Set of all joins needed to join all of the specified"]},{"entry":[{},{},"measures and attributes."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The dimension metadata object plays the role of a dimension table in a star schema. Dimensions group related attributes, which together describe some aspect of one or more measures. Thus, the dimension metadata object provides a way to categorize a set of related attributes that together describe one aspect of a measure. Dimensions are used in cube models to organize the data in the facts metadata object according to logical categories such as Region, Product, or Time. Related attributes and the joins needed to group these attributes together are defined in the dimension metadata object specific properties.","Dimensions reference one or more hierarchies. Hierarchies describe the relationship and structure of the dimensional attributes and can be used to drive navigation and calculation of the dimension.","Dimensions also have a type that describes whether the dimension is time oriented. For example, a dimension called Time might contain attributes such as Year, Quarter, and Month, and would be a time type. Another dimension called Region might contain attributes such as Country, State, City, and Population and would be a regular type. Type information can be used by applications to intelligently and appropriately perform time related functions.","The metadata object specific properties of dimension metadata objects are described in the following Table 4 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Set of","Set of all attributes used in the dimension."]},{"entry":[{},"attributes",{}]},{"entry":[{},"Set of joins","Set of all joins needed to join all of the specified"]},{"entry":[{},{},"attributes. The joins needed to join the dimension"]},{"entry":[{},{},"tables are specified here."]},{"entry":[{},"Set of","Set of hierarchies that apply to the dimension."]},{"entry":[{},"hierarchies",{}]},{"entry":[{},"Type","Dimension type."]},{"entry":[{},"[REGULAR,",{}]},{"entry":[{},"TIME]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"A hierarchy defines relationships among a set of one or more attributes within a given dimension of a cube model. Defining these relationships provides a navigational and computational means of traversing a given dimension. Multiple hierarchies can be defined for a dimension of a cube model. The hierarchy metadata object also references a set of attribute relationships that link attributes in the hierarchy to other related attributes. The attributes that are directly related by an attribute relationship can be queried as part of the hierarchy. For example, a hierarchy for a Region dimension can have a City attribute, and an attribute relationship can link City to a City_Population attribute. This hierarchy can include City_Population information in a query that includes City.","A hierarchy describes parent-child relationships among attributes. This information is referred to by a dimension to indicate how dimension members can be browsed, and how to aggregate data in the dimension.","The hierarchy type describes the relationship among the attributes within the hierarchy. The following four hierarchy types are supported: balanced, unbalanced, ragged, and network.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 12","b":["1200","1200","1210","1220","1230"]},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 13","b":["1300","1300"]},"A ragged hierarchy is one in which each level has a consistent meaning, but the branches have inconsistent depths because at least one member attribute in a branch level is unpopulated. A ragged hierarchy can represent a geographic hierarchy in which the meaning of each level such as city or country is used consistently, but the depth of the hierarchy varies.  illustrates a ragged hierarchy  in accordance with certain implementations of the invention. The ragged hierarchy  shows a geographic hierarchy that has Continent, Country, Province\/State, and City levels defined. One branch has North America as the Continent, United States as the Country, California as the Province\/State, and San Francisco as the City. However the hierarchy  becomes ragged when one member does not have an entry at all of the levels. For example, another branch has Europe as the Continent, Greece as the Country, and Athens as the City, but has no entry for the Province\/State level because this level is not applicable to Greece. In this example, the Greece and United States branches descend to different depths, creating a ragged hierarchy .","A network hierarchy is one in which the order of levels is not specified, but in which levels do have semantic meaning.  illustrates a network hierarchy  that describes product attributes such as Color, Size, and PackageType in accordance with certain implementations of the invention. Because the attribute levels do not have an inherent parent-child relationship, the order of the levels may vary. A widget company might have member entries, such as white for Color, small for Size, and shrink wrap for PackageType. A second member entry might have red for Color, large for Size, and box for PackageType.","A hierarchy (balanced, unbalanced, ragged, or network) also specifies deployment mechanisms for the hierarchy. A deployment mechanism defines how to interpret the attributes of a hierarchy. The following two deployment mechanisms are supported: standard and recursive.","The standard deployment mechanism uses the level definitions of the hierarchy, where each attribute in the hierarchy defines one level. For example, a balanced hierarchy for a Time dimension would be organized by each defined level including Year, Quarter, and Month. Standard deployment can be used with all four hierarchy types. Table 5 shows how some of the balanced hierarchy attributes for a Time dimension are organized using a standard deployment in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0119","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Year","Quarter","Month"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2001","1quarter","January"]},{"entry":["2001","1quarter","February"]},{"entry":["2001","1quarter","March"]},{"entry":["2002","1quarter","January"]},{"entry":["2002","1quarter","February"]},{"entry":["2002","1quarter","March"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The recursive deployment mechanism uses the inherent parent-child relationships between the attributes of the hierarchy. An unbalanced hierarchy using a recursive deployment is represented as parent-child attribute pairs. For example, Table 6 shows the attribute pairs for the unbalanced hierarchy describing an organization chart shown in  in accordance with certain implementations of the invention. The parent-child attribute pairs include: chief executive officer and executive secretary, chief executive officer and chief operating officer, chief operating officer and director of communications, director of communications and communications specialist. Recursive deployment may be used with an unbalanced hierarchy.",{"@attributes":{"id":"p-0121","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Parent Attribute","Child Attribute"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Chief executive officer","Executive secretary"]},{"entry":[{},"Chief executive officer","Chief operating officer"]},{"entry":[{},"Chief operating officer","Director of communications"]},{"entry":[{},"Director of communications","Communications specialist"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The metadata object specific properties of a hierarchy metadata object are described in the following Table 7 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0123","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"List of attributes","Ordered list of attributes from the top to the"]},{"entry":[{},{},"bottom of a hierarchy. In the case of a"]},{"entry":[{},{},"recursive hierarchy, two attributes are used as"]},{"entry":[{},{},"parent and child."]},{"entry":[{},"Set of attribute","Set of all attribute relationships that link"]},{"entry":[{},"relationships","hierarchy attributes to other attributes."]},{"entry":[{},"Type","Hierarchy type."]},{"entry":[{},"[BALANCED,",{}]},{"entry":[{},"UNBALANCED,",{}]},{"entry":[{},"RAGGED,",{}]},{"entry":[{},"NETWORK]",{}]},{"entry":[{},"Deployment","Hierarchy deployment."]},{"entry":[{},"[STANDARD,",{}]},{"entry":[{},"RECURSIVE]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"A measure metadata object defines a measurement entity and is used in facts metadata objects. Measures become meaningful within the context of a dimension. For example, a revenue of 300 is not meaningful by itself. When a revenue measure is put in the context of a dimension, such as Region, the measure becomes meaningful. For example, the revenue for Vermont is 300. Common examples of measure metadata objects are Revenue, Cost, and Profit.","The measure object makes explicit the existence of a measurement entity. Measures are defined by one or more SQL expressions, which can be as simple as a mapping to a table column, or can involve multiple columns and other measures or attributes. For each measure, a list of aggregations is defined for calculations in the context of a cube model, or cube. Each aggregation in the list specifies an aggregation function, such as SUM, COUNT, MIN, MAX, and a list of dimension in which the aggregation function is applied. An empty dimension set in an aggregation indicates that all remaining dimensions, non-explicitly referenced in the measure, are to be used. A measure will have more than one SQL expression template when the first aggregation function used requires more than one input, such as CORRELATION. A measure can have an empty list of aggregations when it has a single SQL expression template, and it only refers to other measures. In this case, the aggregation of the referenced measures take place. Measures and attributes share the same name space, meaning that the names, when fully qualified by a schema, have to be unique among measures and attributes. Common examples for measures are Sales, Costs, Profit, etc.","Measures are defined by the aggregation of SQL expressions. Table columns, attributes and measures are mapped to a template to build SQL expressions (i.e., a \u201cSQL expression template\u201d). The resulting SQL expressions are then used as input for the first aggregation function of the measure. If a measure has more than one aggregation, the aggregation functions are performed in the order they are listed, with each subsequent aggregation taking the result of the previous aggregation as input. If the SQL expression of the measure metadata object only references other measures, the aggregation function is omitted because the referenced measures describe any required aggregations.","A SQL expression of a measure is created by the combination of two properties: a SQL expression template and a list of columns, attributes, and measures. The SQL expression template uses a token notation where {$$n} is the token and n references a specific column, attribute, or measure from the list. The list of columns, attributes, and measures is ordered, and the position in the list of a column, attribute or measure corresponds to the token \u201cn\u201d value.","SQL expressions are used as input to the first aggregation. Each aggregation specifies a function that is applied to a corresponding dimension set. The aggregation function can be any aggregation function supported by the underlying database, including, for example, SUM, COUNT, MIN, MAX, and CORRELATION. In certain implementations, each dimension is aggregated once by the measure metadata object. If the dimension set is empty, the aggregation function is applied to all dimensions in the cube or cube model that are not specifically being used by another aggregation in the list. In certain implementations, the aggregate functions are user-defined aggregate functions that are supported by RDBMS .","An example of a simple measure is Revenue. The Revenue measure can be created for a cube model with three dimensions: Product, Market and Time. Revenue has a SQL expression template (template=\u201c{$$1} \u201d), which represents a simple mapping to the column specified in the single-item list of columns, attributes, and measures, where list=\u201cColumn Fact.Rev\u201d. The aggregation list is (SUM, <NULL>) where SUM is the aggregation function, and <NULL> is an empty dimension set. The SQL expression is used as input for the SUM aggregation function, resulting in the SQL: SUM(Fact.Rev).","A more complicated measure, Profit, might have a SQL expression template (template=\u201c{$$1}\u2212{$$2}\u201d), where the list of attributes, columns, and measures is list=\u201cMeasure Revenue, Column Fact.Cost\u201d. Replacing the tokens with the correct references, the SQL expression becomes: \u201cRevenue\u2212Fact.Cost\u201d. Expanding the revenue measure reference to its column reference, the SQL expression becomes: \u201cFact.Rev\u2212Fact.Cost\u201d. The aggregation list of the Profit measure is: (SUM, <NULL>). Using the profit SQL expression as input for the SUM aggregation function, the SQL for the Profit measure is: SUM(Fact.Rev\u2212Fact.Cost).","If the measure has an aggregation function, such as CORRELATION, that requires two or more parameters, the measure will have the number of SQL expressions that the function requires as input. That is, the number of parameters matches the number of SQL expressions. For example, if CORRELATION requires two parameters, then there will be two SQL expressions.","Measures also have a data type that is based on SQL data types. The OLAP multidimensional metadata system  automatically determines the data type of a measure. Additionally, measures and attributes share the same name space. Therefore, each name, when fully qualified by a schema, is unique among measures and attributes. The metadata object specific properties of a measure metadata object are described in the following Table 8 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0133","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"List of SQL","List of SQL expression templates used as"]},{"entry":[{},"expression templates","input for the first aggregation function of the"]},{"entry":[{},{},"measure. The templates reference columns,"]},{"entry":[{},{},"attributes, and measures by using a \u2018{$$n}\u2019"]},{"entry":[{},{},"notation. In the template, n is an ordinal"]},{"entry":[{},{},"number corresponding to the list of columns,"]},{"entry":[{},{},"attributes, and measures."]},{"entry":[{},"List of columns,","For each SQL expression template, an"]},{"entry":[{},"attributes, and","ordered list of columns, attributes, and"]},{"entry":[{},"measures","measures is supplied. These columns,"]},{"entry":[{},{},"attributes, and measures are applied as"]},{"entry":[{},{},"specified in the SQL expression template."]},{"entry":[{},"List of aggregations","List of aggregations that specify how a"]},{"entry":[{},"(list of aggregation","measure is calculated. Each aggregation is"]},{"entry":[{},"functions,","composed by a SQL aggregation function"]},{"entry":[{},"dimension sets)","and an optional dimensions set to apply"]},{"entry":[{},{},"the function to."]},{"entry":[{},"Data type (schema,","Determines the data type of the attribute."]},{"entry":[{},"name, length, scale)","Based on SQL data types, and composed"]},{"entry":[{},{},"by data type schema, name, length, and"]},{"entry":[{},{},"scale."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"An attribute represents the basic abstraction of the database table columns. An attribute is defined by a SQL expression that can be a simple mapping to a table column, can involve multiple columns and other attributes, and can involve all functionalities of the underlying database, such as user-defined functions. In certain implementations, when other attributes are used in the defining SQL expression, the other attributes cannot form attribute reference loops. For example, if Attribute A references Attribute B, then Attribute B cannot reference Attribute A.","A SQL expression definition of an attribute is created by the combination of two properties: a SQL expression template and a list of columns and attributes. The SQL expression template uses a token notation where {$$n} is the token with n referencing a specific column or attribute from the list. The list of columns and attributes is ordered, and the position in the list of a column or an attribute corresponds to the token \u201cn\u201d value.","For example, the SQL expression template (template=\u201c{$$1}\u2225\u2033\u2225{$$2}\u201d) can be used with a corresponding list such as list=\u201cColumn CUSTOMER.FIRSTANME, Attribute LastName\u201d to concatenate customers' first and last names with a space between them. Replacing the SQL expression template tokens with the correct list references, the SQL expression is: \u201cCustomer.FirstName \u2225\u2033\u2225 LastName\u201d. The attribute reference is further expanded to a column reference to form the SQL expression: \u201cCustomer.FirstName \u2225\u2033\u2225 Customer.LastName\u201d.","An attribute can serve multiple roles in the design of a data warehouse or data mart. The roles that an attribute can serve are: level, description, dimensional attribute, dimensional key, or key.","A level attributed is used in hierarchies. Examples of common level attributes are: Year and Quarter, State and City. A description attribute is used in a description type of attribute relationship and associates additional descriptive information to another attribute. For example, a table called Product might have an attribute with a product code and a description attribute with a textual description. The dimensional attribute is used in a dimensional type of attribute relationship and defines specific characteristics and qualities of another attribute. Examples of common dimensional attributes are: Population, Size, and Weight. The dimensional key attribute is used to join facts and dimension metadata objects and represents the primary key in a dimension table, or a foreign key from a dimension table to be used in a fact table. The key attribute is used to join tables within a facts or dimension metadata object. Key attributes are often used in a snowflake schema.","Attributes and measures share the same name space. Therefore, each name, when fully qualified by a schema, is unique among attributes and measures. Attribute and measure metadata objects are abstractions of a relational database column. However, they are defined by an SQL expression that can include multiple columns. Measures are more specialized than attributes-they include aggregation functions (column functions) that are used to calculate higher-level summaries from lower-level data.","Table 9 describes the metadata object specific properties that define an attribute metadata object in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0141","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SQL expression","SQL expression that defines the attribute. The"]},{"entry":[{},"template","SQL expression template references columns and"]},{"entry":[{},{},"attributes by using a {$$n} notation, where n"]},{"entry":[{},{},"is an ordinal number corresponding to the list of"]},{"entry":[{},{},"columns and attributes."]},{"entry":[{},"List of columns","Ordered list of all columns and attributes"]},{"entry":[{},"and attributes for","composing the attribute. These columns and"]},{"entry":[{},"SQL","attributes are applied as specified in the SQL"]},{"entry":[{},"expression","expression template."]},{"entry":[{},"Data type","Determines the data type of the attribute."]},{"entry":[{},"(schema, name,","Based on SQL data types, and composed by"]},{"entry":[{},"length, scale)","data type schema, name, length, and scale."]},{"entry":[{},"Role [LEVEL,","Roles that the attribute serves."]},{"entry":[{},"DESCRIPTION,",{}]},{"entry":[{},"DIMATTR,",{}]},{"entry":[{},"DIMKEY, KEY]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"An attribute relationship describes relationships of attributes in general. The relationships are described by a left and a right attribute, a type, a cardinality, and whether or not the relationships determine a functional dependency. The type describes what the role of the right attribute is with respect to the left attribute. For example, a ProductName right attribute describes a ProductCode left attribute. The relationship type between ProductName and ProductCode is DESCRIPTION. The cardinality describes how the instances of the left and right attributes are related and it is interpreted based on cardinality. In a 1:1 cardinality, there is at most one left attribute instance for each right attribute instance, and at most one right attribute instance for each left attribute instance. In a 1:N cardinality, there is at most one left attribute instance for each right attribute instance, and any number of right attribute instances for each left attribute instance. In a N:1 cardinality, there is any number of left attribute instances for each right attribute instance, and at most one right attribute instance for each left attribute instance. In a N:N cardinality, there is any number of left attribute instances for each right attribute instance, and any number of right attribute instances for each left attribute instance.","The functional dependency property tells whether the attribute relationship can also be used as a functional dependency. A functional dependency defines a functional relationship between two attributes. For example, a functional dependency can be defined between attributes such as City and Mayor or Product and Color. The functional dependency tells that every City value determines a Mayor value or that every Product value determines a Color value. This means that the cardinality described in the relationship is set by the designer, which is useful for query optimizations.","One use of an attribute relationship is within the context of a hierarchy in a dimension. Attributes that are directly related to the hierarchy attributes can be queried as part of the hierarchy. This allows each level of the hierarchy to define attributes that complement the information of a given level. For example, a hierarchy can have a City attribute. The City attribute can be related to a City\u2014Population attribute with an attribute relationship. With the attribute relationship information, City\u2014Population information can be included in a query that includes City.","The metadata object specific properties defining an attribute relationship metadata object are described in the following Table 10 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0146","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Left attribute","Left attribute used in the relationship."]},{"entry":[{},"Right attribute","Right attribute used in the relationship."]},{"entry":[{},"Type","Type of relationship described by the attribute"]},{"entry":[{},"[DESCRIPTION,","relationships. The type is used to determine"]},{"entry":[{},"ASSOCIATED]","what role an attribute plays."]},{"entry":[{},"Cardinality [1:1,","Cardinality expected in the join."]},{"entry":[{},"1:N, N:1, N:N]",{}]},{"entry":[{},"Functional","Determines if the attribute relationship is also a"]},{"entry":[{},"dependency","functional dependency."]},{"entry":[{},"[YES, NO]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The join metadata object joins relational tables that are referenced by two metadata objects. Two metadata objects can be joined on one or more pairs of attribute metadata objects mapping to relational table columns. In a facts to dimension join, a join metadata object joins attributes from the facts metadata object and attributes from the dimension metadata object. In a composite join, the set of attribute pairs is from the same set of tables. For example, to join relational Table1 with a compound key of FirstName and LastName, with a relational Table2 that has a compound key of FName and Lname, one relational join with two join predicates is used; one join predicate for Table1.FirstName and Table2.FName, a second join predicate for Table1.LastName and Table2.LName. The information about this composite join is stored in one join metadata object.","The join metadata object is defined by a list of the left attribute, right attribute, and join operator. Also, the join type and expected cardinality are specified. Joins can be used between two facts, two dimensions, or a fact and a dimension. Join metadata objects are referred to by cube model, facts, and dimension objects.","The metadata object specific properties that define a join metadata object are described in the following Table 11 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0150","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 11"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"List of (left","Left attribute: The attribute on the left side of"]},{"entry":[{},"attribute, right","the join. Right attribute: The attribute on the"]},{"entry":[{},"attribute, operator)","right side of the join. Operator: Operator"]},{"entry":[{},{},"expected in the join [=, <, >, <>, >=, <=]."]},{"entry":[{},"Type [INNER,","Type of join expected."]},{"entry":[{},"FULL OUTER,"]},{"entry":[{},"LEFT OUTER,"]},{"entry":[{},"RIGHT OUTER]"]},{"entry":[{},"Cardinality [1:1,","Cardinality expected in the join."]},{"entry":[{},"1:N, N:1, N:N]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A cube is a very precise definition of an OLAP cube that can be delivered using a single SQL statement. Each cube is derived from a single cube model. The cube facts and list of cube dimensions are subsets of those in the referenced cube model. A cube view name is also defined which represents the cube in the database. Cubes are appropriate for tools and applications that do not use multiple hierarchies because cube dimensions allow one cube hierarchy per cube dimension.","The purpose of a cube is to define a standard relational view of an OLAP structure. In addition to the relational view, a cube provides an extended describe (e.g., XML document) that describes the roles of its columns in multidimensional terms. In the process of defining a cube, the designer selects a subset of the possible elements, choosing a single hierarchy for each dimension. This ensures that the cube unambiguously defines a single relational result set. The simplicity of a cube makes the cube useful to less sophisticated OLAP applications, such as portable devices powered by World Wide Web (\u201cWeb\u201d) services.","The metadata object specific properties of a cube metadata object are described in the following Table 12 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0154","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 12"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Cube model","Cube model from which the cube is derived."]},{"entry":["Cube facts","Cube facts used in the cube. The cube facts is derived"]},{"entry":[{},"from the facts metadata object in the cube model."]},{"entry":["List of cube","Ordered list of cube dimensions used in the cube."]},{"entry":["dimensions","The cube dimension is derived from the dimensions"]},{"entry":[{},"in the cube model. One cube hierarchy is associated"]},{"entry":[{},"with each cube dimension."]},{"entry":["Cube view","View in the database that represents the cube."]},{"entry":["Extended","XML document describing roles of columns and their"]},{"entry":["Describe","relationships in terms of a multidimensional model"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A cube facts metadata object has a subset of measures in an ordered list from a specific facts metadata object. A cube facts metadata object gives a cube the flexibility to scope facts for a cube model. The structural information, such as the joins and attributes, is referenced from the parent facts metadata object. The metadata object specific properties that define a cube facts metadata object are described in the following Table 13 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0156","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 13"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Facts","Facts from which the cube facts is derived."]},{"entry":[{},"List of","Ordered list of measures used in a cube. All measures"]},{"entry":[{},"measures","are part of the facts from which the cube facts is"]},{"entry":[{},{},"derived."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A cube dimension metadata object is used to scope a dimension for use in a cube. The cube dimension metadata object references the dimension from which it is derived and the relevant cube hierarchy for the given cube. In certain implementations, one cube hierarchy can be applied to a cube dimension. The joins and attributes that apply to the cube dimension are referenced from the dimension definition. The metadata object specific properties that define a cube dimension metadata object are described in the following Table 14 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0158","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 14"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dimension","Dimension from which the cube dimension is"]},{"entry":[{},{},"derived."]},{"entry":[{},"Cube","Cube hierarchy that applies to the cube dimension."]},{"entry":[{},"hierarchy"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A cube hierarchy metadata object is a scoped version of a hierarchy and is used in a cube. A cube hierarchy references the hierarchy from which it is derived and can have a subset of the attributes from the parent hierarchy. Additionally, a cube hierarchy metadata object references the attribute relationships that apply on the cube. In certain implementations, one cube hierarchy can be defined for a cube dimension of a cube. A cube hierarchy metadata object has the same hierarchy types and deployment mechanisms as the hierarchy from which the cube hierarchy metadata object is derived.","A cube hierarchy is very similar to a hierarchy; however, a cube dimension refers to a single cube hierarchy. This allows a single SELECT statement to calculate the cells of a cube.","The metadata object specific properties that define a cube hierarchy metadata object are described in the following Table 15 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0162","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 15"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hierarchy","Hierarchy from which the cube hierarchy is derived."]},{"entry":[{},"Lists of","Ordered list of all attributes from the top to the"]},{"entry":[{},"attributes","bottom of the cube hierarchy. The order of the"]},{"entry":[{},{},"attributes should be the same as in the parent"]},{"entry":[{},{},"hierarchy."]},{"entry":[{},"Set of","Set of all attribute relationships that link cube"]},{"entry":[{},"attribute","hierarchy attributes to other attributes."]},{"entry":[{},"relationships"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0163","num":"0162"},"figref":"FIG. 16","b":["1610","1600"]},{"@attributes":{"id":"p-0164","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 16"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Metadata",{},"Metadata"]},{"entry":[{},"Metadata object 1","References","Metadata object 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Cube Model","zero or one","Facts"]},{"entry":[{},"Cube Model","zero or more","Dimension\/Join"]},{"entry":[{},"Cube","one","Cube model"]},{"entry":[{},"Cube","one","Cube Facts"]},{"entry":[{},"Cube","one or more","Cube Dimension"]},{"entry":[{},"Facts","one or more","Measure"]},{"entry":[{},"Facts","zero or more","Attribute"]},{"entry":[{},"Facts","zero or more","Join"]},{"entry":[{},"Dimension","one or more","Attribute"]},{"entry":[{},"Dimension","zero or more","Join"]},{"entry":[{},"Dimension","zero or more","Hierarchy"]},{"entry":[{},"Cube Facts","one","Facts"]},{"entry":[{},"Cube Facts","one or more","Measure"]},{"entry":[{},"Cube Dimension","one","Dimension"]},{"entry":[{},"Cube Dimension","one or more","Attribute"]},{"entry":[{},"Cube Dimension","one","Cube Hierarchy"]},{"entry":[{},"Hierarchy","one or more","Attribute"]},{"entry":[{},"Hierarchy","zero or more","Attribute Relationship"]},{"entry":[{},"Cube Hierarchy","one","Hierarchy"]},{"entry":[{},"Cube Hierarchy","one or more","Attribute"]},{"entry":[{},"Cube Hierarchy","zero or more","Attribute Relationship"]},{"entry":[{},"Measure","zero or more","Measure"]},{"entry":[{},"Measure","zero or more","Attribute"]},{"entry":[{},"Measure","zero or more","Dimension"]},{"entry":[{},"Attribute","zero or more","Attribute"]},{"entry":[{},"Attribute","two","Attribute"]},{"entry":[{},"Relationship"]},{"entry":[{},"Join","multiple of two","Attribute"]},{"entry":[{},{},"(minimum of two)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"In accordance with certain implementation, there is a metadata object naming convention and rules for naming. Naming conventions and rules other than those described herein may be used without departing from the scope of the invention. There are two different naming conventions to name objects: ordinary and delimited. For the metadata objects, due to its flexibility, the delimited convention is used when naming objects and referring to database tables and columns. The delimited convention allows mixed case names, spaces, and special characters, such as national language characters. The complete set of characters is determined by the codepage of the database in which the objects reside.","Besides the naming conventions, some rules apply to the different identifiers in the objects in certain implementations. For example, a schema has a length of 1-30 bytes and schema names do not begin with \u2018SYS\u2019; a name has a length of 1-128 bytes; a business name has a length of 1-128 bytes; comments have a length of 0-254 bytes; a table schema (used in referencing columns) has a length of 1-128 bytes; a table name (used in referencing columns) has a length of 1-128 bytes; and a column name (used in referencing columns) has a length of 1-128 bytes.","In addition to the relationships that are enforced, additional rules are described for each metadata object. That is, every metadata object has its own set of rules, and an instance of a metadata object is valid if the metadata object follows all of the metadata object rules for that metadata object. The rules are separated in three categories: Base Rules, Cube Model Completeness Rules, and Optimization Rules. The following discussion of specific rules provides a set of rules for certain implementations of the invention. In other implementations, the set of rules for one or more metadata objects may be modified without departing from the scope of the invention.","The base rules for a cube model metadata object are: (1) the cube model metadata object refers to zero or one facts metadata object; (2) the cube model metadata object refers to zero or more dimension(s); (3) dimension-join pairs have both a dimension and a join; (4) a join associated with a dimension is valid if all attributes of one side of a join are found in the attribute list of the facts metadata object and all other side attributes are found in the attribute list of the dimension metadata object; and (5) for each measure referenced in the facts of the cube model, all the explicit dimension references in the aggregations of the measure are referenced by the cube model. When the cube model references at least one dimension, an aggregation with an empty dimension set matches to at least one dimension from the cube model that was not previously referenced.","The base rules for a cube metadata object are: (1) the cube metadata object refers to one cube facts; (2) the cube metadata object refers to at least one cube dimension; (3) cube facts is derived from the facts used in the cube model; and, (4) cube dimensions are derived from the dimensions used in the cube model.","The base rules for a facts metadata object are: (1) a facts metadata object refers to at least one measure; (2) all attributes and measures referenced by a facts are joinable; (3) in a facts metadata object context, a single join can be defined between two given tables; (4) there are no join loops in a facts metadata object; and, (5) all joins referenced by a facts metadata object refer to fact metadata object attributes.","The base rules for a dimension metadata object are: (1) the dimension metadata object refers to at least one attribute; (2) attributes referenced by a dimension are joinable; (3) there are no join loops; (4) in a dimension context, a single join is defined between any two given tables; (5) hierarchies referenced by a dimension refer to the attributes of the dimension; (6) attribute relationships that are referenced by hierarchies of a dimension refer to the attributes of the dimension; and (7) joins referenced by a dimension refer to the attributes of the dimension.","The base rules for a cube facts metadata object are: (1) the cube facts metadata object refers to at least one facts; (2) the cube facts metadata object refers to at least one measure; and, (3) measures referenced by a cube facts metadata object are part of the facts metadata object.","The base rules for a cube dimension metadata object are as follows: (1) the cube dimension metadata object refers to one dimension; (2) the cube dimension metadata object refers to a cube hierarchy; and, (3) the cube hierarchy referenced by the cube dimension metadata object is derived from a hierarchy that is referenced by the dimension of the cube dimension metadata object.","The base rules for a hierarchy metadata object are: (1) the hierarchy metadata object refers to at least one attribute; (2) two attributes are required for a recursive deployment; (3) every attribute relationship within a hierarchy has a left attribute as part of the hierarchy; (4) every attribute relationship within the hierarchy has a cardinality of 1:1 or N:1: and, (5) certain combinations of hierarchy types and hierarchy deployments are allowed as indicated in Table 17 in accordance with certain implementations of the invention.",{"@attributes":{"id":"p-0175","num":"0174"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 17"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Type\/",{},{}]},{"entry":[{},"Deployment","Standard","Recursive"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Balanced","X",{}]},{"entry":[{},"Ragged","X"]},{"entry":[{},"Unbalanced","X","X"]},{"entry":[{},"Network","X"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The base rules for a cube hierarchy metadata object are: (1) the cube hierarchy metadata object refers to one hierarchy; (2) the cube hierarchy metadata object refers to at least one attribute; (3) attributes referenced by the cube hierarchy metadata object are part of the hierarchy; (4) the order of the attributes in the cube hierarchy metadata object are the same as in the hierarchy (with the exception of hierarchies defined as a network); (5) every attribute relationship within a hierarchy has a left attribute as part of the hierarchy; and, (6) attribute relationships referenced in the cube hierarchy metadata object are also referenced in the hierarchy that defines the cube hierarchy.","The base rules for a measure metadata object are: (1) a measure metadata object can have, as parameters for each SQL expression template, attributes, columns, measures, or none of them; (2) attributes and measures, used as SQL template parameters, can not generate a dependency loop among attributes and\/or measures; (3) every SQL template defined in the measure metadata object is not an empty string; (4) the SQL template does not use aggregation functions; (5) aggregation is not required if at least one measure and only measures are referenced; (6) the number of SQL templates matches the number of parameters of the first aggregation function, if an aggregation is present; (7) a measure metadata object with multiple SQL templates defines at least one aggregation step in an aggregation script; (8) if measure metadata object A refers to measure metadata object B, which defines multiple SQL templates, then measure metadata object A does not have an aggregation script; this rule applies for all levels in a measure reference tree; (9) a multi-parameter aggregation function is used as the first aggregation; (10) if a measure metadata object defines one or more aggregations, one aggregation may have an empty dimension set; (11) within a measure metadata object, a dimension may not be referenced more than once either within an aggregation or across aggregations; (12) within a SQL expression template, token indicators (i.e., {$$#}) begin numbering with 1 and are consecutive with no numbering gaps; and, (13) within a SQL expression, every column, attribute and measure is referenced at least once.","The base rules for an attribute metadata object are: (1) an attribute metadata object can have, as parameters for the SQL template, attributes, columns, or none of them; (2) the attributes, used as parameters for SQL template, can not generate a dependency loop among attributes; (3) the SQL template can not be an empty string or blank string; (4) no aggregation function is allowed to be part of the SQL template; (5) within a SQL expression template, token indicators (i.e., {$$#}) begin numbering with 1 and are consecutive with no numbering gaps; and, (6) within a SQL expression, every column, attribute and measure is referenced at least once.","The base rules for an attribute relationship metadata object are: (1) the attribute relationship metadata object refers to two attributes; and, (2) the attribute relationship metadata object cannot be defined as having a cardinality=N:N and a functional dependency=YES.","The base rules for the join metadata object are: (1) the join metadata object refers to at least one triplet of left attribute, right attribute, and operator; (2) all left attributes in the join metadata object resolve into one or more columns of a single table; (3) all right attributes in the join metadata object resolve into one or more columns of a single table; and, (4) each triplet of the join metadata object defines a valid operation; the datatypes of left and right attributes, as well as the operation defined for them, are compatible.","The cube model completeness rules extend the base rules in order to ensure that a cube model has the required links to other metadata objects to allow effective warehouse SQL queries to be formed. The cube model completeness rules for a cube model metadata object are: (1) a cube model metadata object refers to one facts; (2) a cube model metadata object refers to one or more dimensions.","The optimization rules extend the cube model completeness rules in order to ensure that optimization of warehouse SQL queries can be performed.","The optimization rules for a cube model metadata object is: (1) the join used in the facts to dimension has a cardinality of 1:1 or N:1 and joins a facts table to a primary table of a dimension.","The optimization rules for a dimension metadata object is: (1) considering the join network formed by the joins of the dimension, there is at least one table, primary table, in which all joins radiating from this table have cardinality of N: 1 or 1:1.","The optimization rules for a join metadata object are: (1) there is a constraint defined on the columns that participate in the join; if the join is a self-join, i.e. the same set of columns is used in both sides of the equality, a primary key is defined matching the set of columns; in all other cases, when the set of columns of one side are different from the other side of the join, a primary key matches the columns of one side of the join, and a foreign key matches the other set of columns as well as references the primary key; (2) the join cardinality is 1:1, N:1 or 1:N; if the join is a self-join, the cardinality is 1:1; in all other join cases, the cardinality is 1 on the side in which a primary key is defined and N on the side in which a foreign key is defined; if the foreign key side has also a primary key defined on it, a 1 is used as cardinality; (3) all attributes used in the join resolve to non-nullable SQL expressions; and, (4) the join type is INNER JOIN.","A.4 Metadata Object Example",{"@attributes":{"id":"p-0186","num":"0185"},"figref":["FIG. 17","FIGS. 18A-18E","FIG. 17","FIGS. 18A-18E","FIGS. 18A-18E"],"b":["1710","1720","1700","1730","1740","1700","1710","1720","150","130","130","1800","1802","1804","1806","1808","1810","1812","1814","1816","1818","1820","1822","1824","1826","1828","1830","1832","1834","1848"]},"A user may use the user interface  to create metadata objects. After creating an empty cube model metadata object, a facts metadata object and dimension metadata objects are created and joined to the cube model metadata object by creating appropriate join metadata objects.","The properties of the metadata objects discussed herein may be modified without departing from the scope of the invention.","B. Specifying Multidimensional Calculations for a Relational On-line Analytical Processing (ROLAP) Engine","The OLAP multidimensional metadata system  enables creation of a measure metadata object to assist with multidimensional calculations. In certain implementations, the measure metadata object includes the specific properties defined in Table 8.","Measures in a measure metadata object are defined by the aggregation of SQL expressions. In particular, table columns, attributes and measures are mapped to a SQL expression template to build SQL expressions. The resulting SQL expressions are then used as input for the first aggregation function of the measure metadata object. If a measure metadata object has more than one aggregation, the aggregation functions are performed in the order they are listed, with each subsequent aggregation taking the result of the previous aggregation as its input. If the SQL expression of the measure metadata object only references other measures, the aggregation function is omitted because the referenced measures describe any required aggregations.","The SQL expressions used in the calculation of a measure are created by the combination of two properties: a list of SQL expression templates and a list of columns, attributes, and measures. The SQL expression templates use a token notation where {$$n} is the token and n references a specific column, attribute, or measure from the list. The list of columns, attributes, and measures is ordered, and the position in the list of a column, attribute or measure corresponds to the token \u201cn\u201d value. For most aggregation functions the number of SQL expression templates in the list is one, because most aggregation functions accept a single expression as input. However, when an aggregation function such as CORRELATION is used, the number of SQL expression templates match the number of input parameters accepted by the aggregation function.","Again, SQL expressions are used as input to the first aggregation. Each aggregation specifies a function that is applied to a corresponding dimension set. The aggregation function can be any aggregation function supported by the underlying RDBMS , including, for example, SUM, COUNT, MIN, MAX, and CORRELATION. In certain implementations, each dimension is aggregated once by the measure metadata object. If the dimension set is empty, the aggregation function is applied to all dimensions in the cube or cube model that are not specifically being used by any other aggregations in the list.","The multidimensional metadata software  automatically generates a SQL statement for generation of a cube view using the metadata in the measure metadata object.","B.1 Requirements for Measures","This section describes some requirements for measures in accordance with certain implementations of the invention.","One requirement for measures is support for a specific calculation order within a measure. The calculation order for the set of measure metadata objects referenced by a cube model metadata object or a cube metadata object need not be the same\u2014each measure metadata object may specify a calculation order different than the calculation order of any other measure metadata object. For example, a Quantity Sold=SUM(Revenue\/UnitPrice) and Profit Margin=SUM(Profit)\/SUM(Revenue).  illustrates Table A , which shows base data in accordance with certain implementations of the invention. A member named \u201cClothes\u201d is a parent for Trousers , Shirt , and Tie , and the Quantity Sold for Clothes is determined using Unit Price  and Revenue : (680\/40)+(780\/60)+(175\/25)=17+13+7=37. The Profit Margin for Clothes is determined using Revenue  and Profit : (68+117+52.5)\/(680+780+175)=237.5\/1635=0.145.","Another requirement for measures is support for aggregation functions with multiple input parameters, such as a correlation operation (e.g., CORRELATION(Revenue, Profit)). The measure object needs to define independent expressions for each aggregation function input.","Yet another requirement for measures is support for semi-additive measures, such as snapshot measures (e.g., Inventory). For example, for Market and Product dimensions, a sum operation is performed (e.g., SUM(Inventory)). For the Time dimension, a MIN operation is performed (e.g., MIN(Inventory)).",{"@attributes":{"id":"p-0198","num":"0197"},"figref":"FIG. 20","b":["2000","2000","2002","2004","28","2002","1","2006","25"]},"Additional requirements for measures are support for one aggregation function per dimension, support for different calculation order across dimensions, and targeting to sophisticated applications (e.g., find the market locations that have the biggest average inventories, with (SUM, Product), (AVG, Time), (MAX, Market)). Targeting to sophisticated applications is a more generic representation of semi-additive measures, which are described further below with reference to . Also, the requirement of targeting to sophisticated applications is represented by asymmetric measures, which are described further below. An asymmetric measure defines multiple aggregation in the aggregation list.",{"@attributes":{"id":"p-0200","num":"0199"},"figref":["FIGS. 21A-21D","FIG. 21A","FIG. 21B","FIG. 21D"],"b":["2100","2100","2100","2102","2104","2105","66","21","2100","2106","2108","2109","11","2110","2112","2105","36"]},"B.2 Describing Measures","In certain implementations of the invention, a measure metadata object may be created that includes a list of expressions and a list of aggregations. The measure metadata object was discussed in detail in Section A. For ease of understanding, the measure metadata object will also be discussed in this section. The list of expressions in the measure metadata object includes a SQL expression template for each expression and a list of columns, attributes and measures for each SQL expression template. Each entry in the list of aggregations includes an aggregation function and a corresponding dimension set. An empty dimension set means all remaining dimensions are to be used for the aggregation function. In certain implementations, for the measure metadata object, only one aggregation can have an empty dimension set.",{"@attributes":{"id":"p-0202","num":"0201"},"figref":["FIG. 22","FIG. 22"],"b":["2210","2220","2202","2204","2206","2210","2220"]},"The Cost measure metadata object  is created for a cube model with the three dimensions: Product , Market , and Time . The Cost measure metadata object  has a SQL expression template  (template \u201c{$$1}\u201d), which represents a simple mapping to the column specified in the single-item list of columns, attributes, and measures (list=\u201cColumn Fact.Cost\u201d). That is, for the Cost measure metadata object , the expression list refers to \u201c{$$1}\u201d, which is a token that is replaced with the column Fact.Cost when a SQL expression is generated. The aggregation list  is (SUM, <NULL>) where SUM is the aggregation function, and <NULL> is an empty dimension set. The SQL expression from the SQL expression template  is used as input for the SUM aggregation function, resulting in the SQL: SUM(Fact.Cost).","The Revenue measure metadata object  is created for a cube model with three dimensions: Product , Market , and Time . The Revenue measure metadata object  has a SQL expression template  (template=\u201c{$$1}\u201d), which represents a simple mapping to the column specified in the single-item list of columns, attributes, and measures, where list=\u201cColumn Fact.Rev\u201d. That is, for the Revenue measure metadata object , the expression list refers to \u201c{$$1}\u201d, which is a token that is replaced with the column Fact.Rev when a SQL expression is generated. The aggregation list  is (SUM, <NULL>) where SUM is the aggregation function, and <NULL> is an empty dimension set. The SQL expression from the SQL expression template  is used as input for the SUM aggregation function, resulting in the SQL: SUM(Fact.Rev).",{"@attributes":{"id":"p-0205","num":"0204"},"figref":"FIG. 23","b":["2310","2312","2310","2314","2310","1","1"]},{"@attributes":{"id":"p-0206","num":"0205"},"figref":"FIG. 24","b":["2410","2412","2220","2210"]},"The aggregation list  of the Profit measure metadata object  is: (SUM, <NULL>). In the aggregation list , a <NULL> dimension set is specified to represent all dimensions for the SUM operation. Using the profit SQL expression as input for the SUM aggregation function, the SQL expression of the Profit measure is: SUM(Fact.Rev\u2212Fact.Cost). That is, profit is obtained by the sum of all subtractions of cost from revenue.",{"@attributes":{"id":"p-0208","num":"0207"},"figref":"FIG. 25","b":["2510","2220","2410","2414"]},"The Profit Margin measure metadata object has a SQL expression template  (template \u201c{$$1}\/{$$2}\u201d). The first token {$$1} is replaced by the result of the aggregation from the Profit measure metadata object , while the second token {$$2} is replaced by the result of the aggregation from the Revenue measure metadata object . Thus, the resulting SQL expression for the Profit Margin measure is SUM(Fact.Rev\u2212Fact.Cost)\/SUM(Fact.Rev). That is, a sum for profit is calculated, a sum for revenue is calculated, and profit is divided by revenue to obtain profit margin.",{"@attributes":{"id":"p-0210","num":"0209"},"figref":"FIG. 26","b":["2610","2610","2610","2410","2614"]},{"@attributes":{"id":"p-0211","num":"0210"},"figref":"FIG. 27","b":["2710","2220","2410","2712","2713","2712","2220","2713","2410","2714"]},{"@attributes":{"id":"p-0212","num":"0211"},"figref":["FIG. 28","FIGS. 22-27"],"b":["2710","2220","2410","2410","2210","2220"]},"B.3 Generating a SQL Statement for Measures Represented by One or More Measure Metadata Objects","The multidimensional metadata software  generates a single SQL statement that calculates a set of measures represented by measure metadata objects.  illustrates logic for generating a SQL statement from one or more measure metadata objects in accordance with certain implementations of the invention. Control begins in block  with receipt of a measure description for each of one or more measure metadata objects and generation of the one or more measure metadata objects, such as one or more of the measure metadata objects illustrated in , based on the measure descriptions. In block , a facts description of a facts metadata object is received that references all of the measure metadata objects, and a fact metadata object is generated from the facts description. Additionally, the facts description references attribute metadata objects and join metadata objects. In block , a dimension description for each of one or more dimension metadata objects is received, and the one or more dimension metadata objects are generated from the dimension descriptions. The dimension description references one or more attribute metadata objects, zero or more join metadata objects, and one or more hierarchy metadata objects. Each hierarchy metadata object includes information used to build a ROLLUP clause. In particular, a cube model metadata object may reference several possible hierarchies, but selection of a single hierarchy is required for SQL generation, in certain implementations of the invention. In block , a cube model description of a cube model metadata object that references the facts and one or more dimension metadata objects is received, and the cube model metadata object is generated from the cube model description. In block , a selection of a subset of the cube model metadata object is received. In block , a cube metadata object is generated based on the selection. Additionally, a SQL statement is generated for creating a cube view from metadata in one or more measure metadata objects. The generation of the SQL statement may also use other metadata in other metadata objects (e.g., a hierarchy metadata object).","In particular, the generation of the SQL statement may generate one or more ROLLUP operators from metadata in the hierarchy metadata object. A ROLLUP operator, an extension of a GROUP BY clause, generates multiple subtotal grouping clauses, based on a list of columns. The grouping clauses are generated using information from the hierarchy metadata object. This has the same effect, in OLAP terms, of a hierarchy calculation in a given dimension. Consider a dimension such as location, which has a hierarchy composed of country, state, and city. The ROLLUP (country, state, city) clause generates the grouping clauses that represent the calculation of the hierarchy. The general specification of a ROLLUP of n elements (c, c, . . . , c, c, c) is equivalent to the following grouping clauses:\n\n","Note that n elements in a ROLLUP clause translate to (n+1) grouping clauses. An OLAP application may have multiple dimensions (e.g., defined in dimension metadata objects). A ROLLUP for each dimension returns results that represent an OLAP cube, in a relational way. The combination of more than one ROLLUP operator in a single statement results in the Cartesian product of the grouping clauses generated for each ROLLUP. For example, combining the following pair of ROLLUP operators in a single statement ROLLUP (country, state), ROLLUP (year, month) results in the generation of the following grouping clauses, which are a set of grouping clauses that make up a cube:\n\n","Queries that use ROLLUP operators include all the generated grouping clauses in a single result set. Hence, the result set includes the union of all grouping clause columns, plus the aggregated columns. In order to combine results of different grouping sets, nulls are returned in any grouping columns in which a given row is not a member, as illustrated in the following example. See Table 18 for the result of the ROLLUP query for a single dimension. A SELECT statement is generated that includes a ROLLUP operator. The SELECT statement is generated based on metadata objects . For example, in the SELECT statement below, the \u201csum\u201d operator is generated from a measures metadata object, and joins are generated from a join metadata object.\n\n",{"@attributes":{"id":"p-0217","num":"0234"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 18"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Country","State","Revenue"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2014","\u2014","235329.24"]},{"entry":[{},"CANADA","\u2014","35754.64"]},{"entry":[{},"CANADA","ON","35754.64"]},{"entry":[{},"USA","\u2014","199574.60"]},{"entry":[{},"USA","CA","103910.41"]},{"entry":[{},"USA","NY","94665.19"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"In the example in Table 18, the row with the aggregate revenue for USA is designated by a null (shown as a dash) in the state column. The row with the aggregate revenue for all countries and states is designated by a null in both the country and state columns.","Although  describes use of measure metadata objects to generate a cube view, in additional implementations, the measure metadata objects may be used without creating a cube view. That is, the cube view is one way to use the definitions of the measure metadata objects in order to specify the calculations. Another way to use the definitions of the measure metadata objects is for an application to read the measure definitions and the cube model metadata and to directly generate a SQL statement from the measure definitions and cube model metadata.",{"@attributes":{"id":"p-0220","num":"0237"},"figref":["FIG. 29B","FIGS. 22-28"],"b":["2910","2912","2913","2914","2916","2918"]},"The multidimensional metadata software  addresses key problems in calculating multiple measures with a single SQL statement (i.e., symmetry of a measure, distributiveness of aggregation functions involved, and order dimensions appear in the aggregation script). Also, the multidimensional metadata software  handles various query types (e.g., Grand Total query, Slice based query, and complete cube query). In a Grand Total slice, only the grand total for all dimensions is returned. A slice is a sub-cube, while a complete cube is an entire cube.","Measures are represented as measure metadata objects. When multiple measures are to be calculated in a single SQL statement, implementations of the invention determine whether the measures are compatible. Compatible measures have the same specification of aggregation order for the dimensions that they reference. If a set of measures are not compatible, then the invention determines at least one way for the calculation of the incompatible measures to be combined in a single SQL statement. In certain implementations, the incompatible measures may be combined using a JOIN operation (also referred to as \u201cjoining\u201d), and this processing is further described in . In certain implementations, the incompatible measures may be combined by restructuring aggregation steps so that they are compatible (which is also referred to as \u201cnesting\u201d), and this processing is further described in . In certain implementations, a hybrid form of joining and nesting is implemented in which some sets of measures are joined and some sets of measures are nested.",{"@attributes":{"id":"p-0223","num":"0240"},"figref":["FIG. 29C","FIG. 29C"]},"In , control begins at block  with a set of measures being accessed. A set of measures includes one or more measures. The measures are accessed by referencing one or more metadata objects. In block , the set of measures in the one or more measure metadata objects are separated into a symmetric measures set and an asymmetric measures set. Symmetric measures have a single aggregation operator and do not specify any specific aggregation order. In many applications such measures are common. All symmetric measures are compatible. A single SQL statement to calculate all symmetric measures can be generated by using a ROLLUP operator per dimension. For example, the Revenue, Cost, and Product measure used in previous examples are symmetric. Some measure metadata objects may reference one or more other measures. For example, a Profit Margin measure references Profit and Revenue measures, which reference Income and Expense measures. Since both the Income and Expense measures are symmetric, the Profit Margin measure is in the symmetric measures set. In block , a SQL statement is generated for the symmetric measures set. In block , a SQL statement is generated for the asymmetric measures set. The symmetric and asymmetric measures sets may be processed independently and concurrently or in any order.","In block , the SQL statement for the symmetric measures set is combined with the SQL statement for the asymmetric measures set to form a single SQL statement for retrieving multidimensional information. The technique used to combine these two statements depends on the nature of the set of asymmetric measures. When some measures in the asymmetric set can be computed from a common, symmetric subcube, nesting can be used to combine the calculation of those measures and the symmetric measures by rewriting the symmetric calculation as a nested calculation building on the calculation of the common symmetric subcube. If any measures of the asymmetric set require dimensions to be aggregated in specific orders (i.e., have little or no symmetry) or specify conflicting calculation order for the dimensions of the cube, then those asymmetric measures are divided into subsets sharing the same calculation order and a SQL statement is generated that combines them with an inner join. These asymmetric measures with incompatibilities that can not be resolved by means of nesting are then combined, by means of an inner join, with the symmetric measures and with any asymmetric measures that were able to be combined with the symmetric measures by means of nesting.",{"@attributes":{"id":"p-0226","num":"0243"},"figref":["FIG. 29D","FIG. 29C"],"b":["2950","2952","2954","2960","2956","2956","2958","2964","2958","2952","2962","2962","2964"]},{"@attributes":{"id":"p-0227","num":"0244"},"figref":"FIG. 29E","b":["2944","2945","2970","2972","2974","2972","2976","2976"]},"In terms of calculating multiple measures, symmetry of a measure, distributiveness of aggregation functions involved, and order dimensions appear in the aggregation script are addressed by the multidimensional metadata software .","As for symmetry, a symmetric measure defines a single aggregation in the aggregation list, and an asymmetric measure defines multiple aggregation in the aggregation list. When a measure does not define an aggregation, then the symmetry is defined by the base measures. In this situation, a measure is symmetric if all of its base measures are symmetric, and the measure is asymmetric if any of its base measures are asymmetric.  illustrates Table D , which lists some measures and indicates which measures are symmetric or asymmetric in accordance with certain implementations of the invention. For example, the Cost measure  is symmetric, while the Inventory measure  is asymmetric. Table D  does not provide an exhaustive list of measures, and other measures also may be defined as symmetric or asymmetric.","As for distributiveness, an aggregation function is distributive when it can be broken into multiple aggregation steps without changing the result of the aggregation function. For example, for SUM, which is distributive: single aggregation step=SUM(2,8,11)=21, and this single aggregation step may be broken into two aggregation steps, such as: aggregation step has step=SUM(2, 8) and step=SUM(11); and aggregation step=SUM(step, step)=SUM(10,11)=21. This illustrates that SUM: is a distributive function because when a single step is broken apart, the results do not change. An aggregation function is non-distributive when the aggregation function cannot be broken into multiple aggregation steps without changing the result of the aggregation function. For example, average (AVG), standard deviation (STDDEV), and correlation (CORRELATION) are non-distributive. For example, for AVG: single aggregation step=AVG (2, 8, 11)=7, and this single aggregation step may be broken into two aggregation steps, such as: aggregation step has step=AVG(2, 8) and step=AVG(11); and, aggregation step=AVG(step, step )=AVG(5,11)=8. This illustrates that the average is a non-distributive measure because when a single aggregation step is broken apart, the results may change.",{"@attributes":{"id":"p-0231","num":"0248"},"figref":"FIG. 31","b":["3100","3102","3104","3106"]},"As for the order that dimensions appear in the aggregation script, it is desirable to have all measures of a facts table use the same number of aggregation steps and to have each aggregation step calculate the same set of dimensions. Two aggregation steps may be combined if the two aggregation steps use the same aggregation function. Also, if both aggregation functions are distributive, the aggregation step can be split into two or more aggregation steps.  illustrates Table F , which lists measures and how an aggregation step may be broken up into multiple aggregation steps for the measures in accordance with certain implementations of the invention. In Table D , the numbers with asterisks denote an alternative way to calculate the measure. For example, for the Cost measure , the first option is a SUM of product, market, and time dimensions, while a second option is to first perform a sum of product and market dimensions, and then to add in the time dimension.","B.4 Generating a SOL Statement for a Symmetric Measures Set","The multidimensional metadata software  generates a SQL statement for symmetric measures. For ease of understanding, SQL statements that have been generated for some symmetric measures are provided in this section. The result of executing the SQL statement generated for a Grand Total query or an Arbitrary Slice query, may be stored, for example, in a report. However, the result of executing the SQL statement generated for a complete cube query is a cube view, which may itself be queried.","For all types of queries, the generation of the SQL expression for each measure follows the flow described in .","For example, for a Grand Total query with symmetric measures, the multidimensional metadata software  may generate the following Select statement:\n\n","For an Arbitrary Slice query with symmetric measures, the multidimensional metadata software  may generate the following Select statement:\n\n","For a complete cube query with symmetric measures, the multidimensional metadata software  may generate the following select statement:\n\n","The multidimensional metadata software  generates a SQL statement for asymmetric measures. For ease of understanding, SQL statements that have been generated for some asymmetric measures are provided in this section. The result of executing the SQL statement generated for a Grand Total query or an Arbitrary Slice query, may be stored, for example, in a report. However, the result of executing the SQL statement generated for a complete cube query is a cube view, which may itself be queried.","A set of asymmetric measures is calculated by using a nested SELECT statement. Each of the aggregation steps maps to a level of nesting in the SELECT. The first aggregation step is calculated in the innermost nesting level of the SELECT, which is described in block  of . The results of each level are used as input to the immediate outer nested SELECT, as described in block  of . In each of these levels, for dimensions that have not yet been calculated and are not supposed to be calculated in a given level, the most granular (detailed) dimension attribute is included in the GROUP BY clause. In this manner, no aggregation happens for those dimensions. With regards to the aggregation functions, each level has the aggregation function taking as input the results of the measure in the immediate inner level. For the lowest level, the input for the aggregation function is the SQL expressions defined in the measure, as described in block  of .","For example, for a Grand Total query with asymmetric measures, the multidimensional metadata software  may generate the following Select statement:\n\n","For an Arbitrary Slice query with asymmetric measures, the multidimensional metadata software  may generate the following Select statement:\n\n","For a complete cube query with asymmetric measures, the multidimensional metadata software  may generate the following select statement:\n\n","This section describes how multiple SQL statements generated for multiple measure sets (e.g., symmetric and asymmetric measures sets) are combined into a single SQL statement.","In the example of Table F, it is not possible to find a common set of dimension sets. There are two options to calculate all (i.e., symmetric and asymmetric) measures. Each option creates two separate SQL queries and merges them together. For example, a first option is to take Cost, Revenue, Profit, Profit Margin, Profit Rank, and RevProfit Correlation of all dimensions (\u201cAllDim\u201d) and an Inventory of AllbutTime, Time. For example, a second option is to take a RevProfit Correlation of all dimensions (\u201cAllDim) and Inventory, Cost, Revenue, Profit, Profit Margin, Profit Rank for AllbutTime, Time.","The multiple SQL statements generated for the symmetric and asymmetric measures sets share the same set of attributes when these SQL statements are generated for the same slice or cube. Therefore, the attribute instances will be the same in all the SQL statements. The technique of combining the SQL statements of different measures sets consists of joining the results of both SQL statements. That is, the SQL statements generated for each measures set are joined into a single SQL statement by connecting them with an INNER JOIN. In certain implementations, the type of join used is an INNER JOIN on the attributes that were used in the GROUP BY clauses of the SQL statements.","The clause used in the inner join between the multiple SQL statements depends on the type of SQL statements being combined (i.e., slice-based vs. complete cube). For slice-based SQL statements, the clause used in the inner join will use a simple ANDed equality of all the attributes in the slice. The following is a slice-based SQL statement generated by the multidimensional metadata software  for the first option:\n\n","In a Grand Total slice, only the grand total for all dimensions is returned. If the slice being queried is a Grand Total slice, then there are no attributes that are being grouped by, therefore, a transient constant attribute is used in the join clause. The transient constant attribute is associated with the Grand Total column and describes whether an aggregation is held for the given attribute. The following is a Grand Total slice SQL statement generated by the multidimensional metadata software  for the first option:\n\n","For the complete cube type of SQL statement, the join clause also takes into consideration the fact that the instances of an attribute will also contain the representation of aggregations. For that reason, transient attributes are added to the base SQL statements that are being combined. These new transient constant attributes describe whether an aggregation is held for the given attribute. The join clause then joins attribute instances when they contain specific members or contain aggregation. The following is a cube-based SQL statement generated by the multidimensional metadata software  for the first option that shows the use of the transient constant attribute suffixed by AGG (i.e., aggregation):\n\n","Although the example above illustrates two measure sets, implementations of the invention may combine more than two measures sets. Moreover, although examples herein have been directed to SQL statements, other statements that may be used to access a database are within the scope of the invention.","In certain implementations, rather than combining SQL statements generated for multiple measures sets, aggregation sets are restructured so that they are compatible. For example, calculation of Sales and Inventory measures may be combined. Because the Sales measure uses SUM for all dimensions and the Inventory measure uses SUM for all but time, the computation for the Sales measure may be broken down into two steps. The first step is SUM for all dimensions but time, and the last step is SUM for time (which works because SUM is distributive). This computation order for Sales is now compatible with the steps required for Inventory.","IBM, DB2, Z\/OS, and AIX are trademarks of International Business Machines Corporation in the United States and\/or other countries. Windows is a trademark of Microsoft Corporation in the United States and\/or other countries. Solaris and JDBC are trademarks of Sun Microsystems in the United States and\/or other countries. Linux is a trademark of Linus Torvalds in the United States and\/or other countries. HP-UX is an Open Group UNIX 95 branded product in the United States and\/or other countries. Pilot Suite is a trademark of Pilot Software in the United States and\/or other countries. Express is a trademark of Oracle Corporation in the United States and\/or other countries. Essbase is a trademark of Hyperion Solutions Corporation in the United States and\/or other countries. TM1 is a trademark of Applix, Inc. in the United States and\/or other countries.","The described techniques may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Programmable Gate Array (PGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium, such as magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission medium or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Thus, the \u201carticle of manufacture\u201d may comprise the medium in which the code is embodied. Additionally, the \u201carticle of manufacture\u201d may comprise a combination of hardware and software components in which the code is embodied, processed, and executed. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","The logic of , B, C, D, and E describes specific operations occurring in a particular order. In alternative implementations, certain of the logic operations may be performed in a different order, modified or removed. Morever, steps may be added to the above described logic and still conform to the described implementations. Further, operations described herein may occur sequentially or certain operations may be processed in parallel, or operations described as performed by a single process may be performed by distributed processes.","The logic of , B, C, D and E was described as being implemented in software. This logic may be part of the operating system of the host systems or an application program. In yet further implementations, this logic may be maintained in storage areas or in a read only memory or other hardwired type of device. The preferred logic may be implemented in hardware or in programmable and non-programmable gate array logic.",{"@attributes":{"id":"p-0255","num":"0390"},"figref":"FIG. 33","b":["100","100","3300","3302","3304","3306","3306","3306","3304","3302","3308","3310","3302","3312","3302"]},"The foregoing description of the preferred implementations of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many implementations of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 18A-18E"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIGS. 21A-21D"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 28","FIGS. 22-27"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIGS. 29A","b":["29","29","29","29"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 33"}]},"DETDESC":[{},{}]}
