---
title: Controlling java virtual machine component behavior on a per-classloader basis
abstract: A method and system for controlling an operation of a Java Virtual Machine (JVM) component on a per-classloader basis. A manifest of a bundle in an Open Services Gateway Initiative (OSGi®) compliant framework is parsed and metadata in the manifest is identified. The metadata is stored in a Java® classloader uniquely associated with the bundle. An upcoming performance of an operation which can be affected by a value of the stored metadata is identified by the JVM component. A value of the stored metadata is read from the classloader. The operation of the JVM component is controlled based on the value of the stored metadata.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375377&OS=08375377&RS=08375377
owner: International Business Machines Corporation
number: 08375377
owner_city: Armonk
owner_country: US
publication_date: 20090306
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION OVERVIEW","EXAMPLE"],"p":["The present invention relates to a data processing method and system for managing a Java\u00ae Virtual Machine component, and more particularly to a technique for controlling an operation of a Java\u00ae Virtual Machine component on a per-classloader basis.","Conventionally, combinations of command-line options are used to configure Java\u00ae applications. As these command-line options are not sufficiently understood by all application programmers, specifying needed command-line options is error-prone. Furthermore, the command-line options used to configure Java\u00ae applications are specific to one vendor's Java\u00ae Virtual Machine (JVM), which results in misconfiguration or application failure if an option understood by one vendor's JVM is accidentally passed to another, incompatible JVM. Moreover, the command-line options are inflexible as they can be applied only globally to JVM behavior. Thus, there exists a need to overcome at least one of the preceding deficiencies and limitations of the related art.","The present invention provides a computer-implemented method of controlling an operation of a component (JVM component) of a Java Virtual Machine (JVM) on a per-classloader basis. The method comprises:","a computer system parsing a manifest of a bundle in a computing framework;","responsive to parsing the manifest, the computer system identifying metadata in the manifest, wherein the computing framework has knowledge that the metadata controls the operation of the JVM component, and wherein the computer system includes the JVM component;","subsequent to identifying metadata, the computer system storing the metadata in a Java classloader uniquely associated with the bundle;","subsequent to storing the metadata, the computer system identifying an upcoming performance of the operation of the JVM component;","responsive to identifying the upcoming performance of the operation of the JVM component, the computer system reading a value of the stored metadata from the Java classloader; and","controlling, by a processor of the computer system, the operation of the JVM component based on the value of the stored metadata.","Systems and computer program products corresponding to the above-summarized methods are also described herein.","Embodiments of the present invention provide a method and system for controlling an operation of a Java\u00ae Virtual Machine component (i.e., altering the behavior of the JVM) on a per-classloader basis using metadata so that an application programmer who programmed an application may include the metadata in Open Services Gateway Initiative (OSGi\u00ae) compliant bundles of the application, without requiring a user to specify correct command-line options. Further, the present invention allows the JVM that does not understand the metadata provided in the bundle's manifest to silently ignore the metadata, thereby avoiding a problem of the application failing to start. Still further, the per-classloader control of the JVM provided by the present invention may facilitate the reusability of OSGi\u00ae compliant bundles.","One or more embodiments of the present invention provide a technique for using arbitrary metadata within manifests of bundles of an application to control the behavior of a JVM component, where the application is an OSGi\u00ae compliant application. As the JVM loads the bundle and creates a corresponding classloader, the JVM parses the metadata provided in the bundle and tags the internal JVM classloader structure if appropriate. As the application is executing, the behavior of the JVM is altered according to the metadata. For example, the metadata may provide hints to a garbage collector about the workload of the application, or to the just-in-time (JIT) compiler to influence compilation. As used herein, \u201cOSGi\u00ae compliant\u201d is defined as being compliant with the OSGi\u00ae (formerly Open Services Gateway Initiative) computing framework.","System for Controlling a JVM Operation",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","102","104","104","106","108","108","106"]},"External to JVM  are multiple OSGi\u00ae compliant bundles that include a bundle  (a.k.a. bundle ) and a bundle  (a.k.a. bundle ). Input metadata  is received by a manifest  (a.k.a. manifest file  or manifest ) included in bundle . Input metadata  is received by a manifest  (a.k.a. manifest file  or manifest ) included in bundle .","OSGi\u00ae framework  includes classloaders associated with the aforementioned multiple OSGi\u00ae compliant bundles in a one-to-one correspondence. The classloaders included in OSGi\u00ae framework  include classloader  (a.k.a. classloader  for bundle ) and classloader  (a.k.a. classloader  for bundle ).","A manifest extractor & parser  extracts manifest  from bundle  and manifest  from bundle . Manifest extractor & parser  also parses the extracted manifest  to obtain one or more headers (not shown) that include a first set of metadata definitions (a.k.a. metadata ) and parses the extracted manifest  to obtain one or more headers (not shown) that include a second set of metadata definitions (a.k.a. metadata ). Metadata  is stored in classloader  and metadata  is stored in classloader .","The functionality of the components of system  and how the storage of metadata in classloaders allows control of a JVM component is described in more detail below relative to  and .","The JVM labeled  in  is a registered trademark of Sun Microsystems, Inc. located in Santa Clara, Calif.","Bundle Parsing",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["110","200","202","104","106"]},"In step , OSGi\u00ae framework  (see ) loads an external OSGi\u00ae bundle (e.g., bundle  in ) and creates a Java\u00ae classloader structure (e.g., classloader  in ) that corresponds to the loaded OSGi\u00ae bundle. In step , manifest extractor & parser  (see ) (1) extracts the manifest file (e.g., manifest  in ) from within the OSGi\u00ae bundle (e.g., bundle  in ) and (2) parses the extracted manifest file to obtain one or more headers (a.k.a. manifest headers) that include metadata. For example, the OSGi\u00aeframework,  (see ) uses the Bundle.getHeaders( ) application programming interface (API) to parse the extracted manifest file (e.g., manifest  in ) to obtain one or more headers of the manifest file.","In step , manifest extractor & parser  (see ) identifies special metadata included in the manifest header(s) obtained in step . The OSGi\u00ae framework  (see ) has knowledge that the identified special metadata controls an operation performed by JVM component  (see ).","In step , OSGi\u00ae framework  (see ) stores the special metadata identified in step  as part of a Java\u00ae classloader structure (e.g., classloader  in ). Storing the special metadata in step  allows the metadata to be available to the JVM  (see ).","In step , OSGi\u00ae framework  (see ) continues operating normally. The process of  ends at step .","In one embodiment, all manifest headers in bundles are stored as properties in each bundle's classloader. In another embodiment, only manifest headers that are not recognized as OSGi\u00ae-defined headers are stored in each bundle's classloader. In still another embodiment, a JVM component (e.g., JVM component  in ) that needs to know the value of a piece of metadata associated with a particular classloader (e.g., classloader  in ) keeps track of bundles associated with classloaders. The JVM component uses the getHeaders API to extract the headers from the manifest file (e.g., manifest  in ) in the bundle associated with the classloader that is associated with the aforementioned piece of metadata.","Given the embodiments described above, arbitrary kinds of metadata may be stored as manifest headers, associated with each bundle's classloader, and acted upon by the JVM  (see ). The present invention may include a naming scheme for manifest headers that prevents distinct JVMs from using the same manifest header. For example, a reverse domain name convention can be used in which the JVM of entity XYZ uses manifest headers starting with \u201ccom-xyz-\u201d.","Process for Controlling a JVM Operation",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 2","FIG. 1","FIG. 1","FIG. 1","FIG. 1","FIG. 2"],"b":["108","300","302","104","108","210"]},"In step , JVM component  (see ) reads the stored metadata from the Java\u00ae classloader structure (e.g., classloader  in ) in which the stored metadata was stored in step  (see ).","In one embodiment, step  includes (1) the JVM component  (see ) querying the aforementioned Java\u00ae classloader structure; and (2) responsive to querying the Java\u00ae classloader structure, the JVM component  (see ) receiving a value of a property in the Java\u00ae classloader structure, where the value of the property is the value of the stored metadata.","In step , computer system  (see ) controls a performance of the operation by JVM component  (see ). Step  controls the aforementioned performance of the operation based on the value of the stored metadata.","In one embodiment, step  includes (1) the JVM component  (see ) determining a state of an object associated with the OSGi\u00ae compliant bundle loaded in step  (see ) satisfies a predefined criterion that is based on a value of a property included in Java\u00ae classloader structure from which the stored metadata was read in step ; and (2) responsive to determining that the state of the aforementioned object satisfies the predefined criterion, the JVM component  (see ) performing the operation, where a result of performing the operation is managing the object.","This section presents merely one example of how the present invention may be used. In this example, JVM component  (see ) is a garbage collector and the special metadata is a \u201ccom-ibm-jvm-gc-softreferencethreshold: 2\u201d value. This value is stored in the Java\u00ae classloader structure  (see ). The operation in step  (see ) is garbage collection.","When it is time to perform a garbage collection (see step  in ), the garbage collector has to decide whether to collect soft reference objects. Conventionally, this decision would be a global decision in which the garbage collection collects either all soft reference objects that have reached a certain age or no soft reference objects. The present invention allows the JVM and its components to be more discriminating, thereby allowing the garbage collector to make the decision to collect soft reference objects on a per-classloader basis. In response to encountering a soft reference object, the garbage collector queries the soft reference object's classloader structure to determine the value of the com-ibm-jvm-gc-softreferencethreshold property. The value of the com-ibm-jvm-gc-softreferencethreshold property is an example of the stored metadata in step  in . If the soft reference object has survived a number of garbage collections greater than or equal to the determined value of the property, then the garbage collector collects the soft reference object (see step  of ).","Computer System",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 1","FIG. 2","FIG. 3"],"b":["102","402","404","406","408","102","410","412","402","102","402"]},"Memory  may comprise any known type of computer data storage and\/or transmission media, including bulk storage, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), a data cache, a data object, etc. In one embodiment, cache memory elements of memory  provide temporary storage of at least some program code (e.g., code for manifest extractor & parser  or code for JVM component ) in order to reduce the number of times code must be retrieved from bulk storage during execution. Moreover, similar to CPU , memory  may reside at a single physical location, comprising one or more types of data storage, or be distributed across a plurality of physical systems in various forms. Further, memory  can include data distributed across, for example, a local area network (LAN) or a wide area network (WAN).","I\/O interface  comprises any system for exchanging information to or from an external source. I\/O devices  comprise any known type of external device, including a display device (e.g., monitor), keyboard, mouse, printer, speakers, handheld device, facsimile, etc. Bus  provides a communication link between each of the components in computer system , and may comprise any type of transmission link, including electrical, optical, wireless, etc.","I\/O interface  also allows computer system  to store and retrieve information (e.g., data or program instructions such as code of classloader structure generator , manifest extractor & parser  and JVM component ) from an auxiliary storage device such as computer data storage unit  or another computer data storage unit (not shown). Computer data storage unit  may be a non-volatile storage device, such as a magnetic disk drive (i.e., hard disk drive) or an optical disc drive (e.g., a CD-ROM drive which receives a CD-ROM disk).","Memory  includes computer program code for classloader structure generator , manifest extractor & parser  and JVM component  that provide the logic for processes for parsing an OSGi\u00ae bundle and controlling an operation of a JVM component on a per-classloader basis (e.g., the processes of  and ). Memory  also includes classloader structures , which include classloader  (see ) and classloader  (see ). Further, memory  may include other systems not shown in , such as an operating system (e.g., Linux) that runs on CPU  and provides control of various components within and\/or connected to computer system .","Memory , storage unit , and\/or one or more other computer data storage units (not shown) that are operatively coupled to computer system  may store the metadata identified in the process of . The processes of  and  result in a transformation that: (1) transforms a computer data storage unit that stores a classloader structure (e.g., classloader  in ) from a storage unit that does not include the metadata identified in the process of  to a storage unit that includes the aforementioned metadata.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method or computer program product. Accordingly, an embodiment of the present invention may be an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201csystem\u201d (e.g., system  in  or computer system ). Furthermore, an embodiment of the present invention may take the form of a computer program product embodied in any tangible medium of expression (e.g., memory  or computer data storage unit ) having computer-usable program code (e.g., code for manifest extractor & parser  and JVM component ) embodied or stored in the medium.","Any combination of one or more computer-usable or computer-readable medium(s) (e.g., memory  and\/or computer data storage unit ) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared or semiconductor system, apparatus, device or propagation medium. A non-exhaustive list of more specific examples of the computer-readable medium includes: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program for classloader structure generator , program for manifest extractor & parser  and\/or the program for JVM component  is printed, as the programs ,  and  can be electronically captured via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored, respectively, in a computer memory . In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code (e.g., program , program  and\/or program ) embodied therewith, either in baseband or as part of a carrier wave. The computer-usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.","Computer program code (e.g., code , code  and\/or code ) for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u00ae, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on a user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. Any one of the aforementioned computers or servers may be computer system . In the latter scenario, the remote computer may be connected to the user's computer through any type of network (not shown), including a LAN, a WAN, or the connection may be made to an external computer (e.g., through the Internet using an Internet Service Provider).","The present invention is described herein with reference to flowchart illustrations (e.g.,  and ) and\/or block diagrams of methods, apparatus (systems) (e.g.,  and ), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions (e.g., code , code  and code ). These computer program instructions may be provided to a processor (e.g., CPU ) of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium (e.g., memory  or computer data storage unit ) that can direct a computer (e.g., computer system ) or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer (e.g., computer system ) or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer-implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Any of the components of an embodiment of the present invention can be deployed, managed, serviced, etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to the process for parsing an OSGi\u00ae bundle and controlling an operation of a JVM component on a per-classloader basis. Thus, an embodiment of the present invention discloses a process for supporting computer infrastructure, comprising integrating, hosting, maintaining and deploying computer-readable code (e.g., code  and code ) into a computer system (e.g., computer system ), wherein the code in combination with the computer system is capable of performing processes of parsing an OSGi\u00ae bundle and controlling an operation of a JVM component on a per-classloader basis.","In another embodiment, the invention provides a business method that performs the process steps of the invention on a subscription, advertising and\/or fee basis. That is, a service provider, such as a Solution Integrator, can offer to create, maintain, support, etc. processes for parsing an OSGi\u00ae bundle and controlling an operation of a JVM component on a per-classloader basis. In this case, the service provider can create, maintain, support, etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return, the service provider can receive payment from the customer(s) under a subscription and\/or fee agreement, and\/or the service provider can receive payment from the sale of advertising content to one or more third parties.","The flowcharts in  and the block diagrams in  illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code (e.g., code ,  or ), which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","While embodiments of the present invention have been described herein for purposes of illustration, many modifications and changes will become apparent to those skilled in the art. Accordingly, the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 3","FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 1","FIG. 2","FIG. 3"]}]},"DETDESC":[{},{}]}
