---
title: Context-sensitive taint analysis
abstract: A taint processing applied to a tainted value of an application is identified and an output context of the application associated with output of the tainted value is determined. It is determined whether the taint processing is effective in mitigating a security vulnerability caused by the tainted value for the output context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739280&OS=08739280&RS=08739280
owner: Hewlett-Packard Development Company, L.P.
number: 08739280
owner_city: Houston
owner_country: US
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Taint analysis is a computer security methodology used to mitigate or prevent input to an application from corrupting data values within and output from the application. As an example, tainted values received by an application from an untrusted source are labeled or tagged. Similarly, when tainted values are used to modify other data values within the application, those data values become tainted (or tainted values) and are similarly labeled or tagged. Thus, the tainted values and their effects can be tracked within the application. When tainted values are output from the application (e.g., stored or provided to a user or client of the application), the use of a tainted value can be recorded to identify a potential security vulnerability in the application.","Additionally, some taint analysis systems remove the label or tag from a tainted value if a taint processing is applied to that tainted value. Accordingly, the use of tainted values to which a taint processing is applied is not recorded. A taint processing is a routine or method that is applied to a tainted value to prevent that tainted value from posing a security vulnerability in the application. For example, taint processing can be validation. That is, a tainted value can be provided to a validation routine to ensure that the tainted value does not include data that opens a security vulnerability in the application. If the tainted value does not include such data, the taint is removed and the application continues execution. If the tainted value does include such data, the application generates a security exception","As another example, taint processing can be sanitization. In other words, a tainted value can be provided to a sanitization routine to sanitize the tainted value of any data that opens a security vulnerability in the application. The label or tag is removed from tainted values provided to the sanitization routine.","Removal of labels or tags from tainted values can be beneficial to decrease the number or rate of false positive security determinations (e.g., recorded uses of tainted values from which taints have been removed). That is, because a data value derived from (or influenced by) a tainted value becomes a tainted value and is labeled or tagged similar to the tainted value from which it is derived, many data values within an application can be tainted values. If the labels or tags are not removed from tainted values to which taint processings that sufficiently mitigate or prevent security vulnerabilities have been applied, each time those previously labeled or tagged tainted values are output from the application, a use of a tainted value is recorded. Accordingly, many of the recorded uses of tainted values do not represent a security vulnerability. If the labels or tags are removed from the tainted values to which taint processing has been applied, the number of such false positive security determinations can be decreased.","However, such removal of labels or tags can result in an undesirable number or rate of false negative security determinations (e.g., unrecorded uses of tainted values). For example, a taint processing applied to a tainted value can be compatible with (e.g., sufficiently mitigate a potential security vulnerability for) one output context, but incompatible with (e.g., not mitigate a potential security vulnerability for) another output context. A potential security vulnerability exists if the label or tag is removed from a tainted value that is subsequently output from the application in an output context that is incompatible with the taint processing, but the use of a tainted value is not recorded because the label or tag was previously removed. Thus, the number of false negative security determinations can increase.","Implementations discussed herein include context-sensitive taint analysis systems that mitigate false negative security determinations. As a specific example, some implementations discussed herein include taint analysis systems that do not remove labels or tags from tainted values in response to taint processings applied to those tainted values. Rather, such tainted values are additionally or alternatively labeled or tagged using a processing state to identify the taint processings applied to these tainted values.","Additionally, these taint analysis systems monitor or track the output contexts of the applications with which these taint analysis systems are associated. When a tainted value is output from an application, the processing state of that tainted value is compared with the output context of the application. If the processing state (or the taint processing related to that processing state) is incompatible with the output context of the application, a notification can be generated to, for example, identify a potential security vulnerability in the application. If the processing state (or the taint processing related to that processing state) is compatible with the output context of the application, no notification is generated. In other words, the number of false negative security determinations can be reduced by comparing the type, class, or level of taint processing applied to a tainted value with the current output context of an application when the tainted value is output from the application. Thus, taint analysis applied by systems, methods, and apparatus discussed herein is context-sensitive.","As used herein, the term \u201cmodule\u201d refers to a combination of hardware (e.g., a processor such as an integrated circuit or other circuitry) and software (e.g., machine- or processor-executable instructions, commands, or code such as firmware, programming, or object code). A combination of hardware and software includes hardware only (i.e., a hardware element with no software elements), software hosted at hardware (e.g., software that is stored at a memory and executed or interpreted at a processor), or at hardware and software hosted at hardware. Furthermore, as used herein, the term \u201capplication\u201d refers to a module that receives input, performs one or more operations with respect to that input, and provides an output. For example, an application can be a web application hosted at a web server that receives input values from a client via a communications link such as the Internet, processes the input values to generate output values, and provides the output values to the client via the communications link.","Additionally, as used herein, the singular forms \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d include plural referents unless the context clearly dictates otherwise. Thus, for example, the term \u201ctainted value\u201d is intended to mean one or more tainted values or a combination of tainted values.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","110","120","130","140","100","110","120","130","140"]},"Process  can be implemented, for example, within a taint analysis system to determine whether output (e.g., data values output) from an application has been appropriately processed. Some data values output of the application are tainted values. Tainted values are data values that are received (e.g., as input to an application) from untrusted, unverified, or potentially harmful sources or derived from other tainted values (e.g., input to an application). For example, data values received as input from a client of the application, data values read from an untrusted (e.g., external or non-validated) data store, or data values derived from (e.g., generated from, calculated using, influenced from, or based on) tainted values can be referred to as tainted values.","Moreover, tainted values can include a single value such as a floating point or integer number, or can be sequences of values such as character or text strings. As a specific example, tainted values can be an exploitation vector for a security vulnerability such as cross-site scripting (XSS) vulnerability or structured query language (SQL) injection vulnerability of a web application. For example, input provided to a web application can include code that is executed at a client of the web application (e.g., a web browser) to attack the client. Furthermore, in some implementations, tainted values are labeled or tagged (e.g., by modifying the tainted values or associating metadata with the tainted values) as such.","A client of the application is a module from which input is received at the application and\/or to which output is provided by the application. In other words, as used herein, the term \u201cclient\u201d refers to any module that provides input to and\/or receives output from an application. Thus, as used herein, the term \u201cclient\u201d includes, for example, peers, clients and servers of a traditional client-server relationship, and masters and slaves of a traditional master-slave relationship associated with the application.","At block , a taint processing is identified for a tainted value output (or to be output) from an application. For example, an identifier of a taint processing (or a group of identifiers of taint processings) applied to the tainted value can be stored at a portion (or portions) of a data store such as a database or a table within a memory that is associated with the tainted value. The identifier (or group of identifiers) or portion of the data store including the identifier (or group of identifiers) can be referred to as the processing state of the tainted value. The processing state of the tainted value can be used to identify the taint processing applied to a tainted value at block . As a specific example, the processing state of a tainted value can identify an encoding routine or validation procedure applied to the tainted value.","A taint processing is any analysis, manipulation, modification, or other processing applied to a data value (such as a tainted value) to remove, mitigate, identify, or otherwise affect a security vulnerability or potential security vulnerability of that data value. For example, a taint processing can include input sanitization for an input string that will be used by an application as part of a Structured Query Language (SQL) query (e.g., to prevent SQL injection). As a specific example of sanitization, taint processing can include encoding data values output from an application using an escaped character set such as a Hypertext Markup Language (HTML) escape character set, a JavaScript escape character set, an Extensible Markup Language (XML) escape character set, a Cascading Style Sheets (CSS) escape character set, or other encoding. Such encodings can mitigate or prevent security vulnerabilities such as code or instruction injecting via XSS attacks.","A taint processing can be implemented as a module such as, for example, an application specific integrated circuit (ASIC) or a subroutine, a function, a method, a library routine (e.g., a routine defined at a library), or other group of instructions (or code representing instructions) hosted at a processor. For example, a taint processing can be an encoding routine defined at a library. A library is a group of codes or instructions that are executed at a processor to realize or implement one or more routines, subroutines, functions, or methods). The encoding routine receives a tainted value as an input and encodes the tainted value to mitigate a security vulnerability in the tainted value. As a more specific example, an identifier of a variable, container, or memory location at which the tainted value is stored is provided as input to the encoding routine, and the encoding routine encodes the tainted value within that variable, container, or memory location. In other words, the taint processing processes the tainted value in place.","In other implementations, a taint processing processes the tainted value out of place. That is, rather than processing the tainted value, the taint processing processes an independent copy of the tainted value. For example, a taint processing can be an encoding library routine that receives a tainted value as an input, generates an independent copy of the tainted value, encodes the independent copy of the tainted value, and returns the independent copy of the tainted value. An independent copy of a tainted value is stored at a variable, container, or memory location other than the variable, container, or memory location at which the tainted value is stored. That is, modifications to the tainted value are not applied to the independent copy of the tainted value.","In some such implementations, a processing state of the independent copy of the tainted value is maintained separate from a processing state of the tainted value. For example, a processing state of the independent copy of the tainted value can identify the taint processing, and a processing state of the tainted value does not identify the taint processing because the taint processing is applied to the independent copy of the tainted value rather that the tainted value. Moreover, in some implementations, the processing state of the independent copy of the tainted value is a copy of the processing state of the tainted value when the independent copy of the tainted value is generated by the taint processing. In other words, the processing state of the independent copy of the tainted value is initialized as a copy of the processing state of the tainted value because any taint processings applied to the tainted value when the independent copy of the tainted value is generated have been inherently applied to the independent copy of the tainted value.","In yet other implementations, a taint processing dynamically determines whether a tainted value should be processed in place or out of place. In other words, a taint processing can dynamically determine whether an independent copy of a tainted value will be generated. For example, a taint processing can process a tainted value in place if the taint processing does not modify the tainted value. If the taint processing does modify the tainted value, the tainted value is processed out of place. As a specific example, a text string can be a tainted value and a taint processing can be an encoding. If the text string does not include any characters that are encoded using other characters by the encoding, the text string can be processed (e.g., analyzed) by the encoding in place, and no independent copy of the text string is generated. However, if the text string does include characters that are encoded using other characters by the encoding, an independent copy of the text string is generated, and the independent copy of the text string is processed by the encoding.","In some implementations, a tainted value can be applied to more than one taint processing. For example, a tainted value can be applied to multiple encoding routines and\/or validation procedures. Accordingly, a processing state can identify a group of taint processings. For example, a processing state can be a list of identifiers of taint processings applied to a tainted value. In some implementations, a processing state can identify an order or sequence in which the taint processings were applied to a tainted value. Each of such taint processings can be identified at block . In other implementations, only the last (i.e., most recent) or first taint processing applied to a tainted value is included in the processing state of that tainted value.","Taint processings applied to tainted values can be identified using a variety of methodologies. For example, a taint analysis system can attach to a runtime environment within which the application is executed and monitor the use of variables, containers, or memory locations at which tainted values are stored via the runtime environment. Each time such variables, containers, or memory locations are accessed by taint processings during execution (or runtime) of the application, the taint analysis system can update the processing state of the associated tainted values. Said differently, the taint analysis system can implement runtime taint analysis. As an alternative example, a taint analysis system can parse or analyze resources that define the application (e.g., source code or instruction files) to identify variables or containers that can store tainted values during execution of the application. Additionally, the taint analysis system can identify taint processings that are applied to such variables or containers based on function calls, subroutines, or other processing applied to the variables or containers within those resources. In other words, the taint analysis system can implement static taint analysis.","The output context of the application is then determined at block . An output context is a context in which data values are output from an application. Data values are output from applications when those data values (or copies thereof) are provided (e.g., via a communications link, shared memory, electronic mailboxes, intra-processor communications, inter-processor communications, or other data transfer methodologies) to another application, to a data stores, to a client.","For example, if the application is a web application, data values can be output via a communications link. Furthermore, the output context can be the interpretation context of the web application. In other words, the output context can be the context in which a client of the application (e.g., a web browser for a web application) receiving the data values output from the application interprets those data values. As specific example, the output context of a web application can be an HTML output context, a JavaScript output context, a CSS output context, or other output context in which the web application outputs data values to clients.","In some implementations, the output context of the application changes during execution of the application. Referring again to an example implementation in which the application is a web application, the application can output data values during execution that should be interpreted by a client as CSS data at a first time, as HTML at a second time, as JavaScript at a third time, and as HTML again at a fourth time. That is, output from the application can include data values in a CSS output context at a first time, data values in an HTML output context at a second time, data values in a JavaScript output context at a third time, and data values in an HTML output context at a fourth time. In such implementations, the current output context (e.g., the output context in which the tainted value for which taint processing was identified at block  is output) of the application is determined at block . In other words, the output context that is associated with output of the tainted value for which taint processing was identified at block  is determined at block .","The output context can be determined using a variety of methodologies. For example, the taint analysis system can monitor the output of the application to determine the output context of the application. More specifically, for example, the taint analysis system can include an output context monitor module that receives output from the application (e.g., via a runtime environment of the application) and interprets that output, for example, as a client of the application such as a web browser. The output context monitor module can, thus, track or monitor the current output context of the application. The taint analysis module can then access an identifier of the output context at the output context monitor module at block .","Alternatively, for example, in some implementations, the output contexts of the application can be identified statically based on analysis of resources of the application such as HTML files, CSS, files, Java Server Pages (JSP) files, or other resources, and the taint analysis system can determine the current output context of the application based on the resource from which output of the tainted value was triggered or initiated. Thus, as discussed above, the taint analysis system implementing process  can be a runtime taint analysis system or a static taint analysis system. In other implementations, the taint analysis system implementing process  can be a hybrid runtime and static taint analysis system.","At block , the taint processing identified at block  and the output context determined at block  are compared to determine whether the taint processing is compatible with the output context. Said differently, the taint processing and the output context are compared to determine whether the taint processing appropriately or effectively mitigate or eliminates a security vulnerability for the output context. Accordingly, a processing state of the tainted value can be compared with the output context (or an identifier thereof) to determine whether the taint processing is compatible with the output context.","For example, a security policy for an application can specify taint processings which are compatible with output contexts. As an example, a security policy can specify that an output-context-specific encoding is compatible with an associated output context, and that all other taint processing is incompatible with that output context. As a specific example, a security policy can specify that an HTML encoding is compatible with an HTML output context, a JavaScript encoding is compatible with a JavaScript output context, and a CSS encoding is compatible with a CSS output context.","As discussed above, multiple taint processings can be applied to the tainted value in some implementations. Accordingly, multiple taint processings can be compared with the output context at block . For example, each taint processing applied to the tainted value can be considered (e.g., compared with the output context) at block . In some implementations, only a subset of the multiple taint processings applied to the tainted value are considered at block . For example, the most recently applied taint processing or a most recently applied subset of the multiple taint processings are considered at block . As a specific example, a security policy associated with the application or taint analysis system can specify which taint processings of the multiple taint processings applied to the tainted value (e.g., the taint processings identified at block  based on a processing state for the tainted value) are considered at block .","If the taint processing is compatible with the output context at block , process  is complete for the tainted value. In other words, a taint analysis system implementing process  can determine that the tainted value does not pose a security vulnerability for the output context if the taint processing is compatible with the output context at block , and can proceed to, for example, execute process  for additional tainted values output from the application.","Alternatively, if the taint processing is not compatible with the output context at block , process  proceeds to block  at which a notification is generated. A notification provides feedback from the taint analysis system to flag, signal, or identify a potential security vulnerability (e.g., output or other use of a tainted value in an output context for which no compatible taint processing was applied to the tainted value). The notification can be, for example, a data set including a description of the use of the tainted value (e.g., identifier of a resource such as a file name and line number or offset within the resource at which the tainted value was used) written to a log file, sent to a system administrator (e.g., via electronic mail, instant message (IM), short messaging service (SMS), or displayed at a user interface.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIGS. 2 and 3","FIGS. 2 and 3"],"b":["200","210","220","230","210","220","230","200"]},"Taint monitor  monitors or tracks tainted values within an application to identify taint processings applied to those tainted values. For example, taint analysis system  can attach to an application within a runtime environment, and taint monitor  can monitor the use of variables, containers, or memory locations that store tainted values. Taint monitor  can, thereby, update a record of taint processings applied to those tainted values, such as a processing state for each of those tainted values, each time a taint processing is applied to those tainted values.","In some implementations, taint monitor  additionally determines when a tainted value is output from the application. For example, taint monitor  can detect when a tainted value (or a variable, container, or memory location that stores the tainted value) is used by an output module of the application. Taint monitor  can communicate (e.g., exchange signals, commands, instructions, or other information) with analysis module  to notify analysis module  of the output of a tainted value.","Output context monitor  monitors or tracks the output context of an application. In other words, output context monitor  maintains a description or identifier of the current output context of the application. Similar to the example discussed above in relation to taint monitor , for example, taint analysis system  can attach to an application within a runtime environment, and output context monitor  can monitor output from the application. More specifically, output context monitor  can receive the output from the application and interpret the output (e.g., the data value output) from the application as a client of the application to monitor the output context.","In some implementations, output context monitor  can intercept the output from the application, and provide the output to a client of the application after interpreting the output. In other words, taint analysis system  can attach to the application within the runtime environment such that the output from the application is provided to output context monitor  rather than to a client of the application. Output context monitor  can interpret the output, and then provide the output to the client. In some implementations, output context monitor  can communicate (e.g., exchange signals, commands, instructions, or other information) with analysis module  to determine whether output from the application should be provided to a client of the application. For example, if the output includes a tainted value to which no taint processing compatible with the output context of the application was applied, analysis module  can provide a command to output context monitor  to discard the output from the application and not provide the output to the client of the application (e.g., not transmit via a communications link). Said differently, output context monitor  can prevent (e.g., interrupt or disable) delivery of output from the application to a client. In some implementations, context monitor  can provide an error message or notification to the client if delivery of the output to the client is prevented.","Analysis module  compares taint processings applied to tainted values and output contexts in which the tainted values are output. Moreover, analysis module  determines whether the taint processings applied to tainted values are compatible with output contexts in which the tainted values are output. For example, analysis module  communicates with taint monitor  and output context monitor  to identify which taint processings have been applied to a tainted value output from the application and to determine the output context of the application associated with the tainted value (e.g., the current output context of the application when the tainted value is output). Analysis module  then determines whether a taint processing applied to the tainted value is compatible with the output context of the application associated with the tainted value. Moreover, for example as discussed above, analysis module  can communicate with output context monitor  to interrupt delivery of tainted values (e.g., output including tainted values) from the application to a client.","Taint analysis module  is an example implementation of a taint analysis system. Other taint analysis systems can include additional or different modules. For example, taint analysis system  illustrated in  includes additional modules.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 4"],"b":["300","310","400","410","430","430","431","432","433","434"]},"Processor  is any combination of hardware and software that executes or interprets instructions, codes, or signals. For example, processor  can be a microprocessor, an application-specific integrated circuit (ASIC), a distributed processor such as a cluster or network of processors or computing devices, a multi-core or multi-processor processor, or a virtual machine.","Memory  is a processor-readable medium that stores instructions, codes, data, or other information. As used herein, a processor-readable medium is any medium that stores instructions, codes, data, or other information non-transitorily and is directly or indirectly accessible to a processor. Said differently, a processor-readable medium is a non-transitory medium at which a processor can access instructions, codes, data, or other information. For example, memory  can be a volatile random access memory (RAM), a persistent data store such as a hard disk drive or a solid-state drive, a compact disc (CD), a digital video disc (DVD), a Secure Digital\u2122 (SD) card, a MultiMediaCard (MMC) card, a CompactFlash\u2122 (CF) card, or a combination thereof or other memories. In some implementations, memory  can be integrated with processor , separate from processor , or external to computing device .","Operating system , runtime environment , application , and taint analysis system  are each instructions or code that\u2014when executed at processor \u2014cause processor  to perform operations that implement, respectively, an operating system, a runtime environment, an application, and a taint analysis module. Said differently, operating system , runtime environment , application , and taint analysis system  are hosted at computing device .","In some implementations, computing device  can be a virtualized computing device. For example, computing device  can be hosted as a virtual machine at a computing server. Moreover, in some implementations, computing device  can be a virtualized computing appliance, and operating system  is a minimal or just-enough operating system to support (e.g., provide services such as a communications stack and access to components of computing device  such as a communications interface module (not shown)) taint analysis system .","Taint analysis system  can be accessed or installed at computing device  from a variety of memories or processor-readable media. For example, computing device  can access a remote processor-readable medium via a communications interface module (not shown), and taint analysis system  at that processor-readable medium. As a specific example, computing device  can be a thin client that accesses operating system  and taint analysis system  during a boot sequence.","As another example, computing device  can include (not illustrated in ) a processor-readable medium access device (e.g., CD, DVD, SD, MMC, or a CF drive or reader) and taint analysis system  at a processor-readable medium via that processor-readable medium access device. As a more specific example, the processor-readable medium access device can be a DVD drive at which a DVD including an installation package for taint analysis system  is accessible. The installation package can be executed or interpreted at processor  to install taint analysis system  at computing device  (e.g., at memory ). Computing device  can then host or execute taint analysis system .","In some implementations, taint analysis system  can be accessed at or installed from multiple sources, locations, or resources. For example, some components or modules of taint analysis system  can be installed via a communications link, and other components or modules of taint analysis system  can be installed from a DVD.","Referring to , a runtime environment provides, for example, libraries, input and output routines, code interpretation, execution isolation, and\/or services during execution or runtime of application  at the processor. In other words, application  executes within runtime environment . As specific examples, runtime environment  can be a virtual machine, a Java\u2122 Runtime Environment, or a Microsoft .NET\u2122 runtime environment.","Taint analysis system  can attach to or instrument runtime environment  (or to application  via runtime environment ) to interact with application . For example, runtime environment  can implement an application programming interface (API), hooks (e.g., to manipulate handling of library routine or function calls, method invocations, messages, or events), or other mechanisms via which taint analysis system  can interact with application  during execution (or runtime) of application . In other implementations, taint analysis system  can instrument runtime environment  with modified libraries or other resources via which taint analysis system  can interact with application  during execution of application . Said differently, taint analysis system  can modify or instrument runtime environment , and interact with application  via the modifications or instrumentation to runtime environment .","As an example, taint analysis module  can replace an output library of runtime environment  with a modified output library that allows taint analysis system  to receive output from application . As another example, taint analysis module  can substitute a library that defines taint processings within runtime environment  that dynamically determine where tainted values are processed in place or out of place with a library which defines taint processings that process all tainted values out of place. Accordingly, independent copies of tainted values are generated and processed (e.g., taint processings are applied to the independent copies of the tainted values) when those taint processings are applied to those tainted values within application .","Such a substitution of taint processings can be useful to allow taint analysis module  to independently track or discriminate among code or execution paths within application  in which a taint processing is applied to a tainted value and other code or execution paths in which no (or different) taint processings are applied to the tainted value. In other words, taint analysis module  can track a tainted value through code or execution paths of application  including the tainted value, and separately track an independent copy of the tainted value through code or execution paths of application  including the independent copy of the tainted value. Such tracking can allow taint analysis module  to identify security vulnerabilities in application  that taint analysis module  would not otherwise identify during taint analysis of application  due to the tainted values used to during taint analysis.","Application  includes resources  and engine . In some implementations, engine  is a module that includes logic that implements application . That is, engine  defines the operation of application . Engine  can access resources  to provide a service to clients of application . In other words, engine  defines the functionalities of application . In other implementations, resources  include instructions that describe the functionalities of application . Engine  accesses and interprets resources  to provide a service to clients of application . That is, resources  define the functionalities of application .","In yet other implementations, both engine  and resources  define the functionalities of application . Said differently, some functionalities of application  are defined at engine , and other functionalities of application  are defined at resources . For example, engine  can be a web server that includes an interpreter for resources . As a specific example, engine  can be the Apache Tomcat\u2122 Java\u2122 servlet container and resources  can include JSP files.","Taint monitor , analysis module , and output context monitor  are similar to taint monitor , output context monitor , and analysis module , respectively, discussed above in relation to . Input module  identifies input (e.g., data values input) to application  and labels or tags that input (or the variables, containers, or memory locations that store the data values input) as tainted. For example, input module  can identify containers defined within resources  (e.g., structures defined within resources  at which data values can be stored), and can monitor the use of those containers during runtime via runtime environment . When data values are input to those containers (e.g., received at application  from a client such as a web browser, data store, or other source), input module  can label those containers (e.g., at a portion of a table within a memory) as tainted. Taint monitor  can access such labels to determine which data values are tainted values and should be monitored.","Notification module  generates a notification if a tainted value is output in an output context of the application with which no taint processing applied to the tainted value was applied. For example, notification module  can communicate with analysis module . If analysis module  determines that no taint processing applied to the tainted value is compatible with the output context in which the tainted value is output, analysis module  can provide a signal or command to notification module  to cause notification module  to generate a related notification.","Record module  maintains a record of taint processings applied to tainted values and the output contexts of application  within which tainted values are output. For example, record module  can communicate with taint monitor  to determine when taint processings are applied to tainted values and when tainted values are output from application . Additionally, record module  can communicate with output context monitor  to determine the output context of application  when tainted values are output. Record module  stores information related to the taint processing applied to tainted values and output contexts associated with tainted values (e.g., in which tainted values are output). For example, record module  can store the output context of application  and processing state of a tainted value at a data store each time the tainted value is output from application  regardless of whether a taint processing identified by the processing state is compatible with the output context. In other words, record module  can generate audit records related to the output of tainted values.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5","b":["500","510","500","510","521","522","500","510"]},"If output from the application is detected at block , the output context of the application is updated at block . For example, the output from the application can be parsed (or analyzed or interpreted) to determine whether the output context of the application is altered by the output. If the output context is altered, an identifier (or an output context identifier) of the current output context of the application can be assigned a value associated with the altered output context. As a specific example in which the application is a web application with CSS, HTML, and JavaScript output contexts, the output from the application can be parsed to determine whether the application is outputting CSS, HTML, or JavaScript data (e.g., code or markup). If the previous output context (e.g., the output context before the output was detected at block ) was a CSS context and the output from the application indicates that the altered output context is an HTML context, an identifier of the current output context of the application can be updated to have a value associated with an HTML context. Accordingly, the output context (or current output context) of the application can be monitored or tracked by a taint analysis system implementing process . Process  then proceeds to block  and waits or monitors the application for additional events.","If output of a tainted value is detected at block , the processing state of the tainted value is compared with the output context of the application at block . If the taint processing identified in the processing state of the tainted value (e.g., a taint processing applied to the tainted value) is compatible with the output context at block , process  proceeds to block  and waits or monitors the application for additional events. However, if the taint processing identified in the processing state of the tainted value is not compatible with the output context at block , process  proceeds to block  at which a notification is generated. After the notification is generated, process  proceeds to block  and waits or monitors the application for additional events.","In some implementations, the blocks of process  can be rearranged, process  can include additional blocks, or process  can include different blocks. As an example, process  can detect events during processing of other events. More specifically, for example, as discussed above, output from the application can be parsed, analyzed, and\/or interpreted after output is detected at block . If that output includes a tainted value, the parsing, analyzing, and\/or interpreting can be interrupted, and output context of the application can be updated at block . Rather than proceed to block  from block  as illustrated in , process  can proceed to block  at which the output of the tainted value is detected. Process  then proceeds to blocks , , and, if appropriate, to block  as discussed above. If there is remaining output that was previously detected at block , but was not processed due to output of the tainted value, process  proceeds to block  rather than block  to finish processing (or handling) the remaining output. If there is no remaining output, process  proceeds to block .","While certain implementations have been shown and described above, various changes in form and details may be made. For example, some features that have been described in relation to one implementation and\/or process can be related to other implementations. As a specific example, implementations discussed in relation to runtime taint analysis can be applicable to static taint analysis. In other words, processes, features, components, and\/or properties described in relation to one implementation can be useful in other implementations. As another example, functionalities discussed above in relation to specific modules or elements can be included at different modules, engines, or elements in other implementations. Furthermore, it should be understood that the systems, apparatus, and methods described herein can include various combinations and\/or sub-combinations of the components and\/or features of the different implementations described. Thus, features described with reference to one or more implementations can be combined with other implementations described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
