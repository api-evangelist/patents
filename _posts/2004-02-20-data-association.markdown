---
title: Data association
abstract: In an implementation of data association, a data item has a data item property with an associated value and a user interface element has an element property with a value that can be defined by an association to the data item property. A binding definition associates the element property of the user interface element with the data item property such that an application program which generates a user interface for display can be developed independent of the data item, and such that the data item can be developed independent of display-related information corresponding to the user interface element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577938&OS=07577938&RS=07577938
owner: Microsoft Corporation
number: 07577938
owner_city: Redmond
owner_country: US
publication_date: 20040220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention relates to data association.","Application programs are typically developed with a user interface that includes display elements and controls that are logically tied, or combined, with associated application data such that the user interface components and the data can not be differentiated or developed independently of each other. For example, data objects developed for integration with an application program typically include various user interface element and control display information such as pixel position, font size, display position, graphic implementation information, and the like.","Because the application program user interface and the application data are logically linked, changes applied at the user interface necessitate an update of the application data. Similarly, changes in the format of the application data necessitates an update or modification of the application program to properly generate the user interface to display the application data. These data and display format dependencies require extensive programming updates and dedicated application data access methods, and are difficult to maintain. Further, data and display format dependencies limit the expandability and\/or adaptability to incorporate different data types and formats without significant binding logic changes. Further, these existing data binding techniques for data and display format dependencies do not facilitate a way in which to bind application data to non-visual objects.","Data association is described herein.","In an implementation, a data item has a data item property with an associated value and a user interface element has an element property with a value that can be defined by an association to the data item property. A binding definition associates the element property of the user interface element with the data item property such that an application program which generates a user interface for display can be developed independent of the data item, and such that the data item can be developed independent of display-related information corresponding to the user interface element.","In another implementation, an application program can generate a user interface having a display element to display a representation of a data item. A data programming model can associate a display element property of the display element with a data item property of the data item with a binding definition such that a value of the data item property is displayed as the representation of the data item.","Data association is described as a data programming model in which a database of data items can be developed independently of display-related information to display data item values on a user interface. Further, an application program that generates the user interface can also be developed independent of the data items to maintain a distinction between the data and the presentation of the data. The data programming model includes a binding definition to associate a user interface element property with a data item property such that a value of the element property is defined by the association to the data item property.","Accordingly, the data programming model facilitates an association, or connection, between data items and a user interface representation of the data items with binding definitions. This data association model provides that data can be described separately from a user interface and provides that an application developer can integrate any form of data and domain-specific logic with an application-specific user interface. For a designer and\/or an application developer, the data programming model provides greater productivity, flexibility, and a user-friendly programming update and maintenance system.","The following discussion is directed to systems and methods for data association. While features of the described systems and methods can be implemented in any number of different computing environments, they are described in the context of the following exemplary implementations.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","102","104","102","106","106","108","110","100"]},"The computing system  can be implemented with one or more memory components, such as any form of storage media  (e.g., any of RAM, ROM, and the like), which maintains data items  and data collections . The computing system  may be implemented with any number and combination of differing components as further described below with reference to the exemplary computing systems, devices, and components shown in .","In this example, an application program  includes a user interface module  (e.g., a component of an application program ) that generates an application specific user interface  for display on the display device . The application programs  communicate with the data programming model  via various application programming interfaces (APIs)  which are described below in a Data Association Binding section. The data programming model  includes binding definitions , transform definitions , data style definitions , and update logic . Although not illustrated, the application programs , the data programming model , along with the binding, transform, and data style definitions, can be maintained with storage media  in computing device .","A data item  can be maintained with storage media  as any type of data, such as data objects, and can further be maintained as any form of data, such as XML (extensible markup language) data (or any other tag-based data), SQL data, and\/or as any other database specific data. Any type of data item  includes one or more data item properties that can each have an associated value. A data item  can be implemented as a specific object, as the referenced current item of a data collection , as a user interface element, or as an object obtained from a data context property of a user interface element.","A data item property can be described by name, by an expression such as \u201cA.B[2]#X\/C.D\u201d, or by an XPath expression (when the data item is maintained as an XML document). The expression can be parsed similarly to a C# (pronounced C-Sharp) expression where a dot (.) is interpreted as a \u201csub-property\u201d, brackets [ ] are an \u201cindexer\u201d, the pound sign (#) identifies a named view, and a slash identifies a current item in a view. Additionally, any run-time object can be the data item, or source item, for a binding and any public properties of the run-time object can be defined as a data item property.","A binding definition  is implemented to associate an element property of a user interface element (e.g., of the user interface ) with a property of a data item  such that a value of the user interface element property is defined by the association to the data item property. This provides that a database of data items  can be developed independently of display-related information to display the data items on a user interface . Further, an application program  can also be developed independent of the data items  to maintain a distinction between the data and the presentation of the data. Accordingly, the data programming model  facilitates an association, or connection, between data items and a user interface representation of the data items with binding definitions . A binding definition  can be implemented to bind any property of a user interface element or control to any property of any data item .","A user interface property receives a value based on the associated value of a data item property. When a binding is established with a binding definition , changes in the data item property can be updated to the corresponding user interface property. In an embodiment, a developer can optionally implement the reverse change update such that changes in the user interface property are propagated to the data item property. These two examples of binding are referred to as a one-way binding definition and as a two-way binding definition. Optionally, a one-time binding initializes a user interface property from a data item property, but does not update when changes are made to the data item property thereafter.","A transform definition  generates a transformed value of a data item property for association with a user interface element property. The transform definition  generates the transformed value from a current value of the data item property such that the current value remains unchanged in storage media . In an embodiment, a transform definition  is developed as a logic component of an application program  to transform a value of a data item property when associated with a user interface element property by a binding definition . A transform definition  is interjected in a data path between a data item  and the user interface  and transforms the data item without a change in the data model (e.g., the data items  maintained with storage media ).","A binding definition  can be associated with a transform definition  (e.g., a transformer) having a function to change a data item property value into a new form, type, or value whenever the data item property value is transferred or referenced from the data item  to the user interface property. Further, the transform definition function can be defined to implement a reverse change of the data item property value when the value is propagated from the user interface element to the data item property. A transform definition  can also generate a transformed value of a data item property for compatible association with a user interface element property.","A transform definition  can be implemented as an object that exposes a data transformer interface which can define a simple type conversion, or can be developed to include more complicated logic defined by a developer of the application program . The data programming model  may also include default transform definitions  if an application program developer does not specify or develop a specific transform definition. For example, a system-defined type converter can be automatically applied as a transformer when needed which simplifies the declaration of bindings between many mismatching types, such as binding a user interface property of type Bool (e.g., Boolean) to a data item property of a type String (whose values are presumably the strings \u201ctrue\u201d and \u201cfalse\u201d for a Boolean type). Application-defined transform definitions can be defined and attached to any binding that associates user interface element properties and data item properties.","The update logic  can be implemented as any form of hardware, firmware, software, or any combination thereof that may be implemented to perform the logical operations associated with data association. Such, logic can also include any supporting circuitry that may be required to complete a given task including supportive non-logical operations. For example, \u201clogic\u201d may also include analog circuitry, memory, input\/output (I\/O) circuitry, interface circuitry, power providing\/regulating circuitry, etc. Update logic  can be implemented to receive an update notice of a data item , such as an update of a value of a data item property, and initiate that a binding definition  update the user interface element property on the user interface  with the value change of the data item property. Further, the update logic can be implemented to receive a user interface element update, such as a change of a value of a user interface element property, and update an associated data item property with the value change of the user interface element property.","A data collection  is a collection of data items  and any number of data collections  can each include any configuration and\/or combination of the data items . The data programming model  provides that a developer can create multiple representations of the data items over a single underlying data collection. A representation of data items  is also referred to herein as a \u201cview\u201d, where a user interface display element is bound (e.g., with a binding definition ) over a collection. In an embodiment, a collection view can be defined as a class, and the view references back to the data items in the collection. Although not shown, a view manager can be implemented to manage various view associations to respective data collections . A program developer can develop the data collections , and further, define filters to generate the one or more views (e.g., representations) that may be associated with a particular data collection . This provides an extensible mechanism by which various configurations of the data items  can developed for display independent of the data items themselves.","The data programming model  can recognize data collections  as objects that expose collection interfaces IEnumerable, ICollection, IList, and\/or IBindingList. Additionally, the data programming model can recognize interfaces such as ICollectionViewFactory for creating views, ICollectionChange for notification of changes to a data collection  (e.g., an insertion or deletion of data items), ICurrentItem for maintaining a view as current, and IContains for filtering a view. A view is also referred to herein as a representation of the data items  in a data collection .","A view (e.g., data item representation) initially contains the data items of a data collection , but can then be sorted and filtered independently of the data collection and of other views over the same data collection. Each view over a particular data collection can be identified with a name (i.e. a string) to distinguish it from all other views. By exposing an ICurrentItem interface, a view can support a current data item and provide methods such as MoveNext, MoveTo, etc. by which an application program  can change the currency. This can be implemented in conjunction with binding definitions that bind to a property of a current data item of a view, either automatically or explicitly.","The data programming model  can be implemented to create views over many different collections, including IList and IBindingList. In addition, the data programming model  can be implemented to add data collections  that expose an ICollectionChange interface which provides that data items can be added or inserted dynamically into an original data collection. An ArrayListDataCollection and associate view ArrayListCollectionView are implemented based on the system collection type ArrayList.","Data styling is implemented with the data style definitions  each of which provides a template for a visual representation of the data items , or of a collection of data items . A developer of an application program  also develops the data style definitions . Further, data styling is implemented to represent data items as a subtree of user interface elements and associated properties. Data styling utilizes objects of a type style to describe the appearance of a data item and may be described as providing a template through which to view the data items. A template (i.e. the visual tree of a data style definition ) describes a general form of the visual representation of the data items and provides that part of the representation be obtained as a data item property value corresponding to a particular data item.","The data programming model  provides that a data style definition  for a particular data item can be associated explicitly by setting a ContentStyle, ItemStyle, or HeaderStyle property, implicitly based on the type of the data item, or extensibly by providing a style selector. The data programming model also includes default data style definitions to provide a data style for data items that are represented frequently. For example, when a data item is a string, the default data style definition  displays the string in a text control.","Application programs  can be implemented to utilize both control styling to describe the appearance of user interface element controls, and data styling to describe the visual representation of data items within the user interface controls. A developer can describe where data items, or the visual representation of the data items, belong in a user interface control's style, but is not forced to choose how to display the data items. The data programming model  provides a ContentPresenter control which is implemented to identify the location of the data items within a user interface control data style definition, and to determine an appropriate visual representation for the data items.","A data style definition  is determined for a ContentPresenter based on the data item(s) that it contains (i.e. on the value of its content property). For example, if a control has a value for its ContentStyle property, the value is utilized as the data style definition. Otherwise, if the control has a value for its ContentStyleSelector property, a SelectStyle method of that style selector property is called and the returned data style definition is utilized. Otherwise, a list of resources is searched to determine first, the resources of the control and its ancestors, then the application-wide resources, then the theme-based resources, and finally the system-wide resources. A resource is selected having a named type of the data item, or some base type thereof, and having a value that is a data style definition. If a resource is not located, a default data style definition  can be implemented. The resulting data style definition  is applied to the ContentPresenter control after initializing the control's DataContext property to the data item obtained from the content property. For a data style definition that contains properties which are data-bound to properties of the DataContext, the properties are associated with the data item property values.","User interface controls can be designed to manage a user-supplied content. A user interface button, list item, and scroll viewer are examples of user interface content controls that support control styling to manage appearance such as shading, borders, and sub-controls (e.g. a page-down button in a scroll viewer). The user interface content controls also support data styling, to present a flexible visual representation of the content. A developer of such a user interface control merely needs to include a ContentPresenter in the control style, and associate or link the ContentPresenter's content, ContentStyle, and ContentStyleSelector properties to the corresponding properties on the control itself. A base class ContentControl is a class from which the user interface controls are derived, and it defines the common properties and implements the common functionality of the user interface controls.","Data association supports additional controls that may be designed and implemented to manage a list of items, such as a ListBox, a Menu, and a RadioButtonList which are all examples of Items Controls. These controls also support control styling to manage their basic appearance, and support data styling to present a flexible visual representation of their data content which, in this example, is a list of data items each represented by a visual subtree. The control style for an items control contains an element to manage the layout of the subtrees corresponding to the data items, and the resulting visual tree will contain a layout panel whose children will ultimately be the subtrees produced from the data items.","The data programming model  also defines an ItemUIGenerator class to generate the subtrees from the data items, under control of a layout panel. Every items control has an associated generator and, when the layout panel needs its children, it calls the generator repeatedly to generate the children one item at a time until the layout panel determines a stop of the recursive procedure. The layout panel can generate children for all the data items associated by the items control, or only for some of them as virtualization.","An items control generator creates a subtree from a data item by creating a wrapper element of a particular type which is selected by the items control, and by applying a control style to that wrapper. For example, the ListBox control chooses ListBoxItem as the type for its wrappers, so each subtree under the layout panel will have a ListBoxItem at its root. The generator sets the DataContext on the wrapper to be the corresponding item which enables properties within each subtree to depend on the data via data-binding. The generator also propagates style information from the items control for each wrapper and propagates the values of the ItemStyle and ItemStyleSelector properties to appropriate properties of the wrapper, depending on the type of the wrapper. For example, if the wrapper is a ContentControl, the values are propagated to the ContentStyle and ContentStyleSelector properties.","Data style rules complete the process. For example, after adding a ListBoxItem to a tree, the control style for ListBoxItem is applied to produce borders and sub-controls, one of which is a ContentPresenter. A data style definition  is selected and applied to the ContentPresenter to produce the visual representation of the corresponding data item, and this data style contains data-bound properties that display values from the data item.","Data-binding and data styling can be implemented with arbitrary data supplied by an application program  at runtime. The data programming model  also provides convenient classes that manage particular kinds of data. These classes enable a developer to introduce data into the application program declaratively, typically by declaring an instance of the class as a resource, and referring to that resource in the declaration of a binding definition. The classes expose an IDataSource interface, which provides a uniform interface to retrieve data and receive notification of changes.","An ObjectDataSource class creates an instance of an arbitrary type, as described by a developer via a TypeName property. Optionally, the type may be defined by an application program  to provide domain-specific data. An XmlDataSource class retrieves data from an XML document. The document can be described inline in markup (i.e. within the scope of the XmlDataSource tag), downloaded from a URL referenced in the source property, or provided dynamically at runtime by setting a document property. A SqlDataSource class retrieves data items from a SQL database and has properties which provide that the developer can supply the connection and query information to name the intended server database and fetch the desired data items. A WinFSDataSource class retrieves data items from a local WinFS database and has properties which allow the developer to supply the query information to describe the tables and data desired. In addition to these data sources, the data programming model  can also utilize source objects that already exist in the application program . These include user interface elements and arbitrary objects created by the application program .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 1"],"b":["200","100","200","202","204","206","206","208","210","212","210","214","1"]},"A second list box  is also displayed within the display region  and includes information  related to a particular client reference number. For example, the client reference number shown in user interface display element () corresponds to the client reference number shown in a user interface display element  in the second list box . A user interface display element  is shown to indicate that the data (e.g., a date of Feb. 21, 2004) is emphasized to communicate an importance to a user viewing the user interface . Although the data displayed in user interface display element  is shown to have a dashed border in this example, any number of different techniques can be implemented to emphasize the data, such as underline, bold, a change in text color, and the like.","In this example, the user interface display element  has an element property with an associated value (e.g., the date of Feb. 21, 2004) that is defined by an association to a data item property of a data item . A binding definition  associates the element property of a user interface display element  with the data item property of data item  such that the value of the user interface element property is defined by the association to the data item property. A transform definition  is implemented to change the representation of the data item value displayed in the user interface display element . For example, the date displayed in the user interface display element  is displayed with emphasis to indicate that in less than one month, the referenced client application needs to be filed. A developer can define a user interface display element and associate any number of different properties with data association as described herein which provides an unlimited and extensible innovation. The presentation of the data item  is dependent upon the transform definition  while the presentation characteristics are not integrated, or tied, to the data items.","Each of the user interface display elements (e.g., display elements , , and the like) displayed in the list box  have a data context property that defines the data item  as the data source of the user interface elements. An additional binding definition  can be implemented to associate the element properties of the user interface display elements with additional data item properties of the data item . The user interface display elements displayed in list box  have a dependent association to the user interface display element  such that the additional binding definition  defaults to the data context property of the user interface display element  to define the data item  as the data source of the additional user interface elements.","The data programming model  defines a data context property on all of the user interface display elements and the property value is the default object to be used as the source data item for all binding definitions  attached to a user interface display element. The data context property is an inherited property such that when a user interface element does not define a value for data context, it uses the same property value as its parent. This provides a developer with a convenient way to define the source data item for an entire subtree of user interface elements.","User interface elements and controls may have properties which can be edited by a user via user interface . For example, the text of a text box, the check state of a check box, and the value of a slider are all properties that a user can change by typing, clicking, moving a mouse, or by some other user-selectable input. A data item receiving a propagated value change may be implemented to validate a new value. In addition, a developer can supply additional validation logic that is performed before a value change is propagated to the data item. Validation logic can be utilized to verify that a numeric value lies in the proper range, or that a string value (e.g., such as a driver's license number) has the correct format. The data programming model can also be implemented to trap validation errors when they occur and provide visual feedback to a user of the user interface .","When an items control contains a large number of data items (i.e., more than can be displayed at one time on a user interface display), virtualization can be implemented to generate user interface display elements for only those data items that actually appear in the display As a user scrolls through the list of data items, the items control, together with the associated generator, automatically generates the user interface elements to represent the data items that are currently visible, and discards the user interface elements for the data items that are no longer visible. This process may also be referred to as user interface virtualization because it pertains to keeping only a small number of virtual user interface subtrees. A second level of virtualization, referred to as item virtualization, pertains to a similar technique applied to the data items themselves. Rather than maintaining a lull list of data items in memory, a virtualizing collection keeps only those data items for the user interface layout and the application program itself. The remaining data items are stored externally, in a disk file or a local database or even a remote database, and are only retrieved when needed.","A shared set of style information can be associated with two or more objects or data items that are to be displayed as part of a list or some other visual grouping of the items on a user interface. By sharing the style information of a data style definition (e.g., the visual representation characteristics information), a program developer need only define the data style information or style once. Upon defining the data style definition, the developer can declaratively associate all of the data items in the list or group with the defined style.","Within the display region  of user interface  shown in , the client reference numbers are displayed in the list region  and information  related to a particular client is displayed in the list region . In an embodiment, each set of client information may be a distinct object stored in a database (e.g., storage media ) or other data store. As an object of a class \u201cClient\u201d, each has a set of properties that may include a title property, a name property, and a file-by-date property. The exemplary list region  includes any number of client objects (-N) that display a reference number property associated with each client object. A developer can utilize a list control, such as ListBox, to create the list regions  and . Controls such as ListBox and other menu controls are implemented to manage a collection of items of arbitrary type.","The list region  displays additional object properties for a highlighted object, such as the first client reference number shown at (). When the object () is highlighted or selected by a user in the list region , the list region  displays the information properties  associated with the client object data at (). The client object is associated with the user interface display element  to display the reference number. The objects for the clients and the associated information, along with data style definitions , may be provided to a rendering engine of computing system  to display the list of items in a designed display format.","In an embodiment, the functional components to implement data association reside and operate on a single computing system, such as computing system  shown in . Alternatively, one or more of the functional components may be implemented in separate computing systems in a distributed network, an example of which is described with reference to .","An application program  developed for implementation with the data programming model  and in an exemplary embodiment of data association may represent any number of different computer applications or programs developed for use on many different types of computer systems. The application program  in conjunction with the user interface module  executes in a computing system to display user interface  and the list regions  and . In an embodiment, the application program  accesses storage media  which stores the objects as data items . The data item objects (e.g., data items ) relate to user interface display elements and controls that are displayed in a list region or other grouping, yet are independent of the user interface elements and control (i.e., how an object will ultimately be rendered for display).","In an embodiment, the data item objects  may be managed as a set of similar objects in an object collection where each of the objects have similar properties or fields. The content of the similar properties or fields is different for each different client object. In other embodiments, there may be other types of objects as part of another object collection maintained within the same data store (e.g., storage media ).","The application program  also accesses or is associated with the data style definitions  which may be developed or designed by the developer of the application program , or the data style definitions  may be created by a third party. The style definitions relate to the actual style properties to be associated with the data content of the data item objects  when the data is ultimately displayed. A data style definition  is stored separately from the data item objects  and is independent of the data itself.","A data style definition  influences the display of data in two principal ways: (1) by specifying property values for the item itself, and (2) by specifying an internal representation for the item, e.g., a visual subtree. For instance, a data style definition  may include font size (such as 12 or 10 point, etc.), type (such as Arial or Courier, etc.), color (such as black or red, etc.), attributes (such as bold or italics, etc.), location (such as position on the display), etc. Also, a data style definition may describe a visual subtree to aid in the creation of an internal visual representation of the data items, such as for a given data object having fields to be displayed. Moreover, the data style definitions  may be sub-divided into separate style definitions for each of the properties of each data object to be displayed. In a particular embodiment, a data style definition  may be stored for each class of data objects .","The data style definitions  may also contain list control style information which provides visual style information for the list control itself, independent of the data to be displayed in the list control. That is, there may be a significant amount of user interface information regarding the building of a list on a display including size information, border information, shading and color information, how the user interacts with the list, such as mouse interaction, etc. A list control style is used to provide such information.","In an embodiment, the application program  includes data binding definitions  that, during operation, cause data items  (e.g., properties of the data item objects) to be bound to the user interface elements or properties of a data style definition. The data binding definitions  can be implemented as declarative program statement(s) that associate one or more data objects to a data style. Such an association may be made by explicitly identifying the data types and the data style for that type, by providing a style selector call, by providing a default style, or by some other method.","Application program  operates on a platform that relates to the framework or application programming interface (API) which provides the necessary communication between the application program  and the operating system of the computing device, such as computing device  shown in . As such, the platform provides the intermediate functions and services to allow the application program  to ultimately display the user interface  on a display . Although not shown, the operating system and its necessary operations occur between the platform and display.","The platform can include a tree assembler module that parses the information received from the application program  to build a visual tree which is an internal representation of the display, and thus represents the combination of the data from the data item objects  to be displayed and the information from the data style definitions  that describe how to display the data. In an embodiment, the tree assembler module includes a style lookup module and a data bind module which are used to locate the style elements and to bind a property of a user interface element to a data property (i.e., establish the desired links). The application program  can request that the style lookup module lookup the correct style definition and request that the data bind module make the links. These requests may be declarative and interpreted by the tree assembler module, or procedural such that the application program  calls the binding methods at runtime. Moreover, a data style may also have a declarative request for binding to data as well in which case the data bind module handles the request.","In an embodiment, the tree assembler receives the data content and the style information directly from the application program . In other embodiments, the tree assembler may access the required content and style information directly from the data store (e.g., storage media ) and the definition module, respectively, through the operation of the data bind module. In doing so, the tree assembler understands where to look and what to find based on the binding information received from the application's data bind section.","The tree assembler module completes the visual tree and passes the tree to the rendering engine which utilizes the visual tree to render the display on the user interface display . In an alternative embodiment, the visual tree is passed first to a layout engine that adds more information to the visual tree using user interface elements from a user interface element factory to complete the tree. The layout engine understands the physical properties of the display such that it can determine where to place certain display items and how large to make them relative to the physical characteristics of a particular computing system.","The application program  and the tree assembler module operate in a dynamic environment wherein the tree assembler may make an initial visual tree and as the application program  executes, items and displays may change, such that the tree assembler may rewrite or modify the visual tree to ultimately update the display.","A listing of exemplary markup language (e.g., XAML code) is provided to illustrate defining a data style definition  for use by the tree assembler. As may be appreciated, the provided code is only one example of a way in which the concepts described herein may be implemented and should not be considered limiting to the shown syntax.",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Style def:Name=\u201cClientStyle\u201d>"]},{"entry":[{},"\u2003\u2003<Style.VisualTree>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<DockPanel>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<Text TextContent=\u201c*Bind(Path=Number)\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<Text TextContent=\u201c*Bind(Path=Title)\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003FontStyle=\u201dItalic\u201d \/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<Text TextContent=\u201c*Bind(Path=Name)\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<Text TextContent=\u201c*Bind(Path=File-by-Date)\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/DockPanel>"]},{"entry":[{},"\u2003\u2003<\/Style.VisualTree>"]},{"entry":[{},"<\/Style>"]},{"entry":[{},"<ListBox ItemStyle=\u201c{ClientStyle}\u201d ItemsSource="]},{"entry":[{},"\u201c*Bind(DataSource={Clients})\u201d"]},{"entry":[{},"<\/ListBox>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The first line <Style def:Name=\u201cClientStyle\u201d> represents the declaration or definition of a new style named \u201cClientStyle\u201d. The name is merely an example that continues from the client example shown in the list item regions  and  on user interface display . Following the definition of the style name, the markup describes the visual tree in the next eight lines. The visual tree consists of a dock panel that contains four text controls identified as \u201cTextContent=\u201d. The visual tree essentially states that when a client is displayed, four properties of a client object are to be shown as text (via the Text controls), using layout rules supplied by the surrounding DockPanel.","The first text control binds the data from the number field of the client object to be displayed first. As may be appreciated other details may be required to make this example work, such as adding width dimensions for the columns to each text control, etc. The second text control binds the data from the title field of the client object to be displayed second, the third text control binds the data from the name field of the client object to be displayed third, and the fourth text control binds the data from the date field of the client object to be displayed fourth. The style may be applied to all client objects at runtime such that the style does not have to be associated with the data until runtime. Further, this one style definition can be applied to all client objects such that the style does not have to be repeated when the client objects are created.","The exemplary code listing also illustrates a sample request to list clients. The \u201c<ListBox\u201d command represents a \u201cListBox\u201d control syntax for XAML. The ListBox declaration contains an explicit \u201cItemStyle\u201d reference which, in this case, is set to \u201cClientStyle\u201d to call, or reference, the data style definition described above. Further this ListBox example also designates the source of the items as \u201cItemsSource=\u201c*Bind(DataSource={Clients})\u201d.\u201d Binding the item source in this manner indicates that the ListBox command is to list data from all the client objects using the client style definition. From this, the tree assembler builds a visual tree to list the numbers, titles, names, and dates of all the client objects in the client collection.","An exemplary visual tree is provided which is a tree-like structure having nodes for the visual representation of the elements to be displayed. Not all elements are shown in a visual tree as not all elements have visual information, and this is only a portion of a potentially larger visual tree.",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ListBox"]},{"entry":[{},"...(elements from the style for ListBox)..."]},{"entry":[{},"DockPanel"]},{"entry":[{},"\u2003\u2003ListItem"]},{"entry":[{},"\u2003\u2003...(elements from the style for ListItem)..."]},{"entry":[{},"\u2003\u2003ContentPresenter"]},{"entry":[{},"\u2003\u2003\u2003\u2003Dock Panel"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Number1"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Title1"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Name1"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Date1"]},{"entry":[{},"\u2003\u2003ListItem"]},{"entry":[{},"\u2003\u2003...(elements from the style for ListItem)..."]},{"entry":[{},"\u2003\u2003ContentPresenter"]},{"entry":[{},"\u2003\u2003\u2003\u2003Dock Panel"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Number2"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Title2"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Name2"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = Date2"]},{"entry":[{},"\u2003\u2003ListItem"]},{"entry":[{},"\u2003\u2003...(elements from the style for ListItem)..."]},{"entry":[{},"\u2003\u2003ContentPresenter"]},{"entry":[{},"\u2003\u2003\u2003\u2003Dock Panel"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = NumberN"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = TitleN"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = NameN"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Text = DateN"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The first item in the visual tree is the list box item which the tree assembler enters into the visual tree when encountering a list box command. Next, an inquiry is performed to determine the data style information for the list box itself. The data style information may include properties of the ListBox as well as a visual tree that may contain borders or shading information, controls for scrolling, and the like. In an embodiment, the visual tree contains one element (usually a Panel of some sort) with a property such as \u201cIsItemsHos=true\u201d that indicates where the user interface for the data items belongs. The tree assembler sets the properties of the ListBox to their desired values, creates a copy of the desired visual tree, and adds it to the main visual tree.","The tree assembler creates the user interface for the data items, one at a time, and adds the data item properties to the visual tree under the panel. This user interface is derived from the list control itself, and the ListBox indicates that it expects the first piece of the user interface to be a ListItem. Other list controls may indicate a different type of element, such as a Menu might indicate that it expects a MenuItem. In an embodiment, the manner in which the ListBox indicates that it expects a ListItem involves the use of an \u201cItemsControl\u201d object which has a property called \u201cItemUIType.\u201d A derived class like ListBox sets this property to typeof(ListItem). The tree assembler module queries this property and creates an element of the desired type. The tree assembler creates an element of this type (a ListItem in the present example), performs an inquiry for its style information, and creates the corresponding visual tree. This style information might describe how the user interacts with the list item, such as what happens when the mouse cursor hovers over a list item, etc.","The visual tree typically contains a special element that indicates where the user interface for the data item belongs. In one embodiment, this special element is a ContentPresenter which is where the second piece of user interface is added. The tree assembler performs an inquiry to determine the style information for the data item, creates a copy of the visual tree described in that style, and adds it to the main visual tree. Thus the content presenter functions to \u201cstyle\u201d the data content.","The content presenter acts to retrieve the first object and upon receiving the object, such as a client object in this example, the tree assembler uses the defined item's style to layout the proper fields in the visual tree. For instance, the first element in the ClientStyle is a Dock Panel command, such that a dock panel entry is made in the visual tree. Next, with the dock panel, the ClientStyle displays the first text element which is the number from the first client object. The actual text (e.g., the reference number) is not placed here, however. Rather, a binding is defined to account for later changes made to the actual data (i.e., when the data changes in the data item, the data associated with the visual tree will also change). The additional text entries for the client title, name, and date are also inserted into the visual tree.","This process is repeated for all of the client objects which are entered into the visual tree as sub-trees. The completed visual tree may be passed to a layout engine for additional user interface elements prior to being sent to the rendering engine. In another embodiment, the layout engine calls the tree assembler as needed to generate the tree just in advance of the layout process. In essence, the layout engine and the tree assembler module are separate but cooperating modules. The rendering engine accepts the visual tree and uses the same to display the list of clients on the display.","In a method for an embodiment of data association, a request is received to display data from a set of objects. Optionally, the set of objects may be related in that each object is of the same type or of the same class. Upon receiving the request to display data from the data objects, a parse operation parses the request to identify that a list is to be displayed and to determine whether a data style definition should be applied to the list. Further, the parse operation iterates over the list of items and determines if any particular styles should be applied to the data items themselves. In an embodiment, the request to display the data also includes style information which initiates requests, at runtime, to the platform to establish links between the data and the associated styles. In establishing the appropriate links, a search operation may be performed to search for and locate the appropriate style.","Upon establishing the appropriate links, defined styles are applied for the data objects. Although the style is described independently of the data, an apply operation determines the user interface elements to apply from the style such that a visual tree data structure may be built or modified. The modified visual tree may include binding information which initiates requests, at runtime, to the platform to establish links between the properties of the user interface elements and the properties of the data items. These requests may be declarative in that they are interpreted by the platform, or procedural in that the application program  calls the binding methods at runtime.","In applying the defined style, visual information is entered into a visual tree. Each data object is associated with style information that is defined independently from the data itself, and stores the information into a data structure, such as the visual tree. The visual tree has visual information for all of the data items (and other user interface elements) to be displayed. The application program  requests that the data bind module make these links, and these requests may be declarative in that they are interpreted by the tree assembler module, or procedural in that the application program  calls the binding methods at runtime. Moreover, the data styles may also have a declarative request for binding to data as well in which case the data bind module handles these requests. The visual tree is passed to the layout engine and to the rendering engine to optionally apply more style information and to render the display items on the display device.","In another method for an embodiment of data association, list item styling is applied when a list item is to be displayed since the object is a list item. The list-item style relates to an independently defined set of user interface elements that apply to list-items in general, and independently from the actual data to be presented, or displayed in the list. For example, the list-item style may define the background color for the list item or define how the user may interact with the list item.","The content presenter is invoked which provides an indication that a data item is to be displayed. In an embodiment and, as the list item display process is progressing, a content presenter command is received that identifies the actual data object having the data for display. The data style associated with first list item is obtained and the content presenter is invoked which identifies the object collection and the object to be retrieved, along with information regarding the appropriate or relevant visual style. Once the appropriate style is selected, the appropriate style is applied to the content presenter which inserts the visual information into the visual tree. The visual information typically includes user interface properties that are data-bound to data properties of the data object.","A determination is made as to whether all of the data objects have been entered into the visual tree. If there are more objects to add to the visual tree, then the process of applying a list item style to the visual tree is repeated for each object until all of the objects have been evaluated and their visual representations have been entered into the visual tree. In an alternative embodiment, other items may be taken into account before causing the repetition, such as determining to stop adding visual elements to the visual tree when enough user interface elements have been created to fill the available space. Alternatively, it may be determined that a time threshold limit has been exceeded such that no more objects should be added to the visual tree.","There are several methods to determine which style to apply to the data content, such as a style being provided to the list box request as described above where the ItemStyle is specifically provided as the \u201cClientStyle\u201d such that the content presenter searches for and uses a defined style named ClientStyle. This is an example of an explicit reference by the name of a style. In another embodiment, the list box request may not provide the item style information, but rather provides only the item source information. In this case, the tree assembler recognizes the type of the object to apply to a style. Using this type information, the tree assembler is able to search for any styles that are defined based on the type of the object. In an embodiment, a collection of objects may have many different types of objects, such as client type objects, customer type objects, and others. To display a list of these objects, the list box request may simply refer to the types that are to be displayed and the tree assembler identifies the proper style to apply based on this type information.","In yet another embodiment, the style information is identified using an \u201cItemStyleSelector\u201d object in the list box request. For example, <StyleSelector def:Name=\u201d(anyStyleSelector)\u201d where \u201cStyleSelector\u201d is a class of objects having one method, SelectStyle. The application developer may cause a style selector object to be instantiated when a list box function is called to allow the developer a means of selecting the appropriate style for the appropriate objects. This \u201cStyleSelector\u201d class is particularly useful when an application developer wants to apply different styles to objects of the same type, but having different properties.","In an order of priority, the tree assembler looks for an explicit reference first, then determines whether a style selector has been identified when no explicit style reference is indicated. Next, if neither an explicit style reference nor a style selector has been identified, the tree assembler identifies the type of object and searches for a style based on the object type. Lastly, if no object type style is defined, then a default style may be applied and\/or an error message may be displayed to the user.","The operations described above depend on many different things, such as the collection of items, the values of the properties within the collection of items, the style information, the style selector information, the styles defined for the controls (e.g. the list box control and the list item control), etc. Each of the various elements that make up the display components may, in fact, change dynamically. The platform responds to such changes by re-applying the methods as necessary to produce a desired result. For example, during execution of the application program , a new data object may be added to the object collection by use of an add item control on the user interface. In response, the tree assembler module is notified of the change where the notification may be an active notification calling to the tree assembler module, or alternatively, the notification may result from the tree assembler module \u201clistening\u201d for such an event.","Upon being notified of the change, the tree assembler module may determine whether the insertion is relevant (e.g., change the current display). In some cases, the tree assembler module may only generate user interface elements to fill one screen or display at a time and thus if the change to the object collection results in an insertion into an \u201coff-screen\u201d area, then the tree assembler module may determine that the change is not relevant for the current display and do nothing. If however, the tree assembler module determines that the change is relevant, then the tree assembler module generates or changes the visual tree to include the new objects data items and inserts the new user interface elements in the correct place within the visual tree. The new data object will get styled as described above and the visual tree will be passed to the rendering engine to be displayed.","Similarly, when an item is removed from the object collection, the tree assembler module may be notified and, in response, determine the relevance of the removal. If the removal is relevant, the tree assembler module removes the corresponding user interface elements from the visual tree and thus rebuilds the visual tree. Again, the new tree is passed to the rendering engine for display rendering. In an embodiment, a collection change relates to a \u201crefresh\u201d when an object collection is changed in some way. For example, when an application program sorts a collection, the collection may send a refresh notification to the system which causes the tree assembler module to rebuild the visual tree according to the new order of the data items.","When the item style property is changed, a notification is sent to the tree assembler module as well. In some cases the item style may have been used in styling many different objects such that the tree assembler module must determine whether changes are relevant and where. If relevant, a re-styling in all the necessary locations occurs potentially resulting in a new user interface being displayed according to the new style. Accordingly, the same process occurs when the item style selector property changes as well.","In another method for an embodiment of data association, dynamic changes to items and styles begin when a change has been made to an object collection that is currently being displayed and\/or is being prepared for display. The changes to the object collection may relate to the addition of an object, the deletion of an object or a change to an existing object, wherein the change relates to data that is to be displayed. The method may also apply when a change is made either to an item style or a style selector that applies to the present display or present visual tree.","A visual tree is an internal representation of the data to be displayed and, because that data has changed due to a change to the object collection or to the defined styles, the visual tree is no longer valid and is invalidated. Such an invalidation may involve the setting or clearing of a bit to indicate that the present visual tree is no longer valid. The visual tree is recognized as no longer being valid which may relate to the tree assembler module being notified of the invalidation operation, or the tree assembler module may listen for the type of event.","When the visual tree is invalidated, a determination is made as to whether the change is relevant by comparing against the current display to determine if the change would cause a change in the current display. If the change is relevant, a rebuild operation begins rebuilding the entire visual tree as described above, to incorporate the change. In other embodiments, the rebuild operation simply identifies where the visual tree should change and makes those changes. Upon rebuilding the tree, the tree is passed to the rendering engine to cause the actual presentation of the display (e.g., re-rendering the display). As described, the visual tree may be passed to a layout engine for added user interface elements prior to passing to the rendering engine.","The objects in a set may be managed as a collection and additional user interface elements may be added through the use of a defined style to a \u201cgroup\u201d of objects. The definition of the group, and how the group-level user interface elements look, may therefore be independent of the group itself. In an embodiment, an application program  may provide the ability to display a second list region  that includes details  of a listed item from a master list, such as list region . The details listed in list region  may display most or all of the data properties for a particular object, such as a client object, where the master list  only lists some of the data properties. It will be appreciated that when managing large numbers of data objects, a user may wish to only view the abbreviated set of data properties when viewing the list of different objects and, when a particular item is selected, the user may then wish to view all of the information. In an embodiment, the use of such a details window in combination with a master list is considered a \u201cmaster-detail\u201d implementation.","When a master data item changes dynamically (e.g., display element ()), there is a need to accommodate the change by processing that item's associated detail items. To accommodate this change, data displayed in the detailed list region  is automatically updated because each of the displayed fields in the list region  are bound to the actual data records, just as the displayed fields in the list region .","Utilizing the systems and methods described for data association, an application program developer can apply many different and flexible data styling techniques to data used in the application. The defined data styles can be used for one or more different objects, and the application program developer can assign style information in a declarative manner (e.g., the systems and methods provide a declarative way to program how data looks when displayed and how an end user might interact with the user interface elements and underlying data). In doing so, the data is separated from the user interface elements and style definitions. Consequently, the developer or an end user may change the data objects without changing the user interface elements. Likewise, the developer may alter or change the user interface elements without changing the data objects.","Methods for data association, such as exemplary method  described with reference to  may be described in the general context of computer executable instructions. Generally, computer executable instructions include routines, programs, objects, components, data structures, procedures, and the like that perform particular functions or implement particular abstract data types. The methods may also be practiced in a distributed computing environment where functions are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, computer executable instructions may be located in both local and remote computer storage media, including memory storage devices.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIGS. 3A and 3B","b":"300"},"At block  (), a binding association is defined between an element property of a user interface element and a data item property such that a value of the element property is defined by the association to the data item property. For example, binding definition  () associates an element property of a user interface element () and a data item property such that the reference number (e.g., a value) of the data item property is displayed by the user interface display element (). The binding association defines a visual representation of the user interface element with the data item property such that the user interface element is displayed according to the associated value of the data item property. The application program  which generates the user interface  can be developed independent of the data item . Further, the data item  having the data item property with the associated value for display on user interface  can be developed independent of display-related information for the user interface display element ().","At block , a transformed value of the data item property is generated for association with the element property of the user interface element. For example, transform definition  transforms a value of the data item property (of data item ), and the transformed value is associated with the element property of the user interface display element . The transformed value can be generated for compatible association with the element property of the user interface display element. Further, the transform definition  can be developed as a logic component of the application program  to generate the transformed value of the data item property. The value of the data item property is maintained unchanged in a data item database, such as storage media  ().","At block , a data item update is received that corresponds to a change of the associated value of the data item property, and the element property of the user interface display element is updated with the associated value change of the data item property. For example, the value of the data item property (of data item ) can be changed and binding definition  updates the element property of the user interface display element () with the value change.","At block , a user interface element update is received that corresponds to a change of the value of the element property of the user interface element, and the associated data item property is updated with the value change of the element property of the user interface element. For example, the value of the element property of user interface display element () can be changed on user interface  and the data item property of data item  is updated with the value change.","At block , a data context property is defined to identify the data item as the data source of the user interface element, and at block  (), an additional binding association is defined between an element property of an additional user interface element and an additional data item property of the data item where the additional user interface element has a dependent association to the user interface element, and where the additional binding association defaults to the data context property to identify the data item as the data source of the additional user interface element.","At block , a collection of data items is defined and a representation of the data items is developed for display in a list box of the user interface, where the list box is bound to the representation of the data items of the collection, and where the list box has display elements that are each associated with a referenced data item in the representation of the data items. Further, a collection  () of data items  can also be defined to include a first representation of the data items  and at least a second different representation of the data items  where the first representation and the second different representation each reference the data items  in the collection .","At block , a data style definition is defined for a visual representation of the associated value of the data item property on the user interface. Further, the data style definition can be defined for a template of the user interface element to display the associated value of the data item property. An additional binding association can be defined to associate the data item property with the data style definition, and an additional binding association can be defined to associate data items with a data style definition that defines a visual representation of the data items as a data tree. At block , an instance of a data class is declared which corresponds to a type of data as a resource, where the binding definition is defined to include a reference to the data class in a declaration of the binding definition.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 4","b":["400","400","400","400"]},"The computer and network architectures in computing environment  can be implemented with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, client devices, hand-held or laptop devices, microprocessor-based systems, multiprocessor systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, gaming consoles, distributed computing environments that include any of the above systems or devices, and the like.","The computing environment  includes a general-purpose computing system in the form of a computing device . The components of computing device  can include, but are not limited to, one or more processors  (e.g., any of microprocessors, controllers, and the like), a system memory , and a system bus  that couples the various system components. The one or more processors  process various computer executable instructions to control the operation of computing device  and to communicate with other electronic and computing devices. The system bus  represents any number of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures.","Computing environment  includes a variety of computer readable media which can be any media that is accessible by computing device  and includes both volatile and non-volatile media, removable and non-removable media. The system memory  includes computer-readable media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS)  maintains the basic routines that facilitate information transfer between components within computing device , such as during start-up, and is stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently operated on by one or more of the processors .","Computing device  may include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example, a hard disk drive  reads from and writes to a non-removable, non-volatile magnetic media (not shown), a magnetic disk drive  reads from and writes to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  reads from and\/or writes to a removable, non-volatile optical disk  such as a CD-ROM, digital versatile disk (DVD), or any other type of optical media. In this example, the hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . The disk drives and associated computer readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for computing device .","Any number of program modules can be stored on the hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of example, an operating system , one or more application programs , other program modules , and program data . Each of such operating system , application programs , other program modules , and program data  (or some combination thereof) may include an embodiment of the systems and methods described herein.","Computing device  can include a variety of computer readable media identified as communication media. Communication media typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, other wireless media, and any combination thereof.","A user can interface with computing device  via any number of different input devices such as a keyboard  and pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, controller, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to the processors  via input\/output interfaces  that are coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, and\/or a universal serial bus (USB).","A monitor  or other type of display device can be connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , other output peripheral devices can include components such as speakers (not shown) and a printer  which can be connected to computing device  via the input\/output interfaces .","Computing device  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, the remote computing device  can be a personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, and the like. The remote computing device  is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computing device .","Logical connections between computing device  and the remote computing device  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. When implemented in a LAN networking environment, the computing device  is connected to a local network  via a network interface or adapter . When implemented in a WAN networking environment, the computing device  typically includes a modem  or other means for establishing communications over the wide area network . The modem , which can be internal or external to computing device , can be connected to the system bus  via the input\/output interfaces  or other appropriate mechanisms. The illustrated network connections are exemplary and other means of establishing communication link(s) between the computing devices  and  can be utilized.","In a networked environment, such as that illustrated with computing environment , program modules depicted relative to the computing device , or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs  are maintained with a memory device of remote computing device . For purposes of illustration, application programs and other executable program components, such as the operating system , are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computing device , and are executed by the processors  of the computing device.","Data Association Binding & System Windows Data","This namespace includes classes and interfaces used for binding properties to data sources, data source classes, data-specific implementations of collections and views, and handling exceptions in data entry. The following lists the members exposed by the System.Windows.Data namespace.","Classes","ArrayListCollectionView encapsulates the collection view support for the ArrayListDataCollection collection class. This class cannot be inherited.","ArrayListDataCollection provides a built-in implementation of an array-list data collection with an underlying collection-view interface. It also implements ICollectionChange to provide notification when items are added, items are removed, or the whole collection is refreshed.","Bind Represents a bind declaration object, used to manage bindings between a dynamic property user interface (UI) and source data.","Binding Provides access to the single run-time instance of a binding. This class cannot be inherited.","BindingListCollectionView\u2014A collection view class used for Microsoft\u00ae ActiveX\u00ae Data Objects (ADO) data views.","CollectionContainer\u2014Objects of this class hold an existing collection structure\u2014for example, an ArrayListDataCollection or some other DataSet inside the ItemCollection.","ContextAffinityCollectionView\u2014Implements a collection view that includes checks for context affinity.","DataContextObjectRef\u2014Supports object references to elements whose DataContext is being used as the source for a binding. This class cannot be inherited.","DataSourceObjectRef\u2014Supports object references to data sources. This class cannot be inherited.","DataTransferEventArgs\u2014Encapsulates arguments for data transfer events. The events are routed events that must typically be handled specifically by a designated handler based on the DataTransferEventHandler delegate.","ElementObjectRef\u2014Represents an object reference to an element, with the object being specified by its element ID. This class cannot be inherited.","ExplicitObjectRef\u2014Represents an object reference to an explicit object. This class cannot be inherited.","ListCollectionView\u2014Implements a collection view for collections based on IList.","ObjectDataSource\u2014Serves as a data source for data binding. Bindable data items can be specified as common language runtime types.","ObjectRef\u2014The abstract class that is used as the parent class of DataContextObjectRef, ElementObjectRef, ExplicitObjectRef, and TypeObjectRef.","ParameterCollection\u2014Objects of this class hold the collection of named parameters (with their corresponding values) for an SqlDataSource.","QueryCommand\u2014This class represents a single select statement to be submitted to the database.","RefreshCompletedEventArgs\u2014Encapsulates the arguments passed either in the RefreshCompleted event of ObjectDataSource, or in the RefreshCompleted event of XmlDataSource.","SqlCommandList\u2014A list of sql commands and the names of the tables that they should be used to fill.","SqlDataSource\u2014SqlDataSource gets data from a Microsoft SQL Server for use in databinding.","TransformerSource\u2014Allows resource reference to a transformer class that is defined as code-behind in the current application.","TypeObjectRef\u2014Supports object reference by type. This class cannot be inherited.","WinFSDataSource\u2014The WinFSDataSource facilitates databinding of data stored in WinFS with Avalon applications.","XmlDataNamespaceManager\u2014XmlDataNamespaceManager Class Used to declare namespaces to be used in Xml data binding XPath queries.","XmlDataSource\u2014Serves as a data source for data binding to Extensible Markup Language (XML) content nodes.","XmlNamespace\u2014Declares an individual namespace within an XML data source.","Interfaces","IContains\u2014Used to create classes that declare filtering criteria for collection views.","IDataSource\u2014Supports creation of data source objects. Data source objects are used for common representation of data for data binding.","IDataTransformer\u2014Provides methods that enable client-side transformation of bound data.","Enumerations","BindFlags\u2014Describes special properties of a binding.","BindStatus\u2014Status of a Binding.","BindType\u2014Describes how changes in data values will transfer to and from source properties and target properties of a binding.","SqlDataSourceMode\u2014The enumeration of the possible modes that SqlDataSource can have. The mode determines what sort of data is returned when the application retrieves the value from the Data property.","UpdateType\u2014Specifies when updates to the data source (target-to-source data transfer) should occur in a binding. Setting these values will only be relevant if a binding's BindType is set to TwoWay (or defaults to TwoWay).","Delegates","DataChangedEventHandler\u2014Represents the method that handles the DataChanged event raised by data sources that implement IDataSource.","DataTransferEventHandler\u2014Represents the method that handles a data transfer event raised by Binding.","RefreshCompletedEventHandler\u2014Represents the method that handles the ObjectDataSource.RefreshCompleted and XmlDataSource.RefreshCompleted events.",{"@attributes":{"id":"p-0159","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003class sealed System.Windows.Data.ArrayListCollectionView \u2003:"},{"entry":"ListCollectionView : ContextAffinityCollectionView :"},{"entry":"CollectionView : Object Implements:\u2003IEnumerable\u2003ICollectionChange"},{"entry":"ICurrentItem\u2003IComparer"},{"entry":"{"},{"entry":"protected virtual Void OnCollectionChanged(Object sender,"},{"entry":"CollectionChangeEventArgs args)"},{"entry":"protected virtual IList PrepareLocalArray(IList list)"},{"entry":"}"},{"entry":"\u2003\u2003\u2003\u2003class System.Windows.Data.ArrayListDataCollection :"},{"entry":"ArrayList : Object Implements: IList ICollection IEnumerable"},{"entry":"ICloneable ICollectionChange"},{"entry":"ICollectionViewFactory"},{"entry":"{"},{"entry":"public virtual Int32 Add(Object newItem)"},{"entry":"public virtual Void AddRange(ICollection range)"},{"entry":"public virtual Void Clear( )"},{"entry":"public virtual sealed CollectionView CreateView( )"},{"entry":"public virtual Void Insert(Int32 index, Object insertItem)"},{"entry":"public virtual Void InsertRange(Int32 index, ICollection c)"},{"entry":"public virtual Void Remove(Object removeItem)"},{"entry":"public virtual Void RemoveAt(Int32 intex)"},{"entry":"public virtual Void RemoveRange(Int32 index, Int32 count)"},{"entry":"public virtual Void Reverse( )"},{"entry":"public virtual Void SetRange(Int32 index, ICollection c)"},{"entry":"public virtual Void Sort( )"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Represents a bind declaration object, used to manage bindings between a dynamic property user interface (UI) and source data.","BeginDefer\u2014Begins a defer cycle. Defer cycles are used to batch multiple bind declaration changes and improve performance.","Bind\u2014Initializes a new instance of the Bind class. The Bind object represents the bind declaration of a binding.","EndDefer\u2014Ends a defer cycle and updates the binding with the accumulated declaration changes made to the Bind declaration object.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","IApplyValue.Apply\u2014Applies the value to a property of an element. In this class, this method is not intended to be called directly.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Properties","BindFlags\u2014Gets or sets the flags that describe the binding.","BindType\u2014Gets or sets the type of the binding.","Culture\u2014Gets or sets the CultureInfo to use in a transformer associated with the binding (which may be the default transformer, if the Transformer property is not specifically set on the Bind object).","DataContextSource\u2014Gets or sets the reference to another element that this element should use as source for the binding's data context.","DataSource\u2014Gets or sets the object reference to the data source of the binding.","ElementSource\u2014Gets or sets a string naming the identifier (ID) of another element in the application that should be used as the data source for the binding.","ObjectSource\u2014Gets or sets the object reference to the data source of the binding.","Path\u2014Gets or sets the description or name of the desired data property in the source, or an XPath query to desired data if the binding is to Extensible Markup Language (XML) data.","Source\u2014Gets or sets the source object of the binding, as a special object reference object.","Transformer\u2014Gets or sets a reference to the transformer to apply to the bound property.","UpdateType\u2014Gets or sets the update type used in this bind declaration.","The Bind class is used to create and maintain the bind declaration. The declaration establishes the various base properties required for a typical binding, such as the source property, the type of the binding's update relationship of source vs. bound data, and other characteristics of a particular binding.","A Bind object's properties can be manipulated after the binding has been established, using C# calls to properties.","Properties of the Bind class closely parallel the *Bind syntax used for establishing a bind declaration in a particular markup language (named \u201cXAML\u201d).","Bind to a Property","This example describes how to bind to a property using \u201cXAML\u201d.","All bindings include the following:","Target element","Target dynamic property","Source object","Source property","In this case, the BoundColor property is the source property, myData is the source object, Button is the target element, and Background is the target property.",{"@attributes":{"id":"p-0195","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003<DockPanel ID=\u201croot\u201d"},{"entry":"\u2003\u2003xmlns=\u201chttp:\/\/schemas.microsoft.com\/2003\/xaml\u201d"},{"entry":"\u2003\u2003xmlns:def=\u201cDefinition\u201d"},{"entry":"\u2003\u2003>"},{"entry":"\u2003\u2003<DockPanel.Resources>"},{"entry":"\u2003\u2003<ObjectDataSource def:Name=\u201cmyDataSource\u201d"},{"entry":"\u2003\u2003TypeName=\u201cWCPSample.myData,BindNonTextPropertySample\u201d\/>"},{"entry":"\u2003\u2003<\/DockPanel.Resources>"},{"entry":"\u2003\u2003<DockPanel>"},{"entry":"\u2003\u2003<DockPanel.DataContext>"},{"entry":"\u2003\u2003<Bind DataSource=\u201c{myDataSource}\u201d\/>"},{"entry":"\u2003\u2003<\/DockPanel.DataContext>"},{"entry":"\u2003\u2003<Button"},{"entry":"Background=\u201c*Bind(Path=BoundColor;BindTypeOneWay)\u201d"},{"entry":"Width=\u201c200\u201dHeight=\u201c30\u201d>I am RED!<\/Button>"},{"entry":"\u2003\u2003<\/DockPanel>"},{"entry":"\u2003\u2003<\/DockPanel>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Create a Binding","This example shows how to create a binding in C#. To do this, you attach the binding object for the SampleText source property in data to the Text property of the SimpleText element, mytext.","When calling the Bind constructor, you can pass the source object through the ExplicitObjectRef constructor to get an ObjectRef object. There are many possible signatures both for the Bind constructor and for the SetBinding convenience method, and it is even possible to create the entire binding with the convenience method without calling the Bind constructor at all, but this example splits the operation into the constructor piece and then the specific setting of that bind declaration on an individual property of an element. If you do this in two steps, then the bind declaration created as the intermediate can be reused for binding to more than one element in your application.",{"@attributes":{"id":"p-0199","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003public void CreateBinding( )"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003myDataObject = new myData(System.DateTime.Now);"},{"entry":"\u2003\u2003\u2003\u2003myBindDef = new Bind(\u201cMyDataProperty\u201d,"},{"entry":"\u2003\u2003\u2003\u2003BindType.TwoWay,"},{"entry":"\u2003\u2003new ExplicitObjectRef(myDataObject));"},{"entry":"\u2003\u2003\u2003\u2003mytext.SetBinding(SimpleText.TextProperty, myBindDef);"},{"entry":"\u2003\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003class sealed System.Windows.Data.Bind : Object Implements:"},{"entry":"IApplyValue"},{"entry":"{"},{"entry":"public Void BeginDefer( )"},{"entry":"public Void EndDefer( )"},{"entry":"public BindFlags get_BindFlags( )"},{"entry":"public BindType get_BindType( )"},{"entry":"public CultureInfo get_Culture( )"},{"entry":"public String get_DataContextSource( )"},{"entry":"public Object get_DataSource( )"},{"entry":"public String get_ElementSource( )"},{"entry":"public Object get_ObjectSource( )"},{"entry":"public String get_Path( )"},{"entry":"public ObjectRef get_Source( )"},{"entry":"public IDataTransformer get_Transformer( )"},{"entry":"public UpdateType get_UpdateType( )"},{"entry":"virtual sealed Void System.Windows.IApplyValue."},{"entry":"Apply(DependencyObject"},{"entry":"target, DependencyProperty dp)"},{"entry":"public Void set_BindFlags(BindFlags value)"},{"entry":"public Void set_BindType(BindType value)"},{"entry":"public Void set_Culture(CultureInfo value)"},{"entry":"public Void set_DataContextSource(String value)"},{"entry":"public Void set_DataSource(Object value)"},{"entry":"public Void set_ElementSource(String value)"},{"entry":"public Void set_ObjectSource(Object value)"},{"entry":"public Void set_Path(String value)"},{"entry":"public Void set_Source(ObjectRef value)"},{"entry":"public Void set_Transformer(IDataTransformer value)"},{"entry":"public Void set_UpdateType(UpdateType value)"},{"entry":"}"},{"entry":"\u2003\u2003\u2003\u2003enum sealed System.Windows.Data.BindFlags :"},{"entry":"\u2003\u2003\u2003\u2003Enum : ValueType :"},{"entry":"Object Implements: IComparable IFormattable IConvertible"},{"entry":"{"},{"entry":"public static BindFlags NotifyOnTransfer"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Get the Bind Declaration Object of a Binding Expression","Provides access to the single run-time instance of a binding. This class cannot be inherited.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetDataContext\u2014Returns a data context. This method is a static accessor for a given binding's data context object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetSources\u2014Returns an array list of sources for the original binding expression.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","GetValue\u2014Returns the evaluated value of a binding expression. This method is intended to be called statically.","GetView\u2014Returns collection views of the data in the binding.","GetXmlNamespaceManager\u2014Returns an Extensible Markup Language (XML) namespace manager object used by the binding attached to the provided element.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","OnAttach\u2014Handles the notification that a binding expression has been set as a property's value. This method is called statically, but generally is not used by application code.","OnDetach\u2014Handles the notification that a binding expression has been removed as a property's value. This method is called statically, but generally is not used by application code.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","SetDataContext\u2014Sets the data context of a binding for a given object\/property combination. This method is intended to be called statically.","SetValue\u2014Sets the value of a binding. Returns a value that indicates whether the given value could be accepted. This method is intended to be called statically.","SetXmlNamespaceManager\u2014Sets a namespace manager object used by the binding attached to the provided element.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.\n\n","Property Description","DataItem\u2014Gets the data item currently in use by the binding. This could be a single object, or a collection, depending on the path conditions that established the binding.","DataSource\u2014Gets the source of the binding, as a data source object. This might be an element from within the application or markup, or an external object that is specified as the data source resource.","ParentBind\u2014Gets the Bind declaration object from which this Binding derived.","Status\u2014Gets the status of a Binding.","Field Description","DataContextProperty\u2014Declares the DependencyProperty for a binding's data context so that it can be set as a property in the *Bind syntax.","DataTransferEventID\u2014A field that is used to identify the routing identifier (ID) for data transfer events. Reference this field statically.","XmlNamespaceManagerProperty\u2014Declares the DependencyProperty for a binding's XML namespace manager, so that it can be set as a property in the *Bind syntax.","This class can be used to get the Bind Declaration Object of a Binding Expression, get the Status of a Binding, and control Updates to Data Bindings.","A related class, Bind, provides access to the bind declaration. The bind declaration is where you specify the property or path used in the binding and other declarations. The declaration can be specified either as properties of Bind or by using the bind declaration syntax in markup when first setting a DataContext on an element.","A Binding object can be obtained through the return value of calling GetBinding on a data bound object.","Get the Bind Declaration Object of a Binding Expression","The following C# example shows how to obtain the bind declaration object associated with a binding, by using the binding's target element and property. Having the bind declaration object available is useful because you may want to set or get properties that are carried in the declaration. Also, you could use this same declaration to qualify much of the bind declaration information needed for a totally different binding using the same data. To get the Bind declaration object, you need to get the Binding for a specified property on a target element. Then get the ParentBind property of the Binding object.",{"@attributes":{"id":"p-0234","num":"0234"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003Binding myBinding =mytext.GetBinding(SimpleText.TextProperty);"},{"entry":"\u2003\u2003\u2003\u2003if(myBinding!=null)"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003Bind myBindDec;"},{"entry":"\u2003\u2003\u2003\u2003myBindDec = myBinding.ParentBind;"},{"entry":"\u2003\u2003\u2003\u2003... \/\/now change properties of the bind declaration, or re-use it for"},{"entry":"\u2003\u2003another binding"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003class sealed System.Windows.Data.Binding : Expression : Object"},{"entry":"{"},{"entry":"public Object get_DataItem( )"},{"entry":"public Object get_DataSource( )"},{"entry":"public Bind get_ParentBind( )"},{"entry":"public BindStatus get_Status( )"},{"entry":"public static Object GetDataContext(DependencyObject d)"},{"entry":"public virtual DependencySource[ ] GetSources( )"},{"entry":"public virtual Object GetValue(DependencyObject d, DependencyProperty dp)"},{"entry":"public static CollectionView GetView(Object collection)"},{"entry":"public static CollectionView GetView(Object collection, String name)"},{"entry":"public static Object GetXmlNamespaceManager(DependencyObject d)"},{"entry":"public virtual Void OnAttach(DependencyObject d, DependencyProperty dp)"},{"entry":"public virtual Void OnDetach(DependencyObject d, DependencyProperty dp)"},{"entry":"public static Void SetDataContext(DependencyObject d, Object value)"},{"entry":"public virtual Boolean SetValue(DependencyObject d, DependencyProperty dp,"},{"entry":"Object value)"},{"entry":"public\u2003\u2003static\u2003\u2003Void\u2003\u2003SetXmlNamespaceManager(DependencyObject\u2003\u2003d,"},{"entry":"XmlNamespaceManager value)"},{"entry":"public Void Update( )"},{"entry":"public static readonlyDependencyProperty DataContextProperty"},{"entry":"public static readonlyRoutedEventID DataTransferEventID"},{"entry":"public static readonlyDependencyProperty XmlNamespaceManagerProperty"},{"entry":"}"},{"entry":"\u2003\u2003\u2003\u2003enum sealed System.Windows.Data.Binding+BindStatus : Enum :"},{"entry":"ValueType : Object Implements: IComparable IFormattable IConvertible"},{"entry":"{"},{"entry":"public static BindStatus Active"},{"entry":"public static BindStatus Detached"},{"entry":"public static BindStatus Inactive"},{"entry":"public static BindStatus NoDataItem"},{"entry":"public static BindStatus PathError"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A collection view class used for Microsoft\u00ae ActiveX\u00ae Data Objects (ADO) data views.","Event Description","CollectionChanged occurs when the collection view changes. This could mean that items were added or removed in the collection, or that a new sort or filter was applied to this view. Inherited from CollectionView.","CurrentChanged occurs immediately after the record pointer position moves.","CurrentChanging occurs when a request is made to move the current record pointer. The requested move can be canceled by setting a handler and using the CancelEventArgs object within arguments of the event to cancel the event.","ProtectedCurrentChanged\u2014A protected event. In derived classes, this event occurs after changing the position of the record pointer. Inherited from CollectionView.","ProtectedCurrentChanging\u2014A protected event. In derived classes, this event occurs before a change in currency. If necessary, handlers of the event can cancel the change. Inherited from CollectionView.","Method Description","BindingListCollectionView\u2014Initializes a new instance of the BindingListCollectionView class.","ChangedCurrent\u2014Raises the implemented CurrentChanged event of the object. Inherited from CollectionView.","CheckUiContextAccess\u2014Determines whether the calling thread is active within the context this collection view is bound to. Inherited from ContextAffinityCollectionView.","Compare\u2014Return \u2212, 0, or +, according to whether o1 occurs before, at, or after o2 (respectively)","Contains\u2014Return true if the item belongs to this view. The item is assumed to belong to the underlying DataCollection; this method merely takes filters into account. It is used during collection-changed notifications, for instance.","ContainsItem\u2014Return true if the item belongs to this view. No assumptions are made about the item. If the caller knows that the item belongs to the underlying collection, it is more efficient to call Contains.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetEnumerator\u2014Implementation of IEnumerable.GetEnumerator( ). This provides a way to enumerate the members of the collection without changing the currency.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","IndexOf\u2014Return the index where the given item belongs","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","MoveFirst\u2014Move Current to the first item.","MoveLast\u2014Move Current to the last item.","MoveNext\u2014Move Current to the next item.","MovePrevious\u2014Move Current to the previous item.","MoveTo\u2014Move Current to the given item.","OKToChangeCurrent\u2014Determines whether it is allowable to change the position of the current record pointer. Inherited from CollectionView.","OnCollectionChanged\u2014Implement this method to handle CollectionChanged events in the data collection that underlies the collection view. Inherited from CollectionView.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014Refreshes the view. Re-applies any current sort or filter operations, as set by various properties that declare sort or filter criteria.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","VerifyUiContextAccess\u2014Verifies that the calling thread is active within the context that this collection view is bound to. If not, an exception is raised. Inherited from ContextAffinityCollectionView.","Property Description","BOF\u2014Return true if Current is before the beginning (Beginning-Of-File).","CanFilter\u2014Gets a value that declares whether this view can be filtered on the basis of its Filter property. Inherited from CollectionView.","CanSort\u2014Test if this CollectionView supports sorting before assigning a non-null value to Sort.","Collection\u2014Gets the underlying data collection object. Inherited from CollectionView.","Comparer\u2014Gets the comparison object being used by the collection view. Inherited from CollectionView.","Count\u2014Return the estimated number of records (or \u22121, meaning \u201cdon't know\u201d).","Current\u2014Return current item.","CurrentItem\u2014Gets the current object in the data collection, by returning an object that implements a Current property as well as several other methods for moving or checking currency. Inherited from CollectionView.","EOF\u2014Return true if Current is beyond the end (End-Of-File).","Filter\u2014Gets or sets the filter applied to the data in a data collection view. Inherited from CollectionView.","Sort\u2014Gets or sets the sort descriptions that apply a sort order to the collection.","UIContext\u2014Gets the user interface (UI) context that this collection view is bound to. Inherited from ContextAffinityCollectionView.","ViewManagerData Gets implementation data about a view. Inherited from CollectionView.",{"@attributes":{"id":"p-0281","num":"0281"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003class sealed System.Windows.Data.BindingListCollectionView"},{"entry":"ContextAffinityCollectionView\u2003:\u2003CollectionView\u2003:"},{"entry":"Object Implements: IEnumerable ICollectionChange"},{"entry":"ICurrentItem IComparer"},{"entry":"{"},{"entry":"public virtual sealed Int32 Compare(Object o1, Object o2)"},{"entry":"public virtual Boolean Contains(Object item)"},{"entry":"public virtual Boolean ContainsItem(Object item)"},{"entry":"public virtual sealed Boolean get_BOF( )"},{"entry":"public virtual Boolean get_CanSort( )"},{"entry":"public virtual Int32 get_Count( )"},{"entry":"public virtual sealed Object get_Current( )"},{"entry":"public virtual sealed Boolean get_EOF( )"},{"entry":"public virtual SortDescription[ ] get_Sort( )"},{"entry":"public virtual IEnumerator GetEnumerator( )"},{"entry":"public virtual Int32 IndexOf(Object item)"},{"entry":"public virtual sealed Boolean MoveFirst( )"},{"entry":"public virtual sealed Boolean MoveLast( )"},{"entry":"public virtual sealed Boolean MoveNext( )"},{"entry":"public virtual sealed Boolean MovePrevious( )"},{"entry":"public virtual sealed Boolean MoveTo(Object item)"},{"entry":"public virtual Void Refresh( )"},{"entry":"public virtual Void set_Sort(SortDescription[ ] value)"},{"entry":"}"},{"entry":"\u2003\u2003\u2003\u2003enum sealed System.Windows.Data.BindType : Enum :"},{"entry":"ValueType : Object Implements: IComparable"},{"entry":"IFormattable IConvertible"},{"entry":"{"},{"entry":"public static BindType OneTime"},{"entry":"public static BindType OneWay"},{"entry":"public static BindType TwoWay"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Implements a collection view that includes checks for context affinity.","Event Description","CollectionChanged\u2014Occurs when the collection view changes. This could mean that items were added or removed in the collection, or that a new sort or filter was applied to this view. Inherited from CollectionView.","ProtectedCurrentChanged\u2014A protected event. In derived classes, this event occurs after changing the position of the record pointer. Inherited from CollectionView.","ProtectedCurrentChanging\u2014A protected event. In derived classes, this event occurs before a change in currency. If necessary, handlers of the event can cancel the change. Inherited from CollectionView.","Method Description","ChangedCurrent\u2014Raises the implemented CurrentChanged event of the object. Inherited from CollectionView.","CheckUiContextAccess\u2014Determines whether the calling thread is active within the context this collection view is bound to.","Contains\u2014Determines whether a given data item belongs to this collection view. Inherited from CollectionView.","ContainsItem\u2014Determines whether a given data item belongs to this collection view or the unfiltered collection. Inherited from CollectionView.","ContextAffinityCollectionView\u2014Create a view to given collection.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetEnumerator\u2014Returns an enumerator that can iterate through the collection view. Inherited from CollectionView.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","IndexOf\u2014Returns the index where the given data item belongs in the collection, or \u22121 if the index of that item is unknown. Inherited from CollectionView.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","OKToChangeCurrent\u2014Determines whether it is allowable to change the position of the current record pointer. Inherited from CollectionView.","OnCollectionChanged\u2014Implement this method to handle CollectionChanged events in the data collection that underlies the collection view. Inherited from CollectionView.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014Refreshes the view. Reapplies any current sort or filter conditions, as set by various properties that declare sort or filter criteria. Inherited from CollectionView.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","VerifyUiContextAccess\u2014Verifies that the calling thread is active within the context that this collection view is bound to. If not, an exception is raised.","Property Description","CanFilter\u2014Gets a value that declares whether this view can be filtered on the basis of its Filter property. Inherited from CollectionView.","CanSort\u2014Gets a value that declares whether the collection can be sorted on basis of its Sort property. Inherited from CollectionView.","Collection\u2014Gets the underlying data collection object. Inherited from CollectionView.","Comparer\u2014Gets the comparison object being used by the collection view. Inherited from CollectionView.","Count\u2014Gets the count of records in the collection. Inherited from CollectionView.","CurrentItem\u2014Gets the current object in the data collection, by returning an object that implements a Current property as well as several other methods for moving or checking currency. Inherited from CollectionView.","Filter\u2014Gets or sets the filter applied to the data in a data collection view. Inherited from CollectionView.","Sort\u2014Gets or sets the sort order within the data collection view. Inherited from CollectionView.","UIContext\u2014Gets the user interface (UI) context that this collection view is bound to.","ViewManagerData\u2014Gets implementation data about a view. Inherited from CollectionView.",{"@attributes":{"id":"p-0317","num":"0317"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003abstract class System.Windows.Data."},{"entry":"ContextAffinityCollectionView"},{"entry":": CollectionView : Object Implements: IEnumerable ICollectionChange"},{"entry":"{"},{"entry":"protected Boolean CheckUiContextAccess( )"},{"entry":"protected UIContext get_UIContext( )"},{"entry":"protected Void VerifyUiContextAccess( )"},{"entry":"}"},{"entry":"\u2003\u2003\u2003\u2003class sealed System.Windows.Data.DataChangedEventHandler :"},{"entry":"MulticastDelegate : Delegate : Object Implements:"},{"entry":"ICloneable ISerializable"},{"entry":"{"},{"entry":"public virtual IAsyncResult BeginInvoke(Object sender, EventArgs args,"},{"entry":"AsyncCallback callback, Object object)"},{"entry":"public virtual Void EndInvoke(IAsyncResult result)"},{"entry":"public virtual Void Invoke(Object sender, EventArgs args)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Supports object references to elements whose DataContext is being used as the source for a binding. This class cannot be inherited.","Method Description","DataContextObjectRef Initializes a new instance of the DataContextObjectRef class.","Equals Determines whether two Object instances are equal. Inherited from Object.","Finalize Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","FindRootElement\u2014Finds the root element for a given element. Inherited from ObjectRef.","GetDataObject\u2014Returns the object that established data context for the specified object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetObject\u2014Returns the object that established data context for the specified object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.",{"@attributes":{"id":"p-0331","num":"0331"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003class\u2003sealed\u2003System.Windows.Data.DataContextObjectRef\u2003:"},{"entry":"ObjectRef : Object"},{"entry":"{"},{"entry":"public virtual Object GetDataObject(DependencyObject d)"},{"entry":"public virtual Object GetObject(DependencyObject d)"},{"entry":"}"},{"entry":"\u2003\u2003\u2003\u2003class\u2003sealed\u2003System.Windows.Data.DataSourceObjectRef\u2003:"},{"entry":"ObjectRef : Object"},{"entry":"{"},{"entry":"public virtual Object GetDataObject(DependencyObject d)"},{"entry":"public virtual Object GetObject(DependencyObject d)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Encapsulates arguments for data transfer events. The events are routed events that must typically be handled specifically by a designated handler based on the DataTransferEventHandler delegate.","Property Description","Handled\u2014Sets or retrieves a value that indicates the present state of the event handling. Inherited from RoutedEventArgs.","OriginalSource\u2014Returns OriginalSource object that raised the RoutedEvent. Inherited from RoutedEventArgs.","Property\u2014Gets the specific property that changed and caused the data transfer event to be raised.","RoutedEventID\u2014Returns the RoutedEventID associated with this RoutedEventArgs. Inherited from RoutedEventArgs.","Source\u2014Gets the object that raised the event. Inherited from RoutedEventArgs.","Field Description","Empty\u2014Represents an event with no event data. Inherited from EventArgs.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","InvokeEventHandler\u2014Raises the data transfer event.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","OnSetSource\u2014Invoked when the source of the event is set. Inherited from RoutedEventArgs.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","SetRoutedEventID\u2014Sets the RoutedEventID to the specified value Inherited from RoutedEventArgs.","SetSource\u2014Sets the Source Property to the specified value Inherited from RoutedEventArgs.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.",{"@attributes":{"id":"p-0353","num":"0353"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003class\u2003\u2003System.Windows.Data.DataTransferEventArgs\u2003\u2003:"},{"entry":"RoutedEventArgs : EventArgs : Object"},{"entry":"{"},{"entry":"public DependencyProperty get_Property( )"},{"entry":"protected virtual Void InvokeEventHandler(Delegate"},{"entry":"genericHandler, Object"},{"entry":"genericTarget)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Represents the method that handles a data transfer event raised by Binding.","Parameters","sender\u2014System.Object. The source object (instance of Binding) that raised the event.","args\u2014System.Windows.Data.DataTransferEventArgs. Arguments of the event, as an instance of DataTransferEventArgs.","Return Value","System.Void.","Arguments of the event will inform you which bound property within the binding transferred data.","Binding does not expose this event as a member, but does expose the static DataTransferEventID property that is used to identify the event and attach a handler to that event.","How do I Notify when Data is Transferred?","This example describes how to set up notification when data is transferred from the source to the target property.","According to one embodiment the operating system \u201cAvalon\u201d raises a data transfer event each time that data transfers from the source of a binding to a target. Internally, this event is used to inform the user interface (UI) that it should update, because the bound data has changed. Note that in order for the data transfer event to work, and also in order for one-way or two-way binding to work properly, you need to implement your data class using the IPropertyChange interface. For details on creating data items or classes that implement this interface, see Create a One-Way Binding to a Dynamically Updated Data Source.","In order to make this event available to your application, set the NotifyOnTransfer flag in the bind declaration. This can be done in a particular markup language (named \u201cXAML\u201d), using either the *Bind syntax or the BindFlags attribute of Bind, or in C#, by using parameters of the bind declarations. The handler you use to listen for this event must typically be attached directly to the element where you want to be informed of changes, or to the overall data context if you want to be aware that anything in the context has changed.",{"@attributes":{"id":"p-0366","num":"0366"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003<SimpleText ID=\u201cRentText\u201d"},{"entry":"\u2003\u2003Text=\u201c*Bind(Path=Rent;BindType=Oneway;BindFlags="},{"entry":"NotifyOnTransfer)\u201d"},{"entry":"\u2003\u2003Canvas.Top=\u201c50px\u201d\u2003\u2003Canvas.Left=\u201c140px\u201d\u2003\u2003Width=\u201c120px\u201d"},{"entry":"Height=\u201c20px\u201d \/>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the code, assign a handler based on the DataTransferEventHandler delegate, OnDataTransfer in this example, to handle the data transfer event. Use Binding.DataTransferEventID to get the necessary routing ID.","In this C# sample, clicking a button will cause new data to be generated and the values in various text boxes will be updated. When the event is raised and handled, a \u201cData Updated . . . \u201d message is printed. Parameters of the event can be used to determine details about the property that changed (such as the type or the specific element if the same handler is attached to more than one element), which can be useful if there are multiple bound properties on a single element.",{"@attributes":{"id":"p-0369","num":"0369"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003RentText.AddHandler(Binding.DataTransferEventID,\u2003\u2003\u2003new"},{"entry":"DataTransferEventHandler(OnDataTransfer));"},{"entry":"\u2003\u2003..."},{"entry":"\u2003\u2003public void OnDataTransfer(Object sender,"},{"entry":"\u2003\u2003DataTransferEventArgs args)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003FrameworkElement fe = sender as FrameworkElement;"},{"entry":"\u2003\u2003InfoText.Text = \u201c\u201d;"},{"entry":"\u2003\u2003InfoText.Text += args.Property.Name + \u201c property of a \u201d +"},{"entry":"\u2003\u2003args.Property.OwnerType.Name;"},{"entry":"\u2003\u2003InfoText.Text += \u201c element (\u201d;"},{"entry":"\u2003\u2003InfoText.Text += fe.ID;"},{"entry":"\u2003\u2003InfoText.Text += \u201c) updated...\u201d;"},{"entry":"\u2003\u2003InfoText.Text+=(String)System.DateTime.Now.ToLongDateString( );"},{"entry":"\u2003\u2003InfoText.Text += \u201c at \u201d;"},{"entry":"\u2003\u2003InfoText.Text+=(String)System.DateTime.Now."},{"entry":"\u2003\u2003ToLongTimeString( );"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003class\u2003sealed\u2003System.Windows."},{"entry":"Data.DataTransferEventHandler\u2003:\u2003MulticastDelegate : Delegate :"},{"entry":"Object Implements: ICloneable ISerializable"},{"entry":"{"},{"entry":"\u2003\u2003public\u2003\u2003virtual\u2003\u2003IAsyncResult"},{"entry":"\u2003\u2003BeginInvoke(Object\u2003\u2003sender,"},{"entry":"DataTransferEventArgs args, AsyncCallback callback, Object object)"},{"entry":"\u2003\u2003public virtual Void EndInvoke(IAsyncResult result)"},{"entry":"\u2003\u2003public virtual Void Invoke(Object sender,"},{"entry":"\u2003\u2003DataTransferEventArgs args)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Represents an object reference to an element, with the object being specified by its element ID. This class cannot be inherited.","Method Description","ElementObjectRef\u2014Initializes a new instance of the ElementObjectRef class.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","FindRootElement\u2014Finds the root element for a given element. Inherited from ObjectRef.","GetDataObject\u2014Within derived classes, returns the data context object associated with the referenced object. Inherited from ObjectRef.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetObject\u2014Returns the referenced object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.",{"@attributes":{"id":"p-0383","num":"0383"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class sealed System.Windows.Data.ElementObjectRef : ObjectRef :"},{"entry":"Object"},{"entry":"{"},{"entry":"public\u2003\u2003virtual\u2003\u2003Object\u2003\u2003GetObject(DependencyObject\u2003\u2003d)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Represents an explicit object reference to an element. This class cannot be inherited.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","ExplicitObjectRef\u2014Initializes a new instance of the ExplicitObjectRef class.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","FindRootElement\u2014Finds the root element for a given element. Inherited from ObjectRef.","GetDataObject\u2014Within derived classes, returns the data context object associated with the referenced object. Inherited from ObjectRef.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetObject\u2014Returns the referenced object for the given DependencyObject context.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","This class is used to provide explicit references (by identifier (ID)) to objects used as source objects for bindings.","This class is a subclass of ObjectRef.","How do I Create a Binding?","This example shows how to create a binding in C#. To do this, you attach the binding object for the SampleText source property in data to the Text property of the SimpleText element, mytext.","When calling the Bind constructor, you can pass the source object through the ExplicitObjectRef constructor to get an ObjectRef object. There are many possible signatures both for the Bind constructor and for the SetBinding convenience method, and it is even possible to create the entire binding with the convenience method without calling the Bind constructor at all, but this example splits the operation into the constructor piece and then the specific setting of that bind declaration on an individual property of an element. If you do this in two steps, then the bind declaration created as the intermediate can be reused for binding to more than one element in your application.",{"@attributes":{"id":"p-0402","num":"0402"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002public void CreateBinding( )"},{"entry":"\u2003\u2003\u2002{"},{"entry":"\u2003\u2003\u2002myDataObject = new myData(System.DateTime.Now);"},{"entry":"\u2003\u2003\u2002myBindDef = new Bind(\u201cMyDataProperty\u201d, BindType.TwoWay,"},{"entry":"\u2003\u2002new ExplicitObjectRef(myDataObject));"},{"entry":"\u2003\u2003\u2002mytext.SetBinding(SimpleText.TextProperty, myBindDef);"},{"entry":"\u2003\u2003\u2002..."},{"entry":"\u2003\u2003\u2002}"},{"entry":"\u2003\u2003\u2002class sealed System.Windows.Data.ExplicitObjectRef : ObjectRef :"},{"entry":"Object"},{"entry":"{"},{"entry":"public virtual Object GetObject(DependencyObject d)"},{"entry":"}"},{"entry":"\u2003\u2003\u2002abstract interface System.Windows.Data.IContains"},{"entry":"{"},{"entry":"public virtual Boolean Contains(Object item)"},{"entry":"}"},{"entry":"\u2003\u2003\u2002abstract interface System.Windows.Data.IDataSource"},{"entry":"{"},{"entry":"public virtual Object get_Data( )"},{"entry":"public virtual Void Refresh( )"},{"entry":"}"},{"entry":"\u2003\u2003\u2002abstract\u2003\u2003interface\u2003\u2003System.Windows.Data.IDataTransformer"},{"entry":"{"},{"entry":"public virtual Object InverseTransform(Object o, PropertyInfo info,"},{"entry":"CultureInfo culture)"},{"entry":"public virtual Object Transform(Object o, DependencyProperty dp,"},{"entry":"CultureInfo culture)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Implements a collection view for collections based on IList.","Event Description","CollectionChanged\u2014Occurs when the collection view changes. This could mean that items were added or removed in the collection, or that a new sort or filter was applied to this view. Inherited from CollectionView.","ProtectedCurrentChanged\u2014A protected event. In derived classes, this event occurs after changing the position of the record pointer. Inherited from CollectionView.","ProtectedCurrentChanging\u2014A protected event. In derived classes, this event occurs before a change in currency. If necessary, handlers of the event can cancel the change. Inherited from CollectionView.","Method Description","ChangedCurrent\u2014Raises the implemented CurrentChanged event of the object. Inherited from CollectionView.","CheckUiContextAccess\u2014Determines whether the calling thread is active within the context this collection view is bound to. Inherited from ContextAffinityCollectionView.","Contains\u2014Determines whether a given data item belongs to this collection view.","ContainsItem\u2014Determines whether a given data item belongs to this collection view or to the unfiltered collection.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetEnumerator\u2014Returns an enumerator that can iterate through the collection view.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","IComparer.Compare\u2014Implements the comparison algorithm used by sorting in this collection. This method is not intended to be called directly.","ICurrentItem.MoveFirst\u2014Moves the record pointer to the first record in the collection view.","ICurrentItem.MoveLast\u2014Moves the record pointer to the last record in the collection view.","ICurrentItem.MoveNext\u2014Moves the record pointer to the next record in the collection view.","ICurrentItem.MovePrevious\u2014Moves the record pointer to the previous record in the collection view.","ICurrentItem.MoveTo\u2014Moves the record pointer to the specified record in the collection view.","IndexOf\u2014Returns the index where the given data item belongs in the collection, or \u22121 if the index of that item is unknown.","ListCollectionView\u2014Initializes a new instance of the ListCollectionView class, using a supplied IList-derived collection.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","OKToChangeCurrent\u2014Determines whether it is allowable to change the position of the current record pointer. Inherited from CollectionView.","OnCollectionChanged\u2014Implement this method to handle CollectionChanged events in the data collection that underlies the collection view. Inherited from CollectionView.","PrepareLocalArray\u2014Creates, filters and sorts the local index array. This method is also called when you call Refresh.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014Refreshes the view. Re-applies any current sort or filter operations, as set by various properties that declare sort or filter criteria.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","VerifyUiContextAccess\u2014Verifies that the calling thread is active within the context that this collection view is bound to. If not, an exception is raised. Inherited from ContextAffinityCollectionView.","Property Attribute Description","ActiveComparer\u2014Gets the current active comparer used in sorting.","ActiveFilter\u2014Gets the current active Contains information used in filtering.","CanFilter\u2014Gets a value that declares whether this view can be filtered on the basis of its Filter property. Inherited from CollectionView.","CanSort\u2014Gets a value that declares whether the collection can be sorted on the basis of its Sort property.","Collection\u2014Gets the underlying data collection object. Inherited from CollectionView.","Comparer\u2014Gets the comparison object being used by the collection view. Inherited from CollectionView.","Count\u2014Gets the count of records in the collection.","CurrentIndex\u2014Gets or sets the current index.","CurrentItem\u2014Gets the current object in the data collection, by returning an object that implements a Current property as well as several other methods for moving or checking currency. Inherited from CollectionView.","CustomFilter\u2014Gets or sets the custom filter criteria applied to the collection by the view.","CustomSort\u2014Gets or sets the custom sort order applied to the collection by the view.","Filter\u2014Gets or sets the filter applied to the data in a data collection view. Inherited from CollectionView.","InternalList\u2014Gets or sets the internal (complete, unfiltered) collection.","Sort\u2014Gets or sets the sort descriptions that apply a sort order to the collection.","UIContext\u2014Gets the user interface (UI) context that this collection view is bound to. Inherited from ContextAffinityCollectionView.","UsesLocalArray\u2014Gets a Boolean value that indicates whether sorting or filtering is taking place either on a local array copy or on the original data.","ViewManagerData\u2014Gets implementation data about a view. Inherited from CollectionView.",{"@attributes":{"id":"p-0452","num":"0452"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class\u2003\u2003System.Windows.Data.ListCollectionView\u2003\u2003:"},{"entry":"ContextAffinityCollectionView\u2002\u2009:\u2002CollectionView\u2002\u2009:\u2002Object Implements:"},{"entry":"IEnumerable ICollectionChange ICurrentItem IComparer"},{"entry":"{"},{"entry":"public virtual Boolean Contains(Object item)"},{"entry":"public virtual Boolean ContainsItem(Object item)"},{"entry":"protected IComparer get_ActiveComparer( )"},{"entry":"protected IContains get_ActiveFilter( )"},{"entry":"public virtual Boolean get_CanSort( )"},{"entry":"public virtual Int32 get_Count( )"},{"entry":"protected Int32 get_CurrentIndex( )"},{"entry":"public IContains get_CustomFilter( )"},{"entry":"public IComparer get_CustomSort( )"},{"entry":"protected IList get_InternalList( )"},{"entry":"public virtual SortDescription[ ] get_Sort( )"},{"entry":"protected Boolean get_UsesLocalArray( )"},{"entry":"public virtual IEnumerator GetEnumerator( )"},{"entry":"public virtual Int32 IndexOf(Object item)"},{"entry":"virtual sealed Void"},{"entry":"System.ComponentModel.ICurrentItem.add_CurrentChanged"},{"entry":"(CurrentChangedEventHandler value)"},{"entry":"virtual sealed Void"},{"entry":"System.ComponentModel.ICurrentItem.add_CurrentChanging"},{"entry":"(CurrentChangingEventHandler value)"},{"entry":"virtual sealed Boolean"},{"entry":"System.ComponentModel.ICurrentItem.get_BOF( )"},{"entry":"virtual sealed Object"},{"entry":"System.ComponentModel.ICurrentItem.get_Current( )"},{"entry":"virtual sealed Boolean"},{"entry":"System.ComponentModel.ICurrentItem.get_EOF( )"},{"entry":"virtual sealed Boolean"},{"entry":"System.ComponentModel.ICurrentItem.MoveFirst( )"},{"entry":"virtual sealed Boolean"},{"entry":"System.ComponentModel.ICurrentItem.MoveLast( )"},{"entry":"virtual sealed Boolean"},{"entry":"System.ComponentModel.ICurrentItem.MoveNext( )"},{"entry":"virtual sealed Boolean"},{"entry":"System.ComponentModel.ICurrentItem.MovePrevious( )"},{"entry":"virtual sealed Boolean"},{"entry":"System.ComponentModel.ICurrentItem.MoveTo(Object item)"},{"entry":"virtual sealed Void"},{"entry":"System.ComponentModel.ICurrentItem.remove_CurrentChanged"},{"entry":"(CurrentChangedEventHandler value)"},{"entry":"virtual sealed Void"},{"entry":"System.ComponentModel.ICurrentItem.remove_CurrentChanging"},{"entry":"(CurrentChangingEventHandler value)"},{"entry":"protected virtual IList PrepareLocalArray(IList list)"},{"entry":"public virtual Void Refresh( )"},{"entry":"protected Void set_ActiveComparer(IComparer value)"},{"entry":"protected Void set_ActiveFilter(IContains value)"},{"entry":"protected Void set_CurrentIndex(Int32 value)"},{"entry":"public Void set_CustomFilter(IContains value)"},{"entry":"public Void set_CustomSort(IComparer value)"},{"entry":"protected Void set_InternalList(IList value)"},{"entry":"public virtual Void set_Sort(SortDescription[ ] value)"},{"entry":"virtual sealed Int32 System.Collections.IComparer.Compare(Object o1,"},{"entry":"Object o2)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Serves as a data source for data binding. Bindable data items can be specified as common language runtime types.","Event Attribute Description","DataChanged\u2014Raised when a new data object becomes available.","RefreshCompleted\u2014Raised when the refresh operation has completed. This event is raised only if the data source is using Asynchronous mode.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ObjectDataSource\u2014Initializes a new instance of the ObjectDataSource class.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014Creates the mid-tier data object based on the current value of the TypeName and Parameters properties. This method gets called automatically upon the first request for the data.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Property Attribute Description","Asynchronous\u2014Gets or sets a property that declares whether data object creation will be performed in a worker thread or in the active (UI) context.","Data\u2014Gets the underlying data object.","Parameters\u2014Gets or sets a comma-delimited string that describes the arguments to be passed to the constructor of the instantiated object.","TypeName\u2014Gets or sets the name of the common language runtime type to instantiate. This can be a fully-qualified type name, or a type defined locally in the assembly of the page.",{"@attributes":{"id":"p-0472","num":"0472"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class System.Windows.Data.ObjectDataSource : Object Implements:"},{"entry":"IDataSource"},{"entry":"{"},{"entry":"public Boolean get_Asynchronous( )"},{"entry":"public virtual sealed Object get_Data( )"},{"entry":"public String get_Parameters( )"},{"entry":"public String get_TypeName( )"},{"entry":"public virtual sealed Void Refresh( )"},{"entry":"public Void set_Asynchronous(Boolean value)"},{"entry":"public Void set_Parameters(String value)"},{"entry":"public Void set_TypeName(String value)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The abstract class that is used as the parent class of ElementObjectRef, ExplicitObjectRef, and TypeObjectRef","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","FindRootElement\u2014Finds the root element for a given element.","GetDataObject\u2014Within derived classes, returns the data context object associated with the referenced object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetObject\u2014Within derived classes, returns the data context object associated with the referenced object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ObjectRef\u2014Initializes a new instance of the ObjectRef class. This method is protected in the base class.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.",{"@attributes":{"id":"p-0486","num":"0486"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003abstract class System.Windows.Data.ObjectRef : Object"]},{"entry":[{},"{"]},{"entry":[{},"protected static DependencyObject"]},{"entry":[{},"FindRootElement(DependencyObject d)"]},{"entry":[{},"public virtual Object GetDataObject(DependencyObject d)"]},{"entry":[{},"public virtual Object GetObject(DependencyObject d)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Objects of this class hold the collection of named parameters (with their corresponding values) for an SqlDataSource.","Method Description","Add\u2014Adds a named parameter to the parameter collection given the new parameter's name and value.","CopyTo\u2014Copies all of the parameters in the parameter collection to a specified array, starting at a specified index in the array.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetEnumerator\u2014Gets an IEnumerator interface that can be used to enumerate over the parameters in the collection.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ParameterCollection\u2014Initiates a new instance of the ParameterCollection class.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Property Description","Count\u2014Gets the count of parameters in this parameter collection.","IsSynchronized\u2014Gets a value that indicates whether access to this collection is synchronized (i.e., thread-safe).","Item\u2014An indexer that gets or sets the object value of a named parameter in the collection.","SyncRoot\u2014Gets an object that can be used to synchronize access to this parameter collection.",{"@attributes":{"id":"p-0505","num":"0505"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class\u2003System.Windows.Data.ParameterCollection\u2003\u2002:\u2003\u2002Object"},{"entry":"Implements: ICollection IEnumerable"},{"entry":"{"},{"entry":"public Void Add(String paramName, Object initialValue)"},{"entry":"public virtual sealed Void CopyTo(Array array, Int32 index)"},{"entry":"public virtual sealed Int32 get_Count( )"},{"entry":"public virtual sealed Boolean get_IsSynchronized( )"},{"entry":"public Object get_Item(String paramName)"},{"entry":"public virtual sealed Object get_SyncRoot( )"},{"entry":"public virtual sealed IEnumerator GetEnumerator( )"},{"entry":"public Void set_Item(String paramName, Object value)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This class represents a single select statement to be submitted to the database.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","QueryCommand\u2014Default constructor does nothing ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Property Attribute Description","Table\u2014Gets or sets the name of the table that will store query results.","Text\u2014Gets or sets the Structured Query Language (SQL) query string of this query object.",{"@attributes":{"id":"p-0518","num":"0518"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003class System.Windows.Data.QueryCommand : Object"]},{"entry":[{},"{"]},{"entry":[{},"public String get_Table( )"]},{"entry":[{},"public String get_Text( )"]},{"entry":[{},"public Void set_Table(String value)"]},{"entry":[{},"public Void set_Text(String value)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Encapsulates the arguments passed either in the RefreshCompleted event of ObjectDataSource, or in the RefreshCompleted event of XmlDataSource.","Field Description","Empty\u2014Represents an event with no event data. Inherited from EventArgs.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","RefreshCompletedEventArgs\u2014Initializes a new instance of the RefreshCompletedEventArgs class.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Property Description","Exception\u2014Gets the exception raised if the refresh operation resulted in an error.",{"@attributes":{"id":"p-0533","num":"0533"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class\u2003\u2002System.Windows.Data.RefreshCompletedEventArgs\u2003\u2003:"},{"entry":"EventArgs : Object"},{"entry":"{"},{"entry":"public Exception get_Exception( )"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Represents the method that handles the ObjectDataSource.RefreshCompleted and XmlDataSource.RefreshCompleted events.","Parameters","sender System.Object. The object (data source) that raised the event.","e System.Windows.Data.RefreshCompletedEventArgs. Arguments of the event, as an instance of RefreshCompletedEventArgs.","Return Value System.Void.",{"@attributes":{"id":"p-0539","num":"0539"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class sealed System.Windows.Data.RefreshCompletedEventHandler"},{"entry":":MulticastDelegate : Delegate : Object Implements: ICloneable"},{"entry":"ISerializable"},{"entry":"{"},{"entry":"\u2003\u2003public\u2003virtual\u2003IAsyncResult\u2003BeginInvoke(Object\u2003sender,"},{"entry":"RefreshCompletedEventArgs e, AsyncCallback callback, Object object)"},{"entry":"\u2003\u2003public virtual Void EndInvoke(IAsyncResult result)"},{"entry":"\u2003\u2003public virtual Void Invoke(Object sender,"},{"entry":"\u2003\u2003RefreshCompletedEventArgs e)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A list of sql commands and the names of the tables that they should be used to fill.","Method Description","Add\u2014Adds a new SqlCommand object to the list.","AddChild\u2014This method is called to add a child to this object.","AddText\u2014This method is called when plain text appears under the tag in markup. In this case it is ignored.","Clear\u2014Removes all entries in the list.","Contains\u2014Determines if the specified QueryCommand is in the array. Both the Text and Table values must typically be equal to count as a match.","CopyTo\u2014Copies the entire SqlCommandList to the specified one dimentional array starting at the specified index of the target array.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetEnumerator\u2014Returns an enumerator which enumerates all QueryCommands in this set","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","IList.Add","IList.Contains","IList.IndexOf","IList.Insert","IList.Remove","IndexOf\u2014Returns the zero-based index of the first occurance of the specified value.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Remove\u2014Removes the first occurance of the specified QueryCommand from the list.","RemoveAt\u2014Removes the QueryCommand at the given position.","SqlCommandList","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Property Description","Count\u2014Returns the number of elements contained in the list.","Item\u2014Returns the QueryCommand at the given index.",{"@attributes":{"id":"p-0568","num":"0568"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class System.Windows.Data.SqlCommandList : Object Implements:"},{"entry":"IList ICollection IEnumerable IAddChild"},{"entry":"{"},{"entry":"public Void Add(QueryCommand command)"},{"entry":"public virtual sealed Void AddChild(Object o)"},{"entry":"public virtual sealed Void AddText(String s)"},{"entry":"public virtual sealed Void Clear( )"},{"entry":"public Boolean Contains(QueryCommand value)"},{"entry":"public virtual sealed Void CopyTo(Array array, Int32 index)"},{"entry":"public virtual sealed Int32 get_Count( )"},{"entry":"public QueryCommand get_Item(Int32 index)"},{"entry":"public virtual sealed IEnumerator GetEnumerator( )"},{"entry":"public Int32 IndexOf(QueryCommand value)"},{"entry":"public Void Remove(QueryCommand value)"},{"entry":"public virtual sealed Void RemoveAt(Int32 index)"},{"entry":"public Void set_Item(Int32 index, QueryCommand value)"},{"entry":"virtual sealed Boolean"},{"entry":"System.Collections.ICollection.get_IsSynchronized( )"},{"entry":"virtual sealed Object System.Collections.ICollection.get_SyncRoot( )"},{"entry":"virtual sealed Int32 System.Collections.IList.Add(Object command)"},{"entry":"virtual sealed Boolean System.Collections.IList.Contains(Object value)"},{"entry":"virtual sealed Boolean System.Collections.IList.get_IsFixedSize( )"},{"entry":"virtual sealed Boolean System.Collections.IList.get_IsReadOnly( )"},{"entry":"virtual sealed Object System.Collections.IList.get_Item(Int32 index)"},{"entry":"virtual sealed Int32 System.Collections.IList.IndexOf(Object value)"},{"entry":"virtual sealed Void System.Collections.IList.Insert(Int32 index, Object"},{"entry":"command)"},{"entry":"virtual sealed Void System.Collections.IList.Remove(Object value)"},{"entry":"virtual sealed Void System.Collections.IList.set_Item(Int32 index,"},{"entry":"Object value)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"According to one embodiment, SqlDataSource gets data from a Microsoft SQL Server for use in databinding.","Event Attribute Description","DataChanged\u2014This event is raised when a new data object becomes available.","WriteComplete\u2014This event is fired when data has been written back to the database.","Method Description","BeginParamChange\u2014Temporarily defers any updates to the dataset (unless requested explicitly with Refresh( )) until the EndParamChange method is called","EndParamChange\u2014Signals that parameters have been updated and that the dataset should be refreshed from the Sql server. This will not refresh the dataset if none of the parameters have been changed. To update the dataset unconditionally use the Refresh method.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014Initiates a Refresh Operation on the DataSource that will ultimately result in the Data property to change, if the Data property changes the DataChanged event should fire. This method is called automatically at the first request for the data","SqlDataSource\u2014The default constructor creates a new SqlDataSource with a blank connection string and a blank query","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","WriteChanges\u2014Commits the changes made to the data back to the database asynchronously.","Property Attribute Description","ConnectionString\u2014This is the Sql server connection string, it indicates things like where to find the sql server and what uid and password to use.","Data\u2014Returns the underlying data object.","DataSet\u2014This gives the developer access to the underlying DataSet so the functionality of ADO can be used if necessary","DataSourceMode\u2014The DataSourceMode determines what sort of object will be returned as the Data property.","DeferredParamChange\u2014This flag indicates whether to refresh the data set immediately when a parameter's value changes or wait until EndParamChange( ) mehtod is called.","ReadResult\u2014If an error happened when querying the database it can be viewed here","Select\u2014The collection of QueryCommand objects which are used to query the database.","SelectParameters\u2014Exposes the ParameterCollection object which contains the names and values of all of the named parameters.","WriteResult\u2014If an error happened when writing changes back to the database it can be viewed here",{"@attributes":{"id":"p-0596","num":"0596"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class System.Windows.Data.SqlDataSource : Object Implements:"},{"entry":"IDataSource"},{"entry":"{"},{"entry":"public Void BeginParamChange( )"},{"entry":"public Void EndParamChange( )"},{"entry":"public String get_ConnectionString( )"},{"entry":"public virtual sealed Object get_Data( )"},{"entry":"public DataSet get_DataSet( )"},{"entry":"public SqlDataSourceMode get_DataSourceMode( )"},{"entry":"public Boolean get_DeferredParamChange( )"},{"entry":"public Exception get_ReadResult( )"},{"entry":"public SqlCommandList get_Select( )"},{"entry":"public ParameterCollection get_SelectParameters( )"},{"entry":"public Exception get_WriteResult( )"},{"entry":"public virtual sealed Void Refresh( )"},{"entry":"public Void set_ConnectionString(String value)"},{"entry":"public Void set_DataSourceMode(SqlDataSourceMode value)"},{"entry":"public Void WriteChanges( )"},{"entry":"}"},{"entry":"\u2003\u2003enum\u2003\u2003sealed\u2003\u2003System.Windows.Data.SqlDataSource+"},{"entry":"SqlDataSourceMode : Enum : ValueType : Object Implements:"},{"entry":"IComparable IFormattable IConvertible"},{"entry":"{"},{"entry":"public static SqlDataSourceMode DataReader"},{"entry":"public static SqlDataSourceMode DataSet"},{"entry":"public static SqlDataSourceMode XmlReader"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Allows resource reference to a transformer class that is defined as code-behind in the current application.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","IDataTransformer.InverseTransform\u2014Aliases your custom transformer's InverseTransform method implementation. This method is not intended to be called directly.","IDataTransformer.Transform\u2014Aliases your custom transformer's Transform method implementation. This method is not intended to be called directly.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","TransformerSource\u2014Initializes a new instance of the TransformerSource class.","Property Description","TypeName\u2014Gets or sets the assembly and class information for the transformer class that this TransformerSource instance is aliasing for.","How do I Transform Bound Data?","This example shows how to transform data that is used in bindings.","To transform data, you create a class that implements the IDataTransformer interface, which includes the Transform and InverseTransform methods.","In this C# example, the transformer works against two possible properties of a binding: the text within a text block and the foreground color. The same transformer can return either result as the appropriate type, based on switching on the dp input parameter. This is a useful feature in a transformer because the transformer is attached to a bind declaration, and the same bind declaration can be used to create multiple bindings on a single data source for properties of different destination types.",{"@attributes":{"id":"p-0615","num":"0615"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public class MyTransformer : IDataTransformer"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003public\u2003object Transform(object\u2003o,\u2003DependencyProperty\u2003dp,"},{"entry":"System.Globalization.CultureInfo culture)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003DateTime date = (DateTime)o;"},{"entry":"\u2003\u2003switch (dp.Name) {"},{"entry":"\u2003\u2003case \u201cText\u201d:"},{"entry":"\u2003\u2003return\u2003\u201cHeute\u2003ist\u2003\u201d\u2003+\u2003\u2003date.ToString(\u201cF\u201d,\u2003new"},{"entry":"System.Globalization.CultureInfo(\u201cde-DE\u201d));"},{"entry":"\u2003\u2003case \u201cForeground\u201d:"},{"entry":"\u2003\u2003return Colors.Red;"},{"entry":"\u2003\u2003default:"},{"entry":"\u2003\u2003return o;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003public\u2003\u2003object\u2003\u2003InverseTransform(object\u2003\u2003o,"},{"entry":"System.Reflection.PropertyInfo\u2003info,\u2003System.Globalization.CultureInfo"},{"entry":"culture)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003return null;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Using \u201cXAML\u201d, a transformer class is an application resource. If the transformer code is written as code-behind inside the same application, the resource is created as a TransformerSource element. This TransformerSource element allows you to avoid a circular reference problem with trying to reference a custom element inside resources before the transformer class itself is compiled further down in the code. Then, to specify the transformer within a binding, set the transformer attribute to the resource name of your TransformerSource element in resources. This example uses compound syntax to set the binding, but the transformer can also be set in *Bind syntax.",{"@attributes":{"id":"p-0617","num":"0617"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003<Canvas"},{"entry":"\u2003\u2003xmlns=\u201chttp:\/\/schemas.microsoft.com\/2003\/xaml\u201d"},{"entry":"\u2003\u2003xmlns:def=\u201cDefinition\u201ddef:Language=\u201cC#\u201d"},{"entry":"\u2003\u2003def:Class=\u201cWCPSample.MarkupTransformer\u201d"},{"entry":"\u2003\u2003def:CodeBehind=\u201cdefault.xaml.cs\u201d"},{"entry":"\u2003\u2003ID=\u201croot\u201d"},{"entry":"\u2003\u2003>"},{"entry":"\u2003\u2003<Canvas.Resources>"},{"entry":"\u2003\u2003<ObjectDataSource \u2003\u2003def:Name=\u201cmyDataSource\u201d"},{"entry":"TypeName=\u201cWCPSample.myData,MarkupTransformerSample\u201d\/>"},{"entry":"\u2003\u2003<TransformerSource \u2003\u2003def:Name=\u201cMyTransformerReference\u201d"},{"entry":"TypeName=\u201cMyTransformer\u201d\/>"},{"entry":"\u2003\u2003<\/Canvas.Resources>"},{"entry":"\u2003\u2003<Canvas.DataContext>"},{"entry":"\u2003\u2003<Bind DataSource=\u201c{myDataSource}\u201dBindType=\u201cOneWay\u201d \/>"},{"entry":"\u2003\u2003<\/Canvas.DataContext>"},{"entry":"\u2003\u2003<SimpleText Canvas.Top=\u201c10px\u201d Canvas.Left=\u201c5px\u201d"},{"entry":"\u2003\u2003FontWeight=\u201cBold\u201d"},{"entry":"FontSize=\u201c18\u201d Text=\u201cUntransformed data\u201d\/>"},{"entry":"\u2003\u2003<SimpleText Canvas.Top=\u201c30px\u201d Canvas.Left=\u201c35px\u201d"},{"entry":"Width=\u201c300px\u201d ID=\u201cmytext\u201d Text=\u201c*Bind(Path=TheDate)\u201c\/>"},{"entry":"\u2003\u2003<SimpleText Canvas.Top=\u201c50px\u201d Canvas.Left=\u201c5px\u201d"},{"entry":"\u2003\u2003FontWeight=\u201cBold\u201d"},{"entry":"FontSize=\u201c18\u201d Text=\u201cTransformed data\u201d\/>"},{"entry":"\u2003\u2003<SimpleText Canvas.Top=\u201c70px\u201d Canvas.Left=\u201c35px\u201d"},{"entry":"Width=\u201c300px\u201d Height=\u201c30px\u201d ID=\u201cmytransformedtext\u201d>"},{"entry":"\u2003\u2003<SimpleText.Text>"},{"entry":"\u2003\u2003<Bind Path=\u201cTheDate\u201d Transformer=\u201c"},{"entry":"\u2003\u2003{MyTransformerReference}\u201d\/>"},{"entry":"\u2003\u2003<\/SimpleText.Text>"},{"entry":"\u2003\u2003<SimpleText.Foreground>"},{"entry":"\u2003\u2003<Bind Path=\u201cTheDate\u201d Transformer=\u201c"},{"entry":"\u2003\u2003{MyTransformerReference}\u201d\/>"},{"entry":"\u2003\u2003<\/SimpleText.Foreground>"},{"entry":"\u2003\u2003<\/SimpleText>"},{"entry":"\u2003\u2003<\/Canvas>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Using C#, you can specify the transformer when you create a new bind declaration object. Get an instance of your transformer by calling its constructor, and pass that instance as an argument to either a property of an existing bind declaration or in the bind declaration constructor. In the following example, myChangedData is a custom data item, which contains the TheDate property.",{"@attributes":{"id":"p-0619","num":"0619"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003Bind myNewBindDef = new Bind("]},{"entry":[{},"\u2003\u2003\u201cTheDate\u201d,"]},{"entry":[{},"\u2003\u2003BindType.OneWay,"]},{"entry":[{},"\u2003\u2003new ExplicitObjectRef(myChangedData),"]},{"entry":[{},"\u2003\u2003UpdateType.Immediate,"]},{"entry":[{},"\u2003\u2003new MyTransformer( ),"]},{"entry":[{},"\u2003\u2003new System.Globalization.CultureInfo(\u201cen-US\u201d)"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},"\u2003\u2003class System.Windows.Data.TransformerSource\u2003:\u2003Object"]},{"entry":[{},"Implements: IDataTransformer"]},{"entry":[{},"{"]},{"entry":[{},"public String get_TypeName( )"]},{"entry":[{},"virtual sealed Object"]},{"entry":[{},"System.Windows.Data.IDataTransformer.InverseTransform(Object o,"]},{"entry":[{},"PropertyInfo info, CultureInfo culture)"]},{"entry":[{},"\u2003\u2003virtual sealed Object"]},{"entry":[{},"\u2003\u2003System.Windows.Data.IDataTransformer.Transform"]},{"entry":[{},"(Object o, DependencyProperty dp, CultureInfo culture)"]},{"entry":[{},"\u2003\u2003public Void set_TypeName(String value)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Supports object reference by type. This class cannot be inherited.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","FindRootElement\u2014Finds the root element for a given element. Inherited from ObjectRef.","GetDataObject\u2014Within derived classes, returns the data context object associated with the referenced object. Inherited from ObjectRef.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetObject\u2014Returns the object reference for a given data context.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","TypeObjectRef\u2014Initializes a new instance of the TypeObjectRef class.",{"@attributes":{"id":"p-0633","num":"0633"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class sealed System.Windows.Data.TypeObjectRef\u2002:\u2002ObjectRef :"},{"entry":"Object"},{"entry":"{"},{"entry":"public virtual Object GetObject(DependencyObject d)"},{"entry":"}"},{"entry":"\u2003\u2003enum sealed System.Windows.Data.UpdateType : Enum : ValueType"},{"entry":": Object Implements: IComparable IFormattable IConvertible"},{"entry":"{"},{"entry":"public static UpdateType Explicit"},{"entry":"public static UpdateType Immediate"},{"entry":"public static UpdateType OnLostFocus"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The WinFSDataSource facilitates databinding of data stored in WinFS with Avalon applications.","Event Description","DataChanged\u2014This event gets fired when new data is available or when that data changes","DataUpdated\u2014This event gets fired following a call to WriteChanges( )","Method Description","Dispose\u2014If the client choses to dispose this object it will close the FindResult if it is still open. Otherwise it will be done in the finalizer.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014The Finalizer will close the FindResult if it has not been closed earlier","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014This method causes the query to be executed and new data to be returned. When the new data is ready the DataChanged event is fired.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Update\u2014Writes any changes to the data back to the winfs store WinFSDataSource\u2014Default constructor","Property Description","ContextString\u2014Use this property to specify a WinFS store other than the default store.","Data\u2014Returns the underlying data object","Query\u2014The Query object",{"@attributes":{"id":"p-0653","num":"0653"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class\u2003System.Windows.Data.WinFSDataSource\u2003\u2003:\u2003\u2003Object"},{"entry":"Implements: IDataSource IDisposable"},{"entry":"{"},{"entry":"public virtual sealed Void Dispose( )"},{"entry":"protected virtual Void Finalize( )"},{"entry":"public String get_ContextString( )"},{"entry":"public virtual sealed Object get_Data( )"},{"entry":"public Query get_Query( )"},{"entry":"public virtual sealed Void Refresh( )"},{"entry":"public Void set_ContextString(String value)"},{"entry":"public Void set_Query(Query value)"},{"entry":"public Void Update( )"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"XmlDataNamespaceManager Class\u2014Used to declare namespaces to be used in Xml data binding XPath queries.","Method Description","AddNamespace\u2014Adds the given namespace to the collection. Inherited from XmlNamespaceManager.","AddText\u2014IAddChild implementation","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetEnumerator\u2014Provides support for the \u201cforeach\u201d style iteration over the collection of namespaces in the XmlNamespaceManager Inherited from XmlNamespaceManager.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetNamespacesInScope\u2014Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope. Inherited from XmlNamespaceManager.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","HasNamespace\u2014Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope. Inherited from XmlNamespaceManager.","IAddChild.AddChild","LookupNamespace\u2014Gets the namespace URI for the specified prefix. Inherited from XmlNamespaceManager.","LookupPrefix\u2014Finds the prefix declared for the given namespace URI. Inherited from XmlNamespaceManager.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","PopScope\u2014Pops a namespace scope off the stack. Inherited from XmlNamespaceManager.","PushScope\u2014Pushes a namespace scope onto the stack. Inherited from XmlNamespaceManager.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","RemoveNamespace\u2014Removes the given namespace for the given prefix. Inherited from XmlNamespaceManager.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","XmlDataNamespaceManager\u2014Constructor","Property Description","DefaultNamespace\u2014Gets the namespace URI for the default namespace. Inherited from XmlNamespaceManager.","NameTable\u2014Gets the XmlNameTable associated with this object. Inherited from XmlNamespaceManager.",{"@attributes":{"id":"p-0678","num":"0678"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003class\u2003System.Windows.Data.XmlDataNamespaceManager\u2003:"]},{"entry":[{},"XmlNamespaceManager\u2003:\u2003Object\u2003\u2003Implements:"]},{"entry":[{},"IXmlNamespaceResolver IEnumerable IAddChild"]},{"entry":[{},"{"]},{"entry":[{},"public virtual sealed Void AddText(String s)"]},{"entry":[{},"virtual sealed Void"]},{"entry":[{},"System.Windows.Serialization.IAddChild.AddChild(Object o)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Serves as a data source for data binding to Extensible Markup Language (XML) content nodes.","Event Attribute Description","DataChanged\u2014Raise this event when a new data object becomes available.","RefreshCompleted\u2014Notifies when the refresh operation has completed. This event is typically only raised if the data source is asynchronous, and that typically will only be the case when the XML source is an external file rather than inline XML.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","Parse\u2014Parses the object's XML content, using the specified reader and context.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014Resets the data collection maintained by this object, based on the result from the XPath query.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","XmlDataSource\u2014Initializes a new instance of the XmlDataSource class.","Property Attribute Description","Data\u2014Gets the underlying data object. If the source of the data is an external file, the first access to this property will return null (because the data is handled asynchronously).","Document\u2014Gets or sets the underlying data as an XML document. This is the property representation of any inline XML data established for this object.","Source\u2014Gets or sets the Uniform Resource Identifier (URI) source of the external XML data used by this object.","XmlNamespaceManager\u2014Gets or sets the mamespace manager used for executing XPath queries.","XPath\u2014Gets or sets the XPath query used to produce an appropriate node list to use for data binding this object.","How do I Bind to Xml Data?","This example describes how to bind to data in an XML data source. You can bind to a data source that is an XML node or a collection of XML nodes. In this particular markup language (named \u201cXAML\u201d) example, a data source is coded in an application's main \u201cXAML\u201d page as one of the resources of an outermost DockPanel. The actual XML data is supplied within the resource. This arrangement is sometimes called an XML data island.","The following example shows a very short XML data island that has a Books tree containing Book elements. The XmlDataSource resource is used to define the XML data source that contains the Books data.",{"@attributes":{"id":"p-0703","num":"0703"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003<DockPanel \u2003\u2003xmlns=\u201chttp:\/\/schemas.microsoft.com\/2003\/xaml\/\u201d"},{"entry":"xmlns:def=\u201cDefinition\u201d>"},{"entry":"\u2003\u2003<DockPanel.Resources>"},{"entry":"\u2003\u2003<XmlDataSource def:Name=\u201cBookData\u201d XPath=\u201c\/Books\u201d>"},{"entry":"\u2003\u2003<Books xmlns=\u201c\u201d>"},{"entry":"\u2003\u2003<Book ISBN=\u201c0-7356-0562-9\u201d Stock=\u201cin\u201d>"},{"entry":"\u2003\u2003<Title>XML in Action<\/Title>"},{"entry":"\u2003\u2003<Summary>XML Web Technology<\/Summary>"},{"entry":"\u2003\u2003<\/Book>"},{"entry":"\u2003\u2003<Book ISBN=\u201c0-7356-1370-2\u201d Stock=\u201cin\u201d>"},{"entry":"\u2003\u2003<Title>Programming Microsoft Windows With C#<\/Title>"},{"entry":"\u2003\u2003<Summary>C# Programming Using the .NET"},{"entry":"\u2003\u2003Framework<\/Summary>"},{"entry":"\u2003\u2003<\/Book>"},{"entry":"\u2003\u2003<!-- . . . other Book entries . . . -->"},{"entry":"\u2003\u2003<\/Books>"},{"entry":"\u2003\u2003<\/XmlDataSource>"},{"entry":"\u2003\u2003<Style def:Name=\u201cBookDataStyle\u201d>"},{"entry":"\u2003\u2003<ContentPresenter\/>"},{"entry":"\u2003\u2003<Style.VisualTree>"},{"entry":"\u2003\u2003<SimpleText FontSize=\u201cSmall\u201d Foreground=\u201cBlack\u201d>"},{"entry":"\u2003\u2003<SimpleText.Text>"},{"entry":"\u2003\u2003<Bind Path=\u201cTitle\u201d\/>"},{"entry":"\u2003\u2003<\/SimpleText.Text>"},{"entry":"\u2003\u2003<\/SimpleText>"},{"entry":"\u2003\u2003<\/Style.VisualTree>"},{"entry":"\u2003\u2003<\/Style>"},{"entry":"\u2003\u2003<\/DockPanel.Resources>"},{"entry":"\u2003\u2003<!-- Bind a ListBox to the query-selected books -->"},{"entry":"\u2003\u2003<ListBox ItemStyle=\u201c{BookDataStyle }>"},{"entry":"\u2003\u2003<ListBox.Items>"},{"entry":"\u2003\u2003<CollectionContainer>"},{"entry":"\u2003\u2003<CollectionContainer.Collection>"},{"entry":"\u2003\u2003<Bind DataSource=\u201c{BookData}\u201c Path=\u201cBook\u201d\/>"},{"entry":"\u2003\u2003<\/CollectionContainer.Collection>"},{"entry":"\u2003\u2003<\/CollectionContainer>"},{"entry":"\u2003\u2003<\/ListBox.Items>"},{"entry":"\u2003\u2003<\/ListBox>"},{"entry":"\u2003<\/DockPanel>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An initial XPath query on the collection is coded by assigning the XPath attribute. This query string value will cause the data source to appear as a collection of data items. By varying the XPath query on the data source, the initial XML data collection that is exposed can be controlled. The XmlDataSource is also given an identifier (ID) by assigning BookData to the def:Name attribute.","A ListBox element can be used to bind to the XML data collection. The \u201cXAML\u201d markup above shows code for a ListBox that displays the titles of the books in the collection. A data style is defined that binds to the Title element of each Book element in the data. This style is defined in the main DockPanel's resources so it can be shared within the scope of that DockPanel. The Style is given the name BookDataStyle. This style can then be repeatedly applied by a ListBox control whose collection is bound to the BookData data source. The ListBox's ItemStyle attribute is how the item style is specified to the ListBox.",{"@attributes":{"id":"p-0706","num":"0706"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class System.Windows.Data.XmlDataSource : Object Implements:"},{"entry":"IDataSource IParseLiteralContent"},{"entry":"{"},{"entry":"public virtual sealed Object get_Data( )"},{"entry":"public XmlDocument get_Document( )"},{"entry":"public String get_Source( )"},{"entry":"public XmlNamespaceManager get_XmlNamespaceManager( )"},{"entry":"public String get_XPath( )"},{"entry":"public virtual Void Parse(TextReader textReader,"},{"entry":"ParserContext parserContext)"},{"entry":"public virtual sealed Void Refresh( )"},{"entry":"public Void set_Document(XmlDocument value)"},{"entry":"public Void set_Source(String value)"},{"entry":"public Void set_XmlNamespaceManager(XmlNamespaceManager value)"},{"entry":"public Void set_XPath(String value)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Declares an individual namespace within an Extensible Markup Language (XML) data source.","Method Description","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","XmlNamespace\u2014Initializes a new instance of the XmlNamespace class.","Property Description","Prefix\u2014Gets or sets the prefix to use for this namespace.","Uri\u2014Gets or sets the Uniform Resource Identifier (URI) for this namespace.",{"@attributes":{"id":"p-0720","num":"0720"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003class System.Windows.Data.XmlNamespace : Object"]},{"entry":[{},"{"]},{"entry":[{},"public String get_Prefix( )"]},{"entry":[{},"public String get_Uri( )"]},{"entry":[{},"public Void set_Prefix(String value)"]},{"entry":[{},"public Void set_Uri(String value)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The delegate to use for handlers that receive the DataContextChanged event.",{"@attributes":{"id":"p-0722","num":"0722"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003class sealed System.Windows.DataContextChangedEventHandler :"},{"entry":"MulticastDelegate : Delegate : Object Implements: ICloneable"},{"entry":"ISerializable"},{"entry":"{"},{"entry":"public virtual IAsyncResult BeginInvoke(Object sender, EventArgs args,"},{"entry":"AsyncCallback callback, Object object)"},{"entry":"public virtual Void EndInvoke(IAsyncResult result)"},{"entry":"public virtual Void Invoke(Object sender, EventArgs args)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Method Description","AddHandler\u2014Add an instance handler for the given RoutedEventID Inherited from ContentElement.","AddToEventRoute\u2014Adds handlers for the current instance to the route Inherited from ContentElement.","BuildRoute\u2014Builds the event route Inherited from ContentElement.","CaptureMouse\u2014Captures the mouse to this element. Inherited from ContentElement.","ClearAllBindings\u2014Removes all bindings attached to an element.","ClearBinding\u2014Removes the binding attached to the specified DependencyProperty.","ClearValue\u2014Clears the local value of a property Inherited from DependencyObject.","DeferLoad\u2014This purpose of this method as the name indicates is to defer the firing of the Loaded event","EndDeferLoad\u2014This call is meant to match a prior DeferLoad call, thereby cause Loaded event to be fired if there are no more pending EndDeferLoad calls.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","FindResource\u2014Searches for a resource with the passed name and returns it","Focus\u2014Focuses the keyboard on this element. Inherited from ContentElement.","FrameworkContentElement\u2014Create an instance of a FrameworkContentElement","GetAnimationBaseValue\u2014If the dependency property is animated this method will give you the value as if it was not animated. Inherited from ContentElement.","GetAnimations\u2014Retrieves an animation collection associated with a DependencyID on this element. Inherited from ContentElement.","GetBinding\u2014Returns the Binding for the specified property.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetLocalValueEnumerator\u2014Create a local value enumerator for this instance Inherited from DependencyObject.","GetRoutedEventIDs\u2014Get RoutedEventIDs with handlers Inherited from ContentElement.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","GetValue\u2014Retrieve the value of a property Inherited from DependencyObject.","ILogicalTreeNode.OnNewParent","ILogicalTreeNode.OnParentChanged","InvalidateProperty\u2014Invalidates a property Inherited from DependencyObject.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","OnDelayedInvalidate\u2014Inherited from DependencyObject during build.","OnGotFocus\u2014An event announcing that the keyboard is focused on this element. Inherited from ContentElement.","OnGotMouseCapture\u2014An event reporting that this element got the mouse capture. Inherited from ContentElement.","OnIsFocusedChanged\u2014An event reporting that the IsFocused property has changed.","OnIsFocusWithinChanged\u2014An event reporting that the IsFocusWithin property changed.","OnIsMouseCapturedChanged\u2014An event reporting that the IsMouseCaptured property changed. Inherited from ContentElement.","OnIsMouseDirectlyOverChanged\u2014An event reporting that the IsMouseDirectlyOver property has changed.","OnIsMouseOverChanged\u2014An event reporting that the IsMouseOver property changed.","OnKeyDown\u2014An event reporting a key was pressed. Inherited from ContentElement.","OnKeyUp\u2014An event reporting a key was released. Inherited from ContentElement.","OnLostFocus\u2014An event announcing that the keyboard is no longer focused Inherited from ContentElement.","OnLostMouseCapture\u2014An event reporting that this element lost the mouse capture. Inherited from ContentElement.","OnMouseEnter\u2014An event reporting the mouse entered this element. Inherited from ContentElement.","OnMouseLeave\u2014An event reporting the mouse left this element. Inherited from ContentElement.","OnMouseLeftButtonDown\u2014An event reporting the left mouse button was pressed. Inherited from ContentElement.","OnMouseLeftButtonUp\u2014An event reporting the left mouse button was released. Inherited from ContentElement.","OnMouseMove\u2014An event reporting a mouse move. Inherited from ContentElement.","OnMouseRightButtonDown\u2014An event reporting the right mouse button was pressed. Inherited from ContentElement.","OnMouseRightButtonUp\u2014An event reporting the right mouse button was released. Inherited from ContentElement.","OnMouseWheel\u2014An event reporting a mouse wheel rotation. Inherited from ContentElement.","OnNewParent\u2014Sets input parent to given new value Inherited from ContentElement.","OnPreviewGotFocus\u2014An event announcing that the keyboard is focused on this element. Inherited from ContentElement.","OnPreviewKeyDown\u2014An event reporting a key was pressed. Inherited from ContentElement.","OnPreviewKeyUp\u2014An event reporting a key was released. Inherited from ContentElement.","OnPreviewLostFocus\u2014An event announcing that the keyboard is no longer focused Inherited from ContentElement.","OnPreviewMouseEnter\u2014When the mouse enters an element, set the cursor. We do this in a class handler, rather than overriding OnIsMouseDirectlyOverChanged, because that is a virtual which can be overridden and not called.","OnPreviewMouseLeave\u2014An event reporting the mouse left this element. Inherited from ContentElement.","OnPreviewMouseLeftButtonDown\u2014An event reporting the left mouse button was pressed. Inherited from ContentElement.","OnPreviewMouseLeftButtonUp\u2014An event reporting the left mouse button was released. Inherited from ContentElement.","OnPreviewMouseMove\u2014An event reporting a mouse move. Inherited from ContentElement.","OnPreviewMouseRightBuftonDown\u2014An event reporting the right mouse button was pressed. Inherited from ContentElement.","OnPreviewMouseRightButtonUp\u2014An event reporting the right mouse button was released. Inherited from ContentElement.","OnPreviewMouseWheel\u2014An event reporting a mouse wheel rotation. Inherited from ContentElement.","OnPreviewTextInput\u2014An event announcing some text input. Inherited from ContentElement.","OnPropertyInvalidated\u2014Notification that a specified property has been invalidated","OnStyleChanged","OnTextInput\u2014An event announcing some text input. Inherited from ContentElement.","RaiseEvent\u2014Raise routed event with the given args Inherited from ContentElement.","ReadLocalValue\u2014Retrieve the local value of a property (if set) Inherited from DependencyObject.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","ReleaseMouseCapture\u2014Releases the mouse capture. Inherited from ContentElement.","RemoveHandler\u2014Remove all instances of the given handler for the given RoutedEventID Inherited from ContentElement.","SetAnimations\u2014Associates an AnimationCollection with a DependencyID on this element. Inherited from ContentElement.","SetBinding\u2014Attaches a binding.","SetContext\u2014Associates this UIContextObject with a UIContext. Inherited from UIContextObject.","SetResourceReference\u2014Searches for a resource called name and sets up a resource reference to it for the passed property.","SetValue\u2014Sets the local value of a property Inherited from DependencyObject.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","ValidateProperty\u2014Retrieve the value of a property (for use by native cache backed custom get accessors) Inherited from DependencyObject.","ValidatePropertyCore\u2014Allows subclasses to participate in property value computation",{"@attributes":{"id":"p-0800","num":"0800"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003class\u2003\u2003System.Windows.FrameworkContentElement\u2003\u2003:"},{"entry":"ContentElement : DependencyObject : UIContextObject :"},{"entry":"Object Implements: IInputElement IFrameworkInputElement"},{"entry":"ILogicalTreeNode ILoaded"},{"entry":"{"},{"entry":"\u2003\u2003public Void ClearAllBindings( )"},{"entry":"\u2003\u2003public Void ClearBinding(DependencyProperty dp)"},{"entry":"\u2003\u2003public Object get_DataContext( )"},{"entry":"\u2003\u2003public Binding GetBinding(DependencyProperty dp)"},{"entry":"\u2003\u2003public Void set_DataContext(Object value)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, Bind bind)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, String path)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, String path,"},{"entry":"BindType bindType)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, String path,"},{"entry":"BindType bindType, ObjectRef source)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, String path,"},{"entry":"BindType bindType, ObjectRef source, UpdateType updateType)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, String path,"},{"entry":"BindType bindType, ObjectRef source, UpdateType updateType,"},{"entry":"IDataTransformer transformer)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, String path,"},{"entry":"BindType bindType, ObjectRef source, UpdateType updateType,"},{"entry":"IDataTransformer transformer, CultureInfo culture)"},{"entry":"\u2003\u2003public Binding SetBinding(DependencyProperty dp, String path,"},{"entry":"BindType bindType, ObjectRef source, UpdateType updateType,"},{"entry":"IDataTransformer transformer, CultureInfo culture, BindFlags bindFlags)"},{"entry":"\u2003\u2003public static readonlyDependencyProperty DataContextProperty"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The base object for the Frameworks","Event Attribute Description","DataContextChanged\u2014DataContextChanged event","GotFocus\u2014An event announcing that the keyboard is focused on this element. Inherited from UIElement.","GotMouseCapture\u2014An event reporting that this element got the mouse capture. Inherited from UIElement.","IsFocusedChanged\u2014An event reporting that the IsFocused property changed. Inherited from UIElement.","IsFocusWithinChanged\u2014An event reporting that the IsFocusWithin property changed.","IsMouseCapturedChanged\u2014An event reporting that the IsMouseCaptured property changed. Inherited from UIElement.","IsMouseDirectlyOverChanged\u2014An event reporting that the IsMouseDirectlyOver property changed. Inherited from UIElement.","IsMouseOverChanged\u2014An event reporting that the IsMouseOver property changed.","KeyDown\u2014An event reporting a key was pressed. Inherited from UIElement.","KeyUp\u2014An event reporting a key was released. Inherited from UIElement.","Loaded\u2014This clr event is fired when IsLoaded becomes true","LostFocus\u2014An event announcing that the keyboard is no longer focused on this element. Inherited from UIElement.","LostMouseCapture\u2014An event reporting that this element lost the mouse capture. Inherited from UIElement.","MouseEnter\u2014An event reporting the mouse entered this element. Inherited from UIElement.","MouseHover\u2014An event reporting a mouse hover.","MouseLeave\u2014An event reporting the mouse left this element. Inherited from UIElement.","MouseLeftButtonDown\u2014An event reporting the left mouse button was pressed. Inherited from UIElement.","MouseLeftButtonUp\u2014An event reporting the left mouse button was released. Inherited from UIElement.","MouseMove\u2014An event reporting a mouse move. Inherited from UIElement.","MouseRightButtonDown\u2014An event reporting the right mouse button was pressed. Inherited from UIElement.","MouseRightButtonUp\u2014An event reporting the right mouse button was released. Inherited from UIElement.","MouseWheel\u2014An event reporting a mouse wheel rotation. Inherited from UIElement.","PreviewGotFocus\u2014An event announcing that the keyboard is focused on this element. Inherited from UIElement.","PreviewKeyDown\u2014An event reporting a key was pressed. Inherited from UIElement.","PreviewKeyUp\u2014An event reporting a key was released. Inherited from UIElement.","PreviewLostFocus\u2014An event announcing that the keyboard is no longer focused on this element. Inherited from UIElement.","PreviewMouseEnter\u2014An event reporting the mouse entered this element. Inherited from UIElement.","PreviewMouseHover\u2014An event reporting a mouse hover.","PreviewMouseLeave\u2014An event reporting the mouse left this element. Inherited from UIElement.","PreviewMouseLeftButtonDown\u2014An event reporting the left mouse button was pressed. Inherited from UIElement.","PreviewMouseLeftButtonUp\u2014An event reporting the left mouse button was released. Inherited from UIElement.","PreviewMouseMove\u2014An event reporting a mouse move. Inherited from UIElement.","PreviewMouseRightButtonDown\u2014An event reporting the right mouse button was pressed. Inherited from UIElement.","PreviewMouseRightButtonUp\u2014An event reporting the right mouse button was released. Inherited from UIElement.","PreviewMouseWheel\u2014An event reporting a mouse wheel rotation. Inherited from UIElement.","PreviewTextInput\u2014An event announcing some text input. Inherited from UIElement.","TextInput\u2014An event announcing some text input. Inherited from UIElement.","Field Description","AnimationEffectsProperty\u2014Timeline property. Inherited from UIElement.","ClipProperty\u2014Clip Property Inherited from UIElement.","ClipToBoundsProperty\u2014ClipToBounds Property Inherited from UIElement.","CursorProperty\u2014CursorProperty","DataContextProperty\u2014DataContext DependencyProperty","FlowDirectionProperty\u2014FlowDirectionProperty","FocusableProperty\u2014The dependency ID for the Focusable property.","HeightProperty\u2014HeightProperty","IDProperty\u2014The dependency ID for the ID property.","IsEnabledProperty\u2014The dependency ID for the IsEnabled property.","IsFocusedProperty\u2014The dependency property for the IsFocused property. Inherited from UIElement.","IsFocusWithinProperty\u2014The dependency property for the IsFocusWithin property.","IsMouseCapturedProperty\u2014The dependency property for the IsMouseCaptured property. Inherited from UIElement.","IsMouseDirectlyOverProperty\u2014The dependency property for the IsMouseDirectlyOver property. Inherited from UIElement.","IsMouseOverProperty\u2014The dependency property for the IsMouseOver property.","MarginProperty\u2014MarginProperty","MaxHeightProperty\u2014MaxHeight Property","MaxWidthProperty\u2014MaxWidth Property","MinHeightProperty\u2014MinHeight Property","MinWidthProperty\u2014MinWidth Property","OpacityProperty\u2014The Opacity property. Inherited from UIElement.","StyleProperty\u2014Style Dependency Property","TimelineProperty\u2014Timeline property. Inherited from UIElement.","VisibilityProperty\u2014The Visibility property. Inherited from UIElement.","WidthProperty\u2014Width Property","Method Description","AddHandler\u2014See overloaded method for details Inherited from UIElement.","AdjustEventSource\u2014Allows adjustment to the event source Inherited from UIElement.","Arrange\u2014Parents or system call this method to arrange the internals of children on a second pass of layout update. Inherited from UIElement.","ArrangeChildHelper\u2014The helper method for a parent to call instead of Arrange on a child during layout. Reads Width, Height, Min\/MaxWidth, Min\/MaxHeight from the child, uses reference size to resolve percent values and calls Arrange method on a child with modified arrangeSize.","ArrangeCore\u2014ArrangeCore allows for the customization of the positioning of children. Inherited from UIElement.","BuildRoute\u2014Builds the EventRoute Inherited from UIElement.","BuildRouteCore\u2014Allows FrameworkElement to augment the EventRoute","CaptureMouse\u2014Captures the mouse to this element. Inherited from UIElement.","ClearAllBindings\u2014Removes all bindings attached to the element.","ClearBinding\u2014Removes the binding attached to the specified DependencyProperty.","ClearValue\u2014Clears the local value of a property Inherited from DependencyObject.","DeferLoad\u2014This purpose of this method as the name indicates is to defer the firing of the Loaded event","EndDeferLoad\u2014This call is meant to match a prior DeferLoad call, thereby cause Loaded event to be fired if there are no more pending EndDeferLoad calls.","EnsureVisuals\u2014Build the current Style's VisualTree","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Releases all resources held by the Visual object. Inherited from Visual.","FindResource\u2014Searches for a resource with the passed name and returns it","Focus\u2014Focuses the keyboard on this element. Inherited from UIElement.","FrameworkElement\u2014Default DependencyObject constructor","GetAnimationBaseValue\u2014If the dependency property is animated this method will give you the value as if it was not animated. Inherited from UIElement.","GetAnimations\u2014Retrieves an animation collection associated with a DependencyID on this element. Inherited from UIElement.","GetAutomationProvider\u2014Called by the Automation infrastructure to request a provider object to provide additional properties for this element.","GetBinding\u2014Returns the Binding for the specified property.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetLocalValueEnumerator\u2014Create a local value enumerator for this instance Inherited from DependencyObject.","GetRoutedEventIDs\u2014Get RoutedEventIDs with handlers Inherited from UIElement.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","GetValue\u2014Retrieve the value of a property Inherited from DependencyObject.","HitTestCore\u2014HitTestCore implements precise hit testing against render contents Inherited from RetainedVisual.","IDragDrop.OnDragEnter","IDragDrop.OnDragLeave","IDragDrop.OnDragOver","IDragDrop.OnDrop","IDragDrop.OnGiveFeedback","IDragDrop.OnQueryContinueDrag","ILogicalTreeNode.OnNewParent","ILogicalTreeNode.OnParentChanged","InvalidateArrange\u2014Invalidates the arrange state for the element. The element will be queued for an update layout that will occur asynchronously. MeasureCore will not be called unless InvalidateMeasure is also called\u2014or that something else caused the measure state to be invalidated. Inherited from UIElement.","InvalidateMeasure\u2014Invalidates the measurement state for the element. This has the effect of also invalidating the arrange state for the element. The element will be queued for an update layout that will occur asynchronously. Inherited from UIElement.","InvalidateProperty\u2014Invalidates a property Inherited from DependencyObject.","InvalidateVisual\u2014InvalidateVisual. Inherited from RetainedVisual.","IRetainedRender.Render\u2014Inherited from UIElement.","IVisual.FindCommonVisualAncestor\u2014Inherited from Visual.","IVisual.HitTest\u2014Inherited from Visual.","IVisual.IsAncestorOf\u2014Inherited from Visual.","IVisual.IsDescendantOf\u2014Inherited from Visual.","IVisual.TransformFromAncestor\u2014Inherited from Visual.","IVisual.TransformFromDescendant\u2014Inherited from Visual.","IVisual.TransformFromVisual\u2014Inherited from Visual.","IVisual.TransformToAncestor\u2014Inherited from Visual.","IVisual.TransformToDescendant\u2014Inherited from Visual.","IVisual.TransformToVisual\u2014Inherited from Visual.","Measure Updates DesiredSize of the UIElement. Must typically be called by parents from theor MeasureCore, to form recursive update. This is first pass of layout update. Inherited from UIElement.","MeasureChildHelper The helper method for a parent to call instead of Measure on a child during layout. Reads Width, Height, Min\/MaxWidth, Min\/MaxHeight from the child, uses reference size to resolve percent values and calls Measure method on a child with correct constraint. Aslo \u2018clamps\u2019 child's desired size using specified sizing properties.","MeasureCore Measurement override. Implement your size-to-content logic here. Inherited from UIElement.","MemberwiseClone Creates a shallow copy of the current Object. Inherited from Object.","OnAccessKey The access key for this element was invoked. Base implementation sets focus to the element. Inherited from UIElement.","OnChildDesiredSizeChanged Notification that is called by Measure of a child when it ends up with different desired size for the child. Inherited from UIElement.","OnDelayedInvalidate Inherited from DependencyObject in build.","OnGotFocus An event announcing that the keyboard is focused on this element. Inherited from UIElement.","OnGotMouseCapture An event reporting that this element got the mouse capture. Inherited from UIElement.","OnIsFocusedChanged An event reporting that the IsFocused property has changed.","OnIsFocusWithinChanged An event reporting that the IsFocusWithin property changed.","OnIsMouseCapturedChanged An event reporting that the IsMouseCaptured property changed. Inherited from UIElement.","OnIsMouseDirectlyOverChanged An event reporting that the IsMouseDirectlyOver property has changed.","OnIsMouseOverChanged An event reporting that the IsMouseOver property changed.","OnKeyDown An event reporting a key was pressed. Inherited from UIElement.","OnKeyUp An event reporting a key was released. Inherited from UIElement.","OnLostFocus An event announcing that the keyboard is no longer focused Inherited from UIElement.","OnLostMouseCapture An event reporting that this element lost the mouse capture. Inherited from UIElement.","OnMouseEnter An event reporting the mouse entered this element. Inherited from UIElement.","OnMouseLeave An event reporting the mouse left this element. Inherited from UIElement.","OnMouseLeftButtonDown An event reporting the left mouse button was pressed. Inherited from UIElement.","OnMouseLeftButtonUp An event reporting the left mouse button was released. Inherited from UIElement.","OnMouseMove An event reporting a mouse move. Inherited from UIElement.","OnMouseRightButtonDown An event reporting the right mouse button was pressed. Inherited from UIElement.","OnMouseRightButtonUp An event reporting the right mouse button was released. Inherited from UIElement.","OnMouseWheel An event reporting a mouse wheel rotation. Inherited from UIElement.","OnPreviewGotFocus An event announcing that the keyboard is focused on this element. Inherited from UIElement.","OnPreviewKeyDown An event reporting a key was pressed. Inherited from UIElement.","OnPreviewKeyUp An event reporting a key was released. Inherited from UIElement.","OnPreviewLostFocus An event announcing that the keyboard is no longer focused Inherited from UIElement.","OnPreviewMouseEnter When the mouse enters an element, set the cursor. We do this in a class handler, rather than overriding OnIsMouseDirectlyOverChanged, because that is a virtual which can be overridden and not called.","OnPreviewMouseLeave An event reporting the mouse left this element. Inherited from UIElement.","OnPreviewMouseLeftButtonDown An event reporting the left mouse button was pressed. Inherited from UIElement.","OnPreviewMouseLeftButtonUp An event reporting the left mouse button was released. Inherited from UIElement.","OnPreviewMouseMove An event reporting a mouse move. Inherited from UIElement.","OnPreviewMouseRightButtonDown An event reporting the right mouse button was pressed. Inherited from UIElement.","OnPreviewMouseRightButtonUp An event reporting the right mouse button was released. Inherited from UIElement.","OnPreviewMouseWheel An event reporting a mouse wheel rotation. Inherited from UIElement.","OnPreviewTextInput An event announcing some text input. Inherited from UIElement.","OnPropertyInvalidated Notification that a specified property has been invalidated","OnRender Render callback. Inherited from UIElement.","OnStyleChanged Style has changed","OnTextInput An event announcing some text input. Inherited from UIElement.","RaiseCommand RaiseCommand Inherited from UIElement.","RaiseEvent Raise the events specified by RoutedEventID Inherited from UIElement.","RaiseQueryStatus RaiseQueryStatus Inherited from UIElement.","ReadLocalValue Retrieve the local value of a property (if set) Inherited from DependencyObject.","ReferenceEquals Determines whether the specified Object instances are the same instance. Inherited from Object.","ReleaseMouseCapture Releases the mouse capture. Inherited from UIElement.","RemoveHandler Removes all instances of the specified routed event handler for this object instance Inherited from UIElement.","RenderOpen RendeOpen opens the RetainedVisual for rendering. Inherited from RetainedVisual.","SetAnimations Associates an AnimationCollection with a DependencyID on this element. Inherited from UIElement.","SetBinding Attaches a binding.","SetContext Associates this UIContextObject with a UIContext. Inherited from UIContextObject.","SetResourceReference Searches for a resource called name and sets up a resource reference to it for the passed property.","SetValue Sets the local value of a property Inherited from DependencyObject.","ToString Returns a String that represents the current Object. Inherited from Object.","TraverseFocus Request to move the focus from this element to another element","UpdateLayout Call this method to ensure that the whoel subtree of elements that includes this UIElement is properly updated. Inherited from UIElement.","ValidateProperty Retrieve the value of a property (for use by native cache backed custom get accessors) Inherited from DependencyObject.","ValidatePropertyCore Allows subclasses to participate in property value computation","Property Attribute Description","AnimationEffects\u2014The collection of AnimationEffect attached to this element. Inherited from UIElement.","Clip\u2014Clip Property Inherited from UIElement.","ClipToBounds\u2014ClipToBounds Property Inherited from UIElement.","CommandLinks\u2014CommandLinks Inherited from UIElement.","ComputedSize\u2014Returns the actual size of the element. Inherited from UIElement.","ContentOwner\u2014ContentOwner is the ItemsControl whose items produce the content for the current element. This property can only be set in the chrome template for an ItemsControl\u2014it identifies the location in the template where the ItemsControl should place the UI generated for its items.","Context\u2014Returns the UIContext that this UIContextObject is associated with. Inherited from UIContextObject.","Cursor\u2014Cursor Property","DataContext\u2014Gets or sets the data context for an element.","DependencyObjectType\u2014Returns the DType that represents the CLR type of this instance Inherited from DependencyObject.","DesiredSize\u2014Returns the size the element computed during the Measure pass. This is only valid if IsMeasureValid is true. Inherited from UIElement.","FlowDirection\u2014FlowDirection Property","Focusable\u2014Gettor and Settor for Focusable Property","ForwardCommandsTo\u2014CommandLinks Inherited from UIElement.","HasAnimations\u2014Determines if any animations are present on this element Inherited from UIElement.","Height\u2014Gets or sets the height of the element.","HitTestBounds\u2014HitBounds returns the hit region bounding box for the current visual. Inherited from Visual.","ID\u2014ID property.","IsArrangeValid\u2014Determines if the ComputedSize and position of child elements is valid. Inherited from UIElement.","IsDisposed\u2014Gets a value that indicates whether the system has disposed of the Visual. Inherited from Visual.","IsEnabled\u2014A property indicating if this element is enabled or not.","IsFocused\u2014A property indicating if the keyboard is focused on this element or not. Inherited from UIElement.","IsFocusWithin\u2014Indicates if Keyboard Focus is anywhere within in the subtree starting at the current instance","IsLoaded\u2014Read-only property that tells you if or not the current element has been loaded","IsMeasureValid\u2014Determines if the DesiredSize is valid. Inherited from UIElement.","IsMouseCaptured\u2014A property indicating if the mouse is captured to this element or not. Inherited from UIElement.","IsMouseDirectlyOver\u2014A property indicating if the mouse is over this element or not. Inherited from UIElement.","IsMouseOver\u2014A property indicating if the mouse is over this element or not.","IsRequestingAnimationBaseValue\u2014This property will return true while the class is calculating the animation base value requested by a call to GetAnimationBaseValue( ). Inherited from UIElement.","IsTreeSeparator\u2014Indicates if the current instance is at the root of a separate tree","KeyboardActive\u2014Gettor and Settor for KeyboardActive Property","Margin\u2014Margin Property","MaxHeight\u2014MaxHeight Property","MaxWidth\u2014MaxWidth Property","MinHeight\u2014MinHeight Property","MinWidth\u2014MinWidth Property","Opacity\u2014Opacity accessor Inherited from UIElement.","Parent\u2014Returns logical parent","RenderBounds\u2014This property is only used if the RetainedVisual implements RetainedRender. If not this property will throw an InvalidOperationException. The implementer must typically set this property to the bounds of the ink drawn by his Render function in local coordinate space. Inherited from RetainedVisual.","Resources\u2014Current locally defined Resources","Style\u2014Style property","Timeline\u2014Timeline accessor. Inherited from UIElement.","Visibility\u2014Visibility accessor Inherited from UIElement.","Width\u2014Gets or sets the width of the element.",{"@attributes":{"id":"p-1025","num":"1025"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class \u2003System.Windows.FrameworkElement \u2003: \u2003UIElement \u2003:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"RetainedVisual : Visual : DependencyObject : UIContextObject : Object"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Implements: \u2003IVisual \u2002IRetainedRender \u2002IInputElement \u2002ICommandTarget"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"IFrameworkInputElement ILogicalTreeNode IDragDrop ILoaded"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"public Void ClearAllBindings( )"]},{"entry":[{},"public Void ClearBinding(DependencyProperty dp)"]},{"entry":[{},"public Object get_DataContext( )"]},{"entry":[{},"public Binding GetBinding(DependencyProperty dp)"]},{"entry":[{},"public Void set_DataContext(Object value)"]},{"entry":[{},"public Binding SetBinding(DependencyProperty dp, Bind bind)"]},{"entry":[{},"public Binding SetBinding(DependencyProperty dp, String path)"]},{"entry":[{},"public Binding SetBinding(DependencyProperty dp, String path, BindType"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bindType)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Binding SetBinding(DependencyProperty dp, String path, BindType"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bindType, ObjectRef source)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Binding SetBinding(DependencyProperty dp, String path, BindType"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bindType, ObjectRef source, UpdateType updateType)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Binding SetBinding(DependencyProperty dp, String path, BindType"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"bindType, \u2002ObjectRef source, \u2002UpdateType updateType, \u2002IDataTransformer"},{"entry":"transformer)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Binding SetBinding(DependencyProperty dp, String path, BindType"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"bindType, \u2002ObjectRef source, \u2002UpdateType \u2002updateType, \u2002IDataTransformer"},{"entry":"transformer, CultureInfo culture)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Binding SetBinding(DependencyProperty dp, String path, BindType"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"bindType, ObjectRef source, UpdateType updateType, IDataTransformer"},{"entry":"transformer, CultureInfo culture, BindFlags bindFlags)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public static readonlyDependencyProperty DataContextProperty"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Templating Instance Representation","Method Description","AliasProperty\u2014Set up a binding between a template child and the styled container","AppendChild\u2014Add a factory child to this factory","CreateInstance\u2014Create an instance of the specified type","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","FrameworkElementFactory\u2014Construction","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","SetBinding\u2014Creates an initial binding in the factory's template children.","SetValue\u2014Simple value set on template child","ToString\u2014Returns a String that represents the current Object. Inherited from Object.","Property Description","FirstChild\u2014First child factory","IsSealed\u2014FrameworkElementFactory mutability state","NextSibling\u2014Next sibling factory","Parent\u2014Parent factory","StyleID\u2014Style identifier","Type\u2014Type of object that the factory will produce",{"@attributes":{"id":"p-1048","num":"1048"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class \u2003System.Windows.FrameworkElementFactory \u2003: \u2003Object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"public Void SetBinding(DependencyProperty dp, Bind bind)"},{"entry":"}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class \u2003\u2003System.Windows.FrameworkPropertyMetadata \u2003:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"PropertyMetadata : Object"},{"entry":"{"},{"entry":"public Boolean get_Databindable( )"},{"entry":"public Void set_Databindable(Boolean value)"},{"entry":"}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enum sealed System.Windows.MetadataFlags : Enum :"]},{"entry":[{},"ValueType :"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Object Implements: IComparable IFormattable IConvertible"},{"entry":"{"},{"entry":"public static MetadataFlags NoDatabind"},{"entry":"}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract \u2003\u2003interface \u2003\u2003System.Windows.IApplyValue"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"public virtual Void Apply(DependencyObject e, DependencyProperty dp)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"An abstract class, used as the base class for several other provided \u201cAvalon\u201d classes that manage a view of a data collection.","CollectionChanged\u2014Occurs when the collection view changes. This could mean that items were added or removed in the collection, or that a new sort or filter was applied to this view.","ProtectedCurrentChanged\u2014A protected event. In derived classes, this event occurs after changing the position of the record pointer.","ProtectedCurrentChanging\u2014A protected event. In derived classes, this event occurs before a change in currency. If necessary, handlers of the event can cancel the change.","Method Description","ChangedCurrent\u2014Raises the implemented CurrentChanged event of the object.","CollectionView\u2014Initializes a new instance of a CollectionView derived class. This constructor is protected in the base CollectionView class.","Contains\u2014Determines whether a given data item belongs to this collection view.","ContainsItem\u2014Determines whether a given data item belongs to this collection view or the unfiltered collection.","Equals\u2014Determines whether two Object instances are equal. Inherited from Object.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetEnumerator\u2014Returns an enumerator that can iterate through the collection view.","GetHashCode\u2014Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table. Inherited from Object.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","IndexOf\u2014Returns the index where the given data item belongs in the collection, or \u22121 if the index of that item is unknown.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","OKToChangeCurrent\u2014Determines whether it is allowable to change the position of the current record pointer.","OnCollectionChanged\u2014Implement this method to handle CollectionChanged events in the data collection that underlies the collection view.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","Refresh\u2014Refreshes the view. Reapplies any current sort or filter conditions, as set by various properties that declare sort or filter criteria.","ToString\u2014Returns a String that represents the current Object. Inherited from Object.",{"@attributes":{"id":"p-1070","num":"1070"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract \u2002class \u2002System.ComponentModel.CollectionView : Object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Implements: IEnumerable ICollectionChange"},{"entry":"{"},{"entry":"protected Void ChangedCurrent( )"},{"entry":"public virtual Boolean Contains(Object item)"},{"entry":"public virtual Boolean ContainsItem(Object item)"},{"entry":"public virtual Boolean get_CanFilter( )"},{"entry":"public virtual Boolean get_CanSort( )"},{"entry":"public ICollection get_Collection( )"},{"entry":"public virtual IComparer get_Comparer( )"},{"entry":"public virtual Int32 get_Count( )"},{"entry":"public virtual ICurrentItem get_CurrentItem( )"},{"entry":"public virtual String get_Filter( )"},{"entry":"public virtual SortDescription[ ] get_Sort( )"},{"entry":"public Object get_ViewManagerData( )"},{"entry":"public virtual IEnumerator GetEnumerator( )"},{"entry":"public virtual Int32 IndexOf(Object item)"},{"entry":"protected Boolean OKToChangeCurrent( )"},{"entry":"protected \u2003\u2003virtual \u2003\u2003Void \u2003\u2003OnCollectionChanged(Object"},{"entry":"sender,"},{"entry":"CollectionChangeEventArgs args)"},{"entry":"public virtual Void Refresh( )"},{"entry":"public virtual Void set_Filter(String value)"},{"entry":"public virtual Void set_Sort(SortDescription[ ] value)"},{"entry":"public Void set_ViewManagerData(Object value)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Represents the method that handles the CurrentChanged event raised by collection views, or any class implementing the ICurrentItem interface.\n\n",{"@attributes":{"id":"p-1072","num":"1076"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class","sealed"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.ComponentModel.CurrentChangedEventHandler \u2003:"]},{"entry":[{},"MulticastDelegate \u2003:"]},{"entry":[{},"Delegate : Object Implements: ICloneable ISerializable"]},{"entry":[{},"{"]},{"entry":[{},"public \u2003virtual \u2003IAsyncResult \u2003BeginInvoke(Object"]},{"entry":[{},"sender, \u2003EventArgs \u2003args,"]},{"entry":[{},"AsyncCallback callback, Object object)"]},{"entry":[{},"public virtual Void EndInvoke(IAsyncResult result)"]},{"entry":[{},"public virtual Void Invoke(Object sender, EventArgs args)"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Represents the method that handles the CurrentChanging event raised by collection view classes, or any class implementing the ICurrentItem interface.\n\n","This event is invoked immediately before the current record pointer moves in this view. The Cancel property in the event arguments can be used to cancel the proposed move, and this convention should be respected by the currency logic in custom collection views. See ProtectedCurrentChanging for an example.","CollectionView is an abstract class. The event might be more properly understood by looking at actual derivations of the class, such as ListCollectionView and ArrayListCollectionView. In these classes the event does not include the \u201cProtected\u201d prefix.",{"@attributes":{"id":"p-1076","num":"1084"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class","sealed"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"System.ComponentModel.CurrentChangingEventHandler \u2003:"},{"entry":"MulticastDelegate \u2003:"},{"entry":"Delegate : Object Implements: ICloneable ISerializable"},{"entry":"{"},{"entry":"public virtual IAsyncResult BeginInvoke(Object sender, CancelEventArgs"},{"entry":"args,"},{"entry":"AsyncCallback callback, Object object)"},{"entry":"public virtual Void EndInvoke(IAsyncResult result)"},{"entry":"public virtual Void Invoke(Object sender, CancelEventArgs args)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Enables notifications that items within a collection have changed: an item has been added, removed, or the entire collection has been refreshed.","Event Description","CollectionChanged\u2014Occurs if the collection has changed its content. Arguments of the event specify the change that has taken place.","This interface is implemented by the ArrayListDataCollection data collection class.",{"@attributes":{"id":"p-1081","num":"1089"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003abstract interface System.ComponentModel.ICollectionChange"},{"entry":"{"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An interface used to create collection view factory classes, which in turn create new CollectionView derived objects.","Method Description","CreateView\u2014Creates a new view on the collection that implements this interface. Normally, this method is only called by a view manager, not by user code.","Normally, user code does not call methods on this interface. The common way to obtain a view over a collection is to call GetView.",{"@attributes":{"id":"p-1086","num":"1094"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003abstract interface System.ComponentModel.ICollectionViewFactory"},{"entry":"{"},{"entry":"public virtual CollectionView CreateView( )"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Maintains the concept of the current record pointer in a collection view.","Event Description","CurrentChanged\u2014Occurs immediately after changing the position of the current record pointer within the collection view.","CurrentChanging\u2014Occurs immediately before changing the position of the current record pointer within the collection view. Handlers to the event should have the opportunity to cancel the position move by using the Cancel property of the returned arguments class to cancel the move.","Method Description","MoveFirst\u2014Moves the record pointer to the first record in the collection view.","MoveLast\u2014Moves the record pointer to the last record in the collection view.","MoveNext\u2014Moves the record pointer to the next record in the collection view.","MovePrevious\u2014Moves the record pointer to the previous record in the collection view.","MoveTo\u2014Moves the record pointer to the specified record in the collection view.","Property Description","BOF\u2014Gets the Boolean value that declares whether the record pointer is at or before the beginning of the collection array.","Current\u2014Gets the current record located at the current record pointer position.","EOF\u2014Gets a Boolean value that declares whether the record pointer is at or beyond the end of the collection array.","Remarks","ArrayListCollectionView implements this interface indirectly, as do several other provided collection view classes.","To access methods of ICurrentItem in collection views, get the CurrentItem object in the view. This object supports ICurrentItem and thus enables changing the current record position.","By choosing to not implement this interface, very simple collection views can choose not to support currency, but this is not recommended.","How do I Navigate Through the Objects in a Data Collection View?","You can navigate through the objects in a data collection view by using the methods provided in view classes that inherit the ICurrentItem interface. Although the methods and properties involved are not direct members of the view classes, you can call these methods by returning the CurrentItem object and calling the various ICurrentItem collection navigation methods on it. In most cases, implementations of collection views derive from CollectionView and inherit from ICurrentItem. There are several methods defined by ICurrentItem that are used for navigating the objects in the collection.","MoveFirst","MoveLast","MoveNext","MovePrevious","MoveTo","MoveFirst and MoveLast take you to the first or last objects in the collection, respectively. MoveNext and MovePrevious take you to the next or previous objects in the collection, relative to the Current object. MoveTo accepts an object argument and moves the current record pointer to that object's record if it could be found. In addition to attempting the desired move, these methods return Boolean values that inform you whether the record pointer is now on an item that exists in the current view (this distinction comes into play if you are viewing a collection with a filter applied).","In this C# example, the same function handles button clicks from either a Previous or Next button. MyCollectionView is a view that is an instance of CollectionView. This is the base view class that implements the ICurrentItem interface. Most common view operations can be handled with this base class, rather than choosing to cast the initially returned view to the more specialized view classes ListCollectionView, BindingListCollectionView, or ArrayListCollectionView.",{"@attributes":{"id":"p-1114","num":"1122"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public void OnButton(Object sender, ClickEventArgs args)"},{"entry":"{"},{"entry":"Button b = sender as Button;"},{"entry":"switch(b.ID)"},{"entry":"{"},{"entry":"case \u201cPrevious\u201d:"},{"entry":"MyCollectionView.CurrentItem.MovePrevious( );"},{"entry":"if(!MyCollectionView.CurrentItem.BOF)"},{"entry":"{"},{"entry":"FeedbackText.Text = \u201c\u201d;"},{"entry":"o = MyCollectionView.CurrentItem.Current as Order;"},{"entry":"myListBox.SelectedIndex = MyCollectionView.IndexOf(o);"},{"entry":"}"},{"entry":"else"},{"entry":"{"},{"entry":"MyCollectionView.CurrentItem.MoveFirst( );"},{"entry":"FeedbackText.Text = \u201cAt first record\u201d;"},{"entry":"}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break;"]},{"entry":[{},"case \u201cNext\u201d:"]},{"entry":[{},"MyCollectionView.CurrentItem.MoveNext( );"]},{"entry":[{},"if(!MyCollectionView.CurrentItem.EOF)"]},{"entry":[{},"{"]},{"entry":[{},"FeedbackText.Text = \u201c\u201d;"]},{"entry":[{},"o = MyCollectionView.CurrentItem.Current as Order;"]},{"entry":[{},"myListBox.SelectedIndex = MyCollectionView.IndexOf(o);"]},{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]},{"entry":[{},"MyCollectionView.CurrentItem.MoveLast( );"]},{"entry":[{},"FeedbackText.Text = \u201cAt last record\u201d;"]},{"entry":[{},"}"]},{"entry":[{},"break;"]},{"entry":[{},"}"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract interface System.ComponentModel.ICurrentItem"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"public virtual Boolean get_BOF( )"},{"entry":"public virtual Object get_Current( )"},{"entry":"public virtual Boolean get_EOF( )"},{"entry":"public virtual Boolean MoveFirst( )"},{"entry":"public virtual Boolean MoveLast( )"},{"entry":"public virtual Boolean MoveNext( )"},{"entry":"public virtual Boolean MovePrevious( )"},{"entry":"public virtual Boolean MoveTo(Object item)"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Create a One-Way Binding to a Dynamically Updated Data Source","Classes that implement this interface can update the bound target property whenever the source property changes.","Event Description","PropertyChanged\u2014Occurs whenever a property of a data item class changes.","Events","How do I Implement Property Change Notification?","This example shows how to provide for property change notification in your data items by implementing the IPropertyChange interface.","You can bind user interface (UI) presentation elements to data items with One-Time binding. The UI will then reflect the initial value of the data item but will not automatically reflect changes in that underlying data item. \u201cAvalon\u201d also supports One-Way and Two-Way binding. In One-Way binding the target of the binding responds automatically to changes in a source data item. To bind so that changes in your source data item are automatically reflected in your binding target, you must typically add code to support property change notifications. You do this by deriving your source data item class from IPropertyChange and then declaring the PropertyChanged event as a PropertyChangedEventHandler delegate. Declaring the event is how you implement the IPropertyChange interface on your data item. Within the data item you then define your own notification method containing program logic that eventually raises the event by calling back through its event handler. You typically call your notification method within the set method of your data item property when you determine that the data value of the property has changed. The set method of your property is called when the property is assigned a value by outside users of your data item.","In the following code, the data item is declared as a NumberListItem class that derives from IPropertyChange. Though other properties of the data item could be exposed, in this example one property, NLValue, is exposed as sufficient for this class. In compliance with the IPropertyChange interface contract, the class also exposes the public event PropertyChanged. A private NotifyPropertyChanged method is used internally as the method to call for notification. It accepts the name of an exposed property as a string, in this case NLValue. Within the notification method the event condition is raised by calling the event handler through the declared event. Of course, as a precaution against a null reference exception, the callback is only attempted if the event has been assigned a non-null reference to an event handler. That assignment is normally done by the system ahead of time when objects of this data item class are instantiated. The callback invocation of the event handler also accepts the name of the property, but only if that name is enveloped within a PropertyChangedEventArgs object that is created anew for this purpose. To complete the notification support, within the set method of the property a call to the private NotifyPropertyChanged method is done when a change in the value of the property is detected. Both the value assignment and the notification are done only if the new value passed to the set method is different than the current value of the property, _NLValue.","For C#, here is the declaration of the data item class.",{"@attributes":{"id":"p-1125","num":"1133"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class NumberListItem : IPropertyChange"]},{"entry":[{},"{"]},{"entry":[{},"private int_NLValue = 0;"]},{"entry":[{},"static NumberListItem( )"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"public int NLValue"]},{"entry":[{},"{"]},{"entry":[{},"get"]},{"entry":[{},"{"]},{"entry":[{},"return_NLValue;"]},{"entry":[{},"}"]},{"entry":[{},"set"]},{"entry":[{},"{"]},{"entry":[{},"if (_NLValue != value)"]},{"entry":[{},"{"]},{"entry":[{},"_NLValue = value;"]},{"entry":[{},"NotifyPropertyChanged(\u201cNLValue\u201d);"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"\/\/ The following variable and method provide the support for"]},{"entry":[{},"\/\/ handling property change notifications."]},{"entry":[{},"public event PropertyChangedEventHandler PropertyChanged;"]},{"entry":[{},"private void NotifyPropertyChanged(String info)"]},{"entry":[{},"{"]},{"entry":[{},"if (PropertyChanged != null)"]},{"entry":[{},"PropertyChanged(this, new PropertyChangedEventArgs(info));"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"For Microsoft\u00ae Visual Basic\u00ae .NET, here is the declaration of the data item class.",{"@attributes":{"id":"p-1127","num":"1135"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003Public Class NumberListItem"},{"entry":"\u2003\u2003Implements IPropertyChange"},{"entry":"\u2003\u2003Private _NLValue As Integer = 0"},{"entry":"\u2003\u2003Shared Sub New( )"},{"entry":"\u2003\u2003End Sub \u2032New"},{"entry":"\u2003\u2003\u2032The following event and method provide the support for"},{"entry":"\u2003\u2003\u2032handling property change notifications."},{"entry":"\u2003\u2003Public Event PropertyChanged As PropertyChangedEventHandler"},{"entry":"Implements IPropertyChange.PropertyChanged"},{"entry":"\u2003\u2003Private Sub NotifyPropertyChanged(ByVal info As String)"},{"entry":"\u2003\u2003RaiseEvent \u2003\u2003PropertyChanged(Me, \u2003\u2003New"},{"entry":"PropertyChangedEventArgs(info))"},{"entry":"\u2003\u2003End Sub \u2032NotifyPropertyChanged"},{"entry":"\u2003\u2003Public Property NLValue( ) As Integer"},{"entry":"\u2003\u2003Get"},{"entry":"\u2003\u2003Return_NLValue"},{"entry":"\u2003\u2003End Get"},{"entry":"\u2003\u2003Set"},{"entry":"\u2003\u2003If_NLValue <>value Then"},{"entry":"\u2003\u2003_NLValue = value"},{"entry":"\u2003\u2003NotifyPropertyChanged(\u201cNLValue\u201d)"},{"entry":"\u2003\u2003End If"},{"entry":"\u2003\u2003End Set"},{"entry":"\u2003\u2003End Property"},{"entry":"\u2003\u2003End Class \u2032NumberListItem"},{"entry":"\u2003\u2003Create a One-Way Binding to a Dynamically Updated Data Source"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This example shows how binding to a data object where PropertyChanged is implemented with a one-way binding will refresh the bound properties in a control whenever the data changes.","For most bindings, you want to use either a one-way or two-way binding, so that the destination element reflects data changes in the bound source property. If you want these updates to happen automatically as intended, it is an absolute requirement that the individual data properties each raise the PropertyChanged event upon an internal change in their value, and, therefore, either the overall data class or the individual items in a data collection must typically implement IPropertyChange.","The C# example shown here is the complete code for a data class and includes an internal timer loop that produces real-time changes in the underlying data properties. This scenario is similar to implementing a \u201cstock ticker\u201d in a Web page, where the application is consuming data that could change at any time, but not necessarily writing back to the source.",{"@attributes":{"id":"p-1131","num":"1139"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using System;"]},{"entry":[{},"using System.ComponentModel;"]},{"entry":[{},"using System.Windows;"]},{"entry":[{},"using System.Windows.Controls;"]},{"entry":[{},"using System.ComponentModel;"]},{"entry":[{},"using System.Windows.Data;"]},{"entry":[{},"namespace WCPSample {"]},{"entry":[{},"public class myDataCollection: ArrayListDataCollection"]},{"entry":[{},"{"]},{"entry":[{},"public myDataCollection_changeThis;"]},{"entry":[{},"public \u2003myData \u2003item1 \u2003= \u2003new \u2003myData(\u201cIchiro"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Bobblehead\u201d,(decimal)24.95);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public myData item2 = new myData(\u201cEdgar Toy Duck\u201d,(decimal)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"16.05);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public myData item3 = new myData(\u201cJeff Cirillo Golden Sombero\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(decimal) 0.99);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public myDataCollection( ):base( )"]},{"entry":[{},"{"]},{"entry":[{},"Add(item1);"]},{"entry":[{},"Add(item2);"]},{"entry":[{},"Add(item3);"]},{"entry":[{},"CreateTimer( );"]},{"entry":[{},"}"]},{"entry":[{},"private void CreateTimer( )"]},{"entry":[{},"{"]},{"entry":[{},"System.Timers.Timer Timer1 = new System.Timers.Timer( );"]},{"entry":[{},"Timer1.Enabled = true;"]},{"entry":[{},"Timer1.Interval = 10000;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Timer1.Elapsed","+=","new"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"System.Timers.ElapsedEventHandler(Timer1_Elapsed);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"private \u2003\u2003\u2003void \u2003\u2003\u2003Timer1_Elapsed(object \u2003\u2003\u2003\u2003sender,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"System.Timers.ElapsedEventArgs e)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"item1.BidItemPrice += (decimal) 1.10;"]},{"entry":[{},"item2.BidItemPrice += (decimal) 0.40;"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"public class myData: IPropertyChange"]},{"entry":[{},"{"]},{"entry":[{},"private string_biditemname = \u201cUnset\u201d;"]},{"entry":[{},"private decimal_biditemprice = (decimal) 0.0;"]},{"entry":[{},"public \u2003myData(string \u2003NewBidItemName, \u2003decimal"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"NewBidItemPrice) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_biditemname = NewBidItemName;"]},{"entry":[{},"_biditemprice = NewBidItemPrice;"]},{"entry":[{},"}"]},{"entry":[{},"public string BidItemName"]},{"entry":[{},"{"]},{"entry":[{},"get"]},{"entry":[{},"{"]},{"entry":[{},"return_biditemname;"]},{"entry":[{},"}"]},{"entry":[{},"set"]},{"entry":[{},"{"]},{"entry":[{},"if(_biditemname.Equals(value) == false)"]},{"entry":[{},"{"]},{"entry":[{},"_biditemname = value;"]},{"entry":[{},"\/\/Call Notify PropertyChanged whenever the property is updated"]},{"entry":[{},"NotifyPropertyChanged(\u201cBidItemName\u201d);"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"public decimal BidItemPrice"]},{"entry":[{},"{"]},{"entry":[{},"get"]},{"entry":[{},"{"]},{"entry":[{},"return_biditemprice;"]},{"entry":[{},"}"]},{"entry":[{},"set"]},{"entry":[{},"{"]},{"entry":[{},"if(_biditemprice.Equals(value) == false)"]},{"entry":[{},"{"]},{"entry":[{},"_biditemprice = value;"]},{"entry":[{},"\/\/Call Notify PropertyChanged whenever the property is updated"]},{"entry":[{},"NotifyPropertyChanged(\u201cBidItemPrice\u201d);"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"\/\/Declare event"]},{"entry":[{},"public event PropertyChangedEventHandler PropertyChanged;"]},{"entry":[{},"\/\/NotifyPropertyChanged event handler to update property value in"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"binding"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private void NotifyPropertyChanged(string propName)"]},{"entry":[{},"{"]},{"entry":[{},"if (PropertyChanged !=null)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PropertyChanged(this,","new"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"PropertyChangedEventArgs(propName));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"abstract \u2003interface \u2003System.ComponentModel.IPropertyChange"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Describes a sort qualifier that is used to sort items in a collection when creating a view. An array of these qualifier descriptions is used to set the Sort property of a collection view.","Method Description","Equals\u2014Indicates whether this instance and a specified object are equal. Inherited from ValueType.","Finalize\u2014Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. Inherited from Object.","GetHashCode\u2014Returns the hash code for this instance. Inherited from ValueType.","GetType\u2014Gets the Type of the current instance. Inherited from Object.","MemberwiseClone\u2014Creates a shallow copy of the current Object. Inherited from Object.","ReferenceEquals\u2014Determines whether the specified Object instances are the same instance. Inherited from Object.","SortDescription\u2014Initializes a new instance of a SortDescription structure.","ToString\u2014Returns the fully qualified type name of this instance. Inherited from ValueType.","Property Description","Direction\u2014Gets the sort direction value declared in this sort direction item.","Empty\u2014Represents an empty sort description array. This method is intended to be called statically.","PropertyName\u2014Gets the property name declared by this sort direction item. This property should be exposed as public in the underlying collection.","How Do I Sort Data?","This example describes how to sort data in a data collection view. A data collection is a group of data of type IEnumerable, where members of the collection implement IPropertyChange and the collection itself implements ICollectionChange. A data collection view is one possible view of that collection, where additional conditions such as sorting and filtering can be applied to the collection, but these views leave the underlying collection unchanged.","To sort the data, set the Sort property on any view class derived from CollectionView. This property is set to an array of SortDescription structures. Each structure describes one property of the data that should be the property sorted upon, and the sort direction. Items in the array of these structures are handled sequentially when the sort is performed.","The following C# example sorts the data in ascending order. Each member of the collection is an Order object and is sorted by the sequence of the order property in the data. MyALCollectionView is an ArrayListCollectionView object obtained from the collection, and sdA is the array of sort descriptions.\n\n","You also call Refresh on the view to have the sort order take effect.\n\n",{"@attributes":{"id":"p-1151","num":"1163"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003struct sealed System.ComponentModel.SortDescription : ValueType"},{"entry":": Object"},{"entry":"{"},{"entry":"public ListSortDirection get_Direction( )"},{"entry":"public static SortDescription[ ] get_Empty( )"},{"entry":"public String get_PropertyName( )"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Although embodiments of data association have been described in language specific to structural features and\/or methods, it is to be understood that the subject of the appended claims is not necessarily limited to the specific features or methods described. Rather, the specific features and methods are disclosed as exemplary implementations of data association."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features and components.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
