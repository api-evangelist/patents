---
title: Dynamic properties for software objects
abstract: A method, apparatus and article of manufacture provide for displaying per-instance dynamic properties of an object. A reference to an object instance having a dynamic property that is supplied at runtime for the object instance on a per-instance basis and is not stored with the object is received. A reference to a property source instance, that maintains knowledge of the dynamic property, associated with the object, is retrieved. The references are provided to a control that retrieves and displays the dynamic property. Additionally, the object may provide/specify a custom ActiveX control that defines a user interface for displaying and editing one or more properties. The custom control is instantiated and used to display the property in the defined user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08132115&OS=08132115&RS=08132115
owner: Autodesk, Inc.
number: 08132115
owner_city: San Rafael
owner_country: US
publication_date: 20040218
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CONCLUSION"],"p":["This application claims the benefit under 35 U.S.C. Section 119(e) of the following co-pending and commonly-assigned U.S. provisional patent application(s), which is\/are incorporated by reference herein:","Provisional Patent Application Ser. No. 60\/450,472, filed Feb. 27, 2003, by John G. Beltran, Montgomery Graf, Phillip D. Beymer, and David Stroud, entitled \u201cPROPERTY PALETTE,\u201d.","1. Field of the Invention","The present invention relates generally to software objects, and in particular, to a method, apparatus, and article of manufacture for dynamically extending the properties of a software object and the ability to manipulate such properties through a user interface control.","2. Description of the Related Art","Software objects are frequently used by applications to represent collections of properties that can be modified by the user. For example, in a drawing application, a software object may be a circle having a radius, color, etc. Normally, the collection of properties of the object is fixed. In other words, when an application defines the class for the object, the collection of properties is fixed at compile time.","The prior art may support the use of properties created at runtime (referred to as dynamic properties). Such dynamic properties are not stored with the object itself and when the application that defines the properties is unloaded, or terminated, the runtime properties may be discarded. Further, dynamic properties are on a class-wide or object wide basis and do not vary between objects of the same type. For example, the same dynamic properties would apply to each instance of an object and different instances cannot have different dynamic properties. However, it may be desirable to vary dynamic object properties on a per-instance basis such that different object instances of the same type have a different collection of properties.","An example of a dynamic property would be if an object in a drawing program is a circle. An application may desire to dynamically extend the properties of the circle object such that the circle object represents a manhole cover having a manufacturer and weight property. The prior art would permit all circle objects to be dynamically extended such that each circle object instance represents a manhole cover with these properties. Also suppose that another application desires to dynamically extend the circle object such that the circle object represents a round table having a height and a number of table extensions. The prior art would not permit both the first application and second application to extend different instances of the same circle object such that one instance represents a manhole cover and the other instance represents a round table (i.e., with the different instances having different properties). Thus, it would be desirable to allow dynamic properties on a per-instance basis.","In addition to the above, applications typically present the properties of one or more objects to the user in a graphical user interface. Such a graphical user interface may consist of a window or dialog box. Each dialog box is usually implemented to display the properties of just a few kinds of objects, with dialog controls (buttons, text fields, etc.) specific to the kind of data those objects contain. In this regard, a user interface may base the dialog control that is used on the type of object. For example, a boolean property may be displayed using a radio button dialog control, and a numerical value may be displayed using a text entry box dialog control.","In certain circumstances, the default selection of a dialog control may not be the most desirable or appropriate control to use to display the property. For example, a property may be a temperature value with a double precision number. The prior art would likely provide a default text field for adjusting the temperature value. However, it may be more desirable to use a slider to adjust the value of the temperature where the slider has minimum and maximum values. Accordingly, it would be desirable to allow an object to specify the dialog control that is used to display a particular property of the object.","Software objects are frequently used by applications to represent collections of properties which can be modified by a user. Normally the collection of properties of the object is fixed and does not vary between objects of the same type. Further, applications typically present the properties of one or more objects to the user in a dialog box that displays just a few kinds of objects with dialog controls specific to the kind of data those objects contain.","One or more embodiments of the invention provide a mechanism whereby the collection of properties for an object is dynamically extended on a per-instance basis. The mechanism consists of a dynamically extensible set of one or more \u201cproperty source\u201d objects, user interface components, and the object. When composing the user interface to display the properties, the user interface components call methods on the property source objects and pass the source objects a reference to the object about to be edited. The source objects dynamically generate zero or more additional properties and return them to the user interface components, which then display the complete collection of properties to the user for editing.","Additionally, objects may provide their own user interface controls for individual properties of an object. These user interface controls are then collectively displayed on a single dialog box by the application.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Hardware Environment",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","102","104","106","102","104","106","104","106","118"]},"A network  such as the Internet connects clients  to server computers . Additionally, network  may utilize radio frequency (RF) to connect and provide the communication between clients  and servers . Clients  may execute a client application\/graphics program\/Web browser  and communicate with server computers  executing Web servers . When client application is a Web browser , it is typically a program such as NETSCAPE NAVIGATOR\u2122 or MICROSOFT INTERNET EXPLORER\u2122. Further, the software executing on clients  may be downloaded from server computer  to client computers  and installed as a plug in or ActiveX control of a Web browser or graphics program . Accordingly, clients  may utilize ActiveX components\/component object model (COM) or distributed COM (DCOM) components to provide a user interface on a display of client . The Web server  is typically a program such as Microsoft's Internet Information Server.","Web server  may host an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application , which may be executing scripts. The scripts invoke objects that execute business logic (referred to as business objects). The business objects then manipulate data in database  through a database management system (DBMS) . Alternatively, database  may be part of or connected directly to client  instead of communicating\/obtaining the information from database  across network . When a developer encapsulates the business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on web server  (and\/or application ) invoke COM objects that implement the business logic. Further, server  may utilize Microsoft's Transaction Server (MTS) to access required data stored in database  via an interface such as ADO (Active Data Objects), OLE DB (Object Linking and Embedding DataBase), or ODBC (Open DataBase Connectivity).","Generally, these components - all comprise logic and\/or data that is embodied in or retrievable from device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer via a network or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Thus, embodiments of the invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass logic and\/or data accessible from any computer-readable device, carrier, or media.","Those skilled in the art will recognize many modifications may be made to this exemplary environment without departing from the scope of the present invention. For example, those skilled in the art will recognize that any combination of the above components, or any number of different components, including different logic, data, different peripherals, and different devices, may be used to implement the present invention, so long as similar functions are performed thereby.","Computer-Implemented Graphics Program",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["108","108","200","202","204","206"]},"The Graphical User Interface  displays information to the operator and provides the functionality for the operator's interaction with the graphics program .","The Image Engine  processes the DWG files  and delivers the resulting graphics to the monitor  for display. In one or more embodiments, the Image Engine  provides a complete application programming interface (API) that allows other computer programs to interface to the graphics program  as needed.","The Database  is comprised of two separate types of databases: (1) a 3D database  known as the \u201c3D world space\u201d that stores 3D information; and (2) one or more 2D databases  known as the \u201c2D view ports\u201d that stores 2D information derived from the 3D information.","Object List","In object oriented programming, classes define properties and methods\/functions that manipulate those properties. A particular instance of a class is referred to as an object (or object-oriented object). When an instance of a class is created (i.e., at run-time), initial values for the various properties may be assigned. In graphics programs , objects may be of various types having multiple properties. Such objects may represent shapes or other items of interest.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["300","208","300","302","304","306","300","208","304","300","208"]},"Per-Instance Dynamic Extension of Property Sets","One or more embodiments of the invention provide a mechanism whereby the collection of properties for an object is dynamically extended on a per-instance basis. The mechanism consists of a dynamically extensible set of one or more \u201cproperty source\u201d or \u201cproperty factory\u201d objects, user interface components (e.g., a dialog control), and an object. When composing the user interface to display the properties of an object, the interface components call methods on a property source\/factory and pass a reference to the object about to be edited. The property source\/factory dynamically generates zero or more additional properties and returns these properties to the interface components. The interface components may then display the complete collection of properties to the user for editing.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 4","FIG. 4"],"b":["402","404"]},"To create per-instance dynamic properties (i.e., for one or more instances of the objects ), the application  utilizes a property source . In this regard, the application  may implement a property source interface to provide the per-instance dynamic properties for each object instance. Applications  may typically implement the property source interface on one or more COM objects . Once the property source instances  and object classes  have been created, the various object classes  and source instances  may be stored in an application framework.","Once the property source  and objects  have been created, an association between the property sources  and the object class  must be formed. In general, the association is entirely up to the host  of the inspector . The host  may determine, for example, that sources  are associated with objects  on an instance-by-instance basis through some application-defined mapping. Alternatively, the host  may determine that sources  are associated with objects  on an instance-by-class basis (i.e., property source instances  are associated with an object class  definition). Both the kind of relationship, and the actual relationships, are arbitrary but deterministic and are defined by the application  providing the sources .","For example, the relationship may be between an object class  and property source instances . Alternatively, application  may create a mapping or association  between an object instance and one or more property source instances . An example of one such type of association is a global listing or mapping  that is available to various applications.","To display the various object properties, whether static, dynamic, and\/or per-instance dynamic properties, an ActiveX control may be used. As described above, an ActiveX control is a software module that is based on the COM architecture. An ActiveX control may enable a program to add functionality by calling ready-made components that blend in and appear as normal parts of the program. In one or more embodiments, an ActiveX control referred to as a property inspector  is responsible for querying instances of objects  or other property sources  for property type information. Since the properties are displayed at run-time, and it is desirable to have per-instance dynamic properties, the property inspector  may need a mapping or listing of object instances to property source instance .","Once instances of objects  and property sources  have been queried, the property inspector  builds, displays, and manages a grid containing the properties it discovers. Thus, the property inspector  maintains a properties collection that consists of an internal representation of properties to be displayed. The property collection includes property type and value information, property category information, etc.","The property inspector operates on a COM level rather than at the drawing program level. Accordingly, the property inspector  is able to manage properties of any COM object  that implements its interfaces. In this regard, the ability to manage COM object  properties may extend to COM objects  that do not represent drawing program objects.","As with all ActiveX controls, a program or container  must host the property inspector . An example of a host program  in a drawing program environment is a properties palette application dialog. The properties palette dialog provides a single user interface for editing all types of drawing objects . However, to display an object's  unique properties (e.g., dynamic and per-instance dynamic properties), the properties palette or other host application  must implement the appropriate COM interfaces (i.e., the property inspector ).","The property inspector host  may push a collection of objects  onto the property inspector  for display. Thus, the property inspector host  first obtains the relevant object  information. For example, the object  information or a pointer to the various object classes  may be obtained. Thereafter, the property inspector host  uses the object  information to identify the relevant property source instances  associated with each object class . In this regard, the property inspector host  may query the global map or association to determine which property source instances  are associated with each object class . The list of object classes  and property source instances  may then be passed to the property inspector  for processing.","As described above, given a list of relevant object classes , the property inspector  is responsible for determining and creating a properties collection of the properties to be displayed for one or more instances of the object. The static properties (i.e., those properties that were created at compile time for the various objects ) may first be determined. To obtain the static properties, the property inspector  uses the list (that may contain object class  pointers) provided (by the host ) to query individual objects  (i.e., run-time instances of the objects ) for property type information. To determine the standard or static properties, the property inspector  may access a type library  (i.e., using the type information obtained from the object instances). As illustrated, the property inspector  may pass the type information to the type library to determine the standard properties. The standard\/static properties are then added to the properties collection maintained by the property inspector .","The property inspector  then retrieves the dynamic per-instance properties from the property source instances . In one or more embodiments, to retrieve such dynamic per-instance properties, the inspector  may pass a reference of an object class  (associated with the property source ) to the property source . The property source  can look up the reference and return one or more dynamic properties if a record with the reference is found. The per-instance dynamic properties can then be added to the properties collection. The property inspector  displays the properties collection using the appropriate or designated user interfaces (see further description below regarding user interfaces).","As described above, in general, the association between an object  and property source instances  are entirely up to the host. Further, the kind of relationship  and actual relationship may be defined by the application  providing the source . A more specific example of the association  is the association  utilized in a drawing program such as AutoCAD\u2122. In such an implementation, the association  is a particular kind of map  that associates object classes  with property source instances . However, as indicated above, since the properties are per-instance dynamic properties, the inspector  may need an association between object instances  and source instances  to create per-instance dynamic properties for the run-time objects . Accordingly, a host  (such a property palette dialog) may build the instance relationship  by determining the class of each object  selected and looking up the associated property source  in a class->source map . In this way, a single source  may be associated with several objects  in the selection.","For example, suppose a manhole application is written on top of a drawing program that extends certain kinds of circle objects  to have a weight property. The manhole application  maintains, through its own data structures and user interface, a map of object IDs to manhole weights (every object  such as circle objects have unique IDs). The manhole application  implements a property source  for manholes. The implementation of this source  looks up IDs of objects  passed to it in the ID->weight map, and returns a dynamic property for each matching record. The application  instantiates an instance of the property source  and associates it with the drawing program's circle class  (i.e., in the global map ).","When a user picks a circle in the drawing program, the property palette dialog (host ) looks up the object  in the class->source map  and finds the application's source . This source  is passed to the property inspector  for every circle object  selected. The inspector  discovers the static circle properties through the type interface  (e.g., radius, color, etc.). To discover the per-instance properties, the inspector  passes a reference to the circle object  to the property source , which looks up the circle's ID and returns a dynamic property for the circle's weight if a record with that ID was found.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIGS. 5A and 5B","b":["500","404","502","406","404","406","404","504","404","406","406"]},"At step , a determination is made regarding whether an instance of the object  has been selected (e.g., for editing by a user). For example, a user may select a graphical object displayed in a drawing program with a desire to move or edit properties of the object instance. Once an object instance has been selected, the process may proceed to step .","At step , an ActiveX control host  (e.g., the property inspector host) retrieves object instance information (such as a pointer to the object instance) from the object instance . The host  then uses the object instance information to access the association\/global map  and retrieve property source instance information at step . For example, the class of the object instance may be determined and examined in the global map\/association .","At step , the host  passes the collected information to the ActiveX control  (e.g., the property inspector). The ActiveX control  is responsible for creating a list or collection of properties to be displayed. Accordingly, the control  may gather the type information from the objects  (by examining the object's  class definition) and use the type information to obtain the standard\/static properties from a type library\/interface  at step .","At step , the control  retrieves the per-instance dynamic properties from the property source instances . To retrieve such information, the appropriate property sources  (as identified by the host  and passed to the inspector ) may be forwarded a reference to an object  to the property source instance . The property source instance  (that may also be referred to as a property factory) may examine the reference and dynamically generates zero or more additional per-instance dynamic properties and returns the properties to the control  (e.g., if a record with the reference is found). The control  then builds the collection of properties at step . Thereafter, the collection of properties may be displayed at step .","Custom Graphical User Interfaces","In the prior art, a dialog box, created by the property inspector , is used to display a properties and property values of an object . However, the dialog box is limited to displaying the properties of just a few kinds of objects , with dialog controls specific to the kind of data those objects  contain. Further, the user interface used within the dialog box (to display the property and value) is often predetermined and static. In this regard, the user may not be permitted to specify or create a user interface that should be used to display the property and value. One or more embodiments of the invention provide the capability to specify and use a custom user interface.","The property inspector control  is responsible for displaying the various properties in a graphical user interface. One or more embodiments of the invention allow objects  to provide their own user interface controls (to the control ) for individual properties of the object  to be displayed. These interface controls may then be collectively displayed on a single dialog box by the control . More specifically, the invention provides an application \u201cpush\u201d model, rather than a dialog \u201cpull\u201d model, allowing an application or application object the ability to refresh single properties in real time by communicating with a single control.","The invention also provides one dialog box to display (or \u201cbrowse\u201d) the properties of many object types, regardless of the number of kinds of properties exposed by those objects. An object may provide a user interface control for manipulating each property it exposes.","As described above with respect to , property inspector host  may be a property palette application\/control. The properties palette is a feature that lets users view and modify the properties of all types of entities\/objects in a single dialog box. For instance, a user can select a line and a circle and see the properties of either one\u2014endpoints, center point, radius, thickness, linetype, color, etc. displayed in the same modeless user interface. Changeable properties can be edited through this interface, with the changes reflected immediately in the displayed graphics.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 6","FIG. 4"],"b":["410","404","410","404","602","404"]},"From the interrogation, the inspector  discovers the object's properties (e.g., using the type library as illustrated in ) and constructs a grid of property editing controls  (i.e., a grid of the user interfaces\/editor controls  to be used to display and modify an object's properties). Each property may have a property editor control  instance that is used to display and modify the property. Thus, the object  \u201cidentifies\u201d edit control classes that the inspector  should instantiate for representing properties. The \u201cidentified\u201d edit controls may be custom controls that an application has provided specifically for that purpose.","The property inspector  hosts the property editor controls  used to display, acquire, and modify the object's properties. The property editing controls  are responsible for displaying the property data\/values and allowing the user to modify the property data. If the user triggers an input event within a property editor control , the control  notifies the property inspector  so that the user interface\/appearance can be updated. Further, the property editor control  may communicate directly with the objects  to get and set the property's value.","As used herein, the property editor controls  may expose themselves as instantiable ActiveX controls. These controls  expose methods or properties for customizing their appearance. In addition, the property editor controls  may modify the property or object directly using COM calls to set new values on the object or property. To create the ActiveX property editor controls , the property inspector  or another control hosted by the property inspector (referred to as a property palette list control) may instantiate the property editor controls  (i.e., once informed which editor control  to use by the object ). Thus, the inspector  may act as a host for ActiveX controls  to edit and display object properties. If a property provides a custom ActiveX control, the inspector  instantiates and hosts it. If a property does not provide a custom control, then the inspector  may instantiate a stock control when the property is edited.","Thus, as illustrated in , the property inspector  is responsible for discovering properties, displaying property lists and hosting property editor controls . The property editor controls  are responsible for getting and setting property values for objects , providing custom property displays and communicating with the host\/property inspector .","The custom graphical user interface capability may be enabled through the use of an application programming interface. Such an API may allow the property inspector  the ability to customize the appearance of the property in the user interface dialog box on a per-property basis. For example, the use of an interface may provide the ability to adjust the label font and color, label icons, and other label properties. Further, such an API may allow each property to specify its own proper editor control  by returning an instance of an ActiveX control to the inspector . Such an interface may also expose methods to indicate that a property should be represented as a command button in the dialog box.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 7","FIG. 7"],"b":["602","602","602","702","602"]},"The list control  hosted by the property inspector  is responsible for displaying the properties of one or more objets. If no custom property editor control  has been provided for the property, the list control  instantiates stock property editor controls as needed when the user clicks on a property to change the property value.","In view of the above, an example of a custom control  may better aid in understanding the invention. Assuming a circle object is the object selected for editing. In such an example, the circle object may have three properties, a color, center point and radius. If the circle object did not specify custom editor controls  for editing the properties, stock editor controls may be used to display the graphical user interface. For example, the color field may be displayed using a text field to enter in the color. Similarly, a text string may be used to enter the x,y coordinates for the center point, and a text string may also be used to enter the radius value. However, the circle object may also specify custom editor controls . Such a custom editor control  may provide for using a combo-box where the user can select a color to be used. Further, a button may be displayed that allows the user to actually click or select the center point in the graphical display of the object. Additionally, a slide bar may be used to select\/alter the radius information. Accordingly, custom user interfaces may provide significant flexibility to an application and an object.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 8","b":["802","404","404","602","602","410"]},"At step , a list of the one or more object properties to be displayed is created (e.g., by the property inspector  creating a properties collection). The list of properties includes the property having a custom ActiveX control . At step , the ActiveX control\/editor control  is instantiated (e.g., by the property inspector ). As described above, one or more stock ActiveX control that define additional user interfaces for displaying and editing properties in the object list (that don't have an associated custom editor control  that was specified by the object ), may be instantiated.","At step , the controls  are used to display the object properties in the list. In this regard, the custom user interface (created by the specified ActiveX control\/editor control ) is used to display its associated property. Such a user interface may be part of a single dialog box that is used to display multiple properties of different types. Further, the custom user interface may be used to edit the property (which is then set in the object ).","This concludes the description of the one or more embodiments of the invention. The following describes some alternative embodiments for accomplishing the present invention. For example, any type of computer, such as a mainframe, minicomputer, or personal computer, or computer configuration, such as a timesharing mainframe, local area network, or standalone personal computer, could be used with the present invention. In summary, embodiments of the invention provide a method for displaying per-instance dynamic properties of an object and the ability to specify a custom user interface for displaying a property on a per-property basis.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
