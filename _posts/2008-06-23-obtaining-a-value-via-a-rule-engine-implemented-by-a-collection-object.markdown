---
title: Obtaining a value via a rule engine implemented by a collection object
abstract: A system and computer program product for obtaining a value via a rule engine implemented by a collection object associated with an object-oriented application. A request for the value includes a key, is received from the application, and is directed to a method of the collection object. The collection object is capable of storing the key and associated data, and providing the data in response to receiving the request. An overriding of the method of the collection object replaces the provision of the data by the collection object with a processing of the request by a rule engine external to the application. The rule is identified in a rule definition file external to the application based on an association between the rule and the key. An algorithm associated with the rule and included in the rule definition file is executed to provide the requested value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08073796&OS=08073796&RS=08073796
owner: International Business Machines Corporation
number: 08073796
owner_city: Armonk
owner_country: US
publication_date: 20080623
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation application claiming priority to Ser. No. 11\/329,687, filed Jan. 10, 2006, now U.S. Pat. No. 7,454,392, issued Nov. 18, 2008.","1. Technical Field","The present invention relates to a technique for obtaining a value via a rule engine, and more particularly to a technique for obtaining a value via an external rule engine implemented by a collection object in an object-oriented application.","2. Related Art","Conventionally, an object-oriented application that utilizes rules to obtain values includes rule definitions within the code of the application and\/or is customized to interact with a specific external rule engine. The inclusion of rule definitions within the code and the customization of the application to work with the particular rule engine create obstacles for maintaining the application and updating the rule definitions. Thus, there is a need for an improved technique for obtaining a value by utilizing a rule engine in an object-oriented application.","In first embodiments, the present invention provides a method of obtaining a value via a rule engine implemented by a collection object in an object-oriented application, the method comprising:\n\n","In second embodiments, the present invention provides a system for obtaining a value via a rule engine implemented by a collection object in an object-oriented application, the system comprising:\n\n","In third embodiments, the present invention provides a computer program product comprising a computer-usable medium including computer-usable program code for obtaining a value via a rule engine implemented by a collection object in an object-oriented application, the computer program product including:\n\n","In fourth embodiments, the present invention provides a method for deploying computing infrastructure, comprising integrating computer-readable code into a computing system, wherein the code in combination with the computing system is capable of performing a process of obtaining a value via a rule engine implemented by a collection object in an object-oriented application, the process comprising:\n\n","Advantageously, the present invention externalizes business rules relative to an object-oriented application, making it easier for the business rules to be updated without modifying the code of the application. Further, the application leverages an existing interface (i.e., a collection object) to seamlessly implement an external rule engine without the application being aware of the rule engine. The application does not need to be designed with customized coding to interact with the rule engine, and no proprietary interface is required between the application and the rule engine.",{"@attributes":{"id":"p-0015","num":"0030"},"figref":"FIG. 1","b":["100","102","104","102","106","106","108","102","106"]},"Object-oriented application  includes a request  that requests retrieval of a value. Request  includes a key name (a.k.a. key, which is not shown in ). Collection object  includes a method  that is overridden so that request  is processed by rule engine , as described below relative to . Collection object  is, for example, a Java\u00ae map interface that is capable of storing (key, value) pairs (e.g., a hashmap). Rule engine  evaluates algorithms in rule definition file , which includes rules -and and algorithms -and . Rules -through -are associated with algorithms -through -in a one-to-one correspondence.","Request  invokes a method of collection object  (e.g., a Java\u00ae Get method) to request that collection object  retrieve the stored value associated with the key included in the request. The present invention overrides the value retrieval mechanism of the collection object, and instead provides retrieval of a value via rule engine  and rule definition file . One of the rules  is selected by the key of request , and the algorithm  associated with the selected rule is processed by rule engine  to provide the requested value. The details of this value retrieval are described below relative to .",{"@attributes":{"id":"p-0018","num":"0033"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["200","202","110","102","112","104","112","104"]},"The request of step  is included, for example, in a Java\u00ae Application Programming Interface (API). The following code is one example of a Java\u00ae API implementing step , and requests a ship-to location. The request includes the key of \u201cship-to\u201d and is requesting the value (i.e., ship-to location) associated with the key. The request is directed to the Java\u00ae map interface, but the value returned will be based on an execution of an algorithm associated with a rule defined in an external rule definition file (e.g., XML file), as described below.",{"@attributes":{"id":"p-0020","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Map ruleMap = (Map) ruleXML.getMap( );"]},{"entry":[{},"String shippingLocation = ruleMap.get(\u201cship-to\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Although collection object  (see ) is capable of storing the key included in the request along with associated data, and is capable of providing the stored data in response to a request that includes the key, the request of step  is instead processed by rule engine  (see ) in step . That is, code residing in collection object  (see ) overrides method  (see ) to invoke rule engine  (see ) to process request  (see ). The overriding of method  (see ) is a capability of the object-oriented environment in which object-oriented application  is executed and collection object  is invoked. For example, a Java\u00ae environment provides a built-in feature that allows a method to be overridden.","The aforementioned overriding of the method allows application  (see ) to include code (e.g., the request of step ) designed to interact with a standard, built-in interface (e.g., the Java\u00ae map) internal to application  (see ), and which actually interacts with rule engine  (see ) that is external to application  (see ). In this way, the Java\u00ae map acts like a facade that places the operation of rule engine  (see ) behind-the-scenes. Further, the processing of the request of step  is performed without requiring a proprietary interface between application  (see ) and rule engine  (see ) and without requiring that the code of application  (see ) be customized to interact with rule engine  (see ).","An example of Java\u00ae code that resides in collection object  and overrides the get method of the Java\u00ae map interface to invoke the rule engine of step  is shown below.",{"@attributes":{"id":"p-0024","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public synchronized Object get(Object id) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object object = null;"]},{"entry":[{},"object = ruleEngineAdapter.get(id) ;"]},{"entry":[{},"return (object);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In step , the processing of the request in step  identifies a rule in rule definition file  (see ), which is external to object-oriented application  (see ). The identification of the rule is based on the rule being associated with the key included in the request of step . Rule definition file  (see ) includes one or more rules  (see ) and one or more algorithms  (see ) in a one-to-one correspondence. The algorithms are interpreted and processed by rule engine  (see ). In one embodiment, the interpretation and processing of an algorithm by the rule engine includes evaluating a plurality of procedural steps.","One example of rule definition file  (see ) is an XML file, such as the one shown below.",{"@attributes":{"id":"p-0027","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<action name=\u201dship-to\u201d value=\u201dNew York\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<condition if=\u201d${today == \u2018Monday\u2019}\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/action>"]},{"entry":[{},"<action name=\u201dship-to\u201d value=\u201dBoston\u201d\/>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In step , an algorithm included in rule definition file  (see ), which associates the algorithm with the rule identified in step , is interpreted and processed by rule engine  (see ). The processing of the algorithm in step  executes the algorithm, which provides the value requested in step . For instance, the XML rule definition file shown above determines a ship-to location based on the execution of an algorithm that includes the evaluation of a condition related to the value of \u201ctoday.\u201d If rule engine  (see ) determines that the value of \u201ctoday\u201d in the XML file is \u201cMonday,\u201d then the rule engine returns a ship-to value of \u201cNew York.\u201d For any other day of the week, the rule engine returns a default ship-to value of \u201cBoston.\u201d","Unlike the conventional static (key, value) pairs provided by a Java\u00ae map interface, rule definition file  (see ) includes algorithms that are executed by rule engine  (see ) to provide values. The algorithms included in rule definition file  (see ) are not static. An algorithm in rule definition file  (see ) can be dynamically updated, and the process of  can be applied to the updated algorithm to provide a value from the execution of the algorithm without requiring any change to application  (see ). For example, a request identical to the one used in step  can be utilized to obtain another value based on the execution of the updated algorithm.","In an alternate embodiment, rule definition file  includes one or more algorithms that can be dynamically changed, and one or more pre-defined, static values. The static values are associated with rules included in the rule definition file in a one-to-one correspondence. When a key associated with a static value is included in request  (see ), the static value is returned without any evaluation being required.",{"@attributes":{"id":"p-0031","num":"0046"},"figref":["FIG. 3","FIG. 2","FIG. 1"],"b":["300","302","304","306","308","310","312","302","300","302","304","302","304","304","312","108"]},"I\/O interface  comprises any system for exchanging information to or from an external source. I\/O devices  comprise any known type of external device, including a display monitor, keyboard, pointing device, printer, speakers, handheld device, printer, facsimile, etc. Bus  provides a communication link between each of the components in computing unit , and may comprise any type of transmission link, including electrical, optical, wireless, etc.","I\/O interface  also allows computing unit  to store and retrieve information (e.g., program instructions or data) from an auxiliary storage device, such as a non-volatile storage device (e.g., a CD-ROM drive which receives a CD-ROM disk) (not shown). Computing unit  can store and retrieve information from other auxiliary storage devices (not shown), which can include a direct access storage device (DASD) (e.g., hard disk or floppy diskette), a magneto-optical disk drive, a tape drive, or a wireless communication device.","Computing unit  is, for instance, a personal computer, laptop computer, handheld device, mobile phone, etc.","Memory  includes computer program code comprising an object-oriented application  that runs, for example, on the Java\u00ae 2 Platform, and a rule engine  that interprets and processes algorithms included in rule definition file  (see ). Further, memory  may include other systems not shown in , such as an operating system (e.g., Linux) that runs on CPU  and provides control of various components within and\/or connected to computing unit .","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code ,  (see ) for use by or in connection with a computer  (see ) or any instruction execution system to provide and facilitate the capabilities of the present invention. For the purposes of this description, a computer-usable or computer-readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, RAM  (see ), ROM, a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read-only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","A data processing system  (see ) suitable for storing and\/or executing program code ,  (see ) will include at least one processor  (see ) coupled directly or indirectly to memory elements  (see ) through a system bus  (see ). The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Network adapters may also be coupled to system  (see ) to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","Furthermore, the present invention discloses a method for deploying or integrating computing infrastructure, comprising integrating computer-readable code into computer system  (see ), wherein the code in combination with computer system  (see ) is capable of performing a process of obtaining a value via a rule engine implemented by a collection object. The disclosed method for deploying or integrating computing infrastructure with the capabilities described herein can be offered as a service on a subscription service.","The flow diagrams depicted herein are provided by way of example. There may be variations to these diagrams or the steps (or operations) described herein without departing from the spirit of the invention. For instance, in certain cases, the steps may be performed in differing order, or steps may be added, deleted or modified. All of these variations are considered a part of the present invention as recited in the appended claims.","While embodiments of the present invention have been described herein for purposes of illustration, many modifications and changes will become apparent to those skilled in the art. Accordingly, the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0028"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0029"},"figref":["FIG. 3","FIG. 2"]}]},"DETDESC":[{},{}]}
