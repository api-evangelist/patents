---
title: Media service and method for delivery of stored media
abstract: A system includes an application programming interface (API) configured to process a transaction request that specifies data content located at a storage medium. A request processor associated with the API can be configured to determine a delivery format for the data content in response to the transaction request. A file converter can be configured to transform the data content into the delivery format in accordance with the transaction request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09124671&OS=09124671&RS=09124671
owner: Imagine Communicaions Corp.
number: 09124671
owner_city: Frisco
owner_country: US
publication_date: 20111207
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates to a media service and method for delivery of stored media.","Current data storage systems such as large, cloud-based systems, are oriented for exact data storage requirements where data must be stored in exactly the format it is received. In one example, a large collection of servers forming a cloud may store data for subscribers where data is stored for each subscriber in the format in which the data is received. In another example, media files such as audio or video files may need to be stored redundantly in various compression formats in order that the subscriber can retrieve such files from the cloud in a format and quality for a given application. Not only are subscribers often confused about which formats to store and which formats provide the desired quality such as playback resolution, but storing files in this manner (e.g., redundantly) raises the requirements for more storage capability than may otherwise be necessary.","A media service and method for delivery of stored media are disclosed. In one example, a system includes an application programming interface (API) configured to process a transaction request that specifies media data content located at a storage medium. A request processor associated with the API can be configured to determine a delivery format for the media data content in response to the transaction request. A file converter can be configured to transform the media data content into the delivery format in accordance with the transaction request.","In another example, a method includes receiving a transaction request for a media data file stored on a storage medium. This includes determining a delivery format for the media data file in response to the transaction request. The method also includes outputting the media data file in the delivery format compatible with the transaction request.","In yet another example, a system includes an input application programming interface (API) configured to transcode a media data file into a storage format that mitigates storage requirements of a storage medium. The system includes a transaction application programming interface (API) configured to process a transaction request for the media data file from the storage medium. A file converter associated with the transaction API can be configured to translate the media data file into a format that is compatible with the transaction request.","This disclosure relates to a media service and method for delivery of stored media. The media service and method can implement in a virtualized storage environment and delivering the data according to various formats upon request. According to one example, media data such as audio or video files can be stored in a format that mitigates storage requirements of a storage medium, such as transcoding and\/or transrating the data according to a plurality of available compression formats. Files can be stored in a single storage format. After storing the data, subscribers can retrieve the data upon request. Such request can specify the format requirements for retrieving the media data or a profile for the requestor can specify how the media data should be delivered. By formatting the media data based on the subscribers request and upon demand, the subscriber is relieved from having to determine complex requirements to originally store the media data while storage capabilities of the medium can be improved since files can be stored more efficiently according to the common storage formats.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","110","120","130","110","136","134","120","134","130","130","134","130"]},"A request processor  in the media service  can be configured to determine a delivery format for the media data content  stored at the storage medium  and in response to the transaction request . A file converter  can be configured to transform the media data content  from the storage format of the storage medium  into the delivery format in accordance with the transaction request at , wherein the media data content is delivered in a desired format and\/or other specifications as described below. The media service  can output multiple different versions of the media content, each having a respective delivery format for a given request, which can be provided in a single output file or in individual respective files.","The delivery format can be substantially any format that is appropriate for fulfilling the transaction request . For example, if the storage format were in an MPEG 4 format and 1080i resolution, the delivery format could be into an MOV format and 720p resolution (e.g., via transcoding and transrating functions of the converter ). As mentioned above, the delivery format can include a plurality of differing formats that are translated from the storage format of the storage medium  based on the transaction request . It is noted that the transaction request  (or associated request profile described below) does not supply a copy or version of the media data content . The transaction request  (or profile) merely specifies the desired media and possibly the delivery format which is generated on demand by the file converter .","In one example, the delivery format for the media data content  and delivered at  by the file converter  can be specified in the transaction request . In another example, the delivery format can be specified in a subscriber profile (not shown) associated with the transaction request . For example, the subscriber profile could be stored in a memory associated with the storage medium  and processed when the transaction request  is received. After such processing of the subscriber profile, the request processor  can determine the desired delivery format as disclosed herein. In still yet another example, the delivery format can be specified in part in the transaction request  and in part by the subscriber profile associated with the transaction request. In other words, both the transaction request  and the subscriber profile may cooperate to specify and control the resulting delivery format how the media data content  should be supplied at .","By way of example, specific media data content  (e.g., audio file, video file, and so forth) is stored in the storage medium in one format only for delivery of broadcast quality media content for any given media asset. For example, rather than storing multiple copies having differing storage formats, a single file is stored according to a single storage format (e.g., high quality storage format and\/or compressed storage format). Additionally, proxies can be associated with each asset in the storage medium  to provide low resolution versions of media content, such as can be retrieved for use by digital asset management tools, scheduling system or other system where a user may only need to inspect titles, make offline editing decisions or perform offline editing of available content, for example, without accessing a full, broadcast quality version. When media data content  (e.g., a media asset) is requested from media service , a predefined profile can be employed to process a given request for the media content, such as to control transformation of the media content to the delivery format (e.g., it can be transcoded and wrapped to match the requestor's requirements). This mitigates the need of saving media in a plurality of differing formats in the storage medium  (or cloud described below) and consequently lowers cost by reducing storage and bandwidth requirements. To the subscriber or user of the media service  via the API , it appears that each media asset requested is available in whatever delivery format or delivery formats they require since the file converter  seamlessly transforms the media data content  from the storage format to each delivery format on demand at .","In another example, the transaction request  can include a playlist. The playlist can include an identification of one or more media assets as well as corresponding timing requirements for the delivery format of the requested media assets. Substantially any type of requirement can be specified, such as a length for each segment data clip to send, how many segments to concatenate, and the number and length of blank spaces to be inserted between specified segments of content. In other examples, the playlist can specify a programming segment, a segment of media data content  to be removed, a bar, leader, or header to be added to the media data content, a black space insert into the media data content, a break in the media data content, a calendar or time insert into the media data content, or a data spot insert into the media data content. In this manner, the delivery format for a playlist can include a broadcast-ready (or near broadcast-ready) version of one or more media assets. A playlist example format is disclosed herein with respect to .","The transaction request  can also specify that the media data content  is to be delivered in view of metadata specifications that are stored in the storage medium associated with corresponding media data content . For instance, when the media data content  is stored at the storage medium , an associated metadata file can also be stored along with the metadata specifications. The metadata specifications can be conditionally mapped to a target profile to satisfy the transaction request , wherein the conditional mapping includes processing the transaction request to determine which of the metadata specifications are to be fulfilled. In another example, the metadata specification can specify an extensible authentication protocol (EAP) for the media data content  (includes protected EAP or PEAP), a program and system information protocol (PSIP) for the media data content, or a temporal component for the media data content.","Generally, EAP is an authentication framework providing for the transport and usage of keying material and parameters generated by EAP methods. Thus, EAP is not a wire protocol. Instead, it defines message formats. Each protocol that uses EAP defines a manner in which to encapsulate EAP messages within that protocol's messages, for example. With respect to PSIP, this protocol is used in digital television systems for carrying metadata about each channel in the broadcast transport stream of a television station and for publishing information about television programs so that viewers can select what to watch by title and description. The PSIP can define virtual channels and content ratings, as well as electronic program guides with titles and (optionally) descriptions to be decoded and displayed. Such EAP and PSIP protocols can be specified in the transaction request  and\/or in the subscriber profile to control how the file converter  combines corresponding metadata with the media data content  and how such combined content is formatted and delivered at  in response to given request.","Additionally or alternatively, the media service  can provide transaction-based billing for retrieval of the media data content  based on a size of the media data content and profile requested and\/or based on processing required to place the media content into the expected delivery format. Alternatively, the media service  can provide a storage-based billing for the media data content  based on the size of the media data content stored in the medium  or type of the media data content requested. Billing can be electronically generated per transaction or generated periodically after a number of transactions have occurred, for example. The file converter  can be configured to transform the stored media data content into the desired delivery format in response to the transaction request. This transforming of content can be performed on-the-fly as the media is being delivered. As used herein, the term on-the-fly relates to ongoing operations of a computer program such as performing transforming operations of the file converter  concurrently with other operations of the program (e.g., during background or foreground tasks). When used for encoded data storage, an on-the-fly data stream is automatically encode as it is written and decoded when read back again, transparently to the program, for example. All operations for the file converter  described herein can be performed on-the-fly.","On-the-fly transforming options for the file converter can include transcoding, resolution conversion (e.g., transrating), transwrapping, metadata conversion as well as other media transformations based on the transaction request . Transcoding is a process for converting the compressed essence type and can be considered the direct digital-to-digital data conversion of one encoding to another, such as for movie data files or audio files. Resolution conversion can involve changing an image size or aspect ratio in the media data content , for example. Transwrapping involves changing the file container type for transporting the media data content such as using a secure socket layer in one example or utilizing unsecured wrapper in another example. Metadata conversion can be performed on-the-fly along with transwrapping as the formatted data content is being delivered at  in response to the given request.","The file converter  can operate several processes including file-specific processes and essence-specific processes. File-specific processes include transwrapping to change file format (e.g., .MXF to .MOV) or essence wrapper (e.g., MPEG program, stream to MPEG elementary stream). This includes metadata conversion to change\/remap metadata and metadata creation\/conversion to timestamp, provide transaction id, generate an \u201ce-receipt,\u201d and so forth. Essence-specific processes include transrating to change bit-rates and transcoding to change compression standard. These processes can also include scaling to change image size, rate conversion to change frame rate (e.g., 30FPS to 25FPS), and watermarking to embed metadata (e.g., transaction, ownership information).","By way of further example, with respect to watermarking, such encoding can be performed dynamically (per transaction and on demand) and on-the-fly in response to a transaction request to embed authentication information into the delivery format payload (e.g., delivery file or metadata). Such embedded and\/or encoded information can be utilized to track if a given file that has been previously delivered has been generated by an approved or authorized source. In addition to watermarking information placed into a file or metadata, the authentication information can include time-stamping information, transaction-identifying information, program information, author information, producer information, tags, or other encoded data to identify the source of a file that has been delivered in response to a given transaction request. The authentication information that is dynamically inserted thus can be used to locate and fix media content that has been discovered to include errors as well as for other purposes.","The media service  can be offered as a large storage and delivery service such as can be provided by a storage media farm of servers configured collectively as including a storage cloud and associated cloud delivery applications. Cloud storage can be considered a model of networked online storage where data can be stored on virtualized pools of storage which are generally hosted by third parties. Hosting companies can operate large data centers where users or subscribers who require their data to be hosted buy or lease storage capacity and utilize it for their storage needs. Data center operators, operating in the background, can virtualize storage and delivery resources according to requirements of the subscriber and expose them as storage pools (e.g., via the API ), which the subscribers can themselves use to store and retrieve selected files or data objects. However, as disclosed herein, instead of storing plural versions of a given asset for delivery, the media service can store a single version that is used to fulfill delivery requirements for each request seamlessly to the requestor. Physically, resources can span across multiple servers. Cloud storage services may be accessed through a web service API such as the API  or the input API described below with respect to , or through a Web-based user interface, for example.","For purposes of simplification of explanation, in the present example, different components of the systems described herein are illustrated and described as performing different functions. However, one of ordinary skill in the art will understand and appreciate that the functions of the described components can be performed by different components, and the functionality of several components can be combined and executed on a single component or be further distributed across more components. The components can be implemented, for example, as computer executable instructions (e.g., software, firmware), hardware (e.g., CPU, an application specific integrated circuit), or as a combination of both. In other examples, the components could be distributed among remote devices across a network, for example.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1"],"b":["200","204","236","100","200","210","220","230","234","236","220","230","236","230","234","220","250","230","260"]},"The input applications programming interface (API)  can be configured to upload the media data content  to corresponding applications running in the media service . The input API  can receive a storage request and the data content to upload, collectively demonstrated at . A cloud processor  can convert the data content to be uploaded at  into a storage format of the storage medium  that mitigates storage requirements for the media data content. For instance, the conversion could include transcoding the input data content  being supplied into media data content  having a different storage format and desired resolution (e.g., a MPEG or MOV format) for storage in the storage medium , for example. For example, the cloud processor  can be configured to transcode the data content  from a content source into a single storage format compatible with the storage medium  and also stores a metadata file associated with the media data content. As one example, the cloud processor  can store the media content  at the storage medium  in accordance with a native storage format specified via the storage request.","As a further example, the media content  may be supplied in multiple storage formats, such as to support a plurality of predefined delivery formats or include a request to store the content in such multiple formats. In response to such request and multiple versions of a given media asset, the cloud processor  can still store the content  in the single (e.g., best available or native) format to reduce storage requirements as in situations where multiple versions of the asset would be stored. A proxy version of the asset can also be stored in the medium  for each media asset. The cloud processor  can store information identifying the desired delivery formats as part of profile information such can be associated with a transaction request for the stored content and\/or in a corresponding profile, as disclosed herein.","The following provides a brief description for an example process of storing and retrieving data content in the context of the system  of . Initially, a subscriber or user generates a client storage request to store (e.g., via XML request) one or more files via the input API . The storage request can include a user ID and the file as well as metadata associated with the media asset. Alternatively, the request can include data (a resource locator) identifying the location of the resource containing each file to be stored. The media upload of media data content  can begin. The cloud processor  can store the media asset in native file storage format or other storage format based on the request and information provided via the API. The cloud processor  allocates cloud storage and enables processing components (not shown) to be instantiated and to begin processing the storage request . This can include determining media format specifics and discovered based on file format, metadata parsers, and so forth, for example. The cloud processor  can populate a media asset management (MAM) database, for example, with updated media asset information based on the initial store request . This can also include a quality verification stage where media integrity and format can be verified, for example (e.g., minor errors, syntax repaired, and so forth). After the media upload has completed, a delivery receipt can be generated and transmitted back to the user or subscriber, such as can be provided via the input API  or other message delivery mechanisms (e.g., email, instant messaging).","When the user or subscriber desires to retrieve media data content , which has been stored in the media service , the transaction request  can be generated via the transaction API . Such transaction request  can also be specified in a common format, such as XML, for example. As one example, the request  can include a user ID along with other parameters such as a requested output resolution (e.g., scale), a requested codec (e.g., transcode), a requested delivery format (e.g., wrapper, .MFX, .AVI, and so forth), a requested metadata structure, a partial fulfillment (e.g., in-point and duration), and\/or content from multiple media file sources processed and conformed to a specified output delivery format (e.g., editing, BXF, edit decision list (EDL) based fulfillment). As another example, the other parameters for the delivery format can be specified in a profile, such as stored in the media service, which can be accessed in response to the request  to determine delivery format requirements.","After the request  has been received, further cloud processing at the storage medium  can include instantiating the cloud processor  to begin processing the request . This can include initiating a file or stream transfer to fulfill the request and generating delivery receipt to the user or subscriber system via the transaction API . This can also include updating the MAM database to show recipient and delivery fulfillment details. Such transactions can also be tied into automated billing and\/or invoicing systems for the media service , for example, which can be generated upon completion of the transaction request .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["300","310","300","300","310","300"]},"In one retrieval example at , the Roth Show can be retrieved upon request, delivered as a video on demand (VOD) replay, and transferred from the cloud  to the subscriber in a delivery format of 4 Mbs, H.264 Profile, that includes ACC audio. Such delivery formatting can be based on the transaction request to receive The Roth Show at  and\/or in a profile defining delivery requirements for the request and\/or the requestor. At , The Roth Show can also be delivered for a highlight reel application and is transferred from the cloud in a 50 Mbs I-frame profile utilizing Dolby E technology for audio. A plurality of various delivery formats can be provided from the cloud  in addition to or as alternatives to the examples shown at  and . Such delivery formats can be generated by the file converter described above and upon request and\/or profile specification. The multiple delivery fulfillments can be in response to a single request for the asset. Alternatively, each output of the asset can be provided individually in response to separate requests for the asset.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["400","400","402","404","404","1","2","400"]},"Each corresponding media asset retrieved in response to the playlist transaction request can further be transformed to the appropriate delivery format(s) such as disclosed herein. The request processing can also include content assembly and packaging  where the specified segments in the request playlist are combined into corresponding output delivery content. For example, the assembled media content can be delivered as an aggregate file for each playlist element or as continuous stream for delivery to a subscriber for playout in the delivery format such as shown a specific example beginning at . Alternatively, the cloud service can deliver each media content in the delivery format for each playlist element as separate files. Thus, the cloud service  can be programmed to instantiate functions and methods to perform pre-processing of media asset for fulfillment of the playlist transaction request.","In the illustrated example, the resulting delivery content for the playlist transaction request can include a bars\/tone segment at . A branded Roth Show bumper can also be delivered as part of the delivered content at  in response to the request. A first content segment of The Roth Show is delivered at . A dark or black segment can be delivered for two minutes at . Following segment , a second content segment for The Roth Show is delivered at . A bumper for a subsequent show is delivered at  followed by another two minute black period at . As can be appreciated, a plurality of playlists, playlist segments, and playlist configurations can be specified and delivered according to user specifications in the request to retrieve media files from the cloud  and\/or in profiles stored in the cloud service  that can also specify programming requirements. Moreover, each unit of content can include a respective delivery format, which can vary depending on the type of content. As disclosed herein, the delivery format can also vary based on the playlist transaction request, such as according to specified delivery instructions and\/or profile information that may be stored in the cloud .","In view of the foregoing structural and functional features described above, an example method will be better appreciated with reference to . While, for purposes of simplicity of explanation, the method is shown and described as executing serially, it is to be understood and appreciated that the method is not limited by the illustrated order, as parts of the method could occur in different orders and\/or concurrently from that shown and described herein. Such method can be executed by various components configured in an IC or a controller, for example.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 5","FIG. 1","FIG. 1","FIG. 1"],"b":["500","500","510","110","520","500","140","530","500","150","500","500"]},"What have been described above are examples. It is, of course, not possible to describe every conceivable combination of components or methodologies, but one of ordinary skill in the art will recognize that many further combinations and permutations are possible. Accordingly, the disclosure is intended to embrace all such alterations, modifications, and variations that fall within the scope of this application, including the appended claims. As used herein, the term \u201cincludes\u201d means includes but not limited to, the term \u201cincluding\u201d means including but not limited to. The term \u201cbased on\u201d means based at least in part on. Additionally, where the disclosure or claims recite \u201ca,\u201d \u201can,\u201d \u201ca first,\u201d or \u201canother\u201d element, or the equivalent thereof, it should be interpreted to include one or more than one such element, neither requiring nor excluding two or more such elements."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
