---
title: Method and system for test vector generation
abstract: The various embodiments of the present invention provide a method for automatically generating a unique set of test vectors for verifying design intent of integrated circuit chips. The method includes obtaining configuration parameters associated with a plurality of integrated circuit chips, generating an Executable Verification Plan pertaining to the configuration parameters of a plurality of integrated circuit chips in one or more execution PCs (EPs), creating a plurality of data structures corresponding to the configuration parameters, communicating the data structures created to a DCMS server, mapping the data structures of the Execution PCs with one or more data structures present in a database of the DCMS server, customizing the executable verification plan based on changes in the configurations of the integrated circuit chips, generating a unique set of test vectors based on mapping of the data structures and performing automatic design verification of the plurality of integrated circuit chips.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661305&OS=08661305&RS=08661305
owner: 
number: 08661305
owner_city: 
owner_country: 
publication_date: 20110710
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["The present application claims priority to provisional application Ser. No. 85\/CHE\/2011 filed on Jan. 11, 2011, and that application is incorporated in its entirety at least by reference.","1. Technical Field","The embodiments herein generally relate to test vector generation systems and methods and more particularly relates to automated generation of unique test vectors for verification of integrated circuit chip configuration.","2. Description of the Related Art","Currently for the chip vendor industry, it is unavoidable to perform various tests on integrated circuit chips with different specifications to verify whether the operation of the design is correct or not. Therefore, the quality control and test for several products has become a significant issue in the chip vending industry. The chip vending companies are facing an unprecedented challenge of balancing the design realization time, cost and the product market life of the integrated circuit (IC) chips. Further in the current scenario, the system on chip (SoC) has a market life and a design realization time which is considerably negligible.","In the existing techniques, the process of IC design verification is done manually using several automation techniques such as a constraint random verification. The constraints that specify the state space of different variables and the inter-relationship between the variables need to be written manually and then the constraints need to be passed through various constraint solver tools to generate legal random numbers for a set of variables. The overall process requires user intervention at regular time intervals and also consumes a lot of time. Further the existing techniques do not provide for automatic generation of aligned constraints and coverage objects to monitor and report the quality of the vectors generated. In the existing technique, the user assumes that the chip has just one verification state space, but in reality the chip could contain several high level configurations which could affect the quantity and state space of vectors to a large extent.","Generally large ASIC\/SOCs requires several million test vectors for coverage closure due to its huge functionality and multiple application scenarios. However the existing constrained random verification technology includes various limitations such as running several regression of constraint solver to cover the entire state space. Also within a regression, the tests need to be divided and performed across the different machines in the system pool.","Hence there is a need for a method and system for automatically generating a unique set of vector for design verification of a multi-configuration chip. There also exists a need for a system and method to prevent generation of repeated test vectors across machines in a single regression. Further there exists a need for a system and method to prevent generation of repeated test vectors across various regressions.","The above mentioned shortcomings, disadvantages and problems are addressed herein and which will be understood by reading and studying the following specification.","The primary object of the embodiments herein is to provide a method and system for automatically generating a unique set of test vector for design verification of a multi-configuration integrated circuit chip.","Another object of the embodiments herein is to provide a system and method for automatically capturing the design verification parameters of the integrated circuit chip.","Yet another object of the embodiments herein is to provide a system and method for automatically synthesizing constraints and coverage objects based on the design verification parameters.","Yet another object of the embodiments herein is to provide a system and method for automatically optimizing the functional test vector creation.","Yet another object of the embodiments herein is to provide a system and method which reduces the extent of manual intervention during the execution of verification parameters of the chip.","Yet another object of the embodiments herein is to provide a system and method that eliminates test vector duplication across regressions.","Yet another object of the embodiments herein is to provide a system and method that eliminates duplication of test vectors across different computing machines in a single regression.","Yet another object of the embodiments herein is to provide a system and method for verifying the integrated circuit chip configuration with reduced cost and time consumption.","Yet another object of the embodiments herein is to provide a system and method which ensure no overlap of test vectors.","Yet another object of the embodiments herein is to provide a system and method which increases the reliability and efficiency of verification and regression system.","Yet another object of the embodiments herein is to provide a system and method which automatically derives different functional vector state space of the integrated circuit chip.","Yet another object of the embodiments herein is to provide a system and method which automatically setup processes and data structures to optimally generate functional vectors required to achieve functional verification closure.","Another object of the embodiments herein is to provide a method for automatically generating a unique set of test vector for each of the integrated circuit chip in a plurality of Execution PCs. The method includes automatically generating an Executable Verification Plan (EVP) pertaining to the design parameters associated with the plurality of integrated circuit chips and verifying configurations associated with a plurality of integrated circuit chips in one or more Execution PCs. The method further includes creating one or more data structures corresponding to the configurations associated with the integrated circuit chips, communicating the data structures created to a DCMS server and mapping the data structures of the Execution PCs with one or more data structures present in a data base of a DCMS server. Further the method further includes customizing the executable verification plan based on changes in the configurations associated with the integrated circuit chips and generating a unique set of test vectors based on mapping of the data structures.","Another object of the embodiments herein is to provide a system for automatically generating a unique set of test vectors for design verification of an integrated circuit chip. The system includes one or more Execution PCs, a DCMS server and a network interface layer. The DCMS server includes a data structure optimization engine for identifying dissimilarities in different instances of a given executable verification plan. The DCMS server further includes a mapping module for mapping the data structures of the Execution PCs with the data structures present in a data base of the DCMS server and a packet decoding module for decoding one or more data packets received from the Execution PCs. The DCMS server includes a data structure module for creating one or more data structures corresponding to the configurations associated with the integrated chips. The DCMS server further includes a vector generation module for randomly generating the vectors corresponding to the packets received from the execution PCs. The DCMS server further includes a customization module for customizing the executable verification plan based on the changes in the configurations associated with the integrated circuit chips and a packing module. The DCMS server also includes a database for storing one or more branch numbers created for each of the Execution PCs.","According to an embodiment herein, the one or more Execution PCs includes an executable verification plan module and a loading module to load the configuration parameter files of the integrated circuit chips to the EVP module. The data packets with the set value corresponding to the data structures are communicated to the DCMS Server through a Network Interface Layer (NIL) by the Execution PCs. The DCMS server maintains the data handles in a way that all Execution PCs containing similar EVP's share a single handle. The single handle is a Real Handle.","According to an embodiment herein, the Execution PCs receives the Real Handle (RH) from the DCMS server and maps the real handle with a local Virtual Handle (VH) due to which the RH is hidden from user and the access to the server is made secure.","According to an embodiment, a system is provided to instantiate one or more executable verification plans and further customize each instance at an application program. Here customization of the overall executable verification plan is performed by changing the value of associated variables per instance by either ignoring or adding variables per instance or by ignoring or adding any combination of vectors or sequence of combinations per instance.","According to an embodiment herein, the DCMS server includes a data structure optimization engine for identifying different executable verification plans and form unique data structures for each different verification plan and to identify dissimilarities in different instances of a given executable verification plan.","According to an embodiment herein, the system includes a mechanism to automatically setup the functional vector optimization and heterogeneous functional state space in the DCMS.","According to an embodiment herein, the system includes a mechanism which allows the Execution PCs connected to the DCMS server to be completely ignorant of the modified versions of the existing verification plans or different executable verification plans in the system. The system includes a mechanism to map the virtual EVP handle at a user level to the real EVP handle at the DCMS server level and vice versa for automated functional vector generation and optimization.","According to an embodiment herein, the system includes a mechanism to automatically load the completed regression history that contains the heterogeneous functional vector state space coverage data and automatically superpose the different data over the complete intent state space data.","These and other objects and advantages of the present invention will become readily apparent from the following detailed description taken in conjunction with the accompanying drawings.","These and other aspects of the embodiments herein will be better appreciated and understood when considered in conjunction with the following description and the accompanying drawings. It should be understood, however, that the following descriptions, while indicating preferred embodiments and numerous specific details thereof, are given by way of illustration and not of limitation. Many changes and modifications may be made within the scope of the embodiments herein without departing from the spirit thereof, and the embodiments herein include all such modifications.","Although the specific features of the present invention are shown in some drawings and not in others. This is done for convenience only as each feature may be combined with any or all of the other features in accordance with the present invention.","In the following detailed description, a reference is made to the accompanying drawings that form a part hereof, and in which the specific embodiments that may be practiced is shown by way of illustration. These embodiments are described in sufficient detail to enable those skilled in the art to practice the embodiments and it is to be understood that the logical, mechanical and other changes may be made without departing from the scope of the embodiments. The following detailed description is therefore not to be taken in a limiting sense.","The primary object of the embodiments herein is to provide a system and method for automatically generating a unique set of vector for each of the integrated circuit chip in a plurality of Execution PCs. The method includes generating an Executable Verification Plan (EVP) pertaining to the configurations associated with the plurality of integrated circuit chips and automatically verifying configurations associated with a plurality of integrated circuit chips in one or more execution PCs. The method further includes creating one or more data structures corresponding to the configurations associated with the integrated circuit chips, communicating the data structures created to a DCMS server and mapping the data structures of the Execution PCs with one or more data structures present in a database of a DCMS server. Further the method includes customizing the executable verification plan based on changes in the configurations associated with the integrated circuit chips and generating a unique set of vector based on mapping of the data structures.","Another object of the embodiments herein is to provide a system for automatically generating the unique set of vectors. The system includes one or more Execution PCs, a DCMS server and a network interface layer. The DCMS server includes a data structure optimization engine for identifying dissimilarities in different instances of a given executable verification plan. The DCMS server also includes a mapping module for mapping the data structures of the Execution PCs with the data structures present in a data base of the DCMS server and a packet decoding module for decoding one or more data packets received from the Execution PCs. The DCMS server includes a data structure module for creating one or more data structures corresponding to the configurations associated with the integrated chips. The DCMS server further includes a vector generation module for randomly generating the vectors corresponding to the packets received from the execution PCs. The DCMS server further includes a customization module for customizing the executable verification plan based on changes in the configurations associated with the integrated circuit chips and a packing module. The DCMS server also includes a database for storing one or more branch numbers created for each of the Execution PCs.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 1","b":["105","105","105","105","105","105","105","115","110","115","120","125","130","135","140","145","150"],"i":["a","b","c","d ","e ","a","e "]},"The data structure optimization engine  identifies dissimilarities in different instances of a given executable verification plan. The mapping module  maps the data structures of the Execution PCs with the data structures present in a data base of the DCMS server . The packet decoding module  then decodes one or more data packets received from the Execution PCs. The data structure module  creates one or more data structures corresponding to the configuration parameters associated with the integrated chips. The vector generation module  is adapted for randomly generating the test vectors corresponding to the data packets received from the execution PCs -","The customization module  customizes the executable verification plan based on changes in the configurations associated with the integrated circuit chips and a packing module. The database  stores one or more branch numbers created for each of the Execution PCs. The mapping module  further includes a packet decoding module . The mapping module  includes sub modules for performing a parity check of the packet received with the data recorded from other Execution PCs in the pool and also for maintaining the data handles. The one or more Execution PCs includes a loading module for loading the configuration parameters to the execution verification plan.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 2","FIG. 2"],"b":["105","105","205","205","205"],"i":["a","e "]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3","b":["310","315","320","325","330","105","335"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["205","205","405","410","420","410","420","405","440","405","405","115","115","115","435","405"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 5","b":["105","110","115","505","115","205"],"i":"a"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIG. 6"],"b":["605","610","615","620","625","630","635","640"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 7","i":["a","b "],"b":"7"},"At least machine from the regression farm is designated as the DCMS server and all other machines are termed as Execution PCs. When a random generator task is invoked in any execution PCs, the Execution PCs communicates in an encoded shorthand manner to the DCMS server. The DCMS server records the vector information and authorizes the EP to use the vector only if it has not been used before. The DCMS server employs several advanced algorithms and data structures to make the process memory and execution efficient. Further when a load file task is invoked, along with a set value, the EPC communicates the modified data packets to the DCMS Server through the Network Interface Layer (NIL).","The DCMS server does a parity check of the modified data packets with the data recorded from other EP's in the pool. The DCMS server maintains the data handles in a way that the EP's containing similar EVP's share a single handle. The single handle herein is the Real Handle.","For instance, when multiple Execution PCs are connected to the DCMS server, each Execution PC sends a load EVP request to the DCMS server. The DCMS server on reception of request from each EP segregates the request and constructs a data structure and allocates the corresponding real handle to each the Execution PC. The real handle allocation from DCMS server is shown in ","For instance, for a system of 6 EP's and one DCMS server, each EPs' sends a load evp request to the server as:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["EP1 - load_EVP (\u201cEVP1\u201d);","\/\/ without set_value ( )"]},{"entry":["EP2 - load_EVP (\u201cEVP2\u201d);","\/\/ without set_value ( )"]},{"entry":["EP3 - load_EVP (\u201cEVP1\u201d);","\/\/ without set_value ( )"]},{"entry":["EP4 - load_EVP (\u201cEVP1\u201d);","\/\/ with set_value ( <unique_value_set> )"]},{"entry":["EP5 - load_EVP (\u201cEVP1\u201d);","\/\/ without set_value ( )"]},{"entry":["EP6 - load_EVP (\u201cEVP2\u201d);","\/\/ without set_value ( )"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The Execution PCs receives the Real Handle (RH) from the DCMS server  and maps the real handle with a local Virtual Handle (VH). Further each of the EP maintains a VH-to-RH mapping table as shown in ","When a test case calls preset Application Programming Interfaces then the EP allocates a Virtual Handle to the EVP as shown in . Further when these EP's put an initialization request to the DCMS server, the DCMS server executes the optimization algorithm and allocates real handle to each request. The EP reads this value and stores the corresponding information in the VH-to-RH mapping table as shown in ","The embodiments herein include a mechanism which allows the Execution PCs that are the clients of the DCMS server to be completely ignorant of all other modified versions or different executable verification plans in the system. The mechanism is used to automatically load the completed regression history which contains the heterogeneous functional vector state space coverage data. Further the data is automatically superposed over the complete intent state space data.","XPLAN is a platform which enables the verification plan driven closure. The XPLAN is adapted to automatically extract coverage points, synthesize constraints for random number generation and also generate functional vector. The coverage goals and variable relationships are specified through a configuration file. The XPlan includes a Parser and a Core module. The parser module is responsible for parsing the EVP and update core data structures. XPlan Core and all the related functions store the cross file information, needed to track the simlogs. Simlogs are the data obtained from simulation that needs to be tracked, and are in the form of a colon separated string.","EVP and simlog data are the inputs for the XPlan coverage tracker core. The modular coverage goals have to be defined in a EVP. The load cross file calls the parser module and updates all core data structures in the server. The log_sims member function receives a simlog as a parameter. This simlog contains values corresponding to individual fields in the cross file. The simlog is exactly in the same format as specified in the sim format section of the cross file. These values are read and the \u2018v_values\u2019 vector corresponding to every field is populated.","Further based on the combination of values for the fields a Chain inverted Tree structure (CITS) is generated and populated. The CITS is a table in which every entry of the table corresponds to a particular unique combination of values in the fields that make up the combo. Depth is a special feature of the EVP combos and is counted from left to right in combo definition. Each field contributes a numeric one towards depth. The depth value is directly proportional to the number of combinations required for complete hit.","The combos are tracked based on the simlog value logged for the moment. Simlog comes with values for all the fields defined in sim format section. While tracking a combo, values of only those fields which are present in the combo definition are considered. The fields out of depth are considered as expressions. Further to hit a combo completely all the nodes of fields within depth should be covered along with any one node of the fields beyond depth. The out of depth fields are treated as an expression that restricts the value for the field in such a way that, it should belong to the set of values defined.","The constraint solver generates unique random constraints each time in the application programming interface (API). The constraint solver allows the user to keep some of the constraint constants and solve the other variables based on their value. In general the constraint solver loads the data structure from the already loaded EVP. The init API updates all the data structures required for the constraint generator.","The various advantages of the present disclosure is that the combination of the EVP and DCMS technology guarantees 100% unique vector set in a given set of regressions employing multiple Execution PCs. The DCMS technology assures that there is no loss of data even when the EP simulation stops abnormally. The DCMS server keeps track of coverage information. There is no duplication of core coverage data structures thus providing for reducing the use of memory space and time. The automatic coverage merging mechanism in the DCMS server simulates values from hundreds of EP's and track coverage objects.","The foregoing description of the specific embodiments will so fully reveal the general nature of the embodiments herein that others can, by applying current knowledge, readily modify and\/or adapt for various applications such specific embodiments without departing from the generic concept, and, therefore, such adaptations and modifications should and are intended to be comprehended within the meaning and range of equivalents of the disclosed embodiments. It is to be understood that the phraseology or terminology employed herein is for the purpose of description and not of limitation. Therefore, while the embodiments herein have been described in terms of preferred embodiments, those skilled in the art will recognize that the embodiments herein can be practiced with modification within the spirit and scope of the appended claims.","Although the embodiments herein are described with various specific embodiments, it will be obvious for a person skilled in the art to practice the invention with modifications. However, all such modifications are deemed to be within the scope of the claims.","It is also to be understood that the following claims are intended to cover all of the generic and specific features of the embodiments described herein and all the statements of the scope of the embodiments which as a matter of language might be said to fall there between."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The other objects, features and advantages will occur to those skilled in the art from the following description of the preferred embodiment and the accompanying drawings in which:",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
