---
title: Systems and methods for secure transaction management and electronic rights protection
abstract: The present invention provides systems and methods for electronic commerce including secure transaction management and electronic rights protection. Electronic appliances such as computers employed in accordance with the present invention help to ensure that information is accessed and used only in authorized ways, and maintain the integrity, availability, and/or confidentiality of the information. Secure subsystems used with such electronic appliances provide a distributed virtual distribution environment (VDE) that may enforce a secure chain of handling and control, for example, to control and/or meter or otherwise monitor use of electronically stored or disseminated information. Such a virtual distribution environment may be used to protect rights of various participants in electronic commerce and other electronic or electronic-facilitated transactions. Secure distributed and other operating system environments and architectures, employing, for example, secure semiconductor processing arrangements that may establish secure, protected environments at each node. These techniques may be used to support an end-to-end electronic information distribution capability that may be used, for example, utilizing the “electronic highway.”
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533851&OS=08533851&RS=08533851
owner: Intertrust Technologies Corporation
number: 08533851
owner_city: Sunnyvale
owner_country: US
publication_date: 20060412
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD(S) OF THE INVENTION(S)","BACKGROUND AND SUMMARY OF THE INVENTION(S)","MORE DETAILED DESCRIPTION","Detailed Example of a Perc ","Examples of Reciprocal Method Processes","Representative Examples Op VDE Methods","Example\u2014Evolution and Transformation of Vde Managed Content and Control Information","Example\u2014Content Distribution Through A Content Vde Chain of Handling","Example\u2014Distribution of Content Control Information Within An Organization","Example\u2014Another Content Distribution Example","Example\u2014\u201cVirtual Silicon Container\u201d","Example\u2014Testing\/Examinations"],"p":["This is a continuation of application Ser. No. 09\/948,806, filed Sep. 10, 2001 now U.S. Pat. No. 7,124,302, which is a division of application Ser. No. 09\/272,998, filed Mar. 19, 1999, now abandoned; which is a continuation of application Ser. No. 08\/706,206, filed Aug. 30, 1996, now U.S. Pat. No. 5,892,900, all of which are incorporated herein by reference.","This invention generally relates to computer and\/or electronic security.","More particularly, this invention relates to systems and techniques for secure transaction management. This invention also relates to computer-based and other electronic appliance-based technologies that help to ensure that information is accessed and\/or otherwise used only in authorized ways, and maintains the integrity, availability, and\/or confidentiality of such information and processes related to such use.","The invention also relates to systems and methods for protecting rights of various participants in electronic commerce and other electronic or electronically-facilitated transactions.","The invention also relates to secure chains of handling and control for both information content and information employed to regulate the use of such content and consequences of such use. It also relates to systems and techniques that manage, including meter and\/or limit and or otherwise monitor use of electronically stored and\/or disseminated information. The invention particularly relates to transactions, conduct and arrangements that make use of, including consequences of use of, such systems and\/or techniques.","The invention also relates to distributed and other operating systems, environments and architectures. It also generally relates to secure architectures, including, for example, tamper-resistant hardware-based processors, that can be used to establish security at each node of a distributed system.","Telecommunications, financial transactions, government processes, business operations, entertainment, and personal business productivity all now depend on electronic appliances. Millions of these electronic appliances have been electronically connected together. These interconnected electronic appliances comprise what is increasingly called the \u201cinformation highway.\u201d Many businesses, academicians, and government leaders are concerned about how to protect the rights of citizens and organizations who use this information (also \u201celectronic\u201d or \u201cdigital\u201d) highway.","Electronic Content","Today, virtually anything that can be represented by words, numbers, graphics, or system of commands and instructions can be formatted into electronic digital information. Television, cable, satellite transmissions, and on-line services transmitted over telephone lines, compete to distribute digital information and entertainment to homes and businesses. The owners and marketers of this content include software developers, motion picture and recording companies, publishers of books, magazines, and newspapers, and information database providers. The popularization of on-line services has also enabled the individual personal computer user to participate as a content provider. It is estimated that the worldwide market for electronic information in 1992 was approximately $40 billion and is expected to grow to $200 billion by 1997, according to Microsoft Corporation. The present invention can materially enhance the revenue of content providers, lower the distribution costs and the costs for content, better support advertising and usage information gathering, and better satisfy the needs of electronic information users. These improvements can lead to a significant increase in the amount and variety of electronic information and the methods by which such information is distributed.","The inability of conventional products to be shaped to the needs of electronic information providers and users is sharply in contrast to the present invention. Despite the attention devoted by a cross-section of America's largest telecommunications, computer, entertainment and information provider companies to some of the problems addressed by the present invention, only the present invention provides commercially secure, effective solutions for configurable, general purpose electronic commerce transaction\/distribution control systems.","Controlling Electronic Content","The present invention provides a new kind of \u201cvirtual distribution environment\u201d (called \u201cVDE\u201d in this document) that secures, administers, and audits electronic information use. VDE also features fundamentally important capabilities for managing content that travels \u201cacross\u201d the \u201cinformation highway.\u201d These capabilities comprise a rights protection solution that serves all electronic community members. These members include content creators and distributors, financial service providers, end-users, and others. VDE is the first general purpose, configurable, transaction control\/rights protection solution for users of computers, other electronic appliances, networks, and the information highway.","A fundamental problem for electronic content providers is extending their ability to control the use of proprietary information. Content providers often need to limit use to authorized activities and amounts. Participants in a business model involving, for example, provision of movies and advertising on optical discs may include actors, directors, script and other writers, musicians, studios, publishers, distributors, retailers, advertisers, credit card services, and content end-users. These participants need the ability to embody their range of agreements and requirements, including use limitations, into an \u201cextended\u201d agreement comprising an overall electronic business model. This extended agreement is represented by electronic content control information that can automatically enforce agreed upon rights and obligations. Under VDE, such an extended agreement may comprise an electronic contract involving all business model participants. Such an agreement may alternatively, or in addition, be made up of electronic agreements between subsets of the business model participants. Through the use of VDE, electronic commerce can function in the same way as traditional commerce\u2014that is commercial relationships regarding products and services can be shaped through the negotiation of one or more agreements between a variety of parties.","Commercial content providers are concerned with ensuring proper compensation for the use of their electronic information. Electronic digital information, for example a CD recording, can today be copied relatively easily and inexpensively. Similarly, unauthorized copying and use of software programs deprives rightful owners of billions of dollars in annual revenue according to the International Intellectual Property Alliance. Content providers and distributors have devised a number of limited function rights protection mechanisms to protect their rights. Authorization passwords and protocols, license servers, \u201clock\/unlock\u201d distribution methods, and non-electronic contractual limitations imposed on users of shrink-wrapped software are a few of the more prevalent content protection schemes. In a commercial context, these efforts are inefficient and limited solutions.","Providers of \u201celectronic currency\u201d have also created protections for their type of content. These systems are not sufficiently adaptable, efficient, nor flexible enough to support the generalized use of electronic currency. Furthermore, they do not provide sophisticated auditing and control configuration capabilities. This means that current electronic currency tools lack the sophistication needed for many real-world financial business models. VDE provides means for anonymous currency and for \u201cconditionally\u201d anonymous currency, wherein currency related activities remain anonymous except under special circumstances.","VDE Control Capabilities","VDE allows the owners and distributors of electronic digital information to reliably bill for, and securely control, audit, and budget the use of, electronic information. It can reliably detect and monitor the use of commercial information products. VDE uses a wide variety of different electronic information delivery means: including, for example, digital networks, digital broadcast, and physical storage media such as optical and magnetic disks. VDE can be used by major network providers, hardware manufacturers, owners of electronic information, providers of such information, and clearinghouses that gather usage information regarding, and bill for the use of, electronic information.","VDE provides comprehensive and configurable transaction management, metering and monitoring technology. It can change how electronic information products are protected, marketed, packaged, and distributed. When used, VDE should result in higher revenues for information providers and greater user satisfaction and value. Use of VDE will normally result in lower usage costs, decreased transaction costs, more efficient access to electronic information, re-usability of rights protection and other transact on management implementations, greatly improved flexibility in the use of secured information, and greater standardization of tools and processes for electronic transaction management. VDE can be used to create an adaptable environment that fulfills the needs of electronic information owners, distributors, and users; financial clearinghouses; and usage information analyzers and resellers.","Rights and Control Information","In general, the present invention can be used to protect the rights of parties who have:\n\n","Protecting the rights of electronic community members involves a broad range of technologies. VDE combines these technologies in a way that creates a \u201cdistributed\u201d electronic rights protection \u201cenvironment.\u201d This environment secures and protects transactions and other processes important for rights protection. VDE, for example, provides the ability to prevent, or impede, interference with and\/or observation of, important rights related transactions and processes. VDE, in its preferred embodiment, uses special purpose tamper resistant Secure Processing Units (SPUs) to help provide a high level of security for VDE processes and information storage and communication.","The rights protection problems solved by the present invention are electronic versions of basic societal issues. These issues include protecting property rights, protecting privacy rights, properly compensating people and organizations for their work and risk, protecting money and credit, and generally protecting the security of information. VDE employs a system that uses a common set of processes to manage rights issues in an efficient, trusted, and cost-effective way.","VDE can be used to protect the rights of parties who create electronic content such as, for example: records, games, movies, newspapers, electronic books and reference materials, personal electronic mail, and confidential records and communications. The invention can also be used to protect the rights of parties who provide electronic products, such as publishers and distributors: the rights of parties who provide electronic credit and currency to pay for use of products, for example, credit clearinghouses and banks; the rights to privacy of parties who use electronic content (such as consumers, business people, governments); and the privacy rights of parties described by electronic information, such as privacy rights related to information contained in a medical record, tax record, or personnel record.","In general, the present invention can protect the rights of parties who have:\n\n","VDE Functional Properties","VDE is a cost-effective and efficient rights protection solution that provides a unified, consistent system for securing and managing transaction processing. VDE can:\n\n","In addition, VDE:\n\n","VDE economically and efficiently fulfills the rights protection needs of electronic community members. Users of VDE will not require additional rights protection systems for different information highway products and rights problems-nor will they be required to install and learn a new system for each new information highway application.","VDE provides a unified solution that allows all content creators, providers, and users to employ the same electronic rights protection solution. Under authorized circumstances, the participants can freely exchange content and associated content control sets. This means that a user of VDE may, if allowed, use the same electronic system to work with different kinds of content having different sets of content control information. The content and control information supplied by one group can be used by people who normally use content and control information supplied by a different group. VDE can allow content to be exchanged \u201cuniversally\u201d and users of an implementation of the present invention can interact electronically without fear of incompatibilities in content control, violation of rights, or the need to get, install, or learn a new content control system.","The VDE securely administers transactions that specify protection of rights. It can protect electronic rights including, for example:\n\n","VDE can enable a very broad variety of electronically enforced commercial and societal agreements. These agreements can include electronically implemented contracts, licenses, laws, regulations, and tax collection.","Contrast with Traditional Solutions","Traditional content control mechanisms often require users to purchase more electronic information than the user needs or desires. For example, infrequent users of shrink-wrapped software are required to purchase a program at the same price as frequent users, even though they may receive much less value from their less frequent use. Traditional systems do not scale cost according to the extent or character of usage and traditional systems can not attract potential customers who find that a fixed price is too high. Systems using traditional mechanisms are also not normally particularly secure. For example, shrink-wrapping does not prevent the constant illegal pirating of software once removed from either its physical or electronic package.","Traditional electronic information rights protection systems are often inflexible and inefficient and may cause a content provider to choose costly distribution channels that increase a product's \u2018price. In general these mechanisms restrict product pricing, configuration, and marketing flexibility. These compromises are the result of techniques for controlling information which cannot accommodate both different content models and content models which reflect the many, varied requirements, such as content delivery strategies, of the model participants. This can limit a provider's ability to deliver sufficient overall value to justify a given product's cost in the eyes of many potential users. VDE allows content providers and distributors to create applications and distribution networks that reflect content providers' and users' preferred business models. It offers users a uniquely cost effective and feature rich system that supports the ways providers want to distribute information and the ways users want to use such information. VDE supports content control models that ensure rights and allow content delivery strategies to be shaped for maximum commercial results.","Chain of Handling and Control","VDE can protect a collection of rights belonging to various parties having in rights in, or to, electronic information. This information may be at one location or dispersed across (and\/or moving between multiple locations. The information may pass through a \u201cchain\u201d of distributors and a \u201cchain\u201d of users. Usage information may also be reported through one or more \u201cchains\u201d of parties. In general, VDE enables parties that (a) have rights in electronic information, and\/or (b) act as direct or indirect agents for parties who have rights in electronic information, to ensure that the moving, accessing, modifying, or otherwise using of information can be securely controlled by rules regarding how, when, where, and by whom such activities can be performed.","VDE Applications and Software","VDE is a secure system for regulating electronic conduct and commerce. Regulation is ensured by control information put in place by one or more parties. These parties may include content providers, electronic hardware manufacturers, financial service providers, or electronic \u201cinfrastructure\u201d companies such as cable or telecommunications companies. The control information implements \u201cRights Applications.\u201d Rights applications \u201crun on\u201d the \u201cbase software\u201d of the preferred embodiment. This base software serves as a secure, flexible, general purpose foundation that can accommodate many different rights applications, that is, many different business models and their respective participant requirements.","A rights application under VDE is made up of special purpose pieces, each of which can correspond to one or more basic electronic processes needed for a rights protection environment. These processes can be combined together like building blocks to create electronic agreements that can protect the rights, and may enforce fulfillment of the obligations, of electronic information users and providers. One or more providers of electronic information can easily combine selected building blocks to create a rights application that is unique to a specific content distribution model. A group of these pieces can represent the capabilities needed to fulfill the agreement(s) between users and providers. These pieces accommodate many requirements of electronic commerce including:\n\n","For electronic commerce, a rights application, under the preferred embodiment of the present invention, can provide electronic enforcement of the business agreements between all participants. Since different groups of components can be put together for different applications, the present invention can provide electronic control information for a wide variety of different products and markets. This means the present invention can provide a \u201cunified,\u201d efficient, secure, and cost-effective system for electronic commerce and data security. This allows VDE to serve as a single standard for electronic rights protection, data security, and electronic currency and banking.","In a VDE, the separation between a rights application and its foundation permits the efficient selection of sets of control information that are appropriate for each of many different types of applications and uses. These control sets can reflect both rights of electronic community members, as well as obligations (such as providing a history of one's use of a product or paying taxes on one's electronic purchases). VDE flexibility allows its users to electronically implement and enforce common social and commercial ethics and practices. By providing a unified control system, the present invention supports a vast range of possible transaction related interests and concerns of individuals, communities, businesses, and governments. Due to its open design, VDE allows (normally under securely controlled circumstances) applications using technology independently created by users to be \u201cadded\u201d to the system and used in conjunction with the foundation of the invention. In sum, VDE provides a system that can fairly reflect and enforce agreements among parties. It is a broad ranging and systematic solution that answers the pressing need for a secure, cost-effective, and fair electronic environment.","VDE Implementation","The preferred embodiment of the present invention includes various tools that enable system designers to directly insert VDE capabilities into their products. These tools include an Application Programmer's Interface (\u201cAPI\u201d) and a Rights Permissioning and Management Language (\u201cRPML\u201d). The RPML provides comprehensive and detailed control over the use of the invention's features. VDE also includes certain user interface subsystems for satisfying the needs of content providers, distributors, and users.","Information distributed using VDE may take many forms. It may, for example, be \u201cdistributed\u201d for use on an individual's own computer, that is the present invention can be used to provide security for locally stored data. Alternatively, VDE may be used with information that is dispersed by authors and\/or publishers to one or more recipients. This information may take many forms including: movies, audio recordings, games, electronic catalog shopping, multimedia, training materials. E-mail and personal documents, object oriented libraries, software programming resources, and reference\/record keeping information resources (such as business, medical, legal, scientific, governmental, and consumer databases).","Electronic rights protection provided by the present invention will also provide an important foundation for trusted and efficient home and commercial banking, electronic credit processes, electronic purchasing, true or conditionally anonymous electronic cash, and EDI (Electronic Data Interchange). VDE provides important enhancements for improving data security in organizations by providing \u201csmart\u201d transaction management features that can be far more effective than key and password based \u201cgo\/no go\u201d technology.","VDE normally employs an integration of cryptographic and other security technologies (e.g. encryption, digital signatures, etc.), with other technologies including: component, distributed, and event driven operating system technology, and related communications, object container, database, smart agent, smart card, and semiconductor design technologies.","I. Overview","A. VDE Solves Important Problems and Fills Critical Needs","The world is moving towards an integration of electronic information appliances. This interconnection of appliances provides a foundation for much greater electronic interaction and the evolution of electronic commerce. A variety of capabilities are required to implement an electronic commerce environment. VDE is the first system that provides many of these capabilities and therefore solves fundamental problems related to electronic dissemination of information.","Electronic Content","VDE allows electronic arrangements to be created involving two or more parties. These agreements can themselves comprise a collection of agreements between participants in a commercial value chain and\/or a data security chain model for handling, auditing, reporting, and payment. It can provide efficient, reusable, modifiable, and consistent means for secure electronic content: distribution, usage control, usage payment, usage auditing, and usage reporting. Content may, for example, include:\n\n","VDE enables an electronic commerce marketplace that supports differing, competitive business partnerships, agreements, and evolving overall business models.","The features of VDE allow it to function as the first trusted electronic information control environment that can conform to, and support, the bulk of conventional electronic commerce and data security requirements. In particular, VDE enables the participants in a business value chain model to create an electronic version of traditional business agreement terms and conditions and further enables these participants to shape and evolve their electronic commerce models as they believe appropriate to their business requirements.","VDE offers an architecture that avoids reflecting specific distribution biases, administrative and control perspectives, and content types. Instead, VDE provides a broad-spectrum, fundamentally configurable and portable, electronic transaction control, distributing, usage, auditing, reporting, and payment operating environment. VDE is not limited to being an application or application specific toolset that covers only a limited subset of electronic interaction activities and participants. Rather, VDE supports systems by which such applications can be created, modified, and\/or reused. As a result, the present invention answers pressing, unsolved needs by offering a system that supports a standardized control environment which facilitates interoperability of electronic appliances, interoperability of content containers, and efficient creation of electronic commerce applications and models through the use of a programmable, secure electronic transactions management foundation and reusable and extensible executable components. VDE can support a single electronic \u201cworld\u201d within which most forms of electronic transaction activities can be managed.","To answer the developing needs of rights owners and content providers and to provide a system that can accommodate the requirements and agreements of all parties that may be involved in electronic business models (creators, distributors, administrators, users, credit providers, etc.), VDE supplies an efficient, largely transparent, low cost and sufficiently secure system (supporting both hardware\/software and software only models). VDE provides the widely varying secure control and administration capabilities required for:","1. Different types of electronic content,","2. Differing electronic content delivery schemes,","3. Differing electronic content usage schemes,","4. Different content usage platforms, and","5. Differing content marketing and model strategies.","VDE may be combined with, or integrated into, many separate computers and\/or other electronic appliances. These appliances typically include a secure subsystem that can enable control of content use such as displaying, encrypting, decrypting, printing, copying, saving, extracting, embedding, distributing, auditing usage, etc. The secure subsystem in the preferred embodiment comprises one or more \u201cprotected processing environments\u201d, one or more secure databases, and secure \u201ccomponent assemblies\u201d and other items and processes that need to be kept secured. VDE can, for example, securely control electronic currency, payments, and\/or credit management (including electronic credit and\/or currency receipt, disbursement, encumbering, and\/or allocation) using such a \u201csecure subsystem.\u201d","VDE provides a secure, distributed electronic transaction management system for controlling the distribution and\/or other usage of electronically provided and\/or stored information. VDE controls auditing and reporting of electronic content and\/or appliance usage. Users of VDE may include content creators who apply content usage, usage reporting, and\/or usage payment related control information to electronic content and\/or appliances for users such as end-user organizations, individuals, and content and\/or appliance distributors. VDE also securely supports the payment of money owed (including money owed for content and\/or appliance usage) by one or more parties to one or more other parties, in the form of electronic credit and\/or currency.","Electronic appliances under control of VDE represent VDE \u2018nodes\u2019 that securely process and control; distributed electronic information and\/or appliance usage, control information formulation, and related transactions. VDE can securely manage the integration of control information provided by two or more parties. As a result, VDE can construct an electronic agreement between VDE participants that represent a \u201cnegotiation\u201d between, the control requirements of, two or more parties and enacts terms and conditions of a resulting agreement. VDE ensures the rights of each party to an electronic agreement regarding a wide range of electronic activities related to electronic information and\/or appliance usage.","Through use of VDE's control system, traditional content providers and users can create electronic relationships that reflect traditional, non-electronic relationships. They can shape and modify commercial relationships to accommodate the evolving needs of, and agreements among, themselves. VDE does not require electronic content providers and users to modify their business practices and personal preferences to conform to a metering and control application program that supports limited, largely fixed functionality. Furthermore, VDE permits participants to develop business models not feasible with non-electronic commerce, for example, involving detailed reporting of content usage information, large numbers of distinct transactions at hitherto infeasibly low price points, \u201cpass-along\u201d control information that is enforced without involvement or advance knowledge of the participants, etc.","The present invention allows content providers and users to formulate their transaction environment to accommodate:\n\n","VDE's transaction management capabilities can enforce:\n\n","VDE can support \u201creal\u201d commerce in an electronic form, that is the progressive creation of commercial relationships that form, over time, a network of interrelated agreements representing a value chain business model. This is achieved in part by enabling content control information to develop through the interaction of (negotiation between) securely created and independently submitted sets of content and\/or appliance control information. Different sets of content and\/or appliance control information can be submitted by different parties in an electronic business value chain enabled by the present invention. These parties create control information sets through the use of their respective VDE installations. Independently, securely deliverable, component based control information allows efficient interaction among control information sets supplied by different parties.","VDE permits multiple, separate electronic arrangements to be formed between subsets of parties in a VDE supported electronic value chain model. These multiple agreements together comprise a VDE value chain \u201cextended\u201d agreement. VDE allows such constituent electronic agreements, and therefore overall VDE extended agreements, to evolve and reshape over time as additional VDE participants become involved in VDE convent and\/or appliance control information handling. VDE electronic agreements may also be extended as new control information is submitted by existing participants. With VDE, electronic commerce participants are free to structure and restructure their electronic commerce business activities and relationships. As a result, the present invention allows a competitive electronic commerce marketplace to develop since the use of VDE enables different, widely varying business models using the same or shared content.","A significant facet of the present invention's ability to broadly support electronic commerce is its ability to securely manage independently delivered VDE component objects containing control information (normally in the form of VDE objects containing one or more methods, data, or load module VDE components). This independently delivered control information can be integrated with senior and other pre-existing content control information to securely form derived control information using the negotiation mechanisms of the present invention. All requirements specified by this derived control information must be satisfied before VDE controlled content can be accessed or otherwise used. This means that, for example, all load modules and any mediating data which are listed by the derived control information as required must be available and securely perform their required function. In combination with other aspects of the present invention, securely, independently delivered control components allow electronic commerce participants to freely stipulate their business requirements and trade offs. As a result, much as with traditional, non-electronic commerce, the present invention allows electronic commerce (through a progressive stipulation of various control requirements by VDE participants) to evolve into forms of business that are the most efficient, competitive and useful.","VDE provides capabilities that rationalize the support of electronic commerce and electronic transaction management. This rationalization stems from the reusability of control structures and user interfaces for a wide variety of transaction management related activities. As a result, content usage control, data security, information auditing, and electronic financial activities, can be supported with tools that are reusable, convenient, consistent, and familiar. In addition, a rational approach\u2014a transaction\/distribution control standard\u2014allows all participants in VDE the same foundation set of hardware control and security, authoring, administration, and management tools to support widely varying types of information, business market model, and\/or personal objectives.","Employing VDE as a general purpose electronic transaction\/distribution control system allows users to maintain a single transaction management control arrangement on each of their computers, networks, communication nodes, and\/or other electronic appliances. Such a general purpose system can serve the needs of many electronic transaction management applications without requiring distinct, different installations for different purposes. As a result, users of VDE can avoid the confusion and expense and other inefficiencies of different, limited purpose transaction control applications for each different content and\/or business model. For example, VDE allows content creators to use the same VDE foundation control arrangement for both content authoring and for licensing content from other content creators for inclusion into their products or for other use. Clearinghouses, distributors, content creators, and other VDE users can all interact, both with the applications running on their VDE installations, and with each other, in an entirely consistent manner, using and reusing (largely transparently) the same distributed tools, mechanisms, and consistent user interfaces, regardless of the type of VDE activity.","VDE prevents many forms of unauthorized use of electronic information, by controlling and auditing (and other administration of use) electronically stored and\/or disseminated information. This includes, for example, commercially distributed content, electronic currency, electronic credit, business transactions (such as EDI), confidential communications, and the like. VDE can further be used to enable commercially provided electronic content to be made available to users in user defined portions, rather than constraining the user to use portions of content that were \u201cpredetermined\u201d by a content creator and\/or other provider for billing purposes.","VDE, for example, can employ:\n\n","VDE may be used to migrate most non-electronic, traditional information delivery models (including entertainment, reference materials, catalog shopping, etc.) into an adequately secure digital distribution and usage management and payment context. The distribution and financial pathways managed by a VDE arrangement may include:\n\n","These distribution and financial pathways may also include:\n\n","Secure VDE hardware (also known as SPUs for Secure Processing Units), or VDE installations that use software to substitute for, or complement, said hardware (provided by Host Processing Environments (HPEs)), operate in conjunction with secure communications, systems integration software, and distributed software control information and support structures, to achieve the electronic contract\/rights protection environment of the present invention. Together, these VDE components comprise a secure, virtual, distributed content and\/or appliance control, auditing (and other administration), reporting, and payment environment. In some embodiments and where commercially acceptable, certain VDE participants, such as clearinghouses that normally maintain sufficiently physically secure non-VDE processing environments, may be allowed to employ HPEs rather VDE hardware elements and interoperate, for example, with VDE end-users and content providers. VDE components together comprise a configurable, consistent, secure and \u201ctrusted\u201d architecture for distributed, asynchronous control of electronic content and\/or appliance usage. VDE supports a \u201cuniverse wide\u201d environment for electronic content delivery, broad dissemination, usage reporting, and usage related payment activities.","VDE provides generalized configurability. This results, in part. from decomposition of generalized requirements for supporting electronic commerce and data security into a broad range of constituent \u201catomic\u201d and higher level components (such as load modules, data elements. and methods) that may be variously aggregated together to form control methods for electronic commerce applications, commercial electronic agreements, and data security arrangements. VDE provides a secure operating environment employing VDE foundation elements along with secure independently deliverable VDE components that enable electronic commerce models and relationships to develop. VDE specifically supports the unfolding of distribution models in which content providers, over time, can expressly agree to, or allow, subsequent content providers and\/or users to participate in shaping the control information for, and consequences of, use of electronic content and\/or appliances. A very broad range of the functional attributes important for supporting simple to very complex electronic commerce and data security activities are supported by capabilities of the present invention. As a result, VDE supports most types of electronic information and\/or appliance: usage control (including distribution), security. usage auditing, reporting, other administration, and payment arrangements.","VDE, in its preferred embodiment, employs object software technology and uses object technology to form containers\u201d for delivery of information that is (at least in part) encrypted or otherwise secured. These containers may contain electronic content products or other electronic information and some or all of their associated permissions (control) information. These container objects may be distributed along pathways involving content providers and\/or content users. They may be securely moved among nodes of a Virtual Distribution Environment (VDE) arrangement, which nodes operate VDE foundation software and execute control methods to enact electronic information usage control and\/or administration models. The containers delivered through use of the preferred embodiment of the present invention may be employed both for distributing VDE control instructions (information) and\/or to encapsulate and electronically distribute content that has been at least partially secured.","Content providers who employ the present invention may include, for example, software application and game publishers, database publishers, cable, television, and radio broadcasters, electronic shopping vendors, and distributors of information in electronic document, book, periodical, e-mail and\/or other forms. Corporations, government agencies, and\/or individual \u201cend-users\u201d who act as storers of, and\/or distributors of, electronic information, may also be VDE content providers (in a restricted model, a user provides content only to himself and employs VDE to secure his own confidential information against unauthorized use by other parties). Electronic information may include proprietary and\/or confidential information for personal or internal organization use, as well as information, such as software applications, documents, entertainment materials, and\/or reference information, which may be provided to other parties. Distribution may be by, for example, physical media delivery, broadcast and\/or telecommunication means, and in the form of \u201cstatic\u201d files and\/or streams of data. VDE may also be used, for example, for multi-site \u201creal-time\u201d interaction such as teleconferencing, interactive games, or on-line bulletin boards, where restrictions on, and\/or auditing of, the use of all or portions of communicated information is enforced.","VDE provides important mechanisms for both enforcing commercial agreements and enabling the protection of privacy rights. VDE can securely deliver information from one party to another concerning the use of commercially distributed electronic content. Even if parties are separated by several \u201csteps\u201d in a chain (pathway) of handling for such content usage information, such information is protected by VDE through encryption and\/or other secure processing. Because of that protection, the accuracy of such information is guaranteed by VDE, and the information can be trusted by all parties to whom it is delivered. Furthermore, VDE guarantees that all parties can trust that such information cannot be received by anyone other than the intended, authorized, party(ies) because it is encrypted such that only an authorized party, or her agents, can decrypt it. Such information may also be derived through a secure VDE process at a previous pathway-of-handling location to produce secure VDE reporting information that is then communicated securely to its intended recipient's VDE secure subsystem. Because VDE can deliver such information securely, parties to an electronic agreement need not trust the accuracy of commercial usage and\/or other information delivered through means other than those under control of VDE.","VDE participants in a commercial value chain can be \u201ccommercially\u201d confident (that is, sufficiently confident for commercial purposes) that the direct (constituent) and\/or \u201cextended\u201d electronic agreements they entered into through the use of VDE can be enforced reliably. These agreements may have both \u201cdynamic\u201d transaction management related aspects, such as content usage control information enforced through budgeting, metering, and\/or reporting of electronic information and\/or appliance use, and\/or they may include \u201cstatic\u201d electronic assertions, such as an end-user using the system to assert his or her agreement to pay for services, not to pass to unauthorized parties electronic information derived from usage of content or systems, and\/or agreeing to observe copyright laws. Not only can electronically reported transaction related information be trusted under the present invention, but payment may be automated by the passing of payment tokens through a pathway of payment (which may or may not be the same as a pathway for reporting). Such payment can be contained within a VDE container created automatically by a VDE installation in response to control information (located, in the preferred embodiment, in one or more permissions records) stipulating the \u201cwithdrawal\u201d of credit or electronic currency (such as tokens) from an electronic account (for example, an account securely maintained by a user's VDE installation secure subsystem) based upon usage of VDE controlled electronic content and\/or appliances (such as governments, financial credit providers, and users).","VDE allows the needs of electronic commerce participants to be served and it can bind such participants together in a universe wide, trusted commercial network that can be secure enough to support very large amounts of commerce. VDE's security and metering secure subsystem core will be present at all physical locations where VDE related content is (a) assigned usage related control information (rules and mediating data), and\/or (b) used. This core can perform security and auditing functions (including metering) that operate within a \u201cvirtual black box,\u201d a collection of distributed, very secure VDE related hardware instances that are interconnected by secured information exchange (for example, telecommunication) processes and distributed database means. VDE further includes highly configurable transaction operating system technology, one or more associated libraries of load modules along with affiliated data, VDE related administration, data preparation, and analysis applications, as well as system software designed to enable VDE integration into host environments and applications. VDE's usage control information, for example, provide for property content and\/or appliance related: usage authorization, usage auditing (which may include audit reduction), usage billing, usage payment, privacy filtering, reporting, and security related communication and encryption techniques.","VDE extensively employs methods in the form of software objects to augment configurability, portability, and security of the VDE environment. It also employs a software object architecture for VDE content containers that carries protected content and may also carry both freely available information (e.g, summary, table of contents) and secured content control information which ensures the performance of control information. Content control information governs content usage according to criteria set by holders of rights to an object's contents and\/or according to parties who otherwise have rights associated with distributing such content (such as governments, financial credit providers, and users).","In part, security is enhanced by object methods employed by the present invention because the encryption schemes used to protect an object can efficiently be further used to protect the associated content control information (software control information and relevant data) from modification. Said object techniques also enhance portability between various computer and\/or other appliance environments because electronic information in the form of content can be inserted along with (for example, in the same object container as) content control information (for said content) to produce a \u201cpublished\u201d object. As a result, various portions of said control information may be specifically adapted for different environments, such as for diverse computer platforms and operating systems, and said various portions may all be carried by a VDE container.","An objective of VDE is supporting a transaction\/distribution control standard. Development of such a standard has many obstacles, given the security requirements and related hardware and communications issues, widely differing environments, information types, types of information usage, business and\/or data security goals, varieties of participants, and properties of delivered information. A significant feature of VDE accommodates the many, varying distribution and other transaction variables by, in part, decomposing electronic commerce and data security functions into generalized capability modules executable within a secure hardware SPU and\/or corresponding software subsystem and further allowing extensive flexibility in assembling, modifying, and\/or replacing, such modules (e.g. load modules and\/or methods) in applications run on a VDE installation foundation. This configurability and reconfigurability allows electronic commerce and data security participants to reflect their priorities and requirements through a process of iteratively shaping an evolving extended electronic agreement (electronic control model). This shaping can occur as content control information passes from one VDE participant to another and to the extent allowed by \u201cin place\u201d content control information. This process allows users of VDE to recast existing control information and\/or add new control information as necessary (including the elimination of no longer required elements).","VDE supports trusted (sufficiently secure) electronic information distribution and usage control models for both commercial electronic content distribution and data security applications. It can be configured to meet the diverse requirements of a network of interrelated participants that may include content creators, content distributors, client administrators, end users, and\/or clearinghouses and\/or other content usage information users. These parties may constitute a network of participants involved in simple to complex electronic content dissemination, usage control, usage reporting, and\/or usage payment. Disseminated content may include both originally provided and VDE generated information (such as content usage information) and content control information may persist through both chains (one or more pathways) of content and content control information handling, as well as the direct usage of content. The configurability provided by the present invention is particularly critical for supporting electronic commerce, that is enabling businesses to create relationships and evolve strategies that offer competitive value. Electronic commerce tools that are not inherently configurable and interoperable will ultimately fail to produce products (and services) that meet both basic requirements and evolving needs of most commerce applications.","VDE's fundamental configurability will allow a broad range of competitive electronic commerce business models to flourish. It allows business models to be shaped to maximize revenues sources, end-user product value, and operating efficiencies. VDE can be employed to support multiple, differing models, take advantage of new revenue opportunities, and deliver product configurations most desired by users. Electronic commerce technologies that do not, as the present invention does:\n\n","Some of the key factors contributing to the configurability intrinsic to the present invention include:\n\n","Because of the breadth of issues resolved by the present invention, it can provide the emerging \u201celectronic highway\u201d with a single transaction\/distribution control system that can, for a very broad range of commercial and data security models, ensure against unauthorized use of confidential and\/or proprietary information and commercial electronic transactions. VDE's electronic transaction management mechanisms can enforce the electronic rights and agreements of all parties participating in widely varying business and data security models, and this can be efficiently achieved through a single VDE implementation within each VDE participant's electronic appliance. VDE supports widely varying business and\/or data security models that can involve a broad range of participants at various \u201clevels\u201d of VDE content and\/or content control information pathways of handling. Different content control and\/or auditing models and agreements may be available on the same VDE installation. These models and agreements may control content in relationship to, for example, VDE installations and\/or users in general; certain specific users, installations, classes and\/or other groupings of installations and\/or users; as well as to electronic content generally on a given installation, to specific properties, property portions, classes and\/or other groupings of content.","Distribution using VDE may package both the electronic content and control information into the same VDE container, and\/or may involve the delivery to an end-user site of different pieces of the same VDE managed property from plural separate remote locations and\/or in plural separate VDE content containers and\/or employing plural different delivery means. Content control information may be partially or fully delivered separately from its associated content to a user VDE installation in one or more VDE administrative objects. Portions of said control information may be delivered from one or more sources. Control information may also be available for use by access from a user's VDE installation secure sub-system to one or more remote VDE secure sub-systems and\/or VDE compatible, certified secure remote locations. VDE control processes such as metering, budgeting, decrypting and\/or fingerprinting, may as relates to a certain user content usage activity, be performed in a user's local VDE installation secure subsystem, or said processes may be divided amongst plural secure subsystems which may be located in the same user VDE installations and\/or in a network server and in the user installation. For example, a local VDE installation may perform decryption and save any, or all of, usage metering information related to content and\/or electronic appliance usage at such user installation could be performed at the server employing secure (e.g., encrypted) communications between said secure subsystems. Said server location may also be used for near real time, frequent, or more periodic secure receipt of content usage information from said user installation, with, for example, metered information being maintained only temporarily at a local user installation.","Delivery means for VDE managed content may include electronic data storage means such as optical disks for delivering one portion of said information and broadcasting and\/or telecommunicating means for other portions of said information. Electronic data storage means may include magnetic media, optical media, combined magneto-optical systems, flash RAM memory, bubble memory, and\/or other memory storage means such as huge capacity optical storage systems employing holographic, frequency, and\/or polarity data storage techniques. Data storage means may also employ layered disc techniques, such as the use of generally transparent and\/or translucent materials that pass light through layers of data carrying discs which themselves are physically packaged together as one thicker disc. Data carrying locations on such discs may be, at least in part, opaque.","VDE supports a general purpose foundation for secure transaction management, including usage control, auditing, reporting, and\/or payment. This general purpose foundation is called \u201cVDE Functions\u201d (\u201cVDEFs\u201d). VDE also supports a collection of \u201catomic\u201d application elements (e.g., load modules that can be selectively aggregated together to form various VDEF capabilities called control methods and which serve as VDEF applications and operating system functions. When a host operating environment of an electronic appliance includes VDEF capabilities, it is called a \u201cRights Operating System\u201d (ROS). VDEF load modules, associated data, and methods form a body of information that for the purposes of the present invention are called \u201ccontrol information.\u201d VDEF control information may be specifically associated with one or more pieces of electronic content and\/or it may be employed as a general component of the operating system capabilities of a VDE installation.","VDEF transaction control elements reflect and enact content specific and\/or more generalized administrative (for example, general operating system) control information. VDEF capabilities which can generally take the form of applications (application models) that have more or less configurability which can be shaped by VDE participants, through the use, for example, of VDE templates, to employ specific capabilities, along, for example, with capability parameter data to reflect the elements of one or more express electronic agreements between VDE participants in regards to the use of electronic content such as commercially distributed products; These control capabilities manage the use of, and\/or auditing of use of, electronic content, as well as reporting information based upon content use, and any payment for said use. VDEF capabilities may \u201cevolve\u201d to reflect the requirements of one or more successive parties who receive or otherwise contribute to a given set of control information. Frequently, for a VDE application for a given content model (such as distribution of entertainment on CD-ROM, content delivery from an Internet repository, or electronic catalog shopping and advertising, or some combination of the above) participants would be able to securely select from amongst available, alternative control methods and apply related parameter data, wherein such selection of control method and\/or submission of data would constitute their \u201ccontribution\u201d of control information. Alternatively, or in addition, certain control methods that have been expressly certified as securely interoperable and compatible with said application may be independently submitted by a participant as part of such a contribution. In the most general example, a generally certified load module (certified for a given VDE arrangement and\/or content class; may be used with many or any VDE application that operates in nodes of said arrangement. These parties, to the extent they are allowed, can independently and securely add, delete, and\/or otherwise modify the specification of load modules and methods, as well as add, delete or otherwise modify related information.","Normally the party who creates a VDE content container defines the general nature of the VDEF capabilities that will and\/or may apply to certain electronic information. A VDE content container is an object that contains both content (for example, commercially distributed electronic information products such as computer software programs, movies, electronic publications or reference materials, etc.) and certain control information related to the use of the object's content. A creating party may make a VDE container available to other parties. Control information delivered by, and\/or otherwise available for use with, VDE content containers comprise (for commercial content distribution purposes) VDEF control capabilities (and any associated parameter data) for electronic content. These capabilities may constitute one or more \u201cproposed\u201d electronic agreements (and\/or agreement functions available for selection and\/or use with parameter data) that manage the use and\/or the consequences of use of such content and which can enact the terms and conditions of agreements involving multiple parties and their various rights and obligations.","A VDE electronic agreement may be explicit, through a user interface acceptance by one or more parties, for example by a \u201cjunior\u201d party who has received control information from a \u201csenior\u201d party, or it may be a process amongst equal parties who individually assert their agreement. Agreement may also result from an automated electronic process during which terms and conditions are \u201cevaluated\u201d by certain VDE participant control information that assesses whether certain other electronic terms and conditions attached to content and\/or submitted by another party are acceptable (do not violate acceptable control information criteria). Such an evaluation process may be quite simple, for example a comparison to ensure compatibility between a portion of, or all senior, control terms and conditions in a table of terms and conditions and the submitted control information of a subsequent participant in a pathway of content control information handling, or it may be a more elaborate process that evaluates the potential outcome of, and\/or implements a negotiation process between, two or more sets of control information submitted by two or more parties. VDE also accommodates a semi-automated process during which one or more VDE participants directly, through user interface means, resolve \u201cdisagreements\u201d between control information sets by accepting and\/or proposing certain control information that may be acceptable to control information representing one or more other parties interests and\/or responds to certain user interface queries for selection of certain alternative choices and\/or for certain parameter information, the responses being adopted if acceptable to applicable senior control information.","When another party (other than the first applier of rules, perhaps through a negotiation process, accepts, and\/or adds to and\/or otherwise modifies, \u201cin place\u201d content control information, a VDE agreement between two or more parties related to the use of such electronic content may be created (so long as any modifications are consistent with senior control information). Acceptance of terms and conditions related to certain electronic content may be direct and express, or it may be implicit as a result of use of content (depending, for example, on legal requirements, previous exposure to such terms and conditions, and requirements of in place control information).","VDEF capabilities may be employed, and a VDE agreement may be entered into, by a plurality of parties without the VDEF capabilities being directly associated with the controlling of certain, specific electronic information. For example, certain one or more VDEF capabilities may be present at a VDE installation, and certain VDE agreements may have been entered into during the registration process for a content distribution application, to be used by such installation for securely controlling VDE content usage, auditing, reporting and\/or payment. Similarly, a specific VDE participant may enter into a VDE user agreement with a VDE content or electronic appliance provider when the user and\/or her appliance register with such provider as a VDE installation and\/or user. In such events, VDEF in place control information available to the user VDE installation may require that certain VDEF methods are employed, for example in a certain sequence, in order to be able to use all and\/or certain classes, of electronic content and\/or VDE applications.","VDE ensures that certain prerequisites necessary for a given transaction to occur are met. This includes the secure execution of any required load modules and the availability of any required, associated data. For example, required load modules and data (e.g. in the form of a method) might specify that sufficient credit from an authorized source must be confirmed as available. It might further require certain one or more load modules execute as processes at an appropriate time to ensure that such credit will be used in order to pay for user use of the content. A certain content provider might, for example, require metering the number of copies made for distribution to employees of a given software program (a portion of the program might be maintained in encrypted form and require the presence of a VDE installation to run). This would require the execution of a metering method for copying of the property each time a copy was made for another employee. This same provider might also charge fees based on the total number of different properties licensed from them by the user and a metering history of their licensing of properties might be required to maintain this information.","VDE provides organization, community, and\/or universe wide secure environments whose integrity is assured by processes securely controlled in VDE participant user installations (nodes). VDE installations, in the preferred embodiment, may include both software and tamper resistant hardware semiconductor elements. Such a semiconductor arrangement comprises, at least in part, special purpose circuitry that has been designed to protect against tampering with, or unauthorized observation of, the information and functions used in performing the VDE's control functions. The special purpose secure circuitry provided by the present invention includes at least one of: a dedicated semiconductor arrangement known as a Secure Processing Unit (SPU) and\/or a standard microprocessor, microcontroller, and\/or other processing logic that accommodates the requirements of the present invention and functions as an SPU. VDE's secure hardware may be found incorporated into, for example, a fax\/modem chip or chip pack, I\/O controller, video display controller, and\/or other available digital processing arrangements. It is anticipated that portions of the present invention's VDE secure hardware capabilities may ultimately be standard design elements of central processing units (CPUs) for computers and various other electronic devices.","Designing VDE capabilities into one or more standard microprocessor, microcontroller and\/or other digital processing components may materially reduce VDE related hardware costs by employing the same hardware resources for both the transaction management uses contemplated by the present invention and for other, host electronic appliance functions. This means that a VDE SPU can employ (share) circuitry elements of a \u201cstandard\u201d CPU. For example, if a \u201cstandard\u201d processor can operate in protected mode and can execute VDE related instructions as a protected activity, then such an embodiment may provide sufficient hardware security for a variety of applications and the expense of a special purpose processor might be avoided. Under one preferred embodiment of the present invention, certain memory (e.g., RAM, ROM, NVRAM) is maintained during VDE related instruction processing in a protected mode (for example, as supported by protected mode microprocessors. This memory is located in the same package as the processing logic (e.g. processor). Desirably, the packaging and memory of such a processor would be designed using security techniques that enhance its resistance to tampering.","The degree of overall security of the VDE system is primarily dependent on the degree of tamper resistance and concealment of VDE control process execution and related data storage activities. Employing special purpose semiconductor packaging techniques can significantly contribute to the degree of security. Concealment and tamper-resistance in semiconductor memory (e.g., RAM, ROM, NVRAM) can be achieved, in part, by employing such memory within an SPU package, by encrypting data before it is sent to external memory (such as an external RAM package) and decrypting encrypted data within the CPU\/RAM package before it is executed. This process is used for important VDE related data when such data is stored on unprotected media, for example, standard host storage, such as random access memory, mass storage, etc. In that event, a VDE SPU would encrypt data that results from a secure VDE execution before such data was stored in external memory.","Summary of Some Important Features Provided by VDE in Accordance with the Present Invention","VDE employs a variety of capabilities that serve as a foundation for a general purpose, sufficiently secure distributed electronic commerce solution. VDE enables an electronic commerce marketplace that supports divergent, competitive business partnerships, agreements, and evolving overall business models. For example, VDE includes features that:\n\n","VDE supports as many simultaneous predefined increment types as may be practical for a given type of content and business model.\n\n","Use of bitmap meters (including \u201cregular\u201d and \u201cwide\u201d bitmap meters) to record usage and\/or purchase of information, in conjunction with other elements of the preferred embodiment of the present invention, uniquely supports efficient maintenance of usage history for: (a) rental, (b) flat fee licensing or purchase. (c) licensing or purchase discounts based upon historical usage variables, and (d) reporting to users in a manner enabling users to determine whether a certain item was acquired, or acquired within a certain time period (without requiring the use of conventional database mechanisms, which are highly inefficient for these applications). Bitmap meter methods record activities associated with electronic appliances, properties, objects, or portions thereof, and\/or administrative activities that are independent of specific properties, objects, etc., performed by a user and\/or electronic appliance such that a content and\/or appliance provider and\/or controller of an administrative activity can determine whether a certain activity has occurred at some point, or during a certain period, in the past (for example, certain use of a commercial electronic content product and\/or appliance). Such determinations can 20 then be used as part of pricing and\/or control strategies of a content and\/or appliance provider, and\/or controller of an administrative activity. For example, the content provider may choose to charge only once for access to a portion of a property, regardless of the number of times that portion of the property is accessed by a user.\n\n","VDE control information (e.g., methods) that collectively control use of VDE managed properties (database, document, individual commercial product), are either shipped with the Content itself (for example, in a content container) and\/or one or more portions of such control information is shipped to distributors and\/or other users in separably deliverable \u201cadministrative objects.\u201d A subset of the methods for a property may in part be delivered with each property while one or more other subsets of methods can be delivered separately to a user or otherwise made available for use (such as being available remotely by telecommunication means). Required methods (methods listed as required for property and\/or appliance use) must be available as specified if VDE controlled content (such as intellectual property distributed within a VDE content container) is to be used. Methods that control content may apply to a plurality of VDE container objects, such as a class or other grouping of such objects. Methods may also be required by certain users or classes of users and\/or VDE installations and\/or classes of installations for such parties to use one or more specific, or classes of, objects.","A feature of VDE provided by the present invention is that certain one or more methods can be specified as required in order for a VDE installation and\/or user to be able to use certain and\/or all content. For example, a distributor of a certain type of content might be allowed by \u201csenior\u201d participants (by content creators, for example) to require a method which prohibits end-users from electronically saving-decrypted content, a provider of credit for VDE transactions might require an audit method that records the time of an electronic purchase, and\/or a user might require a method that summarizes usage information for reporting to a clearinghouse (e.g. billing information) in a way that does not convey confidential, personal information regarding detailed usage behavior.","A further feature of VDE provided by the present invention is that creators, distributors, and users of content can select from among a set of predefined methods (if available) to control container content usage and distribution functions and\/or they may have the right to provide new customized methods to control at least certain usage functions (such \u201cnew\u201d methods may be required to be certified for trustedness and interoperability to the VDE installation and\/or for of a group of VDE applications). As a result, VDE provides a very high degree of configurability with respect to how the distribution and other usage of each property or object (or one or more portions of objects or properties as desired and\/or applicable) will be controlled. Each VDE participant in a VDE pathway of content control information may set methods for some or all of the content in a VDE container, so long as such control information does not conflict with senior control information already in place with respect to:\n\n","For example, a content creator's VDE control information for certain content can take precedence over other submitted VDE participant control information and, for example, if allowed by senior control information, a content distributor's control information may itself take precedence over a client administrator's control information, which may take precedence over an end-user's control information. A path of distribution participant's ability to set such electronic content control information can be limited to certain control information (for example, method mediating data such as pricing and\/or sales dates) or it may be limited only to the extent that one or more of the participant's proposed control information conflicts with control information set by senior control information submitted previously by participants in a chain of handling of the property, or managed in said participant's VDE secure subsystem.","VDE control information may, in part or in full, (a) represent control information directly put in place by VDE content control information pathway participants, and\/or (b) comprise control information put in place by such a participant on behalf of a party who does not directly handle electronic content (or electronic appliance) permissions records information (for example control information inserted by a participant on behalf of a financial clearinghouse or government agency). Such control information methods (and\/or load modules and\/or mediating data and\/or component assemblies) may also be put in place by either an electronic automated, or a semi-automated and human assisted, control information (control set negotiating process that assesses whether the use of one or more pieces of submitted control information will be integrated into and\/or replace existing control information (and\/or chooses between alternative control information based upon interaction with in-place control information and how such control information may be used.","Control information may be provided by a party who does not directly participate in the handling of electronic content (and\/or appliance) and\/or control information for such content (and\/or appliance). Such control information may be provided in secure form using VDE installation secure sub-system managed communications (including, for example, authenticating the deliverer of at least in part encrypted control information) between such not directly participating one or more parties' VDE installation secure subsystems, and a pathway of VDE content control information participant's VDE installation secure subsystem. This control information may relate to, for example, the right to access credit supplied by a financial services provider, the enforcement of regulations or laws enacted by a government agency, or the requirements of a customer of VDE managed content usage information (reflecting usage of content by one or more parties other than such customer) relating to the creation, handling and\/or manner of reporting of usage information received by such customer. Such control information may, for example, enforce societal requirements such as laws related to electronic commerce.","VDE content control information may apply differently to different pathway of content and\/or control information handling participants. Furthermore, permissions records rights may be added, altered, and\/or removed by a VDE participant if they are allowed to take such action. Rights of VDE participants may be defined in relation to specific parties and\/or categories of parties and\/or other groups of parties in a chain of handling of content and\/or content control information (e.g., permissions records). Modifications to control information that may be made by a given, eligible party or parties, may be limited in the number of modifications, and\/or degree of modification, they may make.","At least one secure subsystem in electronic appliances of creators, distributors, auditors, clearinghouses, client administrators, and end-users (understanding that two or more of the above classifications may describe a single user) provides a sufficiently\u201d secure (for the intended applications) environment for:\n\n","Normally, most usage, audit, reporting, payment, and distribution control methods are themselves at least in part encrypted and are executed by the secure subsystem of a VDE installation. Thus, for example, billing and metering records can be securely generated and updated, and encryption and decryption keys are securely utilized, within a secure subsystem. Since VDE also employs secure (e.g. encrypted and authenticated) communications when passing information between the participant location (nodes) secure subsystems of a VDE arrangement, important components of a VDE electronic agreement can be reliably enforced with sufficient security (sufficiently trusted) for the intended commercial purposes. A VDE electronic agreement for a value chain can be composed, at least in part, of one or more subagreements between one or more subsets of the value chain participants. These subagreements are comprised of one or more electronic contract \u201ccompliance\u201d elements (methods including associated parameter data) that ensure the protection of the rights of VDE participants.","The degree of trustedness of a VDE arrangement will be primarily based on whether hardware SPUs are employed at participant location secure subsystems and the effectiveness of the SPU hardware security architecture, software security techniques when an SPU is emulated in software, and the encryption algorithm(s) and keys that are employed for securing content, control information, communications, and access to VDE node (VDE installation) secure subsystems. Physical facility and user identity authentication security procedures may be used instead of hardware SPUs at certain nodes, such as at an established financial clearinghouse, where such procedures may provide sufficient security for trusted interoperability with a VDE arrangement employing hardware SPUs at user nodes.","The updating of property management files at each location of a VDE arrangement, to accommodate new or modified control information, is performed in the VDE secure subsystem and under the control of secure management file updating programs executed by the protected subsystem. Since all secure communications are at least in part encrypted and the processing inside the secure subsystem is concealed from outside observation and interference, the present invention ensures that content control information can be enforced. As a result, the creator and\/or distributor and\/or client administrator and\/or other contributor of secure control information for each property (for example, an end-user restricting the kind of audit information he or she will allow to be reported and\/or a financial clearinghouse establishing certain criteria for use of its credit for payment for use of distributed content) can be confident that their contributed and accepted control information will be enforced (within the security limitations of a given VDE security implementation design). This control information can determine, for example:\n\n","Seniority of contributed control information, including resolution of conflicts between content control information submitted by multiple parties, is normally established by:\n\n","An important feature of VDE is that it can be used to assure the administration of, and adequacy of security and rights protection for, electronic agreements implemented through the use of the present invention. Such agreements may involve one or more of:\n\n","VDE supports commercially secure \u201cextended\u201d value chain electronic agreements. SIDE can be configured to support the various underlying agreements between parties that comprise this extended agreement. These agreements can define important electronic commerce considerations including:\n\n","VDE agreements may define the electronic commerce relationship of two or more parties of a value chain, but such agreements may, at times, not directly obligate or otherwise directly involve other VDE value chain participants. For example, an electronic agreement between a content creator and a distributor may establish both the price to the distributor for a creator's content (such as for a property distributed in a VDE container object) and the number of copies of this object that this distributor may distribute to end-users over a given period of time. In a second agreement, a value chain end-user may be involved in a three party agreement in which the end-user agrees to certain requirements for using the distributed product such as accepting distributor charges for content use and agreeing to observe the copyright rights of the creator. A third agreement might exist between the distributor and a financial clearinghouse that allows the distributor to employ the clearinghouse's credit for payment for the product if the end-user has a separate (fourth agreement directly with the clearinghouse extending credit to the end-user. A fifth, evolving agreement may develop between all value chain participants as content control information passes along its chain of handling. This evolving agreement can establish the rights of all parties to content usage information, including, for example, the nature of information to be received by each party and the pathway of handling of content usage information and related procedures. A sixth agreement in this example, may involve all parties to the agreement and establishes certain general assumptions, such as security techniques and degree of trustedness (for example, commercial integrity of the system may require each VDE installation secure subsystem to electronically warrant that their VDE node meets certain interoperability requirements). In the above example, these six agreements could comprise agreements of an extended agreement for this commercial value chain instance.","VDE agreements support evolving (\u201cliving\u201d) electronic agreement arrangements that can be modified by current and\/or new participants through very simple to sophisticated \u201cnegotiations\u201d between newly proposed content control information interacting with control information already in place and\/or by negotiation between concurrently proposed content control information submitted by a. plurality of parties. A given model may be asynchronously and progressively modified over time in accordance with existing senior rules and such modification may be applied to all, to classes of, and\/or to specific content, and\/or to classes and\/or specific users and\/or user nodes. A given piece of content may be subject to different control information at different times or places of handling, depending on the evolution of its content control information (and\/or on differing, applicable VDE installation content control information). The evolution of control information can occur during the passing along of one or more VDE control information containing objects, that is control information may be modified at one or more points along a chain of control information handling, so long as such modification is allowed. As a result, VDE managed content may have different control information applied at both different \u201clocations\u201d in a chain of content handling and at similar locations in differing chains of the handling of such content. Such different application of control information may also result from content control information specifying that a certain party or group of parties shall be subject to content control information that differs from another party or group of parties. For example, content control information for a given piece of content may be stipulated as senior information and therefore not changeable, might be put in place by a content creator and might stipulate that national distributors of a given piece of their content may be permitted to make 100,000 copies per calendar quarter, so long as such copies are provided to bonifide end-users, but may pass only a single copy of such content to a local retailers and the control information limits such a retailer to making no more than 1,000 copies per month for retail sales to end-users. In addition, for example, an end-user of such content might be limited by the same content control information to making three copies of such content, one for each of three different computers he or she uses (one desktop computer at work, one for a desktop computer at home, and one for a portable computer).","Electronic agreements supported by the preferred embodiment of the present invention can vary from very simple to very elaborate. They can support widely diverse information management models that provide for electronic information security, usage administration, and communication and may support:\n\n","An important part of VDE provided by the present invention is the core secure transaction control arrangement, herein called an SPU (or SPUs), that typically must be present in each user's computer, other electronic appliance, or network. SPUs provide a trusted environment for generating decryption keys, encrypting and decrypting information, managing the secure communication of keys and other information between electronic appliances (i.e. between VDE installations and\/or between plural VDE instances within a single VDE installation), securely accumulating and managing audit trail, reporting, and budget information in secure and\/or non-secure non-volatile memory, maintaining a secure database of control information management instructions, and providing a secure environment for performing certain other control and administrative functions.","A hardware SPU (rather than a software emulation) within a VDE node is necessary if a highly trusted environment for performing certain VDE activities is required. Such a trusted environment may be created through the use of certain control software, one or more tamper resistant hardware modules such as a semiconductor or semiconductor chipset (including, for example, a tamper resistant hardware electronic appliance peripheral device), for use within, and\/or operatively connected to, an electronic appliance. With the present invention, the trustedness of a hardware SPU can be enhanced by enclosing some or all of its hardware elements within tamper resistant packaging and\/or by employing other tamper resisting techniques (e.g. microfusing and\/or thin wire detection techniques). A trusted environment of the present invention implemented, in part, through the use of tamper resistant semiconductor design, contains control logic, such as a microprocessor, that securely executes VDE processes.","A VDE node's hardware SPU is a core component of a VDE secure subsystem and may employ some or all of an electronic appliance's primary control logic, such as a microcontroller, microcomputer or other CPU arrangement. This primary control logic may be otherwise employed for non VDE purposes such as the control of some or all of an electronic appliance's non-VDE functions. When operating in a hardware SPU mode, said primary control logic must be sufficiently secure so as to protect and conceal important VDE processes. For example, a hardware SPU may employ a host electronic appliance microcomputer operating in protected mode while performing VDE related activities, thus allowing portions of VDE processes to execute with a certain degree of security. This alternate embodiment is in contrast to the preferred embodiment wherein a trusted environment is created using a combination of one or more tamper resistant semiconductors that are not part of said primary control logic. In either embodiment, certain control information (software and parameter data) must be securely maintained within the SPU, and further control information can be stored externally and securely (e.g. in encrypted and tagged form) and loaded into said hardware SPU when needed. In many cases, and in particular with microcomputers, the preferred embodiment approach of employing special purpose secure hardware for executing said VDE processes, rather than using said primary control logic, may be more secure and efficient. The level of security and tamper resistance required for trusted SPU hardware processes depends on the commercial requirements of particular markets or market niches, and may vary widely.",{"@attributes":{"id":"p-0234","num":"0391"},"figref":"FIGS. 1-7"},"Overview",{"@attributes":{"id":"p-0235","num":"0392"},"figref":["FIG. 1","FIG. 1"],"b":["100","200","202","202","202","200","208","210","204","214","200","100"]},"Almost any sort of transaction you can think of can be supported by virtual distribution environment . A few of many examples of transactions that can be supported by virtual distribution environment  include:\n\n","Virtual distribution environment  is \u201cvirtual\u201d because it does not require many of the physical \u201cthings\u201d that used to be necessary to protect rights, ensure reliable and predictable distribution, and ensure proper compensation to content creators and distributors. For example, in the past, information was distributed on records or disks that were difficult to copy. In the past, private or secret content was distributed in sealed envelopes or locked briefcases delivered by courier. To ensure appropriate compensation, consumers received goods and services only after they handed cash over to a seller. Although information utility  may deliver information by transferring physical \u201cthings\u201d such as electronic storage media, the virtual distribution environment  facilitates a completely electronic \u201cchain of handling and control.\u201d","VDE Flexibility Supports Transactions","Information utility  flexibly supports many different kinds of information transactions. Different VDE participants may define and\/or participate in different parts of a transaction. Information utility  may assist with delivering information about a transaction, or it may be one of the transaction participants.","For example, the video production studio  in the upper right-hand corner of  may create video\/television  programs. Video production studio  may send these programs over lines , or may use other paths such as satellite link  and CD ROM delivery service . Video production studio  can send the programs directly to consumers , , , or it can send the programs to information utility  which may store and later send them to the consumers, for example. Consumers , ,  are each capable of receiving and using the programs created by video production studio \u2014assuming, that is, that the video production studio or information utility  has arranged for these consumers to have appropriate \u201crules and controls\u201d (control information that give the consumers rights to use the programs.","Even if a consumer has a copy of a video program, she cannot watch or copy the program unless she has \u201crules and controls\u201d that authorize use of the program. She can use the program only as permitted by the \u201crules and controls.\u201d","For example, video production studio  might release a half-hour exercise video in the hope that as many viewers as possible will view it. The video production studio  wishes to receive $2.00 per viewing. Video production studio  may, through information utility , make the exercise video available in \u201cprotected\u201d form to all consumers , , . Video production studio  may also provide \u201crules and controls\u201d for the video. These \u201crules and controls\u201d may specify for example:\n\n","Information utility  allows even a small video production studio to market videos to consumers and receive compensation for its efforts. Moreover, the videos can, with appropriate payment to the video production studio, be made available to other video publishers who may add value and\/or act as repackagers or redistributors.",{"@attributes":{"id":"p-0243","num":"0407"},"figref":"FIG. 1","b":["214","214","206","214","214","210","216","216"]},"Use rights distributed by publishing house  may, for example, permit office  to make and distribute copies of the content to its employees. Office  may act as a redistributor by extending a \u201cchain of handling and control\u201d to its employees. The office  may add or modify \u201crules and controls\u201d (consistent with the \u201crules and controls\u201d it receives from publishing house ) to provide office-internal control information and mechanisms. For example, office  may set a maximum usage budget for each individual user and\/or group within the office, or it may permit only specified employees and\/or groups to access certain information.",{"@attributes":{"id":"p-0245","num":"0409"},"figref":"FIG. 1","b":["216","206","200","202","100"]},"Example of What's Inside Information Utility ","\u201cInformation utility\u201d  in  can be a collection of participants that may act as distributors, financial clearinghouses, and administrators.  shows an example of what may be inside one example of information utility . Information utility participants -could each be an independent organization\/business. There can be any number of each of participants -. In this example, electronic \u201cswitch\u201d connects internal parts of information utility  to each other and to outside participants, and may also connect outside participants to one another.","Information utility  may include a \u201ctransaction processor\u201d that processes transactions (to transfer electronic funds, for example) based on requests from participants and\/or report receiver . It may also include a \u201cusage analyst\u201d that analyzes reported usage information. A \u201creport creator\u201d may create reports based on usage for example, and may provide these reports to outside participants and\/or to participants within information utility . A \u201creport receiver\u201d may receive reports such as usage reports from content users. A \u201cpermissioning agent\u201d may distribute \u201crules and controls\u201d granting usage or distribution permissions based on a profile of a consumer's credit worthiness, for example. An administrator may provide information that keeps the virtual distribution environment  operating properly. A content and message storage may store information for use by participants within or outside of information utility .","Example of Distributing Content\u201d Using a Chain of Handling and Control\u201d","As explained above, virtual distribution environment  can be used to manage almost any sort of transaction. One type of important transaction that virtual distribution environment  may be used to manage is the distribution or communication of \u201ccontent\u201d or other important information.  more abstractly shows a \u201cmodel\u201d of how the  virtual distribution environment  may be used to provide a \u201cchain of handling and control\u201d for distributing content. Each of the blocks in  may correspond to one or more of the VDE participants shown in .","In the  example, a VDE content creator  creates \u201ccontent.\u201d The content creator  may also specify \u201crules and controls\u201d for distributing the content. These distribution-related \u201crules and controls\u201d can specify who has permission to distribute the rights to use content, and how many users are allowed to use the content.","Arrow  shows the content creator  sending the \u201crules and controls\u201d associated with the content to a VDE rights distributor  (\u201cdistributor\u201d) over an electronic highway  (or by some other path such as an optical disk sent by a delivery service such as U.S. mail). The content can be distributed over the same or different path used to send the \u201crules and controls.\u201d The distributor  generates her own \u201crules and controls\u201d that relate to usage of the content. The usage-related \u201crules and controls\u201d may, for example, specify what a user can and can't do with the content and how much it costs to use the content. These usage-related \u201crules and controls\u201d must be consistent with the \u201crules and controls\u201d specified by content creator .","Arrow  shows the distributor  distributing rights to use the content by sending the content's \u201crules and controls\u201d to a content user  such as a consumer. The content user  uses the content in accordance with the usage-related \u201crules and controls.\u201d","In this  example, information relating to content use is, as shown by arrow , reported to a financial clearinghouse . Based on this \u201creporting,\u201d the financial clearinghouse  may generate a bill and send it to the content user  over a \u201creports and payments\u201d network . Arrow  shows the content user  providing payments for content usage to the financial clearinghouse . Based on the reports and payments it receives, the financial clearinghouse  may provide reports and\/or payments to the distributor . The distributor  may, as shown by arrow , provide reports and\/or payments to the content creator . The clearinghouse  may provide reports and payments directly to the creator . Reporting and\/or payments may be done differently. For example, clearinghouse  may directly or through an agent, provide reports and\/or payments to each of VDE content creators , and rights distributor , as well as reports to content user .","The distributor  and the content creator  may be the same person, or they may be different people. For example, a musical performing group may act as both content creator  and distributor  by creating and distributing its own musical recordings. As another example, a publishing house may act as a distributor  to distribute rights to use works created by an author content creator . Content creators  may use a distributor  to efficiently manage the financial end of content distribution.","The \u201cfinancial clearinghouse\u201d  shown in  may also be a \u201cVDE administrator.\u201d Financial clearinghouse  in its VDE administrator role sends \u201cadministrative\u201d information to the VDE participants. This administrative information helps to keep the virtual distribution environment  operating properly. The \u201cVDE administrator\u201d and financial clearinghouse roles may be performed by different people or companies, and there can be more than one of each.","More about \u201cRules and Controls\u201d","The virtual distribution environment  prevents use of protected information except as permitted by the \u201crules and controls\u201d (control information). For example, the \u201crules and controls\u201d shown in  may grant specific individuals or classes of content users  \u201cpermission\u201d to use certain content. They may specify what kinds of content usage are permitted, and what kinds are not. They may specify how content usage is to be paid for and how much it costs. As another example, \u201crules and controls\u201d may require content usage information to be reported back to the distributor  and\/or content creator .","Every VDE participant in \u201cchain of handling and control\u201d is normally subject to \u201crules and controls.\u201d \u201cRules and controls\u201d define the respective rights and obligations of each of the various VDE participants. \u201cRules and controls\u201d provide information and mechanisms that may establish interdependencies and relationships between the participants. \u201cRules and controls\u201d are flexible, and permit \u201cvirtual distribution environment\u201d  to support most \u201ctraditional\u201d business transactions. For example:\n\n","\u201cRules and controls\u201d may self limit if and how they may be changed. Often, \u201crules and controls\u201d specified by one VDE participant cannot be changed by another VDE participant. For example, a content user  generally can't change \u201crules and controls\u201d specified by a distributor  that require the user to pay for content usage at a certain rate. \u201cRules and controls\u201d may \u201cpersist\u201d as they pass through a \u201cchain of handling and control,\u201d and may be \u201cinherited\u201d as they are passed down from one VDE participant to the next.","Depending upon their needs, VDE participants can specify that their \u201crules and controls\u201d can be changed under conditions specified by the same or other \u201crules and controls.\u201d For example, \u201crules and controls\u201d specified by the content creator  may permit the distributor  to \u201cmark up\u201d the usage price just as retail stores \u201cmark up\u201d the wholesale price of goods.  shows an example in which certain \u201crules and controls\u201d persist unchanged from content creator  to content user ; other \u201crules and controls\u201d are modified or deleted by distributor ; and still other \u201crules and controls\u201d are added by the distributor.","\u201cRules and controls\u201d can be used to protect the content user's privacy by limiting the information that is reported to other VDE participants. As one example, \u201crules and controls\u201d can cause content usage information to be reported anonymously without revealing content user identity, or it can reveal only certain information to certain participants (for example, information derived from usage) with appropriate permission, if required. This ability to securely control what information is revealed and what VDE participant(s) it is revealed to allows the privacy rights of all VDE participants to be protected.","Rules and Contents' can be Separately Delivered","As mentioned above, virtual distribution environment  \u201cassociates\u201d content with corresponding \u201crules and controls,\u201d and prevents the content from being used or accessed unless a set of corresponding \u201crules and controls\u201d is available. The distributor  doesn't need to deliver content to control the content's distribution. The preferred embodiment can securely protect content by protecting corresponding, usage enabling \u201crules and controls\u201d against unauthorized distribution and use.","In some examples, \u201crules and controls\u201d may travel with the content they apply to. Virtual distribution environment  also allows \u201crules and controls\u201d to be delivered separately from content. Since no one can use or access protected content without \u201cpermission\u201d from corresponding \u201crules and controls,\u201d the distributor  can control use of content that has already been (or will in the future be) delivered. \u201cRules and controls\u201d may be delivered over a path different from the one used for content delivery. \u201cRules and controls\u201d may also be delivered at some other time. The content creator  might deliver content to content user  over the electronic highway , or could make the content available to anyone on the highway. Content may be used at the time it is delivered, or it may be stored for later use or reuse.","The virtual distribution environment  also allows payment and reporting means to be delivered separately. For example, the content user  may have a virtual \u201ccredit card\u201d that extends credit (up to a certain limit) to pay for usage of any content. A \u201ccredit transaction\u201d can take place at the user's site without requiring any \u201conline\u201d connection or further authorization. This invention can be used to help securely protect the virtual \u201ccredit card\u201d against unauthorized use.","\u201cRules and Contents\u201d Define Processes",{"@attributes":{"id":"p-0263","num":"0430"},"figref":["FIG. 3","FIG. 3"],"b":["402","404","406","408"]},"The \u201cevents process\u201d  detects things that happen (\u201cevents\u201d) and determines which of those \u201cevents\u201d need action by the other \u201cprocesses.\u201d The \u201cevents\u201d may include, for example, a request to use content or generate a usage permission. Some events may need additional processing, and others may not. Whether an \u201cevent\u201d needs more processing depends on the \u201crules and controls\u201d corresponding to the content. For example, a user who lacks permission will not have her request satisfied (\u201cNo Go\u201d). As another example, each user request to turn to a new page of an electronic book may be satisfied (\u201cGo\u201d), but it may not be necessary to meter, bill or budget those requests. A user who has purchased a copy of a novel may be permitted to open and read the novel as many times as she wants to without any further metering, billing or budgeting. In this simple example, the \u201cevent process\u201d  may request metering, billing and\/or budgeting processes the first time the user asks to open the protected novel (so the purchase price can be charged to the user), and treat all later requests to open the same novel as \u201cinsignificant events.\u201d Other content (for example, searching an electronic telephone directory) may require the user to pay a fee for each access.","\u201cMeter\u201d process  keeps track of events, and may report usage to distributor  and\/or other appropriate VDE participant(s).  shows that process  can be based on a number of different factors such as:","(a) type of usage to charge for,","(b) what kind of unit to base charges on,","(c) how much to charge per unit,","(d) when to report, and","(e) how to pay.","These factors may be specified by the \u201crules and controls\u201d that control the meter process.","Billing process  determines how much to charge for events. It records and reports payment information.","Budget process  limits how much content usage is permitted. For example, budget process  may limit the number of times content may be accessed or copied, or it may limit the number of pages or other amount of content that can be used based on, for example, the number of dollars available in a credit account. Budget process  records and reports financial and other transaction information associated with such limits.","Content may be supplied to the user once these processes have been successfully performed.","Containers and \u201cObjects\u201d",{"@attributes":{"id":"p-0274","num":"0441"},"figref":"FIG. 5A","b":["100","302","302","302","302","300"]},"The  example shows items \u201cwithin\u201d and enclosed by container . However, container  may \u201ccontain\u201d items without those items actually being stored within the container. For example, the container  may reference items that are available elsewhere such as in other containers at remote sites. Container  may reference items available at different times or only during limited times. Some items may be too large to store within container . Items may, for example, be delivered to the user in the form of a \u201clive feed\u201d of video at a certain time. Even then, the container  \u201ccontains\u201d the live feed (by reference) in this example.","Container  may contain information content  in electronic (such as \u201cdigital\u201d) form. Information content  could be the text of a novel, a picture, sound such as a musical performance or a reading, a movie or other video, computer software, or just about any other kind of electronic information you can think of. Other types of \u201cobjects\u201d  (such as \u201cadministrative objects\u201d) may contain \u201cadministrative\u201d or other information instead of or in addition to information content .","In the  example, container  may also contain \u201crules and controls\u201d in the form of:","(a) a \u201cpermissions record\u201d ;","(b) \u201cbudgets\u201d ; and","(c) \u201cother methods\u201d .",{"@attributes":{"id":"p-0281","num":"0448"},"figref":"FIG. 5B","b":["808","308","1000","808","300","302","808","302","808","308","1000","808"]},"\u201cBudgets\u201d  shown in  are a special type of \u201cmethod\u201d  that may specify, among other things, limitations on usage of information content , and how usage will be paid for. Budgets  can specify, for example, how much of the total information content  can be used and\/or copied. The methods  may prevent use of more than the amount specified by a specific budget.","\u201cOther methods\u201d  define basic operations used by \u201crules and controls.\u201d Such \u201cmethods\u201d  may include, for example, how usage is to be \u201cmetered,\u201d if and how content  and other information is to be scrambled and descrambled, and other processes associated with handling and controlling information content . For example, methods  may record the identity of anyone who opens the electronic container , and can also control how information content is to be charged based on \u201cmetering.\u201d Methods  may apply to one or several different information contents  and associated containers , as well as to all or specific portions of information content .","Secure Processing Unit (SPU)","The \u201cVDE participants\u201d may each have an \u201celectronic appliance.\u201d The appliance may be or contain a computer. The appliances may communicate over the electronic highway .  shows a secure processing unit (\u201cSPU\u201d)  portion of the \u201celectronic appliance\u201d used in this example by each VDE participant. SPU  processes information in a secure processing environment , and stores important information securely. SPU  may be emulated by software operating in a host electronic appliance.","SPU  is enclosed within and protected by a \u201ctamper resistant security barrier\u201d . Security barrier  separates the secure environment  from the rest of the world. It prevents information and processes within the secure environment  from being observed, interfered with and leaving except under appropriate secure conditions. Barrier  also controls external access to secure resources, processes and information within SPU . In one example, tamper resistant security barrier  is formed by security features such as \u201cencryption,\u201d and hardware that detects tampering and\/or destroys sensitive information within secure environment  when tampering is detected.","SPU  in this example is an integrated circuit (\u201cIC\u201d) \u201cchip\u201d  including \u201chardware\u201d  and \u201cfirmware\u201d . SPU  connects to the rest of the electronic appliance through an \u201cappliance link\u201d . SPU \u201cfirmware\u201d  in this example is \u201csoftware\u201d such as a \u201ccomputer program(s)\u201d \u201cembedded\u201d within chip . Firmware  makes the hardware  work. Hardware  preferably contains a processor to perform instructions specified by firmware . \u201cHardware\u201d  also contains long-term and short-term memories to store information securely so it can't be tampered with. SPU  may also have a protected clock\/calendar used for timing events. The SPU hardware  in this example may include special purpose electronic circuits that are specially designed to perform certain processes (such as \u201cencryption\u201d and \u201cdecryption\u201d) rapidly and efficiently.","The particular context in which SPU  is being used will determine how much processing capabilities SPU  should have. SPU hardware , in this example, provides at least enough processing capabilities to support the secure parts of processes shown in . In some contexts, the functions of SPU  may be increased so the SPU can perform all the electronic appliance processing, and can be incorporated into a general purpose processor. In other contexts, SPU  may work alongside a general purpose processor, and therefore only needs to have enough processing capabilities to handle secure processes.","VDE Electronic Appliance and \u201cRights Operating System\u201d",{"@attributes":{"id":"p-0288","num":"0455"},"figref":"FIG. 7","b":["600","500","600"],"ul":{"@attributes":{"id":"ul0057","list-style":"none"},"li":{"@attributes":{"id":"ul0057-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0058","list-style":"none"},"li":["a computer","a T.V. \u201cset top\u201d control box","a pager","a telephone","a sound system","a video reproduction system","a video game player","a \u201csmart\u201d credit card\n\nElectronic appliance  in this example may include a keyboard or keypad , a voice recognizer , and a display . A human user can input commands through keyboard  and\/or voice recognizer , and may view information on display . Appliance  may communicate with the outside world through any of the connections\/devices normally used within an electronic appliance. The connections\/devices shown along the bottom of the drawing are examples:\n"]}}}},"a \u201cmodem\u201d  or other telecommunications link;","a CD ROM disk  or other storage medium or device;","a printer ;","broadcast reception ;","a document scanner ; and","a \u201ccable\u201d  connecting the appliance with a \u201cnetwork.\u201d","Virtual distribution environment  provides a \u201crights operating system\u201d  that manages appliance  and SPU  by controlling their hardware resources. The operating system  may also support at least one \u201capplication\u201d . Generally, \u201capplication\u201d  is hardware and\/or software specific to the context of appliance . For example, if appliance  is a personal computer, then \u201capplication\u201d  could be a program loaded by the user, for instance, a word processor, a communications system or a sound recorder. If appliance  is a television controller box, then application  might be hardware or software that allows a user to order videos on demand and perform other functions such as fast forward and rewind. In this example, operating system  provides a standardized, well defined, generalized \u201cinterface\u201d that could support and work with many different \u201capplications\u201d .","Operating system  in this example provides \u201crights and auditing operating system functions\u201d  and \u201cother operating system functions\u201d . The \u201crights and auditing operating system functions\u201d  securely handle tasks that relate to virtual distribution environment . SPU  provides or supports many of the security functions of the \u201crights and auditing operating system functions\u201d . The \u201cother operating system functions\u201d  handle general appliance functions. Overall operating system  may be designed from the beginning to include the \u201crights and auditing operating system functions\u201d  plus the \u201cother operating system functions\u201d , or the \u201crights and auditing operating system functions\u201d may be an add-on to a preexisting operating system providing the \u201cother operating system functions.\u201d","\u201cRights operating system\u201d  in this example can work with many different types of appliances . For example, it can work with large mainframe computers, \u201cminicomputers\u201d and \u201cmicrocomputers\u201d such as personal computers and portable computing devices. It can also work in control boxes on the top of television sets, small portable \u201cpagers,\u201d desktop radios, stereo sound systems, telephones, telephone switches, or any other electronic appliance. This ability to work on big appliances as well as little appliances is called \u201cscalable.\u201d A \u201cscalable\u201d operating system  means that there can be a standardized interface across many different appliances performing a wide variety of tasks.","The \u201crights operating system functions\u201d  are \u201cservices-based\u201d in this example. For example, \u201crights operating system functions\u201d  handle summary requests from application  rather than requiring the application to always make more detailed \u201csubrequests\u201d or otherwise get involved with the underlying complexities involved in satisfying a summary request. For example, application  may simply ask to read specified information; \u201crights operating system functions\u201d  can then decide whether the desired information is VDE-protected content and, if it is, perform processes needed to make the information available. This feature is called \u201ctransparency.\u201d \u201cTransparency\u201d makes tasks easy for the application . \u201cRights operating system functions\u201d  can support applications  that \u201cknow\u201d nothing about virtual distribution environment . Applications  that are \u201caware\u201d of virtual distribution environment  may be able to make more detailed use of virtual distribution environment .","In this example, \u201crights operating system functions\u201d  are \u201cevent driven\u201d. Rather than repeatedly examining the state of electronic appliance  to determine whether a condition has arisen, the \u201crights operating system functions\u201d  may respond directly to \u201cevents\u201d or \u201chappenings\u201d within appliance .","In this example, some of the services performed by \u201crights operating system functions\u201d  may be extended based on additional \u201ccomponents\u201d delivered to operating system . \u201cRights operating system functions\u201d  can collect together and use \u201ccomponents\u201d sent by different participants at different times. The \u201ccomponents\u201d help to make the operating system  \u201cscalable.\u201d Some components can change how services work on little appliances versus how they work on big appliances (e.g., multi-user). Other components are designed to work with specific applications or classes of applications (e.g., some types of meters and some types of budgets).","Electronic Appliance ","An electronic appliance  provided by the preferred embodiment may, for example, be any electronic apparatus that contains one or more microprocessors and\/or microcontrollers and\/or other devices which perform logical and\/or mathematical calculations. This may include computers; computer terminals; device controllers for use with computers; peripheral devices for use with computers; digital display devices; televisions; video and audio\/video projection systems; channel selectors and\/or decoders for use with broadcast and\/or cable transmissions; remote control devices; video and\/or audio recorders; media players including compact disc players, videodisc players and tape players; audio and\/or video amplifiers; virtual reality machines; electronic game players; multimedia players; radios; telephones; videophones; facsimile machines; robots; numerically controlled machines including machine tools and the like; and other devices containing one or more microcomputers and\/or microcontrollers and\/or other CPUs, including those not yet in existence.",{"@attributes":{"id":"p-0302","num":"0477"},"figref":"FIG. 8","b":["600","600","633","654","653","653","654","656","658","660","500","653","653","500","654","656","658","660","659","500","654"]},"In the example shown, 110 controller  is connected to secondary storage device , a keyboard\/display ,, a communications controller , and a backup storage device . Backup storage device  may, for example, store information on mass media such as a tape , a floppy disk, a removable memory card, etc. Communications controller  may allow electronic appliance  to communicate with other electronic appliances via network  or other telecommunications links. Different electronic appliances  may interoperate even if they use different CPUs and different instances of ROS , so long as they typically use compatible communication protocols and\/or security methods. In this example, 110 controller  permits CPU  and SPU  to read from and write to secondary storage , keyboard\/display , , communications controller , and backup storage device .","Secondary storage  may comprise the same one or more non-secure secondary storage devices (such as a magnetic disk and a CD-ROM drive as one example) that electronic appliance  uses for general secondary storage functions. In some implementations, part or all of secondary storage  may comprise a secondary storage device(s) that is physically enclosed within a secure enclosure. However, since it may not be practical or cost-effective to physically secure secondary storage  in many implementations, secondary storage  may be used to store information in a secure manner by encrypting information before storing it in secondary storage . If information is encrypted before it is stored, physical access to secondary storage  or its contents does not readily reveal or compromise the information.","Secondary storage  in this example stores code and data used by CPU  and\/or SPU  to control the overall operation of electronic appliance . For example,  shows that \u201cRights Operating System\u201d (\u201cROS\u201d)  (including a portion  of ROS that provides VDE functions and a portion  that provides other OS functions) shown in  may be stored on secondary storage . Secondary storage  may also store one or more VDE objects .  also shows that the secure files  shown in  may be stored on secondary storage  in the form of a \u201csecure database\u201d or management file system . This secure database  may store and organize information used by ROS  to perform VDE functions . Thus, the code that is executed to perform VDE and other OS functions , , and secure files  (as well as VDE objects ) associated with those functions may be stored in secondary storage . Secondary storage  may also store \u201cother information\u201d  such as, for example, information used by other operating system functions  for task management, non-VDE flies, etc. Portions of the elements indicated in secondary storage  may also be stored in ROM , so long as those elements do not require changes (except when ROM  is replaced). Portions of ROS  in particular may desirably be included in ROM  (e.g., \u201cbootstrap\u201d routines, POST routines, etc. for use in establishing an operating environment for electronic appliance  when power is applied).",{"@attributes":{"id":"p-0306","num":"0481"},"figref":["FIG. 8","FIG. 7","FIG. 8"],"b":["652","608","608","608","608","608","100","604","602","608","100","604"],"i":["a","b","a ","b"]},"Secure Processing Unit ","Each VDE node or other electronic appliance  in the preferred embodiment may include one or more SPUs . SPUs  may be used to perform all secure processing for VDE . For example, SPU  is used for decrypting (or otherwise unsecuring) VDE protected objects . It is also used for managing encrypted and\/or otherwise secured communication (such as by employing authentication and\/or error-correction validation of information). SPU  may also perform secure data management processes including governing usage of, auditing of, and where appropriate, payment for VDE objects  (through the use of prepayments, credits, real-time electronic debits from bank accounts and\/or VDE node currency token deposit accounts). SPU  may perform other transactions related to such VDE objects .","SPU Physical Packaging and Security Barrier ","As shown , in the preferred embodiment, an SPU  may be implemented as a single integrated circuit \u201cchip\u201d  to provide a secure processing environment in which confidential and\/or commercially valuable information can be safely processed, encrypted and\/or decrypted. IC chip  may, for example, comprise a small semiconductor \u201cdie\u201d about the size of a thumbnail. This semiconductor die may include semiconductor and metal conductive pathways. These pathways define the circuitry, and thus the functionality, of SPU . Some of these pathways are electrically connected to the external \u201cpins\u201d  of the chip .","As shown in , SPU  may be surrounded by a tamper-resistant hardware security barrier . Part of this security barrier  is formed by a plastic or other package in which an SPU \u201cdie\u201d is encased. Because the processing occurring within, and information stored by, SPU  are not easily accessible to the outside world, they are relatively secure from unauthorized access and tampering. All signals cross barrier  through a secure, controlled path provided by BIU  that restricts the outside world's access to the internal components within SPU . This secure, controlled path resists attempts from the outside world to access secret information and resources within SPU .","It is possible to remove the plastic package of an IC chip and gain access to the \u201cdie.\u201d It is also possible to analyze and \u201creverse engineer\u201d the \u201cdie\u201d itself (e.g., using various types of logic analyzers and microprobes to collect and analyze signals on the die while the circuitry is operating, using acid etching or other techniques to remove semiconductor layers to expose other layers, viewing and photographing the die using an electron microscope, etc.) Although no system or circuit is absolutely impervious to such attacks, SPU barrier  may include additional hardware protections that make successful attacks exceedingly costly and time consuming. For example, ion implantation and\/or other fabrication techniques may be used to make it very difficult to visually discern SPU die conductive pathways, and SPU internal circuitry may be fabricated in such a way that it \u201cself-destructs\u201d when exposed to air and\/or light. SPU  may store secret information in internal memory that loses its contents when power is lost. Circuitry may be incorporated within SPU  that detects microprobing or other tampering, and self-destructs (or destroys other parts of the SPU) when tampering is detected. These and other hardware-based physical security techniques contribute to tamper-resistant hardware security barrier .","To increase the security of security barrier  even further, it is possible to encase or include SPU  in one or more further physical enclosures such as, for example: epoxy or other \u201cpotting compound\u201d; further module enclosures including additional self-destruct, self-disabling or other features activated when tampering is detected; further modules providing additional security protections such as requiring password or other authentication to operate; and the like. In addition, further layers of metal may be added to the die to complicate acid etching, micro probing, and the like; circuitry designed to \u201czeroize\u201d memory may be included as an aspect of self-destruct processes; the plastic package itself may be designed to resist chemical as well as physical \u201cattacks\u201d; and memories internal to SPU  may have specialized addressing and refresh circuitry that \u201cshuffles\u201d the location of bits to complicate efforts to electrically determine the value of memory locations. These and other techniques may contribute to the security of barrier .","In some electronic appliances , SPU  may be integrated together with the device microcontroller or equivalent or with a device  or communications microcontroller into a common chip (or chip set) . For example, in one preferred embodiment, SPU  may be integrated together with one or more other CPU(s) (e.g., a CPU  of an electronic appliance) in a single component or package. The other CPU(s)  may be any centrally controlling logic arrangement, such as for example, a microprocessor, other microcontroller, and\/or array or other parallel processor. This integrated configuration may result in lower overall cost, smaller overall size, and potentially faster interaction between an SPU  and a CPU . Integration may also provide wider distribution if an integrated SPU\/CPU component is a standard feature of a widely distributed microprocessor line. Merging an SPU  into a main CPU  of an electronic appliance  (or into another appliance or appliance peripheral microcomputer or other microcontroller) may substantially reduce the overhead cost of implementing VDE . Integration considerations may include cost of implementation, cost of manufacture, desired degree of security, and value of compactness.","SPU  may also be integrated with devices other than CPUs. For example, for video and multimedia applications, some performance and\/or security advantages (depending on overall design) could result from integrating an SPU  into a video controller chip or chipset. SPU  can also be integrated directly into a network communications chip or chipset or the like. Certain performance advantages in high speed communications applications may also result from integrating an SPU  with a modem chip or chipset. This may facilitate incorporation of an SPU  into communication appliances such as stand-alone fax machines. SPU  may also be integrated into other peripheral devices, such as CD-ROM devices, set-top cable devices, game devices, and a wide variety of other electronic appliances that use, allow access to, perform transactions related to, or consume, distributed information.","SPU  Internal Architecture",{"@attributes":{"id":"p-0314","num":"0489"},"figref":"FIG. 9","b":["500","500","520","532","534","500","520","522","526","528","530","532","534","540","526","540","500","500","524","542","544","546","536","520","526","538","520","522","538","528","538","530","538","538","540","538"],"i":["a","b","c","d","e"]},"The following section discusses each of these SPU components in more detail.","Microprocessor ","Microprocessor  is the \u201cbrain\u201d of SPU . In this example, it executes a sequence of steps specified by code stored (at least temporarily) within ROM  and\/or RAM . Microprocessor  in the preferred embodiment comprises a dedicated central processing arrangement (e.g., a RISC and\/or CISC processor unit, a microcontroller, and\/or other central processing means or, less desirably in most applications, process specific dedicated control logic) for executing instructions stored in the ROM  and\/or other memory. Microprocessor  may be separate elements of a circuitry layout, or may be separate packages within a secure SPU .","In the preferred embodiment, microprocessor  normally handles the most security sensitive aspects of the operation of electronic appliance . For example, microprocessor  may manage VDE decrypting, encrypting, certain content and\/or appliance usage control information, keeping track of usage of VDE secured content, and other VDE usage control related functions.","Stored in each SPU  and\/or electronic appliance secondary memory  may be, for example, an instance of ROS  software, application programs , objects  containing VDE controlled property content and related information, and management database  that stores both information associated with objects and VDE control information. ROS  includes software intended for execution by SPU microprocessor  for, in part, controlling usage of VDE related objects  by electronic appliance . As will be explained, these SPU programs include \u201cload modules\u201d for performing basic control functions. These various programs and associated data are executed and manipulated primarily by microprocessor .","Real Time Clock (RTC) ","In the preferred embodiment, SPU  includes a real time clock circuit (\u201cRTC\u201d)  that serves as a reliable, tamper resistant time base for the SPU. RTC  keeps track of time of day and date (e.g., month, day and year) in the preferred embodiment, and thus may comprise a combination calendar and clock. A reliable time base is important for implementing time based usage metering methods, \u201ctime aged decryption keys,\u201d and other time based SPU functions.","The RTC  must receive power in order to operate. Optimally, the RTC  power source could comprise a small battery located within SPU  or other secure enclosure. However, the RTC  may employ a power source such as an externally located battery that is external to the SPU . Such an externally located battery may provide relatively uninterrupted power to RTC , and may also maintain as non-volatile at least a portion of the otherwise volatile RAM  within SPU .","In one implementation, electronic appliance power supply  is also used to power SPU . Using any external power supply as the only power source for RTC  may significantly reduce the usefulness of time based security techniques unless, at minimum, SPU  recognizes any interruption (or any material interruption) of the supply of external power, records such interruption, and responds as may be appropriate such as disabling the ability of the SPU  to perform certain or all VDE processes. Recognizing a power interruption may, for example, be accomplished by employing a circuit which is activated by power failure. The power failure sensing circuit may power another circuit that includes associated logic for recording one or more power fail events. Capacitor discharge circuitry may provide the necessary temporary power to operate this logic. In addition or alternatively, SPU  may from time to time compare an output of RTC  to a clock output of a host electronic appliance , if available. In the event a discrepancy is detected, SPU  may respond as appropriate, including recording the discrepancy and\/or disabling at least some portion of processes performed by SPU  under at least some circumstances.","If a power failure and\/or RTC  discrepancy and\/or other event indicates the possibility of tampering, SPU  may automatically destroy, or render inaccessible without privileged intervention, one or more portions of sensitive information it stores, such as execution related information and\/or encryption key related information. To provide further SPU operation, such destroyed information would have to be replaced by a VDE clearinghouse, administrator and\/or distributor, as may be appropriate. This may be achieved by remotely downloading update and\/or replacement data and\/or code. In the event of a disabling and\/or destruction of processes and\/or information as described above, the electronic appliance  may require a secure VDE communication with an administrator, clearinghouse, and\/or distributor as appropriate in order to reinitialize the RTC . Some or all secure SPU  processes may not operate until then.","It may be desirable to provide a mechanism for setting and\/or synchronizing RTC . In the preferred embodiment, when communication occurs between VDE electronic appliance  and another VDE appliance, an output of RTC  may be compared to a controlled RTC  output time under control of the party authorized to be \u201csenior\u201d and controlling. In the event of a discrepancy, appropriate action may be taken, including resetting the RTC  of the \u201cjunior\u201d controlled participant in the communication.","SPU Encrypt\/Decrypt Engine ","In the preferred embodiment, SPU encrypt\/decrypt engine  provides special purpose hardware (e.g., a hardware state machine) for rapidly and efficiently encrypting and\/or decrypting data. In some implementations, the encrypt\/decrypt functions may be performed instead by microprocessor  under software control, but providing special purpose encrypt\/decrypt hardware engine  will, in general, provide increased performance. Microprocessor  may, if desired, comprise a combination of processor circuitry and dedicated encryption\/decryption logic that may be integrated together in the same circuitry layout so as to, for example, optimally share one or more circuit elements.","Generally, it is preferable that a computationally efficient but highly secure \u201cbulk\u201d encryption\/decryption technique should be used to protect most of the data and objects handled by SPU . It is preferable that an extremely secure encryption\/decryption technique be used as an aspect of authenticating the identity of electronic appliances  that are establishing a communication channel and securing any transferred permission, method, and administrative information. In the preferred embodiment, the encrypt\/decrypt engine  includes both a symmetric key encryption\/decryption circuit (e.g. DES, Skipjack\/Clipper, IDEA, RC-2, RC-4, etc.) and an antisymmetric (asymmetric) or Public Key (\u201cPK\u201d) encryption\/decryption circuit. The public\/private key encryption\/decryption circuit is used principally as an aspect of secure communications between an SPU  and VDE administrators, or other electronic appliances , that is between VDE secure subsystems. A symmetric encryption\/decryption circuit may be used for \u201cbulk\u201d encrypting and decrypting most data stored in secondary storage  of electronic appliance  in which SPU  resides. The symmetric key encryption\/decryption circuit may also be used for encrypting and decrypting content stored within VDE objects .","DES or public\/private key methods may be used for all encryption functions. In alternate embodiments, encryption and decryption methods other than the DES and public\/private key methods could be used for the various encryption related functions. For instance, other types of symmetric encryption\/decryption techniques in which the same key is used for encryption and decryption could be used in place of DES encryption and decryption. The preferred embodiment can support a plurality of decryption\/encryption techniques using multiple dedicated circuits within encrypt\/decrypt engine  and\/or the processing arrangement within SPU .","Pattern Matching Engine ","Optional pattern matching engine  may provide special purpose hardware for performing pattern matching functions. One of the functions SPU  may perform is to validate\/authenticate VDE objects  and other items. Validation\/authentication often involves comparing long data strings to determine whether they compare in a predetermined way. In addition, certain forms of usage (such as logical and\/or physical (contiguous) relatedness of accessed elements) may require searching potentially long strings of data for certain bit patterns or other significant pattern related metrics. Although pattern matching can be performed by SPU microprocessor  under software control, providing special purpose hardware pattern matching engine  may speed up the pattern matching process.","Compression\/Decompression Engine ","An optional compression\/decompression engine  may be provided within an SPU  to, for example, compress and\/or decompress content stored in, or released from, VDE objects . Compression\/decompression engine  may implement one or more compression algorithms using hardware circuitry to improve the performance of compression\/decompression operations that would otherwise be performed by software operating on microprocessor , or outside SPU . Decompression is important in the release of data such as video and audio that is usually compressed before distribution and whose decompression speed is important. In some cases, information that is useful for usage monitoring purposes (such as record separators or other delimiters) is \u201chidden\u201d under a compression layer that must be removed before this information can be detected and used inside SPU .","Random Number Generator ","Optional random number generator  may provide specialized hardware circuitry for generating random values (e.g., from inherently unpredictable physical processes such as quantum noise). Such random values are particularly useful for constructing encryption keys or unique identifiers, and for initializing the generation of pseudo-random sequences. Random number generator  may produce values of any convenient length, including as small as a single bit per use. A random number of arbitrary size may be constructed by concatenating values produced by random number generator . A cryptographically strong pseudo-random sequence may be generated from a random key and seed generated with random number generator  and repeated encryption either with the encrypt\/decrypt engine  or cryptographic algorithms in SPU . Such sequences may be used, for example, in private headers to frustrate efforts to determine an encryption key through cryptoanalysis.","Arithmetic Accelerator ","An optional arithmetic accelerator  may be provided within an SPU  in the form of hardware circuitry that can rapidly perform mathematical calculations such as multiplication and exponentiation involving large numbers. These calculations can, for example, be requested by microprocessor  or encrypt\/decrypt engine , to assist in the computations required for certain asymmetric encryption\/decryption operations. Such arithmetic accelerators are well-known to those skilled in the art. In some implementations, a separate arithmetic accelerator  may be omitted and any necessary calculations may be performed by microprocessor  under software control.","DMA Controller ","DMA controller  controls information transfers over address\/data bus  without requiring microprocessor  to process each individual data transfer. Typically, microprocessor  may write to DMA controller  target and destination addresses and the number of bytes to transfer, and DMA controller  may then automatically transfer a block of data between components of SPU  (e.g., from ROM  to RAM , between encrypt\/decrypt engine  and RAM , between bus interface unit  and RAM , etc.). DMA controller  may have multiple channels to handle multiple transfers simultaneously. In some implementations, a separate DMA controller  may be omitted, and any necessary data movements may be performed by microprocessor  under software control.","Bus Interface Unit (BIU) ","Bus interface unit (BIU)  communicates information between SPU  and the outside world across the security barrier . BIU  shown in  plus appropriate driver software may comprise the \u201cappliance link\u201d  shown in . Bus interface unit  may be modelled after a USART or PCI bus interface in the preferred embodiment. In this example, Bit  connects SPU  to electronic appliance system bus  shown in . BIU  is designed to prevent unauthorized access to internal components within SPU  and their contents. It does this by only allowing signals associated with an SPU  to be processed by control programs running on microprocessor  and not supporting direct access to the internal elements of an SPU .","Memory Management Unit ","Memory Management Unit (MMU) , if present, provides hardware support for memory management and virtual memory management functions. It may also provide heightened security by enforcing hardware compartmentalization of the secure execution space (e.g., to prevent a less trusted task from modifying a more trusted task). More details are provided below in connection with a discussion of the architecture of a Secure Processing Environment (\u201cSPE\u201d)  supported by SPU .","MMU  may also provide hardware-level support functions related to memory management such as, for example, address mapping.","SPU Memory Architecture","In the preferred embodiment, SPU  uses three general kinds of memory:","(1) internal ROM ;","(2) internal RAM ; and","(3) external memory (typically RAM and\/or disk supplied by a host electronic appliance).","The internal ROM  and RAM  within SPU  provide a secure operating environment and execution space. Because of cost limitations, chip fabrication size, completely and other limitations, it may not be possible to provide sufficient memory within SPU  to store all information that an SPU needs to process in a secure manner. Due to the practical limits on the amount of ROM  and RAM  that may be included within SPU , SPU  may store information in memory external to it, and move this information into and out of its secure internal memory space on an as needed basis. In these cases, secure processing steps performed by an SPU typically must be segmented into small, securely packaged elements that may be \u201cpaged in\u201d and \u201cpaged out\u201d of the limited available internal memory space. Memory external to an SPL  may not be secure. Since the external memory may not be secure. SPU  may encrypt and cryptographically seal code and other information before storing it in external memory. Similarly, SPU  must typically decrypt code and other information obtained from external memory in encrypted form before processing (e.g., executing) based on it. In the preferred embodiment, there are two general approaches used to address potential memory limitations in a SPU . In the first case, the small, securely packaged elements represent information contained in secure database . In the second case, such elements may represent protected (e.g., encrypted) virtual memory pages. Although virtual memory pages may correspond to information elements stored in secure database , this is not required in this example of a SPU memory architecture.","The following is a more detailed discussion of each of these three SPU memory resources.","SPU Internal ROM","SPU  read only memory (ROM)  or comparable purpose device provides secure internal non-volatile storage for certain programs and other information. For example, ROM  may store \u201ckernel\u201d programs such as SPU control firmware  and, if desired, encryption key information and certain fundamental \u201cload modules.\u201d The \u201ckernel\u201d programs. load module information, and encryption key information enable the control of certain basic functions of the SPU . Those components that are at least in part dependent on device configuration (e.g., POST, memory allocation, and a dispatcher) may be loaded in ROM  along with additional load modules that have been determined to be required for specific installations or applications.","In the preferred embodiment, ROM  may comprise a combination of a masked ROM and an EEPROM and\/or equivalent \u201cflash\u201d memory . EEPROM or flash memory is used to store items that need to be updated and\/or initialized, such as for example, certain encryption keys. An additional benefit of providing EEPROM and\/or flash memory is the ability to optimize any load modules and library functions persistently stored within SPU  based on typical usage at a specific site. Although these items could also be stored in NVRAM , EEPROM and\/or flash memory may be more cost effective.","Masked ROM may cost less than flash and\/or EEPROM , and can be used to store permanent portions of SPU software\/firmware. Such permanent portions may include, for example, code that interfaces to hardware elements such as the RTC , encryption\/decryption engine , interrupt handlers, key generators. etc. Some of the operating system, library calls, libraries, and many of the core services provided by SPU  may also be in masked ROM . In addition, some of the more commonly used executables are also good candidates for inclusion in masked ROM . Items that need to be updated or that need to disappear when power is removed from SPU  should not be stored in masked ROM ","Under some circumstances, RAM and\/or NVRAM (NVRAM may, for example, be constantly powered conventional RAM) may perform at least part of the role of ROM .","SPU Internal RAM","SPU  general purpose RAM  provides, among other things, secure execution space for secure processes. In the preferred embodiment, RAM  is comprised of different types of RAM such as a combination of high-speed RAM and an NVRAM (\u201cnon-volatile RAM\u201d) . RAM may be volatile, while NVRAM is preferably battery backed or otherwise arranged so as to be non-volatile (i.e., it does not lose its contents when power is turned off.","High-speed RAM stores active code to be executed and associated data structures.","NVRAM preferably contains certain keys and summary values that are preloaded as part of an initialization process in which SPU  communicates with a VDE administrator, and may also store changeable or changing information associated with the operation of SPU . For security reasons, certain highly sensitive information (e.g., certain load modules and certain encryption key related information such as internally generated private keys) needs to be loaded into or generated internally by SPU  from time to time but, once loaded or generated internally, should never leave the SPU. In this preferred embodiment, the SPU  non-volatile random access memory (NVRAM) may be used for securely storing such highly sensitive information. NVRAM is also used by SPU  to store data that may change frequently but which preferably should not be lost in a power down or power fail mode.","NVRAM is preferably a flash memory array, but may in addition or alternatively be electrically erasable programmable read only memory (EEPROM), static RAM (SRAM), bubble memory, three dimensional holographic or other electro-optical memory, or the like, or any other writable (e.g., randomly accessible) non-volatile memory of sufficient speed and cost-effectiveness.","SPU External Memory","The SPU  can store certain information on memory devices external to the SPU. If available, electronic appliance  memory can also be used to support any device external portions of SPU  software. Certain advantages may be gained by allowing the SPU  to use external memory. As one example, memory internal to SPU  may be reduced in size by using non-volatile read\/write memory in the host electronic appliance  such as a non-volatile portion of RAM  and\/or ROM .","Such external memory may be used to store SPU programs, data and\/or other information. For example, a VDE control program may be, at least in part, loaded into the memory and communicated to and decrypted within SPU  prior to execution. Such control programs may be re-encrypted and communicated back to external memory where they may be stored for later execution by SPU . \u201cKernel\u201d programs and\/or some or all of the non-kernel \u201cload modules\u201d may be stored by SPU  in memory external to it. Since a secure database  may be relatively large, SPU  can store some or all of secure database  in external memory and call portions into the SPU  as needed.","As mentioned above, memory external to SPU  may not be secure. Therefore, when security is required, SPU  must encrypt secure information before writing it to external memory, and decrypt secure information read from external memory before using it. Inasmuch as the encryption layer relies on secure processes and information (e.g., encryption algorithms and keys) present within SPU , the encryption layer effectively \u201cextends\u201d the SPU security barrier  to protect information the SPU  stores in memory external to it.","SPU  can use a wide variety of different types of external memory. For example, external memory may comprise electronic appliance secondary storage  such as a disk; external EEPROM or flash memory ; and\/or external RAM . External RAM  may comprise an external nonvolatile (e.g. constantly powered) RAM and\/or cache RAM.","Using external RAM local to SPU  can significantly improve access times to information stored externally to an SPU. For example, external RAM may be used:\n\n","Using external flash memory local to SPU  can be used to significantly improve access times to virtually all data structures. Since most available flash storage devices have limited write lifetimes, flash storage needs to take into account the number of writes that will occur during the lifetime of the flash memory. Hence, flash storage of frequently written temporary items is not recommended. If external RAM is non-volatile, then transfer to flash (or hard disk) may not be necessary.","External memory used by SPU  may include two categories:\n\n","For some VDE implementations, sharing memory (e.g., electronic appliance RAM , ROM  and\/or secondary storage ) with CPU  or other elements of an electronic appliance  may be the most cost effective way to store VDE secure database management flies  and information that needs to be stored external to SPU . A host system hard disk secondary memory  used for general purpose file storage can, for example, also be used to store VDE management flies . SPU  may be given exclusive access to the external memory (e.g., over a local bus high speed connection provided by BTU ). Both dedicated and shared external memory may be provided.","SPU Integrated within CPU","As discussed above, it may be desirable to integrate CPU  and SPU  into the same integrated circuit and\/or device. SPU  shown in  includes a microprocessor  that may be similar or identical to a standard microprocessor available off-the-shelf from a variety of manufacturers. Similarly, the SPU DMA controller  and certain other microprocessor support circuitry may be standard implementations available in off-the-shelf microprocessor and\/or microcomputer chips. Since many of the general control and processing requirements provided by SPU  in the preferred embodiment can be satisfied using certain generic CPU and\/or microcontroller components, it may be desirable to integrate SPU VDE functionality into a standard generic CPU or microcontroller chip. Such an integrated solution can result in a very cost-effective \u201cdual mode\u201d component that is capable of performing all of the generic processing of a standard CPU as well as the secure processing of an SPU. Many of the control logic functions performed by the preferred embodiment SPU can be performed by generic CPU and\/or micro-controller logic so that at least a portion of the control logic does not have to be duplicated. Additional cost savings (e.g., in terms of reducing manufacturing costs, inventory costs and printed circuit board real estate requirements) may also be obtained by not requiring an additional, separate physical SPU  device or package.  shows one example architecture of a combination CPU\/SPU . CPU\/SPU  may include a standard microprocessor or microcontroller , a standard bus interface unit (BIU) , and a standard (optional) DMA controller , as well as various other standard I\/O controllers, computation circuitry, etc. as may be found in a typical off-the-shelf microprocessor\/microcontroller. Real time clock  may be added to the standard architecture to give the CPU\/SPU  access to the real time clock functions as discussed above in connection with . Real-time clock  must be protected from tampering in order to be secure. Such protections may include internal or external backup power, an indication that its power (and thus its operation) has been interrupted, and\/or an indication that the external clock signal(s) from which it derives its timing have been interfered with (e.g., sped up, slowed down). Similarly, an encrypt\/decrypt engine , pattern matching engine , compression\/decompression engine  and\/or arithmetic accelerator  may be added if desired to provide greater efficiencies, or the functions performed by these components could be provided instead by software executing on microprocessor . An optional memory management unit  may also be provided if desired. A true random number generator  may be provided also if desired. Connections shown between mode interface switch  and other components can carry both data and control information, specifically control information that determines what security-relevant aspects of the other components are available for access and\/or manipulation.","In addition, secure ROM  and\/or secure RAM  may be provided within CPU\/SPU  along with a \u201cmode interface switch\u201d , . Mode interface switch  selectively provides microprocessor  with access to secure memory ,  and other secure components (blocks , , , , , ) depending upon the \u201cmode\u2019 CPU\/SPU  is operating in CPU\/SPU  in this example may operate in two different modes:\n\n","In the \u201cnormal\u201d mode, CPU\/SPU  operates substantially identically to a standard off-the-shelf CPU while also protecting the security of the content, state, and operations of security-relevant components included in CPU\/SPU . Such security-relevant components may include the secure memories , ; the encrypt\/decrypt engine , the optional pattern-matching engine , random number generator , arithmetic accelerator , the SPU-not-initialized flag , the secure mode interface switch , the real-time clock , the DMA controller , the MMU , compress\/decompress block , and\/or any other components that may affect security of the operation of the CPU\/SPU in \u201cSPU\u201d mode.","In this example, CPU\/SPU  operating in the \u201cnormal\u201d mode controls mode interface switch  to effectively \u201cdisconnect\u201d (i.e., block unsecure access to) the security-relevant components, or to the security-relevant aspects of the operations of such components as have a function for both \u201cnormal\u201d and \u201cSPU\u201d mode. In the \u201cnormal\u201d mode, for example, microprocessor  could access information from standard registers or other internal RAM and\/or ROM (not shown), execute instructions in a \u201cnormal\u201d way, and perform any other tasks as are provided within a standard CPU\u2014but could not access or compromise the contents of secure memory ,  or access blocks , , , , . In this example \u201cnormal\u201d mode, mode interface switch  would effectively prevent any access (e.g., both read and write access) to secure memory ,  so as to prevent the information stored within that secure memory from being compromised.","When CPU\/SPU  operates in the \u201cSPU\u2019 mode, mode interface switch  allows microprocessor  to access secure memory , . and to control security-relevant aspects of other components in the CPU\/SPU. The SPU mode in this example requires all instructions executed by microprocessor  to be fetched from secure memory , \u2014preventing execution based on \u201cmixed\u201d secure and non-secure instructions. In the \u201cSPU\u201d mode, mode interface switch  may, in one example embodiment, disconnect or otherwise block external accesses carried over bus  from outside CPU\/SPU  (e.g., DMA accesses, cache coherency control accesses) to ensure that the microprocessor  is controlled entirely by instructions carried within or derived from the secure memory , . Mode interface switch  may also disconnect or otherwise block access by microprocessor  to some external memory and\/or other functions carried over bus , Mode interface switch  in this example prevents other CPU operations\/instructions from exposing the contents of secure memory , .","In the example shown in , the mode control of mode interface switch  is based on a \u201cmode\u201d control signal provided by microprocessor . In this example, microprocessor  may be slightly modified so it can execute two \u201cnew\u201d instructions:\n\n","When microprocessor  executes the \u201cenable \u2018SPU\u2019 mode\u201d instruction, it sends an appropriate \u201cmode\u201d control signal to mode interface switch  to \u201cswitch\u201d the interface switch into the \u201cSPU\u201d mode of operation. When microprocessor  executes the \u201cdisable \u2018SPU\u2019 mode\u201d instruction, it sends an appropriate \u201cmode\u201d control signal to mode interface switch  to disable the \u201cSPTJ\u201d mode of operation.","When CPU\/SPU  begins operating in the \u201cSPU\u201d mode (based on microprocessor  executing the \u201cenable \u201cSPU\u201d mode\u201d instruction), mode interface switch  forces microprocessor  to begin fetching instructions from secure memory ,  (e.g., beginning at some fixed address) in one example. When CPU\/SPU  begins operating in this example \u201cSPU\u201d mode, mode interface switch  may force microprocessor  to load its registers from some fixed address in secure memory ,  and may begin execution based on such register content. Once operating in the \u201cSPU\u201d mode, microprocessor  may provide encryption\/decryption and other control capabilities based upon the code and other content of secure memory ,  needed to provide the VDE functionality of SPU  described above. For example, microprocessor  operating under control of information within secure memory ,  may read encrypted information from bus  via bus interface unit , write decrypted information to the bus interface unit, and meter and limit decryption of such information based on values stored in the secure memory.","At the end of secure processing, execution by microprocessor  of the \u201cdisable SPU mode\u201d instruction may cause the contents of all registers and other temporary storage locations used by microprocessor  that are not within secure memory ,  to be destroyed or copied into secure memory ,  before \u201copening\u201d mode interface switch , Once mode interface switch  is \u201copen,\u201d the microprocessor  no longer has access to secure memory ,  or the information it contained, or to control or modify the state of any other security-relevant components or functions contained within CPU\/SPU  to which access is controlled by mode interface switch .","Whenever CPU\/SPU  enters or leaves the \u201cSPU\u201d mode, the transition is performed in such a way that no information contained in the secure memory ,  or derived from it (e.g. stored in registers or a cache memory associated with microprocessor ) while in the \u201cSPU\u201d mode can be exposed by microprocessor  operations that occur in the \u201cnormal\u201d mode, This may be accomplished either by hardware mechanisms that protect against such exposure, software instructions executed in \u201cSPU\u201d mode that clear, reinitialize, and otherwise reset during such transitions, or a combination of both.","In some example implementations, interrupts may be enabled while CPU\/SPU  is operating in the \u201cSPU\u201d mode similarly interrupts and returns from interrupts while in the \u201cSPU\u201d mode may allow transitions from \u201cSPU\u2019 mode to \u201cnormal\u201d mode and back to \u201cSPU\u201d mode without exposing the content of secure memory ,  or the content of registers or other memory associated with microprocessor  that may contain information derived from secure mode operation.","In some example implementations, there may be CPU\/SPU activities such as DMA transfers between external memory and\/or devices and secure memory ,  that are initiated by microprocessor  but involve autonomous activity by DMA controller  and, optionally, encrypt\/decrypt engine  and\/or compress\/decompress engine . In such implementations, mode interface switch  and its associated control signals may be configured to permit such pending activities (e.g. DMA transfers) to continue to completion even after CPU\/SPU  leaves \u201cSPU\u201d mode. provided that upon completion, all required clearing, reinitialization, and\/or reset activities occur, and provided that no access or interference is permitted with the pending activities except when CPU\/SPU  is operating in \u201cSPU\u201d mode.","In an additional example embodiment, encryption\/decryption logic may be connected between microprocessor  and secure memory , . This additional encryption\/decryption logic may be connected \u201cin parallel\u201d to mode interface switch . The additional encryption\/decryption logic may allow certain accesses by microprocessor  to the secure memory ,  when CPU\/SPU  is operating in the \u201cnormal\u201d mode. In this alternate embodiment, reads from secure memory ,  when CPU\/SPU  is operating in the \u201cnormal\u201d mode automatically result in the read information being encrypted before it is delivered to microprocessor  (and similarly, and writes to the secure memory may result in the written information being decrypted before it is deposited into the secure memory). This alternative embodiment may permit access to secure memory ,  (which may in this example store the information in \u201cclear\u2019 form) by microprocessor  when CPU\/SPU  is operating in the \u201cnon-secure normal\u201d mode, but only reveals the secure memory contents to microprocessor  in unencrypted form when the CPU\/SPU is operating in the \u201cSPU\u201d mode. Such access may also be protected by cryptographic authentication techniques (e.g., message authentication codes) to prevent modification or replay attacks that modify encrypted data stored in secure memory , . Such protection may be performed utilizing either or both of software and\/or hardware cryptographic techniques.","All of the components shown in  may be disposed within a single integrated circuit package. Alternatively, mode interface switch  and secure memory , , and other security-relevant components might be placed within an integrated circuit chip package and\/or other package separate from the rest of CPU\/SPU . In this two-package version, a private bus could be used to connect microprocessor  to the mode interface switch  and associated secure memory , . To maintain security in such multi-package versions, it may be necessary to enclose all the packages and their interconnections in an external physical tamper-resistant barrier.","Initialization of Integrated CPU\/SPU","Instructions and\/or data may need to be loaded into CPU\/SPU  before it can operate effectively as an SPU . This may occur during the manufacture of CPU\/SPU  or subsequently at a CPU\/SPU initialization facility. Security of such initialization may depend on physical control of access to the CPU\/SPU component(s), on cryptographic means, or on some combination of both. Secure initialization may be performed in plural steps under the control of different parties, such that an initialization step to be performed by party B is preconditioned on successful performance of a step by party A. Different initialization steps may be protected using different security techniques (e.g. physical access, cryptography).","In this example, switch  may expose an external control signal  that requests operation in \u201cSPU\u201d mode rather than \u201cnormal\u201d mode after a power-on reset. This signal would be combined (e.g., by a logical AND ) with a non-volatile storage element  internal to CPU\/SPU . If both of these signals are asserted, AND gate  would cause CPU\/SPU  to begin operating in SPU mode, either executing existing instructions from an address in SPU memory , executing instructions from main memory  or otherwise external to the CPU\/SPU. The instructions thus executed would permit arbitrary initialization and other functions to be performed in \u201cSPU\u201d mode without necessarily requiring any instructions to be previously resident in the SPU memory .","Once initialized, the SPU would, under control of its initialization program, indicate to switch  that the flag  is to be cleared. Clearing flag  would permanently disable this initialization capability because no mechanism would be provided to set flag  back to its initial value. If flag  is clear, or control signal  is not asserted, CPU\/SPU  would behave precisely as does microprocessor  with respect to power-on reset and other external conditions. Under such conditions, only execution of the \u201cenable SPU mode\u201d instruction or otherwise requesting SPU mode under program control would cause \u201cSPU\u201d mode to be entered.","Additionally, a mechanism could be provided to permit microprocessor  and\/or control signal  to reinitialize the flag . Such reinitialization would be performed in a manner that cleared secure memory ,  of any security-relevant information and reinitialized the state of all security-relevant components. This reinitialization mechanism would permit CPU\/SPU  to be initialized several times, facilitating testing and\/or re-use for different applications, while protecting all security-relevant aspects of its operation.","In the preferred embodiment, CPU\/SPU  would, when SPU mode has not yet been established, begin operating in SPU mode by fetching instructions from secure non-volatile memory , thereby ensuring a consistent initialization sequence and preventing SPU dependence on any information held outside CPU\/SPU . This approach permits secret initialization information (e.g., keys for validating digital signatures on additional information to be loaded into secure memory , ) to be held internally to CPU\/SPU  so that it is never exposed to outside access. Such information could even be supplied by a hardware \u201cmask\u201d used in the semiconductor fabrication process.","CPU\/SPU Integrated with Unmodified Microprocessor",{"@attributes":{"id":"p-0387","num":"0572"},"figref":"FIG. 9B","b":["2652","2650","2660","2652","2660","2661","502"]},"In this embodiment, SPU chip  may have the same secure components as in , i.e., it may have a ROM\/EEPROM , a RAM , an RTC , an (optional) encryption\/decryption engine , an (optional) random number generator (RNG) , an (optional) arithmetic accelerator , and a (optional) compression\/decompression engine , and a (optional) pattern matching circuit , Microprocessor  is omitted from SPU chip  since the standard microprocessor  performs the processing functions instead. In addition, SPU chip  may include a flag  and AND gate logic  for the initialization purposes discussed above.","In addition, SPU chip  includes an enhanced switch  that provides the same overall (bus enhanced) functionality performed by the switch  in the  embodiment.","Enhanced switch  would perform the functions of a bus repeater, mediator and interpreter. For example, enhanced switch  may act as a bus repeater that enables microprocessor 's memory accesses made over internal memory bus  to be reflected to external memory bus  and performed on main memory . Enhanced switch  may also act as a bus repeater similarly for internal I\/O bus  to external I\/O bus  in the event that microprocessor  performs 110 operations distinctly from memory operations. Enhanced switch  may also perform the function of a mediator for microprocessor control functions  (e.g., non-maskable interrupt, reset) with respect to externally requested control functions . Enhanced switch  may also provide mediation for access to SPU-protected resources such as ROM , RAM , encrypt\/decrypt engine  (if present), random number generator  (if present), arithmetic accelerator  (if present), pattern matching engine  (if present), and real-time clock  (if present). Enhanced switch  may also act as an interpreter of control signals received from microprocessor  indicating entry to, exit from, and control of SPU mode.","Switch  in this example recognizes a specific indication (e.g., an instruction fetch access to a designated address in the secure memory ) as the equivalent to the \u201cenable \u2018SPU\u2019 mode\u201d instruction. Upon recognizing such an indication, it may isolate the CPU\/SPU  from external buses and interfaces , , and  such that any external activity, such as DMA cycles, would be \u201cheld\u201d until the switch  permits access again. After this, switch  permits a single access to a specific location in secure memory  to complete.","The single instruction fetched from the designated location performs a control operation (a cache flush, for example), that can only be performed in microprocessor 's most privileged operating mode, and that has an effect visible to switch . Switch  awaits the occurrence of this event, and if it does not occur within the expected number of cycles, does not enter \u201cSPU\u201d mode.","Occurrence of the control operation demonstrates that microprocessor  is executing in its most privileged \u201cnormal\u201d mode and therefore can be trusted to execute successfully the \u201center \u2018SPU\u2019 mode\u201d sequence of instructions stored in secure memory . If microprocessor  were not executing in its most privileged mode, there would be no assurance that those instructions would execute successfully. Because switch  isolates microprocessor  from external signals (e.g., interrupts) until \u201cSPU\u201d mode is successfully initialized, the entry instructions can be guaranteed to complete successfully.","Following the initial instruction, switch  can enter \u201cpartial SPU mode,\u201d in which a restricted area of ROM  and RAM  may be accessible. Subsequent instructions in secure memory  may then be executed by microprocessor  to place it into a known state such that it can perform SPU functions\u2014saving any previous state in the restricted area of RAM  that is accessible. After the known state is established, an instruction may be executed to deliver a further indication (e.g, a reference to another designated memory location) to switch , which would enter \u201cSPU\u201d mode. If this further indication is not received within the expected interval, switch  will not enter \u201cSPU\u201d mode. Once in \u201cSPU\u201d mode, switch  permits access to all of ROM , RAM , and other devices in SPU chip .","The instructions executed during \u201cpartial SPU\u201d mode must be carefully selected to ensure that no similar combination of instructions and processor state could result in a control transfer out of the protected SPU code in ROM  or RAM . For example, internal debugging features of microprocessor  must be disabled to ensure that a malicious program could not set up a breakpoint later within protected SPU code and receive control. Similarly, all address translation must be disabled or reinitialized to ensure that previously created MMU data structures would not permit SPU memory accesses to be compromised. The requirement that the instructions for \u201cpartial SPU mode\u201d run in the microprocessor 's most privileged mode is necessary to ensure that all its processor control functions can be effectively disabled.","The switch  provides additional protection against tampering by ensuring that the expected control signals occur after an appropriate number of clock cycles. Because the \u201cpartial SPU\u201d initialization sequence is entirely deterministic, it is not feasible for malicious software to interfere with it and still retain the same timing characteristics, even if malicious software is running in microprocessor 's most privileged mode.","Once in \u201cSPU\u201d mode, switch  may respond to additional indications or signals generated by microprocessor  (e.g., references to specific memory addresses) controlling features of SPU mode. These might include enabling access to external buses  and  so that SPU-protected code could reference external memory or devices. Any attempts by components outside CPU\/SPU  to perform operations (e.g. accesses to memory, interrupts, or other control functions) may be prevented by switch  unless they had been explicitly enabled by instructions executed after \u201cSPU\u201d mode is entered.","To leave SPU mode and return to normal operation, the instructions executing in \u201cSPU\u201d mode may provide a specific indication to switch  (e.g., a transfer to a designated memory address). This indication may be recognized by switch  as indicating a return to \u201cnormal mode,\u201d and it may again restrict access to ROM , RAM , and all other devices within SPU chip , while re-enabling external buses and control lines , , and . The instructions executed subsequently may restore the CPU state to that which was saved on entry to SPU mode, so that microprocessor  may continue to perform functions in progress when the SPU was invoked.","In an alternate embodiment, the entry into SPU mode may be conditioned on an indication recognized by switch , but the switch may then use a hardware mechanism (e.g., the processor's RESET signal) to reinitialize microprocessor . In such an embodiment, switch  may not implement partial SPU mode, but may instead enter SPU mode directly and ensure that the address from which instructions would be fetched by microprocessor  (specific to microprocessor 's architecture) results in accesses to appropriate locations in the SPU memory . This could reduce the complexity of the SPU mode entry mechanisms in switch , but could incur an additional processing cost from using a different reinitialization mechanism for microprocessor .","SPU chip  may be customized to operate in conjunction with a particular commercial microprocessor. In this example, the SPU may be customized to contain at least the specialized \u201center SPU mode\u201d instruction sequences to reinitialize the processor's state and, to recognize special indications for SPU control operations. SPU chip  may also be made electrically compatible with microprocessor 's external bus interfaces. This compatibility would permit CPU\/SPU  to be substituted for microprocessor  without change either to software or hardware elsewhere in a computer system.","In other alternate embodiments, the functions described above for SPU chip , microprocessor , and internal buses , , and  could all be combined within a single integrated circuit package, and\/or on a single silicon die. This could reduce packaging complexity and\/or simplify establishment of the hardware tamper-resistant barrier .","The hardware configuration of an example of electronic appliance  has been described above. The following section describes an example of the software architecture of electronic appliance  provided by the preferred embodiment, including the structure and operation of preferred embodiment \u201cRights Operating System\u201d (\u201cROS\u201d) .","Rights Operating System ","Rights Operating System (\u201cROS\u201d)  in the preferred embodiment is a compact, secure, event-driven, services-based, \u201ccomponent\u201d oriented, distributed multiprocessing operating system environment that integrates VDE information security control information, components and protocols with traditional operating system concepts. Like traditional operating systems, ROS  provided by the preferred embodiment is a piece of software that manages hardware resources of a computer system and extends management functions to input and\/or output devices, including communications devices. Also like traditional operating systems, preferred embodiment ROS  provides a coherent set of basic functions and abstraction layers for hiding the differences between, and many of the detailed complexities of, particular hardware implementations. In addition to these characteristics found in many or most operating systems. ROS  provides secure VDE transaction management and other advantageous features not found in other operating systems. The following is a non-exhaustive list of some of the advantageous features provided by ROS  in the preferred embodiment:","Standardized Interface Provides Coherent Set of Basic Functions",{"@attributes":{"id":"p-0404","num":"0000"},"ul":{"@attributes":{"id":"ul0067","list-style":"none"},"li":{"@attributes":{"id":"ul0067-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0068","list-style":"none"},"li":["simplifies programming","the same application can run on many different platforms\n\nEvent Driven\n","eases functional decomposition","extendible","accommodates state transition and\/or process oriented events","simplifies task management","simplifies inter-process communications\n\nServices Based\n","allows simplified and transparent scalability","simplifies multiprocessor support","hides machine dependencies","eases network management and support\n\nComponent Based Architecture\n","processing based on independently deliverable secure components","component model of processing control allows different sequential steps that are reconfigurable based on requirements","components can be added, deleted or modified (subject to permissioning)","full control information over pre-defined and user-defined application events","events can be individually controlled with independent executables.\n\nSecure\n","secure communications","secure control functions","secure virtual memory management","information control structures protected from exposure","data elements are validated, correlated and access controlled","components are encrypted and validated independently","components are tightly correlated to prevent unauthorized use of elements","control structures and secured executables are validated prior to use to protect against tampering","integrates security considerations at the I\/O level","provides on-the-fly decryption of information at release time","enables a secure commercial transaction network","flexible key management features\n\nScalaeble\n","highly scalaeble across many different platforms","supports concurrent processing in a multiprocessor environment","supports multiple cooperating processors","any number of host or security processors can be supported","control structures and kernel are easily portable to various host platforms and to different processors within a target platform without recompilation","supports remote processing","Remote Procedure Calls may be used for internal OS communications\n\nHighly Integratable\n","can be highly integrated with host platforms as an additional operating system layer","permits non-secure storage of secured components and information using an OS layer \u201con top of\u201d traditional OS platforms","can be seamlessly integrated with a host operating system to provide a common usage paradigm for transaction management and content access","integration may take many forms: operating system layers for desktops (e.g., DOS, Windows, Macintosh); device drivers and operating system interfaces for network services (e.g., Unix and Netware and dedicated component drivers for \u201clow end\u201d set tops are a few of many examples","can be integrated in traditional and real time operating systems\n\nDistributed\n","provides distribution of control information and reciprocal control information and mechanisms","supports conditional execution of controlled processes within any VDE node in a distributed, asynchronous arrangement","controlled delegation of rights in a distributed environment","supports chains of handling and control","management environment for distributed, occasionally connected but otherwise asynchronous networked database","real time and time independent data management","supports \u201cagent\u201d processes\n\nTransparent\n","can be seamlessly integrated into existing operating systems","can support applications not specifically written to use it\n\nNetwork Friendly\n","internal OS structures may use RPCs to distribute processing","subnets may seamlessly operate as a single node or independently\n\nGeneral Background Regarding Operating Systems\n"]}}}},"An \u201coperating system\u201d provides a control mechanism for organizing computer system resources that allows programmers to create applications for computer systems more easily. An operating system does this by providing commonly used functions, and by helping to ensure compatibility between different computer hardware and architectures (which may, for example, be manufactured by different vendors). Operating systems also enable computer \u201cperipheral device\u201d manufacturers to far more easily supply compatible equipment to computer manufacturers and users.","Computer systems are usually made up of several different hardware components. These hardware components include, for example:\n\n","To organize the CPU's execution capabilities with available RAM, ROM and secondary storage devices, and to provide commonly used functions for use by programmers, a piece of software called an \u201coperating system\u201d is usually included with the other components. Typically, this piece of software is designed to begin executing after power is applied to the computer system and hardware diagnostics are completed. Thereafter, all use of the CPU, main memory and secondary memory devices is normally managed by this \u201coperating system\u201d software. Most computer operating systems also typically include a mechanism for extending their management functions to I\/O and other peripheral devices, including commonly used functions associated with these devices.","By managing the CPU, memory and peripheral devices through the operating system, a coherent set of basic functions and abstraction layers for hiding hardware details allows programmers to more easily create sophisticated applications. In addition, managing the computer's hardware resources with an operating system allows many differences in design and equipment requirements between different manufacturers to be hidden. Furthermore, applications can be more easily shared with other computer users who have the same operating system, with significantly less work to support different manufacturers' base hardware and peripheral devices.","ROS  is an Operating System Providing Significant Advantages","ROS  is an \u201coperating system.\u201d It manages the resources of electronic appliance , and provides a commonly used set of functions for programmers writing applications  for the electronic appliance. ROS  in the preferred embodiment manages the hardware (e.g., CPU(s), memory(ies), secure RTC(s), and encrypt\/decrypt engines) within SPU . ROS may also manage the hardware (e.g., CPU(s) and memory(ies)) within one or more general purpose processors within electronic appliance . ROS  also manages other electronic appliance hardware resources, such as peripheral devices attached to an electronic appliance. For example, referring to , ROS  may manage keyboard , display , modem , disk drive , printer , scanner . ROS  may also manage secure database  and a storage device (e.g., \u201csecondary storage\u201d ) used to store secure database .","ROS  supports multiple processors. ROS  in the preferred embodiment supports any number of local and\/or remote processors. Supported processors may include at least two types: one or more electronic appliance processors , and\/or one or more SPUs . A host processor CPU  may provide storage, database, and communications services. SPU  may provide cryptographic and secured process execution services. Diverse control and execution structures supported by ROS  may require that processing of control information occur within a controllable execution space\u2014this controllable execution space may be provided by SPU . Additional host and\/or SPU processors may increase efficiencies and\/or capabilities. ROS  may access, coordinate and\/or manage further processors remote to an electronic appliance  (e.g., via network or other communications link) to provide additional processor resources and\/or capabilities.","ROS  is services based. The ROS services provided using a host processor  and\/or a secure processor (SPU ) are linked in the preferred embodiment using a \u201cRemote Procedure Call\u201d (\u201cRPC\u201d) internal processing request structure. Cooperating processors may request interprocess services using a RPC mechanism, which is minimally time dependent and can be distributed over cooperating processors on a network of hosts. The multi-processor architecture provided by ROS  is easily extensible to support any number of host or security processors. This extensibility supports high levels of scalability. Services also allow functions to be implemented differently on different equipment. For example, a small appliance that typically has low levels of usage by one user may implement a database service using very different techniques than a very large appliance with high levels of usage by many users. This is another aspect of scalability.","ROS  provides a distributed processing environment. For example, it permits information and control structures to automatically, securely pass between sites as required to fulfill a user's requests. Communications between VDE nodes under the distributed processing features of ROS  may include interprocess service requests as discussed above. ROS  supports conditional and\/or state dependent execution of controlled processors within any VDE node. The location that the process executes and the control structures used may be locally resident, remotely accessible, or carried along by the process to support execution on a remote system.","ROS  provides distribution of control information, including for example the distribution of control structures required to permit \u201cagents\u201d to operate in remote environments. Thus, ROS  provides facilities for passing execution and\/or information control as part of emerging requirements for \u201cagent\u201d processes.","If desired, ROS  may independently distribute control information over very low bandwidth connections that may or may not be \u201creal time\u201d connections. ROS  provided by the preferred embodiment is \u201cnetwork friendly,\u201d and can be implemented with any level of networking protocol. Some examples include e-mail and direct connection at approximately \u201cLayer 5\u201d of the ISO model.","The ROS  distribution process (and the associated auditing of distributed information) is a controlled event that itself uses such control structures. This \u201creflective\u201d distributed processing mechanism permits ROS  to securely distribute rights and permissions in a controlled manner, and effectively restrict the characteristics of use of information content. The controlled delegation of rights in a distributed environment and the secure processing techniques used by ROS  to support this approach provide significant advantages.","Certain control mechanisms within ROS  are \u201creciprocal.\u201d Reciprocal control mechanisms place one or more control components at one or more locations that interact with one or more components at the same or other locations in a controlled way. For example, a usage control associated with object content at a user's location may have a reciprocal control at a distributor's location that governs distribution of the usage control, auditing of the usage control, and logic to process user requests associated with the usage control. A usage control at a user's location (in addition to controlling one or more aspects of usage) may prepare audits for a distributor and format requests associated with the usage control for processing by a distributor. Processes at either end of a reciprocal control may be further controlled by other processes (e.g., a distributor may be limited by a budget for the number of usage control mechanisms they may produce). Reciprocal control mechanisms may extend over many sites and many levels (e.g., a creator to a distributor to a user) and may take any relationship into account (e.g., creator\/distributor, distributor\/user, user\/user, user\/creator, user\/creator\/distributor, etc.) Reciprocal control mechanisms have many uses in VDE  in representing relationships and agreements in a distributed environment.","ROS  is scalable. Many portions of ROS  control structures and kernel(s) are easily portable to various host platforms without recompilation. Any control structure may be distributed (or redistributed) if a granting authority permits this type of activity. The executable references within ROS  are portable within a target platform. Different instances of ROS  may execute the references using different resources. For example, one instance of ROS  may perform a task using an SPU , while another instance of ROS  might perform the same task using a host processing environment running in protected memory that is emulating an SPU in software. ROS  control information is similarly portable; in many cases the event processing structures may be passed between machines and host platforms as easily as between cooperative processors in a single computer. Appliances with different levels of usage and\/or resources available for ROS  functions may implement those functions in very different ways. Some services may be omitted entirely if insufficient resources exist. As described elsewhere, ROS  \u201cknows\u201d what services are available, and how to proceed based on any given event. Not all events may be processable if resources are missing or inadequate.","ROS  is component based. Much of the functionality provided by ROS  in the preferred embodiment may be based on \u201ccomponents\u201d that can be securely, independently deliverable, replaceable and capable of being modified (e.g., under appropriately secure conditions and authorizations). Moreover, the \u201ccomponents\u201d may themselves be made of independently deliverable elements. ROS  may assemble these elements together (using a construct provided by the preferred embodiment called a \u201cchannel\u201d) at execution time. For example, a \u201cload module\u201d for execution by SPU  may reference one or more \u201cmethod cores,\u201d method parameters and other associated data structures that ROS  may collect and assemble together to perform a task such as billing or metering. Different users may have different combinations of elements, and some of the elements may be customizable by users with appropriate authorization. This increases flexibility, allows elements to be reused, and has other advantages.","ROS  is highly secure. ROS  provides mechanisms to protect information control structures from exposure by end users and conduit hosts. ROS  can protect information, VDE control structures and control executables using strong encryption and validation mechanisms. These encryption and validation mechanisms are designed to make them highly resistant to undetected tampering. ROS  encrypts information stored on secondary storage device(s)  to inhibit tampering. ROS  also separately encrypts and validates its various components. ROS  correlates control and data structure components to prevent unauthorized use of elements. These features permit ROS  to independently distribute elements, and also allows integration of VDE functions  with non-secure \u201cother\u201d OS functions .","ROS  provided by the preferred embodiment extends conventional capabilities such as, for example, Access Control List (ACL) structures, to user and process defined events, including state transitions. ROS  may provide full control information over pre-defined and user-defined application events. These control mechanisms include \u201cgo\/no-go\u201d permissions, and also include optional event-specific executables that permit complete flexibility in the processing and\/or controlling of events. This structure permits events to be individually controlled so that, for example, metering and budgeting may be provided using independent executables. For example, ROS  extends ACL structures to control arbitrary granularity of information. Traditional operating systems provide static \u201cgo-no go\u201d control mechanisms at a file or resource level; ROS  extends the control concept in a general way from the largest to the smallest sub-element using a flexible control structure. ROS  can, for example, control the printing of a single paragraph out of a document file.","ROS  provided by the preferred embodiment permits secure modification and update of control information governing each component. The control information may be provided in a template format such as method options to an end-user. An end-user may then customize the actual control information used within guidelines provided by a distributor or content creator. Modification and update of existing control structures is preferably also a controllable event subject to auditing and control information.","ROS  provided by the preferred embodiment validates control structures and secured executables prior to use. This validation provides assurance that control structures and executables have not been tampered with by end-users. The validation also permits ROS  to securely implement components that include fragments of flies and other operating system structures. ROS  provided by the preferred embodiment integrates security considerations at the operating system I\/O level (which is below the access level), and provides \u201con-the-fly\u201d decryption of information at release time. These features permit non-secure storage of ROS  secured components and information using an OS layer \u201con top of\u201d traditional operating system platforms.","ROS  is highly integratable with host platforms as an additional operating system layer. Thus, ROS  may be created by \u201cadding on\u201d to existing operating systems. This involves hooking VDE \u201cadd ons\u201d to the host operating system at the device driver and network interface levels. Alternatively, ROS  may comprise a wholly new operating system that integrates both VDE functions and other operating system functions.","Indeed, there are at least three general approaches to integrating VDE functions into a new operating system, potentially based on an existing operating system, to create a Rights Operating System  including:","(1) Redesign the operating system based on VDE transaction management requirements:","(2) Compile VDE API functions into an existing operating systems; and","(3) Integrate a VDE Interpreter into an existing operating system.","The first approach could be most effectively applied when a new operating system is being designed, or if a significant upgrade to an existing operating system is planned. The transaction management and security requirements provided by the VDE functions could be added to the design requirements list for the design of a new operating system that provides, in an optimally efficient manner, an integration of \u201ctraditional\u201d operating system capabilities and VDE capabilities. For example, the engineers responsible for the design of the new version or instance of an operating system would include the requirements of VDE metering\/transaction management in addition to other requirements (if any) that they use to form their design approach, specifications, and actual implementations. This approach could lead to a \u201cseamless\u201d integration of VDE functions and capabilities by threading metering\/transaction management functionality throughout the system design and implementation.","The second approach would involve taking an existing set of API (Application Programmer Interface) functions, and incorporating references in the operating system code to VDE function calls. This is similar to the way that the current Windows operating system is integrated with DOS, wherein DOS serves as both the launch point and as a significant portion of the kernel underpinning of the Windows operating system. This approach would be also provide a high degree of \u201cseamless\u201d integration (although not quite as \u201cseamless\u201d as the first approach). The benefits of this approach include the possibility that the incorporation of metering\/transaction management functionality into the new version or instance of an operating system may be accomplished with lower cost (by making use of the existing code embodied in an API, and also using the design implications of the API functional approach to influence the design of the elements into which the metering\/transaction management functionality is incorporated).","The third approach is distinct from the first two in that it does not incorporate VDE functionality associated with metering\/transaction management and data security directly into the operating system code, but instead adds a new generalized capability to the operating system for executing metering\/transaction management functionality. In this case, an interpreter including metering\/transaction management functions would be integrated with other operating system code in a \u201cstand alone\u201d mode. This interpreter might take scripts or other inputs to determine what metering\/transaction management functions should be performed, and in what order and under which circumstances or conditions they should be performed.","Instead of (or in addition to) integrating VDE functions into\/with an electronic appliance operating system, it would be possible to provide certain VDE functionality available as an application running on a conventional operating system.","ROS Software Architecture",{"@attributes":{"id":"p-0432","num":"0670"},"figref":"FIG. 10","b":["602","602","679","682","684","692","686","687","602","655","503","650"]},"HPE(s)  and SPE(s)  are self-contained computing and processing environments that may include their own operating system kernel  including code and data processing resources. A given electronic appliance  may include any number of SPE(s)  and\/or any number of HPE(s) . HPE(s)  and SPE(s)  may process information in a secure way, and provide secure processing support for ROS . For example, they may each perform secure processing based on one or more VDE component assemblies , and they may each offer secure processing services to OS kernel .","In the preferred embodiment, SPE  is a secure processing environment provided at least in part by an SPU . Thus, SPU  provides the hardware tamper-resistant barrier  surrounding SPE . SPE  provided by the preferred embodiment is preferably:\n\n","In the preferred embodiment, HPE  is a secure processing environment supported by a processor other than an SPU, such as for example an electronic appliance CPU  general-purpose microprocessor or other processing system or device. In the preferred embodiment, EPE  may be considered to \u201cemulate\u201d an SPU  in the sense that it may use software to provide some or all of the processing resources provided in hardware and\/or firmware by an SPU. HPE  in one preferred embodiment of the present invention is full-featured and fully compatible with SPE \u2014that is, HPE  can handle each and every service call SPE  can handle such that the SPE and the HPE are \u201cplug compatible\u201d from an outside interface standpoint (with the exception that the HPE may not provide as much security as the SPE).","HPEs  may be provided in two types: secure and not secure. For example, it may be desirable to provide non-secure versions of HPE  to allow electronic appliance  to efficiently run non-sensitive VDE tasks using the full resources of a fast general purpose processor or computer. Such non-secure versions of HPE  may run under supervision of an instance of ROS  that also includes an SPE . In this way, ROS  may run all secure processes within SPE , and only use HPE  for processes that do not require security but that may require (or run more efficiently) under potentially greater resources provided by a general purpose computer or processor supporting HPE . Non-secure and secure HPE  may operate together with a secure SPE .","HPEs  may (as shown in ) be provided with a software-based tamper resistant barrier  that makes them more secure. Such a software-based tamper resistant barrier  may be created by software executing on general-purpose CPU . Such a \u201csecure\u201d HPE  can be used by ROS  to execute processes that, while still needing security, may not require the degree of security provided by SPU . This can be especially beneficial in architectures providing both an SPE  and an HPE . The SPU  may be used to perform all truly secure processing, whereas one or more HPEs  may be used to provide additional secure (albeit possibly less secure than the SPE) processing using host processor or other general purpose resources that may be available within an electronic appliance . Any service may be provided by such a secure HPE . In the preferred embodiment, certain aspects of \u201cchannel processing\u201d appears to be a candidate that could be readily exported from SPE  to HPE .","The software-based tamper resistant barrier  provided by HPE  may be provided, for example, by introducing time checks and\/or code modifications to complicate the process of stepping through code comprising a portion of kernel and\/or a portion of component assemblies  using a debugger; using a map of defects on a storage device (e.g., a hard disk, memory card, etc.) to form internal test values to impede moving and\/or copying HPE  to other electronic appliances ; using kernel code that contains false branches and other complications in flow of control to disguise internal processes to some degree from disassembly or other efforts to discover details of processes; using \u201cself-generating\u201d code (based on the output of a co-sine transform, for example) such that detailed and\/or complete instruction sequences are not stored explicitly on storage devices and\/or in active memory but rather are generated as needed; using code that \u201cshuffles\u201d memory locations used for data values based on operational parameters to complicate efforts to manipulate such values: using any software and\/or hardware memory management resources of electronic appliance  to \u201cprotect\u201d the operation of HPE  from other processes, functions, etc. Although such a software-based tamper resistant barrier  may provide a fair degree of security, it typically will not be as secure as the hardware-based tamper resistant barrier  provided (at least in part) by SPU . Because security may be better\/more effectively enforced with the assistance of hardware security features such as those provided by SPU  (and because of other factors such as increased performance provided by special purpose circuitry within SPU ), at least one SPE  is preferred for many or most higher security applications. However, in applications where lesser security can be tolerated and\/or the cost of an SPU  cannot be tolerated, the SPE  may be omitted and all secure processing may instead be performed by one or more secure HPEs  executing on general-purpose CPUs . Some VDE processes may not be allowed to proceed on reduced-security electronic appliances of this type if insufficient security is provided for the particular process involved.","Only those processes that execute completely within SPEs  (and in some cases, HPEs ; may be considered to be truly secure. Memory and other resources external to SPE  and HPEs  used to store and\/or process code and\/or data to be used in secure processes should only receive and handle that information in encrypted form unless SPE \/HPE  can protect secure process code and\/or data from non-secure processes.","OS \u201ccore\u201d  in the preferred embodiment includes a kernel , an RPC manager , and an \u201cobject switch\u201d . API , HPE  and SPE  may communicate \u201cevent\u201d messages with one another via OS \u201ccore\u201d . They may also communicate messages directly with one another without messages going through OS \u201ccore\u201d .","Kernel  may manage the hardware of an electronic appliance . For example, it may provide appropriate drivers and hardware managers for interacting with input\/output and\/or peripheral devices such as keyboard , display , other devices such as a \u201cmouse\u201d pointing device and speech recognizer , modem , printer , and an adapter for network . Kernel  may also be responsible for initially loading the remainder of ROS , and may manage the various ROS tasks (and associated underlying hardware resources) during execution. OS kernel  may also manage and access secure database  and file system . OS kernel  also provides execution services for applications (), (), etc. and other applications.","RPC manager  performs messaging routing and resource management integration for ROS . It receives and routes \u201ccalls\u201d from\/to API , HPE  and SPE , for example.","Object switch  may manage construction, deconstruction and other manipulation of VDE objects .","User Notification\/Exception Interface  in the preferred embodiment (which may be considered part of API  or another application coupled to the API) provides \u201cpop up\u201d windows\/displays on display . This allows ROS  to communicate directly with a user without having to pass information to be communicated through applications . For applications that are not \u201cVDE aware,\u201d user notification\/exception interface  may provide communications between ROS  and the user.","API  in the preferred embodiment provides a standardized, documented software interface to applications . In part, API  may translate operating system \u201ccalls\u201d generated by applications  into Remote Procedure Calls (\u201cRPCs\u201d) specifying \u201cevents.\u201d RPC manager  may route these RPCs to kernel  or elsewhere (e.g., to HPE(s)  and\/or SPE(s) , or to remote electronic appliances , processors, or VDE participants) for processing. The API  may also service RPC requests by passing them to applications  that register to receive and process specific requests.","API  provides an \u201cApplications Programming Interface\u201d that is preferably standardized and documented. It provides a concise set of function calls an application program can use to access services provided by ROS . In at least one preferred example, API  will include two parts: an application program interface to VDE functions ; and an application program interface to other OS functions . These parts may be interwoven into the same software, or they may be provided as two or more discrete pieces of software (for example).","Some applications, such as application () shown in , may be \u201cVDE aware\u201d and may therefore directly access both of these parts of API .  shows an example of this. A \u201cVDE aware\u201d application may, for example, include explicit calls to ROS  requesting the creation of new VDE objects , metering usage of VDE objects, storing information in VDE-protected form, etc. Thus, a \u201cVDE aware\u201d application can initiate (and, in some examples, enhance and\/or extend) VDE functionality provided by ROS . In addition, \u201cVDE aware\u201d applications may provide a more direct interface between a user and ROS  (e.g., by suppressing or otherwise dispensing with \u201cpop up\u201d displays otherwise provided by user notification\/exception interface  and instead providing a more \u201cseamless\u201d interface that integrates application and ROS messages).","Other applications, such as application shown in , may not be \u201cVDE Aware\u201d and therefore may not \u201cknow\u201d how to directly access an interface to VDE functions  provided by API . To provide for this, ROS  may include a \u201credirector\u201d  that allows such \u201cnon-VDE aware\u201d applications () to access VDE objects  and functions . Redirector , in the preferred embodiment, translates OS calls directed to the \u201cother OS functions\u201d  into calls to the \u201cVDE functions\u201d . As one simple example, redirector  may intercept a \u201cfile open\u201d call from application (), determine whether the file to be opened is contained within a VDE container , and if it is, generate appropriate VDE function call(s) to file system  to open the VDE container (and potentially generate events to HPE  and\/or SPE  to determine the name(s) of file(s) that may be stored in a VDE object , establish a control structure associated with a VDE object , perform a registration for a VDE object , etc.). Without redirector  in this example, a non-VDE aware application such as could access only the part of API  that provides an interface to other OS functions , and therefore could not access any VDE functions.","This \u201ctranslation\u201d feature of redirector  provides \u201ctransparency.\u201d It allows VDE functions to be provided to the application () in a \u201ctransparent\u201d way without requiring the application to become involved in the complexity and details associated with generating the one or more calls to VDE functions . This aspect of the \u201ctransparency\u201d features of ROS  has at least two important advantages:\n\n","Referring again to , ROS  may also include an \u201cinterceptor\u201d  that transmits and\/or receives one or more real time data feeds  (this may be provided over cable(s)  for example), and routes one or more such data feeds appropriately while providing \u201ctranslation\u201d functions for real time data sent and\/or received by electronic appliance  to allow \u201ctransparency\u201d for this type of information analogous to the transparency provided by redirector  (and\/or it may generate one or more real time data feeds).","Secure ROS Components and Component Assemblies","As discussed above, ROS  in the preferred embodiment is a component-based architecture. ROS VDE functions  may be based on segmented, independently loadable executable \u201ccomponent assemblies\u201d . These component assemblies  are independently securely deliverable. The component assemblies  provided by the preferred embodiment comprise code and data elements that are themselves independently deliverable. Thus, each component assembly  provided by the preferred embodiment is comprised of independently securely deliverable elements which may be communicated using VDE secure communication techniques between VDE secure subsystems.","These component assemblies  are the basic functional unit provided by ROS . The component assemblies  are executed to perform operating system or application tasks. Thus, some component assemblies  may be considered to be part of the ROS operating system , while other component assemblies may be considered to be \u201capplications\u201d that run under the support of the operating system. As with any system incorporating \u201capplications\u201d and \u201coperating systems,\u201d the boundary between these aspects of an overall system can be ambiguous. For example, commonly used \u201capplication\u201d functions (such as determining the structure and\/or other attributes of a content container) may be incorporated into an operating system. Furthermore, \u201coperating system\u201d functions (such as task management, or memory allocation) may be modified and\/or replaced by an application. A common thread in the preferred embodiment's ROS  is that component assemblies  provide functions needed for a user to fulfill her intended activities, some of which may be \u201capplication-like\u201d and some of which may be \u201coperating system-like.\u201d","Components  are preferably designed to be easily separable and individually loadable. ROS  assembles these elements together into an executable component assembly  prior to loading arid executing the component assembly (e.g., in a secure operating environment such as SPE  and\/or HPE ). ROS  provides an element identification and referencing mechanism that includes information necessary to automatically assemble elements into a component assembly  in a secure manner prior to, and\/or during, execution.","ROS  application structures and control parameters used to form component assemblies  can be provided by different parties. Because the components forming component assemblies  are independently securely deliverable, they may be delivered at different times and\/or by different parties (\u201cdelivery\u201d may take place within a local VDE secure subsystem, that is submission through the use of such a secure subsystem of control information by a chain of content control information handling participant for the preparation of a modified control information set constitutes independent, secure delivery). For example, a content creator can produce a ROS  application that defines the circumstances required for licensing content contained within a VDE object . This application may reference structures provided by other parties. Such references might, for example, take the form of a control path that uses content creator structures to meter user activities; and structures created\/owned by a financial provider to handle financial parts of a content distribution transaction (e.g., defining a credit budget that must be present in a control structure to establish creditworthiness, audit processes which must be performed by the licensee, etc.). As another example, a distributor may give one user more favorable pricing than another user by delivering different data elements defining pricing to different users. This attribute of supporting multiple parry securely, independently deliverable control information is fundamental to enabling electronic commerce, that is, defining of a content and\/or appliance control information set that represents the requirements of a collection of independent parties such as content creators, other content providers, financial service providers, and\/or users.","In the preferred embodiment ROS  assembles securely independently deliverable elements into a component assembly  based in part on context parameters (e.g., object, user). Thus, for example, ROS  may securely assemble different elements together to form different component assemblies  for different users performing the same task on the same VDE object . Similarly, ROS  may assemble differing element sets which may include, that is reuse, one or more of the same components to form different component assemblies  for the same user performing the same task on different VDE objects .","The component assembly organization provided by ROS  is \u201crecursive\u201d in that a component assembly  may comprise one or more component \u201csubassemblies\u201d that are themselves independently loadable and executable component assemblies . These component \u201csubassemblies\u201d may, in turn, be made of one or more component \u201csub-sub-assemblies.\u201d In the general case, a component assembly  may include N levels of component subassemblies.","Thus, for example, a component assembly () that may includes a component subassembly (+1). Component subassembly (+1), in turn, may include a component sub-sub-assembly (), . . . and so on to N-level subassembly (+N). The ability of ROS  to build component assemblies  out of other component assemblies provides great advantages in terms of, for example, code\/data reusability, and the ability to allow different parties to manage different parts of an overall component.","Each component assembly  in the preferred embodiment is made of distinct components.  are abstract depictions of various distinct components that may be assembled to form a component assembly () showing . These same components can be combined in different ways (e.g., with more or less components) to form different component assemblies  providing completely different functional behavior.  is an abstract depiction of the same components being put together in a different way (e.g., with additional components) to form a different component assembly (). The component assemblies () and () each include a common feature  that interlocks with a \u201cchannel\u201d  defined by ROS . This \u201cchannel\u201d  assembles component assemblies  and interfaces them with the (rest of) ROS .","ROS  generates component assemblies  in a secure manner. As shown graphically in , the different elements comprising a component assembly  may be \u201cinterlocking\u201d in the sense that they can only go together in ways that are intended by the VDE participants who created the elements and\/or specified the component assemblies. ROS  includes security protections that can prevent an unauthorized person from modifying elements, and also prevent an unauthorized person from substituting elements. One can picture an unauthorized person making a new element having the same \u201cshape\u201d as the one of the elements shown in , and then attempting to substitute the new element in place of the original element. Suppose one of the elements shown in  establishes the price for using content within a VDE object . If an unauthorized person could substitute her own \u201cprice\u201d element for the price element intended by the VDE content distributor, then the person could establish a price of zero instead of the price the content distributor intended to charge. Similarly, if the element establishes an electronic credit card, then an ability to substitute a different element could have disastrous consequences in terms of allowing a person to charge her usage to someone else's (or a non-existent) credit card. These are merely a few simple examples demonstrating the importance of ROS  ensuring that certain component assemblies  are formed in a secure manner. ROS  provides a wide range of protections against a wide range of \u201cthreats\u201d to the secure handling and execution of component assemblies .","In the preferred embodiment. ROS  assembles component assemblies  based on the following types of elements:","Permissions Records (\u201cPERC\u201ds) ;","Method \u201cCares\u201d ;","Load Modules ;","Data Elements (e.g., User Data Elements (\u201cUDEs\u201d)  and Method Data Elements (\u201cMDEs\u201d) ); and","Other component assemblies .","Briefly, a PERC  provided by the preferred embodiment is a record corresponding to a VDE object  that identifies to ROS , among other things, the elements ROS is to assemble together to form a component assembly . Thus PERC  in effect contains a \u201clist of assembly instructions\u201d or a \u201cplan\u201d specifying what elements ROS  is to assemble together into a component assembly and how the elements are to be connected together. PERC  may itself contain data or other elements that are to become part of the component assembly .","The PERC  may reference one or more method \u201ccores\u201d . A method core  may define a basic \u201cmethod\u201d  (e.g., \u201ccontrol,\u201d \u201cbilling,\u201d \u201cmetering,\u201d etc.)","In the preferred embodiment, a \u201cmethod\u201d  is a collection of basic instructions, and information related to basic instructions, that provides context, data, requirements, and\/or relationships for use in performing, and\/or preparing to perform, basic instructions in relation to the operation of one or more electronic appliances . Basic instructions may be comprised of, for example:\n\n","Information relating to said basic instructions may comprise, for example, data associated intrinsically with basic instructions such as for example, an identifier for the combined basic instructions and intrinsic data, addresses, constants and\/or the like. The information may also, for example, include one or more of the following:\n\n","Such information associated with a method may be stored, in part or whole, separately from basic instructions and intrinsic data. When these components are stored separately, a method may nevertheless include and encompass the other information and one or more sets of basic instructions and intrinsic data (the latter being included because of said other information's reference to one or more sets of basic instructions and intrinsic data), whether or not said one or more sets of basic instructions and intrinsic data are accessible at any given point in time.","Method core \u2032 may be parameterized by an \u201cevent code\u201d to permit it to respond to different events in different ways. For example, a METER method may respond to a \u201cuse\u201d event by storing usage information in a meter data structure. The same METER method may respond to an \u201cadministrative\u201d event by reporting the meter data structure to a VDE clearinghouse or other VDE participant.","In the preferred embodiment, method core \u2032 may \u201ccontain,\u201d either explicitly or by reference, one or more \u201cload, modules\u201d  and one or more data elements (UDEs , MDEs ). In the preferred embodiment, a \u201cload module\u201d  is a portion of a method that reflects basic instructions and intrinsic data. Load modules  in the preferred embodiment contain executable code, and may also contain data elements (\u201cDTDs\u201d ) associated with the executable code. In the preferred embodiment, load modules  supply the program instructions that are actually \u201cexecuted\u201d by hardware to perform the process defined by the method. Load modules  may contain or reference other load modules.","Load modules  in the preferred embodiment are modular and \u201ccode pure\u201d so that individual load modules may be reenterable and reusable. In order for components  to be dynamically updatable, they may be individually addressable within a global public name space. In view of these design goals, load modules  are preferably small, code (and code-like) pure modules that are individually named and addressable. A single method may provide different load modules  that perform the same or similar functions on different platforms, thereby making the method scalable and\/or portable across a wide range of different electronic appliances.","UDEs  and MDEs  may store data for input to or output from executable component assembly  (or data describing such inputs and\/or outputs). In the preferred embodiment, UDEs  may be user dependent, whereas MDEs  may be user independent.","The component assembly example () shown in  comprises a method core \u2032, UDEs & , an MDE , load modules -, and a further component assembly (+1). As mentioned above, a PERC () defines, among other things, the \u201cassembly instructions\u201d for component assembly (), and may contain or reference parts of some or all of the components that are to be assembled to create a component assembly.","One of the load modules shown in this example is itself comprised of plural load modules , . Some of the load modules (e.g., , ) in this example include one or more \u201cDTD\u201d data elements  (e.g., , ). \u201cDTD\u201d data elements  may be used, for example, to inform load module of the data elements included in MDE  and\/or UDEs , . Furthermore, DTDs  may be used as an aspect of forming a portion of an application used to inform a user as to the information required and\/or manipulated by one or more load modules , or other component elements. Such an application program may also include functions for creating and\/or manipulating UDE(s) , MDE(s) , or other component elements, subassemblies, etc.","Components within component assemblies  may be \u201creused\u201d to form different component assemblies. As mentioned above,  is an abstract depiction of one example of the same components used for assembling component assembly () to be reused (e.g., with some additional components specified by a different set of \u201cassembly instructions\u201d provided in a different PERC ()) to form a different component assembly (). Even though component assembly () is formed from some of the same components used to form component assembly (), these two component assemblies may perform completely different processes in complete different ways.","As mentioned above, ROS  provides several layers of security to ensure the security of component assemblies . One important security layer involves ensuring that certain component assemblies  are formed, loaded and executed only in secure execution space such as provided within an SPU . Components  and\/or elements comprising them may be stored on external media encrypted using local SPU  generated and\/or distributor provided keys.","ROS  also provides a tagging and sequencing scheme that may be used within the loadable component assemblies  to detect tampering by substitution. Each element comprising a component assembly  may be loaded into an SPU , decrypted using encrypt\/decrypt engine , and then tested\/compared to ensure that the proper element has been loaded. Several independent comparisons may be used to ensure there has been no unauthorized substitution. For example, the public and private copies of the element ID may be compared to ensure that they are the same, thereby preventing gross substitution of elements. In addition, a validation\/correlation tag stored under the encrypted layer of the loadable element may be compared to make sure it matches one or more tags provided by a requesting process. This prevents unauthorized use of information. As a third protection, a device assigned tag (e.g., a sequence number) stored under an encryption layer of a loadable element may be checked to make sure it matches a corresponding tag value expected by SPU . This prevents substitution of older elements. Validation\/correlation tags are typically passed only in secure wrappers to prevent plaintext exposure of this information outside of SPU .","The secure component based architecture of ROS  has important advantages. For example, it accommodates limited resource execution environments such as provided by a lower cost SPU . It also provides an extremely high level of configurability. In fact, ROS  will accommodate an almost unlimited diversity of content types, content provider objectives, transaction types and client requirements. In addition, the ability to dynamically assemble independently deliverable components at execution time based on particular objects and users provides a high degree of flexibility, and facilitates or enables a distributed database, processing, and execution environment.","One aspect of an advantage of the component-based architecture provided by ROS  relates to the ability to \u201cstage\u201d functionality and capabilities over time. As designed, implementation of ROS  is a finite task. Aspects of its wealth of functionality can remain unexploited until market realities dictate the implementation of corresponding VDE application functionality. As a result, initial product implementation investment and complexity may be limited. The process of \u201csurfacing\u201d the full range of capabilities provided by ROS  in terms of authoring, administrative, and artificial intelligence applications may take place over time. Moreover, already-designed functionality of ROS  may be changed or enhanced at any time to adapt to changing needs or requirements.","More Detailed Discussion of Rights Operating System  Architecture",{"@attributes":{"id":"p-0482","num":"0739"},"figref":["FIG. 12","FIG. 10"],"b":["602","602","687","730","728","730","610","728","300"]},{"@attributes":{"id":"p-0483","num":"0740"},"figref":"FIG. 12","b":["602","503","655","655","500","655","500","655","503","500","655","600"]},"As mentioned above, three basic components of ROS  are a kernel , a Remote Procedure Call (RPC) manager  and an object switch . These components, and the way they interact with other portions of ROS  will be discussed below.","Kernel ","Kernel  manages the basic hardware resources of electronic appliance , and controls the basic tasking provided by ROS . Kernel  in the preferred embodiment may include a memory manager , a task manager , and an I\/O manager . Task manager may initiate and\/or manage initiation of executable tasks and schedule them to be executed by a processor on which ROS  runs (e.g., CPU  shown in ). For example, Task manager may include or be associated with a \u201cbootstrap loader\u201d that loads other parts of ROS . Task manager may manage all tasking related to ROS , including tasks associated with application program(s) . Memory manager may manage. allocation, deallocation, sharing and\/or use of memory (e.g., RAM  shown in ) of electronic appliance , and may for example provide virtual memory capabilities as required by an electronic appliance and\/or associated application(s). I\/O manager may manage all input to and output from ROS , and may interact with drivers and other hardware managers that provide communications and interactivity with physical devices.","RPC Manager ","ROS  in a preferred embodiment is designed around a \u201cservices based\u201d Remote Procedure Call architecture\/interface. All functions performed by ROS  may use this common interface to request services and share information. For example, SPE(s)  provide processing for one or more RPC based services. In addition to supporting SPUs , the RPC interface permits the dynamic integration of external services and provides an array of configuration options using existing operating system components. ROS  also communicates with external services through the RPC interface to seamlessly provide distributed and\/or remote processing. In smaller scale instances of ROS , a simpler message passing IPC protocol may be used to conserve resources. This may limit the configurability of ROS  services, but this possible limitation may be acceptable in some electronic appliances.","The RPC structure allows services to be called\/requested without the calling process having to know or specify where the service is physically provided, what system or device will service the request, or how the service request will be fulfilled. This feature supports families of services that may be scaled and\/or customized for specific applications. Service requests can be forwarded and serviced by different processors and\/or different sites as easily as they can be forwarded and serviced by a local service system. Since the same RPC interface is used by ROS  in the preferred embodiment to request services within and outside of the operating system, a request for distributed and\/or remote processing incurs substantially no additional operating system overhead. Remote processing is easily and simply integrated as part of the same service calls used by ROS  for requesting local-based services. In addition, the use of a standard RPC interface (\u201cRSI\u201d) allows ROS  to be modularized, with the different modules presenting a standardized interface to the remainder of the operating system. Such modularization and standardized interfacing permits different vendors\/operating system programmers to create different portions of the operating system independently, and also allows the functionality of ROS  to be flexibly updated and\/or changed based on different requirements and\/or platforms.","RPC manager  manages the RPC interface. It receives service requests in the form of one or more \u201cRemote Procedure Calls\u201d (RPCs) from a service requester, and routes the service requests to a service provider(s) that can service the request. For example, when rights operating system  receives a request from a user application via user API , RPC manager  may route the service request to an appropriate service through the \u201cRPC service interface\u201d (\u201cRSI\u201d). The RSI is an interface between RPC manager , service requesters, and a resource that will accept and service requests.","The RPC interface (RSI) is used for several major ROS  subsystems in the preferred embodiment.","RPC services provided by ROS  in the preferred embodiment are divided into subservices, i.e., individual instances of a specific service each of which may be tracked individually by the RPC manager . This mechanism permits multiple instances of a specific service on higher throughput systems while maintaining a common interface across a spectrum of implementations. The subservice concept extends to supporting multiple processors, multiple SPEs , multiple HPEs , and multiple communications services.","The preferred embodiment ROS  provides the following RPC based service providers\/requestors (each of which have an RPC interface or \u201cRSI\u201d that communicates with RPC manager ):\n\n","The types of services provided by HPE , SPE , User Notification , API  and Redirector  have already been described above. Here is a brief description of the type(s) of services provided by OS resources , , ,  and :\n\n","Object switch  handles, controls and communicates (both locally and remotely) VDE objects . In the preferred embodiment, the object switch may include the following elements:\n\n","Object switch  communicates through an Object Switch Interface (\u201cOSI\u201d) with other parts of ROS . The Object Switch Interface may resemble, for example, the interface for a Unix socket in the preferred embodiment. Each of the \u201cOSI\u201d interfaces shown in  have the ability to communicate with object switch .","ROS  includes the following object switch service providers\/resources (each of which can communicate with the object switch  through an \u201cOSI\u201d):\n\n","Briefly,\n\n","In the preferred embodiment, communications manager  may include a network manager  and a mail gateway (manager) . Mail gateway  may include one or more mail filters  to, for example, automatically route VDE related electronic mail between object switch  and the outside world electronic mail services. External Services Manager  may interface to communications manager  through a Service Transport Layer . Service Transport Layer may enable External Services Manager  to communicate with external computers and systems using various protocols managed using the service transport layer .","The characteristics of and interfaces to the various subsystems of ROS  shown in  are described in more detail below.","RPC Manager  and its RPC Service Interface","As discussed above, the basic system services provided by ROS  are invoked by using an RPC service interface RSI. This RPC service interface provides a generic, standardized interface for different services systems and subsystems provided by ROS .","RPC Manager  routes RPCs requesting services to an appropriate RPC service interface. In the preferred embodiment, upon receiving an RPC call, RPC manager  determines one or more service managers that are to service the request. RPC manager  then routes a service request to the appropriate service(s) (via a RSI associated with a service) for action by the appropriate service manager(s).","For example, if a SPE  is to service a request, the RPC Manager  routes the request to RSI , which passes the request on to SPE device driver  for forwarding to the SPE. Similarly, if HPE  is to service the request, RPC Manager  routes the request to RSI for forwarding to a HPE. In one preferred embodiment, SPE  and HPE  may perform essentially the same services so that RSIs , are different instances of the same RSI. Once a service request has been received by SPE  (or HPE ), the SPE (or HPE) typically dispatches the request internally using its own internal RPC manager (as will be discussed shortly). Processes within SPEs  and HPEs  can also generate RPC requests. These requests may be processed internally by a SPE\/HPE, or if not internally serviceable, passed out of the SPE\/HPE for dispatch by RPC Manager .","Remote (and local) procedure calls may be dispatched by a RPC Manager  using an \u201cRPC Services Table.\u201d An RPC Services Table describes where requests for specific services are to be routed for processing. Each row of an RPC Services Table in the preferred embodiment contains a services ID, the location of the service, and an address to which control will be passed to service, a request. An RPC Services Table may also include control information that indicates which instance of the RPC dispatcher controls the service. Both RPC Manager  and any attached SPEs  and HPEs  may have symmetric copies of the RPC Services Table. If an RPC service is not found in the RPC services tables, it is either rejected or passed to external services manager  for remote servicing.","Assuming RPC manager  finds a row corresponding to the request in an RPC Services Table, it may dispatch the request to an appropriate RSI. The receiving RSI accepts a request from the RPC manager  (which may have looked up the request in an RPC service table), and processes that request in accordance with internal priorities associated with the specific service.","In the preferred embodiment, RPC Service Interface(s) supported by RPC Manager  may be standardized and published to support add-on service modules developed by third party vendors, and to facilitate scalability by making it easier to program ROS . The preferred embodiment RSI closely follows the DOS and Unix device driver models for block devices so that common code may be developed for many platforms with minimum effort. An example of one possible set of common entry points are listed below in the table.",{"@attributes":{"id":"p-0505","num":"0795"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Interface call","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SVC_LOAD","Load a service manager and return its status."]},{"entry":["SVC_LOAD","Unload a service manager."]},{"entry":["SVC_MOUNT","Mount (load) a dynamically loaded subservice and"]},{"entry":[{},"return its status."]},{"entry":["SVC_UNMOUNT","Unmount (unload) a dynamically loaded subservice."]},{"entry":["SVC_OPEN","Open a mounted subservice."]},{"entry":["SVC_CLOSE","Close a mounted subservice."]},{"entry":["SVC_READ","Read a block from an opened subservice."]},{"entry":["SVC_WRITE","Write a block to an opened subservice."]},{"entry":["SVC_IOCTL","Control a subservice or a service manager."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In the preferred embodiment, services (and the associated RSIs they present to RPC manager ) may be activated during boot by an installation boot process that issues an RPC LOAD. This process reads an RPC Services Table from a configuration file, loads the service module if it is run time loadable (as opposed to being a kernel linked device driver), and then calls the LOAD entry point for the service. A successful return from the LOAD entry point will indicate that the service has properly loaded and is ready to accept requests.","RPC LOAD Call Example: SVC_LOAD (long service_id)","This LOAD interface call is called by the RPC manager  during rights operating system  initialization. It permits a service manager to load any dynamically loadable components and to initialize any device and memory required by the service. The service number that the service is loaded as is passed in as service_id parameter. In the preferred embodiment, the service returns  is the initialization process was completed successfully or an error number if some error occurred.","Mount","Once a service has been loaded, it may not be fully functional for all subservices. Some subservices (e.g., communications based services) may require the establishment of additional connections, or they may require additional modules to be loaded. If the service is defined as \u201cmountable,\u201d a RPC manager  will call the MOUNT subservice entry point with the requested subservice ID prior to opening an instance of a subservice.","RPC MOUNT Call Example:",{"@attributes":{"id":"p-0509","num":"0000"},"ul":{"@attributes":{"id":"ul0089","list-style":"none"},"li":{"@attributes":{"id":"ul0089-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0090","list-style":"none"},"li":"SVC_MOUNT (long service_id, long subservice_id, BYTE *buffer)"}}}},"This MOUNT interface call instructs a service to make a specific subservice ready. This may include services related to networking, communications, other system services, or external resources. The service_id and subservice_id parameters may be specific to the specific service being requested. The buffer parameter is a memory address that references a control structure appropriate to a specific service.","Open","Once a service is loaded and \u201cmounted,\u201d specific instances of a service may be \u201copened\u201d for use. \u201cOpening\u201d an instance of a service may allocate memory to store control and status information. For example, in a BSD socket based network connection, a LOAD call will initialize the software and protocol control tables, a MOUNT call will specify networks and hardware resources, and an OPEN will actually open a socket to a remote installation.","Some services, such as commercial database manager  that underlies the secure database service, may not be \u201cmountable.\u201d In this case, a LOAD call will make a connection to a database manager  and ensure that records are readable. An OPEN call may create instances of internal cache manager  for various classes of records.","RPC OPEN Call Example:",{"@attributes":{"id":"p-0513","num":"0000"},"ul":{"@attributes":{"id":"ul0091","list-style":"none"},"li":{"@attributes":{"id":"ul0091-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0092","list-style":"none"},"li":"SVC_OPEN (long service_id, long subservice_id, BYTE *buffer, int (*receive) (long request_id))"}}}},"This OPEN interface call instructs a service to open a specific subservice. The service_id and subservice_id parameters are specific to the specific service being requested, and the buffer parameter is a memory address that references a control structure appropriate to a specific service.","The optional receive parameter is the address of a notification callback function that is called by a service whenever a message is ready for the service to retrieve it. One call to this address is made for each incoming message received. If the caller passes a NULL to the interface, the software will not generate a callback for each message.","Close, Unmount and Unload","The converse of the OPEN, MOUNT, and LOAD calls are CLOSE, UNMOUNT, and UNLOAD. These interface calls release any allocated resources back to ROS  (e.g., memory manager ).","RPC CLOSE Call Example: SVC_C LOSE (long svc_handle)","This LOAD interface call closes an open service \u201chandle.\u201d A service \u201chandle\u201d describes a service and subservice that a user wants to close. The call returns  if the CLOSE request succeeds (and the handle is no longer valid) or an error number.","RPC UNLOAD Call Example: SVC_UNLOAD (void)","This UNLOAD interface call is called by a RPC manager  during shutdown or resource reallocation of rights operating system . It permits a service to close any open connections, flush buffers, and to release any operating system resources that it may have allocated. The service returns .","RPC UNMOUNT Call Example: SVC_UNMOUNT (long service_id, long subservice_id)","This UNMOUNT interface call instructs a service to deactivate a specific subservice. The service_id and subservice_id parameters are specific to the specific service being requested, and must have been previously mounted using the SVC_MOUNT( ) request. The call releases all system resources associated with the subservice before it returns.","Read and Write","The READ and WRITE calls provide a basic mechanism for sending information to and receiving responses from a mounted and opened service. For example, a service has requests written to it in the form of an RPC request, and makes its response available to be read by RPC Manager  as they become available.","RPC READ Call Example:",{"@attributes":{"id":"p-0521","num":"0000"},"ul":{"@attributes":{"id":"ul0093","list-style":"none"},"li":{"@attributes":{"id":"ul0093-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0094","list-style":"none"},"li":"SVC_READ (long svc_handle, long request_id, BYTE *buffer, long size)"}}}},"This READ call reads a message response from a service. The svc_handle and request_id parameters uniquely identify a request. The results of a request will be stored in the user specified buffer up to size bytes. If the buffer is too small, the first size bytes of the message will be stored in the buffer and an error will be returned.","If a message response was returned to the caller's buffer correctly, the function will return . Otherwise, an error message will be returned.","RPC WRITE Call Example:",{"@attributes":{"id":"p-0524","num":"0000"},"ul":{"@attributes":{"id":"ul0095","list-style":"none"},"li":{"@attributes":{"id":"ul0095-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0096","list-style":"none"},"li":"SVC_write (long service_id, long subservice_id, BYTE *buffer, long size, int (*receive) (long request_id)"}}}},"This WRITE call writes a message to a service and subservice specified by the service_id\/subservice_id parameter pair. The message is stored in buffer (and usually conforms to the VDE RPC message format) and is size bytes long. The function returns the request id for the message (if it was accepted for sending) or an error number. If a user specifies the receive callback functions, all messages regarding a request will be sent to the request specific callback routine instead of the generalized message callback.","Input\/Output Control","The IOCTL (\u201cInput\/Output ConTroL\u201d) call provides a mechanism for querying the status of and controlling a loaded service. Each service type will respond to specific general IOCTL requests, all required class IOCTL requests, and service specific IOCTL requests.","RPC IOCTL Call Example: ROI_SVC_IOCTL (long service_id, long subservice_id,","int command, BYTE *buffer)","This IOCTL function provides a generalized control interface for a RSI. A user specifies the service_id parameter and an optional subservice_id parameter that they wish to control. They specify the control command parameter(s), and a buffer into\/from which the command parameters may be written\/read. An example of a list of commands and the appropriate buffer structures are given below.",{"@attributes":{"id":"p-0529","num":"0819"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Command","Structure","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GET_INFO","SVC_INFO","Returns information about a"]},{"entry":[{},{},"service\/subservice."]},{"entry":["GET_STATS","SVC_STATS","Returns current statistics about a"]},{"entry":[{},{},"service\/subservice."]},{"entry":["CLR_STATS","None","Clears the statistics about a"]},{"entry":[{},{},"service\/subservice."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Now that a generic RPC Service Interface provided by the preferred embodiment has been described, the following description relates to particular examples of services provided by ROS .","SPE Devices Driver ","SPE device driver  provides an interface between ROS  and SPE . Since SPE  in the preferred embodiment runs within the confines of an SPU , one aspect of this device driver  is to provide low level communications services with the SPU  hardware. Another aspect of SPE device driver  is to provide an RPC service interface (RSI) particular to SPE  (this same RSI may be used to communicate with HPE  through HPE device driver ).","SPE RSI and driver  isolates calling processes within ROS  (or external to the ROS) from the detailed service provided by the SPE  by providing a set of basic interface points providing a concise function set. This has several advantages. For example, it permits a full line of scaled SPUs  that all provide common functionality to the outside world but which may differ in detailed internal structure and architecture. SPU  characteristics such as the amount of memory resident in the device, processor speed, and the number of services supported within SPU  may be the decision of the specific SPU manufacturer, and in any event may differ from one SPU configuration to another. To maintain compatibility, SPE device driver  and the RSI it provides conform to a basic common RPC interface standard that \u201chides\u201d differences between detailed configurations of SPUs  and\/or the SPEs  they may support.","To provide for such compatibility, SPE RSI in the preferred embodiment follows a simple block based standard. In the preferred embodiment, an SPE RSI may be modeled after the packet interfaces for network Ethernet cards. This standard closely models the block mode interface characteristics of SPUs  in the preferred embodiment.","An SPE RSI allows RPC calls from RPC manager  to access specific services provided by an SPE . To do this, SPE RSI provides a set of \u201cservice notification address interfaces.\u201d These provide interfaces to individual services provided by SPE  to the outside world. Any calling process within ROS  may access these SPE-provided services by directing an RPC call to SPE RSI and specifying a corresponding \u201cservice notification address\u201d in an RPC call. The specified \u201cservice notification address\u201d causes SPE  to internally route an RPC call to a particular service within an SPE. The following is a listing of one example of a SPE service breakdown for which individual service notification addresses may be provided:","Channel Services Manager","Authentication Manager\/Secure Communications Manager","Secure Database Manager","The Channel Services Manager is the principal service provider and access point to SPE  for the rest of ROS . Event processing, as will be discussed later, is primarily managed (from the point of view of processes outside SPE ) by this service. The Authentication Manager\/Secure Communications Manager may provide login\/logout services for users of ROS , and provide a direct service for managing communications (typically encrypted or otherwise protected) related to component assemblies , VDE objects , etc. Requests for display of information (e.g., value remaining in a financial budget) may be provided by a direct service request to a Secure Database Manager inside SPE . The instances of Authentication Manager\/Secure Communications Manager and Secure Database Manager, if available at all, may provide only a subset of the information and\/or capabilities available to processes operating inside SPE . As stated above, most (potentially all) service requests entering SPE are routed to a Channel Services Manager for processing. As will be discussed in more detail later on, most control structures and event processing logic is associated with component assemblies  under the management of a Channel Services Manager.","The SPE  must be accessed through its associated SPE driver  in this example. Generally, calls to SPE driver  are made in response to RPC calls. In this example, SPE driver RSI may translate RPC calls directed to control or ascertain information about SPE driver  into driver calls. SPE driver RSI in conjunction with driver  may pass RPC calls directed to SPE  through to the SPE.","The following table shows one example of SPE device driver  calls:",{"@attributes":{"id":"p-0541","num":"0831"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Entry Point","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SPE_info( )","Returns summary information about the"]},{"entry":[{},"SPE driver 736 (and SPE 503)."]},{"entry":["SPE_initialize_interface( )","Initializes SPE driver 736, and sets the"]},{"entry":[{},"default notification address for received"]},{"entry":[{},"packets."]},{"entry":["SPE_terminate_interface( )","Terminates SPE driver 736 and resets"]},{"entry":[{},"SPU 500 and the driver 736."]},{"entry":["SPE_reset_interface( )","Resets driver 736 without resetting"]},{"entry":[{},"SPU 500."]},{"entry":["SPE_get_stats( )","Return statistics for notification addresses"]},{"entry":[{},"and\/or an entire driver 736."]},{"entry":["SPE_clear_stats( )","Clears statistics for a specific notification"]},{"entry":[{},"address and\/or an entire driver 736."]},{"entry":["SPE_set_notify( )","Sets a notification address for a specific"]},{"entry":[{},"service ID."]},{"entry":["SPE_get_notify( )","Returns a notification address for a"]},{"entry":[{},"specific service ID."]},{"entry":["SPE_tx_pkt( )","Sends a packet (e.g., containing an RPC"]},{"entry":[{},"call) to SPE 503 for processing."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following are more detailed examples of each of the SPE driver calls set forth in the table above.","Example of an \u201cSPE Information\u201d Driver Cell: SPE_info (void)","This function returns a pointer to an SPE_INFO data structure that defines the SPE device driver . This data structure may provide certain information about SPE device driver , RSI and\/or SPU . An example of a SPE_INFO structure is described below:",{"@attributes":{"id":"p-0544","num":"0834"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version Number\/ID for SPE"]},{"entry":[{},"Device Driver 736"]},{"entry":[{},"Version Number\/ID for SPE"]},{"entry":[{},"Device Driver RSI 736"]},{"entry":[{},"Pointer to name of SPE Device"]},{"entry":[{},"Driver 736"]},{"entry":[{},"Pointer to ID name of SPU"]},{"entry":[{},"500"]},{"entry":[{},"Functionality Code Describing"]},{"entry":[{},"SPE Capabilities\/functionality"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"A receiver function passed in by way of a parameter will be called for all packets received from SPE  unless their destination service is over-ridden using the set_notify( ) call. A receiver function allows ROS  to specify a format for packet communication between RPC manager  and SPE .","This function returns \u201c\u201d in the preferred embodiment if the initialization of the interface succeeds and non-zero if it fails. If the function fails, it will return a code that describes the reason for the failure as the value of the function.","Example of an SPE \u201cTerminate Interface\u201d Driver Call: SPE_terminate_interface (void)","In the preferred embodiment, this function shuts down SPE Driver , clears all notification addresses, and terminates all outstanding requests between an SPE and an ROS RPC manager . It also resets an SPE  (e.g., by a warm reboot of SPU ) after all requests are resolved.","Termination of driver  should be performed by ROS  when the operating system is starting to shut down. It may also be necessary to issue this call if an SPE  and ROS  get so far out of synchronization that all processing in an SPE must be reset to a known state.","Example of an SPE \u201cReset Interface\u201d Driver Call: SPE_reset_interface (void)","This function resets driver , terminates all outstanding requests between SPE  and an ROS RPC manager , and clears all statistics counts. It does not reset the SPU , but simply restores driver  to a known stable state.","Example of an SPE \u201cGet Statistics\u201d Driver Call: SPE get stats (long service_id)","This function returns statistics for a specific service notification interface or for the SPE driver  in general. It returns a pointer to a static buffer that contains these statistics or NULL if statistics are unavailable (either because an interface is not initialized or because a receiver address was not specified). An example of the SPE_STATS structure may have the following definition:",{"@attributes":{"id":"p-0551","num":"0841"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Service id"]},{"entry":[{},"# packets rx"]},{"entry":[{},"# packets tx"]},{"entry":[{},"# bytes rx"]},{"entry":[{},"# bytes tx"]},{"entry":[{},"# errors rx"]},{"entry":[{},"# errors tx"]},{"entry":[{},"# requests tx"]},{"entry":[{},"# req tx completed"]},{"entry":[{},"# req tx cancelled"]},{"entry":[{},"# req rx"]},{"entry":[{},"# req rx completed"]},{"entry":[{},"# req rx cancelled"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If a user specifies a service ID, statistics associated with packets sent by that service are returned. If a user specified  as the parameter, the total packet statistics for the interface are returned.","Example of an SPE \u201cClear Statistics\u201d Driver Call: SPE_clear_stats (long service_id)","This function dears statistics associated with the SPE service_id specified. If no service_id is specified (i.e., the caller passes in ), global statistics will be cleared. The function returns  if statistics are successfully cleared or an error number if an error occurs.","Example of an SPE \u201cSet Notification Address\u201d Driver Call: SPE_set_notify (long service_id, int (fcn*receiver) (void))","This function sets a notification address (receiver, for a specified service. If the notification address is set to NULL, SPE device driver  will send notifications for packets to the specified service to the default notification address.","Example of an SPE \u201cGet Notification Address\u201d Driver Call: SPE get notify (long service_id)","This function returns a notification address associated with the named service or NULL if no specific notification address has been specified.","Example of an SPE \u201cSend Packet\u201d Driver Call: send_pkt (BYTE *buffer, long size, int (far *receive) (void))","This function sends a packet stored in buffer of \u201clength\u201d size. It returns  if the packet is sent successfully, or returns an error code associated with the failure.","Redirector Service Manager ","The redirector  is a piece of systems integration software used principally when ROS  is provided by \u201cadding on\u201d to a pre-existing operating system or when \u201ctransparent\u201d operation is desired for some VDE functions, as described earlier. In one embodiment the kernel , part of communications manager , file system , and part of API service  may be part of a pre-existing operating system such as DOS, Windows, UNIX, Macintosh System, OS9, PSOS, OS\/2, or other operating system platform. The remainder of ROS  subsystems shown in  may be provided as an \u201cadd on\u201d to a preexisting operating system. Once these ROS subsystems have been supplied and \u201cadded on,\u201d the integrated whole comprises the ROS  shown in .","In a scenario of this type of integration, ROS  will continue to be supported by a preexisting OS kernel , but may supplement (or even substitute) many of its functions by providing additional add-on pieces such as, for example, a virtual memory manager.","Also in this integration scenario, an add-on portion of API service  that integrates readily with a preexisting API service is provided to support VDE function calls. A pre-existing API service integrated with an add-on portion supports an enhanced set of operating system calls including both calls to VDE functions  and calls to functions  other than VDE functions (see ). The add-on portion of API service  may translate VDE function calls into RPC calls for routing by RPC manager .","ROS  may use a standard communications manager  provided by the preexisting operating system, or it may provide \u201cadd ons\u201d and\/or substitutions to it that may be readily integrated into it. Redirector  may provide this integration function.","This leaves a requirement for ROS  to integrate with a preexisting file system . Redirector  provides this integration function.","In this integration scenario, file system  of the preexisting operating system is used for all accesses to secondary storage. However, VDE objects  may be stored on secondary storage in the form of external object repository , file system , or remotely accessible through communications manager . When object switch  wants to access external object repository , it makes a request to the object repository manager  that then routes the request to object repository  or to redirector  (which in turn accesses the object in file system ).","Generally, redirector  maps VDE object repository  content into preexisting calls to file system . The redirector  provides preexisting OS level information about a VDE object , including mapping the object into a preexisting OS's name space. This permits seamless access to VDE protected content using normal\u201d file system  access techniques provided by a preexisting operating system.","In the integration scenarios discussed above, each preexisting target OS file system  has different interface requirements by which the redirector mechanism  may be \u201chooked.\u201d In general, since all commercially viable operating systems today provide support for network based volumes, file systems, and other devices (e.g., printers, modems, etc.), the redirector  may use low level network and file access \u201chooks\u201d to integrate with a preexisting operating system. \u201cAdd-ons\u201d for supporting VDE functions  may use these existing hooks to integrate with a preexisting operating system.","User Notification Service Manager ","User Notification Service Manager  and associated user notification exception interface (\u201cpop up\u201d)  provides ROS  with an enhanced ability to communicate with a user of electronic appliance . Not all applications  may be designed to respond to messaging from ROS  passed through API , and it may in any event be important or desirable to give ROS  the ability to communicate with a user no matter what state an application is in. User notification services manager  and interface  provides ROS  with a mechanism to communicate directly with a user, instead of or in addition to passing a return call through API  and an application . This is similar, for example, to the ability of the Windows operating system to display a user message in a \u201cdialog box\u201d that displays \u201con top of a running application irrespective of\u201d the state of the application.","The User Notification  block in the preferred embodiment may be implemented as application code. The implementation of interface is preferably built over notification service manager , which may be implemented as part of API service manager . Notification services manager  in the preferred embodiment provides notification support to dispatch specific notifications to an appropriate user process via the appropriate API return, or by another path. This mechanism permits notifications to be routed to any authorized process\u2014not just back to a process that specified a notification mechanism.","API Service Manager ","The preferred embodiment API Service Manager  is implemented as a service interface to the RPC service manager . All user API requests are built on top of this basic interface. The API Service Manager  preferably provides a service instance for each running user application .","Most RPC calls to ROS functions supported by API Service Manager  in the preferred embodiment may map directly to service calls with some additional parameter checking. This mechanism permits developers to create their own extended API libraries with additional or changed functionality.","In the scenario discussed above in which ROS  is formed by integrating \u201cadd ons\u201d with a preexisting operating system, the API service  code may be shared (e.g., resident in a host environment like a Windows DLL), or it may be directly linked with an applications's code\u2014depending on an application programmer's implementation decision, and\/or the type of electronic appliance . The Notification Service Manager  may be implemented within API . These components interface with Notification Service component  to provide a transition between system and user space.","Secure Database Service Manager (\u201cSDSM\u201d) ","There are at least two ways that may be used for managing secure database :\n\n","The commercial database approach uses a commercial database to store securely wrappered records in a commercial database. This way may be preferred when there are a large number of records that are stored in the secure database . This way provides high speed access, efficient updates, and easy integration to host systems at the cost of resource usage (most commercial database managers use many system resources).","The site record number approach uses a \u201csite record number\u201d (\u201cSRN\u201d) to locate records in the system. This scheme is preferred when the number of records stored in the secure database  is small and is not expected to change extensively over time. This way provides efficient resources use with limited update capabilities. SRNs permit further grouping of similar data records to speed access and increase performance.","Since VDE  is highly scalable, different electronic appliances  may suggest one way more than the other. For example, in limited environments like a set top, FDA, or other low end electronic appliance, the SRN scheme may be preferred because it limits the amount of resources (memory and processor) required. When VDE is deployed on more capable electronic appliances  such as desktop computers, servers and at clearinghouses, the commercial database scheme may be more desirable because it provides high performance in environments where resources are not limited.","One difference between the database records in the two approaches is whether the records are specified using a full VDE ID or SRN. To translate between the two schemes, a SRN reference may be replaced with a VDE ID database reference wherever it occurs. Similarly, VDE IDs that are used as indices or references to other items may be replaced by the appropriate SRN value.","In the preferred embodiment, a commercially available database manager  is used to maintain secure database . ROS  interacts with commercial database manager  through a database driver  and a database interface . The database interface  between ROS  and external, third party database vendors' commercial database manager  may be an open standard to permit any database vendor to implement a VDE compliant database driver  for their products.","ROS  may encrypt each secure database  record so that a VDE-provided security layer is \u201con top of\u201d the commercial database structure. In other words, SPE  may write secure records in sizes and formats that may be stored within a database record structure supported by commercial database manager . Commercial database manager  may then be used to organize, store, and retrieve the records. In some embodiments, it may be desirable to use a proprietary and\/or newly created database manager in place of commercial database manager . However, the use of commercial database manager  may provide certain advantages such as, for example, an ability to use already existing database management product(s).","The Secure Database Services Manager (\u201cSDSM\u201d)  makes calls to an underlying commercial database manager  to obtain, modify, and store records in secure database . In the preferred embodiment, \u201cSDSM\u201d  provides a layer \u201con top of\u201d the structure of commercial database manager . For example, all VDE-secure information is seat to commercial database manager  in encrypted form. SDSM  in conjunction with cache manager  and database interface  may provide record management, caching (using cache manager ), and related services (on top of) commercial database systems  and\/or record managers. Database Interface  and cache manager  in the preferred embodiment do not present their own RSI, but rather the RPC Manager  communicates to them through the Secure Database Manager RSI ","Name Services Manager ","The Name Services Manager  supports three subservices: user name services, host name services, and services name services. User name services provides mapping and lookup between user name and user ID numbers, and may also support other aspects of user-based resource and information security. Host name services provides mapping and lockup between the names (and other information, such as for example address, communications connection\/routing information, etc.) of other processing resources (e.g., other host electronic appliances) and VDE node IDs. Services name service provides a mapping and lookup between services names and other pertinent information such as connection information (e.g., remotely available service routing and contact information) and service IDs.","Name Services Manager  in the preferred embodiment is connected to External Services Manager  so that it may provide external service routing information directly to the external services manager. Name services manager  is also connected to secure database manager  to permit the name services manager  to access name services records stored within secure database .","External Services Manager  & Services Transport Layer ","The External Services Manager  provides protocol support capabilities to interface to external service providers. External services manager  may, for example, obtain external service routing information from name services manager , and then initiate contact to a particular external service (e.g., another VDE electronic appliance , a financial clearinghouse, etc.) through communications manager . External services manager  uses a service transport layer  to supply communications protocols and other information necessary to provide communications.","There are several important examples of the use of External Services Manager . Some VDE objects may have some or all of their content stored at an Object Repository  on an electronic appliance  other than the one operated by a user who has, or wishes to obtain, some usage rights to such VDE objects. In this case, External Services Manager  may manage a connection to the electronic appliance  where the VDE objects desired (or their content) is stored. In addition, file system  may be a network file system (e.g., Netware, LANtastic, NFS, etc.) that allows access to VDE objects using redirecter . Object switch  also supports this capability.","If External Services Manager  is used to access VDE objects, many different techniques are possible. For example, the VDE objects may be formatted for use with the World Wide Web protocols (HTML, HTTP, and URL) by including relevant headers, content tags, host ID to URL conversion (e.g., using Name Services Manager ) and an HTTP-aware instance of Services Transport Layer .","In other examples, External Services Manager  may be used to locate, connect to, and utilize remote event processing services; smart agent execution services (both to provide these services and locate them); certification services for Public Keys; remote Name Services; and other remote functions either supported by ROS  RPCs (e.g., have RSIs), or using protocols supported by Services Transport Layer .","Outgoing Administrative Object Manager ","Outgoing administrative object manager  receives administrative objects from object switch , object repository manager  or other source for transmission to another VDE electronic appliance. Outgoing administrative object manager  takes care of sending the outgoing object to its proper destination. Outgoing administrative object manager  may obtain routing information from name services manager , and may use communications service  to send the object. Outgoing administrative object manager  typically maintains records (in concert with SPE ) in secure database  (e.g., shipping table ) that reflect when objects have been successfully transmitted, when an object should be transmitted, and other information related to transmission of objects.","Incoming Administrative Object Manager ","Incoming administrative object manager  receives administrative objects from other VDE electronic appliances  via communications manager . It may route the object to object repository manager , object switch  or other destination. Incoming administrative object manager  typically maintains records (in concert with SPE ) in secure database  (e.g., receiving table ) that record which objects have been received, objects expected for receipt, and other information related to received and\/or expected objects.","Object Repository Manager ","Object repository manager  is a form of database or file manager. It manages the storage of VDE objects  in object repository , in a database, or in the file system . Object repository manager  may also provide the ability to browse and\/or search information related to objects (such as summaries of content, abstracts, reviewers' commentary, schedules, promotional materials, etc.), for example, by using INFORMATION methods associated with VDE objects .","Object Submittal Manager ","Object submittal manager  in the preferred embodiment provides an interface between an application  and object switch , and thus may be considered in some respects part of API . For example, it may allow a user application to create new VDE objects . It may also allow incoming\/outgoing administrative object managers ,  to create VDE objects  (administrative objects).",{"@attributes":{"id":"p-0588","num":"0880"},"figref":["FIG. 12A","FIG. 12A","FIG. 12A"],"b":["774","600","300","1220","1230","774","774","1","774","2"]},"In one of its roles or instances, object submittal manager  provides a user interface that allows the user to create an object configuration file  specifying certain characteristics of a VDE object  to be created. This user interface may, for example, allow the user to specify that she wants to create an object, allow the user to designate the content the object will contain, and allow the user to specify certain other aspects of the information to be contained within the object (e.g., rules and control information, identifying information, etc.).","Part of the object definition task  in the preferred embodiment may be to analyze the content or other information to be placed within an object. Object definition user interface may issue calls to object switch  to analyze \u201ccontent\u201d or other information that is to be included within the object to be created in order to define or organize the content into \u201catomic elements\u201d specified by the user. As explained elsewhere herein, such \u201catomic element\u201d organizations might, for example, break up the content into paragraphs, pages or other subdivisions specified by the user, and might be explicit (e.g., inserting a control character between each \u201catomic element\u201d) or implicit. Object switch  may receive static and dynamic content (e.g., by way of time independent stream interface  and real time stream interface ), and is capable of accessing and retrieving stored content or other information stored within file system .","The result of object definition  may be an object configuration file  specifying certain parameters relating to the object to be created. Such parameters may include, for example, map tables, key management specifications, and event method parameters. The object construction stage  may take the object configuration file  and the information or content to be included within the new object as input, construct an object based on these inputs, and store the object within object repository .","Object construction stage  may use information in object configuration file  to assemble or modify a container. This process typically involves communicating a series of events to SPE  to create one or more PERCs , public headers, private headers, and to encrypt content, all for storage in the new object  (or within secure database  within records associated with the new object).","The object configuration file  may be passed to container manager  within object switch . Container manager  is responsible for constructing an object  based on the object configuration file  and further user input. The user may interact with the object construction  through another instance () of object submittal manager . In this further user interaction provided by object submittal manager , the user may specify permissions, rules and\/or control information to be applied to or associated with the new object . To specify permissions, rules and control information, object submittal manager  and\/or container manager  within object switch  generally will, as mentioned above, need to issue calls to SPE  (e.g., through gateway ) to cause the SPE to obtain appropriate information from secure database , generate appropriate database items, and store the database items into the secure database  and\/or provide them in encrypted, protected form to the object switch for incorporation into the object. Such information provided by SPE  may include, in addition to encrypted content or other information, one or more PERCs , one or more method cores \u2032, one or more load modules , one or more data structures such as UDEs  and\/or MDEs , along with various key blocks, tags, public and private headers, and error correction information.","The container manager  may, in cooperation with SPE , construct an object container  based at least in part on parameters about new object content or other information as specified by object configuration file . Container manager  may then insert into the container  the content or other information (as encrypted by SPE ) to be included in the new object. Container manager  may also insert appropriate permissions, rules and\/or control information into the container  (this permissions, rules and\/or control information may be defined at least in part by user interaction through object submittal manager , and may be processed at least in part by SPE  to create secure data control structures). Container manager  may then write the new object to object repository , and the user or the electronic appliance may \u201cregister\u201d the new object by including appropriate information within secure database .","Communications Subsystem ","Communications subsystem , as discussed above, may be a conventional communications service that provides a network manager  and a mail gateway manager . Mail filters  may be provided to automatically route objects  and other VDE information to\/from the outside world. Communications subsystem  may support a real time content feed  from a cable, satellite or other telecommunications link.","Secure Processing Environment ","As discussed above in connection with , each electronic appliance  in the preferred embodiment includes one or more SPEs  and\/or one or more HPEs . These secure processing environments each provide a protected execution space for performing tasks in a secure manner. They may fulfill service requests passed to them by ROS , and they may themselves generate service requests to be satisfied by other services within ROS  or by services provided by another VDE electronic appliance  or computer.","In the preferred embodiment, an SPE  is supported by the hardware resources of an SPU . An HPE  may be supported by general purpose processor resources and rely on software techniques for security\/protection. HPE  thus gives ROS  the capability of assembling and executing certain component assemblies  on a general purpose CPU such as a microcomputer, minicomputer, mainframe computer or supercomputer processor. In the preferred embodiment, the overall software architecture of an SPE  may be the same as the software architecture of an HPE . An HPE  can \u201cemulate\u201d SPE  and associated SPU , i.e., each may include services and resources needed to support an identical set of service requests from ROS  (although ROS  may be restricted from sending to an HPE certain highly secure tasks to be executed only within an SPU ).","Some electronic appliance  configurations might include both an SPE  and an HPE . For example, the HPE  could perform tasks that need lesser (or no) security protections, and the SPE  could perform all tasks that require a high degree of security. This ability to provide serial or concurrent processing using multiple SPE and\/or HPE arrangements provides additional flexibility, and may overcome limitations imposed by limited resources that can practically or cost-effectively be provided within an SPU . The cooperation of an SPE  and an HPE  may, in a particular application, lead to a more efficient and cost effective but nevertheless secure overall processing environment for supporting and providing the secure processing required by VDE . As one example, an HPE  could provide overall processing for allowing a user to manipulate released object  \u2018contents,\u2019 but use SPE  to access the secure object and release the information from the object.",{"@attributes":{"id":"p-0599","num":"0891"},"figref":"FIG. 13","b":["503","655","650","503","655","650","653","503"]},"As shown in , SPE  (PPE ) includes the following service managers\/major functional blocks in the preferred embodiment:","Kernel\/Dispatcher ",{"@attributes":{"id":"p-0601","num":"0000"},"ul":{"@attributes":{"id":"ul0099","list-style":"none"},"li":{"@attributes":{"id":"ul0099-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0100","list-style":"none"},"li":["Channel Services Manager ","SPE RPC Manager ","Time Base Manager ","Encryption\/Decryption Manager ","Key and Tag Manager ","Summary Services Manager ","Authentication Manager\/Service Communications Manager ","Random Value Generator ","Secure Database Manager ","Other Services ."]}}}},"Each of the major functional blocks of PPE  is discussed in detail below.","I. SPE Kernel\/Dispatcher ","The Kernel\/Dispatcher  provides an operating system \u201ckernel\u201d that runs on and manages the hardware resources of SPU . This operating system \u201ckernel\u201d  provides a self-contained operating system for SPU ; it is also a part of overall ROS  (which may include multiple OS kernels, including one for each SPE and HPE ROS is controlling\/managing). Kernel\/dispatcher  provides SPU task and memory management, supports internal SPU hardware interrupts, provides certain \u201clow level services,\u201d manages \u201cDTD\u201d data structures, and manages the SPU bus interface unit . Kernel\/dispatcher  also includes a load module execution manager  that can load programs into secure execution space for execution by SPU .","In the preferred embodiment, kernel\/dispatcher  may include the following software\/functional components:","load module execution manager ","task manager ","memory manager ","virtual memory manager ","\u201clow level\u201d services manager ","internal interrupt handlers ","BIU handler  (may not be present in HPE )","Service interrupt queues ","DTD Interpreter .","At least parts of the kernel\/dispatcher  are preferably stored in SPU firmware loaded into SPU ROM . An example of a memory map of SPU ROM  is shown in . This memory map shows the various components of kernel\/dispatcher  (as well as the other SPE services shown in ) residing in SPU ROM and\/or EEPROM . The  example of an NVRAM memory map shows the task manager  and other information loaded into NVRAM.","One of the functions performed by kernel\/dispatcher  is to receive RPC calls from ROS RPC manager . As explained above, the ROS Kernel RPC manager  can route RPC calls to the SPE  (via SPE Device Driver  and its associated RSI ) for action by the SPE. The SPE kernel\/dispatcher  receives these calls and either handles them or passes them on to SPE RPC manager  for routing internally to SPE . SPE  based processes can also generate RPC requests. Some of these requests can be processed internally by the SPE . If they are not internally serviceable, they may be passed out of the SPE  through SPE kernel\/dispatcher  to ROS RPC manager  for routing to services external to SPE .","A. Kernel\/Dispatcher Task Management","Kernel\/dispatcher task manager  schedules and oversees tasks executing within SPE  (PPE ). SPE  supports many types of tasks. A \u201cchannel\u201d (a special type of task that controls execution of component assemblies  in the preferred embodiment) is treated by task manager  as one type of task. Tasks are submitted to the task manager  for execution. Task manager  in turn ensures that the SPE \/SPU  resources necessary to execute the tasks are made available, and then arranges for the SPU microprocessor  to execute the task.","Any call to kernel dispatcher  gives the kernel an opportunity to take control of SPE  and to change the task or tasks that are currently executing. Thus, in the preferred embodiment kernel dispatcher task manager  may (in conjunction with virtual memory manager  and\/or memory manager ) \u201cswap out\u201d of the execution space any or all of the tasks that are currently active, and \u201cswap in\u201d additional or different tasks.","SPE tasking managed by task manager  may be either \u201csingle tasking\u201d (meaning that only one task may be active at a time or \u201cmulti-tasking\u201d (meaning that multiple tasks may be active at once). SPE  may support single tasking or multi-tasking in the preferred embodiment. For example, \u201chigh end\u201d implementations of SPE  (e.g., in server devices) should preferably include multi-tasking with \u201cpreemptive scheduling.\u201d Desktop applications may be able to use a simpler SPE , although they may still require concurrent execution of several tasks. Set top applications may be able to use a relatively simple implementation of SPE , supporting execution of only one task at a time. For example, a typical set top implementation of SPU  may perform simple metering, budgeting and billing using subsets of VDE methods combined into single \u201caggregate\u201d load modules to permit the various methods to execute in a single tasking environment. However, an execution environment that supports only single tasking may limit use with more complex control structures. Such single tasking versions of SPE  trade flexibility in the number and types of metering and budgeting operations for smaller run time RAM size requirements. Such implementations of SPE  may (depending upon memory limitations) also be limited to metering a single object  at a time. Of course, variations or combinations are possible to increase capabilities beyond a simple single tasking environment without incurring the additional cost required to support \u201cfull multitasking.\u201d","In the preferred embodiment, each task in SPE  is represented by a \u201cswap block,\u201d which may be considered a \u201ctask\u201d in a traditional multitasking architecture. A \u201cswap block\u201d in the preferred embodiment is a bookkeeping mechanism used by task manager  to keep track of tasks and subtasks. It corresponds to a chunk of code and associated references that \u201cfits\u201d within the secure execution environment provided by SPU . In the preferred embodiment, it contains a list of references to shared data elements (e.g., load modules  and UDEs ), private data elements (e.g., method data and local stack), and swapped process \u201ccontext\u201d information (e.g., the register set for the process when it is not processing).  shows an example of a snapshot of SPU RAM  storing several examples of \u201cswap blocks\u201d for a number of different tasks\/methods such as a \u201cchannel\u201d task, a \u201ccontrol\u201d task, an \u201cevent\u201d task, a \u201cmeter\u201d task, a \u201cbudget\u201d task, and a \u201cbilling\u201d task. Depending on the size of SPU RAM , \u201cswap blocks\u201d may be swapped out of RAM and stored temporarily on secondary storage  until their execution can be continued. Thus, SPE  operating in a multi-tasking mode may have one or more tasks \u201csleeping.\u201d In the simplest form, this involves an active task that is currently processing, and another task (e.g., a control task under which the active task may be running) that is \u201csleeping\u201d and is \u201cswapped out\u201d of active execution space. Kernel\/dispatcher  may swap out tasks at any time.","Task manager  may use Memory Manager  to help it perform this swapping operation. Tasks may be swapped out of the secure execution space by reading appropriate information from RAM and other storage internal to SPU , for example, and writing a \u201cswap block\u201d to secondary storage . Kernel  may swap a task back into the secure execution space by reading the swap block from secondary storage  and writing the appropriate information back into SPU RAM . Because secondary storage  is not secure, SPE  must encrypt and cryptographically seal (e.g., using a one-way hash function initialized with a secret value known only inside the SPU ) each swap block before it writes it to secondary storage. The SPE  must decrypt and verify the cryptographic seal for each swap block read from secondary storage  before the swap block can be returned to the secure execution space for further execution.","Loading a \u201cswap block\u201d into SPU memory may require one or more \u201cpaging operations\u201d to possibly first save, and then flush, any \u201cdirty pages\u201d (i.e., pages changed by SPE ) associated with the previously loaded swap blocks, and to load all required pages for the new swap block context.","Kernel\/dispatcher  preferably manages the \u201cswap blocks\u201d using service interrupt queues . These service interrupt queues  allow kernel\/dispatcher  to track tasks (swap blocks) and their status (running, \u201cswapped out,\u201d or \u201casleep\u201d). The kernel\/dispatcher  in the preferred embodiment may maintain the following service interrupt queues  to help it manage the \u201cswap blocks\u201d:\n\n","When two or more tasks try to write to the same data structure in a multi-tasking environment, a situation exists that may result in \u201cdeadly embrace\u201d or \u201ctask starvation.\u201d A \u201cmulti-threaded\u201d tasking arrangement may be used to prevent \u201cdeadly embrace\u201d or \u201ctask starvation\u201d from happening. The preferred embodiment kernel\/dispatcher  may support \u201csingle threaded\u201d or \u201cmulti-threaded\u201d tasking.","In single threaded applications, the kernel\/dispatcher  \u201clocks\u201d individual data structures as they are loaded. Once locked, no other SPE  task may load them and will \u201cblock\u201d waiting for the data structure to become available. Using a single threaded SPE  may, as a practical matter, limit the ability of outside vendors to create load modules  since there can be no assurance that they will not cause a \u201cdeadly embrace\u201d with other VDE processes about which outside vendors may know little or nothing. Moreover, the context swapping of a partially updated record might destroy the integrity of the system, permit unmetered use, and\/or lead to deadlock. In addition, such \u201clocking\u201d imposes a potentially indeterminate delay into a typically time critical process, may limit SPE  throughput, and may increase overhead.","This issue notwithstanding, there are other significant processing issues related to building single-threaded versions of SPE  that may limit its usefulness or capabilities under some circumstances. For example, multiple concurrently executing tasks may not be able to process using the same often-needed data structure in a single-threaded SPE . This may effectively limit the number of concurrent tasks to one. Additionally, single-threadedness may eliminate the capability of producing accurate summary budgets based on a number of concurrent tasks since multiple concurrent tasks may not be able to effectively share the same summary budget data structure. Single-threadedness may also eliminate the capability to support audit processing concurrently with other processing. For example, real-time feed processing might have to be shut down in order to audit budgets and meters associated with the monitoring process.","One way to provide a more workable \u201csingle-threaded\u201d capability is for kernel\/dispatcher  to use virtual page handling algorithms to track \u201cdirty pages\u201d as data areas are written to. The \u201cdirty pages\u201d can be swapped in and out with the task swap block as part of local data associated with the swap block. When a task exits, the \u201cdirty pages\u201d can be merged with the current data structure (possibly updated by another task for SPU ) using a three-way merge algorithm (i.e., merging the original data structure, the current data structure, and the \u201cdirty pages\u201d to form a new current data structure). During the update process, the data structure can be locked as the pages are compared and swapped. Even though this virtual paging solution might be workable for allowing single threading in some applications, the vendor limitations mentioned above may limit the use of such single threaded implementations in some cases to dedicated hardware. Any implementation that supports multiple users (e.g., \u201csmart home\u201d set tops, many desk tops and certain PDA applications, etc.) may hit limitations of a single threaded device in certain circumstances.","It is preferable when these limitations are unacceptable to use a full \u201cmulti-threaded\u201d data structure write capabilities. For example, a type of \u201ctwo-phase commit\u201d processing of the type used by database vendors may be used to allow data structure sharing between processes. To implement this \u201ctwo-phase commit\u201d process, each swap block may contain page addresses for additional memory blocks that will be used to store changed information. A change page is a local copy of a piece of a data element that has been written by an SPE process. The changed page(s) references associated with a specific data structure are stored locally to the swap block in the preferred embodiment.","For example, SPE  may support two (change pages) per data structure. This limit is easily alterable by changing the size of the swap block structure and allowing the update algorithm to process all of the changed pages. The \u201ccommit\u201d process can be invoked when a swap block that references changed pages is about to be discarded. The commit process takes the original data element that was originally loaded (e.g., UDE), the current data element (e.g., UDE) and the changed pages, and merges them to create a new copy of the data element (e.g., UDE). Differences can be resolved by the DTD interpreter  using a DTD for the data element. The original data element is discarded (e.g., as determined by its DTD use count) if no other swap block references it.","B. Kernel\/Dispatch Memory Management","Memory manager  and virtual memory manager  in the preferred embodiment manage ROM  and RAM  memory within SPU  in the preferred embodiment. Virtual memory manager  provides a fully \u201cvirtual\u201d memory system to increase the amount of \u201cvirtual\u201d RAM available in the SPE secure execution space beyond the amount of physical RAM provided by SPU . Memory manager  manages the memory in the secure execution space, controlling how it is accessed, allocated and deallocated. SPU MMU , if present, supports virtual memory manager  and memory manager  in the preferred embodiment. In some \u201cminimal\u201d configurations of SPU  there may be no virtual memory capability and all memory management functions will be handled by memory manager . Memory management can also be used to help enforce the security provided by SPE . In some classes of SPUs , for example, the kernel memory manager  may use hardware memory management unit (MMU)  to provide page level protection within the SPU . Such a hardware-based memory management system provides an effective mechanism for protecting VDE component assemblies  from compromise by \u201crogue\u201d load modules.","In addition, memory management provided by memory manager  operating at least in part based on hardware-based MMU  may securely implement and enforce a memory architecture providing multiple protection domains. In such an architecture, memory is divided into a plurality of domains that are largely isolated from each other and share only specific memory areas under the control of the memory manager . An executing process cannot access memory outside its domain and can only communicate with other processes through services provided by and mediated by privileged kernel\/dispatcher software  within the SPU . Such an architecture is more secure if it is enforced at least in part by hardware within MMU  that cannot be modified by any software-based process executing within SPU .","In the preferred embodiment, access to services implemented in the ROM  and to physical resources such as NVRAM and RTC  are mediated by the combination of privileged kernel\/dispatcher software  and hardware within MMU . ROM  and RTC  requests are privileged in order to protect access to critical system component routines (e.g., RTC ).","Memory manager  is responsible for allocating and deallocating memory; supervising sharing of memory resources between processes; and enforcing memory access\/use restriction. The SPE kernel\/dispatcher memory manager  typically initially allocates all memory to kernel , and may be configured to permit only process-level access to pages as they are loaded by a specific process. In one example SPE operating system configuration, memory manager  allocates memory using a simplified allocation mechanism. A list of \u02dcach memory page accessible in SPE  may be represented using a bit map allocation vector, for example. In a memory block, a group of contiguous memory pages may start at a specific page number. The size of the block is measured by the number of memory pages it spans. Memory allocation may be recorded by setting\/clearing the appropriate bits in the allocation vector.","To assist in memory management functions, a \u201cdope vector\u201d may be prepended to a memory block. The \u201cdope vector\u201d may contain information allowing memory manager  to manage that memory block. In its simplest form, a memory block may be structured as a \u201cdope vector\u201d followed by the actual memory area of the block. This \u201cdope vector\u201d may include the block number, support for dynamic paging of data elements, and a marker to detect memory overwrites. Memory manager  may track memory blocks by their block number and convert the block number to an address before use. All accesses to the memory area can be automatically offset by the size of the \u201cdope vector\u201d during conversion from a block memory to a physical address. \u201cDope vectors\u201d can also be used by virtual memory manager  to help manage virtual memory.","The ROM  memory management task performed by memory manager  is relatively simple in the preferred embodiment. All ROM  pages may be flagged as \u201cread only\u201d and as \u201cnon-pagable.\u201d EEPROM B memory management may be slightly more complex since the \u201cburn count\u201d for each EEPROM page may need to be retained. SPU EEPROM B may need to be protected from all uncontrolled writes to conserve the limited writable lifetime of certain types of this memory. Furthermore, EEPROM pages may in some cases not be the same size as memory management address pages.","SPU NVRAM is preferably battery backed RAM that has a few access restrictions. Memory manager  can ensure control structures that must be located in NVRAM are not relocated durtng \u201cgarbage collection\u201d processes. As discussed above, memory manager  (and MMU  if present) may protect NVRAM thd RAM at a page level to prevent tampering by other processes.","Virtual memory manager  provides paging for programs and data between SPU external memory and SPU internal RAM . It is likely that data structures and executable processes will exceed the limits of any SPU  internal memory. For example, PERCs  and other fundamental control structures may be fairly large, and \u201cbit map meters\u201d may be, or become, very large. This eventuality may be addressed in two ways:","(1) subdividing load modules ; and","(2) supporting virtual paging.","Load modules  can be \u201csubdivided\u201d in that in many instances they can be broken up into separate components only a subset of which must be loaded for execution. Load modules  are the smallest pagable executable element in this example. Such load modules  can be broken up into separate components (e.g., executable code and plural data description blocks), only one of which must be loaded for simple load modules to execute. This structure permits a load module  to initially load only the executable code and to load the data description blocks into the other system pages on a demand basis. Many load modules  that have executable sections that are too large to fit into SPU  can be restructured into two or more smaller independent load modules. Large load modules may be manually \u201csplit\u201d into multiple load modules that are \u201cchained\u201d together using explicit load module references.","Although \u201cdemand paging\u201d can be used to relax some of these restrictions, the preferred embodiment uses virtual paging to manage large data structures and executables. Virtual Memory Manager  \u201cswaps\u201d information (e.g., executable code and\/or data structures) into and out of SPU RAM , and provides other related virtual memory management services to allow a full virtual memory management capability. Virtual memory management may be important to allow limited resource SPU  configurations to execute large and\/or multiple tasks.","C. SPE Load Module Execution Manager ","The SPE (HPE) load module execution manager (\u201cLMEM\u201d)  loads executables into the memory managed by memory manager  and executes them. LMEM  provides mechanisms for tracking load modules that are currently loaded inside the protected execution environment. LMEM  also provides access to basic load modules and code fragments stored within, and thus always available to, SPE . LMEM  may be called, for example. by load modules  that want to execute other load modules.","In the preferred embodiment, the load module execution manager  includes a load module executor (\u201cprogram loader\u201d) , one or more internal load modules , and library routines . Load module executor  loads executables into memory (e.g., after receiving a memory allocation from memory manager ) for execution. Internal load module library  may provide a set of commonly used basic load modules  (stored in ROM  or NVRA.M , for example). Library routines  may provide a set of commonly used code fragments\/routines (e.g., bootstrap routines) for execution by SPE .","Library routines  may provide a standard set of library functions in ROM . A standard list of such library functions along with their entry points and parameters may be used. Load modules  may call these routines (e.g., using an interrupt reserved for this purpose). Library calls may reduce the size of load modules by moving commonly used code into a central location and permitting a higher degree of code reuse. All load modules  for use by SPE  are preferably referenced by a load module execution manager  that maintains and scans a list of available load modules and selects the appropriate load module for execution. If the load module is not present within SPE , the task is \u201cslept\u201d and LMEM  may request that the load module  be loaded from secondary storage . This request may be in the form of an RPC call to secure database manager  to retrieve the load module and associated data structures, and a call to encrypt\/decrypt manager  to decrypt the load module before storing it in memory allocated by memory manager .","In somewhat more detail, the preferred embodiment executes a load module  by passing the load module execution manager  the name (e.g., VDE ID) of the desired load module . LMEM  first searches the list of \u201cin memory\u201d and \u201cbuilt-in\u201d load modules . If it cannot find the desired load module  in the list, it requests a copy from the secure database  by issuing an RPC request that may be handled by ROS secure database manager  shown in . Load module execution manager  may then request memory manager  to allocate a memory page to store the load module . The load module execution manager  may copy the load module into that memory page, and queue the page for decryption and security checks by encrypt\/decrypt manager  and key and tag manager . Once the page is decrypted and checked, the load module execution manager  checks the validation tag and inserts the load module into the list of paged in modules and returns the page address to the caller. The caller may then call the load module  directly or allow the load module execution module  to make the call for it.",{"@attributes":{"id":"p-0648","num":"0952"},"figref":"FIG. 15","i":"a ","b":["596","594","594","1","594","2","594","596","597","1","597","2","597","3","808","464","597","4","597","5","598","596","599","690","594","1","594","594","1000","1100","1200","1202","594","1","464"]},{"@attributes":{"id":"p-0649","num":"0953"},"figref":"FIG. 15","i":"b ","b":["503","594","594","300","503","552","0","582","503","1125","0","566","690","594","1127","808","464","460","462","464","808","558","596","1129","566","368","1000","594","1131","1133","464","594","1135","562"]},"In response to this \u201cinitialization\u201d event, the control method may construct the channel detail records (), . . . (N) used to handle further events other than the \u201cinitialization\u201d event. The control method executing \u201cwithin\u201d the channel may access the various components it needs to construct associated component assemblies  based on the \u201cblueprint\u201d accessed at step  (block ). Each of these components is bound to the channel  (block ) by constructing an associated channel detail record specifying the method core(s) \u2032, load module(s) , and associated data structure(s) (e.g., UDE(s)  and\/or MDE(s) ) needed to respond to the event. The number of channel detail records will depend on the number of events that can be serviced by the \u201cright,\u201d as specified by the \u201cblueprint\u201d (i.e., URT ). During this process, the control method will construct \u201cswap blocks\u201d to, in effect, set up all required tasks and obtain necessary memory allocations from kernel . The control method will, as necessary, issue calls to secure database manager  to retrieve necessary components from secure database , issue calls to encrypt\/decrypt manager  to decrypt retrieved encrypted information, and issue calls to key and tag manager  to ensure that all retrieved components are validated. Each of the various component assemblies  so constructed are \u201cbound\u201d to the channel through the channel header event code\/pointer records  and by constructing appropriate swap blocks referenced by channel detail records (), . . . (N). When this process is complete, the channel  has been completely constructed and is ready to respond to further events. As a last step. the process may, if desired, deallocate the \u201cinitialization\u201d event task in order to free up resources.","Once a channel  has been constructed in this fashion, it will respond to events as they arrive. Channel services manager  is responsible for dispatching events to channel . Each time a new event arrives (e.g., via an RPC call), channel services manager  examines the event to determine whether a channel already exists that is capable of processing it. If a channel does exist, then the channel services manager  passes the event to that channel. To process the event, it may be necessary for task manager  to \u201cswap in\u201d certain \u201cswappable blocks\u201d defined by the channel detail records as active tasks. In this way, executable component assemblies  formed during the channel open process shown in are placed into active secure execution space, the particular component assembly that is activated being selected in response to the received event code. The activated task will then perform its desired function in response to the event.","To destroy a channel, the various swap blocks defined by the channel detail records are destroyed, the identification information in the channel header  is wiped clean, and the channel is made available for re-allocation by the \u201cchannel \u201d \u201copen channel\u201d task.","D. SPE Interrupt Handlers ","As shown in , kernel\/dispatcher  also provides internal interrupt handler(s) . These help to manage the resources of SPIJ . SPTJ  preferably executes in either \u201cinterrupt\u201d or \u201cpolling\u201d mode for all significant components. In polling mode, kernel\/dispatcher  may poll each of the sections\/circuits within SPU  and emulate an interrupt for them. The following interrupts are preferably supported by SPU  in the preferred embodiment:\n\n","When an interrupt occurs, an interrupt controller within microprocessor  may cause the microprocessor to begin executing an appropriate interrupt handler. An interrupt handler is a piece of software\/firmware provided by kernel\/dispatcher  that allows microprocessor  to perform particular functions upon the occurrence of an interrupt. The interrupts may be \u201cvectored\u201d so that different interrupt sources may effectively cause different interrupt handlers to be executed.","A \u201ctimer tick\u201d interrupt is generated when the real-time RTC  \u201cpulses.\u201d The timer tick interrupt is processed by a timer tick interrupt handler to calculate internal device date\/time and to generate timer events for channel processing.","The bus interface unit  may generate a series of interrupts. In the preferred embodiment, bus interface , modeled after a USART, generates interrupts for various conditions (e.g., \u201creceive buffer full,\u201d \u201ctransmitter buffer empty,\u201d and \u201cstatus word change\u201d). Kernel\/dispatcher  services the transmitter buffer empty interrupt by sending the next character from the transmit queue to the bus interface . Kernel\/dispatcher interrupt handler  may service the received buffer full interrupt by reading a character, appending it to the current buffer, and processing the buffer based on the state of the service engine for the bus interface . Kernel\/dispatcher  preferably processes a status word change interrupt and addresses the appropriate send\/receive buffers accordingly.","SPU  generates a power fail interrupt when it detects an imminent power fail condition. This may require immediate action to prevent loss of information. For example, in the preferred embodiment, a power fail interrupt moves all recently written information (i.e., \u201cdirty pages\u201d) into non-volatile NVRAM , marks all swap blocks as \u2018swapped out,\u201d and sets the appropriate power fail flag to facilitate recovery processing. Kernel\/dispatcher  may then periodically poll the \u201cpower fail bit\u201d in a status word until the data is cleared or the power is removed completely.","SPU  in the example includes a conventional watchdog timer that generates watchdog timer interrupts on a regular basis. A watchdog timer interrupt handler performs internal device checks to ensure that tampering is not occurring. The internal clocks of the watchdog timer and RTC  are compared to ensure SPU  is not being paused or probed, and other internal checks on the operation of SPU  are made to detect tampering.","The encryption\/decryption engine  generates an interrupt when a block of data has been processed. The kernel interrupt handler  adjusts the processing status of the block being encrypted or decrypted, and passes the block to the next stage of processing. The next block scheduled for the encryption service then has its key moved into the encrypt\/decrypt engine , and the next cryptographic process started.","A memory management unit  interrupt is generated when a task attempts to access memory outside the areas assigned to it. A memory management interrupt handler traps the request, and takes the necessary action (e.g., by initiating a control transfer to memory manager  and\/or virtual memory manager ). Generally, the task will be failed, a page fault exception will be generated, or appropriate virtual memory page(s) will be paged in.","E. Kernel\/Dispatcher Low Level Services ","Low level services  in the preferred embodiment provide \u201clow level\u201d functions. These functions in the preferred embodiment may include, for example, power-on initialization, device POST, and failure recovery routines. Low level services  may also in the preferred embodiment provide (either by themselves or in combination with authentication manager\/service communications manager ) download response-challenge and authentication communication protocols, and may provide for certain low level management of SPU  memory devices such as EEPROM and FLASH memory (either alone or in combination with memory manager  and\/or virtual memory manager ).","F. Kernel\/Dispatcher BIU Handler ","BIU handler  in the preferred embodiment manages the bus interface unit  (if present). It may, for example, maintain read and write buffers for the BIU , provide BIU startup initialization, etc","G. Kernel\/Dispatcher DTD Interpreter ","DTD interpreter  in the preferred embodiment handles data formatting issues. For example, the DTD interpreter  may automatically open data structures such as UDEs  based on formatting instructions contained within DTDs.","The SPE kernel\/dispatcher  discussed above supports all of the other services provided by SPE . Those other services are discussed below.","II. SPU Channel Services Manager ","\u201cChannels\u201d are the basic task processing mechanism of SPE  (HPE ) in the preferred embodiment. ROS  provides an event-driven interface for \u201cmethods.\u201d A \u201cchannel\u201d allows component assemblies  to service events. A \u201cchannel\u201d is a conduit for passing \u201cevents\u201d from services supported by SPE  (HPE ) to the various methods and load modules that have been specified to process these events, and also supports the assembly of component assemblies  and interaction between component assemblies. In more detail, \u201cchannel\u201d  is a data structure maintained by channel manager  that \u201cbinds\u201d together one or more load modules  and data structures (e.g., UDEs  and\/or MDEs ) into a component assembly . Channel services manager  causes load module execution manager  to load the component assembly  for execution, and may also be responsible for passing events into the channel  for response by a component assembly . In the preferred embodiment, event processing is handled as a message to the channel service manager .",{"@attributes":{"id":"p-0670","num":"0980"},"figref":["FIG. 15","FIG. 11E"],"b":["562","594","690","562","594","596","594","596","690","594","690"]},"The channel  is set up by the channel services manager  in response to the occurrence of an event. Once the channel is created, the channel services manager  may issue function calls to load module execution manager  based on the channel . The load module execution manager  loads the load modules  referenced by a channel , and requests execution services by the kernel\/dispatcher task manager . The kernel\/dispatcher  treats the event processing request as a task, and executes it by executing the code within the load modules  referenced by the channel.","The channel services manager  may be passed an identification of the event (e.g., the \u201cevent code\u201d). The channel services manager  parses one or more method cores  that are part of the component assemblies  the channel services manager is to assemble. It performs this parsing to determine which method(s) and data structures are invoked by the type of event. Channel manager  then issues calls (e.g., to secure database manager  to obtain the methods and data structures needed to build the component assembly . These called-for method(s) and data structure(s) (e.g., load modules , UDEs  and\/or MDEs ) are each decrypted using encrypt\/decrypt manager  (if necessary), and are then each validated using key and tag manager . Channel manager  constructs any necessary \u201cjump table\u201d references to, in effect, \u201clink\u201d or \u201cbind\u201d the elements into a single cohesive executable so the load module(s) can reference data structures and any other load module(s) in the component assembly. Channel manager  may then issue calls to LMEM  to load the executable as an active task.",{"@attributes":{"id":"p-0673","num":"0983"},"figref":"FIG. 15","b":["594","594","594"]},"\u201cChannel header\u201d  in the preferred embodiment is for references) the data structure(s) and associated control program(s) that queues events from channel event sources, processes these events, and releases the appropriate tasks specified in the \u201cchannel detail record\u201d for processing. A \u201cchannel detail record\u201d in the preferred embodiment links an event to a \u201cswap block\u201d (i.e., task) associated with that event. The \u201cswap block\u201d may reference one or more load modules . UDEs  and private data areas required to properly process the event. One swap block and a corresponding channel detail item is created for each different event the channel can respond to.","In the preferred embodiment, Channel Services Manager  may support the following (internal) calls to support the creation and maintenance of channels :",{"@attributes":{"id":"p-0676","num":"0986"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Call Name","Source","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u201cWrite Event\u201d","Write","Writes an event to the channel for response by"]},{"entry":[{},{},"the channel. The Write Event call thus permit"]},{"entry":[{},{},"the caller to insert an event into the event"]},{"entry":[{},{},"queue associated with the channel. The event"]},{"entry":[{},{},"will be processed in turn by the channel 594."]},{"entry":["\u201cBind Item\u201d","Ioctl","Binds an item to a channel with the"]},{"entry":[{},{},"appropriate processing algorithm. The Bind"]},{"entry":[{},{},"Item call permits the caller to bind a VDE item"]},{"entry":[{},{},"ID to a channel (e.g., to create one or more"]},{"entry":[{},{},"swap blocks associated with a channel). This"]},{"entry":[{},{},"call may manipulate the contents of individual"]},{"entry":[{},{},"swap blocks."]},{"entry":["\u201cUnbind Item\u201d","Ioctl","Unbinds an item from a channel with the"]},{"entry":[{},{},"appropriate processing algorithm. The Unbind"]},{"entry":[{},{},"Item call permits the caller to break the"]},{"entry":[{},{},"binding of an item to a swap block. This call"]},{"entry":[{},{},"may manipulate the contents of individual"]},{"entry":[{},{},"swap blocks."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"550"},"As described in connection with , the architecture of ROS  is based on remote procedure calls in the preferred embodiment. ROS  includes an RPC Manager  that passes RPC calls between services each of which present an RPC service interface (\u201cRSI\u201d) to the RPC manager. In the preferred embodiment, SPE  (HPE  is also built around the same RPC concept. The SPE  (HPE ) may include a number of internal modular service providers each presenting an RSI to an RPC manager  internal to the SPE (HPE). These internal service providers may communicate with each other and\/or with ROS RPC manager  and thus, with any other service provided by ROS  and with external services, using RPC service requests.","RPC manager  within SPE  (HPE ) is not the same as RPC manager  shown in , but it performs a similar function within the SPE (HPE): it receives RPC requests and passes them to the RSI presented by the service that is to fulfill the request. In the preferred embodiment, requests are passed between ROS RPC manager  and the outside world (i.e., SPE device driver ) via the SPE (HPE) Kernel\/Dispatcher . Kernel\/Dispatcher  may be able to service certain RPC requests itself, but in general it passes received requests to RPC manager  for routing to the appropriate service internal to the SPE (HPE). In an alternate embodiment, requests may be passed directly between the HPE, SPE, API, Notification interface, and other external services instead of routing them through the ROS RPC manager . The decision on which embodiment to use is part of the scalability of the system; some embodiments are more efficient than others under various traffic loads and system configurations. Responses by the services (and additional service requests they may themselves generate are provided to RPC Manager  for routing to other service(s) internal or external to SPE  (HPE ).","SPE RPC Manager  and its integrated service manager uses two tables to dispatch remote procedure calls: an RPC services table, and an optional RPC dispatch table. The RPC services table describes where requests for specific services are to be routed for processing. In the preferred embodiment, this table is constructed in SPU RAM or NVRAM , and lists each RPC service \u201cregistered\u201d within SPU . Each row of the RPC services table contains a service ID, its location and address, and a control byte. In simple implementations, the control byte indicates only that the service is provided internally or externally. In more complex implementations, the control byte can indicate an instance of the service (e.g., each service may be multiple \u201cinstances\u201d in a multi-tasking environment). ROS RPC manager  and SPE  may have symmetric copies of the RPC services table in the preferred embodiment. If an RPC service is not found in the RPC services table. SPE  may either reject it or pass it to ROS RPC manager  for service.","The SPE RPC manager  accepts the request from the RPC service table and processes that request in accordance with the internal priorities associated with the specific service. In SPE , the RPC service table is extended by an RPC dispatch table. The preferred embodiment RPC dispatch table is organized as a list of Load Module references for each RPC service supported internally by SPE . Each row in the table contains a load module ID that services the call, a control byte that indicates whether the call can be made from an external caller, and whether the load module needed to service the call is permanently resident in SPU . The RPC dispatch table may be construed in SPU ROM  (or EEPROM) when SPU firmware  is loaded into the SPU . If the RPC dispatch table is in EEPROM, it flexibly allows for updates to the services without load module location and version control issues.","In the preferred embodiment, SPE RPC manager  first references a service request against the RPC service table to determine the location of the service manager that may service the request. The RPC manager  then routes the service request to the appropriate service manager for action. Service requests are handled by the service manager within the SPE  using the RPC dispatch table to dispatch the request. Once the RPC manager  locates the service reference in the RPC dispatch table, the load module that services the request is called and loaded using the load module execution manager . The load module execution manager  passes control to the requested load module after performing all required context configuration, or if necessary may first issue a request to load it from the external management files .","SPU Time Base Manager ","The time base manager  supports calls that relate to the real time clock (\u201cRTC\u201d) . In the preferred embodiment, the time base manager  is always loaded and ready to respond to time based requests.","The table below lists examples of basic calls that may be supported by the time base manager :",{"@attributes":{"id":"p-0684","num":"0994"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Call Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Independent requests"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Get Time","Returns the time (local, GMT, or ticks)"]},{"entry":["Set time","Sets the time in the RTC 528. Access to this"]},{"entry":[{},"command may be restricted to a VDE"]},{"entry":[{},"administrator."]},{"entry":["Adjust time","Changes the time in the RTC 428. Access to"]},{"entry":[{},"this command may be restricted to a VDE"]},{"entry":[{},"administrator."]},{"entry":["Set Time Parameter","Set GMT local time conversion and the current"]},{"entry":[{},"and allowable magnitude of user adjustments to"]},{"entry":[{},"RTC 528 time."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Channel Service Manager Requests"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Bind Time","Bind timer services to a channel as an event"]},{"entry":[{},"source."]},{"entry":["Unbind Time","Unbind timer services from a channel as an"]},{"entry":[{},"event source."]},{"entry":["Set Alarm","Sets an alarm notification for a specific time."]},{"entry":[{},"The user will be notified by an alarm event at"]},{"entry":[{},"the time of the alarm. Parameters to this"]},{"entry":[{},"request determine the event, frequency, and"]},{"entry":[{},"requested processing for the alarm."]},{"entry":["Clear Alarm","Cancels a requested alarm notification."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"556"},"The Encryption\/Decryption Manager  supports calls to the various encryption\/decryption techniques supported by SPE \/HPE . It may be supported by a hardware-based encryption\/decryption engine  within SPU . Those encryption\/decryption technologies not supported by SPU encrypt\/decrypt engine  may be provided by encrypt\/decrypt manager  in software. The primary bulk encryption\/decryption load modules preferably are loaded at all times, and the load modules necessary for other algorithms are preferably paged in as needed. Thus, if the primary bulk encryption\/decryption algorithm is DES, only the DES load modules need be permanently resident in the RAM of SPE \/HPE .","The following are examples of RPC calls supported by Encrypt\/Decrypt Manager  in the preferred embodiment:",{"@attributes":{"id":"p-0687","num":"0997"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Call Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PK Encrypt","Encrypt a block using a PK (public key)"]},{"entry":[{},{},"algorithm."]},{"entry":[{},"PK Decrypt","Decrypt a block using a PK algorithm."]},{"entry":[{},"DES","Encrypt a block using DES"]},{"entry":[{},"Encrypt"]},{"entry":[{},"DES","Decrypt a block using DES."]},{"entry":[{},"Encrypt"]},{"entry":[{},"RC-4","Encrypt a block using the RC-4 (or other bulk"]},{"entry":[{},"Encrypt","encryption) algorithm."]},{"entry":[{},"RC-4","Decrypt a block using the RC-4 (or other bulk"]},{"entry":[{},"Decrypt","encryption) algorithm."]},{"entry":[{},"Initialize","Initialize DES instance to be used."]},{"entry":[{},"DES"]},{"entry":[{},"Instance"]},{"entry":[{},"Initialize","Initialize RC-4 instance to be used."]},{"entry":[{},"RC-4"]},{"entry":[{},"Instance"]},{"entry":[{},"Initialize","Initialize MD5 instance to be used."]},{"entry":[{},"MD5"]},{"entry":[{},"Instance"]},{"entry":[{},"Process","Process MD5 block."]},{"entry":[{},"MD5 Block"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The call parameters passed may include the key to be used; mode (encryption or decryption; any needed Initialization Vectors: the desired cryptographic operating (e.g., type of feedback: the identification of the cryptographic instance to be used: and the start address, destination address, and length of the block to be encrypted or decrypted.","SPU Key and Tag Manager ","The SPU Key and Tag Manager  supports calls for key storage key and management file tag look up key convolution, and the generation of random keys, tags, and transaction numbers.","The following table shows an example of a list of SPE\/HPE and tag manager service  calls:",{"@attributes":{"id":"p-0691","num":"1001"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Call Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Key Requests"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Get Key","Retrieve the requested key."]},{"entry":["Get Key","Set (store) the specified key."]},{"entry":["Generate Key","Generate a key (pair) for a specified"]},{"entry":[{},"algorithm."]},{"entry":["Get Convoluted Key","Generate a key using a specified convolution"]},{"entry":[{},"algorithm and algorithm parameter block."]},{"entry":["Get Convolution","Return the currently set (default) convolution"]},{"entry":["Algorithm","parameters for a specific convolution"]},{"entry":[{},"algorithm."]},{"entry":["Set Convolution","Sets the convolution parameters for a specific"]},{"entry":["Algorithm","convolution algorithm (calling routine must"]},{"entry":[{},"provide a tag to read returned contents)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Tag Requests"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Get Tag","Get the validation or other tag for a specific"]},{"entry":[{},"VDE Item ID"]},{"entry":["Get Tag","Set the validation or other tag for a specific"]},{"entry":[{},"VDE Item ID to a known value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Keys and tags may be securely generated within SPE  (HPE ) in the preferred embodiment. The key generation algorithm is typically specific to each type of encryption supported. The generated keys may be checked for cryptographic weakness before they are used. A request for Key and Tag Manager  to generate a key, tag and\/or transaction number preferably takes a length as its input parameter. It generates a random number (or other appropriate key value) of the requested length as its output.","The key and tag manager  may support calls to retrieve specific keys from the key storage areas in SPU  and any keys stored external to the SPU. The basic format of the calls is to request keys by key type and key number. Many of the keys are periodically updated through contact with the VDE administrator, and are kept within SPU  in NVRAM or EEPROM because these memories are secure, updatable and non-volatile.","SPE \/HPE  may support both Public Key type keys and Bulk Encryption type keys. The public key (PK) encryption type keys stored by SPU  and managed by key and tag manager  may include, for example, a device public key, a device private key, a PK certificate, and a public key for the certificate. Generally, public keys and certificates can be stored externally in non-secured memory if desired, but the device private key and the public key for the certificate should only be stored internally in an SPU  EEPROM or NVRAM . Some of the types of bulk encryption keys used by the SPU  may include, for example, general-purpose bulk encryption keys, administrative object private header keys, stationary object private header keys, traveling object private header keys, download\/initialization keys, backup keys, trail keys, and management file keys.","As discussed above, preferred embodiment Key and Tag Manager  supports requests to adjust or convolute keys to make new keys that are produced in a deterministic way dependent on site and\/or time, for example. Key convolution is an algorithmic process that acts on a key and some set of input parameter(s) to yield a new key. It can be used, for example, to increase the number of keys available for use without incurring additional key storage space. It may also be used, for example, as a process to \u201cage\u201d keys by incorporating the value of real-time RTC  as parameters. It can be used to make keys site specific by incorporating aspects of the site ID as parameters.","Key and Tag Manager  also provides services relating to tag generation and management. In the preferred embodiment, transaction and access tags are preferably stored by SPE  (HPE ) in protected memory (e.g., within the NVRAM of SPU ). These tags may be generated by key and tag manager . They are used to, for example, check access rights to, validate and correlate data elements. For example, they may be used to ensure components of the secured data structures are not tampered with outside of the SPU . Key and tag manager  may also support a trail transaction tag and a communications transaction tag.","SPU Summary Services Manager ","SPE  maintains an audit trail in reprogrammable non-volatile memory within the SPU  and\/or in secure database . This audit trail may consist of an audit summary of budget activity for financial purposes, and a security summary of SPU use. When a request is made to the SPU, it logs the request as having occurred and then notes whether the request succeeded or failed. All successful requests may be summed and stored by type in the SPU . Failure information, including the elements listed below, may be saved along with details of the failure:",{"@attributes":{"id":"p-0698","num":"1008"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Control Information Retained in"},{"entry":"an SPE on Access Failures"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object ID"]},{"entry":[{},"User ID"]},{"entry":[{},"Type of failure"]},{"entry":[{},"Time of failure"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"500"},"Summary services manager  may store and maintain this internal summary audit information. This audit information can be used to check for security breaches or other aspects of the operation of SPE . The event summaries may be maintained, analyzed and used by SPE  (HPE ) or a VDE administrator to determine and potentially limit abuse of electronic appliance . In the preferred embodiment, such parameters may be stored in secure memory (e.g., within the NVRAM of SPU ).","There are two basic structures for which summary services are used in the preferred embodiment. One (the \u201cevent summary data structure\u201d) is VDE administrator specific and keeps track of events. The event summary structure may be maintained and audited during periodic contact with VDE administrators. The other is used by VDE administrators and\/or distributors for overall budget. A VDE administrator may register for event summaries and an overall budget summary at the time an electronic appliance  is initialized. The overall budget summary may be reported to and used by a VDE administrator in determining distribution of consumed budget (for example) in the case of corruption of secure management files . Participants that receive appropriate permissions can register their processes (e.g., specific budgets) with summary services manager , which may then reserve protected memory space (e.g., within NVRAM ) and keep desired use and\/or access parameters. Access to and modification of each summary can be controlled by its own access tag.","The following table shows an example of a list of PPE summary service manager  service calls:",{"@attributes":{"id":"p-0702","num":"1012"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Call Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Create summary","Create a summary service if the user"]},{"entry":[{},"info","has a \u201dticket\u201c that permits her to"]},{"entry":[{},{},"request this service."]},{"entry":[{},"Get value","Return the current value of the"]},{"entry":[{},{},"summary service. The caller must"]},{"entry":[{},{},"present an appropriate tag (and\/or"]},{"entry":[{},{},"\u201dticket\u201c) to use this request."]},{"entry":[{},"Set value","Set the value of a summary service."]},{"entry":[{},"Increment","Increment the specified summary"]},{"entry":[{},{},"service(e.g., a scalar meter summary"]},{"entry":[{},{},"data area). The caller must present an"]},{"entry":[{},{},"appropriate tag (and\/or \u201cticket\u201d) to use"]},{"entry":[{},{},"this request."]},{"entry":[{},"Destroy","Destroy the specified summary service"]},{"entry":[{},{},"if the user has a tag and\/or \u201cticket\u201d that"]},{"entry":[{},{},"permits them to request this service."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In the preferred embodiment, the event summary data structure uses a fixed event number to index into a look up table. The look up table contains a value that can be configured as a counter or a counter plus limit. Counter mode may be used by VDE administrators to determine device usage. The limit mode may be used to limit tampering and attempts to misuse the electronic appliance . Exceeding a limit will result in SPE  (HPE ) refusing to service user requests until it is reset by a VDE administrator. Calls to the system wide event summary process may preferably be built into all load modules that process the events that are of interest.","The following table shows examples of events that may be separately metered by the preferred embodiment event summary data structure:",{"@attributes":{"id":"p-0705","num":"1015"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Event Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Successful Events","Initialization completed successfully."]},{"entry":[{},{},"User authentication accepted."]},{"entry":[{},{},"Communications established."]},{"entry":[{},{},"Channel loads set for specified values."]},{"entry":[{},{},"Decryption completed."]},{"entry":[{},{},"Key information updated."]},{"entry":[{},{},"New budget created or existing budget."]},{"entry":[{},{},"New billing information generated or"]},{"entry":[{},{},"existing billing updated."]},{"entry":[{},{},"New PERC created or existing PERC"]},{"entry":[{},{},"updated."]},{"entry":[{},{},"New objects registered."]},{"entry":[{},{},"Administrative objects successfully"]},{"entry":[{},{},"processed."]},{"entry":[{},{},"Audit processed successfully."]},{"entry":[{},{},"All other events."]},{"entry":[{},"Failed Events","Initialization failed."]},{"entry":[{},{},"Authentication failed."]},{"entry":[{},{},"Communication attempt failed."]},{"entry":[{},{},"Request to load a channel failed."]},{"entry":[{},{},"Validation attempt unsuccessful."]},{"entry":[{},{},"Link to subsidiary item failed"]},{"entry":[{},{},"correlation tag match."]},{"entry":[{},{},"Authorization attempt failed."]},{"entry":[{},{},"Decryption attempt failed."]},{"entry":[{},{},"Available budget insufficient to"]},{"entry":[{},{},"complete requested procedure."]},{"entry":[{},{},"Audit did not occur."]},{"entry":[{},{},"Administrative object did not process"]},{"entry":[{},{},"correctly."]},{"entry":[{},{},"Other failed events."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Another, \u201coverall currency budget\u201d summary data structure maintained by the preferred embodiment summary services manager  allows registration of VDE electronic appliance . The first entry is used for an overall currency budget consumed value, and is registered by the VDE administrator that first initializes SPE  (HPE ). Certain currency consuming load modules and audit load modules that complete the auditing process for consumed currency budget may call the summary services manager  to update the currency consumed value. Special authorized load modules may have access to the overall currency summary, while additional summaries can be registered for by individual providers.","SPE Authentication Manager\/Service Communications Manager ","The Authentication Manager\/Service Communications Manager  supports calls for user password validation and \u201cticket\u201d generation and validation. It may also support secure communications between SPE  and an external node or device (e.g., a VDE administrator or distributor). It may support the following examples of authentication-related service requests in the preferred embodiment:",{"@attributes":{"id":"p-0708","num":"1018"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Call Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"User Services"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Create User","Creates a new user and stores Name Services"]},{"entry":[{},"Records (NSRs) for use by the Name Services"]},{"entry":[{},"Manager 752."]},{"entry":["Authenticate User","Authenticates a user for use of the system. This"]},{"entry":[{},"request lets the caller authenticate as a specific"]},{"entry":[{},"user ID. Group membership is also"]},{"entry":[{},"authenticated by this request. The authentication"]},{"entry":[{},"returns a \u201cticket\u201d for the user."]},{"entry":["Delete User","Deletes a user's NSR and related records."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Ticket Services"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Generate Ticket","Generates a \u201cticket\u201d for use of one or more"]},{"entry":[{},"services."]},{"entry":["Authenticate","Authenticates a \u201cticket.\u201d"]},{"entry":"Ticket"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Not included in the table above are calls to the secure communications service. The secure communications service provided by manager  may provide (e.g., in conjunction with low-level services manager  if desired) secure communications based on a public key (or others) challenge-response protocol. This protocol is discussed in further detail elsewhere in this document. Tickets identify users with respect to the electronic appliance  in the case where the appliance may be used by multiple users. Tickets may be requested by and returned to VDE software applications through a ticket-granting protocol (e.g., Kerberos). VDE components may require tickets to be presented in order to authorize particular services.","SPE Secure Database Manager ","Secure database manager  retrieves, maintains and stores secure database records within secure database  on memory external to SPE . Many of these secure database files  are in encrypted form. All secure information retrieved by secure database manager  therefore must be decrypted by encrypt\/decrypt manager  before use. Secure information (e.g., records of use) produced by SPE  (HPE ) which must be stored external to the secure execution environment are also encrypted by encrypt decrypt manager  before they are stored via secure database manager  in a secure database file .","For each VDE item loaded into SPE , Secure Database manager  in the preferred embodiment may search a master list for the VDE item ID, and then check the corresponding transaction tag against the one in the item to ensure that the item provided is the current item. Secure Database Manager  may maintain list of VDE item ID and transaction tags in a \u201chash structure\u201d that can be paged into SPE  to quickly locate the appropriate VDE item ID. In smaller systems, a look up table approach may be used. In either case, the list should be structured as a pagable structure that allows VDE item ID to be located quickly.","The \u201chash structure\u201d approach may be used to sort the list into \u201chash buckets\u201d that may then be accessed to provide more rapid and efficient location of items in the list. In the \u201chash based\u201d approach, the VDE item IDs an \u201chashed\u201d through a subset of the full item ID and organized as pages of the \u201chashed\u201d table. Each \u201chashed\u201d page may contain the rest of the VDE item ID and current transaction tag for each item associated with that page. The \u201chash\u201d table page number may be derived from the components of the VDE item ID, such as distribution ID, item ID, site ID, user ID, transaction tag, creator ID, type and\/or version. The hashing algorithm (both the algorithm itself and the parameters to be hashed may be configurable by a VDE administrator on a site by site basis to provide optimum hash page use. An example of a hash page structure appears below:",{"@attributes":{"id":"p-0713","num":"1023"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hash Page Header"]},{"entry":[{},"Distributor ID"]},{"entry":[{},"Item ID"]},{"entry":[{},"Site ID"]},{"entry":[{},"User ID"]},{"entry":[{},"Transaction Tag"]},{"entry":[{},"Hash Page Entry"]},{"entry":[{},"Creator ID"]},{"entry":[{},"Item ID"]},{"entry":[{},"Type"]},{"entry":[{},"Version"]},{"entry":[{},"Transaction Tag"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In this example, each hash page may contain all of the VDE item IDs and transaction tags for items that have identical distributor ID, item ID, and user ID fields (site ID will be fixed for a given electronic appliance ). These four pieces of information may thus be used as bash algorithm parameters.","The \u201chash\u201d pages may themselves be frequently updated, and should carry transaction tags that are checked each time a \u201chash\u201d page is loaded. The transaction tag may also be updated each time a \u201chash\u201d page is written out.","As an alternative to the hash-based approach, if the number of updatable items is kept small (such as in a dedicated consumer electronic appliance ), then assigning each updatable item a unique sequential site record number as part of its VDE item ID may allow a look up table approach to be used. Only a small number of bytes of transaction tag are needed per item, and a table transaction tag for all frequently updatable items can be kept in protected memory such as SPU NVRAM ","Random Value Generator Manager ","Random Value Generator Manager  may generate random values. If a hardware-based SPU random value generator  is present, the Random Value Generator Manager  may use it to assist in generating random values.","Other SPE RPC Services ","Other authorized RPC services may be included in SPU  by having them \u201cregister\u201d themselves in the RPC Services Table and adding their entries to the RPC Dispatch Table. For example, one or more component assemblies  may be used to provide additional services as an integral part of SPE  and its associated operating system. Requests to services not registered in these tables will be passed out of SPE  (HPE ) for external servicing.","SPE  Performance Considerations","Performance of SPE  (HPE ) is a function of:\n\n","The complexity of component assembly processes along with the number of simultaneous component assembly processes is perhaps the primary factor in determining performance. These factors combine to determine the amount of code and data and must be resident in SPU  at any one time (the minimum device size) and thus the number of device size \u201cchunks\u201d the processes must be broken down into. Segmentation inherently increases run time size over simpler models. Of course, feature limited versions of SPU  may be implemented using significantly smaller amounts of RAM . \u201cAggregate\u201d load modules as described above may remove flexibility in configuring VDE structures and also further limit the ability of participants to individually update otherwise separated elements, but may result in a smaller minimum device size. A very simple metering version of SPU  can be constructed to operate with minimal device resources.","The amount of RAM  internal to SPU  has more impact on the performance of the SPE  than perhaps any other aspect of the SPU. The flexible nature of VDE processes allows use of a large number of load modules, methods and user data elements. It is impractical to store more than a small number of these items in ROM  within SPU . Most of the code and data structures needed to support a specific VDE process will need to be dynamically loaded into the SPU  for the specific VDE process when the process is invoked. The operating system within SPU  then may page in the necessary VDE items to perform the process. The amount of RAM  within SPU  will directly determine how large any single VDE load module plus its required data can be, as well as the number of page swaps that will be necessary to run a VDE process. The SPU I\/O speed, encryption\/decryption speed, and the amount of internal memory ,  will directly affect the number of page swaps required in the device. Insecure external memory may reduce the wait time for swapped pages to be loaded into SPU , but will still incur substantial encryption\/decryption penalty for each page.","In order to maintain security, SPE  must encrypt and cryptographically seal each block being swapped out to a storage device external to a supporting SPU , and must similarly decrypt, verify the cryptographic seal for, and validate each block as it is swapped into SPU . Thus, the data movement and encryption\/decryption overhead for each swap block has a very large impact on SPE performance.","The performance of an SPU microprocessor  may not significantly impact the performance of the SPE  it supports if the processor is not responsible for moving data through the encrypt\/decrypt engine .","VDE Secure Database ","VDE  stores separately deliverable VDE elements in a secure (e.g., encrypted) database  distributed to each VDE electronic appliance . The database  in the preferred embodiment may store and\/or manage three basic classes of VDE items:","VDE objects,","VDE process elements, and","VDE data structures.","The following table lists examples of some of the VDE items stored in or managed by information stored in secure database :",{"@attributes":{"id":"p-0729","num":"1043"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Class",{},"Brief Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Objects","Content Objects","Provide a container for"]},{"entry":[{},{},"content."]},{"entry":[{},"Administrative Objects","Provide a container for"]},{"entry":[{},{},"information used to keep"]},{"entry":[{},{},"VDE 100 operating."]},{"entry":[{},"Traveling Objects","Provide a container for"]},{"entry":[{},{},"content and control"]},{"entry":[{},{},"information."]},{"entry":[{},"Smart Objects","Provide a container for (user-"]},{"entry":[{},{},"specified) processes and data."]},{"entry":["Process","Method Cores","Provide a mechanism to relate"]},{"entry":["Elements",{},"events to control mechanisms"]},{"entry":[{},{},"and permissions."]},{"entry":[{},"Load Modules (\u201cLMs\u201d)","Secure (tamper-resistant)"]},{"entry":[{},{},"executable code."]},{"entry":[{},"Method Data Elements","Independently deliverable"]},{"entry":[{},"(\u201cMDEs\u201d)","data structures used to"]},{"entry":[{},{},"control\/customize methods."]},{"entry":["Data Structures","Permissions Records","Permissions to use objects:"]},{"entry":[{},"(\u201cPERCs\u201d)","\u201cblueprints\u201d to build"]},{"entry":[{},{},"component assemblies."]},{"entry":[{},"User Data Elements","Basic data structure for"]},{"entry":[{},"(\u201dUDEs\u201c)","storing information used in"]},{"entry":[{},{},"conjunction with load"]},{"entry":[{},{},"modules."]},{"entry":[{},"Administrative Data","Used by VDE node to"]},{"entry":[{},"Structures","maintain administrative"]},{"entry":[{},{},"information"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Each electronic appliance  may have an instance of a secure database  that securely maintains the VDE items.  shows one example of a secure database . The secure database  shown in this example includes the following VDE-protected items:\n\n","Secure database  may also include the following additional data structures used and maintained for administrative purposes:\n\n","Secure database  in the preferred embodiment does not include VDE objects , but rather references VDE objects stored, for example, on file system  and\/or in a separate object repository . Nevertheless, an appropriate \u201cstarting point\u201d for understanding VDE-protected information may be a discussion of VDE objects .","VDE Object ","VDE  provides a media independent container model for encapsulating content  shows an example of a \u201clogical\u201d structure or format  for an object  provided by the preferred embodiment.","The generalized \u201clogical object\u201d structure  shown in  used by the preferred embodiment supports digital content delivery over any currently used media. \u201cLogical object\u201d in the preferred embodiment may refer collectively to: content; computer software and\/or methods used to manipulate, record, and\/or otherwise control use of said content; and permissions, limitations, administrative control information and\/or requirements applicable to said content, and\/or said computer software and\/or methods. Logical objects may or may not be stored, and may or may not be present in, or accessible to, any given electronic appliance . The content portion of a logical object may be organized as information contained in, not contained in, or partially contained in one or more objects.","Briefly, the  \u201clogical object\u201d structure  in the preferred embodiment includes a public header , private header , a \u201cprivate body\u201d  containing one or more methods , permissions record(s) (PERC)  (which may include one or more key blocks ), and one or more data blocks or areas . These elements may be \u201cpackaged\u201d within a \u201ccontainer\u201d . This generalized, logical object structure  is used in the preferred embodiment for different types of VDE objects  categorized by the type and location of their content.","The \u201ccontainer\u201d concept is a convenient metaphor used to give a name to the collection of elements required to make use of content or to perform an administrative-type activity. Container  typically includes identifying information, control structures and content (e.g., a property or administrative data). The term \u201ccontainer\u201d is often (e.g., Bento\/OpenDoc and OLE) used to describe a collection of information stored on a computer system's secondary storage system(s) or accessible to a computer system over a communications network on a \u201cserver's\u201d secondary storage system. The \u201ccontainer\u201d  provided by the preferred embodiment is not so limited or restricted. In VDE , there is no requirement that this information is stored together, received at the same time, updated at the same time, used for only a single object, or be owned by the same entity. Rather, in VDE  the container concept is extended and generalized to include real-time content and\/or online interactive content passed to an electronic appliance over a cable, by broadcast, or communicated by other electronic communication means.","Thus, the \u201ccomplete\u201d VDE container  or logical object structure  may not exist at the user's location (or any other location, for that matter) at any one time. The \u201clogical object\u201d may exist over a particular period of time (or periods of time), rather than all at once. This concept includes the notion of a \u201cvirtual container\u201d where important container elements may exist either as a plurality of locations and\/or over a sequence of time periods (which may or may not overlap). Of course, VDE  containers can also be stored with all required control structures and content together. This represents a continuum: from all content and control structures present in a single container, to no locally accessible content or container specific control structures.","Although at least some of the data representing the object is typically encrypted and thus its structure is not discernible, within a PPE  the object may be viewed logically as a \u201ccontainer\u201d  because its structure and components are automatically and transparently decrypted.","A container model merges well with the event-driven processes and ROS  provided by the preferred embodiment. Under this model, content is easily subdivided into small, easily manageable pieces, but is stored so that it maintains the structural richness inherent in unencrypted content. An object oriented container model (such as Bento\/OpenDoc or OLE) also provides many of the necessary \u201chooks\u201d for inserting the necessary operating system integration components, and for defining the various content specific methods.","In more detail, the logical object structure  provided by the preferred embodiment includes a public (or unencrypted) header  that identifies the object and may also identify one or more owners of rights in the object and\/or one or more distributors of the object. Private (or encrypted) header  may include a part or all of the information in the public header and further, in the preferred embodiment, will include additional data for validating arid identifying the object  when a user attempts to register as a user of the object with a service clearinghouse, VDE administrator, or an SPU . Alternatively, information identifying one or more rights owners and\/or distributors of the object may be located in encrypted form within encrypted header , along with any of said additional validating and identifying data.","Each logical object structure  may also include a \u201cprivate body\u201d  containing or referencing a set of methods  (i.e., programs or procedures) that control use and distribution of the object . The ability to optionally incorporate different methods  with each object is important to making VDE  highly configurable. Methods  perform the basic function of defining what users (including, where appropriate, distributors, client administrators, etc.), can and cannot do with an object . Thus, one object  may come with relatively simple methods, such as allowing unlimited viewing within a fixed period of time for a fixed fee (such as the newsstand price of a newspaper for viewing the newspaper for a period of one week after the paper's publication, while other objects may be controlled by much more complicated e.g., billing and usage limitation methods.","Logical object structure  shown in , may also include one or more PERCs . PERCs  govern the use of an object , specifying methods or combinations of methods that must be used to access or otherwise use the object or its contents. The permission records  for an object may include key block(s) , which may store decryption keys for accessing the content of the encrypted content stored within the object .","The content portion of the object is typically divided into portions called data blocks . Data blocks  may contain any sort of electronic information, such as, \u201ccontent,\u201d including computer programs, images, sound, VDE administrative information, etc. The size and number of data blocks  may be selected by the creator of the property. Data blocks  need not all be the same size (size may be influenced by content usage, database format, operating system, security and\/or other considerations). Security will be enhanced by using at least one key block  for each data block  in the object, although this is not required. Key blocks  may also span portions of a plurality of data blocks  in a consistent or pseudo-random manner. The spanning may provide additional security by applying one or more keys to fragmented or seemingly random pieces of content contained in an object , database, or other information entity.","Many objects  that are distributed by physical media and\/or by \u201cout of channel\u201d means (e.g., redistributed after receipt by a customer to another customer) might not include key blocks  in the same object  that is used to transport the content protected by the key blocks. This is because VDE objects may contain data that can be electronically copied outside the confines of a VDE node. If the content is encrypted, the copies will also be encrypted and the copier cannot gain access to the content unless she has the appropriate decryption key(s). For objects in which maintaining security is particularly important, the permission records  and key blocks  will frequently be distributed electronically, using secure communications techniques (discussed below) that are controlled by the VDE nodes of the sender and receiver. As a result, permission records  and key blocks  will frequently, in the preferred embodiment, be stored only on electronic appliances  of registered users (and may themselves be delivered to the user as part of a registration initialization process). In this instance, permission records  and key blocks  for each property can be encrypted with a private DES key that is stored only in the secure memory of an SPU , making the key blocks unusable on any other users'VDE node. Alternately, the key blocks  can be encrypted with the end user's public key, making those key blocks usable only to the SPU  that stores the corresponding private key or other, acceptably secure, encryption security techniques can be employed).","In the preferred embodiment, the one or more keys used to encrypt each permission record  or other management information record will be changed every time the record is updated (or after a certain one or more events). In this event, the updated record is re-encrypted with new one or more keys. Alternately, one or more of the keys used to encrypt and decrypt management information may be \u201ctime aged\u201d keys that automatically become invalid after a period of time. Combinations of time aged and other event triggered keys may also be desirable; for example keys may change after a certain number of accesses, and\/or after a certain duration of time or absolute point in time. The techniques may also be used together for any given key or combination of keys. The preferred embodiment procedure for constructing time aged keys is a one-way convolution algorithm with input parameters including user and site information as well as a specified portion of the real time value provided by the SPU RTC . Other techniques for time aging may also be used, including for example techniques that use only user or site information, absolute points in time, and\/or duration of time related to a subset of activities related to using or decrypting VDE secured content or the use of the VDE system.","VDE  supports many different types of \u201cobjects\u201d  having the logical object structure  shown in . Objects may be classified in one sense based on whether the protection information is bound together with the protected information. For example, a container that is bound by its control(s) to a specific VDE node is called a \u201cstationary object\u201d (see ). A container that is not bound by its control information to a specific VDE node but rather carries sufficient control and permissions to permit its use, in whole or in part, at any of several sites is called a \u201cTraveling Object\u201d (see .","Objects may be classified in another sense based on the nature of the information they contain. A container with information content is called a \u201cContent Object\u201d (see . A container that contains transaction information, audit trails, VDE structures, and\/or other VDE control\/administrative information is called an \u201cAdministrative Object\u201d see . Some containers that contain executable code operating under VDE control as opposed to being VDE control information are called \u201cSmart Objects.\u201d Smart Objects support user agents and provide control for their execution at remote sites. There are other categories of objects based upon the location, type and access mechanism associated with their content, that can include combinations of the types mentioned above. Some of these objects supported by VDE  are described below. Some or all of the data blocks  shown in  may include \u201cembedded\u201d content, administrative, stationary, traveling and\/or other objects.","1. Stationary Objects",{"@attributes":{"id":"p-0750","num":"1071"},"figref":"FIG. 18","b":["850","850","850","808","600","808"]},"As shown in , public header  is preferably \u201cplaintext\u201d (i.e., unencrypted Private header  is preferably encrypted using at least one of many \u201cprivate header keys.\u201d Private header  preferably also includes a copy of identification elements from public header , so that if the identification information in the plaintext public header is tampered with, the system can determine precisely what the tamperer attempted to alter. Methods  may be contained in a section called the \u201cprivate body\u201d  in the form of object local methods, load modules, and\/or user data elements. This private body (method) section  is preferably encrypted using one or more private body keys contained in the separate permissions record . The data blocks  contain content (information or administrative) that may be encrypted using one or more content keys also provided in permissions record .","2. Traveling Objects",{"@attributes":{"id":"p-0753","num":"1074"},"figref":"FIG. 19","b":"860"},"Traveling object structure  may be the same as stationary object structure  shown in  except that the traveling object structure includes a permissions record. (PERC)  within private header . The inclusion of PERC  within traveling object structure  permits the traveling object to be used at any VDE electronic appliance\/participant  (in accordance with the methods  and the contained PERC ).","\u201cTraveling\u201d objects are a class of VDE objects  that can specifically support \u201cout of channel\u201d distribution. Therefore, they include key block(s)  and are transportable from one electronic appliance  to another. Traveling objects may come with a quite limited usage related budget so that a user may use, in whole or part, content (such as a computer program, game, or database) and evaluate whether to acquire a license or further license or purchase object content. Alternatively, traveling object PERCs  may contain or reference budget records with, for example:\n\n","As with standard VDE objects , a user may be required to contact a clearinghouse service to acquire additional budgets if the user wishes to continue to use the traveling object after the exhaustion of an available budget(s) or if the traveling object (or a copy thereof) is moved to a different electronic appliance and the new appliance does not have a available credit budget(s) that corresponds to the requirements stipulated by permissions record .","For example, a traveling object PERC  may include a reference to a required budget VDE  or budget options that may be found and\/or are expected to be available. For example, the budget VDE may reference a consumer's VISA, MC, AMEX, or other \u201cgeneric\u201d budget that may be object independent and may be applied towards the use of a certain or classes of traveling object content (for example any movie object from a class of traveling objects that might be Blockbuster Video rentals). The budget VDE itself may stipulate one or more classes of objects it may be used with, while an object may specifically reference a certain one or more generic budgets. Under such circumstances, VDE providers will typically make information available in such a manner as to allow correct referencing and to enable billing handling and resulting payments.","Traveling objects can be used at a receiving VDE node electronic appliance  so long as either the appliance carries the correct budget or budget type (e.g. sufficient credit available from a clearinghouse such as a VISA budget) either in general or for specific one or more users or user classes, or so long as the traveling object itself carries with it sufficient budget allowance or an appropriate authorization (e.g., a stipulation that the traveling object may be used on certain one or more installations or installation classes or users or user classes where classes correspond to a specific subset of installations or users who are represented by a predefined class identifiers stored in a secure database ). After receiving a traveling object, if the user (and\/or installation doesn't have the appropriate budget(s) and\/or authorizations, then the user could be informed by the electronic appliance  (using information stored in the traveling object) as to which one or more parties the user could contact. The party or parties might constitute a list of alternative clearinghouse providers for the traveling object from which the user selects his desired contact).","As mentioned above, traveling objects enable objects  to be distributed \u201cOut-Of-Channel;\u201d that is, the object may be distributed by an unauthorized or not explicitly authorized individual to another individual. \u201cOut-Of-Channel\u201d includes paths of distribution that allow, for example, a user to directly redistribute an object to another individual. For example, an object provider might allow users to redistribute copies of an object to their friends and associates (for example by physical delivery of storage media or by delivery over a computer network) such that if a friend or associate satisfies any certain criteria required for use of said object, he may do so.","For example, if a software program was distributed as a traveling object, a user of the program who wished to supply it or a usable copy of it to a friend would normally be free to do so. Traveling Objects have great potential commercial significance, since useful content could be primarily distributed by users and through bulletin boards, which would require little or no distribution overhead apart from registration with the \u201coriginal\u201d content provider and\/or clearinghouse.","The \u201cout of channel\u201d distribution may also allow the provider to receive payment for usage and\/or elsewise maintain at least a degree of control over the redistributed object. Such certain criteria might involve, for example, the registered presence at a user's VDE node of an authorized third party financial relationship, such as a credit card, along with sufficient available credit for said usage.","Thus, if the user had a VDE node, the user might be able to use the traveling object if he had an appropriate, available budget available on his VDE node (and if necessary, allocated to him), and\/or if he or his VDE node belonged to a specially authorized group of users or installations and\/or if the traveling object carried its own budget(s).","Since the content of the traveling object is encrypted, it can be used only under authorized circumstances unless the traveling object private header key used with the object is broken\u2014a potentially easier task with a traveling object as compared to, for example, permissions and\/or budget information since many objects may share the same key, giving a cryptoanalyst both more information in cyphertext to analyze and a greater incentive to perform cryptoanalysis.","In the case of a \u201ctraveling object,\u201d content owners may distribute information with some or all of the key blocks  included in the object  in which the content is encapsulated. Putting keys in distributed objects  increases the exposure to attempts to defeat security mechanisms by breaking or cryptoanalyzing the encryption algorithm with which the private header is protected (e.g., by determining the key for the header's encryption). This breaking of security would normally require considerable skill and time, but if broken, the algorithm and key could be published so as to allow large numbers of individuals who possess objects that are protected with the same key(s) and algorithm(s) to illegally use protected information. As a result, placing keys in distributed objects  may be limited to content that is either \u201ctime sensitive\u201d (has reduced value after the passage of a certain period of time), or which is somewhat limited in value, or where the commercial value of placing keys in objects (for example convenience to end-users, lower cost of eliminating the telecommunication or other means for delivering keys and\/or permissions information and\/or the ability to supporting objects going \u201cout of channel\u201d exceeds the cost of vulnerability to sophisticated hackers. As mentioned elsewhere, the security of keys may be improved by employing convolution techniques to avoid storing \u201ctrue\u201d keys in a traveling object, although in most cases using a shared secret provided to most or all VDE nodes by a VDE administrator as an input rather than site ID and\/or time in order to allow objects to remain independent of these values.","As shown in  and discussed above, a traveling object contains a permissions record  that preferably provides at least some budget (one, the other, or both, in a general case). Permission records  can, as discussed above, contain a key block(s)  storing important key information. PERC  may also contain or refer to budgets containing potentially valuable quantities\/values. Such budgets may be stored within a traveling object itself, or they may be delivered separately and protected by highly secure communications keys and administrative object keys and management database techniques.","The methods  contained by a traveling object will typically include an installation procedure for \u201cself-registering\u201d (the object using the permission records  in the object (e.g., a REGISTER method). This may be especially useful for objects that have time limited value, objects (or properties) for which the end user is either not charged or is charged only a nominal fee (e.g., objects for which advertisers and\/or information publishers are charged based on the number of end users who actually access published information), and objects that require widely available budgets and may particularly benefit from out-of-channel distribution (e.g., credit card derived budgets for objects containing properties such as movies, software programs, games, etc.). Such traveling objects may be supplied with or without contained budget UDEs.","One use of traveling objects is the publishing of software, where the contained permission record(s) may allow potential customers to use the software in a demonstration mode, and possibly to use the full program features for a limited time before having to pay a license fee, or before having to pay more than an initial trial fee. For example, using a time based billing method and budget records with a small pre-installed time budget to allow full use of the program for a short period of time. Various control methods may be used to avoid misuse of object contents. For example, by setting the minimum registration interval for the traveling object to an appropriately large period of time (e.g., a month, or six months or a year), users are prevented from re-using the budget records in the same traveling object.","Another method for controlling the use of traveling objects is to include time-aged keys in the permission records that are incorporated in the traveling object. This is useful generally for traveling objects to ensure that they will not be used beyond a certain date without re-registration, and is particularly useful for traveling objects that are electronically distributed by broadcast, network, or telecommunications (including both one and two way cable), since the date and time of delivery of such traveling objects aging keys can be set to accurately correspond to the time the user came into possession of the object.","Traveling objects can also be used to facilitate \u201cmoving\u201d an object from one electronic appliance  to another. A user could move a traveling object, with its incorporated one or more permission records  from a desktop computer, for example, to his notebook computer. A traveling object might register its user within itself and thereafter only be useable by that one user. A traveling object might maintain separate budget information, one for the basic distribution budget record, and another for the \u201cactive\u201d distribution budget record of the registered user. In this way, the object could be copied and passed to another potential user, and then could be a portable object for that user.","Traveling objects can come in a container which contains other objects. For example, a traveling object container can include one or more content objects and one or more administrative objects for registering the content object(s) in an end user's object registry and\/or for providing mechanisms for enforcing permissions and\/or other security functions. Contained administrative object(s) may be used to install necessary permission records and\/or budget information in the end user's electronic appliance.","Content Objects",{"@attributes":{"id":"p-0772","num":"1096"},"figref":"FIG. 20","b":["880","880","100"]},"Content object structure  in the particular example shown in  is a type of stationary object because it does not include a PERC . In this example, content object structure  includes, as at least part of its content , at least one embedded content object  as shown in . Content object structure  may also include an administrative object . Thus, objects provided by the preferred embodiment may include one or more \u201cembedded\u201d objects.","Administrative Objects",{"@attributes":{"id":"p-0775","num":"1099"},"figref":"FIG. 21","b":["870","100","100","100","600"]},"Administrative object structure  in this example includes a public header , private header  (including a \u201cPERC\u201d ) and a \u201cprivate body\u201d  containing methods . Administrative object structure  in this particular example shown in  is a type of traveling object because it contains a PERC , but the administrative object could exclude the PERC  and be a stationary object. Rather than storing information content, administrative object structure  stores \u201cadministrative information content\u201d . Administrative information content  may, for example, comprise a number of records , . . . each corresponding to a different \u201cevent.\u201d Each record , , . . . may include an \u201cevent\u201d field , and may optionally include a parameter field  and\/or a data field . These administrative content records  may be used by VDE  to define events that may be processed during the course of transactions, e.g., an event designed to add a record to a secure database might include parameters  indicating how and where the record should be stored and data field  containing the record to be added. In another example, a collection of events may describe a financial transaction between the creator(s) of an administrative object and the recipient(s), such as a purchase, a purchase order, or an invoice. Each event record  may be a set of instructions to be executed by the end user's electronic appliance  to make an addition or modification to the end user's secure database , for example. Events can perform many basic management functions, for example: add an object to the object registry, including providing the associated user\/group record(s), rights records, permission record and\/or method records; delete audit records (by \u201crolling up the audit trail information into, for example, a more condensed, e.g. summary form, or by actual deletion); add or update permissions records  for previously registered objects; add or update budget records; add or update user rights records: and add or update load modules.","In the preferred embodiment, an administrative object may be sent, for example, by a distributor, client administrator, or, perhaps, a clearinghouse or other financial service provider, to an end user, or, alternatively, for example, by an object creator to a distributor or service clearinghouse. Administrative objects, for example, may increase or otherwise adjust budgets and\/or permissions of the receiving VDE node to which the administrative object is being sent. Similarly, administrative objects containing audit information in the data area  of an event record  can be sent from end users to distributors, and\/or clearinghouses and\/or client administrators, who might themselves further transmit to object creators or to other participants in the object's chain of handling.","Methods","Methods  in the preferred embodiment support many of the operations that a user encounters in using objects and communicating with a distributor. They may also specify what method fields are displayable to a user (e.g., use events, user request events, user response events, and user display events). Additionally, if distribution capabilities are supported in the method, then the method may support distribution activities, distributor communications with a user about a method, method modification, what method fields are displayable to a distributor, and any distribution database checks and record keeping (e.g., distribution events, distributor request events, and distributor response events).","Given the generality of the existing method structure, and the diverse array of possibilities for assembling methods, a generalized structure may be used for establishing relationships between methods. Since methods  may be independent of an object that requires them during any given session, it is not possible to define the relationships within the methods themselves. \u201cControl methods\u201d are used in the preferred embodiment to define relationships between methods. Control methods may be object specific, and may accommodate an individual object's requirements during each session.","A control method of an object establishes relationships between other methods. These relationships are parameterized with explicit method identifiers when a record set reflecting desired method options for each required method is constructed during a registration process.","An \u201caggregate method\u201d in the preferred embodiment represents a collection of methods that may be treated as a single unit. A collection of methods that are related to a specific property, for example, may be stored in an aggregate method. This type of aggregation is useful from an implementation point of view because it may reduce bookkeeping overhead and may improve overall database efficiency. In other cases, methods may be aggregated because they are logically coupled. For example, two budgets may be linked together because one of the budgets represents an overall limitation, and a second budget represents the current limitation available for use. This would arise if, for example, a large budget is released in small amounts over time.","For example, an aggregate method that includes meter, billing and budget processes can be used instead of three separate methods. Such an aggregate method may reference a single \u201cload module\u201d  that performs all of the functions of the three separate load modules and use only one user data element that contains meter, billing and budget data. Using an aggregate method instead of three separate methods may minimize overall memory requirements, database searches, decryptions, and the number of user data element writes back to a secure database . The disadvantage of using an aggregate method instead of three separate methods can be a loss of some flexibility on the part of a provider and user in that various functions may no longer be independently replaceable.",{"@attributes":{"id":"p-0784","num":"1108"},"figref":"FIG. 16","b":["1000","610"]},"A \u201cmethod\u201d  provided by the preferred embodiment is a collection of basic instructions and information related to the basic instructions, that provides context, data, requirements and\/or relationships for use in performing, and\/or preparing to perform, the basic instructions in relation to the operation of one or more electronic appliances . As shown in , methods  in the preferred embodiment are represented in secure database  by:\n\n","Method \u201ccore\u201d \u2032 in the preferred embodiment may contain or reference one or more data elements such as MDEs  and UDEs . In the preferred embodiment. MDEs  and UDEs  may have the same general characteristics, the main difference between these two types of data elements being that a UDE is preferably tied to a particular method as well as a particular user or group of users. whereas an MDE may be tied to a particular method but may be user independent. These MDE and UDE data structures ,  are used in the preferred embodiment to provide input data to methods , to receive data outputted by methods, or both. MDEs  and UDEs  may be delivered independently of method cores  that reference them, or the data structures may be delivered as part of the method cores. For example, the method core \u2032 in the preferred embodiment may contain one or more MDEs  and\/or UDEs  (or portions thereof). Method core \u2032 may, alternately or in addition, reference one or more MDE and\/or UDE data structures that are delivered independently of method core(s) that reference them.","Method cores \u2032 in the preferred embodiment also reference one or more \u201cload modules\u201d . Load modules  in the preferred embodiment comprise executable code, and may also include or reference one or more data structures called \u201cdata descriptor\u201d (\u201cDTD\u201d) information. This \u201cdata descriptor\u201d information may, for example, provide data input information to the DTD interpreter . DTDs may enable load modules  to access e.g. read from and\/or write to the MDE and or UDE data elements , .","Method cores \u2032 may also reference one or more DTD and\/or MDE data structures that contain a textual description of their operations suitable for inclusion as part of an electronic contract. The references to the DTD and MDE data structures may occur in the private header of the method core \u2032, or may be specified as part of the event table described below.",{"@attributes":{"id":"p-0789","num":"1117"},"figref":"FIG. 22","b":["1000","1000","1006","1008","1006","1100","808","1000","808","1008","1100"]},"Method cores \u2032 can be specific to a single user, or they may be shared across a number of users (e.g., depending upon the uniqueness of the method core and\/or the specific user data element). Specifically, each user group may have its own UDE  and use a shared method core \u2032. This structure allows for lower database overhead than when associating an entire method core \u2032 with a user\/group. To enable a user to use a method, the user may be sent a method core \u2032 specifying a UDE . If that method core \u2018already exists in the site\u2019s secure database , only the UDE  may need to be added. Alternately, the method may create any required UDE  at registration time.","The  example of a format for a method core  provided by the preferred embodiment includes a public (unencrypted) header , a private (encrypted) header , method event table , and a method local data area .","An example of a possible field layout for method core  public header  is shown in the following table:",{"@attributes":{"id":"p-0793","num":"1121"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Field Type",{},"Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Method ID","Creator ID","Site ID of creator of this"]},{"entry":[{},{},{},"method."]},{"entry":[{},{},"Distributor ID","Distributor of this method"]},{"entry":[{},{},{},"(e.g., last change)."]},{"entry":[{},{},"Type ID","Constant, indicates method"]},{"entry":[{},{},{},"\u201ctype\u201d"]},{"entry":[{},{},"Method ID","Unique sequence number"]},{"entry":[{},{},{},"for this method."]},{"entry":[{},{},"Version ID","Version number of this"]},{"entry":[{},{},{},"method."]},{"entry":[{},"Other","Class ID","ID to support different"]},{"entry":[{},"classification",{},"method \u201cclasses.\u201d"]},{"entry":[{},"information","Type ID","ID to support method type"]},{"entry":[{},{},{},"compatible searching."]},{"entry":[{},"Descriptive","Description (s)","Textual description(s) of the"]},{"entry":[{},"Information",{},"method."]},{"entry":[{},{},"Event","Summary of event classes"]},{"entry":[{},{},"Summary","(e.g., USE) that this method"]},{"entry":[{},{},{},"supports."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"An example of a possible field layout for private header  is shown below:",{"@attributes":{"id":"p-0795","num":"1123"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Field Type",{},"Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Copy of Public Header 802",{},"Method ID from"]},{"entry":[{},"Method ID and \u201cOther",{},"Public Header"]},{"entry":[{},"Classification Information",{},{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Descriptive","# of Events","# of events supported"]},{"entry":[{},"Information",{},"in this method."]},{"entry":[{},"Access and","Access tag","Tags used to"]},{"entry":[{},"Reference","Validation tag","determine if this"]},{"entry":[{},"Tags","Correlation tag","method is the correct"]},{"entry":[{},{},{},"method under"]},{"entry":[{},{},{},"management by the"]},{"entry":[{},{},{},"SPU; ensure that the"]},{"entry":[{},{},{},"method core 1000\u2019 is"]},{"entry":[{},{},{},"used only under"]},{"entry":[{},{},{},"appropriate"]},{"entry":[{},{},{},"circumstances."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Data Structure Reference",{},"Optional Reference to"]},{"entry":[{},{},{},"DTD(s) and\/or"]},{"entry":[{},{},{},"MDE(s)"]},{"entry":[{},"Check Value",{},"Check value for"]},{"entry":[{},{},{},"Private Header and"]},{"entry":[{},{},{},"method event table."]},{"entry":[{},"Check Value for Public Header",{},"Check Value for"]},{"entry":[{},{},{},"Public Header"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Referring once again to , method event table  may in the preferred embodiment include from 1 to N method event records . Each of these method event records  corresponds to a different event the method  represented by method core  may respond to. Methods  in the preferred embodiment may have completely different behavior depending upon the event they respond to. For example, an AUDIT method may store information in an audit trail UDE  in response to an event corresponding to a user's use of an object or other resource. This same AUDIT method may report the stored audit trail to a VDE administrator or other participant in response to an administrative event such as, for example, a timer expiring within a VDE node or a request from another VDE participant to report the audit trail. In the preferred embodiment, each of these different events may be represented by an \u201cevent code.\u201d This \u201cevent code\u201d may be passed as a parameter to a method when the method is called, and used to look up\u201d the appropriate method event record  within method event table . The selected method event record , in turn, specifies the appropriate information (e.g., load module(s) , data element UDE(s and MDE(s) , , and\/or PERC(s) ) used to construct a component assembly  for execution in response to the event that has occurred.","Thus, in the preferred embodiment, each method event record  may include an event field , a LM\/PERC reference field , and any number of data reference fields . Event fields  in the preferred embodiment may contain a \u201cevent code\u201d or other information identifying the corresponding event. The LM\/PERC reference field  may provide a reference into the secure database  (or other \u201cpointer\u201d information) identifying a load module  and\/or a PERC  providing (or referencing) executable code to be loaded and executed to perform the method in response to the event. Data reference fields  may include information referencing a UDE  or a MDE . These data structures may be contained in the method local data area  of the method core , or they may be stored within the secure database  as independent deliverables.","The following table is an example of a possible more detailed field layout for a method event record :",{"@attributes":{"id":"p-0799","num":"1127"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Event Field 1014","Identifies corresponding"]},{"entry":[{},"event"]},{"entry":["Access tag","Secret tag to grant access"]},{"entry":[{},"to this row of the method"]},{"entry":[{},"event record."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LWPERC","DB ID or offset size","Database reference (or"]},{"entry":["Reference",{},"local pointer)."]},{"entry":["Field 1016",{},{}]},{"entry":[{},"Correlation tag","Correlation tag to assert"]},{"entry":[{},{},"when referencing this"]},{"entry":[{},{},"element."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["# of Data Element Reference Fields","Count of data reference"]},{"entry":[{},"fields in the method"]},{"entry":[{},"event record."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Data Reference Field 1","UDE ID or offset\/size","Database 610 reference"]},{"entry":[{},{},"(or local pointer)."]},{"entry":[{},"Correlation tag","Correlation tag to assert"]},{"entry":[{},{},"when referencing this"]},{"entry":[{},{},"element."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"! . . . "}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Data Reference Field n","UDE ID or offset\/size","Database 610 reference"]},{"entry":[{},{},"(or local pointer)."]},{"entry":[{},"Correlation tag","Correlation tag to assert"]},{"entry":[{},{},"when referencing this"]},{"entry":[{},{},"element."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0800","num":"1128"},"figref":"FIG. 23","b":["1100","1100"]},"Load module  contains code and static data (that is functionally the equivalent of code), and is used to perform the basic operations of VDE . Load modules  will generally be shared by all the control structures for all objects in the system, though proprietary load modules are also permitted. Load modules  may be passed between VDE participants in administrative object structures , and are usually stored in secure database . They are always encrypted and authenticated in both of these cases. When a method core  references a load module , a load module is loaded into the SPE , decrypted, and then either passed to the electronic appliance microprocessor for executing in an HPE  (if that is where it executes), or kept in the SPE (if that is where it executes). If no SPE  is present, the load module may be decrypted by the HPE  prior to its execution.","Load module creation by parties is preferably controlled by a certification process or a ring based SPU architecture. Thus, the process of creating new load modules  is itself a controlled process, as is the process of replacing, updating or deleting load modules already stored in a secured database .","A load module  is able to perform its function only when executed in the protected environment of an SPE  or an HPE  because only then can it gain access to the protected elements (e.g., UDEs , other load modules ) on which it operates. Initiation of load module execution in this environment is strictly controlled by a combination of access tags, validation tags, encryption keys, digital signatures and\/or correlation tags. Thus, a load module  may only be referenced if the caller knows its ID and asserts the shared secret correlation tag specific to that load module. The decrypting SPU may match the identification token and local access tag of a load module after decryption. These techniques make the physical replacement of any load module  detectable at the next physical access of the load module.","Furthermore, load modules  may be made \u201cread only\u201d in the preferred embodiment. The read-only nature of load modules  prevents the write-back of load modules that have been tampered with in non-secure space.","Load modules are not necessarily directly governed by PERCs  that control them, nor must they contain any time\/date information or expiration dates. The only control consideration in the preferred embodiment is that one or more methods  reference them using a correlation tag (the value of a protected object created by the load module's owner, distributed to authorized parties for inclusion in their methods, and to which access and use is controlled by one or more PERCs ). If a method core  references a load module  and asserts the proper correlation tag (and the load module satisfies the internal tamper checks for the SPE ), then that load module can be loaded and executed, or it can be acquired from, shipped to, updated, or deleted by, other systems.","As shown in , load modules  in the preferred embodiment may be constructed of a public (unencrypted) header , a private (encrypted) header , a private body  containing the encrypted executable code, and one or more data description elements (\u201cDTDs\u201d) . The DTDs  may be stored within a load module , or they may be references to static data elements stored in secure database .","The following is an example of a possible field layout for load module public header :",{"@attributes":{"id":"p-0808","num":"1136"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LM ID",{},"VDE ID of Load Module."]},{"entry":[{},"Creator ID","Site ID of creator of this"]},{"entry":[{},{},"load module."]},{"entry":[{},"Type ID","Constant indicates load"]},{"entry":[{},{},"module type."]},{"entry":[{},"LM ID","Unique sequence number"]},{"entry":[{},{},"for this load module,"]},{"entry":[{},{},"which uniquely identifies"]},{"entry":[{},{},"the load module in a"]},{"entry":[{},{},"sequence of load modules"]},{"entry":[{},{},"created by an authorized"]},{"entry":[{},{},"VDE participant."]},{"entry":[{},"Version ID","Version number of this"]},{"entry":[{},{},"load module."]},{"entry":["Other classification","Class ID","ID to support different"]},{"entry":["information",{},"load module classes."]},{"entry":[{},"Type ID","ID to support method type"]},{"entry":[{},{},"compatible searching."]},{"entry":["Descriptive","Description","Textual description of the"]},{"entry":["Information",{},"load module."]},{"entry":[{},"Execution space code","Value that describes what"]},{"entry":[{},{},"execution space (e.g., SPE"]},{"entry":[{},{},"or HPE) this load module."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Many load modules  contain code that executes in an SPE . Some load modules  contain code that executes in an HPE . This allows methods  to execute in whichever environment is appropriate. For example, an INFORMATION method  can be built to execute only in SPE  secure space for government classes of security, or in an HPE  for commercial applications. As described above, the load module public header  may contain an \u201cexecution space code\u201d field that indicates where the load module  needs to execute. This functionality also allows for different SPE instruction sets as well as different user platforms, and allows methods to be constructed without dependencies on the underlying load module instruction set.","Load modules  operate on three major data areas: the stack, load module parameters, and data structures. The stack and execution memory size required to execute the load module  are preferably described in private header , as are the data descriptions from the stack image on load module call, return, and any return data areas. The stack and dynamic areas are described using the same DTD mechanism. The following is an example of a possible layout for a load module private header :",{"@attributes":{"id":"p-0811","num":"1139"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Copy of some or all of information","Object ID from Public"]},{"entry":["from public header 802","Header."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Other classification","Check Value","Check Value for Public"]},{"entry":["information",{},"Header"]},{"entry":["Descriptive","LM Size","Size of executable code"]},{"entry":["Information",{},"block."]},{"entry":[{},"LM Exec Size","Executable code size for"]},{"entry":[{},{},"the load"]},{"entry":[{},"LM Exec Stack","Stack size required for the"]},{"entry":[{},{},"load module."]},{"entry":["Access and reference","Access tag","Tags used to determine if"]},{"entry":["tags",{},"the load module is the"]},{"entry":[{},"Validation tag","correct LM has the right"]},{"entry":[{},{},"to execute this LM."]},{"entry":[{},"Correlation tag","Tag used to determine if"]},{"entry":[{},{},"the caller of the LM has"]},{"entry":[{},{},"the right to execute this LM."]},{"entry":[{},"Digital Signature","Used to determine if the"]},{"entry":[{},{},"LM executable content is"]},{"entry":[{},{},"intact and was created by"]},{"entry":[{},{},"a trusted source (one with"]},{"entry":[{},{},"a correct certificate for"]},{"entry":[{},{},"creating LMs)."]},{"entry":["Data record descriptor","DTD count","Number of DTDs that"]},{"entry":["information",{},"follow the code block."]},{"entry":[{},"DTD 1 reference","If locally defined, the"]},{"entry":[{},{},"physical size and offset in"]},{"entry":[{},{},"bytes of the first DTD"]},{"entry":[{},{},"defined for this LM."]},{"entry":[{},{},"If publicly referenced"]},{"entry":[{},{},"DTD ID and the"]},{"entry":[{},{},"correlation tag to permit"]},{"entry":[{},{},"access to the record."]},{"entry":[{},"DTD N reference","If locally defined, the"]},{"entry":[{},{},"physical size and offset in"]},{"entry":[{},{},"bytes of the Nth DTD"]},{"entry":[{},{},"defined for this LM."]},{"entry":[{},{},"If publicly referenced"]},{"entry":[{},{},"DTD, this is the DTD ID"]},{"entry":[{},{},"and the correlation tag to"]},{"entry":[{},{},"permit access to the"]},{"entry":[{},{},"record."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2014"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DTD N reference","If locally defined, the"]},{"entry":[{},{},"physical size and offset in"]},{"entry":[{},{},"bytes of the Nth DTD"]},{"entry":[{},{},"defined for this LM."]},{"entry":[{},{},"If publicly referenced"]},{"entry":[{},{},"DTD, this is the DTD Id"]},{"entry":[{},{},"and the correlation tag to"]},{"entry":[{},{},"permit access to the"]},{"entry":[{},{},"record."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Check Value","Check Value for entire LM."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Each load module  also may use DTD  information to provide the information necessary to support building methods from a load module. This DTD information contains the definition expressed in a language such as SGML for the names and data types of au of the method data fields that the load module supports, and the acceptable ranges of values that can be placed in the fields Other DTDs may describe the function of the load module  mn English for inclusion in an electronic contract, for example.","The next section of load module  is an encrypted executable body  that contains one or more blocks of encrypted code. Load modules  are preferably coded in the \u201cnative\u201d instruction set of their execution environment for efficiency and compactness. SPU  and platform providers may provide versions of the standard load modules  in order to make their products cooperate with the content in distribution mechanisms contemplated by VDE . The preferred embodiment creates and uses native mode load modules  in lieu of an interpreted or \u201cp-code\u201d solution to optimize the performance of a limited resource SPU. However, when sufficient SPE (or HPE) resources exist and\/or platforms have sufficient resources, these other implementation approaches may improve the cross platform utility of load module code.","The following is an example of a field layout for a load module DTD :",{"@attributes":{"id":"p-0815","num":"1143"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DTD ID",{},"Uses Object ID from"]},{"entry":[{},{},"Private Header"]},{"entry":[{},"Creator ID","Site ID of creator of this"]},{"entry":[{},{},"DTD"]},{"entry":[{},"Type ID","Constant"]},{"entry":[{},"DTD ID","Unique sequence number"]},{"entry":[{},{},"for DTD."]},{"entry":[{},"Version ID","Version number of this"]},{"entry":[{},{},"DTD."]},{"entry":["Descriptive Information","DTD Size","Size of DTD block."]},{"entry":["Access and reference tags","Access tag","Tags used to determine if"]},{"entry":[{},"Validation tag","the DTD is the correct"]},{"entry":[{},{},"DTD requested by the"]},{"entry":[{},{},"SPE."]},{"entry":[{},"Correlation tag","Tag used to determine if"]},{"entry":[{},{},"the caller of this DTD has"]},{"entry":[{},{},"the right to use the DTD."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DTD Body","DTD Data Definition 1"]},{"entry":[{},"DTD Data Definition 2"]},{"entry":[{},"!"]},{"entry":[{},"DTD Data Definition N"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Check Value","Check Value for entire"]},{"entry":[{},{},"DTD record."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Some examples of how load modules  may use DTDs  include:\n\n","Commonly used load modules  may be built into a SPU  as space permits. VDE processes that use built-in load modules  will have significantly better performance than processes that have to find, load and decrypt external load modules. The most useful load modules  to build into a SPU might include scaler meters, fixed price billing, budgets and load modules for aggregate methods that perform these three processes.","User Data Elements (UDEs)  and Method Data Elements (MDEs) ","User Data Element (UDEs)  and Method Data Elements (MDEs)  in the preferred embodiment store data. There are many types of UDEs  and MDEs  provided by the preferred embodiment. In the preferred embodiment, each of these different types of data structures shares a common overall format including a common header definition and naming scheme. Other UDEs  that share this common structure include \u201clocal name services records\u201d (to be explained shortly) and account information for connecting to other VDE participants. These elements are not necessarily associated with an individual user, and may therefore be considered MDEs . All UDEs  and all MDEs  provided by the preferred embodiment may, if desired, (as shown in ) be stored in a common physical table within secure database , and database access processes may commonly be used to access all of these different types of data structures.","In the preferred embodiment, PERCs  and user rights table records are types of UDE . There are many other types of UDEs \/MDEs , including for example, meters, meter trails, budgets, budget trails, and audit trails. Different formats for these different types of UDEs\/MDEs are defined, as described above, by SGML definitions contained within DTDs . Methods  use these DTDs to appropriately access UDEs\/MDEs , .","Secure database  stores two types of items: static and dynamic. Static data structures and other items are used for information that is essentially static information. This includes load modules , PERCS , and many components of methods. These items are not updated frequently and contain expiration dates that can be used to prevent \u201cold\u201d copies of the information from being substituted for newly received items. These items may be encrypted with a site specific secure database file key when they are stored in the secure database , and then decrypted using that key when they are loaded into the SPE.","Dynamic items are used to support secure items that must be updated frequently. The UDEs  of many methods must be updated and written out of the SPE  after each use. Meters and budgets are common examples of this. Expiration dates cannot be used effectively to prevent substitution of the previous copy of a budget UDE . To secure these frequently updated items, a transaction tag is generated and included in the encrypted item each time that item is updated. A list of all VDE item IDs and the current transaction tag for each item is maintained as part of the secure database .",{"@attributes":{"id":"p-0822","num":"1157"},"figref":["FIG. 24","FIG. 24"],"b":["1200","1200","802","804","1206","1200","1108","1100","1200"]},"UDEs  are preferably encrypted using a site specific key once they are loaded into a site. This site-specific key masks a validation tag that may be derived from a cryptographically strong pseudo-random sequence by the SPE  and updated each time the record is written back to the secure database . This technique provides reasonable assurance that the UDE  has not been tampered with nor substituted when it is requested by the system for the next use.","Meters and budgets are perhaps among the most common data structures in VDE . They are used to count and record events, and also to limit events. The data structures for each meter and budget are determined by the content provider or a distributor\/redistributor authorized to change the information. Meters and budgets, however, generally have common information stored in a common header format (e.g., user ID, site ID and related identification information).","The content provider or distributor\/redistributor may specify data structures for each meter and budget UDE. Although these data structures vary depending upon the particular application, some are more common than others. The following table lists some of the more commonly occurring data structures for METER and BUDGET methods:",{"@attributes":{"id":"p-0826","num":"1161"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Field Type","Format","Typical Use","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Ascending Use","byte, short,","Meter\/Budget","Ascending count of"]},{"entry":["Counter","long, or",{},"uses."]},{"entry":[{},"unsigned"]},{"entry":[{},"versions of"]},{"entry":[{},"same width"]},{"entry":["Descending Use","byte, short,","Budget","Descending count"]},{"entry":["Counter","long, or",{},"of permitted use;"]},{"entry":[{},"unsigned",{},"eg., remaining"]},{"entry":[{},"versions of the",{},"budget"]},{"entry":[{},"same widths"]},{"entry":["Counter\/Limit","2, 4 or 8 byte","Meter\/Budget","usage limits since a"]},{"entry":[{},"integer split",{},"specific time;"]},{"entry":[{},"into two",{},"generally used in"]},{"entry":[{},"related bytes",{},"compound meter"]},{"entry":[{},"or words",{},"data structures."]},{"entry":["Bitmap","Array bytes","Meter\/Budget","Bit indicator of use"]},{"entry":[{},{},{},"or ownership."]},{"entry":["Wide bitmap","Array of bytes","Meter\/Budget","Indicator of use or"]},{"entry":[{},{},{},"ownership that may"]},{"entry":[{},{},{},"age with time."]},{"entry":["Last Use Date","time_t","Meter\/Budget","Date of last use."]},{"entry":["Start Date","time_t","Budget","Date of first"]},{"entry":[{},{},{},"allowable use."]},{"entry":["Expiration Date","time_t","Meter\/Budget","Expiration Date."]},{"entry":["Last Audit Date","time_t","Meter\/Budget","Date of last audit."]},{"entry":["Next Audit Date","time_t","Meter\/Budget","Date of next"]},{"entry":[{},{},{},"required audit."]},{"entry":["Auditor","VDE ID","Meter\/Budget","VDE ID of"]},{"entry":[{},{},{},"authorized auditor."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The information in the table above is not complete or comprehensive, but rather is intended to show some examples of types of information that may be stored in meter and budget related data structures. The actual structure of particular meters and budgets is determined by one or more DTDs  associated with the load modules  that create and manipulate the data structure. A list of data types permitted by the DTD interpreter  in VDE  is extensible by properly authorized parties.",{"@attributes":{"id":"p-0828","num":"1163"},"figref":"FIG. 25","b":["1200","1206","1206","1000","1206","1000"]},"The \u201cusage map\u201d concept provided by the preferred embodiment may be tied to the concept of \u201catomic elements.\u201d In the preferred embodiment, usage of an object  may be metered in terms of \u201catomic elements.\u201d In the preferred embodiment, an \u201catomic element\u201d in the metering context defines a wilt of usage that is \u201csufficiently significant\u201d to be recorded in a meter. The definition of what constitutes an atomic element is determined by the creator of an object . For instance, a byte of information content contained in an object  could be defined as an \u201catomic element.\u201d or a record of a database could be defined as an \u201catomic element,\u201d or each chapter of an electronically published book could be defined as an \u201catomic element.\u201d","An object  can have multiple sets of overlapping atomic elements. For example, an access to any database in a plurality of databases may be defined as an \u201catomic element.\u201d Simultaneously, an access to any record, field of records, sectors of informations, and\/or bytes contained in any of the plurality of databases might also be defined as an \u201catomic element.\u201d In an electronically published newspaper, each hundred words of an article could be defined as an \u201catomic element,\u201d while articles of more than a certain length could be defined as another set of \u201catomic elements.\u201d Some portions of a newspaper (e.g., advertisements, the classified section, etc.) might not be mapped into an atomic element.","The preferred embodiment provides an essentially unbounded ability for the object creator to define atomic element types. Such atomic element definitions may be very flexible to accommodate a wide variety of different content usage. Some examples of atomic element types supported by the preferred embodiment include bytes, records, files, sectors, objects, a quantity of bytes, contiguous or relatively contiguous bytes (or other predefined unit types), logically related bytes containing content that has some logical relationship by topic, location or other user specifiable logic of relationship, etc. Content creators preferably may flexibly define other types of atomic elements.","The preferred embodiment of the present invention provides EVENT methods to provide a mapping between usage events and atomic elements. Generally, there may be an EVENT method for each different set of atomic elements defined for an object . In many cases, an object  will have at least one type of atomic element for metering relating to billing, and at least one other atomic element type for non-billing related metering (e.g., used to, for example, detect fraud, bill advertisers, and\/or collect data on end user usage activities).","In the preferred embodiment, each EVENT method in a usage related context performs two functions: (1) it maps an accessed event into a set of zero or more atomic elements, and (2) it provides information to one or more METER methods for metering object usage. The definition used to define this mapping between access events and atomic elements may be in the form of a mathematical definition, a table, a load module, etc. When an EVENT method maps an access request into \u201czero\u201d atomic elements, a user accessed event is not mapped into any atomic element based on the particular atomic element definition that applies. This can be, for example, the object owner is not interested in metering usage based on such accesses (e.g., because the object owner deems such accesses to be insignificant from a metering standpoint).","A \u201cusage map\u201d may employ a \u201cbit map image\u201d for storage of usage history information in a highly efficient manner. Individual storage elements in a usage map may correspond to atomic elements. Different elements within a usage map may correspond to different atomic elements (e.g., one map element may correspond to number of bytes read, another map element may correspond to whether or not a particular chapter was opened, and yet another map element may correspond to some other usage event).","One of the characteristics of a usage map provided by the preferred embodiment of the present invention is that the significance of a map element is specified, at least in part, by the position of the element within the usage map. Thus, in a usage map provided by the preferred embodiment, the information indicated or encoded by a map element is a function of its position (either physically or logically) within the map structure. As one simple example, a usage map for a twelve-chapter novel could consist of twelve elements, one for each chapter of the novel. When the user opens the first chapter, one or more bits within the element corresponding to the first chapter could be changed in value (e.g., set to \u201cone\u201d). In this simple example where the owner of the content object containing the novel was interested only in metering which chapters had been opened by the user, the usage map element corresponding to a chapter could be set to \u201cone\u201d the first time the user opened that corresponding chapter, and could remain \u201cone\u201d no matter how many additional times the user opened the chapter. The object owner or other interested VDE participant would be able to rapidly and efficiently tell which chapter(s) had been opened by the user simply by examining the compact usage map to determine which elements were set to \u201cone.\u201d","Suppose that the consent object owner wanted to know how many times the user had opened each chapter of the novel. In this case, the usage map might comprise, for a twelve-chapter novel, twelve elements each of which has a one-to-one correspondence with a different one of the twelve chapters of the novel. Each time a user opens a particular chapter, the corresponding METER method might increment the value contained in the corresponding usage map element. In this way, an account could be readily maintained for each of the chapters of the novel.","The position of elements within a usage map may encode a multi-variable function. For example, the elements within a usage map may be arranged in a two-dimensional array as shown in . Different array coordinates could correspond to independent variables such as, for example, atomic elements and time. Suppose, as an example, that a content object owner distributes an object containing a collection of audio recordings. Assume further that the content object owner wants to track the number of times the user listens to each recording within the collection, and also wants to track usage based on month of the year. Thus, assume that the content object owner wishes to know how many times the user during the month of January listened to each of the recordings on a recording-by-recording basis, similarly wants to know this same information for the month of February, March, etc. In this case, the usage map (see ) might be defined as a two-dimensional array of elements. One dimension of the array might encode audio recording number. The other dimension of the array might encode month of the year. During the month of January, the corresponding METER method would increment elements in the array in the \u201cJanuary\u201d column of the array, selecting which element to increment as a function of recording number. When January comes to an end, the METER method might cease writing into the array elements in the January column, and instead write values into a further set of February array elements\u2014once again selecting the particular array element in this column as a function of recording number. This concept may be extended to N dimensions encoding N different variables.","Usage map meters are thus an efficient means for referencing prior usage. They may be used to enable certain VDE related security functions such as testing for contiguousness (including relative contiguousness), logical relatedness (including relative logical relatedness), usage randomization, and other usage patterns. For example, the degree or character of the \u201crandomness\u201d of content usage by a user might serve as a potential indicator of attempts to circumvent VDE content budget limitations. A user or groups of users might employ multiple sessions to extract content in a manner which does not violate contiguousness, logical relatedness or quantity limitations, but which nevertheless enables reconstruction of a material portion or all of a given, valuable unit of content. Usage maps can be analyzed to determine other patterns of usage for pricing such as, for example, quantity discounting after usage of a certain quantity of any or certain atomic units, or for enabling a user to reaccess an object for which the user previously paid for unlimited accesses (or unlimited accesses over a certain time duration). Other useful analyses might include discounting for a given atomic unit for a plurality of uses","A further example of a map meter includes storing a record of all applicable atomic elements that the user has paid to use (or alternatively, has been metered as having used, though payment may not yet have been required or made). Such a usage map would support a very efficient and flexible way to allow subsequent user usage of the same atomic elements.","A further usage map could be maintained to detect fraudulent usage of the same object. For example, the object might be stored in such a way that sequential access of long blocks should never occur. A METER method could then record all applicable atomic elements accesses during, for example, any specified increment of time, such as ten minutes, an hour, a day, a month, a year, or other time duration). The usage map could be analyzed at the end of the specified time increment to check for an excessively long contiguous set of accessed blocks, and\/or could be analyzed at the initiation of each access to applicable atomic elements. After each time duration based analysis, if no fraudulent use is detected, the usage map could be cleared (or partially cleared) and the mapping process could begin in whole or in part anew. If a fraudulent use pattern is suspected or detected, that information might be recorded and the use of the object could be halted. For example, the user might be required to contact a content provider who might then further analyze the usage information to determine whether or not further access should be permitted.",{"@attributes":{"id":"p-0841","num":"1176"},"figref":["FIG. 25","FIG. 25"],"i":["c ","c"],"b":["1206","1206","1206","1206","1302","406"]},"Audit trail maps may be generated at any frequency determined by control, meter, budget and billing methods and load modules associated with those methods. Audit trails have a similar structure to meters and budgets and they may contain user specific information in addition to information about the usage event that caused them to be created. Like meters and budgets, audit trails have a dynamic format that is defined by the content provider or their authorized designee, and share the basic element types for meters and budgets shown in the table above. In addition to these types, the following table lists some examples of other significant data fields that may be found in audit trails:",{"@attributes":{"id":"p-0843","num":"1178"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Field Type","Format","Typical Use","Description of Use"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Use Event ID","unsigned long","Meter\/Budget\/","Event ID that"]},{"entry":[{},{},"Billing","started a processing"]},{"entry":[{},{},{},"sequence."]},{"entry":["Internal Sequence","unsigned long","Meter\/Budget\/","Transaction number"]},{"entry":["Number",{},"Billing","to help detect audits"]},{"entry":[{},{},{},"that have been"]},{"entry":[{},{},{},"tampered with."]},{"entry":["Atomic","Unsigned","Meter\/Billing","Atomic element(s)"]},{"entry":["Element(s)","Integer(s) of",{},"and ID of object"]},{"entry":["& Object ID","appropriate",{},"that was used."]},{"entry":[{},"width"]},{"entry":["Personal User","Character or","Budget\/Billing","Personal"]},{"entry":["Information","other",{},"information about"]},{"entry":[{},"information",{},"user"]},{"entry":["Use Date\/Time","time_t","Meter\/Budget\/","Date\/time of use."]},{"entry":[{},{},"Billing"]},{"entry":["Site ID\/User ID","VDE ID","Meter\/Budget\/","VDE ID of user."]},{"entry":[{},{},"Billing"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Audit trail records may be automatically combined into single records to conserve header space. The combination process may, for example, occur under control of a load module that creates individual audit trail records.","Permissions Record Overview",{"@attributes":{"id":"p-0846","num":"1181"},"figref":"FIG. 16","b":["808","610","808","100","808","100","808","300","808","808","808"]},"In the preferred embodiment, no end user may use or access a VDE object unless a permissions record  has been delivered to the end user. As discussed above, a PERC  may be delivered as part of a traveling object  or it may be delivered separately (for example, within an administrative object). An electronic appliance  may not access an object unless a corresponding PERC  is present, and may only use the object and related information as permitted by the control structures contained within the PERC.","Briefly, the PERC  stores information concerning the methods, method options, decryption keys and rights with respect to a corresponding VDE object .","PERC  includes control structures that define high level categories or classifications of operations. These high level categories are referred to as \u201crights.\u201d The \u201cright\u201d control structures, in turn, provide internal control structures that reference \u201cmethods\u201d . The internal structure of preferred embodiment PERC  organizes the \u201cmethods\u201d that are required to perform each allowable operation on an object or associated control structure (including operations performed on the PERC itself). For example, PERC  contains decryption keys for the object, and usage of the keys is controlled by the methods that are required by the PERC for performing operations associated with the exercise of a \u201cright.\u201d","PERC  for an object is typically created when the object is created, and future substantive modifications of a PERC, if allowed, are controlled by methods associated with operations using the distribution right(s) defined by the same (or different PERC.",{"@attributes":{"id":"p-0851","num":"1186"},"figref":"FIG. 22","b":["808","808"],"ul":{"@attributes":{"id":"ul0117","list-style":"none"},"li":{"@attributes":{"id":"ul0117-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0118","list-style":"none"},"li":"\u201crights\u201d records \n        \n        "}}}},"There are other elements that may be included in a PERC  hierarchy that describe rules and the rule options to support the negotiation of rule sets and control information for smart objects and for the protection of a user's personal information by a privacy filter. These alternate elements may include:","optional rights records","optional control sets","optional method records","permitted rights records","permitted rights control sets","permitted method records","required DTD descriptions","optional DTD descriptions","permitted DTD descriptions","These alternate fields can control other processes that may, in part, base negotiations or decisions regarding their operation on the contents of these fields. Rights negotiation, smart object control information, and related processes can use these fields for more precise control of their operation.","The PERC  shown in  includes a PERC header , a CS (\u201ccontrol set \u201d) , private body keys , and one or more rights sub-records . Control set   in the preferred embodiment contains information that is common to one or more \u201crights\u201d associated with an object . For example, a particular \u201cevent\u201d method or methods might be the same for usage rights, extraction rights and\/or other rights. In that case, \u201ccontrol set \u201d  may reference this event that is common across multiple \u201crights.\u201d The provision of \u201ccontrol set \u201d  is actually an optimization, since it would be possible to store different instances of a commonly used event within each of plural \u201crights\u201d records  of a PERC .","Each rights record  defines a different \u201cright\u201d corresponding to an object. A \u201cright\u201d record  is the highest level of organization present in PERC . There can be several different rights in a PERC . A \u201cright\u201d represents a major functional partitioning desired by a participant of the basic architecture of VDE . For example, the right to use an object and the right to distribute rights to use an object are major functional groupings within VDE . Some examples of possible rights include access to content, permission to distribute rights to access content, the ability to read and process audit trails related to content and\/or control structures, the right to perform transactions that may or may not be related to content and\/or related control structures (such as banking transactions, catalog purchases, the collection of taxes, EDI transactions, and such), and the ability to change some or all of the internal structure of PERCs created for distribution to other users. PERC  contains a rights record  for each type of right to object access\/use the PERC grants.","Normally, for VDE end users, the most frequently granted right is a usage right. Other types of rights include the \u201cextraction right,\u201d the \u201caudit right\u201d for accessing audit trail information of end users, and a \u201cdistribution right\u201d to distribute an object. Each of these different types of rights may be embodied in a different rights record  (or alternatively, different PERCs  corresponding to an object may be used to grant different rights).","Each rights record  includes a rights record header , a CSR (\u201ccontrol set for right\u201d) , one or more \u201cright keys\u201d , and one or more \u201ccontrol sets\u201d . Each \u201crights\u201d record  contains one or more control sets  that are either required or selectable options to control an object in the exercise of that \u201cright.\u201d Thus, at the next level, inside of a \u201cright\u201d , are control sets . Control sets , in turn, each includes a control set header , a control method , and one or more required methods records . Required methods records , in turn, each includes a required method header  and one or more required method options .","Control sets  exist in two types in VDE : common required control sets which are given designations \u201ccontrol set \u201d or \u201ccontrol set for right,\u201d and a set of control set options. \u201cControl set \u201d  contains a list of required methods that are common to all control set options, so that the common required methods do not have to be duplicated in each control set option. A \u201ccontrol set for right\u201d (\u201cCSR\u201d)  contains a similar list for control sets within a given right. \u201cControl set \u201d and any \u201ccontrol sets for rights\u201d are thus, as mentioned above, optimizations; the same functionality for the control sets can be accomplished by listing all the common required methods in each control set option and omitting \u201ccontrol set \u201d and any \u201ccontrol sets for rights.\u201d","One of the control set options, \u201ccontrol set \u201d and the appropriate \u201ccontrol set for right together form a complete control set necessary to exercise a right.","Each control set option contains a list of required methods  and represents a different way the right may be exercised. Only one of the possible complete control sets  is used at any one time to exercise a right in the preferred embodiment.","Each control set  contains as many required methods records  as necessary to satisfy all of the requirements of the creators and\/or distributors for the exercise of a right. Multiple ways a right may be exercised, or multiple control sets that govern how a given right is exercised, are both supported. As an example, a single control set  might require multiple meter and budget methods for reading the object's content, and also require different meter and budget methods for printing an object's content. Both reading and printing an object's content can be controlled in a single control set .","Alternatively, two different control set options could support reading an object's content by using one control set option to support metering and budgeting the number of bytes read, and the other control set option to support metering and budgeting the number of paragraphs read. One or the other of these options would be active at a time.","Typically, each control set  will reference a set of related methods, and thus different control sets can offer a different set of method options. For example, one control set  may represent one distinct kind of metering methodology, and another control set may represent another, entirely different distinct metering methodology.","At the next level inside a control set  are the required methods records . Methods records  contain or reference methods  in the preferred embodiment. Methods  are a collection of \u201cevents,\u201d references to load modules associated with these events, static data, and references to a secure database  for automatic retrieval of any other separately deliverable data elements that may be required for processing (events e.g., UDEs). A control set  contains a list of required methods that must be used to exercise a specific right (i.e., process events associated with a right). A required method record  listed in a control set  indicates that a method must exist to exercise the right that the control set supports. The required methods may reference \u201cload modules\u201d  to be discussed below. Briefly, load modules  are pieces of executable code that may be used to carry out required methods.","Each control set  may have a control method record  as one of its required methods. The referenced control method may define the relationships between some or all of the various methods  defined by a control set . For example, a control method may indicate which required methods are functionally grouped together to process particular events, and the order for processing the required methods. Thus, a control method may specify that required method referenced by record ()()() is the first to be called and then its output is to go to required method referenced by record ()()() and so on. In this way, a meter method may be tied to one or more billing methods and then the billing methods may be individually tied to different budget methods, etc.","Required method records  specify one or more required method options . Required method options are the lowest level of control structure in a preferred embodiment PERC . By parameterizing the required methods and specifying the required method options  independently of the required methods, it becomes possible to reuse required methods in many different circumstances.","For example, a required method record  may indicate that an actual budget method ID must be chosen from the list of budget method IDs in the required method option list for that required method. Required method record  in this case does not contain any method IDs for information about the type of method required, it only indicates that a method is required. Required method option  contains the method ID of the method to be used if this required method option is selected. As a further optimization, an actual method ID may be stored if only one option exists for a specific required method. This allows the size of this data structure to be decreased.","PERC  also contains the fundamental decryption keys for an object , and any other keys used with \u201crights\u201d (for encoding and\/or decoding audit trails, for example). It may contain the keys for the object content or keys to decrypt portions of the object that contain other keys that then can be used to decrypt the content of the object. Usage of the keys is controlled by the control sets  in the same \u201cright\u201d  within PERC .","In more detail,  shows PERC  as including private body keys , and right keys . Private body keys  are used to decrypt information contained within a private body  of a corresponding VDE object . Such information may include, for example, methods , load modules  and\/or UDEs , for example. Right keys  are keys used to exercise a right in the preferred embodiment. Such right keys  may include, for example, decryption keys that enable a method specified by PERC  to decrypt content for release by a VDE node to an end user. These right keys  are, in the preferred embodiment, unique to an object . Their usage is preferably controlled by budgets in the preferred embodiment.",{"@attributes":{"id":"p-0879","num":"1218"},"figref":"FIGS. 26A and 26B","b":["808","900"],"ul":{"@attributes":{"id":"ul0122","list-style":"none"},"li":{"@attributes":{"id":"ul0122-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0123","list-style":"none"},"li":["a site record number ,","a field  specifying the length of the private body key block,","a field  specifying the length of the PERC,","an expiration date\/time field  specifying the expiration date and\/or time for the PERC,","a last modification date\/time field  specifying the last date and\/or time the PERC  was modified,","the original distributor ID field  that specifies who originally distributed the PERC and\/or corresponding object,","a last distributor field  that specifies who was the last distributor of the PERC and\/or the object,","an object ID field  identifying the corresponding VDE object ,","a field  that specifies the class and\/or type of PERC and\/or the instance ID for the record class to differentiate the PERCs of the same type that may differ in their particulars,","a field  specifying the number of \u201crights\u201d sub-records  within the PERC, and","a validation tag .\n\nThe PERC  shown in , also has private body keys stored in a private body key block .\n"]}}}},"This PERC  includes a control set  sub-record  () that may be used commonly by all of rights  within the PERC. This control set  record () may include the following fields:\n\n","In this example of PERC  also includes one or more rights records , and an overall check value field . is an example of one of right records  shown in . In this particular example, rights record includes a rights record header  comprising:\n\n","This example of rights record  includes:\n\n","Referring once again to , secure database  provides data structures that support a \u201clookup\u201d mechanism for \u201cregistered\u201d objects. This \u201clookup\u201d mechanism permits electronic appliance  to associate, in a secure way, VDE objects  with PERCs , methods  and load modules . In the preferred embodiment, this lookup mechanism is based in part on data structures contained within object registry .","In one embodiment, object registry  includes the following tables:\n\n","Object registry  in the example embodiment is a database of information concerning registered VDE objects  and the rights of users and user groups with regard to those objects. When electronic appliance  receives an object  containing a new budget or load module , the electronic appliance usually needs to add the information contained by the object to secure database . Moreover, when any new VDE object  arrives at an electronic appliance , the electronic appliance must \u201cregister\u201d the object within object registry  so that it can be accessed. The lists and records for a new object  are built in the preferred embodiment when the object is \u201cregistered\u201d by the electronic appliance . The information for the object may be obtained from the object's encrypted private header, object body, and encrypted name services record. This information may be extracted or derived from the object  by SPE , and then stored within secure database  as encrypted records.","In one embodiment, object registration table  includes information identifying objects within object storage repository . These VDE objects  stored within object storage  are not, in the example embodiment, necessarily part of secure database  since the objects typically incorporate their own security (as necessary and required) and are maintained using different mechanisms than the ones used to maintain the secure database. Even though VDE objects  may not strictly be part of secure database , object registry  (and in particular object registration table ) refers to the objects and thus \u201cincorporates them by reference\u201d into the secure database. In the preferred embodiment, an electronic appliance  may be disabled from using any VDE object  that has not been appropriately registered with a corresponding registration record stored within object registration table .","Subject table  in the example embodiment establishes correspondence between objects referred to by object registration table  and users (or groups of users) of electronic appliance . Subject table  provides many of the attributes of an access control list (\u201cACL\u201d), as will be explained below.","User rights table  in the example embodiment provides permissioning and other information specific to particular users or groups of users and object combinations set forth in subject table . In the example embodiment, permissions records  (also shown in  and being stored within secure database ) may provide a universe of permissioning for a particular object-user combination. Records within user rights table  may specify a sub-set of this permissioning universe based on, for example, choices made by users during interaction at time of object registration.","Administrative event log , shipping table , and receiving table  provide information about receipts and deliveries of VDE objects . These data structures keep track of administrative objects sent or received by electronic appliance  including, for example, the purpose and actions of the administrative objects in summary and detailed form. Briefly, shipping table  includes a shipping record for each administrative object sent (or scheduled to be sent) by electronic appliance  to another VDE participant. Receiving table  in the preferred embodiment includes a receiving record for each administrative object received (or scheduled to be received) by electronic appliance . Administrative event log  includes an event log record for each shipped and each received administrative object, and may include details concerning each distinct event specified by received administrative objects.","Administrative Object Shipping and Receiving",{"@attributes":{"id":"p-0890","num":"1272"},"figref":"FIG. 27","b":["444","444","444","445","444","444","445","444"]},"In the example embodiment of the secure database , shipping table header A may include a site record number A(), a user (or group) ID A(), a series of reference fields A()-A(), validation tags A()-A(), and a check value field A(). The fields A()-A() reference certain recent IDs that designate lists of shipping records  within shipping table . For example, \u2014field A() may reference to a \u201cfirst\u201d shipping record representing a completed outgoing shipment of an administrative object, and field A() may reference to a \u201clast\u201d shipping record representing a completed outgoing shipment of an administrative object. In this example, \u201cfirst\u201d and \u201clast\u201d may, if desired, refer to time or order of shipment as one example. Similarly, fields A() and A() may reference to \u201cfirst\u201d and \u201clast\u201d shipping records for scheduled outgoing shipments. Validation tag A() may provide validation from a name services record within name services record table  associated with the user (group) ID in the header. This permits access from the shipping record back to the name services record that describes the sender of the object described by the shipping records. Validation tag A() provides validation for a \u201cfirst\u201d outgoing shipping record referenced by one or more of pointers A()-A(). Other validation tags may be provided for validation of scheduled shipping record(s).","Shipping record () shown includes a site record number ()(A). It also includes first and last scheduled shipment date\/times ()(B), ()(C) providing a window of time used for scheduling administrative object shipments. Field ()(D) may specify an actual date\/time of a completed shipment of an administrative object. Field ()(E) provides an ID of an administrative object shipped or to be shipped, and thus identifies which administrative object within object storage  pertains to this particular shipping record. A reference field ()(G) references a name services record within name services record table  specifying the actual or intended recipient of the administrative object shipped or to be shipped. This information within name services record table  may, for example, provide routing information sufficient to permit outgoing administrative objects manager  shown in  to inform object switch  to ship the administrative object to the intended recipient. A field ()(H) may specify (e.g., using a series of bit flags) the purpose of the administrative object shipment, and a field ()(I) may specify the status of the shipment. Reference fields ()(J), ()(K) may reference \u201cprevious\u201d and \u201cnext\u201d shipping records  in a linked list in the preferred embodiment, there may be two linked lists, one for completed shipping records and the other for scheduled shipping records). Fields ()(L)-()(P) may provide validation tags respectively from header A, to a record within administrative event log  pointed to by pointer ()(F); to the name services record referenced by field ()(G); from the previous record referenced by ()(J); and to the next record referenced by field ()(K). A check value field ()(Q) may be used for validating shipping record .",{"@attributes":{"id":"p-0893","num":"1275"},"figref":["FIG. 28","FIG. 27"],"b":["446","446","444","446","446","447","446","447","452","442","447"],"i":"a "},{"@attributes":{"id":"p-0894","num":"1276"},"figref":"FIG. 29","b":["442","442","442","1","442","443","442","1","442","443","443","1","443","2","443","3","443","4","443","5","444","446","443","6","443","4","442","1","442","442","443","3","442"],"i":["a ","a "]},"Each sub-record may include a sub-record length field (J)()(), a data area length field (J)()(), an event ID field (J)()(), a record type field (J)()(), a record ID field (J)()(), a data area field (J)()(), and a check value field (J)()(). The data area (J)()() may be used to indicate which information within secure database  is affected by the event specified in the event ID field (J)()(), or what new secure database item(s) were added, and may also specify the outcome of the event.","The object registration table  in the preferred embodiment includes a record corresponding to each VDE object  within object storage (repository) . When a new object arrives or is detected (e.g., by redirector ), a preferred embodiment electronic appliance  \u201cregisters\u201d the object by creating an appropriate object registration record and storing it in the object registration table . In the preferred embodiment, the object registration table stores information that is user-independent, and depends only on the objects that are registered at a given VDE electronic appliance . Registration activities are typically managed by a REGISTER method associated with an object.","In the example, subject table  associates users (or groups of users) with registered objects. The example subject table  performs the function of an access control list by specifying which users are authorized to access which registered VDE objects .","As described above, secure database  stores at least one PERC  corresponding to each registered VDE object . PERCS  specify a set of rights that may be exercised to use or access the corresponding VDE object . The preferred embodiment allows user to \u201ccustomize\u201d their access rights by selecting a subset of rights authorized by a corresponding PERC  and\/or by specifying parameters or choices that correspond to some or all of the rights granted by PERC . These user choices are set forth in a user rights table  in the preferred embodiment. User rights table (URT)  includes URT records, each of which corresponds to a user (or group of users). Each of these URT records specifies user choices for a corresponding VDE object . These user choices may, either independently or in combination with a PERC , reference one or more methods  for exercising the rights granted to the user by the PERC  in a way specified by the choices contained within the URT record.",{"@attributes":{"id":"p-0899","num":"1281"},"figref":["FIG. 30","FIG. 30","FIG. 31"],"b":["460","460","1","460","2","300","1","300","2","728","460","460"],"ul":{"@attributes":{"id":"ul0132","list-style":"none"},"li":{"@attributes":{"id":"ul0132-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0133","list-style":"none"},"li":["site record number field ()","object type field ()","creator ID field ()","object ID field ()","a reference field () that references subject table ","an attribute field ()","a minimum registration interval field ()","a tag () to a subject table record, and","a check value field ()."]}}}},"The site record number field () specifies the site record number for this object registration record (N). In one embodiment of secure database , each record stored within the secure database is identified by a site record number. This site record number may be used as part of a database lookup process in order to keep track of all of the records within the secure database .","Object type field () may specify the type of registered VDE object  (e.g., a content object, an administrative object, etc.).","Creator ID field () in the example may identify the creator of the corresponding VDE object .","Object ID field () in the example uniquely identifies the registered VDE object .","Reference field () in the preferred embodiment identifies a record within the subject table . Through use of this reference, electronic appliance  may determine all users (or user groups listed in subject table  authorized to access the corresponding VDE object . Tag () is used to validate that the subject table records accessed using field () is the proper record to be used with the object registration record (N).","Attribute field () may store one or more attributes or attribute flags corresponding to VDE object .","Minimum registration interval field () may specify how often the end user may re-register as a user of the VDE object  with a clearinghouse service, VDE administrator, or VDE provider. One reason to prevent frequent re-registration is to foreclose users from reusing budget quantities in traveling objects until a specified amount of time has elapsed. The minimum registration interval field () may be left unused when the object owner does not wish to restrict re-registration.","Check value field () contains validation information used for detecting corruption or modification of record (N) to ensure security and integrity of the record. In the preferred embodiment, many or all of the fields within record (N) (as with other records within the secure database ) may be fully or partially encrypted and\/or contain fields that are stored redundantly in each record once in unencrypted form and once in encrypted form. Encrypted and unencrypted versions of the same fields may be cross checked at various times to detect corruption or modification of the records.","As mentioned above, reference field () references subject table , and in particular, references one or more user object records (M) within the subject table.  shows an example of a format for a user\/object record (M) provided by the example. Record (M) may include a header  and a subject record portion . Header  may include a field () referencing a \u201cfirst\u201d subject record  contained within the subject registration table . This \u201cfirst\u201d subject record () may, in turn, include a reference field () that references a \u201cnext\u201d subject record () within the subject registration table , and so on. This \u201clinked list\u201d structure permits a single object registration record (N) to reference to from one to N subject records .","Subject registration table header  in the example includes a site record number field () that may uniquely identify the header as a record within secure database . Header  may also include a creator ID field () that may be a copy of the content of the object registration table creator ID field (). Similarly, subject registration table header  may include an object ID field () that may be a copy of object ID field () within object registration table . These fields (), () make user object registration records explicitly correspond to particular VDE objects .","Header  may also include a tag () that permits validation. In one example arrangement, the tag () within the user\/object registration header  may be the same as the tag () within the object registration record (N) that points to the user\/object registration header. Correspondence between these tags () and () permits validation that the object registration record and user\/object registration header match up.","User\/object header  also includes an original distributor ID field () indicating the original distributor of the corresponding VDE object , and the last distributor ID field () that indicates the last distributor within the chain of handling of the object prior to its receipt by electronic appliance .","Header  also includes a tag () allowing validation between the header and the \u201cfirst\u201d subject record () which field () references.","Subject record () includes a site record number (), a user (or user group) ID field (), a user (or user group) attributes field (), a field () referencing user rights table , a field () that references to the \u201cnext\u201d subject record () (if there is one), a tag () used to validate with the header tag (), a tag () used to validate with a corresponding tag in the user rights table record referenced by field (), a tag () used to validate with a tag in the \u201cnext\u201d subject record referenced to by field () and a check value field ().","User or user group ID () identifies a user or a user group authorized to use the object identified in field (). Thus, the fields () and () together form the heart of the access control list provided by subject table . User attributes field () may specify attributes pertaining to use\/access to object  by the user or user group specified in fields (). Any number of different users or user groups may be added to the access control list each with a different set of attributes () by providing additional subject records  in the \u201clinked list\u201d structure.","Subject record reference field () references one or more records within user rights table .  shows an example of a preferred format for a user rights table record (). User rights record () may include a URT header , a record rights header , and a set of user choice records . URT header  may include a site record number field, a field () specifying the number of rights records within the URT record (), a field () referencing a \u201cfirst\u201d rights record (i.e., to rights record header ), a tag () used to validate the lookup from the subject table , a tag () used to validate the lookup to the rights record header , and a check value field ().","Rights record header  in the preferred embodiment may include site record number field (), a right ID field (), a field () referencing the \u201cnext\u201d rights record (), a field () referencing a first set of user choice records (), a tag () to allow validation with URT header tag (), a tag () to allow validation with a user choice record tag (), and a check value field (). Right ID field () may, for example, specify the type of right conveyed by the rights record  (e.g., right to use, right to distribute, right to read, right to audit, etc.).","The one or more user choice records  referenced by rights record header  sets forth the user choices corresponding to access and\/or use of the corresponding VDE object . There will typically be a rights record  for each right authorized to the corresponding user or user group. These rights govern use of the VDE object  by that user or user group. For instance, the user may have an \u201caccess\u201d right, and an \u201cextraction\u201d right, but not a \u201ccopy\u201d right. Other rights controlled by rights record  (which is derived from PERC  using a REGISTER method in the preferred embodiment) include distribution rights, audit rights, and pricing rights. When an object  is registered with the electronic appliance  and is registered with a particular user or user group, the user may be permitted to select among various usage methods set forth in PERC . For instance, a VDE object  might have two required meter methodologies: one for billing purposes, and one for accumulating data concerning the promotional materials used by the user. The user might be given the choice of a variety of meter\/billing methods, such as: payment by VISA or MasterCard; choosing between billing based upon the quantity of material retrieved from an information database, based on the time of use, and\/or both. The user might be offered a discount on time and\/or quantity billing if he is willing to allow certain details concerning his retrieval of content to be provided to third parties (e.g., for demographic purposes). At the time of registration of an object and\/or user for the object, the user would be asked to select a particular meter methodology as the \u201cactive metering method\u201d for the first acquired meter. A VDE distributor might narrow the universe of available choices for the user to a subset of the original selection array stipulated by PERC . These user selection and configuration settings are stored within user choice records (), (), (N). The user choice records need not be explicitly set forth within user rights table ; instead, it is possible for user choice records  to refer (e.g., by site reference number) to particular VDE methods and\/or information parameterizing those methods. Such reference by user choice records  to method  should be validated by validation tags contained within the user choice records. Thus, user choice records  in the preferred embodiment may select one or more methods  for use with the corresponding VDE object  (as is shown in ). These user choice records  may themselves fully define the methods  and other information used to build appropriate components assemblies  for implementing the methods. Alternatively, the user\/object record  used to reference the user rights record  may also reference the PERC  corresponding to VDE object  to provide additional information needed to build the component assembly  and\/or otherwise access the VDE object . For example, PERC  may be accessed to obtain MDEs  pertaining to the selected methods, private body and\/or rights keys for decrypting and\/or encrypting object contents, and may also be used to provide a checking capability ensuring that the user rights record conveys only those rights authorized by a current authorization embodied within a PERC.","In one embodiment provided by the present invention, a conventional database engine may be used to store and organize secure database , and the encryption layers discussed above may be \u201con top of\u201d the conventional database structure. However, if such a conventional database engine is unable to organize the records in secure database  and support the security considerations outlined above, then electronic appliance  may maintain separate indexing structures in encrypted form. These separate indexing structures can be maintained by SPE . This embodiment would require SPE  to decrypt the index and search decrypted index blocks to find appropriate \u201csite record IDs\u201d or other pointers. SPE  might then request the indicated record from the conventional database engine. If the record ID cannot be checked against a record list, SPE  might be required to ask for the data file itself so it can retrieve the desired record. SPE  would then perform appropriate authentication to ensure that the file has not been tampered with and that the proper block is returned. SPE  should not simply pass the index to the conventional database engine (unless the database engine is itself secure) since this would allow an incorrect record to be swapped for the requested one.",{"@attributes":{"id":"p-0919","num":"1310"},"figref":"FIG. 34","b":["610","610","482","482","610","482","610","482","460","462","464","808","1000","482"]},{"@attributes":{"id":"p-0920","num":"1311"},"figref":"FIG. 34A","b":["482","482","482","484","1","484","2","484","3","484","4","482","484","5","484","6","484","8","484","9","484","6","484","7","484","610"],"i":["j","j","j","j"]},"Updating Secure Database ",{"@attributes":{"id":"p-0921","num":"1312"},"figref":["FIG. 35","FIG. 35"],"b":["1150","610","600","1500","610","808"]},"Typically, the end user's electronic appliance  may initiate communications with a clearinghouse (Block ). This contact may, for example, be established automatically or in response to a user command. It may be initiated across the electronic highway , or across other communications networks such as a LAN, WAN, two-way cable or using portable media exchange between electronic appliances. The process of exchanging administrative information need not occur in a single \u201con line\u201d session, but could instead occur over time based on a number of different one-way and\/or two-way communications over the same or different communications means. However, the process  shown in  is a specific example where the end user's electronic appliance  and the other VDE participant (e.g., a clearinghouse) establish a two-way real-time interactive communications exchange across a telephone line, network, electronic highway , etc.","The end user's electronic appliance  generally contacts a particular VDE administrator or clearinghouse. The identity of the particular clearinghouse is based on the VDE object  the user wishes to access or has already accessed. For example, suppose the user has already accessed a particular VDE object  and has run out of budget for further access. The user could issue a request which will cause her electronic appliance  to automatically contact the VDE administrator, distributor and\/or financial clearinghouse that has responsibility for that particular object. The identity of the appropriate VDE participants to contact is provided in the example by information within UDEs , MDEs , the Object Registration Table  and\/or Subject Table , for example. Electronic appliance  may have to contact multiple VDE participants (e.g., to distribute audit records to one participant, obtain additional budgets or other permissions from another participant, etc.). The contact  may in one example be scheduled in accordance with the  Shipping Table  and the  Administrative Event Log .","Once contact is established, the end user's electronic appliance and the clearinghouse typically authenticate one another and agree on a session key to use for the real-time information exchange (Block ). Once a secure connection is established, the end users electronic appliance may determine (e.g., based on Shipping Table ) whether it has any administrative objects(s) containing audit information that it is supposed to send to the clearinghouse (decision Block ). Audit information pertaining to several VDE objects  may be placed within the same administrative object for transmission, or different administrative objects may contain audit information about different objects. Assuming the end user's electronic appliance has at least one such administrative object to send to this particular clearinghouse (\u201cyes\u201d exit to decision Block ), the electronic appliance sends that administrative object to the clearinghouse via the now-established secure real-time communications (Block ). In one specific example, a single administrative object may be sent an administrative object containing audit information pertaining to multiple VDE objects, with the audit information for each different object compromising a separate \u201cevent\u201d within the administrative object.","The clearinghouse may receive the administrative object and process its contents to determine whether the contents are \u201cvalid\u201d and \u201clegitimate.\u201d For example, the clearinghouse may analyze the contained audit information to determine whether it indicates misuse of the applicable VDE object . The clearinghouse may, as a result of this analysis, may generate one or more responsive administrative objects that it then sends to the end user's electronic appliance  (Block ). The end user's electronic appliance  may process events that update its secure database  and\/or SPU  contents based on the administrative object received (Block ). For example, if the audit information received by the clearinghouse is legitimate, then the clearinghouse may send an administrative object to the end user's electronic appliance  requesting the electronic appliance to delete and\/or compress the audit information that has been transferred. Alternatively or in addition, the clearinghouse may request additional information from the end-user electronic appliance  at this stage (e.g., retransmission of certain information that was corrupted during the initial transmission, transmission of additional information not earlier transmitted, etc.). If the clearinghouse detects misuse based on the received audit information, it may transmit an administrative object that revokes or otherwise modifies the end user's right to further access the associated VDE objects .","The clearinghouse may, in addition or alternatively, send an administrative object to the end user's electronic appliance  that instructs the electronic appliance to display one or more messages to the user. These messages may inform the user about certain conditions and\/or they may request additional information from the user. For example, the message may instruct the end user to contact the clearinghouse directly by telephone or otherwise to resolve an indicated problem, enter a PIN, or it may instruct the user to contact a new service company to re-register the associated VDE object. Alternatively, the message may tell the end user that she needs to acquire new usage permissions for the object, and may inform the user of cost, status and other associated information.","During the same or different communications exchange, the same or different clearinghouse may handle the end user's request for additional budget and\/or permission pertaining to VDE object . For example, the end user's electronic appliance  may (e.g., in response to a user input request to access a particular VDE object ) send an administrative object to the clearinghouse requesting budgets and\/or other permissions allowing access (Block ). As mentioned above, such requests may be transmitted in the form of one or more administrative objects, such as, for example, a single administrative object having multiple \u201cevents\u201d associated with multiple requested budgets and\/or other permissions for the same or different VDE objects . The clearinghouse may upon receipt of such a request, check the end user's credit, financial records, business agreements and\/or audit histories to determine whether the requested budgets and\/or permissions should be given. The clearinghouse may, based on this analysis, send one or more responsive administrative objects which cause the end user's electronic appliance  to update its secure database in response (Block , ). This updating might, for example, comprise replacing an expired PERC  with a fresh one, modifying a PERC to provide additional (or lesser) rights, etc. Steps - may be repeated multiple times in the same or different communications session to provide further updates to the end user's secure database .",{"@attributes":{"id":"p-0928","num":"1319"},"figref":["FIG. 36","FIG. 35","FIG. 35","FIG. 37"],"b":["610","1070","1070","600","610","1072","1000","1200","503","610","1074","610","503","1076","1078","503","1080","1082","503","610","1084","610"]},{"@attributes":{"id":"p-0929","num":"1320"},"figref":["FIG. 37","FIG. 37"],"b":["1050","610","503","610","503","610","1052","1053","500","1052","522","522","503","1054","503","1054","610","500","1056","500","1056","1054","1052","303","1058","503","610","503","522","1060","1062","503","500","1064","610"]},"The keys to decrypt secure database  records are, in the preferred embodiment, maintained solely within the protected memory of an SPU . Each index or record update that leaves the SPU  may be time stamped, and then encrypted with a unique key that is determined by the SPE . For example, a key identification number may be placed \u201cin plain view\u201d at the front of the records of secure database  so the SPE  can determine which key to use the next time the record is retrieved. SPE  can maintain the site ID of the record or index, the key identification number associated with it, and the actual keys in the list internal to the SPE. At some point, this internal list may fill up. At this point, SPE  may call a maintenance routine that re-encrypts items within secure database  containing changed information. Some or all of the items within the data structure containing changed information may be read in, decrypted, and then re-encrypted with the same key. These items may then be issued the same key identification number. The items may then be written out of SPE  back into secure database . SPE  may then clear the internal list of item IDs and corresponding key identification numbers. It may then begin again the process of assigning a different key and a new key identification number to each new or changed item. By using this process, SPE  can protect the data structures (including the indexes) of secure database  against substitution of old items and against substitution of indexes for current items. This process also allows SPE  to validate retrieved item IDs against the encrypted list of expected IDs.",{"@attributes":{"id":"p-0931","num":"1322"},"figref":"FIG. 38","b":["610","610","610","500"]},"SPE  may generate a new encryption\/decryption key for each new item it is going to store within secure database  (block ). SPE  may use this new key to encrypt the record prior to storing it in the secure database (block ). SPE  make sure that it retains the key so that it can later read and decrypt the record. Such decryption keys are, in the preferred embodiment, maintained within protected non-volatile memory (e.g., NVRAM ) within SPU . Since this protected memory has a limited size, there may not be enough room within the protected memory to store a new key. This condition is tested for by decision block  in the preferred embodiment. If there is not enough room in memory for the new key (or some other event such as the number of keys stored in the memory exceeding a predetermined number, a timer has expired, etc.), then the preferred embodiment handles the situation by re-encrypting other records with secure database  with the same new key in order to reduce the number of (or change) encryption\/decryption keys in use. Thus, one or more secure database  items may be read from the secure database (block ), and decrypted using the old key(s) used to encrypt them the last time they were stored. In the preferred embodiment, one or more \u201cold keys\u201d are selected, and all secure database items encrypted using the old key(s) are read and decrypted. These records may now be re-encrypted using the new key that was generated at block  for the new record (block ). The old key(s) used to decrypt the other record(s) may now be removed from the SPU protected memory (block ), and the new key stored in its place (block ). The old key(s) cannot be removed from secure memory by block  unless SPE  is assured that all records within the secure database  that were encrypted using the old key(s) have been read by block  and re-encrypted by block  using the new key. All records encrypted (or re-encrypted) using the new key may now be stored in secure database  (block ). If decision block  determines there is room within the SPU  protected memory to store the new key, then the operations of blocks , ,  are not needed and SPE  may instead simply store the new key within the protected memory (block ) and store the new encrypted records into secure database  (block ).","The security of secure database  files may be further improved by segmenting the records into \u201ccompartments.\u201d Different encryption\/decryption keys may be used to protect different \u201ccompartments.\u201d This strategy can be used to limit the amount of information within secure database  that is encrypted with a single key. Another technique for increasing security of secure-database  may be to encrypt different portions of the same records with different keys so that more than one key may be needed to decrypt those records.","Backup of Secure Database ","Secure database  in the preferred embodiment is backed up at periodic or other time intervals to protect the information the secure database contains. This secure database information may be of substantial value to many VDE participants. Back ups of secure database  should occur without significant inconvenience to the user, and should not breach any security.","The need to back up secure database  may be checked at power on of electronic appliance , when SPE  is initially invoked, at periodic time intervals, and if \u201caudit roll up\u201d value or other summary services information maintained by SPE  exceeds a user set or other threshold, or triggered by criteria established by one or more content publishers and\/or distributors and\/or clearinghouse service providers and\/or users. The user may be prompted to backup if she has failed to do so by or at some certain point in time or after a certain duration of time or quantity of usage, or the backup may proceed automatically without user intervention.","Referring to , backup storage  and storage media  (e.g., magnetic tape) may be used to store backed up information. Of course, any non-volatile media (e.g., one or more floppy diskettes, a writable optical diskette, a hard drive, or the like) may be used for backup storage .","There are at least two scenarios to backing up secure database . The first scenario is \u201csite specific\u201d and uses the security of SPU  to support restoration of the backed up information. This first method is used in case of damage to secure database  due for example to failure of secondary storage device , inadvertent user damage to the files, or other occurrences that may damage or corrupt some or all of secure database . This first, site specific scenario of back up assumes that an SPU  still functions properly and is available to restore backed up information.","The second back up scenario assumes that the user's SPU  is no longer operational and needs to be, or has been replaced. This second approach permits an authorized VDE administrator or other authorized VDE participant to access the stored back up information in order to prevent loss of critical data and\/or assist the user in recovering from the error.","Both of these scenarios are provided by the example of program control steps performed by ROS  shown in .  shows an example back up routine  performed by an electronic appliance  to back up secure database  (and other information) onto back up storage . Once a back up has been initiated, as discussed above, back up routine  generates one or more back up keys (block ). Back up routine  then reads all secure database items, decrypts each item using the original key used to encrypt them before they were stored in secure database  (block ). Since SPU  is typically the only place where the keys for decrypting this information within an instance of secure database  are stored, and since one of the scenarios provided by back up routine  is that SPU  completely failed or is destroyed, back up routine  performs this reading and decrypting step  so that recovery from a backup is not dependent on knowledge of these keys within the SPU. Instead, back up routine  encrypts each secure database  item with a newly generated back up key(s) (block ) and writes the encrypted item to back up store  (block ). This process continues until all items within secure database  have been read, decrypted, encrypted with a newly generated back up key(s), and written to the back up store (as tested for by decision block ).","The preferred embodiment also reads the summary services audit information stored within the protected memory of SPU  by SPE summary services manager , encrypts this information with the newly generated back up key(s), and writes this summary services information to back up store  (block ).","Finally, back up routine  saves the back up key(s) generated by block  and used to encrypt in blocks ,  onto back up store . It does this in two secure ways in order to cover both of the restoration scenarios discussed above. Back up routine  may encrypt the back up key(s) (along with other information such as the time of back up and other appropriate information to identify the back up with a further key or keys such that only SPU  can decrypt (block ). This encrypted information is then written to back up store  (block ). For example, this step may include multiple encryptions using one or more public keys with corresponding private keys known only to SPU . Alternatively, a second back up key generated by the SPU  and kept only in the SPU may be used for the final encryption in place of a public key. Block  preferably includes multiple encryption in order to make it more difficult to attack the security of the back up by \u201ccracking\u201d the encryption used to protect the back up keys. Although block  includes encrypted summary services information on the back up, it preferably does not include SPU device private keys, shared keys, SPU code and other internal security information to prevent this information from ever becoming available to users even in encrypted form.","The information stored by block  is sufficient to allow the same SPU  that performed (or at least in part performed) back up routine  to recover the backed up information. However, this information is useless to any device other than that same SPU because only that SPU knows the particular keys used to protect the back up keys. To cover the other possible scenario wherein the SPU  fails in a non-recoverable way, back up routine  provides an additional step (block ) of saving the back up key(s) under protection of one or more further set of keys that may be read by an authorized VDE administrator. For example, block  may encrypt the back up keys with an \u201cdownload authorization key\u201d received during initialization of SPU  from a VDE administrator. This encrypted version of back up keys is also written to back up store  (block ). It can be used to support restoration of the back up files in the event of an SPU  failure. More specifically, a VDE administrator that knows the download authorization (or other) keys(s) used by block  may be able to recover the back up key(s) in the back up store  and proceed to restore the backed up secure database  to the same or different electronic appliance .","In the preferred embodiment, the information saved by routine  in back up files can be restored only after receiving a back up authorization from an authorized VDE administrator. In most cases, the restoration process will simply be a restoration of secure database  with some adjustments to account for any usage since the back up occurred. This may require the user to contact additional providers to transmit audit and billing data and receive new budgets to reflect activity since the last back up. Current summary services information maintained within SPU  may be compared to the summary services information stored on the back up to determine or estimate most recent usage activity.","In case of an SPU  failure, an authorized VDE administrator must be contacted to both initialize the replacement SPU  and to decrypt the back up files. These processes allow for both SPU failures and upgrades to new SPUs. In the case of restoration, the back up files are used to restore the necessary information to the user's system. In the case of upgrades, the back up files may be used to validate the upgrade process.","The back up files may in some instances be used to transfer management information between electronic appliances . However, the preferred embodiment may restrict some or all information from being transportable between electronic appliances with appropriate authorizations. Some or all of the back up files may be packaged within an administrative object and transmitted for analysis, transportation, or other uses.","As a more detailed example of a need for restoration from back up files, suppose an electronic appliance  suffers a hard disk failure or other accident that wipes out or corrupts part or all of the secure database , but assume that the SPU  is still functional. SPU  may include all of the information (e.g., secret keys and the like) it needs to restore the secure database . However, ROS  may prevent secure database restoration until a restoration authorization is received from a VDE administrator. A restoration authorization may comprise, for example, a \u201csecret value\u201d that must match a value expected by SPE . A VDE administrator may, if desired, only provide this restoration authorization after, for example, summary services information stored within SPU  is transmitted to the administrator in an administrative object for analysis. In some circumstances, a VDE administrator may require that a copy (partial or complete) of the back up files be transmitted to it within an administrative object to check for indications of fraudulent activities by the user. The restoration process, once authorized, may require adjustment of restored budget records and the like to reflect activity since the last back up, as mentioned above.",{"@attributes":{"id":"p-0947","num":"1338"},"figref":["FIG. 40","FIG. 38","FIG. 38","FIG. 38"],"b":["1268","600","610","600","500","1266","1270","500","1270","500","1272","500","500","610","500","1274","500","1262","1264"]},"The VDE administrator may at this point restore the summary values and other information within SPU  based on the information obtained by block  and from the backup (block ). For example, the VDE administrator may reset SPU internal summary values and counters so that they are consistent with the last backup. These values may be adjusted by the VDE administrator based on the \u201cwork in progress\u201d recovered by block , the amount of time that has passed since the backup, etc. The goal may typically be to attempt to provide internal SPU values that are equal to what they would have been had the failure not occurred.","The VDE administrator may then authorize SPU  to recover its secure database  from the backup files (block ). This restoration process replaces all secure database  records with the records from the backup. The VDE administrator may adjust these records as needed by passing commands to SPU  during or after the restoration process.","The VDE administrator may then compute bills based on the recovered values (block ), and perform other actions to recover from SPU downtime (block ). Typically, the goal is to bill the user and adjust other VDE  values pertaining to the failed electronic appliance  for usage that occurred subsequent to the last backup but prior to the failure. This process may involve the VDE administrator obtaining, from other VDE participants, reports and other information pertaining to usage by the electronic appliance prior to its failure and comparing it to the secure database backup to determine which usage and other events are not yet accounted for.","In one alternate embodiment, SPU  may have sufficient internal, non-volatile memory to allow it to store some or all of secure database . In this embodiment, the additional memory may be provided by additional one or more integrated circuits that can be contained within a secure enclosure, such as a tamper resistant metal container or some form of a chip pack containing multiple integrated circuit components, and which impedes and\/or evidences tampering attempts, and\/or disables a portion or all of SPU  or associated critical key and\/or other control information in the event of tampering. The same back up routine  shown in  may be used to back up this type of information, the only difference being that block  may read the secure database item from the SPU internal memory and may not need to decrypt it before encrypting it with the back up key(s).","Event-Driven VDE Processes","As discussed above, processes provided by\/under the preferred embodiment rights operating system (ROS)  may be \u201cevent driven.\u201d This \u201cevent driven\u201d capability facilitates integration and extendibility.","An \u201cevent\u201d is a happening at a point in time. Some examples of \u201cevents\u201d are a user striking a key of a keyboard, arrival of a message or an object , expiration of a timer, or a request from another process.","In the preferred embodiment, ROS  responds to an \u201cevent\u201d by performing a process in response to the event. ROS  dynamically creates active processes and tasks in response to the occurrence of an event. For example, ROS  may create and begin executing one or more component assemblies  for performing a process or processes in response to occurrence of an event. The active processes and tasks may terminate once ROS  has responded to the event. This ability to dynamically create (and end) tasks in response to events provides great flexibility, and also permits limited execution resources such as those provided by an SPU  to perform a virtually unlimited variety of different processes in different contexts.","Since an \u201cevent\u201d may be any type of happening, there are an unlimited number of different events. Thus, any attempt to categorize events into different types will necessarily be a generalization. Keeping this in mind, it is possible to categorize events provided\/supported by the preferred embodiment into two broad categories:\n\n","Generally, \u201cuser-initiated\u201d events are happenings attributable to a user (or a user application). A common \u201cuser-initiated\u201d event is a user's request (e.g., by pushing a keyboard button, or transparently using redirector ) to access an object  or other VDE-protected information.","\u201cSystem-initiated\u201d events are generally happenings not attributable to a user. Examples of system initiated events include the expiration of a timer indicating that information should be backed to non-volatile memory, receipt of a message from another electronic appliance , and a service call generated by another process (which may have been started to respond to a system-initiated event and\/or a user-initiated event).","ROS  provided by the preferred embodiment responds to an event by specifying and beginning processes to process the event. These processes are, in the preferred embodiment, based on methods . Since there are an unlimited number of different types of events, the preferred embodiment supports an unlimited number of different processes to process events. This flexibility is supported by the dynamic creation of component assemblies  from independently deliverable modules such as method cores \u2032, load modules , and data structures such as UDEs . Even though any categorization of the unlimited potential types of processes supported\/provided by the preferred embodiment will be a generalization, it is possible to generally classify processes as falling within two categories:\n\n","\u201cUse\u201d processes relate in some way to use of VDE-protected information. Methods  provided by the preferred embodiment may provide processes for creating and maintaining a chain of control for use of VDE-protected information. One specific example of a \u201cuse\u201d type process is processing to permit a user to open a VDE object  and access its contents. A method  may provide detailed use-related processes such as, for example, releasing content to the user as requested (if permitted), and updating meters, budgets, audit trails, etc. Use-related processes are often user-initiated, but some use processes may be system-initiated. Events that trigger a VDE use-related process may be called \u201cuse events.\u201d","An \u201cadministrative\u201d process helps to keep VDE  working. It provides processing that helps support the transaction management \u201cinfrastructure\u201d that keeps VDE  running securely and efficiently. Administrative processes may, for example, provide processing relating to some aspect of creating, modifying and\/or destroying VDE-protected data structures that establish and maintain VDE's chain of handling and control. For example, \u201cadministrative\u201d processes may store, update, modify or destroy information contained within a VDE electronic appliance  secure database . Administrative processes also may provide communications services that establish, maintain and support secure communications between different VDE electronic appliances . Events that trigger administrative processes may be called \u201cadministrative events.\u201d","Reciprocal Methods","Some VDE processes are paired based on the way they interact together. One VDE process may \u201crequest\u201d processing services from another VDE process. The process that requests processing services may be called a \u201crequest process.\u201d The \u201crequest\u201d constitutes an \u201cevent\u201d because it triggers processing by the other VDE process in the pair. The VDE process that responds to the \u201crequest event\u201d may be called a \u201cresponse process.\u201d The \u201crequest process\u201d and \u201cresponse process\u201d may be called \u201creciprocal processes.\u201d","The \u201crequest event\u201d may comprise, for example, a message issued by one VDE node electronic appliance  or process for certain information. A corresponding \u201cresponse process\u201d may respond to the \u201crequest event\u201d by, for example, sending the information requested in the message. This response may itself constitute a \u201crequest event\u201d if it triggers a further VDE \u201cresponse process.\u201d For example, receipt of a message in response to an earlier-generated request may trigger a \u201creply process.\u201d This \u201creply process\u201d is a special type of \u201cresponse process\u201d that is triggered in response to a \u201creply\u201d from another \u201cresponse process.\u201d There may be any number of \u201crequest\u201d and \u201cresponse\u201d process pairs within a given VDE transaction.","A \u201crequest process\u201d and its paired \u201cresponse process may be performed on the same VDE electronic appliance , or the two processes may be performed on different VDE electronic appliances. Communication between the two processes in the pair may be by way of a secure (VDE-protected) communication, an \u201cout of channel\u201d communication, or a combination of the two.",{"@attributes":{"id":"p-0964","num":"1359"},"figref":["FIGS. 41","FIG. 41"],"i":["a","d ","a "],"b":["41","1000","1000","600","600","600","600"]},{"@attributes":{"id":"p-0965","num":"1360"},"figref":["FIG. 41","FIG. 41"],"i":["a ","a ","a","a ","b "],"b":["600","1000","600","1000","690","1100","1450","1450","1452","1000"]},"Receipt of the request by VDE node comprises a response event at that node. Upon receipt of the request, the VDE node may perform a \u201creciprocal\u201d process  defined by the same or different method to respond to the response event. The reciprocal process  may be based on a component assembly  (e.g., one or more load modules , data, and optionally other methods present in the VDE node B).",{"@attributes":{"id":"p-0967","num":"1362"},"figref":["FIG. 41","FIG. 41","FIG. 41"],"i":["b ","a ","a "],"b":["600","600","1452","1454","600","1454","1468","1469","600","1470","1000","1469","600","600","1000","1000","1450","1452","1454","1468","1469","1470","1468","1454","1000","1000","1000"]},{"@attributes":{"id":"p-0968","num":"1363"},"figref":["FIG. 41","FIGS. 41","FIG. 41"],"i":["c ","a","b ","b"],"b":["41","600","600","600","600","600","600","600","600","600","600","600","600","600","600","600","600"]},"A method  may be parametarized with sets of events that specify related or cooperative functions. Events may be logically grouped by function (e.g., use, distribute), or a set of reciprocal events that specify processes that may operate in conjunction with each other. illustrates a set of \u201creciprocal events\u201d that support cooperative processing between several VDE nodes , ,  in a content distribution model to support the distribution of budget. The chain of handling and control, in this example, is enabled by using a set of \u201creciprocal events\u201d specified within a BUDGET method. is an example of how the reciprocal event behavior within an example BUDGET method () work in cooperation to establish a chain of handling and control between several VDE nodes. The example BUDGET method  responds to a \u201cuse\u201d event  by performing a \u201cuse\u201d process  that defines the mechanism by which processes are budgeted. The BUDGET method  might, for example, specify a use process  that compares a meter count to a budget value and fail the operation if the meter count exceeds the budget value. It might also write an audit trail that describes the results of said BUDGET decisions. Budget method  may respond to a \u201cdistribute\u201d event by performing a distribute process  that defines the process and\/or control information for further distribution of the budget. It may respond to a \u201crequest\u2019 event  by performing a request process  that specifies how the user might request use and\/or distribution rights from a distributor. It may respond to a \u201cresponse\u201d event  by performing a response process  that specifies the manner in which a distributor would respond to requests from other users to whom they have distributed some (or all) of their budget to. It may respond to a \u201creply\u201d event  by performing a reply process  that might specify how the user should respond to message regranting or denying (more) budget.","Control of event processing, reciprocal events, and their associated methods and method components is provided by PERCs  in the preferred embodiment. These PERCs () might reference administrative methods that govern the creation, modification, and distribution of the data structures and administrative methods that permit access, modification, and further distribution of these items. In this way, each link in the chain of handling and control might, for example, be able to customize audit information, alter the budget requirements for using the content, and\/or control further distribution of these rights in a manner specified by prior members along the distribution chain.","In the example shown in , a distributor at a VDE distributor node () might request budget from a content creator at another node (). This request may be made in the context of a secure VDE communication or it may be passed in an \u201cout-of-channel\u201d communication (e.g. a telephone call or letter). The creator  may decide to grant budget to the distributor  and processes a distribute event ( in BUDGET method  at VDE node ). A result of processing the distribute event within the BUDGET method might be a secure communication () between VDE nodes  and  by which a budget granting use and redistribute rights to the distributor  may be transferred from the creator  to the distributor. The distributor's VDE node  may respond to the receipt of the budget information by processing the communication using the reply process B of the BUDGET method . The reply event processing B might, for example, install a budget and PERC  within the distributor's VDE  node to permit the distributor to access content or processes for which access is control at least in part by the budget and\/or PERC. At some point, the distributor  may also desire to use the content to which she has been granted rights to access.","After registering to use the content object, the user  would be required to utilize an array of \u201cuse\u201d processes C to, for example, open, read, write, and\/or close the content object as part of the use process.","Once the distributor  has used some or all of her budget, she may desire to obtain additional budget. The distributor  might then initiate a process using the BUDGET method request process (B). Request process B might initiate a communication (AB) with the content creator VDE node  requesting more budget and perhaps providing details of the use activity to date (e.g., audit trails). The content creator  processes the \u2018get more budget\u2019 request event AB using the response process (A), within the creator's BUDGET method A. Response process A might, for example, make a determination if the use information indicates proper use of the content, and\/or if the distributor is creditworthy for more budget. The BUDGET method response process A might also initiate a financial transaction to transfer funds from the distributor to pay for said use, or use the distribute process A to distribute budget to the distributor . A response to the distributor  granting more budget (or denying more budget) might be sent immediately as a response to the request communication AB, or it might be sent at a later time as part of a separate communication. The response communication upon being received at the distributor's VDE node , might be processed using the reply process B within the distributor's copy of the BUDGET method B. The reply process B might then process the additional budget in the same manner as described above.","The chain of handling and control may, in addition to posting budget information, also pass control information that governs the manner in which said budget may be utilized. For example, the control information specified in the above example may also contain control information describing the process and limits that apply to the distributor's redistribution of the right to use the creator's content object. Thus, when the distributor responds to a budget request from a user (a communication between a user at VDE node  to the distributor at VDE node  similar in nature to the one described above between VDE nodes  and ) using the distribute process B within the distributor's copy of the BUDGET method B, a distribution and request\/response\/reply process similar to the one described above might be initiated.","Thus, in this example a single method can provide multiple dynamic behaviors based on different \u201ctriggering\u201d events. For example, single BUDGET method  might support any or all of the events listed below:",{"@attributes":{"id":"p-0976","num":"1371"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Event Type","Event","Process Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u201cUse\u201d Events","use budget","Use budget."]},{"entry":["Request Events Processed by","request more budget","Request more money for"]},{"entry":["User Node Request",{},"budget."]},{"entry":["Process 1480c","request audit by auditor #1","Request that auditor #1"]},{"entry":[{},{},"audit the budget use."]},{"entry":[{},"request budget deletion","Request that budget be"]},{"entry":[{},{},"deleted from system."]},{"entry":[{},"request method updated","Update method used for"]},{"entry":[{},{},"auditing."]},{"entry":[{},"request to change auditors","Change from auditor 1 to"]},{"entry":[{},{},"auditor 2, or vice versa."]},{"entry":[{},"request different audit","Change time interval"]},{"entry":[{},"interval","between audits."]},{"entry":[{},"request ability to provide","Request ability to provide"]},{"entry":[{},"budget copies","copies of a budget."]},{"entry":[{},"request ability to distribute","Request ability to"]},{"entry":[{},"budget","distribute a budget to other"]},{"entry":[{},{},"users."]},{"entry":[{},"request account status","Request information on"]},{"entry":[{},{},"current status of an"]},{"entry":[{},{},"account."]},{"entry":[{},"Request New Method","Request new method."]},{"entry":[{},"Request Method Update","Request update of method."]},{"entry":[{},"Request Method Deletion","Request deletion of"]},{"entry":[{},{},"method."]},{"entry":["Response Events","receive more budget","Allocate more money to"]},{"entry":["Processed by User Node",{},"budget."]},{"entry":["Request Process 1480C","receive method update","Update method."]},{"entry":[{},"receive auditor change","Change from one auditor"]},{"entry":[{},{},"to another."]},{"entry":[{},"receive change to audit","Change interval between"]},{"entry":[{},"interval","audits."]},{"entry":[{},"receive budget deletion","Delete budget."]},{"entry":[{},"provide audit to auditor #1","Forward audit information"]},{"entry":[{},{},"to auditor #1."]},{"entry":[{},"provide audit to auditor #2","Forward audit information"]},{"entry":[{},{},"to auditor #2."]},{"entry":[{},"receive account status","Provide account status."]},{"entry":[{},"Receive New","Receive new budget."]},{"entry":[{},"Receive Method Update","Receive updated"]},{"entry":[{},{},"information."]},{"entry":[{},"Receive More","Receive more for budget."]},{"entry":[{},"Sent Audit","Send audit information."]},{"entry":[{},"Perform Deletion","Delete information."]},{"entry":["\u201cDistribute\u201d Events","Create New","Create new budget."]},{"entry":[{},"Provide More","Provide more for budget."]},{"entry":[{},"Audit","Perform audit."]},{"entry":[{},"Delete","Delete information."]},{"entry":[{},"Reconcile","Reconcile budget and"]},{"entry":[{},{},"auditing."]},{"entry":[{},"Copy","Copy budget."]},{"entry":[{},"Distribute","Distribute budget."]},{"entry":[{},"Method Modification","Modify method."]},{"entry":[{},"Display Method","Display requested method."]},{"entry":["\u201cRequest\u201d Events","Delete","Delete information."]},{"entry":["Processed by Distributor","Get New","Get new budget."]},{"entry":["Node Request Process","Get More","Get more for budget."]},{"entry":["1484B","Get Updated","Get updated information."]},{"entry":[{},"Get Audited","Get audit information."]},{"entry":["\u201cResponse Events\u201d","Provide New to user","Provide new budget to"]},{"entry":["Processed by Distributor",{},"user."]},{"entry":["Node Request Process","Provide More to user","Provide more budget to"]},{"entry":["1484B",{},"user."]},{"entry":[{},"Provide Update to user","Provided updated budget"]},{"entry":[{},{},"to user."]},{"entry":[{},"Audit user","Audit a specified user."]},{"entry":[{},"Delete user's method","Delete method belonging"]},{"entry":[{},{},"to user."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"A. Budget",{"@attributes":{"id":"p-0977","num":"1372"},"figref":"FIGS. 42","i":["a","b","c ","d"],"b":["42","42","42","2250","2250"],"ul":{"@attributes":{"id":"ul0138","list-style":"none"},"li":{"@attributes":{"id":"ul0138-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0139","list-style":"none"},"li":["use (see )","administrative request (see )","administrative response (see )","administrative reply (see ).\n\nIn general, the \u201cuse\u201d mode of BUDGET method  is invoked in response to an event relating to the use of an object or its content. The \u201cadministrative request\u201d mode of BUDGET method  is invoked by or on behalf of the user in response to some user action that requires contact with a VDE financial provider, and basically its task is to send an administrative request to the VDE financial provider. The \u201cadministrative response\u201d mode of BUDGET method  is performed at the VDE financial provider in response to receipt of an administrative request sent from a VDE node to the VDE financial provider by the \u201cadministrative request\u201d invocation of BUDGET method  shown in . The \u201cadministrative response\u201d invocation of BUDGET method  results in the transmission of an administrative object from VDE financial provider to the VDE user node. Finally, the \u201cadministrative reply\u201d invocation of BUDGET method  shown in is performed at the user VDE node upon receipt of the administrative object sent by the \u201cadministrative response\u201d invocation of the method shown in \n"]}}}},"In the preferred embodiment, the same BUDGET method  performs each of the four different step sequences shown in -. In the preferred embodiment, different event codes may be passed to the BUDGET method  to invoke these various different modes. Of course, it would be possible to use four separate BUDGET methods instead of a single BUDGET method with four different \u201cdynamic personalities,\u201d but the preferred embodiment obtains certain advantages by using the same BUDGET method for each of these four types of invocations.","Looking at , the \u201cuse\u201d invocation of BUDGET method  first primes the Budget Audit Trail (blocks , ). It then obtains the DTD for the Budget UDE, which it uses to obtain and read the Budget (UDE blocks -). BUDGET method  in this \u201cuse\u201d invocation may then determine whether a Budget Audit date has expired, and terminate if it has (\u201cyes\u201d exit to decision block ; blocks , ). So long as the Budget Audit date has not expired, the method may then update the Budget using the atomic element and event counts (and possibly other information) (blocks , ), and may then save a Budget User Audit record in a Budget Audit Trail UDE (blocks , ) before terminating (at terminate point ).","Looking at , the first six steps (blocks -) may be performed by the user VDE node in response to some user action (e.g., request to access new information, request for a new budget, etc.). This \u201cadministrative request.\u201d invocation of BUDGET method  may prime an audit trail (blocks , ). The method may then place a request for administrative processing of an appropriate Budget onto a request queue (blocks , ). Finally, the method may save appropriate audit trail information (blocks , ). Sometime later, the user VDE node may prime a communications audit trail (blocks , ), and may then write a Budget Administrative Request into an administrative object (block ). This step may obtain information from the secure database as needed from such sources such as, for example, Budget UDE; Budget Audit Trail UDE(s); and Budget Administrative Request Record(s) (block ).","Block  may then communicate the administrative object to a VDE financial provider, or alternatively, block  may pass administrative object to a separate communications process or method that arranges for such communications to occur. If desired, method  may then save a communications audit trail (blocks , ) before terminating at (termination point ).",{"@attributes":{"id":"p-0982","num":"1381"},"figref":["FIG. 42","FIG. 42","FIG. 42"],"i":["c ","c ","b"],"b":["2250","2296"]},"Upon receiving the administrative object, BUDGET method  at the VDE financial provider site may prime a budget communications and response audit trail (blocks ,  and may then unpack the administrative object and retrieve the budget request(s), audit trails and record(s) it contains (block ). This information retrieved from the administrative object may be written by the VDE financial provider into its secure database (block ). The VDE financial provider may then retrieve the budget request(s) and determine the response method it needs to execute to process the request (blocks , ). BUDGET method  may send the event(s) contained in the request record(s) to the appropriate response method and may generate response records and response requests based on the RESPONSE method (block ). The process performed by block  may satisfy the budget request by writing appropriate new response records into the VDE financial provider's secure database (block ). BUDGET method  may then write these Budget administrative response records into an administrative object (blocks , ), which it may then communicate back to the user node that initiated the budget request. BUDGET method  may then save communications and response processing audit trail information into appropriate audit trail UDE(s) (blocks , ) before terminating at termination point .",{"@attributes":{"id":"p-0984","num":"1383"},"figref":["FIG. 42","FIG. 42"],"i":["d ","d "],"b":["2250","2250","2332","2334","2250","2336","2338","2340","2341"]},"Sometime later, the VDE user node may retrieve the reply record from the secure database and determine what method is required to process it (blocks , ). The VDE user node may, optionally, prime an audit trail (blocks ,) to record the results of the processing of the reply event. The BUDGET method  may then send event(s) contained in the reply record(s) to the REPLY method, and may generate\/update the secure database records as necessary to, for example, insert new budget records, delete old budget records and\/or apply changes to budget records (blocks , ). BUDGET method  may then delete the reply record from the secure data base (blocks ,  before writing the audit trail (if required) (blocks  terminating (at terminate point ).","B. Register",{"@attributes":{"id":"p-0986","num":"1385"},"figref":["FIGS. 43","FIG. 43","FIG. 43","FIG. 43","FIG. 43"],"i":["a","d ","a ","b ","c ","d "],"b":["43","2400","2400"]},"The steps shown in may be, for example, performed at a user VDE node in response to some action by or on behalf of the user. For example the user may ask to access an object that has not yet been (or is not now) properly registered to her. In response to such a user request, the REGISTER method  may prime a Register Audit Trail UDE (blocks , ) before determining whether the object being requested has already been registered (decision block ). If the object has already been registered (\u201cyes\u201d exit to decision block ), the REGISTER method may terminate (at termination point ). If the object is not already registered (\u201cno\u201d exit to decision block ), then REGISTER method  may access the VDE node secure database PERC  and\/or Register MDE (block ). REGISTER method  may extract an appropriate Register Record Set from this PERC  and\/or Register MDE (block ), and determine whether all of the required elements are present that are needed to register the object (decision block ). If some piece(s) is missing (\u201cno\u201d exit to decision block ); REGISTER method  may queue a Register request record to a communication manager and then suspend the REGISTER method until the queued request is satisfied (blocks , ). Block  may have the effect of communicating a register request to a VDE distributor, for example. When the request is satisfied and the register request record has been received (block ), then the test of decision block  is satisfied (\u201cyes\u201d exit to decision block ), and REGISTER method  may proceed. At this stage, the REGISTER method  may allow the user to select Register options from the set of method options allowed by PERC  accessed at block  (block ). As one simple example, the PERC  may permit the user to pay by VISA or MasterCard but not by American Express; block  may display a prompt asking the user to select between paying using her VISA card and paying using her MasterCard (block ). The REGISTER method  preferably validates the user selected registration options and requires the user to select different options if the initial user options were invalid (block , \u201cno\u201d exit to decision block ). Once the user has made all required registration option selections and those selections have been validated (\u201cyes\u201d exit to decision block ), the REGISTER method  may write an User Registration Table (URT) corresponding to this object and this user which embodies the user registration selections made by the user along with other registration information required by PERC  and\/or the Register MDE (blocks ,). REGISTER method  may then write a Register audit record into the secure database (blocks , ) before terminating (at terminate point ).",{"@attributes":{"id":"p-0988","num":"1387"},"figref":["FIG. 43","FIG. 43","FIG. 43"],"i":["b ","b ","a"],"b":["2400","2416","2400","2440","2442","2444","2400","2446","2400","2448","2450","2400","2400","2452","2454","2456"]},{"@attributes":{"id":"p-0989","num":"1388"},"figref":["FIG. 43","FIG. 43"],"i":["c ","b"],"b":["2400","2448","2400","2460","2462","2464","2466","2400","2468","2470","2400","2472","2474","2400","2476","2478","2400","2480","2482","808","2482","2400","2484","2486","2488"]},{"@attributes":{"id":"p-0990","num":"1389"},"figref":["FIG. 43","FIG. 43","FIG. 43","FIG. 42"],"i":["d ","c ","d ","d "],"b":"2480"},"C. Audit",{"@attributes":{"id":"p-0991","num":"1390"},"figref":["FIGS. 44","FIG. 44","FIG. 44","FIG. 44"],"i":["a","c ","a ","b ","c "],"b":["44","2520","2520"]},"The AUDIT method  operating in the \u201cadministrative request\u201d mode as shown in is typically performed, for example, at a VDE user node based upon some request by or on behalf of the user. For example, the user may have requested an audit, or a timer may have expired that initiates communication of audit information to a VDE content provider or other VDE participant. In the preferred embodiment, different audits of the same overall process may be performed by different VDE participants. A particular \u201caudits method  invocation may be initiated for any one (or all) of the involved VDE participants. Upon invocation of AUDIT method , the method may prime an audit administrative audit trail (thus, in the preferred embodiment, the audit processing may itself be audited) (blocks , ). The AUDIT method  may then queue a request for administrative processing (blocks , ), and then may save the audit administrative audit trail in the secure database (blocks , ). Sometime later, AUDIT method  may prime a communications audit trail (blocks . ), and may then write Audit Administrative Request(s) into one or more administrative object(s) based on specific UDE, audit trail UDE(s), and\/or administrative record(s) stored in the secure database (blocks , ). The AUDIT method  may then save appropriate information into the communications audit trail (blocks , ) before terminating (at terminate point ).",{"@attributes":{"id":"p-0993","num":"1392"},"figref":["FIG. 44","FIG. 44"],"i":["b ","a "],"b":["2538","2520","2550","2552","2554","2556","2520","2558","2560","2520","2562","2564","2562"]},"For example, AUDIT method  at this point could call an external process to perform, for example, an electronic funds transfer against the user's bank account or some other bank account. The AUDIT administrative response can, if desired, call an external process that interfaces VDE to one or more existing computer systems. The external process could be passed the user's account number, PIN, dollar amount, or any other information configured in, or associated with, the VDE audit trail being processed. The external process can communicate with non-VDE hosts and use the information passed to it as part of these communications. For example, the external process could generate automated clearinghouse (ACH) records in a file for submittal to a bank. This mechanism would provide the ability to automatically credit or debit a bank account in any financial Institution. The same mechanism could be used to communicate with the existing credit card (e.g. VISA) network by submitting VDE based charges against the charge account.","Once the appropriate Audit response record(s) have been generated, AUDIT method  may write an Audit administrative record(s) into an administrative object for communication back to the VDE user node that generated the Audit request (blocks . ). The AUDIT method  may then save communications and response processing audit information in appropriate audit trail(s) (blocks , ) before terminating (at terminate point ).",{"@attributes":{"id":"p-0996","num":"1395"},"figref":["FIG. 44","FIG. 44","FIG. 44","FIG. 43"],"i":["c ","b","c ","d "],"b":["2520","2566","2580","2599","2400","2584","2595","2596"]},"Examples Of Event-Driven Content-Based Methods","VDE methods  are designed to provide a very flexible and highly modular approach to secure processing. A complete VDE process to service a \u201cuse event\u201d may typically be constructed as a combination of methods . As one example, the typical process for reading content or other information from an object  may involve the following methods:\n\n",{"@attributes":{"id":"p-0998","num":"1401"},"figref":"FIG. 45","b":["100","402","1000","1000"]},"EVENT method  filters out events that are not significant with regard to the specific control method involved. EVENT method  may pass on qualified events to a METER process , which meters or discards the event based on its own particular criteria.","In addition, the preferred embodiment provides an optimization called \u201cprecheck.\u201d EVENT method\/process  may perform this \u201cprecheck\u201d based on metering, billing and budget information to determine whether processing based on an event will be allowed. Suppose, for example, that the user has already exceeded her budget with respect to accessing certain information content so that no further access is permitted. Although BUDGET method  could make this determination, records and processes performed by BUDGET method  and\/or BILLING method  might have to be \u201cundone\u201d to, for example, prevent the user from being charged for an access that was actually denied. It may be more efficient to perform a \u201cprecheck\u201d within EVENT method  so that fewer transactions have to be \u201cundone.\u201d","METER method  may store an audit record in a meter \u201ctrail\u201d UDE , for example, and may also record information related to the event in a meter UDE . For example, METER method  may increment or decrement a \u201cmeter\u201d value within a meter UDE  each tune content is accessed. The two different data structures (meter UDE and meter trail UDE may be maintained to permit record keeping for reporting purposes to be maintained separately from record keeping for internal operation purposes, for example.","Once the event is metered by METER method , the metered event may be processed by a BILLING method . BILLING method  determines how much budget is consumed by the event, and keeps records that are useful for reconciliation of meters and budgets. Thus, for example, BILLING method  may read budget information from a budget UDE, record billing information in a billing UDE, and write one or more audit records in a billing trail UDE. While some billing trail information may duplicate meter and\/or budget trail information, the billing trail information is useful, for example, to allow a content creator  to expect a payment of a certain size, and serve as a reconciliation check to reconcile meter trail information sent to creator  with budget trail information sent to, for example, an independent budget provider.","BILLING method  may then pass the event on to a BUDGET method . BUDGET method  sets limits and records transactional information associated with those limits. For example, BUDGET method  may store budget information in a budget UDE, and may store an audit record in a budget bail UDE. BUDGET method  may result in a \u201cbudget remaining\u201d field in a budget UDE being decremented by an amount specified by BILLING method .","The information content may be released, or other action taken, once the various methods , ,,  have processed the event.","As mentioned above, PERCs  in the preferred embodiment may be provided with \u201ccontrol methods\u201d that in effect \u201coversee\u201d performance of the other required methods in a control process.  shows how the required methods\/processes , ,, and  of  can be organized and controlled by a control method . Control method  may call, dispatch events, or otherwise invoke the other methods , , ,  and otherwise supervise the processing performed in response to an \u201cevent.\u201d","Control methods operate at the level of control sets  within PERCs . They provide structure, logic, and flow of control between disparate acquired methods . This mechanism permits the content provider to create any desired chain of processing, and also allows the specific chain of processing to be modified (within permitted limits) by downstream redistributors. This control structure concept provides great flexibility.",{"@attributes":{"id":"p-1007","num":"1410"},"figref":"FIG. 47","b":["412","404","406","408","412","1000","412","404","406","408"]},"Many different methods can be in effect simultaneously.  shows an example of preferred embodiment event processing using multiple METER methods  and multiple BUDGET methods . Some events may be subject to many different required methods operating independently or cumulatively. For example, in the example shown in , meter method may maintain meter trail and meter information records that are independent from the meter trail and meter information records maintained by METER method . Similarly, BUDGET method may maintain records independently of those records maintained by BUDGET method . Some events may bypass BILLING method  while nevertheless being processed by meter method and BUDGET method . A variety of different variations are possible.","Although methods  can have virtually unlimited variety and some may even be user-defined, certain basic \u201cuse\u201d type methods are preferably used in the preferred embodiment to control most of the more fundamental object manipulation and other functions provided by VDE . For example, the following high level methods would typically be provided for object manipulation:\n\n","An OPEN method is used to control opening a container so its contents may be accessed. A READ method is used to control the access to contents in a container. A WRITE method is used to control the insertion of contents into a container. A CLOSE method is used to close a container that has been opened.","Subsidiary methods are provided to perform some of the steps required by the OPEN, READ, WRITE and\/or CLOSE methods. Such subsidiary methods may include the following:\n\n","An ACCESS method may be used to physically access content associated with an opened container (the content can be anywhere). A PANIC method may be used to disable at least a portion of the VDE node if a security violation is detected. An ERROR method may be used to handle error conditions. A DECRYPT method is used to decrypt encrypted information. An ENCRYPT method is used to encrypt information. A DESTROY content method is used to destroy the ability to access specific content within a container. An INFORMATION method is used to provide public information about the contents of a container. An OBSCURE method is used to devalue content read from an opened container (e.g., to write the word \u201cSAMPLE\u201d over a displayed image). A FINGERPRINT method is used to mark content to show who has released it from the secure container. An event method is used to convert events into different events for response by other methods.","Open",{"@attributes":{"id":"p-1013","num":"1438"},"figref":["FIG. 49","FIG. 49","FIG. 49","FIGS. 49","FIG. 49"],"b":["1500","49"],"i":["a","f "]},"The OPEN method process starts with an \u201copen event.\u201d This open event may be generated by a user application, an operating system intercept or various other mechanisms for capturing or intercepting control. For example, a user application may issue a request for access to a particular content stored within the VDE container. As another example, another method may issue a command.","In the example shown, the open event is processed by a control method . Control method  may call other methods to process the event. For example, control method  may call an EVENT method , a METER method , a BILLING method , and a BUDGET method . Not all OPEN control methods necessarily call of these additional methods, but the OPEN method  shown in  is a representative example.","Control method  passes a description of the open event to EVENT method . EVENT method  may determine, for example, whether the open event is permitted and whether the open event is significant in the sense that it needs to be processed by METER method , BILLING method , and\/or BUDGET method . EVENT method  may maintain audit trail information within an audit trail UDE, and may determine permissions arid significance of the event by using an Event Method Data Element (MDE). EVENT method  may also map the open event into an \u201catomic element\u201d and count that may be processed by METER method . BILLING method , and\/or BUDGET method .","In OPEN method , once EVENT method  has been called and returns successfully, control method  then may call METER method  and pass the METER method, the atomic element and count returned by EVENT method . METER method  may maintain audit trail information in a METER method Audit Trail UDE, and may also maintain meter information in a METER method UDE. In the preferred embodiment, METER method  returns a meter value to control method  assuming successful completion.","In the preferred embodiment, control method  upon receiving an indication that METER method  has completed successfully, then calls BILLING method . Control method  may pass to BILLING method  the meter value provided by METER method . BILLING method  may read and update billing information maintained in a BILLING method map MDE, and may also maintain arid update audit trail in a BILLING method Audit Trail UDE. BILLING method  may return a billing amount and a completion code to control method .","Assuming BILLING method  completes successfully, control method  may pass the billing value provided by BILLING method  to BUDGET method . BUDGET method  may read arid update budget information within a BUDGET method UDE, and may also maintain audit trail information in a BUDGET method Audit Trail UDE. BUDGET method  may return a budget value to control method , and may also return a completion code indicating whether the open event exceeds the user's budget (for this type of event).","Upon completion of BUDGET method , control method  may create a channel and establish read\/use control information in preparation for subsequent calls to the READ method.",{"@attributes":{"id":"p-1021","num":"1446"},"figref":["FIGS. 49","FIG. 49","FIG. 49"],"i":["a","f ","a"],"b":["49","1500","1502","1520","1502","1522","808","1520","1524","1522","1502","1500","1526","1526"]},"Assuming the proper URT for this user and object is present such that the object is registered for this user (\u201cyes\u201d exit to decision block ), control method  may determine whether the object is already open for this user (decision block . This test may avoid creating a redundant channel for opening an object that is already open. Assuming the object is not already open (\u201cno\u201d exit to decision block , control method  creates a channel and binds appropriate open control elements to it (block ). It reads the appropriate open control elements from the secure database (or the container, such as, for example, in the case of a travelling object), and \u201cbinds\u201d or \u201clinks\u201d these particular appropriate control elements together in order to control opening of the object for this user. Thus, block  associates an event with one or more appropriate method core(s), appropriate load modules, appropriate User Data Elements, and appropriate Method Data Elements read from the secure database (or the container) (block ). At this point, control method  specifies the open event (which started the OPEN method to begin with), the object ID and user ID (determined by block ), and the channel ID of the channel created by block  to subsequent EVENT method , METER method , BILLING method  and BUDGET method  to provide a secure database \u201ctransaction\u201d (block ). Before doing so, control method  may prime an audit process (block ) and write audit information into an audit UDE (block ) so a record of the transaction exists even if the transaction fails or is interfered with.","The detail steps performed by EVENT method  are set forth on . EVENT method  may first prime an event audit trail if required) block ) which may write to an EVENT Method Audit Trail UDE (block ). EVENT method  may then perform the step of mapping the open event to an atomic element number and event count using a map MDE (block ). The EVENT method map MDE may be read from the secure database (block ). This mapping process performed by block  may, for example, determine whether or not the open event is meterable, billable, or budgetable, and may transform the open event into some discrete atomic element for metering, billing and\/or budgeting. As one example, block  might perform a one-to-one mapping between open events and \u201copen\u201d atomic elements, or it may only provide an open atomic element for every filth time that the object is opened. The map block  preferably returns the open event, the event count, the atomic element number, the object ID, and the user ID. This information may be written to the EVENT method Audit Trail UDE (block , ). In the preferred embodiment, a test (decision block ) is then performed to determine whether the EVENT method failed. Specifically, decision block  may determine whether an atomic element number was generated. If no atomic element number was generated (e.g., meaning that the open event is not significant for processing by METER method , BILLING method  and\/or BUDGET method  then EVENT method  may return a \u201cfail\u201d completion code to control method  (\u201cno\u201d exit to decision block ).","Control method  tests the completion code returned by EVENT method  to determine whether it failed or was successful (decision block ). If the EVENT method failed (\u201cno\u201d exit to decision block ), control method  may \u201croll back\u201d the secure database transaction (block ) and return itself with an indication that the OPEN method failed (block ). In this context, \u201crolling back\u201d the secure database transaction means, for example, \u201cundoing\u201d the changes made to audit trail UDE by blocks , . However, this \u201croll back\u201d performed by block  in the preferred embodiment does not \u201cundo\u2019 the changes made to the control method audit UDE by blocks , .","Assuming the EVENT method  completed successfully, control method  then calls the METER method  shown on . In the preferred embodiment, METER method  primes the meter audit trail if required (block ), which typically involves writing to a METER method audit trail UDE (block ). METER method  may then read a METER method UDE from the secure database (block ), modify the meter UDE by adding an appropriate event count to the meter value contained in the meter UDE block ), and then writing the modified meter UDE back to the secure database (block . In other words, block  may read the meter LDE, increment the meter count it contains, and write the changed meter UDE back to the secure database. In the preferred embodiment, METER method  may then write meter audit trail information to the METER method audit trail UDE if required (blocks , ). METER method  preferably next performs a test to determine whether the meter increment succeeded (decision block ). METER method  returns to control method  with a completion code (e.g., succeed or fail) and a meter value determined by block .","Control method  tests whether the METER method succeeded by examining the completion code, for example (decision block ). If the METER method failed (\u201cno\u201d exit to decision block ), then control method  \u201crolls back\u201d a secure database transaction (block ), and returns with an indication that the OPEN method failed (block ), Assuming the METER method succeeded (\u201cyes\u201d exit to decision block  control method  calls the BILLING method  and passes it the meter value provided by METER method .","An example of steps performed by BILLING method  is set forth in . BILLING method  may prime a billing audit trail if required (block  by writing to a BILLING method Audit Trail UDE within the secure database (block ). BILLING method  may then map the atomic element number, count and meter value to a billing amount using a BILLING method map MDE read from the secure database (blocks , ). Providing an independent BILLING method map MDE containing, for example, price list information, allows separately deliverable pricing for the billing process. The resulting billing amount generated by block  may be written to the BILLING method Audit Trail UDE (blocks , ), and may also be returned to control method . In addition, BILLING method  may determine whether a billing amount was properly selected by block  (decision block ). In this example, the test performed by block  generally requires more than mere examination of the returned billing amount, since the billing amount may be changed in unpredictable ways as specified by BILLING method map MDE. Control then returns to control method , which tests the completion code provided by BILLING method  to determine whether the BILLING method succeeded or failed (block ). If the BILLING method failed (\u201cno\u201d exit to decision block , control method  may \u201croll back\u201d the secure database transaction (block ), and return an indication that the OPEN method failed (block ). Assuming the test performed by decision block  indicates that the BILLING method succeeded (\u201cyes\u201d exit to decision block ), then control method  may call BUDGET method .","Other BILLING methods may use site, user and\/or usage information to establish, for example, pricing information. For example, information concerning the presence or absence of an object may be used in establishing \u201csuite\u201d purchases, competitive discounts, etc. Usage levels may be factored into a BILLING method to establish price breaks for different levels of usage. A currency translation feature of a BILLING method may allow purchases and\/or pricing in many different currencies. Many other possibilities exist for determining an amount of budget consumed by an event that may be incorporated into BILLING methods.","An example of detailed control steps performed by BUDGET method  is set forth in . BUDGET method  may prime a budget audit trail if required by writing to a budget trail UDE (blocks , . BUDGET method  may next perform a billing operation by adding a billing amount to a budget value (block ). This operation may be performed, for example, by reading a BUDGET method UDE from the secure database, modifying it, and writing it back to the secure database (block ). BUDGET method  may then write the budget audit trail information to the BUDGET method Audit Trail UDE blocks , ). BUDGET method  may finally, in this example, determine whether the user has run out of budget by determine whether the budget value calculated by block  is out of range (decision block ). If the user has run out of budget (\u201cyes\u201d exit to decision block ), the BUDGET method  may return a \u201cfail completion\u201d code to control method . BUDGET method  then returns to control method , which tests whether the BUDGET method completion code was successful (decision block ). If the BUDGET method failed (\u201cno\u201d exit to decision block ), control method  may \u201croll back\u201d the secure database transaction and itself return with an indication that the OPEN method failed (blocks , ). Assuming control method  determines that the BUDGET method was successful, the control method may perform the additional steps shown on . For example, control method  may write an open audit trail if required by writing audit information to the audit UDE that was primed at block  (blocks , ). Control method  may then establish a read event processing (block ), using the User Right Table and the PERC associated with the object and user to establish the channel block ). This channel may optionally be shared between users of the VDE node , or may be used only by a specified user.","Control method  then, in the preferred embodiment tests whether the read channel was established successfully (decision block ). If the read channel was not successfully established (\u201cno\u201d exit to decision block ), control method  \u201crolls back\u201d the secured database transaction and provides an indication that the OPEN method failed (blocks , ). Assuming the read channel was successfully established (\u201cyes\u201d exit to decision block ), control method  may \u201ccommit\u201d the secure database transaction (block ). This step of \u201ccommitting\u201d the secure database transaction in the preferred embodiment involves, for example, deleting intermediate values associated with the secure transaction that has just been performed and, in one example, writing changed UDEs and MDEs to the secure database. It is generally not possible to \u201croll back\u201d a secure transaction once it has been committed by block . Then, control method  may \u201ctear down\u201d the channel for open processing (block ) before terminating (block ). In some arrangements, such as multi-tasking VDE node environments, the open channel may be constantly maintained and available for use by any OPEN method that starts. In other implementations, the channel for open processing may be rebuilt and restarted each tome an OPEN method starts.","Read",{"@attributes":{"id":"p-1031","num":"1456"},"figref":["FIG. 50","FIG. 50","FIG. 49"],"b":["50","50","1650","1650","1500","1650","1652","1654","1656","1658","1660","1652"],"i":["a","f "]},{"@attributes":{"id":"p-1032","num":"1457"},"figref":["FIGS. 50","FIGS. 49"],"i":["a","e ","a","e"],"b":["50","49","1500","1650"]},"Referring to , the READ control method  must determine which key to use to decrypt content if it is going to release decrypted content to the user (block ). READ control method  may make this key determination based, in part, upon the PERC  for the object (block ). READ control method  may then call an ACCESS method to actually obtain the encrypted content to be decrypted (block ). The content is then decrypted using the key determined by block  (block ). READ control method  may then determine whether a \u201cfingerprint\u201d is desired (decision block ). If fingerprinting of the content is desired (\u201cyes\u201d exit of decision block ), READ control method  may call the FINGERPRINT method (block ). Otherwise, READ control method  may determine whether it is desired to obscure the decrypted content (decision block ). If so, READ control method  may call an OBSCURE method to perform this function (block ). Finally, READ control method  may commit the secure database transaction (block ), optionally tear down the read channel (not shown), and terminate (block ).","Write",{"@attributes":{"id":"p-1034","num":"1459"},"figref":["FIGS. 51","FIG. 51"],"b":["51","51","1780","1780","1782","1784","1786","1788","1790","1780"],"i":["a","f "]},{"@attributes":{"id":"p-1035","num":"1460"},"figref":["FIG. 51","FIG. 49","FIG. 50","FIG. 51","FIG. 51"],"i":["a ","a ","a ","b ","b "],"b":["1782","1820","1784","1820","1810","1678"]},"Looking at , once the EVENT, METER, BILLING and BUDGET methods have returned successfully to WRITE control method , the WRITE control method writes audit information to Audit UDE (blocks , ), and then determines (based on the PERC for the object and user and an optional algorithm) which key should be used to encrypt the content before it is written to the container (blocks , ). CONTROL method  then encrypts the content (block ) possibly by calling an ENCRYPT method, and writes the encrypted content to the object (block ). CONTROL method  may then update the table of contents (and related information) for the container to reflect the newly written information (block ), commit the secure database transaction (block ), and return (block ).","Close",{"@attributes":{"id":"p-1037","num":"1462"},"figref":"FIG. 52","b":["1920","1920","1920","1922","1924","1920","1926","1920","1926","1920","1928","1930"]},"Event",{"@attributes":{"id":"p-1038","num":"1463"},"figref":["FIG. 53","FIGS. 49","FIG. 53"],"i":["a ","b","b ","b ","a "],"b":["1940","50","51","1940","1940","1940","1942","1944","1940","1946","1948","1950","1952","1940"]},"Block  (\u201cmap event to atomic element U and event count using a Map MDE\u201d) is in some sense the \u201cheart\u201d of EVENT method . This step \u201cmaps\u201d the event into an \u201catomic element number\u201d to be responded to by subsequently called methods. An example of process control steps performed by a somewhat representative example of this \u201cmapping\u201d step  is shown in ","The example shows the process of converting a READ event that is associated with requesting byte range - from a specific piece of content into an appropriate atomic element. The example EVENT method mapping process (block  in ) can be detailed as the representative process shown in ","EVENT method mapping process  may first look up the event code (READ) in the EVENT method MDE () using the EVENT method map DTD () to determine the structure and contents of the MDE. A test might then be performed to determine if the event code was found in the MDE (), and if not (\u201cNo\u201d branch), the EVENT method mapping process may the terminate () without mapping the event to an atomic element number and count. If the event was found in the MDE (\u201cYes\u201d branch), the EVENT method mapping process may then compare the event range (e.g., bytes -) against the atomic element to event range mapping table stored in the MDE (block ). The comparison might yield one or more atomic element numbers or the event range might not be found in the mapping table. The result of the comparison might then be tested (block ) to determine if any atomic element numbers were found in the table. If not (\u201cNo\u201d branch), the EVENT method mapping process may terminate without selecting any atomic element numbers or counts (). If the atomic element numbers were found, the process might then calculate the atomic element count from the event range (). In this example, the process might calculate the number of bytes requested by subtracting the upper byte range from the lower byte range (e.g., 1500\u22121001+1=500). The example EVENT method mapping process might then terminate (block ) and return the atomic element number(s) and counts.","EVENT method  may then write an EVENT audit rail if required to an EVENT method Audit Trail UDE (block , ). EVENT method  may then prepare to pass the atomic element number and event count to the calling CONTROL method (or other control process) (at exit point ). Before that, however, EVENT method  may test whether an atomic element was selected (decision block ). If no atomic element was selected, then the EVENT method may be failed (block ). This may occur for a number of reasons. For example, the EVENT method may fail to map an event into an atomic element if the user is not authorized to access the specific areas of content that the EVENT method MDE does not describe. This mechanism could be used, for example, to distribute customized versions of a piece of content and control access to the various versions in the content object by altering the EVENT method MDE delivered to the user A specific use of this technology might be to control the distribution of different language (e.g., English, French, Spanish) versions of a piece of content.","Billing",{"@attributes":{"id":"p-1043","num":"1468"},"figref":["FIG. 53","FIGS. 49","FIG. 53"],"i":["c ","d","d","d ","c "],"b":["1980","50","51","1980","1980","1980","1982","1984","1980","1985","1986"]},"The BILLING method map MDE in this example may describe the pricing algorithm that should be used in this BILLING method (e.g., bill $0.001 per byte of content released). Block  (Map meter value to billing amount\u201d) functions in the same manner as block  of the EVENT method; it maps the meter value to a billing value. Process step  may also interrogate the secure database (as limited by the privacy filter) to determine if other objects or information (e.g., user information) are present as part of the BILLING method algorithm.","BILLING method  may then write a BILLING audit trail if required to a BILLING method Audit Trail UDE (block , ), and may prepare to return the billing amount to the calling CONTROL method (or other control process). Before that, however, BILLING method  may test whether a billing amount was determined (decision block ). If no billing amount was determined, then the BILLING method may be failed (block ). This may occur if the user is not authorized to access the specific areas of the pricing table that the BILLING method MDE describes (e.g., you may purchase not more than $100.00 of information from this content object.","Access",{"@attributes":{"id":"p-1046","num":"1471"},"figref":"FIG. 54","b":["2000","300","2000","2000"]},"ACCESS method  may first prime an ACCESS audit trail (if required) by writing to an ACCESS Audit Trail UDE (blocks , ). ACCESS method  may then read and load an ACCESS method DTD in order to determine the format of an ACCESS MDE (blocks , ). The ACCESS method MDE specifies the source and routing information for the particular object to be accessed in the preferred embodiment. Using the ACCESS method DTD, ACCESS method  may load the correction parameters (e.g., by telephone number, account ID, password and\/or a request script in the remote resource dependent language).","ACCESS method  reads the ACCESS method MDE from the secure database, reads it in accordance with the ACCESS method DTD, and loads encrypted content source and routing information based on the MDE (blocks , ). This source and routing information specifies the location of the encrypted content. ACCESS method  then determines whether a connection to the content is available (decision block ). This \u201cconnection\u201d could be, for example, an on-line connection to a remote site, a real-time information feed, or a path to a secure\/protected resource, for example. If the connection to the content is not currently available (\u201cNo\u201d exit of decision block ) then ACCESS method  takes steps to open the connection block . If the connection fails (e.g., because the user is not authorized to access a protected secure resource), then the ACCESS method  returns with a failure indication (termination point ). If the open connection succeeds, on the other hand, then ACCESS method  obtains the encrypted content (block ). ACCESS method  then writes an ACCESS audit trail if required to the secure database ACCESS method Audit Trail UDE (blocks , ), and then terminates (terminate point ).","Decrypt and Encrypt",{"@attributes":{"id":"p-1049","num":"1474"},"figref":"FIG. 55","i":"a ","b":["2030","2030","808","2030","2030","2032","808","2030","808","610","2034","2036","2030","808","2034","2038","2030","2040","2030","2042"]},{"@attributes":{"id":"p-1050","num":"1475"},"figref":["FIG. 55","FIG. 55"],"i":["b ","a "],"b":["2050","2050","2050","2052","808","608","2030","2050","2054","2056","2058","2034","2036","2038","2050","2060","2062"]},"Content",{"@attributes":{"id":"p-1051","num":"1476"},"figref":"FIG. 56","b":["2070","2070","2070"]},"CONTENT method  begins by determining whether the derived content to be provided must be derived from secure contents, or whether it is already available in the object in the form of static values (decision block ). Some objects may, for example, contain prestored abstracts, indexes, tables of contents, etc., provided expressly for the purpose of being extracted by the CONTENT method . If the object contains such static values (\u201cstatic\u201d exit to decision block ), then CONTENT method  may simply read this static value content information from the object (block ), optionally decrypt, and release this content description (block ). If, on the other hand, CONTENT method  must derive the synopsis\/content description from the secure object (\u201cderived\u201d exit to decision block ), then the CONTENT method may then securely read information from the container according to a synopsis algorithm to produce the synopsis (block ).","Extract and Embed",{"@attributes":{"id":"p-1053","num":"1478"},"figref":"FIG. 57","i":"a ","b":["2080","2080","2080"]},"EXTRACT method  begins by primary an Audit UDE (blocks , ). EXTRACT method then calls a BUDGET method to make sure that the user has enough budget for (and is authorized to) extract content from the original object (block ). If the user's budget does not permit the extraction (\u201cno\u201d exit to decision block ), then EXTRACT method  may write a failure audit record (block ), and terminate termination point ). If the user's budget permits the extraction (\u201cyes\u201d exit to decision block ), then the EXTRACT method  creates a copy of the extracted object with specified rules and control information (block ). In the preferred embodiment, this step involves calling a method that actually controls the copy. This step may or may not involve decryption and encryption, depending on the particular the PERC  associated with the original object, for example. EXTRACT method  then checks whether any control changes are permitted by the rights authorizing the extract to begin with (decision block ). In some cases, the extract rights require an exact copy of the PERC  associated with the original object (or a PERC included for this purpose) to be placed in the new (destination) container (\u201cnod exit to decision block ). If no control changes are permitted, then extract method  may simply write audit information to the Audit UDE (blocks , ) before terminating (terminate point ). If, on the other hand, the extract rights permit the user to make control changes (\u201cyes\u201d to decision block ), then EXTRACT method  may call a method or load module that solicits new or changed control information (e.g., from the user, the distributor who created, granted extract rights, or from some other source) from the user (blocks , ). EXTRACT method  may then call a method or load module to create a new PERC that reflects these user-specified control information (block ). This new PERC is then placed in the new (destination) object, the auditing steps are performed, and the process terminates.",{"@attributes":{"id":"p-1055","num":"1480"},"figref":["FIG. 57","FIG. 57","FIG. 57","FIG. 57","FIG. 57"],"i":["b ","a","b ","a","a "],"b":["2110","2110","2080","2110","2112","2122","2082","2092","2124","2110","2124","2110","2126","2130","2096","2104","2106","2110","2132","2134","2136"]},"Obscure",{"@attributes":{"id":"p-1056","num":"1481"},"figref":"FIG. 58","i":"a ","b":["2140","2140","2140","2140","2140"]},"OBSCURE method  first calls an EVENT method to determine if the content is appropriate and in the range to be obscured (block ). If the content is not appropriate for obscuring, the OBSCURE method terminates (decision block  \u201cno\u201d exit, terminate point ). Assuming that the content is to be obscured (\u201cyes\u201d exit to decision block ), then OBSCURE method  determines whether it has previously been called to obscure this content (decision block ). Assuming the OBSCURE  has not previously called for this object\/content (\u201cyes\u201d exit to decision block ), the OBSCURE method  reads an appropriate OBSCURE method MDE from the secure database and loads an obscure formula and\/or pattern from the MDE (blocks , ). The OBSCURE method  may then apply the appropriate obscure transform based on the patters and\/or formulas loaded by block  (block ). The OBSCURE method then may terminate (terminate block ).","Fingerprint",{"@attributes":{"id":"p-1058","num":"1483"},"figref":["FIG. 58","FIG. 58"],"i":["b ","a "],"b":["2160","2160","2160","2160","2140","2174"]},{"@attributes":{"id":"p-1059","num":"1484"},"figref":"FIG. 58","i":"c ","b":["2160","2161"]},"Such fingerprints  can be \u201cburied\u201d\u2014that is inserted in a manner that hides the fingerprints from typical users, sophisticated \u201chackers,\u201d and\/or from all users, depending on the file format, the sophistication and\/or variety of the insertion algorithms, and on the availability of original, non-fingerprinted content (for comparison for reverse engineering of algorithm(s). Inserted or embedded fingerprints , in a preferred embodiment, may be at least in part encrypted to make them more secure. Such encrypted fingerprints  may be embedded within released content provided in \u201cclear\u201d (plaintext) form.","Fingerprints  can be used for a variety of purposes including, for example, the often related purposes of proving misuse of released materials and proving the source of released content. Software piracy is a particularly good example where fingerprinting can be very useful. Fingerprinting can also help to enforce content providers' rights for most types of electronically delivered information including movies, audio recordings, multimedia, information databases, and traditional \u201cliterary\u201d materials. Fingerprinting is a desirable alternative or addition to copy protection.","Most piracy of software applications, for example, occurs not with the making of an illicit copy by an individual for use on another of the individual's own computers, but rather in giving a copy to another party. This often starts a chain (or more accurately a pyramid) of illegal copies, as copies are handed from individual to individual. The fear of identification resulting from the embedding of a fingerprint  will likely dissuade most individuals from participating, as many currently do, in widespread, \u201ccasual\u201d piracy. In some cases, content may be checked for the presence of a fingerprint by a fingerprint method to help enforce content providers' rights.","Different fingerprints  can have different levels of security (e.g., one fingerprint () could be readable\/identifiable by commercial concerns, while another fingerprint () could be readable only by a more trusted agency. The methods for generating the more secure fingerprint  might employ more complex encryption techniques (e.g., digital signatures) and\/or obscuring of location methodologies. Two or more fingerprints  can be embedded in different locations and\/or using different techniques to help protect fingerprinted information against hackers. The more secure fingerprints might only be employed periodically rather than each time content release occurs, if the technique used to provide a more secure fingerprint involves an undesired amount of additional overhead. This may nevertheless be effective since a principal objective of fingerprinting is deterrence\u2014that is the fear on the part of the creator of an illicit copy that the copying will be found out.","For example, one might embed a copy of a fingerprint , which might be readily identified by an authorized party\u2014for example a distributor, service personal, client administrator, or clearinghouse using a VDE electronic appliance . One might embed one or more additional copies or variants of a fingerprint  (e.g., fingerprints carrying information describing some or all relevant identifying information) and this additional one or more fingerprints  might be maintained in a more secure manner.","Fingerprinting can also protect privacy concerns. For example, the algorithm and\/or mechanisms needed to identify the fingerprint  might be available only through a particularly trusted agent.","Fingerprinting  can take many forms. For example, in an image, the color of every N pixels (spread across an image, or spread across a subset of the image) might be subtly shifted in a visually unnoticeable manner (at least according to the normal, unaided observer). These shifts could be interpreted by analysis of the image (with or without access to the original image), with each occurrence or lack of occurrence of a shift in color (or greyscale) being one or more binary \u201con or off\u201d bits for digital information storage. The N pixels might be either consistent, or alternatively, pseudo-random in order (but interpretable, at least in part, by a object creator, object provider, client administrator. and\/or VDE administrator).","Other modifications of an image (or moving image, audio, etc.) which provide a similar benefit (that is, storing information in a form that is not normally noticeable as a result of a certain modification of the source information) may be appropriate, depending on the application. For example, certain subtle modifications in the frequency of stored audio information can be modified so as to be normally unnoticeable to the listener while still being readable with the proper tools. Certain properties of the storage of information might be modified to provide such slight but interpretable variations in polarity of certain information which is optically stored to achieve similar results. Other variations employing other electronic, magnetic, and\/or optical characteristic may be employed.","Content stored in files that employ graphical formats, such as Microsoft Windows word processing files, provide significant opportunities for \u201cburying\u201d a fingerprint . Content that includes images and\/or audio provides the opportunity to embed fingerprints  that may be difficult for unauthorized individuals to identify since, in the absence of an \u201cunfingerprinted\u201d original for purposes of comparison, minor subtle variations at one or more time instances in audio frequencies, or in one or more video images, or the like, will be in themselves undiscernible given the normally unknown nature of the original and the large amounts of data employed in both image and sound data (and which is not particularly sensitive to minor variations). With formatted text documents, particularly those created with graphical word processors (such as Microsoft Windows or Apple MacIntosh word processors and their DOS and Unix equivalents), fingerprints  can normally be inserted unobtrusively into portions of the document data representation that are not normally visible to the end user (such as in a header or other non-displayed data field).","Yet another form of fingerprinting, which may be particularly suitable for certain textual documents, would employ and control the formation of characters for a given font. Individual characters may have a slightly different visual formation which connotes certain \u201cfingerprint\u201d information. This alteration of a given character's form would be generally undiscernible, in part because so many slight variations exist in versions of the same font available from different suppliers, and in part because of the smallness of the variation. For example, in a preferred embodiment, a program such as Adobe Type Align could be used which, in its off-the-shelf versions, supports the ability of a user to modify font characters in a variety of ways. The mathematical definition of the font character is modified according to the user's instructions to produce a specific set of modifications to be applied to a character or font. Information content could be used in an analogous manner as an alternative to user selections) to modify certain or all characters too subtly for user recognition under normal circumstances but which nevertheless provide appropriate encoding for the fingerprint . Various subtly different versions of a given character might be used within a single document so as to increase the ability to carry transaction related font fingerprinted information.","Some other examples of applications for fingerprinting might include:\n\n","Fingerprinting method  is typically performed if at all at the point at which content is released from a content object . However, it could also be performed upon distribution of an object to \u201cmark\u201d the content while still in encrypted form. For example, a network-based object repository could embed fingerprints  into the content of an object before transmitting the object to the requester, the fingerprint information could identify a content requester\/end user. This could help detect \u201cspoof\u201d electronic appliances  used to release content without authorization.","Destroy",{"@attributes":{"id":"p-1072","num":"1500"},"figref":"FIG. 59","b":["2180","2180","2180","2182","2184","2180","2186","2180","2188","2190","2180","2192","2194","2196"]},"Panic",{"@attributes":{"id":"p-1073","num":"1501"},"figref":"FIG. 60","b":["2200","2200","2200","2206","2208","2210"]},"Meter",{"@attributes":{"id":"p-1074","num":"1502"},"figref":["FIG. 61","FIGS. 49","FIG. 61"],"b":["50","51","2220","2220","2222","2224","2220","2226","2228","2220","2230","2232","2220","2234","2234","2220","2236","2238"]},"Assuming the Meter UDE is not yet expired, the meter method  may update it using the atomic element and event count passed to the METER method from, for example, an EVENT method (blocks , ). The METER method  may then save the Meter Use Audit Record in the Meter Audit Trail UDE (blocks , ), before terminating \u02dcat terminate point ).","Additional Security Features Provided by the Preferred Embodiment","VDE  provided by the preferred embodiment has sufficient security to help ensure that it cannot be compromised short of a successful \u201cbrute force attack,\u201d and so that the time and cost to succeed in such a \u201cbrute force attack\u201d substantially exceeds any value to be derived. In addition, the security provided by VDE  compartmentalizes the internal workings of VDE so that a successful \u201cbrute force attack\u201d would compromise only a strictly bounded subset of protected information, not the entire system.","The following are among security aspects and features  provided by the preferred embodiment:\n\n","VDE  uses keys and shared secrets to provide security. The following key usage features are provided by the preferred embodiment:\n\n","Each of these types are discussed below.","A. Public-Key and Symmetric Key Cryptosystems","The process of disguising or transforming information to hide its substance is called encryption. Encryption produces \u201cciphertext.\u201d Reversing the encryption process to recover the substance from the ciphertext is called \u201cdecryption.\u201d A cryptographic algorithm is the mathematical function used for encryption and decryption.","Most modern cryptographic algorithms use a \u201ckey.\u201d The \u201ckey\u201d specifies one of a family of transformations to be provided. Keys allow a standard, published and tested cryptographic algorithm to be used while ensuring that specific transformations performed using the algorithm are kept secret. The secrecy of the particular transformations thus depends on the secrecy of the key, not on the secrecy of the algorithm.","There are two general forms of key-based algorithms either or both of which may be used by the preferred embodiment PPE :","symmetric; and","public-key (\u201cPK\u201d)","Symmetric algorithms are algorithms where the encryption key can be calculated from the decryption key and vice versa. In many such systems, the encryption and decryption keys are the same. The algorithms, also called \u201csecret-key\u201d, \u201csingle key\u201d or \u201cshared secret\u201d algorithms, require a sender and receiver to agree on a key before ciphertext produced by a sender can be decrypted by a receiver. This key must be kept secret. The security of a symmetric algorithm rests in the key: divulging the key means that anybody could encrypt and decrypt information in such a cryptosystem. See Schneier, at Page 3. Some examples of symmetric key algorithms that the preferred embodiment may use include DES, Skipjack\/Clipper, IDEA, RC2, and RC4.","In public-key cryptosystems, the key used for encryption is different from the key used for decryption. Furthermore, it is computationally infeasible to derive one key from the other. The algorithms used in these cryptosystems are called \u201cpublic key\u201d because one of the two keys can be made public without endangering the security of the other key. They are also sometimes called \u201casymmetric\u201d cryptosystems because they use different keys for encryption and decryption. Examples of public-key algorithms include RSA, El Gamal and LUC.","The preferred embodiment PPE  may operate based on only symmetric key cryptosystems. based on public-key cryptosystems. or based on both symmetric key cryptosystems and public-key cryptosystems. VDE  does not require any specific encryption algorithms; the architecture provided by the preferred embodiment may support numerous algorithms including PK and\/or secret key (non PK) algorithms. In some cases, the choice of encryption\/decryption algorithm will be dependent on a number of business decisions such as cost, market demands, compatibility with other commercially available systems, export laws, etc.","Although the preferred embodiment is not dependent on any particular type of cryptosystem or encryption\/decryption algorithm(s), the preferred example uses PK cryptosystems for secure communications between PPEs , and uses secret key cryptosystems for \u201cbulk\u201d encryption\/decryption of VDE objects . Using secret key cryptosystems (e.g., DES implementations using multiple keys and multiple passes, Skipjack, RC2, or RC4 for \u201cbulk\u201d encryption\/decryption provides efficiencies in encrypting and decrypting large quantities of information, and also permits PPEs  without PK-capability to deal with VDE objects  in a variety of applications. Using PK cryptosystems for communications may provide advantages such as eliminating reliance on secret shared external communication keys to establish communications, allowing for a challenge\/response that doesn't rely on shared internal secrets to authenticate PPEs , and allowing for a publicly available \u201ccertification\u201d process without reliance on shared secret keys.","Some content providers may wish to restrict use of their content to PK implementations. This desire can be supported by malting the availability of PK capabilities, and the specific nature or type of PK capabilities, in PPEs  a factor in the registration of VDE objects , for example, by including a requirement in a REGISTER method for such objects in the form of a load module that examines a PPE  for specific or general PK capabilities before allowing registration to continue.","Although VDE  does not require any specific algorithm, it is highly desirable that all PPEs  are capable of using the same algorithm for bulk encryption\/decryption. If the bulk encryption\/decryption algorithm used for encrypting VDE objects  is not standardized, then it is possible that not all VDE electronic appliances  will be capable of handling all VDE objects . Performance differences will east between different PPEs  and associated electronic appliances  if standardized bulk encryption\/decryption algorithms are not implemented in whole or in part by hardware-based encrypt\/decrypt engine , and instead are implemented in software. In order to support algorithms that are not implemented in whole or in part by encrypt\/decrypt engine , a component assembly that implements such an algorithm must be available to a PPE .","B. Key Length","Increased key length may increase security. A \u201cbrute-force\u201d attack of a cryptosystem involves trying every possible key. The longer the key, the more possible keys there are to try. At some key length, available computation resources will require an impractically large amount of time for a \u201cbrute force\u201d attacker to try every possible key.","VDE  provided by the preferred embodiment accommodates and can use many different key lengths. The length of keys used by VDE  in the preferred embodiment is determined by the algorithm(s) used for encryption\/decryption, the level of security desired, and throughput requirements. Longer keys generally require additional processing power to ensure fast encryption\/decryption response times. Therefore, there is a tradeoff between (a) security, and (b) processing time and\/or resources. Since a hardware-based PPE encrypt\/decrypt engine  may provide faster processing than software-based encryption\/decryption, the hardware-based approach may, in general, allow use of longer keys.","The preferred embodiment may use a 1024 bit modulus (key) RSA cryptosystem implementation for PK encryption\/decryption, and may use 56-bit DES for \u201cbulk\u201d encryption\/decryption. Since the 56-bit key provided by standard DES may not be long enough to provide sufficient security for at least the most sensitive VDE information, multiple DES encryptions using multiple passes and multiple DES keys may be used to provide additional security. DES can be made significantly more secure if operated in a manner that uses multiple passes with different keys. For example, three passes with 2 or 3 separate keys is much more secure because it effectively increases the length of the key. RC2 and RC4 (alternatives to DES) can be exported for up to 40-bit key sizes, but the key size probably needs to be much greater to provide even DES level security. The 80-bit key length provided by NSA's Skipjack may be adequate for most VDE security needs.","The capability of downloading code and other information dynamically into PPE  allows key length to be adjusted and changed dynamically even after a significant number of VDE electronic appliances  are in use. The ability of a VDE administrator to communicate with each PPE  efficiently makes such after-the-fact dynamic changes both possible and cost-effective. New or modified cryptosystems can be downloaded into existing PPEs  to replace or add to the cryptosystem repertoire available within the PPE, allowing older PPEs to maintain compatibility with newer PPEs and\/or newly released VDE objects  and other VDE-protected information. For example, software encryption\/decryption algorithms may be downloaded into PPE  at any time to supplement the hardware-based functionality of encrypt\/decrypt engine  by providing different key length capabilities. To provide increased flexibility, PPE encrypt\/decrypt engine  may be configured to anticipate multiple passes and\/or variable and\/or longer key lengths. In addition, it may be desirable to provide PPEs  with the capability to internally generate longer PK keys.","C. Key Generation","Key generation techniques provided by the preferred embodiment permit PPE  to generate keys and other information that are \u201cknown\u201d only to it.","The security of encrypted information rests in the security of the key used to encrypt it. If a cryptographically weak process is used to generate keys, the entire security is weak. Good keys are random bit strings so that every possible key in the key space is equally likely. Therefore, keys should in general be derived from a reliably random source, for example, by a cryptographically secure pseudo-random number generator seeded from such a source. Examples of such key generators are described in Schneier, (John Wiley and Sons, 1994), chapter 15. If keys are generated outside a given PPE  (e.g., by another PPE ), they must be verified to ensure they come from a trusted source before they can be used. \u201cCertification\u201d may be used to verify keys.","The preferred embodiment PPE  provides for the automatic generation of keys. For example, the preferred embodiment PPE  may generate its own public\/private key pair for use in protecting PK-based external communications and for other reasons. A PPE  may also generate its own symmetric keys for various purposes during and after initialization. Because a PPE  provides a secure environment, most key generation in the preferred embodiment may occur within the PPE (with the possible exception of initial PPE keys used at manufacturing or installation time to allow a PPE to authenticate initial download messages to it).","Good key generation relies on randomness. The preferred embodiment PPE  may, as mentioned above in connection with , includes a hardware-based random number generator  with the characteristics required to generate reliable random numbers. These random numbers may be used to \u201cseed\u201d a cryptographically strong pseudo-random number generator (e.g., DES operated in Output Feedback Mode) for generation of additional key values derived from the random seed. In the preferred embodiment, random number generator  may consist of a \u201cnoise diode\u201d or other physically-based source of random values (e.g., radioactive decay).","If no random number generator  is available in the PPE , the SPE  may employ a cryptographic algorithm (e.g., DES in Output Feedback Mode) to generate a sequence of pseudo-random values derived from a secret value protected within the SPE. Although these numbers are pseudo-random rather than truly random, they are cryptographically derived from a value unknown outside the SPE  and therefore may be satisfactory in some applications.","In an embodiment incorporating an HPE  without an SPE , the random value generator  software may derive reliably random numbers from unpredictable external physical events e.g., high-resolution timing of disk I\/O completions or of user keystrokes at an attached keyboard ).","Conventional techniques for generating PK and non-PK keys based upon such \u201cseeds\u201d may be used. Thus, if performance and manufacturing costs permit, PPE  in the preferred embodiment will generate its own public\/private key pair based on such random or pseudo-random \u201cseed\u201d values. This key pair may then be used for external communications between the PPE  that generated the key pair and other PPEs that wish to communicate with it. For example, the generating PPE  may reveal the public key of the key pair to other PPEs. This allows other PPEs  using the public key to encrypt messages that may be decrypted only by the generating PPE (the generating PPE is the only PPE that \u201cknows\u201d the corresponding \u201cprivate key\u201d). Similarly, the generating PPE  may encrypt messages using its private key that, when decrypted successfully by other PPEs with the generating PPE's public key, permit the other PPEs to authenticate that the generating PPE sent the message.","Before one PPE  uses a public key generated by another PPE, a public key certification process should be used to provide authenticity certificates for the public key. A public-key certificate is someone's public key \u201csigned\u201d by a trustworthy entity such as an authentic PPE  or a VDE administrator. Certificates are used to thwart attempts to convince a PPE  that it is communicating with an authentic PPE when it is not (e.g., it is actually communicating with a person attempting to break the security of PPE ). One or more VDE administrators in the preferred embodiment may constitute a certifying authority. By \u201csigning\u201d both the public key generated by a PPE  and information about the PPE and\/or the corresponding VDE electronic appliance  (e.g., site ID, user ID, expiration date, name, address, etc.), the VDE administrator certifying authority can certify that information about the PPE and\/or the VDE electronic appliance is correct and that the public key belongs to that particular VDE mode.","Certificates play an important role in the trustedness of digital signatures, and also are important in the public-key authentication communications protocol (to be discussed below). In the preferred embodiment, these certificates may include information about the trustedness\/level of security of a particular VDE electronic appliance  (e.g., whether or not it has a hardware-based SPE  or is instead a less trusted software emulation type HPE , that can be used to avoid transmitting certain highly secure information to less trusted\/secure VDE installations.","Certificates can also play an important role in decommissioning rogue users and\/or sites. By including a site and\/or user ID in a certificate, a PPE can evaluate this information as an aspect of authentication. For example, if a VDE administrator or clearinghouse encounters a certificate bearing an ID (or other information that meets certain criteria (e.g., is present on a list of decommissioned and\/or otherwise suspicious users and\/or sites), they may choose to take actions based on those criteria such as refusing to communicate, communicating disabling information, notifying the user of the condition, etc. Certificates also typically include an expiration date to ensure that certificates must be replaced periodically, for example, to ensure that sites and\/or users must stay in contact with a VDE administrator and\/or to allow certification keys to be changed periodically. More than one certificate based on different keys may be issued for sites and\/or users so that if a given certification key is compromised, one or more \u201cbackup\u201d certificates may be used. If a certification key is compromised, A VDE administrator may refuse to authenticate based on certificates generated with such a key, and send a signal after authenticating with a \u201cbackup\u201d certificate that invalidates all use of the compromised key and all certificates associated with it in further interactions with VDE participants. A new one or more \u201cbackup\u201d certificates and keys may be created and sent to the authenticated site\/user after such a compromise.","If multiple certificates are available, some of the certificates may be reserved as backups. Alternatively or in addition, one certificate from a group of certificates may be selected (e.g., by using RNG ) in a given authentication, thereby reducing the likelihood that a certificate associated with a compromised certification key will be used. Still alternatively, more than one certificate may be used in a given authentication.","To guard against the possibility of compromise of the certification algorithm (e.g., by an unpredictable advance in the mathematical foundations on which the algorithm is based), distinct algorithms may used for different certificates that are based on different mathematical foundations.","Another technique that may be employed to decrease the probability of compromise is to keep secret (in protected storage in the PPE ) the \u201cpublic\u201d values on which the certificates are based, thereby denying an attacker access to values that may aid in the attack. Although these values are nominally \u201cpublic,\u201d they need be known only to those components which actually validate certificates (i.e., the PPE ).","In the preferred embodiment, PPE  may generate its own certificate, or the certificate may be obtained externally, such as from a certifying authority VDE administrator. Irrespective of where the digital certificate is generated, the certificate is eventually registered by the VDE administrator certifying authority so that other VDE electronic appliances  may have access to (and trust) the public key. For example, PPE  may communicate its public key and other information to a certifying authority which may then encrypt the public key and other information using the certifying authority's private key. Other installations  may trust the \u201ccertificate\u201d because it can be authenticated by using the certifying authority's public key to decrypt it. As another example, the certifying authority may encrypt the public key it receives from the generating PPE  and use it to encrypt the certifying authority's private key. The certifying authority may then send this encrypted information back to the generating PPE . The generating PPE  may then use the certifying authority's private key to internally create a digital certificate, after which it may destroy its copy of the certifying authority's private key. The generating PPE  may then send out its digital certificate to be stored in a certification repository at the VDE administrator (or elsewhere) if desired. The certificate process can also be implemented with an external key pair generator and certificate generator, but might be somewhat less secure depending on the nature of the secure facility. In such a case, a manufacturing key should be used in PPE  to limit exposure to the other keys involved.","A PPE  may need more than one certificate. For example, a certificate may be needed to assure other users that a PPE is authentic, and to identify the PPE. Further certificates may be needed for individual users of a PPE . These certificates may incorporate both user and site information or may only include user information. Generally, a certifying authority will require a valid site certificate to be presented prior to creating a certificate for a given user. Users may each require their own public key\/private key pair in order to obtain certificates. VDE administrators, clearinghouses, and other participants may normally require authentication of both the site (PPE ) and of the user in a communication or other interaction. The processes described above for key generation and certification for PPEs  may also be used to form site\/user certificates or user certificates.","Certificates as described above may also be used to certify the origin of load modules  and\/or the authenticity of administrative operations. The security and assurance techniques described above may be employed to decrease the probability of compromise for any such certificate (including certificates other than the certificate for a VDE electronic appliance 's identity).","D. Key Aging and Convolution","PPE  also has the ability in the preferred embodiment to generate secret keys and other information that is shared between multiple PPEs . In the preferred embodiment, such secret keys and other information may be shared between multiple VDE electronic appliances  without requiring the shared secret information to ever be communicated explicitly between the electronic appliances. More specifically, PPE  uses a technique called \u201ckey convolution\u201d to derive keys based on a deterministic process in response to seed information shared between multiple VDE electronic appliances . Since the multiple electronic appliances  \u201cknow\u201d what the \u201cseed\u201d information is and also \u201cknow\u201d the deterministic process used to generate keys based on this information, each of the electronic appliances may independently generate the \u201ctrue key.\u201d This permits multiple VDE electronic appliances  to share a common secret key without potentially compromising its security by communicating it over an insecure channel.","No encryption key should be used for an indefinite period. The longer a key is used, the greater the chance that it may be compromised and the greater the potential loss if the key is compromised but still in use to protect new information. The longer a key is used, the more information it may protect and therefore the greater the potential rewards for someone to spend the effort necessary to break it. Further, if a key is used for a long time, there may be more ciphertext available to an attacker attempting to break the key using a ciphertext-based attack. See Schneier at 150-151. Key convolution in the preferred embodiment provides a way to efficiently change keys stored in secure database  on a routine periodic or other basis while simplifying key management issues surrounding the change of keys. In addition, key convolution may be used to provide \u201ctime aged keys\u201d (discussed below) to provide \u201cexpiration dates\u201d for key usage and\/or validity.",{"@attributes":{"id":"p-1113","num":"1558"},"figref":"FIG. 62","b":["2821","528","2871","2861","2862","2861","650","2861","2861","300"]},"The current convolution key  represents an encoding of the site ID  and current time. This transformed value  may be used as a key for another encryption process  to transform the stored key  in the object's PERC  into the true private body key  for the object's contents.","The \u201cconvolution function\u201d performed by blocks ,  may, for example, be a one-way function that can be performed independently at both the content creator's site and at the content user's site. If the content user does not use precisely the same convolution function and precisely the same input values (e.g., time and\/or site and\/or other information) as used by the content creator, then the result of the convolution function performed by the content user will be different from the content creator's result. If the result is used as a symmetrical key for encryption by the content creator, the content user will not be able to decrypt unless the content user's result is the same as the result of the content creator.","The time component for input to the key convolution function may be derived from ETC  (care being taken to ensure that slight differences in RTC synchronization between VDE electronic appliances will not cause different electronic appliances to use different time components). Different portions of the ETC  output may be used to provide keys with different valid durations, or some tolerance can be built into the process to try several different key values. For example, a \u201ctime granularity\u201d parameter can be adjusted to provide time tolerance in terms of days, weeks, or any other tune period. As one example, if the \u201ctime granularity\u201d is set to 2 days, and the tolerance is \u00b12 days, then three real-time input values can be tried as input to the convolution algorithm. Each of the resulting key values may be tried to determine which of the possible keys is actually used. In this example, the keys will have only a 4 day life span.",{"@attributes":{"id":"p-1117","num":"1562"},"figref":"FIG. 63","b":["528","528","2862","2881","2821","528","2871","2862"],"i":["a","e","a","e","a","e","a","e"]},"Meanwhile, the creator site may use the convolution step () based on his RTC  value (adjusted to correspond to the intended validity time for the key to generate a convoluted key (), which may then be used to generate the content key  in the object's PERC . To decrypt the object's content, the user site may use each of its sequence of convolution keys  (-) to attempt to generate the master content key . When this is attempted, as long as the ETC  of the creator site is within acceptable tolerance of the ETC  at the user site, one of keys (-) will match key () and the decryption will be successful. In this example, matching is determined by validity of decrypted output, not by direct comparison of keys.","Key convolution as described above need not use both site ID and time as a value. Some keys may be generated based on current real time, other keys might be generated on site ID, and still other keys might be generated based on both current real-time and site ID.","Key convolution can be used to provide \u201ctime-aged\u201d keys. Such \u201ctime-aged\u201d keys provide an automatic mechanism for allowing keys to expire and be replaced by \u201cnew\u201d keys. They provide a way to give a user time-limited rights to make time-limited use of an object, or portions of an object, without requiring user re-registration but retaining significant control in the hands of the content provider or administrator. If secure database  is sufficiently secure, similar capabilities can be accomplished by checking an expiration date\/time associated with a key, but this requires using more storage space for each key or group of keys.","In the preferred embodiment, PERCs  can include an expiration date and\/or time after which access to the VDE-protected information they correspond to is no longer authorized. Alternatively or in addition, after a duration of time related to some aspect of the use of the electronic appliance  or one or more VDE objects , a PERC  can force a user to send audit history information to a clearinghouse, distributor, client administrator, or object creator in order to regain or retain the right to use the object(s). The PERC  can enforce such time-based restrictions by checking\/enforcing parameters that limit key usage and\/or availability past time of authorized use. \u201cTime aged\u201d keys may be used to enforce or enhance this type of time-related control of access to VDE protected information.","\u201cTime aged\u201d keys can be used to encrypt and decrypt a set of information for a limited period of time, thus requiring re-registration or the receipt of new permissions or the passing of audit information, without which new keys are not provided for user use. Time aged keys can also be used to improve system security since one or more keys would be automatically replaced based on the time ageing criteria\u2014and thus, cracking secure database  and locating one or more keys may have no real value. Still another advantage of using time aged keys is that they can be generated dynamically\u2014thereby obviating the need to store decryption keys in secondary and\/or secure memory.","A \u201ctime aged key\u201d in the preferred embodiment is not a \u201ctrue key\u201d that can be used for encryption\/decryption, but rather is a piece of information that a PPE , in conjunction with other information, can use to generate a \u201ctrue key.\u201d This other information can be time-based, based on the particular \u201cID\u201d of the PPE , or both. Because the \u201ctrue key\u201d is never exposed but is always generated within a secure PPE  environment, and because secure PPEs are required to generate the \u201ctrue key,\u201d VDE  can use \u201ctime aged\u201d keys to significantly enhance security and flexibility of the system.","The process of \u201caging\u201d a key in the preferred embodiment involves generating a time-aged \u201ctrue key\u201d that is a function of: (a) a \u201ctrue key,\u201d and (b) some other information (e.g., real time parameters, site ID parameters, etc.) This information is combined\/transformed (e.g., using the \u201ckey convolution\u201d techniques discussed above) to recover or provide a \u201ctrue key.\u201d Since the \u201ctrue key\u201d can be recovered, this avoids having to store the \u201ctrue key\u201d within PERC , and allow different \u201ctrue keys\u201d to correspond to the same information within PERC . Because the \u201ctrue key\u201d is not stored in the PERC , access to the PERC does not provide access to the information protected by the \u201ctrue key.\u201d Thus, \u201ctime aged\u201d keys allows content creators\/providers to impose a limitation (e.g., site based and\/or time based) on information access that is, in a sense, \u201cexternal of\u201d or auxiliary to the permissioning provided by one or more PERCS . For example, a \u201ctime aged\u201d key may enforce an additional lame limitation on access to certain protected information, this additional time limitation being independent of any information or permissioning contained within the PERC  and being instead based on one or more time and\/or site ID values.","As one example, time-aged decryption keys may be used to allow the purchaser of a \u201ctrial subscription\u201d of an electronically published newspaper to access each edition of the paper for a period of one week, after which the decryption keys will no longer work. In this example. the user would need to purchase one or more new PERCs , or receive an update to an existing one or more permissions records, to access editions other than the ones from that week. Access to those other editions which might be handled with a totally different pricing structure (e.g., a \u201cregular\u201d subscription rate as opposed to a free or minimal \u201ctrial\u201d subscription rate).","In the preferred embodiment, time-aged-based \u201ctrue keys\u201d can be generated using a one-way or invertible \u201ckey convolution\u201d function. Input parameters to the convolution function may include the supplied time-aged keys; user and\/or site specific values; a specified portion (e.g., a certain number of high order bits) of the time value from an RTC  (if present) or a value derived from such time value in a predefined manner; and a block or record identifier that may be used to ensure that each time aged key is unique. The output of the \u201ckey convolution\u201d function may be a \u201ctrue key\u201d that is used for decryption purposes until discarded. Running the function with a time-aged key and inappropriate time values typically yields a useless key that will not decrypt.","Generation of a new rime aged key can be triggered based on some value of elapsed. absolute or relative time (e.g., based on a real time value from a clock such as RTC ). At that time, the convolution would produce the wrong key and decryption could not occur until the time-aged key is updated. The criteria used to determine when a new \u201ctime aged key\u201d is to be created may itself be changed based on time or some other input variable to provide yet another level of security. Thus, the convolution function and\/or the event invoking it may change, shift or employ a varying quantity as a parameter.","One example of the use of time-aged keys is as follows:\n\n","It performs a convolution function (i.e., the inverse of \u201creverse convolution\u201d algorithm in step (2) above) to obtain the \u201ctrue\u201d key. If the supplied time and\/or other information is \u201cwrong,\u201d the convolution function will not yield the \u201ctrue\u201d key, and therefore content cannot be decrypted.","Any of the key blocks associated with VDE objects  or other items can be either a regular key block or a time-aged key block, as specified by the object creator during the object configuration process, or where appropriate, a distributor or client administrator.","\u201cTime aged\u201d keys can also be used as part of protocols to provide secure communications between PPEs . For example. instead of providing \u2018true\u2019 keys to PPE  for communications. VDE  may provide only \u201cpartial\u201d communication keys to the PPE. These \u201cpartial\u201d keys may be provided to PPE  during initialization, for example. A predetermined algorithm may produce \u201ctrue keys\u201d for use to encrypt\/decrypt information for secure communications. The predetermined algorithm can \u201cage\u201d these keys the same way in all PPEs , or PPEs  can be required to contact a VDE administrator at some predetermined time so a new set of partial communications keys can be downloaded to the PPEs. If the PPE  does not generate or otherwise obtain \u201cnew\u201d partial keys, then it will be disabled from communicating with other PPEs (a further, \u201cfail safe\u201d key may be provided to ensure that the PPE can communicate with a VDE administrator for reinitialization purposes). Two sets of partial keys can be maintained within a PPE  to allow a fixed amount of overlap time across all VDE appliances . The older of the two sets of partial keys can be updated periodically.","The following additional types of keys (to be discussed below) can also be \u201caged\u201d in the preferred embodiment:\n\n",{"@attributes":{"id":"p-1133","num":"1591"},"figref":"FIG. 64","b":["650","650","2802","500","534","655"]},"The manufacturer possesses (i.e., knows, and protects from disclosure or modification) one or more public key \/private key  key pairs used for signing and validating site identification certificates . For each site, the manufacturer generates a site ID  and list of site characteristics . In addition, the manufacturer possesses the public keys ,  for validating load modules and initialization code downloads. To enhance security, there may be a plurality of such certification keys, and each PPE  may be initialized using only a subset of such keys of each type.","As part of the initialization process the PPE  may generate internally or the manufacturer may generate and supply, one or more pairs of site-specific public keys  and private keys . These are used by the PPE  to prove its identity. Similarly, site-specific database key(s)  for the site are generated, and if needed (i.e., if a Random Number Generator  is not available), a random initialization seed  is generated.","The initialization may begin by generating site ID  and characteristics  and the site public key \/private key  pair(s). These values are combined and may be used to generate one or more site identity certificates . The site identity certificates  may be generated by the public key generation process , and may be stored both in the PFE's protected key storage  and in the manufacturer's VDE site certificate database .","The certification process  may be performed either by the manufacturer or internally to the PPE . If performed by the PPE , the PPE will temporarily receive the identity certification private key(s) , generate the certificate , store the certificate in local key storage  and transmit it to the manufacturer, after which the PPE  must erase its copy of the identity certification private key(s) .","Subsequently, initialization may require generation, by the PPE  or by the manufacturer, of site-specific database key(s)  and of site-specific seed value(s) , which are stored in the key storage . In addition, the download certification key(s)  and the load module certification key(s)  may be supplied by the manufacturer and stored in the key storage . These may be used by the PPE  to validate all further communications with external entities.","At this point, the PPE  may be further initialized with executable code and data by downloading information certified by the load module key(s)  and download key(s) . In the preferred embodiment, these keys may be used to digitally sign data to be loaded into the PPE , guaranteeing its validity, and additional key(s) encrypted using the site-specific public key(s)  may be used to encrypt such data and protect it from disclosure.","Installation and Update Key Management",{"@attributes":{"id":"p-1140","num":"1598"},"figref":"FIG. 65","b":["2831","2832","2833","2834","2811","2813","2814"]},"To perform this installation, the installer retrieves the destination site's identity certificate(s) , and from that extracts the site public key(s) . These key(s) may be used in an encryption process  to protect the keys being installed. The key(s) being installed are then transmitted inside the destination site's PPE . Inside the PPE , the decryption process  may use the site private key(s)  to decrypt the transmission. The PPE  then stores the installed or updated keys in its key storage .","Object-Specific Key Use",{"@attributes":{"id":"p-1142","num":"1600"},"figref":"FIGS. 66 and 67","b":"300"},{"@attributes":{"id":"p-1143","num":"1601"},"figref":"FIG. 66","b":["850","870","650","728","2843","2815","870","808","850","810","808","2845","650","2817","2844","650","610","850","808","610","2817","870"]},{"@attributes":{"id":"p-1144","num":"1602"},"figref":["FIG. 67","FIGS. 66 and 67"],"b":["860","808","860","2843","2831","283","860"]},"Secret Key Variations",{"@attributes":{"id":"p-1145","num":"1603"},"figref":"FIGS. 64 through 67","b":["650","2804","2823","2803"]},"Key Types","The detailed descriptions of key types below further explain secret-key embodiments; this summary is not intended as a complete description. The preferred embodiment PPE  can use different types of keys and\/or different \u201cshared secrets\u201d for different purposes. Same key types apply to a Public-Key\/Secret Key implementation, other keys apply to a Secret Key only implementation, and still other key types apply to both. The following table lists examples of various key and \u201cshared secret\u201d information used in the preferred embodiment, and where this information is used and stored:",{"@attributes":{"id":"p-1147","num":"1605"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Key\/Secret Information","used in PK or","Example Storage"]},{"entry":["Type","Non-PK","Locations"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Master Keys\/may include","Both","PPE"]},{"entry":["some of the specific keys",{},"Manufacturing facility"]},{"entry":["mentioned below",{},"VDE administrator"]},{"entry":["Manufacturing Key","Both PK","PPE PK case"]},{"entry":[{},"optional","Manufacturing facility"]},{"entry":["Certification key pair","PK","PPE"]},{"entry":[{},{},"Certification repository"]},{"entry":["Public private key pair","PK","PPE"]},{"entry":[{},{},"Certification repository"]},{"entry":[{},{},"(Public Key only)"]},{"entry":["Initial secret key","Non-PK","PPE"]},{"entry":["PPE manufacturing ID","Non-PK","PPE"]},{"entry":["Site ID, shared code,","Both","PPE"]},{"entry":"shared keys and shared"},{"entry":"secrets"},{"entry":["Download","Both","PPE"]},{"entry":["authorization key",{},"VDE administrator"]},{"entry":["External","Both","PPE"]},{"entry":["communication keys",{},"Secure Database"]},{"entry":"and other info"},{"entry":["Administrative object","Both","Permission record"]},{"entry":"Keys"},{"entry":["Stationary object keys","Both","Permission record"]},{"entry":["Traveling object shared","Both","Permission record"]},{"entry":"keys"},{"entry":["Secure database keys","Both","PPE"]},{"entry":["Private body keys","Both","Secure database"]},{"entry":[{},{},"Some objects"]},{"entry":["Content keys","Both","Secure database"]},{"entry":[{},{},"Some objects"]},{"entry":["Authorization shared","Both","Permission record"]},{"entry":"secrets"},{"entry":["Secure Database Back","Both","PPE"]},{"entry":["in Keys",{},"Secure database"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A \u201cmaster\u201d key is a key used to encrypt other keys. An initial or \u201cmaster\u201d key may be provided within PPE  for communicating other keys in a secure way. During initialization of PPE , code and shared keys are downloaded to the PPE. Since the code contains secure convolution algorithms and\/or coefficients, it is comparable to a \u201cmaster key.\u201d The shared keys may also be considered \u201cmaster keys.\u201d","If public-key cryptography is used as the basis for external communication with PPE , then a master key is required during the PPE Public-key pair certification process. This master key may be, for example, a private key used by the manufacturer or VDE administrator to establish the digital certificate (encrypted public key and other information of the PPE), or it may, as another example, be a private key used by a VDE administrator to encrypt the entries in a certification repository. Once certification has occurred, external communications between PPEs  may be established using the certificates of communicating PPEs.","If shared secret keys are used as the basis for external communications, then an initial secret key is required to establish external communications for PPE  initialization. This initial secret key is a \u201cmaster key\u201d in the sense that it is used to encrypt other keys. A set of shared partial external communications keys (see discussion above) may be downloaded during the PPE initialization process, and these keys are used to establish subsequent external PPE communications.","Manufacturing Key","A manufacturing key is used at the time of PPE manufacture to prevent knowledge by the manufacturing staff of PPE-specific key information that is downloaded into a PPE at initialization time. For example, a PPE  that operates as part of the manufacturing facility may generate information for download into the PPE being initialized. This information must be encrypted during communication between the PPEs  to keep it confidential, or otherwise the manufacturing staff could read the information. A manufacturing key is used to protect the information. The manufacturing key may be used to protect various other keys downloaded into the PPE such as, for example, a certification private key, a PPE public\/private key pair, and\/or other keys such as shared secret keys specific to the PPE. Since the manufacturing key is used to encrypt other keys, it is a \u201cmaster key.\u201d","A manufacturing key may be public-key based, or it may be based on a shared secret. Once the information is downloaded, the now-initialized PPE  can discard (or simply not use) the manufacturing key. A manufacturing key may be hardwired into PPE  at manufacturing time, or sent to the PPE as its first key and discarded after it is no longer needed. As indicated in the table above and in the preceding discussion, manufacturing key is not required if PK capabilities are included in the PPE.","Certification Key Pair","A certification key pair may be used as part of a \u201ccertification\u201d process for PPEs  and VDE electronic appliances . This certification process in the preferred embodiment may be used to permit a VDE electronic appliance to present one or more \u201ccertificates\u201d authenticating that it (or its key) can be trusted. As described above, this \u201ccertification\u201d process may be used by one PPE  to \u201ccertify\u201d that it is an authentic VDE PPE, it has a certain level of security and capability set (e.g., it is hardware based rather than merely software based), etc. Briefly, the \u201ccertification\u201d process may involve using a certificate private key of a certification key pair to encrypt a message including another VDE node's public-key. The private key of a certification key pair is preferably used to generate a PPE certificate. It is used to encrypt a public-key of the PPE. A PPE certificate can either be stored in the PPE, or it may be stored in a certification repository.","Depending on the authentication technique chosen, the public key and the private key of a certification key pair may need to be protected. In the preferred embodiment, the certification public key(s) is distributed amongst PPEs such that they may make use of them in decrypting certificates as an aspect of authentication. Since, in the preferred embodiment, this public key is used inside a PPE , there is no need for this public key to be available in plaintext, and in any event it is important that such key be maintained and transmitted with integrity (e.g., during initialization and\/or update by a VDE administrator). If the certification public key is kept confidential (i.e., only available in plaintext inside the PPE ), it may make cracking security much more difficult. The private key of a certification key pair should be kept confidential and only be stored by a certifying authority (i.e., should not be distributed).","In order to allow, in the preferred embodiment, the ability to differentiate installations with different levels\/degrees of trustedness\/security, different certification key pairs may be used (e.g., different certification keys may be used to certify SPEs  then are used to certify HPEs ).","PPE Public\/Private Key Pair","In the preferred embodiment, each PPE  may have its own unique \u201cdevice\u201d (and\/or user) public\/private key pair. Preferably. the private key of this key pair is generated within the PPE and is never exposed in any form outside of the PPE. Thus, in one embodiment, the PPE  may be provided with an internal capability for generating key pairs internally. If the PPE generates its own public-key crypto-system key pairs internally, a manufacturing key discussed above may not be needed. If desired, however, for cost reasons a key pair may be exposed only at the time a PPE  is manufactured, and may be protected at that time using a manufacturing key. Allowing PPE  to generate its public key pair internally allows the key pair to be concealed, but may in some applications be outweighed by the cost of putting a public-key key pair generator into PPE .","Initial Secret Key","The initial secret key is used as a master key by a secret key only based PPE  to protect information downloaded into the PPE during initialization. It is generated by the PPE , and is sent from the PPE to a secure manufacturing database encrypted using a manufacturing key. The secure database sends back a unique PPE manufacturing ID encrypted using the initial secret key in response.","The initial secret key is likely to be a much longer key than keys used for \u201cstandard encryption\u201ddue to its special role in PPE initialization. Since the resulting decryption overhead occurs only during the initialization process, multiple passes through the decryption hardware with selected portions of this key are tolerable.","PPE Manufacturing ID","The PPE manufacturing ID is not a \u201ckey,\u201d but does fall within the classic definition of a \u201cshared secret.\u201d It preferably uniquely identifies a PPE  and may be used by the secure database  to determine the PPE's initial secret key during the PPE initialization process.","Site ID, Shared Code, Shared Keys and Shared Secrets","The VDE site ID along with shared code, keys and secrets are preferably either downloaded into PPE  during the PPE initialization process, or are generated internally by a PPE as part of that process. In the preferred embodiment, most or all of this information is downloaded.","The PPE site ID uniquely identifies the PPE . The site ID is preferably unique so as to uniquely identify the PPE  and distinguish that PPE from all other PPEs. The site ID in the preferred embodiment provides a unique address that may be used for various purposes, such as for example to provide \u201caddress privacy\u201d functions. In some cases, the site ID may be the public key of the PPE . In other cases, the PPE site ID may be assigned during the manufacturing and\/or initialization process. In the case of a PPE  that is not public-key-capable, it would not be desirable to use the device secret key as the unique site ID because this would expose too many bits of the key\u2014and therefore a different information string should be used as the site ID.","Shared code comprises those code fragments that provide at least a portion of the control program for the PPE . In the preferred embodiment, a basic code fragment is installed during PPE manufacturing that permits the PPE to bootstrap and begin the initialization process. This fragment can be replaced during the initialization process, or during subsequent download processing, with updated control logic.","Shared keys may be downloaded into PPE  during the initialization process. These keys may \u2018be used, for example. to decrypt the private headers of many object structures.","When PPE  is operating in a secret key only mode, the initialization and download processes may import shared secrets into the PPE . These shared secrets may be used during communications processes to permit PPEs  to authenticate the identity of other PPEs and\/or users.","Download Authorization Key","The download authorization key is received by PPE  during the initialization download process. It is used to authorize further PPE  code updates, key updates, and may also be used to protect PPE secure database  backup to allow recovery by a VDE administrator (for example) if the PPE fails. It may be used along with the site ID, time and convolution algorithm to derive a site ID specific key. The download authorization key may also be used to encrypt the key block used to encrypt secure database  backups. It may also be used to form a site specific key that is used to enable future downloads to the PPE . This download authorization key is not shared among all PPEs  in the preferred embodiment; it is specific to functions performed by authorized VDE administrators.","External Communications Keys and Related Secret and Public Information","There are several cases where keys are required when PPEs  communicate. The process of establishing secure communications may also require the use of related public and secret information about the communicating electronic appliances . The external communication keys and other information are used to support and authenticate secure communications. These keys comprise a public-key pair in the preferred embodiment although shared secret keys may be used alternatively or in addition.","Administrative Object Keys","In the preferred embodiment, an administrative object shared key may be used to decrypt the private header of an administrative object . In the case of administrative objects, a permissions record  may be present in the private header. In some cases, the permissions record  may be distributed as (or within) an administrative object that performs the function of providing a right to process the content of other administrative objects. The permissions record  preferably contains the keys for the private body, and the keys for the content that can be accessed would be budgets referenced in that permissions record . The administrative object shared keys may incorporate time as a component, and may be replaced when expired.","Stationary Object Keys","A stationary object shared key may be used to decrypt a private header of stationary objects . As explained above, in some cases a permissions record  may be present in the private header of stationary objects. If present, the permissions record  may contain the keys for the private body but will not contain the keys for the content. These shared keys may incorporate time as a component, and may be replaced when expired.","Traveling Object Shared Keys","A traveling object shared key may be used to decrypt the private header of traveling objects . In the preferred embodiment, traveling objects contain permissions record  in their private headers. The permissions record  preferably contains the keys for the private body and the keys for the content that can be accessed as permitted by the permissions record . These shared keys may incorporate time as a component, and may be replaced when expired.","Secure Database Keys","PPE  preferably generates these secure database keys and never exposes them outside of the PPE. They are site-specific in the preferred embodiment, and may be \u201caged\u201d as described above. As described above, each time an updated record is written to secure database , a new key may be used and kept in a key list within the PPE. Periodically (and when the internal list has no more room), the PPE  may generate a new key to encrypt new or old records. A group of keys may be used instead of a single key, depending on the size of the secure database .","Private Body Keys","Private body keys are unique to an object , and are not dependent on key information shared between PPEs . They are preferably generated by the PPE  at the time the private body is encrypted, and may incorporate real-time as a component to \u201cage\u201d them. They are received in permissions records , and their usage may be controlled by budgets.","Content Keys","Content Keys are unique to an object , and are not dependent on key information shared between PPEs . They are preferably generated by the PPE  at the time the content is encrypted. They may incorporate rime as a component to \u201cage\u201d them. They are received in permissions records , and their usage may be controlled by budgets.","Authorization Shared Secrets","Access to and use of information within a PPE  or within a secure database  may be controlled using authorization \u201cshared secrets\u201d rather than keys. Authorization shared secrets may be stored within the records they authorize (permissions records , budget records, etc.). The authorization shared secret may be formulated when the corresponding record is created. Authorization shared secrets can be generated by an authorizing PPE , and may be replaced when record updates occur. Authorization shared secrets have some characteristics associated with \u201ccapabilities\u201d used in capabilities based operating systems. Access tags (described below) are an important set of authorization shared secrets in the preferred embodiment.","Backup Keys","As described above, the secure database  backup consists of reading all secure database records and current audit \u201croll ups\u201d stored in both PPE  and externally. Then, the backup process decrypts and re-encrypts this information using a new set of generated keys. These keys, the time of the backup, and other appropriate information to identify the backup, may be encrypted multiple times and stored with the previously encrypted secure database flies and roll up data within the backup fries. These flies may then all be encrypted using a \u201cbackup key\u201d that is generated and stored within PPE . This backup key  may be used by the PPE to recover a backup if necessary. The backup keys may also be securely encrypted (e.g., using a download authentication key and\/or a VDE administrator public key) and stored within the backup itself to permit a VDE administrator to recover the backup in case of PPE  failure.","Cryptographic Sealing","Sealing is used to protect the integrity of information when it may be subjected to modifications outside the control of the PPE , either accidentally or as an attack on the VDE security. Two specific applications may be the computation of check values for database records and the protection of data blocks that are swapped out of an SPE .","There are two types of sealing: keyless sealing, also known as cryptographic hashing, and keyed sealing. Both employ a cryptographically strong hash function, such as MD5 or SHA. Such a function takes an input of arbitrary size and yields a fixed-size bash, or \u201cdigest.\u201d The digest has the property that it is infeasible to compute two inputs that yield the same digest, and infeasible to compute one input that yields a specific digest value, where \u201cinfeasible\u201d is with reference to a work factor based on the size of the digest value in bits. If, for example, a 256-bit hash function is to be called strong, it must require approximately on average 10^38 (2^128) trials before a duplicated or specified digest value is likely to be produced.","Keyless seals may be employed as check values in database records (e.g., in PERC ) and similar applications. A keyless seal may be computed based on the content of the body of the record, and the seal stored with the rest of the record. The combination of seal and record may be encrypted to protect it in storage. If someone modifies the encrypted record without knowing the encryption key (either in the part representing the data or the part representing the seal), the decrypted content will be different, and the decrypted check value will not match the digest computed from the record's data. Even though the hash algorithm is known, it is not feasible to modify both the record's data and its seal to correspond because both are encrypted.","Keyed seals may be employed as protection for data stored outside a protected environment without encryption, or as a validity proof between two protected environments. A keyed seal is computed similarly to a keyless seal, except that a secret initial value is logically prefixed to the data being sealed. The digest value thus depends both on the secret and the data, and it is infeasible to compute a new seal to correspond to modified data even though the data itself is visible to an attacker. A keyed seal may protect data in storage with a single secret value, or may protect data in transit between two environments that share a single secret value.","The choice of keys or keyless seals depends on the nature of the data being protected and whether it is additionally protected by encryption.","Tagging","Tagging is particularly useful for supporting the secure storage of important component assembly and related information on secondary storage memory . Integrated use of information \u201ctagging\u201d and encryption strategies allows use of inexpensive mass storage devices to securely store information that, in part enables, limits and\/or records the configuration, management and operation of a VDE node and the use of VDE protected content.","When encrypted or otherwise secured information is delivered into a user's secure VDE processing area (e.g., PPE ), a portion of this information can be used as a \u201ctag\u201d that is first decrypted or otherwise unsecured and then compared to an expected value to confirm that the information represents expected information. The tag thus can be used as a portion of a process confirming the identity and correctness of received, VDE protected, information.","Three classes of tags that may be included in the control structures of the preferred embodiment:\n\n","An access tag may be used as a \u201cshared secret\u201d between VDE protected elements and entities authorized to read and\/or modify the tagged element(s). The access tag may be broken into separate fields to control different activities independently. If an access tag is used by an element such as a method core  administrative events that affect such an element must include the access tag (or portion of the access tag; for the affected element(s) and assert that tag when an event is submitted for processing. If access tags are maintained securely (e.g., created inside a PPE  when the elements are created, and only released from PPE  in encrypted structures), and only distributed to authorized parties, modification of structures can be controlled more securely. Of course, control structures (e.g., PERCs ) may further limit or qualify modifications or other actions expressed in administrative events.","Correlation tags are used when one element references another element. For example, a creator might be required by a budget owner to obtain permission and establish a business relationship prior to referencing their budget within the creator's PERCS. After such relationship was formed, the budget owner might transmit one or more correlation tags to the creator as one aspect of allowing the creator to produce PERCs that reference the budget owner's budget.","Validation tags may be used to help detect record substitution attempts on the part of a tamperer.","In some respects, these three classes of tags overlap in function. For example, a correlation tag mismatch may prevent some classes of modification attempts that would normally be prevented by an access tag mismatch before an access tag check is performed. The preferred embodiment may use this overlap in some cases to reduce overhead by, for example, using access tags in a role similar to validation tags as described above.","In general, tagging procedures involve changing, within SPE , encryption key(s), securing techniques(s), and\/or providing specific, stored tag(s). These procedures can be employed with secure database  information stored on said inexpensive mass storage  and used within a hardware SPU  for authenticating, decrypting, or otherwise analyzing, using and making available VDE protected content and management database information. Normally, changing validation tags involves storing within a VDE node hardware (e.g., the PPE ), one or more elements of information corresponding to the tagging changes. Storage of information outside of the hardware SPE's physically secure, trusted environment is a highly cost savings means of secure storage, and the security of important stored management database information is enhanced by this tagging of information. Performing this tagging \u201cchange\u201d frequently for example, every time a given record is decrypted) prevents the substitution of \u201cincorrect\u201d information for \u201ccorrect\u201d information, since said substitution will not carry information which will match the tagging information stored within the hardware SPE during subsequent retrieval of the information.","Another benefit of information tagging is the use of tags to help enforce and\/or verify information and\/or control mechanisms in force between two or more parties. If information is tagged by one party, and then passed to another party or parties, a tag can be used as an expected value associated with communications and\/or transactions between the two parties regarding the tagged information. For example, if a tag is associated with a data element that is passed by Party A to Party B, Party B may require Party A to prove knowledge of the correct value of at least a portion of a tag before information related to, and\/or part of, said data element is released by Party B to Party A, or vice versa. In another example, a tag may be used by Party A to verify that information sent by Party B is actually associated with, and\/or part of, a tagged data element, or vice versa.","Establishing A Secure, Authenticated, Communication Channel","From time to time, two parties (e.g., PPEs A and B), will need to establish a communication channel that is known by both parties to be secure from eavesdropping, secure from tampering, and to be in use solely by the two parties whose identifies are correctly known to each other.","The following describes an example process for establishing such a channel and identifies how the requirements for security and authentication may be established and validated by the parties. The process is described in the abstract, in terms of the claims and belief each party must establish, and is not to be taken as a specification of any particular protocol. In particular, the individual sub-steps of each step are not required to be implemented using distinct operations; in practice, the establishment and validation of related proofs Is often combined into a single operation.","The sub-steps need not be performed in the order detailed below, except to the extent that the validity of a claim cannot be proven before the claim is made by the other party. The steps may involve additional communications between the two parties than are implied by the enumerated sub-steps, as the \u201ctransmission\u201d of information may itself be broken into sub-steps. Also, it is not necessary to protect the claims or the proofs from disclosure or modification during transmission. Knowledge of the claims (including the specific communication proposals and acknowledgements thereof) is not considered protected information. Any modification of the proofs will cause the proofs to become invalid and will cause the process to fail.","Standard public-key or secret-key cryptographic techniques can be used to implement this process (e.g., X509, Authenticated Diffie-Hellmart, Kerberos). The preferred embodiment uses the three-way X.509 public key protocol steps.","The following may be the first two steps in the example process:","A. (precursor step): Establish means of creating validatable claims by A","B. (precursor step): Establish means of creating validatable claims by B","These two steps ensure that each party has a means of making claims that can be validated by the other party, for instance, by using a public key signature scheme in which both parties maintain a private key and make available a public key that itself is authenticated by the digital signature of a certification authority.","The next steps may be:","A (proposal step):\n\n","These steps establish the identity of the correspondent party B and proposes a communication. Because establishment of the communication will require validation of claims made by B, a means must be provided for A to validate such claims. Because the establishment of the communication must be unique to a specific requirement by A for communication, this communication proposal and all associated traffic must be unambiguously distinguishable from all other such traffic. Because B must validate the proposal as a legitimate proposal from A, a proof must be provided that the proposal is valid.","The next steps may be as follows:","B (acknowledgement step):\n\n","These steps establish that party B has received A's communication proposal and is prepared to act on it. Because B must validate the proposal, B must first determine its origin and validate its authenticity. B must ensure that its response is associated with a specific proposal, and that the proposal is not a replay. If B accepts the proposal, it must prove both B's own identity and that B has received a specific proposal.","The next steps may be:","A (establishment step):\n\n","These steps allows A to specify a session key to be associated with all further traffic related to A's specific communication proposal. A must create the key, prove that A created it, and prove that it is associated with the specific proposed communication. In addition, A must prove that the session key is generated in response to B's acknowledgement of the proposal. The session key must be protected from disclosure of modification to ensure that an attacker cannot substitute a different value.","Transportability of VDE Installation Between PPEs ","In a preferred embodiment, VDE objects  and other secure information may if appropriate, be transported from one PPE  to another securely using the various keys outlined above. VDE  uses redistribution of VDE administrative information to exchange ownership of VDE object , and to allow the portability of objects between electronic appliances .","The permissions record  of VDE objects  contains rights information that may be used to determine whether an object can be redistributed in whole, in part, or at all. If a VDE object  can be redistributed, then electronic appliance  normally must have a \u201cbudget\u201d and\/or other permissioning that allows it to redistribute the object. For example, an electronic appliance  authorized to redistribute an object may create an administrative object containing a budget or rights less than or equal to the budget or rights that it owns. Some administrative objects may be sent to other PPEs . A PPE  that receives one of the administrative objects may have the ability to use at least a portion of the budgets, or rights, to related objects.","Transfer of ownership of a VDE object  is a special case in which all of the permissions and\/or budgets for a VDE object are redistributed to a different PPE . Some VDE objects may require that all object-related information be delivered (e.g., it's possible to \u201csell\u201d all rights to the object). However, some VDE objects  may prohibit such a transfer. In the case of ownership transfer, the original providers for a VDE object  may need to be contacted by the new owner, informed of the transfer, and validated using an authorization shared secret that accompanies reauthorization, before transfer of ownership can be completed.","When an electronic appliance  receives a component assembly, an encrypted part of the assembly may contain a value that is known only to the party or PPE  that supplied the assembly. This value may be saved with information that must eventually returned to the assembly supplier (e.g., audit, billing and related information. When a component supplier requests that information be reported, the value may be provided by the supplier so that the local electronic appliance  can check it against the originally supplied value to ensure that the request is legitimate. When a new component is received, the value may be checked against an old component to determine whether the new component is legitimate (e.g., the new value for use in the next report process may be included with the new component.","Integrity of VDE Security","There are many ways in which a PPE  might be compromised. The goal of the security provided by VDE  is to reduce the possibility that the system will be compromised, and minimize the adverse effects ii it is compromised.","The basic cryptographic algorithm that are used to implement VDE  are assumed to be safe (cryptographically strong). These include the secret-key encryption of content, public-key signatures for integrity verification, public-key encryption for privacy between PPEs  or between a PPE and a VDE administrator, etc. Direct attack on these algorithms is assumed to be beyond the capabilities of an attacker. For domestic versions of VDE  some of this is probably a safe assumption since the basic building blocks for control information have sufficiently long keys and are sufficiently proven.","The following risks of threat or attacks may be significant:\n\n","A significant potential security breach would occur if one or more encryption keys are compromised. As discussed above. however, the encryption keys used by VDE  are sufficiently varied and compartmentalized so that compromising one key would have only limited value to an attacker in most cases. For example, if a certification private key is exposed, an attacker could pass the challenge\/response protocol as discussed above but would then confront the next level of security that would entail cracking either the initialization challenge\/response or the external communication keys. If the initialization challenge\/response security is also defeated, the initialization code and various initialization keys would also be exposed. However, it would still be necessary to understand the code and data to find the shared VDE keys and to duplicate the key-generation (\u201cconvolution\u201d) algorithms. In addition, correct real time clock values must be maintained by the spoof. If the attacker is able to accomplish all of this successfully, then all secure communications to the bogus PPE would be compromised. An object would be compromised if communications related to the permissions record  of that object are sent to the bogus PPE.","Knowledge of the PPE download authorization key and the algorithms that are used to derive the key that encrypts the keys for backup of secured database  would compromise the entire secured database at a specific electronic appliance . However, in order to use this information to compromise content of VDE objects , an understanding of appropriate VDE internals would also be required. In a preferred embodiment, the private body keys and content keys stored in a secured database  are \u201caged\u201d by including a time component. Time is convoluted with the stored values to derive the \u201ctrue keys\u201d needed to decrypt content. If this process is also compromised. then object content or methods would be revealed. Since a backup of secured database  is not ever restored to a PPE  in the preferred embodiment without the intervention of an authorized VDE administrator, a \u201cbogus\u201d PPE would have to be used to make use of this information.","External communication shared keys are used in the preferred embodiment in conjunction with a key convolution algorithm based on site ID and time. If compromised, all of the steps necessary to allow communications with PPEs  must also be known to take advantage of this knowledge. In addition, at least one of the administrative object shared keys must be compromised to gain access to a decrypted permissions record .","Compromising an administrative object shared key has no value unless the \u201ccracker\u201d also has knowledge of external communication keys. All administrative objects are encrypted by unique keys exchanged using the shared external communications keys, site ID and time. Knowledge of PPE  internal details would be necessary to further decrypt the content of administrative objects.","The private header of a stationary object (or any other stationary object that uses the same shared key) if compromised, may provide the attacker with access to content until the shared key \u201cages\u201d enough to no longer decrypt the private header. Neither the private body nor the content of the object is exposed unless a permissions record  for that object is also compromised. The private headers of these objects may remain compromised until the key \u201cages\u201d enough to no longer decrypt the private header.","Secure database encryption keys in the preferred embodiment are frequently changing and are also site specific. The consequences of compromising a secured database  file or a record depends on the information that has been compromised. For example, permissions record  contain keys for the public body and content of a VDE object . If a permissions record  is compromised, the aspects of that object protected by the keys provided by the permissions record are also compromised\u2014if the algorithm that generates the \u201ctrue keys\u201d is also known. If a private body key becomes known, the private body of the object is compromised until the key \u201cages\u201d and expires. If the \u201caging\u201d process for that key is also compromised, the breach is permanent. Since the private body may contain methods that are shared by a number of different objects, these methods may also become compromised. When the breach is detected, all administrative objects that provide budgets and permissions record should update the compromised methods. Methods stored in secure database  are only replaced by more recent versions, so the compromised version becomes unusable after the update is completed.","If a content key becomes compromised, the portion of the content encrypted with the key is also compromised until the key \u201cages\u201d and expires. If the \u201caging\u201d process for that key also becomes compromised, then the breach becomes permanent. If multiple levels of encryption are used, or portions of the content are encrypted with different keys, learning a single key would be insufficient to release some or all of the content.","If an authorization shared secret (e.g., an access tag) becomes known, the record containing the secret may be modified by an authorized means if the \u201ccracker\u201d knows how to properly use the secret. Generally speaking, the external communications keys, the administrative object keys and the management file keys must also be \u201ccracked\u201d before a shared secret is useful. Of course, any detailed knowledge of the protocols would also be required to make use of this information.","In the preferred embodiment, PPE  may detect whether or not it has become compromised. For example, by comparing information stored in an SPE  (e.g., summary service information) with information stored in secure database  and\/or transmitted to a VDE participant (e.g., a VDE clearinghouse), discrepancies may become evident. If PPE  (or a VDE administrator watching its activities or communicating with it) detects that it has been compromised, it may be updated with an initialization to use new code, keys and new encryption\/decryption algorithms. This would limit exposure to VDE objects  that existed at the tune the encryption scheme was broken. It is possible to require the PPE  to cease functioning after a certain period of time unless new code and key downloads occur. It is also possible to have VDE administrators force updates to occur. It is also likely that the desire to acquire a new VDE object  will provide an incentive for users to update their PPEs  at regular time intervals.","Finally, the end-to-end nature of VDE applications, in which content  flows in one direction, generating reports and bills  in the other, makes it possible to perform \u201cback-end\u201d consistency checks. Such checks, performed in clearinghouses , can detect patterns of use that may or do indicate fraud (e.g., excessive acquisition of protected content without any corresponding payment, usage records without corresponding billing records). The fine grain of usage reporting and the ready availability of usage records and reports in electronic form enables sophisticated fraud detection mechanisms to be built so that fraud-related costs can be kept to an acceptable level.","Integrity of Software-Based PPE Security","As discussed above in connection with , some applications may use a software-based protected processing environment  (such as a \u201chost event processing environment\u201d (HPE) ) providing a software-based tamper resistant barrier . Software-based tamper resistant barrier  may be created by software executing on a general-purpose CPU. Various software protection techniques may be used to construct and\/or provide software-based tamper resistant barrier .","The risks or threat of attacks described above in connection with PPE  apply to a software-based PPE. An important threat to be countered with respect to a software-based tamper resistant barrier  is an attack based on a distributable computer program that can defeat the tamper resistant barrier wherever the program is run. Since a software-based tamper resistant barrier  typically will not be as secure as a hardware-based tamper resistant barrier , it is useful to explore example steps and procedures a \u201ccracker\u201d might use to \u201ccrack\u201d a software-based tamper resistant barrier.",{"@attributes":{"id":"p-1225","num":"1720"},"figref":"FIGS. 67A and 67B","b":"674"},"Referring to , the software used to create tamper resistant barrier  may be distributed, for example, on a storage medium  such as a floppy diskette or optical disk (or, this software could be distributed electronically over network  and stored locally in a computer memory). The software distribution medium  provides software (code and data) for loading into a computing device such as a general purpose personal computer , for example. Personal computer  may include, for example, a random access memory  and a hard disk .","In one example, the software distribution medium  might include installation materials  and operational materials . The installation materials  may be executed by computer  to install the operational materials  onto the computer's hard disk . The computer  may then execute the operational materials  from its hard disk  to provide software-based protected processing environment  and associated software-based tamper resistant barrier .","In this example, one attack technique an attacker might use is to analyze software distribution medium  (see , block ). Such analysis can take many forms.","Such analysis could be performed by a combination of one or more techniques. Such techniques include, but are not limited to, the following:\n\n","Such analysis could provide clues and insights into the installation materials , the operational materials , or both.","Another attack technique could focus on the operational materials  in the form in which they are installed on personal computer . For example, one form of analysis might involve analyzing the on-disk copy of the installed software and\/or associated data files installed an computer hard disk  (see , block ). This analysis is represented in  as a magnifying glass B. Because the installed operational materials  can be executed by computer , the analysis need not be limited to analyzing the static information stored on hard disk , but could involve performing static and\/or dynamic analysis of the executing software (see , blocks , ). Any of the techniques described above could be used to analyze the operational material software  to yield source code or other more interpretable form A and\/or a memory image B. The static and\/or dynamic data within RAM A could be similarly analyzed (see , magnifying glass A.)","The resulting source code A and\/or memory image B could be carefully analyzed and reviewed (see magnifying glasses D, E) to obtain an understanding of both the static and dynamic structure and operation of operational materials . Dynamic code analysis could involve, for example, tracing, single-stepping, data, or code break points of the executing software image, using analysis techniques such as described above. The executing software could be modified dynamically (for example, by patching) during normal operation to attempt to bypass its protection mechanisms and\/or to learn more about how it operates (see , block , and the \u201cchanges\u201d inserted into  memory image B).","A further attack technique in this example might involve comparing installed operational material  software and data files among several different PPE  instances to identify important data structures, such as cryptographic keys see \u201ccompare\u201d block A of ; and , block ). The resulting list of differences B could be carefully analyzed (see FIG. A's magnifying glass C) to obtain important clues, using analysis techniques such as described above.","A further attack technique might involve comparing the memory and\/or disk images of installed operational material  software and data files in a single instance of PPE , after performing various operations using the PPE. This could serve to identify important data structures, such as cryptographic keys (see \u201ccompare\u201d block A of ; and , block ). The resulting list of differences  could be carefully analyzed (see FIG. A's magnifying glass C) to obtain important clues, using analysis techniques such as described above.","A further attack technique might involve analyzing the timing and\/or order of modification to memory and\/or disk images of installed operational material  software and data files in a single instance of PPE , during the performance performing various operations using the PPE. This could serve to identify important data structures, such as cryptographic keys (see \u201ccompare\u201d block A of ; and , block ). The resulting list of differences B could be carefully analyzed (see FIG. A's magnifying glass C) to obtain important clues, using analysis techniques such as described above.","A further attack technique might involve duplicating one installed operational material  instance by copying the programs and data from one personal computer B to another personal computer C or emulator (see , block , and the \u201ccopy\u201d arrow A in ) The duplicated PPE instance could be used in a variety of ways, such as, for example, to place an impostor PPE  instance on-line and\/or to permit further dynamic analysis.","A still additional avenue of attack might involve, for example, saving the state of a PPE  (see , block B)\u2014for example, before the expenditure of credit\u2014and restoring the state at a subsequent time (e.g., after a payment operation occurs) (see , arrows A, C, and , block ). The stored state information B may also be analyzed (see , magnifying glass F.","No software-only tamper resistant barrier  can be wholly effective against all of these threats. A sufficiently powerful dynamic analysis (such as one employing an in-circuit emulator) can lay bare all of the software-based PPE 's secrets. Nonetheless, various techniques described below in connection with  and following make such an analysis extremely frustrating and time consuming\u2014increasing the \u201cwork factor\u201d to a point where it may become commercially unfeasible to attempt to \u201ccrack\u201d a software-based tamper resistant barrier .","PPE Initialization","Each PPE  needs to be initialized before it can be used. Initialization may occur at the manufacturer site, after the PPE  has been placed out in the field, or both. The manufacturing process for PPE  typically involves embedding within the PPE sufficient software that will allow the device to be more completely initialized at a later time. This manufacturing process may include, for example, testing the bootstrap loader and challenge-response software permanently stored within PPE , and loading the PPE's unique ID. These steps provide a basic VDE-capable PPE  that may be further initialized (e.g., after it has been installed within an electronic appliance  and placed in the field). In some cases, the manufacturing and further initialization processes may be combined to produce \u201cVDE ready\u201d PPEs . This description elaborates on the summary presented above with respect to .",{"@attributes":{"id":"p-1240","num":"1742"},"figref":"FIG. 68","b":["650","650","500"]},"If the initialization process  is being performed at the manufacturer, PPE  may first be attached to a testbed. The manufacturing testbed may first reset the PPE  (e.g., with a power on clear) (Block ). If this reset is being performed at the manufacturer, then the PPE  preferably executes a special testbed bootstrap code that completely tests the PPE operation from a software standpoint and fails if something is wrong with the PPE. A secure communications exchange may then be established between the manufacturing testbed and the PPE  using an initial challenge-response interaction (Block ) that is preferably provided as part of the testbed bootstrap process. Once this secure communications has been established, the PPE  may report the results of the bootstrap tests it has performed to the manufacturing testbed. Assuming the PPE  has tested successfully, the manufacturing testbed may download new code into the PPE  to update its internal bootstrap code (Block ) so that it does not go through the testbed bootstrap process upon subsequent resets (Block ). The manufacturing testbed may then load new firmware into the PPE internal non-volatile memory in order to provide additional standard and\/or customized capabilities (Block ). For example, the manufacturing testbed may preload PPE  with the load modules appropriate for the particular manufacturing lot. This step permits the PPE  to be customized at the factory for specific applications.","The manufacturing testbed may next load a unique device ID into PPE  (Block ). PPE  now carries a unique ID that can be used for further interactions.","Blocks -R typically are, in the preferred embodiment, performed at the manufacturing site. Blocks  and - may be performed either at the manufacturing site, after the PPE  has been deployed, or both.","To further initialize PPE , once a secure communications has been established between the PPE and the manufacturing testbed or a VDE administrator (Block , any required keys, tags or certificates are loaded into PPE  (Block ). For example, the manufacturing testbed may load its information into PPE  so the PPE may be initialized at a later time. Some of these values may be generated internally within PPE . The manufacturing testbed or VDE administrator may then initialize the PPE real time clock  to the current real time value (Block ). This provides a time and date reference for the PPE . The manufacturing testbed or the VDE administrator may next initialize the summary values maintained internally to the PPE  (Block ). If the PPE  is already installed as part of an electronic appliance , the PPE may at this point initialize its secure database  (Block ).",{"@attributes":{"id":"p-1245","num":"1747"},"figref":["FIG. 69","FIG. 68"],"b":["650","1378","650","610","600"]},"PPE  automatically performs several checks to ensure that firmware being downloaded into the PPE has not been tampered with, replaced. or substituted before it was loaded. The download routine  shown in the figure illustrates an example of such checks. Once the PPE  has received a new firmware item (Block ), it may check the item to ensure that it decrypts properly using the predetermined download or administrative object key (depending on the source of the element) (decision Block ). If the firmware decrypts properly (\u201cyes\u201d exits to decision Block ), the firmware as check valve may be calculated and compared against the check valve stored under the encryption wrapper of the firmware (decision Block ). If the two check summed values compare favorably (\u201cyes\u201d exit to decision Block ), then the PPE  may compare the public and private header identification tags associated with the firmware to ensure that the proper firmware was provided and had not been substituted (step not shown in the figure). Assuming this test also passes, the PPE  may calculate the digital signatures of the firmware (assuming digital signatures are supported by the PPE  and the firmware is \u201csigned\u201d) and may check the calculated signature to ensure that it compares favorably to the digital signatures under the firmware encryption wrapper (Blocks , ). If any of these tests fail, then the download will be aborted (\u201cfail\u201d termination ).","Assuming all of the tests described above pass, then PPE  determines whether the firmware is to be stored within the PPE (e.g., an internal non-volatile memory), or whether it is to be stored in the secure database  (decision Block ). If the firmware is to be stored within the PPE (\u201cyes\u201d exit to decision Block ), then the PPE  may simply store the information internally (Block ). If the firmware is to be stored within the secure database  (\u201cno\u201d exit to decision Block ), then the firmware may be tagged with a unique PPE-specific tag designed to prevent record substitution (Block ), and the firmware may then be encrypted using the appropriate secure database key and released to the secure database  (Block ).","Example Techniques for Forming Software-Based Tamper Resistant Barrier","Various software protection techniques detailed above in connection with  may provide software-based tamper resistant barrier  within a software-only and\/or hybrid software\/hardware protected processing environment . The following is an elaboration on those above-described techniques.","These software protection techniques may provide, for example, the following:\n\n","In general, the software-based tamper resistant barrier  may establish \u201ctrust\u201d primarily through uniqueness and complexity. In particular, uniqueness and customization complicate the ability of an attacker to:\n\n","Briefly, the preferred example software-based PPE  installation process provides the following security techniques:\n\n",{"@attributes":{"id":"p-1252","num":"1767"},"figref":["FIG. 69A","FIG. 67A"],"b":["650","650","3470","3472","3470","3472","3376","3472","650","674"]},"In this example, installation materials  and operational materials  are each encrypted by a \u201cdeliverable preparation\u201d process  to provide encrypted installation materials E and encrypted operational materials E (the encrypted portions are indicated in , by cross-hatching). In this example, a small portion C of the installation materials  may be maintained in clear (unencrypted) form to provide an initial portion of the installation routine that may be executed without decryption. This plain text portion C may, for example, provide an initial dialog, using an encrypted or other secure protocol with a trusted registry  such as VDE administrator for example. This makes the distributed installation materials  and operational materials  meaningless and unreadable to an attacker without additional information since the entire content (except for the initial dialog with the registry ) is unreadable.","In this example, the \u201cdeliverable preparation\u201d process  may encrypt the installation materials  and operational materials  using one or more secret keys known to the registry . Multiple versions of these installation materials  and operational materials  may be distributed using different, secret keys so that compromise of one key exposes only a subset of the software distribution to unwanted disclosure. The only non-encrypted part of the software distribution in plaintext is that portion C of installation materials  used to establish initial contact with the registry .","The registry  maintains a copy of the corresponding decryption keys within a key generation and cataloging structure . It provides these keys on demand during the registration process (e.g., using a secure key exchange protocol, for example to only legitimate users authorized to set up a new protected processing environment .",{"@attributes":{"id":"p-1256","num":"1771"},"figref":["FIGS. 69B-69C","FIG. 69B","FIG. 69B","FIG. 69B","FIG. 69B"],"b":["3470","650","3470","600","3372","3470","3470","600","3476","3470","1","600","3476","3470","2","600","3470","3470","3","600","3472","3470","4"]},"Rather than simply installing the operational materials , in one example, installation materials  makes the installation different for each PPE  instance. For example, the installation materials  may customize the installation by:\n\n","Installation routine  may, for example, modify the operational materials  to customize embedded locations where critical data such as cryptographic keys are stored. These keys may be embedded into the text of the operational materials  at locations that vary with each installation. In this example, the registry  may choose, on a random or pseudo-random basis, at least some of the operational material  locations in which a particular installation routine  may embed cryptographic keys or other critical data (see , block ()).","The installation process for the operational software may involve decrypting its distribution (which may be the same for all end users) and modifying it to encode the specific locations where its critical data (e.g., cryptographic keys) are stored. These keys may be embedded within the text of the program at locations that vary with every installation. The distribution of unique information into the operational software  can be based on a secret key known to the registry . This key may be communicated by the registry  during the registration dialog using a secure key exchange. The key is shared between the registry  and the PPE  instance, and can serve both to organize the installed PPE software, and as the basis of subsequent integrity checks.","As shown in , the operational materials  may include embedded locations (), (), (), (), (), . . . reserved for storing (embedding) critical information such as cryptographic keys. Each of these locations  may initially store a random number string. In one example, the registry  or installation routine  performs a random operation  to randomly select which subset of these locations  is to be used by a particular instance for storing critical data. This selection list  is applied as an input to an operation materials preparation step (part of the deliverable preparation operation  shown in ). The operation materials preparation step also accepts, as an input, cryptographic keys from a secure key store . In this example, the operation materials preparation step embeds the cryptographic keys provided by key store  into the selected locations  of operation materials .","In accordance with one example, the random operation  selects a subset that is much less than all of the possible locations \u2014and the locations  not used for storing cryptographic keys store random data instead. An attacker attempting to analyze installed operational materials  won't be able to tell the difference between real cryptographic keys and random number strings inserted into a place where cryptographic keys might be stored.","In this example, the random location selection  (which is unique for each installation) may itself be encrypted by block  based on an installation-unique key provided by key generation block  for example. The encryption key may be securely maintained at registry  so that the registry may later notify the installation materials  of this key\u2014allowing the installation materials to decrypt the resulting encrypted key location block  and recover listing  of the subset of locations  used for embedding cryptographic keys.","Embedded Customized Random Changes","Referring once again to , the installed operational materials  may be further customized for each instance by making random changes to reserved, unused portions of the operational materials (, block ). An example of this is shown in . In this example, the operational materials  include unused, embedded random data or code portions . Another technique with similar effect is shown in . In this example, false code sections  are included within reserved areas of the operational materials . These false code sections  add complexity, and may also be used as a electronic \u201cfingerprint\u201d to help trace copies. Because the false code sections  are executable program code that are never executed (or if executed perform no actual functions other than confounding analysis by, for example, creating, modifying and\/or destroying data that has no impacton the operation of PPE  but may appear to have such an impact), they can be used to confound analysis because they may be difficult for an attacker to distinguish from true code sections. In addition other false code may have the effect of disabling the execution of PPE  if executed. Correspondence Between Installed Software and Appliance \u201cSignature.\u201d Another technique that may be used during the installation routine  is to customize the operational materials  by embedding a \u201cmachine signature\u201d into the operational materials to establish a correspondence between the installed software on a particular electronic appliance  (, block ()). This technique prevents a software-based PPE  from being transferred from one electronic appliance  to another (except through the use of the appropriate secure, verified backup mechanism).","For electronic appliances  where it is feasible to do so, the installation procedure  may determine unique information about the electronic appliance  (e.g., a \u201csignature\u201d SIG in the sense of a unique value\u2014not necessarily a \u201cdigital signature\u201d in the cryptographic sense). Installation routine  embeds the electronic appliance \u201csignature\u201d SIG in the installed operational materials . Upon initialization, the operational materials  validate the embedded signature value against the actual electronic appliance  signature SIG, and may refuse to start if the comparison fails. Depending on the configuration of electronic appliance , the machine signature may consist, for example, of some combination of\n\n",{"@attributes":{"id":"p-1265","num":"1792"},"figref":"FIG. 69G"},"In this example, machine signature information need not be particularly large. Security is provided by hiding the machine signature rather than on any other cryptographic strength, because there is no more secure mechanism for key storage to protect it. Thus, it is satisfactory for the signature to be just large enough (e.g., two bytes) that it is unlikely to be duplicated by chance.","For some electronic appliances  where it can be determined that the technique is safe, an otherwise unused section of the non-volatile CMOS RAM may be used to store a signature . Signature is verified against the PPE 's internal state whenever the PPE is initialized. Signature may also be updated whenever a significant change is made to the secure database . If the CMOS RAM signature does not match the database value, PPE  may take this mismatch as an indication that a previous instance of the secure database  and\/or PPE  software has been restored, and appropriate action can be taken. This mechanism thus ensures that even a bit-for-bit copy of the system's fixed disk  or other storage medium cannot be saved and reloaded to restore an earlier PPE  state. This particular technique depends upon there being an unused location available within CMOS RAM , and may also require the CMOS RAM checksum algorithm to be known. An incorrect implementation could cause a subsequent reboot of electronic appliance  to fail because of a bad CMOS checksum, or worse, could alter some critical configuration parameter within CMOS RAM so that electronic appliance  could not be recovered. Thus, care must be taken before modifying the contents of CMOS RAM ","A still alternate technique may involve marking otherwise \u201cgood\u201d disk sectors defective and using the sector(s) to store machine signatures and\/or encryption keys. This technique ensures that a logical bit-for-bit copy of the media does not result in a usable PPE  instance, and also provides relatively inaccessible and non-volatile storage for the information. Because a relatively large amount of storage space can be reserved using this technique, there is enough storage for a cryptographically strong value.","Some of the \u201cmachine signature\u201d techniques discussed above may be problematic in some electronic appliances  because it may be difficult to locate appropriate appliance-unique information. For example, although in a personal computer a ROM BIOS \u2032 is always available, the ROM BIOS information by itself may be insufficient because it is likely to be identical for a batch of electronic appliances  purchased together. Identifying a network adapter  and determining its address is potentially difficult due to the wide variety of adapters;\n\n","A still additional example technique for providing additional security is to tie a particular PPE  installation at registration time to a particular payment method (see , block ()). The registration process at installation time may thus serve to tie the PPE  installation to same payment method associated with the user, and to store the payment association information both within the PPE  instance and at the registry . This technique assures that the actions of a particular PPE  instance are accountable to the assigned user with at least the reliability of whatever payment\/credit verification technique is employed.","Install Operational Materials in Encrypted Form","Operational materials  may first be customized as described above for the particular instance and\/or appliance , then (at least mostly) encrypted for installation into the appliance such as by storage onto disk  (see , block ()). Different installations may use different sets of decryption keys to decrypt the information once installed. Different parts of operational materials  may be encrypted with different cryptographic keys to further complicate the analysis. This encryption makes analysis of the on disk form of the operational materials  more difficult or infeasible.","The beginning of the resulting stored executable file may contain a small decryption program (\u201cdecryptor\u201d) that decrypts the remainder of the operational materials  as they are loaded into memory. Confounding algorithms (as described below) may be used in this decryptor to make static recovery of the cryptographic keys difficult. Although the decryptor is necessarily in unencrypted form in an all-software installation without hardware support, the use of confounding algorithms to develop the associated cryptographic keys effectively requires a memory image to be captured after the program has been decrypted. Where supported (as described above), an unused and inaccessible disk sector may be used to store the decryption keys, and the operational materials  may possess only the address for that particular sector. Embedding this address further complicates analysis.","Customized Layout","The installation materials  may store the encrypted operational materials  onto the fixed disk  using a customized storage layout (, block ()). , H, I and J shows example customized software and data layouts. In these examples, each installed instance of operational materials  is different in both executable form and in data layout. These modifications make each PPE  instance require separate analysis in order to determine the storage locations of its critical data such as cryptographic keys. This technique is an effective counter to creation of programs that can undo the protections of an arbitrary PPE  instance.","Instruction sequences within the operational materials  may be modified by the installation routine to change the execution flow of the executable operational materials  and to alter the locations at which the software expects to locate critical data. The alterations in program flow may include customization of time-consuming confounding algorithms. The locations of the modifiable instruction sequences may be embedded within operational materials , and may therefore be not directly available from an examination of the installation and\/or operational materials.",{"@attributes":{"id":"p-1275","num":"1803"},"figref":["FIG. 69H","FIG. 69I","FIG. 69J","FIGS. 69I"],"b":["3472","3498","3498","3498","3498","3498","3498","3498","3498","3498","3498","3470","650","69"],"i":["a","b","c","d","e","a ","e ","b","c ","d "]},"Dynamic Protection Mechanisms","In addition to the more static protection mechanisms described above, dynamic protection mechanisms may be employed to complicate both static and dynamic analysis of the executable (executing) operational materials . Such techniques include, for example:\n\n",{"@attributes":{"id":"p-1277","num":"1819"},"figref":["FIGS. 69K-69L","FIG. 69K","FIG. 69K","FIG. 69K"],"b":["3472","3550","3472","3552","3554"]},"Real Time Check\/Validation","Operational materials  may perform this time check, for example, to guard against replay attacks and to ensure that the electronic appliance 's time is in reasonable agreement with that of the VDE administrator or other trusted node.",{"@attributes":{"id":"p-1279","num":"1821"},"figref":["FIG. 69M","FIG. 69M"],"b":["3554","650","3554","650","528"],"i":"a"},"If the user responds affirmatively, PPE  may reset the time clock to agree with the real-time provided by the trusted server (\u201cyes\u201d exit to decision block , , block ). If the user responds that he or she does not want the real-time clock reset (\u201cno\u201d exit to decision block ), then PPE  may calculate a delta value of the difference between the server's real-time clock and the electronic appliance's real-time clock  (, block ). In either case, PPE  may store the current time Tcurrent into a non-volatile storage location Tstore indicating the current real-time (, block ).","Referring again to , PPE  can disable itself if there is too much (or the wrong type) of a difference between the trusted server's time and the electronic appliance's clock\u2014since such differences can indicate replay attacks, the possibility that the PPE  has been restored based on a previous state, etc. For example, if desired, PPE  can generate a time check fail exception if the electronic appliance's real-time clock  disagrees with the trusted server's real-time by more than a certain amount of acceptable drift (, \u201cyes\u201d exit to decision block ). In the event of such an exception, PPE  may disable itself (, block ) and require a dialog between the user and registry  (or other authority)\u2014providing additional protection against replay attacks and also detecting clock failures that could lead to incorrect operation or incorrect charges.","Dynamic Code Decryption and Data OverWriting","Operational materials  may then decrypt the next program segment dynamically (, block . The code may be decrypted dynamically when it is needed, then re-encrypted or overwritten arid discarded when not in use. This mechanism increases the tamper-resistance of the executable code\u2014thus providing additional tamper resistance for PPE operations. As mentioned above, different decryption keys may be required to decode different code portions, and the decryption keys can be installation-specific so that an attacker who successfully comprises the decryption key of one instance cannot use that information to compromise any other instance's decryption key(s).","Once a portion of the operational materials  has been decrypted (, block ), that portion may immediately over-write all initialization code in memory since it is no longer required (, block ). The executing operational materials  may similarly overwrite all unwrapped cryptographic keys once they are no longer needed, and may also overwrite expanded key information developed by initializing the cryptographic algorithms once no longer needed. These techniques minimize the amount of time during which usable key information is available for exposure in a memory snapshot\u2014complicating all but the. most dynamic of analysis efforts. Because all keys in permanent storage are either encrypted or otherwise camouflaged, no such treatment is required for I\/O buffers.","Dynamic Check of Association Between Appliance and PPE Instance","The executing operational materials  may next compare an embedded electronic appliance signature SIG\u2019 against the electronic appliance signature SIG stored in the electronic appliance itself (, decision block ). As discussed above, this technique may be used to help prevent operational materials  from operating on any electronic appliance  other than the one it was initially installed on. PPE  may disable operation if this machine signature check fails (\u201cno\u201d exit to decision block , , disable block ).","Self-Modifying and\/or Hardware-Dependent Code Sequences","Executing operational materials  may also employ self-modifying code sequences that cannot easily be emulated with a software debugger or single-stepping program (, block ). These sequences may, for example, be dependent on specific models of electronic appliances , and may be patched into the operational materials  as appropriate to installation materials  based on tests performed during the installation process. Such hardware-dependent sequences may be used to ensure that critical algorithms yield different results when executed on the proper hardware as opposed to when executed on different hardware or under software control such as in a debugger or emulator. To prevent such hardware-dependent sequences from being readily recognizable from a static examination of the code, the sequences may be constructed at run time and then invoked\u2014so that they can be identified only by analysis of the instruction sequences actually executed.","Dynamic Timing Checks","Executing operational materials  may also make dynamic timing checks on various code sequences, and refuse to operate if they do not execute within the expected interval (, block , decision block , \u201cdisable\u201d block ). An incorrect execution time suggests that the operational materials  are being externally manipulated and\/or analyzed or traced in some manner (e.g., by a software emulator). This technique thus provides additional protection against dynamic analysis and\/or modification.","The expected execution intervals associated with certain code sequences may be calculated during the installation procedure. Resulting test values may be embedded into the operational materials . These timing tests may be integrated with time integrity tests and dynamic integrity checks to make it more difficult to bypass them simply by patching out the timing check. Care should be taken to eliminate false alarms due to concurrent system activity (e.g., other tasks and\/or windows).",{"@attributes":{"id":"p-1288","num":"1830"},"figref":["FIG. 69N","FIG. 69N"],"b":["3570","3570","3570","3470","3570","3570","3570"],"i":["a","a ","b","c","d"]},"If it is time to perform a check, PPE  compares the stored time value Tstore with the current time value Tcurrent, and determines whether the two values are within an acceptable range (, decision block E). If the two values agree within an acceptable range (this range may be determined, for example, in part by the time-dependent testing described above), then PPE  may replace the stored time value Tstore with the current Tcurrent in preparation for the next test (, block F). If, on the other hand, the two values are not within an acceptable range (the \u201cnot within range\u201d exit to decision block E, ), PPE  may disable operation (block G) and initiate a conversation with a trusted time base or other verification facility to perform further authenticity checking (, block H). As  shows, further time checks may be performed periodically and\/or repeatedly based on other events (see block , decision block , disable block ).","Confounding Algorithms","The executing operational materials  may also perform various confounding algorithms\u2014computationally intensive algorithms that perform a complex operation in order to generate values required at run time (, block ). The purpose of such confounding algorithms is to make infrequently invoked steps (e.g., initialization or other steps not performed very frequently) inscrutable to an attacker who is disassembling or tracing them. Confounding algorithms may also be used for the time-dependent checking described above.","One example of such a \u201cconfounding algorithm\u201d is a modified version of the MD5 message digest function (applied repeatedly to the same input value), which tests internally generated results of the round functions and terminates when a specific value is encountered. For example, one may make random modifications to the confounding algorithm (for example, by adjusting the \u201cmagic constants\u201d in MD5) until it terminates quickly enough to be useful with the desired value in some register. This adjustment may be performed beforehand to yield a prior knowledge of modifications that can then be installed differently and to each PPE  instance.","As one specific example, a family of 256 customized confounding algorithms could be created, each defined by a single modification of the MD5 \u201cmagic constants\u201d (or even the input data to MD5) so that the algorithm terminates with any of 256 possible values in some register. Critical values can then be generated at run time by installing appropriate versions of the algorithm into the operational materials  and assembling the values a byte at a time. Confounding algorithms may be performed in a time-dependent value as described above; their execution times may be logged and checked by PPE , and the PPE  may disable operation if the confounding algorithms run too rapidly or slowly.","Such confounding algorithms are generally infeasible to simulate by hand because they may require tens or hundreds of millions of instructions to complete. They are expensive to analyze at run time because single-stepping through the code is time consuming (though not prohibitive, particularly if break points are set at all the possible termination tests rather than for every instruction). Although such confounding algorithms are expensive in computation time, then need not be invoked frequently\u2014preserving efficiency.","Random Modifications to Environment State","The executing operational materials  may randomly modify the PPE  environment state during normal operation to reflect both actual PPE  operations being performed and to include random modifications of data not significant to the operating PPE  (, block ). Such techniques help ensure that snapshots of the secure database  and operational materials  cannot readily be compared to identify significant values and objects.","Such modifications may be based, for example, on actual random values derived from unpredictable hardware events such as disk I\/O completion timing and keyboard timing. Such techniques make it infeasible to experiment with \u201cminor\u201d changes to the PPE  state even if the attacker can successfully bypass integrity checks that prevent duplicates from being made.","Load Module Dynamic Decryption & Re-Encryption","The executing operational materials  may decrypt load module  code dynamically as needed, and re-encrypt it or otherwise render it inscrutable when not in use (, block ). In accordance with this technique, load module executable code and\/or data is decrypted dynamically when it is needed, then re-encrypted or destroyed when not in use. In addition, the location of executing load modules  may be varied randomly to foil attempts to set break points within the load module. Different algorithms and a changing key may be used to further confound dynamic analysis.","Hidden Secret Storage","The source database  and\/or parts or all of operational materials  may be protected by cryptography employing keys and\/or authentication values hidden in normally inaccessible locations in the appliance . If the key or authentication value is not available, the decryption cannot be performed, rendering PPE  unusable. Examples of such locations include, but are not limited to:\n\n","Storing secrets (e.g., cryptographic keys and authentication values) in these locations serves two purposes: it makes them difficult to locate by analysis of the PPE , and it makes them difficult to copy between one instance of the PPE and another (or to replace the PPE's contents with an earlier version of the same).","Volatile Secret Storage","The secure database  and\/or parts or all of operational materials  may be protected by cryptography employing keys and\/or authentication values (\u201ccryptovariables\u201d) that are maintained only in volatile storage during normal operation. For example, during an initialization sequence, cryptovariables can be read from permanent storage (e.g., disk), overwritten, and held only in volatile memory during system operation. During the shutdown sequence, the cryptovariables can be rewritten to permanent storage.","This provides resistance to tampering because the initialization sequence for an appliance, particularly a general-purpose computer, is typically more difficult to tamper with than is the computer during normal operation. This technique prevents the computer from itself being used to analyze the contents of permanent storage media; only by removing the media and analyzing it independently can the cryptovariables be located and extracted. This technique has the drawback of requiring the appliance's operation always to be terminated normally so that the termination sequence is guaranteed to update the permanent storage. This drawback can be ameliorated by maintaining frequent backups of the secure database  and\/or the protected crypto-variables that can be restored with administration by VDE administrator if a disorderly termination occurs.","Dynamic Integrity Checks","In this example, operational materials  may also perform a variety of dynamic integrity checks that tie an executing PPE  to a particular electronic appliance  and to guard against various forms of replay or substitution attacks. One example of a replay attack, for example, is an attack in which a user restores the PPE  state from an earlier backup\u2014wiping out all recent billing records. PPE  includes a backup mechanism (as discussed above in connection with ) that supports restoration of previous states after system failure. Executing operational materials  in this example provides certain dynamic protection mechanisms (integrity checks) that prevent such backup and restoration processes from being misused to allow such replay attacks. Such checks may identify incomplete or erroneous attempts to subvert tamper resistant barrier . Great care must be taken to ensure that these checks do not trigger as a result of execution or implementation error, as there is potential for significant disruption.","For example, during PPE  operation, the internal state of the PPE is constantly being updated. During each interaction with a trusted server, PPE  (and the trusted server) may test the internal state of PPE  to determine whether it could be derived from the internal state last seen by the trusted server for this particular PPE  instance. If it could not, the result may be taken as indicating a replay attack of some sort, and an appropriate action can be taken (see , block , , ).","For example, such a check could be implemented using a counter stored in PPE  and updated every time an operation is performed. If the trusted server finds the counter to be smaller than at the previous server interaction, this finding is strong evidence that a previous state of the PPE  environment has been restored. In practice, the check might be implemented with an obscure technique to prevent easy manipulation of the counter value. For example, the counter could be repeated hashing (e.g., with MD5) of a value that is stored redundantly in several different locations within the operational materials  and secure database \u2014so that the trusted server could verify that the current value can be derived (e.g., by repeated MD5 applications) from a previous value. Such checks may limit the severity of loss resulting from off-line manipulation of PPE . Because the trusted server verifies the consistency of PPE  at each interaction, the only loss that may occur as a result of wholesale reloading of an earlier PPE  state is that of content that has already been delivered by has not yet been charged for.","One example of a dynamic integrity check that executing operational materials  may perform (, block ) might, for example, be the periodic verification of the integrity of the operational materials code in memory by a checksum invoked by a timer. If the timer does not tick regularly, the PPE  may detect it and cease to operate (see ). This verification may counter attacks that might, for example, attempt to trick PPE  access methods into releasing content that has been decrypted but not electronically fingerprinted. Executing operational materials  may also include numerous internal consistency checks to prevent substitution (replay) of stale database  records, introduction of invalid load modules , external modification of the secure database , and so on. Such checks may be made sufficiently complex and interwoven as to make modifications likely to be detected.","When an inconsistency is detected (\u201cyes\u201d exit to decision block , ), PPE  can take appropriate action such as locking itself up from further use until reconstructed under the trusted server's control (, disable block ). For example, PPE  could encrypt its secure database  with a new, random key, then encrypt that with the server's public key. Only the server could then arrange to reconstruct the user's instance of PPE .","Defense in Depth","Finally, although not a \u201ccamouflage\u201d technique per se, the complexity of operational materials  may make it difficult to understand them from the outside in. As discussed above, PPE  may make extensive use of RPC and coordinated work in different threads of execution. Because much of the RPC traffic may be encrypted, it will be difficult to unravel even if operational materials  are heavily instrumented by the attacker. Although the cryptographic keys are, in principal, readily available in memory (e.g., because after all, the PPE  must be able to get them), there may be many keys and it will be difficult to identify the right one rapidly. In addition, a primary benefit to be sought by subverting protection of software-based PPE  installations is the ability to acquire content without paying for it\u2014in other words, the ability to \u201ccreate money\u201d. The integrity checks discussed above mean that any error in manipulating the budget and usage information data is likely to be detected quickly. Even if the checks occur off-line without notification to any trusted server, it will make the user's PPE  instance effectively useless\u2014requiring its destruction and recreation.","Networking SPUs  and\/or VDE Electronic Appliances ","In the context of many computers interconnected by a local or wide area network, it would be possible for one or a few of them to be VDE electronic appliances . For example, a VDE\u2014capable server might include one or more SPUs . This centralized VDE server could provide all VDE services required within the network or it can share VDE service with VDE server nodes; that is, it can perform a few, some, or most VDE service activities. For example, a user's non-VDE computer could issue a request over the network for VDE-protected content. In response to the request, the VDE server could comply by accessing the appropriate VDE object , releasing the requested content and delivering the content over the network  to the requesting user. Such an arrangement would allow VDE capabilities to be easily integrated into existing networks without requiring modification or replacement of the various computers and other devices connected to the networks.","For example, a VDE server having one or more protected processing environments  could communicate over a network with workstations that do not have a protected processing environment. The VDE server could perform all secure VDE processing, and release resulting content and other information to the workstations on the network. This arrangement would require no hardware or software modification to the workstations.","However, some applications may require greater security, flexibility and\/or performance that may be obtained by providing multiple VDE electronic appliances  connected to the same network . Because commonly-used local area networks constitute an insecure channel that may be subject to tampering and\/or eavesdropping, it is desirable in most secure applications to protect the information communicated across the network. It would be possible to use conventional network security techniques to protect VDE-released content or other VDE information communicated across a network  between a VDE electronic appliance  and a non-VDE electronic appliance. However, advantages are obtained by providing multiple networked VDE electronic appliances  within the same system.","As discussed above in connection with , multiple VDE electronic appliances  may communicate with one another over a network  or other communications path. Such networking of VDE electronic appliances  can provide advantages. Advantages include, for example, the possibility of centralizing VDE resources, storing and\/or archiving metering information on a server VDE and delivering information and services efficiently across the network  to multiple electronic appliances .","For example, in a local area network topology, a \u201cVDE server\u201d electronic appliance  could store VDE-protected information and make it available to one or more additional electronic appliances  or computers that may communicate with the server over network . As one example, an object repository  storing VDE objects could be maintained at the centralized server, and each of many networked electronic appliance  users could access the centralized object repository over the network  as needed. When a user needs to access a particular VDE object , her electronic appliance  could issue a request over network  to obtain a copy of the object. The \u201cVDE server\u201d could deliver all or a portion of the requested object  in response to the request. Providing such a centralized object repository  would have the advantage of minimizing mass storage requirements local to each electronic appliance  connected to the network , eliminate redundant copies of the same information, ease information management burdens, provide additional physical and\/or other security for particularly important VDE processes and\/or information occurring at the server, where providing such security at VDE nodes may be commercially impractical for certain business models, etc.","It may also be desirable to centralize secure database  in a local area network topology. For example, in the context of a local area network, a secure database  server could be provided at a centralized location. Each of several electronic appliances  connected to a local area network  could issue requests for secure database  records over the network, and receive those records via the network. The records could be provided over the network in encrypted form. \u201cKeys\u201d needed to decrypt the records could be shared by transmitting them across the network in secure communication exchanges. Centralizing secure database  in a network  has potential advantages of minimizing or eliminating secondary storage and\/or other memory requirements for each of the networked electronic appliances , avoiding redundant information storage, allowing centralized backup services to be provided, easing information management burdens, etc.","One way to inexpensively and conveniently deploy multiple instances of VDE electronic appliances  across a network would be to provide network workstations with software defining an HPE . This arrangement requires no hardware modification of the workstations; an HPE  can be defined using software only. An SPE(s)  and\/or HPE(s)  could also be provided within a VDE server. This arrangement has the advantage of allowing distributed VDE network processing without requiring workstations to be customized or modified (except for loading a new program(s) into them. VDE functions requiring high levels of security may be restricted to an SPU-based VDE server. \u201cSecure\u201d HPE-based workstations could perform VDE functions requiring less security, and could also coordinate their activities with the VDE server.","Thus, it may be advantageous to provide multiple VDE electronic appliances  within the same network. It may also be advantageous to provide multiple VDE electronic appliances  within the same workstation or other electronic appliance . For example, an electronic appliance  may include multiple electronic appliances  each of which have a SPU  and are capable of performing VDE functions.","For example, one or more VDE electronic appliances  can be used as input\/output device(s) of a computer system. This may eliminate the need to decrypt information in one device and then move it in unencrypted form across some bus or other unsecured channel to another device such as a peripheral. If the peripheral device itself is a VDE electronic appliance  having a SPU , VDE-protected information may be securely sent to the peripheral across the insecure channel for processing (e.g., decryption) at the peripheral device. Giving the peripheral device the capability of handling VDE-protected information directly also increases flexibility. For example, the VDE electronic appliance  peripheral device may control VDE object  usage. It may, for example, meter the usage or other parameters associated with the information it processes, and it may gather audit trials and other information specific to the processing it performs in order to provide greater information gathering about VDE object usage. Providing multiple cooperating VDE electronic appliances  may also increase performance by eliminating the need to move encrypted information to a VDE electronic appliance  and then move it again in unencrypted form to a non-VDE device. The VDE-protected information can be moved directly to its destination device which, if VDE-capable, may directly process it without requiring involvement by some other VDE electronic appliance .",{"@attributes":{"id":"p-1316","num":"1864"},"figref":["FIG. 70","FIG. 8","FIG. 8"],"b":["2630","600","1","600","2","600","3","600","600","1","600","2631","672","600","654","500","656","658","653","600","2632","660","666","2632","653","2634","2634","600","1","600","672"]},"Although each of electronic appliances  shown in the figure may have a generally similar architecture, they may perform different specialized tasks. For example, electronic appliance () might comprise a central processing section of a workstation responsible for managing the overall operation of the workstation and providing computation resources. Electronic appliance () might be a mass storage device  for the same workstation, and could provide a storage mechanism  that might, for example, read information from and write information to a secondary storage device . Electronic appliance () might be a display device  responsible for performing display tasks, and could provide a displaying mechanism  such as a graphics controller and associated video or other display. Electronic appliance (N) might be a printer  that performs printing related tasks and could include, for example, a print mechanism .","Each of electronic appliances (), . . . (N) could comprise a different module of the same workstation device all contained within a common housing, or the different electronic appliances could be located within different system components. For example, electronic appliance () could be disposed within a disk controller unit, electronic appliance () could be disposed within a display device  housing, and the electronic appliance (N) could be disposed within the housing of a printer . Referring back to , scanner , modem , telecommunication means , keyboard  and\/or voice recognition box  could each comprise a VDE electronic appliance  having its own SPU . Additional examples include RF or otherwise wireless interface controller, a serial interface controller, LAN controllers, MPEG (video) controllers, etc.","Because electronic appliances () . . . (N) are each VDE-capable, they each have the ability to perform encryption and\/or decryption of VDE-protected information. This means that information communicated across network  or other communications path  connecting the electronic appliances can be VDE-protected (e.g., it may be packaged in the form of VDE administrative and\/or content objects and encrypted as discussed above). One of the consequences of this arrangement is that an eavesdropper who taps into communications path  will not be able obtain information except in VDE-protected form. For example, information generated by electronic appliance  () to be printed could be packaged in a VDE content object  and transmitted over path  to electronic appliance  (N) for printing. An attacker would gain little benefit from intercepting this information since it is transmitted in protected form; she would have to compromise electronic appliance () or (N) (or the SPU (), (N)) in order to access this information in unprotected form.","Another advantage provided by the arrangement shown in the diagram is that each of electronic appliances (), . . . (N) may perform their own metering, control and\/or other VDE-related functions. For example, electronic appliance (N) may meter and\/or perform any other VDE control functions related to the information to be printed, electronic appliance () may meter and\/or perform any other VDE control functions related to the information to be displayed, electronic appliance () may meter and\/or perform any other VDE control functions related to the information to be stored and\/or retrieved from mass storage , and electronic appliance () may meter and\/or perform any other VDE control functions related to the information it processes.","In one specific arrangement, each of electronic appliances (), . . . (N) would receive a command that indicates that the information received by or sent to the electronic appliance is to use its SPU  to process the information to follow. For example, electronic appliance (N) might receive a command that indicates that information it is about to receive for printing is in VDE-protected form (or the information that is sent to it may itself indicate this). Upon receiving this command or other information, electronic appliance (N) may decrypt the received information using SPU , and might also meter the information the SPU provides to the print mechanism  for printing. An additional command might be sent to electronic appliance (N) to disable the decryption process or (N)'s VDE secure subsystem may determine that the information should not be decrypted and\/or printed. Additional commands, for example, may exist to load encryption\/decryption keys, load \u201climits,\u201d establish \u201cfingerprinting\u201d requirements, and read metered usage. These additional commands may be sent in encrypted or unencrypted form as appropriate.","Suppose, for example, that electronic appliance () produces information it wishes to have printed by a VDE-capable printer . SPU () could establish a secure communications across path  with SPU (N) to provide a command instructing SPU (N) to decrypt the next block of data and store it as a decryption key and a limit. SPU () might then send a further command to SPU (N) to use the decryption key and associated limit to process any following encrypted print stream (or this command could be sent by CPU () to microcontroller (N)). Electronic appliance () could then begin sending encrypted information on path  for decryption and printing by printer . Upon receipt of each new block of information by printer , SPU (N) might first check to ensure that the limit is greater than zero. SPU (N) could then increment a usage meter value it maintains, and decrement the limit value. If the limit value is non-zero, SPU (N) could decrypt the information it has received and provide it to print mechanism  for printing. If the limit is zero, then SPU (N) would not send the received information to the print mechanism , nor would it decrypt it. Upon receipt of a command to stop, printer  could revert to a \u201cnon-secure\u201d mode in which it would print everything received by it across path  without permitting VDE processing.","The SPU (N) associated with printer  need not necessarily be disposed within the housing of the printer, but could instead be placed within an I\/O controller  for example (see ). This would allow at least some of the advantages similar to the ones discussed above to be provided without requiring a special VDE-capable printer . Alternatively, a SPU (N) could be provided both within printer  and within I\/O controller  communicating with the printer to provide advantages in terms of coordinating I\/O control and relieving processing burdens from the SPU  associated with the central processing electronic appliance (). When multiple VDE instances occur within an electronic appliance, one or more VDE secure subsystems may be \u201ccentral\u201d subsystems, that is \u201csecondary\u201d VDE instances may pass encrypted usage related information to one or more central secure subsystems so as to allow said central subsystem to directly control storage of said usage related information. Certain control information may also be centrally stored by a central subsystem and all or a portion of such information may be securely provided to the secondary secure subsystem upon its secure VDE request.","Such printer protections as described above may be particularly useful, for example, in the case of content providers that want to restrict or otherwise control (e.g., charge for) printing of their content. These controls can be easily enforced in the case of printers as described above having SPUs  (PPEs ), but may be difficult to enforce in the case of general-purpose printers that do not have an SPU (PPE). It may be relatively easy in such environments to use printer redirectors, print output to a file, or otherwise manipulate the system's printing functions. It therefore may be advantageous to provide a strategy that protects printed outputs in such general purpose printing environments.","So-called \u201cintelligent\u201d printers are capable of executing \u201cscripts\u201d or other programs comprising executable instructions or commands. Such \u201cscript\u201d languages can be used to provide a degree of tamper-resistance and security without the necessity of an SPU  (PPE ).","For example, it is possible to create a decryption program , in PostScript or another printer control language, that can be downloaded  to an associated printer , creating a program  stored inside the memory of printer . Because PostScript, as well as other similar printer control languages, is a general-purpose programming language, such a program could decrypt () an encrypted data stream  sent to such a printer . This approach would allow a local PPE  to prepare () files for printing inside the PPE by creating an encrypted file  to be printed and delivering it for processing by the decryption program inside the printer.","The decryption program  could be downloaded () as a printer initialization activity. Using features of the PostScript or other language, and\/or other mechanisms in the printer, the decryption program  could be locked into the memory of printer  so it could not be viewed and\/or modified except with appropriate authorization. The downloaded decryption program  could engage in an interactive secure protocol dialogue () with PPE  to demonstrate that it has not been tampered with, as a precondition to creating and delivering the encrypted printable content . The decryption program  could also be downloaded () to printer  prior to printing one or more encrypted content streams . The decryption program  could destroy itself after printing one or more encrypted content streams  to protect itself against viewing or tampering.","As shown in , the decryption program  could alternatively or additionally provide a fingerprinting function\u2014for example by selecting characters for printing from several related character fonts (-) in a pattern  that is generated from a fingerprint key  using standard cryptographic and\/or steganographic techniques. Because each of the characters , , etc. representing the letter \u201cA\u201d in fonts -is printed with a slightly different image, it is possible to identify the font from which each character was drawn by careful examination of the printed output, and thus to reconstruct the pattern  and from that the fingerprint key . There are similarly different patterns for other characters in fonts -, shown as -, etc., permitting a more efficient and\/or tamper-resistant encoding of fingerprint information.","For printers that use non-executable control languages, such as PCL5, scrambled fonts can be used without requiring that a decryption program be downloaded or otherwise installed in the printer. As shown in , it is possible download permuted font images  to such printers. Scrambled fonts  are created by rearranging the character images in a normal font . Such fonts allow PPE  to scramble the data before it is delivered for printing, so that it could not be easily interpreted except by being printed on a printer with appropriate scrambled fonts. As a simple substitution cipher, this could be inverted using automated techniques, but it provides good security against accidental disclosure. Plural scrambled fonts , scrambled according to different patterns, could be resident simultaneously in the printer, and used for different sections of the printed content or different pages. Scrambled fonts  could be downloaded and\/or replaced dynamically in the printer differently for each page or other division in the output.","The technique of using multiple character images for fingerprinting shown in  is also applicable to printers incorporating non-executable control languages, by downloading multiple fonts -incorporating different images for characters.","Portable Electronic Appliance","Electronic appliance  provided by the present invention may be portable.  shows one example of a portable electronic appliance . Portable appliance  may include a portable housing  that may be about the size of a credit card in one example. Housing  may connect to the outside world through, for example, an electrical connector  having one or more electrical contact pins (not shown). Connector  may electrically connect an external bus interface  internal to housing  to a mating connector of a host system . External bus interface  may, for example, comprise a PCMCIA (or other standard) bus interface to allow portable appliance  to interface with and communicate over a bus  of host system . Host  may, for example, be almost any device imaginable, such as a computer, a pay telephone, another VDE electronic appliance , a television, an arcade video game, or a washing machine, to name a few examples.","Housing  may be tamper resistant. (See discussion above relating to tamper resistance of SPU barrier .)","Portable appliance  in the preferred embodiment includes one or more SPUs  that may be disposed within housing . SPU  may be connected to external bus interface  by a bus  internal to housing . SPU  communicates with host  (through external bus interface ) over this internal bus .","SPU  may be powered by a battery  or other portable power supply that is preferably disposed within housing . Battery  may be, for example, a miniature battery of the type found in watches or credit card sized calculators. Battery  may be supplemented (or replaced) by solar cells, rechargeable batteries, capacitive storage cells, etc.","A random access memory (RAM)  is preferably provided within housing . RAM  may be connected to SPU  and not directly connected to bus , so that the contents of RAM  may be accessed only by the SPU and not by host  (except through and as permitted by the SPU). Looking at  for a moment, RAM  may be part of RAM  within the SPU , although it need not necessarily be contained within the same integrated circuit or other package that houses the rest of the SPU.","Portable appliance  RAM  may contain, for example, information which can be used to uniquely identify each instance of the portable appliance. This information may be employed (e.g. as at least a portion of key or password information) in authentication, verification, decryption, and\/or encryption processes.","Portable appliance  may, in one embodiment, comprise means to perform substantially all of the functions of a VDE electronic appliance . Thus, for example, portable appliance  may include the means for storing and using permissions, methods, keys, programs, and\/or other information, and can be capable of operating as a \u201cstand alone\u201d VDE node.","In a further embodiment, portable appliance  may perform preferred embodiment VDE functions once it has been coupled to an additional external electronic appliance . Certain information, such as database management permission(s), method(s), key(s), and\/or other important information (such as at least a portion of other VDE programs: administrative, user-interface, analysis, etc.) may be stored (for example as records) at an external VDE electronic appliance  that may share information with portable appliance .","One possible \u201cstand alone\u201d configuration for tamper-resistant, portable appliance  arrangements includes a tamper-resistant package (housing ) containing one or more processors (, ) and\/or other computing devices and\/or other control logic, along with random-access-memory . Processors ,  may execute permissions and methods wholly or at least in part) within the portable appliance . The portable appliance  may have the ability to encrypt information before the information is communicated outside of the housing  and\/or decrypt received information when said received information is received from outside of the housing. This version would also possess the ability to store at least a portion of permission, method, and\/or key information securely within said tamper resistant portable housing  on non-volatile memory.","Another version of portable appliance  may obtain permissions and\/or methods and\/or keys from a local VDE electronic appliance  external to the portable appliance  to control, limit, or otherwise manage a user's use of a VDE protected object. Such a portable appliance  may be contained within, received by, installed in, or directly connected to, another electronic appliance .","One example of a \u201cminimal\u201d configuration of portable appliance  would include only SPU  and battery  within housing  (the external bus interface  and the RAM  would in this case each be incorporated into the SPU block shown in the Figure). In other, enhanced examples of portable appliance , any or all of the following optional components may also be included within housing :\n\n","In such more enhanced versions, the display , keypad , memory device  and printer  may be connected to bus , or they might be connected to CPU  through an I\/O port\/controller portion (not shown) of the CPU. Display  may be used to display information from SPU , CPU  and\/or host . Keypad  may be used to input information to SPU , CPU  and\/or host . Printer  may be used to print information from any\/all of these sources. Removable\/replaceable memory  may comprise a memory cartridge or memory medium such as a bulk storage device, for providing additional long-term or short-term storage. Memory  may be easily removable from housing  if desired.","In one example embodiment, portable appliance  may have the form factor of a \u201csmart card\u201d (although a \u201csmart card\u201d form factor may provide certain advantages, housing  may have the same or different form factor as \u201cconventional\u201d smart cards). Alternatively, such a portable electronic appliance  may, for example, be packaged in a PCMCIA card configuration (or the like) which is currently becoming quite popular on personal computers and is predicted to become common for desk-top computing devices and Personal Digital Assistants. One advantageous form factor for the portable electronic appliance housing  may be, for example, a Type 1, 2, or 3 PCMCIA card (or other derivations) having credit card or somewhat larger dimensions. Such a form factor is conveniently portable, and may be insertable into a wide array of computers and consumer appliances, as well as receptacles at commercial establishments such as retail establishments and banks, and at public communications points, such as telephone or other telecommunication \u201cbooths.\u201d","Housing  may be insertable into and removable from a port, slot or other receptacle provided by host  so as to be physically (or otherwise operatively) connected to a computer or other electronic appliance. The portable appliance connector  may be configured to allow easy removability so that appliance  may be moved to another computer or other electronic appliance at a different location for a physical connection or other operative connection with that other device.","Portable electronic appliance  may provide a valuable and relatively simple means for a user to move permissions and methods between their (compatible) various electronic appliances , such as between a notebook computer, a desktop computer and an office computer. It could also be used, for example, to allow a consumer to visit a next door neighbor and allow that neighbor to watch a movie that the consumer had acquired a license to view, or perhaps to listen to an audio record on a large capacity optical disk that the consumer had licensed for unlimited plays.","Portable electronic appliance  may also serve as a \u201csmart card\u201d for financial and other transactions for users to employ in a variety of other applications such as, for example, commercial applications. The portable electronic appliance  may, for example, carry permission and\/or method information used to authorize (and possibly record) commercial processes and services.","An advantage of using the preferred embodiment VDE portable appliance  for financial transactions such as those typically performed by banks and credit card companies is that VDE allows financial clearinghouses (such as VISA, MasterCard, or American Express) to experience significant reductions in operating costs. The clearinghouse reduction in costs result from the fact that the local metering and budget management that occurs at the user site through the use of a VDE electronic appliance  such as portable appliance  frees the clearinghouse from being involved in every transaction. In contrast to current requirements, clearinghouses will be able to perform their functions by periodically updating their records (such as once a month). Audit and\/or budget \u201croll-ups\u201d may occur during a connection initiated to communicate such audit and\/or budget information and\/or through a connection that can occur at periodic or relatively periodic intervals and\/or during a credit updating, purchasing, or other portable appliance  transaction.","Clearinghouse VDE digital distribution transactions would require only occasional authorization and\/or audit or other administrative \u201croll-ups\u201d to the central service, rather than far more costly connections during each session. Since there would be no requirement for the maintenance of a credit card purchase \u201cpaper trail\u201d (the authorization and then forwarding of the credit card slip), there could be substantial cost reductions for clearinghouses (and, potentially, lower costs to users) due to reduction in communication costs, facilities to handle concurrent processing of information, and paper handling aspects of transaction processing costs. This use of a portable appliance  would allow credit enforcement to exploit distributed processing employing the computing capability in each VDE electronic appliance . These credit cost and processing advantages may also apply to the use of non-smart card and non-portable VDE electronic appliance ","Since VDE  may be configured as a highly secure commercial environment, and since the authentication processes supported by VDE employ digital signature processes which provide a legal validation that should be equivalent to paper documentation and handwritten signatures, the need for portable appliance  to maintain paper trails, even for more costly transactions, is eliminated. Since auditable billing and control mechanisms are built into VDE  and automated, they may replace traditional electronic interfaces to VISA, Master Card, AMEX, and bank debit accounts for digitally distributed other products and services, and may save substantial operating costs for such clearinghouses.","Portable appliance  may, if desired, maintain for a consumer a portable electronic history. The portable history can be, for example, moved to an electronic \u201cdock\u201d or other receptacle, in or operatively connected to, a computer or other consumer host appliance . Host appliance  could be, for example, an electronic organizer that has control logic at least in part in the form of a microcomputer and that stores information in an organized manner, e.g., according to tax and\/or other transaction categories (such as type of use or activity). By use of this arrangement, the consumer no longer has to maintain receipts or otherwise manually track transactions but nevertheless can maintain an electronic, highly secure audit trail of transactions and transaction descriptions. The transaction descriptions may, for example, securely include the user's digital signature, and optionally, the service or goods provider's digital signature.","When a portable appliance  is \u201cdocked\u201d to a host  such as a personal computer or other electronic appliance (such as an electronic organizer), the portable appliance  could communicate interim audit information to the host. In one embodiment, this information could be read, directly or indirectly, into a computer or electronic organizer money and\/or tax management program (for example, Quicken or Microsoft Money and\/or Turbo Tax and\/or Andrew Tobias' Managing Your Money). This automation of receipt management would be an enormous boon to consumers, since the management and maintenance of receipts is difficult and time-consuming, receipts are often lost or forgotten, and the detail from credit card billings is often wholly inadequate for billing and reimbursement purposes since credit card billings normally don't provide sufficient data on the purchased items or significant transaction parameters.","In one embodiment, the portable appliance  could support secure (in this instance encrypted and\/or authenticated) two-way communications with a retail terminal which may contain a VDE electronic appliance  or communicate with a retailer's or third party provider's VDE electronic appliance . During such a secure two-way communication between, for example, each participant's secure VDE subsystem, portable appliance  VDE secure subsystem may provide authentication and appropriate credit or debit card information to the retail terminal VDE secure subsystem. During the same or different communication session, the terminal could similarly, securely communicate back to the portable appliance  VDE secure subsystem details as to the retail transaction (for example, what was purchased and price, the retail establishment's digital signature, the retail terminal's identifier, tax related information, etc.).","For example, a host  receptacle for receiving and\/or attaching to portable appliance  could be incorporated into or operatively connected to, a retail or other commercial establishment terminal. The host terminal  could be operated by either a commercial establishment employee or by the portable appliance  holder. It could be used to, for example, input specific keyboard and\/or voice input specific information such as who was taken to dinner, why something was purchased, or the category that the information should be attached to. Information could then be automatically \u201cparsed\u201d and routed into securely maintained (for example, encrypted) appropriate database management records within portable appliance . Said \u201cparsing\u201d and routing would be securely controlled by VDE secure subsystem processes and could, for example, be based on category information entered in by the user and\/or based on class of establishment and\/or type (category) of expenditure information (or other use). Categorization can be provided by the retail establishment, for example, by securely communicating electronic category information as a portion, for example, of electronic receipt information or alternatively by printing a hard copy receipt using printer . This process of categorization may take place in the portable appliance  or, alternatively, it could be performed by the retail establishment and periodically \u201crolled-up\u201d and communicated to the portable appliance  holder.","Retail, clearinghouse, or other commercial organizations may maintain and use by securely communicating to appliance  one or more of generic classifications of transaction types (for example, as specified by government taxation rules) that can be used to automate the parsing of information into records and\/or for database information \u201croll-ups\u201d for; and\/or in portable appliance  or one or more associated VDE nodes. In such instances, host  may comprise an auxiliary terminal, for example, or it could comprise or be incorporated directly within a commercial establishments cash registers or other retail transactions devices. The auxiliary terminal could be menu and\/or icon driven, and allow very easy user selection of categorization. It could also provide templates, based on transaction type, that could guide the user through specifying useful or required transaction specific information (for example, purpose for a business dinner and\/or who attended the dinner). For example, a user might select a business icon, then select from travel, sales, meals, administration, or purchasing icons for example, and then might enter in very specific information and\/or a key word, or other code that might cause the downloading of a transaction's detail into the portable appliance . This information might also be stored by the commercial establishment, and might also be communicated to the appropriate government and\/or business organizations for validation of the reported transactions (the high level of security of auditing and communications and authentication and validation of VDE should be sufficiently trusted so as not to require the maintenance of a parallel audit history, but parallel maintenance may be supported, and maintained at least for a limited period of time so as to provide backup information in the event of loss or \u201cfailure\u201d of portable appliance  and\/or one or more appliance  associated VDE installations employed by appliance  for historical and\/or status information record maintenance). For example, of a retail terminal maintained necessary transaction information concerning a transaction involving appliance , it could communicate such information to a clearinghouse for archiving (and\/or other action) or it could periodically, for example, at the end of a business day, securely communicate such information, for example, in the form of a VDE content container object, to a clearinghouse or clearinghouse agent. Such transaction history (and any required VDE related status information such as available credit can be maintained and if necessary, employed to reconstruct the information in a portable appliance  so as to allow a replacement appliance to be provided to an appliance  user or properly reset internal information in data wherein such replacement and\/or resetting provides all necessary transaction and status information.","In a retail establishment, the auxiliary terminal host  might take the form of a portable device presented to the user, for example at the end of a meal. The user might place his portable appliance  into a smart card receptacle such as a PCMCIA slot, and then enter whatever additional information that might appropriately describe the transaction as well as satisfying whatever electronic appliance  identification procedure(s) required. The transaction, given the availability of sufficient credit, would be approved, and transaction related information would then be communicated back from the auxiliary terminal directly into the portable appliance . This would be a highly convenient mode of credit usage and record management.","The portable device auxiliary terminal might be \u201con-line,\u201d that is electronically communicating back to a commercial establishment and\/or third party information collection point through the use of cellular, satellite, radio frequency, or other communications means. The auxiliary terminal might, after a check by a commercial party in response to receipt of certain identification information at the collection point, communicate back to the auxiliary terminal whether or not to accept the portable appliance  based on other information, such as a bad credit record or a stolen portable appliance . Such a portable auxiliary terminal would also be very useful at other commercial establishments, for example at gasoline stations, rental car return areas, street and stadium vendors, bars, and other commercial establishments where efficiency would be optimized by allowing clerks and other personnel to consummate transactions at points other than traditional cash register locations.","As mentioned above, portable appliance  may communicate from time to time with other electronic appliances  such as, for example, a VDE administrator. Communication during a portable appliance  usage session may result from internally stored parameters dictating that the connection should take place during that current session (or next or other session) of use of the portable appliance. The portable appliance  can carry information concerning a real-time date or window of time or duration of time that will, when appropriate, require the communication to take place (e.g., perhaps before the transaction or other process which has been contemplated by the user for that session or during it or immediately following it). Such a communication can be accomplished quickly, and could be a secure, VDE two-way communication during which information is communicated to a central information handler. Certain other information may be communicated to the portable appliance  and\/or the computer or other electronic appliance to which the portable appliance  has been connected. Such communicated other information can enable or prevent a contemplated process from proceeding, and\/or make the portable appliance , at least in part, unusable or useable. Information communicated to the portable appliance  could include one or more modifications to permissions and methods, such as a resetting or increasing of one or more budgets, adding or withdrawing certain permissions, etc.","The permissions and\/or methods (i.e., budgets carried by the portable appliance  may have been assigned to it in conjunction with an \u201cencumbering\u201d of another, stationary or other portable VDE electronic appliance . In one example, a portable appliance  holder or other VDE electronic appliance  and\/or VDE electronic appliance  user could act as \u201cguarantor\u201d of the financial aspects of a transaction performed by another party. The portable appliance  of the holder would record an \u201cencumbrance,\u201d which may be, during a secure communication with a clearinghouse, be recorded and maintained by the clearinghouse and\/or some other financial services party until all or a portion of debt responsibilities of the other party were paid or otherwise satisfied. Alternatively or in addition, the encumbrance may also be maintained within the portable appliance , representing the contingent obligation of the guarantor. The encumbrance may be, by some formula included in a determination of the credit available to the guarantor. The credit transfer, acceptance, and\/or record management, and related processes, may be securely maintained by the security features provided by aspects of the present invention. Portable appliance  may be the sole location for said permissions and\/or methods for one or more VDE objects , or it may carry budgets for said objects that are independent of budgets for said objects that are found on another, non-portable VDE electronic appliance . This may allow budgets, for example, to be portable, without requiring \u201cencumbering\u201d and budget reconciliation.","Portable VDE electronic appliance  may carry (as may other VDE electronic appliance described) information describing credit history details, summary of authorizations, and usage history information (e.g., audit of some degree of transaction history or related summary information such as the use of a certain type\/class of information) that allows re-use of certain VDE protected information at no cost or at a reduced cost. Such usage or cost of usage may be contingent, at least in part, on previous use of one or more objects or class of objects or amount of use, etc., of VDE protected information.","Portable appliance  may also carry certain information which may be used, at least in part, for identification purposes. This information may be employed in a certain order (e.g. a pattern such as, for example, based on a pseudo-random algorithm) to verify the identity of the carrier of the portable appliance . Such information may include, for example, one's own or a wife's and\/or other relatives maiden names, social security number or numbers of one's own and\/or others, birth dates, birth hospital(s), and other identifying information. It may also or alternatively provide or include one or more passwords or other information used to identify or otherwise verify\/authenticate an individual's identity, such as voice print and retinal scan information. For example, a portable appliance  can be used as a smart card that carries various permissions and\/or method information for authorizations and budgets. This information can be stored securely within portable appliance  in a secure database  arrangement. When a user attempts to purchase or license an electronic product or otherwise use the \u201csmart card\u201d to authorize a process, portable appliance  may query the user for identification information or may initiate an identification process employing scanned or otherwise entered information (such as user fingerprint, retinal or voice analysis or other techniques that may, for example, employ mapping and\/or matching of provided characteristics to information securely stored within the portable appliance . The portable appliance  may employ different queries at different times (and\/or may present a plurality of queries or requests for scanning or otherwise entering identifying information) so as to prevent an individual who has come into possession of appropriate information for one or more of the \u201ctests\u201d of identity from being able to successfully employ the portable appliance .","A portable appliance  could also have the ability to transfer electronic currency or credit to another portable appliance  or to another individual's account, for example, using secure VDE communication of relevant content between secure VDE subsystems. Such transfer may be accomplished, for example, by telecommunication to, or presentation at, a bank which can transfer credit and\/or currency to the other account. The transfer could also occur by using two cards at the same portable appliance  docking station. For example, a credit transaction workstation could include dual PCMCIA slots and appropriate credit and\/or currency transfer application software which allows securely debiting one portable appliance  and \u201ccrediting\u201d another portable appliance (i.e., debiting from one appliance can occur upon issuing a corresponding credit and\/or currency to the other appliance). One portable appliance , for example, could provide an authenticated credit to another user. Employing two \u201csmart card\u201d portable appliance  would enable the user of the providing of \u201ccredit\u201d \u201csmart card\u201d to go through a transaction process in which said user provides proper identification (for example, a password) and identifies a \u201cpublic key\u201d identifying another \u201csmart card\u201d portable appliance . The other portable appliance  could use acceptance processes, and provide proper identification for a digital signature (and the credit and\/or currency sender may also digitally sign a transaction certificate so the sending act may not be repudiated and this certificate may accompany the credit and\/or currency as VDE container content. The transactions may involve, for example, user interface interaction that stipulates interest and\/or other terms of the transfer. It may employ templates for common transaction types where the provider of the credit is queried as to certain parameters describing the agreement between the parties. The receiving portable appliance  may iteratively or as a whole be queried as to the acceptance of the terms. VDE negotiation techniques described elsewhere in this application may be employed in a smart card transfer of electronic credit and\/or currency to another VDE smart card or other VDE installation.","Such VDE electronic appliance \/portable appliance  credit transfer features would significantly reduce the overhead cost of managing certain electronic credit and\/or currency activities by significantly automating these processes through extending the computerization of credit control and credit availability that was begun with credit cards and extended with debit cards. The automation of credit extension and\/or currency transfer and the associated distributed processing advantages described, including the absence of any requirement for centralized processing and telecommunications during each transaction, truly make credit and\/or currency, for many consumers and other electronic currency and\/or credit users, an efficient, trusted, and portable commodity.","The portable appliance  or other VDE electronic appliance , can, in one embodiment, also automate many tax collection functions. A VDE electronic appliance  may, with great security, record financial transactions, identify the nature of the transaction, and identify the required sales or related government transaction taxes, debit the taxes from the users available credit, and securely communicate this information to one or more government agencies directly at some interval (for example monthly), and\/or securely transfer this information to, for example, a financial clearinghouse, which would then transfer one or more secure, encrypted (or unsecure, calculated by clearinghouse, or otherwise computed) information audit packets (e.g., VDE content containers and employing secure VDE communication techniques) to the one or more appropriate, participating government agencies. The overall integrity and security of VDE  could ensure, in a coherent and centralized manner, that electronic reporting of tax related information (derived from one or more electronic commerce activities) would be valid and comprehensive. It could also act as a validating source of information on the transfer of sales tax collection (e.g., if, for example, said funds are transferred directly to the government by a commercial operation and\/or transferred in a manner such that reported tax related information cannot be tampered with by other parties in a VDE pathway of tax information handling). A government agency could select transactions randomly, or some subset or all of the reported transactions for a given commercial operation can be selected. This could be used to ensure that the commercial operation is actually paying to the government all appropriate collected funds required for taxes, and can also ensure that end-users are charged appropriate taxes for their transactions (including receipt of interest from bank accounts, investments, gifts, etc.","Portable appliance  financial and tax processes could involve template mechanisms described elsewhere herein. While such an electronic credit and\/or currency management capability would be particularly interesting if managed at least in part, through the use of a portable appliance , credit and\/or currency transfer and similar features would also be applicable for non-portable VDE electronic appliance 's connected to or installed within a computer or other electronic device.","User Notification Exception Interface (\u201cPop Up\u201d) ","As described above, the User Modification Exception Interface  may be a set of user interface programs for handling common VDE functions. These applications may be forms of VDE templates and are designed based upon certain assumptions regarding important options, specifically, appropriate to a certain VDE user model and important messages that must be reported given certain events. A primary function of the \u201cpop-up\u201d user interface  is to provide a simple, consistent user interface to, for example, report metering events and exceptions (e.g., any condition for which automatic processing is either impossible or arguably undesirable) to the user, to enable the user to configure certain aspects of the operation of her electronic appliance  and, when appropriate, to allow the user to interactively control whether to proceed with certain transaction processes. If an object contains an exception handling method, that method will control how the \u201cpop-up\u201d user interface  handles specific classes of exceptions.","The \u201cpop-user\u201d interface  normally enables handling of tasks not dedicated to specific objects , such as for example:\n\n",{"@attributes":{"id":"p-1367","num":"1924"},"figref":"FIG. 72A","b":["600","686","686","600","686"]},{"@attributes":{"id":"p-1368","num":"1925"},"figref":"FIG. 72B","b":["686","300"]},"The \u201cCancel\u201d button  in  cancels the user's trapped request. \u201cCancel\u201d is the default in this example for this dialog and can be activated, for example, by the return and enter keys on the user's keyboard , by a \u201cmouse click\u201d on that button, by voice command, or other command mechanisms. The \u201cApprove button\u201d , which must be explicitly selected by a mouse click or other command procedure, allows the user to approve the expense and proceed. The \u201cMore options\u201d control  expands the dialog to another level of detail which provides further options, an example of which is shown in .",{"@attributes":{"id":"p-1370","num":"1927"},"figref":["FIG. 72C","FIG. 72B"],"b":["686","2664"]},"In this particular example, the user is permitted to set \u201climits\u201d such as, for example, the session dollar limit amount (field ), a total transaction dollar limit amount (field ), a time limit (in minutes) (field ), and a \u201cunit limit\u201d (in number of units such as paragraphs, pages, etc.) (field ). Once the user has made her selections, she may \u201cclick on\u201d the OKAY button () to confirm the limit selections and cause them to take effect.","Thus, pop-up user interface dialogues can be provided to specify user preferences, such as setting limits on budgets and\/or other aspects of object content usage during any one session or over a certain duration of time or until a certain point in time. Dialogs can also be provided for selecting object related usage options such as selecting meters and budgets to be used with one or more objects. Selection of options may be applied to types (that is classes) of objects by associating the instruction with one or more identifying parameters related to the desired one or more types. User specified configuration information can set default values to be used in various situations, and can be used to limit the number or type of occasions on which the user's use of an object is interrupted by a \u201cpop-up\u201d interface  dialog. For example, the user might specify that a user request for VDE protected content should be automatically processed without interruption (resulting from an exceptions action) if the requested processing of information will not cost more than $25.00 and if the total charge for the entire current session (and\/or day and\/or week, etc.) is not greater than $200.00 and if the total outstanding and unpaid charge for use hasn't exceeded $2500.00.","Pop-up user interface dialogs may also be used to notify the user about significant conditions and events. For example, interface  may be used to:\n\n","Other important \u201cpop-up\u201d user interface  functions include dialogs which enable flexible browsing through libraries of properties or objects available for licensing or purchase, either from locally stored VDE protected objects and\/or from one or more various, remotely located content providers. Such function may be provided either while the user's computer is connected to a remote distributor's or clearinghouse's electronic appliance , or by activating an electronic connection to a remote source after a choice (such as a property, a resource location, or a class of objects or resources is selected). A browsing interface can allow this electronic connection to be made automatically upon a user selection of an item, or the connection itself can be explicitly activated by the user. See  for an example of such a \u201cbrowsing\u201d dialog.","Smart Objects","VDE  extends its control capabilities and features to \u201cintelligent agents.\u201d Generally, an \u201cintelligent agent\u201d can act as an emissary to allow a process that dispatches it to achieve a result the originating process specifies. Intelligent agents that are capable of acting in the absence of their dispatch process are particularly useful to allow the dispatching process to access, through its agent, the resources of a remote electronic appliance. In such a scenario, the dispatch process may create an agent (e.g., a computer program and\/or control information associated with a computer program) specifying a particular desired task(s), and dispatch the agent to the remote system. Upon reaching the remote system, the \u201cagent\u201d may perform its assigned task(s) using the remote system's resources. This allows the dispatch process to, in effect, extend its capabilities to remote systems where it is not present.","Using an \u201cagent\u201d in this manner increases flexibility. The dispatching process can specify, through its agent, a particular desired task(s) that may not exist or be available on the remote system. Using such an agent also provides added trustedness; the dispatch process may only need to \u201ctrust\u201d its agent, not the entire remote system. Agents have additional advantages.","Software agents require a high level of control and accountability to be effective, safe and useful. Agents in the form of computer viruses have had devastating effects worldwide. Therefore, a system that allows an agent to access it should be able to control it or otherwise prevent the agent from damaging important resources. In addition, systems allowing themselves to be accessed by an agent should sufficiently trust the agent and\/or provide mechanisms capable of holding the true dispatcher of the agent responsible for the agent's activities. Similarly, the dispatching process should be able to adequately limit and\/or control the authority of the agents it dispatches or else it might become responsible for unforeseen activities by the agent (e.g., the agent might run up a huge bill in the course of following imprecise instructions it was given by the process that dispatched it).","These significant problems in using software agents have not be adequately addressed in the past. The open, flexible control structures provided by VDE  addresses these problems by providing the desired control and accountability for software agents (e.g., agent objects). For example, VDE  positively controls content access and usage, provides guarantee of payment for content used, and enforces budget limits for accessed content. These control capabilities are well suited to controlling the activities of a dispatched agent by both the process that dispatches the agent and the resource accessed by the dispatched agent.","One aspect of the preferred embodiment provided by the present invention provides a \u201csmart object\u201d containing an agent. Generally, a \u201csmart object\u201d may be a VDE object  that contains some type(s) of software programs (\u201cagents\u201d) for use with VDE control information at a VDE electronic appliance . A basic \u201csmart object\u201d may comprise a VDE object  that, for example, contains (physically and\/or virtually):\n\n","Although this basic structure is sufficient to define a \u201csmart object,\u201d  shows a combination of containers and control information that provides one example of a particularly advantageous smart object structure for securely managing and controlling the operation of software agents.","As shown in , a smart object  may be constructed of a container , within which is embedded one or more further containers (, , etc.). Container  may further contain rules and control information for accessing and using these embedded containers , , etc. Container embedded in container  is what makes the object  a \u201csmart object.\u201d It contains an \u201cagent\u201d that is managed and controlled by VDE .","The rules and control information associated with container govern the circumstances under which the agent may be released and executed at a remote VDE site, including any limitations on execution based on the cost of execution for example. This rule and control information may be specified entirely in container , and\/or may be delivered as part of container , as part of another container (either within container  or a separately deliverable container), and\/or may be already present at the remote VDE site.","The second container is optional, and contains content that describes the locations at which the agent stored in container may be executed. Container may also contain rules and control information that describe the manner in which the contents of container may be used or altered. This rule and control information and\/or further rules () also contained within container may describe searching and routing mechanisms that may be used to direct the smart object  to a desired remote information resource. Container may contain and\/or reference rules and control information () that specify the manner in which searching and routing information use and any changes may be paid for.","Container is an optional content container that is initially \u201cempty\u201d when the smart object  is dispatched to a remote site. It contains rules and control information () for storing the content that is retrieved by the execution of the agent contained in container . Container may also contain limits on the value of content that is stored in the retrieval container so as to limit the amount of content that is retrieved.","Other containers in the container  may include administrative objects that contain audit and billing trails that describe the actions of the agent in container and any charges incurred for executing an agent at a remote VDE node. The exact structure of smart object  is dependent upon the type of agent that is being controlled, the resources it will need for execution, and the types of information being retrieved.","The smart object  in the example shown in  may be used to control and manage the operation of an agent in VDE . The following detailed explanation of an example smart object transaction shown in  may provide a helpful, but non-limiting illustration. In this particular example, assume a user is going to create a smart object  that performs a library search using the \u201cVery Fast and Efficient\u201d software agent to search for books written about some subject of interest (e.g., \u201cfire flies\u201d). The search engine is designed to return a list of books to the user. The search engine in this example may spend no more than $10.00 to find the appropriate books, may spend no more than $3.00 in library access or communications charges to get to the library, and may retrieve no more than $15.00 in information. All information relating to the search or use is to be returned to the user and the user will permit no information pertaining to the user or the agent to be released to a third party.","In this example, a dispatching VDE electronic appliance  constructs a smart object  like the one shown in . The rule set in is specified as a control set that contains the following elements:\n\n","The rule set in control set contains rules that specify the rights desired by this smart object . Specifically, this control set specifies that the software agent desires:\n\n","The rule set in control set specifies that container specifies the handling of all events related to its use. The rule set in control set specifies that container specifies the handling of all events related to its use. The rule set in control set specifies that container specifies the handling of all events related to its use. The rule set in control set specifies that container specifies the handling of all events related to its use.","Container is specified as containing the \u201cVery Fast and Efficient\u201d agent content, which is associated with the following rules set:\n\n","After container and its set are specified, they are constructed and embedded in the smart object container .","Container is specified as a content object with two types of content. Content type A is routing information and is read\/write in nature. Content type A is associated with a rules set that specifies:\n\n","Content type B is information that is used by the software agent to specify parameters for the agent. This content is specified as the string \u201cfire fly\u201d or \u201cfire flies\u201d. Content type B is associated with the following rule set:\n\n","After container and its control sets are specified, they are constructed and embedded in the smart object container .","Container is specified as a content object that is empty of content. It contains a control set that contains the following rules:\n\n","After container and its control sets are specified, they are constructed and embedded in the smart object container .","Container is specified as an empty administrative object with a control set that contains the following rules:\n\n","After container and its control sets are specified, they are constructed and embedded in the smart object container .","At this point, the smart object has been constructed and is ready to be dispatched to a remote VDE site. The smart object is sent to a remote VDE site (e.g., using electronic mail or another transport mechanism) that contains an information locator service  via path . The smart object is registered at the remote site  for the \u201citem locator service.\u201d The control set in container related to \u201citem locator service\u201d is selected and the rules contained within it activated at the remote site . The remote site  then reads the contents of container under the control of rule set and (), and permits writes of a list of location information into container pursuant to these rules. The item locator service writes a list of three items into the smart object, and then \u201cderegisters\u201d the smart object (now containing the location information) and sends it to a site  specified in the list written to the smart object via path . In this example, the user may have specified electronic mail for transport and a list of remote sites that may have the desired information is stored as a forwarding list.","The smart object , upon arriving at the second remote site , is registered with that second site. The site  provides agent execution and software description list services compatible with VDE as a service to smart objects. It publishes these services and specifies that it requires $10.00 to start the agent and $20\/piece for all information returned. The registration process compares the published service information against the rules stored within the object and determines that an acceptable overlap does not exist. Audit information for all these activities is written to the administrative object . The registration process then fails (the object is not registered), and the smart object is forwarded by site  to the next VDE site  in the list via path .","The smart object , upon arriving at the third remote site , is registered with that site. The site  provides agent execution and software description list services compatible with VDE as a service to smart objects. It publishes these services and specifies that it requires $1.00 to start the agent and $0.50\/piece for all information returned. The registration process compares the published service information against the rules stored within the object and determines that an acceptable overlap exists. The registration process creates a URT that specifies the agreed upon control information. This URT is used in conjunction with the other control information to execute the software agent under VDE control.","The agent software starts and reads its parameters out of container . It then starts searching the database and obtains  \u201chits\u201d in the database. The list of hits is written to container along with a completed control set that specifies the granularity of each item and that each item costs $0.50. Upon completion of the search, the budget for use of the service is incremented by $1.00 to reflect the use charge for the service. Audit information for all these activities is written to the administrative object ","The remote site  returns the now \u201cfull\u201d smart object  back to the original sender (the user) at their VDE node  via path . Upon arrival, the smart object  is registered and the database records are available. The control information specified in container is now a mix of the original control information and the control information specified by the service regarding remote release of their information. The user then extracts  records from the smart object  and has $10.00 charged to her VISA budget at the time of extraction.","In the above smart agent VDE examples, a certain organization of smart object  and its constituent containers is described. Other organizations of VDE and smart object related control information and parameter data may be created and may be used for the same purposes as those ascribed to object  in the above example.","Negotiation and Electronic Contracts","An electronic contract is an electronic form of an agreement including rights, restrictions, and obligations of the parties to the agreement. In many cases, electronic agreements may surround the use of digitally provided content; for example, a license to view a digitally distributed movie. It is not required, however, that an electronic agreement be conditioned on the presence or use of electronic content by one or more parties to the agreement. In its simplest form, an electronic agreement contains a right and a control that governs how that right is used.","Electronic agreements, like traditional agreements, may be negotiated between their parties (terms and conditions submitted by one or more parties may simply be accepted (cohesion contract) by one or more other parties and\/or such other parties may have the right to select certain of such terms and conditions (while others may be required)). Negotiation is defined in the dictionary as \u201cthe act of bringing together by mutual agreement.\u201d The preferred embodiment provides electronic negotiation processes by which one or more rights and associated controls can be established through electronic automated negotiation of terms. Negotiations normally require a precise specification of rights and controls associated with those rights. PERC and URT structures provide a mechanism that may be used to provide precise electronic representations of rights and the controls associated with those rights. VDE thus provides a \u201cvocabulary\u201d and mechanism by which users and creators may specify their desires. Automated processes may interpret these desires and negotiate to reach a common middle ground based on these desires. The results of said negotiation may be concisely described in a structure that may be used to control and enforce the results of the electronic agreement. VDE further enables this process by providing a secure execution space in which the negotiation process(es) are assured of integrity and confidentiality in their operation. The negotiation process(es) may also be executed in such a manner that inhibits external tampering with the negotiation.","A final desirable feature of agreements in general (and electronic representations of agreements in particular) is that they be accurately recorded in a non-repudiatable form. In traditional terms, this involves creating a paper document (a contract) that describes the rights, restrictions, and obligations of all parties involved. This document is read and then signed by all parties as being an accurate representation of the agreement. Electronic agreements, by their nature, may not be initially rendered in paper. VDE enables such agreements to be accurately electronically described and then electronically signed to prevent repudiation. In addition, the preferred embodiment provides a mechanism by which human-readable descriptions of terms of the electronic contract can be provided.","VDE provides a concise mechanism for specifying control sets that are VDE site interpretable. Machine interpretable mechanisms are often not human readable. VDE often operates the negotiation process on behalf of at least one human user. It is thus desirable that the negotiation be expressible in \u201chuman readable form.\u201d VDE data structures for objects, methods, and load modules all have provisions to specify one or more DTDs within their structures. These DTDs may be stored as part of the item or they may be stored independently. The DTD describes one or more data elements (MDE, UDE, or other related data elements) that may contain a natural language description of the function of that item. These natural language descriptions provide a language independent, human readable description for each item. Collections of items (for example, a BUDGET method) can be associated with natural language text that describes its function and forms a term of an electronically specified and enforceable contract. Collections of terms (a control set) define a contract associated with a specific right. VDE thus permits the electronic specification, negotiation, and enforcement of electronic contracts that humans can understand and adhere to.","VDE  enables the negotiation and enforcement of electronic contracts in several ways:\n\n","A simple form of a negotiation is a demand by one party to form an \u201cadhesion\u201d contract. There are few, if any, options that may be chosen by the other party in the negotiation. The recipient of the demand has a simple option; she may accept or reject the terms and conditions (control information) in the demand. If she accepts the conditions, she is granted rights subject to the specified control information. If she rejects the conditions, she is not granted the rights. PERC and URT structures may support negotiation by demand; a PERC or control set from a PERC may be presented as a demand, and the recipient may accept or reject the demand (selecting any permitted method options if they are presented).","A common example of this type of negotiation today is the purchase of software under the terms of a \u201cshrink-wrap license.\u201d Many widely publicized electronic distribution schemes use this type of negotiation. CompuServe is an example of an on-line service that operates in the same manner. The choice is simple: either pay the specified charge or don't use the service or software. VDE supports this type of negotiation with its capability to provide PERCS and URTs that describe rights and control information, and by permitting a content owner to provide a REGISTER method that allows a user to select from a set of predefined method options. In this scenario, the REGISTER method may contain a component that is a simplified negotiation process.","A more complex form of a negotiation is analogous to \u201chaggling.\u201d In this scenario, most of the terms and conditions are fixed, but one or more terms (e.g., price or payment terms) are not. For these terms, there are options, limits, and elements that may be negotiated over. A VDE electronic negotiation between two parties may be used to resolve the desired, permitted, and optional terms. The result of the electronic negotiation may be a finalized set of rules and control information that specify a completed electronic contract. A simple example is the scenario for purchasing software described above adding the ability of the purchaser to select a method of payment (VISA, Mastercard, or American Express). A more complex example is a scenario for purchasing information in which the price paid depends on the amount of information about the user that is returned along with a usage audit trail. In this second example, the right to use the content may be associated with two control sets. One control set may describe a fixed (\u201chigher\u201d) price for using the content. Another control set may describe a fixed (\u201clower\u201d) price for using the content with additional control information and field specifications requiring collection and return the user's personal information. In both of these cases, the optional and permitted fields and control sets in a PERC may describe the options that may be selected as part of the negotiation. To perform the negotiation, one party may propose a control set containing specific fields, control information, and limits as specified by a PERC; the other party may pick and accept from the control sets proposed, reject them, or propose alternate control sets that might be used. The negotiation process may use the permitted, required, and optional designations in the PERC to determine an acceptable range of parameters for the final rule set. Once an agreement is reached, the negotiation process may create a new PERC and\/or URT that describes the result of the negotiation. The resulting PERCs and\/or URTs may be \u201csigned\u201d (e.g., using digital signatures) by all of the negotiation processes involved in the negotiation to prevent repudiation of the agreement at a later date.","Additional examples of negotiated elements are: electronic cash, purchase orders, purchase certificates (gift certificates, coupons), bidding and specifications, budget \u201crollbacks\u201d and reconciliation, currency exchange rates, stock purchasing, and billing rates.","A set of PERCs that might be used to support the second example described above is presented in  (PERC sent by the content owner), B (PERC created by user to represent their selections and rights), and C (PERC for controlling the negotiation process). These PERCs might be used in conjunction with any of the negotiation process(es) and protocols described later in this section.",{"@attributes":{"id":"p-1415","num":"2003"},"figref":"FIG. 75A","b":["3100","3102","3102","3102","3102","3102","3102","3104","0","3106"],"i":["a","b ","a ","b ","a","b "]},"Control set in this PERC  describes a mechanism by which the user may obtain the content without providing any information about its user to the content provider. This control set specifies a well-known vending control method and set of required methods and method options. Specifically, in this example, control set defines a BUDGET method  (e.g., one of VISA, Mastercard, or American Express) and it defines a BILLING method  that specifies a charge (e.g., a one-time charge of $100.00).","Control set in this PERC  describes another mechanism by which the user may obtain the content. In this example, the control set specifies a different vending control method and a set of required methods and method options. This second control set specifies a BUDGET method  (e.g., one of VISA, Mastercard, or American Express), a BILLING method  that specifies a charge (e.g., a lesser one-time charge such as $25.00) and an AUDIT method  that specifies a set of desired and required fields. The required and desired field specification  may take the form of a DTD specification, in which, for example, the field names are listed.","The content creator may \u201cprefer\u201d one of the two control sets (e.g., control set ) over the other one. If so, the \u201cpreferred\u201d control set may be \u201coffered\u201d first in the negotiation process, and withdrawn in favor of the \u201cnon-preferred\u201d control set if the other party to the negotiation \u201crejects\u201d the \u201cpreferred\u201d control set.","In this example, these two control sets , may share a common BUDGET method specification. The BUDGET method specification may be included in the CSR  or CS  control sets if desired. Selecting control set (use with no information passback) causes a unique component assembly to be assembled as specified by the PERC . Specifically, in this example it selects the \u201cVending\u201d CONTROL method , the BILLING method  for a $100 fixed charge, and the rest of the control information specified by CSR  and CS . It also requires the user to specify her choice of acceptable BUDGET method (e.g., from the list including VISA, Mastercard, and American Express). Selecting control set assembles a different component assembly using the \u201cVending with \u2018response card\u2019\u201d CONTROL method , the BILLING method  (e.g., for a $25 fixed charge), an AUDIT method  that requires the fields listed in the Required Fields DTD . The process may also select as many of the fields listed in the Desired Fields DTD  as are made available to it. The rest of the control information is specified by CSR  and CS . The selection of control set also forces the user to specify their choice of acceptable BUDGET methods (e.g., from the list including VISA, Mastercard, and American Express).",{"@attributes":{"id":"p-1420","num":"2008"},"figref":"FIG. 75B","b":["3125","3127","3129","3131","3131","3131","3133","3135","3135","3137","3131","3139","3131","3141","3143"],"i":["a","b ","a ","a ","b "]},{"@attributes":{"id":"p-1421","num":"2009"},"figref":["FIG. 75E","FIG. 75D","FIG. 75F"],"b":["3200","3200","3202","3204","3202","3160","3202","3200","690","600","3202","3200","3202","3200","600","690","3202","3200","690","3202","2","690","600","3202","3200","600","690","610","3202","690","3206","3208","4","3208","5","3208","3"]},"Digital signatures  shown in the  electronic contract  may comprise, for example, conventional digital signatures using public key techniques as described above. Some electronic contracts  may not bear any digital signatures . However, it may be desirable to require the electronic appliance  of the user who is a party to the electronic contract  to digitally \u201csign\u201d the electronic contract so that the user cannot later repudiate the contract, for evidentiary purposes, etc. Multiple parties to the same contract may each digitally \u201csign\u201d the same electronic contract  similarly to the way multiple parties to a contract memorialized in a written instrument use an ink pen to sign the instrument.","Although each of the clauses  of electronic contract  may ultimately correspond to a collection of data and code that may be executed by a PPE , there may in some instances be a need for rendering a human readable version of the electronic contract. This need can be accommodated by, as mentioned above, providing text within one or more DTDs associated with the component assembly or assemblies  used to \u201cself-execute\u201d the contract. Such text might, for example, describe from a functional point of view what the corresponding electronic contract clause  means or involves, and\/or might describe in legally enforceable terms what the legal obligation under the contract is or represents. \u201cTemplates\u201d (described elsewhere herein) might be used to supply such text from a text library. An expert system and\/or artificial intelligence capability might be used to impose syntax rules that bind different textual elements together into a coherent, humanly readable contract document. Such text could, if necessary, be reviewed and modified by a \u201chuman\u201d attorney in order customize it for the particular agreement between the parties and\/or to add further legal obligations augmenting the \u201cself-executing\u201d electronic obligations embodied within and enforced by the associated component assemblies  executing on a VDE electronic appliance . Such text could be displayed automatically or on demand upon execution of the electronic contract, or it could be used to generate a printed humanly-readable version of the contract at any time. Such a document version of the electronic contract  would not need to be signed in ink by the parties to the agreement (unless desired) in view of the fact that the digital signatures  would provide a sufficiently secure and trusted evidentiary basis for proving the parties' mutual assent to all the terms and conditions within the contract.","In the preferred embodiment, the negotiation process executes within a PPE  under the direction of a further PERC that specifies the process.  shows an example of a PERC  that specifies a negotiation process. The PERC  contains a single right  for negotiation, with two permitted control sets , described for that right. The first control set may be used for a \u201ctrusted negotiation\u201d; it references the desired negotiation CONTROL method (\u201cNegotiate\u201d)  and references (in fields , ) two UDEs that this CONTROL method will use. These UDEs may be, for example, the PERCs ,  shown in . The second control set may be used by \u201cmultiple negotiation\u201d processes to manage the negotiation, and may provide two negotiation methods: \u201cNegotiatel,\u201d and \u201cNegotiate2\u201d. Both negotiation processes may be described as required methods (\u201cNegotiate1\u201d and \u201cNegotiate2\u201d) ,  that take respective PERCs ,  as their inputs. The CONTROL method  for this control set in this example may specify the name of a service that the two negotiation processes will use to communicate with each other, and may also manage the creation of the URT resulting from the negotiation.","When executed, the negotiation process(es) specified by the PERC  shown in  may be provided with the PERCs ,  as input that will be used as the basis for negotiation. In this example, the choice of negotiation process type (trusted or multiple) may be made by the executing VDE node. The PERC  shown in  might be, for example, created by a REGISTER method in response to a register request from a user. The process specified by this PERC  may then be used by a REGISTER method to initiate negotiation of the terms of an electronic contract.","During this example negotiation process, the PERCs ,  shown in  act as input data structures that are compared by a component assembly created based on PERC  shown in . The component assembly specified by the control sets may be assembled and compared, starting with required \u201cterms,\u201d and progressing to preferred\/desired \u201cterms\u201d and then moving on to permitted \u201cterms,\u201d as the negotiation continues. Method option selections are made using the desired method and method options specified in the PERCs , . In this example, a control set for the PERC  shown in  may be compared against the PERC  shown in . If there is a \u201cmatch,\u201d the negotiation is successfully concluded and \u201cresults\u201d are generated.","In this embodiment, the results of such negotiation will generally be written as a URT and \u201csigned\u201d by the negotiation process(es) to indicate that an agreement has been reached. These electronic signatures provide the means to show that a (virtual) \u201cmeeting of minds\u201d was reached (one of the traditional legal preconditions for a contract to exist). An example of the URT  that would have been created by the above example is shown in .","This URT  (which may itself be a PERC ) includes a control set  that reflects the \u201cterms\u201d that were \u201cagreed upon\u201d in the negotiation. In this example, the \u201cagreed upon\u201d terms must \u201cmatch\u201d terms required by input PERCs ,  in the sense that they must be \u201cas favorable as\u201d the terms required by those PERCs. The negotiation result shown includes, for example, a \u201cnegotiated\u201d control set  that in some sense corresponds to the control set of the  PERC  and to the control set of the  control set . Resulting \u201cnegotiated\u201d control set  thus includes a required BUDGET method  that corresponds to the control set  desired BUDGET method  but which is \u201cwithin\u201d the range of control sets allowed by control set  required BUDGET method . Similarly, resulting negotiated control set  includes a required AUDIT method  that complies with the requirements of both PERC  required AUDIT method  and PERC  required AUDIT method . Similarly, resulting negotiated control set  includes a required BILLING method  that \u201cmatches\u201d or complies with each of PERC  required BILLING method  and PERC  required BILLING method .","Another class of negotiation is one under which no rules are fixed and only the desired goals are specified. The negotiation processes for this type of negotiation may be very complex. It may utilize artificial intelligence, fuzzy logic, and\/or related algorithms to reach their goals. VDE supports these types of processes by providing a mechanism for concisely specifying rights, control information, fields and goals (in the form of desired rights, control information, and fields). Goals for these types of processes might be specified as one more control sets that contain specific elements that are tagged as optional, permitted, or desired.","Types of Negotiations","Negotiations in the preferred embodiment may be structured in any of the following ways:","1. shared knowledge","2. trusted negotiator","3. \u201czero-based\u201d knowledge","\u201cShared knowledge\u201d negotiations are based on all parties knowing all of the rules and constraints associated with the negotiation. Demand negotiations are a simple case of shared knowledge negotiations; the demander presents a list of demands that must be accepted or rejected together. The list of demands comprises a complete set of knowledge required to accept or reject each item on the list. VDE enables this class of negotiation to occur electronically by providing a mechanism by which demands may be encoded, securely passed, and securely processed between and with secure VDE subsystems using VDE secure processing, and communication capabilities. Other types of shared knowledge negotiations employed by VDE involve the exchange of information between two or more negotiating parties; the negotiation process(es) can independently determine desired final outcome(s) based on their independent priorities. The processes can then negotiate over any differences. Shared knowledge negotiations may require a single negotiation process (as in a demand type negotiation) or may involve two or more cooperative processes.  illustrate scenarios in which one and two negotiation processes are used in a shared knowledge negotiation.",{"@attributes":{"id":"p-1435","num":"2023"},"figref":["FIG. 76A","FIG. 75C"],"b":["3172","808","3172","3150","3172","3160"]},{"@attributes":{"id":"p-1436","num":"2024"},"figref":"FIG. 76B","b":["3172","3172","808","3150","3160","3172","3172"]},"Single and multiple negotiation processes may be used for specific VDE sites. The negotiation processes are named, and can be accessed using well known method names. PERCs and URTs may be transported in administrative or smart objects to remote VDE sites for processing at that site, as may the control PERCs and REGISTER method that controls the negotiation.","Multiple negotiation processes require the ability to communicate between these processes : including secure communication between secure processes that are present at physically separate VDE sites (secure subsystems). VDE generalizes the inter-process communication into a securely provided service that can be used if the configuration requires it. The inter-process communication uses a negotiation protocol to exchange information about rule sets between processes . An example of a negotiation protocol includes the following negotiation \u201cprimitives\u201d:",{"@attributes":{"id":"p-1439","num":"2027"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WANT","Want a set of terms and conditions"]},{"entry":["ACCEPT","Accept a set of terms and conditions"]},{"entry":["REJECT","Reject a set of terms and conditions"]},{"entry":["OFFER","Offer a set of terms and conditions in exchange for"]},{"entry":[{},"other terms and conditions"]},{"entry":["HAVE","Assert a set of terms and conditions are possible or"]},{"entry":[{},"desirable"]},{"entry":["QUIT","Assert the end of the negotiation without reaching an"]},{"entry":[{},"agreement"]},{"entry":["AGREEMENT","Conclude the negotiation and pass the rule set for"]},{"entry":[{},"signature"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The WANT primitive takes rights and control set (or parts of control sets) information, and asserts to the other process(es)  that the specified terms are desired or required. Demand negotiations are a simple case of a WANT primitive being used to assert the demand. This example of a protocol may introduce a refined form of the WANT primitive, REQUIRE. In this example, REQUIRE allows a party to set terms that she decides are necessary for a contract to be formed, WANT may allow the party to set terms that are desirable but not essential. This permits a distinction between \u201cmust have\u201d and \u201cwould like to have.\u201d","In this example, WANT primitives must always be answered by an ACCEPT, REJECT, or OFFER primitive. The ACCEPT primitive permits a negotiation process  to accept a set of terms and conditions. The REJECT primitive permits a process  to reject an offered set of terms and conditions. Rejecting a set of required terms and conditions may terminate the negotiation. OFFER permits a counter-offer to be made.","The HAVE, QUIT, and AGREEMENT primitives permit the negotiation protocols to pass information about rule sets. Shared knowledge negotiations may, for example, start with all negotiation processes A-N asserting HAVE (my PERC) to the other processes. HAVE is also used when an impasse is reached and one process  needs to let the other process  know about permitted options. QUIT signals an unsuccessful end of the negotiation without reaching an agreement, while AGREEMENT signals a successful end of an agreement and passes the resulting \u201cnegotiated\u201d PERC\/URT  to the other process(es)  for signature.","In \u201ctrusted negotiator\u201d negotiations, all parties provide their demands and preferences to a \u201ctrusted\u201d negotiator and agree to be bound by her decision. This is similar to binding arbitration in today's society. VDE enables this mode of negotiation by providing an environment in which a \u201ctrusted\u201d negotiation service may be created. VDE provides not only the mechanism by which demands, desires, and limits may be concisely specified (e.g., in PERCs), but in which the PERCs may be securely transferred to a \u201ctrusted\u201d negotiation service along with a rule set that specifies how the negotiation will be conducted, and by providing a secure execution environment so that the negotiation process may not be tampered with. Trusted negotiator services can be used at VDE sites where the integrity of the site is well known. Remote trusted negotiation services can be used by VDE sites that do not possess sufficient computing resources to execute one or more negotiation process(es); they can establish a communication link to a VDE site that provides this service and permits the service to handle the negotiation on their behalf.","\u201cZero-based\u201d knowledge negotiations share some characteristics of the zero-based knowledge protocols used for authentication. It is well understood in the art how to construct a protocol that can determine if a remote site is the holder of a specific item without exchanging or exposing the item. This type of protocol can be constructed between two negotiation processes operating on at least one VDE site using a control set as their knowledge base. The negotiation processes may exchange information about their control sets, and may make demands and counter proposals regarding using their individual rule sets. For example, negotiation process A may communicate with negotiation process B to negotiate rights to read a book. Negotiation process A specifies that it will pay not more than $10.00 for rights to read the book, and prefers to pay between $5.00 and $6.00 for this right. Process A's rule set also specifies that for the $5.00 option, it will permit the release of the reader's name and address. Process B's rule set specifies that it wants $50.00 for rights to read the book, and will provide the book for $5.50 if the user agrees to release information about himself. The negotiation might go something like this:",{"@attributes":{"id":"p-1445","num":"2033"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Process A","<--->","Process B"]},{"entry":["Want (right to read, unrestricted)","---->"]},{"entry":[{},"<----","Have(right to read,"]},{"entry":["Offer (right to read, tender user info)","---->","unrestricted, $50)"]},{"entry":[{},"<----","Have(right to read, tender"]},{"entry":[{},{},"user info, $5.50)"]},{"entry":["Accept(right to read, tender user","---->"]},{"entry":"info, $5.50)"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In the above example, process A first specifies that it desires the right to read the book without restrictions or other information release. This starting position is specified as a rights option in the PERC that process A is using as a rule. Process B checks its rules and determines that an unrestricted right to read is indeed permitted for a price of $50. It replies to process A that these terms are available. Process A receives this reply and checks it against the control set in the PERC it uses as a rule base. The $50 is outside the $10 limit specified for this control set, so Process A cannot accept the offer. It makes a counter offer (as described in another optional rights option) of an unrestricted right to read coupled with the release of the reader's name and address. The name and address fields are described in a DTD referenced by Process A's PERC. Process B checks its rules PERC and determines that an unrestricted right to read combined with the release of personal information is a permitted option. It compares the fields that would be released as described in the DTD provided by Process A against the desired fields in a DTD in its own PERC, and determines an acceptable match has occurred. It then sends an offer for unrestricted rights with the release of specific information for the cost of $5.50 to Process A. Process A compares the right, restrictions, and fields against its rule set and determines that $5.50 is within the range of $5-$6 described as acceptable in its rule set. It accepts the offer as made. The offer is sealed by both parties \u201csigning\u201d a new PERC that describes the results of the final negotiation (unrestricted rights, with release of user information, for $5.50). The new PERC may be used by the owner of Process A to read the content (the book) subject to the described terms and conditions.","Further Chain of Handling Model","As described in connection with , there are four (4) \u201cparticipant\u201d instances of VDE  in one example of a VDE chain of handling and control used, for example, for content distribution. The first of these participant instances, the content creator , is manipulated by the publisher, author, rights owner or distributor of a literary property to prepare the information for distribution to the consumer. The second participant instance, VDE rights distributor , may distribute rights and may also administer and analyze customers' use of VDE authored information. The third participant instance, content user , is operated by users (included end-users and distributors) when they use information. The fourth participant instance, financial clearinghouse  enables the VDE related clearinghouse activities. A further participant, a VDE administrator, may provide support to keep VDE  operating properly. With appropriate authorizations and Rights Operating System components installed, any VDE electronic appliance  can play any or all of these participant roles.","Literary property is one example of raw material for VDE . To transfer this raw material into finished goods, the publisher, author, or rights owner uses tools to transform digital information (such as electronic books, databases, computer software and movies) into protected digital packages called \u201cobjects.\u201d Only those consumers (or others along the chain of possession such as a redistributor) who receive permission from a distributor  can open these packages. VDE packaged content can be constrained by \u201crules and control information\u201d provided by content creator  and\/or content distributor \u2014or by other VDE participants in the content's distribution pathway, i.e., normally by participants \u201ccloser\u201d to the creation of the VDE secured package than the participant being constrained.","Once the content is packaged in an \u201cobject,\u201d the digital distribution process may begin. Since the information packages themselves are protected, they may be freely distributed on CD-ROM disks, through computer networks, or broadcast through cable or by airwaves. Informal \u201cout of channel\u201d exchange of protected packages among end-users does not pose a risk to the content property rights. This is because only authorized individuals may use such packages. In fact, such \u201cout of channel\u201d distribution may be encouraged by some content providers as a marginal cost method of market penetration. Consumers with usage authorizations (e.g., a VISA clearinghouse budget allowing a certain dollar amount of usage) may, for example, be free to license classes of out of channel VDE protected packages provided to them, for example, by a neighbor.","To open a VDE package and make use of its content, an end-user must have permission. Distributors  can grant these permissions, and can very flexibly (if permitted by senior control information) limit or otherwise specify the ways in which package contents may be used. Distributors  and financial clearinghouses  also typically have financial responsibilities (they may be the same organization in some circumstances if desired). They ensure that any payments required from end-users fulfill their own and any other participant's requirements. This is achieved by auditing usage.","Distributors  using VDE  may include software publishers, database publishers, cable, television, and radio broadcasters, and other distributors of information in electronic form. VDE  supports all forms of electronic distribution, including distribution by broadcast or telecommunications, or by the physical transfer of electronic storage media. It also supports the delivery of content in homogeneous form, seamlessly integrating information from multiple distribution types with separate delivery of permissions, control mechanisms and content.","Distributors  and financial clearinghouses  may themselves be audited based on secure records of their administrative activities and a chain of reliable, \u201ctrusted\u201d processes ensures the integrity of the overall digital distribution process. This allows content owners, for example, to verify that they are receiving appropriate compensation based on actual content usage or other agreed-upon bases.","Since the end-user  is the ultimate consumer of content in this example, VDE  is designed to provide protected content in a seamless and transparent way\u2014so long as the end-user stays within the limits of the permissions she has received. The activities of end-user  can be metered so that an audit can be conducted by distributors . The auditing process may be filtered and\/or generalized to satisfy user privacy concerns. For example, metered, recorded VDE content and\/or appliance usage information may be filtered prior to reporting it to distributor  to prevent more information than necessary from being revealed about content user  and\/or her usage.","VDE  gives content providers the ability to recreate important aspects of their traditional distribution strategies in electronic form and to innovatively structure new distribution mechanisms appropriate to their individual needs and circumstances. VDE  supports relevant participants in the chain of distribution, and also enables their desired pricing strategies, access and redistribution permissions, usage rules, and related administrative and analysis procedures. The reusable functional primitives of VDE  can be flexibly combined by content providers to reflect their respective distribution objectives. As a result, content providers can feed their information into established distribution channels and also create their own personalized distribution channels.","A summary of the roles of the various participants of virtual distribution environment  is set forth in the table below:",{"@attributes":{"id":"p-1456","num":"2044"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Role","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u201cTraditional\u201d Participants"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Content creator","Packager and initial distributor of digital information"]},{"entry":["Content owner","Owner of the digital information."]},{"entry":["Distributors","Provide rights distribution services for budgets"]},{"entry":[{},"and\/or content."]},{"entry":["Auditor","Provides services for processing and reducing usage"]},{"entry":[{},"based audit trails."]},{"entry":["Clearinghouse","Provides intermediate store and forward services for"]},{"entry":[{},"content and audit information. Also, typically"]},{"entry":[{},"provides a platform for other services, including"]},{"entry":[{},"third party financial providers and auditors."]},{"entry":["Network provider","Provides communication services between sites and"]},{"entry":[{},"other participants."]},{"entry":["Financial","Provider of third party sources of electronic funds to"]},{"entry":["providers","end-users and distributors. Examples of this class of"]},{"entry":[{},"users are VISA, American Express, or a government."]},{"entry":["End Users","Consumers of information."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Other Participants"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Redistributor","Redistributes rights to use content based on chain of"]},{"entry":[{},"handling restrictions from content providers and\/or"]},{"entry":[{},"other distributors."]},{"entry":["VDE","Provider of trusted services for support of VDE"]},{"entry":["Administrator","nodes."]},{"entry":["Independent","Provider of services for processing and summarizing"]},{"entry":["Audit","audit trail data. Provides anonymity to end-users"]},{"entry":["Processor","while maintaining the comprehensive audit"]},{"entry":[{},"capabilities required by the content providers."]},{"entry":["Agents","Provides distributed presence for end-users and other"]},{"entry":[{},"VDE participants."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Of these various VDE participants, the \u201credistributor,\u201d \u201cVDE Administrator,\u201d \u201cindependent audit processor\u201d and \u201cagents\u201d are, in certain respects \u201cnew\u201d participants that may have no counterpart in many \u201ctraditional\u201d business models. The other VDE participants (i.e., content provider, content owner, distributors, auditor, clearinghouse, network provider and financial providers) have \u201ctraditional\u201d business model counterparts in the sense that traditional distribution models often included non-electronic participants performing some of the same business roles they serve in the virtual distribution environment .","VDE distributors  may also include \u201cend-users\u201d who provide electronic information to other end-users. For example,  shows a further example of a virtual distribution environment  chain of handling and control provided by the present invention. As compared to ,  includes a new \u201cclient administrator\u201d participant . In addition,  shows several different content users (), (), . . . , () that may all be subject to the \u201cjurisdiction\u201d of the client administrator . Client administrator  may be, for example, a further rights distributor within a corporation or other organization that distributes rights to employees or other organization participant units (such as divisions, departments, networks, and or groups, etc.) subject to organization-specific \u201crules and control information.\u201d The client administrator  may fashion rules and control information for distribution, subject to \u201crules and control\u201d specified by creator  and\/or distributor .","As mentioned above, VDE administrator is a trusted VDE node that supports VDE  and keeps it operating properly. In this example, VDE administrator may provide, among others, any of all of the following:\n\n","All participants of VDE  have the innate ability to participate in any role. For example, users may gather together existing protected packages, add (create new content) packages of their own, and create new products. They may choose to serve as their own distributor, or delegate this responsibility to others. These capabilities are particularly important in the object oriented paradigm which is entering the marketplace today. The production of compound objects, object linking and embedding, and other multi-source processes will create a need for these capabilities of VDE . The distribution process provided by VDE  is symmetrical; any end-user may redistribute information received to other end-users, provided they possess permission from and follow the rules established by the distribution chain VDE control information governing redistribution. End-users also may, within the same rules and permissions restriction, encapsulate content owned by others within newly published works and distribute these works independently. Royalty payments for the new works may be accessed by the publisher, distributors, or end-users, and may be tracked and electronically collected at any stage of the chain.","Independent financial providers can play an important role in VDE . The VDE financial provider role is similar to the role played by organizations such as VISA in traditional distribution scenarios. In any distribution model, authorizing payments for use of products or services and auditing usage for consistency and irregularities, is critical. In VDE , these are the roles filled by independent financial providers. The independent financial providers may also provide audit services to content providers. Thus, budgets or limits on use, and audits, or records of use, may be processed by (and may also be put in place by) clearinghouses , and the clearinghouses may then collect usage payments from users . Any VDE user  may assign the right to process information or perform services on their behalf to the extend allowed by senior control information. The arrangement by which one VDE participant acts on behalf of another is called a \u201cproxy.\u201d Audit, distribution, and other important rights may be \u201cproxied\u201d if permitted by the content provider. One special type of \u201cproxy\u201d is the VDE administrator . A VDE administrator is an organization (which may be acting also as a financial clearinghouse ) that has permission to manage (for example, \u201cintervene\u201d to reset) some portion or all of VDE secure subsystem control information for VDE electronic appliances. This administration right may extend only to admitting new appliances to a VDE infrastructure and to recovering \u201ccrashed\u201d or otherwise inoperable appliances, and providing periodic VDE updates.","More on Object Creation, Distribution Methods, Budgets, and Audits","VDE node electronic appliances  in the preferred embodiment can have the ability to perform object creation, distribution, audit collection and usage control functions provided by the present invention. Incorporating this range of capabilities within each of many electronic appliances  provided by the preferred embodiment is important to a general goal of creating a single (or prominent) standard for electronic transactions metering, control, and billing, that, in its sum of installations, constitutes a secure, trusted, virtual transaction\/distribution management environment. If, generally speaking, certain key functions were generally or frequently missing, at least in general purpose VDE node electronic appliances , then a variety of different products and different standards would come forth to satisfy the wide range of applications for electronic transaction\/distribution management; a single consistent set of tools and a single \u201crational,\u201d trusted security and commercial distribution environment will not have been put in place to answer the pressing needs of the evolving \u201celectronic highway.\u201d Certain forms of certain electronic appliances  containing VDE nodes which incorporate embedded dedicated VDE microcontrollers such as certain forms of video cassette players, cable television converters and the like may not necessarily have or need full VDE capabilities. However, the preferred embodiment provides a number of distributed, disparately located electronic appliances  each of which desirably include authoring, distribution, extraction, audit, and audit reduction capabilities, along with object authoring capabilities.","The VDE object authoring capabilities provided by the preferred embodiment provides an author, for example, with a variety of menus for incorporating methods in a VDE object , including:\n\n","The content of an object  created by an author may be generated with the assistance of a VDE aware application program or a non-VDE aware application program. The content of the object created by an author in conjunction with such programs may include text, formatted text, pictures, moving pictures, sounds, computer software, multimedia, electronic games, electronic training materials, various types of files, and so on, without limitation. The authoring process may encapsulate content generated by the author in an object, encrypt the content with one or more keys, and append one or more methods to define parameters of allowed use and\/or required auditing of use and\/or payment for use of the object by users (and\/or by authorized users only). The authoring process may also include some or all aspects of distributing the object.","In general, in the preferred embodiment, an author can:\n\n","A VDE node electronic appliance  may, for example, distribute an object on behalf of an object provider if a VDE node receives from an object provider administrative budget information for distributing the object and associated distribution key information.","A VDE node electronic appliance  may receive and process audit records on behalf of an object provider if that VDE node receives any necessary administrative budget, audit method, and audit key information (used, for example, to decrypt audit trails), from the object provider. An auditing-capable VDE electronic appliance  may control execution of audit reduction methods. \u201cAudit reduction\u201d in the preferred embodiment is the process of extracting information from audit records and\/or processes that an object provider (e.g., any object provider along a chain of handling of the object) has specified to be reported to an object's distributors, object creators, client administrators, and\/or any other user of audit information. This may include, for example, advertisers who may be required to pay for a user's usage of object content. In one embodiment, for example, a clearinghouse can have the ability to \u201cappend\u201d budget, audit method, and\/or audit key information to an object or class or other grouping of objects located at a user site or located at an object provider site to ensure that desired audit processes will take place in a \u201ctrusted\u201d fashion. A participant in a chain of handling of a VDE content container and\/or content container control information object may act as a \u201cproxy\u201d for another party in a chain of handling of usage auditing information related to usage of object content (for example a clearinghouse, an advertiser, or a party interested in market survey and\/or specific customer usage information). This may be done by specifying, for that other party, budget, audit method, and\/or key information that may be necessary to ensure audit information is gathered and\/or provided to, in a proper manner, said additional party. For example, employing specification information provided by said other party.","Object Creation and Initial Control Structures","The VDE preferred embodiment object creation and control structure design processes support fundamental configurability of control information. This enables VDE  to support a full range of possible content types, distribution pathways, usage control information, auditing requirements, and users and user groups. VDE object creation in the preferred embodiment employs VDE templates whose atomic elements represent at least in part modular control processes. Employing VDE creation software (in the preferred embodiment a GUI programming process) and VDE templates, users may create VDE objects  by, for example, partitioning the objects, placing \u201cmeta data\u201d (e.g., author's name, creation date, etc.) into them, and assigning rights associated with them and\/or object content to, for example, a publisher and\/or content creator. When an object creator runs through this process, she normally will go through a content specification procedure which will request required data. The content specification process, when satisfied, may proceed by, for example, inserting data into a template and encapsulating the content. In addition, in the preferred embodiment, an object may also automatically register its presence with the local VDE node electronic appliance  secure subsystem, and at least one permissions record  may be produced as a result of the interaction of template instructions and atomic methods, as well as one or more pieces of control structure which can include one or more methods, budgets, and\/or etc. A registration process may require a budget to be created for the object. If an object creation process specifies an initial distribution, an administrative object may also be created for distribution. The administrative object may contain one or more permission records , other control structures, methods, and\/or load modules.","Permissions records  may specify various control relationships between objects and users. For example, VDE  supports both single access (e.g., one-to-one relationship between a user and a right user) and group access (any number of people may be authorized as a group). A single permissions record  can define both single and group access. VDE  may provide \u201csharing,\u201d a process that allows multiple users to share a single control budget as a budget. Additional control structure concepts include distribution, redistribution, and audit, the latter supporting meter and budget information reduction and\/or transfer. All of these processes are normally securely controlled by one or more VDE secure subsystems.","Templates and Classes","VDE templates, classes, and flexible control structures support frameworks for organizations and individuals that create, modify, market, distribute, redistribute, consume, and otherwise use movies, audio recordings and live performances, magazines, telephony based retail sales, catalogs, computer software, information databases, multimedia, commercial communications, advertisements, market surveys, infomercials, games, CAD\/CAM services for numerically controlled machines, and the like. As the context surrounding these classes changes or evolves, the templates provided by the preferred embodiment of the present invention can be modified to meet these changes for broad use, or more focused activities.","VDE  authoring may provide three inputs into a create process: Templates, user input and object content. Templates act as a set of control instructions and\/or data for object control software which are capable of creating (and\/or modifying) VDE objects in a process that interacts with user instructions and provided content to create a VDE object. Templates are usually specifically associated with object creation and\/or control structures. Classes represent user groups which can include \u201cnatural\u201d groups within an organization, such as department members, specific security clearance levels, etc., or ad hoc lists of individual's and\/or VDE nodes.","For example, templates may be represented as text files defining specific structures and\/or component assemblies. Templates, with their structures and\/or component assemblies may serve as VDE object authoring or object control applications. A creation template may consist of a number of sub-templates, which, at the lowest level, represent an \u201catomic level\u201d of description of object specification. Templates may present one or more models that describe various aspects of a content object and how the object should be created including employing secure atomic methods that are used to create, alter, and\/or destroy permissions records  and\/or associated budgets, etc.","Templates, classes (including user groups employing an object under group access), and flexible control structures including object \u201cindependent\u201d permissions records (permissions that can be associated with a plurality of objects) and structures that support budgeting and auditing as separate VDE processes, help focus the flexible and configurable capabilities inherent within authoring provided by the present invention in the context of specific industries and\/or businesses and\/or applications. VDE rationalizes and encompasses distribution scenarios currently employed in a wide array of powerful industries (in part through the use of application or industry specific templates). Therefore, it is important to provide a framework of operation and\/or structure to allow existing industries and\/or applications and\/or businesses to manipulate familiar concepts related to content types, distribution approaches, pricing mechanisms, user interactions with content and\/or related administrative activities, budgets, and the like.","The VDE templates, classes, and control structures are inherently flexible and configurable to reflect the breadth of information distribution and secure storage requirements, to allow for efficient adaptation into new industries as they evolve, and to reflect the evolution and\/or change of an existing industry and\/or business, as well as to support one or more groups of users who may be associated with certain permissions and\/or budgets and object types. The flexibility of VDE templates, classes, and basic control structures is enhanced through the use of VDE aggregate and control methods which have a compound, conditional process impact on object control. Taken together, and employed at times with VDE administrative objects and VDE security arrangements and processes, the present invention truly achieves a content control and auditing architecture that can be configured to most any commercial distribution embodiment. Thus, the present invention fully supports the requirements and biases of content providers without forcing them to fit a predefined application model. It allows them to define the rights, control information, and flow of their content (and the return of audit information) through distribution channels.","Modifying Object Content (Adding, Hiding, Modifying, Removing, and\/or Extending)","Adding new content to objects is an important aspect of authoring provided by the present invention. Providers may wish to allow one or more users to add, hide, modify, remove and\/or extend content that they provide. In this way, other users may add value to, alter for a new purpose, maintain, and\/or otherwise change, existing content. The ability to add content to an empty and\/or newly created object is important as well.","When a provider provides content and accompanying control information, she may elect to add control information that enables and\/or limits the addition, modification, hiding and\/or deletion of said content. This control information may concern:\n\n","A provider may use this control information to establish an opportunity for other users to add value to and\/or maintain existing content in a controlled way. For example, a provider of software development tools may allow other users to add commentary and\/or similar and\/or complementary tools to their provided objects. A provider of movies may allow commentary and\/or promotional materials to be added to their materials. A provider of CAD\/CAM specifications to machine tool owners may allow other users to modify objects containing instructions associated with a specification to improve and\/or translate said instructions for use with their equipment. A database owner may allow other users to add and\/or remove records from a provided database object to allow flexibility and\/or maintenance of the database.","Another benefit of introducing control information is the opportunity for a provider to allow other users to alter content for a new purpose. A provider may allow other users to provide content in a new setting.","To attach this control information to content, a provider may be provided with, or if allowed, design and implement, a method or methods for an object that govern addition, hiding, modification and\/or deletion of content. Design and implementation of such one or more methods may be performed using VDE software tools in combination with a PPE . The provider may then attach the method(s) to an object and\/or provide them separately. A permissions record  may include requirements associated with this control information in combination with other control information, or a separate permissions record  may be used.","An important aspect of adding or modifying content is the choice of encryption\/decryption keys and\/or other relevant aspects of securing new or altered content. The provider may specify in their method(s) associated with these processes a technique or techniques to be used for creating and\/or selecting the encryption\/decryption keys and\/or other relevant aspect of securing new and\/or altered content. For example, the provider nay include a collection of keys, a technique for generating new keys, a reference to a load module that will generate keys, a protocol for securing content, and\/or other similar information.","Another important implication is the management of new keys, if any are created and\/or used. A provider may require that such keys and reference to which keys were used must be transmitted to the provider, or she may allow the keys and\/or securing strategy to remain outside a provider's knowledge and\/or control. A provider may also choose an intermediate course in which some keys must be transmitted and others may remain outside her knowledge and\/or control.","An additional aspect related to the management of keys is the management of permissions associated with an object resulting from the addition, hiding, modification and\/or deletion of content. A provider may or may not allow a VDE chain of control information user to take some or all of the VDE rules and control information associated with granting permissions to access and\/or manipulate VDE managed content and\/or rules and control information associated with said resulting object. For example, a provider may allow a first user to control access to new content in an object, thereby requiring any other user of that portion of content to receive permission from the first user. This may or may not, at the provider's discretion, obviate the need for a user to obtain permission from the provider to access the object at all.","Keys associated with addition, modification, hiding and\/or deletion may be stored in an independent permissions record or records . Said permissions record(s)  may be delivered to a provider or providers and potentially merged with an existing permissions record or records, or may remain solely under the control of the new content provider. The creation and content of an initial permissions record  and any control information over the permissions record(s) are controlled by the method(s) associated with activities by a provider. Subsequent modification and\/or use of said permission record(s) may involve a provider's method(s), user action, or both. A user's ability to modify and\/or use permissions record(s)  is dependent on, at least in part, the senior control information associated with the permissions record(s) of a provider.","Distribution Control Information","To enable a broad and flexible commercial transaction environment, providers should have the ability to establish firm control information over a distribution process without unduly limiting the possibilities of subsequent parties in a chain of control. The distribution control information provided by the present invention allow flexible positive control. No provider is required to include any particular control, or use any particular strategy, except as required by senior control information. Rather, the present invention allows a provider to select from generic control components (which may be provided as a subset of components appropriate to a provider's specific market, for example, as included in and\/or directly compatible with, a VDE application) to establish a structure appropriate for a given chain of handling\/control. A provider may also establish control information on their control information that enable and limit modifications to their control information by other users.","The administrative systems provided by the present invention generate administrative \u201cevents.\u201d These \u201cevents\u201d correspond to activities initiated by either the system or a user that correspond to potentially protected processes within VDE. These processes include activities such as copying a permissions record, copying a budget, reading an audit trail record, copying a method, updating a budget, updating a permissions record, updating a method, backing up management files, restoring management files, and the like. Reading, writing, modifying, updating, processing, and\/or deleting information from any portion of any VDE record may be administrative events. An administrative event may represent a process that performs one or more of the aforementioned activities on one or more portions of one or more records.","When a VDE electronic appliance  encounters an administrative event, that event is typically processed in conjunction with a VDE PPE . As in the case of events generally related to access and\/or use of content, in most cases administrative events are specified by content providers (including, for example, content creators, distributors, and\/or client administrators) as an aspect of a control specified for an object, group and\/or class of objects.","For example, if a user initiates a request to distribute permission to use a certain object from a desktop computer to a notebook computer, one of the administrative events generated may be to create a copy of a permissions record that corresponds to the object. When this administrative event is detected by ROS , an EVENT method for this type of event may be present. If an EVENT method is present, there may also be a meter, a billing, and a budget associated with the EVENT method. Metering, billing, and budgeting can allow a provider to enable and limit the copying of a permissions record .","For example, during the course of processing a control program, a meter, a billing, and a budget and\/or audit records may be generated and\/or updated. Said audit records may record information concerning circumstances surrounding an administrative event and processing of said event. For example, an audit record may contain a reference to a user and\/or system activity that initiated an event, the success or failure of processing said event, the date and\/or time, and\/or other relevant information.","Referring to the above example of a user with both a desktop and notebook computer, the provider of a permissions record may require an audit record each time a meter for copying said permissions record is processed. The audit record provides a flexible and configurable control and\/or recording environment option for a provider.","In some circumstances, it may be desirable for a provider to limit which aspects of a control component may be modified, updated, and\/or deleted. \u201cAtomic element definitions\u201d may be used to limit the applicability of events (and therefore the remainder of a control process, if one exists) to certain \u201catomic elements\u201d of a control component. For example, if a permissions record  is decomposed into \u201catomic elements\u201d on the fields described in , an event processing chain may be limited, for example, to a certain number of modifications of expiration date\/time information by specifying only this field in an atomic element definition. In another example, a permissions record  may be decomposed into atomic elements based on control sets. In this example, an event chain may be limited to events that act upon certain control sets.","In some circumstances, it may be desirable for a provider to control how administrative processes are performed. The provider may choose to include in distribution records stored in secure database  information for use in conjunction with a component assembly  that controls and specifies, for example, how processing for a given event in relation to a given method and\/or record should be performed. For example, if a provider wishes to allow a user to make copies of a permissions record , she may want to alter the permissions record internally. For example, in the earlier example of a user with a desktop and a notebook computer, a provider may allow a user to make copies of information necessary to enable the notebook computer based on information present in the desktop computer, but not allow any further copies of said information to be made by the notebook VDE node. In this example, the distribution control structure described earlier would continue to exist on the desktop computer, but the copies of the enabling information passed to the notebook computer would lack the required distribution control structure to perform distribution from the notebook computer. Similarly, a distribution control structure may be provided by a content provider to a content provider who is a distributor in which a control structure would enable a certain number of copies to be made of a VDE content container object along with associated copies of permissions records, but the permissions records would be altered (as per specification of the content provider, for example) so as not to allow end-users who received distributor created copies from making further copies for distribution to other VDE nodes.","Although the preceding example focuses on one particular event (copying) under one possible case, similar processes may be used for reading, writing, modifying, updating, processing, and\/or deleting information from records and\/or methods under any control relationship contemplated by the present invention. Other examples include: copying a budget, copying a meter, updating a budget, updating a meter, condensing an audit trail, and the like.","Creating Custom Methods","In the preferred embodiment of the present invention, methods may be created \u201cat will,\u201d or aliased to another method. These two modes contribute to the superior configurability, flexibility, and positive control of the VDE distribution process. Generally, creating a method involves specifying the required attributes or parameters for the data portion of the method, and then \u201ctyping\u201d the method. The typing process typically involves choosing one or more load modules to process any data portions of a method. In addition to the method itself, the process of method creation may also result in a method option subrecord for inclusion in, or modification of, a permissions record, and a notation in the distribution records. In addition to any \u201cstandard\u201d load module(s) required for exercise of the method, additional load modules, and data for use with those load modules, may be specified if allowed. These event processing structures control the distribution of the method.","For example, consider the case of a security budget. One form of a typical budget might limit the user to 10 Mb of decrypted data per month. The user wishes to move their rights to use the relevant VDE content container object to their notebook. The budget creator might have limited the notebook to the same amount, half the original amount, a prorated amount based on the number of moves budgeted for an object, etc. A distribute method (or internal event processing structure) associated with the budget allows the creator of the budget to make a determination as to the methodology and parameters involved. Of course, different distribution methods may be required for the case of redistribution, or formal distribution of the method. The aggregate of these choices is stored in a permissions record for the method.","An example of the process steps used for the move of a budget record might look something like this:\n\n","In the preferred embodiment, to create a budget, a user manipulates a Graphical User Interface budget distribution application (e.g., a VDE template application). The user fills out any required fields for type(s) of budget, expiration cycle(s), auditor(s), etc. A budget may be specified in dollars, deutsche marks, yen, and\/or in any other monetary or content measurement schema and\/or organization. The preferred embodiment output of the application, normally has three basic elements. A notation in the distribution portion of secure database  for each budget record created, the actual budget records, and a method option record for inclusion in a permissions record. Under some circumstances, a budget process may not result in the creation of a method option since an existing method option may be being used. Normally, all of this output is protected by storage in secure database  and\/or in one or more administrative objects.","There are two basic modes of operation for a budget distribution application in the preferred embodiment. In the first case, the operator has an unlimited ability to specify budgets. The budgets resulting from this type of activity may be freely used to control any aspect of a distribution process for which an operator has rights, including for use with \u201csecurity\u201d budgets such as quantities limiting some aspect of usage. For example, if the operator is a \u201cregular person,\u201d he may use these budgets to control his own utilization of objects based on a personal accounting model or schedule. If the operator is an authorized user at VISA, the resulting budgets may have broad implications for an entire distribution system. A core idea is that this mode is controlled strictly by an operator.","The second mode of operation is used to create \u201calias\u201d budgets. These budgets are coupled to a preexisting budget in an operator's system. When an operator fills a budget, an encumbrance is created on the aliased budget. When these types of budgets are created, the output includes two method option subrecords coupled together: the method option subrecord for the aliased budget, and a method option subrecord for the newly created budget. In most cases, the alias budget can be used in place of the original budget if the budget creator is authorized to modify the method options within the appropriate required method record of a permissions record.","For example, assume that a user (client administrator) at a company has the company's VISA budget on her electronic appliance . She wants to distribute budget to a network of company users with a variety of preexisting budgets and requirements. She also wants to limit use of the company's VISA budget to certain objects. To do this, she aliases a company budget to the VISA budget. She then modifies (if so authorized) the permissions record for all objects that the company will allow their users to manipulate so that they recognize the company budget in addition to, or instead of, the VISA budget. She then distributes the new permissions records and budgets to her users. The audit data from these users is then reduced against the encumbrance on the company's VISA budget to produce a periodic billing.","In another example, a consumer wants to control his family's electronic appliance use of his VISA card, and prevent his children from playing too many video games, while allowing unlimited use of encyclopedias. In this case, he could create two budgets. The first budget can be aliased to his VISA card, and might only be used with encyclopedia objects (referenced to individual encyclopedia objects and\/or to one or more classes of encyclopedia objects) that reference the aliased budget in their explicitly modified permissions record. The second budget could be, for example, a time budget that he redistributes to the family for use with video game objects (video game class). In this instance, the second budget is a \u201cself-replenishing\u201d security\/control budget, that allows, for example, two hours of use per day. The first budget operates in the same manner as the earlier example. The second budget is added as a new required method to permissions records for video games. Since the time budget is required to access the video games, an effective control path is introduced for requiring the second budget\u2014only permissions records modified to accept the family budget can be used by the children for video games and they are limited to two hours per day.","Sharing and Distributing Rights and Budgets","Move","The VDE \u201cmove\u201d concept provided by the preferred embodiment covers the case of \u201cfriendly sharing\u201d of rights and budgets. A typical case of \u201cmove\u201d is a user who owns several machines and wishes to use the same objects on more than one of them. For example, a user owns a desktop and a notebook computer. They have a subscription to an electronic newspaper that they wish to read on either machine, i.e., the user wishes to move rights from one machine to the other.","An important concept within \u201cmove\u201d is the idea of independent operation. Any electronic appliance  to which rights have been moved may contact distributors or clearinghouses independently. For example, the user mentioned above may want to take their notebook on the road for an extended period of time, and contact clearinghouses and distributors without a local connection to their desktop.","To support independent operation, the user should be able to define an account with a distributor or clearinghouse that is independent of the electronic appliance  she is using to connect. The transactions must be independently traceable and reconcilable among and between machines for both the end user and the clearinghouse or distributor. The basic operations of moving rights, budgets, and bitmap or compound meters between machines is also supported.","Redistribution","Redistribution forms a UDE middle ground between the \u201cfriendly sharing\u201d of \u201cmove,\u201d and formal distribution. Redistribution can be thought of as \u201canonymous distribution\u201d in the sense that no special interaction is required between a creator, clearinghouse, or distributor and a redistributor. Of course, a creator or distributor does have the ability to limit or prevent redistribution.","Unlike the \u201cmove\u201d concept, redistribution does not imply independent operation. The redistributor serves as one point of contact for users receiving redistributed rights and\/or budgets, etc. These users have no knowledge of, or access to, the clearinghouse (or and\/or distributor) accounts of the redistributor. The redistributor serves as an auditor for the rights and\/or budgets, etc. that they redistribute, unless specifically overridden by restrictions from distributors and\/or clearinghouses. Since redistributees (recipients of redistributed rights and\/or budgets, etc.) would place a relatively unquantifiable workload on clearinghouses, and furthermore, since a redistributor would be placing himself at an auditable risk (responsible for all redistributed rights and\/or budgets, etc.), the audit of rights, budgets, etc. of redistributees by redistributors is assumed as the default case in the preferred embodiment.","Distribution","Distribution involves three types of entity. Creators usually are the source of distribution. They typically set the control structure \u201ccontext\u201d and can control the rights which are passed into a distribution network. Distributors are users who form a link between object (content) end users and object (content) creators. They can provide a two-way conduit for rights and audit data. Clearinghouses may provide independent financial services, such as credit and\/or billing services, and can serve as distributors and\/or creators. Through a permissions and budgeting process, these parties collectively can establish fine control over the type and extent of rights usage and\/or auditing activities.","Encumbrance","An \u201cencumbrance\u201d is a special type of VDE budget. When that a budget distribution of any type occurs, an \u201cencumbrance\u201d may be generated. An encumbrance is indistinguishable from an original budget for right exercise (e.g., content usage payment) purposes, but is uniquely identified within distribution records as to the amount of the encumbrance, and all necessary information to complete a shipping record to track the whereabouts of an encumbrance. For right exercise purposes, an encumbrance is identical to an original budget; but for tracking purposes, it is uniquely identifiable.","In the preferred embodiment of the present invention, a Distribution Event ID will be used by user VDE nodes and by clearinghouse services to track and reconcile encumbrances, even in the case of asynchronous audits. That is, the \u201cnew\u201d encumbrance budget is unique from a tracking point of view, but indistinguishable from a usage point of view.","Unresolved encumbrances are a good intermediate control for a VDE distribution process. A suitable \u201cgrace period\u201d can be introduced during which encumbrances must be resolved. If this period elapses, an actual billing or payment may occur. However, even after the interval has expired and the billing and\/or payment made, an encumbrance may still be outstanding and support later reconciliation. In this case, an auditor may allow a user to gain a credit, or a user may connect to a VDE node containing an encumbered budget, and resolve an amount as an internal credit. In some cases, missing audit trails may concern a distributor sufficiently to revoke redistribution privileges if encumbrances are not resolved within a \u201cgrace period,\u201d or if there are repeated grace period violations or if unresolved encumbrances are excessively large.","Encumbrances can be used across a wide variety of distribution modes. Encumbrances, when used in concert with aliasing of budgets, opens important additional distribution possibilities. In the case of aliasing a budget, the user places himself in the control path for an object\u2014an aliased budget may only be used in conjunction with permissions records that have been modified to recognize it. An encumbrance has no such restrictions.","For example, a user may want to restrict his children's use of his electronic, VDE node VISA budget. In this case, the user can generate an encumbrance on his VISA budget for the children's family alias budget, and another for his wife that is a transparent encumbrance of the original VISA budget. BigCo may use a similar mechanism to distribute VISA budget to department heads, and aliased BigCo budget to users directly.","Account Numbers and User IDs","In the preferred embodiment, to control access to clearinghouses, users are assigned account numbers at clearinghouses. Account numbers provide a unique \u201cinstance\u201d value for a secure database record from the point of view of an outsider. From the point of view of an electronic appliance  site, the user, group, or group\/user ids provide the unique instance of a record. For example, from the point of view of VISA, your Gold Card belongs to account number #123456789. From the point of view of the electronic appliance site (for example, a server at a corporation), the Gold card might belong to user id 1023. In organizations which have plural users and\/or user groups using a VDE node, such users and\/or user groups will likely be assigned unique user IDs. differing budgets and\/or other user rights may be assigned to different users and\/or user groups and\/or other VDE control information may be applied on a differing manner to electronic content and\/or appliance usage by users assigned with different such IDs. Of course, both a clearinghouse and a local site will likely have both pieces of information, but \u201cused data\u201d versus the \u201ccomment data\u201d may differ based on perspective.","In the preferred embodiment case of \u201cmove,\u201d an account number stored with rights stays the same. In the preferred embodiment of other forms of distribution, a new account number is required for a distributee. This may be generated automatically by the system, or correspond to a methodology developed by a distributor or redistributor. Distributors maintain account numbers (and associated access secrets) in their local name services for each distributee. Conversely, distributees' name services may store account numbers based on user id for each distributor. This record usually is moved with other records in the case of move, or is generated during other forms of distribution.","Organizations (including families) may automatically assign unique user IDs when creating control information e.g., a budget) for a new user or user group.","Requirements Record","In order to establish the requirements, and potentially options, for exercising a right associated with a VDE content container object before one or more required permissions records are received for that object, a requirements record may exist in the private header of such an object. This record will help the user establish what they have, and what they need from a distributor prior to forming a connection. If the requirements or possibilities for exercising a particular right have changed since such an object was published, a modified requirements record may be included in a container with an object (if available and allowed), or a new requirements record may be requested from a distributor before registration is initiated. Distributors may maintain \u201ccatalogs\u201d online, and\/or delivered to users, of collections of requirements records and\/or descriptive information corresponding to objects for which they may have ability to obtain and\/or grant rights to other users.","Passing an Audit","In the preferred embodiment of VDE there may be at least two types of auditing. In the case of budget distribution, billing records that reflect consumption of a budget generally need to be collected and processed. In the case of permissions distribution, usage data associated with an object are also frequently required.","In order to effect control over an object, a creator may establish the basic control information associated with an object. This is done in the formulation of permissions, the distribution of various security, administrative and\/or financial budgets, and the level of redistribution that is allowed, etc. Distributors (and redistributors) may further control this process within the rights, budgets, etc. (senior control information) they have received.","For example, an object creator may specify that additional required methods may be added freely to their permissions records, establish no budget for this activity, and allow unlimited redistribution of this right. As an alternative example, a creator may allow moving of usage rights by a distributor to half a dozen subdistributors, each of whom can distribute 10,000 copies, but with no redistribution rights being allowed to be allocated to subdistributors' (redistributors') customers. As another example, a creator may authorize the moving of usage rights to only 10 VDE nodes, and to only one level of distribution (no redistribution). Content providers and other contributors of control information have the ability through the use of permissions records and\/or component assemblies to control rights other users are authorized to delegate in the permissions records they send to those users, so long as such right to control one, some, or all such rights of other users is either permitted or restricted (depending on the control information distribution model). It is possible and often desirable, using VDE, to construct a mixed model in which a distributor is restricted from controlling certain rights of subsequent users and is allowed to control other rights. VDE control of rights distribution in some VDE models will in part or whole, at least for certain one or more \u201clevels\u201d of a distribution chain, be controlled by electronic content control information providers who are either not also providers of the related content or provide only a portion of the content controlled by said content control information, for example, in certain models, a clearinghouse might also serve as a rights distribution agent who provides one or more rights to certain value chain participants, which one or more rights may be \u201cattached\u201d to one or more rights to use the clearinghouse's credit (if said clearinghouse is, at least in part, a financial clearinghouse (such a control information provider may alternatively, or in addition, restrict other users' rights.","A content creator or other content control information provider may budget a user (such as a distributor) to create an unlimited number of permissions records for a content object, but revoke this right and\/or other important usage rights through an expiration\/termination process if the user does not report his usage (provide an audit report) at some expected one or more points in time and\/or after a certain interval of time (and\/or if the user fails to pay for his usage or violates other aspects of the agreement between the user and the content provider). This termination (or suspension or other specified consequence) can be enforced, for example, by the expiration of time-aged encryption keys which were employed to encrypt one or more aspects of control information. This same termination (or other specified consequence such as budget reduction, price increase, message displays on screen to users, messages to administrators, etc.) can also be the consequence of the failure by a user or the users VDE installation to complete a monitored process, such as paying for usage in electronic currency, failure to perform backups of important stored information (e.g., content and\/or appliance usage information, control information, etc.), failure to use a repeated failure to use the proper passwords or other identifiers, etc.).","Generally, the collection of audit information that is collected for reporting to a certain auditor can be enforced by expiration and\/or other termination processes. For example, the user's VDE node may be instructed (a) from an external source to no longer perform certain tasks, (b) carries within its control structure information informing it to no longer perform certain tasks, or (c) is elsewise no longer able to perform certain tasks. The certain tasks might comprise one or more enabling operations due to a user's (or installation's) failure to either report said audit information to said auditor and\/or receive back a secure confirmation of receipt and\/or acceptance of said audit information. If an auditor fails to receive audit information from a user (or some other event fails to occur or occur properly), one or more time-aged keys which are used, for example, as a security component of an embodiment of the present invention, may have their aging suddenly accelerated (completed) so that one or more processes related to said time-aged keys can no longer be performed.","Authorization Access Tags and Modification Access Tags","In order to enable a user VDE installation to pass audit information to a VDE auditing party such as a Clearinghouse, VDE allows a VDE auditing party to securely, electronically communicate with the user VDE installation and to query said installation for certain or all information stored within said installation's secure sub-system, depending on said auditing party's rights (said party shall normally be unable to access securely stored information that said party is not expressly authorized to access, that is one content provider will normally not be authorized to access content usage information related to content provided by a different content provider). The auditing party asserts a secure secret (e.g., a secure tag) that represents the set of rights of the auditor to access certain information maintained by said subsystem. If said subsystem validates said tag, the auditing party may then receive auditing information that it is allowed to request and receive.","Great flexibility exists in the enforcement of audit trail requirements. For example, a creator (or other content provider or control information provider or auditor in an object's or audit report's chain of handling) may allow changes by an auditor for event trails, but not allow anyone but themselves to read those trails, and limit the redistribution of this right to, for example, six levels. Alternatively, a creator or other controlling party may give a distributor the right to process, for example, 100,000 audit records (and\/or, for example, the right to process 12 audit records from a given user) before reporting their usage. If a creator or other controlling party desires, he may allow (and\/or require) separate (and containing different, a subset of, overlapping, or the same information) audit \u201cpackets\u201d containing audit information, certain of said audit information to be processed by a distributor and certain other of said audit information to be passed back to the creator and\/or other auditors (each receiving the same, overlapping, a subset of, or different audit information). Similarly, as long as allowed by, for example, an object creator, a distributor (or other content and\/or control information provider) may require audit information to be passed back to it, for example, after every 50,000 audit records are processed (or any other unit of quantity and\/or after a certain time interval and\/or at a certain predetermined date) by a redistributor. In the preferred embodiment, audit rules, like other control structures, may be stipulated at any stage of a distribution chain of handling as long as the right to stipulate said rules has not been restricted by a more \u201csenior\u201d object and\/or control information distributing (such as an auditing) participant.","Audit information that is destined for different auditors may be encrypted by different one or more encryption keys which have been securely provided by each auditor's VDE node and communicated for inclusion in a user's permissions record(s) as a required step, for example, during object registration. This can provide additional security to further ensure (beyond the use of passwords and\/or other identification information and other VDE security features) that an auditor may only access audit information to which he is authorized. In one embodiment, encrypted (and\/or unencrypted) \u201cpackets\u201d of audit information (for example, in the form of administrative objects) may be bound for different auditors including a clearinghouse and\/or content providers and\/or other audit information users (including, for example, market analysts and\/or list purveyors). The information may pass successively through a single chain of handling, for example, user to clearinghouse to redistributor to distributor to publisher\/object creator, as specified by VDE audit control structures and parameters. Alternatively, encrypted (or, normally less preferably, unencrypted) audit packets may be required to be dispersed directly from a user to a plurality of auditors, some one or more who may have the responsibility to \u201cpass along\u201d audit packets to other auditors. In another embodiment, audit information may be passed, for example, to a clearinghouse, which may then redistribute all and\/or appropriate subsets of said information (and\/or some processed result) to one or more other parties, said redistribution employing VDE secure objects created by said clearinghouse.","An important function of an auditor (receiver of audit information) is to pass administrative events back to a user VDE node in acknowledgement that audit information has been received and\/or \u201crecognized.\u201d In the preferred embodiment, the receipt and\/or acceptance of audit information may be followed by two processes. The first event will cause the audit data at a VDE node which prepared an audit report to be deleted, or compressed into, or added to, one or more summary values. The second event, or set of events, will \u201cinform\u201d the relevant security (for example, termination and\/or other consequence) control information (for example, budgets) at said VDE node of the audit receipt, modify expiration dates, provide key updates, and\/or etc. In most cases, these events will be sent immediately to a site after an audit trail is received. In some cases, this transmission may be delayed to, for example, first allow processing of the audit trail and\/or payment by a user to an auditor or other party.","In the preferred embodiment, the administrative events for content objects and independently distributed methods\/component assemblies are similar, but not necessarily identical. For example, key updates for a budget may control encryption of a billing trail, rather than decryption of object content. The billing trail for a budget is in all respects a method event trail. In one embodiment, this trail must include sufficient references into distribution records for encumbrances to allow reconciliation by a clearinghouse. This may occur, for example, if a grace period elapses and the creator of a budget allows unresolved encumbrances to ultimately yield automatic credits if an expired encumbrance is \u201creturned\u201d to the creator.","Delivery of audit reports through a path of handling may be in part insured by an inverse (return of information) audit method. Many VDE methods have at least two pieces: a portion that manages the process of producing audit information at a user's VDE node; and a portion that subsequently acts on audit data. In an example of the handling of audit information bound for a plurality of auditors, a single container object is received at a clearinghouse (or other auditor). This container may contain (a) certain encrypted audit information that is for the use of the clearinghouse itself, and (b) certain other encrypted audit information bound for other one or more auditor parties. The two sets of information may have the same, overlapping and in part different, or entirely different, information content. Alternatively, the clearinghouse VDE node may be able to work with some or all of the provided audit information. The audit information may be, in part, or whole, in some summary and\/or analyzed form further processed at the clearinghouse and\/or may be combined with other information to form a, at least in part, derived set of information and inserted into one or more at least in part secure VDE objects to be communicated to said one or more (further) auditor parties. When an audit information container is securely processed at said clearinghouse VDE node by said inverse (return) audit method, the clearinghouse VDE node can create one or more VDE administrative objects for securely carrying audit information to other auditors while separately processing the secure audit information that is specified for use by said clearinghouse. Secure audit processes and credit information distribution between VDE participants normally takes place within the secure VDE \u201cblack box,\u201d that is processes are securely processed within secure VDE PPE and audit information is securely communicated between the VDE secure subsystems of vDE participants employing VDE secure communication techniques (e.g., public key encryption, and authentication).","This type of inverse audit method may specify the handling of returned audit information, including, for example, the local processing of audit information and\/or the secure passing along of audit information to one or more auditor parties. If audit information is not passed to one or more other auditor parties as may be required and according to criteria that may have been set by said one or more other auditor parties and\/or content providers and\/or control information providers during a permissions record specification and\/or modification process, the failure to, for example, receive notification of successful transfer of required audit information by an auditor party, e.g., a content provider, can result in the disablement of at least some capability of the passing through party's VDE node (for example, disablement of the ability to further perform certain one or more VDE managed business functions that are related to object(s) associated with said audit or party). In this preferred embodiment example, when an object is received by an auditor, it is automatically registered and permissions record(s) contents are entered into the secure management database of the auditor's VDE node.","One or more permissions records that manage the creation and use of an audit report object (and may manage other aspects of object use as well) may be received by a user's system during an audit information reporting exchange (or other electronic interaction between a user and an auditor or auditor agent). Each received permissions record may govern the creation of the next audit report object. After the reporting of audit information, a new permissions record may be required at a user's VDE node to refresh the capability of managing audit report creation and audit information transfer for the next audit reporting cycle. In our above example, enabling an auditor to supply one or more permissions records to a user for the purpose of audit reporting may require that an auditor (such as a clearinghouse) has received certain, specified permissions records itself from \u201cupstream\u201d auditors (such as, for example, content and\/or other content control information providers). Information provided by these upstream permissions records may be integrated into the one or more permissions records at an auditor VDE (e.g., clearinghouse) installation that manage the permissions record creation cycle for producing administrative objects containing permissions records that are bound for users during the audit information reporting exchange. If an upstream auditor fails to receive, and\/or is unable to process, required audit information, this upstream auditor may fail to provide to the clearinghouse (in this example) the required permissions record information which enables a distributor to support the next permission record creation\/auditing cycle for a given one or more objects (or class of objects). As a result, the clearinghouse's VDE node may be unable to produce the next cycle's permissions records for users, and\/or perform some other important process. This VDE audit reporting control process may be entirely electronic process management involving event driven VDE activities at both the intended audit information receiver and sender and employing both their secure PPE and secure VDE communication techniques.","In the preferred embodiment, each time a user registers a new object with her own VDE node, and\/or alternatively, with a remote clearinghouse and\/or distributor VDE node, one or more permissions records are provided to, at least in part, govern the use of said object. The permissions records may be provided dynamically during a secure UDE registration process (employing the VDE installation secure subsystem), and\/or may be provided following an initial registration and received at some subsequent time, e.g. through one or more separate secure VDE communications, including, for example, the receipt of a physical arrangement containing or otherwise carrying said information. At least one process related to the providing of the one or more permissions records to a user can trigger a metering event which results in audit information being created reflecting the user's VDE node's, clearinghouse's, and\/or distributor's permissions records provision process. This metering process may not only record that one or more permissions records have been created. It may also record the VDE node name, user name, associated object identification information, time, date, and\/or other identification information. Some or all of this information can become part of audit information securely reported by a clearinghouse or distributor, for example, to an auditing content creator and\/or other content provider. This information can be reconciled by secure VDE applications software at a receiving auditor's site against a user's audit information passed through by said clearinghouse or distributor to said auditor. For each metered one or more permissions records (or set of records) that were created for a certain user (and\/or VDE node) to manage use of certain one or more VDE object(s) and\/or to manage the creation of VDE object audit reports, it may be desirable that an auditor receive corresponding audit information incorporated into an, at least in part, encrypted audit report. This combination of metering of the creation of permissions records; secure, encrypted audit information reporting processes; secure VDE subsystem reconciliation of metering information reflecting the creation of registration and\/or audit reporting permissions with received audit report detail; and one or more secure VDE installation expiration and\/or other termination and\/or other consequence processes; taken together significantly enhances the integrity of the VDE secure audit reporting process as a trusted, efficient, commercial environment.","Secure Document Management Example","VDE  may be used to implement a secure document management environment. The following are some examples of how this can be accomplished.","In one example, suppose a law firm wants to use VDE  to manage documents. In this example, a law firm that is part of a litigation team might use VDE in the following ways:\n\n","In this example, the law firm receives in VDE content containers documents from their client's VDE installation secure subsystem(s). Alternatively, or in addition, the law firm may receive either physical documents which may be scanned into electronic form, and\/or they receive electronic documents which have not yet been placed in VDE containers. The electronic form of a document is stored as a VDE container (object) associated with the specific client and\/or case. The VDE container mechanism supports a hierarchical ordering scheme for organizing files and other information within a container; this mechanism may be used to organize the electronic copies of the documents within a container, A VDE container is associated with specific access control information and rights that are described in one or more permissions control information sets (PERCs) associated with that container. In this example, only those members of the law firm who possess a VDE instance, an appropriate PERC, and the VDE object that contains the desired document, may use the document. Alternatively or in addition, a law firm member may use a VDE instance which has been installed on the law firm's network server. In this case, the member must be identified by an appropriate PERC and have access to the document containing VDE object (in order to use the server VDE installation). Basic access control to electronic documents is enabled using the secure subsystem of one or more user VDE installations.","VDE may be used to provide basic usage control in several ways. First, it permits the \u201cembedding\u201d of multiple containers within a single object. Embedded objects permit the \u201cnesting\u201d of control structures within a container. VDE also extends usage control information to an arbitrary granular level (as opposed to a file based level provided by traditional operating systems and provides flexible control information over any action associated with the information which can be described as a VDE controlled process. For example, simple control information may be associated with viewing the one or more portions of documents and additional control information may be associated with editing, printing and copying the same and\/or different one or more portions of these same documents.","In this example, a \u201cclient\u201d container contains all documents that have been provided by the client (documents received in other containers can be securely extracted and embedded into the VDE client container using VDE extraction and embedding capabilities). Each document in this example is stored as an object within the parent, client VDE container. The \u201cclient\u201d container also has several other objects embedded within it; one for each attorney to store their client notes, one (or more) for research results and related information, and at least one for copies of letters, work papers, and briefs that have been created by the law firm. The client container may also contain other information about the client, including electronic records of billing, time, accounting, and payments. Embedding VDE objects within a parent VDE content container provides a convenient way to securely categorize and\/or store different information that shares similar control information. All client provided documents may, for example, be subject to the same control structures related to use and non-disclosure. Attorney notes may be subject to control information, for example, their use may be limited to the attorney who created the notes and those attorneys to whom such creating attorney expressly grants access rights. Embedded containers also provide a convenient mechanism to control collections of dissimilar information. For example, the research object(s) may be stored in the form of (or were derived from) VDE \u201csmart objects\u201d that contain the results of research performed by that object. Research results related to one aspect of the case retrieved from a VDE enabled LEXIS site might be encapsulated as one smart object; the results of another session related to another (or the same) aspect of the case may be encapsulated as a different object. Smart objects are used in this example to help show that completely disparate and separately delivered control information may be incorporated into a client container as desired and\/or required to enforce the rights of providers (such as content owners).","Control structures may be employed to manage any variety of desired granularities and\/or logical document content groupings; a document, page, paragraph, topically related materials, etc. In this example, the following assumptions are made: client provided documents are controlled at the page level, attorney notes are controlled at the document level on an attorney by attorney basis, court filings and briefs are controlled at a document level, research information is controlled at whatever level the content provider specifies at the time the research was performed, and certain highly confidential information located in various of the above content may be identified as subject to display and adding comments only, and only by the lead partner attorneys, with only the creator and\/or embedder of a given piece of content having the right to be otherwise used (printed, extracted, distributed, etc).","In general, container content in this example is controlled with respect to distribution of rights. This control information are associated at a document level for all internally generated documents, at a page level for client level documents, and at the level specified by the content provider for research documents.","VDE control information can be structured in either complex or simple structures, depending on the participant's desires. In some cases, a VDE creator will apply a series of control structure definitions that they prefer to use (and that are supported by the VDE application managing the specification of rules and control information, either directly, or through the use of certified application compatible VDE component assemblies.","In this example, the law firm sets up a standard VDE client content container for a new client at the time they accept the case. A law firm VDE administrator would establish a VDE group for the new client and add the VDE IDs of the attorneys at the firm that are authorized to work on the case, as well as provide, if appropriate, one or more user template applications. These templates provide, for example, one or more user interfaces and associated control structures for selection by users of additional and\/or alternative control functions (if allowed by senior control information), entry of control parameter data, and or performing user specific administrative tasks. The administrator uses a creation tool along with a predefined creation template to create the container. This creation template specifies the document usage (including distribution control information) for documents as described above. Each electronic document from the client (including letters, memoranda, E-mail, spreadsheet, etc.) are then added to the container as separate embedded objects. Each new object is created using a creation template that satisfies that the default control structures specified with the container as required for each new object of a given type.","As each attorney works on the case, they may enter notes into an object stored within the client's VDE container. These notes may be taken using a VDE aware word processor already in use at the law firm. In this example, a VDE redirector handles the secure mapping of the word processor file requests into the VDE container and its objects through the use of VDE control processes operating with one or more VDE PPEs. Attorney note objects are created using the default creation template for the document type with assistance from the attorney if the type cannot be automatically determined from the content. This permits VDE to automatically detect and protect the notes at the predetermined level, e.g. document, page, paragraph.","Research can be automatically managed using VDE. Smart objects can be, used to securely search out, pay for if necessary, and retrieve information from VDE enabled information resources on the information highway.","Examples of such resources might include LEXIS, Westlaw, and other related legal databases. Once the information is retrieved, it may be securely embedded in the VDE content client container. If the smart object still contains unreleased information, the entire smart object may be embedded in the client's VDE container. This places the unreleased information under double VDE control requirements: those associated with releasing the information from smart object (such as payment and\/or auditing requirements) and those associated with access to, or other usage of, client information of the specified type.","Briefs and other filings may be controlled in a manner similar to that for attorney notes. The filings may be edited using the standard word processors in the law firm; with usage control structures controlling who may review, change, and\/or add to the document (or, in a more sophisticated example, a certain portion of said document). VDE may also support electronic filing of briefs by providing a trusted source for time date stamping and validation of filed documents.","When the client and attorney want to exchange confidential information over electronic mail or other means, VDE can play an important role in ensuring that information exchanged under privilege, properly controlled, and not inappropriately released and\/or otherwise used. The materials (content) stored in a VDE content container object will normally be encrypted. Thus wrapped, a VDE object may be distributed to the recipient without fear of unauthorized access and\/or other use. The one or more authorized users who have received an object are the only parties who may open that object and view and\/or manipulate and\/or otherwise modify its contents and VDE secure auditing ensures a record of all such user content activities. VDE also permits the revocation of rights to use client\/attorney privileged information if such action becomes necessary, for example, after an administrator review of user usage audit information.","Large Organization Example","In a somewhat more general example, suppose an organization (e.g., a corporation or government department) with thousands of employees and numerous offices disposed throughout a large geographic area wishes to exercise control over distribution of information which belongs to said organization (or association). This information may take the form of formal documents, electronic mail messages, text files, multimedia files, etc, which collectively are referred to as \u201cdocuments.\u201d","Such documents may be handled by people (referred to as \u201cusers\u201d) and\/or by computers operating on behalf of users. The documents may exist both in electronic form for storage and transmission and in paper form for manual handling.","These documents may originate wholly within the organization, or may be created, in whole or in part, from information received from outside the organization. Authorized persons within the organization may choose to release documents, in whole or in part, to entities outside the organization. Some such entities may also employ VDE  for document control, whereas others may not.","Document Control Policies","The organization as a whole may have a well-defined policy for access control to, and\/or other usage control of documents. This policy may be based on a \u201clattice model\u201d of information flow, in which documents are characterized as having one or more hierarchical \u201cclassification\u201d security attributes  and zero or more non-hierarchical \u201ccompartment\u201d security attributes, all of which together comprise a sensitivity security attribute.","The classification attributes may designate the overall level of sensitivity of the document as an element of an ordered set. For example, the set \u201cunclassified,\u201d \u201cconfidential,\u201d \u201csecret,\u201d \u201ctop secret\u201d might be appropriate in a government setting, and the set \u201cpublic,\u201d \u201cinternal,\u201d \u201cconfidential,\u201d \u201cregistered confidential\u201d might be appropriate in a corporate setting.","The compartment attributes may designate the document's association with one or more specific activities within the organization, such as departmental subdivisions (e.g., \u201cresearch,\u201d \u201cdevelopment,\u201d \u201cmarketing\u201d) or specific projects within the organization.","Each person using an electronic appliance  would be assigned, by an authorized user, a set of permitted sensitivity attributes to designate those documents, or one or more portions of certain document types, which c
