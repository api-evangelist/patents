---
title: Permission re-delegation prevention
abstract: Methods and systems for preventing permission re-delegation among applications are disclosed herein. The method includes accepting a message requesting access to a user-controlled resource from a requester application at a deputy application and reducing a first permissions list of the deputy application to a second permissions list. The second permissions list includes an overlap of permissions between the deputy application and the requester application. Moreover, the method also includes sending the message from the deputy application to a computing system via an application programming interface (API), wherein the computing system is configured to reject the message if the second permissions list of the deputy application does not permit access to the user-controlled resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08893268&OS=08893268&RS=08893268
owner: Microsoft Corporation
number: 08893268
owner_city: Redmond
owner_country: US
publication_date: 20111115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Many traditional multi-user operating systems associate privileges with user accounts. When a user installs an application, the application runs in the name of the user and inherits the user's ability to access the system resources. However, modern browsers and device operating systems, such as smartphone operating systems, typically treat applications as mutually untrusting, potentially malicious principals. In most cases, applications are isolated except for explicit inter-process, or inter-application, communication (IPC) channels. In addition, applications are often unprivileged by default and may be granted additional privileges, or permissions, by a user. In other words, permission to use devices and access user-private data through system application programming interfaces (APIs) may be granted to individual applications by the user. Consequently, each application has its own set of permissions, as determined by the user.","Although inter-application communication supports useful collaboration between applications, it also introduces the risk of permission re-delegation. Permission re-delegation occurs when an application with permissions performs a privileged task for an application without permissions. The privileged application may be referred to as a deputy application and may wield authority on behalf of the user. While a permission system may often prevent applications from accessing privileged system APIs without user consent, permission re-delegation may circumvent the permission system and allow an unprivileged application to access such privileged system APIs. This undermines the user's right to approve each application's access to privileged devices and data, leaving such devices and data vulnerable to software bugs and data corruption.","The following presents a simplified summary of the innovation in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview of the claimed subject matter. It is intended to neither identify key nor critical elements of the claimed subject matter nor delineate the scope of the subject innovation. Its sole purpose is to present some concepts of the claimed subject matter in a simplified form as a prelude to the more detailed description that is presented later.","An embodiment provides a method for preventing permission re-delegation among applications. The method includes accepting a message requesting access to a user-controlled resource from a requester application at a deputy application and reducing a first permissions list of the deputy application to a second permissions list. The second permissions list includes an overlap of permissions between the deputy application and the requester application. Moreover, the method also includes sending the message from the deputy application to a computing system via an application programming interface (API), wherein the computing system is configured to reject the message if the second permissions list of the deputy application does not permit access to the user-controlled resource.","Another embodiment provides a system for permission re-delegation prevention. The system includes a requester application configured to notify a deputy application of a request to access a user-controlled resource, wherein the requester application includes fewer permissions than the deputy application. The deputy application may be configured to reduce a first list of permissions to produce a second list of permissions, wherein the second list of permissions comprises an overlap of shared permissions between the deputy application and the requester application. Moreover, the deputy application may also be configured to send the request to a computing system via an API. The computing system may be configured to reject the request if the second permissions list does not permit access to the user-controlled resource.","In addition, another embodiment provides one or more non-volatile computer-readable storage media for storing computer readable instructions, the computer-readable instructions providing an inter-application communication (IPC) inspection system when executed by one or more processing devices. The computer-readable instructions include code configured to accept a message requesting access to a user-controlled resource from a requester application at a deputy application. The computer-readable instructions also include code configured to reduce a first permissions list of the deputy application to a second permissions list, wherein the second permissions list includes an intersection of permissions between the deputy application and the requester application. Further, the computer-readable instructions include code configured to send the message from the deputy application to a computing system via a system API, wherein the computing system is configured to reject the message if the second permissions list of the deputy application does not permit access to the user-controlled resource.","This Summary is provided to introduce a selection of concepts in a simplified form; these concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","The same numbers are used throughout the disclosure and figures to reference like components and features. Numbers in the  series refer to features originally found in , numbers in the  series refer to features originally found in , numbers in the  series refer to features originally found in , and so on.","While an application may be entrusted with a certain degree of permission to access private system resources, the application may never be entrusted with full permission to access all private system resources. Rather, an application's privileges may be set directly by the user. Therefore, a user may delegate a higher degree of permission to a certain application, referred to herein as a \u201cdeputy application,\u201d while a user may delegate a lesser degree of permission to another application, referred to herein as a \u201crequester application.\u201d Thus, the deputy application and the requester application may have disjoint sets of dangerous permissions to access specific user-controlled resources.","As discussed above, permission re-delegation occurs when an application with a permission performs a privileged task on behalf of an application without that permission. This is referred to as a confused deputy attack, or privilege escalation attack. In this scenario, the user delegates authority to a deputy application by granting it a permission. The deputy application defines a public interface that exposes some of the internal functionality of the particular system. A malicious requester application that lacks the permission granted to the deputy application may invoke the deputy application's interface, causing the deputy application to issue a system application programming interface (API) call. The system may approve and execute the deputy application's API call because the deputy application has the appropriate permission. Thus, the requester application has succeeded in causing the execution of an API call that it could not have directly invoked due to a lack of permission.","There are two general scenarios in which permission re-delegation may occur. According to the first scenario, a \u201cconfused\u201d deputy application may accidentally expose the internal functionality of the Web browser or the computing device's operating system to less-privilege requester applications. In contrast, according to the second scenario, the developer of the deputy application may intentionally expose the internal functionality of the Web browser or the computing device's operating system to less-privileged requester applications. In both cases, the ability of the particular system to combat permission re-delegation among applications may be compromised.","Embodiments disclosed herein set forth a method and system for permission re-delegation prevention among applications, wherein the applications may include, for example, smartphone applications implemented on a mobile phone or Web applications implemented on a Web site. Such a method and system may prevent applications from performing actions that are not desired by the user. This may protect against attacks on user-controlled resources, which are resources that are guarded by permissions granted by the user. User-controlled resources may include, for example, camera and global positioning system (GPS) devices, as well as private data stores, such as lists of calendars and contacts. Moreover, the system and method disclosed herein may function at an operating system (OS) level, rather than as part of a runtime. This may allow for a more efficient prevention of permission re-delegation among applications, since the system and method may function properly regardless of whether multiple applications operate on different runtimes.","The method and system disclosed herein may prevent permission re-delegation through an inter-process communication (IPC) inspection procedure. The IPC inspection procedure may reduce a deputy application's privileges if the deputy application receives a communication from a less privileged application. Therefore, privilege reduction may reflect the fact that a deputy application is under the influence of a requester application. Consequently, a privileged API call from the deputy application may be denied if any application in the chain of influence lacks the appropriate permissions.","As a preliminary matter, some of the figures describe concepts in the context of one or more structural components, variously referred to as functionality, modules, features, elements, etc. The various components shown in the figures can be implemented in any manner, for example, by software, hardware (e.g., discreet logic components, etc.), firmware, and so on, or any combination of these implementations. In one embodiment, the various components may reflect the use of corresponding components in an actual implementation. In other embodiments, any single component illustrated in the figures may be implemented by a number of actual components. The depiction of any two or more separate components in the figures may reflect different functions performed by a single actual component. , discussed below, provides details regarding one system that may be used to implement the functions shown in the figures.","Other figures describe the concepts in flowchart form. In this form, certain operations are described as constituting distinct blocks performed in a certain order. Such implementations are exemplary and non-limiting. Certain blocks described herein can be grouped together and performed in a single operation, certain blocks can be broken apart into plural component blocks, and certain blocks can be performed in an order that differs from that which is illustrated herein, including a parallel manner of performing the blocks. The blocks shown in the flowcharts can be implemented by software, hardware, firmware, manual processing, and the like, or any combination of these implementations. As used herein, hardware may include computer systems, discreet logic components, such as application specific integrated circuits (ASICs), and the like, as well as any combinations thereof.","As to terminology, the phrase \u201cconfigured to\u201d encompasses any way that any kind of functionality can be constructed to perform an identified operation. The functionality can be configured to perform an operation using, for instance, software, hardware, firmware and the like, or any combinations thereof.","The term \u201clogic\u201d encompasses any functionality for performing a task. For instance, each operation illustrated in the flowcharts corresponds to logic for performing that operation. An operation can be performed using, for instance, software, hardware, firmware, etc., or any combinations thereof.","As utilized herein, terms \u201ccomponent,\u201d \u201csystem,\u201d \u201cclient\u201d and the like are intended to refer to a computer-related entity, either hardware, software (e.g., in execution), and\/or firmware, or a combination thereof. For example, a component can be a process running on a processor, an object, an executable, a program, a function, a library, a subroutine, and\/or a computer or a combination of software and hardware.","By way of illustration, both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and\/or distributed between two or more computers. The term \u201cprocessor\u201d is generally understood to refer to a hardware component, such as a processing unit of a computer system.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any non-transitory computer-readable device, or media.","Non-transitory computer-readable storage media can include but are not limited to magnetic storage devices (e.g., hard disk, floppy disk, and magnetic strips, among others), optical disks (e.g., compact disk (CD), and digital versatile disk (DVD), among others), smart cards, and flash memory devices (e.g., card, stick, and key drive, among others). In contrast, computer-readable media generally (i.e., not necessarily storage media) may additionally include communication media such as transmission media for wireless signals and the like.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","102","104","106"]},"However, the requester application  may also attempt to access the user-controlled resource by sending a message to a deputy application  that has permission to access the resource, as indicated by the arrow . The deputy application  may then respond to the message from the requester application  by forwarding the message to the computing system via the system API , as indicated by the arrow . In this case, because the computing system recognizes that the deputy application  has permission to access the user-controlled resource, the computing system may grant the deputy application  access to the resource via the system API. Moreover, because the requester application  is in direct communication with the deputy application , the requester application  may circumvent the permission system and gain unauthorized access to the user-controlled resource. This significant compromise in the integrity of access to user-controlled resources may be resolved by the IPC inspection procedure disclosed herein, as discussed further with respect to .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["200","202","204","206","202","200","204","202","204","202","204","202","208","210","204","202"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["300","300","300","302","304","302","302","304","302","306"]},"The system  may also include a storage device  adapted to store an IPC inspection algorithm  and a manifest model . The IPC inspection algorithm  may be used to detect and prevent permission re-delegation, while the manifest model  may include information relating to which applications have been granted permissions to access particular user-controlled resources by the user. The storage device  can include a hard drive, an optical drive, a thumbdrive, an array of drives, or any combinations thereof. A network interface controller (NIC)  may be adapted to connect the system  through the bus  to a network . Through the network , Web-based applications  may be downloaded and stored within the computer's storage device , or may be accessed through a Web browser.","A user interface (UI)  within the system  may connect the system  to any number of user interface devices , such as a touchscreen, a speaker, or a pointing device, among others. The system  may be linked through the bus  to a display interface  adapted to connect the system  to a display device , wherein the display device  may include a computer monitor or a display screen of a mobile device, among others. Moreover, the system  may also be linked through the bus  to an API  adapted to connect the system  to a number of applications . In an embodiment, the applications  may be stored within the system  and may communicate with each other through the API . In another embodiment, the API  may be a network interface controller, and the applications  may be in communication with the system  and with each other through a network linked to the API  through the bus .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["400","402"]},"In various embodiments, if a user is interacting with the deputy application when the message requesting access to the user-controlled resource is received from the requester application, a new instance of the deputy application may be created. This may prevent an ensuing privilege reduction caused by the interaction with the requester application from interfering with the user's experience. In this scenario, the instance of the application with which the user is interacting may be designated as the primary instance, while the new instance of the application may handle the message from the requester application. Moreover, if the deputy application receives messages from multiple requester applications, any number of additional instances of the application may be created and used to handle each message separately. In embodiments, multiple instances of an application may run concurrently and may be isolated from one another.","In embodiments, some applications may not be able to exist in duplicate. For example, long-running background applications may have states that cannot be replicated across multiple instances. Therefore, such an application may be designated as a singleton. For singleton applications, multiple communication events may be dispatched to the same instance. Consequently, a singleton application's permissions may be repeatedly reduced upon the delivery of each communication event.","At block , a first permissions list of the deputy application may be reduced to a second permissions list upon the acceptance of the message from the requester application. While the deputy application may have permission to access the particular user-controlled resource according to the first permissions list, the deputy application's permission may be revoked according to the second permissions list. The second permissions list may include the permissions from the first permissions list that are also possessed by the requester application. In other words, the second permissions list may be an intersection between the first permissions list of the deputy application and a permissions list of the requester application. Moreover, the first permissions list of the deputy application may not be increased, except in direct response to user input.","At block , the message may be sent from the deputy application to the computing system via the system API. However, due to the reduction of the first permissions list to the second permissions list, the deputy application may no longer have permission to access the user-controlled resource. Thus, the computing system may deny the deputy application's API call. In this manner, the requester application may be blocked from fraudulently gaining access to the user-controlled resource through the deputy application.","The method  is not intended to indicate that the steps of the method  are to be executed in any particular order or that all of the steps are to be included in every case. Further, steps may be added to the method  according to the specific application. For example, a second requester application may also send a message requesting access to a particular user-controlled resource to the deputy application. In this case, the second permissions list of the deputy application may be further reduced to a third permissions list. The third permissions list may include the permissions which are mutually possessed by the deputy application and both requester applications. Any number of additional requester applications may also send messages to the deputy application, and the deputy application's permissions list may be reduced accordingly.","In embodiments, the method  may function independently of the specific programming language which is utilized for each application. Moreover, the method  may also function independently of the runtime. This may be beneficial because many platforms support applications that are written in multiple different programming languages and that run on different runtimes. The method  may also be dynamic, meaning that the method  may function properly during runtime and may not depend on client-side application analysis. Further, the implementation of the method  may be independent of the application developer, since developer diligence in terms of security is not anticipated.","In embodiments, the specific functioning of the method  may depend on whether the particular system utilizes time-of-use permissions or install-time permissions for applications. For time-of-use permissions, the user may be prompted to approve or deny permission to access a user-controlled resource when a privileged API call is made. The user may then grant permission to access the user-controlled resource permanently, for a certain period of time, or for a single use. For install-time permissions, on the other hand, an application may declare its desired permissions in a manifest file at the time of installation. In order for the application to be properly installed, the user is prompted to grant the permissions requested by the application. In this case, new permissions may not be installed during runtime.","With regard to the method , time-of-use permissions are the simpler case. For systems which utilize time-of-use permissions, the user may be prompted whenever permission re-delegation is detected. The user may then choose to allow or deny the permission re-delegation according to each specific case. However, for systems which utilize install-time permissions, the situation is more complex. Each specific application may request all permissions used by the deputy applications with which the application may interact at the time of installation. This may lead to problems, however, because each application may have a very large number of permissions. Moreover, it may be hard to predict exactly which deputy applications may interact with a specific application. Therefore, this issue may be resolved by prompting the user to grant or deny the requester application temporary access to a particular privilege via a deputy application when permission re-delegation is detected.","In embodiments, the permissions lists utilized according to the method  may be governed by a number of access rights rules. For example, let A\u2192B indicate that an application A sends a message, or access request, to an application B, and let P(A) denote the set of permissions held by application A at time t. The first access rights rule may then be expressed as follows:\n\n()=().\n\nIn other words, the set of permissions held by application A at time zero is equal to the original set of permissions granted to application A by the user. For A\u2192B at time t, the second access rights rule may be expressed as follows:\n\n()=()\u2229(),\n\nwhere \u2229 denotes an intersection function. In this case, for example, the intersection function may find the overlap between the set of permissions granted to application A and the set of permissions granted to application B. This means that, if application B receives a message from application A, its permissions are reduced to the intersection of the permissions of application B and application A. This is discussed further with respect to .\n",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 5"],"b":["500","502","504","506","502","504","504","508","510","508","502","504","502","502","508"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 6","FIG. 5","FIG. 6"],"b":["600","602","604","606","604","608","610","608","602","604"]},"The chain of communication may then continue with the deputy application B acting as a requester application B. The requester application B with the set of permissions  may send a message to a deputy application C with a set of permissions , as indicated by the arrow . Because the set of permissions  of the requester application B may be smaller and more limited than the set of permissions  of the deputy application C, the set of permissions  of the deputy application C may be reduced to the smaller set of permissions , as indicated by the arrow . The smaller set of permissions  may be equal to the intersection between the set of permissions  of the requester application B and the set of permissions  of the deputy application C. Moreover, the smaller set of permissions  may also reflect the set of permissions  of the original requester application A. In this manner, all of the applications within a particular chain of communication may be taken into account for the determination of the appropriate set of permissions  for the deputy application C.","In embodiments, if A\u2192B at time t, and B\u2192C at time t+1, then the access rights rule relating to the schematic  may be expressed as follows:\n\n()=()\u2229()\u2229().\n\nThis means that the set of permissions  of the deputy application C reflects the sets of permissions  and  of both the requester application A and the requester application B, respectively. In other words, an application's current permissions reflect the permissions of all the applications in a chain of communication, as discussed above.\n",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 7","b":["700","702","704","706","708","710"]},"Because the requester applications A and B have smaller and more limited sets of permissions  and , respectively, than the set of permissions  of the deputy application C, the set of permissions  of the deputy application C may be reduced to the smaller set of permissions , as indicated by the arrow . As shown in , the smaller set of permissions  is equal to the intersection between the sets of permissions  and  of the requester applications A and B, respectively, and the set of permissions  of the deputy application C. Therefore, the acceptance of messages from multiple applications with varying degrees of permissions may have an additive effect. In embodiments, the general access rights rule relating to this additive effect may be expressed as follows:\n\n()=()\u2229\u2229(),\n\nwhere Ris a particular requester application, and R\u2192D for each time i. This means that, if a deputy application receives messages from multiple requester applications, the set of permissions of the deputy application may be repeatedly reduced. In embodiments, this may be the case if the deputy application is a singleton application. Moreover, an original set of permissions of a deputy application may not be increased, except upon request by a user. This access rights rule may be expressed as follows:\n\n()(), \u2200\n","This means that there is no mechanism for increasing an application's permissions, other than direct user input. Moreover, in some embodiments, a reduced set of permissions of a deputy application may be restored to the application's original set of permissions once all requester applications within the chain of communication have been closed. However, the deputy application's set of permissions may not exceed the original set of permissions granted by the user.","In some embodiments, the basic access rights rules discussed above with respect to  may apply to simplex, or unidirectional, inter-application communication. In simplex communication, the requester application may send a message to a deputy application, and the deputy application may take an action after receiving the message. In other embodiments, the basic access rights rules discussed above with respect to  may also apply to request-reply inter-application communication. In request-reply inter-application communication, the recipient of a message, i.e., the deputy application, may return a value to the sender of the message, i.e., the requester application. The value may include, for example, the result of the communication between the applications or the result of an API call. Moreover, in request-reply inter-application communication, the requester application's permissions may not be reduced when a reply is delivered from the deputy application.","Moreover, in various embodiments, the permissions discussed above with respect to the method and system disclosed herein may include any of a number of different types of permissions. For example, the permissions may include hierarchal permissions, temporal permissions, or monetary permissions, among others. Hierarchal permissions may specify a status of an application relative to other applications in terms of a degree of permissions granted to the particular application. Temporal permissions may specify a certain length of time or particular time period during which an application may access particular resources within a computing system. Monetary permissions may specify a particular number of times that an application may access particular resources based on an amount of money paid for the access permission, for example.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 8","FIG. 8","FIG. 8"],"b":["800","800","802","804","800","802","800","806","800"]},"Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
