---
title: Remote object activation in a distributed system
abstract: A distributed computer system uses a single interface at the client site to handle calls to call both active and passive remote objects. Accordingly, the calling process does not need to be aware of distinctions between active and passive objects. Further, remote objects are aggregated into common groups of objects, thereby providing greater security between objects of disparate groups and efficiency between related objects of the same group. Preferably, different groups are run on different Java virtual machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06957427&OS=06957427&RS=06957427
owner: Sun Microsystems, Inc.
number: 06957427
owner_city: Santa Clara
owner_country: US
publication_date: 19971015
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention relates generally to distributed computer systems, and more specifically, to managing and activating objects in distributed computer systems.","A distributed computer system is a network of computer processors that although geographically separated, are linked together functionally. It is often desirable to execute a computer program, or portions of a computer program, simultaneously across several computer processors in the distributed system. In such an environment, protocols coordinating the various portions of the program(s) are necessary.","Distributed computing systems executing object-oriented programming models are known. Essentially, in these systems, programs are written as an aggregation of objects, each of which may reside on and be executed on a different computer in the distributed system.","Typically, in an object-oriented distributed system, a local computer system, called the client, may access objects on remote computer systems. If the objects to be accessed on the remote computer system take up processor resources, i.e., if they consume physical or virtual memory and have a thread of control, they are said to be \u201cactive.\u201d Examples of such active objects include running programs or objects that are part of active programs. Such objects are always taking up resources from the physical machine, even when they are not doing active work on behalf of themselves or at the request of some other object.","A \u201cpassive\u201d object, on the other hand, refers to a presently non-active object on the remote computer. If a passive object is \u201cactivatable,\u201d it may, at the request of the client computer system, be brought into an active state. Objects may be passive simply because they have never been instantiated. Alternatively, to save system resources, active objects may be de-activated and become passive. In particular, for active objects that have become quiescent, it may be advantageous for the computer to save the state information of the object to a stable storage medium, such as a magnetic disk, and release any memory or threads of control associated with the object. The de-activated object does not take up physical or virtual memory and is not associated with a control thread, although it continues to exist and may be made active when called.","One known distributed system capable of activating objects is the object management groups Common Object Request Broker Architecture (CORBA) system. In the CORBA system, remote objects are always considered by the client to be potentially passive, and thus activatable, regardless of whether the object is actually active or passive. Additionally, although some objects at a remote system may be similar to one another, and capable of benefiting from a sharing of common resources, CORBA does not provide for the associating of similar objects.","There is, therefore, a need for a distributed system object management architecture that solves the above mentioned limitations found in the prior art.","Objects and advantages of the invention will be set forth in part in the description which follows, and in part will be obvious from the description, or may be learned by practice of the invention. The objects and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims.","To achieve the objects and in accordance with the purpose of the invention, as embodied and broadly described herein, a first aspect of the present invention includes a method of calling a remote object by a process comprising the steps of: (1) calling the remote object directly using a first address in a faulting remote reference to the remote object when the reference refers to an active instance of the remote object; and (2) calling an activator object using a second address in the faulting remote reference to perform activation of the remote object when the reference to the remote object does not refer to an active instance of the remote object. In an alternative aspect, a computer readable medium contains instructions for performing similar steps.","A second method consistent with the present invention includes a method of handling an object call at a remote site for a remote object, the method comprises the steps of: (1) determining whether a first predefined group of objects corresponding to the called remote object is active; (2) activating the remote object within the first group when the determining step determines that the first group is active; and (3) creating a second group of objects and activating the remote object within the second group when the determining step determines that the first group is not active. As with the first method, an alternative aspect includes a computer readable medium containing instructions for performing similar steps.","Still further, a distributed computer system consistent with the present invention includes a plurality of elements, including first and second computers. The second computer, in particular, receives requests for remote objects from the first computer and executes an object activator performing the steps of: (1) determining whether a first predefined group of objects corresponding to the requested remote object is active; (2) activating the requested remote object within the first group of objects when the determining step determines that the first group of objects is active; and (3) creating a second group of objects and activating the requested remote object within the second group of objects when the determining step determines that the first group of objects is not active.","A distributed computer system and related methods consistent with the present invention are described herein. The distributed computer system uses a single interface at the client site to handle calls to call both active and activatable remote objects. Further, remote objects are aggregated into common groups of objects, thereby providing greater security between objects of disparate groups and efficiency between related objects of the same group.","Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["102","107","103","103"]},"Memory  stores one or more computer procedures , , and , such as, for example, a computer program, thread, or object. Computer threads and are programs comprised of Java bytecodes executing through a Java virtual machine . The virtual machine is itself a process that when executed on computer , translates threads and into computer instructions native to computer hardware . In this manner, virtual machine  acts as an interpreter for computer hardware . In contrast to threads and , program uses instructions native to computer hardware , and thus does not require virtual machine .","Computer  is connected via network  to computer . Computer  includes components similar to those of computer , and will therefore not be described further. Although the simple network described above includes only two computers, networks of many computers, or even networks of many thousands of computers, such as the Internet, may be used to implement the concepts of the present invention.","Throughout the remainder of this disclosure, computer system  will be described as the requester of remote objects. Computer system  executes the remote objects and returns results to computer . Although not explicitly shown, a plurality of computer systems  may execute multiple objects for a single host computer .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":"102"},"Process  is a program active on computer , such as process  in FIG. . As shown, process  includes a plurality of bytecodes that may be translated from instructions written in the Java programming language, including instruction , which is an invocation to a method residing in an object on remote computer . The method invocation is preferably defined to be handled by local proxy object , which functions as an interface for remote object calls from computer  and hides the remote calling protocol from the invocating process.","Proxy  may assume one of multiple implementations depending on the status of the object being referenced; such as whether the object is active or activatable (i.e., presently passive). When called by process , proxy  packages the call using the appropriate implementation and forwards it to remote computer . Results received from the remote computer, such as results from the method invocation, are passed back through proxy  to process .","As described in more detail below, proxy  enables process  to make a single method invocation for both active and activatable objects. In other words, process  is not required to monitor whether a remote object is active or activatable.","Activation of remote objects by proxy  is implemented through an object reference known as a faulting remote reference, illustrated by reference . For each remote object, faulting remote reference  is used to \u201cfault in\u201d the object's reference upon the first method invocation to the object. Faulting remote reference  includes a persistent handle (an activation identifier)  and a transient remote reference . Both persistent handle  and transient remote reference  are obtained from the remote computer corresponding to the remote object, and contain address information for contacting the remote computer, such as the appropriate network address and port number, and address information more specific to the remote object being referred. Persistent handle  is the more general reference and references an activator entity (described in more detail below) at the remote host. Reference  is the actual \u201clive\u201d reference to the active remote object, and is used to contact the remote object directly.","In operation, upon invocation of a method requiring a remote object, proxy  checks reference . A null value in \u201clive\u201d reference  indicates that the remote object may become passive (i.e., it is not an active-only object), and proxy  uses activation identifier  to contact an activator entity at the remote site. If reference  is not null it will point directly to the remote object. This indicates an active remote object, which proxy  contacts directly.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["112","112","211","212","211","302","302","211"]},"Activatable objects are defined by the designer to exist as a member of a group of objects, such as group . The designer preferably assigns objects to particular groups so that objects within a group are designed to interact with one another. For example, objects within a group should have a relationship of mutual trust strong enough to allow them all to run within a single Java virtual machine . Once assigned to a group, objects stay within that group.","Activation entity  manages object group . In particular, activation entity  activates passive objects and creates objects pursuant to requests from object activator , and returns a reference to the corresponding activated object to object activator . To activate a quiescent object within group , activation entity  allocates the appropriate operating system resources (memory, process, or thread allocation) and starts up the object. After activating an object, activation entity  passes information to object activator  describing the way in which the object is to be reached for further communication. Object activator  may then forward this information to proxy , which appropriately updates faulting remote reference . If an object later de-activates, or is de-activated, object activator  similarly communicates with proxy  to update the faulting remote reference.","Preferably, one activation entity  exists per each active Java virtual machine .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["102","205","212","102","205","402","404","205","211","210","302","402","406","302","210","408","408","410","411","408","412","414","415","205","416"]},"As described above, object groups such as group  form the basic unit of object activation. Object activator  and activation entities  manage the object groups, such that if a group has not been activated then a call to any object of an object group will cause the activation of that object group and the called object in a new Java virtual machine.","Clustering objects within an object group on a single Java virtual machine allows related objects to share an address space, which in turn allows close communication between the objects. Objects in different groups, on the other hand, are in different Java virtual machines and thus have a much stronger security separation, ensuring that those objects will not interfere, either intentionally or unintentionally, with each other.","Further, a single interface is seen by clients attempting to call remote objects. The interface has multiple implementations depending on the status of the object being referenced, allowing for transparent mixing of active and passive (i.e., activatable) objects in the same system, supporting both without requiring that the clients of those objects have any knowledge of whether or not the object is activatable. This interface provides the client the ability to make any calls that are supported by the remote object through a faulting remote reference.","It will be apparent to those skilled in the art that various modifications and variations can be made to the concepts of the present invention and in its construction without departing from the scope or spirit of the invention. Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only, with a true scope and spirit of the invention being indicated by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate several embodiments consistent with this invention and, together with the description, help explain the principles of the invention. In the drawings,",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
