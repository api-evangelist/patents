---
title: Method and apparatus for net-pay and debt consolidation
abstract: A method and apparatus for consolidating net-pay and debt management of a sales representative or sales team is presented. A party associated with the sales representatives may obtain debts and specify rules on payment of those debts which can be tracked back to the domain (e.g., agreements, rules, sale item, etc.). The ledger items created for that distributor by the commission engine are typically processed to distribute payments into accounts specified by the distributor and to pay debts obtained by the distributor. Available money may be split into various methods of payments for a distributor. These splits can be tracked by adding various constraints (related to the financial industries business model). The system allows the user to model the payment rule/constraints. Payment splits support pay-outs to alternate payee from funds of a distributor. The distributor may specify deduction rules which can be applied to the distributors earning to facilitate deductions for items such as taxes, mutual funds etc. The system offers the flexibility to choose the method of payment for a distributor for each issued debt. Debt repayment rules are introduced so that debts can be repaid from available earnings of a distributor. Debt collection mechanisms for defaulters are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08239312&OS=08239312&RS=08239312
owner: Versata Development Group, Inc.
number: 08239312
owner_city: Austin
owner_country: US
publication_date: 20010315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","APPENDIX A","APPENDIX B","RULE MODELING EXAMPLES","Example 1","Example 2","Example 3","Example 4","Example 5","Example 6"],"p":["1. Field of the Invention","This invention relates to the field of computer software. More specifically, the invention relates to performing net pay\/debt consolidation when distributing a commission payment.","Portions of the disclosure of this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","2. Background Art","In modern business environments, it is commonplace to employ sales representatives to market the goods and services offered for sale. Sales representatives receive compensation based on a salary, the hours worked, and\/or on the goods or services sold. When basing compensation on the goods or services sold, sales representatives receive a commission that can be based on profits, net sales, the number of products sold, or some other variable.","To provide sales representatives with an incentive to sell as much as possible or to sell more of a desired product or products at certain prices, sales organizations create incentive plans wherein Commissions (also referred to as Promotions) are provided or offered to the sales representatives when specific sales goals or targets are attained during a defined time period. For example, a Promotion may consist of paying a bonus of $50 if a blue hammer is sold in the month of July or paying $1 for each of the first 1000 hammers sold and $2 for any additional hammer sold in the month of July. Some incentive plans provide for individual sales representatives to be apportioned credit towards a promotional level (such as a bronze, silver, or gold level) when a sale is made.","In addition, an incentive plan may apportion credit (towards a Promotion) to everyone on a sales representative's sales team, to the representative's manager, or someone other than the sales representative himself. Providing credit to persons in a selling chain (i.e., an immediate supervisor, a manager, a senior manager, etc.) is referred to as an override or rolling up (a \u201croll-up\u201d) the selling chain. Figuring out who should be apportioned credit for a sale can be complex and difficult to administer. This is particularly true when a company has several different types of sales people from direct representatives, external agents, telemarketers, to distributors and resellers. The increasing use of sales teams, account territory, and product managers has further complicated the management of sales crediting.","The management of a business can spend a great deal of time and money in developing incentive plans. In the prior art, the creation and distribution of incentive plans is a slow process that is prone to error. Large businesses merely print up or email a plan to retailers. The retailers add Promotions and targets to the plan and distribute the plan to the sales representatives. To calculate the payment or Promotion each sales representative will receive, the sales information is mailed back to the businesses headquarters where the calculations and determinations are made. The Promotion or payment is then transmitted back to the retailer and distributed to the sales representative. Mistakes in the calculations can often be made at headquarters requiring a repetition of the entire process. Often the sales representatives do not receive a copy of the plan prior to making sales. Consequently, the sales representatives are unaware of the basis for their compensation or how an incentive plan works until after compensation is received (which can occur one or two payment periods after the sales have occurred and after the promotion's time period has expired). Such a delay defeats the underlying purpose of an incentive plan to promote the sale of particular products or services (i.e., the sales representative does not know what products or services the sales organization desires to promote).","In today's competitive environment, companies thrive (and survive) on the basis of being able to quickly change and evolve. This is especially true in the sales and marketing area where rapid business changes are the norm. Competitive companies cannot afford being obligated to adhere to a static information infrastructure or a slow incentive plan process that cannot keep up with a rapidly changing business environment.","In a traditional system solution, the particular business rules are broken down into their core components, which in turn are programmed using some computer language. The traditional system is adequate to represent a rigid and static business problem, like a general ledger or inventory system, for example. However, the traditional system is costly when trying to represent a quickly changing business environment like that of a sales organization, which role is to constantly change and to evolve to align itself to changing customer needs, market changes, sales channels and internal business initiatives.","Retailers are often not permitted to modify or create their own incentive plans for the sales representatives. An incentive plan can only be selected from a list of predefined plans created at a business headquarters. Further, sales representatives can often manipulate an incentive plan (by their actions) to obtain additional compensation unintended by management. In addition, the ability to view and organize information regarding sales transactions is unavailable or difficult in the prior art. Thus, retailers cannot easily observe statistics such as the products or services that are selling quickly, which sales teams or representatives are selling the most, the average cost a particular product is being sold for, etc. Furthermore, combining payments made to individuals for a large amount of transactions and\/or payments made to teams of individuals may result in creating credits or debits in the individuals accounts. The accounting and bookkeeping required to manage sales accounts due to over payments and debts represent an overhead that maybe costly to businesses.","Thus, a system that accurately and effectively calculates compensation to be paid to sales representatives, and allows flexibility to adjust an incentive plans and manage a sales force accounts as needed in a rapidly changing environment is desired.","The invention provides for a method and apparatus for determining the commission to be paid to a sales representative or sales team taking into account any debts associated with the sales representative or sales team. For example, an embodiment of the invention provides a method for a distributor to obtain debts and specify rules on payment of those debts which can be tracked back to the domain (e.g., agreements, rules, sale item, etc.). Thus, the invention comprises an extensible method and apparatus for consolidating payment and debt management. Whenever a sale occurs, a Transaction describing the sale is created and input into the Commission System of one embodiment of the invention. Based on a set of Allocation Rules that specify the credit an individual is to receive from a Transaction, the Transactions are converted into one or more Allocations for individual Sales Representatives or Sales Teams.","One or more Quotas specify a target or goal that must be reached to earn commission for each Sales Team. A Quota State indicates the current performance of a Sales Representative with respect to a particular Quota within a particular time frame. The Quotas are used to convert the Allocations\/Transactions into Quota Details that specify how to increment or decrement the Quota State.","A Promotion specifies the reward or commission that is received upon attaining a desired level of performance. Once a Quota State reaches a level necessary to receive a Commission or reward as set by a specific Promotion, a ledger item indicating the amount to be paid to a particular Sales Team is created.","An embodiment of the invention provides a method for a distributor to obtain debts and specify rules on payment of those debts which can be tracked back to the domain (e.g., agreements, rules, sale item, etc.). The ledger items created for that distributor are typically processed to distribute payments into accounts specified by the distributor and to pay debts obtained by the distributor. The invention provides the ability to split the available money for a distributor in various methods of payments. These splits can be tracked by adding various constraints (related to the financial industries business model). The system allows the user to model the payment rule\/constraints. Payment splits support pay-outs to alternate payee from funds of a distributor. The distributor may specify deduction rules which can be applied to the distributors earning to facilitate deductions for items such as taxes, mutual funds etc. The system has Global deduction components, which form the template for adding deduction rules for a party.","The invention allows issuance of debt for a distributor in a multiple step process. First the user has to set up debt issuance rules; these rules could apply to all parties in the system, group of parties or may be party specific. The user can also specify a rule based on some criteria in the object model. After setting up debt rules, debt could be issued to a distributor depending on their qualification. The system offers the flexibility to choose the method of payment for a distributor for each debt being issued. Additionally, the invention provides a method for approval of the debt, whereby debt repayment rules are introduced so that the debt could be repaid from the available earnings of the distributor. Debt collection mechanisms for defaulters are also provided.","A user interface may be used to create Allocation Rules, Quotas, and Promotions that are awarded for performance over a specified time period. In this manner, a business may set up incentive plans and determine commissions easily and accurately.","The invention is a method and apparatus for determining commission to be paid to a sales representative or sales team taking into account any debts associated with the sales representative or sales team. For example, an embodiment of the invention provides a method for a distributor to obtain debts and specify rules on payment of those debts which can be tracked back to the domain (e.g., agreements, rules, sale item, etc.). In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It is apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention.","Embodiment of Object Model for Determining Commissions","The net pay debt management system may be coupled to a Commission System. The Commission System provides the ability to determine Commissions and amounts payable to sales representatives. The Commission System and commission model utilized in one or more embodiments of the invention is described in further detail in pending patent application Ser. No. 09\/081,857, entitled \u201cMethod and Apparatus For Determining Commission\u201d, which in incorporated herein by reference.","Net-Pay Debt Management","One or more embodiments of the invention provide a method for consolidating net pay and debt management associated with different types of users (the term user may represent one or more parties, distributors, sales representatives, or managers). For example, the invention provides users with a mechanism for defining debts and specifying rules on payment of those debts. The payment of debts and distribution of money into one or more accounts may be tracked back to the domain (e.g., agreements, rules, sale item, etc.).","System Overview:","The functionality for performing such actions may be encapsulated into a debt management module and a net pay module (referred to collectively as a net pay debt management system). The debt management module enables the user to administer and maintain the issuance, transference, and recovery of debt (for example, advances, draws, or loans). In addition to encapsulating these debt rules, the debt management module also provides an automated process for advancing funds according to debt rules defined in the system.","The debt management module enables a financial services institution to manage party advances and repayments. With the debt management module, the user can define and manage the business rules and parameters associated with the approval and payment of advances. Users can also make adjustments to advance balances based on actual dollars received from commission and accelerate repayment schedules if commissions fall short. The debt management module also enables the user to define the rules and parameters associated with advances. In accordance with one embodiment of the invention, the user can utilize the debt management module to define at least the following items:\n\n","One embodiment of the invention allows issuance of debt (e.g., advances, draws, or loans) for a party in a multiple step process. First the user has to set up debt issuance rules; these rules could apply to all parties in the system, group of parties or may be party specific. The user can also specify a rule based on some criteria in the object model. After setting up debt rules, debt could be issued to the party depending on their qualification. The system offers the flexibility to choose the method of payment for each debt being issued. Additionally, embodiments of the invention provide a method for approval of the debt, whereby debt repayment rules are introduced so that the debt could be repaid from the available earnings of the distributor. Debt collection mechanisms for defaulters are also provided.","In an embodiment of the invention the functions for consolidating net payment are incorporated into a net pay module. The net pay module enables financial institutions to track and calculate payments to distributors. Thus, the net pay module provides functionality for initiating payments to parties defined in the system. For example, the module may determine a party's net pay by adjusting the party's total earned compensation (calculated by the commission engine described above) according to a set of payment adjustment rules. These rules can be used to capture repayment schedules for outstanding debt, model IRS garnishing, and transfer payments to an alternate payee. In accordance with one embodiment of the invention this module also allows parties to split up net payments into individual disbursements and direct different parts of compensation to different accounts. In one embodiment of the invention, the net pay module is associated with a net pay viewer that enables system users to view payment rules and data definitions as well as a net pay editor which enables the user to manage payment rules and data definitions.","In one embodiment of the invention the net pay module comprises a payment engine that utilizes the ledger items created by the commission engine for a distributor as input. Thus, the payment engine is responsible for processing incoming compensation and debt issuances. For example, the payment engine may utilize ledger items to compute total compensation (i.e., payments) for the distributor, to distribute payments into accounts specified by the distributor, and to pay debts of the distributor. The payment engine may also provide the ability to split the total compensation for a party into various methods of payments. These splits can be tracked by adding various constraints (related to a financial industries business model). The system user (which may be an authorized party) has the flexibility to model or customize the payment rule\/constraints. Payment splits support pay-outs to alternate payee from funds of a party. The user may specify deduction rules which can be applied to party earnings to facilitate deductions for items such as taxes, mutual funds etc. The system comprises global deduction components, which form the template for adding deduction rules for a party.",{"@attributes":{"id":"p-0034","num":"0040"},"figref":"FIG. 1","b":["100","1","108","108","100","108","108","102","102","106","106","108","110","110","130","120"]},"The payment rules illustrated at block  may define payments to certain accounts. For example, In one embodiment of the invention, these payments are then disbursed from the party's account balance according to the payment rules that dictate how payable sums are disbursed. External triggers may be implemented to provide custom functionality for the institution, for example. Thus, payment engine  processes incoming compensations (e.g., ledger items) and debt issuances into disbursable items for each party managed by the system. External systems such as cash accounting or general ledger systems can further process the disbursements.","The reader should note that compensation amount  may also be calculated subsequent to application of payment rules . Thus, the sequence of step ,  and  is not fixed. In one embodiment of the invention, compensation amount  represents a subtotal or total amount of compensation to be paid to a party after various rules (e.g., adjustment rules and payment rules) are applied to the ledger items.","Payment Engine:","In accordance with one embodiment of the invention, payment engine  comprises processing logic and a flexible Application Programming Interface (API) that allows for processing of an arbitrary set of incoming transactions (e.g., comprising ledger items). Payment engine  may generate different payment scenarios of estimated payments from estimated compensation amounts. Payments may be retained in volatile memory until the user desires to commit the results to persistent storage. The processing performed by payment engine  applies the various set of rules applicable to a transaction. In one embodiment of the invention, payment processing comprises of compensation aggregation and payment generation.","A. Compensation Aggregation:","The compensation aggregation comprises examining incoming compensation items and making adjustments against those items. Thus, the compensation aggregation step involves making adjustments to a party's gross pay according to a set of predefined rules. Compensation aggregation also performs internal accounting to keep track of these adjustments. For example, at the compensation aggregation step the payment engine may examine a party's incoming compensation items such as unprocessed ledger items ( ) and unpaid debt issuances (e.g., advances, loans, draws) and apply adjustments to them to generate a set of outputs. The adjustments are applied according to a set of predefined rules referred to as payment rules and\/or adjustment rules. Each transaction may be recorded so that an audit trail is maintained.",{"@attributes":{"id":"p-0040","num":"0046"},"figref":["FIG. 2","FIG. 1"],"b":["202","200","200","204","204","206","206","208","208"]},"B. Payment Generation:","Payment generation iterates over the payable funds identified during aggregation and routes them to one or more payment methods as defined by a set of payment split formulas. The input to this phase of processing may comprise a collection of accounts from which disbursements may be generated. During processing, each FSAccount is examined by the associated party's FSFinancialInfo object which encapsulate the split formula.","From the FSAccount (e.g., A-N), payments are made according to methods specified in a party's financial information database (e.g., split formulas).  illustrates a payment generation method in accordance with an embodiment of the invention. In one embodiment of the invention, the payment generation engine executes a method that operates on the collection of accounts, e.g., FSAccount A-N, from which disbursements may be generated. FSFinancialInfo (e.g., A-N) examines each FSAccount  to determine whether any amount need be transferred according to a particular payment method (e.g., Check A, Wire Transfer B, or any other Payment Method N). For example, FSAccount A may be processed by FSFinancialInfo A. If a non-zero amount is returned, the funds accrue in FSPaymentMethod A until all accounts (e.g., FSAccount A-N) have been processed for the party. After processing, a disbursement (e.g., check A) is initiated from the payment method if the payment method is a disbursable state. For example, external triggers may be invoked to perform outside processing of the disbursement. If the disbursement is successful, FSDisbursement A is created to record the event, otherwise an FSPaymentException is created to record the exception. All funds not routed from an FSAccount may be disbursed according to a default payment method, where one exists; otherwise the unaccounted funds may remain in the FSAccount.","C. Net Pay API:","In one embodiment of the invention the functionality associated with net pay module is incorporated into an Application Programming Interface (API). A brief discussion of the API is contained in Appendix A.","Debt Management Engine:","The administration of the issuance, transference, and recovery of debt is performed by the debt management engine  (see e.g., ). Debt management engine also provides automated processes for advancing funds according to debt rules defined in the system. The debt management engine can be run from within the payment engine or individually instantiated and dispatched. In on embodiment of the invention, debt management engine runs as a background batch process (to perform routine debt maintenance operations). However, the debt management engine may also be executed manually. The debt management engine provides the ability to examine the states of financially related attributes on one or more parties managed by the system and may make debt maintenance decisions based upon the debt management rules active for each party. For example, the debt management engine may comprise code (e.g., FSDebtManagementRule object) that access a set of rules (e.g., rule objects) that encapsulate a formula that identifies a condition and an associated action performed when the condition the rule relates to is met. During the rule evaluation process embodiments of the invention may determine whether to 1) issue new debt, 2) transfer debt between accounts, or 3) identify exceptional conditions and firing an event for external handling.","A. Issuing New Debt:","In one embodiment of the invention rules may define how much debt to issue. For instance, rules that determine the maximum debt allowed for a given party may be incorporated into the debt management engine.  is an illustration of the debt issuance object flow in accordance with an embodiment of the present invention. Each instance of debt management rule object  encapsulates a formula that identifies a condition and an associated action to be performed when the condition is met. The debt issuance rules determine the maximum debt for any given party based on the input ledger items and type of transaction . When a debt issuance rule evaluates to true, the debt is issued (e.g., FSDebt is created), and FSPaymentRule  is created to hold the repayment criteria for the new debt. The new debt is processed according to existing payment rules (e.g., the system picks up the FSDebt during the next payment engine cycle and processes it according to the existing payment rules). The debt engine may evaluate the FSPaymentRule during this pay cycle and all following ones until the debt is fully repaid. For automatic rules, the payment engine creates an advance, FSAdvance , for the amount and the money is automatically transferred according to existing payment rules. Finally, a detail report of the transaction is recorded in FSAccountUpdateDetail object . FSPaymentRule  is continuously evaluated until the debt is fully repaid. Default payment rules that serve as base repayment rules for new debts may be included in FSDebtManagementRule . If you specify a default repayment rule on the FSDebtManagementRule issuing this debt, that rule is cloned as the base repayment rule for the new debt. After the FSDebt is created, it is passed to the OnIssuance call to tie into custom logic.","B. Transferring Debt:","Funds may be transferred from one account to another based on some transfer set of rules.  is an illustration of the debt transfer object flow in accordance with an embodiment of the invention. For example, debt may be transferred from account FSAccount  to FSAccount  when debt-transference rule, FSDebtManagementRule , evaluates to true. In one embodiment of the invention, the transfer occurs instantaneously, but may occur any time subsequent to the occurrence of the test. Upon transfer, the transaction may be recorded using FSAccountTransfer object .","C. Identifying Conditions:","The debt engine may use condition-type debt management rules to identify situations in which special attention and\/or further processing is required. For example, condition rules can be constructed to identify delinquent debt balances and other exceptional conditions.","D. Debt Management API:","In accordance with one embodiment of the invention, the debt management engine is configured to perform either automated or manual processing of the debt rules. However, the invention contemplates the user of other processing techniques (e.g., semi-automatic), the automated and manual instances will be described herein for illustrative purposes. Automated processing passes incoming transaction, ledger items, and account objects into the debt management rules for evaluation so that the system can efficiently react to new financial data as it arrives. In addition to directly acting upon these objects, the entire state of any associated system is considered. Manually initiated processing does not directly operate upon any object, but instead relies on its rules (e.g., through SCFormula evaluation) and on engine callouts to gather information necessary for processing debts.","In one embodiment of the invention, each payment and\/or debt rule has an SCFormula object associated with it that when evaluated results in some value, for example, a numeric value. The evaluated result is passed to a method call to an external event handler for additional and\/or optional processing. For example, the handler may check regulatory rules, licenses, and appointments before returning a response to the debt management engine. If the evaluated rule is an automatic type rule, the payment engine creates an advance for the amount returned by the external call. However, if the rule is not automatic, the value returned by the external call may be used to limit the amount for which a manual advance may be issued.","The debt management system automates the process of issuing and maintaining debt by examining the states of financially related attributes on one or more parties managed by the system and making decisions based upon predefined rules active for each party.","E. Alternate Payee:","The payment engine provides method for an Alternate Payee party to receive pay instead of the party who earned the compensation. The alternate payee might be a manager, for example, who is receiving compensation for sales during a distributor's training period. Before a party can become an alternate payee, that party must be assigned an Alternate Payee role and an Alternate Payee Relationship (e.g., FSAlternatePayeeRelationship object) must be created which links the two parties (the manager and the trainee) together.","A distributor can then select an alternate payee to receive some or all of the distributor's compensation (according to a formula) by creating an FSFinancialInfo object that references the payment method on an FSAlternatePayeeRelationship. In some cases, it may be necessary to check if an alternate payee is licensed or appointed to sell a product before issuing payment from funds generated by the sale of the product. This check can occur within the InitiatePayment method on the alternate payee's payment method. If this check fails, then payment is halted and an FSPaymentException object may be recorded to capture this exception.","In one embodiment of the invention the functionality associated with the debt management engine (debt module) is incorporated into an Application Programming Interface (API). A brief discussion of the API is contained in Appendix B.","Embodiment of Computer Execution Environment (Hardware)","An embodiment of the invention can be implemented as computer software in the form of computer readable code executed on a general purpose computer such as computer  illustrated in , or in the form of bytecode class files running on such a computer. A keyboard  and mouse  are coupled to a bidirectional system bus . The keyboard and mouse are for introducing user input to the computer system and communicating that user input to processor . Other suitable input devices may be used in addition to, or in place of, the mouse  and keyboard . I\/O (input\/output) unit  coupled to bidirectional system bus  represents such I\/O elements as a printer, A\/V (audio\/video) I\/O, etc.","Computer  includes a video memory , main memory  and mass storage , all coupled to bi-directional system bus  along with keyboard , mouse  and processor . The mass storage  may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology. Bus  may contain, for example, thirty-two address lines for addressing video memory  or main memory . The system bus  also includes, for example, a 32-bit data bus for transferring data between and among the components, such as processor , main memory , video memory  and mass storage . Alternatively, multiplex data\/address lines may be used instead of separate data and address lines.","In one embodiment of the invention, the processor  is a microprocessor manufactured by Motorola, such as the 680\u00d70 processor or a microprocessor manufactured by Intel, such as the 80\u00d786, or Pentium processor. However, any other suitable microprocessor or microcomputer may be utilized. Main memory  is comprised of dynamic random access memory (DRAM). Video memory  is a dual-ported video random access memory. One port of the video memory  is coupled to video amplifier . The video amplifier  is used to drive the cathode ray tube (CRT) raster monitor . Video amplifier  is well known in the art and may be implemented by any suitable apparatus. This circuitry converts pixel data stored in video memory  to a raster signal suitable for use by monitor . Monitor  is a type of monitor suitable for displaying graphic images.","Computer  may also include a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling via a network link  to a local network . For example, if communication interface  is an integrated services digital network (ISDN) card or a modem, communication interface  provides a data communication connection to the corresponding type of telephone line, which comprises part of network link . If communication interface  is a local area network (LAN) card, communication interface  provides a data communication connection via network link  to a compatible LAN. Wireless links are also possible. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to local server computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals which carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer , are exemplary forms of carrier waves transporting the information.","Computer  can send messages and receive data, including program code, through the network(s), network link , and communication interface . In the Internet example, remote server computer  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accord with the invention, one such application is that of determining the commission to be disbursed to a sales representative.","The received code may be executed by processor  as it is received, and\/or stored in mass storage , or other non-volatile storage for later execution. In this manner, computer  may obtain application code in the form of a carrier wave.","Application code may be embodied in any form of computer program product. A computer program product comprises a medium configured to store or transport computer readable code, or in which computer readable code may be embedded. Some examples of computer program products are CD-ROM disks, ROM cards, floppy disks, magnetic tapes, computer hard drives, servers on a network, and carrier waves.","The computer systems described above are for purposes of example only. An embodiment of the invention may be implemented in any type of computer system or programming or processing environment.","Utilization of Computer Software:","In one embodiment of the invention, computer software that utilizes multiple related functions and data structures is utilized. To encapsulate these related functions and data structures, one embodiment of the invention utilizes a standard object oriented programming (OOP) language approach. To provide an understanding of encapsulation of related data structures and methods, an overview of object-oriented programming is provided below.","Object-Oriented Programming","Object-oriented programming is a method of creating computer programs by combining certain fundamental building blocks, and creating relationships among and between the building blocks. The building blocks in object-oriented programming systems are called \u201cobjects.\u201d An object is a programming unit that groups together a data structure (one or more instance variables) and the operations (methods) that can use or affect that data. Thus, an object consists of data and one or more operations or procedures that can be performed on that data. The joining of data and operations into a unitary building block is called \u201cencapsulation.\u201d","An object can be instructed to perform one of its methods when it receives a \u201cmessage.\u201d A message is a command or instruction sent to the object to execute a certain method. A message consists of a method selection (e.g., method name) and a plurality of arguments. A message tells the receiving object what operations to perform.","One advantage of object-oriented programming is the way in which methods are invoked. When a message is sent to an object, it is not necessary for the message to instruct the object how to perform a certain method. It is only necessary to request that the object execute the method. This greatly simplifies program development.","Object-oriented programming languages are predominantly based on a \u201cclass\u201d scheme. The class-based object-oriented programming scheme is generally described in Lieberman, \u201cUsing Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems,\u201d OOPSLA 86 Proceedings, September 1986, pp. 214-223.","A class defines a type of object that typically includes both variables and methods for the class. An object class is used to create a particular instance of an object. An instance of an object class includes the variables and methods defined for the class. Multiple instances of the same class can be created from an object class. Each instance that is created from the object class is said to be of the same type or class.","To illustrate, an employee object class can include \u201cname\u201d and \u201csalary\u201d instance variables and a \u201cset_salary\u201d method. Instances of the employee object class can be created, or instantiated for each employee in an organization. Each object instance is said to be of type \u201cemployee.\u201d Each employee object instance includes \u201cname\u201d and \u201csalary\u201d instance variables and the \u201cset_salary\u201d method. The values associated with the \u201cname\u201d and \u201csalary\u201d variables in each employee object instance contain the name and salary of an employee in the organization. A message can be sent to an employee's employee object instance to invoke the \u201cset_salary\u201d method to modify the employee's salary (i.e., the value associated with the \u201csalary\u201d variable in the employee's employee object).","A hierarchy of classes can be defined such that an object class definition has one or more subclasses. A subclass inherits its parent's (and grandparent's etc.) definition. Each subclass in the hierarchy may add to or modify the behavior specified by its parent class. Some object-oriented programming languages support multiple inheritance where a subclass may inherit a class definition from more than one parent class. Other programming languages support only single inheritance, where a subclass is limited to inheriting the class definition of only one parent class.","An object is a generic term that is used in the object-oriented-programming environment to refer to a module that contains related code and variables. A software application can be written using an object-oriented programming language whereby the program's functionality is implemented using objects. The encapsulation provided by objects in an object-oriented programming environment may be extended to the notion of transactions, allocations, quotas, quota details, quota states, and promotions as discussed below.","In one embodiment of the invention, a shell object mechanism is utilized to store and provide access to objects and data. Such a mechanism is discussed in detail in pending U.S. patent application Ser. No. 08\/931,878 entitled \u201cMethod and Apparatus for Providing Peer Ownership of Shared Objects\u201d which is hereby incorporated by reference.","Thus, a method and apparatus for consolidating payment and debt management is described in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents.","A brief discussion of the API implementing aspects of the net pay module in accordance with one or more embodiments of the invention will now be described. The API provides a way to invoke the payment engine and may be utilized by the engine to call external logic.","A. Engine Setup:","In one embodiment of the invention, the payment engine class, (e.g., com.company.fs.payment.engine.FSPaymentEngine), provides two constructors:\n\n","B. Methods:","In one embodiment of the invention, the following methods offering operating options may be set once an instance of the engine is created.\n\n","A secondary, simple interface is provided for launching the Compensation Aggregation phase when it is desired that all unprocessed compensation items should be processed:","public int Aggregate( )\n\n","C. Payment Generation:","The call for initiating the Payment Generation phase of payment processing in accordance with one embodiment of the invention is: public int GeneratePayments(ISCCollection accounts). accounts contains all of the FSAccount's that should be processed for payment generation during this engine run. In one embodiment of the invention, for correct disbursement operation, the accounts collection must me grouped by party.","A convenience interface is also provided that automatically passes in all eligible accounts into the above method call: Public int GeneratePayments( ). Calling this method in accordance with one embodiment of the invention will generate payments for all accounts whose payable flag is true and pended flag is false.","Examining\/Committing Results","When each phase of the engine runs, results (modified objects and new objects) are stored in internal collections and are not automatically committed to persistent storage. The following methods should be used to examine the results of an engine run and commit this data.","Methods\n\n","Engine Callouts","During engine processing, there are many points at which external logic may be executed. These integration points are implemented as backbone method providers. In order to integrate with external logic, one or more of the following providers should be overridden.","IFSPaymentRule.AllowAdjustment\n\n","IFSPaymentRule.OnAdjustment\n\n","Classes in the Net Pay Module:","The following section lists and describes the classes included in the Net Pay Module in accordance with one embodiment of the invention.","FSPaymentProfile","The FSPaymentProfile class links an FSParty in the system with the set of rules that dictate how payments should be processed for the party.","Ruleset Objects","This collection of FSPaymentRule objects defines what adjustments need to be made to the incoming payment request.","FSPaymentRule","The FSPaymentRule class maps a set of rules (described by an SCFormula) to payment adjustments that need to fire when a given rule evaluates to true.\n\n","An FSAdjustment contains information related to crediting or debiting a single account, although it does not record an actual adjustment event. When an account is adjusted, an FSAccountUpdateDetail object is created to record a history of this account transaction.\n\n","An FSAccount is an in-system repository for various fund amounts. One party may have multiple accounts. For example, a particular party may have an Advance account and an Earned Compensation account whose balances reflect the amount advanced to and earned by the party. Alternatively, a party may have many system accounts that map to individual policies, components, and agreements.\n\n","The FSAccountUpdateDetails object contains adjustment information for FSAccount objects. Whenever the system modifies the balance of an FSAccount, it creates an FSAccountUpdateDetail object.\n\n","The FSFinancialInfo class maps an individual payment method to a condition that triggers the execution of that payment method. FAgreementRelationship and FSParty classes currently maintain collections of FSFinancialInfo objects.\n\n","This is the base class for defining various methods of payment. It defines an interface, InitiatePayment( ) for initiating the disbursement of funds.\n\n","The FSPaymentDetail class records the issuance of a single payment. The system creates an FSPaymentDetail whenever an FSPaymentMethod executes successfully.\n\n","The FSPaymentException class records an exception that occurs during the payment cycle. There are only two situations in which the system creates exceptions. If the amount exceeds the MaxPayThreshhold of an FSPaymentMethod, or if the InitiatePayment( ) method of an FSPaymentMethod returns false, thereby blocking payment.","Date",{"@attributes":{"id":"p-0113","num":"0000"},"ul":{"@attributes":{"id":"ul0076","list-style":"none"},"li":"The date this exception occurred.\n    \n    "}},"In the Payment module, as in the Debt Management module, the system uses SCFormula objects to model a variety of rules. For more information, see SCFormula Properties in Payment and Debt Management Objects.","Alternate Payee Parties","The Payment module allows for alternate payees.","A brief discussion of the API implementing aspects of the debt management functionality described herein in accordance with one or more embodiments of the invention will now be described. The API provides a way to invoke the debt management engine.","Introduction to Debt Management API:","This section details the objects used in Debt Management processing. There are two means of processing: automatic and manual. Though the core rule-evaluation engine is the same for both, automated (batch) operations and manually initiated processing make use of different interfaces to invoke debt processing.","Automated processing passes incoming transaction, ledger item, and account objects into the debt management rules for evaluation so that the system can efficiently react to new financial data as it comes in. In addition to directly acting upon these objects, the entire state of the DMS system is considered by evaluating the SCFormula method (from within individual debt management rules) and engine callouts.","Manually initiated processing, however, does not directly operate upon any objects. Instead, it relies solely on its rules (through SCFormula method evaluation) and on engine callouts to gather the information necessary for processing debts.","Setting up the Debt Manager:","The FSPEDebtManager class is used for both run time rule evaluation (used for manually-initiated debt management) and for automated batch processing. The constructor for this class is:\n\n","During manual processing, the debt engine evaluates only those debt rules whose run time property is true. The interface for this form of processing allows only for the issuance of debt.","To check for the maximum allowable issuance amount for a given party, instantiate FSPEDebtManager and call:\n\n","The DMS software can invoke automatic processing of debt management rules from either the payment engine, or directly from an instance of FSPEDebtManager. However, during engine processing, only those debt rules whose Automatic property is true are evaluated.","Both the payment and the debt management classes provide the following interface for launching the debt engine:\n\n","The ledgers, transactions, and accounts collections contain the objects passed as arguments to the debt rules during processing. The parties collection is an optional argument used to batch-fault the parties into memory.","Note: The ledgers, transactions, and accounts collections may be grouped by party for optimal performance.","The payment engine additionally provides a convenience method for debt processing invocation that queries for all ledger items and transactions that have not yet been processed by the debt engine and passes them into the ISCCollection interface:\n\n","During engine processing, there are many points at which the system executes external logic. These integration points are implemented as backbone method providers on FSDebtManagementRule. In order to integrate with external logic, one or more of the following providers should be overridden.","IFSDebtManagementRule.CheckExternalRules",{"@attributes":{"id":"p-0129","num":"0000"},"ul":{"@attributes":{"id":"ul0091","list-style":"none"},"li":{"@attributes":{"id":"ul0091-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0092","list-style":"none"},"li":"public double CheckExternalRules(IFSDebtManagementRule rule, ISCObjectBase obj, double amount)"}}}},"The system calls CheckExternalRules after evaluating the FSDebtManagementRule. The value returned from the rule evaluation is amount and obj is the object passed into the formula for evaluation. This method needs to return the amount, possibly modified, that the rule should use in subsequent processing. The method should return 0.0 to halt further processing of the rule for the current evaluation object. The default implementation simply returns amount.","IFSDebtManagementRule.AllowIssuance",{"@attributes":{"id":"p-0131","num":"0000"},"ul":{"@attributes":{"id":"ul0093","list-style":"none"},"li":{"@attributes":{"id":"ul0093-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0094","list-style":"none"},"li":"public boolean AllowIssuance(IFSDebtManagementRule me, ISCObjectBase obj, double amount)"}}}},"The system calls AllowIssuance when an issuance rule and the subsequent call to CheckExternalRules evaluate to a non-zero value. If the call returns false, the debt issuance is cancelled and processing resumes with the next available rule evaluation. If the call returns true, the system issues the debt IFSDebtManagementRule.OnIssuance\n\n","The system calls AllowTransfer when a transfer rule and the subsequent call to CheckExternalRules evaluate to a non-zero value. If the call returns false, the transfer is cancelled and processing resumes with the next available rule evaluation. If the call returns true, the system processes the transfer.","IFSDebtManagementRule.OnTransfer",{"@attributes":{"id":"p-0134","num":"0000"},"ul":{"@attributes":{"id":"ul0097","list-style":"none"},"li":{"@attributes":{"id":"ul0097-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0098","list-style":"none"},"li":["public void OnTransfer(IFSDebtManagementRule me, IFSAccountTransfer transfer)","OnTransfer is called after a transfer executes.\n\nIFSDebtManagementRule.OnCondition\n","public void OnCondition(IFSDebtManagementRule me, IFSDebtException de)","OnCondition is called after a debt exception is created.\n\nRule Modeling:\n"]}}}},"At the heart of the DMS Debt Management system is a set of rules encapsulated in FSDebtManagementRule objects that collectively define the policies governing debt management operations. Though there are three different types of rules\u2014issuance, transference, and condition\u2014all use the same FSDebtManagementRule class. The DMS user interface also manipulates all three types of rules in similar manners.","Creating New Debt Management Rules:","The rules-maintenance interface falls under the top-level Maint heading in the system. Through the Maint user interface you can create new debt management rules and examine or edit existing rules. See the DMS User Guide for details on using Maint.","All rule formulas have access to properties and methods of any FSParty being evaluated, as well as to the properties and methods of the associated FSDebtManagementRule object. Automatic rules may also reference properties on SCCMLedgerItem, SCCMTransaction, and FSAccount.","The examples that follow use custom methods\u2014such as the FirstOfYear( ) method in the first example\u2014to convey the types of rule formulas possible.","Note: Rules with references to ledger items, transactions, or accounts are only evaluated against like objects (that is, a rule whose formula references LedgerItem will be ignored for incoming transactions and accounts).","Issue an advance for one year's expected income for incoming ledger items whose product is Life.\n\n","Issue an advance for six months. The advance equals the estimated compensation from the distributor's first transaction in each six month period for a given product.\n\n","Here the compensation for the six month period is estimated at: 6*Transaction.UnitPrice*0.3. The example uses 6 because no compensation has yet been processed for this transaction. The value 0.3 is used as a rough estimate to calculate the monthly income from this policy. The value is an estimate since the system has not yet calculated the exact number.","Transfer debt from parties with a lost status to a debt collection account.\n\n","Note: Transfer rules move funds (debt) from the examined account to the account specified in the ToAccount property of the rule.","Raise a condition for accounts that have had a debt balance for over one year.\n\n","This formula will return 1 for accounts with debt balances that have lasted longer than a year. This return value will cause the debt management logic to create an FSDebtException and raise the condition (call the OnCondition( ) method).","Default Repayment Criteria\/Formulas:","The default repayment criteria maps to FSPaymentRule and the default formulas map to FSAdjustment objects. The criteria and formulas define the repayment schedule for a debt.","Repay the debt with 100% of remaining compensation from any compensation source.\n\n","Repay the debt with 50% of gross compensation only from agreements AG1, AG2, AG3, AG4, AG5.","Solution 1","Criteria:",{"@attributes":{"id":"p-0150","num":"0000"},"ul":{"@attributes":{"id":"ul0109","list-style":"none"},"li":{"@attributes":{"id":"ul0109-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0110","list-style":"none"},"li":["LedgerItem.GetAgreement( ).Unid==\u2018AG1\u2019\u2225","LedgerItem.GetAgreement( ).Unid==\u2018AG2\u2019\u2225","LedgerItem.GetAgreement( ).Unid==\u2018AG3\u2019\u2225","LedgerItem.GetAgreement( ).Unid==\u2018AG4\u2019\u2225","LedgerItem.GetAgreement( ).Unid==\u2018AG5\u2019\u2225\n\nFormula:\n\nBaseAmount*0.5\n\nSolution 2\n\nCriteria:\n","Rule.CheckRightOfOffset(LedgerItem.GetAgreement( ))\n\nFormula:\n","BaseAmount*0.5"]}}}},"This example demonstrates the modeling of a Right of Offset condition in which compensation from multiple agreements may be used to repay a debt. The second solution assumes the existence of a custom method on\n\n","Party match formulas are used to identify the parties whose debt situations are subject to evaluation by the owning debt management rule.","Example 1",{"@attributes":{"id":"p-0153","num":"0000"},"ul":{"@attributes":{"id":"ul0112","list-style":"none"},"li":{"@attributes":{"id":"ul0112-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0113","list-style":"none"},"li":["All parties should use this rule.","True","Returning true will make the formula evaluate to true for all parties in the system.\n\nExample 2\n","Only Bob should use this rule.","Party.Name==\u2018Bob\u2019\n\nExample 3\n","Only parties whose primary address is in Texas should use this rule. Party.PrimaryContactUsage.ContactPoint.Address.State==\u2018Texas\u2019\n\nClasses in the Debt Management Module:\n"]}}}},"The following section lists and describes the classes included in the Debt Management Module.","FSDebtManagementRule","The FSDebtManagementRule class defines the set of rules required to determine if a party is eligible for an advance, whether to allow a debt transfer, and whether to raise an attention condition.\n\n","The FSDebt class persists a single debt issuance as determined by an FSDebtManagementRule object.\n\n","This class maintains information related to the occurrence of a debt condition. Examples of debt conditions may be delinquent debt and written-off.\n\n","In the Debt Management and Payment systems, SCFormula objects are used to model a variety of rules across several distinct classes. This section describes the application of the SCFormula to each of these rules in more detail. The Objects section for each rule lists the objects available to the SCFormula during its evaluation, that is, the properties on these objects can be used in the formula. The Variables section lists other variables that are available to the formula during evaluation.","FSPaymentRule.Rule:","These rules define a policy for executing a set of account adjustments. Note that these rules are also used to define debt repayment schedules; that is, the formula is set up to model a schedule that credits money to an account with a debt balance. The rule should return true to enable adjustment processing. Return values of false prevent processing of the associated adjustments.","Objects",{"@attributes":{"id":"p-0160","num":"0000"},"ul":{"@attributes":{"id":"ul0148","list-style":"none"},"li":["LedgerItem\n    \n    ","Debt\n    \n    ","Rule\n    \n    ","BaseAmount\n    \n    ","RemainingAmount\n    \n    "]}},"The following sample does the following:\n\n","This formula calculates how much compensation is directed to\/from a single FSAccount.","Objects and Variables",{"@attributes":{"id":"p-0163","num":"0000"},"ul":{"@attributes":{"id":"ul0156","list-style":"none"},"li":["BaseAmount\n    \n    ","RemainingAmount\n    \n    ","LedgerItem\n    \n    ","Debt\n    \n    ","Rule\n    \n    ","UpdateAccount\n    \n    "]}},"This formula calculates how much compensation is disbursed via the associated FSPaymentMethod.","Properties and Methods",{"@attributes":{"id":"p-0165","num":"0000"},"ul":{"@attributes":{"id":"ul0164","list-style":"none"},"li":["Account\n    \n    ","Agreement\n    \n    ","Component\n    \n    ","Party\n    \n    ","Policy\n    \n    ","Product\n    \n    ","BaseAmount\n    \n    ","RemainingAmount\n    \n    "]}},"This formula is used in different ways according to the rule type of this FSDebtManagementRule. If the rule class is ADVANCE, this formula calculates the advance amount. If the rule class is TRANSFER, this formula calculates the transfer amount. If this rule class is CONDITION, the formula calculates whether or not to raise the condition.","Properties and Methods",{"@attributes":{"id":"p-0167","num":"0000"},"ul":{"@attributes":{"id":"ul0174","list-style":"none"},"li":["Party\n    \n    ","Rule\n    \n    ","Transaction\n    \n    ","LedgerItem\n    \n    ","Account\n    \n    "]}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
