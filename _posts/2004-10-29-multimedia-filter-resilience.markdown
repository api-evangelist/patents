---
title: Multimedia filter resilience
abstract: Providing resiliency to a multimedia application. A list of filters associated with the multimedia application is identified. It is determined if one or more filters of the identified list of filters are suitable for the multimedia application. The one or more filters are disabled if the one or more filters are determined to be unsuitable for the multimedia application. The one or more filters of the list of filters may also be presented to a user of the multimedia application as a function of suitability of each of the list of filters for the multimedia application. The user is allowed to manage the presented one or more filters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640552&OS=07640552&RS=07640552
owner: Microsoft Corporation
number: 07640552
owner_city: Redmond
owner_country: US
publication_date: 20041029
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Exemplary Environment"],"p":["Embodiments of the present invention relate to the field of multimedia data processing. In particular, embodiments of the invention relate to improving reliability and stability of multimedia applications that use filters, objects and\/or transforms to process multimedia data.","Presently, computer users desire a computer system that supports a presentation of multimedia data, including graphic, audio, and imaging information. The popularity of multimedia presentations has encouraged the development of a variety of multimedia formats, such as compressed video (e.g., Moving Picture Experts Group (MPEG)), uncompressed video, compressed audio, and uncompressed audio. Earlier multimedia systems were compatible with a limited set of data formats and typically operated in a uniform manner to play a video and\/or audio stream.","Later multimedia systems used replaceable sections within a rigid format to handle more than one type of multimedia data format. The replaceable sections represented functional components for processing multimedia streams. The functional components typically included a file reader, a data stream splitter to split video and audio data streams, a decoder for decoding each data stream, and a renderer for displaying the video stream and presenting the audio stream. The default file reader might be replaceable with a different one to support the reading of a different file format. Likewise, the decoder was replaceable to allow a different encoding technique, and the renderer was replaceable to vary the presentation of the video and audio streams.","Although the sections of these multimedia systems were replaceable, the processing of multimedia data has a fixed format and ordering. For example, a data stream splitter followed a file reader, a decoder was placed before the renderer, and so forth. It was difficult to disable or bypass one or more of the ordered functions of this structured system to perform complex multimedia tasks. For example, this rigid format prevented the simple combination of two files, each including a video stream, to produce a \u201cmerged\u201d video effect.","To handle the wide variety of data formats and to perform complex processing tasks, a flexible multimedia system has been designed to automatically combine software components, called \u201cfilters,\u201d into a graph comprising a chain or chains of filters. This system typically constructs a \u201cfilter graph\u201d by connecting the output of one filter to the input of the next filter to create a data system to allow, for example, splitting and merging of data streams. By connecting filters together via a graph mechanism, it is possible to perform complex operations more easily than other structured multimedia architectures. The range of processing tasks that filters of a graph may perform is greater than tasks performed by a multimedia architecture having a rigid format.","Some existing multimedia environments allow for the automatic creation of a filter graph given an input type and a desired output type. There may be combinations of filter graphs that satisfy a given input\/output type (e.g., two filters may have the same inputs and outputs). When creating a filter graph, these multimedia environments search through a list of filters that satisfy a given filter graph and picks a filter for loading to the filter graph. However, it is possible that the filter loaded to the filter graph has not been tested against a multimedia application during development. Furthermore, some multimedia environments also allow filters to have \u201cmerits,\u201d which specify a priority order for which the filters are to be loaded. Thus, when these multimedia environments attempt to create a filter graph, they search for and load filters that have higher merits. One problem associated with such merit figures, however, is that poorly designed filters are often mistakenly given a higher merit.","Furthermore, some multimedia applications such as editing applications place more stress levels on filters since they process transitions between media clips that desire a simultaneous decoding of two clips and a mathematical combination of resulting frames. In particular, these multimedia applications may invoke filters developed by third parties during preview and publication of a video\/audio timeline. These third-party filters may not have been tested against the multimedia applications. Moreover, some of these third-party filters, as well any filter which does not take into account concurrent instances, are designed for Digital Versatile Disc (DVD) playback applications that do not desire a simultaneous decoding of different clips and thus are not written to have multiple instances called concurrently. In addition, an automatic graph builder may add filters which should not be part of the graph, but because of the merit figure assigned to the graphs these filters are inserted into the graph. Accordingly, crashes in multimedia applications caused by third-party filters have become a leading cause of dissatisfaction among computer users.","Given the number of different third-party filters available, it is likely that on a given environment, there are some corrupt filters or filters that have not been tested for different multimedia applications. These filters may cause a multimedia application to crash. Often, these filters are not integral for a proper operation of the applications, and excluding them from a filter graph may improve the reliability and stability of the applications. However, it may still be desirable that multimedia environments allow third-party filters to be included in the creation of filter graphs so that the environments may process new coder\/decoders (codecs) developed by third parties. Thus, it may not be feasible to disable filter graphs or to disallow third-party filters completely. Also, some application features may desire to plug third-party transitions and effects into a video\/audio timeline.","Accordingly, a solution that effectively improves reliability and stability of a multimedia application is desired.","Embodiments of the invention overcome one or more deficiencies in the prior art by providing, among other things, improved reliability and stability of multimedia applications that utilize multimedia filters. An embodiment of the invention excludes filters (e.g., third-party filters) that do not function properly in an application program from a filter graph to improve reliability and stability of the application program. According to this embodiment of the invention, the application program maintains a list of known-bad filters and a list of known-good filters. One embodiment of the invention disables the known-bad filters in the application program and enables the known-good filters in the application program. Embodiments of the invention also provide a mechanism for constructing and updating these lists and for interacting with a filter graph manager such that a constructed filter graph excludes known-bad filters and filters that are otherwise disabled. In addition, a user interface (UI) allows a user of the application program to disable a filter that may cause a problem in the application program or to enable a particular filter. Thus, this UI thus allows the user to manage filters by changing their disabled\/enabled states. Moreover, according to an embodiment of the invention, the UI does not present filters that are desired for a correct operation of the application program to prevent the user from disabling such desired filters.","Another embodiment of the invention provides automatic classification and disabling of corrupt filters. Accordingly, embodiments of the invention allow efficient analysis of filter performance and effective management of filters. In yet another embodiment of the invention, a filter graph pipeline is a process separate from a main application process to provide streamlined user experience.","In one form, the invention comprises a method of providing resiliency to a multimedia application. The method comprises: identifying a list of filters associated with the multimedia application, determining if one or more filters of the identified list of filters are suitable for the multimedia application, and disabling the one or more filters if the one or more filters are determined to be unsuitable for the multimedia application.","In another form, the invention is a system for providing multimedia filter resiliency. The system comprises a memory area for storing data regarding a list of filters and a multimedia application for determining if one or more filters of the list of filters are suitable for execution. The multimedia application is configured to disable the one or more filters if the one or more filters are determined to be unsuitable for execution.","In another form, the invention is one or more computer-readable media having computer-executable components for providing multimedia filter resiliency. The computer-readable media comprises a memory component for storing data regarding a list of filters and an application component for determining if one or more filters of the list of filters are suitable for execution. The application component is configured to disable the one or more filters if the one or more filters are determined to be unsuitable for execution.","In another form, the invention is a method of providing resiliency to a multimedia application. The method comprises: identifying a list of filters associated with the multimedia application, presenting one or more filters of the identified list of filters to a user of the multimedia application as a function of suitability of each of the identified list of filters for the multimedia application, and receiving a selection from the user for managing the presented one or more filters.","In another form, the invention is a system for providing multimedia filter resiliency. The system comprises: a multimedia application for processing multimedia data, a memory area for storing data regarding a list of filters associated with the multimedia application, a filter graph manager for constructing a filter graph from the list of filters in response to a user executing the multimedia application, and a user interface for presenting one or more filters of the list of filters to the user as a function of suitability of each of the list of filters for the multimedia application, the user interface further being configured to receive a selection from the user for managing the presented one or more filters.","Computer-readable media having computer-executable instructions for performing a method of providing resiliency to a multimedia application embody further aspects of the invention.","Alternatively, embodiments of the invention may comprise various other methods and apparatuses.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","Referring first to , a block diagram illustrates one example in the prior art of a suitable environment in which embodiments of the invention may be utilized. According to an embodiment of the invention, multimedia data may be controlled and processed by using modular functional components called filters (e.g., Association for Computing Machinery (ACM) codecs, DirectXB Transforms (DXTs), DirectXB Media Objects (DMOs), and Media Foundation Transforms (MFTs)), connected in a filter graph, for processing the multimedia data. For example, filter graphs may be constructed to implement video capture, control of remote devices, animation sequencing, and video\/audio recording and editing.","A filter graph manager  as seen in the prior art, also described as a multimedia filter graph module (MFG module), controls the assembly of a filter graph (e.g., as illustrated in ). The filter graph manager  also manages the flow of data streams within the filter graph by directing the movement of data through the filter components of the filter graph. To support the construction of a filter graph, filter graph manager  searches for a configuration of filters that may render a particular media type. When searching for a rendering configuration, filter graph manager  uses a filter mapper component (not shown), which first reads a memory area such as a table  (e.g., a registry of an operating system) and determines the types of available filter components. Filter manager  then attempts to link together or to otherwise connect filter components that may process a corresponding data type until reaching the stage of a rendering filter during assembly of the filter graph. Filter graphs, however, also may be preconfigured, in which case filter graph manager  does not search for a configuration.","The table , which is maintained as a portion of a registry of an operating system, includes listings defining the characteristics of available filters. Each filter has stored in table  a list of major types and sub-types for data streams that it accepts as an input. For each filter, table  also includes the number of inputs and outputs and a \u201cMerit\u201d figure. In one embodiment, it is recommended that filters should typically be assigned a high Merit figure if they are quick to load, offer efficient operation, or are common For example, a video renderer filter is assigned a high Merit figure because it is typically used as the last filter in most filter graphs. Sometimes, however, poorly designed filters may be mistakenly assigned a high Merit figure. Table  also lists filter combinations that do not work when combined; this information may improve the speed of building a filter graph. By accessing the information in table  before selecting of a filter, filter graph manager  may efficiently determine if a particular filter may work in the graph, thereby avoiding the possible loading of a particularly poor filter choice. In another embodiment, table  may contain an unacceptable\/acceptable list for applications, as noted below.","Filter graph manager  controls the media stream by allowing an application program  (e.g., a multimedia application) or object linking and embedding (OLE) control  to specify certain activities, such as starting, pausing, or stopping the media stream, playing for a particular duration or seeking to a particular point in the data stream. Filter graph manager  then calls appropriate methods on the filters to invoke them. It also allows filter components to post events that may be retrieved by the application program  such that application program  may, for example, retrieve status information about some special filter that it has installed.","Filter graph manager  also provides a set of application programming interfaces (APIs)  to allow communications between the filter graph and application program . A program module, such as application program , may make a direct call to the interfaces  to control the media stream or to retrieve filter events. Alternatively, a program module can use an OLE control  for higher-level programming. A subset of commands for a media control interface (MCI)  is also available for compatibility purposes.","A filter graph typically comprises a linked collection of filter components of different types. In general, filters components may be categorized into one of three filter types: source, transform, or renderer. For example, filter graph manager  controls an exemplary filter graph comprising each of the three types of filters. A source filter , which accepts and reads data from a source , such as a file stored on a storage medium or information fed via a satellite feed, and introduces it into the filter graph. A transform filter  accepts the data from the source filter , processes the data, and forwards the processed data to a renderer filter . The renderer filter  renders the data. Typically, the rendered output is supplied to a hardware renderer or device  but potentially may be rendered to any location that accepts media input (such as a filed maintained on volatile memory, flexible disk, hard disk, etc.). It is understood that the filter graph shown in  represents one of numerous possible constructions of filter graphs, and that embodiments of the present invention are not limited to a particular architecture for a filter graph. In particular, any number of transform filters could be present in the graph.","Although three basic types of filters are described above, a filter may represent a combination of filter types. For example, a filter may operate as an audio renderer but also may act as a transform filter by passing through video data. Moreover, transform filters encompass a variety of transformation functions, including splitting a single data stream into multiple data streams, i.e., a splitter, and merging two or more data streams into a single data stream. Specifically, a transform filter may be constructed by combing processing functions.","Filters of a filter graph architecture, such as filters , , and , are implemented to include a predefined set of functions, called methods. Application program  calls a method to communicate with a particular filter. Application program  (or OLE control ) may also call methods on interfaces exposed by filter graph manager .","Turning now to  for a representative example of the architecture of a typical filter graph, a filter graph  supports the processing of compressed video and audio by use of a chain of six filters. Six filters is an exemplary number, and it could be any number of filters. A source filter  reads the data from a source file, which is typically maintained on a local or remote storage medium. The source filter  outputs source data to a splitter transform filter . The splitter transform filter  splits the incoming data stream into a pair of data streams, namely video data and audio data streams, and passes these data streams to an audio codec transform filter  and to a video codec transform filter . The audio codec transform filter  decompresses the audio data and outputs a decompressed audio data stream. The video codec transform filter  decompresses the video data and outputs a decompressed video data stream. An audio renderer filter  renders the decompressed audio data stream to play the audio data via, for example, a speaker (not shown). A video renderer filter  accepts and renders the decompressed video data stream to support a display of the video data on, for example, a monitor (not shown). The video renderer filter  typically outputs the rendered video data to a hardware renderer, such as a video card, or to an output file maintained on a storage medium. Based on the review of filter types above, source filter  represents a source filter; splitter transform filter , audio codec transform , and video codec transform filter  represent transform filters; and audio renderer filter  and video renderer filter  represent renderer filters. A generic video transform filter (not shown; e.g., a video processing filter) may be used in place of or in addition filters  and  in configurations in which effects are part of the playback graph.","A filter graphs works with data representing a variety of media types, each type characterized by a data stream that is processed by filters components of the filter graph. A filter positioned closer to a renderer filter than another filter in the flow of a data stream is said to be downstream from that filter. For example, a transform filter, such as splitter transform filter , is downstream from a source filter, such as source filter . Likewise, a filter closer to the source of the data than another filter is said to be an upstream filter. Data representing a media type typically flows through the chain of filters in a downstream direction, but other information may travel in an upstream direction, including timing and synchronization information.","Referring again to , filter graph manager  may use table , stored in a memory storage device, to support the construction of a filter graph comprising a chain of filters. Filter graph manager  typically constructs the filter graph in stages based on the information stored in table  about the available filters. For example, in response to selecting a suitable reader filter to read the source file, filter graph manager  may select, load, and connect filters in a successive fashion until rendering of each data stream in the source file.","To render a source file, such as source file , filter graph manager  builds a filter graph comprising connected filter components, such as filters , , and . Filter graph manager  first examines source file  to determine the file type and the type(s) of data stored in source file . A determination of the type of source file allows filter graph manager  to assign a media type to a corresponding data stream of the source file. To determine the file type, filter graph manager  accesses table  and obtains instructions to read certain portions of source file  at particular offsets and to compare the accessed data of source file  with particular values stored in table . A match of the accessed data portion to stored values results in a determination of the type of source file (and its corresponding media type). Based on the media type and the location of the file (local or remote storage medium), filter graph manager  selects an appropriate file reader filter, such as source filter , from information maintained in table . Filter graph manager  then instructs a file loader to load the file reader filter. Filter graph manager  then begins to read source file .","Filter graph manager  then determines the outputs of the present filter, in this case, source filter . For each output, filter graph manager  examines entries in table  to locate a filter that may accept the output as an input. It is understood that there may exist several filters that perform similarly well for a particular stage of the operation but that deliver results in slightly different formats. If there are no outputs then the filter graph is complete. Of the listed filters, which are compatible with the data stream to be processed and may accept the output of the present filter as input, filter graph manager  selects an available filter with the highest Merit figure. An \u201cavailable\u201d filter is a filter that is maintained on a storage medium and available for loading and use. Filter graph manager  arranges for the loading of the selected filter and a connection of the output of the present filter to the input of the selected filter. If no connection can be found, the filter graph manager may be configured to try every merit filter which is not labeled as unacceptable.","If filter graph manager  achieves a successful connection, then filter graph manager  examines the newly loaded filter to determine its outputs. Filter graph manager  then examines the filter information maintained in table , as described above, to select an available filter having an input that matches the output of the newly loaded filter. In turn, filter graph manager  completes the tasks described above anew for each selected filter.","In addition to rendering a given file, filter graph manager  may start from the output of any given filter and complete that section of the graph. In this case, the process is similar to that described above, except that the operation starts at the appropriate designated point. Also, filter graph manager  may instead be requested to connect the output of one filter to the input of another. This operation is again similar to that described above, except that in searching table  for filters to use, filter graph manager  selects filters that do have at least one output, whereas in the other operation, for filters of the same Merit figure, filter graph manager  gives preference to filters that have no outputs.","As discussed, on a given multimedia environment, there may exist some corrupt filters or filters that have not been tested against application program . Therefore, such filters may cause application program  to function improperly (e.g., application program  may crash). Moreover, since some poorly designed filters may have been assigned a high Merit figure, these filter graph manager  may load these filters into the filter graph even when they are not desired. Because third parties design some of these filters, filter graph manager  may not know which filters may cause problems in application program . Accordingly, embodiments of the invention specify a mechanism to provide resiliency to application program . As mentioned above, an alternate embodiment may be to have the filter graph manager maintain the list of known acceptable\/unacceptable filters per application (e.g., per Movie Maker or Windows\u00ae Media Player) or per application type (e.g., per playback, editing, etc.).","According to an embodiment of the invention, a UI , as illustrated in , allows a user to decide which filters to enable or disable in application program . In this embodiment of the invention, table  (or another table) maintains an acceptable list (or known-good list) that specifies filters that are desired for a proper operation of application program  and that have been tested against application program . Such filters may include filters that application program  uses on a clean install of the operating system. Filters that are included in the acceptable list are excluded from UI  such that the user may not disable them. Table  also maintains an unacceptable list (or known-bad list) that specifies filters that may cause problems in application program . Filters specified in the unacceptable list are disabled in application program  (e.g., excluded from a filter graph) by default but are presented in UI  to allow the user to manage their enabled\/disabled states. Table  further maintains a list of filters that application program  has previously encountered or used. Such filters are enabled in application program  (e.g., included in a filter graph) by default but are presented in UI  to allow the user to manage their enabled\/disabled states. Other filters that may not cause problems in application program  and have not been encountered or used by application program  are not presented in UI . Specifically, filters that have not been previously encountered may not shown in order to optimize the UI and improve usability.)","Application program  is configured to remove filters that have been disabled from the automatically created filter graph. Specifically, application program  intercepts API calls (e.g., at both preview and publication of a video\/audio timeline) that filter graph manager  made to load filters from table  or from executable routines (e.g., dynamically linked library (DLL)). Thus, table  or the executable routines calls application program  when filter graph manager  attempts to load a filter to the filter graph. Accordingly, application program  may check an identifier (e.g., globally unique identifier (GUID)) of the attempted filter against the filter identifiers listed in the unacceptable list. If the identifier of the attempted filter matches a filter identifier in the maintained unacceptable list, then application program  does not pass the API calls to the executable routines or table . This prevents filter graph manager  from loading the filter to the filter graph and causes filter graph manager  to search for a fallback filter. By handling the blocking at this level, embodiments of the invention also prevent the executable routines or the filter from corrupting an operation of application program .","On the other hand, if the identifier of the attempted filter does not match a filter identifier in the unacceptable list, then application program  passes the API calls to the executable routines or table  for filter manager  to load the attempted filter. If the loading succeeds, filter graph manager  then adds this filter to the list of filters that application program  has encountered or used. As discussed, UI  presents to the user those filters that are in the unacceptable list or in the list of filters that application program  has encountered or used to allow the user to manage their enabled\/disabled states. This keeps the many filters on the system that do not enter the filter graph construction process from showing up in UI . Moreover, UI  may sort the presented filters in a manner such that filters that have been encountered or used by application program  most recently are presented to the user first. Accordingly, UI  may present those filters that may have caused a problem in application program  last.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3","b":["120","120","120","120","120","120","104","105","105","120","105"]},"UI  also includes in the list-box those filters that are not in the unacceptable list but are in the list of filters that have been encountered or used by application program . Specifically, when a new filter is loaded to the filter graph, UI  adds it to the list-box. Such filters appear in the list-box checked (i.e., enabled by default) and are loaded to the filter graph until the user disables them by unchecking the corresponding checkboxes. The enabled\/disabled states of these filters are preserved in the user's system. Thus, if the user enables or disables a filter in the list-box (e.g., by checking or unchecking the corresponding checkbox), this setting is preserved for the user between different instances of application program . Moreover, each of these filters has a range of associated version identifiers. But the filter version displayed in the list-box reflects the current version installed.","UI  also shows a friendly name, a version identifier, and an executable routine path of a given filter displayed in the list-box. For example, a GUID and an executable routine path of a filter form a unique pair of identification. If the GUID\/routine path is the same between two filter objects, then the system registers one version of the filter objects at one time. Also, the unacceptable list supports a range of version identifiers that are disabled for each unique GUID\/routine path identification. If application program  detects that a filter's version has changed, then it determines if the new version falls within the range of versions supported in the unacceptable list. If the new version falls within this range, then it is disabled by default in UI . Otherwise, the filter is enabled by default. As discussed, the version identifier shown in the list-box reflects the current version of the filter.","UI  also includes a \u201crestore default\u201d option that allows the user to change the filters to their default states. Upon selecting the option, filters in the unacceptable list become disabled and unchecked in UI  (e.g., up to the latest updates), regardless of their previous states. In contrast, after the user selects the \u201crestore default\u201d option, filters included in the list of filters that have been encountered or used by application program  become enabled and checked in UI , regardless of their previous states.","As discussed, the list-box sorts the filters such that filters that have been most recently encountered by application program  are presented on top of the list. The user may also click on the friendly name field to sort the filters by name. In an embodiment of the invention, the sort field is not preserved between instances of launching UI . Thus, whenever the user launches UI  again, the filters are displayed in the order of most recently encountered.","According to one embodiment of the invention, it is possible to update the unacceptable list and the acceptable list via an automatic update program without changing codes of application program . Automatically updating the acceptable list prevents filters that properly function within application program  from being disabled by the user in UI . After the update to the unacceptable list has been provided to application program , selection the \u201crestore default\u201d option by the user restores the enabled\/disabled states as specified in the latest unacceptable list.","It is possible that third parties will tamper with the unacceptable list and the acceptable list in an attempt to disable various filters within application program . Accordingly, embodiments of the invention allow signing the unacceptable list and the acceptable list with a private key and embedding the associated public key in application program  to verify the signature.","In yet another embodiment of the invention, table  (or another table) maintains a performance history of various filters. For example, whenever application program  invokes a particular filter, it is determined if this filter causes application program  to crash or to experience other problems. By maintaining such a performance history for this filter with regard to an operation of application program , it is possible to determine which filters are likely to cause a problem when filter graph manager  constructs a filter graph. Thus, if the performance history indicates that a given filter is likely to cause a problem in application program , application program  may automatically disable this filter after informing the user and offering the user a change to enable it later.","A central memory area or database may maintain the performance history of a give filter across different users to allow efficient analysis as to if the filter is likely to be causing a problem in application program . For example, embodiments of the invention may employ statistical analysis across different users who report the performance of the given filter to determine if the filter belongs to the unacceptable list.","In another embodiment of the invention, a user may submit a report regarding how a given filter is performing in application program . From this report, a new unacceptable list and a new acceptable list may be constructed. This submitted report may also serve as the basis of the filter's performance history. Moreover, the unacceptable list and the acceptable list may be automatically updated each time the user submits a new report on the performance of application program . Embodiments of the invention may apply this function independently of maintaining a filter performance history.","Embodiments of the invention also allow moving of the filter graph pipeline into a process separate from a process of application program  such that a problem occurring in the pipeline does not affect application program . This further allows application program  to quickly diagnose the problem in the pipeline, disable the filters that it predicts are causing the problem, and restart the pipeline. Moving the filter graph pipeline into a separate process also allows the user to continue running application program  after a short interruption despite the problem in the pipeline.","When the pipeline is out of process and data that represents a video\/audio timeline is the main process, it is possible to analyze a crash in application program  to determine the point of failure in the filter graph. The analysis may point directly to a filter or an executable routine that caused the crash. By combining this data with the time of the last good frame rendered against valid timeline data as well as the performance history of various filters, embodiments of the invention may intelligently inform the user which filter or file may cause a problem in application program .",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 4","b":["402","105","404","120","406","408","120","120","410","408"]},"Returning to , if the filter is not in the unacceptable list, the filter is added to UI  and enabled at . At this stage, the touched state of the filter is \u201cno.\u201d After the user disables the filter, the filter then becomes disabled at , and the touched state of the filter becomes \u201cyes.\u201d The user may further change the enabled\/disabled state of the filter as described above.","Referring to , an exemplary process flow for providing resiliency to a multimedia application according to another embodiment of the invention is illustrated. At , the acceptable list is updated. At , it is determined what changes have been made to the acceptable list. If a filter has been added to the acceptable list, then this filter is removed from UI  at . Furthermore, the touched and enabled\/disabled states of the filter are preserved, and the filter remains enabled. On the other hand, if the changes in the acceptable list indicate that a filter has been removed from the acceptable list, this filter is added to UI  at . Moreover, the preserved touched and enabled\/disabled states of the filter are restored.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6","b":["602","604","606","608","610","612"]},"In an embodiment of the invention, after the user has enabled a filter in the unacceptable list, it is not disabled by an update to the unacceptable list. However, if a filter initially not in the unacceptable list is enabled, adding this filter to the unacceptable list would disable it. Thus, embodiments of the invention may stop a problem in application program  by updating the unacceptable list. But if the user has specifically enabled a filter in the unacceptable list, an update to the unacceptable list does not change the state of this filter.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":["702","704","706","708"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 8","b":["800","800","802","804","806","808","800"]},"The application component  processes multimedia data. The memory component  stores a list of filters (e.g., a source filter, a splitter transform filter, a codec transform filter, a renderer filter, etc.) associated with application component . The management component  constructs a filter graph from the list of filters in response to a user executing application component . The interface component  presents one or more of the list of filters to the user as a function of suitability of each filter for application component . Interface component  is also configured to allow the user to manage the presented filters. For example, interface component  is configured to allow the user to enable or disable the presented filters in application component .","According to an embodiment of the invention, application component  intercepts an interface call made by management component  to memory component  for loading a filter to the filter graph. Application component  then determines if the filter is suitable for application component . If the filter is unsuitable for application component , application component  is configured to prevent the interface call from communicating with memory component . In response, management component  is configured to load another filter included in the list of filters for constructing the filter graph. If the filter is suitable for application component , application component  passes the interface call to memory component . And management component  is configured to load the filter for constructing the filter graph. In addition, application component  is configured to access memory component  to add the filter to a list of filters (e.g., stored in memory component ) that have been used by application component .","According to an alternative embodiment of the invention, application component  is configured to determine if a filter is suitable for execution. If the filter is not suitable for execution, application component  is configured to disable the filter (e.g., in response to informing the user that the filter is to be disabled). And interface component  allows the user to enable the disabled filter.","Specifically, memory component  maintains a performance history of each filter, and application component  determines if a filter is suitable for execution based on the maintained performance history (e.g., by employing a statistical analysis of the maintained performance history). Alternatively, interface component  may allow the user to submit a report on a performance of a filter, and application component  is configured to determine if the filter is suitable for execution based on the submitted report. Memory component  may then store the submitted report as a performance history of the filter.","In addition, memory component  stores an acceptable list of filters that are desired for a proper operation of application component  and an unacceptable list of filters that are unsuitable for application component . The acceptable list and the unacceptable list may be generated based on the submitted report. Interface component  is configured to present the unacceptable list of filters to the user and to allow the user to manage the unacceptable list of filters. The unacceptable list of filters initially is being presented in interface component  as disabled by default. Interface component  is also configured to present to the user a filter that has been used by application component  and to allow the user to manage the filter. This filter is initially presented in interface component  as enabled by default. Moreover, interface component  is configured to prevent the acceptable list of filters from being presented to the user and from being disabled.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 9","b":["130","130","130","132","134","136","134","132","136"]},"The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that may be accessed by computer . By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), including the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically includes data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media.  also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that may be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components may either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. LAN  and\/or WAN  may be a wired network, a wireless network, a combination thereof, and so on. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. Embodiments of the invention described herein include these and other various types of computer-readable storage media when such media include instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. One embodiment of the invention also includes the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , one embodiment of the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the embodiments of the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","Embodiments of the invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located on both local and remote computer storage media including memory storage devices.","In operation, computer  executes computer-executable instructions such as those described herein to provide resiliency to a multimedia application. Computer-executable instructions are configured to identify a list of filters associated with the multimedia application. Computer-executable instructions are also configured to present one or more filters of the list of filters to a user of the multimedia application as a function of suitability of each of the list of filters for the multimedia application. Computer-executable instructions are further configured to allow the user to manage the presented one or more filters.","In another embodiment of the invention, computer-executable instructions are configured to identify a list of filters associated with the multimedia application. Computer-executable instructions are also configured to determine if one or more filters of the identified list of filters are suitable for the multimedia application. Computer-executable instructions are further configured to disable the one or more filters if the one or more filters are determined to be unsuitable for the multimedia application.","The order of execution or performance of the methods illustrated and described herein is not essential, unless otherwise specified. That is, it is contemplated by the inventors that elements of the methods may be performed in any order, unless otherwise specified, and that the methods may include more or less elements than those disclosed herein.","When introducing elements of the present invention or the embodiments thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","In view of the above, it will be seen that the several objects of the invention are achieved and other advantageous results attained.","As various changes could be made in the above constructions and methods without departing from the scope of embodiments of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
