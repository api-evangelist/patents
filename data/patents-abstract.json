
[{
	"name": "Integrated online job recruitment system",
	"summary": "",
	"abstract": "The present invention provides an easy to use system and method for assisting job seekers in locating job opportunities and applying for the same using an online connectivity protocol which is simple to use and highly efficient in terms of time consumption. The system identifies and extracts keywords from the job postings in an accessible job database to create a keyword targeted list that excludes common words and phrases. The keyword targeted list is then processed to form a keyword targeted prefix list which in turn is inserted into a search engine. Upon appropriate query by a potential job seeker, the search engine returns its results while giving prominent placement to one or more job postings sponsored by a recruiter. An interested job seeker clicks on the sponsored job posting is directed to the job details through a website mediated application programming interface.",
	"url": null,
	"owner": "",
	"publication_number": "07653567",
	"publication_date": "2010-01-26",
	"application_number": "11525343",
	"application_date": "2006-09-22",
	"tags": null,
	"slug": "integrated-online-job-recruitment-system",
	"match_type": "abstract"
},
{
	"name": "Method and system for creating reusable software components through a uniform interface",
	"summary": "",
	"abstract": "A method for designing software components for integration into any system without additional coding is provided. The method includes adopting a uniform application programming interface that breaks down external objects to include the characteristics of object, attribute, and method. Ideally, the characteristics include create object, delete object, read attributes, write attributes, and invoke behavior. A software tool is provided for communication between an API and a data source, the tool including a join engine adapted to provide communication between at least one view and at least one base source associated with the data source, the join engine further adapted to update the at least one base source in response to updates to the view. Ideally, the tool is further configured to support on the at least one base source operations of create object and delete object on the at least one view. The software tool is also configured to map events in the at least one base source to the at least one view, and can be configured to create virtual attributes based on the view through operations or expressions performed on the view, including, but not limited to algebraic expressions, names, strings, and functions.",
	"url": null,
	"owner": "",
	"publication_number": "08185867",
	"publication_date": "2012-05-22",
	"application_number": "11932947",
	"application_date": "2007-10-31",
	"tags": null,
	"slug": "method-and-system-for-creating-reusable-software-components-through-a-uniform-interface",
	"match_type": "abstract"
},
{
	"name": "Method and system for presenting and analyzing software source code through intermediate representation",
	"summary": "",
	"abstract": "The present invention provides a method and system for producing intermediate representation of source code listings with possibly mixed syntaxes to assist software development applications in presenting and analyzing the source code listings through reading the intermediate representation. A source code processor calls Application Programming Interfaces (APIs) to preserve source code information, which includes intermediate representation data sets and is preferably stored in a file-based repository. The source code processor is of a compiler, a preprocessor, a parser, or a comment document processor. The data sets capture lexical, syntax and semantic information of source code construct elements, and comprise of location, processor identification, construct category, and attribute data. A software development environment through a source code search engine is able to present source code construct elements, outlines, and symbol references from software packages over a plurality of distributed servers in a network such as the Internet.",
	"url": null,
	"owner": "",
	"publication_number": "08181167",
	"publication_date": "2012-05-15",
	"application_number": "11971904",
	"application_date": "2008-01-09",
	"tags": null,
	"slug": "method-and-system-for-presenting-and-analyzing-software-source-code-through-intermediate-representation",
	"match_type": "abstract"
},
{
	"name": "Methods, systems, and computer program products for establishing VoIP service in a network",
	"summary": "",
	"abstract": "Voice over Internet Protocol (VoIP) service is established in a network that that includes a Regional/Access Network (RAN) that facilitates differentiated end-to-end data transport between an Application Service Provider (ASP) and a Customer Premises Network (CPN) that includes Customer Premises Equipment (CPE). Application Programming interface (API) calls are used at the ASP to communicate with the RAN to establish VoIP service for the user having a user selected bandwidth and/or QoS associated therewith.",
	"url": null,
	"owner": "",
	"publication_number": "08204042",
	"publication_date": "2012-06-19",
	"application_number": "10933940",
	"application_date": "2004-09-03",
	"tags": null,
	"slug": "methods-systems-and-computer-program-products-for-establishing-voip-service-in-a-network",
	"match_type": "abstract"
},
{
	"name": "Voice over internet call center integration",
	"summary": "",
	"abstract": "An internet telephony system (ITS) comprising a browser display having a hyperlink, communicating with a server, retrieving a user's preferences, and initiating a voice communication with the user, through a communications channel defined by the user preferences. An ITS comprising a client system having an Internet browser, and a server hosting a Web site, wherein a message is transmitted from the server to the client system based on the user's status with respect to Web site, the user seeking to establish a voice communication session. A telephony server, comprising an application program communicating directly with telephony hardware, and an application programming interface, wherein the application program includes a call function to an external program. An ITS, comprising a browser display having a hyperlink, the hyperlink communicating with a server, retrieving a user-related data, and initiating a voice communication with the user, wherein the user is charged for the communication.",
	"url": null,
	"owner": "",
	"publication_number": "08179882",
	"publication_date": "2012-05-15",
	"application_number": "11853801",
	"application_date": "2007-09-11",
	"tags": null,
	"slug": "voice-over-internet-call-center-integration",
	"match_type": "abstract"
},
{
	"name": "Interaction management",
	"summary": "",
	"abstract": "In a system, at least one web server provides an interface to a web-enabled application to a first computing device, with the web-enabled application and the at least one web server belonging to a first domain. An interaction routing module routes a contact event to the first computing device. At least one application server receives and responds to an Hypertext Transfer Protocol (HTTP) request for requested information related to the contact event. The HTTP request is generated by the web-enabled application. An integration module receives the HTTP request from the at least one application server and translates the HTTP request to an application programming interface call to interface with a second computing device storing the requested information in a second domain. A messaging module provides the requested data to the web-enabled application.",
	"url": null,
	"owner": "8x8, Inc.",
	"publication_number": "08468545",
	"publication_date": "2013-06-18",
	"application_number": "12858814",
	"application_date": "2010-08-18",
	"tags": null,
	"slug": "interaction-management",
	"match_type": "abstract"
},
{
	"name": "Messaging interface system for customer care",
	"summary": "",
	"abstract": "A system is disclosed for serving a message to a target system. A database message is converted to a common data model to conform to at least two systems and an architecture of the target system. The common data model is transformed into a specified data type of the architecture of the target system. Calls are managed using specified functions available through an application programming interface offered by the architecture of the target system. Functions of the application programming interface are invoked to implement a target message in the architecture of the target system. The message is written to the target system.",
	"url": null,
	"owner": "Accenture Global Services Limited",
	"publication_number": "08060888",
	"publication_date": "2011-11-15",
	"application_number": "11900542",
	"application_date": "2007-09-12",
	"tags": null,
	"slug": "messaging-interface-system-for-customer-care",
	"match_type": "abstract"
},
{
	"name": "Method for integrating user notifications and user alerts on an electronic device",
	"summary": "",
	"abstract": "An interface for integrating and presenting user notifications and alerts consistently on an electronic device such as a mobile device is disclosed. First, an application programming interface provides the segregation to multiple preselected levels of priority notifications and alerts from all applications on the mobile device. Second, the application programming interface provides for the ability to display the notifications and alerts in a consistent manner for the user to handle.",
	"url": null,
	"owner": "Access Co., Ltd.",
	"publication_number": "07982598",
	"publication_date": "2011-07-19",
	"application_number": "12026546",
	"application_date": "2008-02-05",
	"tags": null,
	"slug": "method-for-integrating-user-notifications-and-user-alerts-on-an-electronic-device",
	"match_type": "abstract"
},
{
	"name": "System and method for real time account and account number generation using origination APIS",
	"summary": "",
	"abstract": "A system and method generate an account in real time in accordance with an application programming interface (API). The API contains parameter descriptions listing universal resource locator (URL) parameters associated with items. A format for implementing an http request to transmit data to in compliance with the defined format is disclosed. A transparent mode for transmitting a response to an http request transmitting data provides for the transmission of an extensible markup language (XML) formatted file communicating an outcome to the request.",
	"url": null,
	"owner": "Accountnow, Inc.",
	"publication_number": "07849010",
	"publication_date": "2010-12-07",
	"application_number": "12187284",
	"application_date": "2008-08-06",
	"tags": null,
	"slug": "system-and-method-for-real-time-account-and-account-number-generation-using-origination-apis",
	"match_type": "abstract"
},
{
	"name": "Methods and apparatus for implementing a custom driver for accessing a data source",
	"summary": "",
	"abstract": "Methods and apparatus for supporting an additional data source in a system adapted for processing data from one or more data sources are disclosed. A design-time driver for the additional data source is obtained, where the design-time driver supports the definition of data including one or more fields of the additional data source to retrieve from the additional data source. In addition, a run-time driver for the additional data source is obtained, where the run-time driver supports retrieval of data corresponding to the one or more fields from the additional data source and where the run-time driver has a second application programming interface. The design-time driver is executed via a first application programming interface, where the first application programming interface enables definition of the data including the one or more fields to be retrieved from the additional data source. The data is then retrieved from the additional data source via the run-time driver using the second application programming interface.",
	"url": null,
	"owner": "Actuate Corporation",
	"publication_number": "07831633",
	"publication_date": "2010-11-09",
	"application_number": "11021081",
	"application_date": "2004-12-22",
	"tags": null,
	"slug": "methods-and-apparatus-for-implementing-a-custom-driver-for-accessing-a-data-source",
	"match_type": "abstract"
},
{
	"name": "Method and system for data retrieval from heterogeneous data sources",
	"summary": "",
	"abstract": "A system and a method for specifying and configuring, together with categorising and classifying, heterogeneous types of multiple data sources is disclosed. The system and method also retrieve search results in accordance with search requests and conditions from at least one of the multiple data sources, for example a relational database management system (RDBMS), a light-weight directory access protocol (LDAP), an extensible mark-up language database (XMLDB), extensible mark-up language (XML) files, hypertext mark-up language (HTML) files, or TEXT files, through an application programming interface (API), or a web service interface such as a simple object access protocol (SOAP).",
	"url": null,
	"owner": "Agency for Science, Technology and Research",
	"publication_number": "07707168",
	"publication_date": "2010-04-27",
	"application_number": "10915732",
	"application_date": "2004-08-10",
	"tags": null,
	"slug": "method-and-system-for-data-retrieval-from-heterogeneous-data-sources",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for circuit design",
	"summary": "",
	"abstract": "A word processing or spreadsheet application is augmented by a plug-in and templates for computer aided design of electronic hardware entities. The plug-in utilizes the application programming interface to provide a menu system and executable code which inserts templates, reads and validates data entered into the template, computes addresses, annotates addresses and error messages back to a word processing document for display in the editor of the word processing document, and upon selection and request, generates output files for target simulators or synthesis tools.",
	"url": null,
	"owner": "Agnisys, Inc.",
	"publication_number": "08443335",
	"publication_date": "2013-05-14",
	"application_number": "13481814",
	"application_date": "2012-05-26",
	"tags": null,
	"slug": "apparatus-and-method-for-circuit-design",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for measuring stream availability, quality and performance",
	"summary": "",
	"abstract": "A streaming measurement agent designed to experience, measure, and report on a media stream as an actual end user would experience the stream. Preferably, agent resides transparently within a streaming media player itself so that it can monitor stream packet flows within the player as the measured streams are being played. In an illustrative embodiment, the agent comprises a performance monitoring module (PMM), which is software that resides in an interface between an existing core module and a renderer of a media player. The agent PMM intercepts each useful packet as it goes from the core to the renderer and, as a result, it is able to compute quality metrics about the playback. The agent functions u201ctransparentlyu201d to the media player by presenting the core with an application programming interface (API) that emulates the API that the renderer normally presents to the core. Thus, when the core believes it is calling the renderer, it is actually calling the agent PMM, which can then receive all the packets from the core and process them. After computing relevant performance metrics using the packets it receives, the agent PMM calls the renderer. A set of performance agents can be managed by a service provider to enable a content provider to determine how a stream is perceived by end users.",
	"url": null,
	"owner": "Akamai Technologies, Inc.",
	"publication_number": "07725576",
	"publication_date": "2010-05-25",
	"application_number": "11368835",
	"application_date": "2006-03-06",
	"tags": null,
	"slug": "method-and-apparatus-for-measuring-stream-availability-quality-and-performance",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing internet services",
	"summary": "",
	"abstract": "A service integration platform system for providing Internet services includes: an interface configured to receive a service request message that is initiated by a user of an application provided by an Independent Software Vendor (ISV), the service request message being implemented according to an Application Programming Interface (API) type and including a plurality of platform-level parameters that conform to the API type. The system further includes one or more processors coupled to the interface, configured to: locate a set of authentication checks that are appropriate for the API type, based at least in part on the plurality of platform-level parameters included in the service request message and a mapping of predefined combinations of platform-level parameters and corresponding sets of authentication checks; perform authentication of the service request according to the set of authentication checks; and route the service request to a service address of the Internet Service Provider (ISP) in the event that the service request is authenticated.",
	"url": null,
	"owner": "Alibaba Group Holding Limited",
	"publication_number": "08453209",
	"publication_date": "2013-05-28",
	"application_number": "12459005",
	"application_date": "2009-06-25",
	"tags": null,
	"slug": "method-and-system-for-providing-internet-services",
	"match_type": "abstract"
},
{
	"name": "Self-service control environment",
	"summary": "",
	"abstract": "Aspects of a target environment, such as the creation, deletion, and management of various resources, are managed using a set of self-service Web services of a separate control environment. A user can submit a Web services call into an externally-facing application programming interface (API) or other such externally-facing interface of the control environment. The API receiving the call, as well as information extracted from the call, can be used to determine appropriate actions to be performed in the target environment. A workflow can be instantiated that includes tasks used to perform the action in the target environment. Such an approach allows aspects of an environment to be managed through Web service calls to the control environment. Native access to resources in the target environment is provided using at least one externally-facing interface of the target environment, without accessing the control plane.",
	"url": null,
	"owner": "Amazon Technologies, Inc.",
	"publication_number": "08307003",
	"publication_date": "2012-11-06",
	"application_number": "12418475",
	"application_date": "2009-04-03",
	"tags": null,
	"slug": "selfservice-control-environment",
	"match_type": "abstract"
},
{
	"name": "Energy distribution and marketing backoffice system and method",
	"summary": "",
	"abstract": "A retail energy provider system comprising a market transaction manager, business rules and requirements processor, usage rater, customer analysis and quality control auditor, customer billing processor and collection manager, customer payment processor, third party sales and marketing application programming interface, customer acquisition and residual income interface, having a wholesale forecaster, interactive voice response system, intranet web services, internet web services and network based external customer service and executive management systems and financial services functions, all said functions and systems interacting with a robust SQL database engine for which the novel database schema is taught herein.",
	"url": null,
	"owner": "Ambit Holdings, L.L.C.",
	"publication_number": "08442917",
	"publication_date": "2013-05-14",
	"application_number": "11899197",
	"application_date": "2007-09-04",
	"tags": null,
	"slug": "energy-distribution-and-marketing-backoffice-system-and-method",
	"match_type": "abstract"
},
{
	"name": "System, method and computer program product for processing payments",
	"summary": "",
	"abstract": "A payment processor for providing a payment service includes a transaction processor to process a transaction request. An application programming interface links a merchant to the transaction processor based on an identifier. A merchant center, located between a gateway and a point of sale device of the merchant, queries a database for information associated with a buyer and the merchant based on information received from the point of sale device, to generate the transaction request based from merchant transaction data received from the point of sale device and the information associated with the buyer and the merchant received from the database, and to communicate the transaction request to the transaction processor. The transaction processor also communicates information associated with the transaction request with the merchant based on the identifier.",
	"url": null,
	"owner": "American Express Travel Related Services Company, Inc.",
	"publication_number": "08204825",
	"publication_date": "2012-06-19",
	"application_number": "11865789",
	"application_date": "2007-10-02",
	"tags": null,
	"slug": "system-method-and-computer-program-product-for-processing-payments",
	"match_type": "abstract"
},
{
	"name": "Graphical display of management data obtained from an extensible management server",
	"summary": "",
	"abstract": "An extensible management server (XMS) is disclosed that includes a management interface, a scripting engine, and a data store having management scripts and a management class library stored therein. The management interface provides functionality for receiving and responding to commands received from a management application. The management scripts include functionality for retrieving and setting management data on managed computers. The management scripts are configured to utilize classes contained in the management class library to perform the actual interaction with the managed server computers for retrieving or setting management data. The management scripts may also be configured to utilize a graphical display application programming interface for generating graphical display instructions for use by the management application in graphically displaying the management data.",
	"url": null,
	"owner": "American Megatrends, Inc.",
	"publication_number": "08356309",
	"publication_date": "2013-01-15",
	"application_number": "12559750",
	"application_date": "2009-09-15",
	"tags": null,
	"slug": "graphical-display-of-management-data-obtained-from-an-extensible-management-server",
	"match_type": "abstract"
},
{
	"name": "Native objects accessible by platform neutral API",
	"summary": "",
	"abstract": "An object is developed using an operating system neutral application programming interface (API). The object is complied for a designated operating system that includes native objects and supports an API for accessing native objects of the operating system. The compiled object includes logic code, a native object interop for accessing the logic code using the API for accessing native objects of the operating system, and a platform-neutral interop for accessing the logic code using the operating system neutral API.",
	"url": null,
	"owner": "AOL Inc.",
	"publication_number": "08060856",
	"publication_date": "2011-11-15",
	"application_number": "11281936",
	"application_date": "2005-11-18",
	"tags": null,
	"slug": "native-objects-accessible-by-platform-neutral-api",
	"match_type": "abstract"
},
{
	"name": "Creating an object in an object-oriented programming platform",
	"summary": "",
	"abstract": "An application programming interface is provided in an object-oriented programming platform for developing applications. A method comprises, in response to a first message received at a first object that contains one or more properties, creating a second object that responds to a second message sent thereto responsive to sending of the first message to the first object and returning the second object. By returning, for example, key-value collection proxies by specific key-value coding methods a read-only or a read-write access may be allowed to a collection of a container object's related objects. A specific implementation of one object's class may change over time without requiring changes in another object's implementation.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08006250",
	"publication_date": "2011-08-23",
	"application_number": "10873667",
	"application_date": "2004-06-22",
	"tags": null,
	"slug": "creating-an-object-in-an-objectoriented-programming-platform",
	"match_type": "abstract"
},
{
	"name": "Extended database search",
	"summary": "",
	"abstract": "Methods, program products, and systems implementing integrated repository of structured and unstructured data are disclosed. An integrated environment is provided for accessing structured data (e.g., data of a relational database) and unstructured data (e.g., data stored in a text or binary file), including creating, managing, modifying, and searching the structured data and unstructured data. The integrated environment can include an integrated user interface, a set of commands and application programming interface (API), and storage for a relational database and a document repository. The integrated environment can include a database abstraction layer that allows database operations on both the structured data and the unstructured data.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08442982",
	"publication_date": "2013-05-14",
	"application_number": "12941026",
	"application_date": "2010-11-05",
	"tags": null,
	"slug": "extended-database-search",
	"match_type": "abstract"
},
{
	"name": "Integrated repository of structured and unstructured data",
	"summary": "",
	"abstract": "Methods, program products, and systems implementing integrated repository of structured and unstructured data are disclosed. An integrated environment is provided for accessing, structured data (e.g., data of a relational database) and unstructured data (e.g., data stored in a text or binary file), including creating, managing, modifying, and searching the structured data and unstructured data. The integrated environment can include an integrated user interface, a set of commands and application programming interface (API), and storage for a relational database and a document repository. The integrated environment can include a database abstraction layer that allows database operations on both the structured data and the unstructured data.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08396894",
	"publication_date": "2013-03-12",
	"application_number": "12940986",
	"application_date": "2010-11-05",
	"tags": null,
	"slug": "integrated-repository-of-structured-and-unstructured-data",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for intercommunications amongst device drivers",
	"summary": "",
	"abstract": "Techniques for intercommunication amongst device drivers are described herein. In one embodiment, an application programming interface (API) is provided by a kernel of an operating system (OS) running within a data processing system. The API is accessible by device drivers associated with multiple devices installed in the system. In response to a request from a first instance of a driver via the API, information indicating whether another instance of the same driver is currently started is returned via the API. Other methods and apparatuses are also described.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07979868",
	"publication_date": "2011-07-12",
	"application_number": "11620691",
	"application_date": "2007-01-07",
	"tags": null,
	"slug": "method-and-apparatus-for-intercommunications-amongst-device-drivers",
	"match_type": "abstract"
},
{
	"name": "Observing properties associated with an object in an object-oriented programming platform",
	"summary": "",
	"abstract": "An application programming interface is provided in an object-oriented programming platform for developing applications. A method comprises registering a first object with a second object to observe one or more properties associated with the second object, the second object having a set of methods associated therewith and replacing a first implementation of a method in the set of methods associated with the second object with a second implementation of the method that automatically sends a notification to the first object. The observable objects need not explicitly invoke the observer notifications, avoiding writing of a large amount of code. These observer notifications need only be sent for objects that are actually being observed but are related objects, substantially reducing the performance overhead of needless invocations of the observer notifications without limiting binding between objects.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07954110",
	"publication_date": "2011-05-31",
	"application_number": "10873697",
	"application_date": "2004-06-22",
	"tags": null,
	"slug": "observing-properties-associated-with-an-object-in-an-objectoriented-programming-platform",
	"match_type": "abstract"
},
{
	"name": "Serializing command streams for graphics processors",
	"summary": "",
	"abstract": "A method and an apparatus for determining a dependency relationship between graphics commands based on availability of graphics hardware resources to perform graphics processing operations according to the dependency relationship are described. The graphics commands may be received from graphics APIs (application programming interfaces) for rendering a graphics object. A graphics driver may transmit a portion or all of the received graphics commands to a graphics processing unit (GPU) or a media processor based on the determined dependency relationship between the graphics commands.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08115773",
	"publication_date": "2012-02-14",
	"application_number": "11811416",
	"application_date": "2007-06-07",
	"tags": null,
	"slug": "serializing-command-streams-for-graphics-processors",
	"match_type": "abstract"
},
{
	"name": "Window server event taps",
	"summary": "",
	"abstract": "Methods, devices and an associated application programming interface are described that permits a user to register event tap routines (u201cETRsu201d) with an application such as, for example, a window server application. Event tap routines permit events such as human interface device events to be processed at multiple points and in a manner not provided during normal window server operations. Event tap routines may effect passive or active event responses. Passive ETRs may merely record the occurrence of an event or the time between successive events without modifying or altering the event's processing sequence within a window server. Active ETRs, on the other hand, effect some programmatic response to an event. For example, active ETRs may modify the state of an event, delete the event, create one or more additional events or cause the event to be processed u201cout of sequenceu201d by the window server application.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07818755",
	"publication_date": "2010-10-19",
	"application_number": "11020875",
	"application_date": "2004-12-22",
	"tags": null,
	"slug": "window-server-event-taps",
	"match_type": "abstract"
},
{
	"name": "Window server event taps",
	"summary": "",
	"abstract": "Methods, devices and an associated application programming interface are described that permits a user to register event tap routines (u201cETRsu201d) with an application such as, for example, a window server application. Event tap routines permit events such as human interface device events to be processed at multiple points and in a manner not provided during normal window server operations. Event tap routines may effect passive or active event responses. Passive ETRs may merely record the occurrence of an event or the time between successive events without modifying or altering the event's processing sequence within a window server. Active ETRs, on the other hand, effect some programmatic response to an event. For example, active ETRs may modify the state of an event, delete the event, create one or more additional events or cause the event to be processed u201cout of sequenceu201d by the window server application.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08438580",
	"publication_date": "2013-05-07",
	"application_number": "12889083",
	"application_date": "2010-09-23",
	"tags": null,
	"slug": "window-server-event-taps",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for measuring the end-to-end performance and capacity of complex network service",
	"summary": "",
	"abstract": "The present invention includes a method of measuring performance and capacity of a network includes monitoring network activity using an application programming interfaces monitoring system with a web services definition language file and at least one probe. The web services definition language file provides instructions to a probe control system in the application programming interfaces monitoring system and the probe control system providing regular expressions to the at least one probe. Then, performance data is collected using the at least one probe. The performance data includes a date stamp and a collection of performance information. Next, using the at least one probe, performance data measurements are transmitted between the network and the application programming interfaces monitoring system. The application programming interfaces monitoring system stores the performance data measurements in a database of performance data monitored and analyzes the performance data measurements to determine performance and capacity of the network. After that, the application programming interfaces monitoring system reports information on performance and capacity of the network to a network operations center dashboard.",
	"url": null,
	"owner": "AT&T Intellectual Property I, LP",
	"publication_number": "08438269",
	"publication_date": "2013-05-07",
	"application_number": "12209267",
	"application_date": "2008-09-12",
	"tags": null,
	"slug": "method-and-apparatus-for-measuring-the-endtoend-performance-and-capacity-of-complex-network-service",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for playing, browsing and interacting with MPEG-4 coded audio-visual objects",
	"summary": "",
	"abstract": "A number of novel configurations for MPEG-4 playback, browsing and user interaction are disclosed. MPEG-4 playback systems are not simple extensions of MPEG-2 playback systems, but, due to object based nature of MPEG-4, present new opportunities and challenges in synchronized management of independent coded objects as well as scene composition and presentation. Therefore, these configurations allow significantly new and enhanced multimedia services and systems. In addition, MPEG-4 aims for an advanced functionality, called Adaptive Audio Visual Session (AAVS) or MPEG-J. Adaptive Audio Visual Session (AAVS) (i.e., MPEG-AAVS, MPEG-Java or MPEG-J) requires, in addition to the definition of configurations, a definition of an application programming interface (API) and its organization into Java packages. Also disclosed are concepts leading to definition of such a framework.",
	"url": null,
	"owner": "AT&T Intellectual Property II, L.P.",
	"publication_number": "08276056",
	"publication_date": "2012-09-25",
	"application_number": "11849399",
	"application_date": "2007-09-04",
	"tags": null,
	"slug": "systems-and-methods-for-playing-browsing-and-interacting-with-mpeg4-coded-audiovisual-objects",
	"match_type": "abstract"
},
{
	"name": "System and method for efficient digital video composition",
	"summary": "",
	"abstract": "An efficient method of compositing planes onto a target surface using a computing device with graphics processing capability is disclosed. The method includes partitioning the target surface, on which planes are composited, into partitions. Each one of the partitions contains connected pixels to be formed by compositing an identical subset of the planes to be composited. Each partition is associated with a corresponding subset of the planes. Each partition and its corresponding set of associated planes are then provided to a graphics processor for composition, using exemplary software components including an application programming interface, a library and device driver software. An image is formed on the target surface by compositing each partition. Using the disclosed method, a single pass through stages of the graphics pipeline for the graphics processor is sufficient to composite multiple planes to form an image on the target surface.",
	"url": null,
	"owner": "ATI Technologies ULC",
	"publication_number": "08159505",
	"publication_date": "2012-04-17",
	"application_number": "12243596",
	"application_date": "2008-10-01",
	"tags": null,
	"slug": "system-and-method-for-efficient-digital-video-composition",
	"match_type": "abstract"
},
{
	"name": "Engine agnostic interface for communication between game engines and simulations systems",
	"summary": "",
	"abstract": "A software architecture is provided that has an agnostic interface mechanism coupled between a simulator and a game engine. The agnostic interface mechanism has an extension interface to translate simulator specific data objects to/from interface objects, a reflector interface to translate interface data objects to/from game specific objects, a launcher interface to translate interface control objects for controlling the game engine into game specific control objects, and a core control coupled between the extension interface and the reflector and launcher interfaces for controlling the communication of objects between the simulator and the game engine. The core control through the reflector and launcher interfaces provides game specific objects to the game engine through direct application programming interface (API) calls.",
	"url": null,
	"owner": "Atlantis Cyberspace, Inc.",
	"publication_number": "08122459",
	"publication_date": "2012-02-21",
	"application_number": "12239623",
	"application_date": "2008-09-26",
	"tags": null,
	"slug": "engine-agnostic-interface-for-communication-between-game-engines-and-simulations-systems",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for preventing eavesdropping",
	"summary": "",
	"abstract": "A method and apparatus prevent eavesdropping via a computer by detecting and alerting if more than one authorized driver is controlling a interface circuit that is providing audio or video input information. Further, prevention is performed by detecting and alerting if more than one authorized application programming interface is receiving audio or video input information from an authorized driver. Also, prevention is performed by detecting and alerting if more than one authorized software application is receiving audio or video input information from an authorized driver. In addition, prevention is performed by detecting and alerting upon first receipt of audio or visual information by an authorized software application via an authorized application programming interface and authorized driver.",
	"url": null,
	"owner": "Avaya Inc.",
	"publication_number": "08286233",
	"publication_date": "2012-10-09",
	"application_number": "11084583",
	"application_date": "2005-03-19",
	"tags": null,
	"slug": "apparatus-and-method-for-preventing-eavesdropping",
	"match_type": "abstract"
},
{
	"name": "Computerized method and system for creating a new brokerage account",
	"summary": "",
	"abstract": "A computerized system for creating a new brokerage account is disclosed. A new account wizard software component guides a user through a series of data collection procedures using a rules based engine to facilitate data collection processing according to a plurality of data collection rules that are stored in a database. A workflow management software component manages data transfers and delegates task assignments during creation of the new brokerage account. There is also an application programming interface layer software component for interfacing data transfers between the workflow management software component and external software components.",
	"url": null,
	"owner": "Bank of America Corporation",
	"publication_number": "07933819",
	"publication_date": "2011-04-26",
	"application_number": "10905099",
	"application_date": "2004-12-15",
	"tags": null,
	"slug": "computerized-method-and-system-for-creating-a-new-brokerage-account",
	"match_type": "abstract"
},
{
	"name": "Methods and systems for open source collaboration in an application service provider environment",
	"summary": "",
	"abstract": "A system and method for integrating a plurality of web-based applications with a web-based file management system. The web-based application may provide a service to the users of the web-based file management system, such that the web-based application can interact with the files of said users. The integration of the service of the web-based application with the web-based file management system is achieved through a simple web interface to configure the service, without the developer of the web-based application having to change the application programming interface (API) of the application. The user of the web-based file management system may add services of a plurality of available web-based applications and use these services with one or more files that are stored on the web-based file management system.",
	"url": null,
	"owner": "Box, Inc.",
	"publication_number": "08140513",
	"publication_date": "2012-03-20",
	"application_number": "13030090",
	"application_date": "2011-02-17",
	"tags": null,
	"slug": "methods-and-systems-for-open-source-collaboration-in-an-application-service-provider-environment",
	"match_type": "abstract"
},
{
	"name": "Communications network",
	"summary": "",
	"abstract": "A registration server in a network implementing an API (application programming interface) authenticates services and provides discovery of network resources, prior to registering services with selected network resources. Multiple instances of services and/or multiple service nodes are registered in a single service agreement.",
	"url": null,
	"owner": "British Telecommunications public limited company",
	"publication_number": "07660903",
	"publication_date": "2010-02-09",
	"application_number": "10168616",
	"application_date": "2001-01-12",
	"tags": null,
	"slug": "communications-network",
	"match_type": "abstract"
},
{
	"name": "Voice over internet call center integration",
	"summary": "",
	"abstract": "An internet telephony system (ITS) comprising a browser display having a hyperlink, communicating with a server, retrieving a user's preferences, and initiating a voice communication with the user, through a communications channel defined by the user preferences. An ITS comprising a client system having an Internet browser, and a server hosting a Web site, wherein a message is transmitted from the server to the client system based on the user's status with respect to Web site, the user seeking to establish a voice communication session. A telephony server, comprising an application program communicating directly with telephony hardware, and an application programming interface, wherein the application program includes a call function to an external program. An ITS, comprising a browser display having a hyperlink, the hyperlink communicating with a server, retrieving a user-related data, and initiating a voice communication with the user, wherein the user is charged for the communication.",
	"url": null,
	"owner": "Buffalo International, Inc.",
	"publication_number": "08045490",
	"publication_date": "2011-10-25",
	"application_number": "11853800",
	"application_date": "2007-09-11",
	"tags": null,
	"slug": "voice-over-internet-call-center-integration",
	"match_type": "abstract"
},
{
	"name": "Image forming apparatus, method of controlling image forming apparatus, and memory medium for storing computer program for executing method, with function program providing API",
	"summary": "",
	"abstract": "An image forming apparatus in which a control program can be loaded, the control program providing a service for image forming processing, said apparatus comprising: a memory unit configured to store (i) an operating system, (ii) an interpreter which provides an execution environment to execute the control program, runs on the operating system, and interprets the control program, (iii) a driver program for controlling image forming processing, and (iv) a function program, wherein the driver program operates a hardware resource unit which includes at least one of a printing unit and an image pickup unit, and wherein the function program (a) serves as an API (Application Programming Interface), (b) is defined between the control program and the driver program, and (c) is used by the control program.",
	"url": null,
	"owner": "Canon Kabushiki Kaisha",
	"publication_number": "07973963",
	"publication_date": "2011-07-05",
	"application_number": "12856752",
	"application_date": "2010-08-16",
	"tags": null,
	"slug": "image-forming-apparatus-method-of-controlling-image-forming-apparatus-and-memory-medium-for-storing-computer-program-for-executing-method-with-function-program-providing-api",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for processing messages",
	"summary": "",
	"abstract": "A memory stores a file attached to a message generated by using a structure language. Data containing an element contained in the message to which information for obtaining type information and a file referred by the element are obtained from the memory is added is constructed. This data has a construction corresponding to an application programming interface for the structured language.",
	"url": null,
	"owner": "Canon Kabushiki Kaisha",
	"publication_number": "08024375",
	"publication_date": "2011-09-20",
	"application_number": "11744361",
	"application_date": "2007-05-04",
	"tags": null,
	"slug": "method-and-apparatus-for-processing-messages",
	"match_type": "abstract"
},
{
	"name": "Architecture for balancing workload",
	"summary": "",
	"abstract": "A framework to transition and re-partition information for event processing and downstream processing can be used in a real time system comprising components such as a consumer server, a file control database, an event manager, an event store, and a configurable output stream. The event manager may be a process which can be enhanced through the use of tags which are inserted to provide information for various downstream systems. The configurable output stream can be defined through an application programming interface which is configured to receive a filter to be applied to the output.",
	"url": null,
	"owner": "Convergys Information Management Group, Inc.",
	"publication_number": "07668093",
	"publication_date": "2010-02-23",
	"application_number": "11197597",
	"application_date": "2005-08-04",
	"tags": null,
	"slug": "architecture-for-balancing-workload",
	"match_type": "abstract"
},
{
	"name": "System and method for tracking an object in a video and linking information thereto",
	"summary": "",
	"abstract": "An image processing system for use in development and playback of interactive video. In a development mode of operation, pixel or video objects are selected in a frame by way of a development graphical user interface. The system automatically tracks the selected pixel objects in the preceding and succeeding video frames by determining range limits for various color variables of the selected pixel object to compensate for the effects in lighting changes and decompression effects. The system automatically locates pixel objects within the calculated range limits in the preceding and succeeding video frames and generates a pixel object file which identifies the coordinates of the selected pixel object in each frame. The pixel object file is linked to a data object file which links the selected pixel objects to data objects. The pixel object file and data object file, collectively u201clinked video files,u201d are created during a development mode of operation. During a playback mode of operation, the linked video files are imported to a video hosting platform which includes a video playback application and a common media player application programming interface (API) for playback of the video content. The video playback application supports processing of the linked video files to enable pixel objects to be selected by a pointing device and linked to data objects by way of a client side graphical user interface.",
	"url": null,
	"owner": "Creatier Interactive, LLC",
	"publication_number": "07804506",
	"publication_date": "2010-09-28",
	"application_number": "10786777",
	"application_date": "2004-02-25",
	"tags": null,
	"slug": "system-and-method-for-tracking-an-object-in-a-video-and-linking-information-thereto",
	"match_type": "abstract"
},
{
	"name": "Techniques for generating microcontroller configuration information",
	"summary": "",
	"abstract": "A method and apparatus for configuring a microcontroller. An XML description of the microcontroller's hardware resources may be accessed. A user may select from available hardware resources and pre-defined user modules to select a configuration. Configuration information, which may include register bit patterns and microprocessor instructions, may be automatically generated. Additionally, application programming interface calls and structure, as well as interrupt vector tables may be automatically generated. Embodiments of the present invention provide improved ease of use and the ability to manage greater complexity in the configuration of configurable microcontrollers.",
	"url": null,
	"owner": "Cypress Semiconductor Corporation",
	"publication_number": "08069428",
	"publication_date": "2011-11-29",
	"application_number": "11818005",
	"application_date": "2007-06-12",
	"tags": null,
	"slug": "techniques-for-generating-microcontroller-configuration-information",
	"match_type": "abstract"
},
{
	"name": "Methods and media for a protocol abstraction layer for information handling systems",
	"summary": "",
	"abstract": "A method for communicating with remote devices wherein the method includes sending a request through an application programming interface (API), formatting the request and routing the request to a first connection associated with a first protocol. The method further includes mapping the request into a first command, wherein the first command conforms to the first protocol and sending the first command to a remote device.",
	"url": null,
	"owner": "Dell Products, L.P.",
	"publication_number": "07805533",
	"publication_date": "2010-09-28",
	"application_number": "12128594",
	"application_date": "2008-05-28",
	"tags": null,
	"slug": "methods-and-media-for-a-protocol-abstraction-layer-for-information-handling-systems",
	"match_type": "abstract"
},
{
	"name": "Architecture for rendering graphics on output devices",
	"summary": "",
	"abstract": "A method for accessing graphical information including receiving one or more graphics commands written in an application programming interface (API). The graphics commands are converted into a graphical language that facilitates the execution of the commands for a plurality of output devices of one or more types.",
	"url": null,
	"owner": "Ellis Amalgamated LLC",
	"publication_number": "08042094",
	"publication_date": "2011-10-18",
	"application_number": "11176057",
	"application_date": "2005-07-07",
	"tags": null,
	"slug": "architecture-for-rendering-graphics-on-output-devices",
	"match_type": "abstract"
},
{
	"name": "Common software environment",
	"summary": "",
	"abstract": "Described are techniques for facilitating communication between code modules. A first code module is provided that makes at least one call using an application programming interface. The application programming interface facilitates communication between the first code module and a target code module and provides support for performing the at least one call from a first execution mode associated with the first code module and a second execution mode associated with the target code module. The application programming interface provides support for user space to user space communication, user space to kernel space communication, kernel space to kernel space communication, and kernel to user space communication. The first execution mode of the first code module and said second execution mode of the target code module are determined. A communication path is established between the code modules in accordance with the first and second execution modes.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07950025",
	"publication_date": "2011-05-24",
	"application_number": "11824542",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "common-software-environment",
	"match_type": "abstract"
},
{
	"name": "Data storage system having common software environment",
	"summary": "",
	"abstract": "Described are techniques for facilitating communication between code modules. A first code module is provided that makes at least one call using an application programming interface. The application programming interface facilitates communication between the first code module and a target code module and provides support for performing the at least one call from a first execution mode associated with the first code module and a second execution mode associated with the target code module. The application programming interface provides support for user space to user space communication, user space to kernel space communication, kernel space to kernel space communication, and kernel to user space communication. The first execution mode of the first code module and said second execution mode of the target code module are determined. A communication path is established between the code modules in accordance with the first and second execution modes.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "08205218",
	"publication_date": "2012-06-19",
	"application_number": "11824433",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "data-storage-system-having-common-software-environment",
	"match_type": "abstract"
},
{
	"name": "Path determination using preferred paths or randomly selecting source and target ports",
	"summary": "",
	"abstract": "Described is a distributed copying technique that may be used in migrating large amounts of data from one or more source devices to one or more destination devices. The data source is divided into partitions. As Fibre Channel adapters (FAs) become available, each of the FAs may copy a partition of the data. In connection with specifying paths used for the distributed copying technique, a preferred path selection (source port-target port mapping) may be made by executing code in a controlling data storage system to perform discovery processing. The preferred path selection is used for the duration of the distributed copying unless the preferred path is unable to transmit data. A target port of the preferred path may be randomly selected from all accessible target ports, and/or in accordance with a specified portion of the target ports. Preferred paths may also be specified using an API (application programming interface).",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07707331",
	"publication_date": "2010-04-27",
	"application_number": "11014338",
	"application_date": "2004-12-16",
	"tags": null,
	"slug": "path-determination-using-preferred-paths-or-randomly-selecting-source-and-target-ports",
	"match_type": "abstract"
},
{
	"name": "Software configuration methods and common presentation layer",
	"summary": "",
	"abstract": "Methods and systems for backing up data of a client connected to a server. The methods and systems include operating a graphical user interface for displaying to a user information about the data of a client. At an administrator module and client module, initiating one or more wizard program modules including dynamic link libraries configured to carry a user through the steps to complete a backup function, each wizard program module having one or more application programming interfaces which allow the wizard program modules to communicate with the operating system on which the administrator module or client module is operating. A common presentation layer can also be included to provide one or more common user interface screens which are insertable into each wizard program module.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07716684",
	"publication_date": "2010-05-11",
	"application_number": "10997580",
	"application_date": "2004-11-24",
	"tags": null,
	"slug": "software-configuration-methods-and-common-presentation-layer",
	"match_type": "abstract"
},
{
	"name": "Techniques for use with device drivers in a common software environment",
	"summary": "",
	"abstract": "Described are techniques for facilitating communication between device drivers. A device driver is provided that makes at least one call using an application programming interface. The application programming interface facilitates communication between the device driver module and a target code module. The application programming interface provides support for performing the at least one call from a first execution mode associated with the device driver module and a second execution mode associated with the target code module. The application programming interface provides support for user space to user space communication, user space to kernel space communication, kernel space to kernel space communication, and kernel to user space communication. The first execution mode of the device driver module and said second execution mode of the target code module are determined. A communication path between the modules is established in accordance with said first execution mode and said second execution mode.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07950022",
	"publication_date": "2011-05-24",
	"application_number": "11824506",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "techniques-for-use-with-device-drivers-in-a-common-software-environment",
	"match_type": "abstract"
},
{
	"name": "User authentication system and method for encryption and decryption",
	"summary": "",
	"abstract": "A system configured to authenticate a user for encryption or decryption includes a user authentication apparatus, a computer-readable medium operable to communicate with the user authentication apparatus, and an encryption and decryption computer communicating with the user authentication apparatus. The computer-readable medium may store user identifying information and encryption and decryption data. The encryption and decryption computer may be configured to receive an application programming interface (API) for interfacing with the user authentication apparatus and receive the user identifying information from the computer-readable medium via the API. A user may be authenticated based on the user identifying information and, once the user is authenticated, the encryption and decryption data may be read.",
	"url": null,
	"owner": "Empire IP LLC",
	"publication_number": "08359476",
	"publication_date": "2013-01-22",
	"application_number": "12957479",
	"application_date": "2010-12-01",
	"tags": null,
	"slug": "user-authentication-system-and-method-for-encryption-and-decryption",
	"match_type": "abstract"
},
{
	"name": "Method and system for extending keyword searching to syntactically and semantically annotated data",
	"summary": "",
	"abstract": "Methods and systems for extending keyword searching techniques to syntactically and semantically annotated data are provided. Example embodiments provide a Syntactic Query Engine (u201cSQEu201d) that parses, indexes, and stores a data set as an enhanced document index with document terms as well as information pertaining to the grammatical roles of the terms and ontological and other semantic information. In one embodiment, the enhanced document index is a form of term-clause index, that indexes terms and syntactic and semantic annotations at the clause level. The enhanced document index permits the use of a traditional keyword search engine to process relationship queries as well as to process standard document level keyword searches. In one embodiment, the SQE comprises a Query Processor, a Data Set Preprocessor, a Keyword Search Engine, a Data Set Indexer, an Enhanced Natural Language Parser (u201cENLPu201d), a data set repository, and, in some embodiments, a user interface or an application programming interface.",
	"url": null,
	"owner": "Evri, Inc.",
	"publication_number": "08131540",
	"publication_date": "2012-03-06",
	"application_number": "12401421",
	"application_date": "2009-03-10",
	"tags": null,
	"slug": "method-and-system-for-extending-keyword-searching-to-syntactically-and-semantically-annotated-data",
	"match_type": "abstract"
},
{
	"name": "Method and system for extending keyword searching to syntactically and semantically annotated data",
	"summary": "",
	"abstract": "Methods and systems for extending keyword searching techniques to syntactically and semantically annotated data are provided. Example embodiments provide a Syntactic Query Engine (u201cSQEu201d) that parses, indexes, and stores a data set as an enhanced document index with document terms as well as information pertaining to the grammatical roles of the terms and ontological and other semantic information. In one embodiment, the enhanced document index is a form of term-clause index, that indexes terms and syntactic and semantic annotations at the clause level. The enhanced document index permits the use of a traditional keyword search engine to process relationship queries as well as to process standard document level keyword searches. In one embodiment, the SQE comprises a Query Processor, a Data Set Preprocessor, a Keyword Search Engine, a Data Set Indexer, an Enhanced Natural Language Parser (u201cENLPu201d), a data set repository, and, in some embodiments, a user interface or an application programming interface.",
	"url": null,
	"owner": "Evri, Inc.",
	"publication_number": "07953593",
	"publication_date": "2011-05-31",
	"application_number": "12401386",
	"application_date": "2009-03-10",
	"tags": null,
	"slug": "method-and-system-for-extending-keyword-searching-to-syntactically-and-semantically-annotated-data",
	"match_type": "abstract"
},
{
	"name": "Method and system for controlling and accessing content servers",
	"summary": "",
	"abstract": "A method and system for controlling provisioning and access to cache servers with an application programming interface (API). The API includes components for performing various actions including: (i) prepopulating content on at least one cache server from a content server; (ii) expiring content on at least one cache server; (iii) pinning content in a memory of at least one cache server; (iv) assigning resources on at least one cache server in accordance with a quota; (v) retrieving content from at least one cache server; and (vi) flushing deleted content from at least one selected cache. The API may include a security layer. The security layer determines whether a requestor has permission to cause the requested action to be performed.",
	"url": null,
	"owner": "F5 Networks, Inc.",
	"publication_number": "08204930",
	"publication_date": "2012-06-19",
	"application_number": "10077689",
	"application_date": "2002-02-15",
	"tags": null,
	"slug": "method-and-system-for-controlling-and-accessing-content-servers",
	"match_type": "abstract"
},
{
	"name": "ASP business decision engine",
	"summary": "",
	"abstract": "A decision engine is provided that integrates all components of a credit application process, including access to and manipulation of credit bureau data, credit scoring, credit decisioning, and matching the correct products, into a single application service provider (ASP) platform which is accessible through a series of Application Programming Interfaces (APIs).",
	"url": null,
	"owner": "Fair Isaac Corporation",
	"publication_number": "07734522",
	"publication_date": "2010-06-08",
	"application_number": "11971858",
	"application_date": "2008-01-09",
	"tags": null,
	"slug": "asp-business-decision-engine",
	"match_type": "abstract"
},
{
	"name": "Method, interface and apparatus for discovering a location of a device",
	"summary": "",
	"abstract": "A system, method, Application Programming Interface (API) and device for discovering a location of a device, for example, to provide location information for a Location Based Service (LBS). The device includes a memory, a display, and a processor operably coupled to the memory and the display. The processor may be arranged to provide a user interface (UI) on the display, retrieve location cues in response to a location request, forward location cues to a location server and receive location information back from the location server. The location information may be a location query page associated with a new place ID if the location cues do not correspond to the location server cues or the location information may be a previously discovered place ID associated with the server location cues if one or more of the location cues correspond to one or more of the server's location cues.",
	"url": null,
	"owner": "France Telecom",
	"publication_number": "07934224",
	"publication_date": "2011-04-26",
	"application_number": "11771925",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "method-interface-and-apparatus-for-discovering-a-location-of-a-device",
	"match_type": "abstract"
},
{
	"name": "Call and data correspondence in a call-in center employing virtual restructuring for computer telephony integrated functionality",
	"summary": "",
	"abstract": "A call center having agent stations comprising telephones connected to computer stations by a Telephone Application Programming Interface (TAPI)-compliant bridge has data pertaining to callers stored in a database on a local area network (LAN) to which the computer stations are also connected. Origination data for incoming calls, both conventional calls to the telephones and computer-simulated calls to the computer platforms, is used as a key to extract data pertaining to calls from the database for display on video display units (VDUs) of the computer workstations where the calls are terminated. In some cases, data is only extracted and displayed for calls from previously listed origination points.",
	"url": null,
	"owner": "Genesys Telecommunications Laboratories, Inc.",
	"publication_number": "07903807",
	"publication_date": "2011-03-08",
	"application_number": "10843802",
	"application_date": "2004-05-11",
	"tags": null,
	"slug": "call-and-data-correspondence-in-a-callin-center-employing-virtual-restructuring-for-computer-telephony-integrated-functionality",
	"match_type": "abstract"
},
{
	"name": "Custom search index",
	"summary": "",
	"abstract": "A system includes an application programming interface, an indexer, a security unit and at least one search engine. The application programming interface uploads user-selected custom content from a first user. The indexer indexes the custom content to produce a first search index. The security unit authenticates a user and the at least one search engine receives a search query from the user, searches the first search index based on the search query, and searches a second search index based on the search query and based on results of the user authentication, where the second search index is different than the first search index.",
	"url": null,
	"owner": "Google Inc.",
	"publication_number": "07725453",
	"publication_date": "2010-05-25",
	"application_number": "11618327",
	"application_date": "2006-12-29",
	"tags": null,
	"slug": "custom-search-index",
	"match_type": "abstract"
},
{
	"name": "Custom search index data security",
	"summary": "",
	"abstract": "A system includes a server to store content and a content searching system. The content search system includes an application programming interface to receive user-selected metadata uploaded from a first user, where the metadata includes data that describes content stored at a server. The content searching system further includes an indexer to index the metadata to produce a metadata search index, a search engine to search the metadata search index based on a search query received from a user to produce metadata search results, and a delivery engine to send the metadata search results, and a link to the remote server, to the user to permit the user to access the content stored at the remote server.",
	"url": null,
	"owner": "Google Inc.",
	"publication_number": "08442994",
	"publication_date": "2013-05-14",
	"application_number": "12209996",
	"application_date": "2008-09-12",
	"tags": null,
	"slug": "custom-search-index-data-security",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for controlling execution of a computer operation",
	"summary": "",
	"abstract": "Computer operations whose execution would increase usage costs may require use of authorization and notification to prevent unauthorized execution. The computer operations may be designed to execute only if a authorization and notification routines are properly registered. The computer system customer establishes the authorization and notification requirements based on standard application programming interfaces to suit the customer's business practices and links the requirements to the computer operation. The computer operation determines if the authorization and notification are proper. If authorization is granted, the computer operation checks to see that the notification is proper, executes the computer operation, and then executes a notification module to notify the necessary personnel. Both authorization and notification routines return errors that are passed to the user through the computer operation.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07926101",
	"publication_date": "2011-04-12",
	"application_number": "11976099",
	"application_date": "2007-10-22",
	"tags": null,
	"slug": "method-and-apparatus-for-controlling-execution-of-a-computer-operation",
	"match_type": "abstract"
},
{
	"name": "Techniques for managing a storage environment",
	"summary": "",
	"abstract": "Techniques for managing a storage environment. According to an embodiment of the present invention, high-level application programming interfaces (APIs) are provided that can be used by applications such as storage management applications (e.g., ERM applications, SRM applications) to manage a storage environment. Using these APIs, an application can issue simple high-level commands to perform storage management operations without having to worry about the low level storage array-specific commands. Embodiments of the present invention handle the necessary translations between the high-level commands and the low-level storage array-specific commands or protocols.",
	"url": null,
	"owner": "Hitachi, Ltd.",
	"publication_number": "08001284",
	"publication_date": "2011-08-16",
	"application_number": "12050879",
	"application_date": "2008-03-18",
	"tags": null,
	"slug": "techniques-for-managing-a-storage-environment",
	"match_type": "abstract"
},
{
	"name": "Method and system for displaying animation with an embedded system graphics API",
	"summary": "",
	"abstract": "An animation file player can display animation files with an embedded system graphics application programming interface (graphics API). In an example implementation, an animation file comprises a Flashu00ae animation file such as, a Shockwave Flashu00ae animation file, and the embedded system graphics API comprises an OpenGLu00ae|ES graphics API. The present invention is not intended to be so limited, and other types of animation files and embedded system graphics APIs can be used.",
	"url": null,
	"owner": "Hooked Wireless, Inc.",
	"publication_number": "07911467",
	"publication_date": "2011-03-22",
	"application_number": "11321042",
	"application_date": "2005-12-30",
	"tags": null,
	"slug": "method-and-system-for-displaying-animation-with-an-embedded-system-graphics-api",
	"match_type": "abstract"
},
{
	"name": "Method and system for displaying animation with an embedded system graphics API",
	"summary": "",
	"abstract": "An animation file player can display animation files with an embedded system graphics application programming interface (graphics API). In an example implementation, an animation file comprises a Flashu00ae animation file such as, a Shockwave Flashu00ae animation file, and the embedded system graphics API comprises an OpenGLu00ae|ES graphics API. The present invention is not intended to be so limited, and other types of animation files and embedded system graphics APIs can be used.",
	"url": null,
	"owner": "Hooked Wireless, Inc.",
	"publication_number": "08248420",
	"publication_date": "2012-08-21",
	"application_number": "13028833",
	"application_date": "2011-02-16",
	"tags": null,
	"slug": "method-and-system-for-displaying-animation-with-an-embedded-system-graphics-api",
	"match_type": "abstract"
},
{
	"name": "Call center system and method for obtaining interface invoke information",
	"summary": "",
	"abstract": "The present invention discloses a call center system and a method for obtaining interface invoke information to realize automatic analysis of the user behaviors. The method includes steps of sending a connection establishment request message to a user interface server by a call center client after a service is activated; allocating a connection identification for the activated service and sending a response message after the user interface server receives the connection request message; performing interactions between the call center client and the user interface server and recording the interaction message according to the connection identification attached in the interaction message; and decomposing the recorded interaction message and obtaining the information on the application programming interface invoked by each service according to the name of the application programming interface corresponding to the interface identification obtained from each message.",
	"url": null,
	"owner": "Huawei Technologies Co., Ltd.",
	"publication_number": "08175256",
	"publication_date": "2012-05-08",
	"application_number": "11484905",
	"application_date": "2006-07-12",
	"tags": null,
	"slug": "call-center-system-and-method-for-obtaining-interface-invoke-information",
	"match_type": "abstract"
},
{
	"name": "Extending an RFID reader API",
	"summary": "",
	"abstract": "The present disclosure provides a Radio Frequency Identification (RFID) reader software structure and method. A functionality of a reader engine is extended, enabling it to communicate via an extended standard Application Programming Interface (API) with an application software. The extended functionality supports a Partner Service Module that resides in the reader, thus allowing at least one of its Partner Software Functions to communicate with the application software over a single connection.",
	"url": null,
	"owner": "Impinj, Inc.",
	"publication_number": "08082556",
	"publication_date": "2011-12-20",
	"application_number": "11959592",
	"application_date": "2007-12-19",
	"tags": null,
	"slug": "extending-an-rfid-reader-api",
	"match_type": "abstract"
},
{
	"name": "Virtual machine interface for hardware reconfigurable and software programmable processors",
	"summary": "",
	"abstract": "The present invention provides a virtual machine interface (VMI) and an application programming interface (API) usable in conjunction with a reconfigurable wireless network communication apparatus. The reconfigurable wireless network communication apparatus comprises a plurality of hardware kernels. The apparatus can be reconfigured to support different or modified communication protocols over time. The VMI comprises a library of software objects. By configuring VMI software objects, a programmer selects the communication protocol used by the reconfigurable wireless network communication apparatus. The API of the present invention provides higher level management of the communication protocol used by a reconfigurable wireless network communication apparatus. The API comprises a library of high level software objects that further abstract hardware details of the apparatus.",
	"url": null,
	"owner": "Infineon Technologies AG",
	"publication_number": "07703107",
	"publication_date": "2010-04-20",
	"application_number": "09828381",
	"application_date": "2001-04-05",
	"tags": null,
	"slug": "virtual-machine-interface-for-hardware-reconfigurable-and-software-programmable-processors",
	"match_type": "abstract"
},
{
	"name": "Shared library in a printing system",
	"summary": "",
	"abstract": "Provided are a method, system and article of manufacture wherein device configuration information is stored in a shared library. An application programming interface is provided to allow a plurality of page description language interpreters to access the device configuration information stored in the shared library. At least one of the plurality of page description language interpreters accesses the device configuration information stored in the shared library by calling the application programming interface.",
	"url": null,
	"owner": "InfoPrint Solutions Company, LLC.",
	"publication_number": "07894084",
	"publication_date": "2011-02-22",
	"application_number": "11413402",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "shared-library-in-a-printing-system",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for configuring data plane behavior on network forwarding elements",
	"summary": "",
	"abstract": "A method and apparatus for configuring data plane behavior on network forwarding elements are described. In one embodiment, the method includes receiving, within a network element control plane, protocol configuration information extracted from a protocol application utilizing a network protocol application programming interface (API). Once the protocol configuration information is received, the protocol configuration information is processed using a control interface corresponding to the network protocol implemented by the protocol application. Once the protocol configuration information is processed, the control interface programs one or more data plane forwarding elements of the network element according to protocol configuration information. Accordingly, by providing similar control interfaces for multiple, network protocols, inter-operability between components from multiple vendors is enabled.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07646759",
	"publication_date": "2010-01-12",
	"application_number": "10338291",
	"application_date": "2003-01-07",
	"tags": null,
	"slug": "apparatus-and-method-for-configuring-data-plane-behavior-on-network-forwarding-elements",
	"match_type": "abstract"
},
{
	"name": "Encryption acceleration",
	"summary": "",
	"abstract": "The subject mater herein relates to data processing and, more particularly, to encryption acceleration. Various embodiments herein provide devices and systems including a standardized encryption application programming interface embedded in firmware to perform encryption services. Some such embodiments move encryption operations away from operating system processes into firmware. As a result, encryption operations are generally accelerated.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07987349",
	"publication_date": "2011-07-26",
	"application_number": "11771671",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "encryption-acceleration",
	"match_type": "abstract"
},
{
	"name": "Apparatus, system, and method for seamless multiple format metadata abstraction",
	"summary": "",
	"abstract": "An apparatus, system, and method are disclosed for providing seamless multiple format metadata abstraction. A metadata application programming interface (API) is provided to abstract metadata from an incoming business object and provide it to an adapter for processing. The metadata API is configured to operate on multiple metadata formats such as SDO and JavaBean such that the adapter receives the metadata from the metadata API in a common format that is compatible with the adapter. In this manner, the multiple metadata formats may be plugably used with the adapter.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08250590",
	"publication_date": "2012-08-21",
	"application_number": "11777744",
	"application_date": "2007-07-13",
	"tags": null,
	"slug": "apparatus-system-and-method-for-seamless-multiple-format-metadata-abstraction",
	"match_type": "abstract"
},
{
	"name": "Automated validation of peripheral director hardware",
	"summary": "",
	"abstract": "A system and method of automating the validation and control of peripheral director hardware in a switched fabric network. A system is provided that includes a script language processor for interpreting high-level statements and generating command functions understood by an application programming interface (API) associated with the switched fabric network, wherein the command functions include a query switch command, a query interface switch command, a write switch command, and a display result command; and a system for generating an output in response to a set of command functions submitted to the switched fabric network.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08015274",
	"publication_date": "2011-09-06",
	"application_number": "11685451",
	"application_date": "2007-03-13",
	"tags": null,
	"slug": "automated-validation-of-peripheral-director-hardware",
	"match_type": "abstract"
},
{
	"name": "Automatically detecting keyboard layout in order to improve the quality of spelling suggestions",
	"summary": "",
	"abstract": "A method, system and computer program product for keyboard layout detection resulting in improving the quality of the spelling suggestions, and in another aspect, recognizing a keyboard mapping mismatch between a computer and a given remote user based on a defined finite dictionary. There is no extra Application Programming Interfaces (API) required to pass information between the text editor and a spellchecking engine in order to perform keyboard layout detection.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08219905",
	"publication_date": "2012-07-10",
	"application_number": "12272316",
	"application_date": "2008-11-17",
	"tags": null,
	"slug": "automatically-detecting-keyboard-layout-in-order-to-improve-the-quality-of-spelling-suggestions",
	"match_type": "abstract"
},
{
	"name": "Common interface to access catalog information from heterogeneous databases",
	"summary": "",
	"abstract": "Various embodiments of a system and computer program product to access metadata from a plurality of data servers from a federated database management system are provided. In one embodiment, a request for metadata, from a client application, is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server, metadata describing data of a data source of that data server is retrieved in accordance with the application request. The retrieved metadata from each of the data servers is aggregated to produce an aggregated result in a uniform format. The aggregated result is provided. In another embodiment, for each data server, a source metadata request for metadata of that data server is generated in accordance with the application request and a source metadata application programming interface. A view is created based on the source metadata request for metadata for each data server.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08051094",
	"publication_date": "2011-11-01",
	"application_number": "12249957",
	"application_date": "2008-10-12",
	"tags": null,
	"slug": "common-interface-to-access-catalog-information-from-heterogeneous-databases",
	"match_type": "abstract"
},
{
	"name": "Data server administration using a chatbot",
	"summary": "",
	"abstract": "Provided are techniques for data server administration. Under control of a chatbot in real time, a command is received from a user for administering a data server in a natural language format. It is determined whether the data server is to be contacted to process the command. In response to determining that the data server is to be contacted, session information is retrieved to identify the data server to be contacted, the command in the natural language format is converted into one or more data server administration Application Programming Interface (API) calls, the one or more data server administration API calls to the data server are issued, and information about processing of the command is provided to the user.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08250192",
	"publication_date": "2012-08-21",
	"application_number": "11871927",
	"application_date": "2007-10-12",
	"tags": null,
	"slug": "data-server-administration-using-a-chatbot",
	"match_type": "abstract"
},
{
	"name": "Externalized classloader information for application servers",
	"summary": "",
	"abstract": "Modules which are running outside of a first application server virtual machine (VM) are enabled to introspect into modules running inside the first VM by notifying a manageable component factory by an application module being executed by a first application server VM of a need to allow a second VM to introspect into and to load class information regarding objects already running in the first VM, wherein the first and second virtual machines are separate virtual machines; registering the already-running object class information to a manageable component server using a descriptor; and loading the registered class information by the second VM from the manageable component server, wherein a tool object or administrative object running in the second VM introspects into and loads the objects already running in the first virtual machine without use of an application programming interface.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07761862",
	"publication_date": "2010-07-20",
	"application_number": "11373567",
	"application_date": "2006-03-10",
	"tags": null,
	"slug": "externalized-classloader-information-for-application-servers",
	"match_type": "abstract"
},
{
	"name": "Generalized trace and log facility for first error data collection",
	"summary": "",
	"abstract": "A generalized trace and log facility is employed to collect data, including data associated with the first occurrence of an error. The facility provides standardized application programming interfaces to be used to collect data, print the data, and forward the data to a support team, if desired.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07757129",
	"publication_date": "2010-07-13",
	"application_number": "11694228",
	"application_date": "2007-03-30",
	"tags": null,
	"slug": "generalized-trace-and-log-facility-for-first-error-data-collection",
	"match_type": "abstract"
},
{
	"name": "Message formation and distribution in heterogeneous networks",
	"summary": "",
	"abstract": "A system is disclosed for communicating with a plurality of network processors, one or more of the processors having a different operating environment, includes receiving an application programming interface (API) call from a user application, the API call including a call address identifying one or more of the network processors; and accessing a memory that identifies an appropriate form for the API call for each operating environment implemented by each network processor identified by the call address; and building one or more messages including the appropriate form for the API call for the operating environment of each of the network processors to receive any particular message.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07940754",
	"publication_date": "2011-05-10",
	"application_number": "12048528",
	"application_date": "2008-03-14",
	"tags": null,
	"slug": "message-formation-and-distribution-in-heterogeneous-networks",
	"match_type": "abstract"
},
{
	"name": "Message system and method",
	"summary": "",
	"abstract": "A method and system for bridging services is provided. The method and system includes retrieving at last one message from a first messaging tool using at least one processing thread to retrieve message objects from a messaging queue of the first messaging tool. This aspect of the invention further includes executing a preprocessing on the retrieved message object using a predefined application programming interface (API) and placing the preprocessed message on an API of a second messaging tool. A computer program product comprising a computer useable medium including a computer readable program which, when executed causes the computer to implement the steps of the method.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07853956",
	"publication_date": "2010-12-14",
	"application_number": "11117449",
	"application_date": "2005-04-29",
	"tags": null,
	"slug": "message-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Method and system for managing tables that are used by network processors to control traffic through a network",
	"summary": "",
	"abstract": "A method for managing tables that are used by network processors to control network traffic through a network. The method comprises including a first table management software application in a first network processor, in which the first table management software is dedicated to managing only tables associated with the first network processor; including a second table management software application in a second network processor, in which the second table management software application is dedicated to managing only tables associated with the second network processor; and including a table management control application in a host processor, in which the table management control application is configured to respectively manage the tables associated with the first network processor and the tables associated with the second network processor through the first table management software application and the second table management software application through a plurality of generic application programming interfaces (APIs).",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07865912",
	"publication_date": "2011-01-04",
	"application_number": "11942657",
	"application_date": "2007-11-19",
	"tags": null,
	"slug": "method-and-system-for-managing-tables-that-are-used-by-network-processors-to-control-traffic-through-a-network",
	"match_type": "abstract"
},
{
	"name": "Method for controlling security function execution with a flexible, extendable, and non-forgable block",
	"summary": "",
	"abstract": "A method, article, and system for providing an effective implementation of data structures, and application programming interface (API) functions that allow secure execution of functions behind a secure boundary. The controlling mechanism is a flexible, extendable, and non-forgeable block that details how values and parameters behind the secure boundary can be changed. The invention allows for one entity to execute a security function that will normally require extensive authorizations or dual or multiple control. The method and system comprise instructions that are cryptographically protected against alteration or misuse, wherein the instructions further comprise a trusted block that defines security policies that are permitted when an application program employs the trusted block in APIs. The trusted block has a number of fields containing rules that provide an ability to limit how the trusted block is used, thereby reducing the risk of the trusted block being employed in unintended ways.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07779258",
	"publication_date": "2010-08-17",
	"application_number": "11534236",
	"application_date": "2006-09-22",
	"tags": null,
	"slug": "method-for-controlling-security-function-execution-with-a-flexible-extendable-and-nonforgable-block",
	"match_type": "abstract"
},
{
	"name": "Method for improved key management for ATMs and other remote devices",
	"summary": "",
	"abstract": "A method, article, and system for providing an effective implementation of a data structure comprising instructions that are cryptographically protected against alteration or misuse, wherein the instructions further comprise a trusted block that defines specific key management policies that are permitted when an application program employs the trusted block in application programming interface (API) functions to generate or export symmetric cryptographic keys. The trusted block has a number of fields containing rules that provide an ability to limit how the trusted block is used, thereby reducing the risk of the trusted block being employed in unintended ways or with unintended keys.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07908474",
	"publication_date": "2011-03-15",
	"application_number": "11534232",
	"application_date": "2006-09-22",
	"tags": null,
	"slug": "method-for-improved-key-management-for-atms-and-other-remote-devices",
	"match_type": "abstract"
},
{
	"name": "Method to precondition a storage controller for automated data collection based on host input",
	"summary": "",
	"abstract": "An FTDC interface with the host or user. The interface can include a command application programming interface (API) or a data storage Command-Line Interface (DS CLI)/Graphical User Interface (GUI). In certain embodiments, the FTDC interface allows a host or user to customize a desired FTDC on a two-tiered system. The first tier is one in which a host/user selects, from a list of conditions, which ones, upon occurrence of those conditions, they would like the controller to perform FTDC. In the second tier a second selection is made such that for each first tier item, the host/user will select the level of FTDC (collection and offloading of logs and/or the forcing and offloading of a statesave).",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08250402",
	"publication_date": "2012-08-21",
	"application_number": "12053663",
	"application_date": "2008-03-24",
	"tags": null,
	"slug": "method-to-precondition-a-storage-controller-for-automated-data-collection-based-on-host-input",
	"match_type": "abstract"
},
{
	"name": "Method, system and program product for adapting to protocol changes",
	"summary": "",
	"abstract": "A method, system and program product for overriding existing functionality provided in an application programming interface (API) for a local protocol implementation is provided. The method includes providing an API for a local protocol implementation having a raw interface function that can be invoked by a client application to override existing functionality provided in the API. The method further includes defining for the raw interface function an array of pre-formed payload elements to be included for creating a customized protocol request message for requesting a protocol service from a server application using a remote protocol implementation different than the local protocol implementation, populating data for each element in the array defined, and invoking the raw interface function, which takes as input the array defined and inserts them, in order, behind a protocol message header of the protocol request message and sends the customized protocol request message to the server application.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07907619",
	"publication_date": "2011-03-15",
	"application_number": "11612657",
	"application_date": "2006-12-19",
	"tags": null,
	"slug": "method-system-and-program-product-for-adapting-to-protocol-changes",
	"match_type": "abstract"
},
{
	"name": "Method, system, and computer program product for implementing a web service interface",
	"summary": "",
	"abstract": "A method for using WebServices as a basis for implementing an application programming interface (API) of a high-level programming language between a service application and a client application is disclosed. Function parameters of an API function call represent a complex object structure (COS). The method includes serializing the COS into serialized payload data, encoding the serialized payload data to form a payload string that does not contain any XML-specific characters, and specifying the parameters of the API call in parts of an input message of a corresponding operation in a WSDL document. The method also includes transporting the payload string within the input message to the service application, decoding the payload string to yield the serialized payload data, and deserializing the serialized payload data to restore the COS representing the parameters of the API call. A system and computer program product for implementing the API on the basis of Web Services are also disclosed.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08245246",
	"publication_date": "2012-08-14",
	"application_number": "12206869",
	"application_date": "2008-09-09",
	"tags": null,
	"slug": "method-system-and-computer-program-product-for-implementing-a-web-service-interface",
	"match_type": "abstract"
},
{
	"name": "Method, system, and program product for monitoring message flow in a message queuing system",
	"summary": "",
	"abstract": "System, method, and computer program product for automatically monitoring message flow in a message queuing system in an asynchronous messaging network. A message queuing application programming interface appends, in a message descriptor field for recording and monitoring message flow, unique application identification keys of applications that process the message, operation codes applied to the message, and time stamps of operations applied during message processing. The keys are generated by the start-up of the applications and are filled in by each PUT and GET function of the API. After processing of the message, the entries included in the message descriptor field are monitored, and any deviation from a predefined message flow is automatically detected and reported.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07707585",
	"publication_date": "2010-04-27",
	"application_number": "11254007",
	"application_date": "2005-10-19",
	"tags": null,
	"slug": "method-system-and-program-product-for-monitoring-message-flow-in-a-message-queuing-system",
	"match_type": "abstract"
},
{
	"name": "Methods and computer programs for database structure comparison",
	"summary": "",
	"abstract": "Methods and computer programs for comparing database structures such as database schemas and descriptions of application programming interfaces are disclosed. The methods involve identifying incompatibilities between information repositories such as relational databases and byte code repositories by extracting a first database structure from a first information repository, extracting a second database structure from a second information repository, filtering relevant sections from each database structure, asymmetrically comparing the relevant sections, and identifying any incompatibilities between database schemas or byte code repositories.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07788282",
	"publication_date": "2010-08-31",
	"application_number": "10943064",
	"application_date": "2004-09-16",
	"tags": null,
	"slug": "methods-and-computer-programs-for-database-structure-comparison",
	"match_type": "abstract"
},
{
	"name": "Methods and systems for preventing security breaches",
	"summary": "",
	"abstract": "A security payload is attached to a received binary executable file. The security payload is adapted to intercept application programming interface (API) calls to system resources from the binary executable file via export address redirection back to the security payload. Upon execution of the binary executable file, the security payload replaces system library export addresses within a process address space for the binary executable file with security monitoring stub addresses to the security payload. Upon the binary executable computer file issuing a call to a given API, the process address space directs the call to the given API back to the security payload via one of the security monitoring stub addresses that is associated with the given API. The security payload then can assess whether the call to the given API is a security breach.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08245289",
	"publication_date": "2012-08-14",
	"application_number": "11938181",
	"application_date": "2007-11-09",
	"tags": null,
	"slug": "methods-and-systems-for-preventing-security-breaches",
	"match_type": "abstract"
},
{
	"name": "Methods, systems and computer program products for CPU signaturing to aide in performance analysis",
	"summary": "",
	"abstract": "Methods, systems and computer program products for CPU signaturing to aide in performance analysis. Exemplary embodiments include a performance analysis method including identifying a workload having one or more testcases, assigning a CPU signature to each of the one or more testcases, calling a CPU signature application programming interface that toggles the CPU to generate the CPU signature, passing four parameters to the CPU signature application programming interface, prior to running each of the one or more testcases of the workload, generating the CPU signature, dynamically determining a run order of the one or more testcases at a run time of the workload and reviewing performance data during the running of each of the one or more testcases, each of the one or more testcases being identifiable by its respective CPU signature.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07823018",
	"publication_date": "2010-10-26",
	"application_number": "12120955",
	"application_date": "2008-05-15",
	"tags": null,
	"slug": "methods-systems-and-computer-program-products-for-cpu-signaturing-to-aide-in-performance-analysis",
	"match_type": "abstract"
},
{
	"name": "Processing event notifications with an event sink",
	"summary": "",
	"abstract": "Applications generating events, and system facilities generating events, send notifications of the events to a system event sink. The event sink is preferably associated with an operating system, and provides an application programming interface for registering listeners. (In one alternative approach, the event sink operates as a centrally-accessible or network-accessible entity, where it may concurrently interact with more than one client.) Upon receiving a notification of an event, the event sink forwards the notification to any registered listeners. Optionally, filters may be used to specify criteria to be met before a notification is forwarded to the listener. An event does not rely a particular application for displaying the event to an end user. As one example, notification of a newly-arrived e-mail message might be presented in a chat window of an instant messaging client.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07937714",
	"publication_date": "2011-05-03",
	"application_number": "11924575",
	"application_date": "2007-10-25",
	"tags": null,
	"slug": "processing-event-notifications-with-an-event-sink",
	"match_type": "abstract"
},
{
	"name": "Processing event notifications with an event sink",
	"summary": "",
	"abstract": "Applications generating events, and system facilities generating events, send notifications of the events to a system event sink. The event sink is preferably associated with an operating system, and provides an application programming interface for registering listeners. (In one alternative approach, the event sink operates as a centrally-accessible or network-accessible entity, where it may concurrently interact with more than one client.) Upon receiving a notification of an event, the event sink forwards the notification to any registered listeners. Optionally, filters may be used to specify criteria to be met before a notification is forwarded to the listener. An event does not rely on a particular application for displaying the event to an end user. As one example, notification of a newly-arrived e-mail message might be presented in a chat window of an instant messaging client.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08117304",
	"publication_date": "2012-02-14",
	"application_number": "11924583",
	"application_date": "2007-10-25",
	"tags": null,
	"slug": "processing-event-notifications-with-an-event-sink",
	"match_type": "abstract"
},
{
	"name": "Processing messages in a message queueing system",
	"summary": "",
	"abstract": "A system, method, and a computer program product for processing messages in a message queuing system includes an application repository, a message store, and a queue-less application programming interface in each message queuing system. The application repositories may store application identification data provided by applications. The application programming interfaces may put messages to and get messages from the message queuing systems, and provide with each connect and put request application identification data.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07716678",
	"publication_date": "2010-05-11",
	"application_number": "11290080",
	"application_date": "2005-11-30",
	"tags": null,
	"slug": "processing-messages-in-a-message-queueing-system",
	"match_type": "abstract"
},
{
	"name": "Query framework system and method",
	"summary": "",
	"abstract": "A query framework system is provided. The query framework system comprises a query framework service for consuming a query and returning a result set, a provider application programming interface for defining a consistent application programming interface for providers, one or more providers incorporating query processing logic, and a configuration repository for storing the list of the providers in the query framework system and their properties.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07716212",
	"publication_date": "2010-05-11",
	"application_number": "11473375",
	"application_date": "2006-06-22",
	"tags": null,
	"slug": "query-framework-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Shared credential store",
	"summary": "",
	"abstract": "A personal credential store that aggregates a number of physical credential stores beneath an application programming interface (API) and offers tag-based credential look-up. The API of the disclosed system runs on the user's client system, and effectively hides the underlying credential store types from applications using it. The tags used to look up credentials through the API may advantageously include or consist of unique identifiers indicating the functional purpose of the desired credential. The types of physical credential store aggregated together under the disclosed API may include a local credential store, a network-resident private credential store that may be shared across multiple client systems operated by a single user, and a network-resident shareable credential store, that may be used by processes acting on behalf of the user, and/or shared by multiple users.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08015596",
	"publication_date": "2011-09-06",
	"application_number": "10878166",
	"application_date": "2004-06-28",
	"tags": null,
	"slug": "shared-credential-store",
	"match_type": "abstract"
},
{
	"name": "Storage and retrieval of variable data",
	"summary": "",
	"abstract": "Methods and apparatus, including computer program products, implementing and using techniques for managing data items. A data store includes at least two copies of each data item. Each copy of a data item is used for a unique set of operations performed on the data item. An application programming interface receives a request from a consumer to perform an operation on a data item in the data store. The application programming interface selects, based on the received request, which copy of the data item is to be used when performing the operation.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08126841",
	"publication_date": "2012-02-28",
	"application_number": "12034475",
	"application_date": "2008-02-20",
	"tags": null,
	"slug": "storage-and-retrieval-of-variable-data",
	"match_type": "abstract"
},
{
	"name": "Storage manager for virtual machines with virtual storage",
	"summary": "",
	"abstract": "A storage manager connects containers of virtual machine (VM) images and virtual storage device data within hosts. The storage management provides a set of northbound application programming interfaces (APIs) that allow configuration of images associated with VM images and virtual storage devices provided to the operating systems and applications within virtual machine images. The northbound APIs, include methods for creating a virtual storage container that contains storage for the VM instance and also at least one virtual storage device to be provided to an operating system executed by the VM, a method for causing an attach of the virtual storage container to the host and a method for causing a deployment of the virtual storage device within the host. A set of southbound APIs are provided by the host, including at least a method that creates virtual storage devices and a method that attaches virtual storage devices to the host.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08434081",
	"publication_date": "2013-04-30",
	"application_number": "12829714",
	"application_date": "2010-07-02",
	"tags": null,
	"slug": "storage-manager-for-virtual-machines-with-virtual-storage",
	"match_type": "abstract"
},
{
	"name": "Supporting multiple security mechanisms in a database driver",
	"summary": "",
	"abstract": "A method for connecting a client to a database server are provided. The method provide for providing a generic interface, the generic interface being operable to interoperate with one or more non-GSSAPI (Generic Security Services Application Programming Interface) compliant security mechanisms, providing a set of specialized interfaces, the set of specialized interface being operable to interoperate with one or more GSSAPI compliant security mechanisms, and establishing a connection between a client and a database server using the generic interface or the set of specialized interfaces depending on a security mechanism used by the client. The one or more non-GSSAPI compliant security mechanisms and the one or more GSSAPI compliant security mechanisms may be predefined or user-defined.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07761468",
	"publication_date": "2010-07-20",
	"application_number": "11538518",
	"application_date": "2006-10-04",
	"tags": null,
	"slug": "supporting-multiple-security-mechanisms-in-a-database-driver",
	"match_type": "abstract"
},
{
	"name": "System and apparatus to ensure a low-latency read of log records from a database management system (u201cDBMSu201d)",
	"summary": "",
	"abstract": "A system and method to ensure a low-latency read of log records from a Database Management System (u201cDBMSu201d) in asynchronous log-based database replication capture from a blocking log read Application Programming Interface (u201cAPIu201d). The system may include a replication server with a log read module to initialize a log read thread. The reading module of the log read thread may read a predefined number of DBMS log records. A log flush module of the log flush thread may be executed by the log read thread and waits for a read complete notification. The update module, in response to a log flush thread time out, may also generate a plurality of loggable transactions such that a number of log records in an internal API log satisfies a DBMS threshold and unblocks the DBMS API. Therefore, the latency time may be constant, low, and predictable ensuring an accurate replication capture.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07890455",
	"publication_date": "2011-02-15",
	"application_number": "12128488",
	"application_date": "2008-05-28",
	"tags": null,
	"slug": "system-and-apparatus-to-ensure-a-lowlatency-read-of-log-records-from-a-database-management-system-dbms",
	"match_type": "abstract"
},
{
	"name": "System for portion of a day out of office notification",
	"summary": "",
	"abstract": "A system for generating an electronic notice programmed to display a portion of a day out of the office notice. The system including an application server node configured to execute a personal information management application. An application programming interface is programmatically associated with the personal information management application for allowing requests for services to be transmitted to the personal information management application. At least one of a rich client delegate and a remote EJB housing the API, the rich client delegate and the remote EJB being programmatically associated with the application server node and the personal information management application. The rich client delegate being configured to receive and transmit data to the API via a network. At least one client node is operably associated with the application server node via the network. Each client node having a user interface (UI) that is programmatically associated with the personal information management application.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08095941",
	"publication_date": "2012-01-10",
	"application_number": "11470677",
	"application_date": "2006-09-07",
	"tags": null,
	"slug": "system-for-portion-of-a-day-out-of-office-notification",
	"match_type": "abstract"
},
{
	"name": "Systems, methods and computer products for database cluster modeling",
	"summary": "",
	"abstract": "Generating in a computer system and deploying a data model of a plurality of database cluster configuration availability solutions over a computer network by creating a database cluster configuration modeling specification including objects contained in a unified model language diagram providing a definition of a database cluster configuration data model. Creating the database cluster configuration data model using the database cluster configuration modeling specification and upon receiving signals from a graphical user interface or from XML batch data files or from application programming interfaces, indicating the definition of the cluster configuration model. After creating the graphical database cluster configuration data model, constraints that specify a valid logical configuration are validated and the solution is transformed into data understandable by database cluster manager software applications and then transmitted over a network to multiple cluster manager targets to be incorporated as database cluster configuration availability solutions.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07730091",
	"publication_date": "2010-06-01",
	"application_number": "11848783",
	"application_date": "2007-08-31",
	"tags": null,
	"slug": "systems-methods-and-computer-products-for-database-cluster-modeling",
	"match_type": "abstract"
},
{
	"name": "Virtual multidimensional datasets for enterprise software systems",
	"summary": "",
	"abstract": "Techniques are described for specifying virtual datasets within an enterprise software system. A computer-implemented system, for example, includes an enterprise planning system and a computing device coupled to the enterprise planning system via a network connection. The computing device includes an object store that stores a dataset, an application programming interface (API) that defines an operation for specifying the virtual dataset from the dataset, and an object model that stores a virtual dataset to the object store in response to receiving the operation defined by the API. The computing device further includes a plurality of applications that utilize the virtual dataset for a further operation defined by the API without resolving the virtual dataset. Because virtual dataset may be utilized without first resolving them, the virtual datasets may require less storage space within a memory, may automatically remain synchronous with the underlying dataset, and may quickly layer to more readily perform complicated operations.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07747562",
	"publication_date": "2010-06-29",
	"application_number": "11564011",
	"application_date": "2006-11-28",
	"tags": null,
	"slug": "virtual-multidimensional-datasets-for-enterprise-software-systems",
	"match_type": "abstract"
},
{
	"name": "Web service interfaces used in providing a billing service",
	"summary": "",
	"abstract": "A web service interface defined for a billing service, comprising a plurality of application programming interfaces, where each application programming interface is associated with a billing function provided by the billing service, where each of the application programming interfaces can be implemented such that the billing function associated therewith is performed after a web service invocation that commands performance of that billing function is received by the web service interface. The web service interface is used to provide the billing service as a web service to computing applications in a distributed network environment.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08195566",
	"publication_date": "2012-06-05",
	"application_number": "10674778",
	"application_date": "2003-09-30",
	"tags": null,
	"slug": "web-service-interfaces-used-in-providing-a-billing-service",
	"match_type": "abstract"
},
{
	"name": "Architecture, system and method for an RTP streaming system",
	"summary": "",
	"abstract": "An architecture, system and method for an RTP streaming system is disclosed. In one embodiment, a method includes developing multiple standalone modules, developing application programming interfaces associated with the standalone modules, and tying together the standalone modules to form a subsystem associated with a streaming application and with a network. The method further includes integrating standalone modules including an RTP module, an RTCP module and a payload interface, associated with any one of a server mode and a client mode. The method also includes managing a streaming session associated with media streams via an RTPSS manager, adding the media streams to a stream manager. For each media stream of the streaming session: the method includes performing packetization services in the server mode and de-packetization services in the client mode, and performing server-mode related services in the server mode and client-mode related services in the client mode.",
	"url": null,
	"owner": "Ittiam Systems (P) Ltd.",
	"publication_number": "08307118",
	"publication_date": "2012-11-06",
	"application_number": "12018801",
	"application_date": "2008-01-24",
	"tags": null,
	"slug": "architecture-system-and-method-for-an-rtp-streaming-system",
	"match_type": "abstract"
},
{
	"name": "System and method for connecting, configuring and testing wireless devices and applications",
	"summary": "",
	"abstract": "A system, apparatus, and method are provided for connecting, configuring and testing wireless devices and applications. For example, one embodiment of wireless device for operation in a wireless network comprises a processor, a wireless module including a radio receiver and transmitter unit coupled to the processor, a graphical user interface (GUI) coupled to the processor, and a Connection Manager Module (CMM) including an Application Programming Interface (API) module, a Rules Engine Module, and a Rules Set Module, wherein the CMM manages a connection to a wireless network.",
	"url": null,
	"owner": "Jasper Technologies, Inc.",
	"publication_number": "08937910",
	"publication_date": "2015-01-20",
	"application_number": "14477614",
	"application_date": "2014-09-04",
	"tags": null,
	"slug": "system-and-method-for-connecting-configuring-and-testing-wireless-devices-and-applications",
	"match_type": "abstract"
},
{
	"name": "Clustered network acceleration devices having shared cache",
	"summary": "",
	"abstract": "A network acceleration device provides application programming interface (API) that facilitates the sharing of cache resources among multiple network acceleration devices, thereby allowing the network acceleration devices to be clustered and share a common cache of network content. This clustered approach may advantageously allow clients serviced by one network acceleration device to benefit from previous network access requests issued by clients serviced by a different network acceleration device of the cluster.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07979509",
	"publication_date": "2011-07-12",
	"application_number": "11227979",
	"application_date": "2005-09-15",
	"tags": null,
	"slug": "clustered-network-acceleration-devices-having-shared-cache",
	"match_type": "abstract"
},
{
	"name": "Multiple virtualized operating environments within a VPN appliance",
	"summary": "",
	"abstract": "A secure socket layer virtual private network (SSL VPN) network appliance includes a set of virtual systems having respective context information. Each of the virtual systems represents a VPN for a different subscriber network. The network appliance includes a network interface to receive a first network communication associated with a first one of the virtual systems. In response to the network communication, the SSL VPN network appliance sets a context identifier that identifies the first one of the virtual systems. The network appliance further comprises a set of VPN software processes executing on the network appliance to process the first network communication, wherein the set of VPN software processes generate data access requests. A configuration access application programming interface (API) dynamically directs the data access requests from the VPN software processes to the first one of the virtual systems based on the context identifier.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07961722",
	"publication_date": "2011-06-14",
	"application_number": "11369714",
	"application_date": "2006-03-07",
	"tags": null,
	"slug": "multiple-virtualized-operating-environments-within-a-vpn-appliance",
	"match_type": "abstract"
},
{
	"name": "Scalable route resolution",
	"summary": "",
	"abstract": "A router comprises a route resolution module to maintain routing information in accordance with a topology of a network, and an indirect next hop manager to maintain indirect next hop data that associates protocol next hops with forwarding next hops. The route resolution module invokes an application programming interface (API) of the indirect next hop manager for associating and disassociating protocol next hops and forwarding next hops. In response to a network event, the route resolution module can modify the indirect next hop data to reduce the time and resources necessary to perform route resolution.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "08014293",
	"publication_date": "2011-09-06",
	"application_number": "12820962",
	"application_date": "2010-06-22",
	"tags": null,
	"slug": "scalable-route-resolution",
	"match_type": "abstract"
},
{
	"name": "Scalable route resolution",
	"summary": "",
	"abstract": "A router comprises a route resolution module to maintain routing information in accordance with a topology of a network, and an indirect next hop manager to maintain indirect next hop data that associates protocol next hops with forwarding next hops. The route resolution module invokes an application programming interface (API) of the indirect next hop manager for associating and disassociating protocol next hops and forwarding next hops. In response to a network event, the route resolution module can modify the indirect next hop data to reduce the time and resources necessary to perform route resolution.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07746790",
	"publication_date": "2010-06-29",
	"application_number": "11670272",
	"application_date": "2007-02-01",
	"tags": null,
	"slug": "scalable-route-resolution",
	"match_type": "abstract"
},
{
	"name": "System and method for displaying information on the screen of a user interface device under the control of a digital audio playback device",
	"summary": "",
	"abstract": "A digital audio playback device (DAPD) includes: 1) an external interface for coupling to a connected processing system that executes a user interface application program that accesses and controls the digital audio playback device via the external interface; 2) a memory coupled to the external interface for storing a reverse DAPD application programming interface (API); and 3) a processor coupled to the memory and the external interface for executing the reverse DAPD API. The reverse DAPD API causes the processor to access and control a user interface operated by the user interface application program displayed on a monitor screen of the connected processing system.",
	"url": null,
	"owner": "Koninklijke Philips Electronics N.V.",
	"publication_number": "07895610",
	"publication_date": "2011-02-22",
	"application_number": "09691334",
	"application_date": "2000-10-18",
	"tags": null,
	"slug": "system-and-method-for-displaying-information-on-the-screen-of-a-user-interface-device-under-the-control-of-a-digital-audio-playback-device",
	"match_type": "abstract"
},
{
	"name": "Unified transportation payment system",
	"summary": "",
	"abstract": "Embodiments of the present invention relate to an electronic payment system and more particularly to a unified transportation payment system. In one embodiment, a passenger uses a card which has been set up for use within the transportation system to pay transportation costs. The card contains data including information representing a monetary value. The passenger uses the card at a card reader located at the transportation center. The card reader includes an application programming interface (API) which receives the data read from the card including information representing the monetary value stored on the card. The monetary value is adjusted by assessing an amount corresponding to a value associated with the transaction.",
	"url": null,
	"owner": "LG CNS Co., Ltd.",
	"publication_number": "08733645",
	"publication_date": "2014-05-27",
	"application_number": "13283872",
	"application_date": "2011-10-28",
	"tags": null,
	"slug": "unified-transportation-payment-system",
	"match_type": "abstract"
},
{
	"name": "Digital broadcasting system and method of processing data in digital broadcasting system",
	"summary": "",
	"abstract": "A method is provided for controlling a management server that is connected to a DTV through an IP connection, wherein the DTV is located in one independent space among a plurality of independent spaces physically separated from one another. The method including generating a message file including an Application Programming Interfaces (API) command and a parameter related to a display condition, accessing an IP address of a DTV serving as a destination of the generated message file, transmitting, if the accessing is successfully achieved, the generated message file to the DTV having the accessed IP address and receiving information for identifying whether the message file is successfully processed from the DTV.",
	"url": null,
	"owner": "LG Electronics Inc.",
	"publication_number": "08374180",
	"publication_date": "2013-02-12",
	"application_number": "12605782",
	"application_date": "2009-10-26",
	"tags": null,
	"slug": "digital-broadcasting-system-and-method-of-processing-data-in-digital-broadcasting-system",
	"match_type": "abstract"
},
{
	"name": "Record media written with data structure for recognizing a user and method for recognizing a user",
	"summary": "",
	"abstract": "The present invention relates to a record media written with a data structure used in recognizing specific users in hardware such as a robot, etc., a method for recognizing a user by using a data structure written in the record media, and a user identification database access method for the user identification software component application programming interface (API) and an error handling method in the user identification software component API. Among the user identification elements, in particular, the present invention relates to a method for building a database of image data for the user's clothes, and a performance evaluation of a vision-based recognizer, which is means for recognizing the user's image information for the clothes.",
	"url": null,
	"owner": "LG Electronics Inc.",
	"publication_number": "07890522",
	"publication_date": "2011-02-15",
	"application_number": "11594930",
	"application_date": "2006-11-09",
	"tags": null,
	"slug": "record-media-written-with-data-structure-for-recognizing-a-user-and-method-for-recognizing-a-user",
	"match_type": "abstract"
},
{
	"name": "Lighting control system and method",
	"summary": "",
	"abstract": "Lighting devices are configured to communicate with one another and with external systems. Sensors located at such lighting devices communicate with the external systems and with others of the lighting devices. Lighting is controlled to maintain safety, to drive customer traffic within a retail facility, or to conserve energy. An application programming interface provides a common mechanism for control of various lighting device types.",
	"url": null,
	"owner": "Lumetric Lighting, Inc.",
	"publication_number": "08670873",
	"publication_date": "2014-03-11",
	"application_number": "12875132",
	"application_date": "2010-09-03",
	"tags": null,
	"slug": "lighting-control-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Lighting control system and method",
	"summary": "",
	"abstract": "Lighting devices are configured to communicate with one another and with external systems. Sensors located at such lighting devices communicate with the external systems and with others of the lighting devices. Lighting is controlled to maintain safety, to drive customer traffic within a retail facility, or to conserve energy. An application programming interface provides a common mechanism for control of various lighting device types.",
	"url": null,
	"owner": "Lumetric, Inc.",
	"publication_number": "08143811",
	"publication_date": "2012-03-27",
	"application_number": "12482570",
	"application_date": "2009-06-11",
	"tags": null,
	"slug": "lighting-control-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Telecommunications system having separate switch intelligence and switch fabric",
	"summary": "",
	"abstract": "The present invention is a telecommunications system having separate switch fabric and switch intelligence. The system comprises a switch fabric, a switch intelligence, and a feature processor. The switch intelligence is logically separated from the switch fabric and comprises a switch fabric proxy, a facility service, a connection manager service, and a call segment instance service. The switch fabric proxy is coupled to the switch fabric via a vendor-specific first Application Programming Interface (API). The switch fabric proxy supports a second API, which is common across all vendors, representing functions supported by the switch fabric. A facility instance, which is instantiated by a facility service using a facility model, represents the bearer and signaling facilities of a party to a call, and interacts with the switch fabric proxy via the second API to communicate with the switch fabric. The connection manager service represents the connectors for a party to a call, and interacts with the switch fabric proxy via the second API to communicate with the switch fabric. A call segment instance, which is instantiated by a call segment instance service using a call model, represents the call logic and call data for a party to a call, and interacts with the connection manager service via a third API and with the facility instance via a fourth API. The feature processor interacts with the call segment instance via a fifth API to provide the telecommunications feature.",
	"url": null,
	"owner": "MCI Communications Corporation",
	"publication_number": "RE043361",
	"publication_date": "2012-05-08",
	"application_number": "10054245",
	"application_date": "2002-01-24",
	"tags": null,
	"slug": "telecommunications-system-having-separate-switch-intelligence-and-switch-fabric",
	"match_type": "abstract"
},
{
	"name": "Asynchronous updating of web page data views",
	"summary": "",
	"abstract": "Embodiments are provided to create and manage data view modules for updating data on a web page, without having to reload the entire web page to view the updated data. In one embodiment, a static data view module for viewing web data is modified utilizing an asynchronous update function which provides asynchronous update behavior for the data view module. The asynchronous update function enables the data view module to automatically update data displayed in a data view independently of data displayed in other static data views which may be present in a web page and which may only be updated by reloading the entire web page. In another embodiment, application programming interfaces (APIs) may be provided in the modified data view module which, when exposed, facilitate the building of customized data views by providing asynchronous update behavior for customized data view modules in a web page.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07895179",
	"publication_date": "2011-02-22",
	"application_number": "11768095",
	"application_date": "2007-06-25",
	"tags": null,
	"slug": "asynchronous-updating-of-web-page-data-views",
	"match_type": "abstract"
},
{
	"name": "Automatic switching fonts on multilingual text runs",
	"summary": "",
	"abstract": "Automatic switching of fonts on multilingual text runs in one action is provided. After an indication that a new font scheme is to be applied to a multilingual text selection, a client application passes a language identification for each of the multilingual text runs, a major/minor font designation for each text run, a script identification for each text run, if available, and the selected new font scheme to a font scheme application programming interface (API). The font scheme API converts the received language identification to a script identification for each multilingual text run and maps the resulting script identifications to appropriate fonts associated with the selected font scheme for each of the multilingual text runs. Fonts retrieved for each language text run are returned to the client application for rendering the multilingual text runs according to the respective fonts applicable to the selected font scheme.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08078965",
	"publication_date": "2011-12-13",
	"application_number": "11799457",
	"application_date": "2007-05-01",
	"tags": null,
	"slug": "automatic-switching-fonts-on-multilingual-text-runs",
	"match_type": "abstract"
},
{
	"name": "Availability data service",
	"summary": "",
	"abstract": "Real time availability data (free/busy data) is provided for potential meeting attendees and/or assets. An availability service is queried for availability data for one or more attendees and/or meeting assets. The availability service determines the identity of an electronic mailbox server on which is stored current real time calendaring data for the desired attendees and/or assets. The requested data is retrieved by the availability service from one or more mailbox servers having data for each attendee and/or asset. Potential attendees may set permissions on their respective availability data to restrict the amount and types of data that may be retrieved by a given data requester. Data queries and data responses may be structured according to the Extensible Markup Language (XML) and application programming interfaces (API) may be exposed for allowing requesting applications to efficiently call the availability service for availability data.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07849102",
	"publication_date": "2010-12-07",
	"application_number": "11267349",
	"application_date": "2005-11-04",
	"tags": null,
	"slug": "availability-data-service",
	"match_type": "abstract"
},
{
	"name": "Browser elements for communicating with other browser elements and with external applications",
	"summary": "",
	"abstract": "Browser elements are configurable as web services and communicate using various communication architectures and protocols. Application programming interfaces associated with browser elements configured as web services are accessible to web browsers through web scripting modules.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07805728",
	"publication_date": "2010-09-28",
	"application_number": "11687429",
	"application_date": "2007-03-16",
	"tags": null,
	"slug": "browser-elements-for-communicating-with-other-browser-elements-and-with-external-applications",
	"match_type": "abstract"
},
{
	"name": "Client application independent extensibility model",
	"summary": "",
	"abstract": "Information describing a type registration regarding which an action is being requested by the client application is received as one or more parameters of an application programming interface method invoked by the client application. Based on the one or more parameters, one of multiple type extensions to which the action being requested corresponds is determined. At least part of the information describing the type registration is sent to the one of the multiple type extensions, and the one of the multiple type extensions performs the action being requested.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08117622",
	"publication_date": "2012-02-14",
	"application_number": "12465812",
	"application_date": "2009-05-14",
	"tags": null,
	"slug": "client-application-independent-extensibility-model",
	"match_type": "abstract"
},
{
	"name": "Collaborative invitation system and method",
	"summary": "",
	"abstract": "A set of collaborative contacts may be selected with an invitation user interface. An invitation to participate in a collaborative activity may be sent to the selected contacts from the invitation user interface or from a collaborative application. The invitation may be received by a collaborative services platform. A user of the collaborative services platform may be presented with the invitation along with an ability to choose one of accept, decline and ignore in response to the invitation. The user may choose to accept, decline or explicitly ignore the invitation, and a response may be sent to the sender of the invitation indicating the user's choice. An application programming interface for a collaborative invitation service of the collaborative services platform may include an invitation element, a send invitation element, a respond to invitation element and a cancel invitation element. The cancel invitation element may be used to cancel issued invitations.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07752253",
	"publication_date": "2010-07-06",
	"application_number": "11114634",
	"application_date": "2005-04-25",
	"tags": null,
	"slug": "collaborative-invitation-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Color management system that supports legacy and advanced color management applications",
	"summary": "",
	"abstract": "The present invention provides method and apparatus for supporting a legacy application programming interface (API) set between a component and a color management system. The legacy API set supports both the new capabilities as well as the legacy capabilities. The color management system determines the format type for an object that is referenced by an API call. If the object is associated with a legacy format, the API call is processed by a legacy processing module. If the object is associated with an advanced format, the API call is processed by an advanced processing module. If a plurality of objects is associated with an API call with mixed formats, the color management system converts some of the objects so that the objects have a consistent format. A common structure supports an object that may have either a legacy format or an advanced format.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07647347",
	"publication_date": "2010-01-12",
	"application_number": "11276245",
	"application_date": "2006-02-20",
	"tags": null,
	"slug": "color-management-system-that-supports-legacy-and-advanced-color-management-applications",
	"match_type": "abstract"
},
{
	"name": "Color management system that supports legacy and advanced color management applications",
	"summary": "",
	"abstract": "The present invention provides method and apparatus for supporting a legacy application programming interface (API) set between a component and a color management system. The legacy API set supports both the new capabilities as well as the legacy capabilities. The color management system determines the format type for an object that is referenced by an API call. If the object is associated with a legacy format, the API call is processed by a legacy processing module. If the object is associated with an advanced format, the API call is processed by an advanced processing module. If a plurality of objects is associated with an API call with mixed formats, the color management system converts some of the objects so that the objects have a consistent format. A common structure supports an object that may have either a legacy format or an advanced format.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07647348",
	"publication_date": "2010-01-12",
	"application_number": "11276246",
	"application_date": "2006-02-20",
	"tags": null,
	"slug": "color-management-system-that-supports-legacy-and-advanced-color-management-applications",
	"match_type": "abstract"
},
{
	"name": "Communicating between an application process and a server process to manage peer-to-peer identities",
	"summary": "",
	"abstract": "Peer-to-peer (P2P) application programming interfaces (APIs) that allow an application to create, import, export, manage, enumerate, and delete P2P identities are presented. Further, the management of group identity information is provided. APIs abstract away from low level credential and cryptographic functions required to create and manage P2P identities. This management includes retrieval and setting of a friendly name, generation of a cryptographic public/private key pair, retrieval of security information in the form of an XML fragment, and creation of a new name based on an existing identity. Since the P2P environment also allows for the existence of multiple separate groups of peers within the P2P cloud, a preferred embodiment of the present invention also allows for the enumeration of all groups associated with a given identity, for each identity existing for the user.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08010681",
	"publication_date": "2011-08-30",
	"application_number": "12559841",
	"application_date": "2009-09-15",
	"tags": null,
	"slug": "communicating-between-an-application-process-and-a-server-process-to-manage-peertopeer-identities",
	"match_type": "abstract"
},
{
	"name": "Contract programming for code error reduction",
	"summary": "",
	"abstract": "In one embodiment, a computer system provides an application programming interface (API) for augmenting an application API. A computer system receives software code written in a second programming language indicating a user's intention to augment an application API with contracts from a contract API written in a first programming language. The software code includes a reference to the contract API. The contracts include assertions indicating appropriate use of the application API. The computer system accesses portions of the contract API according to the reference in the software code and compiles the received software code and the referenced portions of the contract API into an intermediate language (IL) version of the software code. The IL version is in an intermediate language common to both the first programming language and the second programming language. The IL version includes the assertions indicating appropriate use of the application API.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08250524",
	"publication_date": "2012-08-21",
	"application_number": "11963346",
	"application_date": "2007-12-21",
	"tags": null,
	"slug": "contract-programming-for-code-error-reduction",
	"match_type": "abstract"
},
{
	"name": "Controlling access of application programs to an adaptive input device",
	"summary": "",
	"abstract": "Methods and systems for controlling access of application programs to an adaptive input device are described herein. One exemplary computing system includes an application programming interface executable on a computing device for controlling said access to an adaptive input device having a plurality of display regions. The application programming interface is configured to receive a display request from one of the application programs to display formatted output on the composite display and is further configured to apply at least a display sharing policy based on application-specific policy settings received from the application program for defining an application-specific area including at least one of the display regions. Further, the application programming interface is configured to generate formatted output based on the application-specific policy settings, and to send the formatted output to the application-specific area for display. The application-specific policy settings include a shared display mode and an exclusive display mode.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08201213",
	"publication_date": "2012-06-12",
	"application_number": "12427882",
	"application_date": "2009-04-22",
	"tags": null,
	"slug": "controlling-access-of-application-programs-to-an-adaptive-input-device",
	"match_type": "abstract"
},
{
	"name": "Crawling databases for information",
	"summary": "",
	"abstract": "A system facilitates the search engine to search for pieces of information in various databases and application documents without the need to know the specific protocols to communicate with the various databases and application documents, such as Microsoft Excel documents. Despite the multitude of possible protocols which a crawler would have to use to connect to the databases, the system includes a unifying application programming interface to unify the way to access pieces of information in the databases and application documents.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07801880",
	"publication_date": "2010-09-21",
	"application_number": "11096429",
	"application_date": "2005-03-29",
	"tags": null,
	"slug": "crawling-databases-for-information",
	"match_type": "abstract"
},
{
	"name": "Digital identity management",
	"summary": "",
	"abstract": "One aspect relates to a process and associated device for managing digital ID lifecycles for application programs, and abstracting application programs for multiple types of credentials through a common Digital Identity Management System (DIMS) and Application Programming Interface (API) layer.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07703128",
	"publication_date": "2010-04-20",
	"application_number": "10365878",
	"application_date": "2003-02-13",
	"tags": null,
	"slug": "digital-identity-management",
	"match_type": "abstract"
},
{
	"name": "Distributed routing table interface",
	"summary": "",
	"abstract": "Application programming interface (API) for starting and accessing distributed routing table (DRT) functionality. The API facilitates bootstrapping into the DRT by one or more devices of a group of devices (a mesh) seeking to collaborate over a serverless connection, establishing a node of the DRT, where each node is an instance of an application that is participating in the mesh, and node participation by allowing the application to search for keys published by other nodes in the mesh, or by becoming part of the mesh by publishing a key. The API facilitates optimization of the routing table for quickly finding a root of a specific key in the mesh by finding the key directly in a cache or by asking a root node of the key that is in the local routing table that is closest numerically to the key being searched.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08161095",
	"publication_date": "2012-04-17",
	"application_number": "11716896",
	"application_date": "2007-03-12",
	"tags": null,
	"slug": "distributed-routing-table-interface",
	"match_type": "abstract"
},
{
	"name": "Dynamic mechanism for providing metadata",
	"summary": "",
	"abstract": "Dynamic metadata allows for metadata that can be configured for an application programming interface (API) after the API has shipped. Multiple entities can provide metadata for the same API or portions of an API. The metadata provided for an API can be set up for each application domain, allowing customization within a single process. Metadata can be provided in several ways, including traditional compiled code and declarative markup as well as databases and other more dynamic approaches. Metadata is separated from its runtime components, so that the metadata that is used by the runtime components can be changed. For example, metadata may be declared on the objects separately. The metadata is then tied back to the runtime components.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716246",
	"publication_date": "2010-05-11",
	"application_number": "11291703",
	"application_date": "2005-11-30",
	"tags": null,
	"slug": "dynamic-mechanism-for-providing-metadata",
	"match_type": "abstract"
},
{
	"name": "Dynamic redirection of streaming media between computing devices",
	"summary": "",
	"abstract": "Dynamic redirection of streaming media between computing devices is described. In an implementation, a method listening at an application programming interface for a notification indicating that a change is to be made in a topology of streaming media software components. When the notification is received, a media engine that is capable of reconfiguring the topology in accordance with the indicated change is notified. At least one of the topology or the reconfigured topology have one of the streaming media software components located on a comprising device and another one of the streaming media software components located on another computing device.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07669206",
	"publication_date": "2010-02-23",
	"application_number": "10828402",
	"application_date": "2004-04-20",
	"tags": null,
	"slug": "dynamic-redirection-of-streaming-media-between-computing-devices",
	"match_type": "abstract"
},
{
	"name": "Ecommerce marketplace integration techniques",
	"summary": "",
	"abstract": "Various technologies and techniques are disclosed for integrating ecommerce marketplaces. An ecommerce integration framework has definitions for common data entities that are commonly used by multiple ecommerce marketplaces for listing items. Definitions for common operations that can manipulate the common data entities are provided. An application programming interface is provided that uses the common data entities and common operations to enable enterprise resource planning systems to exchange data in a standardized format with ecommerce marketplaces. Catalogs of items to be sold in ecommerce marketplaces can be created and managed using a customizable structure. The customizable structure enables catalogs to be created in a hierarchical manner with at least one parent catalog and zero or more child catalogs. Data values specified in a respective child catalog override data values specified in the parent catalog. A method for communicating with a particular ecommerce marketplace using an ecommerce integration framework is described.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08442865",
	"publication_date": "2013-05-14",
	"application_number": "13248633",
	"application_date": "2011-09-29",
	"tags": null,
	"slug": "ecommerce-marketplace-integration-techniques",
	"match_type": "abstract"
},
{
	"name": "Flexible architecture for notifying applications of state changes",
	"summary": "",
	"abstract": "Described is a method and system a unified mechanism for storing device, application, and service state, as well as a rich notification brokerage architecture. Clients register with a notification broker to receive notifications for changes to state properties. When a registered state property changes, a notification broker determines which clients to notify of the state change and provides the client with a notification regarding the change. Clients may be notified whenever a state changes, when a state change meets a predetermined condition, or based on a schedule. An application may also be launched in response to a state change. An application programming interface (API) is provided that provides a unified way of accessing state change information across different components within the device.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07644376",
	"publication_date": "2010-01-05",
	"application_number": "10873881",
	"application_date": "2004-06-22",
	"tags": null,
	"slug": "flexible-architecture-for-notifying-applications-of-state-changes",
	"match_type": "abstract"
},
{
	"name": "Framework for database transactions",
	"summary": "",
	"abstract": "Various mechanisms are presented that allow for the coordination of transactions in a managed runtime environment. In one aspect, a runtime environment that is hosted in a database system, includes an application programming interface (API). The API can surface the database transactions as ambient transactions, and present them to some user code. When the user code connects to some remote resource, the ambient transaction can be implicitly propagated to the remoter resource, resulting in coordination of the database transaction with any given transaction running in the remote resource.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07770186",
	"publication_date": "2010-08-03",
	"application_number": "11326947",
	"application_date": "2006-01-06",
	"tags": null,
	"slug": "framework-for-database-transactions",
	"match_type": "abstract"
},
{
	"name": "Generic user interface command architecture",
	"summary": "",
	"abstract": "Certain aspects of a generic user interface command architecture allow an application to host commands for presentation on a computing device. The commands can be written by the same designer or author as the application, or alternatively by other parties (e.g., by a third-party developer). Other aspects of the generic UI command architecture describe an application programming interface (API) that can be used to allow the application to host the commands. Other aspects of the generic UI command architecture describe an activation mechanism by which registered commands can be activated by an application.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08359606",
	"publication_date": "2013-01-22",
	"application_number": "12570012",
	"application_date": "2009-09-30",
	"tags": null,
	"slug": "generic-user-interface-command-architecture",
	"match_type": "abstract"
},
{
	"name": "Instrumentation to find the thread or process responsible for an application failure",
	"summary": "",
	"abstract": "An application programming interface (API) that leverages operating system instrumentation to provide a chain of threads and processes may alleviate some debugging complications. Specifically, the chain may start with the first thread in the process that experienced the original failure and end with the last thread upon which the first thread directly or indirectly depends. The API may aid debugging efforts by classifying all threads related or dependent upon an original failed thread into specific categories of failures, requesting further information from the originating OS concerning specific failed threads, and using that information to debug the failed application or process more thoroughly.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07958512",
	"publication_date": "2011-06-07",
	"application_number": "11413421",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "instrumentation-to-find-the-thread-or-process-responsible-for-an-application-failure",
	"match_type": "abstract"
},
{
	"name": "Interfaces for creation and access of extensible markup language paper specification documents",
	"summary": "",
	"abstract": "XPS documents are created and accessed via a collection of interfaces of various classes of an application programming interface. The application programming interface includes a document sequence class for reading and writing the document sequence of the XPS document, a fixed document class for reading and writing the fixed documents of the document sequence, a page class for reading and writing the pages of the fixed documents, and a resource class for accessing the resources of each page. Applications seeking to create or read XPS documents may utilize the application programming interface such that the complexities of creating and accessing the XPS document are abstracted away.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716570",
	"publication_date": "2010-05-11",
	"application_number": "11301132",
	"application_date": "2005-12-12",
	"tags": null,
	"slug": "interfaces-for-creation-and-access-of-extensible-markup-language-paper-specification-documents",
	"match_type": "abstract"
},
{
	"name": "Media timeline",
	"summary": "",
	"abstract": "A media timeline is described. In an implementation, a method includes receiving a request from an application at an application programming interface (API) to interact with a plurality of media. Based on the request, a media timeline is generated. The media timeline is for exposure via the API to the application and includes a plurality of nodes. The media timeline defines a presentation of a first media referenced by a first node with respect to a second media referenced by a second node.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07934159",
	"publication_date": "2011-04-26",
	"application_number": "10782734",
	"application_date": "2004-02-19",
	"tags": null,
	"slug": "media-timeline",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for utilizing an object model for managing content regions in an electronic document",
	"summary": "",
	"abstract": "A method and apparatus are provided for utilizing a document object model to manage content regions for use in an electronic document. A content region is a predefined area which may be inserted in an electronic document and which serves as a placeholder for receiving and displaying specific types of content such as text, graphics data, calendar data, or tabular data. The document object model enables a user to create, modify, and delete content regions from an electronic document using an application programming interface from within a computer application program.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07712016",
	"publication_date": "2010-05-04",
	"application_number": "11065754",
	"application_date": "2005-02-25",
	"tags": null,
	"slug": "method-and-apparatus-for-utilizing-an-object-model-for-managing-content-regions-in-an-electronic-document",
	"match_type": "abstract"
},
{
	"name": "Method and system for protecting user choices",
	"summary": "",
	"abstract": "A system, method, and computer-accessible medium for protecting user choice settings are provided. The system and method provide an application programming interface that uses a security subsystem to unlock, write, and relock the user choice settings to insure that the user's choices are enforced and respected by the applications that attempt to change them in a manner that is verifiable and transparent to the user. The user is notified whenever a change to their user choice settings is made.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08201230",
	"publication_date": "2012-06-12",
	"application_number": "10783558",
	"application_date": "2004-02-20",
	"tags": null,
	"slug": "method-and-system-for-protecting-user-choices",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing an interface through which an application can access a media stack",
	"summary": "",
	"abstract": "A communications system provides a media sender object and a media receiver object that provide an interface between a media stack and an application. The application can use the media sender object to send content to a source media stack and the media receiver object to receive content from a sink media stack. The application programming interface of the media sender object and the media receiver object provides functions for registering and un-registering buffers for storing and receiving content. When a source media stack is ready to send content, it invokes each registered source to collect content to be sent. When a sink media stack has received content, it invokes each registered sink to provide the received content. An application interfaces with a media sender object and a media receiver object to add content to a channel or to receive content from a channel.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716359",
	"publication_date": "2010-05-11",
	"application_number": "11124902",
	"application_date": "2005-05-09",
	"tags": null,
	"slug": "method-and-system-for-providing-an-interface-through-which-an-application-can-access-a-media-stack",
	"match_type": "abstract"
},
{
	"name": "Non-privileged access to data independent of filesystem implementation",
	"summary": "",
	"abstract": "An application programming interface (API) module provides access to data, independent of filesystem implementation in a non-privileged user mode. A discovery volume having a filesystem recognizable by an operating system has cover files which prevent damage to data stored in an unrecognizable primary volume. The discovery volume also includes a data access API available for execution in a non-privileged user mode to render the primary volume accessible by operating systems which would otherwise find the primary volume unrecognizable.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08073886",
	"publication_date": "2011-12-06",
	"application_number": "12390357",
	"application_date": "2009-02-20",
	"tags": null,
	"slug": "nonprivileged-access-to-data-independent-of-filesystem-implementation",
	"match_type": "abstract"
},
{
	"name": "Object model for a user interface",
	"summary": "",
	"abstract": "Various embodiments provide techniques and processes for defining elements of a user interface (UI) using a tree of objects created based on a markup language. In some embodiments, a client application provides markup that defines one or more aspects of a UI to an application programming interface (API). The API parses the markup to determine a namespace and one or more UI elements defined by the namespace. Instances of the UI elements are created, and properties of the UI elements are set on the instances. A user interface may then be displayed that includes the instances of the UI elements.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08245144",
	"publication_date": "2012-08-14",
	"application_number": "12163367",
	"application_date": "2008-06-27",
	"tags": null,
	"slug": "object-model-for-a-user-interface",
	"match_type": "abstract"
},
{
	"name": "Offline synchronization capability for client application",
	"summary": "",
	"abstract": "Application Programming Interfaces (APIs) and UI modifications for existing applications are used to implement efficient methods for taking content offline with full synchronization, incremental synchronization, in the case of document libraries per-folder synchronization, and the like. The APIs provide support for synchronizing changes to attachments, the ability to download a document library's complete contents or only a list of the available documents, and read-only folder hierarchy replication in the case of document libraries. These abilities coupled with corresponding user interface features enable easier browsing and searching of large document library structures, making edits to those documents offline, being able to see an up-to-date version of those documents in a preview mode, and receiving reminders when offline edits remain on the local computer and need to be updated to a server.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07966426",
	"publication_date": "2011-06-21",
	"application_number": "11599206",
	"application_date": "2006-11-14",
	"tags": null,
	"slug": "offline-synchronization-capability-for-client-application",
	"match_type": "abstract"
},
{
	"name": "Partner sandboxing in a shared multi-tenant billing system",
	"summary": "",
	"abstract": "The present invention relates to a system and methodology for interacting with a Subscription Platform Service (SPS) and providing data security between entities that employ such service. The system includes a component that receives a request to access an object by an entity, and a data store that stores security information on classes of the objects. A verification component employs the security information to determine whether the entity has permission to call an Application Programming Interface (API) for the object and/or operate on the object, wherein the verification component exposes the object if permission exists or masks the object if permission does not exist.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07921299",
	"publication_date": "2011-04-05",
	"application_number": "10729515",
	"application_date": "2003-12-05",
	"tags": null,
	"slug": "partner-sandboxing-in-a-shared-multitenant-billing-system",
	"match_type": "abstract"
},
{
	"name": "Peer-to-peer identity management managed interfaces and methods",
	"summary": "",
	"abstract": "A set of managed application programming interfaces (APIs) are presented to allow management of a user's name and identity within a peer to peer networking environment. These managed APIs enable a user to successfully create and manage their peer names and identities within this environment. The creation of peer names for the purpose of resolving to a third party is also provided through the managed APIs of the invention. Importing and exporting of peer identities is also provided, as is the ability to delete a peer identity.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07949996",
	"publication_date": "2011-05-24",
	"application_number": "10692199",
	"application_date": "2003-10-23",
	"tags": null,
	"slug": "peertopeer-identity-management-managed-interfaces-and-methods",
	"match_type": "abstract"
},
{
	"name": "Programming APIS for an extensible avatar system",
	"summary": "",
	"abstract": "Disclosed is an application programming interface (API) that provides for an extensible avatar system. In one embodiment an API may allow video game applications to retrieve structures of data which represent an avatar. The game can then take those structures and incorporate the data into its own rendering system. In another embodiment an API may allow a video game application to render an avatar to a render target or texture wherein the video game system performs rendering and animation functions.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08446414",
	"publication_date": "2013-05-21",
	"application_number": "12271690",
	"application_date": "2008-11-14",
	"tags": null,
	"slug": "programming-apis-for-an-extensible-avatar-system",
	"match_type": "abstract"
},
{
	"name": "Proxy direct 3-D device and remote rendering",
	"summary": "",
	"abstract": "Systems, methods and computer readable media are disclosed for an overlaying requester to send graphics commands to a game connected to the overlaying requester via a dummy graphics application programming interface (API) object that the game will render over normal game-play graphics. In addition to allowing the overlaying requester to send graphics commands to the game in general, the dummy graphics API object can also limit the extent of the interaction between the overlaying requester and the computerized gaming system.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08120622",
	"publication_date": "2012-02-21",
	"application_number": "12014691",
	"application_date": "2008-01-15",
	"tags": null,
	"slug": "proxy-direct-3d-device-and-remote-rendering",
	"match_type": "abstract"
},
{
	"name": "Real-time synchronization of XML data between applications",
	"summary": "",
	"abstract": "One or more data stores are maintained separately from a primary presentation storage within a document for storing, relating and for allowing use of arbitrary data that is associated with a computer-generated document between multiple data consumers. The data store exposes application programming interfaces (APIs) to the various pieces of data in the data store for allowing different data consumers to access and operate on one or more of the data pieces in real time. Multiple data consumers may access and edit the same piece of data concurrently, and any conflicting changes to a given piece of data are resolved. Each data consumer may accept or reject the change as well as make additional side-effect changes as a result of the original change. In this way, the data may be synchronized in real time across the data consumers.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07953696",
	"publication_date": "2011-05-31",
	"application_number": "11332468",
	"application_date": "2006-01-13",
	"tags": null,
	"slug": "realtime-synchronization-of-xml-data-between-applications",
	"match_type": "abstract"
},
{
	"name": "Resource equalization for inter- and intra- data center operations",
	"summary": "",
	"abstract": "An exemplary component for managing requests for resources in a data center includes a service request module for receiving requests for resources from a plurality of services and a resource module to monitor resources in a data center and to match received requests to resources. Such a component optionally includes an application programming interface (API) that provides for sending information in response to an API call made by a service. Other methods, devices and systems are also disclosed.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08171115",
	"publication_date": "2012-05-01",
	"application_number": "12050783",
	"application_date": "2008-03-18",
	"tags": null,
	"slug": "resource-equalization-for-inter-and-intra-data-center-operations",
	"match_type": "abstract"
},
{
	"name": "Scalable programmable video recorder",
	"summary": "",
	"abstract": "A programmable video recorder (PVR) includes a writer application programming interface (API) and a reader API that operate essentially independently to enable the PVR to be networked to multiple reader applications. The writer API creates a backing store and a shared memory mapped file. The backing store stores streamed data in temporary files. The shared memory mapped file stores state information of the backing store files. The reader API receives requests from reader applications to access the stored streamed data. In response to the requests, the reader API permits the reader applications to access the shared memory mapped file to determine where the stored streamed data is located. Upon locating the stored data, the reader API permits the requesting reader applications to access the stored streamed data.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07743032",
	"publication_date": "2010-06-22",
	"application_number": "11868160",
	"application_date": "2007-10-05",
	"tags": null,
	"slug": "scalable-programmable-video-recorder",
	"match_type": "abstract"
},
{
	"name": "Service discovery and publication",
	"summary": "",
	"abstract": "A system and methods for service discovery and publication are disclosed. Application programs write requests for service discovery, publication, and subscription to a service discovery application programming interface. The service discovery application programming interface invokes one or more lower-level protocols to satisfy the discovery, publication and/or subscription request. Service information retrieved from lower-layer protocols is formatted into a consistent data model and returned to the client application. In addition, service information may be stored in a persistent data store managed by a discovery persistence service communicatively connected to the service discovery API.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716357",
	"publication_date": "2010-05-11",
	"application_number": "10693653",
	"application_date": "2003-10-24",
	"tags": null,
	"slug": "service-discovery-and-publication",
	"match_type": "abstract"
},
{
	"name": "System and method for proactive computer virus protection",
	"summary": "",
	"abstract": "A system, method, and computer readable medium for the proactive detection of malware in operating systems that receive application programming interface (API) calls is provided. A virtual operating environment for simulating the execution of programs and determining if the programs are malware is created. The virtual operating environment confines potential malware so that the systems of the host operating environment will not be adversely effected. During simulation, a behavior signature is generated based on the API calls issued by potential malware. The behavior signature is suitable for analysis to determine whether the simulated executable is malware.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07877802",
	"publication_date": "2011-01-25",
	"application_number": "12019479",
	"application_date": "2008-01-24",
	"tags": null,
	"slug": "system-and-method-for-proactive-computer-virus-protection",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for interfacing application programs with an item-based storage platform",
	"summary": "",
	"abstract": "Various embodiments of the present invention are directed to a storage platform comprising: a data store in which data stored therein is defined in terms of items, elements, and relationships, wherein an item is a unit of data storable in the data store and comprises one or more elements, an element is an instance of a type comprising one or more fields, and a relationship is a link between at least two items; a set of schemas that define different types of items, elements, and relationships; and an application programming interface comprising a class for each of the different items, elements, and relationships defined in the set of schemas. Data may also be stored in the data store in the form of an extension to an existing item type, and wherein the application programming interface comprises a class for each different item extension.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08131739",
	"publication_date": "2012-03-06",
	"application_number": "10646575",
	"application_date": "2003-08-21",
	"tags": null,
	"slug": "systems-and-methods-for-interfacing-application-programs-with-an-itembased-storage-platform",
	"match_type": "abstract"
},
{
	"name": "Touch sensitive and mechanical user input device",
	"summary": "",
	"abstract": "User interfaces or input devices are provided with both touch-sensitive (e.g., capacitive) and mechanical hardware input portions. Mechanical switches are overlaid with a touch sensitive pad, providing improved versatility of input. An application programming interface (API) enables different modes of input operation for the mechanical and touch sensitive input portions, whereby various combinations and/or permutations of touch sensitive input portions and/or mechanical input portions are enabled or disabled to provide optimal input characteristics for a set of tasks at hand. Visual or audio indicators may be utilized to reveal the mode of operation to the user. The touch sensitive pad may be a capacitive touchpad, a touch sensitive display screen, a conveyor belt or a push pad. Up to 9 mechanical switches may be placed underneath the touch sensitive input portions.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07880727",
	"publication_date": "2011-02-01",
	"application_number": "11399029",
	"application_date": "2006-04-05",
	"tags": null,
	"slug": "touch-sensitive-and-mechanical-user-input-device",
	"match_type": "abstract"
},
{
	"name": "Triggerless interactive television",
	"summary": "",
	"abstract": "Various technologies and techniques are disclosed that relate to providing interactive television by synchronizing content to live and/or recorded television shows. Content is synchronized without the use of in-band triggers. A broadcast stream is received, and search/action pairs are received from a transmission path, such as from the Internet or user. When the search criteria are found in the broadcast stream, the associated action is performed and the content is synchronized with the show. An application programming interface is used to facilitate synchronization, and includes a set search method, a search function template method, and a clear search method. The set search method initiates searching of the broadcast stream and registers one or more callback methods for performing the associated action when the match is found. The search function template serves as the template for registering the callback methods. The clear search method clears the system resources from the search.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08307403",
	"publication_date": "2012-11-06",
	"application_number": "11292868",
	"application_date": "2005-12-02",
	"tags": null,
	"slug": "triggerless-interactive-television",
	"match_type": "abstract"
},
{
	"name": "Unified mechanism for presenting and resolving grouped synchronization conflicts",
	"summary": "",
	"abstract": "Conflicts detected during synchronization of replicas are enumerated and resolved according to a specified policy, comprising conditions and actions or simply a specified action. Specified actions may be drawn from a set of standard actions and custom actions may also be composed. The conflicts are enumerated and resolved in logical groups. A logical group is a collection of one or more item envelopes, each comprising entities, such as items, links, and/or extensions. In an example configuration, both constraint-based conflicts, such as a name collision, and non-constraint-based conflicts are handled via the same application programming interface.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07805408",
	"publication_date": "2010-09-28",
	"application_number": "11450664",
	"application_date": "2006-06-09",
	"tags": null,
	"slug": "unified-mechanism-for-presenting-and-resolving-grouped-synchronization-conflicts",
	"match_type": "abstract"
},
{
	"name": "Unified storage for configuring multiple networking technologies",
	"summary": "",
	"abstract": "A network and connection provisioning framework for configuring and provisioning multiple aspects of network connectivity (e.g., multiple networks, media types, and/or connections). The framework may comprise a unified configuration interface that enables an administrator to configure multiple different types of network connectivity. A single configuration file comprising settings for multiple aspects of network connectivity may be generated based on preferences entered by a system administrator, or by exporting current settings from a particular computing device. Global configuration policies or other configuration settings that span multiple types of network connectivity may be also created and stored in one or more configuration files. Stand-alone media managers and/or plug-in modules may implement one or more standardized application programming interface functions so that they may interoperate with the network and connection provisioning framework. The standardized API may be used to ensure that configuration information is handled and stored in a standardized manner by different media managers and/or plug-in modules.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08615570",
	"publication_date": "2013-12-24",
	"application_number": "12276157",
	"application_date": "2008-11-21",
	"tags": null,
	"slug": "unified-storage-for-configuring-multiple-networking-technologies",
	"match_type": "abstract"
},
{
	"name": "Using a mobile phone to remotely control a computer via an overlay network",
	"summary": "",
	"abstract": "Systems and methods are described for using a mobile phone to remotely control a computing device. In one implementation, a communication channel between the mobile phone and the computing device uses an overlay network, such as an instant messaging (IM) service, to exchange communication data packets. An exemplary system includes a flexible layered architectureu2014which allows tailoring the system for remote control of various applications using various network configurations. Based on the overlay protocol used, a transport protocol layer can provide helpful application programming interfaces (APIs). On top of the transport protocol layer, a remote control protocol defines a framework for packet exchange of extensible commands, customizable for remote control of diverse applications. Use of paired-key encryption, IM accounts, and buddy lists ensure that communications between mobile phone and remote computer are secure.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07792924",
	"publication_date": "2010-09-07",
	"application_number": "11290797",
	"application_date": "2005-11-30",
	"tags": null,
	"slug": "using-a-mobile-phone-to-remotely-control-a-computer-via-an-overlay-network",
	"match_type": "abstract"
},
{
	"name": "Virtual magnifying glass system architecture",
	"summary": "",
	"abstract": "A display screen magnifier is controllable by a user to magnify selected portions of a desktop including windows open on the screen. A magnified image is presented within a moveable magnifier frame. The magnified image corresponds to screen content located within a magnification region underlying the magnifier frame, magnified to a set level of magnification. The magnifier is configured to remain on top of the display screen desktop, including open windows, while it is activated. It also passes events of a user input device to windows located beneath the magnifier, and dynamically updates the magnified image to reflect changes in underlying screen content. The display screen magnifier is configured to operate this way through a leveraging of resources made available by application programming interfaces (APIs) of an operating system, namely a windows style, and a second stage screen content compositing engine associated with the windows style.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07949955",
	"publication_date": "2011-05-24",
	"application_number": "11196510",
	"application_date": "2005-08-04",
	"tags": null,
	"slug": "virtual-magnifying-glass-system-architecture",
	"match_type": "abstract"
},
{
	"name": "Web data usage platform",
	"summary": "",
	"abstract": "An application programming interface (API) layer is implemented on a computing device. The API layer allows a local application(s) executing on the computing device to access web data in a data store layer, and further allows a remote application(s) that is executing on some other computing device to access the web data in the data store layer. Additionally, this web data can include web pages, some of which may include structured data and some of which may not include structured data. A web browser is permitted to access the web data store via the object model, and generate a user interface based at least in part on these web pages.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07917507",
	"publication_date": "2011-03-29",
	"application_number": "11705286",
	"application_date": "2007-02-12",
	"tags": null,
	"slug": "web-data-usage-platform",
	"match_type": "abstract"
},
{
	"name": "XNA relationship management",
	"summary": "",
	"abstract": "A data provider application programming interface (API) is configured for use with a game content editing application. An asset relationship management file, which is generated with the data provider API, includes information such as relationship references and annotations and is updated by the data provider API when a digital asset is edited. The asset relationship management file is then stored in a data store. An asset relationship graph is generated, based on the asset relationship management file in the data store. The asset relationship graph includes asset graph nodes that map dependency relationships between asset files. A graph API is also described. The graph API is configured for accessing the relationship graph through a server process to expose dependency relationships and annotations to a client process, such as an application. Thus, the effect of changes to one asset on other assets can readily be evaluated.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07836055",
	"publication_date": "2010-11-16",
	"application_number": "11343455",
	"application_date": "2006-01-31",
	"tags": null,
	"slug": "xna-relationship-management",
	"match_type": "abstract"
},
{
	"name": "Relevance-weighted navigation in information access, search and retrieval",
	"summary": "",
	"abstract": "In a method for information access, search, and retrieval over a data communication system generally, wherein a query is applied to a set of documents, a result set of the matching documents and query-dependent subsections of the matching documents are identified. The method comprises computing summary information on document scopes, values and associated weights across the result sets and weighting the values with a summary value metric which provides a measure of the probability of a value. In a search engine () capable of supporting and implementing the above method, the search engine comprises as per se known subsystems for performing search and retrieval in the form of one or more core search engines (), a content application programming interface (), a content analysis stage () and a client application programming interface () connected to the core search engine () via query analysis and result analysis stages (). In addition the search engine () for supporting the above method comprises a first module () for specifying summary value metrics (SVMs), second and third modules () for creating scopes and for assigning summary value metrics (SVMs) to the created scopes, and a fourth module () for indexing scopes, values and SVMs.",
	"url": null,
	"owner": "Microsoft International Holdings B.V.",
	"publication_number": "07966305",
	"publication_date": "2011-06-21",
	"application_number": "11979607",
	"application_date": "2007-11-06",
	"tags": null,
	"slug": "relevanceweighted-navigation-in-information-access-search-and-retrieval",
	"match_type": "abstract"
},
{
	"name": "Centralized polling service",
	"summary": "",
	"abstract": "A centralized polling system is set forth for providing constant time select call functionality to a plurality of polling tasks in an operating system kernel. In one aspect, the CPS registers for and thereby captures events of interest on a continual basis. Polling tasks are supplied with active events thereby eliminating the need to repetitively poll large numbers of inactive sockets. An exemplary embodiment of the CPS includes a system interface to the operating system kernel, a data structure for maintaining a profile for each of the polling tasks, and an application programming interface for registering the polling tasks, receiving the active sockets and corresponding read/write event types via the system interface, updating the profile within the data structure for each of the polling tasks, and returning the current read and write ready sockets to respective ones of the polling tasks.",
	"url": null,
	"owner": "Mitel Networks Corporation",
	"publication_number": "08006005",
	"publication_date": "2011-08-23",
	"application_number": "11903438",
	"application_date": "2007-09-21",
	"tags": null,
	"slug": "centralized-polling-service",
	"match_type": "abstract"
},
{
	"name": "Industrial control with integrated machine vision",
	"summary": "",
	"abstract": "System and method for performing industrial control. A vision engine operable to execute vision functions to control a vision element in response to received asynchronous commands is stored on a vision system. An application programming interface (API) that provides access to the vision engine is stored. The API includes multiple function blocks operable to be included in an industrial control application, and executable to send the asynchronous commands to the vision engine. The application is created, including inserting at least one function block of the API into the application. The application is executed on a programmable controller, including executing the function block to send a corresponding asynchronous command to the vision engine. The vision engine performs a vision function corresponding to the function block in response to the asynchronous command, and sends resultant data to the industrial control application, which stores the resultant data.",
	"url": null,
	"owner": "National Instruments Corporation",
	"publication_number": "08155769",
	"publication_date": "2012-04-10",
	"application_number": "12049772",
	"application_date": "2008-03-17",
	"tags": null,
	"slug": "industrial-control-with-integrated-machine-vision",
	"match_type": "abstract"
},
{
	"name": "Motion controller that supports standard and custom axes",
	"summary": "",
	"abstract": "System and method for developing a motion application. A motion manager component implementing a supervisory control function and at least one trajectory generation algorithm is stored on a motion controller. A first application programming interface (API) for interfacing the motion manager component to a user developed motion control application is displayed. A second API for interfacing the motion manager component to a user developed communication interface component is displayed. A user application executable for sequencing motion operations in the motion system is created using the first API is created in response to user input. A first communication interface component is created using the second API in response to user input, where the communication interface component is operable to interface with the motion manager component using the second API, and where the user developed communication interface component is executable to communicate with a motion element, e.g., a drive or simulation.",
	"url": null,
	"owner": "National Instruments Corporation",
	"publication_number": "08082515",
	"publication_date": "2011-12-20",
	"application_number": "11948421",
	"application_date": "2007-11-30",
	"tags": null,
	"slug": "motion-controller-that-supports-standard-and-custom-axes",
	"match_type": "abstract"
},
{
	"name": "Method and system for using geographic data for developing scenes for entertainment features",
	"summary": "",
	"abstract": "A system and method are disclosed for facilitating development of scenes for entertainment features, such as motion pictures or television shows, that depict or represent actual, real world (or imaginary) geographic areas. A source database contains data that represent geographic features in a region including roads in the region. The data in the source database includes attributes suitable for use for providing navigation-related functions. In addition to providing data from the source database for navigation-related functions, data from the source database are also provided for facilitating development of scenes for entertainment features that depict or represent actual, real world (or imaginary) geographic areas. An application programming interface, as well as other tools for handling geographic data, is provided for accessing and processing of the geographic data.",
	"url": null,
	"owner": "Navteq North America, LLC",
	"publication_number": "07921136",
	"publication_date": "2011-04-05",
	"application_number": "10941802",
	"application_date": "2004-09-15",
	"tags": null,
	"slug": "method-and-system-for-using-geographic-data-for-developing-scenes-for-entertainment-features",
	"match_type": "abstract"
},
{
	"name": "Method and system for using geographic data in computer game development",
	"summary": "",
	"abstract": "A system and method are disclosed for facilitating development of computer games that depict or represent actual, real world geographic areas as part of the play scenarios of the games. A source database contains data that represent geographic features in a region including roads in the region. The data in the source database includes attributes suitable for use for providing navigation-related functions. In addition to providing data from the source database for navigation-related functions, data from the source database are also provided for computer game development. An application programming interface, as well as other tools for handling geographic data, is provided for accessing and processing of the geographic data.",
	"url": null,
	"owner": "NAVTEQ North America, LLC",
	"publication_number": "07970749",
	"publication_date": "2011-06-28",
	"application_number": "10798459",
	"application_date": "2004-03-11",
	"tags": null,
	"slug": "method-and-system-for-using-geographic-data-in-computer-game-development",
	"match_type": "abstract"
},
{
	"name": "Presenting differences in a file system",
	"summary": "",
	"abstract": "An embodiment of the invention provides an apparatus and method for presenting differences in a file system. In an embodiment, an application programming interface receives a request from a host, where the request is for a listing of changes in the file system within a time interval. A comparison unit determines each metadata container that has changed in the file system within the time interval. The application programming interface buffers at least one identifier that corresponds to a metadata container that has changed in the file system within the time interval. The application programming interface packages and transmits the at least one identifier to the host. The at least one identifier is readable on the host.",
	"url": null,
	"owner": "NetApp, Inc.",
	"publication_number": "07904466",
	"publication_date": "2011-03-08",
	"application_number": "11963665",
	"application_date": "2007-12-21",
	"tags": null,
	"slug": "presenting-differences-in-a-file-system",
	"match_type": "abstract"
},
{
	"name": "Server monitoring framework",
	"summary": "",
	"abstract": "A software framework configured to execute in a computer system and adapted to monitor statistics associated with one or more servers coupled to the computer system is disclosed. A data structure is configured to store statistics associated with the one or more servers coupled to the computer system. A server-monitoring thread is configured to update at least some of the statistics stored in the data structure, the server-monitoring thread to execute on a processor of the computer system. An application programming interface (API) responsive to a plurality of software modules executes in the computer system, the API is configured to process requests from the plurality of software modules for (i) adding or removing servers in the data structure or (ii) accessing statistics from the data structure. The computer system may be a network cache.",
	"url": null,
	"owner": "NetApp, Inc.",
	"publication_number": "08028056",
	"publication_date": "2011-09-27",
	"application_number": "12633296",
	"application_date": "2009-12-08",
	"tags": null,
	"slug": "server-monitoring-framework",
	"match_type": "abstract"
},
{
	"name": "Multimedia application interface",
	"summary": "",
	"abstract": "An improved application programming interface (API) as described can control media resources in numerous Internet multimedia applications. The API may be independent of the application itself and the media resources underneath. The API may be referred to as a multimedia subsystem (MSS) interface.",
	"url": null,
	"owner": "Nokia Corporation",
	"publication_number": "07917639",
	"publication_date": "2011-03-29",
	"application_number": "10516284",
	"application_date": "2002-05-31",
	"tags": null,
	"slug": "multimedia-application-interface",
	"match_type": "abstract"
},
{
	"name": "Shared landmark user interfaces",
	"summary": "",
	"abstract": "A method, system, and computer program product provide access to user information, such as landmarks, without applications having to implement the needed user interface functionality on their own. In one embodiment, common landmark user interface components are offered with application programming interfaces (APIs) for controlling the user interfaces. By utilizing this kind of common user interface, all applications can utilize landmarks.",
	"url": null,
	"owner": "Nokia Corporation",
	"publication_number": "07814502",
	"publication_date": "2010-10-12",
	"application_number": "10866943",
	"application_date": "2004-06-14",
	"tags": null,
	"slug": "shared-landmark-user-interfaces",
	"match_type": "abstract"
},
{
	"name": "Extensible domain name service",
	"summary": "",
	"abstract": "In various embodiments the extensible attribute within the extended DNS is accessed through an application programming interface (API). This API is configured to facilitate input and output of the extended DNS data and to allow an external application to identify and interchange those attribute data that the external application is configured to process.",
	"url": null,
	"owner": "Nominum, Inc.",
	"publication_number": "07761570",
	"publication_date": "2010-07-20",
	"application_number": "10870282",
	"application_date": "2004-06-16",
	"tags": null,
	"slug": "extensible-domain-name-service",
	"match_type": "abstract"
},
{
	"name": "Integer-based functionality in a graphics shading language",
	"summary": "",
	"abstract": "One embodiment of the present invention sets forth a technique for improving the flexibility and programmability of a graphics pipeline by adding application programming interface (API) extensions to the OpenGL Shading Language (GLSL) that provide native support for integer data types and operations. The integer API extensions span from the API to the hardware execution units within a graphics processing unit (GPU), thereby providing native integer support throughout the graphics pipeline.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08044951",
	"publication_date": "2011-10-25",
	"application_number": "11565543",
	"application_date": "2006-11-30",
	"tags": null,
	"slug": "integerbased-functionality-in-a-graphics-shading-language",
	"match_type": "abstract"
},
{
	"name": "Method and system for enabling a device to support enhanced features",
	"summary": "",
	"abstract": "A method and system for enabling an auxiliary system, such as a WINDOWSu00ae SIDESHOWu2122 device, to support enhanced features is provided. Specifically, one embodiment of the present invention sets forth a method, which includes the steps of emulating a physical communication channel to establish a virtual communication channel, encapsulating data associated with a first function defined by a first Application Programming Interface (API) and utilized to implement an enhanced feature, and sending the encapsulated data through the virtual communication channel for an embedded operation system (OS) to manage hardware resources of the auxiliary system to perform the enhanced feature.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08069449",
	"publication_date": "2011-11-29",
	"application_number": "11965000",
	"application_date": "2007-12-27",
	"tags": null,
	"slug": "method-and-system-for-enabling-a-device-to-support-enhanced-features",
	"match_type": "abstract"
},
{
	"name": "Methods and systems for in-place shader debugging and performance tuning",
	"summary": "",
	"abstract": "One embodiment of the present invention sets forth a system that allows a software developer to perform shader debugging and performance tuning. The system includes an interception layer between the software application and the application programming interface (API). The interception layer is configured to intercept and store source code versions of the original shaders included in the application. For each object in the frame, the interception layer makes shader source code available to the developer, so that the developer can modify the source code as needed, re-compile only the modified shader source code, and run the application. Consequently, shader debugging and performance tuning may be carried out in a manner that is more efficient and effective relative to prior art approaches.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08276129",
	"publication_date": "2012-09-25",
	"application_number": "11838169",
	"application_date": "2007-08-13",
	"tags": null,
	"slug": "methods-and-systems-for-inplace-shader-debugging-and-performance-tuning",
	"match_type": "abstract"
},
{
	"name": "System and method for detecting errors in audio data",
	"summary": "",
	"abstract": "An application programming interface (API) executed by a first processing unit combines audio data samples with error code values generated for those samples. The API then causes a data stream to be opened having sufficient bandwidth to accommodate combined samples made up of audio data samples and corresponding error code values. The combined samples are then transmitted to a decoder and validation unit within a second processing unit that receives the combined data, strips the error code values and validates the audio data based on the error code values. When the error code values indicate that the audio data has been compromised, the second processing unit terminates the output of sound derived from the audio data.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08938661",
	"publication_date": "2015-01-20",
	"application_number": "13564610",
	"application_date": "2012-08-01",
	"tags": null,
	"slug": "system-and-method-for-detecting-errors-in-audio-data",
	"match_type": "abstract"
},
{
	"name": "Method and system for running multiple virtual machines in a single process",
	"summary": "",
	"abstract": "A method and system for running a Java ME application on a computer system are described. The Java ME application is a software program designed for execution on a resource-constrained platform. A first virtual machine is launched in a process, the first virtual machine being is caused to run an application emulator. A second virtual machine is launched in the process, the second virtual machine being caused to run the Java ME application. The application emulator interfaces with application programming interfaces of the second virtual machine to interface with inputs and outputs of the Java ME application and redirect the inputs and outputs to local devices controlled by the application emulator.",
	"url": null,
	"owner": "Oracle America, Inc.",
	"publication_number": "07730492",
	"publication_date": "2010-06-01",
	"application_number": "11744044",
	"application_date": "2007-05-03",
	"tags": null,
	"slug": "method-and-system-for-running-multiple-virtual-machines-in-a-single-process",
	"match_type": "abstract"
},
{
	"name": "System and method for programmatic management of distributed computing resources",
	"summary": "",
	"abstract": "Systems and methods for providing a development and deployment platform for Software as a Service (SaaS) providers are disclosed. The platform may provide an application programming interface (API) through which customers may configure virtualized grids of language-level virtual machines (VMs), networks, and storage resources. A grid may be horizontally scalable and programmatically configurable by a customer and/or customer code. The platform may allow dynamic scaling of resources (up and down) to match changing demands, by allowing customers and/or customer code to programmatically alter their own system level structure at runtime, through the API. The grid may be accessed by both on-grid and off-grid processes, through internal and external connectivity resources provided by the platform. The platform may provide common utilities for end-user services, deployment operations, and development tasks (e.g., debugging), and may include frameworks and macro-components (e.g. web servers). The platform may host long-running Internet-based services and/or one-shot computational services.",
	"url": null,
	"owner": "Oracle America, Inc.",
	"publication_number": "07886021",
	"publication_date": "2011-02-08",
	"application_number": "12110880",
	"application_date": "2008-04-28",
	"tags": null,
	"slug": "system-and-method-for-programmatic-management-of-distributed-computing-resources",
	"match_type": "abstract"
},
{
	"name": "Application interface including dynamic transform definitions",
	"summary": "",
	"abstract": "An application programming interface configured to transform data responsive to a transform process definition. The transform process definition is interpreted concurrently with the transformation process. This interpretation dynamically determines navigation within, and processing of, the data to be transformed. Under control of the transform process definition, a transform engine is configured to transform input data using recursive calls to a transformation process. The recursive approach is responsive to data structures within the transform process definition and simplifies operations such as parallel processing, load-balancing of transformation tasks, nesting, un-nesting, filtering, and the like.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07970779",
	"publication_date": "2011-06-28",
	"application_number": "10661167",
	"application_date": "2003-09-12",
	"tags": null,
	"slug": "application-interface-including-dynamic-transform-definitions",
	"match_type": "abstract"
},
{
	"name": "Lightweight highly available infrastructure to trace program execution",
	"summary": "",
	"abstract": "A portable tracing utility provides trace configuration, trace instrumentation and trace management functionality for single or multithreaded programs. Through various application programming interfaces (u201cAPIsu201d) of the tracing utility, a client may control tracing behavior to setup in-memory data structures for storing trace records that record the program's history of execution or to alter the granularity of execution history being traced. The trace behavior can be modified during the life of a program by using the APIs, either dynamically when the program assumes certain states, or through remote procedure calls issued by, for example, an external interface. Programs are instrumented with these APIs to record the history of execution, which during execution of the program is stored in circular in-memory buffers.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07770154",
	"publication_date": "2010-08-03",
	"application_number": "11173675",
	"application_date": "2005-07-01",
	"tags": null,
	"slug": "lightweight-highly-available-infrastructure-to-trace-program-execution",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for making inter-process procedure calls through shared memory",
	"summary": "",
	"abstract": "One embodiment of the present invention provides a system that facilitates making an inter-process procedure call through a shared memory that is shared between a client process and a server process, wherein the client makes the inter-process procedure call as if the client is making a local procedure call, but the procedure call actually executes on the server. The system operates by providing an Application Programming Interface (API) to allow the client to make an inter-process procedure call. The system then allocates a section of the shared memory for the data structure parameters of the inter-process procedure call.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07779417",
	"publication_date": "2010-08-17",
	"application_number": "11259240",
	"application_date": "2005-10-25",
	"tags": null,
	"slug": "method-and-apparatus-for-making-interprocess-procedure-calls-through-shared-memory",
	"match_type": "abstract"
},
{
	"name": "Object relational mapping layer",
	"summary": "",
	"abstract": "An integration server system for mapping data objects on a database schema offers a strongly-typed model API, complex constraint management, and association balancing. The integration server system also has improved performance through optimized handling of ordered associations of data object and of string-valued attributes. The integration server system comprises a database schema configured to store a set of data object instances. A metadata model represents a configuration of the set of data object instances in the database schema. A model application programming interface provides a client application with access to the set of data object instances, and a metadata application programming interface provides a client application with access to the set of data object instances via the metadata model.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "08145685",
	"publication_date": "2012-03-27",
	"application_number": "12192898",
	"application_date": "2008-08-15",
	"tags": null,
	"slug": "object-relational-mapping-layer",
	"match_type": "abstract"
},
{
	"name": "System and method for providing SPI extensions for content management system",
	"summary": "",
	"abstract": "A virtual content repository (VCR) is a logical representation of one or more individual content repositories. The VCR uses a common Application Programming Interface (API) and a Service Provider Interface (SPI) to provide a single access point to one or more individual content repositories. The API describes how applications can interface with program logic and functionality provided by the content management system and the SPI describes how a content repository can be integrated into the VCR. A SPI adapter can be interposed between the at least one non-compliant repository in the VCR and the SPI. The SPI adapter can map a request to the non-compliant repository and provide content received from the non-compliant repository to originators of the requests.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "08316025",
	"publication_date": "2012-11-20",
	"application_number": "13083332",
	"application_date": "2011-04-08",
	"tags": null,
	"slug": "system-and-method-for-providing-spi-extensions-for-content-management-system",
	"match_type": "abstract"
},
{
	"name": "System and method for providing SPI extensions for content management system",
	"summary": "",
	"abstract": "In accordance with embodiments, there are provided mechanisms and methods for providing extensions to a Service Provider Interface (SPI) in a content management system. These mechanisms and methods for providing extensions to a Service Provider Interface (SPI) in a content management system can enable embodiments to integrate one or more of a plurality of content repositories into a virtual content repository (VCR) by mapping requests to access content received via a common Application Programming Interface (API) to at least one JSR-170 compliant repository and at least one SPI compliant repository. The ability of embodiments to provide so integrate disparate content repositories can enable one or more of navigation, CRUD operations (create, read, update, delete), versioning, workflows, and searching operations to operate on a plurality of repositories as though the plurality of repositories were one repository.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07953734",
	"publication_date": "2011-05-31",
	"application_number": "11435163",
	"application_date": "2006-05-16",
	"tags": null,
	"slug": "system-and-method-for-providing-spi-extensions-for-content-management-system",
	"match_type": "abstract"
},
{
	"name": "System and method for utilizing a common framework for portal administration tools",
	"summary": "",
	"abstract": "The present invention relates to systems, methods, and computer readable media for generating custom administrative tools. An administrative framework is provided that abstracts the implementation of certain administrative functions. A management Application Programming Interface (API) receives calls submitted in a preconfigured format from interface components generated by a developer or third party. The management API processes the calls and performs the functions associated with the calls. Multiple implementations are provided, through which an interface component can access the management API.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "08065415",
	"publication_date": "2011-11-22",
	"application_number": "10962090",
	"application_date": "2004-10-08",
	"tags": null,
	"slug": "system-and-method-for-utilizing-a-common-framework-for-portal-administration-tools",
	"match_type": "abstract"
},
{
	"name": "Server-side wireless communications link support for mobile handheld devices",
	"summary": "",
	"abstract": "A server-based method for implementing a communications link. The method includes receiving via a communications network a request for a communications link from a client communications component executing on a handheld device and establishing a wireless communications link with the handheld device by using a server communications interface executing on the server. An optimized protocol is automatically implemented between the client communications component and the server based on the wireless communications link type and the handheld device type, wherein the optimized protocol is implemented while maintaining a standardized application programming interface for the server communications interface, and wherein the communications link is established via the communications component functioning with a device API component to configure hardware of the handheld device.",
	"url": null,
	"owner": "Phunware, Inc.",
	"publication_number": "08009619",
	"publication_date": "2011-08-30",
	"application_number": "11977319",
	"application_date": "2007-10-23",
	"tags": null,
	"slug": "serverside-wireless-communications-link-support-for-mobile-handheld-devices",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing remote access to the facilities of a server computer",
	"summary": "",
	"abstract": "A method and system for providing remote access to the facilities of a server computer are provided. A site integration application programming interface at a co-branded Web site. The site integration application programming interface exposes a number of servlets that may be executed in response to requests received from a business partner Web site over a secure communications link. The servlets provide functionality for accessing the user registration and deletion facilities of the co-branded Web site. Moreover, the servlets also provide access to other administrative facilities provided at the co-branded Web site. The servlets also provide functionality for authorizing a user to access the co-branded we site. This servlet may be executed in conjunction with the login facilities of the business partner web site to permit concurrent login at both sites.",
	"url": null,
	"owner": "Punch Networks Corporation",
	"publication_number": "07730089",
	"publication_date": "2010-06-01",
	"application_number": "09927899",
	"application_date": "2001-08-10",
	"tags": null,
	"slug": "method-and-system-for-providing-remote-access-to-the-facilities-of-a-server-computer",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing transparent access to hardware graphic layers",
	"summary": "",
	"abstract": "The present invention relates generally to computer graphics, and more specifically to methods of, and systems for, configuring, controlling and accessing multiple hardware graphics layers that are used to compose a single video display. One aspect of the invention is broadly defined as follows: in a computer environment including a software application and an operating system running on a computer, the computer including a graphics card and a video display, the graphics card being operable to render images to the video display, the improvement comprising: the operating system including a universal application programming interface (API) which supports hardware layers on graphics cards; the operating system being operable to: receive draw events via the universal API; determine what hardware layers are available on the graphics card, and what their parameters are; and respond to draw requests from the software application by rendering the draw requests selectively to any of the available hardware layers on the graphics card; whereby the computer environment allows software applications to exploit available hardware layers on the graphics card.",
	"url": null,
	"owner": "QNX Software Systems GmbH & Co. KG",
	"publication_number": "07830372",
	"publication_date": "2010-11-09",
	"application_number": "10928698",
	"application_date": "2004-08-30",
	"tags": null,
	"slug": "method-and-system-for-providing-transparent-access-to-hardware-graphic-layers",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing transparent access to hardware graphic layers",
	"summary": "",
	"abstract": "The present invention relates generally to computer graphics, and more specifically to methods of, and systems for, configuring, controlling and accessing multiple hardware graphics layers that are used to compose a single video display. One aspect of the invention is broadly defined as follows: in a computer environment including a software application and an operating system running on a computer, the computer including a graphics card and a video display, the graphics card being operable to render images to the video display, the improvement comprising: the operating system including a universal application programming interface (API) which supports hardware layers on graphics cards; the operating system being operable to: receive draw events via the universal API; determine what hardware layers are available on the graphics card, and what their parameters are; and respond to draw requests from the software application by rendering the draw requests selectively to any of the available hardware layers on the graphics card; whereby the computer environment allows software applications to exploit available hardware layers on the graphics card.",
	"url": null,
	"owner": "QNX Software Systems Limited",
	"publication_number": "08648852",
	"publication_date": "2014-02-11",
	"application_number": "13858506",
	"application_date": "2013-04-08",
	"tags": null,
	"slug": "method-and-system-for-providing-transparent-access-to-hardware-graphic-layers",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing transparent access to hardware graphic layers",
	"summary": "",
	"abstract": "The present invention relates generally to computer graphics, and more specifically to methods of, and systems for, configuring, controlling and accessing multiple hardware graphics layers that are used to compose a single video display. One aspect of the invention is broadly defined as follows: in a computer environment including a software application and an operating system running on a computer, the computer including a graphics card and a video display, the graphics card being operable to render images to the video display, the improvement comprising: the operating system including a universal application programming interface (API) which supports hardware layers on graphics cards; the operating system being operable to: receive draw events via the universal API; determine what hardware layers are available on the graphics card, and what their parameters are; and respond to draw requests from the software application by rendering the draw requests selectively to any of the available hardware layers on the graphics card; whereby the computer environment allows software applications to exploit available hardware layers on the graphics card.",
	"url": null,
	"owner": "QNX Software Systems Limited",
	"publication_number": "08098246",
	"publication_date": "2012-01-17",
	"application_number": "12940162",
	"application_date": "2010-11-05",
	"tags": null,
	"slug": "method-and-system-for-providing-transparent-access-to-hardware-graphic-layers",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for supporting broadcast/multicast IP packets through a simplified sockets interface",
	"summary": "",
	"abstract": "A method for configuring an IP address to receive broadcast or multicast data flow which modifies the bind( ) Application Programming Interface (API) to survey available local interfaces to determine their ability to be configured to receive data from a particular IP address, configure a interface to receive the IP address if it is so configurable, bind the IP address to that interface. The modified bind*( ) API may interact with one or more interfaces to see if each interface is capable of being configured to the IP address. Alternatively, the modified bind*( ) API determines the configurability of interfaces by consulting the access control list. Policy based routing rules may be implemented so that the modified bind*( ) operation configures the highest priority interface based upon policy parameters.",
	"url": null,
	"owner": "QUALCOMM Incorporated",
	"publication_number": "08180899",
	"publication_date": "2012-05-15",
	"application_number": "11835001",
	"application_date": "2007-08-07",
	"tags": null,
	"slug": "apparatus-and-method-for-supporting-broadcastmulticast-ip-packets-through-a-simplified-sockets-interface",
	"match_type": "abstract"
},
{
	"name": "Providing transparent CDMA short message service using non-CDMA mobile devices, smart cards and networks",
	"summary": "",
	"abstract": "Methods and systems for sending, receiving, storing, and reading CDMA type SMS messages on wireless non-CDMA or multimode mobile devices include embedding a CDMA SMS message in a non-CDMA SMS host message. Such a host message may be created, transmitted, received, or otherwise processed by a mobile device, such as one operating in a GSM or UMTS mode. Similarly a CDMA SMS message may be stored in a SIM/USIM module using similar techniques. An embodiment provides a software application programming interface (API) which transparently processes SMS messages regardless of whether they are CDMA or non-CDMA and regardless of the operating mode of the mobile device.",
	"url": null,
	"owner": "QUALCOMM Incorporated",
	"publication_number": "08249629",
	"publication_date": "2012-08-21",
	"application_number": "11963990",
	"application_date": "2007-12-24",
	"tags": null,
	"slug": "providing-transparent-cdma-short-message-service-using-noncdma-mobile-devices-smart-cards-and-networks",
	"match_type": "abstract"
},
{
	"name": "Wireless communication device having dynamically escalated media transmission handling",
	"summary": "",
	"abstract": "A wireless communication device that dynamically escalates media transmission handling on the resident computer platform operating system through passing priority data bundles that include media directly from an application programming interface to the wireless communication interface. The application programming interface generates an outgoing priority data bundle including media, and a media handler directs the outgoing priority data bundle directly to the wireless communication interface for transmission without handling of the outgoing priority data bundle by other software layers of the operating system. The same priority handling can be done with incoming data bundles received at the wireless communication interface and being sent to an application programming interface.",
	"url": null,
	"owner": "Qualcomm Incorporated",
	"publication_number": "08023982",
	"publication_date": "2011-09-20",
	"application_number": "12119049",
	"application_date": "2008-05-12",
	"tags": null,
	"slug": "wireless-communication-device-having-dynamically-escalated-media-transmission-handling",
	"match_type": "abstract"
},
{
	"name": "Backup systems and methods for a virtual computing environment",
	"summary": "",
	"abstract": "Improved backup and storage operations are disclosed for virtual computing environments using a backup proxy server to perform storage operations on one or more virtual machine disks. The proxy server can include a module that intercepts application programming interface (API) calls, for writing backup data to a first location, prior to the data arriving on the proxy disk. During the intercept process, the data can be compressed in memory pages of the proxy server and redirected to an alternative backup disk location. The proxy server can also include a differential engine that identifies changes to the virtual machine disk at the block level since the last full backup. The differential engine can advantageously leverage memory pages of the proxy server to compare differences between signatures of blocks of the last full backup with signatures of new blocks. Subsequently, only blocks with non-matching signatures are processed for backup.",
	"url": null,
	"owner": "Quest Software, Inc.",
	"publication_number": "08060476",
	"publication_date": "2011-11-15",
	"application_number": "12502052",
	"application_date": "2009-07-13",
	"tags": null,
	"slug": "backup-systems-and-methods-for-a-virtual-computing-environment",
	"match_type": "abstract"
},
{
	"name": "Virus detection in mobile devices having insufficient resources to execute virus detection software",
	"summary": "",
	"abstract": "A virus scanning system which scans a mobile device/mobile device for files containing viruses even if the files are not executable on the mobile device. Corrective actions such as removing the files can be performed once the viruses are detected. As a result, viruses which are not executable (as being designed for other mobile device types) can also be detected and removed from mobile devices. According to another aspect, a common interface is provided when a virus scanning program requests data from mobile devices, and the computer is provided with different remote application programming interfaces suited to retrieve the specified data from the corresponding mobile devices. As a result, the computer can be extended to integrate scanning of new device types easily. According to one more aspect, a scanning program retrieves only data portions required for continuing the scan operation. According to yet another aspect, the program modules and virus definitions for scanning are received from a server on a network.",
	"url": null,
	"owner": "Quick Heal Technologies Private Limited",
	"publication_number": "07945955",
	"publication_date": "2011-05-17",
	"application_number": "11853071",
	"application_date": "2007-09-11",
	"tags": null,
	"slug": "virus-detection-in-mobile-devices-having-insufficient-resources-to-execute-virus-detection-software",
	"match_type": "abstract"
},
{
	"name": "Information viewing stem",
	"summary": "",
	"abstract": "According to one embodiment, an information viewing system includes an ontology viewing engine coupled to a client and a knowledge store that stores records organized according to a domain ontology. The ontology viewing engine receives requests for records from the client, filters the domain ontology according to a display ontology, generates a graphical user interface (GUI) according to the display ontology including the requested records, and transmits the GUI to the client through an application programming interface of the GUI.",
	"url": null,
	"owner": "Raytheon Company",
	"publication_number": "08219540",
	"publication_date": "2012-07-10",
	"application_number": "12712852",
	"application_date": "2010-02-25",
	"tags": null,
	"slug": "information-viewing-stem",
	"match_type": "abstract"
},
{
	"name": "Application reporting library",
	"summary": "",
	"abstract": "An apparatus and a method for detecting and reporting malfunctions in computer programs is described. A reporting library of an Application Programming Interface (API) is configured to direct a report of software malfunction to a specified server. The API is implemented in an application to be executed on a computer system. The application implementing the API is to report software malfunction of the application to the specified server.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08245082",
	"publication_date": "2012-08-14",
	"application_number": "12713009",
	"application_date": "2010-02-25",
	"tags": null,
	"slug": "application-reporting-library",
	"match_type": "abstract"
},
{
	"name": "Combined join and state transfer",
	"summary": "",
	"abstract": "A method and apparatus for processing messages is described. In one embodiment, an application programming interface provides for a flush protocol to force members of a group to send all of their pending messages prior to a predetermined event. A client sends a request to a coordinator of the group to join the group and to transfer a state of the group to the client. The application programming interface performs a single flush operation on the group in response to the request.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08312084",
	"publication_date": "2012-11-13",
	"application_number": "12074089",
	"application_date": "2008-02-28",
	"tags": null,
	"slug": "combined-join-and-state-transfer",
	"match_type": "abstract"
},
{
	"name": "Concurrent stack",
	"summary": "",
	"abstract": "A method and apparatus for processing message is described. In one embodiment, an application programming interface is configured for receiving and sending messages. A building block layer is coupled to the application programming interface. A channel layer is coupled to the building block layer. A transport protocol stack is coupled to the channel layer for implementing properties specified by the channel layer. The transport protocol stack has a concurrent stack consisting of an out of band thread pool and a regular thread pool. The transport protocol layer is to process messages from each sender in parallel with the corresponding channel for each sender.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "07921227",
	"publication_date": "2011-04-05",
	"application_number": "11809225",
	"application_date": "2007-05-30",
	"tags": null,
	"slug": "concurrent-stack",
	"match_type": "abstract"
},
{
	"name": "Methods for determining battery statistics using a system-wide daemon",
	"summary": "",
	"abstract": "Techniques for determining battery statistics using a system-wide daemon are described herein. According to one embodiment, a power management daemon is configured to collect operating status data of a battery of a data processing system by accessing at least one of firmware and hardware coupled to the battery. The power management daemon is a single system-wide component within the data processing system to provide the operating status data of the battery to multiple clients. The power management daemon is also configured to compute battery statistics based on the collected operating status data of the battery. In response to a query received from one of the clients via an application programming interface (API), the power management daemon is configured to return the battery statistics to the client to enable the client to determine remaining time of the battery until being recharged. Other methods and apparatuses are also described.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08375236",
	"publication_date": "2013-02-12",
	"application_number": "12535139",
	"application_date": "2009-08-04",
	"tags": null,
	"slug": "methods-for-determining-battery-statistics-using-a-systemwide-daemon",
	"match_type": "abstract"
},
{
	"name": "Methods for managing process activity data using a system-wide daemon",
	"summary": "",
	"abstract": "Techniques for managing process activity statistics using a system-wide daemon are described herein. A power management daemon retrieves process activity status data from a system monitoring file stored within a data processing system, in response to a request received from a session client via an application programming interface (API). The power management daemon is a single system-wide component within the data processing system to provide the process activity status data to a plurality of session clients. The retrieved process activity status data is returned to the client via the API, where the system monitoring file requires a predetermined accessing privilege for accessing. Thus, through the power management daemon, the session client does not have to satisfy the predetermined accessing privilege in order to access the process activity status data stored in the system monitoring file.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08307230",
	"publication_date": "2012-11-06",
	"application_number": "12551158",
	"application_date": "2009-08-31",
	"tags": null,
	"slug": "methods-for-managing-process-activity-data-using-a-systemwide-daemon",
	"match_type": "abstract"
},
{
	"name": "Multiplex transport",
	"summary": "",
	"abstract": "A remoting client and a remoting server are described. In one embodiment, the remoting client has a client remote access application comprising an application programming interface (API), and a client invoker coupled to the client remote access application, the socket invoker comprising a multiplex invoker. The multiplex invoker is to form a socket on the remoting client, to bind the socket to a port of the remoting client, to couple the socket to a socket of a remoting server, to form a plurality of virtual sockets on the remoting client, and to associate the plurality of virtual sockets with the socket of the remoting client. The plurality of virtual sockets share the socket and the port of the remoting client.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08260934",
	"publication_date": "2012-09-04",
	"application_number": "11897563",
	"application_date": "2007-08-31",
	"tags": null,
	"slug": "multiplex-transport",
	"match_type": "abstract"
},
{
	"name": "Out of band messages",
	"summary": "",
	"abstract": "A method and apparatus for processing message is described. In one embodiment, an application programming interface is configured for receiving and sending messages. A building block layer is coupled to the application programming interface. A channel layer is coupled to the building block layer. A transport protocol stack is coupled to the channel layer for implementing properties specified by the channel layer. The transport protocol stack has a concurrent stack consisting of an out of band thread pool and a regular thread pool. The regular thread pool forms one thread for every messages from a sender. The out of band thread pool to form one thread for messages marked as out of band from the sender. Messages processed with the thread from the out of band thread pool are processed before messages processed with the regular thread pool.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "07733863",
	"publication_date": "2010-06-08",
	"application_number": "11809076",
	"application_date": "2007-05-30",
	"tags": null,
	"slug": "out-of-band-messages",
	"match_type": "abstract"
},
{
	"name": "Method for distributing and executing service logic",
	"summary": "",
	"abstract": "A method of distributing and executing service logic across private and public networks for the generation and provision of telecommunication services is disclosed. The functionality and capabilities associated with both Intelligent Network (IN) and non-IN compliant elements of a public telecommunications system are abstracted using a set of control and informational parameters and variables which are associated with a given network element or network element category. A service creation and execution application programming interface provides access to a service creation and execution environment which is distributed in public network gateways, private network gateways, and in compatible software platforms. The distributed service creation and execution environment enable the generation, provisioning, and execution of applications across private and public telecommunication networks in order to provide novel telecommunication services via the serial or concurrent invocation of one or more distributed applications.",
	"url": null,
	"owner": "Redknee Inc.",
	"publication_number": "07881286",
	"publication_date": "2011-02-01",
	"application_number": "11617047",
	"application_date": "2006-12-28",
	"tags": null,
	"slug": "method-for-distributing-and-executing-service-logic",
	"match_type": "abstract"
},
{
	"name": "Method and system for coordinating client and host security modules",
	"summary": "",
	"abstract": "A system and methods for coordinating the operation of a client security module and a host security module on a mobile electronic device. The modules communicate with each other through a platform abstraction layer using application programming interfaces to coordinate their activities. In particular, the client security module instructs the host security module when to lock and unlock the device, and the host security module alerts the client security module to attempts by the user to lock or unlock the device.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07996908",
	"publication_date": "2011-08-09",
	"application_number": "10984822",
	"application_date": "2004-11-10",
	"tags": null,
	"slug": "method-and-system-for-coordinating-client-and-host-security-modules",
	"match_type": "abstract"
},
{
	"name": "Method and system for managing delayed user authentication",
	"summary": "",
	"abstract": "A system and methods for coordinating the operation of a client security module and a host security module on a mobile electronic device. The modules communicate with each other through a platform abstraction layer using application programming interfaces to coordinate their activities. In particular, on start-up of the device, the host security module obtains user authorization input from a user and passes the input to a client operating system for validation. Once validated, the host security module unlocks the host-side of the device. At the same time, the client operating system sends a notice or request to the client-side virtual machine requesting that the client-side be unlocked. Once the virtual machine is initialized and available it launches the client security module and unlocks the client-side. During the delay while the virtual machine loads, the user is given access only to the host applications.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "08250371",
	"publication_date": "2012-08-21",
	"application_number": "12843924",
	"application_date": "2010-07-27",
	"tags": null,
	"slug": "method-and-system-for-managing-delayed-user-authentication",
	"match_type": "abstract"
},
{
	"name": "Method of processing notifications provided by a routine, and associated handheld electronic device",
	"summary": "",
	"abstract": "An improved handheld electronic device includes an Application Programming Interface (API) that generates various notifications in certain circumstances. Certain predetermined criteria that have been established for a particular routine on the handheld electronic device are employed to ignore certain of the notifications in appropriate circumstances in order to conserve computing and power resources.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "08146101",
	"publication_date": "2012-03-27",
	"application_number": "11414710",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "method-of-processing-notifications-provided-by-a-routine-and-associated-handheld-electronic-device",
	"match_type": "abstract"
},
{
	"name": "Method of reflecting on another device a change to a browser cache on a handheld electronic device, and associated device",
	"summary": "",
	"abstract": "An improved handheld electronic device includes an Application Programming Interface (API) that generates various notifications in certain circumstances. The handheld electronic device provides an improved method of employing the notifications to enable another device to reflect a change to a browser cache on the handheld electronic device.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07937361",
	"publication_date": "2011-05-03",
	"application_number": "11414785",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "method-of-reflecting-on-another-device-a-change-to-a-browser-cache-on-a-handheld-electronic-device-and-associated-device",
	"match_type": "abstract"
},
{
	"name": "Method of reflecting on another device an addition to a browser cache on a handheld electronic device, and associated device",
	"summary": "",
	"abstract": "An improved handheld electronic device includes an Application Programming Interface (API) that generates various notifications in certain circumstances. The handheld electronic device provides an improved method of employing the notifications to enable another device to reflect an addition to a browser cache on the handheld electronic device.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07644149",
	"publication_date": "2010-01-05",
	"application_number": "11414779",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "method-of-reflecting-on-another-device-an-addition-to-a-browser-cache-on-a-handheld-electronic-device-and-associated-device",
	"match_type": "abstract"
},
{
	"name": "System and method of presenting entities of standard device applications in wireless devices",
	"summary": "",
	"abstract": "A data entity presentation system and method of presenting data entities of standard device applications in wireless devices are provided. The data entity presentation system comprises an application runtime environment module for hosting component-based applications on a device, an integrated development environment for hosting component definitions and a device repository for storing device data and device-specific application programming interfaces. The method comprises the steps of hosting component-based applications on a device, hosting component definitions and storing device data and device-specific application programming interfaces.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07835726",
	"publication_date": "2010-11-16",
	"application_number": "11405510",
	"application_date": "2006-04-18",
	"tags": null,
	"slug": "system-and-method-of-presenting-entities-of-standard-device-applications-in-wireless-devices",
	"match_type": "abstract"
},
{
	"name": "Motion control systems",
	"summary": "",
	"abstract": "A motion control system comprising an application program, a plurality of motion controllers, a set of software drivers, and a motion component. Each software driver exposes a service provider interface comprising a set of driver functions. Driver code of at least one software driver associates at least one driver function with at least one control command. The motion component exposes an application programming interface comprising a set of component functions and component code associates at least one of the component functions with at least one of the driver functions. The at least one selected software driver generates at least one control code from the motion controller language associated with the at least one selected motion controller based on the at least one component function called by the application program, the component code, and the driver code of the at least one selectable software driver.",
	"url": null,
	"owner": "ROY-G-BIV Corporation",
	"publication_number": "08073557",
	"publication_date": "2011-12-06",
	"application_number": "12406921",
	"application_date": "2009-03-18",
	"tags": null,
	"slug": "motion-control-systems",
	"match_type": "abstract"
},
{
	"name": "Apparatus for providing inter-processor communication using TCP/IP in communication system",
	"summary": "",
	"abstract": "An apparatus for providing inter-processor communication (IPC) using transmission control protocol/Internet protocol (TCP/IP) in a communication system, including: an Ethernet interface module for providing an interface between an Ethernet device driver and an interprocessor communication (IPC) module, determining a type of a received message, transmitting the received message to a message process module if the type of the received message is non-frame data, and queuing the received message in a corresponding mailbox corresponding to frame data if the type of the received message is the frame data; a message process module for queuing the non-frame data received through the Ethernet interface module in a corresponding mailbox; and a common application programming interface (API) module for providing an interface for basically performing data transmission and reception through the message process module, mailbox management, interprocessor communication (IPC) buffer management and an interprocessor communication (IPC) control function.",
	"url": null,
	"owner": "Samsung Electronics Co., Ltd.",
	"publication_number": "07774507",
	"publication_date": "2010-08-10",
	"application_number": "10645522",
	"application_date": "2003-08-22",
	"tags": null,
	"slug": "apparatus-for-providing-interprocessor-communication-using-tcpip-in-communication-system",
	"match_type": "abstract"
},
{
	"name": "End-to-end QoS interoperation apparatus and method in heterogeneous network environment",
	"summary": "",
	"abstract": "An end-to-end quality-of-service (QoS) interoperation apparatus and method in a heterogeneous network environment are provided. A Next Steps In Signaling (NSIS) Application Programming Interface (NAPI) block handles an NSIS API at the request of an upper layer. An NSIS entity handles an NSIS protocol stack at the request of the NAPI block. An Internet Protocol Bearer Service (IP BS) manager manages an IP BS. A translation block translates parameters of a 3GPP_CLASS object and a UMTS QoS class predefined in an NSIS message according to a predetermined mapping configuration. A memory stores a software application including a Universal Mobile Telecommunication System Bearer Service (UMTS BS) manager for managing a UMTS BS. A processor combined with the memory, controls the software application.",
	"url": null,
	"owner": "Samsung Electronics Co., Ltd.",
	"publication_number": "07944833",
	"publication_date": "2011-05-17",
	"application_number": "11434785",
	"application_date": "2006-05-17",
	"tags": null,
	"slug": "endtoend-qos-interoperation-apparatus-and-method-in-heterogeneous-network-environment",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for monitoring runtime of persistence applications",
	"summary": "",
	"abstract": "A monitoring method and apparatus monitors a runtime application to collect and display static and dynamic data concerning software entities and database operations in a runtime environment. In one embodiment, monitoring classes are used to collect monitoring data from at least one PersistenceUnit (PU) and at least one PersistenceContext (PC) associated with the PU of an application the uses an in implementation of a Java Persistence Application Programming Interface (JPA). A Java Management Extension (JMX) MBean communicates with the monitoring classes to expose monitoring data outside the runtime environment.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "08356288",
	"publication_date": "2013-01-15",
	"application_number": "12267828",
	"application_date": "2008-11-10",
	"tags": null,
	"slug": "method-and-apparatus-for-monitoring-runtime-of-persistence-applications",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for persistent object tool",
	"summary": "",
	"abstract": "A method and an apparatus that execute executable codes to install a persistent object from a storage into an application server to access remote services in an EIS are described. The executable codes are based on relational properties for mapping an API (Application Programming Interface) function of an EIS to an object of a cross-platform connection framework coupling the EIS with the application server. The application server is enabled to access the API function of the EIS via the persistent object as part of the cross-platform connection framework.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "08438535",
	"publication_date": "2013-05-07",
	"application_number": "11633851",
	"application_date": "2006-12-04",
	"tags": null,
	"slug": "method-and-apparatus-for-persistent-object-tool",
	"match_type": "abstract"
},
{
	"name": "Shared resource discovery, configuration, and consumption for networked solutions",
	"summary": "",
	"abstract": "A networked solution offering a software-based service via a networked architecture having a system landscape can discover a shared resource within the system landscape, for example by accessing a landscape directory comprising information about a plurality of shared resources available in the system landscape. The information about the discovered shared resource can include a second networked solution within the system landscape that has previously configured the discovered shared resource. Configuration settings can be retrieved for the discovered shared resource from the second networked solution. Using the retrieved configuration settings, a shared resource-specific communication channel can be determined for the networked solution to access the discovered shared resource in a peer-to-peer manner. A resource type-specific application programming interface can be provided to the software-based service to enable consumption of the discovered shared resource by the software-based service. Related methods, systems, and articles of manufacture are described.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "08375130",
	"publication_date": "2013-02-12",
	"application_number": "12970873",
	"application_date": "2010-12-16",
	"tags": null,
	"slug": "shared-resource-discovery-configuration-and-consumption-for-networked-solutions",
	"match_type": "abstract"
},
{
	"name": "System and method for providing access to an application through a common interface for application extensions",
	"summary": "",
	"abstract": "A method and system to permit externally created business objects to access a business management application database without using direct database language statements. An add-on framework includes an add-on extension manager to start an add-on application, register a form from the add-on application, and receive and route an event from the business management application to the add-on application through a user interface application programming interface component object model interface. A persistency layer provides a set of programming language classes and interface definitions to develop a persistent business object in the add-on extension, and connect the persistent business object to a database through a data interface application programming interface component object model interface to read and write data from the database associated with the business management application.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07860890",
	"publication_date": "2010-12-28",
	"application_number": "11959572",
	"application_date": "2007-12-19",
	"tags": null,
	"slug": "system-and-method-for-providing-access-to-an-application-through-a-common-interface-for-application-extensions",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for oilfield data repository",
	"summary": "",
	"abstract": "The invention relates to a method for performing operations of an oilfield having at least one wellsite, a surface network, and a process facility, each wellsite having a wellbore penetrating a subterranean formation for extracting fluid from an underground reservoir therein. The method includes storing oilfield data associated with a plurality of oilfield entities in a first data repository, obtaining a first target metamodel comprising structural description of a first plurality of data entities of the first data repository, obtaining a domain metamodel interleaved with a first mapping specification, the domain metamodel comprising structural description of a domain model for representing the plurality of oilfield entities in an application programming interface, obtaining a mapping specification associating the first target metamodel with the domain metamodel and forming the application programming interface based on the domain metamodel, the first target metamodel, and the first mapping specification using a computer implemented method.",
	"url": null,
	"owner": "Schlumberger Technology Corp.",
	"publication_number": "07895241",
	"publication_date": "2011-02-22",
	"application_number": "11873366",
	"application_date": "2007-10-16",
	"tags": null,
	"slug": "method-and-apparatus-for-oilfield-data-repository",
	"match_type": "abstract"
},
{
	"name": "Method of and system for watermarking application modules",
	"summary": "",
	"abstract": "A method of creating and using a software application module includes coding, by a developer, a software application module for extending a functionality of a main software application. The software application module is adapted to interface with the main software application using an application programming interface (API). The method further includes compiling the software application module to produce an executable software application module, determining if the developer is authorized to use the API, and embedding a watermark in the executable software application module if it is determined that the developer is authorized to use the API. The method still further includes executing the main software application, reading the watermark from a executable software application module, verifying if the watermark is correct, and executing the software application module if the watermark is verified as correct.",
	"url": null,
	"owner": "Schlumberger Technology Corporation",
	"publication_number": "08024571",
	"publication_date": "2011-09-20",
	"application_number": "11644932",
	"application_date": "2006-12-22",
	"tags": null,
	"slug": "method-of-and-system-for-watermarking-application-modules",
	"match_type": "abstract"
},
{
	"name": "Acceptance of inputs from various interfaces to a telephony system",
	"summary": "",
	"abstract": "A telephony system that accepts inputs, such as account codes, from a variety of devices and interfaces. The system includes a server with a telephony management software (TMS) unit, a telephony application programming interface (TAPI) unit, and an application unit. The application unit includes a control module, a call status module, an endpoint interface module, a storage interface module, a call transfer module, a TAPI interface module, a configuration module, and an extension library module. A server is capable of prompting several devices for an input and then accepting an input from any of the devices. Thus, a server enables a user to initiate a phone call on one device and then input information using a different device.",
	"url": null,
	"owner": "ShoreTel, Inc.",
	"publication_number": "08284910",
	"publication_date": "2012-10-09",
	"application_number": "12247789",
	"application_date": "2008-10-08",
	"tags": null,
	"slug": "acceptance-of-inputs-from-various-interfaces-to-a-telephony-system",
	"match_type": "abstract"
},
{
	"name": "Directory features in a distributed telephony system",
	"summary": "",
	"abstract": "A telephony system is presented that enables a phone to access a directory and use the directory in conjunction with other phone functions. The system includes a server with a telephony management software (TMS) unit, a telephony application programming interface (TAPI) unit, and an application unit. The application unit includes a control module, a function module, a filter module, a presentation module, a phone interface module, and a storage interface module. A server sends a signal to a phone regarding the contents of a directory. A server also enables a user to navigate through the directory, filter the directory, and perform call functions on phone numbers associated with directory entries.",
	"url": null,
	"owner": "ShoreTel, Inc.",
	"publication_number": "08670544",
	"publication_date": "2014-03-11",
	"application_number": "11110293",
	"application_date": "2005-04-19",
	"tags": null,
	"slug": "directory-features-in-a-distributed-telephony-system",
	"match_type": "abstract"
},
{
	"name": "Method and system for improving performance of a manufacturing execution system",
	"summary": "",
	"abstract": "A manufacturing execution system contains a depicting device for depicting at least a part of a productive process to a hierarchically structured set of entities and an application programming interface for managing data in a data base and for inputting a tree into the application programming interface. The tree representing a hierarchical relationship between at least two entities of the hierarchically structured set of entities. A program device provides a method accessible by the application programming interface. The method is adapted to manipulate the hierarchically structured set of entities. A manipulating device is provided for manipulating the entities of the tree according to the method.",
	"url": null,
	"owner": "Siemens Aktiengesellschaft",
	"publication_number": "08452810",
	"publication_date": "2013-05-28",
	"application_number": "12838128",
	"application_date": "2010-07-16",
	"tags": null,
	"slug": "method-and-system-for-improving-performance-of-a-manufacturing-execution-system",
	"match_type": "abstract"
},
{
	"name": "Handover between an IEEE 802.16 WiBro network and a UMTS network using media independent handover function",
	"summary": "",
	"abstract": "A wireless transmit/receive unit (WTRU) may include an IEEE 802.16 modem, a universal mobile telecommunication system (UMTS) modem and a media independent handover (MIH) entity. Software application programming interfaces provide the MIH entity with mechanisms to receive information about IEEE 802.16 and UMTS links, control IEEE 802.16 and UMTS modems for handover, discover an MIH server and IP multimedia system nodes, trigger mobile IP handover, etc. If an IEEE 802.16 link has been successfully established, the MIH entity starts an MIH session. When the IEEE 802.16 modem indicates that a connection is going to be terminated, the MIH entity activates the UMTS modem for handover. If the IEEE 802.16 modem indicates that a link parameter has crossed a threshold, the MIH entity sends IEEE 802.16 and WCDMA signal measurements to an MIH server. After receiving an MIH switch request, the MIH entity initiates handover to the UMTS network.",
	"url": null,
	"owner": "SK Telecom, Co. Ltd.",
	"publication_number": "07894400",
	"publication_date": "2011-02-22",
	"application_number": "11862963",
	"application_date": "2007-09-27",
	"tags": null,
	"slug": "handover-between-an-ieee-80216-wibro-network-and-a-umts-network-using-media-independent-handover-function",
	"match_type": "abstract"
},
{
	"name": "Method and system for a database to monitor and analyze performance of an electronic design",
	"summary": "",
	"abstract": "Various methods and apparatuses are described that provide instrumentation and analysis of an electronic design having one or more bus interconnects. A relational database may have defined tables designed for interconnect analysis of transactions occurring between initiator intellectual property (IP) cores and target IP cores of the electronic design. A query tool may be configured to format input data to be stored in the defined tables, and have application programming interfaces to retrieve data from the defined tables based on performing a query. The query tool executes an algorithm based on the query to provide the interconnect analysis.",
	"url": null,
	"owner": "Sonics, Inc.",
	"publication_number": "08073820",
	"publication_date": "2011-12-06",
	"application_number": "12098614",
	"application_date": "2008-04-07",
	"tags": null,
	"slug": "method-and-system-for-a-database-to-monitor-and-analyze-performance-of-an-electronic-design",
	"match_type": "abstract"
},
{
	"name": "Unified onscreen advertisement system for CE devices",
	"summary": "",
	"abstract": "A client-server architecture allows consumer electronics (CE) devices to obtain advertisements, including TV and network content recommendations, via a unified application programming interface (API). A gateway server between online advertisement providers and CE devices prioritizes and personalizes the advertisements and recommendations for a requesting CE device. This architecture scales over time and evolves more functionality without requiring CE device software updates.",
	"url": null,
	"owner": "Sony Corporation",
	"publication_number": "08438057",
	"publication_date": "2013-05-07",
	"application_number": "13073146",
	"application_date": "2011-03-28",
	"tags": null,
	"slug": "unified-onscreen-advertisement-system-for-ce-devices",
	"match_type": "abstract"
},
{
	"name": "Method and system for managing access to add-on data files",
	"summary": "",
	"abstract": "A method and system for managing access to add-on data files having an add-on data file attribute, which is used by a software application. The method: monitors input/output commands of the software application to an application programming interface of a code layer to determine whether an access to a data file with the add-on data file attribute is requested by the software application; checks whether an access code for the add-on data file is present in an access code list related to the software application if at least one of the monitored input/output commands request access to the add-on data file, if the access code is not present in the access control list; retrieves the access code from an external source outside of the access control list; and provides access to the add-on data file if the access code is present.",
	"url": null,
	"owner": "SONY DADC Austria AG",
	"publication_number": "08185918",
	"publication_date": "2012-05-22",
	"application_number": "12440728",
	"application_date": "2007-08-29",
	"tags": null,
	"slug": "method-and-system-for-managing-access-to-addon-data-files",
	"match_type": "abstract"
},
{
	"name": "High-level interface for QoS-based mobile multimedia applications",
	"summary": "",
	"abstract": "The present invention generally relates to the field of mobile multimedia middleware, quality-of-service, shared resource reservation mechanisms, distributed processing systems, handheld computers, computer networking and wireless communication. Particularly, the present invention describes a processing system and pieces of software for one or more communication networks, with middleware comprising an application programming interface () cast over a data model describing quality-of-service contracts and quality-of-service adaptation paths specified by quality-of-service aware mobile multimedia applications () using said programming interface, in order to manage quality-of-service and mobility-aware for managing network connections with other applications. The present invention hereby relates to a corresponding data model as well as the necessary architecture.",
	"url": null,
	"owner": "Sony Deutschland GmbH",
	"publication_number": "07814184",
	"publication_date": "2010-10-12",
	"application_number": "10006067",
	"application_date": "2001-12-06",
	"tags": null,
	"slug": "highlevel-interface-for-qosbased-mobile-multimedia-applications",
	"match_type": "abstract"
},
{
	"name": "System and method for multi-directional positioning of projected images",
	"summary": "",
	"abstract": "A system and method of multi-directional projection in which the optical output from a projector is modified in response to characteristics of nearby surfaces, upon which projection can be directed. The multi-directional projection system can provide beneficial output as a primary indicator or a secondary indicating device that can be controlled by itself or synchronously with other devices, such as output from a computer monitor. One implementation incorporates an optical sensor coupled to the projector for registering object characteristics (e.g., distance, reflectance, texture, color, and ambient lighting), such as during a mapping operation performed across the pan and tilt range of the projector. The projection system preferably incorporates a focusing assembly and may include other controllable optical elements such as zoom. Control is preferably provided through commands within an application programming interface (API), such as executing on a personal computer or other form of computer device.",
	"url": null,
	"owner": "Sony Electronics, Inc.",
	"publication_number": "07794094",
	"publication_date": "2010-09-14",
	"application_number": "11441974",
	"application_date": "2006-05-26",
	"tags": null,
	"slug": "system-and-method-for-multidirectional-positioning-of-projected-images",
	"match_type": "abstract"
},
{
	"name": "Telecommunications provider agent",
	"summary": "",
	"abstract": "The invention is a provider agent product and method that operates as a software interface between a telephony card and a session manager in an advanced communications network. The provider agent receives event messages from the telephony card indicating on-hook events, off-hook events, and digit events. The provider agent instructs the telephony card to provide dial tone, ring current, ringback, and busy signals to the telephones. The provider agent also exchanges messages with a session manager in the network. These messages include: invite messages, reply messages, join messages, and terminate messages. In response to the above processing, the provider agent instructs the telephony card to interwork telephony signals on a telephony channel with ATM signals on an ATM virtual channel. The provider agent is comprised of a plurality of software objects that are stored on a software storage medium and that include: a controller object, port objects, and event objects. The provider agent objects are executed by a multithreaded processing system and each object has a separate processing thread. The provider agent and the telephony card communicate through an application programming interface that is specified in an Interface Definition Language (IDL) of a Common Object Request Broker Architecture (CORBA).",
	"url": null,
	"owner": "Sprint Communications Company L.P.",
	"publication_number": "07729338",
	"publication_date": "2010-06-01",
	"application_number": "10153237",
	"application_date": "2002-05-21",
	"tags": null,
	"slug": "telecommunications-provider-agent",
	"match_type": "abstract"
},
{
	"name": "Data backup system including a data protection component",
	"summary": "",
	"abstract": "A data backup system is provided for backing up data files from a data source and for securing those data files against accidental modification or deletion. The system comprises storage and a data protection component that includes an application programming interface defining a command set. The system can also comprise a backup application that is configured to use the commands of the command set. The data protection component allows applications that use the commands of the command set, such as the backup application, to access the storage of the system. The data protection component prevents operating systems and applications that do not use the commands of the command set from accessing the storage. The data protection function of the data protection component can optionally be disabled to allow open access to the storage.",
	"url": null,
	"owner": "Storage Appliance Corporation",
	"publication_number": "08195445",
	"publication_date": "2012-06-05",
	"application_number": "13016996",
	"application_date": "2011-01-29",
	"tags": null,
	"slug": "data-backup-system-including-a-data-protection-component",
	"match_type": "abstract"
},
{
	"name": "Data backup system including a data protection component",
	"summary": "",
	"abstract": "A data backup system is provided for backing up data files from a data source and for securing those data files against accidental modification or deletion. The system comprises storage and a data protection component that includes an application programming interface defining a command set. The system can also comprise a backup application that is configured to use the commands of the command set. The data protection component allows applications that use the commands of the command set, such as the backup application, to access the storage of the system. The data protection component prevents operating systems and applications that do not use the commands of the command set from accessing the storage. The data protection function of the data protection component can optionally be disabled to allow open access to the storage.",
	"url": null,
	"owner": "Storage Appliance Corporation",
	"publication_number": "07899662",
	"publication_date": "2011-03-01",
	"application_number": "11605770",
	"application_date": "2006-11-28",
	"tags": null,
	"slug": "data-backup-system-including-a-data-protection-component",
	"match_type": "abstract"
},
{
	"name": "File system with distributed components",
	"summary": "",
	"abstract": "A distributed file system is disclosed which may include one or more input/output (I/O) nodes and one or more compute nodes. The I/O nodes and the compute nodes may be communicably coupled through an interconnect. Each compute node may include applications to perform specific functions and perform I/O functions through libraries and file system call handlers. The file system call handlers may be capable of providing application programming interfaces (APIs) to facilitate communication between the plurality of I/O nodes and the applications. The file system call handlers may use a message port system to communicate with other compute nodes.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07933875",
	"publication_date": "2011-04-26",
	"application_number": "11510108",
	"application_date": "2006-08-24",
	"tags": null,
	"slug": "file-system-with-distributed-components",
	"match_type": "abstract"
},
{
	"name": "System and method for providing search engine-based rewards",
	"summary": "",
	"abstract": "A system for enhancing search engine-based search results comprises an application programming interface configured to add value to selected search engine-based web search, a tag indicative of the value-added capacity that is appended to one or more links; a client that accepts a search request and enables an integrated view responsive to the request; and a web server for fetching the integrated web data upon receiving a request for selected search-engine-based web search. The enhanced search engine-based web search system further comprises a content manager that is configured to store and calculate the added value in a personal account of a web user. The added value is retrievable by the user. Search engine-based online search enhancing system and methods also are described.",
	"url": null,
	"owner": "SurfJar, Inc.",
	"publication_number": "07908262",
	"publication_date": "2011-03-15",
	"application_number": "12070656",
	"application_date": "2008-02-19",
	"tags": null,
	"slug": "system-and-method-for-providing-search-enginebased-rewards",
	"match_type": "abstract"
},
{
	"name": "Method for invoking UOML instructions",
	"summary": "",
	"abstract": "Embodiments of the present invention disclose a method for encapsulating Unstructured Operation Markup Language (UOML) into an Application Programming Interface (API), including: mapping an object of an UOML operation to a data type of a programming language, mapping the UOML operation to an API function prototype in the programming language, wherein an attribute or sub element of the UOML operation is mapped to a parameter of the API function prototype; wherein, when an API function is invoked, the API function issues a corresponding UOML operation instruction to a docbase management system according to the mapping relations; after an operation defined by the UOML operation instruction is executed by the docbase management system, the return result from the docbase management system is converted into a data type of the programming language by the API function. In this way, API functions in different programming languages, which correspond to the UOML, can be implemented, and the application developers of the programming languages may invoke suitable API functions directly to implement applications on the docbase management system, thus the development efficiency can be improved.",
	"url": null,
	"owner": "Sursen Corp.",
	"publication_number": "08316379",
	"publication_date": "2012-11-20",
	"application_number": "12415643",
	"application_date": "2009-03-31",
	"tags": null,
	"slug": "method-for-invoking-uoml-instructions",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for weighted and aging spam filtering rules",
	"summary": "",
	"abstract": "A server is disclosed for filtering e-mail messages. The server receives requests to retrieve e-mail messages on behalf of a client and then retrieves e-mail messages from a mail server on behalf of the client. The server then filters the e-mail messages based on one or more rules and transfers the filtered e-mail messages to the client. In addition, the server continues to filter the e-mail messages after the client has disconnected from the server. In one embodiment of the invention the e-mail message recipient is sent a notification by the server indicating that messages have been filtered. The recipient is then able to scan the filtered messages and insure that the messages have been filtered correctly. In another embodiment, a third party scans the e-mail messages on behalf of the e-mail user to make this determination. Also disclosed is an e-mail filter comprising an application programming interface and a plurality of dynamically loaded rule modules adapted to interface with the API. The rule modules are activated and deactivated based on usage. Specifically, rule modules which have not been used for a predetermined period of time are deactivated. In addition, different rule modules are assigned different weighted values based on the probability that the rule module will accurately filter e-mail messages and/or on the content of the e-mail messages.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "07882193",
	"publication_date": "2011-02-01",
	"application_number": "10117065",
	"application_date": "2002-04-04",
	"tags": null,
	"slug": "apparatus-and-method-for-weighted-and-aging-spam-filtering-rules",
	"match_type": "abstract"
},
{
	"name": "Executing unmanaged content in a managed execution environment",
	"summary": "",
	"abstract": "A legacy application program contains unmanaged code. Application definitions for common unmanaged applications are established. An application definition includes a manifest that describes the unmanaged code and an execution wrapper that projects the unmanaged code as a managed assembly to the execution environment. An application definition can also specify other modifications to the unmanaged code, such as modifications to cause the unmanaged code to call managed application programming interfaces (APIs). The application definition is utilized to transform the unmanaged code into a managed assembly. The manifest and wrapper are added to the managed assembly and the unmanaged code is maintained as a resource. The managed execution environment uses the manifest to compute a permissions set for the unmanaged code, and the wrapper invokes the unmanaged code. The unmanaged code uses the managed APIs, and the managed execution environment can therefore manage execution of the code.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "07752242",
	"publication_date": "2010-07-06",
	"application_number": "11231681",
	"application_date": "2005-09-20",
	"tags": null,
	"slug": "executing-unmanaged-content-in-a-managed-execution-environment",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for filtering E-mail",
	"summary": "",
	"abstract": "A server is disclosed for filtering e-mail messages. The server receives requests to retrieve e-mail messages on behalf of a client and then retrieves e-mail messages from a mail server on behalf of the client. The server then filters the e-mail messages based on one or more rules and transfers the filtered e-mail messages to the client. In addition, the server continues to filter the e-mail messages after the client has disconnected from the server. In one embodiment of the invention the e-mail message recipient is sent a notification by the server indicating that messages have been filtered. The recipient is then able to scan the filtered messages and insure that the messages have been filtered correctly. In another embodiment, a third party scans the e-mail messages on behalf of the e-mail user to make this determination. Also disclosed is an e-mail filter comprising an application programming interface and a plurality of dynamically loaded rule modules adapted to interface with the API. The rule modules are activated and deactivated based on usage. Specifically, rule modules which have not been used for a predetermined period of time are deactivated. In addition, different rule modules are assigned different weighted values based on the probability that the rule module will accurately filter e-mail messages and/or on the content of the e-mail messages.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "RE041940",
	"publication_date": "2010-11-16",
	"application_number": "12697288",
	"application_date": "2010-01-31",
	"tags": null,
	"slug": "method-and-apparatus-for-filtering-email",
	"match_type": "abstract"
},
{
	"name": "Preventing malware from abusing application data",
	"summary": "",
	"abstract": "An attempted exploit of a vulnerability of an application executed by a computer is detected. The exploit attempts to call an application programming interface (API) and abuse application data through a malicious parameter of the call. The API of the application is hooked and monitored for a call made to the hooked API. A parameter of the call is analyzed to determine whether the parameter has a malicious characteristic indicating an attempt to use data within an address space of the application to execute malicious software. A remediation action is taken responsive to determining that the parameter has a malicious characteristic.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "08499354",
	"publication_date": "2013-07-30",
	"application_number": "13048810",
	"application_date": "2011-03-15",
	"tags": null,
	"slug": "preventing-malware-from-abusing-application-data",
	"match_type": "abstract"
},
{
	"name": "Method and system to offload archiving process to a secondary system",
	"summary": "",
	"abstract": "Procedures and systems may be used for archiving data from a secondary data set that is a stable copy of a primary data set. In one implementation, the secondary data set is a continuous data protection (CDP) copy of the primary data set. One implementation of a method includes receiving an application programming interface (API) request for archive-eligible data, gathering application data from a secondary data set, obtaining archive-eligible data from the gathered application data, and responding to the request instruction with the archive-eligible data. The gathering is performed by a gathering circuit configured to obtain information from a plurality of types of secondary data sets. The method also includes receiving API modification instructions related to the archive-eligible data, and causing the modification instruction to be performed on the primary data set.",
	"url": null,
	"owner": "Symantec Operating Corporation",
	"publication_number": "07680843",
	"publication_date": "2010-03-16",
	"application_number": "11527027",
	"application_date": "2006-09-26",
	"tags": null,
	"slug": "method-and-system-to-offload-archiving-process-to-a-secondary-system",
	"match_type": "abstract"
},
{
	"name": "System and method for a WPAN firewall",
	"summary": "",
	"abstract": "Systems and methodologies for implementing Wireless Personal Area Network (WPAN) security are provided herein. As disclosed herein, firewall functionality can be implemented for a WPAN-capable device to control access to resources of the device over a WPAN. In one example, a WPAN protocol can be extended to include low-level access control measures that enable analysis of communication requests to and/or from a device prior to acting on the requests. As described herein, a WPAN firewall associated with a device can be configured to block, monitor, and/or log respective resource accesses to and/or from a WPAN. WPAN firewall functionality as described herein can be configured using mechanisms such as an Application Programming Interface (API) and/or a user control interface. Additionally, lateral regulation of security policies for a WPAN and one or more other networks utilized by a device can be provided.",
	"url": null,
	"owner": "Symbol Technologies, Inc.",
	"publication_number": "08156544",
	"publication_date": "2012-04-10",
	"application_number": "12195085",
	"application_date": "2008-08-20",
	"tags": null,
	"slug": "system-and-method-for-a-wpan-firewall",
	"match_type": "abstract"
},
{
	"name": "Touch screen with user interface enhancement",
	"summary": "",
	"abstract": "The present invention is a graphical user interface in a computing device having a processor running an operating system and a display. The graphical user interface comprises a touch screen and a driver coupling the touch screen to the operating system. The driver can display a plurality of icons on the touch screen, or a plurality of screen images having at least one icon, with each of the icons associated with operations on the display and/or the touch screen. Other embodiments include the touch screen having unactivated and activated states, as well as the presence of an application programming interface that enables an application to display at least one image on the touch screen.",
	"url": null,
	"owner": "Synaptics Incorporated",
	"publication_number": "07730401",
	"publication_date": "2010-06-01",
	"application_number": "10125066",
	"application_date": "2002-04-17",
	"tags": null,
	"slug": "touch-screen-with-user-interface-enhancement",
	"match_type": "abstract"
},
{
	"name": "IP link establishment across a data network",
	"summary": "",
	"abstract": "Methods of establishing an IP link between first and second applications running at respective first and second nodes are provided. The first and second applications are arranged to initiate link establishment over a transport layer by issuing a call to their respective operating system socket Application Programming Interfaces. The methods include at said first node, intercepting a socket call generated by said first application and redirecting the socket call to a SIP-based application resident at said first node; and initiating an IP session with said second node using the SIP protocol.",
	"url": null,
	"owner": "Telefonaktiebolaget L M Ericsson (Publ)",
	"publication_number": "08069253",
	"publication_date": "2011-11-29",
	"application_number": "12667616",
	"application_date": "2007-07-04",
	"tags": null,
	"slug": "ip-link-establishment-across-a-data-network",
	"match_type": "abstract"
},
{
	"name": "Dynamic control and regulation of critical database resources using a virtual memory table interface",
	"summary": "",
	"abstract": "A computer-implemented apparatus, method, and article of manufacture provide the ability to manage a plurality of database systems. A domain contains the database systems, and a database in one of the systems has segmented global memory partitions. A virtual monitor partition provides logon access to the segmented global memory partitions in a form of a virtual database. Open application programming interfaces (API) enable logon access to the virtual monitor partition to access data in the virtual database. A multi-system regulator manages the domain and utilizes the open APIs to access data in the virtual data base.",
	"url": null,
	"owner": "Teradata US, Inc.",
	"publication_number": "08082273",
	"publication_date": "2011-12-20",
	"application_number": "11985911",
	"application_date": "2007-11-19",
	"tags": null,
	"slug": "dynamic-control-and-regulation-of-critical-database-resources-using-a-virtual-memory-table-interface",
	"match_type": "abstract"
},
{
	"name": "Business object document mapper",
	"summary": "",
	"abstract": "In accordance with an embodiment, an architecture for directly interfacing Business Object Documents (BODs) may include a BOD mapper which employs the BOD for input and output. A model object definable by class is created corresponding to the data contained in the BOD. System logic for the local domain is provided with communication with the BOD mapper through a BOD mapper application programming interface. The logic operates on the model object and a mapping configuration is provided for relating elements of the BOD to the model object. An addressing element communicates with the BOD mapper to define the mapping configuration for the BODs operated on by the BOD Mapper for input/output and mapping for a map call and parsing for a list call is accomplished for the contents from the BOD to the model object as defined by the BOD mapping configuration.",
	"url": null,
	"owner": "The Boeing Company",
	"publication_number": "07873679",
	"publication_date": "2011-01-18",
	"application_number": "11862082",
	"application_date": "2007-09-26",
	"tags": null,
	"slug": "business-object-document-mapper",
	"match_type": "abstract"
},
{
	"name": "Abstract interface for unified communications with dynamic models",
	"summary": "",
	"abstract": "The present invention provides a method and system for interfacing with a model regardless of model type. An abstract interface is provided for interfacing a model. The abstract interface is compatible with a plurality of model types. A call can then be made to a dynamic model via a method specified by the abstract interface. Data is then received from the dynamic model in response to the call. In certain embodiments the abstract interface is an application programming interface (API).",
	"url": null,
	"owner": "The MathWorks, Inc.",
	"publication_number": "08127311",
	"publication_date": "2012-02-28",
	"application_number": "11270221",
	"application_date": "2005-11-09",
	"tags": null,
	"slug": "abstract-interface-for-unified-communications-with-dynamic-models",
	"match_type": "abstract"
},
{
	"name": "System and method for using stream objects to perform stream processing in a text-based computing environment",
	"summary": "",
	"abstract": "A mechanism for using stream objects in stream processing operations is provided. A definition of a class of stream objects used in stream processing algorithms can define output and update operations included in instances of the stream objects and the API (application programming interface) through which they may be called. The class definition may further include the type of state information to be held by the instantiated stream objects. An instance of the stream object may be instantiated in a text-based computing environment and the operations may be used to process streams of data.",
	"url": null,
	"owner": "The MathWorks, Inc.",
	"publication_number": "08234623",
	"publication_date": "2012-07-31",
	"application_number": "11519255",
	"application_date": "2006-09-11",
	"tags": null,
	"slug": "system-and-method-for-using-stream-objects-to-perform-stream-processing-in-a-textbased-computing-environment",
	"match_type": "abstract"
},
{
	"name": "Computer apparatus and method for non-intrusive inspection of program behavior",
	"summary": "",
	"abstract": "A computer-implemented method for malicious code detection. An emulator is initialized, and import dynamic link libraries are processed. Instructions of a target program are emulated using the emulator. Select application programming interface calls are intercepted using an intercept list during the program emulation.",
	"url": null,
	"owner": "Trend Micro Incorporated",
	"publication_number": "08407787",
	"publication_date": "2013-03-26",
	"application_number": "12357979",
	"application_date": "2009-01-22",
	"tags": null,
	"slug": "computer-apparatus-and-method-for-nonintrusive-inspection-of-program-behavior",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for performing antivirus tasks in a mobile wireless device",
	"summary": "",
	"abstract": "Disclosed are techniques for performing an antivirus task in a mobile wireless device running an embedded operating system. In one embodiment, calls intended for an application programming interface (API) function code is redirected to an antivirus function code. The redirection to the antivirus function code may be performed by modifying a kernel structure to point to a modified entry list instead of an API entry list. The redirection to the antivirus function code may also be performed by modifying the API function code to allow the antivirus function code to execute before the API function code. The kernel structure or the API function code may be properly restored back to its original form. Software implementations of these techniques may be readily loaded and unloaded, and may not require re-installation of the embedded operating system.",
	"url": null,
	"owner": "Trend Micro Incorporated",
	"publication_number": "07735138",
	"publication_date": "2010-06-08",
	"application_number": "11126476",
	"application_date": "2005-05-10",
	"tags": null,
	"slug": "method-and-apparatus-for-performing-antivirus-tasks-in-a-mobile-wireless-device",
	"match_type": "abstract"
},
{
	"name": "Application behavior based malware detection",
	"summary": "",
	"abstract": "An executable file is loaded into a virtual machine arranged to emulate the instructions of said executable file. The virtual machine keeps track of application programming interfaces (APIs) used by the executable file during emulation. The executable file is scanned to determine names of (APIs) used. Behavior flags are set if certain conditions occur within the executable file. The APIs determined during emulation and during scanning are compared with a set of known behaviors. A match of the APIs and the known behaviors indicates a high risk of malware. A determination of malware being present is based upon any matches and any behavior flags that are set.",
	"url": null,
	"owner": "Trend Micro, Inc.",
	"publication_number": "07779472",
	"publication_date": "2010-08-17",
	"application_number": "11247349",
	"application_date": "2005-10-11",
	"tags": null,
	"slug": "application-behavior-based-malware-detection",
	"match_type": "abstract"
},
{
	"name": "Web client data conversion for synthetic environment interaction",
	"summary": "",
	"abstract": "Web client data conversion for synthetic environment interaction is described, including receiving a message at a synthetic environment server indicating occurrence of an event on a web client by a web application server configured to generate a transformed message from a first protocol format to a second protocol format, sending the transformed message from the web application server to a message bus using the second protocol format, translating the transformed message into a translated message, the transformed message being translated from the second protocol to a third protocol using a property class, sending the translated message from the message bus to the synthetic environment server according to the property class, and updating the synthetic environment using data included in the translated message, wherein the synthetic environment is updated in substantially real-time. In some embodiments, a method can include an implementing an application programming interface associated with a transactional server.",
	"url": null,
	"owner": "Trion Worlds, Inc.",
	"publication_number": "08214515",
	"publication_date": "2012-07-03",
	"application_number": "12791773",
	"application_date": "2010-06-01",
	"tags": null,
	"slug": "web-client-data-conversion-for-synthetic-environment-interaction",
	"match_type": "abstract"
},
{
	"name": "Adaptive termination",
	"summary": "",
	"abstract": "An apparatus for consolidated data services comprising a plurality of devices, a plurality of data services and a content application programming interface (API). A user API provides user identification for each of the plurality of devices. A feedback API configured to receive data from each of the plurality of devices. A device API configured to provide a client system to one or more of the plurality of devices using one or more of a plurality of device API methods. An update API configured to provide an updated client system to one or more of the plurality of devices using one more of a plurality of update API methods. A web service consolidator configured to control interactions between the content API, the user API, the feedback API, the device API, the update API, a plurality of data services and the plurality of devices.",
	"url": null,
	"owner": "Triune Systems, LLC",
	"publication_number": "08373436",
	"publication_date": "2013-02-12",
	"application_number": "13072462",
	"application_date": "2011-03-25",
	"tags": null,
	"slug": "adaptive-termination",
	"match_type": "abstract"
},
{
	"name": "System and method for processing telephony sessions",
	"summary": "",
	"abstract": "In one embodiment, the method of processing telephony sessions includes: communicating with an application server using an application layer protocol; processing telephony instructions with a call router; and creating call router resources accessible through a call router Application Programming Interface (API). In another embodiment, the system for processing telephony sessions includes: a call router, a URI for an application server, a telephony instruction executed by the call router, and a call router API resource.",
	"url": null,
	"owner": "Twilio, Inc.",
	"publication_number": "08755376",
	"publication_date": "2014-06-17",
	"application_number": "13743078",
	"application_date": "2013-01-16",
	"tags": null,
	"slug": "system-and-method-for-processing-telephony-sessions",
	"match_type": "abstract"
},
{
	"name": "System and method for processing telephony sessions",
	"summary": "",
	"abstract": "In one embodiment, the method of processing telephony sessions includes: communicating with an application server using an application layer protocol; processing telephony instructions with a call router; and creating call router resources accessible through a call router Application Programming Interface (API). In another embodiment, the system for processing telephony sessions includes: a call router, a URI for an application server, a telephony instruction executed by the call router, and a call router API resource.",
	"url": null,
	"owner": "Twilio, Inc.",
	"publication_number": "08306021",
	"publication_date": "2012-11-06",
	"application_number": "12417630",
	"application_date": "2009-04-02",
	"tags": null,
	"slug": "system-and-method-for-processing-telephony-sessions",
	"match_type": "abstract"
},
{
	"name": "Personal video recorder systems and methods",
	"summary": "",
	"abstract": "Systems and methods are disclosed for providing an interactive television system for recording television programming. The interactive television system may include components for providing personal video recorder (PVR) functionality, such as an interactive television program guide (IPG), PVR extensions, PVR application programming interfaces (APIs), a PVR device, any suitable hardware or software, or a combination thereof. These components may be implemented in, for example, an arrangement having an integrated PVR-compliant device with a PVR device, or in an arrangement having a PVR-compliant device (e.g., a set-top box) coupled to PVR equipment (e.g., a remote PVR server or a PVR sidecar) with a PVR device. The PVR-compliant device may include software and hardware configured to implement the IPG. The PVR APIs may be a library of intelligent vendor-specific and vendor-independent APIs able to determine the type of PVR device being used. The PVR extensions and PVR APIs may be configured to provide a seamless integration of functionality associated with the PVR-compliant device and the PVR device. A full port of the IPG may be implemented in both the PVR-compliant device and the PVR device.",
	"url": null,
	"owner": "United Video Properties, Inc.",
	"publication_number": "08281345",
	"publication_date": "2012-10-02",
	"application_number": "12818876",
	"application_date": "2010-06-18",
	"tags": null,
	"slug": "personal-video-recorder-systems-and-methods",
	"match_type": "abstract"
},
{
	"name": "Personal video recorder systems and methods",
	"summary": "",
	"abstract": "Systems and methods are disclosed for providing an interactive television system for recording television programming. The interactive television system may include components for providing personal video recorder (PVR) functionality, such as an interactive television program guide (IPG), PVR extensions, PVR application programming interfaces (APIs), a PVR device, any suitable hardware or software, or a combination thereof. These components may be implemented in, for example, an arrangement having an integrated PVR-compliant device with a PVR device, or in an arrangement having a PVR-compliant device (e.g., a set-top box) coupled to PVR equipment (e.g., a remote PVR server or a PVR sidecar) with a PVR device. The PVR-compliant device may include software and hardware configured to implement the IPG. The PVR APIs may be a library of intelligent vendor-specific and vendor-independent APIs able to determine the type of PVR device being used. The PVR extensions and PVR APIs may be configured to provide a seamless integration of functionality associated with the PVR-compliant device and the PVR device. A full port of the IPG may be implemented in both the PVR-compliant device and the PVR device.",
	"url": null,
	"owner": "United Video Properties, Inc.",
	"publication_number": "08156528",
	"publication_date": "2012-04-10",
	"application_number": "10105082",
	"application_date": "2002-03-21",
	"tags": null,
	"slug": "personal-video-recorder-systems-and-methods",
	"match_type": "abstract"
},
{
	"name": "Intelligent configurable graphics bandwidth modulator",
	"summary": "",
	"abstract": "An apparatus and method to dynamically regulate system bandwidth in a graphics system includes receiving vertex data from an application by way of an application programming interface. The rate that the vertex data is received from the application is then determined. In the event the rate is greater than a selected threshold, the graphics system is configured to operate in immediate mode, wherein vertex data is rendered immediately upon reception. In the event the rate is less than the selected threshold, the graphics system is configured to operate in retained mode, wherein vertex data is stored prior to being rendered. The apparatus and method switches between each of the modes on-the-fly in a manner that is transparent to the application.",
	"url": null,
	"owner": "Vivante Corporation",
	"publication_number": "08031194",
	"publication_date": "2011-10-04",
	"application_number": "11938214",
	"application_date": "2007-11-09",
	"tags": null,
	"slug": "intelligent-configurable-graphics-bandwidth-modulator",
	"match_type": "abstract"
},
{
	"name": "Backup systems and methods for a virtual computing environment",
	"summary": "",
	"abstract": "Improved backup and storage operations are disclosed for virtual computing environments using a backup proxy server to perform storage operations on one or more virtual machine disks. The proxy server can include a module that intercepts application programming interface (API) calls, for writing backup data to a first location, prior to the data arriving on the proxy disk. During the intercept process, the data can be compressed in memory pages of the proxy server and redirected to an alternative backup disk location. The proxy server can also include a differential engine that identifies changes to the virtual machine disk at the block level since the last full backup. The differential engine can advantageously leverage memory pages of the proxy server to compare differences between signatures of blocks of the last full backup with signatures of new blocks. Subsequently, only blocks with non-matching signatures are processed for backup.",
	"url": null,
	"owner": "Vizioncore, Inc.",
	"publication_number": "08375003",
	"publication_date": "2013-02-12",
	"application_number": "13244187",
	"application_date": "2011-09-23",
	"tags": null,
	"slug": "backup-systems-and-methods-for-a-virtual-computing-environment",
	"match_type": "abstract"
},
{
	"name": "Configuring and controlling wagering game compatibility",
	"summary": "",
	"abstract": "A wagering game system and its operations are described herein. In some embodiments, the operations can include determining that a secondary wagering game application is compatible with a primary wagering game application, wherein compatibility is based in-part on an ability of the primary wagering game application to provide wagering game information to the secondary wagering game application via an application programming interface. The operations can also include enabling the secondary wagering game to present a secondary wagering game in connection with a primary wagering game controlled by the primary wagering game application.",
	"url": null,
	"owner": "WMS Gaming, Inc.",
	"publication_number": "08926418",
	"publication_date": "2015-01-06",
	"application_number": "13744892",
	"application_date": "2013-01-18",
	"tags": null,
	"slug": "configuring-and-controlling-wagering-game-compatibility",
	"match_type": "abstract"
},
{
	"name": "Open class noun classification",
	"summary": "",
	"abstract": "A method of semantically classifying a data set of open class nouns and a system for executing the method. The method includes loading, by a processing device, a data set comprising one or more open class nouns from a computer readable medium operably connected to the processing device; extracting, by the processing device, the one or more open class nouns from the data set; for each open class noun, querying, by the processing device, one or more application programming interfaces (APIs) to produce one or more results; deriving, by the processing device, a confidence score for the data set based upon the one or more results; and determining, by the processing device, a classification for the data set based upon the derived confidence score.",
	"url": null,
	"owner": "Xerox Corporation",
	"publication_number": "08195458",
	"publication_date": "2012-06-05",
	"application_number": "12858168",
	"application_date": "2010-08-17",
	"tags": null,
	"slug": "open-class-noun-classification",
	"match_type": "abstract"
},
{
	"name": "System and method for managing digital certificates on a remote device",
	"summary": "",
	"abstract": "A system and method for managing a digital certificate associated with a remote device is provided. The method includes providing a Web Service Application Programming Interface (API) and communicating digitally between the Web Service API and a remote device, including one of requesting the remote device to perform a task associated with managing digital certificates, and responding to a request from the remote device for performing a task associated with managing digital certificates.",
	"url": null,
	"owner": "Xerox Corporation",
	"publication_number": "08261080",
	"publication_date": "2012-09-04",
	"application_number": "11786660",
	"application_date": "2007-04-12",
	"tags": null,
	"slug": "system-and-method-for-managing-digital-certificates-on-a-remote-device",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for designing an embedded system for a programmable logic device",
	"summary": "",
	"abstract": "Method and apparatus for designing an embedded system for a programmable logic device (PLD) is described. Parameters specific to the embedded system are obtained. Source code files that use the parameters to define configurable attributes of the base platform are generated. A software definition and a hardware definition are obtained. The software and hardware definitions each use an application programming interface (API) of the base platform to define communication between software and hardware of the embedded system. An implementation of the embedded system is automatically built for the PLD using the source code files, the software definition, and the hardware definition.",
	"url": null,
	"owner": "Xilinx, Inc.",
	"publication_number": "07917876",
	"publication_date": "2011-03-29",
	"application_number": "11729206",
	"application_date": "2007-03-27",
	"tags": null,
	"slug": "method-and-apparatus-for-designing-an-embedded-system-for-a-programmable-logic-device",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for communicating documents via an autonomous multiple-function peripheral device",
	"summary": "",
	"abstract": "A multiple-function peripheral device includes a packet-switched network interface and an autonomous application programming interface. The application programming interface requests image information from a remote server via the packet-switched network interface in a first mode of operation. The application programming interface sends image information to a remote device via the packet-switched network interface in a second mode of operation.",
	"url": null,
	"owner": "Xpedite Systems, LLC",
	"publication_number": "07804823",
	"publication_date": "2010-09-28",
	"application_number": "12207310",
	"application_date": "2008-09-09",
	"tags": null,
	"slug": "systems-and-methods-for-communicating-documents-via-an-autonomous-multiplefunction-peripheral-device",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for communicating documents via an autonomous multiple-function peripheral device",
	"summary": "",
	"abstract": "A multiple-function peripheral device includes a packet-switched network interface and an autonomous application programming interface. The application programming interface requests image information from a remote server via the packet-switched network interface in a first mode of operation. The application programming interface sends image information to a remote device via the packet-switched network interface in a second mode of operation.",
	"url": null,
	"owner": "Xpedite Systems, LLC",
	"publication_number": "08116303",
	"publication_date": "2012-02-14",
	"application_number": "12860899",
	"application_date": "2010-08-22",
	"tags": null,
	"slug": "systems-and-methods-for-communicating-documents-via-an-autonomous-multiplefunction-peripheral-device",
	"match_type": "abstract"
},
{
	"name": "Centralized location broker",
	"summary": "",
	"abstract": "A centralized location system includes a location update application programming interface (API) to receive varying types of location inputs for a user from at least one location-providing application. A memory stores a location of the user and the location inputs, wherein the location update API periodically updates in the memory the location inputs when location updates are received from the at least one location-providing application. A location export API, upon request from a location-based service application, processes the location inputs to estimate a location of the user, which location estimate replaces the stored location in memory and is sent to the location-based service application. A user interface enables the user to specify a location granularity for at least one of the at least one location-providing application and the location-based service application.",
	"url": null,
	"owner": "Yahoo! Inc.",
	"publication_number": "08045995",
	"publication_date": "2011-10-25",
	"application_number": "11755998",
	"application_date": "2007-05-31",
	"tags": null,
	"slug": "centralized-location-broker",
	"match_type": "abstract"
},
{
	"name": "Formal language and translator for parallel processing of data",
	"summary": "",
	"abstract": "The present invention, in an example embodiment, provides a special-purpose formal language and translator for the parallel processing of large databases in a distributed system. The special-purpose language has features of both a declarative programming language and a procedural programming language and supports the co-grouping of tables, each with an arbitrary alignment function, and the specification of procedural operations to be performed on the resulting co-groups. The language's translator translates a program in the language into optimized structured calls to an application programming interface for implementations of functionality related to the parallel processing of tasks over a distributed system. In an example embodiment, the application programming interface includes interfaces for MapReduce functionality, whose implementations are supplemented by the embodiment.",
	"url": null,
	"owner": "Yahoo! Inc.",
	"publication_number": "07921416",
	"publication_date": "2011-04-05",
	"application_number": "11551336",
	"application_date": "2006-10-20",
	"tags": null,
	"slug": "formal-language-and-translator-for-parallel-processing-of-data",
	"match_type": "abstract"
},
{
	"name": "Method and a communication platform for packet communication between a service provider in a first network and a radio communication device in a second network",
	"summary": "",
	"abstract": "The present invention relates to a communication platform for packet communication between at least one service provider in a first network and a radio communication device in a second network, the second network comprises a first network node provided to, at least partly, handle communication between the radio communication device and a gateway located in the second network. The gateway is provided to handle communication between the second network and the communication platform, and the communication platform comprises an application programming interface provided to handle two-way communication between the service provider and the radio communication device.",
	"url": null,
	"owner": "YAHOO! Inc.",
	"publication_number": "07848233",
	"publication_date": "2010-12-07",
	"application_number": "11571391",
	"application_date": "2005-06-15",
	"tags": null,
	"slug": "method-and-a-communication-platform-for-packet-communication-between-a-service-provider-in-a-first-network-and-a-radio-communication-device-in-a-second-network",
	"match_type": "abstract"
},
{
	"name": "Recording and publishing content on social media websites",
	"summary": "",
	"abstract": "Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for recording and publishing content on social networking websites and other websites include providing an imbedded link on a social networking webpage to media recorder software stored on an external server system, invoking the media recorder software within a displayed instance of the social networking webpage through an application programming interface for the social networking webpage, receiving a video stream defining video captured using the media recorder software at the external video management server system, generating and storing a video file using the received video stream at the external server system, selecting the stored video file for distribution via one or more communication networks, and providing the stored video file for display within displayed instances of webpages hosted on external web server systems.",
	"url": null,
	"owner": "Youtoo Technologies, LLC",
	"publication_number": "08311382",
	"publication_date": "2012-11-13",
	"application_number": "13475765",
	"application_date": "2012-05-18",
	"tags": null,
	"slug": "recording-and-publishing-content-on-social-media-websites",
	"match_type": "abstract"
},
{
	"name": "Apparatuses, methods and systems for a distributed object renderer",
	"summary": "",
	"abstract": "Software on a server receives a render request from a queue database. The software determines the render process requirements for the render request. The software queries a user profile database for render data based on the render process requirements. The software transmits a request to provide render data to a client device, if render data is not available in the user profile database. The software receives a response from the client device, including the requested render data. The software generates the rendered image, using the rendered data. The software creates a publishing element from the rendered data and a publishing template. And the software publishes the publishing element to the a newsfeed using an application programming interface (API).",
	"url": null,
	"owner": "Zynga Inc.",
	"publication_number": "08754905",
	"publication_date": "2014-06-17",
	"application_number": "13244694",
	"application_date": "2011-09-26",
	"tags": null,
	"slug": "apparatuses-methods-and-systems-for-a-distributed-object-renderer",
	"match_type": "abstract"
},
{
	"name": "Cross-promotion API",
	"summary": "",
	"abstract": "A system and computer-implemented method for promoting an electronic game of electronic games is provided. A user interface module is configured to receive an input from a user relating to playing a first and second electronic game. A processor-implemented association engine, operatively coupled to the user interface, is configured to associate user attributes of the first and second electronic games to the user based on the input. An application programming interface (API) is configured to associate a user attribute of a third electronic game different from the first and second electronic games, the API configured to associate based, at least in part, on rule engine implemented by the API and at least one of the user attributes of the first and second electronic games and game data of the third electronic game.",
	"url": null,
	"owner": "Zynga Inc.",
	"publication_number": "08814703",
	"publication_date": "2014-08-26",
	"application_number": "13793712",
	"application_date": "2013-03-11",
	"tags": null,
	"slug": "crosspromotion-api",
	"match_type": "abstract"
}]