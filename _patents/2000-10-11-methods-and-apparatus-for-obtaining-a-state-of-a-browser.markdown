---
title: Methods and apparatus for obtaining a state of a browser
abstract: Mechanisms and techniques provide the system that allows the server computer system to capture the complete state of the browser process performing on a client computer system in a remote manner. The capture of such state information by a server computer system is useful, for example, to allow participants to a shared collaborative communications session to join such a session prior to initiation of such a session, or at any point in time during the lifetime of the collaboration session. In operation, the system of the invention can be initiated by browser process performing to the client computer system which obtains the capture process, for instance, as an applet. The capture process can extract from the browser process state information associated with the browser containing document contained within the browser. The capture process can store such state information in a content object on the client computer system and can format and transmit the content object from the capture process on the client computer system to a server computer system in order to maintain a state of the browser in the server computer system. By capturing the state of the browser on the client computer system via the capture process on the client computer system, the complete image of the state information of the browser, including any user supplied information, can be obtained and returns to the server computer system, thus allowing the server computer system, for example, to have participants to a collaboration session join the collaboration session prior to its existence or at any point during the lifetime of the collaboration session without having to navigate through the entire collaboration session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07299403&OS=07299403&RS=07299403
owner: Cisco Technology, Inc.
number: 07299403
owner_city: San Jose
owner_country: US
publication_date: 20001011
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention generally relates to mechanisms and techniques for capturing state information of browser software, and more particularly, to systems and techniques which capture such state information on a client computer system, and package and forward such state information to a server computer system.","The rise in popularity of computer networks such as the Internet has led software application developers to create complex software applications which interact between computer systems over the network. One example of such a software application is a collaboration system which allows multiple Internet browsers (i.e., users controlling such browsers) referred to as participants to partake in a shared web session via a collaboration server. Generally, the collaboration server serves as a point of contact for the participant browsers and manages the shared collaboration session. When supporting one or more collaboration sessions that include multiple web browser participants, the collaboration server allows at least one participant browser to \u201cdrive\u201d or control the shared collaboration session (e.g., one participant browser \u201csurfs\u201d or navigates pages served by the web server) while the other remaining participant browsers are directed to receive a copy of any content information such as web pages as they appear to the controlling participant browser. In this manner, the controlling browser can guide other participant browsers through a shared web session without requiring the other users of other participant browsers to interact with this web browser. This is only one example of collaboration of which there may be other forms.","Generally, upon initiation of a collaboration session, each participant browser identifies itself to the collaboration server and collaboration server begins a process of maintaining URL information associated with the shared web session between the participant browsers and the collaboration server. The purpose for this URL information is so that when other participants join the shared collaboration session, the collaboration server may provide those other participant browsers with the URL information related to the shared collaboration session so those participants can view pages related to that shared session. In a conventional collaboration system, the collaboration server operating in this manner is responsible for maintaining the URL information related to pages that participant browsers visit.","Conventional collaboration techniques suffer from a variety of drawbacks. In particular, in a conventional collaboration server, state information is generally limited to URL information and is collected and maintained within the collaboration server itself. This limits the amount of information that is available during the startup of a collaboration session. For instance, there may be browser state information contained within the participant computer system containing the participant browser that initiates the collaboration session which is unavailable to conventional collaboration servers at the start of such collaboration sessions. Other examples of such state information which does not exist within a conventional collaboration server at the start of a collaboration session may include any cookies within the participant browser, any time sensitive data related to a web page on display within the participant browser, or any other participant supplied information that may be of use in the collaboration session.","As an example, suppose a user of a browser on a client computer system is engaged in a web-based e-commerce session in which that user has an electronic shopping cart containing items that user has selected for purchase. Now suppose that user desires to enter into a collaborative web browsing session with an agent (i.e., a person) associated with the e-commerce web-site. Using conventional collaboration techniques, the agent may not be able to view the current contents of the shopping cart at the beginning of the collaboration session since the collaboration server does not have the necessary access to state information relating to the contents of the users shopping cart as this information may be maintained within the users browser.","In contrast, the present invention overcomes many of the limitations of conventional collaboration systems as related to capturing state and browser session information for browsers involved in a communications session. Generally, the present invention provides techniques and mechanisms which can capture the state of a client computer system including browser state information of a browser executing on such a computer system from within the client computer system itself and can make such information available to a collaboration server at the beginning of a collaboration session.","The system of the invention includes a capture process, which may be a Java applet for example, that performs on a client computer system to capture a snapshot of the state of a browser and any documents within the browser on the client computer system. The capture process can then forward this state information to server computer system for use, for example, in a collaboration system. Since the system of the invention is able to capture client browser and document state information within the client computer system before, for example, initiation of a shared collaboration session, and then is able to send this state information to a server computer system that operates, for example, as the collaboration server, the collaboration server can provide the state information to non-controlling participant browsers on other client computer systems during actual initiation of a shared collaboration session.","More specifically, the present invention provides methods, techniques and mechanisms for obtaining a state of a browser containing a document on a client computer system.","In one embodiment, the method comprises the steps of extracting, from the browser, via a capture process on the client computer system that operates in conjunction with the browser, state information associated with the browser and the document contained in the browser. The capture process may be a Java applet or Active-X control, for example, or may be a separate program from the browser. The method then stores the state information in at least one content object on the client computer system and transmits the content object from the capture process on the client computer system to a server computer system to maintain a state of the browser in the server computer system. In this manner, state information of the browser process is captured on the client computer system itself, allowing for a more accurate and up-to-date representation of the complete state of the client computer system.","In another embodiment, the step of extracting includes the steps of opening an application programming interface from the capture process to the browser process. The application programming interface provides functions to access the state information associated the browser and the document contained in the browser. The state information includes at least one of a document state and a session state associated with the browser. In such an embodiment, the method performs, via the capture process, the functions provided by the application programming interface to access and retrieve the state information on the client computer system from the browser process.","In yet another embodiment, the functions provided by the application programming interface include document access functions to access the document contained in the browser and browser access functions to access the state information associated with the browser. In this embodiment, the step of performing, via the capture process, the functions provided by the application programming interface includes the steps of accessing the document contained within the browser for document tags existing in the document using at least one of the document access functions and copying, into a document content object, the content associated with each document tag accessed from the document.","Document tags may be, for example, HTML tags, commands, constructs, script logic statements or any other identifiable and\/or parsable or otherwise accessible content with a document. Furthermore, the method includes the steps of capturing, via at least one browser access function, at least one application session identifier associated with the document contained in the browser and copying the application session identifier associated with the document into the document content object. Using these techniques, the system of the invention is able to access the contents of all document(s) contained in a browser on the client computer system and is able to store such contents as state information within a content object. Such state information in the content object may include application session identifiers such as application, session or document cookies and\/or URL information related to documents.","In still another embodiment, the document contained in the browser is a hypertext document and the step of accessing includes the step of calling a hypertext access function provided by the application programming interface to obtain each document tag within the document. Also in this embodiment, the step of copying includes the steps of calling a hypertext retrieval function provided by the application programming interface to obtain hypertext content associated with each document tag in the document and placing the hypertext content associated with each document tag in the document into the document content object. To this end, the capture process uses an API to access documents within the browser to access the contents of the documents in order to obtain the complete copy of the content (state information) of the document as well as other browser state information.","In another embodiment, the browser contains multiple documents, each associated with a document container, and the step of performing the functions provided by the application programming interface to access and retrieve the state information is performed on each document in each document container to access and retrieve the state information associated with each document in each document container. In this manner, the browser contains multiple documents, in frames for example, and the system of the invention is able to repetitively collect and gather the content of each document in each container (i.e. each frame).","In an alternative embodiment, the state information includes a document state and a session state associated with a browser, for each document contained in the browser. In this case, the step of storing arranges the document state and the session state associated with a browser, for each document contained in the browser, in a format within the content object, such that the content object associates each document state with a session state associated with the document for each document contained in the browser. The format may be a tree-type data structure or any other type of format that can be used to represent data, such as a linked list, array, string and so forth. In other words, the system of the invention arranges the state information associated with a document and content object data structures such that document content and other information such as URL's and\/or cookies related to the document are stored in an associated manner, such as hierarchically in a tree, within the content object.","In another alternative embodiment, the step of transmitting transmits the content object from the capture process to a collaboration application in the server computer system for distribution to participant browsers. This allows the server computer system to receive the content object which contains the complete state information related to a browser process in any format that is compatible with many types of network communications systems. The server computer system can then re-create or un-format the content object, which may have been transferred as a string, for example.","In another embodiment, the method of the invention includes the steps of detecting an intent to initiate a collaboration session and obtaining the capture process and operating or otherwise performing the capture process to perform the steps of extracting, storing and transmitting such that the capture process captures the state information associated the browser and the document contained in the browser upon initiation of the collaboration session and transmits the state information to the server computer system such that the server computer system can provide the state information to other participants of the collaboration session. In this embodiment then, the browser process detects a requirement to capture state information and obtains the capture process configured according to the invention in order to properly perform the capture process of extracting, storing and transmitting the state information from the client computer system to the server computer system.","In yet another embodiment, the step of obtaining the capture process includes the steps of obtaining a version of the browser containing the document and determining if the version is a first value (e.g., Internet Explorer), and if so, obtaining a first version of the capture process from a first location, and if not, determining if the version is a second value (e.g., Netscape Navigator), and if so, obtaining a second version of the capture process from a second location. Using this method, the system of the invention can use a separate capture process that is specifically designed to properly capture the state of browser process that is produced by various manufacturers, such as Internet Explorer manufactured by Microsoft Corporation or Netscape Navigator manufactured by Netscape Communications Corporation.","In still another embodiment, the capture process is an applet stored on a server and the step of obtaining the capture process includes the step of downloading the applet from the server to the client computer system to capture state information associated the browser and the document contained in the browser.","In an alternative embodiment, in response to detecting an intent to initiate a collaboration session, the method performs the step of setting a document property of each document contained in the browser to a common value. This embodiment allows the browser process to enable an application programming interface to be able to properly read the contents of each document contained in the browser by setting one or more document properties of the documents to the common value.","In yet another alternative embodiment, the step of setting a document property of each document contained in browser to a common value includes the step of performing script logic to alter a document domain property of each document contained in the browser to a common domain.","In other method embodiments of the invention, methods are provided for performing collaboration between participant browsers. One such method embodiment comprises the steps of obtaining state information from a browser process performing on a first client computer system, from within the first client computer system and transmitting the state information from the client computer system to a server computer system. The server computer system then performs the operation of distributing the state information from the server computer system to at least one participant browser on a second client computer system to allow the participant browser on the second client computer system to re-create the state of the browser process performing on the first client computer system. This embodiment enables the participant browser on the second client computer system to enter a collaboration session with the browser process of the first client computer system at a point in the collaboration session defined by the state information.","In an alternative to the above embodiment, the steps of a obtaining, transmitting and distributing are performed prior to the initiation of the collaboration session between the browser process performing on the first client computer system and a collaboration server. Accordingly, the system of the invention allows state information, as it exists in the browser process on the first client computer system prior to user initiation of the collaboration session, to be obtained and provided to a server process which can distribute the state information to participants who formerly requested to join the collaboration session. This avoids those participants from periodically having to check to see if the collaboration session is in existence before requesting to join the collaboration session.","In an another alternative embodiment the steps of obtaining, transmitting and distributing are performed after the initiation of the collaboration session between the browser process performing on the first client computer system and a collaboration server. That is, such operations are performed to capture state information during the lifetime of an active collaboration session. In such an embodiment, the state information is interm state information that conveys a complete state of the browser process on the first client computer system as it exists during the existence of the collaboration session. This embodiment thus allows the invention to capture state information about a browser process involved in a collaboration session, such as the controlling browser process, and then allows the invention to provide this interm state information to a server computer system which can distribute the interm state information to new participant browsers which recently requested to join the already active collaboration session. These new participant browsers are thus immediately brought up-to-date with the current state of the collaboration session upon joining the collaboration session.","The invention also includes computer systems configured to perform all of the method operations in embodiments disclosed herein. Specifically, according to one embodiment of the invention, a computer system is provided that includes a memory configured with a browser containing at least one document, an input-output mechanism, a processor and an interconnection mechanism coupling the memory, the processor and the input-output mechanism. In such a computer system configuration, the memory is further configured with a capture process, that when performed on the processor, causes the processor to obtain a state of the browser containing the at least one document by performing the operations of extracting, from the browser, state information in the memory associated the browser and the at least one document contained in the browser and storing the state information in at least one content object in the memory and then transmitting the content object to a server computer system, via the input-output mechanism, to maintain a state of the browser in the server computer system.","Generally, other embodiments of the invention include a computer system configured with web browser software and a capture process as disclosed herein to perform all of the methods disclosed herein via software control, or via hardware and\/or software configured to perform those methods and the techniques disclosed herein as the invention.","Other embodiments of the invention that are disclosed herein include software programs to perform the operations summarized above and disclosed in detail below. More particularly, a computer program product is disclosed which has a computer-readable medium including computer program logic encoded thereon to provide the methods for capturing the state of a browser according to this invention and its associated operations. The computer program logic, when executed on at least one processor within a computing system, causes the processor to perform the operations (e.g., the method embodiments above, and described in detail later) indicated herein. This arrangement of the invention may be provided as software on a computer readable medium such as an optical medium (e.g., CD-ROM), floppy or hard disk or other such medium such as firmware in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit (ASIC). The software, firmware or other such configurations can be installed onto a computer system to cause the computer system to perform the techniques explained herein as the invention.","It is to be understood that the system of the invention can be embodied strictly as a software program, as software and hardware, or as hardware alone. Is also to be understood that the browser state capturing techniques and mechanisms of this invention typically perform (e.g., execute, run, or are otherwise operated) on client computer system coupled to a computer network.","By capturing complete state information on a client computer system, and wherein the state information may include user supplied information, the state information includes the most up-to-date possible information concerning the current state of communications as it exists within the browser process. In the context of collaboration systems, the state information may be provided by the invention back to the server computer system to allow the server computer system to distribute such state information to participant browsers, thus allowing the participant browsers to join the collaboration session at anytime, either during an existing collaboration session, or when such a collaboration session begins.","The invention may be embodied in systems, software and\/or hardware products designed, developed and\/or manufactured by Cisco Systems, Inc. of San Jose, Calif.","The present invention provides techniques and mechanisms that capture state information related to a browser software process that contains one or more documents on a client computer system. The invention captures such state information from within the client computer system and then transmits the state information to a server computer system. Such state information can be used, for example, by collaboration servers which provide the state information to participant browsers which desire to join the collaboration session, either prior to the actual initiation of the collaboration session, or at anytime during the lifetime of an existing collaboration session. This allows, for example, a participant browser to join a pre-existing collaboration session using up-to-date state information captured from the controlling browser on a client computer system, while at the same time not requiring the participant browser to navigate through successive web pages, beginning with the initial web page of the collaboration session, in order to catch up to the most recent web page of the collaboration session.","In part, the system of the invention provides a capture process which a server can upload to a client computer system. When the client computer system performs the capture process, the capture process is able to extract, from a browser of the client computer system that contains one or more documents, state information such as document content (e.g., HTML code), user supplied state information (e.g., user supplied form field data), URLs and\/or cookies associated with that browser and associated with any documents contained within the browser. The capture process can store the state information in a content object and can format and transmit the content object from the capture process on the client computer system to a process such as a \u201cservlet\u201d on a server computer system. This allows the server computer system to maintain a state of the browser within the server computer system.","With respect to collaboration systems, as noted above, the system of the invention allows a server configured as a collaboration server to obtain the state information related to a controlling participant browser of the collaboration session, for example, when the collaboration session is actually initiated. This state information may then be distributed to other participant browser processes to allow those participants, for example, to join a collaboration session before the session is fully initiated. As another example, by capturing state information of the browser process including any user supplied information upon the client computer systems, a server computer system can supply such state information to a new participant of a shared collaboration session that has been underway for some time, without requiring the new participant to navigate through the entire shared collaboration session web pages up to the point of the current state (i.e. the most recent web page) of the collaboration session. In other words, participants can join a collaboration session at anytime beginning on the current page of the collaboration session, without having to navigate through prior pages in order to build up the proper state of the collaboration session. This is not possible in conventional collaboration systems since a conventional collaboration server is responsible for collecting URL information concerning the controlling browser process (as opposed to a capture process in this invention) and is therefore limited in its ability to maintain accurate state information during the ongoing lifecycle of a collaboration session as that state information changes within the controlling browser process.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1","b":["100","100","130","120","122","140","110","120","122","125","127","130","150","120","120","122","130","130","125","127"]},"Examples of the browser processes  through  include the Netscape Navigator web browser software manufactured by Netscape Communications Corporation of Mountain View, Calif., and the Internet Explorer web browser software manufactured by Microsoft Corporation of Redmond, Wash. Preferably, for purposes of this invention, the most recent versions of browser processes  through  are used in order to support in fully exploit the functionality of the invention as explained herein.","According to this invention, when the capture process  performs on a client computer system such as client computer system  as in this example, the capture process  retrieves and captures state information  from the client computer system  and forwards the state information  to the server computer system . Such state information  may be useful, for example, to support a shared collaboration session between the browser processes  through .","By way of example, assume that the server computer system  is a collaboration server which allows users (people, not shown) to interact via respective browser processes  through  as participants to a shared collaboration session (also not specifically shown) which is served by the server computer system . This example server computer system  uses the domain name \u201cCOLLABORATION.COM\u201d and may be reached on the network  via browser processes  through  referencing a hypertext link the URL \u201chttp:\/\/www.collaboration.com.\u201d Also assume that the browser process  is the controller of the shared collaboration session and the browser processes  through  are non-controlling participants to the shared collaboration session.","To begin the process of collaboration, a user of the browser process  on the client computer system  navigates (i.e., accesses web pages) to a collaboration initiation web page (not shown) that the server computer system  serves to the browser process . At this point the browser process  and the server computer system  have not yet entered into the shared collaboration session. The collaboration initiation page may, for example, be a web page having form fields which prompt the user of the browser process  for user collaboration authentication information such as a name, password, address and so forth. To establish a collaboration session and begin collaboration, the server computer system  must obtain the user collaboration authentication information from the collaboration initiation page in order to authenticate the user of the browser process  as a valid controller of the collaboration session prior to its initiation.","In this example, during the process of the user completing the collaboration initiation page (i.e., as the user enters his or her collaboration authentication information such as his or her name, password, etc.), the server computer system  also serves (e.g., uploads) the capture process  to the client computer system . The capture process  may be a Java applet embedded in the collaboration initiation page, for example, or may be any other type of process which may be uploaded and executed, interpreted, run or otherwise performed on the client computer system . Once the capture process  is loaded onto the client computer system  and begins to perform, the capture process  is able to capture the state of the browser process  by gathering, for example, any uniform resource locators (URLs), cookies (application and\/or session cookies) and any documents (e.g., web pages, applets, scripts or other information) associated with (e.g., loaded into) the browser process .","The capture process  is also able to capture and store, as state information , any user supplied information within the form fields of the collaboration initiation page. The capture process  stores such state information  and transmits it back to the server computer system . The capture process  performs its processing just prior to the user's initiation of the collaboration session a point when the user attempts to submit the collaboration authentication information to the server computer system .","When the server computer system  obtains the state information , it can then serve the state information  to the browser processes  and  on the other client computer systems  and , which may have been waiting to join a shared collaboration session (i.e., browsers  and  may have previously requested to join a collaboration session, which still does not yet actually exist). That is, the state information  allows the browser processes  and  to establish themselves as participants to a future shared session that is in the process of being created with the server computer system , prior to the server computer system  actually receiving a request from the browser process  to actually establish the shared session.","Once the capture process  on the client computer system  completes transmission of the state information  to the server computer system , the browser process  thereafter operates as in a conventional collaboration system and proceeds to submit the user supplied collaboration initiation information (i.e., the user completed form fields) to the server computer system  which then establishes a shared collaboration session between the browser process  (as the controller of the collaboration session) and the server computer system . Prior to establishment of the actual collaboration session, since the server computer system  has already obtained the state information of the browser process  and has forwarded this state information  to the browser processes  and , the server computer system  can immediately join the browser processes  and  into the collaboration session without requiring further action on their part (i.e., without requiring the users of browser processes  and  to periodically attempt to join the shared session).","It is important to note here that the capture process  captures and transmits the state information  to the server computer system , out-of-band from and in addition to, the browser process  supplying user supplied collaboration initiation information in a formal request to initiate collaboration sent to a collaboration process (not shown) on the server computer system . As such, the collaboration server  receives the state information  conveying the state of the browser process  from the capture process , prior to receiving a request from the browser process  to initiate collaboration. Since the server computer system  then provides the browser processes  and  with this state information  (containing a complete snapshot of the state of the browser process  immediately prior to initiation of the collaboration session), the browser processes  and  can be considered participants to the shared collaboration session prior to its actual establishment.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 2","b":["120","125","125","220","221","223","125","210","212","1","3","230","240","250","220","230","120","220","230","240","125","120"]},"The example client computer system  also contains the capture process  which includes an extract engine , a content object , and a transmit engine . As with the browser process , the capture process is preferably a software process that resides in a memory system in the client computer system . The client computer system  can execute, run, or otherwise perform both the browser process  and the capture process  in memory using one or more processors (also not specifically shown) within the client computer system . The capture process  can interact with the browser process  via an inter-process communications (IPC) channel . During operation, the capture process  obtains, gathers or otherwise captures state information  related to the browser process  as explained herein and stores this state information  within the content object . Thereafter, the capture process  formats and transmits this content object  containing the state information  of the browser process  to the server computer system , which can use this information, as explained above, to allow other browsers (e.g., ,  in ) to join as participants to a collaboration session that is about to begin.","Within the browser process , the display component  includes a plurality of containers  through , each of which includes a respective document  through  (DOC through DOC). The containers  through  may be HTML frames, for example, which respectively display the documents  through . A typical display component  within a browser such as Internet Explorer or Netscape Navigator maintains containers such as  through  as a series of hierarchically related data structures. In this example, container  (CONTAINER ) contains document  (DOC ) and is a parent container to child containers  and  (CONTAINER  and CONTAINER ) which contain respective documents  and  (DOC  and DOC ). In this example, the document  includes a collaboration initiation button  labeled \u201cCALL,\u201d the purpose of which will be explained in more detail later. Each document  through  may be a hypertext document written in a hypertext markup language (e.g., HTML, XML or the like) that includes one or more document tags such as HTML\/XML statements, instructions, constructs, script logic (e.g., JavaScript) statements, commands and so forth.","The session state information  within the browser process  contains any document or application session identifiers (not specifically shown) such as document or application session cookies. The session state information  may also contain any session cookies related to the communications session that exists between the browser process  and the server computer system . Each document  through  (and possibly the containers  through ) contained within the browser process  has an associated URL which uniquely identifies that document or container. The browser process  also maintains such URLs as part of the session state information . Generally then, the display component  of the browser process  maintains and displays to the user a plurality of web pages in frames represented in  by the documents  through  in the containers  through , and each web page and\/or frame has an associated URL and may have one or more associated cookies which the browser process  stores in the session state .","The API  generally provides a software interface to callable functions within the browser process  which allows external access to the browser process  from other processes, such as the capture process . Of particular interest to this invention, the API  provides functions to allow external access to: i) state information associated with the browser such as cookies and\/or URLs within the session state information  and ii) other state information such as the entire contents of the documents  through  contained within the containers  through  in the browser process . Generally, the term \u201cstate information\u201d may include the contents (e.g., HTML code, script content, hypertext tags, etc.) of one or more documents contained within the browser process , as well as any currently displayed user supplied form field information, application or session cookies, URL information, scripts and any other browser or document content information that relates to or can convey the complete state of the browser and\/or its associated documents at any point in time.","In one example embodiment, the API  is the \u201cIHTMLDOCUMENT2\u201d API interface provided by Internet Explorer version 5.0, which as will be explained, is used by the capture process  configured according to this invention to gather the session state information  from the browser process , the contents\/state of its containers (e.g.,  through ) and that contents\/state of any associated documents (e.g.,  through ) contained therein.","According to an example operation of the configuration shown in , a user (not shown) interacts with the browser process  to load and display the various documents  through  (e.g., successively obtains web pages represented by documents  through ). The purpose of this indication to select a user can obtain the web page (document  in this example) that allows the user to initiate collaboration session between the browser process  and the server computer system . During the process leading up to collaboration, the browser process  caches (i.e., in memory) and displays the various documents  through  received from the web server computer system . Besides the documents  through , the browser process  may also receive one or more identifiers which include URLs of the documents  through  and which may include one or more application or session cookies.","In this particular example, the document  \u201cDOC\u201d is a collaboration initiation form which includes the collaboration initiation button  labeled \u201cCALL.\u201d To begin the collaboration process, the user of the browser process  may select or \u201cclick\u201d the collaboration initiation button  via his or her mouse, for example, to initiate a collaboration session between the browser process  and the server computer system .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 3","FIG. 3"],"b":["401","406","125","125","125","213","130","401","406","125","125","130","401","406","401","406","212"]},"In step , the browser process  detects a user's intent to initiate a collaboration session. In this example, this event is detected when the user selects the collaboration initiation button . This is not meant to be limiting, however, and another event such as the user simply visiting a collaboration web page via the browser process  may serve to trigger step .","In step , once the browser process  detects the user's intent to enter a collaboration session (preferably as the controlling participant of the collaboration session), the browser process  loads a callback form (i.e., another web page containing form fields, not specifically shown) that, among other content, contains script logic (e.g., JavaScript) configured according to the invention to carry out the processing steps  to .","Generally, the callback form (document  may also be considered a callback form for purposes herein) includes one or more form fields that prompt the user to enter collaboration authentication information such as a username and\/or a password that the server computer system  (a collaboration server in this example) can use to authenticate that the user of the browser process  is allowed to create a collaboration session. Once the user enters the required collaboration authentication information on the callback form, the user can submit the user supplied collaboration authentication information, for example, buy clicking a submit button on the callback form. As an example, document  for a callback form, the user of browser process  would enter his or her collaboration authentication information and would select the call button  in order to submit this information to the server computer system .","According to this invention, before the browser process  actually submits the collaboration identification information entered by the user into the form fields of the callback form to the server computer system  (i.e., before a formal request to begin collaboration is sent from the browser process  to the server computer system ), the browser process  continues operation according to the invention by performing script logic embedded in the callback form to carry out steps  through .","Generally, steps  through  cause the browser process  to configure itself to allow state information to be obtained by the capture process , which is then loaded and launched from the browser process  in step , as explained below.","More specifically, in step , the browser process  performs script logic to set a document property of each document  through  contained in the browser process  to be a common value. In one embodiment, the browser process  (e.g., using JavaScript embedded within the callback form to set a document property of each document  through , called \u201cdocument.domain,\u201d to contain the value of the domain of the collaboration server computer system . In this particular example, step  sets the \u201cdocument.domain\u201d property of each document  through  to \u201cCOLLABORATION.COM.\u201d","Next, in step , the script logic in the callback form causes the browser process  to determine what version of the browser process  is currently performing (i.e., executing). As an example, the browser process  may be Internet Explorer version 5.0, or the user may be using Netscape Navigator version 4.0 as the browser process . Assume for this example that the browser process  is Internet Explorer version 5.0. In step  then, the script logic determines this fact. The script logic in the document  can determine the version of the browser process  in step  using known techniques, such as by calling a function within the API  to return the version of the browser process .","Once the version of the browser is known, in step , the browser process  can further perform script logic within the callback form to obtain (e.g., download), from the server computer system , both: i) a hidden form and ii) the proper version of the capture process  based upon the version of the browser process obtained in step  that is in use on the client computer system . In one embodiment, the hidden form that the browser process  downloads in step  can contain the proper version of the capture process  embedded within the hidden form. As will be explained further, the hidden form may be an HTML form field document that is hidden from display to the user of the browser process . In a preferred embodiment, the capture process  is a Java applet embedded within this hidden form.","The particular version of the capture process  which the browser process  downloads from the server computer system  in step  depends upon the version of the browser process  that is in use on the client computer system  (as determined in step ). For example, if the browser process  in use of the client computer system  is Internet Explorer version 5.0, then the processing in step  obtains a version of the capture process  that is compatible with the application programming interface  provided by Internet Explorer version 5.0. However, if the browser process  that is in use on the client computer system  is Netscape Navigator, then the processing in step  obtains a different version of the capture process  from the server computer system  which is compatible within API  provided by Netscape Navigator. In either case, as will be explained shortly, the capture process  uses the hidden form that the browser process  also obtains in step  to return state information obtained from the browser process  on the client computer system  to the server computer system .","Once the proper version of the capture process  is loaded onto the client computer system  (step ), in step , the browser process  performs script logic to begin the performance of, or launch, the capture process  (i.e., to begin execution or interpretation of the capture process applet).",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 4","b":["410","412","150","120"]},"Generally, in step , the capture process  interacts with the browser process  to extract state information associated with both the browser process  and at least one document (e.g. one or more of documents  through ) contained within the browser process . Next, in step , the capture process  stores the state information obtained in step  in a content object . Finally, in step , the capture process  transmits the content object  from the capture process  to the server computer system , using the hidden form obtained by the browser process  in step , in order to maintain a state of the browser process  within the server computer system .",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 5","FIG. 5"],"b":["420","427","150","125","210","212","125","130"]},"In step , the capture process  opens the API  to the browser process  thereby opening intra-process communications channel  () to allow the capture process  to call functions supported by the API  within the browser process . In the example embodiment illustrated in , assuming that the browser process  is Internet Explorer version 5.0 and the capture process  is a Java applet, in step , the capture process  exposes the \u201cIHtmlDocument2\u201d component API  of Internet Explorer as a \u201cwrapper\u201d to the Java applet capture process  to provide access to functions within the Internet Explorer in order to obtain browser and document state information.","Next, in steps  through , the capture process  begins a repetitive process of capturing and storing the entire state of each document (e.g., documents  through ) contained within the browser process  into the content object .","Specifically, in step , the capture process  begins accessing a document (e.g., document ) in the browser process  for document tags using document access functions provided by the API . To do so, the API  provides functions to allow the capture process  to access and view the contents (i.e., state) of the particular documents  through  maintained by the browser process .","As referred to herein, the term \u201cdocument tags\u201d refers to identifiable statements or instructions such as HTML tags contained within the documents  through  in the browser process . In step  then, to access a document, the capture process  uses a function such as \u201cget HTML\/tag\u201d supported by the API  to sequentially obtain the various tags within a document (e.g., document ) and can uses a function such as \u201cget outerhtml\u201d to obtain the remaining HTML contents, including any script logic (e.g., JavaScript) or other content or data associated with the tag obtained using the \u201cget HTML\/tag\u201d function. Using such functions, step  allows the capture process  to access and obtain the entire HTML contents, tag by tag, for a document (e.g., one of documents  through ) in the browser process .","Once each tag and the tag contents are obtained in this manner, the capture process  performs step  which copies the content associated with each document tag (as well as the document tags themselves) into a document content object (not shown in this figure), which is a data structure within the content object . That is, once the capture process  obtains the tags and associated HTML tag contents for a document (e.g., ) in step , step  copies the HTML tags and associated contents into a document content object within the content object . As will be explained shortly, the content object  is a data structure of document content objects which the capture process  can use to store the state information of the browser process  such as HTML document contents, document and\/or container URLs, application and\/or cookies and any other state information.","Once the capture process  as copied the entire contents (i.e., state information) of a document (e.g. ) into a content object, the capture process  performs step  in order to capture any application or document session identifiers (e.g. application, session, or document cookies) as well as any URLs associated with the document and then stores such identifiers in the document content object associated with that document within the content object . Essentially, the capture process performs step  to gather any other state information related to the document been processed besides the actual document content, which was obtained in steps  and . At this point, the content object , whose details will be explained shortly, contains an entire snapshot of the state information related to one of the documents contained in the browser process  as a document content object.","Next, the capture process in step  determines if other documents remain in the browser process  that have not been processed according to steps  to . If, in step , the capture process  determines that other documents remain to be processed, the capture process performs step  to obtain the next document within the browser process  in then returns to perform steps  to  on this document. As is evident from the flow of processing steps  to , the capture process  repeats the steps for each document contained in the browser process . Accordingly, after the capture process  is processed all documents contained within the browser process , the content object  () will contain a document content object contained complete state information of all documents within the browser process .",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 6","FIG. 6","FIG. 5"],"b":["201","150","201","421","425"]},"As illustrated, the content object  is arranged as a tree structure in which each document  through  in the browser process  has a corresponding document content object ,  and  as a leaf node in the tree. Stemming from each document content object , ,  are specific content objects  through ,  through  and  through  which the capture process  uses to store various portions of state information related to the documents  through  that the capture process  discovers and accesses (i.e. via steps  through  in ) in the browser process .","By way of example, the document content object  represents the various portions of state information related to document . For instance, the HTML content object  is a data structure which contains the entire set of HTML tags, statements, instructions, scripts and\/or code for the document  which the capture process  obtains via steps  and  in . Likewise, after the capture process  processes step  in , the URL content object  will contain the URL of the document  and the cookies content object  will contain any cookies associated or related to the document  that the capture process  discovers as existing within the browser process .","Returning attention now to the processing steps in , in step , once the capture process  has processed all of the documents  through  according to steps  to , step  causes the capture process  to determine if no un-accessed documents remain in this processing proceeds to step .","In step , the capture process  encodes the content object  that contains all of the document content objects (e.g.,  through  in ) for each document  through  in the browser process  as a content string. In other words, the capture process  encodes the content object  which comprises a number of hierarchically related content object data structures into a single text string of information.","Next, in step , the capture process  populates the hidden form, obtained by the browser process  in step , with the content object string and submits or transmits the content object string over the network  () to a process called a servlet (not shown) that performs on the server computer system . That is, in step , the capture process  transmits the content object from the capture process on the client computer system  to the server computer system  to allow the server computer system  to maintain the state of the browser for use by other participants that have requested to join the collaboration session which is about to be initiated.","In this manner, the system of the invention offloads majority the processing operations required to capture the state of the browser process in a client computer system. In doing so, a collaboration servers such as the server computer system  alleviates itself the burden of capturing such state information on its own. Instead, by providing the capture process  of this invention to a client computer system upon which the capture process  performs to capture all required state information related to the browser process, the server computer system  may not be concerned with handling such processing requirements. Instead, the server computer system merely awaits return of the state information  created as explained above. Once the server computer system  obtains the state information  which depicts the state of the browser process  immediately prior to the user and initiating a collaboration session, the server computer system  can use the state information  to allow other participant browsers such as browser processes  and  to join the collaboration session about to begin.","Moreover, the processing of the invention as explained above provides an extremely robust capture mechanism which can capture the state of the browser process . Conventional collaboration systems not equipped with the system of the invention are limited in that they are unable to capture, for instance, user or participant computer based state information. In other words, the system of the invention captures state information within the client computer system  during initiation of collaboration, and then forwards such browser state information to the client computer system  out of band, or via a separate communications message (e.g., the content object string) in addition to the standard request to initiate collaboration.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 7","FIG. 1","FIG. 1"],"b":["120","500","501","502","503","503","125","150","500","503","501","125","150","502","120","130","140","120","110"]},"Those skilled in the art will understand that there can be many variations made to the operations, techniques and mechanisms explained above while still achieving the same objectives of the invention. Such variations are intended to be covered by the scope of this invention.","As an example of such a variation of the aforementioned example descriptions, it is to be understood that the capture processing of this invention may be performed periodically during the existence or lifetime of a collaboration session having multiple participants. That is, while the former example explanation explains the operation of the invention just prior to the initiation of the collaboration session, the techniques of the invention can be employed periodically during a collaboration session to capture the state of the controlling browser process , as the controlling browser process of the collaboration session (or for any participant browser, for that matter).","In doing so, the server computer system  thus can periodically receive a snapshot of the state information of a browser process  as the browser process controls the collaboration session. Such interm state information (where the word interm implies the state information of a browser process  that controls a currently existing collaboration session) is valuable, for instance, so that the server computer system  can supply a new participant browser to an existing collaboration session with the interm state information. This allows the new participant browser to immediately \u201ccome up to state\u201d with the current state of the collaboration session, without having to navigate through successive former pages of the collaboration session to eventually reach the point of the current page of collaboration session.","Since the state information provided from the client computer system  to the server computer system  as explained herein contains the current state of the controlling browser of the collaboration session (including, for example, cookies, documents, URLs, and importantly, including the most up-to-date version of any user supplied information), for the controlling browser of the collaboration session, if this state information is then provided to a new participant browser of an existing collaboration session, that new participant browser is immediately brought up-to-date with all information related to the collaboration session as a currently exists.","Importantly, the present invention provides state information that may include user supplied information, such that if the user of the controlling participant browser  enters information into a web page of the collaboration session during the existence of an active collaboration session, and then submits such information to the collaboration server , the system of the invention can be triggered at that point (i.e., within the client computer system , immediately before such a submission) as explained above to capture the current state of that controlling browser process, including this user supplied information. At that point, the system of the invention obtains the most up-to-date state information related to the existing collaboration session which is then provided to the server computer system  for distribution to any new participant browsers that are awaiting the ability to join the shared collaboration session. The server computer system  can serve this up-to-date state information to such participant browsers to allow those new participant browsers to begin collaboration on the current web page of the collaboration session, rather than having to navigate through subsequently provided pages of the collaboration session (i.e., avoiding having to begin navigating at page one of the collaboration session) in order to navigate up to the current page.","Conventional collaboration systems not equipped with the system of the invention that allow new participant browsers to join an existing collaboration session require the new browsers begin the collaboration session at the start in which case such participant browsers must navigate through successive web page is of the collaboration session in order to begin viewing the collaboration session at the current or most recent page in use by the controlling browser. The invention saves significant amounts of time for participant browsers that desire to join a collaboration session which is already underway.","The foregoing description of embodiments of the invention are not intended to be limiting. Rather, any limitations to embodiments of the invention are presented in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles and concepts of the invention.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
