---
title: Web-based enterprise management with multiple repository capability
abstract: A transport neutral technique allows an object manager to communicate with a CIM repository using any of a variety of protocols. The object manager software is independent of the transport mechanism used and need not be changed if the transport mechanism changes. A computer system to be managed includes a CIM object manager and any number of provider APIs that provide resource information about the computer system. A CIM repository stores classes and instances used by the object manager. A remote application computer runs a software management application that communicates with the object manager of the computer system using a local client API. A Repository API of the object manager includes an interface definition defining all methods called by the object manager. Also included is a protocol-specific class that implements the interface definition; there is a protocol-specific class for each protocol desired to be supported. Each class implements methods using a specific protocol. A factory class is executed when the object manager invokes a method call passing in a desired protocol parameter. The factory class creates a protocol-specific object of one of the protocol-specific classes depending on the protocol parameter. The object is returned to the object manager which executes one of its protocol-specific methods thus allowing communication to a repository using a protocol independent of the object manager.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06976262&OS=06976262&RS=06976262
owner: Sun Microsystems, Inc.
number: 06976262
owner_city: Santa Clara
owner_country: US
publication_date: 19990614
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority of U.S. provisional patent application No. 60\/139,239, filed on Jun. 14, 1999, entitled \u201cWeb-based Enterprise Management,\u201d which is hereby incorporated by reference.","This application is related to U.S. patent application Ser. No. 09\/333,878 filed on the same date herewith, entitled \u201cWeb-Based Enterprise Management with TRANSPORT NEUTRAL CLIENT INTERFACE,\u201d which is hereby incorporated by reference.","The present invention relates generally to managing the resources of a computer system. More specifically, the present invention relates to a technique for communicating database operations from a Common Information Model (CIM) object manager to multiple remote CIM repositories.","Recently, computers and their associated peripheral equipment (a computer system) have become increasing more complex. As such, it has become progressively more and more complicated for a user or system administrator to manage the resources of such a computer system. With a variety of peripheral devices and software applications available for use, and their ever-changing nature, the job of a system administrator has become more difficult. Computer system resources such as attached devices, network connections, software applications, etc., must all be managed to ensure an efficiently working system for the user. Within a large corporation having large numbers of such computer systems spread around the world, the task of managing the resources of each computer system can be daunting.","Recently, the industry has responded to such a need by introducing Web-Based Enterprises Management (WBEM) which is both an initiative and a technology. As an initiative, WBEM includes a standard for managing systems, networks, users, and applications by using Internet technology. As a technology, WBEM provides a way for management applications to share management data independently of vendor, protocol, operating system, or management standard. By developing management applications according to WBEM principles, vendors can develop products that work together easily at a lower cost of development.","One known standard for implementation of WBEM is the Common Information Model (CIM). CIM is an approach to managing systems and networks. CIM provides a common conceptual framework to classify and define the parts of a network environment and depict how they integrate. The model captures notions that are applicable to all areas of management, independent of technology implementation.","WBEM software includes tools and technology that software developers can use to create CIM-compliant software applications that manage the environment of a computer system. Developers can also use this software to write \u201cproviders,\u201d programs that supply data and events for managed objects that are specific to their domain.","There can be drawbacks, however, associated with various implementations of WBEM software. For example, it may be necessary for the object manager of a computer system to be able to access different types of databases, whether local or remote. Not all implementations, however, are well-suited for this type of access.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":["10","20","26","26","28","20","22","24","20","20","26","28","20","10"]},"In order to efficiently manage the resources of computer system , a software developer  writes management application software  for managing the resources of the computer system. When in operation, the results of management application  may be used by a system administrator  to manage the computer system. Client application  communicates via a Client API  to retrieve resource information from computer system . Client API  uses any suitable local or remote network connection  to access object manager .","Prior art implementations of this sort use a single protocol for communication from object manager  to CIM repository  over local connection . Such an implementation is inflexible in that the object manager commands to repository  are dependent upon a single protocol. In other words, the commands are not independent of the protocol; should the protocol be modified or if another protocol be used or desired, it will be necessary to rewrite portions of object manager  which would be undesirable.","In addition, having an object manager that is depended upon a particular protocol presents difficulties when repository  is remote from object manager . In this scenario, it may be desirable to communicate over a network connection using any of a variety of protocols instead of always being required to use a local protocol. In prior art computer system  portions of object manager  would have to be rewritten for each and every different protocol that is desired to be used.","Therefore, a technique is desired that would permit an object manager to communicate both locally and remotely with any number of repositories using any of a variety of protocols. It is desired to implement this technique with the least impact upon developers of object manager software.","To achieve the foregoing, and in accordance with the purpose of the present invention, a technique is disclosed that allows an object manager to communicate with any number of repositories using any of a variety of local or remote protocols. Advantageously, the object manager becomes independent of protocol used and need not be changed if the protocol changes.","In one embodiment, a method is used for communication between a Common Information Model (CIM) object manager and a CIM repository. The method involves first creating a connection between the object manager the CIM repository. Next, a protocol indicator is passed from the object manager to a repository API. The protocol indicator identifies a protocol by which the object manager desires to communicate with the CIM repository. A protocol-specific object is created having methods implemented using the protocol. Finally, the protocol-specific object is returned to the object manager, thus the object manager may communicate with the CIM repository using the protocol desired.","In another embodiment, a computer system interacts with a CIM repository on a separate computer. The computer system includes an object manager that has program code for interacting with the CIM repository and a protocol indicator. Also included is a repository application programming interface (repository API) that has a factory class arranged to receive the protocol indicator from the object manager and produce a protocol-specific object. Also within the repository API is a first class having methods defined thereon implemented in a first protocol and a second class having methods defined thereon implemented in a second protocol. Thus, the protocol-specific object may be returned to the object manager for use in communicating with the CIM repository using a desired protocol.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 2A and 2B","b":["100","110","150","110","112","114","112","114","110","116"]},"The object provider layer of computer system  includes operating system provider , operating system services  and provider application programming interface (API) . The provider layer communicates with operating system  via interface , for example, by using a JAVA Native Interface (JNI). Object providers act as intermediaries between CIM object manager  and one or more managed devices. When object manager  receives a request from a management application  for data that is not available in CIM repository  it forwards the request to a provider. Object providers are installed on the same machine as object manager . Object manager  then uses provider API  to communicate with locally installed providers. Providers are classes that perform various functions in response to a request from object manager . For example, providers map information from a managed device to a CIM JAVA class and map information from a CIM JAVA class to a managed device format.","Provider API  is an API used by various provider programs to communicate information about managed objects to object manager . Operating system provider  is a collection of JAVA classes or native methods that represent the operating environment of computer system . Operating system services  also provide logging information from operating system  to object manager .","A variety of other providers may also be present. For example, an SNMP provider includes JAVA classes that map CIM data to SNMP data. Also, a CPU-specific provider may be used to transport resource information directly between CPU  and provider API , thus bypassing operating system .","Providers may be categorized into three types according to the requests they service. An instance type supplies dynamic instances of a given class and supports the retrieval, enumeration, modification and deletion operations. A property type supplies dynamic property values, for example, disk space. A method type supplies methods of one or more classes. A single provider can support both methods and instances. Most providers are \u201cpull\u201d providers which mean they maintain their own data, generating it dynamical if necessary. Pull providers have minimal interaction with object manager  and CIM repository . The data managed by a pull provider typically changes frequently, requiring the provider to either generate the data dynamically or retrieve it from a local cache whenever an application issues a request. A single provider can act simultaneously as a class instance and method provider by proper registration and implementation of all relevant methods.","The management layer of computer system  includes CIM object manager , CIM repository  and web server software . Object manager  may be any suitable WBEM compliant manager. Object manager  manages CIM objects that are represented internally as JAVA classes. Client computers running management applications (such as application computer ) connect to object manager  for resource information about computer system . When a WBEM client connects to object manager  it receives a reference to that object manager. The client can then perform WBEM operations using this reference.","When management application  uses client API  to request or update information about a managed object, object manager  contacts either the appropriate provider for that object or a suitable persistent storage mechanism such as repository . In one embodiment, classes that are handled by a provider have a \u201cprovider\u201d qualifier that identifies the provider to contact for the class. When object manager  receives a request for a class that has a \u201cprovider\u201d qualifier, it routes the request to the specified provider. If no provider is specified it routes the request to repository  using JAVA Naming and Directory Interface (JNDI) .","Object manager  also performs various start-up functions: starting and registering the RMI server; registering the XML server; setting up a connection to repository ; and waiting for incoming requests. Object manager  also performs other normal operations: performing security checks such as authentication and authorization; performing syntactical and semantic checking of CIM data operations; routing requests to providers or persistent storage; and delivering data from providers or from persistent storage to client management applications.","CIM repository  is a central storage area for CIM class and instance definitions that communicates with object manager  via connection . Connection  may be any suitable local connection within computer system , or may be a remote connection. Connection  may use any suitable protocol. Further details on communication with repository  are provided in  and in .","Web server software  may be any suitable WBEM XML-compliant web server such as the Sun Web Server available from Sun Microsystems, Inc. JAVA servlet  converts XML data to the client API format. For example, if management application  contains XML data, client API client  encodes the data as XML messages and transports the encoded messages to web server  that is running JAVA servlet . Web server  listens for XML messages on a standard port and passes control to servlet  when detected. Servlet  then decodes the XML messages it receives. Servlet  then converts the XML data to the client API format and transmits the information back to client API  in RMI format. Alternatively, should object manager  support the HTTP format, client API  may communicate directly to object manager  without the need for web server .","The application layer of WBEM architecture  includes management application , CIM workshop , MOF compiler  and client application programming interface (API) . In this embodiment of the invention, these elements of the application layer are shown running on application computer  (other hardware and software not shown for simplicity). Alternatively, application computer  and computer system  may be the same computer or the elements of the application layer may reside on a variety of computers and not exclusively on application computer .","A software developer  uses any suitable software tool to develop a management application  for processing and displaying data from managed objects of computer system . Management application  uses client API  to request information about managed objects from object manager . In this fashion, analysis of the resources of computer system  can be presented to a system administrator  for proper action.","Client API  and provider APIs represent and manipulate CIM objects. These APIs represent CIM objects as JAVA classes. An object is a computer representation or model of a managed resource of computer system  such as a printer, disk drive or CPU. A developer uses the CIM specification to describe managed objects and to retrieve information about managed objects in computer system . One advantage of modeling managed resources using CIM is that those objects can be shared across any system that is CIM compliant.","Management application  may be any of a wide variety of software applications written to analyze and manage the resources of computer system . By way of example, management application  manages system aspects such as disk information (space available, partitions, etc.), CPU load, event processing, date, time, time zone, memory available, ports, etc.","Application  may also manage specific devices of the computer system such as disks, tape drives, modems, other I\/O devices, NICs, and network aspects of the system such as TCP\/IP, Netbeui, Novell, etc. Further, management application  manages the software applications running on computer system  by determining what is currently running on the system, what is currently installed, the state of installation, which applications can be terminated, performing application metering, managing application life cycle, process management, user management, etc.","In one embodiment of the invention, developer  uses a CIM workshop  written in JAVA for viewing, changing, adding and deleting CIM classes and instances. CIM workshop  provides a graphical user interface for the developer. For example, developer  may view and select namespaces, may add namespaces, add properties, qualifiers and methods to new classes, view and create instances, and view and modify instance values. Developer  may also use CIM workshop  to browse a class inheritance tree and change the root of an object tree for a namespace.","MOF compiler  pares files created in the Managed Object Format (MOF), converts files to JAVA class and stores the extracted classes and instances in repository . The MOF language is a syntax for defining CIM classes and instances and is described in the CIM specification. Although classes and instances can also be added through client API  using JAVA, MOF compiler  eliminates the need to write such code. Compiler  provides developers and administrators with a simple and fast technique for modifying repository .","In one embodiment, client API  is a public API that JAVA applications use to request operations from object manager . Client API  is used by management application  to transfer data to and from object manager . Client API  includes a variety of classes, instances and methods useful for communicating with object manager  using any suitable transport mechanism.","Preferably, Client API  is an application programming interface used by management application  to communicate with object manager  using Remote Method Invocation (RMI) protocol  or XML over an HTTP protocol  according to the techniques described in U.S. patent application Ser. No. 09\/333,878 referenced above. Other suitable protocols may also be used such as COM from Microsoft Corporation. Client API  may communicate directly with object manager  using RMI or may communicate using the XML\/HTTP protocol using web server . Alternatively, client API  can communicate using the XML\/HTTP protocol  directly should object manager  support the HTTP format.","Connections \u2013are any suitable local or network connection between computer system  and application computer . By way of example, these connections occur over an internet, an intranet, an extranet, within a workgroup, or other.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 2B","b":["20","180","190","192","194","20","110","110"]},"Repository  is a database implemented using a flat file technique or object serialization in JAVA; it communicates with Repository API  over a network connection that uses simple JAVA code protocol. Repository  is an object-oriented database and may be implemented using tools such as those available from Sybase, Oracle, or Informix. Repository  communicates with Repository API  over a network connection using a JAVA Database Connectivity (JDBC) protocol. Repository  is a Lightweight Directory Access Protocol (LDAP) type of database that communicates over network connection using a JAVA Naming Directory Interface (JNDI) protocol.","Repository API  is used by object manager  to store data to, or retrieve data from, the repositories. Repository API  includes a variety of classes, instances and methods useful for communicating with the repositories using any suitable protocol. Preferably, Repository API  communicates with the repositories using a JAVA language protocol, a JDBC protocol, a JNDI protocol, an LDAP protocol, an ODBC protocol, or other protocols suitable for use with a database. Implementation of such communication between object manager  and the repositories according to an embodiment of the invention is further described in .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIGS. 3A and 3B","FIG. 3A","FIG. 3B"],"b":["152","152","210","212","214","252","254","256"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4","b":["300","180","300","20","190","194","300","302","304","306","308","310","300"]},"By way of example, these methods include the following. The Create Namespace method creates a CIM namespace, a directory containing classes and instances. (When a management application connects to object manager  it specifies a namespace. All subsequent operations occur within that namespace on the object manager host.) The method Delete Class deletes the specified class. The method Delete Instance deletes the specified instance. The method Delete Qualifier deletes the specified qualifier. The method Enumerate Classes retrieves the specified classes from a repository. The method Enumerate Namespace gets a list of namespaces. The method Enumerate Instances gets of list of instances for the specified class. The method Enumerate Qualifier Types get a list of qualifier types for the specified class. The method Get Class gets the CIM class for the specified CIM object path. The Get Instance method gets the CIM instance for the specified CIM object path.","The method Get Qualifier Type gets the qualifier type for the specified CIM object path. The method Set Instance invokes a repository to add or update the specified CIM instance to the specified namespace. Other methods may also be included within interface  such as Add Aliased Class Name, Add Aliased Instance Name, Get Aliased Class Name, Get Aliased Instance Name, etc.","Once interface  has been defined it is possible to then code protocol-specific methods to implement each of the methods defined in interface . In this fashion, any number of protocol-specific classes are provided each having an implementation for a specific protocol such as JDBC or LDAP. Though the use of these protocol-specific classes, object manager  is able to communicate with any CIM repository using any suitable protocol in a transparent fashion.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 5","FIG. 4"],"b":["400","400","20","180","194","400","402","404","402"]},"Also included in implementation  are the specific implementations of the methods defined upon interface . For each method implemented there is a method name , a return value , parameters  and implementation code . Implementation code  is preferably JAVA code that implements the particular method using any constructs necessary that are specific to the RMI protocol. Those of skill in the art will appreciate how to implement JAVA code for a particular purpose that must adhere to a specific protocol.","Preferable, all of the methods defined upon interface  are implemented in implementation . Shown by way of example is the method Add CIM Element  which has a return value of \u201cvoid\u201d and accepts the parameters element and namespace. Not shown for simplicity is the actual LDAP-specific JAVA code that implements the method Add CIM Element. The other methods defined in interface  are also listed in implementation  along with their LDAP-specific code.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 6","FIG. 4"],"b":["500","500","20","180","192","500","502","504","502"]},"Also included in implementation  are the specific implementations of the methods defined upon interface . For each method implemented there is a method name , a return value , parameters  and implementation code . Implementation code  is preferably JAVA code that implements the particular method using any constructs necessary that are specific to the JDBC protocol. Those of skill in the art will appreciate how to implement JAVA code for a particular purpose that must adhere to a specific protocol.","Preferable, all of the methods defined upon interface  are implemented in implementation . Shown by way of example is the method Add CIM Element  which has a return value of \u201cvoid\u201d and accepts the parameters element and namespace. Not shown for simplicity is the actual JDBC-specific JAVA code that implements the method Add CIM Element. The other methods defined in interface  are also listed in implementation  along with their JDBC-specific code.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 7","b":["600","600","20"]},"Factory  includes a class name  \u201cCIM Repository Factory\u201d and any number of defined methods. For each method there is a method name , a return value , parameters  and an implementation . In particular, the method Get Repository API accepts the parameters protocol, namespace and version, and returns an instance of interface  which is a protocol-specific instance of either implementation  or implementation . Of course, other protocol-specific objects may be returned if other implementations are defined. The implementation code  for method  may be any suitable JAVA code that checks the protocol parameter to see which protocol is desired and then directs either implementation  or  to construct a new instance of itself. By way of example, a series of case statements may be used. Other methods may also be defined and implemented within factory .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 8","FIGS. 4\u20137","FIG. 8"],"b":["32","30"]},"In step  management application  creates a connection from application computer  to computer system . Preferably, application  invokes a method within Client API  which creates an instance of application  within object manager . Application  passes to the method a host name, a namespace, a user name, a password, and the protocol by which it is desired to communicate with host computer system . Any suitable network protocol may be identified such as RMI, XML\/HTTP or DCOM.","In step  object manager  receives a method call from application  that requires a database operation. The method call is preferably performed using the technique described in U.S. patent application Ser. No. 09\/333,878. In response to this method call, object manager  identifies a repository and protocol and makes a call to Repository API .","In step  factory  of Repository API  checks the protocol desired by object manager  using its method Get Repository API. This method returns a protocol-specific object which is an instance of either the class defined in implementation  or the class defined in implementation . For example, in step  if the protocol parameter is LDAP, then in step  the constructor definition  of implementation  executes and results in an LDAP-specific object having LDAP-specific methods being returned to the object manager. On the other hand, if the protocol parameter is JDBC, then in step  the constructor definition  of implementation  executes and produces a JDBC-specific object which is returned to the object manager. As shown in steps  and , a desire for use of simple JAVA protocol results in a JAVA-specific object being returned. Other protocols are also supported. In step  object manager  invokes a desired database method upon the protocol-specific object recently returned. Because the methods of this object are specific to the protocol desired by object manager , communication between Repository API  and the target repository occurs using the desired protocol in a fashion transparent to application  and to object manager .","Once the target CIM repository has processed the method (which may be a request for an object, a request to add an object, etc.), then in step  the result is returned from the repository to object manager  via Repository API  using the desired protocol. In this fashion, a technique has been described that allows an object manager to be written independent of the protocol by which it is desired to communicate with a target CIM repository.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIGS. 9 and 10","FIG. 9"],"b":["900","900","902","904","906","908","910","912","914","900"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 10","b":["900","920","922","924","924","926","922","926","926","924","914"]},"CPU  is also coupled to a variety of input\/output devices such as display , keyboard , mouse  and speakers . In general, an input\/output device may be any of: video displays, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styluses, voice or handwriting recognizers, biometrics readers, or other computers. CPU  optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface, it is contemplated that the CPU might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Furthermore, method embodiments of the present invention may execute solely upon CPU  or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.","In addition, embodiments of the present invention further relate to computer storage products with a computer-readable medium that have computer code thereon for performing various computer-implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs and holographic devices; magneto-optical media such as floptical disks; and hardware devices that are specially configured to store and execute program code, such as application-specific integrated circuits (ASICs), programmable logic devices (PLDs) and ROM and RAM devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher level code that are executed by a computer using an interpreter.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. For instance, the application computer and the computer system to be managed may be the same computer, or may be separated by a great distance. Also, the various CIM repositories may be located along with the computer system, may each be remotely located on a separate computer, or may be remotely located on a single computer. The use of a web server may not be required should the CIM object manager support the HTTP format. Other types of classes and methods may be used while not departing from the spirit of the invention. Therefore, the described embodiments should be taken as illustrative and not restrictive, and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Object Manager Execution","Computer System Embodiment"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 3A and 3B","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 9 and 10"}]},"DETDESC":[{},{}]}
