---
title: Method and apparatus to facilitate remote software management by applying network address-sorting rules on a hierarchical directory structure
abstract: One embodiment of the present invention provides a system to facilitate software management by applying network address-sorting rules on a hierarchical directory structure. The system operates by creating a hierarchical directory structure that reflects the logical coupling among computers within an enterprise. This hierarchical directory structure is sorted based on network addresses of the constituent computers of the enterprise. The system establishes a software policy at the root level of the hierarchical directory structure. Individual computers within the enterprise inherit the software policy from the root level of the hierarchical directory structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06976068&OS=06976068&RS=06976068
owner: McAfee, Inc.
number: 06976068
owner_city: Santa Clara
owner_country: US
publication_date: 20010913
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject matter of this application is related to the subject matter in a co-pending non-provisional application by Tianying Fu, Sunil S. Kadam, and Michael P. Bacus entitled, \u201cMethod and Apparatus to Facilitate Cross-Domain Push Deployment of Software in an Enterprise Environment,\u201d having Ser. No. 09\/971,333, and filing date Oct. 4, 2001.","1. Field of the Invention","The present invention relates to software management. More specifically, the present invention relates to a method and an apparatus to facilitate remote software management by applying address-sorting rules on a hierarchical directory structure.","2. Related Art","Software management presents many challenges to an administrator of an enterprise system. This software management can encompass many aspects of configuring and maintaining the enterprise system, such as software distribution, configuration management, software management, and policy management, such as enforcing rules for virus scanners.","In smaller enterprise systems, it is feasible for an administrator to visit each computer within the enterprise to create the necessary configurations. However, as the enterprise grows or spreads to multiple locations, it quickly becomes impractical for the administrator to visit each computer.","Administrators, therefore, have developed methods to remotely configure the computers within an enterprise system. These methods, while advantageous, present their own set of problems. Managing a computer system from a central location can create a bottleneck when possibly hundreds of computers are trying to update their configuration simultaneously. This can be exacerbated by slow links between the central location and remotely located groups of computers.","Managing multiple configurations across an enterprise system also presents problems for the administrator. For example, a sales department may need a different configuration than a product development department, or parts of the enterprise in different locations may need different configurations. At times a configuration may apply to an entire group of computers, while at other times a configuration may apply to only a single computer. Remembering which group that a particular computer belongs to, or remembering if that particular computer requires a special configuration, is a formidable and error-prone task.","What is needed is a method and an apparatus to remotely manage software on computers within an enterprise without the disadvantages presented above.","One embodiment of the present invention provides a system to facilitate software management by applying address-sorting rules on a hierarchical directory structure. The system operates by creating a hierarchical directory structure that reflects the logical coupling among computers within an enterprise. This hierarchical directory structure is sorted based on network addresses of the constituent computers of the enterprise. Next, the system establishes a software policy at the root level of the hierarchical directory structure. Individual computers within the enterprise subsequently inherit the software policy from the root level of the hierarchical directory structure.","In one embodiment of the present invention, the system stores the hierarchical directory structure in a database coupled to a server.","In one embodiment of the present invention, the system applies a sub-net mask to the addresses before sorting the hierarchical directory structure.","In one embodiment of the present invention, the system establishes a modifier for the root software policy at subordinate levels of the hierarchical directory structure.","In one embodiment of the present invention, the system inherits the root software policy including any modifiers for the software policy.","In one embodiment of the present invention, the system compiles the software policy by applying modifiers to the software policy to produce a modified software policy for the computer.","In one embodiment of the present invention, the system manages software on the computer using the modified software policy.","In one embodiment of the present invention, managing software on the computer includes managing virus scan policies associated with the computer.","The following description is presented to enable any person skilled in the art to make and use the invention, and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus, the present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.","The data structures and code described in this detailed description are typically stored on a computer readable storage medium, which may be any device or medium that can store code and\/or data for use by a computer system. This includes, but is not limited to, magnetic and optical storage devices such as disk drives, magnetic tape, CDs (compact discs) and DVDs (digital versatile discs or digital video discs), and computer instruction signals embodied in a transmission medium (with or without a carrier wave upon which the signals are modulated). For example, the transmission medium may include a communications network, such as the Internet.","Computer Systems",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["104","106","112","114","116","118","120","122","104","106","112","114","116","118","120","122"]},"Server , and clients , , , , , and  are coupled together by network . Network  can generally include any type of wire or wireless communication channel capable of coupling together computing nodes. This includes, but is not limited to, a local area network, a wide area network, or a combination of networks. In one embodiment of the present invention, network  includes the Internet.","Server  is coupled to database  for storing and maintaining a hierarchical directory structure and related files as described below. Database  can include any type of system for storing data in non-volatile storage. This includes, but is not limited to, systems based upon magnetic, optical, and magneto-optical storage devices, as well as storage devices based on flash memory and\/or battery-backed up memory.","Administrator  accesses server  using console  to establish the hierarchical directory structure and establish software management policies for clients , , , , , and . Note that clients , , , , , and  serve as examples herein, and that the system may have as many clients as desired.","Hierarchical Directory Structure",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2"},"Directory root  establishes the anchor point for the hierarchical directory structure. Acme Corporation, with network address 150.0.0.0 and an 8-bit subnet mask, is linked to directory root . A default set of software management policies is associated with directory root .","Both North America  and Europe  are linked to Acme Corporation . North America  has network subnet address 150.50.0.0 and a 16-bit subnet mask, while Europe has a network subnet address 150.60.0.0 and a 16-bit subnet mask. Network addresses are assigned and the hierarchical directory structure is sorted such that subnets and computers comprising a logical group are subordinate to the same node within the hierarchical directory structure. For example, in the fictional Acme Corporation, all subnets and computers located in North America have a network address starting with 150.50 and are subordinate to North America , while all subnets and computers located in Europe have a network address starting with 150.60 and are subordinate to Europe .","Continuing down the hierarchical directory structure, a node can be further divided into other subnodes. In the fictional Acme Corporation, California  and Oregon  are linked to North America  and have network subnet addresses 150.50.10.0 and 150.50.20.0, respectively. Both have 24-bit subnet masks. London , with network subnet address 150.60.20.0 and a 24-bit subnet mask is subordinate to Europe .","Santa Clara , sales , and clients  and  are subordinate to California  and have network addresses starting with 150.50.10. Development , and clients  and  are subordinate to Oregon  and have network addresses starting with 150.50.20, while sales  and clients  and  are subordinate to London  and have network addresses starting with 150.60.20.","Assigning network addresses and sorting the hierarchical directory structure as described above allows policy changes to be applied to one subnet without affecting other subnets. For example, establishing policy changes at Europe  will affect only the European subnet and not the North American subnet. An additional advantage to the hierarchical directory structure is that server  can easily locate the optimum location for downloading software and software management policies to an individual client.","While the above description implies sorting by geographic locations, there are many other ways that the hierarchical directory structure can be sorted. Some examples include sorting by domain structure, by client operating system, by network bandwidth, or by connection speed. A practitioner with ordinary skill in the art will readily understand that the organization of the hierarchical directory structure can be established in any desired manner.","Server ",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["106","106","302","304","306","308","310","312","314"]},"Console API  allows administrator  to access server  from console . Console API  includes mechanisms to add clients, remove clients, sort the hierarchical directory structure, establish software policies, and specify modifiers for the software policies at each level within the hierarchical directory structure.","Directory creator  creates the hierarchical directory structure in accordance with the instructions supplied by administrator . Note that administrator  can create the hierarchical directory structure in any fashion desired. Typical organizations can include geographic, domain structure, client operating system, network bandwidth, and connection speed.","Server  uses database writer  to store the hierarchical directory structure in database . Server  uses database reader  to recall the hierarchical directory structure from database  when the hierarchical directory structure is needed for updating by administrator . Server  also uses database reader  to recall the hierarchical directory structure when the hierarchical directory structure is needed to establish where a client is located within the hierarchical directory structure so that the correct software management policy can be established for the client.","Database sorter  sorts the hierarchical directory structure according to network address and subnet. Sorting the hierarchical directory structure according to network address and subnet allows server  to identify where a client is located within the hierarchical directory structure and, in conjunction with policy inheritance mechanism , to establish the proper software management policy and modifications for the client.","Database ",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIGS. 1 through 3"],"b":["108","108","402","404","402","404","402","402"]},"Client ",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["116","112","114","116","118","120","122","116","116","116","502","504"]},"Agent  operates as a background process within client  and communicates with server  across network  to determine the master policy for the system and to determine any modifications to the master policy for the subnets to which client  is assigned. Agent  also monitors operations performed by client  and enforces the software management policies, which have been established for client .","Policy compiler  receives the master software management policy and any modifications to the master policy. After receiving the master policy and any modifications, policy compiler  compiles the policy for client  by modifying the master software management policy with modifications identified for the subnets to which client  is assigned.","Compiling a Software Policy",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6","b":["106","116","602","106","116","604","106","116","606"]},"Next, client  gets the default policy from directory root  (step ). After getting the default policy from directory root , client  determines any policy changes for a particular subnet at the next level within the hierarchy (step ). Client  then overwrites any changed policy for the particular subnet (step ). Next, client  determines if the final level of the hierarchy has been reached (step ). If so, the process is ended, otherwise, the process returns to  to continue processing levels within the hierarchy.","The foregoing descriptions of embodiments of the present invention have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly, many modifications and variations will be apparent to practitioners skilled in the art. Additionally, the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":"106"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4","b":"108"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5","b":"116"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
