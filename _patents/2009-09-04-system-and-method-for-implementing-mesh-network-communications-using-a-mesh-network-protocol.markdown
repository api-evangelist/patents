---
title: System and method for implementing mesh network communications using a mesh network protocol
abstract: The following describes data structures, communication protocol formats and process flows for controlling and facilitating secure communications between the nodes of a mesh network, such as utility meters and gateway nodes comprising a utility network. The enabled processes include association, information exchange, route discovery and maintenance and the like for instituting and maintaining a secure mesh network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08699377&OS=08699377&RS=08699377
owner: Trilliant Networks, Inc.
number: 08699377
owner_city: Redwood City
owner_country: US
publication_date: 20090904
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","GLOSSARY OF TERMS"],"p":["The present application claims the benefit of U.S. provisional patent application Ser. No. 61\/094,116 entitled \u201cMessage Formats and Processes for Communication Across a Mesh Network,\u201d filed Sep. 4, 2008 which is incorporated herein by reference in its entirety.","The present application hereby references and incorporates by reference each of the following U.S. patent applications:\n\n","1. Field of the Invention","This invention pertains generally to a protocol layer for facilitating the creation and maintenance of a secure mesh network. More particularly, preferred embodiments of the invention describe data structures, communication protocol formats and process flows for controlling and facilitating secure communications between the nodes of a mesh network, such as utility meters and gateway devices comprising a utility network.","2. Summary of the Background Art","A mesh network is a wireless network configured to route data between nodes within a network. It allows for continuous connections and reconfigurations around broken or blocked paths by retransmitting messages from node to node until a destination is reached. Mesh networks differ from other networks in that the component parts can all connect to each other via multiple hops. Thus, mesh networks are self-healing: the network remains operational when a node or a connection fails.","Advanced Metering Infrastructure (AMI) or Advanced Metering Management (AMM) are systems that measure, collect and analyze utility usage, from advanced devices such as electricity meters, gas meters, and water meters, through a network on request or a pre-defined schedule. This infrastructure includes hardware, software, communications, customer associated systems and meter data management software. The infrastructure collects and distributes information to customers, suppliers, utility companies and service providers. This enables these businesses to either participate in, or provide, demand response solutions, products and services. Customers may alter energy usage patterns from normal consumption patterns in response to demand pricing. This improves system load and reliability.","A meter may be installed on a power line, gas line, or water line and wired into a power grid for power. Newly installed meters may associate with a specified network identifier entered by a user during installation. Alternatively, the user may initiate an association window during which a meter may associate with a nearby mesh network.","In accordance with an embodiment of the present invention, a method of associating a device to a mesh network is described. The method includes selecting a network for association including: requesting, by the device, neighbor information from neighboring devices which may belong to one or more networks, receiving, at the device from one or more neighboring devices, neighbor information for each of the one or more neighboring devices, applying an association ratio algorithm to the received neighbor information to determine which of the one or more networks to select for association. The method further includes selecting a router within the selected network through which to proxy messages by applying a preferred route ratio algorithm; sending a network association request from the device through the router to a network coordinator; and at the network coordinator, performing one of the following in response to the network association request: validating the association request with an association response message which includes the short address for this device, or not responding to the network association request. The method further includes constructing, at the device, an initial neighborhood table.","In accordance with another embodiment of the present invention, a process for routing data frames from a first node to a second node within a network is described. The process includes: a tree routing sub-process, a source routing sub-process, a temporary routing sub-process and a mesh routing sub-process. The particular sub-process for routing a data frame from the first node the second nodes is selected in accordance with the following logic executed on a processor: if the data frame has a source route header the source routing sub-process is selected; if there is an entry for the target address in a temporary routing table, the temporary routing sub-process is selected; if the second node is a coordinator node, the tree routing sub-process is selected; and if the second node is not a coordinator node, the mesh routing sub-process is selected.","In accordance with another embodiment of the present invention, a process for discovering a route from a first node to a second node in a mesh network is described. The process includes broadcasting by the first node a route request message that is propagated across multiple nodes within the mesh network. The propagation follows a processor implemented process at the multiple nodes, including accepting a route request at a receiving node if (i) no previous received route request message had the same request ID, and (ii) the route request message is received through a link with a minimum LQI class at least equal to the requested one; identifying the receiving node as a route candidate If the route request message is accepted by an intermediate node; the route request is re-broadcasted. If the route request message is accepted the second node; sending a route reply message from the second node through the identified route candidate back to the first node to establish a static bidirectional route within the mesh network between the first node and the second node.","In accordance with a further embodiment of the present invention, a process for upgrading a route from a first node to a second node in a mesh network is described. The process includes: accepting a route request at a receiving node for upgrading the route if a route candidate already exists for the request ID, the request was received through a link with a minimum LQI class at least equal to the requested one and the request was received through a better link than the prior received one. These determinations are made according to the following sets of conditions: (i) the receiving node is a neighbor, the route request is received from a neighbor and a resulting route length is shorter; (ii) the receiving node is not a neighbor, the route request is received from a neighbor and a resulting route length is shorter or equal to existing route length; (iii) the receiving node is not a neighbor, the route request is received from a non-neighbor and a resulting route length is shorter. If the conditions are not met, the route request is rejected.","In accordance with a further embodiment of the present invention, a process for requesting a route from a first node to a second node within a mesh network is described. The process includes: transmitting a route request message to a pre-determined coordinator node, wherein the route request message includes a long address for the second node; constructing at the coordinator node a route through one or more routing nodes from the first node to the second node; and transmitting a response to the route request message to the first node including the route to the second node, wherein the route includes an assigned short address for the second node.","In accordance with a further embodiment of the present invention, a data structure for securing data frames transmitted in a single hop within a mesh network from a first node to a second node is described. The data structure includes a data link layer (DLL) security header located after a service-type octet when a predetermined security header flag is selected within the service-type octet. The DLL security header including: a first set of bits containing a portion of a transmitted nonce count; a bit following the first set of bits containing a key identifier (ID), wherein the key ID selects a current version of a key used for calculating a message integrity check (MIC); and a second set of bits containing the MIC.","In accordance with a further embodiment of the present invention, a process for validating integrity of message data transmitted in a single hop from a first node to a second node within a mesh network is described. The process including: checking at a processor of the second node the 23 least significant bits (0-22) of a count transmitted from the first node against a last authenticated count; if the transmitted count value is greater than the last authenticated count, combining at a processor of the second node, the 23 least significant bits (0-22) with the 17 most significant bits (23-39) of the last authenticated count to form a revised count; if the transmitted count value is lower than the last authenticated count, incrementing the value of bits 23 through 29 by one before combining at a processor of the second node, the 23 least significant bits (0-22) with the 17 most significant bits (23-39) of the last authenticated count to form a revised count; calculating at the processor of the second node a message integrity check (MIC) value using the revised count and pre-selected key; if the calculated MIC value equals a received MIC value, then the message data integrity is validated.","In accordance with a further embodiment of the present invention, a data structure for securing data frames transmitted in multiple hops using multiple nodes across a mesh network. The data structure including a network security header located after a data link layer (DLL) security layer within a mesh header. The network security header including: a first set of bits containing a network count; a bit following the first set of bits containing a network key identifier (ID); and a second set of bits containing a network message integrity check (MIC).","In accordance with a further embodiment of the present invention, a process for validating integrity of a data frame transmitted in multiple hops using multiple nodes across a mesh network. The process including: receiving a data frame at a receiver node, wherein the data frame includes a network security header including a network count, a network key identifier (ID) and a message integrity check (MIC); processing an identifier (ID) for an originating node that originated the data frame and a source field address to determine if the data frame was received from a coordinator node or a non-coordinator node; if the data frame was received from a coordinator node, the network key ID selects a node key for determining verification; if the data frame was received from a non-coordinator node, the network key ID selects a mesh key for determining verification. Further, when the received data frame is a request, a nonce is a combination of at least the network count, the originating node ID and an originating node address and the receiving node verifies the integrity of the frame by: adding a 0 to the network field to make a 40 bit field; calculating the received MIC using either the node key or the mesh key as identified by the network key ID; comparing the transmitted MIC with the received MIC, wherein the data frame is verified if the transmitted MIC is equal to the received MIC. And when the received data frame is a response, the network count is combined with the identifier and address for the target of the data frame and the originating node ID and an originating node address and the receiving node compares a network count in the response with a network count in the request, wherein the data frame is verified if the response network count is equal to the request network count.","The following charts of terms and acronyms are intended to define the frequently used terms in the context of the preferred embodiments of the present invention. The definitions provided are not intended to define the entire scope of the term. One skilled in the art appreciates the various alternatives and variations that are clearly within the scope of the invention as described.","Association Router\u2014Router selected by a Node which is not yet a member of the network, to act as a proxy to send the Node's association request.","Child\u2014In the context of tree routing, all Routers in single-hop radio frequency (RF) contact with a reference Router, with a hop count greater than the hop count of that reference. In the context of End Devices, a Child refers to an End Device of a specific Router through which it sends and receives messages.","Dedicated Router\u2014A router manually configured to associate to a specific network to guarantee that the network covers a specific geographical region.","Device Key\u2014A key unique to the device. The initial device key is assigned by its manufacturer and is unchangeable. A database for device IDs and initial Device Keys is made available to the system owner and is installed in the network's Configuration Host. A Device Key generated by a Configuration Host should be known only to the Configuration Host and the device. Device Keys are used only for securing Application Layer communication between the Configuration Host and the device. As such, they are not directly part of the SM protocol, which encompasses only the data link layers.","Frame\u2014A data-link layer message.","Key ID\u2014Keys are updated from time to time; the specific generation of key is identified within this specification with a single bit Key ID, which is the low-order (even\/odd) bit of the actual key generation count.","Key Type\u2014Each key type has a specific usage, scope and is associated to a specific management process. This specification supports three Key types: the Maintenance Key, the Mesh Key and the Node Key.","Maintenance Key\u2014This key is shared by all the devices in all PANs that are administered by a single Configuration Host. The Maintenance Key is used for Association Request\/Response messages and maintenance device point-to-point-secured communication messages. The Maintenance Key can be factory-assigned or is assigned by the Configuration Host; it can be updated by a Coordinator.","Mesh Key\u2014This key is used for all DLL MIC calculations, except those secured by the Maintenance Key. It is also used for the Network MIC when the message is broadcast through the mesh or when the Network Security is used for device-to-device communication. The Mesh Key is common throughout a PAN, and to all interconnected PANs that are configured to support inter-PAN communications. The Mesh Key is assigned and updated by the Coordinator.","Network Name\u2014Name assigned to a mesh network. Network names are typically assigned using a dot separated hierarchy with the first level representing all mesh networks forming a single AMI network. The typical format of a network name is \u201cutility.area.coordinatorID\u201d.","Node Key\u2014A unique key assigned to a device and used for secure communication between the Coordinator(s) and the device. It is primarily used for the Network MIC header calculation and for encrypting keys distributed by the Coordinator. The Node Key is initially assigned by the Configuration Host but it can be updated by either the Configuration Host or the Coordinator.","Node Type\u2014Refers to the class of SM Node: Coordinator (=11), Router (=10), or End Device (=01).","Originator Count\u2014The Originator Count, Orig. Count, is used as the nonce in the Network Security Header. Its value is the same as the Source Count value at the time the message is originated.","Parent\u2014In the context of tree routing, all Routers that have a direct RF link with a reference Router and that have a hop count less than the hop count of that reference Router. In the context of an End Device, the Router used to send and receive messages on behalf of this End Device.","Frame\u2014A network layer message that can traverse one or many hops.","SM Coordinator\u2014Referenced within this document as Coordinator; this Node responsible for initializing the network, accepting association requests and assigning unique short addresses.","SM End Device\u2014Referenced within this document as End Device; this Node is not capable of routing messages and can communicate only through its Parent. An End Device can be either always be listening or wake up periodically to synchronize with its Parent in order to minimize energy.","SM Node\u2014Refers to a Node independently of its Node Type.","SM Router\u2014Referenced within this document as Router; this Node is capable of managing routes and routing messages.","Sibling\u2014In the context of tree routing, all Routers that have a direct RF link with a reference Router with a hop count equal to the hop count of that reference Router.","Sleeping End Device\u2014A Sleeping End Device reduces it average power consumption by turning itself off for periods of time. It requires a Parent to store frames for it while it is sleeping. A Sleeping End Device cannot be used for routing.","Source Count\u2014The Source Count, also referenced as Src. Count, is used as the nonce in the DLL Security Header. The Source Count is incremented with every message transmitted by the device.","Acronyms","DLL\u2014Data Link Layer; the data link layer provides device-to-device networking services in conjunction with the IEEE 802.15.4 MAC. For the SM system the DLL provides hop-by-hop security.","LQI\u2014Link Quality Indicator; a value based on the signal strength and other quality aspects of the received signal.","LQI class\u2014Link quality between two Nodes expressed as four different classes: Good (=11), Normal (=10), Poor (=01) and No Connectivity (=00).","PAN\u2014Personal Area Network, the IEEE 802.15.4 name for one of its networks, whether for personal use or not.","RSSI\u2014Received Signal Strength Indication in dBm.","The following describes the message formats and the processes implemented by the SecureMesh protocol (hereafter \u201cSM protocol\u201d) within a SecureMesh network (hereafter \u201cSM network\u201d). Referring to , the SM protocol in conjunction with the IEEE 802.15.4 MAC layer implement the Open Systems Interconnection (\u201cOSI\u201d) Data-link. An exemplary SM network topology is shown in  and is composed of a coordinator , routers  and end devices  (generically referred to as \u201cnodes\u201d). The preferred routes  between routers  create a tree for which the root is the coordinator . Each node can be a member of trees of different adjacent networks, though any single network has only a single coordinator. A SM network may include non routing nodes called end devices which are associated to a preferred parent through which messages are sent and received. The SM protocol also supports routing of messages using alternate routes  when a preferred parent fails; this process is called local repair. In the preferred embodiments of the present invention, the nodes typically include utility meters and related devices, but the invention is not limited as such.","The transmission of messages between nodes defined by the SM protocol is governed by the following rules: (1) Fields are transmitted in their order of definition, from left to right when represented in a frame format diagram (see, for example, ), or from top (first) to bottom (last) when listed in a table; (2) All multi-octet fields are transmitted least significant octet first (little Endean); (3) Binary or string fields are transmitted serially starting at index zero. For backward compatibility reasons, short and long addresses can be configured as multi-octet fields transmitted least significant octet first, as specified by IEEE 802.15.4, or as binary fields transmitted serially. The transmission order of the addresses is controlled by the configuration parameter ADDRESS_TX_ORDER.","A critical process to SM network formation is the association process. The association process is used by nodes to become a member of an SM network or to evaluate their current association state. The association process incorporates the following primary functions: selection of a PAN; selection of an association router to proxy messages; association with the coordinator and the reception of a short address assignment; and construction of the initial neighborhood table.","As a first step in the association process, each device (referred to as a node once associated) must be commissioned with the network's node key and the network's maintenance key prior to associating with a network. The key commissioning process for a particular device is determined by the device's application. For example, the device may be configured at manufacturing, or by a maintenance tool, or through the Service Request and Service Response messages described in below. A quick summary of the association process is described, with a follow-on detailed description. A Neighbor Info Request is transmitted on each channel to locate and get information about neighbor nodes and neighbor SM networks. All nodes receiving the Neighbor Info Request respond with a Neighbor Info Response. A particular SM network is selected based on an Association Ratio algorithm, discussed further below. An Association Router, which is a member of the selected SM network, is selected based on the Preferred Route Ratio algorithm, also discussed below. An Association Request is transmitted to the selected Association Router by the requesting device. When the Association Router is not the Coordinator, the Association Request is repackaged and forwarded in the form of an Association Confirmation Request message to the Coordinator, using tree routing. If the Association Confirmation Request is received and validated, the Coordinator sends back the assigned short address in an Association Confirmation Response message, which is then repackaged and sent to the device as an Association Response message. Similarly, when the Coordinator receives the Association Request directly, it returns its response directly in an Association Response.","In the specific case of a successful association (i.e. the Association Status within the Association Response is set to successful), the Node sends a Neighbor Exchange message with the Immediate Broadcast Requested option set (discussed below) on the just associated SM network. As a result, this causes surrounding neighbors to broadcast a Neighbor Exchange message using a pseudo-random period within NEIGHBOR_EX_RND_PERIOD, thus allowing the Node to populate its Neighborhood Table right away.","Device association is started with the neighbor information request process shown in . Node-A initiates the process with a Neighbor Info Request that is broadcasted on a channel and received by other Nodes in the neighborhood that are listening to that channel. Each Node receiving the message responds at a pseudo-random time in the interval given by the parameter NEIGHBOR_INFO_RESP_TIME. The IEEE 802.15.4 MAC, known to those skilled in the art and described in numerous publicly available documents, resolves most collisions that occur due to Nodes selecting the same response time. Node-A waits for the interval NEIGHBOR_INFO_RESP_TIME to receive all Neighbor Info Response messages from its neighbors. Once the Node has received neighbor(s) information, it can start the association process.","In , Node-A is in the neighborhood of the Coordinator for PAN . As it receives Neighbor Info Response messages, it uses the Association Ratio algorithm and the Preferred Route Ratio algorithm to select PAN  and the Coordinator for PAN  as its Parent. In this case it sends its Association Request directly to the Coordinator and gets the Association Response back. Node-A expects to get a response back within a time period established by the ASSOCIATION_RESP_TIME parameter. This process is repeated on each available channel.","If the associating Node is not in the neighborhood of the Coordinator, it uses a neighbor to proxy the Association Request.  shows this proxy process. Node-A receives a number of Neighbor Info Response messages. It uses the Association Ratio algorithm and the Preferred Route Ratio algorithm to select the Coordinator for PAN  and Node-B as its best neighbor for the PAN. Node-A then sends Node-B the Association Request message and starts its response timer set with the value defined by ASSOCIATION_RESP_TIME. Node-B takes Node-A's request and generates an Association Confirmation Request message to the Coordinator. The Coordinator responds with the Association Confirmation Response message to Node-B and Node-B sends the Association Response message to Node-A.","As mentioned previously, the association process described in this section is also used by a network member to re-evaluate its association status. This action is performed every ASSOCIATION_EVAL_PERIOD and is intended to determine if the network member should remain on the same SM network or if it should migrate to another one. The Node will change its network membership (i.e. complete its association process on another network) only if the resulting Association Ratio represents an improvement compared to its current Association Ratio. The required improvement must be equal or better than the ASSOCIATION_EVAL_MIN_IMPROVEMENT. If it is not the case, the Node maintains its membership on the current network and the whole process stops immediately.","The mesh layer (see ) routes frames to the target addresses by one of four processes: Tree Routing, Source Routing, Temporary Routing or Mesh Routing using combinations of the Neighborhood Table, Routing Table, and Temporary Route Table. The route selection processing facilitated by the mesh layer is shown in . The frame either arrives as a frame initiated by the Node (device) or as a received frame to be routed by the Node. Routed frames have an entry created in the Temporary Routing Table to allow subsequent traffic in the reverse direction using the reverse route. The routing process used for the frame is selected based on the following logic:\n\n","Tree routing is the preferred routing method when a Node initiates communications that target the Coordinator. Tree routing uses the Neighborhood Table to find a route to the Coordinator as shown in . The device selects the neighbor entry with the Preferred Parent Flag set in the Neighborhood Table. If transmission to the preferred parent does not succeed, the device attempts to select another Parent in the Neighborhood Table (e.g., an entry that has a hop-count value less than the device's hop-count value), preferably ordering the selection on the device's Preferred Route Ratio value. If there are no Parent entries left to try, the device looks for a Sibling entry (e.g., an entry that has the same number of hops to the Coordinator), preferably ordered based on the device's Preferred Route Ratio value. The device will try entries in the Neighborhood Table until it has reached the MAX_TREE_REPAIR limit or until the Neighborhood Table is exhausted. To avoid multiple lateral transmissions through Siblings, a flag in the mesh header called Sibling flag is set when transmitting to a Sibling. Frames received with the Sibling flag set can be routed only through a Parent.","Referring to , source routing is the preferred routing method when communications initiated from the Coordinator targets a specific Node. The Coordinator can also use the broadcast address as the target address at the end of the source route list to send a message to all the Nodes that are the neighbors of the last explicitly-addressed device. Source addressing is also used for communication between any two Nodes if the originator knows the entire route between them. This node-to-node source route is determined by a Route Request to the target Node with the Trace Route Flag set, or by a Route Establishment Request sent to the Coordinator asking for a route to the target Node. The source routing process sends a frame with the complete route embedded in the frame header. The Node receiving a source-routed frame finds its address in the route list and uses the next address in the list as the next destination hop for the frame. A temporary return route is created when a source-routed frame is received by each Node on the path, so that upstream frames can be routed using the Temporary Routing Table.","Unlike tree routing, which can only be used to reach the Coordinator, mesh routing can reach any Node on the network. Routes are established using the Route Discovery process which is described later. The routes are stored in a Route Table, whose entries contain the next hop for the target address. A route remains valid until a Node tries unsuccessfully to use it or a Route Error message is received deleting the Route Table entry. A Node that cannot send a frame to the Node listed in the Route Table generates a Route Error message and deletes the entry from its Route Table. The oldest Route Table entry may also be deleted when a Node needs space in its Route Table for a new entry. The use of mesh routing should be limited because of the overhead it imposes on the network. This method is used only when more preferred methods such as tree and source routing fail. Referring to , the mesh routing process looks up the target address in the Route Table. If the target address is found, the frame is sent to the designated Node. An error is generated when the MAC layer ACK is not received after repeated attempts or a Route Error message is received. In either case the route entry is removed from the Route Table and a Route Error message is broadcast to all neighbors. A Route Error message is also generated if the target address is not found in the Route Table.","Every time a mesh frame is forwarded, no matter the routing method used with the exception of the Temporary routing itself, the forwarding Node creates a temporary route entry to the originator in the Temporary Routing Table. This allows the destination Node to quickly send a reply, even if it didn't previously know the route to the originator Node. This route expires after a period of time determined by TEMP_ROUTE_TO parameter. The Temporary Route Table takes precedence over the Neighborhood Table and the Route Table. Referring to , the Temporary Route Table is accessed and the MAC destination address associated with the mesh layer target address is selected. The frame is then transmitted. If the MAC fails to transmit a frame, the Error Received condition is true and the Node tries to send the frame by an alternative route using Tree Routing or Mesh Routing.","In , a mesh message from Node A sets the temporary return route in the table of Node B. A mesh message from Node C to Node A is routed to Node B. Node B's temporary return route to Node A has not expired and so it uses the route to send the message to Node A. Sometime later another mesh message from Node A restarts the temporary route expiration timer. After the time, TEMP_ROUTE_TO, no new messages from Node A arrive and Node B deletes the temporary return route to Node A. The number of temporary return routes that can be stored is limited. If the limit is reached, the oldest temporary return route is deleted when a new temporary return route is created.","A route discovery process is performed when a Node needs to create or trace a new route within the mesh network. It consists of a mesh broadcast of a Route Request message which is propagated through the network based on Route Request Acceptance Conditions. Once received by the target Node, a Route Reply message is returned to the originator leading to the creation of a new static route in both directions.","Initially, Route Request acceptance conditions are verified by each Node receiving a Route Request message. This verification algorithm allows a Router to forward or stop the propagation of a Route Request. When acceptance conditions are satisfied, the Router from which the Route Request message was received is keep as a Route Candidate. A Route Candidate can be replaced based on Route Request acceptance conditions during the route discovery process to improve routing. Route Candidates are used at the end of the route discovery process when the Route Reply message is sent back to the originator. A Route Request is accepted as the first Route Candidate if it meets all of the following conditions:","No previous received request had the same Request ID; and","The request is received through a link with a minimum LQI class (defined later) at least equal to the requested one. For compatibility reasons, Route Requests received from non-neighbor Nodes are accepted if the requested minimum LQI class is \u201cUnreliable link.\u201d","A Route Request is accepted for Route Candidate upgrade if it meets all of the following conditions:\n\n",{"@attributes":{"id":"p-0163","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Route Candidate upgrades conditions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Conditions","Case #1","Case #2","Case #3"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Current Route","Neighbor","Non-Neighbor","Non-Neighbor"]},{"entry":"Candidate is a . . ."},{"entry":["Route Request","Neighbor","Neighbor","Non-Neighbor"]},{"entry":"received from a . . ."},{"entry":["The new Route Candidate","Shorter","Shorter or","Shorter"]},{"entry":["length is . . .",{},"Equal"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The overall route discovery process is summarized in  which illustrates the simplest case, i.e., without any Route Candidate upgrade. The effect of a Route Candidate upgrade is shown in , in which the return path is updated during the route discovery process. The originator broadcasts a Route Request with a minimum LQI class of \u201cReliable link.\u201d","Every Router receiving the Route Request accepts or rejects the request based on conditions discussed above. If the Route Request is accepted as a first route candidate and the Router is not the target destination, it creates a route candidate to the originator and rebroadcasts the Route Request. If the Router is the target destination, it starts a timer of RREQ_RX_TIME milliseconds and creates a route candidate to the originator.","If the Route Request is accepted for a route candidate upgrade, the Node upgrades its route candidate without re-broadcasting the Route Request. At the expiration of the timer that was initialized to RREQ_RX_TIME, the destination Node converts its route candidate into a static route and sends a Route Reply to the Next Hop of the route just created. Each Node receiving a Route Reply converts its route candidate into a static route to the originator. It also creates a static route entry to the destination. The Route Reply is then forwarded to the originator. If the originator does not receive a Route Reply after the RREQ_TO timeout period (700 ms by default), it broadcasts a second Route Request with a minimum LQI class set to \u201cAverage link.\u201d If this second attempt fails, the originator tries a third and last attempt with a minimum LQI class set to \u201cUnreliable link.\u201d If the three attempts of broadcasting a Route Request fail, an error is returned to the upper layer.  illustrates the Route Discovery process with no Route Candidate upgrade.  illustrates the Route Discovery process with Route Candidate upgrade. If the trace route option is set in the Route Request message, the target Node will set the trace route option in the Route Reply message. In this case, intermediary Routes create a temporary route instead of a static route and the route is recorded in the Route Reply message. The originator of the request can subsequently use the temporary route or source routing to reach the destination. Each Route Request is identified by a unique combination formed by the originator's short address and the Request ID. It is then possible to identify a Route Request already received from another Node.","Referring to , Route Establishment is a process in which a Node asks the Coordinator for a source route to another Node. The originator Node uses the target's 8-octet long address in its request. The Coordinator constructs a route using its current knowledge of the SM network. The Neighbor information contained in the periodic Keep Alive Request messages sent by Nodes is a prime source of information used by the Coordinator to construct routes. The Route Establishment response contains the source route to the target and the target's assigned short address. A route established from Node-A to Node-B is used for one-way communication. When Node-A sends a message to Node-B that requires a reply, Node-B uses the temporary route set up along the route by Node-A's message.","The neighbor exchange process is performed by all Nodes on a periodic basis. The Neighbors Exchange process is used to update neighbor information and routing tables. Each Node in the network generates a periodic Neighbors Exchange message. All Nodes receiving the request update their Neighborhood Table.  shows one Neighbor Information Exchange broadcast message transmitted by Node-A, which is received by Nodes B, C and X.","An LQI measure is taken each time a Neighbors Exchange is received. The value \u201cLQI rx\u201d in the Neighborhood Table is updated according to Table 2.",{"@attributes":{"id":"p-0170","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Calculation of \u201cLQI rx\u201d"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Measured LQI > \u201cLQI rx\u201d in the table","LQI_HIGH_FACTOR of the \u201cLQI rx\u201d present in the table"]},{"entry":[{},"plus (1-LQI_HIGH_FACTOR) of the measured LQI of"]},{"entry":[{},"received message"]},{"entry":["Measured LQI < \u201cLQI rx\u201d in the table","LQI_LOW_FACTOR of the \u201cLQI rx\u201d present in the table"]},{"entry":[{},"plus (1-LQI_LOW_FACTOR) of the measured LQI of"]},{"entry":[{},"received message"]},{"entry":["Neighbors Exchanged missed for the first and","Keep the LQI present in the table"]},{"entry":"second time"},{"entry":["Neighbors Exchanged missed for the third or","Keep LQI_MISSED_EX_FACTOR of the LQI present in the"]},{"entry":["further time","table"]},{"entry":["Neighbors Exchanged missed for the 5th time","Entry disable in the table"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"These rules tend to keep the \u201cLQI rx\u201d in the Neighborhood Table high even if a particular LQI measurement is lower or if a single Neighbors Exchange is missed. This is intentional.","Tree optimization is a recurrent process performed by all Nodes to ensure the network's optimal performance. The preferred route toward the Coordinator is re-evaluated after each Neighbors' Exchange message is received. To avoid tree instability, the \u201cAvg LQI\u201d factor is omitted for tree optimization; it is used only at association when a Node selects its initial preferred route. Only one route change is allowed per 6 cycles of NEIGHBORS_EXCHANGE_PERIOD to provide enough time for the information to propagate in the network. This delay limits the rate at which Child Nodes change their route when the route quality improves.","Each Node on the network shall report its presence to the Coordinator from time to time using Keep Alive Request messages to maintain its association status. The reporting period is determined by the CHECKPOINT_PERIOD and is typically set to be one hour. The period between Keep Alive messages should be constant as specified by the Keep Alive Period field within the Keep Alive Request message. The Coordinator flags a Node as Non Responding if this Node fails to communication with it within the Keep Alive Period. If the Coordinator has not received a Keep Alive Request or a Power Event message in a specified time, it removes the device from is registration table. The Coordinator's timeout period for Keep Alive Request\/Power Event messages can be as long as 90 days. The Checkpoint process is also used to: trace the latest tree route for subsequent requests using source routing; send network management information such as network statistics and neighborhood information; allow configuration of mesh layer parameters controlled centrally; and provide a window of opportunity for the upper layer batch traffic.","The Checkpoint is initiated autonomously by each Node. Checkpoint reporting by each Node is distributed pseudo-randomly within the CHECKPOINT_PERIOD. If the Coordinator needs to have better control over timing of the traffic generated on the network, it can send a Keep Alive Initiate request prior to the autonomous transmission of the Keep Alive Request. The Keep Alive Initiate request relies on the routing information of the previous Keep Alive Request. If this information is out of date, the subsequent autonomous Keep Alive Request sent by the Node will reestablish a valid route. It is important to note that a Keep Alive Initiate request does not create an entry in the Temporary Route table, thereby allowing the subsequent Keep Alive Request to trace the currently optimized tree route. In , Node A sends a Keep Alive Request frame to the Coordinator as triggered by expiration of its CHECKPOINT_PERIOD timer. The Coordinator receives the request and sends a Keep Alive Response frame. The originator Node does not retry the request if it does not receive a reply. After a successful reception of the Keep Alive Response, or timeout of a watchdog timer preset to the value of the parameter COORD_RESPONSE_TIMEOUT, upper layers are notified so they can start exchanging information if needed.","There are three security services provided by the SM network and protocol: privacy, authentication and authorization. Initially, though not all data transmitted throughout the SM network has to be kept private, there are instances where the data sent should be encrypted to protect it from discovery. For example, security key configuration information needs to be kept private. Additionally, data is authenticated in two ways. First the data's integrity is checked to make sure that it has not been changed when transmitted through the network. Data integrity is verified from the source to the destination through one or more hops in the mesh network. Like the data, the address is protected from being changed undetectably. If the key used to protect that address is unique to the source, then the authentication verifies the integrity of the source address and that the stated sender originated the message frame. Further, the operations in messages have permission requirements associated with them. Devices originating messages have authorizations configured in the SM network that give the devices the permission to perform operations that match the permission requirements.","The SM network protocol provides security for management frames routed through the mesh. These routed frames may span more than one hop and therefore need end-to-end security. The security features used by the SM network protocol are authentication and authorization. The mesh layer operations do not require privacy, other than for the transmission of security keys, where the privacy is provided by encrypting the transported keys. The SM protocol provides data link security services for hop-by-hop message transmissions. The SM data-link protocol provides data and source authentication for each hop taken by the message. It also provides operation authorization for local communication with maintenance devices. This security level also provides replay protection for all local and routed communication. Table 3 summarizes the implemented security mechanisms in accordance with a preferred embodiment of the present invention, the behavior of data link and network level counters and the key type used for each message type. For each message type in Table 3, the security method and key specified must be used or the receiver rejects the entire message.",{"@attributes":{"id":"p-0177","num":"0192"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Security Counter and Key type Summary"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Data link layer security","Network layer security"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Counter","When","Key",{},{},"When","Key"]},{"entry":[{},"Security","sent","received","type","Security","Counter sent","received","type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"9","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Route discovery",{},{},{},{},{},{},{},{}]},{"entry":["Route Request","MIC-32","Src. count",">last (n)","S","None"]},{"entry":["Route Reply","MIC-32","Src. count",">last (n)","S","None"]},{"entry":["Route Error","MIC-32","Src. count",">last (n)","S","None"]},{"entry":"Routed services"},{"entry":["Data transfer","MIC-32","Src. count",">last (n)","S","None"]},{"entry":["Power Event","MIC-32","Src. count",">last (n)","S","None"]},{"entry":["Ping Request","MIC-32","Src. count",">last (n)","S","None"]},{"entry":["Ping Response","MIC-32","Src. count",">last (n)","S","None"]},{"entry":["Keep Alive Initiate","MIC-32","Src. count",">last (n)","S","MIC-32","Orig. count","[>last]","N"]},{"entry":["Keep Alive Request","MIC-32","Src. count",">last (n)","S","MIC-32","Orig. count","[>last]","N"]},{"entry":["Keep Alive Response","MIC-32","Src. count",">last (n)","S","MIC-32","Orig. count","[>last]","N"]},{"entry":["Service Forwarding request","MIC-32","Src. count",">last (n)","S","MIC-32","Orig. count","[>last]","N"]},{"entry":["Service Forwarding response","MIC-32","Src. count",">last (n)","S","MIC-32","Reflection","=sent","N"]},{"entry":["Association Confirmation Request","MIC-32","Src. count",">last (n)","S","MIC-32","Orig. count","[>last]","N"]},{"entry":["Association Confirmation Response","MIC-32","Src. count",">last (n)","S","MIC-32","Reflection","=sent","N"]},{"entry":["Route Establishment Request","MIC-32","Src. count",">last (n)","S","MIC-32","Orig. count","[>last]","N"]},{"entry":["Route Establishment Response","MIC-32","Src. count",">last (n)","S","MIC-32","Reflection","=sent","N"]},{"entry":"Non routed services"},{"entry":["Neighbor Info Request","None",{},{},{},"None"]},{"entry":["Neighbor Info Response (Src count,","None",{},{},{},"None"]},{"entry":"Ticket)"},{"entry":["Service Request","None",{},{},{},"None"]},{"entry":["Service Response","None",{},{},{},"None"]},{"entry":["Association Request","MIC-32","Ticket",">last (rc)","M","MIC-32","Orig. count","any","N"]},{"entry":["Association Response","MIC-32","Src. count",">last (rc)","M","MIC-32","Reflection","=sent","N"]},{"entry":["Neighbors Exchange","MIC-32","Src. count",">last (n)","S","None"]},{"entry":["End Device Data Request","MIC-32","Src. count",">last (ed)","S","None"]},{"entry":["End Device Data Response","MIC-32","Src. count",">last (n)","S","None"]},{"entry":"Multicast data transfer"},{"entry":["Mesh Multicast","MIC-32","Src. count",">last (rc)","S","None"]},{"entry":"Point to point communication"},{"entry":["Local Broadcast Request","None",{},{},{},"None"]},{"entry":["Local Broadcast Response (Src count,","None",{},{},{},"None"]},{"entry":"Ticket)"},{"entry":["End Device Node Present (Src count,","None",{},{},{},"None"]},{"entry":"Ticket)"},{"entry":["Local Data Transfer","None",{},{},{},"None"]},{"entry":["Range Test Request","MIC-32","Ticket",">last (rc)","M","None"]},{"entry":["Range Test Response","MIC-32","Src. count",">last (rc)","M","None"]},{"entry":["Range Test Initiate","MIC-32","Ticket",">last (rc)","M","None"]},{"entry":["Range Test Result","MIC-32","Src. count",">last (rc)","M","None"]},{"entry":["Frame Reception Rate Test Init","MIC-32","Ticket",">last (rc)","M","None"]},{"entry":["Frame Reception Rate Test Data","MIC-32","Ticket",">last (rc)","M","None"]},{"entry":["Frame Reception Rate Test End","MIC-32","Ticket",">last (rc)","M","None"]},{"entry":["Frame Reception Rate Test Result","MIC-32","Src. count",">last (rc)","M","None"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]}}]}}},"In Table 3, the following define the behavior of the counters sent: \u201cSrc. count\u201d is the value of the current counter of the sender of the frame (Single Hop); \u201cOrig. count\u201d is the value of the current counter of the originator of the frame within the mesh network; \u201cReflection\u201d is the response use of the value of the counter received in the request; \u201cTicket\u201d is the Counter provided by a Router for use by Nodes before they are associated and for maintenance devices that communicate with the device using point-to-point messages. The nonce is created by concatenating full five octet ticket with the long address of the Router providing this ticket. Also in Table 3, the following define the behavior of the counters received. The \u201c[>last]\u201d means the recipient of the frame, may accepts any counter value, playback rejection is not required since playback is already verified by the DLL security at each hop. Optionally, if the recipient has the memory to store the previously received counts it may reject frames where the count is not greater than the stored count. The \u201c=sent\u201d means the counter received must be equal to the counter sent in the request. The \u201c>last (n)\u201d means the counter received must be greater than the RX Source DLL Nonce Count value maintained in the Neighborhood Table. The Neighbor Info Response frame initializes the RX Source DLL Nonce Count in the Neighborhood Table. The periodic Neighbor Exchange message maintains its currency in the absence of regular traffic between the two devices. The \u201c>last (ed)\u201d means the counter received must be greater than the last RX Source DLL Nonce Count value maintained in the End Device Table. The periodic End Device Data Request message maintains its currency. And the \u201c>last (rc)\u201d means the counter received must be greater than the last RX Source DLL Nonce Count value temporary maintained for a selected Node and acquired in the Neighbor Info Response or Local Broadcast Response. The \u201clast\u201d counts are initialized to zero in the tables and then updated with the first authenticated reception. The following letters are used in Table 3 to define the key type used by each message type. \u201cN\u201d is (private) Node Key; \u201cS\u201d is Shared Mesh Key; and \u201cM\u201d is (shared) Maintenance key.","The SM protocol provides a DLL Security service with data and source authentication using a message integrity check mechanism (MIC-32) as described in Annex B of IEEE 802.15.4:2006 which is incorporated herein by reference in its entirety. DLL security uses the SM DLL Security header to select the security key and set the nonce used in the crypto calculation. The DLL Security header is an optional field, following the Service Type octet, that is present when the DLL Security Header Flag in the Service Type octet is set (=1b), as defined herein. The format of the DLL Security header is shown in . The first fifteen bits (0-14) of the DLL Security header contains a portion of the transmitted nonce count. Bit 15 is the DLL Key ID that selects the current version of the key used to calculate the DLL MIC. This Key ID is used to coordinate the key used during a key change process by explicitly identifying which key was used in generating the DLL MIC.","The MIC-32 data authentication calculation uses the calculation process described in the IEEE 802.15.4:2006 standard. The SM DLL nonce used for the MIC calculation is shown in . The DLL nonce used in the MIC calculation is thirteen octets. The DLL Security nonce combines the full DLL nonce count and the MAC layer source address used by the transmitting device. The Full DLL Nonce Count is five octets long, which ensures that its value does not repeat, within the lifetime of a key, at the frame transmission rates of SM devices. The address used in the MAC nonce is either the 8-octet long EUI address, or the 2-octet source PAN ID plus the 2-octet short address prefixed by four octets of all ones. The Full DLL Nonce Count can be based on either the Source counter or the Ticket counter.",{"@attributes":{"id":"p-0181","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"343pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DLL Nonce Counters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DLL",{},{}]},{"entry":"Counter"},{"entry":["Type","Source counter","Ticket counter"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Count Range","0000000000 to EFFFFFFFFF","E000000000 to FFFFFFFFFF"]},{"entry":["Use","Used as the transmitted count by devices","Used as the transmitted count by devices not"]},{"entry":[{},"associated with a network","associated with a network, devices associating with"]},{"entry":[{},{},"the network or handheld devices communicating"]},{"entry":[{},{},"using the point-to-point messages"]},{"entry":["Message","Count incremented with each transmission","Count incremented with each transmission"]},{"entry":["Transmitter","Stored in non-volatile memory and never reset","For the associated devices, the Ticket is acquired in"]},{"entry":[{},{},"the Neighbor Info Response. For the associating"]},{"entry":[{},{},"devices, Ticket is acquired in the Local Broadcast"]},{"entry":[{},{},"Response or End Device Node Present messages"]},{"entry":[{},{},"The last authenticated value is stored only while"]},{"entry":[{},{},"communicating with a selected device"]},{"entry":["Message","For the associated devices, the count value is","Accepts received counts > stored ticket Stores last"]},{"entry":["Receiver","acquired in the Neighbor Info Response or","authenticated count in the Maintenance Table"]},{"entry":[{},"Neighbors Exchange messages. The last"]},{"entry":[{},"authenticated count is stored in the"]},{"entry":[{},"Neighborhood Table For the non associated"]},{"entry":[{},"devices, the count value is acquired in the Local"]},{"entry":[{},"Broadcast Response or End Device Node"]},{"entry":[{},"Present messages. The last authenticated value"]},{"entry":[{},"is stored only while communicating with a"]},{"entry":[{},"selected device Accepts received counts >"]},{"entry":[{},"stored count"]},{"entry":["Nonce","MAC source long address, or 0xFFFFFFFF","MAC long address of the device that provided the"]},{"entry":["Address","padding and MAC source PAN ID and short","ticket"]},{"entry":[{},"address"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"This process is used for all message types using the Source Counter as listed in the summary table in Table 3. The five octets (bits 0-39) of the Full DLL Nonce Count are constructed using the following algorithm: The least significant octet (bits 0-7) of the transmitted nonce count is the IEEE 802.15.4 MAC header sequence number. The next 15 bits come from bits 0 through 14 of the DLL Security header's SM DLL Count. Together the 23 bits of the transmitted count forms the least significant bits of the counter portion of the SM DLL nonce. The receiver checks the least significant 23 bits of the transmitted count against the last authenticated RX Source DLL Nonce Count. In the case of an End Device, the last authenticated RX Source DLL Nonce Count represent the Source Count acquired using a Neighbor Info Request and maintained in the End Device Table. In the case of mesh messages excluding the Association Request, the last authenticated RX Source DLL Nonce Count represents the Source Count acquired using a Neighbor Info Request and maintained in the Neighborhood Table. The Neighborhood Table entry is selected using the source PAN ID and MAC address of the received message. In the case of an Association Request or of point to point messages, the last authenticated RX Source DLL Nonce Count represents the Source Count acquired using a Neighbor Info Response, a Local Broadcast Response or an End Device Node Present received and maintained temporarily for a selected Node. If the transmitted count value is greater than the last authenticated RX Source DLL Nonce Count, then the transmitted counter bits (0-22) are combined with the most significant bits (2-39) of the last authenticated RX Source DLL Nonce Count to form the Full DLL Nonce Count. However, the transmitted count is assumed to have rolled over if the transmitted count value is less than the value of the corresponding bits in the last authenticated RX Source DLL Nonce Count. When this is the case the value in bits 23 through 39 of the last authenticated RX Source DLL Nonce Count is incremented by one before it is combined with the transmitted bits to form the Full DLL Nonce Count. The MIC-32 is calculated using the Mesh key generation specified by the DLL Key ID. The selected key and the Secure Full Mesh DLL Nonce are used to calculate the DLL MIC-32 value. If the calculated MIC-32 equals the transmitted MIC-32, then the message data integrity is validated and the message has not been received previously. In this case the last authenticated RX Source DLL Nonce Count is updated to the value of the Full DLL Nonce Count used in the MIC calculation.","The SM DLL security nonce ticket counter process is used for all message types using the Ticket Counter as listed in the summary table in Table 3. This process is used for the secured non-routed DLL communications employed by Association Request\/Response messages and by point-to-point messages. For these messages at least one of the MAC addresses has a long 8-octet format, the Maintenance Key is used, and the process is modified. The DLL Key ID selects the appropriate Maintenance Key and nonce count. The following algorithm is used to calculate the MIC. The five octets (bits 0-39) of the Full DLL Nonce Count are constructed using the following algorithm: the least significant octet (bits 0-7) of the IEEE 802.15.4 MAC header sequence number is combined with bits 0 through 14 of the DLL Security header. Together they form the 23 bits of the transmitted count bits of the DLL nonce count.","The Ticket field in the Maintenance Key Table contains the last authenticated count received. The receiver checks the least significant 23 bits from the table and compares them to the transmitted count. If the transmitted count value is greater than the value in the corresponding bits of Ticket then the transmitted counter bits (0-22) are combined with the most significant bits (23-39) of the Ticket to form the Full DLL Nonce Count. However, if the transmitted count value is less than the value of the corresponding bits in the Ticket, rollover of the transmitted count value is inferred. When this is the case the value in bits 23 through 39 of the Ticket is incremented by one before it is combined with the transmitted bits to form the Full DLL Nonce Count. The MIC-32 is calculated using the key specified by the Maintenance Key selected by the DLL Key ID and the Full DLL Nonce Count. If the calculated MIC-32 equals the transmitted MIC-32, then the data integrity is validated and the message has not been received previously. In that case only, the Full DLL Nonce Count is stored in the Ticket Count of the Maintenance Key Table.","The DLL Security header MIC covers the SM message starting with the IEEE 802.15.4 Frame Control octet and continuing on through to the end of the payload. As shown in , the IEEE 802.15.4 physical layer preamble and the Frame Check Sequence are not part of the DLL Security calculation.","The DLL Security header provides security for data authentication and operation authorization of SM messages that can travel one hop. The SM network security header provides end-to-end security for frames, which can travel multiple hops. When present, the network security header provides authentication of data that is not dependent on trusting the intermediate routing devices. The network security header controls security for that portion of the SM frame that does not change as it is routed through the network. The network security header is present when the Originator Network Security Header flag is set as defined in the common mesh header described below","The network security header is shown in . It is located in the SM header after the DLL Security header. The network security NET MIC-32 field is located at the end of the frame, before the DLL MIC-32 field and the IEEE 802.15.4 FCS field (see ). When the Network Security header is present, the receiver's SM application layer security process uses the Originator PAN ID and source address field of the received frame to determine if the frame is from the Coordinator or some other device. The Node Keys stored in the Node Key Table are used for communicating with the Coordinator. The Mesh Keys in the Neighborhood Table are used to communicate with other devices. For frames received from the Coordinator, bit 39 of the Network Security Header specifies the network Key ID, selecting Node Key-0 or Node Key-1. For frames received from other devices, the bit selects Mesh Key-0 or Mesh Key-1.","Routed messages are typically request\/response messages. The response messages reflect the value of the Network Count in the request. Messages that require reflected counts are listed in Table 3.","The SM network layer nonce is 13 octets long. Its structure is shown in . When the message is a request, the combination of the Network Count, the Originator PAN ID and Address padded with zeros ensures the uniqueness of the nonce. When the message is a response the Network Count is reflected and it is combined with the Target PAN ID and address and the Originator PAN ID and address. Devices receiving request messages use the Network Count to verify the integrity of the payload data and optionally check for repeated count values to reject already received responses. Devices receiving responses to request messages check that the Network Count equals that in the request message. If it does not, the message is rejected. Response frames with repeated Network Count values also are rejected.","The SM Network MIC-32 is authenticated using the following algorithm. First, the 39 bits of the Network Count is taken from the Network Security Header and padded with a zero to make a 40 bit field. This forms the counter portion of the network nonce. Next, the MIC-32 is calculated using the key specified by the Network Security header Key ID, using the Node Key for communications with the Coordinator and the Mesh Key for communications with other devices.","If the calculated MIC-32 equals the transmitted MIC-32, then the data integrity of the received frame is validated. The coverage of the Network Security header MIC is shown in . The Network MIC-32 provides authentication for almost all the SM frame's header field and payload. The portion of the SM frame's header field that is not covered by the Network MIC is the Max Remaining Hops field, which is decremented for each hop. Keep Alive Request messages have a second exception to the Network MIC-32 coverage: their Hop Addresses and Number of Hops fields. As with the DLL, having two key in each of the Mesh Key Table and Node Key Table entries allows the Coordinator to set up new keys for devices without causing Network Security header MIC errors.","The SM network security process used for transmitting a message with a Network Security header is shown in . Node-A prepares a request message for transmission by incrementing its source transmission counter and calculating the Network MIC. It then formats the request frame with the full five octet source transmission count in the Network Security header and transmits the message through Node-B to Node-C. Node-A stores the count used and starts a message response timer with a timeout set to MESSAGE_RESPONSE_TO. Node-C receives the request message and authenticates the Network Security header. Node-C prepares a response to Node-A using the same count value it received in the request. Node-A receives the response and checks that the count value is the same as what it transmitted. Node-A releases the stored count and stops the message response timer if the stored count is the same as the response count and the Network Security header is authenticated. If the tests fail and no other valid response frame is received in the timeout period, Node-A fails the request\/response process and releases the stored count value. Messages transmitted between the Coordinator and a device that employ the Network Security header use the Node Key assigned to the device. Messages transmitted between devices that have a Network Security header use the Mesh Key.","New devices associating with a network must be configured with the Node Key and Maintenance Key. This configuration may be done by the manufacture as a custom process for a purchaser, by a maintenance tool prior to association or over the network using the Service messages described further herein. Keys transported over the network must be encrypted for confidentiality. When sent in Service Response and Service Forwarding messages, the keys are generated by the Configuration Host and encrypted using the device's Device Key before being placed in the message payload. The Coordinator and the routing devices forward the encrypted keys without knowing the Device Key, so they are unable to eavesdrop on the value of the new key. This configuration process is between the device's application and the Configuration Host application. It is not part of the overall mesh protocol. An outline of the device application to configuration host application configuration process is presented here for informational purposes. The new device uses a Service Request message to talk to the Configuration Host. The outgoing Service Request message contains a Service MIC in the payload that is calculated using the manufacturer-supplied Device Key. (This Service MIC is not the DLL or Network MIC.) The routing device forwards the payload in a Service Forwarding message and the Coordinator sends the message to the Configuration Host. The routing device and the Coordinator do not have the Device Key and so they do not decode the MIC. The Configuration Host uses a well known Server ID (=0) in the Service Request message. The Configuration Host looks up the 8-octet device MAC address and finds the Device Key in its database. If the MIC is OK it authenticates the new device. The Configuration Host sends a message to all Coordinators in the network that sets up a unique Node Key associated with the 8-octet device MAC address. This is a symmetric secret key that will be used for all secure communications between the Coordinators and the new device. In preferred embodiments, Node Key-0 and Node Key-1 are set to the same value to avoid key synchronization problems as the system starts. This same value practice holds for the Maintenance Key-0 and Maintenance Key-1 values as well. After sending the Node key to the Coordinators, the Configuration Host sends a response to the new device using a Service Forwarding Response or Service Response message, where the message payload contains the unique Node Key and the shared Maintenance Key, both encrypted by the new Node's Device Key. This response is sent back to the new device. The new device decrypts the Node Key and the shared Maintenance Key and stores them under the appropriate Key ID.","A device that is newly introduced to a SM network has only a single cryptographic key: its factory-assigned permanent Device key, which is unique to the device. Before the device can participate in the SM network, the device must be commissioned with the network's Maintenance and Mesh keys, together with a device-unique Node key and a second system-assigned device-unique Device key. This commissioning may be made over the network itself, by direct wireless messaging to the device from a proximate commissioning device, or through some extra-protocol means, such as a direct connection to the device.","The Maintenance, Mesh and Node keys are used to authenticate messaging within the SM. Node keys are used to authenticate and encrypt end-to-end network management messaging within the SM. The permanent Device key is used only to authenticate the newly introduced device to the SM network and to protect the system-assigned Device key when it is sent in response to the newly introduced Node. The system-assigned Device key is then used to protect the device's Node key and the shared Maintenance key when they are distributed to the Node. In subsequent messages, the device's Node key is used to protect the Mesh key whenever it is distributed to the Node. Receipt of a message that authenticates under the permanent Device key zeroizes all other keys, setting them to a \u201ckeyNotDefined\u201d status, which restores a device's key state to that when it left the factory. This action protects the network against an attacker that has compromised the device's permanent Device key, perhaps by gaining access to the database of all permanent Device keys that exist at key repository, or to the subset database of Device keys of purchased devices that was delivered to the system owner.","A secure association between a device and a Coordinator uses the Association Request and Association Response messages that employ the DLL MIC and Network MIC. The associating device uses the Maintenance Key Ticket count value for the DLL MIC and the Node Key and Originator count value for the Network MIC. The routing forwards the Association Request payload to the Coordinator in the Association Confirmation Request message. The payload also includes the 8-octet MAC address of the new device. This forwarding process is shown in . The Coordinator validates the Association Confirmation Request message DLL Security header and Network Security header. It then validates the embedded Network Security header constructed by the new device using the new device's Node ID and the Originator count in the Network Security header. The Coordinator looks up the Node ID using the 8-octet address in the Association Confirmation Request message in a data base that has been configured by a process outside the scope of the mesh protocol. For valid association requests the Coordinator constructs an Association Confirmation Response message. The message payload has the assigned short address of the new device, the Mesh Key Security Header, the Encrypted Mesh Key and the Mesh Key MIC32. The Mesh Key is encrypted using the new device's Node Key version as specified in the Mesh Key Security Header. The Coordinator constructs a Network Security header and that calculates the Network MIC using the Coordinator's reflected count in the new device's Network Security header and the new device's Node Key. This Network Header is carried as the payload of the Association Confirmation Response message shown in .","The Mesh Key Security Header follows the same format as the 40-bit Network Security control word shown in  with the Reflected Count Flag set to 0. The routing device that forwards the association response to the new device takes the payload of the Association Confirmation Response message and generates the Association Response message using the Maintenance Key and the router's Source count value to calculate the DLL MIC. The new device decrypts the Mesh Key using the Node Key with the Key ID specified in the Encrypted Key Security Header, it then verifies the Mesh Key MIC32 and stores the Mesh Key. Devices that change the primary Coordinator with which they are associated follow the same procedure as new devices. They use the same Association and Association Confirmation messages and the same Node Key and Maintenance Key.","Preferred embodiments of the present invention institute key rotation practices; changing the security keys periodically or when a security event has occurred. The mesh keys used by a device are the Node Key, the Maintenance Key and the Mesh Key. The Coordinator changes these keys using the Keep Alive process and messages.","Each device maintains two versions of each of these keys: Node Key-0, Node Key-1, Maintenance Key-0, Maintenance Key-1, Mesh Key-0 and Mesh Key-1. Each message sent has Key IDs in the DLL Security header and Network Security header that indicate which key is being used. In between key changes all the devices use only one version of each key for transmission and reception. The Coordinator writes the new key to the appropriate key and key version of each device. When the update process is finished and verified at most or all relevant devices, the Coordinator signals the devices to start using the new key for transmission. After all the devices are using the new key for transmission, the Coordinator deactivates the old key for reception.","The Coordinator starts an update of a key by getting the current state of the current Write Key Toggle Bit associated with the key. It does this by waiting for a Keep Alive Request message from a device with the key as shown in . The Keep Alive Request message from the device contains the Write Key Toggle State field that tells it current status of the toggle bits for each key. The Coordinator then sends the key update using the Write Key parameter option in the Keep Alive Response message. The Coordinator verifies that the key has been updated by reading the change in state of the selected key's Write Key Toggle Bit in the next Keep Alive Request. The process is repeated if the key has not been changed.","Eventually, all (or almost all) the devices have both the new key and the old key. Only the old key is used for transmission, but either the new key or the old key can be used for reception. The reception key selection is controlled by the DLL Security Header and the Network Security Header.","After all devices using the key have been updated and verified, the Coordinator tells the devices to start using the new key for transmission. The Coordinator waits for a Keep Alive Request message from a node using the new key as shown is . In the Keep Alive Response message, the Coordinator commands the node to switch to the new key for transmission. The switch is confirmed in the next Keep Alive Request message received from the device. After all the devices using the new key have switched, the Coordinator deactivates the old key by waiting for a Keep Alive Request and then sending a Keep Alive Response containing the appropriate key deactivate command. The Coordinator verifies the deactivation in the next Keep Alive Request received from the device. This process is used to update Node Keys, Maintenance Keys, and Mesh Keys. The Process for changing a generic Key x, version 0, is depicted in . Note that only the Coordinator is allowed to originate a Keep Alive Response message with key control commands in it.","An End Device's association to the network is similar to that of a regular Node (see Association). The only difference is that after the End Device has selected a Coordinator, it usually also needs to choose a Router to help with message forwarding.  shows a new End Device, Node-A, requesting neighbor information and receiving. In this example there are two PANs and three neighbors. Based on the Association Ratio algorithm, Node-A selects the Coordinator on PAN . It also selects Node-B as its Parent using the Parent Selection algorithm. Node-A then sends Node-B an Association Request message, which Node-B converts to an Association Confirmation Request message addressed to the Coordinator. The Coordinator sends the Association Confirmation Response message back to Node-B. Node-B then sends the Association Response message to Node-A. Node-B adds Node-A to its End Device Table after receiving a Keep-Alive Request message from Node-A with the \u201cDevice Type\u201d set to End Device type and the Receiver On When Idle bit reset (to off). This first Keep-Alive Request message also carries the Multicast Group Addresses list which is captured by Node-B for future filtering and forwarding of Multicast messages. The Coordinator receives the Keep Alive Request message. A Parent can remove a Node form its End Device Table if it has not received any Keep Alive Request messages from this Node for a period exceeding 24 hours.","When an End Device loses connectivity with its Parent (i.e. after a number of unsuccessful attempts to communicate determined by the ROUTE_LOST_ATTEMPTS parameter), it tries to find another Router on the same network. The End Device sends a Neighbor Info Request on the current channel and uses the Parent Selection algorithm to choose its new Parent. Then it sends a Keep Alive Request to inform both the Parent and the Coordinator of this change. The processes of re-associating with the Coordinator and a new neighbor are shown in . The End Device, Node-A, fails to communicate through Node-B and, after a number (ROUTE_LOST_ATTEMPTS) of attempts it broadcasts a Neighbor Info Request to Nodes on the same channel and PAN. It then selects the best neighbor with which to associate. In this case Node-E is selected. It then sends a Keep Alive Request message to the Coordinator though Node-E. The Coordinator returns a Keep Alive Response message.","Message forwarding with a non-sleeping End Device is done as soon as received. Referring to , a Non-sleeping End Device advertises its presence to its Parent and to the Coordinator in both the Association Request and the Keep Alive Request messages. In both of these messages, the Device Type field is set to End Device type and the Receiver On When Idle is set.","In the case of transmission by the Sleeping End Device, the Parent allows the End Device to return to sleep as soon as the transmission acknowledgment (802.15.4 ACK MAC-PDU) for the message is received. All frames sent to a Sleeping End Device (unicast, multicast and broadcast) are buffered by its Parent and transmitted to it when it is awake. If a response is expected, a Sleeping End Device wakes up every RESP_SLEEP_PERIOD until the expected response is received. If no response is expected the Sleeping End Device sleeps for the interval SLEEP_CHECK_PERIOD. The Sleeping End Device wakes up periodically at each SLEEP_CHECK_PERIOD to check for buffered frames. It also wakes up when it has a message to transmit. When it wakes up with a message to transmit it first checks for buffered frames before it transmits its own message.","The Sleeping End Device frame forwarding process is illustrated in . The sleeping Node-A wake ups and checks for any frames buffered in Node-B by sending an End Device Data Request message. Node B replies with an End Device Response message with the \u201cno Frame Pending\u201d status that tells Node-A there are no frames buffered. Node-A then transmits a frame that does not require a response to a target application through its Parent, Node-B. Node-A waits for an ACK MAC-PDU from Node-B and then goes to sleep for SLEEP_CHECK_PERIOD. This sleep is interrupted when Node-A wakes up to transmit another frame. The new frame is a request that requires a response from the target. The request frame is routed to the target by Node-B. When Node-A receives the MAC level ACK from Node-B, it restarts its sleep timer with a duration set to the value of RESP_SLEEP_PERIOD. Node-B forwards the request frame to the target application that then generates a response frame. Node-B receives and buffers the response frame for Node-A which is sleeping. Node-A wakes at the end of the time period and sends Node-B an End Device Data Request message and receives an End Device Response message with the Frame Pending bit set. Node-A waits for the stored frame for a maximum duration of MAX_MF_WAIT. If it does not receive a frame during this time interval, it resends the End Device Data Request message. In , Node-B sends the response frame in its buffer to Node-A before the MAX-MF_WAIT_PERIOD. Node-A sends Node-B an ACK MAC-PDU and goes back to sleep with the timer duration set to the value of SLEEP_CHECK_PERIOD. Node-B releases the buffer when it receives the ACK MAC-PDU from Node-A.","Sleeping End Device wakeups periodically to verify a message is pending. Each SLEEP_CHECK_PERIOD the Sleeping End Device sends an End Device Data Request frame to its Parent and waits a predefined time, DATA_REQUEST_TIMEOUT, listening for pending frames before returning to sleep.  show the Sleeping End Device Checkpoint process. In  a message is received for Sleeping End Device, Node-A, and buffered by the Parent Node-B. Node-A wakes when its Checkpoint timer expires. It sends an End Device Data Request message to Node-B and receives an End Device Data Response message with the frame-pending bit set. Node-A then starts its listen timer with a duration of DATA_REQUEST_TIMEOUT and listens for a frame from Node-B. Node-B sends the buffered frame to Node-A, which stops the listen timer. The frame does not have the frame-pending bit set, which tells Node A that there are no more frames to receive. Node-A sets the Checkpoint timer with the duration CHECKPOINT_PERIOD and goes back to sleep. Node-B releases the buffer when it receives the ACK MAC-PDU frame from Node-A.","In , Node-A wakes up when its Checkpoint timer expires. In this case Node-B has no frame stored for Node-A, so when Node-A sends the End Device Data Request message Node-B's replying End Device Data Response message does not have the frame-pending bit set. Node-A sets its Checkpoint timer with the CHECKPOINT_PERIOD and goes back to sleep.","This process exemplified in  is used to initiate a point-to-point communication with a Sleeping End Device. Typical applications for this type of communication are between a handheld device and a sleeping End Device and occur during installation, operation, and maintenance processes. A physical trigger (button, reed switch+magnet) initiates Local Communication. This sets the Sleeping End Device in local communication mode. The Sleeping End Device then sends an End Device Node Present message with a periodicity of END_DEVICE_PERIOD and listens for the interval END_DEVICE_WAIT for any command sent in response. This process stops and the Sleeping End Device goes to sleep if it has not communicated with a local device in the interval determined by the END_DEVICE_INACTIVITY_TO parameter. Once a communication is initiated with a local device, the Sleeping End Device stays in the local communication mode for the time interval determined by the END_DEVICE_INACTIVE_TO parameter after each frame is received or transmitted.","In , a Sleeping End Device, Node-A, receives an external trigger that puts it in a mode where it looks for a local device with which to communicate. It transmits an End Device Node Present frame and starts two timers. The first timer is the end device notification timer, END_DEVICE_PERIOD, which determines how long the Sleeping End Device listens for a response to the notification message. The second timer is the end device notification process timer. It determines how long the Sleeping End Device remains in the state where it is looking for a local device. In , Node-A sends one End Device Node Present message that is not heard by the local device. After the end device notification timer expires, it sends a second End Device Node Present message that triggers a second response by the local device. The ACK MAC-PDU from the local device terminates the two timers and puts Node-A in the local communication mode. In this mode Node-A starts the end device communication timer that is set with a duration specified by the LOCAL_COM_TO parameter. During the first timer period the local device sends Node-A a frame that resets the timer. During the second timer period Node-A initiates a frame of its own to the local device. This transmitted frame also resets the timer. There is no communication during the third period other than the ACK MAC-PDU from the local device. The ACK MAC-PDU does not reset the timer, which then expires, causing Node-A to exit from the local communication mode.","The concept of Dedicated Routers allows the deployment of multiple Coordinators at the same physical location. This approach consists of deploying multiple Routers, possibly with directional antennae, where each Router is dedicated to a specific mesh network\/Coordinator. A Dedicated Router has the following specific behavior: a Dedicated Router is associated to a specific Network Name and is manually configured with this name and a Dedicated Router can associate only to the Coordinator or another Dedicated Router; it is not allowed to associate with a normal (non-dedicated) Router. This restriction is imposed to avoid the situation where a Dedicated Router works for some time until its environment changes in such a way that it is no longer capable of establishing a route to its Coordinator. For the computation of the association ratio, a Dedicated Router is seen as a no-hop-distant device similar to a Coordinator. This guarantees that surrounding devices will prefer the Dedicated Router over other Routers for their association. Dedicated Router sets the Dedicated Router Flag in the Neighbor Info Response message. Nodes receiving Neighbor Info Response message with the Dedicated Router Flag set shall consider it to be as a no-hop-distant device when computing its Association Ratio.","The following mechanisms are provided to control the flow of messages on the network and to provide some control on message latency. Most traffic is either sent from or to the Coordinator. Message latency is directly affected by the way the Coordinator manages this traffic. Internally, the Coordinator orders messages based on the importance of the associated task and the notion of priority implemented by the application layer. In the case of the ANSI C12.22 application layer, this notion of priority takes the form of the URGENT flag carried in the Calling AE Qualifier element. To control traffic flow in the reverse direction, the protocol allows the Coordinator to control the timing of the Checkpoint process at each Node. To do this, the Coordinator sends a Keep Alive Initiate message to each Node before the end of that node's CHECKPOINT_PERIOD. Frames routed within the mesh network have an Urgent flag, which when set permits the Router to reorder outbound frames when there are other frames of lesser priority in the transmit queue. Nodes are not permitted to use the entire network capacity for any extended period of time. In the network protocol, this throttling is provided by a single-frame transmission window with an end-to-end acknowledgment.","A mesh forwarding process is required for support services that are used before a Node has associated with a network. This forwarding process allows the unassociated Node to communicate with service hosts such as commissioning or location tracking hosts on a LAN or WAN segment. The commissioning process is implemented by the application. The secure mesh protocol does not determine how commissioning is done, but it does support over-the-network commissioning using the Service and Service Forwarding messages. When used, these messages convey the Node Key and Maintenance Key that will be used by the device so that it is able to run the Association processes. Alternatively, the device could be commissioned with these keys during manufacturing.","The forwarding process is illustrated in . The requesting device issues a Neighbor Info Request frame and listens for Neighbor Info Response frames. This is the same process used when the device associates with the network. The neighbor information process is shown in . The device uses the Association Algorithm to pick the neighbor to use as a proxy for service message forwarding. The requesting device, Node-A, places the service message in a Service Request frame addressed to the selected neighbor, Node-B. The Service Request frame identifies the service the message is to go to in the mesh header in the \u201cServer\u201d field. The Service Request frame is then transmitted to Node-B. Node-A starts a \u201chalt service request timer\u201d when the MAC ACK is received from Node-B. This timer is set with the parameter SERVICE_PERIOD that prevents Node-A from sending more service frames until the timer has expired.","Node-B recognizes the Service Request frame from its \u201cservice type\u201d and \u201cservice code\u201d fields. It processes the frame by assigning the forwarding process for Node-A a \u201cRequestor id\u201d value and sending the contained information to the Coordinator in a Service Forwarding frame. Node-B starts a \u201chalt service request RX timer\u201d when it successfully transmits the Service Forwarding frame. The timer is set with the SERVICE_PERIOD parameter. While the timer is active, Node-B does not accept additional Service Request frames from any Node, including from Node-A.","The SERVICE_PERIOD timeout set by both Node-A and Node-B is cancelled as soon the service host accepts servicing the request as indicated by an appropriate service reply. The SERVICE_PERIOD timeout is reestablished for each new Service Request frame that is sent.","The Coordinator receives the Service Forwarding frame from Node-B. It registers the \u201cRequestor ID\u201d value and Node-B's address. The Coordinator sends the service message contained in the Service Forwarding frame to the service host identified in the \u201cServer Requested\u201d field. When the service host responds, the Coordinator puts the service message in a Service Forwarding Reply frame and addresses it to Node-B. The Coordinator also fills in the \u201cRequestor id\u201d value for Node-A. The Coordinator sets a \u201cService keep-alive timer\u201d that will release the forwarding process if it is inactive for the duration SERVICE_TO. Releasing the forwarding process for Node-A removes the Node-A's \u201cRequestor id\u201d from memory.","Node-B receives the Service Forwarding frame from the Coordinator and looks up the \u201cRequestor id\u201d to identify Node-A as the destination. The receipt of the Service Forwarding frame sets Node-B's \u201cService keep-alive timer\u201d for the duration SERVICE_TO. If the timer expires before another Service Forwarding frame is received for Node-A, the Node-A \u201cRequestor id\u201d is released. Node-B constructs the Service Requestor response frame and sends it to Node-A.","Node-A receives the Service Requestor response frame and extracts the host's service message. The receipt of the Service Requestor response frame sets Node-A's \u201cService keep alive timer\u201d for the duration SERVICE_TO. If Node-A does not receive another host message in this time, it times out the service-request process. If later there is another message generated to a host, the service-request process is restarted from the beginning with a new Neighbor Info Request frame.","Every Node in the mesh network can notify the Coordinator rapidly after it loses power or when the power is restored. The performance goal for the process is to have most Nodes notify the Coordinator within one minute after their status changes. Those Nodes that take longer should not exceed the three minutes of backup power provided by the Nodes implementing the Power Outage Routing option as advertised by the Neighbors Exchange service. The system load induced by this process is a critical consideration because every Node may need to communicate in a very short time. Power event report aggregation and low overhead tree routing are employed to reduce the amount of system communication capacity used for this reporting.",{"@attributes":{"id":"p-0222","num":"0237"},"figref":"FIG. 36"},"Any Node that has a power event that passes this transient-suppression test goes into the PO_AGGREGATE_PERIOD round. The leaf Nodes\u2014Nodes without any Children in their Neighborhood Table\u2014and first hop Nodes report their event in this round. To distribute these transmissions more uniformly, each reporting Node transmits at a pseudo-randomly-chosen time within the interval whose duration is PO_AGGREGATE_PERIOD. Nodes receiving events during this interval aggregate these events for later transmission. At the end of the PO_AGGREGATE_PERIOD round, Nodes enter the PO_RND_PERIOD round. Event Nodes that have event reports to send schedule transmission at a pseudo-randomly chosen time within this interval. During this interval, non-aggregating Nodes are free to piggyback their event report to any of the Power Event Report frames that they may route; however, aggregating Nodes must initiate their own Power Event Report frame since the eventual acknowledgment they receive for the forwarded aggregated event reports needs to be broadcast to the aggregator's neighbor Nodes.","The Coordinator receives power event reports and sends acknowledgements. These event acknowledgements follow a source route constructed from the entries in the Power Event Report. Because of this, the acknowledgement message follows the reverse route of the report and confirms the reception to each Node reporting an event. When the target Node is not the last Nodes in the reporting list within the Power Event Report, the target address is set to the broadcast address (=0xFFFF). The broadcast address allows leaf Nodes to be acknowledged using a broadcast at the end of the source route path. Reporting Nodes that do not receive an acknowledgement from the Coordinator at the end of the PO_RND_PERIOD round enter into a PO_RETRY_RND_PERIOD round.","Each such Node schedules a transmission time pseudo-randomly within the following interval of duration PO_RETRY_RND_PERIOD. This round is repeated until the event report is acknowledged or the backup power is exhausted. Nodes acknowledged prior to a scheduled power event reporting transmission do not initiate that transmission, even if they had entered into the retry round. Nodes reporting a power event do not initiate any Data Transfer messaging of their own while they are in any of the power event reporting rounds. All event Nodes continue to route the messages they receive.",{"@attributes":{"id":"p-0226","num":"0241"},"figref":"FIG. 37"},"At the end of the delay, if Node-A was not able to piggyback its event, it initiates its own Power Event Report frame including any additional aggregated events.","After sending or piggybacking its event report, Node-A expects an acknowledgment from the Coordinator. In , Node-A receives this acknowledgement and so it does not enter into a retry state at the end of the current round. Even though Node-A does not go into a retry round, it continues to route messages until its backup power is exhausted.",{"@attributes":{"id":"p-0229","num":"0244"},"figref":["FIG. 38","FIG. 37"]},"At the end of the round, Node-A goes into a retry round. The retry round lasts for the time determined by the PO_RETRY_RND_PERIOD parameter. Node-A selects its retry transmit time pseudo-randomly within the period and resends a power event report containing its address. Node-A does not have to originate a retry frame if it has an opportunity to add its event report to a routed Power Event Report frame while in the retry round.","An example of power event reporting for a Node that is one hop from the Coordinator is shown in . Node-B is a neighbor of the Coordinator. One-hop Nodes can transmit their reports to the Coordinator in the PO_AGGREGATE_PERIOD round. Node-B transmits the power event report after a pseudo-randomly-chosen delay and receives an acknowledgement. If the acknowledgement were not received, the Node would retransmit the event report in the following PO_RND_PERIOD round.","Leaf Nodes transmit their reports during the PO_AGGREGATE_PERIOD round.  shows a typical leaf Node power event reporting process. A Leaf Node, Node-C, chooses a pseudo-random time within the interval of duration PO_AGGRETATE_PERIOD to transmit its power event report. The acknowledgement for this report may not be received until near the end of the interval of duration PO_RND_PERIOD. In this case Node-C receives the acknowledgement and its power event reporting process is completed. If an acknowledgement is not received, Node-C enters an interval of duration PO_RETRY_RND_PERIOD and retransmits the event report. This continues until Node-C runs out of backup power or an acknowledgement is received.","Tree routing is normally used to send power outage\/restoration event notification frames. Mesh routing may also be used as an alternate method if the Node has been waiting to send its event for more than the time set by the parameter POWER_REPORT_WAIT.","Power restoration reporting uses the same process and messaging as power outage reporting, except that the parameters PO_RND_PERIOD and PO_RETRY_RND_PERIOD are replaced by the parameters PR_RND_PERIOD and PR_RETRY_RND_PERIOD. For Nodes that are members of overlapping networks, power outage and power restoration notifications may be done to any of the registered networks. Different Coordinators are selected in round-robin fashion at each attempt of reporting a notification. Attempts to send power restoration notifications are repeated up to the duration RESTORATION_TIMEOUT. Nodes that are not members of overlapping networks initiate an Association process after waiting an interval whose duration is RESTORATION_TIMEOUT. After a successful Association, the associating Nodes do not need to send Power Event Report messages since the Association process itself sets the Coordinator's state for the Node to \u201cAlive.\u201d","A mesh multicast service is used to send application level information to a group of Nodes that share the same group address. A group address is a 2-octet short address within the range 0x3000 to 0x3FFF. Group addresses are well known or configured, with well known addresses assigned from address 0x3FFF and decreasing while configured addresses are assigned from address 0x3000 and increasing. The mesh layer does not provide services to configure group addresses; such assignment needs to be made by the application layer from a centralized location such as the Coordinator.","A Mesh multicast service consists of a local broadcast by the originator of the multicast message. Each Router receiving this message verifies: that the message has been received from an authenticated Node listed in its Neighborhood table; and that the message Originator address and Request ID do not match those of a previously processed message. The Router then verifies that the Target Address matches one of its own group addresses. If a match is found, the message is propagated to the Router's upper layers for processing. The Router also determines whether the Target Address matches a group address of its child End Devices. If so, the message is sent to each child End Device having a matching group address. A copy of the message is saved for each Sleeping End Device with a matching group address.","Child-group-addresses are acquired by a Parent Router by inspecting the first Keep Alive Request message sent by each child End Device after the End Device chooses or changes its primary parent. Routers do not forward group-addressed frames to End Devices for which they are not primary parents.","Multicast Data Transfer frames with a Max Remaining Hops field greater than one are re-broadcast. To re-broadcast a message the Router first decrements the Max Remaining Hops field and broadcasts the resulting message to its own neighbors. Duplicate multicast messages are ignored based on the messages' Originator address and Request ID as specified previously.","The Max Remaining Hops field can be used to limit the region for which a multicast is sent. To target all Nodes within the network, a Coordinator should set the Max Remaining Hops field to the value MAX_HOPS. To achieve the same result for frames from a different source, a non-Coordinator Node should set the Max Remaining Hops field to twice the value MAX_HOPS. All SM nodes in a group have the well known group address shown in Table 5.",{"@attributes":{"id":"p-0240","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Well known group addresses"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Address","Group"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"0x3FFF","All SecureMesh Nodes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A simple example of the mesh multicast process is shown in . Node-X initiated the multicast data transfer, which progressed through the mesh network until it reached Node-A and Node-B, where Node-A is a neighbor of Node-B and Node-C, and Node-C is a neighbor of Node-D, but Node-B is not a neighbor of Node-C. Node-A receives the Multicast Data Transfer frame and checks the Originator Address and Request ID. Because it appears to be a previously-unreceived multicast frame and the value of the Max Remaining Hops field is greater than one, Node-A forwards the frame after decrementing the value of the Max Remaining Hops field. The forwarded frame goes to Node-B and Node-C. Both Node-B and Node-C also forward the frame to their neighbors. The frame forwarded by Node-C goes to Node-D where it is not re-forwarded because the value of the Max Remaining Hops field in the received frame equals one. At a later time, Node-B receives the multicast frame via another route. This duplicate frame carries the same Originator Address and Request ID as the prior frame, so it is discarded and not forwarded.","The local communication process is used to initiate point-to-point communication between two Nodes that may not already be part of the same mesh network. Typical applications that use this type of communication are installation, operation and maintenance activities and walk-by reading of Nodes using a handheld reader. Local communications use the Node's long 8-octet IEEE EUI-64 address rather than its short 2-octet address. In the cases of walk-by communication with targeted devices that are not sleeping, the handheld device issues the Local Broadcast Request frame to initiate local communication. From the responses to this local broadcast, the handheld device can build a table of local devices that are awake, where each table entry includes the following information about the responding Node: long and short addresses;","PAN IDs; Device Class information; and optionally Network Name, security flag, VERSION, OWNER, and BAR_CODE_ID.","From this resulting acquired table of device information, the user can select the device with which to communicate. There are two local communication options: 1) local data transfers that use the application level services using Local Data Transfer frames, and 2) RF link measurements using the Range Test Request and Range Test Response frames.",{"@attributes":{"id":"p-0245","num":"0260"},"figref":"FIG. 42"},"The Range Test process uses the local communication Range Test Request and Range Test Response frames. The Range Test Request command frame is used to check whether Node is reachable in the local communication mode. The Range Test Response frame reports the signal strength as recorded by the responder in the forward direction. The signal strength of the response is measured by the range test originator to determine signal strength in the return direction. The Range Test Initiate and Range Initiate Result frames can be used to request one Node to perform a range test with a different Node and to report the test results to the requester. A typical example of this function is for a handheld test tool to request a Router to do a range test with an End Device.",{"@attributes":{"id":"p-0247","num":"0262"},"figref":"FIG. 43"},"The FRR test is used to evaluate the one-way link quality between a sender and a receiver. Theses two Nodes need to be able to reach each other directly. The sender sends a configurable number of frames in local communications mode to the receiver. At the end of the test, the receiver sends a result frame to the sender. This frame contains the FRR and the average LQI for received frames. A frame reception rate session consists of: the transmission of the Frame Reception Rate Test Init message; multiple transmission of the Frame Reception Rate Test Data messages; the transmission of the Frame Reception Rate Test End message; and the reception of the Frame Reception Rate Test Result message.","With the exception of the Frame Reception Rate Test Data messages, Frame Reception Rate Test control messages are transmitted with MAC layer acknowledgment and retry. In the case of a MAC layer transmission failure, such control messages are re-transmitted up to a maximum of FRR_TEST_RETRY times.","An example of the frame reception rate test process is shown in . A handheld initiates the test in this example by sending the Frame Reception Rate Test Init message to Node-A. The test is set to send N test frames without acknowledgements. The handheld starts sending the first of the N test frames to Node-A after it receives the ACK from Node-A for the test-initializing message. The Frame Reception Rate Test End message is sent after the N test frames. The test end message is acknowledged by Node-, which then sends the Frame Reception Rate Test Result v to the testing handheld.","The ping command is used to check whether a Node is reachable through the mesh network, and to determine and trace the routes used for each direction of communication. The Ping frame tests the ability of a device to reach a Node that is more than one hop distant, since testing of the first hop is provided by Range Test commands. A Ping Request can be used by a Coordinator to determine whether a device that is awake is reachable in the intervals between Keep Alive Requests. The Ping Request frame can be used with any type of routing. As the frame traverses each Node, the RSSI and LQI values measured during frame reception are noted. Both values are added to the frame before it is forwarded. The addressed receiving device processes the Ping Request frame, converts it to a Ping Response frame, and sends that response back to the originating device. The RSSI and LQI values measured during frame reception on the return path are appended to those accumulated as the Ping Request frame traversed its forward path.","In , Node A initiates a Ping Request message targeting Node-C. The frame within the Ping Request message is routed through Node-B. Node-B updates the frame data by incrementing the hop count, and appending its 2-octet address, the measured RSSI and the observed LQI to the Ping Request frame's accumulated data before forwarding the frame to Node-C. Node C converts the received Ping Request frame to a Ping Response frame and sends it to Node-A. When the Ping Response frame arrives at Node-A, it contains the path traversed by the request and response frames and the measured RSSI and observed LQI values noted at each hop.","The SM frame structure is presented so that the leftmost or first-described field is transmitted or received first. Except for octet arrays, all multi-octet fields are transmitted or received least significant octet first. To maintain compatibility with the IEEE 802 standards, addresses and PAN identifiers are considered octet arrays and are transmitted unaltered, which is equivalent to transmitting them most significant octet first when viewed as multi-octet fields.","Each frame described in this document includes MAC layer fields, which are documented within the mesh layer to provide the context on which the mesh layer operates. The MAC and mesh layers are tightly coupled, so that information required by the mesh layer that is already present at the MAC layer is not duplicated. Descriptions of the MAC layer fields are provided in this subsection so that they need not be duplicated in the description of each mesh-layer frame format. More information on these fields can be found in the IEEE 802.15.4:2006 standard, which is the controlling specification for the MAC protocol and is incorporated herein by reference in its entirety.",{"@attributes":{"id":"p-0255","num":"0270"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MAC Layer Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Frame Control","Unsigned 16 bits","See sub fields below:"]},{"entry":["Frame Type","Bits 2-0","One of the following frame types:"]},{"entry":[{},{},"0 = Beacon"]},{"entry":[{},{},"1 = Data"]},{"entry":[{},{},"2 = MAC acknowledgment"]},{"entry":[{},{},"3 = MAC command"]},{"entry":["Security Enabled","Bool 3","Set if the frame is cryptographically protected by the MAC"]},{"entry":[{},{},"layer as specified in IEEE 802.15.4: 2006. This bit is reset in"]},{"entry":[{},{},"the SM protocol."]},{"entry":["Frame Pending","Bool 4","Set if the Router sending the frame has additional data"]},{"entry":[{},{},"frames to send to the targeted End Device following the"]},{"entry":[{},{},"current transfer. If another frame is pending, the End Device"]},{"entry":[{},{},"retrieves it by sending another Data Request command to"]},{"entry":[{},{},"the acknowledging Router."]},{"entry":["Ack. Request","Bool 5","Specifies whether an acknowledgment is required from the"]},{"entry":[{},{},"recipient device on receipt of a data or MAC command"]},{"entry":[{},{},"frame."]},{"entry":["Intra-PAN","Bool 6","Specifies whether the MAC frame is to be sent within the"]},{"entry":[{},{},"same PAN (intra-PAN) or to another PAN (inter-PAN)."]},{"entry":[{},{},"When set and both destination and source addresses are"]},{"entry":[{},{},"present, the frame contains only the destination PAN"]},{"entry":[{},{},"identifier field."]},{"entry":["Destination Addressing Mode","Bits 11-10","Specifies the presence and format of the destination address:"]},{"entry":[{},{},"0 = PAN identifier and address not present."]},{"entry":[{},{},"2 = 2-octet short address present."]},{"entry":[{},{},"3 = 8-octet EUI-64 extended address present."]},{"entry":["Source Addressing Mode","Bits 15-14","Specifies the presence and format of the source address:"]},{"entry":[{},{},"0 = PAN identifier and address not present."]},{"entry":[{},{},"2 = 2-octet short address present."]},{"entry":[{},{},"3 = 8-octet EUI-64 extended address present."]},{"entry":["Sequence Number","Unsigned 8 bits","Specifies a unique sequence identifier for the frame. When"]},{"entry":[{},{},"the SM MAC Header Flag is 0: for a data, acknowledgment,"]},{"entry":[{},{},"or MAC command frame, the sequence number field is used"]},{"entry":[{},{},"to match an acknowledgment frame to the data or MAC"]},{"entry":[{},{},"command frame as specified in the IEEE 802.15.4: 2006"]},{"entry":[{},{},"standard. When the SM MAC Header Flag is set to 1: the"]},{"entry":[{},{},"Sequence Number is the least significant octet of the MAC"]},{"entry":[{},{},"nonce counter,"]},{"entry":["Destination PAN Identifier","Binary 2 octets","Specifies the unique PAN identifier of the intended recipient"]},{"entry":[{},{},"of the frame. A value of 0xFFFF in this field is the"]},{"entry":[{},{},"broadcast PAN identifier, which is accepted as a valid PAN"]},{"entry":[{},{},"identifier by all devices currently listening to the channel."]},{"entry":[{},{},"Presence of this field is defined by the Destination"]},{"entry":[{},{},"Addressing Mode field."]},{"entry":["Destination Address","Binary 2 octets","Specifies the address of the intended recipient of the frame."]},{"entry":[{},{},"A value of 0xFFFF in this field represents the broadcast"]},{"entry":[{},{},"short address, which is accepted as a valid short address by"]},{"entry":[{},{},"all devices currently listening to the channel. Presence and"]},{"entry":[{},{},"content of this field is defined by the Destination"]},{"entry":[{},{},"Addressing Mode field."]},{"entry":["Source PAN Identifier","Binary 2 octets","Specifies the unique PAN identifier of the originator of the"]},{"entry":[{},{},"frame. This field is included only if the Source Addressing"]},{"entry":[{},{},"Mode and Intra-PAN subfields of the frame control field are"]},{"entry":[{},{},"nonzero and zero, respectively."]},{"entry":["Source Address","Binary 2 octets","Specifies the address of the originator of the frame."]},{"entry":[{},{},"Presence and content of this field is defined by the Source"]},{"entry":[{},{},"Addressing Mode field."]},{"entry":["FCS","Unsigned 16 bits","2-octet ITU-T CRC as specified by IEEE 802.15.4, without"]},{"entry":[{},{},"the initial preset or final complementation typical of a frame"]},{"entry":[{},{},"check sequence (e.g., as in IEEE 802.3)."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Bits 4 to 6 of the first octet of the Mesh header are called the Service type. This field defines the structure of the next of the mesh header and the general behavior of a group of messages. With the exception of the Data Transfer frame, the subsequent header prefix contains a field called Service Code which defines the specific message format for the last of the mesh header. Table 7 enumerates all defined combinations of Service Type and Service Code.",{"@attributes":{"id":"p-0257","num":"0272"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Defined Service Type and Service Code Combinations"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Service","Service Type","Service Code"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Data transfer",{},{}]},{"entry":["Data Transfer","0","<none>"]},{"entry":"Route discovery"},{"entry":["Route Request","1","1"]},{"entry":["Route Reply","1","2"]},{"entry":["Route Error","1","3"]},{"entry":"Routed services"},{"entry":["Association Confirmation Request","2","0"]},{"entry":["Association Confirmation Response","2","1"]},{"entry":["Keep Alive Initiate","2","3"]},{"entry":["Keep Alive Request","2","4"]},{"entry":["Keep Alive Response","2","5"]},{"entry":["Route Establishment Request","2","6"]},{"entry":["Route Establishment Response","2","7"]},{"entry":["Power Event Report Notification","2","8"]},{"entry":["Power Event Report Acknowledgment","2","9"]},{"entry":["Ping Request","2","10"]},{"entry":["Ping Response","2","11"]},{"entry":["Service Forwarding Request","2","12"]},{"entry":["Service Forwarding Response","2","13"]},{"entry":"Non routed service"},{"entry":["Association Request","3","0"]},{"entry":["Association Response","3","1"]},{"entry":["Neighbor Info Request","3","2"]},{"entry":["Neighbor Info Response","3","3"]},{"entry":["Neighbors Exchange","3","4"]},{"entry":["End Device Data Request","3","5"]},{"entry":["End Device Data Response","3","6"]},{"entry":["Service Request","3","7"]},{"entry":"Multicast data transfer"},{"entry":["Mesh Multicast","4","<none>"]},{"entry":"Point to point communication"},{"entry":["Local Data Transfer","5","0"]},{"entry":["Frame Reception Rate Test Init","5","1"]},{"entry":["Frame Reception Rate Test Data","5","2"]},{"entry":["Frame Reception Rate Test End","5","3"]},{"entry":["Frame Reception Rate Test Result","5","4"]},{"entry":["Local Broadcast Request","5","20"]},{"entry":["Local Broadcast Response","5","21"]},{"entry":["End Device Node Present","5","22"]},{"entry":["Range Test Request","5","30"]},{"entry":["Range Test Response","5","31"]},{"entry":["Range Test Initiate","5","32"]},{"entry":["Range Test Result","5","33"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following table defines which message is implemented for the supported devices.",{"@attributes":{"id":"p-0259","num":"0274"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Message supported per Node Type"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Message","End point","Coordinator","Router","End Device","Handheld"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["Data transfer","Originator","Y","Y","Y",{}]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Mesh Multicast","Originator","Y","Y","Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["End Device Data Request","Originator",{},{},"Y"]},{"entry":[{},"Target",{},"Y"]},{"entry":["End Device Data Response","Originator",{},"Y"]},{"entry":[{},"Target",{},{},"Y"]},{"entry":["Association Request","Originator",{},"Y","Y"]},{"entry":[{},"Target","Y"]},{"entry":["Association Response","Originator","Y"]},{"entry":[{},"Target",{},"Y","Y"]},{"entry":["Association Confirmation Request","Originator",{},"Y"]},{"entry":[{},"Target","Y"]},{"entry":["Association Confirmation Response","Originator","Y"]},{"entry":[{},"Target",{},"Y"]},{"entry":["Neighbor Info Request","Originator",{},"Y","Y"]},{"entry":[{},"Target","Y","Y"]},{"entry":["Neighbor Info Response","Originator","Y","Y"]},{"entry":[{},"Target",{},"Y","Y"]},{"entry":["Neighbors Exchange","Originator","Y","Y"]},{"entry":[{},"Target","Y","Y"]},{"entry":["Route Request","Originator","Y","Y"]},{"entry":[{},"Target","Y","Y"]},{"entry":["Route Reply","Originator","Y","Y"]},{"entry":[{},"Target","Y","Y"]},{"entry":["Route Error","Originator","Y","Y"]},{"entry":[{},"Target","Y","Y"]},{"entry":["Keep Alive Initiate","Originator","Y"]},{"entry":[{},"Target",{},"Y"]},{"entry":["Keep Alive Request","Originator",{},"Y","Y"]},{"entry":[{},"Target","Y"]},{"entry":["Keep Alive Response","Originator","Y"]},{"entry":[{},"Target",{},"Y","Y"]},{"entry":["Route Establishment Request","Originator",{},"Y","Y"]},{"entry":[{},"Target","Y"]},{"entry":["Route Establishment Response","Originator","Y"]},{"entry":[{},"Target",{},"Y","Y"]},{"entry":["Power Event Report","Originator",{},"Y","Y"]},{"entry":[{},"Target","Y"]},{"entry":["Ping Request","Originator","Y","Y","Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Ping Response","Originator","Y","Y","Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Service Request","Originator",{},"Y","Y"]},{"entry":[{},"Target",{},"Y","Y"]},{"entry":["Service Forwarding","Originator","Y","Y"]},{"entry":[{},"Target","Y","Y"]},{"entry":["Local Broadcast Request","Originator",{},{},{},"Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Local Broadcast Response","Originator","Y","Y","Y"]},{"entry":[{},"Target",{},{},{},"Y"]},{"entry":["End Device Node Present","Originator","Y","Y","Y"]},{"entry":[{},"Target",{},{},{},"Y"]},{"entry":["Local Data Transfer","Originator","Y","Y","Y","Y"]},{"entry":[{},"Target","Y","Y","Y","Y"]},{"entry":["Frame Reception Rate Test Init","Originator",{},{},{},"Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Frame Reception Rate Test Data","Originator",{},{},{},"Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Frame Reception Rate Test End","Originator",{},{},{},"Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Frame Reception Rate Test Result","Originator","Y","Y","Y"]},{"entry":[{},"Target",{},{},{},"Y"]},{"entry":["Range Test Request","Originator",{},{},{},"Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Range Test Response","Originator","Y","Y","Y"]},{"entry":[{},"Target",{},{},{},"Y"]},{"entry":["Range Test Initiate","Originator",{},{},{},"Y"]},{"entry":[{},"Target","Y","Y","Y"]},{"entry":["Range Test Result","Originator","Y","Y","Y"]},{"entry":[{},"Target",{},{},{},"Y"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"This message frame format shown in  is used to transport upper layers information for all requests and responses.",{"@attributes":{"id":"p-0261","num":"0276"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields (Tree and Mesh routing)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Source Route Present","Bool 7","Reset"]},{"entry":["Service Type","Bits 6-4","Set to 0"]},{"entry":["Urgent","Bool 3","Set when the message is urgent and should be forwarded"]},{"entry":[{},{},"immediately before any other less-urgent pending"]},{"entry":[{},{},"transmission."]},{"entry":["PAN present","Bool 2","Set when the Target PAN Identifier and the Originator"]},{"entry":[{},{},"PAN Identifier are added to the frame to identify the"]},{"entry":[{},{},"network of the target Node."]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security Header follows this octet"]},{"entry":["Network Security Header Flag","Bool 0","Reset, no Network Security Header follows"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Sibling Transmission","Bool 7","Set when a frame is transmitted using tree routing and if a"]},{"entry":[{},{},"local repair is done though a Sibling instead of a Parent."]},{"entry":[{},{},"Only one Sibling transmission is allowed per tree level;"]},{"entry":[{},{},"when a Node receives a frame with this flag set, it can"]},{"entry":[{},{},"only route this frame to one of its Parents."]},{"entry":["Max Remaining Hops","Unsigned bits 6-0","Set to MAX_HOPS by the originator of this message and"]},{"entry":[{},{},"decremented each time a message is routed. The message"]},{"entry":[{},{},"is discarded and not forwarded when this value reaches"]},{"entry":[{},{},"zero and the next hop does not match the Final"]},{"entry":[{},{},"Destination Address."]},{"entry":["Target Address","Binary 2 octets","Short address of the final target (Router or End Device)"]},{"entry":[{},{},"of this message."]},{"entry":["Originator Address","Binary 2 octets","Short address of the originator (Router or End Device) of"]},{"entry":[{},{},"this message."]},{"entry":["Target PAN Identifier","Binary 2 octets","PAN identifier of the target Node as identified by the"]},{"entry":[{},{},"Target Address field."]},{"entry":["Originator PAN Identifier","Binary 2 octets","PAN identifier of the originator Node as identified by the"]},{"entry":[{},{},"Originator Address field."]},{"entry":["Payload","Multi-octet","Upper layer information."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0262","num":"0277"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields (Source routing)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Source Route Present","Bool 7","Set"]},{"entry":["Service Type","Bits 6-4","Set to 0"]},{"entry":["Urgent","Bool 3","Set when the message is urgent and should be forwarded"]},{"entry":[{},{},"immediately before any other less-urgent pending"]},{"entry":[{},{},"transmission."]},{"entry":["PAN present","Bool 2","Reset for source routed messages."]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security Header follows this octet"]},{"entry":["Network Security Header Flag","Bool 0","Reset, no Network Security Header follows"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Sibling Transmission","Bool 7","Reset"]},{"entry":["Max Remaining Hops","Unsigned bits 0-6","Set by the Originator to the value of the Number of Hops"]},{"entry":[{},{},"field and decremented at each hop. This field is used to"]},{"entry":[{},{},"index to the next hop in the Hop Addresses list. This field"]},{"entry":[{},{},"is set to zero when the next hop corresponds to the Target"]},{"entry":[{},{},"Address."]},{"entry":["Target Address","Binary 2 octets","Short address of the final target (Router or End Device)"]},{"entry":[{},{},"of this message. Bits 15-14 define the network"]},{"entry":[{},{},"membership:"]},{"entry":[{},{},"0 = The Node is part of the network with the PAN"]},{"entry":[{},{},"identifier specified by the first entry in the PAN"]},{"entry":[{},{},"Identifiers list."]},{"entry":[{},{},"1 = The Node is part of the network with the PAN"]},{"entry":[{},{},"identifier specified by the second entry in the PAN"]},{"entry":[{},{},"Identifiers list."]},{"entry":[{},{},"2 = The Node is part of the network with the PAN"]},{"entry":[{},{},"identifier as specified by the third entry in the PAN"]},{"entry":[{},{},"Identifiers list."]},{"entry":[{},{},"3 = The Node is part of a network which is not listed in"]},{"entry":[{},{},"the PAN Identifiers list. When this option is used, the"]},{"entry":[{},{},"frame can be routed to the incorrect Node in the"]},{"entry":[{},{},"following circumstances:"]},{"entry":[{},{},"More than four networks exist within the same"]},{"entry":[{},{},"geographical area"]},{"entry":[{},{},"Multiple Neighbors exist with the same short address"]},{"entry":[{},{},"but on non-listed networks."]},{"entry":["Originator Address","Binary 2 octets","Short address of the originator (Router or End Device) of"]},{"entry":[{},{},"this message. Bits 15-14 define the PAN identifier of the"]},{"entry":[{},{},"network of which the target Node is a member. See the"]},{"entry":[{},{},"Hop Addresses field (following) for more information on"]},{"entry":[{},{},"these 2 bits."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Number of PAN identifiers","Bits 7-6","Defines the number of entries in the PAN identifiers"]},{"entry":[{},{},"field."]},{"entry":["Number of Hops Addresses","Bits 3-0","Number of Addresses in Hop Addresses list. Source"]},{"entry":[{},{},"routing is used when the Target device is more than one"]},{"entry":[{},{},"hop away. Therefore the Number of hops is at least one."]},{"entry":["PAN Identifiers","Array of Binary 2","List of Network identifiers. Bits 15-14 of the different"]},{"entry":[{},"octets","short addresses specified within this frame reference this"]},{"entry":[{},{},"list. Each short address is explicitly associated with one"]},{"entry":[{},{},"of the three specified PAN Identifiers, or none of them."]},{"entry":["Hop Addresses","Array of Binary 2","Short address of each Node responsible for routing this"]},{"entry":[{},"octets","message. Bits 15-14 define network membership of the"]},{"entry":[{},{},"Node as described by the PAN identifiers field."]},{"entry":["Payload","Multi-octet","Upper layer information."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The mesh multicast message format set forth in  facilitates multicast of application data to a group of Nodes within a mesh network. Group addresses need either to be pre-assigned or assigned by an upper layer. This layer does not provide services to remotely assign group address to Nodes.",{"@attributes":{"id":"p-0264","num":"0279"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Mesh Multicast Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Source Route Present","Bool 7","Reset"]},{"entry":["Service Type","Bits 6-4","Set to 4"]},{"entry":["Urgent","Bool 3","Set when the message is urgent and should be forwarded"]},{"entry":[{},{},"immediately before any other pending transmission."]},{"entry":["PAN present","Bool 2","Reset"]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security Header follows this octet"]},{"entry":["Network Security Header Flag","Bool 0","Reset, no Network Security Header follows"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description in section."]},{"entry":["Max Remaining Hops","Unsigned 8 bits","Set by the originator and decremented each time the"]},{"entry":[{},{},"message is re-broadcast. The initial value represents the"]},{"entry":[{},{},"maximum number of router hops from the originator that"]},{"entry":[{},{},"this message will reach. To ensure the message will reach"]},{"entry":[{},{},"all Nodes on the network, this value should be set to"]},{"entry":[{},{},"MAX_HOPS if the originator is the Coordinator or two"]},{"entry":[{},{},"time MAX_HOPS if the originator is a Node."]},{"entry":["Target Address",{},"Address of the group targeted."]},{"entry":["Originator Address","Binary 2 octets","Short address of the originator (Router or End Device) of"]},{"entry":[{},{},"this message."]},{"entry":["Request ID","Unsigned 8 bits","Unique number used to eliminate duplicated message"]},{"entry":[{},{},"during a broadcast storm."]},{"entry":[{},"Unsigned 8 bits"]},{"entry":["Last Fragment","Bit 7","Flag which indicate the last fragment of a fragmented"]},{"entry":[{},{},"multicast."]},{"entry":["Fragment ID","Bits 0 to 6","When a multicast is fragmented, each fragment has a"]},{"entry":[{},{},"unique fragment number from 0 to n where n represent"]},{"entry":[{},{},"the last fragment which is identified by Last Fragment"]},{"entry":[{},{},"flag set to true."]},{"entry":["Payload","Multi-octet","Upper layer data."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The route request message is used to create a route to a target Node for peer to peer communication between two Nodes using mesh routing. The route request message format is shown in .",{"@attributes":{"id":"p-0266","num":"0281"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Route Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Service Type","Bits 6-4","Set to 1"]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security Header follows this octet"]},{"entry":["Network Security Header Flag","Bool 0","Reset, no Network Security Header follows"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description in section 5.8.1."]},{"entry":["Max Remaining Hops","Unsigned 8 bits","See description in section 6.4."]},{"entry":["Target Address","Binary 2 octets","Broadcast address (0xFFFF)"]},{"entry":["Originator Address","Binary 2 octets","Address of the originator of this Route Request."]},{"entry":["Service Code","Unsigned 8 bits","Set to 1."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Trace Route Flag","Bool 0","When set, the response contains the list of hops used to"]},{"entry":[{},{},"route to the target Node. When this option is used, the"]},{"entry":[{},{},"network is not updated with the routing information;"]},{"entry":[{},{},"Routers do not create a route in their routing table."]},{"entry":["Min LQI Class","Bits 2-1","Used to set a minimum link quality for each hop of the"]},{"entry":[{},{},"requested route. Before accepting this request, each Node"]},{"entry":[{},{},"validate that the LQI class corresponding to the Node"]},{"entry":[{},{},"from which this message have been received is better or"]},{"entry":[{},{},"equal to the value of this field."]},{"entry":["Hop Count","Unsigned 8 bits","Use to count the number of hops from the Requestor"]},{"entry":[{},{},"Address. Initially sent with a value of zero and"]},{"entry":[{},{},"incremented each time this request is received and re-"]},{"entry":[{},{},"broadcast."]},{"entry":["Request ID","Unsigned 8 bits","Unique number used to eliminate duplicated message"]},{"entry":[{},{},"during the broadcast storm."]},{"entry":["Requested Address","Binary 2 octets","Node for which a route is requested."]},{"entry":["Requestor Address","Binary 2 octets","Originator of this Route Request."]},{"entry":["Hop List","Array of Binary 2","Address of each Node routing this message. The size of"]},{"entry":[{},"octets","this list is Hop Count minus one. Present if the Trace"]},{"entry":[{},{},"Route Flag is set."]},{"entry":["Padding","Binary 2 octets","For backward compatibility."]},{"entry":["DLL MIC32","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The route reply message is sent in response to a Route Request and is given the format shown in .",{"@attributes":{"id":"p-0268","num":"0283"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Route Reply Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Service Type","Bits 6-4","Set to 1"]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security Header follows this octet"]},{"entry":["Network Security Header Flag","Bool 0","Reset, no Network Security Header follows"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description herein."]},{"entry":["Max Remaining Hops","Unsigned 8 bits","See description herein."]},{"entry":["Target Address","Binary 2 octets","Same as Requestor Address."]},{"entry":["Originator Address","Binary 2 octets","Same as Requested Address."]},{"entry":["Service Code","Unsigned 8 bits","Set to 2."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Trace Route Flag","Bool 0","Return the same value as the Trace Route Flag received"]},{"entry":[{},{},"in the Route Request."]},{"entry":["Requested Address","Binary 2 octets","Node for which a route have been requested."]},{"entry":["Requestor Address","Binary 2 octets","Originator of the Route Request."]},{"entry":["Hop Count","Unsigned 8 bits","Number of hop between the Requestor Node and the"]},{"entry":[{},{},"Requested Node. Set to 1 if the Requestor Node is a"]},{"entry":[{},{},"neighbor of the Requested Node"]},{"entry":["[Hop List]","Array of Binary 2","Address of each Node routing this message. The size of"]},{"entry":[{},"octets","this list is Hop Count minus one. Present if the Trace"]},{"entry":[{},{},"Route Flag is set."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The route error message is sent out to inform surrounding Nodes that a route to a destination has fail and need to be invalidated. This message is sent as a broadcast frame with Hop Count set to 1. Each Node receiving this message, re-broadcast the Route Error if its route table shows that other Nodes use this Node as a route to the destination and must therefore be informed of the invalid route. The route error message format is shown in .",{"@attributes":{"id":"p-0270","num":"0285"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 14"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Route Error Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer",{},"See description herein."]},{"entry":["fields","Unsigned 8 bits","See sub fields below:"]},{"entry":["Service Type","Bits 6-4","Set to 1"]},{"entry":["DLL Security Header","Bool 1","Set when the DLL Security"]},{"entry":["Flag",{},"Header follows this octet"]},{"entry":["Network Security Header","Bool 0","Reset, no Network"]},{"entry":["Flag",{},"Security Header follows"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description herein."]},{"entry":["Max Remaining Hops","Unsigned 8 bits","See description herein."]},{"entry":["Target Address","Binary 2 octets","Broadcast address"]},{"entry":[{},{},"(0xFFFF)"]},{"entry":["Originator Address","Binary 2 octets","Address of the Node"]},{"entry":[{},{},"generating this message."]},{"entry":["Service Code","Unsigned 8 bits","Set to 3."]},{"entry":["Hop Count","Unsigned 8 bits","Set to 0x01"]},{"entry":["Invalidated address","Binary 2 octets","Short"]},{"entry":["[DLL MIC32]s","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"All messages described within this subsection share the same MAC header and Mesh header prefix format. This common portion of the message is shown in .",{"@attributes":{"id":"p-0272","num":"0287"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 15"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Common Routed Message Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Source Route Present","Bool 7","See description herein."]},{"entry":["Service Type","Bits 6-4","Set to 2."]},{"entry":["Urgent","Bool 3","See description herein."]},{"entry":["PAN present","Bool 2","See description herein."]},{"entry":["DLL Security Header Flag","Bool 1","See description herein."]},{"entry":["Network Security Header Flag","Bool 0","See description herein."]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description herein."]},{"entry":["[Network Security Header]","Unsigned 40 bits","See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Sibling Transmission","Bool 7","See description herein."]},{"entry":["Max Remaining Hops","Unsigned bits 0-6","See description herein."]},{"entry":["Target Address","Binary 2 octets","See description herein."]},{"entry":["Originator Address","Binary 2 octets","See description herein."]},{"entry":["[Target PAN Identifier]","Binary 2 octets","See description herein."]},{"entry":["[Originator PAN Identifier]","Binary 2 octets","See description herein."]},{"entry":[{},"Unsigned 8 bits"]},{"entry":["[Number of PAN identifiers]","Bits 7-6","See description herein."]},{"entry":["[Number of Hops Addresses]","Bits 3-0","See description herein."]},{"entry":["[PAN Identifier]","Binary 2 octets","See description herein."]},{"entry":["[Hop Address]","Binary 2 octets","See description herein."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Specific message fields"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["[Network MIC32]","Binary 4 octets","See description herein."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The association confirmation request message is sent to the Coordinator by a Router when an \u201cAssociation Request\u201d is received from a Node requesting an association. The association request message format is shown in .",{"@attributes":{"id":"p-0274","num":"0289"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 16"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Association Confirmation Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 0."]},{"entry":["Requesting Node Address","Binary 8 octets","Long address of the Node requesting the association."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Embedded Association request information"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Embedded Net Security","Binary 5 octets","Network Security Header of the embedded Association"]},{"entry":["Header",{},"Request, included only for secure association. Enabled"]},{"entry":[{},{},"only if \u201cDLL Security Header Flag\u201d and\/or \u201cNetwork"]},{"entry":[{},{},"Security Header Flag\u201d are set."]},{"entry":[{},"Unsigned 8 bits","Association information of the embedded Association"]},{"entry":[{},{},"request, see sub fields below:"]},{"entry":["Secure Node","Bool 0","When reset, the device is not configured to associate to a"]},{"entry":[{},{},"secure network and the Embedded Net Security Header"]},{"entry":[{},{},"and Embedded Net MIC32 should not be processed. This"]},{"entry":[{},{},"option is possible only when the entire network is"]},{"entry":[{},{},"configured insecure."]},{"entry":["Secondary Network","Bool 1","Set when the Node is already associated to a network and"]},{"entry":[{},{},"want to create secondary association with neighbor"]},{"entry":[{},{},"networks to allow overlapping network communications."]},{"entry":["Device Type","Bool 2","Reset when the device is a Router and set when the"]},{"entry":[{},{},"device is an End Device."]},{"entry":["Receiver On When Idle","Bool 3","Set if the End device does not disable its receiver to"]},{"entry":[{},{},"conserve power during idle periods. This field can be"]},{"entry":[{},{},"reset only if the Device Type is set."]},{"entry":["Embedded Net MIC32",{},"Network MIC32 of the embedded Association Request,"]},{"entry":[{},{},"included only for secure association."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The association confirmation response message is returned by the Coordinator to a Router in response to an Association Confirmation Request. The association confirmation response message format is shown in .",{"@attributes":{"id":"p-0276","num":"0291"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":{"entry":"TABLE 17"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Association Confirmation Response Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 1."]},{"entry":["Requesting Node Address","Binary 8 octets","Long address of the Node requesting the association."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Embedded Association Response information"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["[Embedded Net Security","Unsigned 5 octets","Network Security Header of the embedded Association"]},{"entry":["Header]",{},"Response. Enabled only if \u201cDLL Security Header Flag\u201d"]},{"entry":[{},{},"and\/or \u201cNetwork Security Header Flag\u201d are set."]},{"entry":["Short Address","Binary 2 octets","If the Coordinator was not able to associate this device to"]},{"entry":[{},{},"its PAN, this field is set to 0xFFFF, and the association"]},{"entry":[{},{},"status field shall contain the reason for the failure. If the"]},{"entry":[{},{},"Coordinator was able to associate the device to its PAN,"]},{"entry":[{},{},"this field contains the short address assigned to that"]},{"entry":[{},{},"device."]},{"entry":["Mesh Key Security Header","Unsigned 5 octets","For the write operation, this field is the security"]},{"entry":[{},{},"information and has the same format as the Network"]},{"entry":[{},{},"Security Header that contains the nonce and key"]},{"entry":[{},{},"information used to encrypt the Encrypted Mesh Key."]},{"entry":["Encrypted Mesh Key","Binary 16 octets","Mesh Key encrypted with the Node Key used for the"]},{"entry":[{},{},"Embedded Network Security Header. The Mesh Key is"]},{"entry":[{},{},"encrypted using the algorithm in IEEE 802.15.4-2006"]},{"entry":[{},{},"section B.4 and the specified Node Key."]},{"entry":["Mesh Key MIC32","Binary 4 octets","Message Integrity check of the Mesh Key Security"]},{"entry":[{},{},"Header and the plain text Mesh Key. The MIC is"]},{"entry":[{},{},"calculated using the algorithm in IEEE 802.15.4-2006"]},{"entry":[{},{},"section B.4 and the specified Node Key."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Reserved","Bits 7-4","Set to 0"]},{"entry":["Mesh Key Selection","Bits 3-0","2 = Mesh Key 1 3 = Mesh Key 0 All other values"]},{"entry":[{},{},"reserved"]},{"entry":["Mesh Key PAN ID","Binary 2 octets","PAN ID associated with the Mesh Key"]},{"entry":["Association Status","Unsigned 8 bits","0x00 = Association successful. 0x01 = PAN at capacity."]},{"entry":[{},{},"0x02 = PAN access denied."]},{"entry":["Coordinator Load","Unsigned 8 bits","Measure of the number of Nodes already associated to"]},{"entry":[{},{},"the network, relative to router capacity. The value 100%"]},{"entry":[{},{},"means full and no further associations are accepted."]},{"entry":["[Embedded Net MIC32]","Binary 4 octets","Network MIC32 of the embedded Association Response."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Keep Alive Initiate message is sent by the Coordinator to request that a Node initiate immediately its Keep Alive Request. This message is optional and used by the Coordinator to control the flow and distribution of Checkpoint messages. Independently of this optional message, Nodes autonomously initiate their Checkpoint process by sending a Keep Alive Request after each CHECKPOINT_PERIOD. To control the flow of messages, the Coordinator must send a Keep Alive Initiate prior to the expiration of this period. WARNING This request is sent using source routing, Routers routing this message shall not create a temporary route. This allows the following Keep Alive Request to trace current tree route from this Node. The Keep Alive Initiate message format is shown in .",{"@attributes":{"id":"p-0278","num":"0293"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 18"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Initiate Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed",{},"See description herein."]},{"entry":"message format"},{"entry":["Service Code","Unsigned 8 bits","Set to 3."]},{"entry":["MAC Address","Binary 8 octets","IEEE 802.15.4 EUI64 address"]},{"entry":[{},{},"(8-octets) of the targeted Node. Used"]},{"entry":[{},{},"to validate if the Node receiving this"]},{"entry":[{},{},"message is the Node expected. If"]},{"entry":[{},{},"a mismatch is detected, the Node"]},{"entry":[{},{},"does not return its Keep Alive"]},{"entry":[{},{},"Request."]},{"entry":["Information To","Unsigned 8 bits","Specify which information will be"]},{"entry":["Report",{},"reported in the next Keep Alive"]},{"entry":[{},{},"Request."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Keep Alive Request message is sent periodically to the Coordinator to maintain the Node association. The Keep Alive Request frame format is shown is .",{"@attributes":{"id":"p-0280","num":"0295"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 19"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 4."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Secure Node","Bool 0","When reset, the device is not configured for a secure"]},{"entry":[{},{},"network and all key information provided below shall be"]},{"entry":[{},{},"ignored."]},{"entry":["Secondary Network","Bool 1","Set if this Message is sent to the Coordinator of"]},{"entry":[{},{},"secondary network."]},{"entry":["Device Type","Bool 2","Reset when the device is a Router and set when the"]},{"entry":[{},{},"device is an End Device."]},{"entry":["Receiver On When Idle","Bool 3","Set if the End device does not disable its receiver to"]},{"entry":[{},{},"conserve power during idle periods. This field can be"]},{"entry":[{},{},"reset only if the Device Type is set."]},{"entry":["Information Reported","Bit 7-4","Identifier of the optional information reported by the"]},{"entry":[{},{},"Node within the current Keep Alive Request. 0 = Trace"]},{"entry":[{},{},"Route 1 = Multicast group address Send by End Devices"]},{"entry":[{},{},"supporting group address to update its Parent. 2 ="]},{"entry":[{},{},"Neighbor information This information is useful for"]},{"entry":[{},{},"Network Management. Can be used by the Coordinator"]},{"entry":[{},{},"and the Head End to compute routes, find weak region on"]},{"entry":[{},{},"the mesh network, and evaluate route diversity. 3 ="]},{"entry":[{},{},"Statistic This information is useful for Network"]},{"entry":[{},{},"Management."]},{"entry":["Keep Alive Period","Unsigned 8 bits","Period in units of 1 min. The reporting Node generates"]},{"entry":[{},{},"autonomously a Keep Alive Request at the specified"]},{"entry":[{},{},"periodicity. The Coordinator, at its option, may send a"]},{"entry":[{},{},"Keep Alive Initiate before the expiration of this period to"]},{"entry":[{},{},"control the time distribution of Keep Alive Requests of"]},{"entry":[{},{},"Nodes within the network."]},{"entry":["MAC Address","Binary 8 octets","IEEE 802.15.4 EUI64 address (8-octets) of this Node."]},{"entry":[{},{},"Used to validate if the Node sending this message is the"]},{"entry":[{},{},"Node expected. If a mismatch is detected, the"]},{"entry":[{},{},"Coordinator does not return a Keep Alive Response, but"]},{"entry":[{},{},"waits for the Node to re-associate."]},{"entry":[{},"Unsigned 8 bits","Reports the current state of the encryption key writes. See"]},{"entry":[{},{},"fields below:"]},{"entry":["Reserved","Bit 7","Set to 0"]},{"entry":["SMIB Write Toggle","Bit 6","Bit toggled each time the SMIB parameter table is"]},{"entry":[{},{},"written."]},{"entry":["Node Key-1 Write Toggle","Bit 5","Bit toggled each time that Node Key-1 is updated."]},{"entry":["Node Key-0 Write Toggle","Bit 4","Bit toggled each time that Node Key-0 is updated."]},{"entry":["Mesh Key-1 Write Toggle","Bit 3","Bit toggled each time that Mesh Key-1 is updated."]},{"entry":["Mesh Key-0 Write Toggle","Bit 2","Bit toggled each time that Mesh Key-0 is updated."]},{"entry":["Maintenance Key-1 Write","Bit 1","Bit toggled each time that Maintenance Key-1 is updated."]},{"entry":"Toggle"},{"entry":["Maintenance Key-0 Write","Bit 0","Bit toggled each time that Maintenance Key-0 is updated."]},{"entry":"Toggle"},{"entry":[{},"Unsigned 8 bits","Reports the current keys used for transmission. See fields"]},{"entry":[{},{},"below:"]},{"entry":["Current Node Key","Bit 5","Node Key used when sending 1 = Node Key-1 0 = Node"]},{"entry":[{},{},"Key-0"]},{"entry":["Current Mesh Key","Bit 4","Mesh Key used when sending 1 = Mesh Key-1 0 = Mesh"]},{"entry":[{},{},"Key-0"]},{"entry":["Current Maintenance Key","Bit 3","Mesh Key used when sending 1 = Maintenance Key-1, 0 ="]},{"entry":[{},{},"Maintenance Key-0"]},{"entry":["Secondary Node Key Allowed","Bool 2","Set when frames may be authenticated via either Node"]},{"entry":[{},{},"key. Reset when only frames authenticated using the"]},{"entry":[{},{},"Node key specified by the Current Node Key ID are"]},{"entry":[{},{},"accepted."]},{"entry":["Secondary Mesh Key Allowed","Bool 1","Set when frames may be authenticated via either Mesh"]},{"entry":[{},{},"key. Reset when only frames authenticated using the"]},{"entry":[{},{},"Mesh key specified by the Current Mesh Key ID are"]},{"entry":[{},{},"accepted"]},{"entry":["Secondary Maintenance Key","Bool 0","Set when frames may be authenticated via either"]},{"entry":["Allowed",{},"Maintenance key. Reset when only frames authenticated"]},{"entry":[{},{},"using the Node key specified by the Current Maintenance"]},{"entry":[{},{},"Key ID are accepted"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following describes the different extensions to this basic frame format. Transmission of these extensions follows these rules, which are listed in order of priority:\n\n",{"@attributes":{"id":"p-0282","num":"0302"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 20"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Request: Optional Trace Route Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Number of","Unsigned 8 bits","Number of entries within the Hop list."]},{"entry":["Hops",{},"This list contains an entry for each"]},{"entry":[{},{},"Node routing this message."]},{"entry":[{},"Array of . . .","Repeating two-component list"]},{"entry":["Hop PAN","Binary 2 octets","PAN identifier associated"]},{"entry":["identifier",{},"to this Hop list entry."]},{"entry":["Hop Addresses","Binary 2 octets","Short address associated to"]},{"entry":[{},{},"this Hop list entry."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"This extension is not authenticated by the Network MIC-32 since the Number of Hops value is incremented and a PAN identifier and short address is appended at each hop.","The optional Multicast Group Addresses extension is shown in .",{"@attributes":{"id":"p-0285","num":"0305"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 21"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Request: Optional Multicast Group Addresses Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Number Of Group Addresses","Unsigned 8 bits","Number of Group Address fields."]},{"entry":["Group Addresses","Array of Binary 2","Group addresses are used during multicast to target a"]},{"entry":[{},"octets","group of Nodes. This list corresponds to the groups for"]},{"entry":[{},{},"which the originator of this message is member. This"]},{"entry":[{},{},"information is captured by the first Router when the value"]},{"entry":[{},{},"of Receiver On When Idle is False. In this context, the"]},{"entry":[{},{},"Router mesh cashed messages targeted to one of these"]},{"entry":[{},{},"groups until the End Device will wakeup to retrieve this"]},{"entry":[{},{},"information. This list can also be useful to the"]},{"entry":[{},{},"Coordinator."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The optional Neighbors extension is shown in .",{"@attributes":{"id":"p-0287","num":"0307"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 22"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Request: Optional Neighbors Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Number Of Neighbors","Unsigned 8 bits","Number of entry in the Neighbors list. This list contain"]},{"entry":[{},{},"the Parents in order of their Preferred Route Ratio (The"]},{"entry":[{},{},"preferred route is always at index 0)"]},{"entry":[{},"Array of . . .","Repeating multi-component list"]},{"entry":["Neighbor Address","Binary 2 octets","See description herein."]},{"entry":["Neighbor PAN Identifier","Binary 2 octets","See description herein."]},{"entry":["RSSI rx","Signed 8 bits","See description herein."]},{"entry":["RSSI tx","Signed 8 bits","See description herein."]},{"entry":["LQI rx","Unsigned 8 bits","See description herein."]},{"entry":["LQI tx","Unsigned 8 bits","See description herein."]},{"entry":["Avg LQI","Unsigned 8 bits","Average of the LQI value of each hop between the"]},{"entry":[{},{},"current Node and the Coordinator through this Neighbor"]},{"entry":[{},{},"using the preferred parent within the specified network"]},{"entry":[{},{},"tree. The LQI for each hop corresponds to the worst LQI"]},{"entry":[{},{},"recorded (LQI rx and LQI tx) for this hop."]},{"entry":[{},"Unsigned 8 bits"]},{"entry":["Number of Hops","Bits 4-7","Number of hops between the current Node and the"]},{"entry":[{},{},"Coordinator through this Neighbor using the preferred"]},{"entry":[{},{},"parent within the specified network tree."]},{"entry":["LQI Class","Bit 2-3","LQI class on the link between the current Node and this"]},{"entry":[{},{},"Neighbor based on the worst LQI recorded (LQI rx and"]},{"entry":[{},{},"LQI tx) for this link."]},{"entry":["Min LQI Class","Bit 0-1","Minimum of all LQI class for each hop between the"]},{"entry":[{},{},"current Node and the Coordinator through this Neighbor"]},{"entry":[{},{},"using the preferred parent within the specified network"]},{"entry":[{},{},"tree."]},{"entry":["Transmission success rate","Unsigned 8 bits","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The optional Statistics extension is shown in .",{"@attributes":{"id":"p-0289","num":"0309"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":{"entry":"TABLE 23"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Request: Optional Statistics Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Number Of Statistics","Unsigned 8 bits","Number of Statistic Code and Statistic Count pairs"]},{"entry":[{},{},"present in this message."]},{"entry":[{},"Unsigned 8 bits"]},{"entry":["Statistic Count Format","Bit 7","0 = The Statistic Count is 16 bits 1 = The Statistic Count"]},{"entry":[{},{},"is 32 bits"]},{"entry":["Statistic Code","Bits 6-0","Identifier assigned to the statistic as defined in the"]},{"entry":[{},{},"Statistics codes in 6.7.5.11. New statistics can be added"]},{"entry":[{},{},"by assigning them new identifiers and including them in"]},{"entry":[{},{},"the list. Statistics can be deprecated simply by removing"]},{"entry":[{},{},"them from the list."]},{"entry":["Statistic Count","Unsigned integer","Actual count of the specific statistic identified by the"]},{"entry":[{},"16 or 32; see","Statistic Code."]},{"entry":[{},"specific Statistic"]},{"entry":[{},"Count Format"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0290","num":"0310"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"thead":{"row":{"entry":"TABLE 24"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Statistics Codes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Code","Label","Description","Size (bits)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Association process"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Number of association processes","Number of times this Node has initiated an association","16"]},{"entry":[{},"initiated","process"]},{"entry":["1","Number of association processes","From the Number of association processes initiated,","16"]},{"entry":[{},"successful","how many were successful"]},{"entry":["2","Number of re-associations","Number of times the Node has switched networks","16"]},{"entry":[{},{},"because of a significant improvement"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Route Discovery process"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","Number of route discovery","Number of times this Node has initiated a route","16"]},{"entry":[{},"processes initiated","discovery process"]},{"entry":["4","Number of route discovery","From the Number of route discovery processes","16"]},{"entry":[{},"processes successful","initiated, how many were successful"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Checkpoint process"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["5","Number of Keep Alive Initiate","Number of Keep Alive Initiate frames received by this","16"]},{"entry":[{},"frames received","Node."]},{"entry":["6","Number of Keep Alive Request","Number of Keep Alive Request frames initiated by this","16"]},{"entry":[{},"frames initiated","Node."]},{"entry":["7","Number of Keep Alive Response","Number of Keep Alive Response frames received by","16"]},{"entry":[{},"frames received","this Node."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Outage\/Restoration Reporting process"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["8","Number of power outages","Number of power outages recorded by this Node.","16"]},{"entry":["9","Number of successful power","From the Number of power outages, how many were","16"]},{"entry":[{},"outage notifications","reported and acknowledged successfully"]},{"entry":["10","Number of successful power","From the Number of power outages, how many","16"]},{"entry":[{},"restoration notifications","restorations were reported and acknowledged"]},{"entry":[{},{},"successfully"]},{"entry":["11","Power outage notification delay","Interval (in seconds) elapsed between the outage and","16"]},{"entry":[{},{},"the acknowledgment of the notification"]},{"entry":["12","Power restoration notification","Interval (in seconds) elapsed between the restoration","16"]},{"entry":[{},"delay","and the acknowledgment of the notification"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Ping process"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["13","Number of Ping Requests","Number of Ping Requests initiated by this Node.","16"]},{"entry":[{},"initiated"]},{"entry":["14","Number of Ping Responses","Number of Ping Responses received by this Node.","16"]},{"entry":[{},"received"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Route Establishment process"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["15","Number of Route establishment","Number of Route establishment Requests originated by","16"]},{"entry":[{},"Requests originated","this Node."]},{"entry":["16","Number of Route establishment","Number of Route establishment Responses received by","16"]},{"entry":[{},"Responses received","this Node."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Forwarding Service Message process"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["17","Number of Service Requests sent","Number of Service Requests initiated by this Node.","16"]},{"entry":["18","Number of Service Requests","Number of Service Requests received by this Node.","16"]},{"entry":[{},"received"]},{"entry":["19","Number of Service Forwarding","Number of Service Requests received and forwarded to","16"]},{"entry":[{},"Requests sent","the requested service provider."]},{"entry":["20","Number of Service Forwarding","Number of Service Responses forwarded to a","16"]},{"entry":[{},"Responses received","requesting Node."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Transmission performance"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["21","Number of data frames received","Number of Data transfer frames received by this Node.","32"]},{"entry":["22","Number of data frames","Number of Data transfer frames originated by this","32"]},{"entry":[{},"originated","Node."]},{"entry":["23","Number of data frame failures","From the Number of data frames initiated, how many","32"]},{"entry":[{},{},"have not been transmitted successfully at the MAC"]},{"entry":[{},{},"level."]},{"entry":["24","Number of broadcast data frames","Number of Multicast frames initiated by this Node.","32"]},{"entry":["25","Number of control frames","Number of frames, excluding Data transfer and","32"]},{"entry":[{},"received","Multicast frames, received by this Node."]},{"entry":["26","Number of control frames","Number of frames, excluding Data transfer and","32"]},{"entry":[{},"originated","Multicast frames, originated by this Node."]},{"entry":["27","Number of control frame failures","From the Number of control frames originated, how","32"]},{"entry":[{},{},"many have not been transmitted successfully at the"]},{"entry":[{},{},"MAC level."]},{"entry":["28","Number of broadcast control","Number of control frames broadcast by this Node.","32"]},{"entry":[{},"frames"]},{"entry":["29","Number of received local","Number of Point to Point messages received by this","32"]},{"entry":[{},"messages","Node."]},{"entry":["30","Number of originated local","Number of Point to Point messages originated by this","32"]},{"entry":[{},"messages","Node."]},{"entry":["31","Number of local message","From the Number of originated local messages, how","32"]},{"entry":[{},"failures","many have not been transmitted successfully at the"]},{"entry":[{},{},"MAC level."]},{"entry":["32","Number of broadcast local","Number of local broadcasts originated by this Node.","32"]},{"entry":[{},"frames"]},{"entry":["33","Number of routed frames","Number of data and control frames routed by this","32"]},{"entry":[{},{},"Node."]},{"entry":["34","Number of routed frame failures","From the Number of routed frames, how many have","32"]},{"entry":[{},{},"not been transmitted successfully at the MAC level."]},{"entry":["35","Number of frames re-broadcast","Number of data and control frames re-broadcast by this","32"]},{"entry":[{},{},"Node."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Radio performance"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["36","Number of channel access","Number of times the radio has returned a Channel","16"]},{"entry":[{},"failures","Access failure during a transmission attempt."]},{"entry":["37","Number of buffer overflows","Number of times a frame was not transmitted, routed or","16"]},{"entry":[{},{},"received because of a lack of available buffer space"]},{"entry":["38","Number of MAC retries","Number of retries at the MAC level when sending a","32"]},{"entry":[{},{},"frame. When excessive, this may be evidence of high"]},{"entry":[{},{},"noise or a jamming attack."]},{"entry":["39","Number of FCS errors","Number of frames received with an invalid MAC CRC","32"]},{"entry":[{},{},"(called an FCS in IEEE 802.15.4)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"End Device"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["40","Number of Children","Number of End Devices using this Router to send and","16"]},{"entry":[{},{},"receive messages."]},{"entry":["41","Maximum number of Children","Maximum number of End Devices in the End Device","16"]},{"entry":[{},{},"Table that use this Router to send and receive"]},{"entry":[{},{},"messages."]},{"entry":["42","Number of pending frames","Total number of frames pended for delayed retrieval by","16"]},{"entry":[{},{},"Sleeping End Devices"]},{"entry":["43","Number of frames forwarded","Total number of frame received from End Devices","16"]},{"entry":[{},"from"]},{"entry":["44","Number of frames forwarded to","Total Number of frame forwarded to End Devices","16"]},{"entry":["45","Number of frames never","Total number of frames never delivered to the targeted","16"]},{"entry":[{},"forwarded","End Device"]},{"entry":["46","Number of forwarding buffer","Number of data frames sent to an End Device and","16"]},{"entry":[{},"overflows","dropped by the routing device because of a lack of"]},{"entry":[{},{},"store and forward buffers."]},{"entry":["47","Number of Parent changes","Numbers of times the End Device has changed Parents","16"]},{"entry":[{},{},"by sending a Keep Alive to a different Router of its"]},{"entry":[{},{},"primary or any secondary network."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Security"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["48","Total number of security events","Number of security related events. Each specific event","32"]},{"entry":[{},{},"is totalized by the following statistics."]},{"entry":["49","Number of key write operations","Number of times a Key has been written","16"]},{"entry":["50","Number of DLL MIC errors","Number of times a frame is received with a valid CRC","16"]},{"entry":[{},{},"(FCS) but an invalid DLL MIC. If this rate is high"]},{"entry":[{},{},"enough, it may be evidence of an attack"]},{"entry":["51","Number of Network MIC errors","Number of times a frame is received with a valid CRC","16"]},{"entry":[{},{},"(FCS), a valid DLL MIC but an invalid Network MIC."]},{"entry":[{},{},"This may be evidence of an insider attack."]},{"entry":["52","Number of DLL nonce count","Number of time a frame is received with a valid CRC","16"]},{"entry":[{},"error","(FCS) and valid DLL MIC but with a nonce older than"]},{"entry":[{},{},"expected. This implies a duplicate or replayed frame."]},{"entry":["53","Number of Network nonce count","Number of time a frame is received with a valid FCS, a","16"]},{"entry":[{},"error","valid DLL MIC and a valid Network MIC but with a"]},{"entry":[{},{},"non-reflected nonce. This implies a duplicate or"]},{"entry":[{},{},"replayed frame."]},{"entry":["54","Number of times a Security","Number of times a frame or frame is received without","16"]},{"entry":[{},"header is missing","Security when security is expected."]},{"entry":["55","Number of Message format","Number of times a frame or frame is received with","16"]},{"entry":[{},"errors","invalid content such as an invalid length or an invalid"]},{"entry":[{},{},"field value."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Reset"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["56","Total number of resets","Total number of MCU reset. This counter is in fact the","16"]},{"entry":[{},{},"summation of the Number of illegal Op Code resets, the"]},{"entry":[{},{},"number of watchdog resets and the number of physical"]},{"entry":[{},{},"resets."]},{"entry":["57","Number of illegal Op Code","Total number of MCU reset caused by the execution of","16"]},{"entry":[{},"resets","an illegal Op Code. It is important to note that these"]},{"entry":[{},{},"resets is also a consequence of these resets: MAC"]},{"entry":[{},{},"supervisor resets, serial port resets and serial port busy"]},{"entry":[{},{},"resets."]},{"entry":["58","Number of watchdog resets","Total number of MCU reset caused by the watchdog.","16"]},{"entry":["59","Number of physical resets","Total Number of MCU reset caused by the reset pin.","16"]},{"entry":["60","Worst stack usage","Indicate the minimum number of bytes that remains for","16"]},{"entry":[{},{},"stack, since the last radio reprogramming."]},{"entry":["61","Current stack usage","Indicate the minimum number of bytes that remains for","16"]},{"entry":[{},{},"stack, since the last reset."]},{"entry":["62","Number of MAC supervisor","Number of times the MAC supervisor did a reset of the","16"]},{"entry":[{},"resets","MAC layer after inference of a lockup at that layer."]},{"entry":[{},{},"Generate also an \u201cillegal Op Code reset\u201d."]},{"entry":["63","Number of serial port resets","Total number of MCU reset requested using the serial","16"]},{"entry":[{},{},"protocol.. Generate also an \u201cillegal Op Code reset\u201d."]},{"entry":["64","Number of serial port busy resets","Total number of MCU reset caused by a lock of the","16"]},{"entry":[{},{},"serial port. Generate also an \u201cillegal Op Code reset\u201d."]},{"entry":["65","Number of tree optimization","Total number of preferred parent changed.","16"]},{"entry":["66","Number of local tree repair","Total number of tree repair used","16"]},{"entry":["67","Number of frame drop, TTL","Total number of frame drop caused by TTL expired","16"]},{"entry":[{},"expired"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The Keep Alive Response message is sent by the Coordinator in response to a Keep Alive Request. The Keep Alive Response frame format is shown in .",{"@attributes":{"id":"p-0292","num":"0312"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 25"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Response Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message format",{},"See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 5."]},{"entry":["Coordinator Load","Unsigned 8 bits","Measure of the number of Nodes already associated to the"]},{"entry":[{},{},"network, relative to router capacity. The value 100%"]},{"entry":[{},{},"means full and no further associations are accepted."]},{"entry":["MAC Address","Binary 8 octets","IEEE 802.15.4 EUI64 address (8-octets) of the targeted"]},{"entry":[{},{},"Node. Only Keep Alive Responses with a valid MAC"]},{"entry":[{},{},"address are processed. The Node initiates a re-association"]},{"entry":[{},{},"process if it doesn't receive a valid Keep Alive Response"]},{"entry":[{},{},"for more than CHECKPOINT_MAX_ATTEMPTS"]},{"entry":[{},{},"consecutive Keep Alive Requests."]},{"entry":["Parameter List","Unsigned 8 bits","List of Parameter ID and Parameter Data pairs. The"]},{"entry":[{},{},"number of parameters in the list is limited by the space"]},{"entry":[{},{},"available in the frame. The list always ends with a"]},{"entry":[{},{},"Parameter ID set to 0, without accompanying data."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Keep Alive Response parameter list member: current time frame format is shown in .",{"@attributes":{"id":"p-0294","num":"0314"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"center"}},"thead":{"row":{"entry":"TABLE 26"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Response: Parameter list member: Current time Format Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter ID","Unsigned 8 bits","Set to 1."]},{"entry":["Current minute","Unsigned 32 bits","Date and time of the current UTC minute. This field is a"]},{"entry":[{},{},"32-bit unsigned integer containing the number of minutes"]},{"entry":[{},{},"since 1970 UTC."]},{"entry":["Current second","Unsigned 8 bits","This field is an 8-bit unsigned integer containing the"]},{"entry":[{},{},"number of seconds in the current minute."]},{"entry":["Correction ratio","Unsigned 8 bits","Rate in hundredths of one percent at which the time should"]},{"entry":[{},{},"be corrected. For example, the value 10 represents a"]},{"entry":[{},{},"correction rate of 1\/10 of 1%, which represents a"]},{"entry":[{},{},"correction of 3.6 seconds per hour."]},{"entry":["Time zone offset","Signed 16 bits","Signed number of minutes to add to the received UTC"]},{"entry":[{},{},"time to obtain the standard localized time."]},{"entry":["DST offset","Unsigned 8 bits","Number of additional minutes to add to the standard"]},{"entry":[{},{},"localized time to obtain the current localized time."]},{"entry":["Next DST change","Unsigned 32 bits","Date and time of the next DST change. This field uses the"]},{"entry":[{},{},"same encoding as the Current minute field."]},{"entry":["Next DST offset","Unsigned 8 bits","The offset to use as DST offset after the Next DST change."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Keep Alive Response parameter list member: statistics frame format is shown in .",{"@attributes":{"id":"p-0296","num":"0316"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 27"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Response: Parameter list member: Statistics Format Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter ID","Unsigned 8 bits","Set to 2."]},{"entry":["Statistic","Unsigned 16-","Powerset controlling which statistics"]},{"entry":["Reported","octets","are reported. For example, bit 5 is set to"]},{"entry":[{},{},"request reporting of the statistic"]},{"entry":[{},{},"corresponding to Statistic Code 5."]},{"entry":[{},{},"This field is optional and included only"]},{"entry":[{},{},"when an update is requested."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Keep Alive Response parameter list member: SMIB parameter update frame format is shown in .",{"@attributes":{"id":"p-0298","num":"0318"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 28"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Response: Parameter list member:"},{"entry":"SMIB parameter update Format Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter ID","Unsigned 8 bits","Set to 3."]},{"entry":["SMIB parameter ID","Unsigned 8 bits","Identifier of the SMIB parameter"]},{"entry":[{},{},"to be updated. See section 8.10"]},{"entry":[{},{},"for the list of SMIB parameter ID."]},{"entry":["SMIB parameter","Unsigned 8 bits","New value assigned to the"]},{"entry":["Value",{},"SMIB parameter."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Keep Alive Response parameter list member: Write-Switch-Deactivate Key frame format is shown in .",{"@attributes":{"id":"p-0300","num":"0320"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 29"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Keep Alive Response: Parameter list member:"},{"entry":"Write-Switch-Deactivate Key Format Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter ID","Unsigned 8 bits","Set to 4."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Reserved","Bits 7-6","Set to 0x00"]},{"entry":["Operation","Bits 5-4","0x00 = Write the key specified by the Key ID 0x01 ="]},{"entry":[{},{},"Switch transmissions to the key specified by the Key ID"]},{"entry":[{},{},"0x10 = Deactivate reception using the key specified by the"]},{"entry":[{},{},"Key ID 0x11 = reserved"]},{"entry":["Key ID","Bit 3-0","0 = Node Key-1 1 = Node Key-0 2 = Mesh Key-1 3 ="]},{"entry":[{},{},"Mesh Key-0 4 = Maintenance Key-1 5 = Maintenance"]},{"entry":[{},{},"Key-0 In all key writes and deactivations, the Node shall"]},{"entry":[{},{},"validate that the Selected Key is not the key currently in"]},{"entry":[{},{},"use as the transmit key."]},{"entry":["Encrypted Key Security Header","Unsigned 5","For the write operation, this field is the security"]},{"entry":[{},"octets","information and has the same format as the Network"]},{"entry":[{},{},"Security Header that contains the nonce and key"]},{"entry":[{},{},"information used to encrypt the Encrypted Key. For the"]},{"entry":[{},{},"other operations this field is set to 0x00 00 00 00 00"]},{"entry":["Encrypted Key","Unsigned 16","For the write operation this is the key to be written,"]},{"entry":[{},"octets","encrypted using the Node Key indicated in the Encrypted"]},{"entry":[{},{},"Key Security Header. For the other operations this field is"]},{"entry":[{},{},"set to all 0s. The key is encrypted using the algorithm in"]},{"entry":[{},{},"IEEE 802.15.4-2006 section B.4 and the specified"]},{"entry":[{},{},"encryption key."]},{"entry":["Encrypted Key MIC32","Binary 4 octets","Message Integrity check of the Encrypted Key Security"]},{"entry":[{},{},"Header and the plain text key. The MIC is calculated using"]},{"entry":[{},{},"the algorithm in IEEE 802.15.4-2006 section B.4 and the"]},{"entry":[{},{},"specified authentication key."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Operations on the Mesh Key are associated with the Mesh Key Table entry for the Coordinator sending the Keep Alive Response message. The Write-Switch-Deactivate Key parameter list member may be occurring multiple times in a message.","The Route Establishment Request message is used by a Node to request from the Coordinator a route to a target Node for peer to peer communication using source routing. The Route Establishment Request message frame format is shown in .",{"@attributes":{"id":"p-0303","num":"0323"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 30"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Route Establishment Request Format Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 6."]},{"entry":["Requested Node Address","Binary 8 octets","IEEE 802.15.4 long address"]},{"entry":[{},{},"of the target Node for which"]},{"entry":[{},{},"a route is requested."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Route Establishment Response message format shown in  is sent by the Coordinator in response to a Route Establishment Request.",{"@attributes":{"id":"p-0305","num":"0325"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 31"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Route Establishment Response Format Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 7."]},{"entry":["Target Address","Binary 2 octets","See description herein."]},{"entry":["Originator Address","Binary 2 octets","See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Number Of PAN identifiers","Bits 5-4","See description herein."]},{"entry":["Number of Hops Addresses","Bits 3-0","See description herein."]},{"entry":["PAN identifiers","Up to 3 element","See description herein."]},{"entry":[{},"array Binary 2"]},{"entry":[{},"octets"]},{"entry":["Hop Addresses","Up to","See description herein."]},{"entry":[{},"(MAX_HOPS-1)"]},{"entry":[{},"element array"]},{"entry":[{},"Binary 2 octets"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Power Event Report message is sent by Nodes to notify of a power outage or power restoration condition and the frame format is shown in .",{"@attributes":{"id":"p-0307","num":"0327"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 32"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Power Event Report Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 8 for notifications. Set to 9 for acknowledgments."]},{"entry":["Reporting Source Route Node","Array of Binary","List of addresses of all devices forwarding a power outage"]},{"entry":["Address List","2 octets","or a power restoration report. In a request Bit 15: Power"]},{"entry":[{},{},"state Set to one if the Node currently has power. Set to"]},{"entry":[{},{},"zero if the Node currently is in outage. Bits 14-0:"]},{"entry":[{},{},"device's short address, where Bit 14 is set to zero for"]},{"entry":[{},{},"Router Nodes and to one for Leaf Nodes"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The ping message is used to test mesh communication during quality assessment (QA) or when the network is deployed. The ping message frame format is shown in .",{"@attributes":{"id":"p-0309","num":"0329"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 33"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ping Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 10 for Ping Request. Set to 11 for Ping Response."]},{"entry":["Number of PAN identifiers","Bits 7-6","Defines the number of entries in the PAN identifiers field."]},{"entry":["PAN Identifiers","Array of up to 3","List of Network identifiers. This list is referenced by bits"]},{"entry":[{},"Binary 2 octets","15-14 of the different addresses within the Hop Address"]},{"entry":[{},{},"list."]},{"entry":["Number of Hop Addresses","Unsigned 8 bits","Actual number of entries in the hop list. This number is"]},{"entry":[{},{},"increased each time this frame is received during the"]},{"entry":[{},{},"round trip between the originator and the target and back"]},{"entry":[{},{},"to the originator."]},{"entry":[{},"Array of . . .","the following three items:"]},{"entry":["Hop Address","Binary 2 octets","Address of Node receiving this frame including the target"]},{"entry":[{},{},"Node and, on return, the Originator Nodes"]},{"entry":["LQI","Unsigned 8 bits","LQI recorded at the specified address when receiving this"]},{"entry":[{},{},"message."]},{"entry":["RSSI","Unsigned 8 bits","RSSI recorded at the specified address when receiving this"]},{"entry":[{},{},"message."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Service Forwarding message is used by the Router servicing a Service Request to send service messages to and from the Coordinator. The Service Forwarding message frame format is shown in .",{"@attributes":{"id":"p-0311","num":"0331"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 34"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Service Forwarding Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common routed message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 12 for Service Forwarding Request. Set to 13 for"]},{"entry":[{},{},"Service Forwarding Response."]},{"entry":["Server","Unsigned 8 bits","0 = ANSI C12 Commissioning Host"]},{"entry":["Requestor id","Unsigned 8 bits","Temporary identifier assigned by the originating Router to"]},{"entry":[{},{},"the requesting Node. This identifier is required if the"]},{"entry":[{},{},"originating Router is capable of simultaneously servicing"]},{"entry":[{},{},"Service Requests from multiple Nodes."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Association Request message is sent by a Node to Router in its neighborhood to request an association to the identified mesh network. The Association Request message frame format is shown in .",{"@attributes":{"id":"p-0313","num":"0333"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 35"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Association Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer",{},"See description herein."]},{"entry":"fields"},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["DLL Security Header","Bool 1","Set when the DLL Security"]},{"entry":["Flag",{},"Header and DLL MIC32 are"]},{"entry":[{},{},"present"]},{"entry":["Network Security Header","Bool 0","Set when the Network"]},{"entry":["Flag",{},"Security Header is present"]},{"entry":["[DLL Security Header]","Unsigned 16","See description herein."]},{"entry":[{},"bits"]},{"entry":["[Network Security","Unsigned 40","See description herein."]},{"entry":["Header]","bits"]},{"entry":["Service Code","Unsigned 8 bits","Set to 0."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Secure Node","Bool 0","See description herein."]},{"entry":["Secondary Network","Bool 1","See description herein."]},{"entry":["Device Type","Bool 2","See description herein."]},{"entry":["Receiver On When Idle","Bool 3","See description herein."]},{"entry":["[Network MIC32]","Binary 4 octets","See description herein."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"An Association Response message is returned by a Router to a Node in response to an Association Request. An Association Response message frame format is shown in .",{"@attributes":{"id":"p-0315","num":"0335"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 36"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Association Response Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security Header and DLL MIC32 are"]},{"entry":[{},{},"present"]},{"entry":["Network Security Header Flag","Bool 0","Set when the Network Security Header is present"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description herein."]},{"entry":["[Network Security Header]","Unsigned 40 bits","See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 1."]},{"entry":["Short Address","Binary 2 octets","If the Coordinator was not able to associate this device to"]},{"entry":[{},{},"its PAN, this field is set to 0xFFFF, and the association"]},{"entry":[{},{},"status field contains the reason for the failure. If the"]},{"entry":[{},{},"Coordinator was able to associate the device to its PAN,"]},{"entry":[{},{},"this field contains the short address assigned to that device."]},{"entry":["[Mesh Key Security Header]","Unsigned 5","This header, the Encrypted Mesh Key and the Mesh Key"]},{"entry":[{},"octets","MIC32 fields are transferred from the Association"]},{"entry":[{},{},"Confirmation Response frame if one exists."]},{"entry":["[Encrypted Mesh Key]","Binary 16 octets","This Encrypted Key is passed though from the"]},{"entry":[{},{},"Association Confirmation Response message. The Mesh"]},{"entry":[{},{},"Key is encrypted using the algorithm in IEEE 802.15.4-"]},{"entry":[{},{},"2006 section B.4 and the specified Node Key."]},{"entry":["[Mesh Key MIC32]","Binary 4 octets","Message Integrity check of the Mesh Key Security Header"]},{"entry":[{},{},"and the plain text Mesh Key. The MIC is calculated using"]},{"entry":[{},{},"the algorithm in IEEE 802.15.4-2006 section B.4 and the"]},{"entry":[{},{},"specified Node Key."]},{"entry":[{},"Unsigned 8 bits"]},{"entry":["Reserved","Bits 7-4","Set to 0"]},{"entry":["Mesh Key Selection","Bits 3-0","2 = Mesh Key 1 3 = Mesh Key 0 All other values reserved"]},{"entry":["Mesh Key PAN ID","Binary 2 octets","PAN ID associated with the Mesh Key"]},{"entry":["Association Status","Unsigned 8 bits","0x00 = Association successful. 0x01 = PAN at capacity."]},{"entry":[{},{},"0x02 = PAN access denied."]},{"entry":["Coordinator Load","Unsigned 8 bits","Measure of the number of Nodes already associated to the"]},{"entry":[{},{},"network, relative to router capacity. The value 100%"]},{"entry":[{},{},"means full and no further associations are accepted."]},{"entry":["[Network MIC32]","Binary 4 octets","See description herein."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Neighbor Info Request message is broadcast to get information about neighbor Routers. The frame format shown in  is used when the originator of the message is not a network member. The frame format shown in  is used when the originator of the message is a network member.",{"@attributes":{"id":"p-0317","num":"0337"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 37"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Neighbor Info Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer","Unsigned 8 bits","See description herein."]},{"entry":"fields"},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["Service Code","Unsigned 8 bits","Set to 2."]},{"entry":["Network Name Prefix","Unsigned 8 bits","Size in number of octets of the"]},{"entry":["Length",{},"Network Name Prefix field."]},{"entry":["Network Name Prefix","String","Only Node members of a"]},{"entry":[{},{},"network whose name starts"]},{"entry":[{},{},"with this string return"]},{"entry":[{},{},"Neighbor Info Response"]},{"entry":[{},{},"frames."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Neighbor Info Response message is sent by each neighbor Router when a Neighbor Info Request is broadcast. This message contains the network name and Coordinator load of the responding neighbor, the quality of the requesting Node's signal as received by this neighbor, and the list tree position of this neighbor on different network trees. The Neighbor Info Response message frame format for an non-network originator is shown in . The Neighbor Info Response message frame format for an in-network originator is shown in .",{"@attributes":{"id":"p-0319","num":"0339"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":{"entry":"TABLE 38"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Neighbor Info Response Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["Security Count Present","Bool 2","Set when Source Count and Ticket Count are present."]},{"entry":["Service Code","Unsigned 8 bits","Set to 3."]},{"entry":["Source Count","Binary 5 octets","DLL Security nonce count to be used to validate secure"]},{"entry":[{},{},"messages from this device. The value received in a"]},{"entry":[{},{},"message from this source must be greater than this value."]},{"entry":[{},{},"The resulting database value is updated each time a valid"]},{"entry":[{},{},"message is received."]},{"entry":["Ticket Count","Binary 5 octets","DLL Security nonce count to be used to send secure"]},{"entry":[{},{},"messages to this device. This value is pre-incremented"]},{"entry":[{},{},"before each transmission."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Dedicated Router Flag","Bit 7","Set when this Node is a Dedicated Router. This value is"]},{"entry":[{},{},"used to compute the association ratio. It is also used by a"]},{"entry":[{},{},"Dedicated Router to validate that it associates directly only"]},{"entry":[{},{},"with a Coordinator or another Dedicated Router."]},{"entry":["End Device Load","Bits 6-0, range","Measure of the number of End Device which are already"]},{"entry":[{},"0-100","Children of this Router, relative to router capacity. The"]},{"entry":[{},{},"value 100% means full and no further End Device are"]},{"entry":[{},{},"accepted."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Neighborhood Table Full","Bool 7","When set, this Router can't be used as an Association"]},{"entry":[{},{},"Router because it neighborhood table is already full with"]},{"entry":[{},{},"direct Parents and Children."]},{"entry":["Coordinator Load","Bits 6-0, range","Measure of the number of Nodes already associated to the"]},{"entry":[{},"0-100","network, relative to router capacity. The value 100%"]},{"entry":[{},{},"means full and no further associations are accepted."]},{"entry":["Requestor LQI rx","Unsigned 8 bits","Link Quality Indicator of messages received from the"]},{"entry":[{},{},"requesting Node."]},{"entry":["Network Name Length","Unsigned 8 bits","Size in number of octets of the Network Name field."]},{"entry":["Network Name","String","Name assigned to the network on which this Node is"]},{"entry":[{},{},"associated."]},{"entry":["Number of Network Trees","Unsigned 8 bits","Number of network tree descriptions available in the"]},{"entry":[{},{},"following list."]},{"entry":[{},"Array of . . .","the following fields"]},{"entry":["Tree PAN Identifier","Binary 2 octets","See description herein."]},{"entry":["Avg LQI","Unsigned 8 bits","See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Number of Hops","Bits 7-4","See description herein."]},{"entry":["Power Outage Routing","Bool 2","See description herein."]},{"entry":["Min LQI Class","Bits 1-0","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Neighbors Exchange message is broadcast locally by each Node and used to maintain the neighborhood information and to optimize the network tree. The Neighbors Exchange message frame format is shown in .",{"@attributes":{"id":"p-0321","num":"0341"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"thead":{"row":{"entry":"TABLE 39"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Neighbors Exchange Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security Header and DLL MIC32 are"]},{"entry":[{},{},"present"]},{"entry":["[DLL Security Header]","Unsigned 16 bits","See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 4."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Immediate Broadcast Requested","Bool 7","Set when the originator of the message needs to get"]},{"entry":[{},{},"information from neighbors in a short interval of time."]},{"entry":[{},{},"When set, recipients send their Neighbors Exchange"]},{"entry":[{},{},"message using a pseudo-randomly chosen delay within"]},{"entry":[{},{},"NEIGHBOR_EX_RND_PERIOD. This feature is used by"]},{"entry":[{},{},"Nodes participating in overlapping networks."]},{"entry":["reserved","Bits 0 to 6"]},{"entry":["Network List Length","Unsigned 8 bits","Number of entries in the following list."]},{"entry":"Network List"},{"entry":["Tree PAN Identifier","Binary 2 octets","See description herein."]},{"entry":["Neighbor Address","Binary 2 octets","See description herein."]},{"entry":["Neighbor PAN Identifier","Binary 2 octets","See description herein."]},{"entry":["Avg LQI","Unsigned 8 bits","See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Number of Hops","Bits 7-4","See description herein."]},{"entry":["Preferred Parent Flag","Bool 3","See description herein."]},{"entry":["Power Outage Routing","Bool 2","See description herein."]},{"entry":["Min LQI Class","Bits 1-0","See description herein."]},{"entry":["LQI List Length","Unsigned 8 bits","Number of entries in the LQI list below."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LQI List This list use the space remaining in the frame and contains 23 entries when the"},{"entry":"Network List contain one entry, 20 when the Network List contain 2 entries and 17 when the"},{"entry":"Network List contain 3 entries."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Neighbor Short Address","Binary 2 octets","Address of the neighbor for which the LQI is reported."]},{"entry":["LQI rx","Unsigned 8 bits","Link Quality measured by this neighbor when receiving"]},{"entry":[{},{},"messages from the current Node, averaged over time."]},{"entry":["Success Indication","Bool 7","Set to 1 if the last Neighbor Exchange of this neighbor was"]},{"entry":[{},{},"received successfully. Used to calculate TX success rate."]},{"entry":["Absolute RSSI rx","Bits 6-0","Absolute Received Signal Strength Indicator measured by"]},{"entry":[{},{},"this neighbor when receiving messages from the current"]},{"entry":[{},{},"Node. Must be multiply by \u22121 to obtain the value in dBm."]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The End Device Data Request message is used by an End Device to request pending data messages from its Parent. The End Device Data Request message frame format is shown in .",{"@attributes":{"id":"p-0323","num":"0343"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 40"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"End Device Data Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security"]},{"entry":[{},{},"Header and DLL MIC32"]},{"entry":[{},{},"are present"]},{"entry":["[DLL Security Header]","Unsigned 16","See description herein."]},{"entry":[{},"bits"]},{"entry":["Service Code","Unsigned 8 bits","Set to 5"]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The End Device Data Response message is used in response to an End Device Request to indicate the presence or not of pending data. The End Device Data Response message frame format is shown in .",{"@attributes":{"id":"p-0325","num":"0345"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 41"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"End Device Data Response Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security"]},{"entry":[{},{},"Header and DLL MIC32"]},{"entry":[{},{},"are present"]},{"entry":["[DLL Security Header]","Unsigned 16","See description herein."]},{"entry":[{},"bits"]},{"entry":["Service Code","Unsigned 8 bits","Set to 6"]},{"entry":["Data Pending","Unsigned 8 bits","0 = No data pending"]},{"entry":[{},{},"1 = Pending data"]},{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Service Request message is used by a device non-member of the network to communicate with a specific service such as the commissioning service. The Router used as a proxy is responsible for limiting the flow of messages to provide protection from denial of service attacks. See the Forwarding Service Messages for more detail. The Service Request message frame format is shown in . The Service Request Response frame format is shown in .",{"@attributes":{"id":"p-0327","num":"0347"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 42"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Service Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer",{},"See description herein."]},{"entry":"fields"},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 3."]},{"entry":["DLL Security Header","Bool 1","Set to 0. The DLL Security"]},{"entry":["Flag",{},"Header and DLL MIC32 is"]},{"entry":[{},{},"not present"]},{"entry":["Service Code","Unsigned 8 bits","Set to 7."]},{"entry":["Server","Unsigned 8 bits","0 = ANSI C12 Commissioning"]},{"entry":[{},{},"Host"]},{"entry":["Payload","Multi-octet","Up to the maximum"]},{"entry":[{},{},"frame length permitted by"]},{"entry":[{},{},"IEEE 802.15.4."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The common frame format for most point to point messages is shown in .",{"@attributes":{"id":"p-0329","num":"0349"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 43"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Common point to point messaging Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 5."]},{"entry":["DLL Security Header Flag","Bool 1","Set when the DLL Security"]},{"entry":[{},{},"Header and DLL MIC32"]},{"entry":[{},{},"are present"]},{"entry":["[DLL Security Header]","Unsigned 16","See description herein."]},{"entry":[{},"bits"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"See the different message specific contents in the following."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["[DLL MIC32]","Binary 4 octets","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Local Data Transfer message is used to transport upper layers information for a point to point communication. The Local Data Transfer message frame format is shown in .",{"@attributes":{"id":"p-0331","num":"0351"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 44"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Local Data Transfer Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 5."]},{"entry":["Service Code","Unsigned 8 bits","Set to 0."]},{"entry":["Payload","Multi-octet","Upper layer information."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Frame Reception Rate Test Init messages are used to compute the Frame Reception Rate. This function is provided mainly in support of radio manufacturing. A test is initiated by sending a Frame Reception Rate Test Init frames, follow by one or a multitude of Frame Reception Rate Test Data frames, followed by an optional Frame Reception Rate Test End frame. The target Node responds to the Frame Reception Rate Test End frame with a Frame Reception Rate Test Result frame. When a Frame Reception Rate Test Result is not received, the originator can retry by sending one or more Frame Reception Rate Test End frames. The Frame Reception Rate Test Init message frame format is shown in .",{"@attributes":{"id":"p-0333","num":"0353"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":{"entry":"TABLE 45"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Frame Reception Rate Test Init Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p message format",{},"See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 1."]},{"entry":["Sequence Number","Unsigned 8 bits","Set to 0."]},{"entry":["Count","Unsigned 8 bits","Number of Frame Reception Rate Test Data frames to be"]},{"entry":[{},{},"transmitted."]},{"entry":["Length","Unsigned 8 bits","Size of the Frame Reception Rate Test Data frame"]},{"entry":[{},{},"requested or sent. This size shall match the value of the"]},{"entry":[{},{},"Frame Length of that Frame Reception Rate Test Data"]},{"entry":[{},{},"frame as defined in the Physical layer of IEEE 802.15.4,"]},{"entry":[{},{},"which includes all MAC headers and the CRC (FCS0"]},{"entry":[{},{},"trailer"]},{"entry":["Mode","Unsigned 8 bits","0 = Acknowledgment and retries disabled 1 ="]},{"entry":[{},{},"Acknowledgment and retries enabled"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The frame format for the Frame Reception Rate Test Data is shown in .",{"@attributes":{"id":"p-0335","num":"0355"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 46"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Frame Reception Rate Test Data Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p",{},"See description herein."]},{"entry":"message format"},{"entry":["Service Code","Unsigned 8 bits","Set to 2."]},{"entry":["Sequence Number","Unsigned 8 bits","Pre-incremented before each"]},{"entry":[{},{},"transmission."]},{"entry":["Count","Unsigned 8 bits","Duplicate of the value sent in the"]},{"entry":[{},{},"Frame Reception Rate Test"]},{"entry":[{},{},"Init frame."]},{"entry":["Length","Unsigned 8 bits","Duplicate of the value sent in the"]},{"entry":[{},{},"Frame Reception Rate Test"]},{"entry":[{},{},"Init frame."]},{"entry":["Mode","Unsigned 8 bits","Duplicate of the value sent in the"]},{"entry":[{},{},"Frame Reception Rate Test"]},{"entry":[{},{},"Init frame."]},{"entry":["Padding","Unsigned 8 bits","Octets added to the Frame"]},{"entry":[{},{},"Reception Rate Test Data frame to"]},{"entry":[{},{},"adjust its size to the dimension"]},{"entry":[{},{},"requested by the initiating Frame"]},{"entry":[{},{},"Reception Rate Test Init"]},{"entry":[{},{},"frame's Length field."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The frame format for the Frame Reception Rate Test End is shown in .",{"@attributes":{"id":"p-0337","num":"0357"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 47"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Frame Reception Rate Test End Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p message format",{},"See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 3."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The frame format for the Frame Reception Rate Test Result is shown in .",{"@attributes":{"id":"p-0339","num":"0359"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 48"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Frame Reception Rate Test Result Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p message",{},"See description herein."]},{"entry":"format"},{"entry":["Service Code","Unsigned 8 bits","Set to 4."]},{"entry":["Number Of Frame","Unsigned 8 bits","Number of frames received"]},{"entry":["Received",{},"since the last Frame Reception"]},{"entry":[{},{},"Rate Test Init frame."]},{"entry":["Average RSS","Signed 8 bits","Average RSS of all the frames"]},{"entry":[{},{},"received since the last"]},{"entry":[{},{},"Frame Reception Rate"]},{"entry":[{},{},"Test Init frame."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Local Broadcast Request message is used to retrieve a list of local devices. The Local Broadcast Request message frame format is shown in .",{"@attributes":{"id":"p-0341","num":"0361"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 50"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Local Broadcast Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 5."]},{"entry":["Service Code","Unsigned 8 bits","Set to 20."]},{"entry":["Maximum RSSI","Signed 8 bits","Used to exclude devices in close proximity. A response is"]},{"entry":[{},{},"sent only if the RSSI measured at the reception of this"]},{"entry":[{},{},"message by the target device is less than the value"]},{"entry":[{},{},"specified."]},{"entry":["Minimum RSSI","Signed 8 bits","Used to exclude too distant devices. A response is sent"]},{"entry":[{},{},"only if the RSSI measured at the reception of this message"]},{"entry":[{},{},"by the target device is greater than the value specified."]},{"entry":["Max Delay Period","Unsigned 8","Maximum delay in units of 1\/10 second before a response"]},{"entry":[{},{},"is returned. Each target Node computes a random response"]},{"entry":[{},{},"delay within this period."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Payload Content","Bits 2-0","Specifies the information included in the frame's Payload"]},{"entry":[{},{},"field. 0 = None 1 = None. This is a walk-by request;"]},{"entry":[{},{},"Respond only if supported and not already processed 2 ="]},{"entry":[{},{},"Network name 3 = Network name prefix 4 = Bar code 5 ="]},{"entry":[{},{},"Communications module serial number"]},{"entry":["Requested Response Payload","Bits 5-3","Specifies the information to be included in the Local"]},{"entry":[{},{},"Broadcast Response. 0 = None 1 = Network name 2 ="]},{"entry":[{},{},"Security enable flag, Owner, Bar code id"]},{"entry":["Payload","Multi-octet","When present a response is sent only if a match exists with"]},{"entry":[{},{},"the information provided. The length of this field is"]},{"entry":[{},{},"defined by the remaining capacity of this frame as defined"]},{"entry":[{},{},"by IEEE 802.15.4"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Local Broadcast Response message is sent by all Nodes which have received a Local Broadcast Request with matching criteria (RSSIs and Payload). The Local Broadcast Response message frame format is shown in .",{"@attributes":{"id":"p-0343","num":"0363"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":{"entry":"TABLE 51"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Local Broadcast Response Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 5."]},{"entry":["Service Code","Unsigned 8 bits","Set to 21."]},{"entry":["Source Address","Binary 2 octets","Short address of the responding Node."]},{"entry":["Device Class","Binary 4 octets","This identifier is used to load the appropriate context for"]},{"entry":[{},{},"this device, data model and business logic. For table"]},{"entry":[{},{},"driven devices, this field is equivalent to the"]},{"entry":[{},{},"DEVICE_CLASS field of the ANSI C12.19-2008,"]},{"entry":[{},{},"General Configuration Table (Table 0)."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Counts Present","Bool 7","Set when the Source Count and Ticket Count are present."]},{"entry":[{},{},"These counters are required to authenticate subsequent"]},{"entry":[{},{},"communication."]},{"entry":["Payload Content ID","Bits 3-0","Specifies the information included at the end of this"]},{"entry":[{},{},"message in the Payload field: 0 = None 1 = Network name"]},{"entry":[{},{},"2 = Security, Version, Owner and Bar code"]},{"entry":["Source Count","Binary 5 octets","DLL Security nonce count to be used to validate secured"]},{"entry":[{},{},"messages from this device. The value received from this"]},{"entry":[{},{},"source must be greater than the value received in this"]},{"entry":[{},{},"frame. This value is updated each time a valid frame is"]},{"entry":[{},{},"received."]},{"entry":["Ticket Count","Binary 5 octets","DLL Security nonce count to be used to send secured"]},{"entry":[{},{},"messages to this device. This value is pre-incremented"]},{"entry":[{},{},"before each transmission."]},{"entry":["Payload","Binary","The length of this field is defined by the remaining space"]},{"entry":[{},{},"for this frame as defined by the Physical layer."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Within the Local Broadcast message is the Payload Content ID  which has the frame format shown in .",{"@attributes":{"id":"p-0345","num":"0365"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 52"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Local Broadcast: Payload Content ID 1 Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Network","String","Network Name assigned to this specific mesh"]},{"entry":["name",{},"network."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Within the Local Broadcast message is the Payload Content ID  which has the frame format shown in .",{"@attributes":{"id":"p-0347","num":"0367"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"center"}},"thead":{"row":{"entry":"TABLE 53"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Local Broadcast: Payload Content ID 2 Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Security Enable Flag","Bool 7","Set if the responding device has been configured with its"]},{"entry":[{},{},"passwords or\/and keys and subsequent communication"]},{"entry":[{},{},"needs to follow the security policies specified for this"]},{"entry":[{},{},"device."]},{"entry":[{},"Bit 4","Set to 1 for backward compatibility."]},{"entry":["Owner Field Length","Bits 3-0","Number of octets of Owner field."]},{"entry":["Firmware version","Unsigned 8 bits","Version of the host device. This information is used to"]},{"entry":[{},{},"configure the device context."]},{"entry":["Firmware revision","Unsigned 8 bits","Revision of the host device. This information is used to"]},{"entry":[{},{},"configure the device context."]},{"entry":["Owner","String","Identifier of the owner of this device - information which"]},{"entry":[{},{},"is used to select the proper password or keys when the"]},{"entry":[{},{},"Security Enable Flag is set."]},{"entry":["Bar code id","String","Identifier available as a readable bar code on the device."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The End Device Node Present message is sent by a battery operated device, e.g., a sleeping device to a wake-up device, following an impulse, such as a magnetic impulse, from a wake-up device, e.g., hand-held device. The End Device Node Present message frame format is shown in .",{"@attributes":{"id":"p-0349","num":"0369"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 54"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"End Device Node Present Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common MAC layer fields",{},"See description herein."]},{"entry":[{},"Unsigned 8 bits","See subfields below:"]},{"entry":["Service Type","Bits 6-4","Set to 5."]},{"entry":["Service Code","Unsigned 8 bits","Set to 22."]},{"entry":["Source Address","Binary 2 octets","See description herein."]},{"entry":["Device Class","Binary 4 octets","See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Counts Present","Bool 7","See description herein."]},{"entry":["Payload Content ID","Bits 3-0","Set to 2."]},{"entry":["Source Count","Binary 5 octets","See description herein."]},{"entry":["Ticket Count","Binary 5 octets","See description herein."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Security Enable Flag","Bool 7","See description herein."]},{"entry":["Owner Field Length","Bits 3-0","See description herein."]},{"entry":["Firmware version","Unsigned 8 bits","See description herein."]},{"entry":["Firmware revision","Unsigned 8 bits","See description herein."]},{"entry":["Owner","String","See description herein."]},{"entry":["Bar code id","String","See description herein."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Range Test Request message is used to record the signal strength (RSSI) in both directions between two Nodes. The Range Test Request message frame format is shown in .",{"@attributes":{"id":"p-0351","num":"0371"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 55"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Range Test Request Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p message format",{},"See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 30."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Range Test Response command is returned in response to the Range Test Request. The format is shown in .",{"@attributes":{"id":"p-0353","num":"0373"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 56"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Range Test Response Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p",{},"See description herein."]},{"entry":"message format"},{"entry":["Service Code","Unsigned 8 bits","Set to 31."]},{"entry":["RSSI","Signed 8 bits","Received Signal Strength Indicator"]},{"entry":[{},{},"of the Range Test Request"]},{"entry":[{},{},"when received by the target"]},{"entry":[{},{},"Node. This field is encoded"]},{"entry":[{},{},"using a signed integer in dBm."]},{"entry":["LQI","Unsigned 8 bits","Link Quality Indicator of the Range"]},{"entry":[{},{},"Test Request when received by the"]},{"entry":[{},{},"target Node."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Range Test Initiate command is used to request that a Node initiate a Range Test Request to a target Node. The Range Test Initiate command frame format is shown in .",{"@attributes":{"id":"p-0355","num":"0375"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 57"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Range Test Initiate Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p message format",{},"See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 32."]},{"entry":["Target Address","Binary 8 octets","Address of the target"]},{"entry":[{},{},"Node."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Range Test Result command is used in response to a request that a Node initiate the Range Test Request to a target Node. The Range Test Result command frame format is shown in .",{"@attributes":{"id":"p-0357","num":"0377"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 58"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Range Test Result Frame Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Common p2p message format",{},"See description herein."]},{"entry":["Service Code","Unsigned 8 bits","Set to 33."]},{"entry":["Originator RSSI","Signed 8 bits","Received Signal Strength Indicator of the Range Test"]},{"entry":[{},{},"Request when received by the target Node. This field is"]},{"entry":[{},{},"encoded using a signed integer in dBm."]},{"entry":["Originator LQI","Unsigned 8 bits","Link Quality Indicator of the Range Test Request when"]},{"entry":[{},{},"received by the target Node."]},{"entry":["Target RSSI","Signed 8 bits","Received Signal Strength Indicator of the Range Test"]},{"entry":[{},{},"Response when received by the originator Node. This field"]},{"entry":[{},{},"is encoded using a signed integer in dBm."]},{"entry":["Target LQI","Unsigned 8 bits","Link Quality Indicator of the Range Test Response when"]},{"entry":[{},{},"received by the originator Node."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The 802.15.4 standard states the following about Link Quality Indicator (\u201cLQI\u201d). The LQI measurement is a characterization of the strength and\/or quality of a received frame. The measurement may be implemented using receiver ED, a signal-to-noise ratio estimation, or a combination of these methods. In a preferred embodiment, transceivers, are used to measure signal strength. The LQI is calculated as follows:",{"@attributes":{"id":"p-0359","num":"0379"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"lqi","mo":"=","mrow":{"mo":"{","mtable":{"mtr":[{"mtd":[{"mrow":{"mn":"10","mo":"+","mrow":{"mfrac":{"mn":["255","77"]},"mo":"*","mi":"l"}}},{"mrow":{"mrow":{"mi":"for","mo":["\u2062","-"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"3"},"mo":["\u2264","\u2264"],"mi":"l","mn":"74"}}]},{"mtd":[{"mn":"0"},{"mrow":{"mrow":[{"mi":["for","l"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},{"mo":"-","mn":"3"}],"mo":"<"}}]},{"mtd":[{"mn":"255"},{"mrow":{"mrow":{"mi":["for","l"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mo":">","mn":"74"}}]}]}}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"Equation","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"1"}}}]}}}}},"where l is the received signal level in dB above the sensitivity level of the radio on the meter (node). The sensitivity is measured for each radio model used in the mesh network. It is defined as the signal level above ambient noise for which a frame reception rate of 99% is obtained. Measurement is done with a wired lab setup with frame lengths of 127 octets.","LQI classes group together links that have similar probability of successful transmission. Various studies on RF propagation, mostly targeting cellular market, suggest using a fade margin between 20 and 40 dB. Since the meters in the preferred embodiment are fixed and time dependent, attenuation is only caused by the movement of external obstacles (persons, vehicles).","Accordingly, a margin of 15 dB should be sufficient to have a reliable link. In other words we consider a link with a signal strength 50 dB above the sensitivity level has about the same chances of success as a link with a signal strength 15 dB above sensitivity. The limit for average links is set at 5 dB above sensitivity. Table 59 summarizes the significance of the LQI classes.",{"@attributes":{"id":"p-0363","num":"0383"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 59"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"LQI Class"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Class ID","LQI","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["0","0","No link"]},{"entry":["1","1 to LQI_CLASS1_HIGH_THRESHOLD","Unreliable link"]},{"entry":["2","(LQI_CLASS1_HIGH_THRESHOLD + 1)","Average link"]},{"entry":[{},"to LQI_CLASS2_HIGH_THRESHOLD"]},{"entry":["3","(LQI_CLASS1_HIGH_THRESHOLD + 1)","Reliable link"]},{"entry":[{},"to 255"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Association Ratio is calculated by a Node to select which Coordinator to choose. It is a weighted sum of: the \u201cNumber of Hops\u201d to the Coordinator (from Neighbor Info Response), the \u201cCoordinator Load\u201d (from Neighbor Info Response), the number of local neighbors (from the number of Neighbor Info Responses received for the selected network) and the \u201cMin LQI Class\u201d (maximum value from all Neighbor Info Response adjusted for last hop). Table 60 lists the weighting factors.",{"@attributes":{"id":"p-0365","num":"0385"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 60"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Association Ratio Weighting Factors"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Default",{}]},{"entry":[{},"Weighting","Weighted"]},{"entry":["Weighting Factor Parameter","Factor in %","Formula Variable"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["COORD_LOAD_WEIGHT","40","Coordinator Load"]},{"entry":["HOP_NUM_WEIGHT","40","Number of Hops"]},{"entry":["NUM_NEIGHBORS_WEIGHT","10","Number of Neighbors"]},{"entry":["LQI_CLASS_WEIGHT","10","Min LQI Class"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0366","num":"0386"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003IF Coordinator Load is 100%"},{"entry":"\u2003\u2003Ignore this network"},{"entry":"\u2003IF Coordinator Load < 20%"},{"entry":"\u2003\u2003Association Ratio = COORD_LOAD_WEIGHT"},{"entry":"\u2003ELSE"},{"entry":"\u2003\u2003Association Ratio = COORD_LOAD_WEIGHT * (1 \u2212"},{"entry":"\u2003\u2003((Coordinator Load \u2212 20) \/ 80))"},{"entry":"\u2003IF the Dedicated Router Flag of the selected Association Router is true"},{"entry":"\u2003\u2003Association Ratio += HOP_NUM_WEIGHT"},{"entry":"\u2003ELSE"},{"entry":"\u2003\u2003Association Ratio += HOP_NUM_WEIGHT * (1\u2212(Number of"},{"entry":"\u2003\u2003Hops)\/(MAX_HOPS\u22121))"},{"entry":"\u2003IF Number of Neighbors >= ASSOCIATION_NEIGHBORS"},{"entry":"\u2003\u2003Association Ratio += NUM_NEIGHBORS_WEIGHT"},{"entry":"\u2003ELSE"},{"entry":"\u2003\u2003Association Ratio += NUM_NEIGHBORS_WEIGHT *"},{"entry":"\u2003\u2003\u2003\u2003\u2003(Number of Neighbors \/ ASSOCIATION_NEIGHBORS)"},{"entry":"\u2003Association Ratio += LQI_CLASS_WEIGHT * (Min LQI Class \/ 3)"},{"entry":"where"},{"entry":"\u2003ASSOCIATION_NEIGHBORS = 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The Preferred Route Ratio is computed by a Node to select within its Parents, the one that represents the optimized path to access the Coordinator. This ratio is calculated based on the neighborhood table information as received within a Neighbor Info Response or a Neighbors Exchange.\n\nPreferred Route Ratio=Min LQI class<<12|(15-Number of Hops)<<8|Avg LQI\n","The preferred Router, based on this ratio, will correspond to:\n\n","End Devices selects a neighboring Router based on the following criteria applied in the order indicated:\n\n","The pseudo-random delays required by Nodes for this layer are computed based on the following equation:",{"@attributes":{"id":"p-0371","num":"0396"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003pseudoRandomNumber = ((shortAddress & 0x7F) << 6) XOR"},{"entry":"\u2003\u2003((longAddress >>i) & 0x7F) XOR"},{"entry":"\u2003\u2003((pseudoRandomValue >>i) & 0x7F)"},{"entry":"\u2003pseudoRandomPeriod (sec) = pseudoRandomNumber * period \/ 8191"},{"entry":"Each time a pseudo-random number is generated, i = ((i+1) % 8)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The pseudoRandomValue represents a value within the radio which changes over time, such as the Neighbor table checksum or the \u201cNumber of frames transmitted\u201d statistic.","For example:",{"@attributes":{"id":"p-0374","num":"0399"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"16bitsAddress = 35 = 0100011"]},{"entry":[{},"longAddress = 948347 = 11100111100001111011"]},{"entry":[{},"pseudoRandomValue = 3384854 = 1100111010011000010110"]},{"entry":[{},"period\u2003\u2003= 20 s"]},{"entry":[{},"1th pseudoRandom period = (0100011 << 6)"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 1111011"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 0010110"]},{"entry":[{},"\u2003\u2003= 0100010101101 = 2221 * 20 \/ 8191 = 5,423 s"]},{"entry":[{},"2pseudoRandom period = (0100011 << 6)"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 0111101"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 0001011"]},{"entry":[{},"\u2003\u2003= 0100011110110 = 2294 * 20 \/ 8191 = 5,601 s"]},{"entry":[{},"3pseudoRandom period = (0100011 << 6)"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 0011110"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 0000101"]},{"entry":[{},"\u2003\u2003= 0100011011011 = 2267 * 20 \/ 8191 = 5,535 s"]},{"entry":[{},"4pseudoRandom period = (0100011 << 6)"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 0001111"]},{"entry":[{},"\u2003\u2003\u2009\u2009xor 1000010"]},{"entry":[{},"\u2003\u2003= 0100010001101 = 2189 * 20 \/ 8191 = 5,344 s"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The IEEE 802.15.4 short addresses are assigned sequentially by the coordinator. Six bits of this address are used to partition Nodes into 64 different groups. This number represents bits 8 to 13 of the final pseudo-random number. For example, if a network has 432 Nodes, between 6 and 7 End points will share the same 6 bits. Bit 0 to 7 of the pseudo-random number is computed based on the IEEE 802.15.4 long address and a pseudo-random value that changes over time.","The pseudo-random number generated is a number between 0 and 8191, which needs to be scaled for the appropriate range.","The following tables propose data structure definitions in support of the implementation of the SM layer discussed herein and may be adapted for each specific implementation.",{"@attributes":{"id":"p-0378","num":"0403"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 61"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Global Variables"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["PAN Coordinator Load","Unsigned 8 bits","Indication of the number of Nodes actually associated to"]},{"entry":[{},{},"the Coordinator as reported by the last Neighbors"]},{"entry":[{},{},"Exchange message received from a Parent."]},{"entry":["End Device Load","Unsigned 8 bits","Value maintained by each Router which represents a"]},{"entry":[{},{},"percentage of its maximum capacity to accept and"]},{"entry":[{},{},"manage End Devices."]},{"entry":["Counter","Unsigned 5 octets","The DLL and Network Security nonce count used for all"]},{"entry":[{},{},"transmissions after the device has associated with the"]},{"entry":[{},{},"network. This count is stored in non-volatile memory"]},{"entry":[{},{},"and never reset. The value stored in this table"]},{"entry":[{},{},"corresponds to the next value to be used."]},{"entry":["Ticket","Unsigned 5 octets","Nonce count provided to Nodes not associated to the"]},{"entry":[{},{},"network. This count is stored in non-volatile memory"]},{"entry":[{},{},"and never reset. The value stored in this table"]},{"entry":[{},{},"corresponds to the next ticket to be sent."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Mesh Key Tables stores the Mesh Key(s) used by the device. Each Mesh Key is associated with the PAN ID of the Coordinator it is used with. Mesh Keys are administered by the associated Coordinator.",{"@attributes":{"id":"p-0380","num":"0405"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 62a"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Mesh Key Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Mesh Key","Array(MAX_ASSOCIATIONS)","The Mesh Key Table"]},{"entry":["Table","of Mesh Key","stores the Mesh Key"]},{"entry":[{},"Entries","information associated"]},{"entry":[{},{},"with each Coordinator"]},{"entry":[{},{},"the device associates"]},{"entry":[{},{},"with."]},{"entry":["Associated","Unsigned 1 octet","The number of"]},{"entry":["Coordinators",{},"Coordinators the device"]},{"entry":[{},{},"has associated with."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0381","num":"0406"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":{"entry":"TABLE 62b"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Mesh Key Table: Mesh Key Entry"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Coordinator PAN ID","Unsigned 2","The PAN ID of the Coordinator associated with the Mesh"]},{"entry":[{},"octets","Key Entry The entire Mesh Key Entry is disabled when"]},{"entry":[{},{},"the Transmit Mesh Key ID is disabled."]},{"entry":["Mesh Key-0","Unsigned 16","In the context of the SM DLL Security, Mesh key used"]},{"entry":[{},"octets","when the DLL Key ID is set to 0. In the context of the"]},{"entry":[{},{},"SM End-To-End Network Security, Mesh key used when"]},{"entry":[{},{},"the Network Key ID is set to 0."]},{"entry":["Mesh Key-1","Unsigned 16","In the context of the SM DLL Security, Mesh key used"]},{"entry":[{},"octets","when the DLL Key ID is set to 1. In the context of the"]},{"entry":[{},{},"SM End-To-End Network Security, Mesh key used when"]},{"entry":[{},{},"the Network Key ID is set to 1."]},{"entry":[{},"Unsigned 8 bits","See fields below:"]},{"entry":[{},"Bits 7-5","Reserved, set to 0"]},{"entry":["Mesh Key Entry Active","Bool 4","Set when Mesh Key Table Entry active"]},{"entry":["Secondary Mesh Key Allowed","Bool 3","Set when it is allowed to accept frames authenticated"]},{"entry":[{},{},"using either Mesh Key. Reset when only frames"]},{"entry":[{},{},"authenticated using the Mesh key specified by the"]},{"entry":[{},{},"Transmit Mesh Key ID are accepted"]},{"entry":["Transmit Mesh Key ID","Bit 2","0 = Mesh Key-0 used for transmissions 1 = Mesh Key-1"]},{"entry":[{},{},"used for transmissions"]},{"entry":["Mesh Key-1 Write Toggle","Bit 1","Every update operation on a Mesh Key-1 toggles the"]},{"entry":[{},{},"write bit. Initialized to 0."]},{"entry":["Mesh Key-0 Write Toggle","Bit 0","Every update operation on a Mesh Key-0 toggles the"]},{"entry":[{},{},"write bit. Initialized to 0."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Node Key table stores the Node Key(s) used by the device. The SM network security process uses the Node Key Table to look up the information needed for the Network Security MIC calculation for messages between the Coordinator and devices. The information in the Node Key Table is retained during a power outage and a device reset.",{"@attributes":{"id":"p-0383","num":"0408"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 63"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Node Key Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Node Key-0","Binary, 16","Node Key used when the Network Security header is"]},{"entry":[{},"octets","present and the Network Key ID is set to 0."]},{"entry":["Node Key-1","Binary, 16","Node Key used when the Network Security header is"]},{"entry":[{},"octets","present and the Network Key ID is set to 1."]},{"entry":[{},"Unsigned 8 bits","See fields below:"]},{"entry":[{},"Bits 7-4","Reserved, set to 0"]},{"entry":["Secondary Node Key Allowed","Bool 3","Set when it is allowed to accept frames authenticated"]},{"entry":[{},{},"using either Node key. Reset when only frames"]},{"entry":[{},{},"authenticated using the Node key specified by the"]},{"entry":[{},{},"Transmit Node Key ID are accepted"]},{"entry":["Transmit Node Key ID","Bit 2","0 = Node Key-0 used for transmissions 1 = Node Key-1"]},{"entry":[{},{},"used for transmissions"]},{"entry":["Node Key-1 Write Toggle","Bit 1","Every update operation on a Node Key-1 toggles the write"]},{"entry":[{},{},"bit. Initialized to 0."]},{"entry":["Node Key-0 Write Toggle","Bit 0","Every update operation on a Node Key-0 toggles the write"]},{"entry":[{},{},"bit. Initialized to 0."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Maintenance Table stores the information used for Nodes associating with the network and for maintenance devices that access the Nodes using point-to-point messages. The information in the Maintenance Table is retained during a power outage and a device reset.",{"@attributes":{"id":"p-0385","num":"0410"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 64"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Maintenance Key Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["RX Source DLL Nonce Count","Binary, 5 octet","The last valid Source count valued received for the"]},{"entry":[{},{},"routing device and used during association or the point-"]},{"entry":[{},{},"to-point communication device for playback protection."]},{"entry":[{},{},"This value is initiated by the Neighbor Information"]},{"entry":[{},{},"Response or the Local Broadcast Response"]},{"entry":["Ticket Count","Binary, 5 octet","Use instead of the Counter defined in the Global"]},{"entry":[{},{},"variables when a Node is not wet associated. This value"]},{"entry":[{},{},"is initiated by the Neighbor Info Response message, End"]},{"entry":[{},{},"Device Node Present message or the Local Broadcast"]},{"entry":[{},{},"Response message"]},{"entry":["Maintenance Key-0","Binary, 16 octets","Maintenance Mesh key used when the DLL Key ID is set"]},{"entry":[{},{},"to 0."]},{"entry":["Maintenance Key-1","Binary, 16 octets","Maintenance Mesh key used when the DLL Key ID is set"]},{"entry":[{},{},"to 1."]},{"entry":[{},"Unsigned 8 bits","See fields below:"]},{"entry":[{},"Bits 7-5","Reserved, set to 0"]},{"entry":["Maintenance Key-1 Receive","Bool 4","Set when reception using Maintenance Key-1 is enabled"]},{"entry":["Enabled",{},{}]},{"entry":["Secondary Maintenance Key","Bool 3","Set when it is allowed to accept frames authenticated"]},{"entry":["Allowed",{},"using either Maintenance key. Reset when only frames"]},{"entry":[{},{},"authenticated using the Maintenance key specified by the"]},{"entry":[{},{},"Transmit Maintenance Key ID are accepted"]},{"entry":["Transmit Maintenance Key ID","Bit 2","0 = Maintenance Key-0 used for transmissions 1 ="]},{"entry":[{},{},"Maintenance Key-1 used for transmissions"]},{"entry":["Maintenance Key-1 Write","Bit 1","Every update operation on a Maintenance Key-1 toggles"]},{"entry":["Toggle",{},"the write bit. Initialized to 0."]},{"entry":["Maintenance Key-0 Write","Bit 0","Every update operation on a Maintenance Key-0 toggles"]},{"entry":["Toggle",{},"the write bit. Initialized to 0."]},{"entry":["Last Maintenance Address","Binary, 8 octets","The address of the last device address to use the key. Set"]},{"entry":[{},{},"to zero if no access has been made."]},{"entry":["Previous Maintenance Address","Binary, 8 octets","The address of the previous device to use the key. The"]},{"entry":[{},{},"address is always different from the Last Maintenance"]},{"entry":[{},{},"Address. It is set to zero if there is no previous"]},{"entry":[{},{},"Maintenance device."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Neighborhood Table data structure is maintained in each radio to keep the information about neighbor Nodes. This data structure is required to implement at least the following processes: Association, Tree Routing, Route Discovery, Neighbors Exchange, Tree Optimization, Checkpoint.",{"@attributes":{"id":"p-0387","num":"0412"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 65a"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Neighborhood Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Neighborhood","array[MAX_NUM_NEIGHBORS]","List of neighbors"]},{"entry":["Table","of",{}]},{"entry":[{},"Neighborhood",{}]},{"entry":[{},"Table Entry"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0388","num":"0413"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 65b"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Neighborhood Table Entries"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Tree PAN Identifier","Binary 2 octets","Identify the network tree for this entry. This network"]},{"entry":[{},{},"identifier can correspond to foreign network when the"]},{"entry":[{},{},"concept of overlapping network is implemented. In this"]},{"entry":[{},{},"context, the same neighbor can be reported multiple"]},{"entry":[{},{},"times within this list if associated to multiple network"]},{"entry":[{},{},"trees."]},{"entry":["Neighbor Address","Binary 2 octets","Address of this neighbor."]},{"entry":["Neighbor PAN Identifier","Binary 2 octets","Membership of this neighbor."]},{"entry":["Avg LQI","Unsigned 8 bits","Average of the LQI value of each hop between this"]},{"entry":[{},{},"neighbor and the Coordinator using the preferred parent"]},{"entry":[{},{},"within the specified network tree. The LQI for each hop"]},{"entry":[{},{},"corresponds to the worst LQI recorded (LQI rx and LQI"]},{"entry":[{},{},"tx) for this hop."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["Number of Hops","Bits 7-4","Number of hops between this neighbor and the"]},{"entry":[{},{},"Coordinator using the preferred parent within the"]},{"entry":[{},{},"specified network tree."]},{"entry":["LQI Class","Bool 3-2","LQI class for the hop between the current node and this"]},{"entry":[{},{},"neighbor."]},{"entry":["Min LQI Class","Bit 1-0","Minimum of all LQI rx and LQI tx for each hop between"]},{"entry":[{},{},"this neighbor and the Coordinator using the preferred"]},{"entry":[{},{},"parent within the specified network tree."]},{"entry":["LQI rx","Unsigned 8 bits","Average link quality measured for frames received from"]},{"entry":[{},{},"this neighbor."]},{"entry":["LQI tx","Unsigned 8 bits","Average link quality measured for frames transmitted to"]},{"entry":[{},{},"this neighbor."]},{"entry":["RSSI rx","Signed 8 bits","Average signal strength in dBm measured for frames"]},{"entry":[{},{},"received from this neighbor."]},{"entry":["RSSI tx","Signed 8 bits","Average signal strength in dBm measured for frames"]},{"entry":[{},{},"transmitted to this neighbor."]},{"entry":[{},"Unsigned 8 bits","See sub fields below:"]},{"entry":["New Entry Flag","Bool 7","Set to true if this entry has not been sent at least once in"]},{"entry":[{},{},"a Neighbor Exchange message. It is not allowed to reuse"]},{"entry":[{},{},"an entry when this flag set to true. The intent of this flag"]},{"entry":[{},{},"is to give enough time to child candidates to choose the"]},{"entry":[{},{},"current node as preferred parent."]},{"entry":["Power Outage Routing","Bool 6","Set if this neighbor supports routing for some period of"]},{"entry":[{},{},"time after a power outage."]},{"entry":["Remote Preferred Parent Flag","Bool 5","Set when this neighbor reports that the current Node is"]},{"entry":[{},{},"its parent."]},{"entry":["Preferred Parent Flag","Bool 4","Set when this neighbor is the parent of the current Node"]},{"entry":[{},{},"within the specified network tree. When set to false, this"]},{"entry":[{},{},"Neighbor can still be used for tree routing if its Number"]},{"entry":[{},{},"of Hops is less or equal to the current Node."]},{"entry":["Freshness","Bits 3-0","Countdown reset at each Neighbors Exchange received"]},{"entry":[{},{},"from this neighbor and decremented at each Neighbors"]},{"entry":[{},{},"Exchange period (each time a Neighbors Exchange"]},{"entry":[{},{},"transmitted by the radio). When this field reach zero, the"]},{"entry":[{},{},"entry is considered deleted and can be reused for a"]},{"entry":[{},{},"different Node."]},{"entry":["Preferred Route Ratio","Unsigned 16 bits","Preferred Route Ratio as defined herein. This value is"]},{"entry":[{},{},"adjusted up to the current Node."]},{"entry":["RX Source DLL Nonce Count","Unsigned 5 octets","The last authenticated DLL full nonce count received"]},{"entry":[{},{},"from this neighbor."]},{"entry":["Transmission success rate","Unsigned 8 bits","Success rate in percentage of the last n transmission with"]},{"entry":[{},{},"this neighbor The value255 means no data available for"]},{"entry":[{},{},"that neighbor. This value is initialized to 100 prior to the"]},{"entry":[{},{},"first transmission and is updated as follows: When the"]},{"entry":[{},{},"transmission is successful:"]},{"entry":[{},{},"S = MIN(s + (s\/n) + (l\/n), 100)"]},{"entry":[{},{},"When the transmission fails:"]},{"entry":[{},{},"S = s \u2212 (s\/n)"]},{"entry":[{},{},"For either case the Neighbor Table"]},{"entry":[{},{},"entry is:"]},{"entry":[{},{},"\u201cTransmission success rate\u201d ="]},{"entry":[{},{},"ROUND(S,0)"]},{"entry":[{},{},"Where"]},{"entry":[{},{},"S: Estimated success rate"]},{"entry":[{},{},"s: Last estimated success rate"]},{"entry":[{},{},"n: Factor to adjust the adjustment speed of the estimated"]},{"entry":[{},{},"average (set by default to 30)"]},{"entry":[{},{},"Note that the ROUND(S, 0) function rounds the S to the"]},{"entry":[{},{},"nearest integer and the MIN(x, y) function selects the"]},{"entry":[{},{},"smaller of x and y."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"When the number of Neighbors exceeds the capacity of the Neighborhood table, the goal is to keep in the table 5 best Parents\/Siblings (best routes) and all nodes that set the current node as preferred Parent (avoid tree instability). We also want to give a chance to new candidates to flag the current Node as preferred Parent. This is done by including them in a round robin fashion among others entry. The radio applies the following logic when it receives a new candidate.\n\n","This last clause (3) allows candidates to receive the information needed to choose this node as preferred Parent. If the new candidate has flagged the current node as preferred Parent, this last condition is ignored.\n\n","The Routing table is used to maintain routes established using the Route Discovery process.",{"@attributes":{"id":"p-0392","num":"0424"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 66a"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Routing Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Route Table","array[MAX_NUM_STATIC_ROUTES]","List if mesh"]},{"entry":[{},"of Route","routes"]},{"entry":[{},"Table Entry"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0393","num":"0425"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":{"entry":"TABLE 66b"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Route Table Entry"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Target Address","Binary 2 octets","MAC address of target Node"]},{"entry":["Next Hop Address","Binary 2 octets","MAC address of the Node used to route the frame to the"]},{"entry":[{},{},"target Node"]},{"entry":["Freshness","Unsigned 8 bits","Decremented each time the table is used for another"]},{"entry":[{},{},"entry. Reset to 0xFF each time the entry is used."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Freshness rules for each time the table is accessed:",{"@attributes":{"id":"p-0395","num":"0427"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If entry = new"]},{"entry":[{},"\u2003new entry Freshness = 0xFF"]},{"entry":[{},"\u2003For each other entry"]},{"entry":[{},"\u2003\u2003If entry Freshness = 0,"]},{"entry":[{},"\u2003\u2003\u2003entry Freshness = 0"]},{"entry":[{},"\u2003\u2003Else"]},{"entry":[{},"\u2003\u2003\u2003entry Freshness = Freshness \u22121"]},{"entry":[{},"Else"]},{"entry":[{},"\u2003Temp_Freshness = access entry Freshness"]},{"entry":[{},"\u2003accessed entry Freshness = 0xFF"]},{"entry":[{},"\u2003For each other entry"]},{"entry":[{},"\u2003\u2003If entry Freshness = 0"]},{"entry":[{},"\u2003\u2003\u2003entry Freshness = 0"]},{"entry":[{},"\u2003\u2003Else"]},{"entry":[{},"\u2003\u2003\u2003If entry Freshness >Temp_Freshness"]},{"entry":[{},"\u2003\u2003\u2003\u2003entry Freshness = Freshness \u22121"]},{"entry":[{},"\u2003\u2003\u2003Else"]},{"entry":[{},"\u2003\u2003\u2003\u2003entry Freshness = Freshness"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Freshness Use: The Freshness value is used when the table is full and a new entry is added. The entry with the smallest Freshness value is replaced with the new entry. If more than one entry has a value of zero, anyone can be replaced. This case only occurs if the table size is greater than 255 entries.","Every time a mesh frame is forwarded, no matter the routing method used, at the exception of the Keep Alive Initiate, the forwarding Node creates a temporary route entry to the originator in Temporary Route Take. This allows the destination Node to quickly send a reply, even if it didn't previously know the route to the originator Node. This route expires after TEMP_ROUTE_TO.",{"@attributes":{"id":"p-0398","num":"0430"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 67a"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Temporary Route Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Temporary","array[MAX_NUM_TEMP_ROUTES]","Table of"]},{"entry":["Route Table","of Temp","temporary routes"]},{"entry":[{},"Route Entry","record from"]},{"entry":[{},{},"frames received."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0399","num":"0431"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":{"entry":"TABLE 67b"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Temporary Route Entry"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Target Address","Binary 2 octets","MAC address of target Node"]},{"entry":["Next Hop Address","Binary 2 octets","MAC address of the Node used to route the frame to the"]},{"entry":[{},{},"target Node"]},{"entry":["Lifetime","Binary 1 octet","Countdown in second initialized to TEMP_ROUTE_TO"]},{"entry":[{},{},"when the entry is created. Set to zero when the entry does"]},{"entry":[{},{},"not contain valid information."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The End Device Table is used to maintain information about each End Device Child.",{"@attributes":{"id":"p-0401","num":"0433"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 68a"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"End Device Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["End Device","array[MAX_NUM_END_DEVICES]","Table of End"]},{"entry":["Table","of End","Devices"]},{"entry":[{},"Device Entry","associated"]},{"entry":[{},{},"with a Router"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0402","num":"0434"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 68b"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"End Device Entry"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Long Address","Binary, 8 octets","EUI address of the End Device"]},{"entry":["Short Address","Binary, 2 octets","Assigned address of End Device (unassigned = 0x0000)"]},{"entry":["Communication Age","Binary, 1 octet","The UTC time at which the End Device was last"]},{"entry":[{},{},"communicated with. The units are in 16 minutes"]},{"entry":[{},{},"increments of time."]},{"entry":["RX Source DLL Nonce Count","Unsigned, 5","The last authenticated DLL full nonce count received from"]},{"entry":[{},"octets","this End Device."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Security events are provided to the upper layers for diagnostic and auditing purposes. The content of each event is described bellow.",{"@attributes":{"id":"p-0404","num":"0436"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE 69"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Security Events"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Security Event Log Control","Unsigned","Control flags for fields present in the log Bit 7 = 1: UTC"]},{"entry":[{},"Integer, 1 octet","time present Bit 6 = 1: MAC source long otherwise the"]},{"entry":[{},{},"source PAN and short address is present Bit 5 = 1: Short"]},{"entry":[{},{},"address of Network originator present Bit 4 = 1: Service"]},{"entry":[{},{},"Code present Bits 3-1 = 1: key type: 11x = Reserved 101 ="]},{"entry":[{},{},"Node Key-1 100 = Node Key-0 011 = Mesh Key-1 010 ="]},{"entry":[{},{},"Mesh Key-0 001 = Maintenance Key-1 000 ="]},{"entry":[{},{},"Maintenance Key-0 Bit 0 Reserved (=0)"]},{"entry":["UTC Time Of Event","Unsigned","The UTC time is recorded for events by those devices"]},{"entry":[{},"Integer, 4 octets,","supporting a UTC clock."]},{"entry":[{},"1 minute units",{}]},{"entry":["MAC Source Address","Binary, 8 octets","Records the MAC source address of the logged event"]},{"entry":[{},{},"message. This address is either the long address or the"]},{"entry":[{},{},"MAC source PAN and short address padded with 0''s in"]},{"entry":[{},{},"the MSB."]},{"entry":["Network Originator Address","Binary, 4 octets","The Network Originator PAN and Address (optional -"]},{"entry":[{},{},"used only for messages with network addresses."]},{"entry":["Service Type","Binary, 1 octet","Full Service Type octet from the event message."]},{"entry":["Service Code","Binary, 1 octet","Service Code octet from the event message if present."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The Source Route table is used to maintain source routes established by the Route Discovery process with the Trace Route flag bit set and through the Route Establishment process.",{"@attributes":{"id":"p-0406","num":"0438"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 70a"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Source Route Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Source","array[MAX_NUM_SOURCE_ROUTES]","List if source"]},{"entry":["Route","of","routes"]},{"entry":["Table","Source Route",{}]},{"entry":[{},"Table Entry"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0407","num":"0439"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"thead":{"row":{"entry":"TABLE 70b"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Source Route Table Entry"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field Name","Data type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Target Address","Binary 2 octets","MAC address of target Node"]},{"entry":["Number of PAN identifiers","Bits 7-6","Defines the number of entries in the PAN identifiers field."]},{"entry":["Number of Hops Addresses","Bits 3-0","Number of Addresses in Hop Addresses list. Source"]},{"entry":[{},{},"routing is used when the Target device is more than one"]},{"entry":[{},{},"hop away. Therefore the Number of hops is at least one."]},{"entry":["PAN Identifiers","Array of Binary","List of Network identifiers. Bits 15-14 of the different"]},{"entry":[{},"2 octets","short addresses specified within this frame reference this"]},{"entry":[{},{},"list. Each short address is explicitly associated with one of"]},{"entry":[{},{},"the three specified PAN Identifiers, or none of them."]},{"entry":["Hop Addresses","Array of Binary","Short address of each Node responsible for routing this"]},{"entry":[{},"2 octets","message. Bits 15-14 define network membership of the"]},{"entry":[{},{},"Node as described by the PAN identifiers field."]},{"entry":["Entry Valid","Bit 0","Set if the entry contain valid information"]},{"entry":["Freshness","Bits 3 to 7","Decremented each time the table is parsed for another"]},{"entry":[{},{},"entry. Reset to 0x1F (31) each time the entry is used."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Finally, the SMIB table of parameters is set forth below.",{"@attributes":{"id":"p-0409","num":"0441"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"center"}},"thead":{"row":{"entry":"TABLE 71"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SM Information Base (SMIB) Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","Parameter name","Type\/units","Range","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","ADDRESS_TX_ORDER","0 or 1",{},"Order of transmission of the MAC and Mesh level"]},{"entry":[{},{},{},{},"addresses. The standard transmission order specified by"]},{"entry":[{},{},{},{},"IEEE 802.15.4 is Least Significant Octet First. 0 = Least"]},{"entry":[{},{},{},{},"Significant Octet First 1 = Most Significant Octet First"]},{"entry":["2","ASSOCIATION_EVAL_MIN_IMPROVEMENT","unsigned","1-255","To avoid nodes bouncing back and forth between gates at"]},{"entry":[{},{},"integer %",{},"each re-evaluation, a \u201chysteresis\u201d factor shall be"]},{"entry":[{},{},{},{},"implemented; association to a new gate (if already"]},{"entry":[{},{},{},{},"associated) shall only occur if the new network offers an"]},{"entry":[{},{},{},{},"association ratio that is equal or greater than [current"]},{"entry":[{},{},{},{},"association ratio \u00d7 (1 +"]},{"entry":[{},{},{},{},"ASSOCIATION_EVAL_MIN_IMPROVEMENT)]"]},{"entry":["3","ASSOCIATION_NEIGHBORS","Unsigned","1-255","Maximum number of neighbors used in Association Ratio"]},{"entry":[{},{},"Integer",{},"algorithm"]},{"entry":["4","ASSOCIATION_EVAL_PERIOD","Unsigned","1-255","The spec says that the node shall periodically evaluate if"]},{"entry":[{},{},"integer (8",{},"\u201cbetter\u201d networks are visible. A parameter shall dictate"]},{"entry":[{},{},"bits) 1 day",{},"how frequent this evaluation shall take place."]},{"entry":["5","ASSOCIATION_RESP_TIMEOUT","Integer 100 ms","100-25500 ms","Response timeout for the Association Request message"]},{"entry":["6","CHECKPOINT_MAX_ATTEMPTS","Unsigned","1-255","Maximum number of Checkpoint process initiated without"]},{"entry":[{},{},"Integer",{},"receiving a valid Keep Alive Response is allowed before"]},{"entry":[{},{},{},{},"initiating the Association process."]},{"entry":["7","CHECKPOINT_PERIOD","Unsigned","1-255 min","Period at which a Node initiate a mandatory"]},{"entry":[{},{},"Integer 1 min",{},"communication with the Coordinator. This communication"]},{"entry":[{},{},{},{},"always starts by the transmission of a Keep Alive Request"]},{"entry":[{},{},{},{},"and reception of a Keep Alive Response and is optionally"]},{"entry":[{},{},{},{},"follows by exchanges of application level messages."]},{"entry":["8","COORD_LOAD_WEIGHT","Unsigned","0-1","Weight for Coordinator load used in Association Ratio"]},{"entry":[{},{},"Integer",{},"algorithm"]},{"entry":[{},{},"0.01",{},{}]},{"entry":["9","COORD_RESPONSE_TIMEOUT","Unsigned","100 to","Timeout when waiting for a response from the Coordinator"]},{"entry":[{},{},"Integer 0.1 sec","25500 ms",{}]},{"entry":["10","DATA_REQUEST_TIMEOUT","Integer 10 ms","10-2500 ms","Timeout used by End Devices when waiting for a response"]},{"entry":[{},{},{},{},"to the End Device Data Request"]},{"entry":["11","END_DEVICE_INACTIVE_TO","Integer 1 sec","1-255 sec","Inactivity timeout used by Sleeping End Devices waiting"]},{"entry":[{},{},{},{},"for the initiation of a local communication"]},{"entry":["12","END_DEVICE_PERIOD","Integer 1 sec","1-255 sec","Notification period used by Sleeping End Devices when it"]},{"entry":[{},{},{},{},"is in local communication mode"]},{"entry":["13","END_DEVICE_WAIT","Integer 10 ms","10-2550 ms","Timeout used by Sleeping End Devices when waiting for"]},{"entry":[{},{},{},{},"an incoming frame after an End Device Node Present"]},{"entry":[{},{},{},{},"frame"]},{"entry":["14","HOP_NUM_WEIGHT","Unsigned","0-1","Weight for Number of hops to the Coordinator used in"]},{"entry":[{},{},"Integer",{},"Association Ratio algorithm"]},{"entry":[{},{},"0.01",{},{}]},{"entry":["15","LOCAL_COM_TO","Integer 100 ms","100-25500 ms","Inactivity timeout used by Sleeping End Devices in local"]},{"entry":[{},{},{},{},"communications mode"]},{"entry":["16","LQI_CLASS_WEIGHT","Unsigned","0-1","Weight for minimum LQI class used in Association Ratio"]},{"entry":[{},{},"Integer",{},"algorithm"]},{"entry":[{},{},"0.01",{},{}]},{"entry":["17","MAX_HOPS","Unsigned","15","Maximum number of hops allowed on the mesh network"]},{"entry":[{},{},"Integer",{},{}]},{"entry":["18","MAX_NUM_END_DEVICES","Unsigned","1-255","Maximum number of entries in the End Device Table"]},{"entry":[{},{},"Integer",{},{}]},{"entry":["19","MAX_NUM_END_NODES","Unsigned","1-255","Max number of entries in the End Device Table"]},{"entry":[{},{},"Integer",{},{}]},{"entry":["21","MAX_NUM_NEIGHBORS","Unsigned","1-255","Maximum number of neighbors recorded in the"]},{"entry":[{},{},"Integer",{},"Neighborhood Table"]},{"entry":["22","MAX_NUM_STATIC_ROUTES","Unsigned","1-255","Maximum number of entries in the Route Table"]},{"entry":[{},{},"Integer",{},{}]},{"entry":["23","MAX_NUM_TEMP_ROUTES","Unsigned","1-255","Maximum number of entries in the Temporary Route"]},{"entry":[{},{},"Integer",{},"Table"]},{"entry":["24","MAX_TREE_REPAIR","Unsigned","0-5","Maximum number of time a Router using tree routing"]},{"entry":[{},{},"Integer",{},"retry to transmit a frame to a different Parent Node or"]},{"entry":[{},{},{},{},"Sibling Node."]},{"entry":["25","MESSAGE_RESPONSE_TO","Unsigned","1-255 sec","Timeout for a request message to receive a response. Used"]},{"entry":[{},{},"Integer 1 sec",{},"to release the Network Security Header count stored until"]},{"entry":[{},{},{},{},"the response is received."]},{"entry":["26","NEIGHBOR_EX_RND_PERIOD","Integer","1-255 sec","A random delay is required before responding to a"]},{"entry":[{},{},{},{},"Neighbors Exchange message with the Immediate"]},{"entry":[{},{},{},{},"Broadcast Requested parameter set. This period represent"]},{"entry":[{},{},{},{},"the maximum value allowed for this random delay."]},{"entry":["27","NEIGHBOR_EXCHANGE_PERIOD","Integer min","1-255 min","Delay between each Neighbors Exchange"]},{"entry":["28","NEIGHBOR_INFO_RESP_TIME","Integer 10 ms","10-2550 ms","Period used to spray Neighbor Info Response messages"]},{"entry":["29","NUM_NEIGHBORS_WEIGHT","Unsigned","0-1","Weight for the number of neighbors used in Association"]},{"entry":[{},{},"Integer",{},"Ratio algorithm"]},{"entry":[{},{},"0.01",{},{}]},{"entry":["30","OVERLAPPING_DEPTH","0 or 1","0-1","Penetration of network trees within neighbor networks. 0 ="]},{"entry":[{},{},{},{},"Single hop 1 = Up to MAX_HOPS"]},{"entry":["31","PO_AGGREGATION_PERIOD","Integer 1 sec","1-255 sec","Initial period used just after a power outage or power"]},{"entry":[{},{},{},{},"restoration to allows aggregation of leaf Nodes event by"]},{"entry":[{},{},{},{},"their Parents and the reporting of the first hop Nodes."]},{"entry":["32","PO_RECOGNITION_PERIOD","Integer 0.1 sec","1-25.5 sec","Minimum of a power outage before sending a reel time"]},{"entry":[{},{},{},{},"power outage event report"]},{"entry":["33","PO_RETRY_RND_PERIOD","Integer 1 sec","1-255 sec","Period used stray communication of Nodes reporting a"]},{"entry":[{},{},{},{},"power outage during retries"]},{"entry":["34","PO_RND_PERIOD","Integer 10 sec","10-2550 sec","Period used stray communication of Nodes reporting a"]},{"entry":[{},{},{},{},"power outage during their first attempt"]},{"entry":["35","POWER_REPORT_WAIT","Integer 1 sec","1-255 sec","Time allows for a Node to send is power event using tree"]},{"entry":[{},{},{},{},"routing. After this period, the Node try to use mesh routing"]},{"entry":[{},{},{},{},"to send its event"]},{"entry":["36","POWER_RESTORATION_ASSOC","Integer min","1 to 255 min","Maximum time allows after a power restoration to"]},{"entry":[{},{},{},{},"successfully send a power restoration event to the"]},{"entry":[{},{},{},{},"Coordinator. Nodes unable to send it event within this"]},{"entry":[{},{},{},{},"timeout initiating an Association process."]},{"entry":["37","PR_RETRY_RND_PERIOD","Integer 1 sec","1-255 sec","Period used stray communication of Nodes reporting a"]},{"entry":[{},{},{},{},"power restoration event during retries"]},{"entry":["38","PR_RND_PERIOD","Integer 10 sec","10-2550 sec","Period used stray communication of Nodes reporting a"]},{"entry":[{},{},{},{},"power restoration event during their first attempt"]},{"entry":["39","FRR_TEST_RETRY","Integer","1 to 12","Number of time a Frame Reception Rate Test Init, Frame"]},{"entry":[{},{},{},{},"Reception Rate Test End and Frame Reception Rate Test"]},{"entry":[{},{},{},{},"Result are retransmitted in the case of a MAC layer"]},{"entry":[{},{},{},{},"transmission failure."]},{"entry":["40","RESP_SLEEP_PERIOD","Integer 1 sec","1-255 sec","End device sleep period when it is expecting a response."]},{"entry":["41","RESTORATION_TIMEOUT","Integer min","1-255 min","Maximum time allowed for reporting a power restoration"]},{"entry":[{},{},{},{},"notification event and receives an acknowledgment."]},{"entry":["42","ROUTE_LOST_ATTEMPTS","Integer","1-255","The number of consecutive times an End Device tries to"]},{"entry":[{},{},{},{},"send a frame through its Parent before changing Parent."]},{"entry":["43","RREQ_RX_TIME","Integer 1 ms","1-255 ms","The time the target of a Route Request waits to collect"]},{"entry":[{},{},{},{},"route data from other paths before responding."]},{"entry":["44","RREQ_TO","Integer 10 ms","10-2550 ms","Timeout when waiting for a Route Request after"]},{"entry":[{},{},{},{},"broadcasting a Route Request"]},{"entry":["45","SERVICE_PERIOD","Unsigned","0-255 sec","Period used to limits the rate at which frames can be sent"]},{"entry":[{},{},"Integer 1 sec",{},"using the Forwarding Service Messages process."]},{"entry":["46","SERVICE_TO","Unsigned","0-255 sec","Timeout that determines how long the Router and the"]},{"entry":[{},{},"Integer 1 sec",{},"Coordinator keep an inactive forwarding processes open"]},{"entry":["47","SLEEP_CHECK_PERIOD","Unsigned","1-255 sec","Period at which Sleeping End Devices wakeup to check if"]},{"entry":[{},{},"Integer 1 sec",{},"there is a frame buffered in its Parent"]},{"entry":["48","TEMP_ROUTE_TO","Integer 10 sec","10-2550 sec","The time a temporary route is retained"]},{"entry":["49","MAX_ASSOCIATIONS","Unsigned","1-15","The number of Coordinators a device can associate with."]},{"entry":[{},{},"Integer","Default 3","Among other things this set the number of Mesh Key"]},{"entry":[{},{},{},{},"entries needed for storage."]},{"entry":["50","MAX_MF_WAIT_PERIOD","Integer 1 ms","1-255 ms","Timeout receiving a buffered message following an End"]},{"entry":[{},{},{},"default","Device Data Request ACK with the Frame Pending bit set."]},{"entry":[{},{},{},"20 ms",{}]},{"entry":["51","PING_TO","Integer 1 s","1-255 s","Ping time out from Ping request to Ping response."]},{"entry":["52","LQI_HIGH_FACTOR","Float","0.00-1.00","The factor used to update the \u201cLQI rx\u201d number when LQI >"]},{"entry":[{},{},{},{},"LQI rx in Table 2"]},{"entry":["53","LQI_LOW_FACTOR","Float","0.00-1.00","The factor used to update the \u201cLQI rx\u201d number when LQI"]},{"entry":[{},{},{},{},"rx > LQI in Table 2"]},{"entry":["54","LQI_MISSED_EX_FACTOR","Float","0.00-1.00","The factor used to update the \u201cLQI rx\u201d number in Table 2"]},{"entry":[{},{},{},{},"when the Neighbor Exchange message is missed twice."]},{"entry":["55","MAX_NUM_SOURCE_ROUTES","Unsigned","1-255","Maximum number of entries in the Source Route Table"]},{"entry":[{},{},"Integer",{},{}]},{"entry":["56","LQI_CLASS1_HIGH_THRESHOLD","Unsigned","0-255","LQI threshold for class 1. Node with LQI between 0 and"]},{"entry":[{},{},"Integer",{},"LQI_CLASS1_HIGH_THRESHOLD are categorized in"]},{"entry":[{},{},{},{},"class 1."]},{"entry":["57","LQI_CLASS2_HIGH_THRESHOLD","Unsigned","0-255","LQI threshold for class 2. Node with LQI between"]},{"entry":[{},{},"Integer",{},"LQI_CLASS1_HIGH_THRESHOLD + 1 and"]},{"entry":[{},{},{},{},"LQI_CLASS1_HIGH_THRESHOLD] are categorized in"]},{"entry":[{},{},{},{},"class 2."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The following figures are intended to be read in conjunction with the specification set forth herein.",{"@attributes":{"id":"p-0020","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0030"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0032"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0033"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0034"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0035"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0036"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0037"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0038"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0039"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0032","num":"0040"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0041"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0042"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0043"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0036","num":"0044"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0037","num":"0045"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0038","num":"0046"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0039","num":"0047"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0040","num":"0048"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0041","num":"0049"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0042","num":"0050"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0043","num":"0051"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0044","num":"0052"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0045","num":"0053"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0046","num":"0054"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0047","num":"0055"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0048","num":"0056"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0049","num":"0057"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0050","num":"0058"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0051","num":"0059"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0052","num":"0060"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0053","num":"0061"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0054","num":"0062"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0055","num":"0063"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0056","num":"0064"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0057","num":"0065"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0058","num":"0066"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0059","num":"0067"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0060","num":"0068"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0061","num":"0069"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0062","num":"0070"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0063","num":"0071"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0064","num":"0072"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0065","num":"0073"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0066","num":"0074"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0067","num":"0075"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0068","num":"0076"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0069","num":"0077"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0070","num":"0078"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0071","num":"0079"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0072","num":"0080"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0073","num":"0081"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0074","num":"0082"},"figref":"FIG. 55"},{"@attributes":{"id":"p-0075","num":"0083"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0076","num":"0084"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0077","num":"0085"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0078","num":"0086"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0079","num":"0087"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0080","num":"0088"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0081","num":"0089"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0082","num":"0090"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0083","num":"0091"},"figref":"FIG. 64"},{"@attributes":{"id":"p-0084","num":"0092"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0085","num":"0093"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0086","num":"0094"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0087","num":"0095"},"figref":"FIG. 68"},{"@attributes":{"id":"p-0088","num":"0096"},"figref":"FIG. 69"},{"@attributes":{"id":"p-0089","num":"0097"},"figref":"FIG. 70"},{"@attributes":{"id":"p-0090","num":"0098"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0091","num":"0099"},"figref":"FIG. 72"},{"@attributes":{"id":"p-0092","num":"0100"},"figref":"FIG. 73"},{"@attributes":{"id":"p-0093","num":"0101"},"figref":"FIG. 74"},{"@attributes":{"id":"p-0094","num":"0102"},"figref":"FIG. 75"},{"@attributes":{"id":"p-0095","num":"0103"},"figref":"FIG. 76"},{"@attributes":{"id":"p-0096","num":"0104"},"figref":"FIG. 77"},{"@attributes":{"id":"p-0097","num":"0105"},"figref":"FIG. 78"},{"@attributes":{"id":"p-0098","num":"0106"},"figref":"FIG. 79"},{"@attributes":{"id":"p-0099","num":"0107"},"figref":"FIG. 80"},{"@attributes":{"id":"p-0100","num":"0108"},"figref":"FIG. 81"},{"@attributes":{"id":"p-0101","num":"0109"},"figref":"FIG. 82"},{"@attributes":{"id":"p-0102","num":"0110"},"figref":"FIG. 83"},{"@attributes":{"id":"p-0103","num":"0111"},"figref":"FIG. 84"},{"@attributes":{"id":"p-0104","num":"0112"},"figref":"FIG. 85"},{"@attributes":{"id":"p-0105","num":"0113"},"figref":"FIG. 86"},{"@attributes":{"id":"p-0106","num":"0114"},"figref":"FIG. 87"},{"@attributes":{"id":"p-0107","num":"0115"},"figref":"FIG. 88"},{"@attributes":{"id":"p-0108","num":"0116"},"figref":"FIG. 89"},{"@attributes":{"id":"p-0109","num":"0117"},"figref":"FIG. 90"},{"@attributes":{"id":"p-0110","num":"0118"},"figref":"FIG. 91"},{"@attributes":{"id":"p-0111","num":"0119"},"figref":"FIG. 92"},{"@attributes":{"id":"p-0112","num":"0120"},"figref":"FIG. 93"},{"@attributes":{"id":"p-0113","num":"0121"},"figref":"FIG. 94"},{"@attributes":{"id":"p-0114","num":"0122"},"figref":"FIG. 95"}]},"DETDESC":[{},{}]}
