---
title: Method and apparatus for constructing representations of objects and entities
abstract: A method of constructing a representation of an object having at least one property includes identifying at least one property group associated with the object which has been chosen to represent the object. At least one property of the object belongs to each property group identified as being associated with the object. The method further includes identifying any other object that the object references within a property of an identified property group. An object representation engine retrieves data corresponding to each of the properties belonging to the at least one property group. The engine then represents the object using the retrieved data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225221&OS=08225221&RS=08225221
owner: Microsoft Corporation
number: 08225221
owner_city: Redmond
owner_country: US
publication_date: 20040412
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention is related to object oriented programming. More particularly, the present invention is related to methods and apparatus for constructing a representation of an object.","Object oriented programming languages are in wide use by programmers in a range of applications. In object oriented programming languages, objects have a number of properties or property fields. Some objects tend to have a large number of these properties. Some of the properties of an object can have a type that in itself is an object. Therefore, through a reference point to another object, these properties point to even more properties.","When building a user interface (UI), such as a form, table, spreadsheet, or other visual representation based on the properties of an object and their references, it can be quite cumbersome to have to specify each individual property to be included in the representation. This is especially true if the requested property is on a referenced object. The problem becomes even more complicated if the object is derived from another object.","For a typical application or system, it is common for there to be a need to generate hundreds, if not thousands, of different UIs (for example as forms) or other representations for the large number of different objects and\/or combinations of properties which are to be visually represented. Generating the large number of visual representations can thus be a very labor intensive process. Further, modification of these representations is also cumbersome. If modification to existing representations is required, for example to reflect additional properties added to objects, much of the effort put into creating them in the first place must be repeated. As a result, for a system which is programmed and installed for an end user, it is often times very difficult for the end user to customize the UIs, forms or other representations at a later time if desired.","A method of constructing a representation of an object having at least one property includes identifying at least one property group associated with the object which has been chosen to represent the object. At least one property of the object belongs to each property group identified as being associated with the object. Alternatively stated, the property groups associated with the object can be described as being assigned to at least one of the properties of the object. The method further includes identifying any other object that the object references within a property of an identified property group. An object representation engine retrieves data corresponding to each of the properties belonging to the at least one property group. The engine then represents the object using the retrieved data. The step of representing the object frequently includes visually representing the object by displaying the retrieved data.","In some embodiments, the step of displaying the retrieved data further comprises displaying names of properties in the at least one property group adjacent values of those properties. A name of each property group can be displayed adjacent the names of the properties in that property group and adjacent the values of those properties.","In some embodiments of the invention, at least one object inheritance hierarchy exist between the object and other objects. Each property group is unique to a particular object inheritance hierarchy. In some embodiments, the object is a specialization of a second object. The object can then inherit the property groups associated with the second object.","In some embodiments, each property group is assigned to at least one of the properties of the object and to one or more properties of only one other object. The step of retrieving data corresponding to each of the properties to which the property group is assigned can then further comprise retrieving the data corresponding to properties of the first object and to properties of the only one other object associated with the property group.","In some embodiments, the step of identifying the at least one property group associated with the object further comprises identifying a default property group associated with the object.","Other features and benefits that characterize embodiments of the present invention will be apparent upon reading the following detailed description and review of the associated drawings.","As discussed above, in object oriented programming, objects and entities contain properties, and through hierarchies and other relationships point to properties of other objects. An entity can be described as a persistable object. In other word, an entity is an object which can be stored in a database. As used herein, the term \u201cobject\u201d is intended to include \u201centities\u201d. General concepts of object oriented programming, for example the concepts of inheritances, associations, and compositions, are known in the art. For example, see \u201cUML Distilled: A Brief Guide to the Standard Object Modeling Language,\u201d by K. Scott and M. Fowler (Addison-Wesley 1999).","The present invention is based, in part, upon the recognition that properties of objects connected using associations or inheritance allows a user interface (UI), form, or other representation of the object(s) to be more easily specified. The methods and apparatus of the present invention, which utilize grouping of properties, facilitate the fast construction of UIs and other representations when the objects are complex in terms of inheritance, customization and associations. In the prior art, it is common for every UI, form, web-page or other representation of data from objects to have to be revisited every time an extension is made to the objects. Using the methods and apparatus of the present invention, extensions can be made to objects without the need for the labor intensive task of updating these UIs, forms, web-pages or other representations of the objects.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210"]},"Memory  is implemented as non-volatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is preferably allocated as addressable memory for program execution, while another portion of memory  is preferably used for storage, such as to simulate storage on a disk drive.","Memory  includes an operating system , application programs  as well as an object store . During operation, operating system  is preferably executed by processor  from memory . Operating system , in one preferred embodiment, is a WINDOWS\u00ae CE brand operating system commercially available from Microsoft Corporation. Operating system  is preferably designed for mobile devices, and implements database features that can be utilized by applications  through a set of exposed application programming interfaces and methods. The objects in object store  are maintained by applications  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","Communication interface  represents numerous devices and technologies that allow mobile device  to send and receive information. The devices include wired and wireless modems, satellite receivers and broadcast tuners to name a few. Mobile device  can also be directly connected to a computer to exchange data therewith. In such cases, communication interface  can be an infrared transceiver or a serial or parallel communication connection, all of which are capable of transmitting streaming information.","Input\/output components  include a variety of input devices such as a touch-sensitive screen, buttons, rollers, and a microphone as well as a variety of output devices including an audio generator, a vibrating device, and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition, other input\/output devices may be attached to or found with mobile device .","Referring now to , shown is a block diagram illustrating an object representation system  in accordance with embodiments of the present invention. Object representation system  includes an object database  in which data for populating object instances is stored. System  also includes an object definition database  which contains data or information which defines the objects, property types, etc. Object representation engine  generates instances of objects by looking up object representation data from database , and then populating the object instances with data from database .","The objects defined using databases  and  have property groups associated with the properties of the objects. As noted above, the association of a property group with the properties of objects can be described in terms of the properties belonging to the property group, or in terms of the property group being assigned to the properties. Both descriptions are accurate. Using these properties groups, object representation engine  identifies which properties of one or more objects are to be represented, and retrieves the data corresponding to those properties. Object representation engine  then generates an object representation . Object representation  can be, for example, a visual representation of one or more objects on a display device, on printed pages, etc. Examples of visual representations include UIs, forms, tables, spreadsheets, web pages, to name just a few. Non-visual representations based upon the property groups of the present invention are also possible. The manner in which property groups are associated with the objects, and the manner in which object representation engine  uses the property groups to generate an object representation, are described below in detail with reference to .","Given a set of objects connected using associations, inheritance, compositions or customizations, each object typically has at least several properties that either represent the simple type (e.g., int\/string) or references to other objects. For each object, a group name can be assigned to each property. The group name should be unique per object inheritance hierarchy. For each object, a group can be marked as the default group indicating that this set of properties is the preferred representation of the object. A user interface can then be constructed by specifying which groups represent the object. If a group contains a property that is a reference to another object, then this object is represented as the default group of that other object.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 4 and 5","FIG. 4"],"b":["410","420","430","420","430","410","412","414","420","430","410","410","420","430"]},"SalesDocument object  includes five properties or property fields shown at  in . In this example, the first and second properties of SalesDocument object  include an \u201cID\u201d property and a \u201cType\u201d property. The values of these properties are represented in  based upon the type of data included in these values. For example, the ID property is represented as an integer (int) value, while the Type property is represented as a string value. Examples of the string values which fill the Type property field include, in this example, \u201cPackingSlip\u201d and \u201cInvoice.\u201d Other examples of the Type property or property field could include \u201cQuotation,\u201d \u201cConfirmation,\u201d \u201cReceipt,\u201d etc.","The third property of the SalesDocument object , the Customer property, is actually a pointer to another object. The Customer object , to which this property of SalesDocument object  points, is shown in . The first three properties of the SalesDocument object  have been assigned the property group \u201cMain\u201d . The Main property group  is, in an example embodiment, the default property group. Any of a wide variety of different methods can be used to designate which property group is the default property group. As will be discussed below in greater detail, by assigning the first three properties of the SalesDocument object  to the Main property group , the property value information associated with these properties can conveniently be displayed together by including a pointer to the Main property group for generating a visual representation of the object .","The final two properties or fields of the SalesDocument object are \u201cCreatedDate\u201d and \u201cLanguage,\u201d both having string values. Since these two fields are both administrative in nature, one might want to see them together on a form or other visual representation. To facilitate this, these two properties are each included in a second property group, the \u201cAdministration\u201d property group , shown in .","In the example illustrated in , there are two specializations of the SalesDocument object , the PackingSlip object  and the Invoice object . The PackingSlip object  includes a single property, represented at reference number , entitled \u201cWarehouse\u201d having as a value a pointer to another object. The Warehouse object pointed to in the property field of the PackingSlip object  is not shown, but would be used to designate which of multiple warehouses an item was sent from or should be delivered to. In this example, the Warehouse property  is included in the Administration property group .","For the SalesDocument specialization Invoice object , there exists two properties or property fields, represented at reference number , the \u201cProfile\u201d property and the \u201cNumberSequence\u201d property. Both of the properties of Invoice object  are pointers to other objects (not shown). Each of these properties is included in a third property group, the \u201cBooking\u201d property group .","Referring again to , the \u201cCustomer\u201d object  includes three properties shown at reference number . The first two properties, a Customer \u201cID\u201d having an integer value and a Customer \u201cName\u201d having a string value, are included in the Main or default property group . The third property of the Customer object  is entitled \u201cAddress\u201d, which is a pointer to another object (not shown). This third property of Customer object  is included in a property group  entitled \u201cAddress.\u201d","Using the property group concepts of the present invention, the UI or other representation of an object is defined or created simply by specifying which property groups should be on the form or representation. The object representation engine  shown in  then looks up the contents of those property groups in database , including properties from multiple objects to which the property groups are assigned, and displays those fields. In some exemplary embodiments, the properties of particular property groups are displayed together on the visual representation of the object. The names of properties in the property group are matched to a control on the representation, while the values of those properties are mapped to a corresponding value field.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 4"],"b":["500","410","500","410","460","470","310","305","500","310","410","450","460"]},"As shown in , in UI or form , the name of Main property group  is mapped to a control  which visually represents the name of this property group. Likewise, the ID, Type and Customer properties from SalesDocument object  which are in the Main property group  are also mapped to controls ,  and , respectively, to visually display the names of these properties on UI . The values of the first two properties in the Main property group  of SalesDocument object  are mapped into fields  and  which visually correspond to controls  and . Thus, the SalesDocument is illustrated as having an ID number \u201c1548\u201d, and a type \u201cInvoice\u201d. Since the Customer property of the SalesDocument object  in the Main property group  is a pointer to the Customer object  shown in , the object representation engine  maps the name \u201cCustomer\u201d of this property to control , and the names of the corresponding properties \u201cID\u201d and \u201cName\u201d from object  to controls  and . The values of those properties from Customer object  are then mapped to value fields  and , respectfully. Thus, the Customer object referred to in the SalesDocument object  is identified by a Customer ID of \u201c10009\u201d and a Customer Name of \u201cAlfred Futterkiste\u201d. In some embodiments, the controls (, , , ,  and ) and the corresponding mapped values (, ,  and ) in UI  corresponding to the Main property group  are visually grouped using a border or other visual delineator .","Similarly, since the Administration property group  was designated as being part of the representation of the SalesDocument object , it's property and property group names are mapped to controls ,  and  in UI . The corresponding values of those properties are mapped to value fields  and . Thus, it can be seen that the SalesDocument object  was created on Aug. 10, 2003, and that the language is United States English. Again, if desired, a boarder or other delineator  can be used to visually group the property names and values of the Administration property group . Note that, in this embodiment, since neither of the \u201cCreatedDate\u201d or \u201cLanguage\u201d properties from SalesDocument  include pointers to another object, no further properties were retrieved for inclusion in the Administration portion of UI .","In some embodiments of the invention, when using inheritance, the property groups are inherited as well. However, more properties can be added to the same property group. For example, referring to , to define a UI, form or visual representation  for the PackingSlip object , the properties Main  and Administration  can again be specified. In the alternative, in other embodiments, the property groups used to define the PackingSlip object  can simply be inherited from SalesDocument object , since these two property groups have previously been designated for use in visually representing the SalesDocument object. In these embodiments, it would only be necessary to specify any additional property groups which are to be displayed as part of the visual representation of the PackingSlip object . In the example illustrated in , there are no additional property groups which are distinct from those used to represent SalesDocument object .","The UI  used to visually represent PackingSlip object  is very similar to UI  used to visually represent SalesDocument object . One difference can be seen in value field  corresponding to the Type property mapped to control . In this instance, the value of the string of this property has changed from \u201cInvoice\u201d to \u201cPackingSlip\u201d. Another difference between UI  and UI  relates to additional properties of the Administration property group . Since the PackingSlip object  includes a Warehouse property (shown as  in ) in the Administration property group , object representation engine  retrieves this data from database  as well. Thus, the Administration property group information displayed in UI  includes the name \u201cWarehouse\u201d of this property mapped to control . Since the Warehouse property in the PackingSlip object is a pointer to another object, the value \u201cNew York\u201d mapped to property field  is retrieved from this other object in database .","As noted above, defining which property groups are to be visually represented in a UI for a particular object can be done in a number of ways. For example, each of the property groups can be specifically listed for object representation. Alternatively, the objects can inherit the property groups used to visually represent that object's generalization. Further, property groups can also be listed in addition to those which are inherited. For example, for the Invoice property group  it might be further specified that the \u201cBooking\u201d property group  is also to be used in the visual representation, in addition to those property groups inherited from the SalesDocument object .","The use of property groups in general, and in particular default property groups which pull in properties from associations and compositions as well, provides a greatly improved manner of generating visual and other representations of an object or entity. For each particular different type of form or visual representation to be generated, which can number in the hundreds or even thousands, all that is necessary is that the property groups which are to represent a particular object be specified. To change a particular form or visual representation to include other properties of other property groups, it would only be necessary to change the property groups which are specified for use in representing the object. Further, if properties of an object are changed, added or deleted, using the concepts of the present invention it is not necessary to revise each of a large number of forms or visual representations which have been previously created. Instead, for the object which has a change, addition or deletion of properties, the property groups must be redefined. Thus, the present invention provides both a method and apparatus for facilitating the fast construction of UIs when objects are complex in terms of inheritance, customization, and association, as well as a method and apparatus for revising object properties without the need to revisit every form, web page, UI or other visual representation which presents data from the objects in question.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 8","FIG. 3","FIG. 8","FIG. 8","FIGS. 3-7"],"b":["800","305","306","805","306","305","810","815"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 9","FIG. 9","FIGS. 3-7"],"b":["900","310","905"]},"As shown at , the method further includes identifying any other object that the particular object references within a property of an identified property group. Then, as shown at , the method includes retrieving data corresponding to each of the properties belonging to the one or more identified property groups. The data can be retrieved, for example, from database  shown in . Finally, as shown at  in , the method includes representing the object using the retrieved data. The representation of the object can be a visual representation in which the retrieved data is displayed next to names of the properties, and if desired, names of the property groups to which the properties belong as is illustrated in .","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
