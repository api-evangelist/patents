---
title: Page rendering for dynamic web pages
abstract: In one embodiment, in response to the detection of an event initiated in connection with a first structured document rendered by a first client application executing on a host, the event related to a target structured document, a method includes receiving, by executable code segment embedded in with the first structured document and executing within the context of the first client application, a first request for resources, related to the target structured document, generated by the first client application; formulating and transmitting, by the executable code segment, a second request related to the target structured document to a remote server; accessing, by the executable code segment, one or more resources related to the target structured document; and rendering, by the executable code segment, content rendered by the first client application based at least in part on the one or more accessed resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868637&OS=08868637&RS=08868637
owner: Facebook, Inc.
number: 08868637
owner_city: Menlo Park
owner_country: US
publication_date: 20090902
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","BRIEF SUMMARY OF PARTICULAR EMBODIMENTS","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["The present disclosure relates generally to rendering structured documents (such as web pages) and, more particularly, to efficiently rendering structured documents using asynchronous techniques.","Conventionally, when a user viewing web content at a remote client desires to navigate to a new web page from the currently rendered web page (e.g., by clicking on a link within the currently rendered web page, by clicking the back or forward button of a browser application, or by entering the URL of the target web page), the browser responsible for rendering the web content formulates a request for the new web page and transmits the request to a server hosting the new (or \u201ctarget\u201d) web page. Thus, conventionally, each time a user requests to navigate to a new web page, the browser transmits a request to the server for the full new web page, unloads the currently rendered page, and renders the new web page received from the server in its entirety. Conventionally, this full page loading and unloading scheme would hold true for each subsequent page the user requests. Certain resources embedded in the underlying web page may be located in a browser cache and retrieved locally. Hence, even if the new web page and the currently rendered web page include or share a substantial amount of the same content or other resources, the browser would still send a request for the entire target web page including the redundant content or other resources previously transmitted for the currently rendered web page and fully render the page, including accessing and initializing one or more code modules (such as JavaScript) executing within the context of the page.","Particular embodiments provide techniques for rendering structured documents (e.g., web pages) by eliminating redundant requests for resources that are already present client-side (e.g., stored in a cache) before sending the requests for the structured documents to a web server. In particular embodiments, a client application (e.g., a browser) may render a first structured document, and then detect initiation of an event (e.g., a click on a hyperlink or clicking on the \u201cBack\u201d button in the browser) in connection with the first structured document\u2014this event may be related to a target structured document. An executable code segment (e.g., a script) may be embedded within the first structured document and executing within the context of the client application. The executable code segment may receive a first request for resources that was generated by the client application in relation to the target structured document. In particular embodiments, the executable code segment may re-formulate the first request into a second request related to the target structured document, and then send the second request to a web server. The second request may be formulated to reduce transmission of redundant data\u2014one technique for accomplishing this is by requesting only those resources not currently stored on the host. The executable code segment then retrieves new resources related to the target structured document and may recycle content previously rendered by the first client application for the first structured document.","Particular embodiments relate to efficiently rendering web pages using asynchronous techniques. More specifically, particular embodiments relate to systems, methods, and logic for rendering a target web page that reduces or eliminates the browser overhead associated with reloading content (whether accessed remotely from a server and\/or locally from a cache) and re-executing scripts that were downloaded in connection with one or more previously rendered web pages. Particular embodiments utilize Asynchronous JavaScript and XML (AJAX) techniques to request only the new content and resources that are necessary to render the target web page without causing a browser or underlying client application to unnecessarily naively re-render the entire web page. Particular embodiments further simulate a page transition typically experienced when transitioning from one page to the next. Particular embodiments relate to a downloadable process that executes within the context of a browser and that intercepts requests from the browser for a target web page, formulates and transmits its own request(s), accesses one or more resources corresponding to the target web page, and re-renders or resets content rendered for a previous page by a browser based on or with the one or more resources corresponding to the target web page. Particular embodiments reduce or eliminate the transmitting of redundant data shared between a currently rendered web page and a target web page, thereby improving efficiency and network performance. Particular embodiments reduce or eliminate the processing overhead associated with re-initializing code modules, such as JavaScript, that execute within the context of the target web page. Particular embodiments further relate to a process as just described that is transparent to users (e.g., viewers) of the rendered web pages as well as to developers developing applications for web pages enabling the developers to generate (e.g., code) applications in traditional manners. In various example embodiments, one or more described web pages may be associated with a social networking system or social networking service executing within a web-site. However, embodiments of the invention have application to the retrieval and rendering of structured documents hosted by any type of network addressable resource or web-site. As used herein, a \u201cuser\u201d may be an individual, a group, or an entity (such as a business or third party application).","Particular embodiments of the invention may operate in a wide area network environment, such as the Internet, including multiple network addressable systems.  illustrates an example network environment, in which various example embodiments may operate. Network cloud  generally represents one or more interconnected networks, over which the systems and hosts described herein can communicate. Network cloud  may include packet-based wide area networks (such as the Internet), private networks, wireless networks, satellite networks, cellular networks, paging networks, and the like. As  illustrates, particular embodiments may operate in a network environment comprising social networking system  and one or more client devices . Client devices  are operably connected to the network environment via a network service provider, a wireless carrier, or any other suitable means.","The social networking system  comprises computing systems that allow users to communicate or otherwise interact with each other and access content, such as user profiles, as described herein. Social networking system  is a network addressable system that, in various example embodiments, comprises one or more physical servers  and data store . The one or more physical servers  are operably connected to computer network  via, by way of example, a set of routers and\/or networking switches . In an example embodiment, the functionality hosted by the one or more physical servers  may include web or HTTP servers, FTP servers, as well as, without limitation, webpage and applications implemented using Common Gateway Interface script (CGI), PHP Hyper-text Preprocessor (PHP), Active Server Pages (ASP), Hyper Text Markup Language (HTML), Extensible Markup Language (XML), Java, JavaScript, AJAX, and the like.","Physical servers  may host functionality directed to the operations of a social networking system. By way of example, social networking system  may host a website that allows one or more users, at one or more client devices , to view and post information, as well as communicate with one another via the website. Hereinafter servers  may be referred to as server , although server  may include numerous servers hosting, for example, social networking system , as well as other content distribution servers. Data store  may store content and data relating to, and enabling, operation of the social networking system as digital data objects. A data object, in particular implementations, is an item of digital information typically stored or embodied in a data file, database or record. Content objects may take many forms, including: text (e.g., ASCII, SGML, HTML), images (e.g., jpeg, tif and gif), graphics (vector-based or bitmap), audio, video (e.g., mpeg), or other multimedia, and combinations thereof. Content object data may also include executable code objects (e.g., games executable within a browser window or frame), podcasts, etc. Logically, data store  corresponds to one or more of a variety of separate and integrated databases, such as relational databases and object-oriented databases, that maintain information as an integrated collection of logically related records or files stored on one or more physical systems. Structurally, data store  may generally include one or more of a large class of data storage and management systems. In particular embodiments, data store  may be implemented by any suitable physical system(s) including components, such as one or more database servers, mass storage media, media library systems, storage area networks, data storage clouds, and the like. In one example embodiment, data store  includes one or more servers, databases (e.g., MySQL), and\/or data warehouses (e.g., Hadoop\/Hive).","Data store  may include data associated with different social networking system  users and\/or client devices . In particular embodiments, the social networking system  maintains a user profile for each user of the system . User profiles include data that describe the users of a social network, which may include, for example, proper names (first, middle and last of a person, a tradename and\/or company name of a business entity, etc.) biographic, demographic, and other types of descriptive information, such as work experience, educational history, hobbies or preferences, geographic location, and additional descriptive data. By way of example, user profiles may include a user's birthday, relationship status, city of residence, and the like. The system  may further store data describing one or more relationships between different users. The relationship information may indicate users who have similar or common work experience, group memberships, hobbies, or educational history. A user profile may also include privacy settings governing access to the user's information.","Client device  is generally a computer or computing device including functionality for communicating (e.g., remotely) over a computer network. Client device  may be a desktop computer, laptop computer, personal digital assistant (PDA), in- or out-of-car navigation system, smart phone or other cellular or mobile phone, or mobile gaming device, among other suitable computing devices. Client device  may execute one or more client applications, such as a web browser (e.g., Microsoft Windows Internet Explorer, Mozilla Firefox, Apple Safari, Google Chrome, and Opera, etc.), to access and view content over a computer network. In particular implementations, the client applications allow a user of client device  to enter addresses of specific network resources to re retrieved, such as resources hosted by social networking system . These addresses can be Uniform Resource Locators (URLs). In addition, once a page or other resource has been retrieved, the client applications may provide access to other pages or records when the user \u201cclicks\u201d on hyperlinks to other resources. By way of example, such hyperlinks may be located within the web pages and provide an automated way for the user to enter the URL of another page and to retrieve that page.","Generally, a web application is an application that may be accessed via a web browser over a network, or a computer software application that is coded in a web browser-supported language and reliant on a web browser to render the application executable. Web applications have gained popularity largely as a result of the ubiquity of web browsers, the convenience of using a web browser launched at a remote computing device as a client (sometimes referred to as a thin client), and the corresponding ability to update and maintain web applications without distributing and installing software on remote clients. Often, to implement a web application, the web application requires access to one or more resources provided at a backend server of an associated website. Additionally, web applications often require access to additional resources associated with other applications.","A resource or page, which may itself include multiple resources, may include data records, such as content plain textual information, or more complex digitally encoded multimedia content, such as software programs or other code objects, graphics, images, audio signals, videos, and so forth. One prevalent markup language for creating web pages is the Hypertext Markup Language (HTML). Other common web browser-supported languages and technologies include the Extensible Markup Language (XML), the Extensible Hypertext Markup Language (XHTML), JavaScript, Cascading Style Sheet (CSS), and, frequently, Java. By way of example, HTML enables a page developer to create a structured document by denoting structural semantics for text and links, as well as images, web applications and other objects that can be embedded within the page. Generally, a web page may be delivered to a client as a static document, however, through the use of web elements embedded in the page, an interactive experience may be achieved with the page or a sequence of pages. During a user session at the client, the web browser interprets and displays the pages and associated resources received or retrieved from the website hosting the page, as well as, potentially, resources from other websites.","JavaScript is an example of a scripting language that enables various web applications to access resources within other applications for use on the client side of a user session to enable an interactive or dynamic user session when accessing a website. AJAX (shorthand for Asynchronous JavaScript and XML) refers to a group of interrelated techniques used on the client side of a user session to enable more interactive and rich internet applications. Utilizing JavaScript or AJAX, a web application can transmit requests for resources to the backend servers (e.g., servers ) of the website or other resource providers external to the website in order to retrieve the resources asynchronously in the background operations of the client  without interfering with the display and behavior of the currently-rendered page. More particularly, when using AJAX, resources are usually retrieved by transmitting an XMLHttpRequest (XHR) object to the resource provider. An XHR is a document object model (DOM) application programming interface (API) that can be used with a web browser scripting language (e.g., JavaScript) to send, for example, an HTTP or HTTPS request for a resource directly to a web server (e.g., server ) and load the resource retrieved from the server in response to the request directly back into the scripting language code. Once the resource is within the code, the resource may then be available as, by way of example, an HTML or XML document or plain text. In this manner, the retrieved resource may be used to manipulate the currently active document rendered by the web browser without requiring the client to load a new webpage document. In some example embodiments, if the resource is retrieved as plain text, the plain text may be formatted in JavaScript Object Notation (JSON) by the server and evaluated within JavaScript to create an object of data for use on the current DOM.","Social networking system  may include a multitude of features with which users at remote clients  may interact during user sessions. In particular embodiments, these features may be implemented as web applications and may utilize JavaScript and Cascading Style Sheet (CSS) resources requested from servers  as well as other external servers. By way of example, the social networking system hosted by Facebook\u00ae, Inc. of Palo Alto, Calif., includes or supports such features as the \u201cwall,\u201d a space on every user's profile page that allows friends to post messages for the user to see; \u201cpokes,\u201d which allows users to send a virtual \u201cpoke\u201d to each other (a notification that tells a user that they have been poked); \u201cphotos,\u201d where users can upload albums and photos; \u201cstatus,\u201d which allows users to inform their friends of their whereabouts and actions; \u201cstreams,\u201d which may appear in multiple locations on the site, including on every user's homepage, which include information about the activities of the user's connections; \u201cnotes,\u201d a blogging feature that allows tags and embeddable images as well as blogs imported from other blogging websites and services; as well as a large number of third party applications for which the website serves as a platform. In particular, a user's wall is visible to anyone who is able to see that user's profile, depending on privacy settings, and supports the posting of attachments as well as textual content.","In particular embodiments, the social networking system  maintains in data store  a number of objects for the different kinds of items with which a user may interact while accessing system . In one example embodiment, these objects include user profiles, application objects, and message objects (such as for wall posts, emails and other messages). In one embodiment, an object is stored by the system  for each instance of its associated item. These objects and the actions discussed herein are provided for illustration purposes only, and it can be appreciated that an unlimited number of variations and features can be provided on a social networking system .","An example page rendering application or process  that facilitates the downloading and rendering of a target web page will now be described with reference to the block diagram of  and the flowcharts of . In particular embodiments, page rendering process  may be considered a client application that executes within the context of a web browser  executing at a client . In one implementation, page rendering process  is implemented as one or more executable code segments or script modules (such as JavaScript modules) that are embedded in an underlying web page loaded into web browser . By way of example, when a user desires to view a web page of, for example, system  hosted by server , the user indicates this desire to browser  (e.g, by typing in the URL of the web page, by clicking on a bookmark for the web page, or by clicking a textual link or other embedded link to the web page, among other means) executing on the user's host computer (e.g., client ). Browser , executing within client , then sends a request to the server  hosting the web page. In response to the request, and perhaps after user\/client authentication, the server  retrieves and transmits to client  content, executable scripts, and\/or other resources enabling browser  to render the web page in a client window displayed via client . By way of example, these and other resources retrieved by server  may be found at server , in data store , or in any other suitable server or database accessible by server . As described above, the retrieved content may be HTML, XHTML, or XML content, for example, while the scripts may be JavaScript scripts or CSS files, among others, for example. The content and\/or other resources may also include plain text and\/or JSON, image, audio, and video files, as well as links (e.g., hypertext links) or calls to other resources or pages including URLs of those target resources or pages.","In particular embodiments, server  further transmits, with or within the response, executable code or scripts downloadable by browser  executing on client  for implementing page rendering process  within browser . By way of example, page rendering process  may be embedded as a call within the content or other resources transmitted from server . In particular embodiments, the response further includes one or more libraries downloadable by browser  for use by page rendering process . Generally, each library may include code, data, subroutines or classes for use by page rendering process . For example, history manager  is an example of a JavaScript module and library that page rendering process  may access as described more fully below. In particular embodiments, every time a user, via browser  or other application executing on a host client , first requests a page or resource from a particular site or server (e.g., server ) during a new user session with the site or server, the response to the request includes the executable code, scripts, and libraries for implementing page rendering process  at the client.","In particular embodiments, after browser  downloads the web page, the embedded call for implementing page rendering process  automatically calls an initialization function of the process  thereby automatically commencing execution of page rendering process . In particular embodiments, page rendering process  may be considered a software abstraction layer between browser  and server . The behavior of page rendering process  may vary depending on various factors such as the particular browser the page rendering process  is executing within. By way of example, referring to , in the case that browser  is a version of Mozilla Firefox, page rendering process , and particularly the initialization function, may begin at  by attaching on-click event handlers to the links (e.g., hypertext links) within the web page. In particular embodiments, page rendering process  then attaches, at , other additional historical event handlers to the \u201cback\u201d and \u201cforward\u201d buttons in the client window rendered by browser . By way of example and not by way of limitation, a script or code based on the jQuery JavaScript library for dynamically attaching event handlers is provided below:",{"@attributes":{"id":"p-0024","num":"0023"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"$(\u2018a\u2019).click(function( ) {"]},{"entry":[{},"\u2009\/\/\u2019payload\u2019 is a JSON encoded response from the server"]},{"entry":[{},"\u2009$.get(this.href, function(payload) {"]},{"entry":[{},"\u2009\u2009\/\/Dynamically load \u2018js\u2019, \u2018css\u2019 resources for this page."]},{"entry":[{},"\u2009\u2009bootload(payload.bootload, function( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/Swap in the new page's content"]},{"entry":[{},"$(\u2018#content\u2019).html(payload.html)"]},{"entry":[{},"\/\/Execute the onloadRegister'ed js code"]},{"entry":[{},"Execute(payload.onload)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\u2009});"]},{"entry":[{},"\u2009}"]},{"entry":[{},"});"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Generally, each event handler may be considered an asynchronous callback routine that handles a particular event, such as an on-click event (e.g., when a user clicks or otherwise selects a textual image or other link rendered or embedded within the web page) or a historical event (e.g., when a user clicks or otherwise selects the refresh, reload, back or forward button to navigate to a previously rendered web page). Page rendering process  may then register the historical event handlers with history manager  at . History manager  is generally a script (e.g., JavaScript) that also executes within browser  and records or stores various data relating to visited web pages. More particularly, history manager  stores, within a register or data store within client , URLs of web pages rendered by browser . By way of background, a URL generally specifies a location of a primary resource (e.g., a homepage). A fragment identifier (or hash) may be appended to the primary URL to identify the location of a secondary resource of a target web page. By way of example, a primary resource may be identified by the primary URL http:\/\/www.facebook.com\/home.php while a target web page may be identified by appending a fragment identifier to the URL of the primary resource, such as http:\/\/www.facebook.com\/home\/php#\/friends\/?ref=tn. In other words, the target web page identified by the latter URL (and which includes the appended fragment identifier) may be considered a \u201cchild\u201d web page and the web page corresponding to the former URL may be considered a \u201cparent\u201d web page. History managers in web browsers such as Mozilla Firefox and other like W3C compliant browsers are configured to record URLs of rendered web pages as well as fragment identifiers appended to the URLs. As will be described in more detail below, the event handlers serve to notify process  when the aforementioned events occur.","Now referring to the flowchart illustrated in , when a user desires to navigate to a new or \u201ctarget\u201d web page from the currently rendered web page (e.g., by clicking on a textual link or a link embedded within a page element such as a picture or user profile icon within the currently rendered web page, by clicking the back or forward button, or by typing or otherwise entering the URL of the target web page), one of the aforementioned events is passed to a corresponding event handler which performs one or more operations in response to the event as discussed below. Conventionally, upon the occurrence of an event, browser  formulates a request for the target web page (i.e., all of the resources needed to render the target web page) and transmits the request to server . Thus, conventionally, each time a user requests to navigate to a target page, the browser would transmit a request to the server for the full target page, unload the currently rendered page, and render the target page received from the server in its entirety \u201cfrom scratch;\u201d that is, not using any of the resources previously downloaded to render one or more previously rendered web pages. Conventionally, this full page loading and unloading would hold true for each subsequent page the user requests. Hence, conventionally, even if the target web page and the currently rendered web page include or share a substantial amount of the same content or other resources, the browser would still send a request for the entire target web page including the redundant content or other resources previously transmitted for the currently rendered web page. However, in particular embodiments, and as described in more detail below, process  takes advantage of the shared content and other resources between web pages having the same primary URL as well as scripts already executed or executing to more efficiently request the needed resources for rendering the target web page.","In one example embodiment, upon receiving notification of an event via the corresponding event handler, page rendering process  effectively intercepts the request generated by browser  thereby preventing a conventional request from being transmitted to the server . As will be described in more detail below, this enables page rendering process  to formulate its own request for resources corresponding to the target page and eliminate the need for full page loading, thereby eliminating the transmitting of redundant data, certain page rendering operations (such as initializing one or more scripts) and improving network performance.","By way of example, assuming that the event is an on-click event corresponding to the clicking or selection of a link in the currently rendered web page, the event handler corresponding to the selected link notifies page rendering process  that the corresponding on-click event has occurred. However, in order to detect the selection of a back or forward button, history manager  periodically polls (e.g., every 200 milliseconds (ms)) a historical log of visited web pages to determine whether the most current URL recorded by history manager  matches the URL of the currently rendered web page. More specifically, in an example embodiment, history manager  transmits event notifications to notify page rendering process  of historical events by calling the corresponding historical event handlers registered by page rendering process . In other words, if a target web page is requested as described above, history manager  extracts the URL of the target web page. Assuming the target web page is a secondary or child web page and the currently rendered web page is either a primary or parent web page or another child web page, browser  still considers the target web page to effectively be the same page as the currently rendered web page given that they share the same primary URL; however, history manager  appends the fragment identifier corresponding to the target web page to the primary URL and records this as the most current URL in the browser history historical log. In this way, when history manager  polls the historical log after recording the fragment identifier associated with the target page, history manager  may compare the most current URL in the log with the URL corresponding to the currently rendered web page and, if the fragment identifiers are different (or if one of the two URLs does not include a fragment identifier), determine that the most current URL is different from the URL corresponding to the currently rendered web page thereby detecting that an event has occurred. History manager , via the corresponding historical event handler, then notifies page rendering process . Additionally, in particular embodiments, if the primary URL of the target web page is different from the primary URL of the currently rendered web page, page rendering process  does not intercept the request generated by browser , thus reverting to conventional default browser behavior and allowing browser  to request a full page load for the target web page.","After detecting that an event has occurred, page rendering process  then extracts the URL of the target web page (hereinafter referred to as the \u201ctarget URL\u201d) at  as illustrated in . By way of example, in this case of an on-click event corresponding to the selection of a link, page rendering process  may extract the target URL as well as other identifying information associated with the target web page from one or more link attributes embedded with the link. In the case of an event corresponding to the selection of a back or forward button, page rendering process  may extract the target URL and\/or other identifying information from history manager .","In particular embodiments, page rendering process  may begin, at , a simulation of a typical page transition experience generally experienced when transitioning from one page to another (other alternate embodiments may not include a page transition simulation). By way of example, the page transition simulation may include \u201cbusy\u201d indicators including one or more of the following: dynamically changing the shape, size, or position of the cursor such as, by way of example, generating a new cursor in the form of a rotating hourglass (implemented, for example, by changing or modifying the CSS properties for the body element of the web page); blanking out or whiting all or a portion of the client window (e.g., by setting the content areas of the page to empty or null values); rendering a \u201cstatus\u201d or \u201cprogress\u201d bar in the client window (e.g., using iframe transport); and rendering a spinning or other dynamic icon next to the address bar rendered within the client window.","Page rendering process  then generates a request for the target web page at . By way of example, in order to generate the new request, page rendering process  may effectively translate a conventional request from browser  into one or more AJAX requests or calls. It should be noted, as described above, that AJAX refers generally to a variety of interrelated techniques used on the client side to asynchronously fetch content and, in some embodiments, may not necessarily involve JavaScripts or XML. However, in such embodiments, the new request may include one or more XMLHttpRequests for particular resources. In another particular embodiment, the new request may be implemented with a dynamically created invisible inline frame (iframe). More particularly, page rendering process  may assign or cause to be assigned the source attribute of the iframe to the target URL, causing a request identifying the target URL to be transmitted to server . The effect of this is that when browser  receives resources for the target web page in response to the new request, browser  will insert the resources in the response into the iframe. In particular embodiments, the iframe may call, for example, a JavaScript in the parent window that notifies page rendering process  of the arrival of the response. In still another alternate embodiment, page rendering process  may include a script tag in the new request. Page rendering process  then transmits the new request to server  at . Additionally, in some browser clients, page rendering process  creates an iframe to send the request that causes the browser status bar to display a busy or downloading status indicator, further simulating the page transition event.","In particular embodiments, server  also includes an abstraction layer  that is configured to determine whether an incoming request transmitted from client  is a request transmitted via page rendering process  or a conventional full page load request by browser . By way of example, abstraction layer  may be implemented as a Personal Home Page (PHP) script or PHP Hypertext Preprocessor (also PHP) script or file stored in or otherwise accessible by server . Furthermore, in some embodiments, page rendering process  may append or otherwise add a signature to the request transmitted via page rendering process . Such a signature enables abstraction layer  to readily identify the request as a request transmitted via process . Additionally, the request may also include another parameter or signature that indicates the particular version of page rendering page rendering process  executing within browser  so that abstraction layer  can better instruct server  as to how it should react or respond to the request. That is, assuming the request is a request from page rendering process , abstraction layer  can instruct server  to bypass or skip some of the operations required when responding to conventional full page requests.","In response to the request from page rendering process , server  retrieves, from data store  or other servers or databases, one or more resources required to render the target web page at client . By way of example, the response from server  may include a JSON encoded data structure that includes the required resources, HTML content, and initialization code or scripts. However, rather than transmit all of the resources required to render the target web page, server  only retrieves and transmits those resources not previously transmitted to browser  in the user session as browser  has already cached portions of the content and resources required to render the target web page as these portions were already received and utilized by browser  in rendering one or more previous web pages. Process  receives the response, including the new resources required to render the target web page, from server  at  and dynamically downloads the new resources. In particular embodiments, page rendering process  facilitates, again using AJAX or other asynchronous techniques, the rendering of the new resources in the context of the previously rendered web page at , and ends the page transition simulation at . That is, in particular embodiments, page rendering process  resets or recycles content and other resources from previously rendered web pages and re-renders these recycled resources based on the new resources received in the response from server . In particular embodiments, page rendering process  causes browser  to re-render the portions of the target web page that have been previously downloaded or cached and then inserts the new resources received in the response at  to complete the rendering of the target web page. Particular embodiments reduce or eliminate the processing overhead associated with re-transmitting, re-downloading, and re-initializing commonly required code modules and other resources, such as JavaScript or CSS scripts or files, that execute within the context of the target web page and that have previously been downloaded and initiated when rendering previously rendered web pages thereby reducing bandwidth requirements and reducing the time required to render the target web page. In various embodiments, page rendering process  then waits for a next event.","However, in particular embodiments, page rendering process  may be configured to allow browser  to request a full page load for a target web page regardless of the fragment identifier corresponding to the target web page after a predetermined number n of requests (e.g., 10, 20, or 30 requests). By way of example, page rendering process  may call or employ a counter to count the number of consecutive requests from page rendering process  after a full page load. This is intended at least in part to reconcile an implementation issue. More particularly, since a browser's cache memory is finite, and continuing to cache resources increases consumption of cache memory, page rendering process  may periodically flush the cache and request a full page load of a target web page so as to avoid filling the cache and hampering performance of the client.","The behavior of page rendering process  will now be described in the case that browser  is, for example, a version of Microsoft Windows Internet Explorer or the like. Unlike Mozilla Firefox, Microsoft Windows Internet Explorer does not record changes in fragment identifiers or hashes using history manager . In particular embodiments, page rendering process , and particularly the initialization function, may begin by inserting an inline frame (iframe) within a frame of the currently rendered web page. In particular embodiments, the inserted iframe is invisible to the user and includes a source property. When a target web page is selected, history manager  changes a source property or src attribute of the iframe to reflect the target web page. By way of example, the src attribute may be set to an index value which then maps to a particular URL stored in a table by history manager . Microsoft Windows Internet Explorer has the property that, if the source property of the iframe is changed, history manager  records a new entry in the browser history data store. By way of example, if a user then selected a back or forward button, browser  restores the previous value of the source property of the iframe corresponding to the desired web page.","In particular embodiments, a simple and static HTML page is embedded within the invisible inserted iframe. Information corresponding to the currently rendered web page is attached or appended to the query string corresponding to the HTML page. In particular embodiments, the embedded HTML page includes JavaScript that calls the parent page to notify page rendering process  when an event occurs. More particularly, the parent page may notify history manager  of the event and then history manager  may notify page rendering process  of the event. In particular embodiments, page rendering process  then proceeds as illustrated in  by extracting the target URL for the target web page at ","Although the present disclosure describes and illustrates particular steps of the methods or processes of  as occurring in a particular order, the present disclosure contemplates any suitable steps of the methods of  occurring in any suitable order. Moreover, although the present disclosure describes and illustrates particular components carrying out particular steps of the methods of , the present disclosure contemplates any suitable combination of any suitable components carrying out any suitable steps of the methods of .","The applications and\/or processes described herein can be implemented as a series of computer-readable instructions, embodied or encoded on or within a tangible data storage medium, that when executed are operable to cause one or more processors to implement the operations described above. While the foregoing processes and mechanisms can be implemented by a wide variety of physical systems and in a wide variety of network and computing environments, the computing systems described below provide example computing system architectures of the server and client systems described above, for didactic, rather than limiting, purposes.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["22","22","400","402","404","400","406","408","410","402","406","412","406","408","414","416","406","400","418","420","408","400","408"],"i":["a","b"]},"The elements of hardware system  are described in greater detail below. In particular, network interface  provides communication between hardware system  and any of a wide range of networks, such as an Ethernet (e.g., IEEE 802.3) network, a backplane, etc. Mass storage  provides permanent storage for the data and programming instructions to perform the above-described functions implemented in the servers , , whereas system memory  (e.g., DRAM) provides temporary storage for the data and programming instructions when executed by processor . I\/O ports  are one or more serial and\/or parallel communication ports that provide communication between additional peripheral devices, which may be coupled to hardware system .","Hardware system  may include a variety of system architectures; and various components of hardware system  may be rearranged. For example, cache  may be on-chip with processor . Alternatively, cache  and processor  may be packed together as a \u201cprocessor module,\u201d with processor  being referred to as the \u201cprocessor core.\u201d Furthermore, certain embodiments of the present invention may not require nor include all of the above components. For example, the peripheral devices shown coupled to standard I\/O bus  may couple to high performance I\/O bus . In addition, in some embodiments, only a single bus may exist, with the components of hardware system  being coupled to the single bus. Furthermore, hardware system  may include additional components, such as additional processors, storage devices, or memories.","In one implementation, the operations of the embodiments described herein are implemented as a series of executable modules run by hardware system , individually or collectively in a distributed computing environment. In a particular embodiment, a set of software modules and\/or drivers implements a network communications protocol stack, browsing and other computing functions, optimization processes, and the like. The foregoing functional modules may be realized by hardware, executable modules stored on a computer readable medium, or a combination of both. For example, the functional modules may comprise a plurality or series of instructions to be executed by a processor in a hardware system, such as processor . Initially, the series of instructions may be stored on a storage device, such as mass storage . However, the series of instructions can be tangibly stored on any suitable storage medium, such as a diskette, CD-ROM, ROM, EEPROM, etc. Furthermore, the series of instructions need not be stored locally, and could be received from a remote storage device, such as a server on a network, via network\/communications interface . The instructions are copied from the storage device, such as mass storage , into memory  and then accessed and executed by processor .","An operating system manages and controls the operation of hardware system , including the input and output of data to and from software applications (not shown). The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. Any suitable operating system may be used, such as the LINUX Operating System, the Apple Macintosh Operating System, available from Apple Computer Inc. of Cupertino, Calif., UNIX operating systems, Microsoft\u00ae Windows\u00ae operating systems, BSD operating systems, and the like. Of course, other implementations are possible. For example, the nickname generating functions described herein may be implemented in firmware or on an application specific integrated circuit.","Furthermore, the above-described elements and operations can be comprised of instructions that are stored on storage media. The instructions can be retrieved and executed by a processing system. Some examples of instructions are software, program code, and firmware. Some examples of storage media are memory devices, tape, disks, integrated circuits, and servers. The instructions are operational when executed by the processing system to direct the processing system to operate in accord with the invention. The term \u201cprocessing system\u201d refers to a single processing device or a group of inter-operational processing devices. Some examples of processing devices are integrated circuits and logic circuitry. Those skilled in the art are familiar with instructions, computers, and storage media.","The present disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. By way of example, while embodiments of the present invention have been described as operating in connection with a social networking website, the present invention can be used in connection with any communications facility that supports web applications. Furthermore, in some embodiments the term \u201cweb service\u201d and \u201cweb-site\u201d may be used interchangeably and additionally may refer to a custom or generalized API on a device, such as a mobile device (e.g., cellular phone, smart phone, personal GPS, personal digital assistance, personal gaming device, etc.), that makes API calls directly to a server."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
