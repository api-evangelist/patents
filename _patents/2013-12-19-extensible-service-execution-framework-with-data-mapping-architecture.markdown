---
title: Extensible service execution framework with data mapping architecture
abstract: A service description associated with a service is received. An input data mapping rule from a first caller context to a service context associated with the service is automatically determined at least in part by transforming the service description. A service binding data consumer based at least in part on the service description is created. The service and the input data mapping rule between the first caller context and the service context is automatically executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342327&OS=09342327&RS=09342327
owner: EMC Corporation
number: 09342327
owner_city: Hopkinton
owner_country: US
publication_date: 20131219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":["A business process management (\u201cBPM\u201d) engine provides orchestration for sequences of business activities (called a \u201cbusiness process\u201d or simply \u201cprocess\u201d) in an asynchronous, reliable, and stateful manner.","The business process may be defined as an activity flow model, typically declared using a procedural markup language, for example in eXtensible Markup Language (\u201cXML\u201d). An \u201cactivity\u201d represents either human performed tasks or automated software\/web services (\u201cService\u201d) accessed, for example, through an application programming interface (\u201cAPI\u201d). Services may be invoked from more than within a BPM business process, for example a business process (\u201cProcess\u201d), a business event (\u201cEvent\u201d) and\/or a Java application; collectively these are referred to throughout this specification as a \u201cCaller\u201d.","It would be advantageous to invoke a Service in an extensible execution framework.","The invention can be implemented in numerous ways, including as a process; an apparatus; a system; a composition of matter; a computer program product embodied on a computer readable storage medium; and\/or a processor, such as a processor configured to execute instructions stored on and\/or provided by a memory coupled to the processor. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. In general, the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise, a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein, the term \u2018processor\u2019 refers to one or more devices, circuits, and\/or processing cores configured to process data, such as computer program instructions.","A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.","An extensible Service execution framework with a data mapping architecture is disclosed. A Service may be defined throughout this specification as a\u2014service that may for example send an email, call a web service associated with a Representational State Transfer (\u201cREST\u201d) architectural style, perform basic data transformation, or perform any custom service creatable. A Service may be designed by a third-party.","In one embodiment, using the Service involves a design-time (tooling) stage wherein data mapping rules from the Caller's context to the Service context are established. Data mapping rules may include expressions and\/or notations. The Caller context may be that associated with a Process and\/or an Event. Using the Service also involves a run-time stage to execute the mapping rules while invoking the actual Service.","In one embodiment, a Service can be invoked from within a BPM, from Events, or from plain Java. In one embodiment, a Service is wrapped up in higher level abstractions of data mapping between Caller context and Service context in a generic fashion. The data mapping notations may customized to be suitable to specific contexts e.g. based on the context tree of a data model.","In one embodiment, an activity template within a Process does input data mapping from Process variables, that is the Caller context, into an email Service. Output mappings may also be determined to map back from the Service, for example a MessageId from email service, to Process variables within the BPM system. An architectural philosophy is disclosed that if Service designers adhere to a generic extensible service execution framework described below, then the data mapping architecture can be automatically implemented at design-time and run-time without custom code. This framework may be used in a variety of systems including EMC Documentum xCP Designer, as well as runtime execution of generic systems, for example Java-based systems.","Three key components on the design-time comprise:\n\n","Two key components on the run-time phase comprise:\n\n",{"@attributes":{"id":"p-0032","num":"0036"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","102","102","100","110","102","118"]},"Processor  is coupled bi-directionally with memory , which can include a first primary storage, typically a random-access memory (\u201cRAM\u201d), and a second primary storage area, typically a read-only memory (\u201cROM\u201d). As is well known in the art, primary storage can be used as a general storage area and as scratch-pad memory, and can also be used to store input data and processed data. Primary storage can also store programming instructions and data, in the form of data objects and text objects, in addition to other data and instructions for processes operating on processor . Also as well known in the art, primary storage typically includes basic operating instructions, program code, data and objects used by the processor  to perform its functions, for example programmed instructions. For example, primary storage devices  can include any suitable computer-readable storage media, described below, depending on whether, for example, data access needs to be bi-directional or uni-directional. For example, processor  can also directly and very rapidly retrieve and store frequently needed data in a cache memory, not shown. The block processor  may also include a coprocessor (not shown) as a supplemental processing component to aid the processor and\/or memory .","A removable mass storage device  provides additional data storage capacity for the computer system , and is coupled either bi-directionally (read\/write) or uni-directionally (read only) to processor . For example, storage  can also include computer-readable media such as magnetic tape, flash memory, PC-CARDS, portable mass storage devices, holographic storage devices, and other storage devices. A fixed mass storage  can also, for example, provide additional data storage capacity. The most common example of mass storage  is a hard disk drive. Mass storage ,  generally store additional programming instructions, data, and the like that typically are not in active use by the processor . It will be appreciated that the information retained within mass storage ,  can be incorporated, if needed, in standard fashion as part of primary storage , for example RAM, as virtual memory.","In addition to providing processor  access to storage subsystems, bus  can be used to provide access to other subsystems and devices as well. As shown, these can include a display monitor , a network interface , a keyboard , and a pointing device , as well as an auxiliary input\/output device interface, a sound card, speakers, and other subsystems as needed. For example, the pointing device  can be a mouse, stylus, track ball, or tablet, and is useful for interacting with a graphical user interface.","The network interface  allows processor  to be coupled to another computer, computer network, or telecommunications network using a network connection as shown. For example, through the network interface , the processor  can receive information, for example data objects or program instructions, from another network, or output information to another network in the course of performing method\/process steps. Information, often represented as a sequence of instructions to be executed on a processor, can be received from and outputted to another network. An interface card or similar device and appropriate software implemented by, for example executed\/performed on, processor  can be used to connect the computer system  to an external network and transfer data according to standard protocols. For example, various process embodiments disclosed herein can be executed on processor , or can be performed across a network such as the Internet, intranet networks, or local area networks, in conjunction with a remote processor that shares a portion of the processing. Throughout this specification \u201cnetwork\u201d refers to any interconnection between computer components including the Internet, Ethernet, intranet, local-area network (\u201cLAN\u201d), home-area network (\u201cHAN\u201d), serial connection, parallel connection, wide-area network (\u201cWAN\u201d), Fibre Channel, PCI\/PCI-X, AGP, VLbus, PCI Express, Expresscard, Infiniband, ACCESS.bus, Wireless LAN, WiFi, HomePNA, Optical Fibre, G.hn, infrared network, satellite network, microwave network, cellular network, virtual private network (\u201cVPN\u201d), Universal Serial Bus (\u201cUSB\u201d), FireWire, Serial ATA, 1-Wire, UNI\/O, or any form of connecting homogenous, heterogeneous systems and\/or groups of systems together. Additional mass storage devices, not shown, can also be connected to processor  through network interface .","An auxiliary I\/O device interface, not shown, can be used in conjunction with computer system . The auxiliary I\/O device interface can include general and customized interfaces that allow the processor  to send and, more typically, receive data from other devices such as microphones, touch-sensitive displays, transducer card readers, tape readers, voice or handwriting recognizers, biometrics readers, cameras, portable mass storage devices, and other computers.","In addition, various embodiments disclosed herein further relate to computer storage products with a computer readable medium that includes program code for performing various computer-implemented operations. The computer-readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of computer-readable media include, but are not limited to, all the media mentioned above: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROM disks; magneto-optical media such as optical disks; and specially configured hardware devices such as application-specific integrated circuits (\u201cASIC\u201ds), programmable logic devices (\u201cPLD\u201ds), and ROM and RAM devices. Examples of program code include both machine code, as produced, for example, by a compiler, or files containing higher level code, for example a script, that can be executed using an interpreter.","The computer system shown in  is but an example of a computer system suitable for use with the various embodiments disclosed herein. Other computer systems suitable for such use can include additional or fewer subsystems. In addition, bus  is illustrative of any interconnection scheme serving to link the subsystems. Other computer architectures having different configurations of subsystems can also be utilized.",{"@attributes":{"id":"p-0040","num":"0044"},"figref":["FIG. 2A","FIG. 2A"],"b":["206","202","204","208","210"]},{"@attributes":{"id":"p-0041","num":"0045"},"figref":["FIG. 2B","FIG. 2B","FIG. 2A","FIG. 2A","FIG. 2A"],"b":["210","252","254","256","210","258","260","262"]},{"@attributes":{"id":"p-0042","num":"0046"},"figref":["FIG. 3","FIG. 3","FIG. 2B","FIG. 3"],"b":["302","308","304","306"]},"As shown in , the data provider () includes data in a specified format shown as a, b, c, with hierarchical relationship (), which uses an input data mapping () to provide to Service binding data consumer () data in a specified format shown as x, y, z with other hierarchical relationship (). An example of the hierarchical relationship includes that of a \u201ccontext data tree\u201d as described in greater detail in U.S. patent application Ser. No. 13\/626,199 entitled \u201cDATA MODEL BASED CONTEXT TREE\u201d, which is incorporated herein by reference for all purposes. In the example shown, () includes string function \u201ctoLower\u201d on data node a.b and number function \u201cfloor\u201d on data node a.c. After the Service has executed on (), it provides data from Service binding data provider () in a specified format shown as p, q, r with other hierarchical relationship (). Output data mapping () transforms data () to a consumable format shown as l, m, n with other hierarchical relationship (). For BPM, the two context trees will be the same based on the Process variables context tree, for example a, b, c, being the same as l, m, n. In one embodiment, a,b,c, and l,m,n are different when multiple services are sequenced.","In the example shown, () includes string function \u201ctoLower\u201d on data nodes p, q and number function \u201cceil\u201d on data nodes p, r.","In one embodiment, an overall executing sequence follows this order:\n\n","Unlike traditional simple data mapping, one embodiment includes a design-time and run-time framework for being a data mapping architecture for an extensible service execution framework, embeddable in any framework that requires some sort of service execution, like BPM systems. The advantages over traditional simple data mapping include:\n\n","The framework creates an entire ecosystem from design-time that creates mapping rules based on the Service selection to run-time.",{"@attributes":{"id":"p-0048","num":"0058"},"figref":"FIG. 4A","b":["402","404","406"]},{"@attributes":{"id":"p-0049","num":"0059"},"figref":"FIG. 4B","b":["432","434","436","438","432","440","434","440","438"]},{"@attributes":{"id":"p-0050","num":"0060"},"figref":["FIG. 4C","FIG. 4B","FIG. 4B"],"b":["452","454","456","458","452","460","454"]},{"@attributes":{"id":"p-0051","num":"0061"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0052","num":"0062"},"figref":"FIGS. 5A and 5B","b":["502","504","506","508","510","512","514"]},"With regards to (), (), (), (), (), (), (), (), (), (), and (), for each request, based on the current context, the Service is executed. Input data mapping rules are evaluated based on current context data (Caller DataProvider. e.g. ProcessDataProvider), assigned to the Service side (DataConsumer, e.g. EmailRequestServiceBindingDataConsumer), executes the Service, and evaluates output mapping rules based on the data coming from the service execution (DataProvider, e.g. EmailResponseDataProvider) and assigns them to the Data Consumer (e.g. ProcessDataConsumer). With regards to (), this framework also provides an API to destroy the service and in one embodiment, it is up to the system to determine when to destroy the service.",{"@attributes":{"id":"p-0054","num":"0064"},"figref":["FIG. 6","FIG. 6"]},{"@attributes":{"id":"p-0055","num":"0065"},"figref":["FIGS. 7A, 7B, 7C, 7D, 7E, 7F, and 7G","FIG. 7A","FIG. 7B","FIG. 7C","FIG. 7D","FIG. 7E","FIG. 7F","FIG. 7G"]},{"@attributes":{"id":"p-0056","num":"0066"},"figref":["FIG. 8","FIG. 8"]},{"@attributes":{"id":"p-0057","num":"0067"},"figref":["FIGS. 9A, 9B, and 9C","FIG. 9A","FIG. 9B"],"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["an init method to initialize any resources (for example, a JMS connection) and that can be reused across multiple invoke services, including a parameter for a map representing the endpoint information, e.g. Email Host and Port etc,","a REQUEST\/createServiceRequestDataConsumer method to return the Service's data consumer which will be used to set values before service invocation, including a parameter for context (information that could be passed into service execution), a parameter that allows in some cases like Process data mapping, the DataConsumer being the same as DataProvider\u2014that is doing basic data transformation, and returns DataConsumer that can be used to set values to Service before invoking it,","an invokeService method to invoke a Service, including a parameter for context (information that could be passed into service execution), and a parameter for a data consumer that has details (like email request data) used in invoking the service, and","a destroy method to destroy any resources created in the init method."]}}}},{"@attributes":{"id":"p-0058","num":"0072"},"figref":"FIG. 9C"},{"@attributes":{"id":"p-0059","num":"0073"},"figref":["FIG. 10","FIG. 10"]},{"@attributes":{"id":"p-0060","num":"0074"},"figref":["FIG. 11","FIG. 11"]},{"@attributes":{"id":"p-0061","num":"0075"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0062","num":"0076"},"figref":["FIGS. 13A, 13B, and 13C","FIG. 13A-C"],"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":{"@attributes":{"id":"ul0010-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":["an init method to initialize a Service provided in the Service binding configuration using parameters including context used for processing the init( ) when the service is initialized,","an execute method to execute a service that may not have any output mapping using parameters including context used for processing the execution of service, and a fromRequestDataProviders parameter for data providers that participate in the Service binding, for example ProcessDataProvider when used in an BPM activity,","an execute method to execute a service that have both input and output mapping using parameters including context used for processing the execution of service, a fromRequestDataProviders parameter for data providers that participate in the Service binding, for example ProcessDataProvider when used in an BPM activity, and a toResponseDataConsumer parameter for data consumers that participate in the Service binding, for example ProcessDataConsumer when used in an BPM Activity), and","a destroy method for Service cleanup during shutdown of the service and\/or when the service is not required to be loaded in memory."]}}}},{"@attributes":{"id":"p-0063","num":"0081"},"figref":["FIG. 14","FIG. 14","FIG. 1"]},"In step , a Service description associated with a Service is received. In one embodiment, the service is a web Service. In one embodiment, the Service description is received during design-time. In one embodiment, the Service description is received in EMC Documentum xCP Designer. In one embodiment, the Service description conforms to an API like that described in . In one embodiment, the web Service is associated with a REST architectural style. In one embodiment, the web Service is invoked from a BPM, an Event and\/or from Java.","In step , an input data mapping rule is automatically determined from a first Caller context to a Service context associated with the web Service at least in part by transforming the Service description. In one embodiment, the input data mapping rule is automatically determined at design-time. In one embodiment, a step (not shown) is further included automatically determining an output data mapping rule from the Service context to a second Caller context at least in part by transforming the Service description. In one embodiment, the output data mapping rule is automatically determined during design-time. In one embodiment, the second Caller context is the same as the first Caller context, that is from the same BPM, Event, and\/or Java application.","In step , a Service binding data consumer is created based at least in part on the Service description. In one embodiment, the Service binding data consumer is created at run-time. In one embodiment, a step (not shown) is further included creating a Service binding data provider based at least in part on the Service description. In one embodiment, the Service binding data provider is created during run-time.","In step , the service and the input data mapping rule between the first Caller context and the Service context is automatically executed. In one embodiment, the web Service and the input data mapping rule are automatically executed during run-time. In one embodiment, a step (not shown) is further included automatically executing the web Service and the output data mapping rule between the Service context and a second Caller context. In one embodiment, the web Service and the output data mapping rule are automatically executed during run-time. In one embodiment, the second Caller context is the first Service context, that is the Service outputs to itself. In one embodiment, the second Caller context is a next Service context, that is the results from the first Service are \u201cdaisy chained\u201d to a second Service.","Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 7A, 7B, 7C, 7D, 7E, 7F, and 7G"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 9A, 9B, and 9C"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 13A, 13B, and 13C"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
