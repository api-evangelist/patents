---
title: System and method for reducing power consumption in multiprocessor system
abstract: A method and apparatus for power management is disclosed. The invention reduces power consumption in multiprocessing systems by dynamically adjusting processor power based on system workload. Particularly, the method and apparatus determines the number of required processors based on the number or active threads and sets a processor affinity to run the active threads on the determined number of required processors, thereby allowing the free processors to enter a low-power state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06901522&OS=06901522&RS=06901522
owner: Intel Corporation
number: 06901522
owner_city: Santa Clara
owner_country: US
publication_date: 20010607
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","GENERAL BACKGROUND","DETAILED DESCRIPTION"],"p":["The invention is related to processors and more particularly, to power management in multi-processor systems.","In recent years, advances in technology have led to more powerful computing devices. For example, a server used in business transaction processing or e-commerce may require simultaneous execution of a high volume of transactions. Accordingly, server systems are typically set to process the highest expectant volume of transactions or workload. Nevertheless, servers run, during much of the time, at a fraction of the peak capacity. Regardless of the workload, however, these systems generally run at nearly full power, thereby consuming great amounts of electrical power. Particularly, as millions surf the World Wide Web and organizations (including corporations and government) use the Internet to implement more of their business, internet servers form the core of e-business and tend to be massive consumers of power.","In addition, a system running at nearly full power dissipates large amounts of heat, requiring cooling fans which create a high decibel noise. The cooling and power distribution requirements also limit the number of server systems that can be stacked in \u201cracks\u201d. As a result, internet data centers are faced with increasing infrastructure requirements for space, cooling, and electrical power. Furthermore, for computing devices with a finite source of power such as portable computers, power consumption can limit the usage time as well as generate uncomfortable heat for users. Therefore, power management can be critical for any computing devices.","Currently, some Operating Systems (OS) have built-in power management. For example, Advanced Configuration and Power Interface (ACPI) compliant hardware can support dynamic power management under the control of an OS, for example MICROSOFT WINDOWS\u00ae 2000. Based on the Central Processing Unit (CPU) usage, the MICROSOFT WINDOWS\u00ae 2000 dynamically controls the power consumed. Under MICROSOFT WINDOWS\u00ae 2000, the OS defines \u201cCPU usage\u201d as \u201ctime not spent in the OS idle loop\u201d. On ACPI systems, the OS transitions the CPU into a low power state when idle. This reduces the CPU power consumption.","Nevertheless, in a Java application server environment, the ability of an OS to efficiently manage CPU power is limited. Particularly, as seen at the level of an OS, the Java application server software and the Java Virtual Machine (JVM) can appear to consume a large percentage of the CPU time, even under relatively light user load. As the OS has limited visibility into the actual CPU usage of the server system, the OS cannot efficiently manage power on its own with the existing mechanisms. For example, threads could be in a spin loop or doing housekeeping tasks, which does not require full CPU power usage. Moreover, when the JVM makes use of a user-level threads library, the OS's visibility into the actual CPU usage is reduced further since the OS sees only a few active threads, while a large number of user threads are mapped on top of the OS native threads.","A method and apparatus for reducing power consumption is disclosed. In the following description, numerous specific details are set forth to provide a thorough understanding of the invention. However, it will be understood by one of ordinary skill in the art that the invention may be practiced without these specific details. For example, although the invention will be described with reference to a Java application server environment, the same techniques and teachings can be applied to other types of systems, environments or platforms.","Disclosed herein, a \u201cthread\u201d is a sequence of computing instructions that make up a program. Within a program, a single thread can be assigned to execute one task or multiple threads can be assigned to execute more than one task at a time. Typical multiprocessing systems can have four to eight (or more) individual processors sharing processing tasks. Therefore, by breaking down a process into multiple threads, different processors in the system can be operating on different portions or tasks of the process at the same time. Also, the term \u201ccomputer readable medium\u201d includes, but is not limited to portable or fixed storage devices, optical storage devices, and any other memory devices capable of storing computer instructions and\/or data. Here, \u201ccomputer instructions\u201d are software or firmware including data, codes, and programs that can be read and\/or executed to perform certain tasks. In addition, the terms \u201cprocessor\u201d and \u201ccentral processing unit\u201d (CPU) refer to circuitry that controls various functions of a computer system and will be used interchangeably.","An example of a multiprocessing system  implementing the principles of the invention is shown in , including a plurality of processors , a storage device  and a bus . The processors  are coupled to the storage device  by the bus . A number of input\/output devices  such as a keyboard, mouse and displays can also be coupled to the bus .","The memory  stores computer programs such as an operating system (OS), application software, utility software, Java servlets or applets, and other\/or other instructions which are executed by the processors . An OS manages the basic operations of a system such as determining how and in what order assigned tasks are to be handled, managing the flow of information into and out of the processor(s), receiving inputs from a keyboard and sending outputs to a display. Here, the system  and an OS form a platform.","An application software runs on top of the OS and performs a specific task for a user using services offered by the OS. An application software is usually designed to run on a particular OS because various operating systems operate in different ways. However, Java application software is generally platform independent and can be run on different platforms without alteration.","Java is an object-oriented language compiled into a format called bytecode. The Java bytecodes are designed to be executed on a Java Virtual Machine (JVM). The JVM is not an actual hardware platform, but is a low-level software emulator that can be implemented on many different computer processor architectures and under many different operating systems.  shows an exemplary Java application system  including a JVM. The system  includes computer hardware  controlled by OS  and a JVM  for running Java programs . The JVM  running on the system  relies on services from the underlying OS  and the computer hardware .",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},"Based on the number of active threads, the JVM then determines the number of required processor (block ) in order to efficiently perform the tasks of the system. Particularly, the JVM determines the total number \u201cn\u201d of processors in the system. Here, the JVM can determine the number of processors through an OS Application Programming Interface (API) call. The JVM then determines a ratio of active threads to processors required for good performance, depending on the type of processing. For example, if the threads are mostly doing Input\/Output (I\/O) or other high-latency tasks, a higher ratio of threads to processor is used. On the other hand, if threads are mostly doing CPU-intensive processing and less I\/O, a lower ratio of threads to processor is used, for example, 1 thread per CPU.","Based on the determined ratio, the JVM determines the number \u201ck\u201d of required processors out of the total number n of processors, wherein k is determined as follows:\n\n=(number of active threads)\/(ratio of active threads to processors)\u2003\u2003[Equation 1]\n","The remaining number, i.e. (n\u2212k), of processors can be transitioned into low-power states. For example, if there are 15 active threads and the optimum ratio of active threads to processors is 3:1, k=15\/3 and five processors are required to run the system tasks. Assuming an 8-CPU system, three CPUs can be placed into a low-power state.","Upon determining the number of required processors, the JVM makes a system call to the OS to set a processor affinity of the entire Java thread pool (block ), including the JVM's own threads. A processor affinity means forcing threads to run a specific subset of processors and is set as follows:\n\nAffinity(Thread 1 . . . )=processors1 . . . 1\u2266\u2003\u2003[Equation 2]\n","Namely, equation 2 forces the entire pool of threads 1 to t to run on processors 1 to k out of n processors. For example, in MICROSOFT WINDOWS\u00ae 2000, the API call \u201cSetProcessAffinityMask\u201d can be used to set the processor affinity.","Accordingly, the OS assigns the desired processor affinities to the Java threads and causes all of Java to run on k processors, leaving (n\u2212k) processor to run the OS idle loop. Therefore, the (n\u2212k) CPUs enter(s) the low-power state (block ). Here, the CPUs can enter the low-power states using a typical OS Advanced Configuration and Power Interface (ACPI) mechanism.  shows an exemplary result of the present power management on a 4-CPU system. Prior to power management, the CPU to CPU  are in full-power state to run active and blocked\/idle threads. By setting the appropriate processor affinity, the active and blocked\/idle threads are run on CPU and CPU while CPU  and CPU are transitioned into low-power states.","The reverse procedure is used when the JVM determines that the system load has increased. This requires another call into OS to set the processor affinities. As large-scale changes to the system workload tend to occur gradually in servers running enterprise or e-business applications, the performance overhead of the above procedure is expected to be small. In addition, the procedure described above is a minimal implementation of the invention. Because the OS has various services which periodically will run on the (n\u2212k) processors, a fine-grained hardware\/software support for processor power management can further improve the performance of the system. In such systems, the procedure is extended as follows.","If an OS API is available to set individual CPU's power state, the JVM can use this API to specifically request the OS to transition (n\u2212k) CPUs into deep sleep and\/or turn off associated cooling devices such as fans. If a Java API allows the JVM to expose the above OS API to Java applications, the Java application software can use the Java API to achieve the same end results.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5","b":["500","500","510","520","530","530","540","550","560","540","550","560","540"]},"One particular application of the power management in accordance to the present invention is in server systems, which currently lacks support for fine-grained power control of individual CPUs. Server chipsets connect a single \u201cstop-clock\u201d output to all the CPUs' input pins, thereby making it impossible to selectively throttle a particular CPU. Also, there is currently no OS API that allows a server application to inform the OS that it no longer needs to use a certain number of CPUs so that the OS can transition those CPUs into a deep sleep state. However, the power management in accordance to the invention allows fine-grained power control and can be implemented in a platform that follows the ACPI standard. Therefore multiprocessor systems can provide the performance when needed, for example, performance on-demand by dynamically bringing more CPU's on-line to meet increased server workload. On the other hand, CPU power consumption can be scaled back depending on the server workload, thereby saving power at low system utilization.","Accordingly, implementation of the invention results in extensive power savings. The low-power states such as deep sleep can save significant CPU power, while the associated cooling systems can be turned off, further reducing power consumption. Also reducing the noise level. Furthermore, the invention addresses multiprocessor servers in a Java application server environment,.","In addition, the technique above can be implemented in run-time environments other than Java application systems such as MICROSOFT\u00ae.NET. The invention can be implemented in any system with a layer of software above the OS that has visibility into the processing needs of the application system. Also, the technique can be applied to different operating systems including MS Windows and Linux. Furthermore, the technique can be modified to cover a broader range of systems and software (i.e. non-Java case).","Namely, a \u201cwatchdog\u201d thread can be implemented within an OS, whose function is to monitor the states and the processing nature of the other threads in the system. The watchdog thread would perform similar calculation as the JVM above and make a call to the OS to request that (n\u2212k) CPUs be put into a low-power state. For example, the watchdog thread functionality can be implemented in Windows native threads library, Linux native thread library, and User (green) threads library that may sit on top of the OS native libraries.","As discussed above, the present power management in accordance with the invention allows a selected number of processors, based on the amount of workload, to enter low-power states, thereby reducing the overall power consumption. As a result, the system level and the CPU level power consumption would significantly fall at lower workload levels. Therefore, the systems can be efficiently operated at reduced costs, even with power supply constraints.","The foregoing embodiments are merely exemplary and are not to be construed as limiting the present invention. The present teachings can be readily applied to other types of apparatuses. The description of the present invention is intended to be illustrative, and not to limit the scope of the claims. Many alternatives, modifications, and variations will be apparent to those skilled in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be described in detail with reference to the following drawings in which like reference numerals refer to like elements wherein:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
