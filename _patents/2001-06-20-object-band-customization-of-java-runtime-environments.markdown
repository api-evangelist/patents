---
title: Object band customization of Java runtime environments
abstract: Techniques for customization of Java runtime environments are disclosed. The techniques can be used to provide Java runtime environments that are specifically tailored for various Java applications. Accordingly, for a particular Java application, an optimized runtime environment can be created. One or more optional attributes which represent the desired runtime customizations are generated. As will be appreciated, the optional attributes can be generated in the attribute table in the class file. The optional attributes can then be parsed and appropriate features can be loaded into the virtual machine. In this way, Java runtime environments can be customized based on a particular Java application requirement. Moreover, customizations can be automated using a runtime performance manager that interacts with various other components that operate to first generate and then load optional attributes into the Java runtime environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06964033&OS=06964033&RS=06964033
owner: Sun Microsystems, Inc.
number: 06964033
owner_city: Santa Clara
owner_country: US
publication_date: 20010620
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is related to U.S. patent application Ser. No. 09\/886,178, entitled \u201cOPTIONAL ATTRIBUTE GENERATOR FOR CUSTOMIZED JAVA PROGRAMMING ENVIRONMENTS\u201d, filed concurrently herewith, and hereby incorporated herein by reference.","This application is also related to U.S. patent application Ser. No. 09\/852,463, entitled \u201cFRAMEWORKS FOR ACCESSING JAVA CLASS FILES\u201d, filed May 9, 2001, and hereby incorporated herein by reference.","The present invention relates generally to object-based high level programming environments, and more particularly, to techniques suitable for customization of a Java runtime environment.","One of the goals of high level languages is to provide a portable programming environment such that the computer programs may easily be ported to another computer platform. High level languages such as \u201cC\u201d provide a level of abstraction from the underlying computer architecture and their success is well evidenced from the fact that most computer applications are now written in a high level language.","Portability has been taken to new heights with the advent of the World Wide Web (\u201cthe Web\u201d) which is an interface protocol for the Internet which allows communication between diverse computer platforms through a graphical interface. Computers communicating over the Web are able to download and execute small applications called applets. Given that applets may be executed on a diverse assortment of computer platforms, the applets are typically executed by a Java\u2122 virtual machine.","Recently, the Java programming environment has become quite popular. The Java programming language is a language that is designed to be portable enough to be executed on a wide range of computers ranging from small devices (e.g., pagers, cell phones and smart cards) up to supercomputers. Computer programs written in the Java programming language (and other languages) may be compiled into Java Bytecode instructions that are suitable for execution by a Java virtual machine implementation. The Java virtual machine is commonly implemented in software by means of an interpreter for the Java virtual machine instruction set but, in general, may be software, hardware, or both. A particular Java virtual machine implementation and corresponding support libraries together constitute a Java runtime environment.","Computer programs in the Java programming language are arranged in one or more classes or interfaces (referred to herein jointly as classes or class files). Such programs are generally platform, i.e., hardware and operating system, independent. As such, these computer programs may be executed without modification on any computer that is able to run an implementation of the Java runtime environment.","Object-oriented classes written in the Java programming language are compiled to a particular binary format called the \u201cclass file format.\u201d The class file includes various components associated with a single class. These components can be, for example, methods and\/or interfaces associated with the class. In addition, the class file format can include a significant amount of ancillary information that is associated with the class. The class file format (as well as the general operation of the Java virtual machine) is described in some detail in , by Tim Lindholm and Frank Yellin, which is hereby incorporated herein by reference.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1A","b":["101","101","103","105","107"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 1B","FIG. 1B"],"b":["100","100","102","104","106","108","110","110","100"]},"As is known to those skilled in the art, execution of a Java application typically requires various Java features to be available at runtime. Unfortunately, however, one problem with conventional virtual machine implementation is that typically most of the available features are loaded regardless of whether they are going to be used at runtime by a particular Java application. This, of course, can result in a grossly inefficient use of system resources. In some circumstances, particularly in systems with limited computing power and\/or memory, this inefficient use of resources is a serious disadvantage. As such, it is highly desirable to customize Java runtime environments so as to optimize performance of Java applications.","Accordingly, there is a need for techniques that allow customization of Java runtime environment of virtual machines that operate with limited computing power and\/or memory (e.g., embedded systems).","The present invention pertains to improved techniques for customization of Java runtime environments. The techniques can be used to provide Java runtime environments that are specifically tailored for various Java applications. Accordingly, for a particular Java application, an optimized runtime environment can be created. In accordance with one aspect of the invention, one or more optional attributes which represent the desired runtime customizations are generated. As will be appreciated, the optional attributes can be generated in the attribute table in the class file. The optional attributes can then be parsed and appropriate features can be loaded into the virtual machine. In this way, Java runtime environments can be customized based on a particular Java application requirement. Moreover, customizations can be automated using a runtime performance manager that interacts with various other components that operate to first generate and then load optional attributes into the Java runtime environment.","The invention can be implemented in numerous ways, including as a method, an apparatus, a computer readable medium, and a database system. Several embodiments of the invention are discussed below.","As a method for customizing a Java runtime environment for a Java application suitable for execution by a virtual machine, one embodiment of the invention includes the acts of: marking one or more Java Bytecodes associated with a Java class file; generating at least one attribute for the one or more marked Java Bytecodes; and loading at least one feature of Java runtime into the virtual machine based on the at least one attribute.","One embodiment of the invention includes a Java computing environment suitable for execution of a Java application in a Java virtual machine. The Java computing environment includes a first software module suitable for marking one or more Java Bytecodes associated with a Java class file; a second software module suitable for generating at least one attribute for the one or more marked Java Bytecodes; and a third software module suitable for loading at least one feature of Java runtime into the virtual machine based on the at least one attribute.","As a computer readable media including computer program code for customizing a Java runtime environment, one embodiment of the invention includes computer program code for marking one or more Java Bytecodes associated with a Java class file; computer program code for generating at least one attribute for the one or more marked Java Bytecodes; and computer program code for loading at least one feature of Java runtime into the virtual machine based on the at least one attribute.","These and other aspects and advantages of the present invention will become more apparent when the detailed description below is read in conjunction with the accompanying drawings.","The present invention pertains to improved techniques for customization of Java runtime environments. The techniques can be used to provide Java runtime environments that are specifically tailored for various Java applications. Accordingly, for a particular Java application, an optimized runtime environment can be created. In accordance with one aspect of the invention, one or more optional attributes which represent the desired runtime customizations are generated. As will be appreciated, the optional attributes can be generated in the attribute table in the class file. The optional attributes can then be parsed and appropriate features can be loaded into the virtual machine. In this way, Java runtime environments can be customized based on a particular Java application requirement. Moreover, customizations can be automated using a runtime performance manager that interacts with various other components that operate to first generate and then load optional attributes into the Java runtime environment.","One component is an optional attribute generator that operates to generate optional attributes that represent desired optimizations for a Java runtime environment. The optional attribute generator can, among other things, generate programming code that implements an Application Programming Interface (API) suitable for accessing the optional attributes that are stored in the Java class file. In addition, the optional attribute generator can perform a variety of other tasks, for example, it can access a database to receive optimizations as input and update the database after the optional attributes are generated.","Embodiments of the invention are discussed below with reference to . However, those skilled in the art will readily appreciate that the detailed description given herein with respect to these figures is for explanatory purposes only as the invention extends beyond these limited embodiments.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210","212","214"]},"The analyzer  can serve as a front-end and perform various tasks associated with profiling the Java application. As such, the analyzer  can be a compiler extension or tool suitable for analyzing a Java application. In any case, the analyzer  can operate to mark various Java Bytecodes (e.g., Bytecodes of a Java method). The marked Bytecodes typically represent Java Bytecodes that are associated with Java objects that are of interest for a particular application (e.g., Bytecode instructions that create objects that remain active during the execution of the Java application, and have a particular size, class, etc.)","Based on the analysis performed by the analyzer , the optional attributes generator  generates the optional attributes portion . As will be appreciated, the optional attributes portion  can be implemented in the attributes portion of the class file . The optional attributes can, for example, be implemented in accordance with the invention described in the Patent Application entitled \u201cFRAMEWORKS FOR ACCESSING JAVA CLASS FILES\u201d, filed May 9, 2001, and hereby incorporated herein by reference.","The optional attributes parser\/loader  can, in turn, parse and load the optional attributes  generated by the optional attributes generator . As will be appreciated, the optional attributes  can be used to indicate how to customize the Java runtime environment for a particular application. By way of example, the optional attributes  may indicate which features of the Java runtime environment need to be loaded (i.e., only marked features will be loaded). As another example, the optional attributes  may indicate that some Java objects require special treatment at runtime (e.g., objects that remain active throughout the execution of the Java application may be allocated in a particular portion of the memory).","Thus, through the use of optional attributes, the Java runtime environment  can be customized to meet the needs of a particular application. In addition, the customization of the Java runtime environment can be automated. To achieve automation, the runtime performance manager is provided. The runtime performance manager  can interact with the optional attributes generator  and optional attributes parser\/loader  to ensure that attributes are correctly generated and\/or features need are loaded. In other words, the runtime performance manager , among other things, ensures that the appropriate runtime environment is created (e.g., the required Java features are provided in the runtime environment, additional features are provided so that marked Java objects can be treated as desired).",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["302","202","2","304","206","2","206","204","2"]},"After creation of the at least one optional attribute, the method  proceeds to operation  where the at least one optional attribute is read. The at least one optional attribute can be read by an optional attributes parser\/loader (e.g., attributes parser\/loader  of FIG. ). The attributes parser\/loader operates to extract the optional attributes from the class file. Thereafter, at operation , appropriate features for the application are loaded based on the optional attributes. In other words, the Java runtime environment is customized for a particular application based on the optional attributes that were read.","As will be appreciated, the loading of the appropriate features can be performed at runtime. Furthermore, this loading can be monitored and\/or at least partially performed by a runtime performance manager which can interact with the optional attributes generator and the optional attributes parser\/loader.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","b":["400","401","401"]},"It should also be noted that optimizations 1\u2212N can be generated by an analyzer (not shown) and\/or be stored in a database  of a runtime performance manager . In any case, based on the optimizations 1\u2212N, the optional attribute generator  generates optional attributes  in a class file . In addition, the optional attribute generator  generates an Application Programming Interface (API)  that can be used as an interface to an optional attributes parser\/loader . In one embodiment, the optional attribute generator  generates the Application Programming Interface (API)  in C programming language. As such, the Application Programming Interface (API)  includes functions suitable for performing various operations on the optional attributes  of the class file  (e.g., read the first optional attribute, get the next optional attribute, get the last optional attribute, find a particular attribute, etc.)","As noted above, the optional attributes parser\/loader  in conjunction with the runtime performance manger can customize the Java runtime environment . In other words, the Java runtime environment  is customized so as to provide the optimizations 1\u2212N. It should be noted that the optional attributes generator  can update the database . In addition, the optional attributes generator  can optionally perform a variety of other tasks. These tasks include generation of a description of attributes, for example, in Extensible Markup Language (XML) format.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["500","500","401","4","502","504","506","508","510"]},"The many features and advantages of the present invention are apparent from the written description, and thus, it is intended by the appended claims to cover all such features and advantages of the invention. Further, since numerous modifications and changes will readily occur to those skilled in the art, it is not desired to limit the invention to the exact construction and operation as illustrated and described. Hence, all suitable modifications and equivalents may be resorted to as falling within the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be readily understood by the following detailed description in conjunction with the accompanying drawings, wherein like reference numerals designate like structural elements, and in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
