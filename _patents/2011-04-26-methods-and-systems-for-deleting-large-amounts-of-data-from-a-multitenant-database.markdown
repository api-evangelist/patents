---
title: Methods and systems for deleting large amounts of data from a multitenant database
abstract: A bulk delete for remote database access is provided. A delete request is received over an API for a multitenant database. The delete can be for either a soft delete or a hard delete, where hard delete allows the system to skip use of a recycle bin. Multiple batch jobs are created to implement the delete request, and the batch jobs are executed asynchronously with respect to the request until the request is satisfied. Results for each batch job can be stored and provided to a client to indicate results of the delete operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635250&OS=08635250&RS=08635250
owner: 
number: 08635250
owner_city: 
owner_country: 
publication_date: 20110426
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED CASES","FIELD","COPYRIGHT NOTICE\/PERMISSION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims the benefit of priority of U.S. Provisional Patent Application No. 61\/327,992, filed Apr. 26, 2010, which is incorporated herein by reference.","Embodiments described are related generally to database management, and embodiments described are more particularly related to deleting large amounts of data from a multitenant database.","Portions of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever. The copyright notice applies to all data as described below, and in the accompanying drawings hereto, as well as to any software described below: Copyright\u00a92011, Salesforce.com Inc., All Rights Reserved.","In many conventional database systems, users access their data resources in one logical database, from a user's own systems. Access to a database consumes system resources, as the database system must process and respond to requests as well as accessing storage to read, write, and\/or delete data. Deleting records or entries from a database has traditionally been done by identifying records for deletion and executing a request for deletion of one or more of the identified records at a time. While manual deleting may be adequate for small numbers of records to delete, there are significant disadvantages to such an approach when dealing with larger numbers of records, especially when using remote database access.","Deleting large numbers of records could be handled by making a large request to delete the large number of records all from one request. However, performing a large delete would require a significant number of resources to implement the delete operation. For example, there may be a significant burden on the database system to make available the network bandwidth, processing resources, process threads, database connections, or other resources necessary to implement the delete request.","Another approach to deleting a large number of records would be by generating many requests. However, dealing with generating numerous requests is time consuming both to generate, as well as to perform. There is also not generally a good way of knowing when would be a good time to issue requests or not, and thus the issues of resource consumption made above would stilt be a problem with generating multiple requests instead of a single large request.","Descriptions of certain details and implementations follow, including a description of the figures, which may depict some or all of the embodiments described below, as well as discussing other potential embodiments or implementations of the inventive concepts presented herein. An overview is provided below, followed by amore detailed description with reference to the drawings.","As described herein, a bulk delete is provided for either soft delete or hard delete in a multitenant database system (MTS). The MTS is accessed remotely by a client, and can provide a hulk delete through a web services API (application program interface). For either the soft or hard delete cases, multiple batch jobs are generated to fulfill the delete request. In one embodiment, the batch jobs are executed under a delete job generated to execute the delete request. The batch jobs are executed asynchronously with respect to the request from the client.","The bulk delete API (or APIs if both soft and hard delete APIs are provided) allows a client to make a single request for all requested deletes. Thus, the delete as described herein provides the simplicity of not having to generate multiple requests. The breaking of single request into multiple batch jobs within the MTS allows the request to be executed in the sys in smaller portions, which provides better resource sharing in the MTS.","As referred to herein, a multitenant database stores data for multiple client organizations, which are each identified by a tenant ID. An MTS is a database system with a multitenant database. One or more users can be associated with each tenant ID. The one or more users of each client organization access data identified by the tenant ID associated with the respective client organization. The multitenant database is typically a database stored and hosted remote from the client organization. Typically, the multitenant database is hosted by an entity (e.g., company) separate from the client organization. An MTS as described herein can be said to provide on-demand database services. An MTS is typically a hosted system that provides as much database storage and service as required by each tenant.","It will be understood that because multiple tenants share the database system resources (e.g., processing, network bandwidth, process threads, database connections, memory, storage), breaking a single delete request into multiple, smaller jobs can prevent a single tenant from monopolizing the system resources. Instead, batch jobs can be executed by tenant ID as the system has available resources and scheduling space for the tenant.","Contrast the delete provided herein with traditional SOAP (simple object access protocol) APIs used for delete in remote database access. Traditional SOAP APIs are synchronous, which means they will tie up database system resources until the delete operation is completed. Thus, consider the example of a multitenant system with 1000 records to delete in a delete request. There will be a significant delay to execute the deletion of the 1000 records. The result would be one tenant consuming system resources for the entire deletion process. As described herein, performing the bulk delete operations asynchronously in smaller chunks allows each tenant to appropriately \u201cget in line\u201d for system resources, while still being able to accomplish a hulk operation efficiently for the end user.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","110","130","120","110","130","120","110","130","120"]},"MTS  represents a remote database system that provides on-demand database service to client . Application (app) server  represents a server of MTS , and may receive and process queries and\/or delete requests from client . It will be understood that application server  could be one of many (e.g., a pool or a coordinated group of) application servers. Application server  processes the delete requests discussed herein, including executing the delete operations. In one embodiment, more than one application server  executes delete operations for a single delete request, and may all, for example, reference the same delete job to associate the operations with the delete job that satisfies the delete request.","Database  includes the hardware storage resources, and software components that execute on processing resources to enable access to the data. A database may be considered a structured approach to storing and accessing data stored in storage resources (such as implementing a relational model, object oriented model, or an object-relational model for data storage). There are many different implementations of a database, and the specific implementation is not relevant to the discussion herein. The database system includes the storage and processing resources, including interface hardware and software (such as physical network connections, network protocol stacks, security elements, and other components for interfacing with the stored data).","In environment , the elements within the dashed box connected to application server  represent elements that may be part of application server . Similarly, the various elements in the respective dashed boxes connected to database  represent elements that may be part of database . It will be understood that other elements could be used, and the elements shown represent functionality that may be implemented in the application server or the database of MTS .","In one embodiment, applications server  includes bulk delete API (application program interface) , registration process , execution process , and physical delete process .","API  represents a callable mechanism that a user of client  can invoke (either manually or through an application executing on client  or on MTS ) to implement a bulk delete. The bulk delete is described herein as a mechanism that allows the user to specify (e.g., in a file with the request) multiple entries or records to be deleted. In one embodiment, API  is available via a web service to client . Thus, client  may access MTS  via a browser and generate delete requests through a web service triggers API  within MTS .","In one embodiment, invoking API  is a protected operation. Thus, a user profile perm (configuration value) identifies which users within a company can use the API. Users within a company are users associated within a tenant ID within MTS . In one embodiment, the configuration value may be off by default, and should be enabled to allow a user profile to include access to the API.","In one embodiment, registration process  registers a delete job with scheduler  of database . Scheduler  provides scheduling services for operations executed on database . Registering a process with scheduler  provides an identifier to recognize an individual job with the scheduler. In one embodiment, registering a delete job allows MTS  to split the job into multiple batch jobs, and potentially across multiple application servers , all associated with the registered delete job. Thus, multiple batch deletes, each implementing a delete operation for one or more entries, can all execute tinder a single registered delete job","Execution process  represents the execution resources of application server  to execute one or more batch jobs to implement the delete job to respond to the bulk delete request. In one embodiment, application server  includes physical delete process  separate from other delete processes used to respond to user requests. Thus, a user may request a delete, but not have any direct access to physical delete . Rather, physical delete  could be completely controlled by the system. Physical delete  can be executed in response to execution of a requested delete, or could simply be run on a schedule.","As described above, physical delete  is a process to make hardware resources available within MTS . Soft delete marks entries as deleted, but they are still accessible and could be undeleted. Hard delete prevents undeletion, and removes the entries from a filesystem or registry of the database. Physical delete  reallocates physical storage resources that are available.","In one embodiment, database  includes job table , which represents a table of pending jobs that request access to the database. Job table  may be limited to registered jobs, whereas pending access requests are placed in an execution queue. Similarly, batch table  allows database  to monitor and manage batch jobs, and associate the results of the batch jobs back to any jobs of job table  that they may be associated with.","Results  represent delete results generated by delete jobs and batch jobs executed within database . As discussed above, results can be combined for the various batch jobs and sent to indicate the complete delete job results. Thus, results can be generated and stored for each batch job until the entire delete job is completed. Message queue  represents any mechanism used to combine the results of the various related delete batch jobs created to execute the requested bulk delete. In one embodiment, multiple results are stored together and returned as a group to indicate the operations performed in response to the delete request.","In one embodiment, database  includes recycle bin . Recycle bin  may be a virtual representation of records that are soft deleted. In one embodiment, recycle bin  is a storage of delete events that have been executed, and includes pointers to affected database entries. In one embodiment, soft delete is a default delete method in the system. Soft deleted records count towards storage space against the tenant organization, and may result in a performance hit.","A hard delete can be seen as a method of delete that effectively skips recycle bin , and makes the specified records immediately eligible for physical delete. Thus, physical delete  can clean up the deleted records the next time it runs. The ability to skip recycle bin  while deleting a large amount of data using a bulk delete API  may provide a more efficient, better user experience. In one embodiment, the events in the recycle bin expire after 45 days; but it will be understood that other intervals may also or alternatively be supported.","In one embodiment, when physical delete  runs, it checks whether the deleted records have an event in recycle bin  or not. If no event is found in the recycle bin, the deleted records are physically deleted. Thus, in one embodiment, soft deleted records would normally stay in database  for 45+ days (the 45 days being the time to expire, and the \u2018+\u2019 being the time until the physical delete process runs the next time after expiration of the records).","In one embodiment, recycle bin  is implemented more \u201cvirtually\u201d, with each entry or record including a field that indicates its status as soft deleted or hard deleted. Thus, a recycle bin storage may not be required, and the physical delete executes as a database process in the background, such as a garbage collector or crawler.","In one embodiment, database  consists of multiple object tables , which include the records or entries discussed herein. As suggested above, in one embodiment, in one embodiment recycle bin  includes delete pointers , which represent delete \u201cevents\u201d pointing to specific elements of object tables . Delete pointers  could also point to elements of database  even assuming the storage was not organized as object tables .","While specific reference is made above to , in general, as implemented herein, bulk delete is provided for allow deletion of large amounts of data from an on-demand database environment.","Thus, it will be understood that a bulk delete API as described herein has a different architecture compared to previous delete mechanisms, storing a job, and asynchronously executing it in pieces as resources become available. In one embodiment, a user provides the multiple identified records or entries for deletion in a CSV (character-separated value) file or XML (extensible markup language) file. The individual batch jobs can delete a portion of the IDs specified in such a request file.","As suggested above, bulk delete APIs can be provided for either \u2018soft\u2019 delete, \u2018hard\u2019 delete, or both. Stated simply, soft delete leaves the record in the database, and allows for a process to \u2018undelete\u2019 a deleted entry. Hard delete, by contrast, does not allow undelete. Different mechanisms for soft delete can be performed, including but not limited to creating a deleted pointer, moving the records to a specific location, changing a field within an entry to indicate the record is deleted, or some other mechanism.","In one embodiment, hard delete does not itself remove content, but merely flags entries for deletion. In one embodiment, a system with a soft delete process also includes a physical delete process. Physical delete refers to operations on the storage space to removing the data from the system, which frees up the storage space previously occupied by the entry. Hard delete can be implemented as a physical delete process, or as a process that marks entries for removal by the physical delete process the next time it is run. Thus, a soft deleted entry may be valid for a threshold amount of time (e.g., 45 days, 90 days) prior to being invalid and physically deleted from the system, and a hard deleted entry is invalid immediately.","It will be understood that the freeing up of storage space can be delayed significantly compared to hard delete (up to several weeks, depending on how soft delete thresholds are implemented). There are certain queries in database implementations that cause the system to hit the database to access soft deleted entries to respond to the query. Thus, in addition to not freeing up storage space (at least not immediately), soft delete may leave entries in the system that will decrease system efficiency for certain queries. In contrast, hard delete eliminates the entry, and thus prevents the entry from being available for access by queries. Thus, the overall efficiency of the system can be improved by use of hard delete.","It will be understood that hard delete may not make the delete operation itself any faster. Rather, the hard delete allows saving on storage space and avoid future performance degradation from large amounts of soft deleted data. However, a bulk delete API operation is very fast compared to other API operations. Additionally, in one embodiment, the database system load balances among multiple application servers to implement the multiple batch jobs. Use of a single delete job does not allow such load balancing. The use of multiple servers can further increase the speed of the bulk delete operation, assuming resources are available among multiple application servers.","In one embodiment, the processing of a delete query is still synchronous, but the amount of processing required is greatly reduced. Thus, a bulk delete query can be stored and acknowledged synchronously, while generating and executing batch jobs is asynchronous with respect to the query. Additionally, providing results to the client to indicate the state of the bulk delete operation cannot be synchronous with respect to the request if the execution of operations to produce the results is asynchronous. In one embodiment, a client polls the database system to request results. For example, a request acknowledgement could return a handle or other identifier that will be used by the client to request results of the bulk delete. Alternatively, the database system can push the results to the client, either based on a schedule, as each batch job finishes, or when the entire delete job is completed.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIG. 2"],"b":["202","204","206","202"]},"Client  requests a delete, , for example, through a bulk delete available over a web services connection with a database system. In one embodiment, the delete request identifies the database entries for deletion, as well as a tenant identifier associated with client . Application server  receives the request and generates a delete job for the request, . The delete job created is for deletion of all entries identified in the delete request.","Application server  acknowledges the request synchronously, , for example by sending an acknowledgement response to client . While the request may be received and acknowledged synchronously, the execution of the delete is asynchronous. In one embodiment, application server  registers the generated delete job with a database scheduler, . Database  through its scheduler may then register the job for scheduling, . As shown above with respect to , the database may enter the job in a job table.","The application server further creates multiple batch jobs, , to execute the delete job. In one embodiment, each batch job is identified to database , which creates a table for each batch job, . The table can provide a process space for the batch job, as well as a space to store results. Application server  executes the batch jobs, . The execution may be performed across multiple application server instances, each referencing a corresponding batch job and table.","In one embodiment, the executed operations are sent to database , which enters the operations in an operation queue, . Delete operations may result in marking a \u2018deleted\u2019 field as being deleted (e.g., setting a bit to \u20181\u2019). Additionally, in one embodiment, database  generates a delete pointer for each deleted entry, and adds an entry in a recycle bin, . In one embodiment, the database sets a delete pointer expiration, , for the created delete pointers. Each batch job results is stored, , and the results are reported, , to application server . The results may be pushed or requested.","At any time after the delete request has been acknowledged, client  may request status of the delete job. Thus, client  may poll the application server (the MTS) for delete request results, . The application server could then return any known results, , to the client. The polling and responding can continue until the delete job is completed.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3"},"As referenced above, physical delete may be a process that is executed separately from soft or hard delete. The system determines to execute the physical delete process, . Such a determination to execute the physical delete process could be made in response to timing (e.g., a scheduled process), in conjunction with or in response to execution of a soft or hard delete process, or in response to a request by an administrator.","The physical delete process may be executed as one or more jobs, , on one or more application servers. The physical delete process may be a process owned by control logic of the database itself. In one embodiment, the physical delete process accesses a database entry, , and determines if the entry is marked for delete, . The determination may include checking a recycle bin for a delete event in the case where a recycle bin is implemented.","If the entry is not marked for delete, , the system determines if the entry is the last entry to access for the process, , and if not, it moves to the next entry and access the next database entry, . If the entry is the last entry, , the system completes the physical delete process, , and awaits the next time the process should be executed again.","If the entry is marked for delete, , the system removes the entry from the database,  (i.e., it physically deletes the entry), and generates a delete result, . It is possible that for some reason or other the deletion of the entry does not complete successfully, in which case the result would indicate the failure of the delete instead of the successful deletion. The results may be pushed to another process, or simply stored to await a request for the results.","The system can then determine if the entry is the last entry to check for physical deletion, , and either move to the next entry, , or complete the process, .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4","b":["400","400","440","410","420"]},"MTS  provides on-demand database services for environment . An on-demand database service, such provided by MTS , is a database system that is made available to an outside user as needed by the user (e.g., on the demand of the user). Thus, a user does not necessarily need to be concerned with building and\/or maintaining the database system, and rather can simply store and access data as needed from a remotely operated database system.","In one embodiment, MTS  stores information from one or more tenants into tables of a common database image or multitenant database (MTDB) . Accordingly, MTS  provides on-demand database service. A database image may include one or more database objects. A multitenant database stores data for various different tenants or organizations in a single database instance. Resources (such as memory, processing space, processing hardware, and other resources of the database system) are shared or allocated among the different tenants.","Multitenant database  includes tenant data , . . . , . The tenant data may be divided into different storage areas, which can be a physical and\/or a logical arrangement of data. In one embodiment, multitenant database  is accessed via a relational database management system (RDBMS) or the equivalent, which executes storage and retrieval of information against the database object(s). In one embodiment, multitenant database  is accessed via an object-oriented database management system (OODBMS) or the equivalent. In one embodiment, multitenant database  is accessed via an Object-relational database management system (ORDBMS) or the equivalent. It will be understood that an RDBMS manages data stored in the database based on a relational model, where data and data relationships are stored in tables. An OODBMS includes at least some integration of a database with an object-oriented programming language, and data is stored in the database in the same mode of representation as is provided in the programming language. An ORDBMS implements both a relational model and an object-oriented model, storing data in tables, and allowing representation of data consistent with a programming language.","Application platform  represents a framework that allows applications of MTS  to execute. Thus, application platform  includes the software components (such as an operating system) to allow execution of the applications. Hardware platform  provides hardware resources to enable the applications to execute on application platform , as well as enabling execution of management or control logic for MTS . In one embodiment, application platform  of MTS  enables creation, managing, and executing one or more applications developed by the provider of the on-demand database service, users accessing the on-demand database service via network , or third party application developers accessing the on-demand database service via network .","MTS  represents any type of system that may provide on-demand database service. In addition to application platform  and hardware platform , which includes processor resources  and memory resources , MTS  may include other components. MTS  includes network interface  to enable user devices to access MTS  over network . In one embodiment, MTS  includes system data , program code , and process space . System data  represents data specific to the running of MTS , rather than being tenant data. It is logically separated from the tenant storage, and may be physically separated (e.g., by designating storage areas or address ranges for system data). Program code  represents code to implement various functions of MTS , which enable the system to provide on-demand database service. Process space  represents a framework for executing MTS processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on MTS  include database indexing processes. It will be understood that MTS  may include more or fewer components than what is illustrated.","As mentioned above, environment  includes organizations  and , which represent tenants of MTS . Each organization may include one or more individual, and may be an individual or small company, up to a large corporation or organization. Thus, it will be understood that the number of user devices associated with each organization could potentially be hundreds or even thousands. Each organization is assigned a tenant identifier (ID) within MTS . Each tenant ID could have certain associated properties for use, depending on how the organization is configured. User device  is associated with organization , and access MTS  under the tenant ID of organization . Similarly, user devices  and  are associated with organization , and access MTS  under the tenants ID assigned to organization .","User devices , , and  may be any machine or system that is used by a user to access a database user system. For example, any of the user devices can be a handheld computing device, a mobile phone, a laptop computer, a work station, and\/or a network of computing devices. Each user device can be provided with an on-demand database service from MTS  via network .","Within an organization, users may be further given access privileges and\/or restrictions, as illustrated by data filter . As illustrated, user device  may access MTS  in accordance with whatever access is available to organization , while user device  has additional restrictions applied by data filter . In one embodiment, data filter  may additionally or alternatively provide specific user interface features for user  in accessing data from MTS .","The users of user devices , , and  may differ in their respective capacities, and the capacity of a particular user device might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user device to interact with MTS , that user device has the capacities assigned to that salesperson. However, an administrator using the same user device may have different capacities assigned to that administrator. In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level. Such enforcement could occur based on data filter , which can filter per device and\/or could filter for the entire organization (e.g., a central filter as opposed to distributed filtering).","Network  represents any network or combination of networks. A network is generically an interconnection of devices that communicate with each other. Network  can be or include any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. TCP\/IP (Transfer Control Protocol and Internet Protocol) networks are commonly used, such as the global internetwork of networks often referred to as the \u201cInternet.\u201d Reference to specific networks in certain examples herein is meant only to provide examples, and is not limiting.","In one embodiment, user devices , ,  (and other user devices not shown) communicate with MTS  over network  using TCP\/IP and, at a higher network level, use other common protocols to communicate, such as HTTP (HyperText Transfer Protocol), FTP (File Transfer Protocol), AFS (Andrew File System\u2014a distributed network filesystem using trusted servers), WAP (Wireless Access Protocol). In an example where HTTP is used, user device  might include an HTTP client commonly referred to as a \u201cbrowser\u201d for sending and receiving HTTP messages to and from an HTTP server at MTS  (not specifically shown, but which could be executed on hardware platform ). Such an HTTP server might be implemented as the sole network interface between MTS  and network , but other techniques might be used as well or instead. In one embodiment, the interface between MTS  and network  includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to data in MTS ; however, other alternative configurations may be used instead.","In one embodiment, MTS  implements a web-based customer relationship management (CRM) system. For example, in one embodiment, MTS  includes application servers configured to implement and execute CRM software applications as well as provide related data, code, forms, webpages and other information to and from user devices (e.g., , , ) and to store to and retrieve from a database system related data, objects, and webpage content. With a multitenant system, data for multiple tenants may be stored in the same physical database object; however, tenant data is typically arranged so that data of one tenant is kept logically separate from that of other tenants. The logical separation prevents one tenant from having access to another tenant's data. An express sharing of data among tenants is possible, which removes the logical separation. In one embodiment, MTS  implements applications other than or in addition to a CRM application. For example, MTS  may provide tenant access to multiple hosted (standard and custom) applications, including CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by application platform , which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in process space  of MTS .","In one embodiment, MTS  is configured to provide webpages, forms, applications, data and media content to user (client) device to support the access by user devices as tenants of MTS . In one embodiment, MTS  provides security mechanisms to keep each tenant's data separate unless the data is shared. More than one MTS may be used. If more than one MTS is used, the multiple systems may be located in close proximity to one another (e.g., in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g., one or more servers located in city A and one or more servers located in city B).","As used herein, each MTS could include one or more logically and\/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term \u201cserver\u201d refers to a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g., OODBMS, RDBMS, ORDBMS) as is known in the art. It will be understood that \u201cserver system\u201d and \u201cserver\u201d are often used interchangeably herein. Similarly, a database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, and might include a distributed database or storage network and associated processing intelligence or logic.","In one embodiment, multitenant database  includes recycle bin  and\/or scheduler . The concepts of both the recycle bin and the scheduler are discussed above, and will only be briefly discussed here. Recycle bin  can enable multitenant database  to generate and store delete events for specified entries to be deleted. Soft deleted entries are maintained \u201calive\u201d in the database via recycle bin  until their delete events expire. Hard deleted events do not need entries in the recycle bin, since they are marked for immediate deletion.","Scheduler  represents any mechanism used within the multitenant database to control the execution of operations within multitenant database . In a multitenant database it is important to perform scheduling in a way that allows for all tenants to have their proportional use of resources. Certain tenants may have access to more resources by virtue of being larger tenants and\/or by contracting for more services. Scheduler  may thus access contract or restrictions for the tenants to determine how to allocate resources among the tenants. A delete request is broken into multiple operations, which can be scheduled separately, and in accordance with the proportional scheduling for the tenant they belong to.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 5","FIG. 4"],"b":["500","400","500","540","510","510","510","540","540","500"]},"Environment  may include conventional, well-known elements that are explained only briefly here. For example, user device  (and any other user devices through which users access MTS ) could include a desktop personal computer, workstation, laptop, handheld device, cell phone or smart phone, or any wireless access protocol (WAP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection.","User device  includes processor , which represents one or more processor devices, and may be any combination of one or more processors. Processor  provides hardware means to execute programs and applications on user device . Memory  represents a memory system for user device , and may be any combination of one or more memory devices, short term, and\/or tong term memory. I\/O (input\/output)  represents any type of input and output devices such as keyboards, pointers and controllers, touchscreens, buttons, microphones, or other input mechanisms, and monitors, screens, printers, interfaces to networks, and\/or other output devices.","User device  includes network interface , which represents hardware interconnections and control logic and circuitry to enable user device  to connect to network . Network interface  also has associated drivers and possibly other software components to allow user programs to interface with the interconnection hardware. User device  includes client , which represents a program that allows a user of user device  to access information from network , such as accessing MTS . UI  represents a user interface component of client , or a user interface in which information from client  is presented on user device . Thus, UI  may be integrated with client , or it may be separate from client , but display data related to the execution of client . UI  is rendered on display or user interface hardware or device, which can be understood to be represented by UI .","In one embodiment, user device  runs an HTTP client as client . An HTTP client may be, for example, a browsing program or a browser, which may include a WAP-enabled browser in the case of a cell phone, PDA or other wireless device. The HTTP client allows a user (e.g., subscriber of MTS ) of user device  to access, process, and view information, pages, and applications available from MTS  over network , based on permissions and privileges. The user interface device of user device  can be used to access data and applications hosted by MTS , and to perform searches on stored data, and otherwise allow a user to interact with various GUI (graphical user interface) pages that may be presented to a user.","Similar to what is discussed above with reference to network  of environment , network  represents any network or group of networks over which access can be provided to MTS . Network  may include switching and\/or routing elements, cables, connectors, and other components. In one embodiment, at least part of network  is the Internet, referring to a specific internetwork of networks. However, it should be understood that other networks can be used in addition to or instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCP\/IP based network, any LAN or WAN or other network.","In one embodiment, user devices such as user device  (which may be client systems) communicate with application server  to request and update system-level and tenant-level data from MTS  that may require sending one or more queries to tenant data storage in database instance  and\/or system data in system database . In one embodiment, MTS  (e.g., application server ) automatically generates one or more SQL statements (e.g., one or more SQL queries) designed to access the desired information. System data storage in system database  may generate query plans to access the requested data from database instance .","In one embodiment, MTS  includes one or more application servers . From one perspective, application server  can be considered a network interface of MTS  to connect to network . Application server  exchanges (i.e., receives and\/or transmits) data with network , such as receiving requests and sending replies or sending data. Application servers  may share hardware resources for interfacing with network , or they may be assigned separate resources. In one embodiment, one or more of application servers  can be implemented as an HTTP application server.","In one embodiment, each application server  is configured to handle requests for any user associated with any organization that is a tenant. Thus, a request from user device  could be received and processed at any application server . There may be advantages to avoiding affinity for a user and\/or an organization or tenant to a specific application server , such as the ability to add and remove application servers from a server pool at any time for any reason, as well as for workload balancing among the servers. In an implementation where user and\/or tenant affinity is used, an application server could not be removed without completing its jobs and\/or handing off users to another server.","In one embodiment, an interface system implementing a load balancing function (e.g., an F5 Big-IP load balancer) is communicably coupled between application servers  and the user devices to distribute requests to the application servers . In one embodiment, the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms, such as round robin and observed response time, also can be used. For example, in certain embodiments, three consecutive requests from the same user could hit three different application servers , and three requests from different users could hit the same application server . In this manner, MTS  is multitenant, wherein MTS  handles storage of, and access to, different objects, data, and applications across disparate users and organizations. In one embodiment,","Each application server  includes elements to provide database access service and request processing. Application server  includes API (application programming interface)  and UI . UI  represents server-side components that provide user interface elements that are provided to user device  for display. API  provides an interface for users and\/or developers to access resident processes of MTS .","In one embodiment, application server  includes application (appl) platform , which provides a sub-environment on which applications hosted by application server  can be executed. Application platform  may include an operating system or other control logic, as well as business logic and common routines for use by the applications. As illustrated, application platform  includes application setup mechanism  that supports creation and management of applications, including configuration, by application developers, which may be saved as metadata into tenant data storage of database (db) instance . Save routines  represent the mechanisms used to store data in database instance , such as storing the application setup metadata. Such applications can be executed by subscriber users, for example, in process space .","In one embodiment, invocations to or related to such applications may be coded using PL\/SOQL (Procedural Language Salesforce Object Query Language) that provides a programming language style interface extension to API . Thus, PL\/SOQL  is capable of serving as a procedural extension to an on-demand database centric service API that allows flow control and transaction control to execute on a server in conjunction with database APIs (e.g., SOQL, data manipulation language (DML), or others). PL\/SOQL  can enable the capability to thread together multiple SOQL\/DML statements as a single unit of work on the server. PL\/SOQL  need not necessarily be considered a general purpose programming language, seeing that it may be implemented as heavily data focused, but is not necessarily implemented that way. In one embodiment, PL\/SOQL  can be used by developers to interlace with an on-demand database system, in contrast to traditional application developers' conventional tools, such as PL\/SQL (Structured Query Language) of ORACLE, Inc. of Redwood Shores, Calif., and others.","In one embodiment, PL\/SOQL  includes variable and expression syntax, block and conditional syntax, loop syntax, object and array notation, pass by reference, and other syntax known to other programming languages. Thus, full control over syntax and the ability to reference dynamic schema elements is provided with a new language and runtime for database services. Where embedded concepts that interface with on-demand database applications are provided, syntax and semantics that are easy to understand and which encourage efficient use of database APIs may also be employed. In one embodiment, PL\/SOQL  is implemented as a strong typed language with direct (non-quoted) references to schema objects such as Object and Field names (both standard and custom).","More details about PL\/SOQL language embodiments is discussed in commonly owned U.S. Provisional Patent Application 60\/828,192 entitled, PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS, by Craig Weissman, filed Oct. 4, 2006, now expired, which is incorporated in its entirety.","In one embodiment, invocations to applications may be detected by one or more system processes, which manage retrieving application metadata  for the subscriber making the invocation and executing the metadata as an application in a virtual machine. Metadata  provides data related to access and\/or use of data stored in database instance . In one embodiment, metadata is stored in a separate table within database instance , and in an alternative embodiment, metadata  is stored with other data elements of user storage (such as with user storage  of table -.","In one embodiment, application server  includes process space , which may include tenant process spaces - through -N (for some integer number N of process spaces configured in application server ), tenant management process space  and system process space . It will be understood that process space  is an abstraction to illustrate the resources allocated for execution of processes (e.g., programs or applications) within application server . The skilled reader recognizes that memory and processor and other hardware resources may need to be allocated, as well as software resources to support the execution of a process. The processes may be executed as separate threads, or may share a thread, in one embodiment, the number N of tenant processes is equal to a number of subscriber tenants. In another embodiment, the number N of tenant processes may be higher than the number of subscriber tenants. Tenant management process  provides management of the other processes, including determining when certain processes execute. System process  executes operations related to functions of MTS .","Each application server  may be configured to tenant data storage in database instance  and the tenant data stored therein, and to system data storage of system database  and the system data stored therein to serve requests of user devices. As mentioned above, in one embodiment, tenant data is separated logically, and stored in the same multitenant database. In one embodiment, database instance  stores data in tables - through -M, where M is some integer number of tables. In one embodiment, different tables store data of different types. Application metadata  may be implemented as a separate table. Alternatively, one of the tables - through -M could be a table that stores varying types of objects, which are defined through metadata stored in the table.","In one embodiment, database instance is further implemented with user storage space distinct (e.g., identifiable) from its associated tenant. Thus, for example, user data may include the tenant ID, as well as an identifier specific to a user. Thus, storage  may represent either or both of tenant storage or user storage. For example, a copy of a user's most recently used (MRU) items might be stored to in user storage within database instance . Similarly, a copy of MRU items for an entire organization that is a tenant might be stored to a tenant storage area of database instance . In one embodiment, the tenant data and the system data (as illustrated by system database ) are stored in separate databases.","Application servers  may be communicably coupled to database systems, e.g., having access to system database  and tenant database instance , via a different network connection. For example, one application server may be coupled via a network (e.g., the Internet), another application server might be coupled via a direct network link, and another application server might be coupled by yet a different network connection. The application servers may connect to the database systems via TCP\/IP or another transport protocol, at least partially depending on the network interconnect used.","Regarding storage in database instance , one tenant might be a company that employs a sales force where each salesperson uses MTS  to manage their sales process. Thus, a user might maintain contact data, leads data, customer follow-up data, performance data, goals and progress data, and other data, all applicable to that user's personal sales process (e.g., storage , which may be tenant storage). Thus, all of the data and the applications to access, view, modify, report, transmit, calculate, or perform other operations can be maintained and accessed via a user device having nothing more than network access. In an example of MTS arrangement, the user can manage his or her sales efforts and cycles from any of many different user devices. For example, if a salesperson is visiting a customer and the customer has a lobby with Internet access, the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.","While each user's data might be separate from other users' data regardless of the employers of each user, some data might be organization-wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus, there might be some data structures managed by MTS  that are allocated at the tenant level while other data structures might be managed at the user level. Because MTS  may support multiple tenants including possible competitors, MTS  should have security protocols that keep data, applications, and application use separate. Additionally, because many tenants may opt for access to an MTS rather than maintain their own system, redundancy, up-time, and backup are additional functions that may be implemented MTS . In addition to user-specific data and tenant specific data, MTS  may also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports, news, postings, and the like that are sharable among tenants.","In one embodiment, each database instance  can be viewed as a collection of objects, such as a set of logical tables, containing data fitted into predefined categories, A \u201ctable\u201d is one representation of a data object, and may be used herein to simplify the conceptual description of objects and custom objects according to what is described herein. It should be understood that \u201ctable\u201d and \u201cobject type\u201d may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields.","For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, or other information. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, or other fields. In one embodiment, a multitenant database has standard entity tables for use by all tenants. For CRM database applications, such standard entities might include tables for Account, Contact, Lead, and Opportunity data, each containing pre-defined fields. Thus, tables - through -M may include standard, defined tables.","In one embodiment, tenants may be allowed to create and store custom objects, or they may be allowed to customize standard entities or objects, for example by creating custom fields for standard objects, including custom index fields. U.S. patent application Ser. No. 10\/817,161, filed Apr. 2, 2004, entitled \u201cCustom Entities and Fields in a Multi-Tenant Database System\u201d, teaches systems and methods for creating custom objects as well as customizing standard objects in a multitenant database system. In one embodiment, for example, all custom entity data rows are stored in a single multitenant physical table, which may contain multiple tables per organization. It is transparent to customers that their multiple \u201ctables\u201d are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 6"},"A server of a multitenant database system (MTS) receives a bulk delete request from a client over a network via a delete API, . The server may respond synchronously to the request, and then execute the request asynchronously. In one embodiment, the server determines a tenant ID associated with the request, . The tenant ID may be a part of every request, or it may be determined by referencing the client ID of the requestor.","The server determines if soft delete or hard delete is requested, . In one embodiment, the two different types of delete are identified by separate APIs. Thus, the type of delete is identified by the request. The system determines from the request or otherwise what type of delete will be implemented. Except where identified, the following operations apply to both hard and soft delete. The server creates a delete job in response to the delete request, . The delete job has associated with it all the records for which delete are requested in the bulk delete request received. In one embodiment, the delete job is registered with the multitenant database for scheduling, .","The server creates multiple batch jobs to implement the delete job, . In one embodiment, the size of the batch jobs is predetermined, for example, to delete a certain number (e.g., 50, 100, 200) of records at a time. Thus, the server can simply divide the delete job into batch jobs based on the number of records for which delete is requested. More sophisticated algorithms could be used, for example, by considering a total number of records requested to be deleted, and dividing the delete job into 10 batch jobs for a certain range, 20 for a next range of deletes, and so forth. It will be understood that more complicated algorithms required additional logic to execute.","The server or servers selected for execution of the batch jobs executed the batch jobs asynchronously with respect to the request, . The execution of the batch jobs depends upon the delete type. If the delete type is a hard delete, , then a hard delete process is executed. It will be understood that a single request will be for hard delete or soft delete of all records identified\u2014there is not a request that performs hard delete on certain records and soft delete on others. For hard delete, in one embodiment, the identified records are set for delete to be eliminated by the next execution of a physical delete process, .","For soft delete, , in one embodiment the database creates a delete pointer for each deleted entry, . In one embodiment, the database sets a delete timer for each deleted entry, . The delete timer may be a timestamp of the time of creation of a delete event, or a time value stored and associated with the record to which it corresponds.","Whether for soft delete or hard delete, the database stores the results of each delete operation, . The results can be passed back to the client to indicate progress of the delete job.","In one embodiment, a client can poll the MTS for status of the delete job (by identifying the delete request that it sent, or identifying the delete job via an identifier sent in a synchronous acknowledgement). Thus, the server receives a poll request from the client, . The server reports any known delete results to the client in response to the request, . The server receives the results from the database and can then pass them to the client.","Various operations or functions are described herein, which may be described or defined as software code, instructions, configuration, and\/or data. The content may be directly executable (\u201cobject\u201d or \u201cexecutable\u201d form), source code, or difference code (\u201cdelta\u201d or \u201cpatch\u201d code). The software content of the embodiments described herein may be provided via an article of manufacture with the content stored thereon, or via a method of operating a communications interface to send data via the communications interface. A machine readable medium or computer readable medium may cause a machine to perform the functions or operations described, and includes any mechanism that provides (i.e., stores and\/or transmits) information in a form accessible by a machine (e.g., computing device, electronic system, or other device), such as via recordable\/non-recordable storage media (e.g., read only memory (ROM), random access memory (RAM), magnetic disk storage media, optical storage media, flash memory devices, or other storage media) or via transmission media (e.g., optical, digital, electrical, acoustic signals or other propagated signal). A communication interface includes any mechanism that interfaces to any of a hardwired, wireless, optical, or other medium to communicate to another device, such as a memory bus interface, a processor bus interface, an Internet connection, a disk controller. The communication interface can be configured by providing configuration parameters and\/or sending signals to prepare the communication interface to provide a data signal describing the software content.","Various components described herein may be a means for performing the operations or functions described. Each component described herein includes software, hardware, or a combination of these. The components can be implemented as software modules, hardware modules, special-purpose hardware (e.g., application specific hardware, application specific integrated circuits (ASICs), digital signal processors (DSPs), etc.), embedded controllers, hardwired circuitry, etc.","Besides what is described herein, various modifications may be made to the disclosed embodiments and implementations without departing from their scope. Therefore, the illustrations and examples herein should be construed in an illustrative, and not a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following description includes discussion of figures having illustrations given by way of example of implementations of embodiments described. The drawings should be understood by way of example, and not by way of limitation. As used herein, references to one or more \u201cembodiments\u201d are to be understood as describing a particular feature, structure, or characteristic included in at least one implementation. Thus, phrases such as \u201cin one embodiment\u201d or \u201cin an alternate embodiment\u201d appearing herein describe various embodiments and implementations, and do not necessarily all refer to the same embodiment. However, they are also not necessarily mutually exclusive.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
