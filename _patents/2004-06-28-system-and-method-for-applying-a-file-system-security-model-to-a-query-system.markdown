---
title: System and method for applying a file system security model to a query system
abstract: A system and method for applying a file system security model to a query system. In one embodiment, the system may include a storage device configured to store data and a file system configured to manage access to the storage device, to store file system content, and to implement a first security model, where the first security model is configured to control access to the file system content. The system may further include a query system configured to query the file system content, and security mapping functionality configured to apply the first security model to the query system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07562216&OS=07562216&RS=07562216
owner: Symantec Operating Corporation
number: 07562216
owner_city: Mountain View
owner_country: US
publication_date: 20040628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to file-based storage systems.","2. Description of the Related Art","Computer systems often process large quantities of information, including application data and executable code configured to process such data. In numerous embodiments, computer systems provide various types of mass storage devices configured to store data, such as magnetic and optical disk drives, tape drives, etc. To provide a regular and systematic interface through which to access their stored data, such storage devices are frequently organized into hierarchies of files by software such as an operating system, or a file system included within or configured to interface with an operating system. Often a file defines a minimum level of data granularity that a user can manipulate within a storage device, although various applications and operating system processes may operate on data within a file at a lower level of granularity than the entire file.","In some file-based computer systems, various types of information about files, also referred to as metadata, may be stored in addition to the files themselves. Various file system interfaces, such as application programming interfaces (APIs) may be provided to allow users to access files and metadata. In some instances, these interfaces may support various security features with respect to files and metadata, such that different users may have different privileges with respect to different data. For example, a file system may distinguish between a file owner and a non-owner, allowing the owner to perform certain operations that non-owners may not (such as, e.g., modification or deletion of the owned file).","In some computer system embodiments, additional paths for accessing file system data or metadata may be provided externally to the file system. For example, a separate query system may be provided to allow file data or metadata to be queried according to a query language. However, such alternate paths for accessing file system data or metadata are typically not subject to the security features imposed by the file system. Consequently, the security of file system contents may be compromised. For example, if a query system does not recognize a file owner vs. non-owner distinction established by a file system, a non-owner of a given file may be able to exploit the contents of the file via the query system (e.g., to read or modify file contents) in a way that would be disallowed by the file system. Such security discrepancies may lead to a compromise in computer system integrity, data corruption or theft, or other deleterious consequences.","Various embodiments of a system and method for applying a file system security model to a query system are disclosed. In one embodiment, the system may include a storage device configured to store data and a file system configured to manage access to the storage device, to store file system content, and to implement a first security model, where the first security model is configured to control access to the file system content. The system may further include a query system configured to query the file system content, and security mapping functionality configured to apply the first security model to the query system.","In one specific implementation of the system, the query system may be further configured to store an index of file system content in an index format, and the security mapping functionality may include a security converter corresponding to the first security model. The security mapping functionality applying the first security model to the query system may include the security converter mapping security information corresponding to a given file system content item to the index format, and the query system may be further configured to store the mapped security information in the index.","In another specific implementation of the system, the query system may be configured to implement a second security model, and applying said first security model to the query system may include mapping the first security model to the second security model.","A method is also contemplated which, in one embodiment, may include storing file system content, implementing a first security model, where the first security model is configured to control access to said file system content, and applying the first security model to a query system configured to query the file system content.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Computer System Overview","Turning now to , a block diagram of one embodiment of a computer system is shown. In the illustrated embodiment, system  includes a plurality of host devices and coupled to a plurality of storage devices and via a system interconnect . Further, host device includes a system memory  in the illustrated embodiment. For simplicity of reference, elements referred to herein by a reference number followed by a letter may be referred to collectively by the reference number alone. For example, host devices and and storage devices and may be referred to collectively as host devices  and storage devices .","In various embodiments of system , host devices  may be configured to access data stored on one or more of storage devices . In one embodiment, system  may be implemented within a single computer system, for example as an integrated storage server. In such an embodiment, for example, host devices  may be individual processors, system memory  may be a cache memory such as a static RAM (SRAM), storage devices  may be mass storage devices such as hard disk drives or other writable or rewritable media, and system interconnect  may include a peripheral bus interconnect such as a Peripheral Component Interface (PCI) bus. In some such embodiments, system interconnect  may include several types of interconnect between host devices  and storage devices . For example, system interconnect  may include one or more processor buses (not shown) configured for coupling to host devices , one or more bus bridges (not shown) configured to couple the processor buses to one or more peripheral buses, and one or more storage device interfaces (not shown) configured to couple the peripheral buses to storage devices . Storage device interface types may in various embodiments include the Small Computer System Interface (SCSI), AT Attachment Packet Interface (ATAPI), Firewire, and\/or Universal Serial Bus (USB), for example, although numerous alternative embodiments including other interface types are possible and contemplated.","In an embodiment of system  implemented within a single computer system, system  may be configured to provide most of the data storage requirements for one or more other computer systems (not shown), and may be configured to communicate with such other computer systems. In an alternative embodiment, system  may be configured as a distributed storage system, such as a storage area network (SAN), for example. In such an embodiment, for example, host devices  may be individual computer systems such as server systems, system memory  may be comprised of one or more types of dynamic RAM (DRAM), storage devices  may be standalone storage nodes each including one or more hard disk drives or other types of storage, and system interconnect  may be a communication network such as Ethernet or Fibre Channel. A distributed storage configuration of system  may facilitate scaling of storage system capacity as well as data bandwidth between host and storage devices.","In still another embodiment, system  may be configured as a hybrid storage system, where some storage devices  are integrated within the same computer system as some host devices , while other storage devices  are configured as standalone devices coupled across a network to other host devices . In such a hybrid storage system, system interconnect  may encompass a variety of interconnect mechanisms, such as the peripheral bus and network interconnect described above.","It is noted that although two host devices  and two storage devices  are illustrated in , it is contemplated that system  may have an arbitrary number of each of these types of devices in alternative embodiments. Also, in some embodiments of system , more than one instance of system memory  may be employed, for example in other host devices  or storage devices . Further, in some embodiments, a given system memory  may reside externally to host devices  and storage devices  and may be coupled directly to a given host device  or storage device  or indirectly through system interconnect .","In many embodiments of system , one or more host devices  may be configured to execute program instructions and to reference data, thereby performing a computational function. In the illustrated embodiment, such program instructions and\/or data are stored as code  within system memory . In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store such program instructions and data. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM included in system  as storage devices . A computer-accessible medium may also include volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of system  as system memory . Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link, which may be included in some embodiments of system  as system interconnect .","In some embodiments, program instructions and data stored within a computer-accessible medium as described above may implement an operating system that may in turn provide an environment for execution of various application programs. For example, a given host device  may be configured to execute a version of the Microsoft Windows operating system, the Unix\/Linux operating system, the Apple Macintosh operating system, or another suitable operating system. Additionally, a given host device may be configured to execute application programs such as word processors, web browsers and\/or servers, email clients and\/or servers, and multimedia applications, among many other possible applications. It is contemplated that in some embodiments, any of the software methods or modules described in greater detail below (whether operating system components, applications, or other types of software components) may be implemented as one or more instances of code  within one or more instances of a computer-accessible medium, such as system memory , for example.","During execution on a given host device , either the operating system or a given application may generate requests for data to be loaded from or stored to a given storage device . For example, code corresponding to portions of the operating system or an application itself may be stored on a given storage device , so in response to invocation of the desired operation system routine or application program, the corresponding code may be retrieved for execution. Similarly, operating system or application execution may produce data to be stored.","In some embodiments, the movement and processing of data stored on storage devices  may be managed by a software-based storage system. One such embodiment is illustrated in , which shows an application layer  interfacing to a plurality of storage devices A-C via a content aware storage system . Some modules illustrated within  may be configured to execute in a user execution mode or \u201cuser space\u201d, while others may be configured to execute in a kernel execution mode or \u201ckernel space.\u201d In the illustrated embodiment, application layer  includes a plurality of user space software processes A-C. Each process interfaces to storage system  via a plurality of application programming interfaces (APIs) A-B, such that each of processes  may have access to each of APIs A-B. Storage system  includes a kernel space storage management system , shown interfacing to application layer  via API A, and a user space query system , shown interfacing to application layer  via API B. In the illustrated embodiment, storage management system  further interfaces to storage devices A-C.","It is contemplated that in some embodiments, an arbitrary number of processes  and\/or storage devices  may be implemented. It is further contemplated that in some embodiments, all or portions of query system  may be implemented in kernel space, and that in some embodiments, processes configured to execute in kernel space may be configured to access storage system  via APIs  or other APIs specific to kernel space processes.","In one embodiment, each of processes  may correspond to a given user application, and each may be configured to access storage devices A-C through calls to APIs . APIs  provide processes  with access to various components of storage system . For example, in one embodiment APIs  may include function calls exposed by storage system  that a given process  may invoke, while in other embodiments API  may support other types of interprocess communication. In one embodiment, storage devices  may be illustrative of storage devices  of . Additionally, in one embodiment, any of the components of storage system  and\/or any of processes  may be configured to execute on one or more host devices  of , for example as program instructions and data stored as code  within a computer-accessible medium such as system memory  of .","As described in greater detail below in conjunction with the descriptions of , storage system  may be configured to provide a variety of storage-related services. For example, in one embodiment storage management system  may be configured to organize the data stored by storage devices  using a file system, such that various processes  may store and manipulate data as hierarchical files. Additionally, storage system  may be configured to monitor operations to access and\/or manipulate stored data and to generate records of such operations. Query system  may be configured to provide processes  with an interface through which to query the data stored within storage devices  by storage management system  as well as records of operations to access such data.","Storage Management System and File System","As just noted, in some embodiments storage management system  may provide data and control structures for organizing the storage space provided by storage devices  into files. In various embodiments, the data structures may include one or more tables configured to store information such as, for example, the identity of each file, its location within storage devices  (e.g., a mapping to a particular physical location within a particular storage device), as well as other information about each file as described in greater detail below. Also, in various embodiments, the control structures may include executable routines for manipulating files, such as, for example, function calls for changing file identities and for modifying file content. Collectively, these data and control structures may be referred to herein as a file system, and the particular data formats and protocols implemented by a given file system may be referred to herein as the format of the file system.","In some embodiments, a file system may be integrated into an operating system such that any access to data stored on storage devices  is governed by the control and data structures of the file system. Different operating systems may implement different native file systems using different formats, but in some embodiments, a given operating system may include a file system that supports multiple different types of file system formats, including file system formats native to other operating systems. In such embodiments, the various file system formats supported by the file system may be referred to herein as local file systems. Additionally, in some embodiments, a file system may be implemented using multiple layers of functionality arranged in a hierarchy, as illustrated in .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 2","FIG. 1","FIG. 1"],"b":["200","205","224","230","150","200","200","200","20","25"]},"As described above with respect to system  of , a given host device  may reside in a different computer system from a given storage device , and may access that storage device via a network. Likewise, with respect to storage management system , in one embodiment a given process such as process A may execute remotely and may access storage devices  over a network. In the illustrated embodiment, file system  includes network protocols  to support access to the file system by remote processes. In some embodiments, network protocols  may include support for the Network File System (NFS) protocol or the Common Internet File System (CIFS) protocol, for example, although it is contemplated that any suitable network protocol may be employed, and that multiple such protocols may be supported in some embodiments. However, it is also contemplated that in some embodiments, some systems may interact with layers of file system  directly, without passing through network protocols . For example, in one embodiment query system  may be local to the same computer system as storage management system , and may be configured to interact with file system  through virtual file system  rather than network protocols .","File system  may be configured to support a plurality of local file systems. In the illustrated embodiment, file system  includes a VERITAS (VxFS) format local file system A, a Berkeley fast file system (FFS) format local file system B, and a proprietary (X) format local file system X. However, it is contemplated that in other embodiments, any number or combination of local file system formats may be supported by file system . To provide a common interface to the various local file systems , file system  includes a virtual file system . In one embodiment, virtual file system  may be configured to translate file system operations originating from processes  to a format applicable to the particular local file system  targeted by each operation. Additionally, in the illustrated embodiment storage management system  includes device drivers  through which local file systems  may access storage devices . Device drivers  may implement data transfer protocols specific to the types of interfaces employed by storage devices . For example, in one embodiment device drivers  may provide support for transferring data across SCSI and ATAPI interfaces, though in other embodiments device drivers  may support other types and combinations of interfaces.","In the illustrated embodiment, file system  also includes filter driver . In some embodiments, filter driver  may be configured to monitor each operation entering file system  and, subsequent to detecting particular types of operations, to cause additional operations to be performed or to alter the behavior of the detected operation. For example, in one embodiment filter driver  may be configured to combine multiple write operations into a single write operation to improve file system performance. In another embodiment, filter driver  may be configured to compute a signature of a file subsequent to detecting a write to that file. In still another embodiment, filter driver  may be configured to store information, such as records, associated with particular files subsequent to detecting certain kinds of operations on those files, as described in greater detail below. It is contemplated that in some embodiments, filter driver  may be configured to implement one or more combinations of the aforementioned operations, including other filter operations not specifically mentioned.","It is noted that filter driver  is part of file system  and not an application or process within user space . Consequently, filter driver  may be configured to operate independently of applications and processes within the user space . Alternatively, or in addition to the above, filter driver  may be configured to perform operations in response to requests received from applications or processes within the user space .","It is further noted that in some embodiments, kernel space  may include processes (not shown) that generate accesses to storage devices , similar to user space processes . In such embodiments, processes executing in kernel space  may be configured to access file system  through a kernel-mode API (not shown), in a manner similar to user space processes . Thus, in some embodiments, all accesses to storage devices  may be processed by file system , regardless of the type or space of the process originating the access operation.","Numerous alternative embodiments of storage management system  and file system  are possible and contemplated. For example, file system  may support different numbers and formats of local file systems , or only a single local file system . In some embodiments, network protocol  may be omitted or integrated into a portion of storage management system  external to file system . Likewise, in some embodiments virtual file system  may be omitted or disabled, for example if only a single local file system  is in use. Additionally, in some embodiments filter driver  may be implemented within a different layer of file system . For example, in one embodiment, filter driver  may be integrated into virtual file system , while in another embodiment, an instance of filter driver  may be implemented in each of local file systems .","File System Content and Security","As described above, file system  may be configured to manage access to a plurality of files stored on storage devices . In many embodiments, each stored file may have an associated identity used by the file system to distinguish each file from other files. In one embodiment of file system , the identity of a file may be a file name, which may for example include a string of characters such as \u201cfilename.txt\u201d. However, in embodiments of file system  that implement a file hierarchy, such as a hierarchy of folders or directories, all or part of the file hierarchy may be included in the file identity. For example, a given file named \u201cfile1.txt\u201d may reside in a directory \u201csmith\u201d that in turn resides in a directory \u201cusers\u201d. The directory \u201cusers\u201d may reside in a directory \u201ctest1\u201d that is a top-level or root-level directory within file system . In some embodiments, file system  may define a single \u201croot directory\u201d to include all root-level directories, where no higher-level directory includes the root directory. In other embodiments, multiple top-level directories may coexist such that no higher-level directory includes any top-level directory. The names of the specific folders or directories in which a given file is located may be referred to herein as the given file's path or path name.","In some embodiments of file system  that implement a file hierarchy, a given file's identity may be specified by listing each directory in the path of the file as well as the file name. Referring to the example given above, the identity of the given instance of the file named \u201cfile1.txt\u201d may be specified as \u201c\/test1\/users\/smith\/file1.txt\u201d. It is noted that in some embodiments of file system , a file name alone may be insufficient to uniquely identify a given file, whereas a fully specified file identity including path information may be sufficient to uniquely identify a given file. There may, for example, exist a file identified as \u201c\/test2\/users\/smith\/file1.txt\u201d that, despite sharing the same file name as the previously mentioned file, is distinct by virtue of its path. It is noted that other methods of representing a given file identity using path and file name information are possible and contemplated. For example, different characters may be used to delimit directory\/folder names and file names, or the directory\/folder names and file names may be specified in a different order.","The files managed by file system  may store application data or program information, which may collectively be referred to as file data, in any of a number of encoding formats. For example, a given file may store plain text in an ASCII-encoded format or data in a proprietary application format, such as a particular word processor or spreadsheet encoding format. Additionally, a given file may store video or audio data or executable program instructions in a binary format. It is contemplated that numerous other types of data and encoding formats, as well as combinations of data and encoding formats, may be used in files as file data.","In addition to managing access to storage devices, the various files stored on storage devices, and the file data in those files as described above, in some embodiments file system  may be configured to store information corresponding to one or more given files, which information may be referred to herein as metadata. Generally speaking, metadata may encompass any type of information associated with a file. In various embodiments, metadata may include information such as (but not limited to) the file identity, size, ownership, and file access permissions. Metadata may also include free-form or user-defined data such as records corresponding to file system operations, as described in greater detail below. In some embodiments of file system  including file hierarchies such as directories and\/or folders, metadata may also be associated with individual directories or folders. Metadata corresponding to a file, directory or folder as well as the data content of files may collectively be referred to herein as file system content.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["205","205","221","250","260","250","270","280","250","260","250","260","250","260","250","260"],"i":["a","n","a","n ","a","n","a","n ","a","n ","a","n ","a","n "]},"Files  may be representative of files managed by file system , and may in various embodiments be configured to store various types of data and program instructions as described above. In the illustrated embodiment, each of files  has a corresponding named stream . Each of named streams  may be configured to store metadata pertaining to its corresponding file. It is noted that files  and named streams  may be physically stored on one or more storage devices, such as storage devices  of . However, for purposes of illustration, files  and named streams  are shown as conceptually residing within file system .","In some embodiments, filter driver  may be configured to access file data stored in a given file . For example, filter driver  may be configured to detect read and\/or write operations received by file system , and may responsively cause file data to be read from or written to a given file  corresponding to the received operation. In some embodiments, filter driver  may be configured to generate metadata corresponding to a given file  and store the generated metadata in the corresponding named stream . For example, upon detecting a file write operation directed to given file , filter driver  may be configured to update metadata corresponding to the last modified time of given file  and to store the updated metadata within named stream . Also, in some embodiments filter driver  may be configured to retrieve metadata corresponding to a specified file on behalf of a particular application.","Metadata may be generated in response to various types of file system activity initiated by processes  of . In some embodiments, the generated metadata may include records of arbitrary complexity. For example, in one embodiment filter driver  may be configured to detect various types of file manipulation operations such as file create, delete, rename, and\/or copy operations as well as file read and write operations. In some embodiments, such operations may be detected in-band as described above. After detecting a particular file operation, filter driver  may be configured to generate a record of the operation and store the record in the appropriate named stream  as metadata of the file  targeted by the operation.","More generally, any operation that accesses any aspect of file system content, such as reading or writing of file data or metadata, may be referred to as a file system content access event. In one embodiment, filter driver  may be configured to generate a metadata record in response to detecting a file system content access event. It is contemplated that in some embodiments, access events targeting metadata may themselves generate additional metadata. As described in greater detail below, in the illustrated embodiment, event log  may be configured to store records of detected file system content access events independently of whether additional metadata is stored in a particular named stream  in response to event detection.","The stored metadata record may in various embodiments include various kinds of information about the file  and the operation detected, such as the identity of the process generating the operation, file identity, file type, file size, file owner, and\/or file permissions, for example. In one embodiment, the record may include a file signature indicative of the content of file . A file signature may be a hash-type function of all or a portion of the file contents and may have the property that minor differences in file content yield quantifiably distinct file signatures. For example, the file signature may employ the Message Digest 5 (MD5) algorithm, which may yield different signatures for files differing in content by as little as a single bit, although it is contemplated that any suitable signature-generating algorithm may be employed. The record may also include additional information not specifically listed.","In one embodiment, a given metadata record may be generated and stored in a format that may include data fields along with tags that describe the significance of an associated data field. Such a format may be referred to as a \u201cself-describing\u201d data format. For example, a data element within a metadata record may be delimited by such tag fields, with the generic syntax:\n\n<descriptive_tag>data element<\/descriptive_tag>\n\nwhere the \u201cdescriptive_tag\u201d delimiter may describe some aspect of the \u201cdata element\u201d field, and may thereby serve to structure the various data elements within a metadata record. It is contemplated that in various embodiments, self-describing data formats may employ any of a variety of syntaxes, which may include different conventions for distinguishing tags from data elements. In some embodiments, a self-describing data format may allow additional structural elements to be defined as desired, for example by allowing additional descriptive tags to be defined. Such embodiments of self-describing data formats may be referred to as extensible as well as self-describing.\n","In one embodiment, Extensible Markup Language (XML) format, or any data format compliant with any version of XML, may be used as an extensible, self-describing format for storing metadata records, although it is contemplated that in other embodiments, any suitable format may be used, including formats that are not extensible or self-describing. XML-format records may allow arbitrary definition of record fields, according to the desired metadata to be recorded. One example of an XML-format record is as follows:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<record sequence=\u201c1\u201d>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"\u2003\u2003<type>application\/pdf<\/type>"]},{"entry":[{},"\u2003\u2003<user id=1598>username<\/user>"]},{"entry":[{},"\u2003\u2003<group id=119>groupname<\/group>"]},{"entry":[{},"\u2003\u2003<perm>rw-r--r--<\/perm>"]},{"entry":[{},"\u2003\u2003<md5>d41d8cd98f00b204e9800998ecf8427e<\/md5>"]},{"entry":[{},"\u2003\u2003<size>0<\/size>"]},{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["260","250","250","250","205","250","221","221","250","221","250","221","250"],"i":["a","a","a","a ","a "]},"It is noted that in some embodiments, metadata may be stored in a structure other than a named stream. For example, in one embodiment metadata corresponding to one or more files may be stored in another file in a database format or another format. Also, it is contemplated that in some embodiments, other software modules or components of file system  may be configured to generate, store, and\/or retrieve metadata. For example, the metadata function of filter driver  may be incorporated into or duplicated by another software module.","In the illustrated embodiment, file system  includes event log . Event log  may be a named stream similar to named streams ; however, rather than being associated with a particular file, event log  may be associated directly with file system . In some embodiments, file system  may include only one event log , while in other embodiments, more than one event log  may be provided. For example, in one embodiment of file system  including a plurality of local file systems  as illustrated in , one event log  per local file system  may be provided.","In some embodiments, filter driver  may be configured to store a metadata record in event log  in response to detecting a file system operation or event. For example, a read or write operation directed to a particular file  may be detected, and subsequently filter driver  may store a record indicative of the operation in event log . In some embodiments, filter driver  may be configured to store metadata records within event log  regardless of whether a corresponding metadata record was also stored within a named stream . In some embodiments event log  may function as a centralized history of all detected operations and events transpiring within file system .","Similar to the records stored within named stream , the record stored by filter driver  in event log  may in one embodiment be generated in an extensible, self-describing data format such as the Extensible Markup Language (XML) format, although it is contemplated that in other embodiments, any suitable format may be used. As an example, a given file named \u201c\/test1\/foo.pdf\u201d may be created, modified, and then renamed to file \u201c\/test1\/destination.pdf\u201d in the course of operation of file system . In one embodiment, event log  may include the following example records subsequent to the rename operation:",{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<record>"]},{"entry":[{},"\u2003\u2003<op>create<\/op>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"<\/record>"]},{"entry":[{},"<record>"]},{"entry":[{},"\u2003\u2003<op>modify<\/op>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"<\/record>"]},{"entry":[{},"<record>"]},{"entry":[{},"\u2003\u2003<op>rename<\/op>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/destination.pdf<\/path>"]},{"entry":[{},"\u2003\u2003<oldpath>\/test1\/foo.pdf<\/oldpath>"]},{"entry":[{},"<\/record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["250","250","250","221","270"],"i":["a ","b ","a"]},"In one embodiment, access to file system content may be controlled according to a security model. For example, in some embodiments various file system content items, such as files or metadata records, may include sensitive data that should be restricted only to users (or applications or processes executing on behalf of users) having appropriate credentials. In the illustrated embodiment, file system  includes security model  that may be configured to interact with filter driver  to control access to file system content. For example, upon receiving a file system content access operation, filter driver  may be configured to convey credentials associated with the operation requestor along with information identifying the requested content. In response, security model  may be configured to evaluate the credentials against the request to indicate whether the operation should be allowed to proceed or alternatively, whether the operation should be rejected or restricted in scope. It is contemplated that in some embodiments, security model  may be configured to interact with elements of file system  other than or in addition to filter driver . For example, security model  may be implemented at a higher or lower level of the stack of elements of file system  illustrated in .","Security model  may in various embodiments implement functionality compliant with any suitable credential authentication model. For example, in one embodiment security model  may implement a standard Unix-style permission model including user identifiers (UIDs), group identifiers (GIDs), and file permissions. In such a model, a given file system content item such as a file may have a corresponding owner identified by a particular UID and a corresponding group identified by a particular GID, where the GID may be restricted to one of the groups of which the owner is a member. Additionally, the given file system content item may have associated permissions defining the allowable actions on that item for the owner, for a member of group GID other than the owner, and for users other than members of group GID. For example, the owner of a file may have read, write, and execute permissions for that file, whereas other group members may have only read and execute permissions, and non-group members may have only read permissions. In some embodiments, user, group and permission information of a given file  may be stored in a metadata record in a corresponding named stream . In such embodiments, this information may be distinguished from user and group information associated with specific file system content access operations, records of which may also be stored within a named stream  as shown above.","In some embodiments, security model  may implement a more sophisticated credential authentication model. For example, rather than relying on users to identify themselves through process information associated with a file system content access request, in one embodiment security model  may attempt to establish the identity of a user independently, such as by consulting a directory or validation service that may be implemented externally to file system . For example, security model  may coordinate with a server implementing the Lightweight Directory Access Protocol (LDAP) to verify the identify of a user requesting access to file system content. Alternatively, in one embodiment security model  may implement a version of the Kerberos authentication protocol and may attempt to ensure that a valid Kerberos ticket from a ticket-granting server has been obtained by the user requesting content access. It is contemplated that in various embodiments, security model  may implement any of numerous other types of credential authentication models, which may include the use of encrypted keys, challenge-and-response methods, or any other suitable authentication method. For example, security model  may implement functionality compatible with Network Information Service (NIS) or Network Information Service Plus (NIS+) protocol, Local Area Network Manager (LAN Manager) protocol, Active Directory protocol, or any other suitable protocol. It is further contemplated that in some embodiments, security model  may implement multiple such methods, and may additionally associate specific methods with specific file system content items. For example, some file system content items may use the Unix permission scheme described above, while other items may use this scheme in combination with Kerberos or another method or protocol.","Querying File System Content","As described above, in some embodiments file system  may be configured to store various types of file system content. File system  may store numerous types of file data within one or more files, and may store metadata of arbitrary complexity corresponding to a given file. File system  may also be configured to consume file system content. For example, file system  may implement particular storage policies whereby files having certain usage characteristics as indicated in their metadata are assigned to particular types of storage. In one embodiment, for example, files that are more recently used or are accessed by certain types of processes may be assigned to faster types of storage, whereas other files may be assigned to slower storage.","In some embodiments, application or operating system processes external to file system  (such as processes  of ) may also be configured to consume file system content. For example, a programmer writing an application software module may wish to create and manipulate specific files and their associated file data in order to store or retrieve application data. Additionally, such a programmer may wish to perform actions contingent on the metadata characteristics of certain files, such as configuring a backup program to select only files that have been modified since the time of the last backup. In some embodiments, specific file system content may be specified by querying file system content to identify content satisfying particular criteria. The available criteria for querying file system content may depend on the format in which file system content is stored. For example, in one embodiment file system content may be stored in a fixed, non-extensible format, such as a tabular data structure where a data item's description is inherited from row and column definitions rather than from a self-describing format tag. In such an embodiment the criteria by which file system content may be selected may be determined by the defined structure of the format, such as the available row and column definitions. In embodiments where file system content is stored in an extensible, self-describing format, such as the XML format described above, the criteria available for selecting desired file system content may include any of the self-describing features of that content. Generally speaking, any data storage format or organization for which query system  may generate a query to select data may be referred to as a queryable format. For example, the XML format may be a queryable format for file system content.","In the embodiment of storage system  illustrated in , query system  is configured to provide file system content query capabilities via API B to various processes . One detailed embodiment of query system  is illustrated in . In this embodiment, query system  includes a connection manager , a query engine , an index\/commit engine , and a data layout manager , each described in greater detail below.","Generally speaking, a query may specify how a subset of data is to be selected from a larger set of data, for example through the evaluation of one or more data fields of a record stored in a self-describing format. For example, a user may wish to select all stored records that correspond to the file \/test1\/foo.pdf for further analysis. Correspondingly, the user may construct a query that specifies the selection of all records having a data field tagged \u201cpath\u201d where the data field equals a particular value, such as \u201c\/test1\/foo.pdf\u201d. In some embodiments, it is contemplated that the entirety of file system content may be queried, including file data stored within files  as well as metadata stored within named streams . Additionally, in some embodiments where file system content access events are recorded within event log  as described above, it is contemplated that those recorded events may also be queried.","Queries may be constructed in a query language, which may provide syntactic constructs for the selection of sets of data based on the value of one or more tagged data fields. In some embodiments, a given query language may support procedural features, such as functions, for example, in addition to set-selection features. Further, in some embodiments a given query language may support the embedding within a query of procedural routines coded in other programming languages, such as Java or C, for example. Where the XML format is used to structure file system content, a given application may construct a query to select particular file system content in the XML Query (XQuery) language as specified by the World Wide Web Consortium (W3C) or any future XQuery standard or variant thereof. However, it is contemplated that any suitable query language may be employed.","As noted previously, in the illustrated embodiment a process  may generate a query and convey it to query system  through API . In some embodiments, query system  may be configured to support several processes  having concurrent queries outstanding at a given time. Further, in some embodiments a querying process  may submit its query from a remote computer system via a network. Additionally, a querying process  may need to authenticated in some embodiments, for example to restrict access to query system . In one embodiment, connection manager  may be configured to manage the overhead of establishing and maintaining connections between querying processes  and query system . For example, connection manager  may be configured to provide an authentication interface (such as a username and password interface) whereby querying processes  may establish their authority to perform queries. Additionally, in one embodiment connection manager  may be configured to maintain any information necessary to support connection-based or session-based semantics for querying processes . For example, connection manager  may maintain data structures to map queries in progress to their relevant requestors, such that query results are directed to the correct querying process .","In one embodiment, query engine  may be configured to parse and evaluate queries submitted to query system  via connection manager . For example, query engine  may receive a query requesting the names of all files  having been modified by a particular user within a certain range of time. Query engine  may parse the query for syntactic correctness, and may return an error condition if the query is malformed. In some embodiments, query engine  may also perform structural transformations to the query, for example to decompose the query into multiple queries and\/or to optimize the query for performance. Next, query engine  may examine metadata records stored in named streams  to identify files  meeting the specified criteria, returning the names of those files to the querying process . In some embodiments, metadata records stored in named streams  may themselves be the file system content items selected by a given query. Further, in some embodiments, query engine  may be configured to select portions of files, records, or other file system content items in response to a given query. Numerous implementations of query engine  configured for parsing and evaluating queries are possible and contemplated.","In some embodiments, query engine  may interact directly with storage management system  to access file system content in response to evaluation of a query. However, in some instances, query evaluation performance may be improved by creating one or more indexes of file system content and using these indexes to assist in query evaluation. In the illustrated embodiment, index\/commit engine  may be configured to generate and maintain these indexes, and to provide index information to query engine  during the evaluation of queries. (It is contemplated that in some embodiments in which query engine  is configured to query file system content directly, index\/commit engine  may be omitted or may omit the indexing functionality described below.)","Generally speaking, an index may be any data structure that organizes a collection of data according to some aspect or attribute, facilitating querying of the data by the indexed aspect or attribute. For example, in one embodiment an index may be a list of names of all files  defined with file system , organized alphabetically. In some embodiments, multiple indexes of file system content may be employed. For example, if file system content is frequently queried by name, associated user, and content creation\/modification time, individual indexes that sort or organize file system content by each of these attributes may be created. In some embodiments, more complex indexing schemes may be employed, including indexes that combine multiple content attributes into complex state spaces. Additionally, it is contemplated that indexes may be implemented using any suitable data structure, including lists, tables, trees, and higher-order data structures. Indexes may be stored in a particular data format, which may be referred to as the index format. In one embodiment, the XML format may be used as the index format.","The indexes created by index\/commit engine  may themselves be stored within file system . In some embodiments, these indexes may be stored separately from other file system content. In such embodiments, data layout manager  may be configured to track the location of indexes within file system . In one embodiment, data layout manager  may be configured to bypass filter driver  while accessing storage associated with indexes, such that in-band metadata corresponding to index accesses is not generated. In such an embodiment, certain inconsistency scenarios involving indexing and metadata may be avoided. For example, if an index\/commit engine  were to attempt to include metadata of a given index, such as a modification timestamp, within the given index and then to write the given index to storage through filter driver , the metadata of the given index following the write might no longer be consistent with the contents of the given index, e.g., if filter driver  created a new modification timestamp in response to the write operation.","In some embodiments, a querying process  may use a query to modify file system content via query system . For example, a query may be used to select a set of data items, such as files , from among the available file system content. The selected data items may then be modified, but instead of submitting the modifications directly to file system  to be propagated to storage devices , query system  may coordinate the data updates, thereby presenting an alternate path for file system content modification. However, in embodiments where multiple paths for modifying file system content exist, coordination among these paths may be necessary to prevent conflicting modifications to common data. In one embodiment, index\/commit engine  may be configured to implement a commit protocol (such as a two-phase commit, for example) to ensure that updates to file system content are consistent.","The indexes maintained by index\/commit engine  may generally be derivative of file system content, such that when file system content changes (whether due to an update via query system , due to activity of a content processor , or from a process  directly interacting with file system ), one or more indexes corresponding to the modified content may no longer accurately reflect the new state of the content. For example, if index\/commit engine  includes an index of file system content by file name, and a given file  is renamed by a process , the file name-based index may be stale following the renaming. Generally speaking, if an index is current with respect to the state of the indexed data, the index may be said to preserve referential integrity with respect to the indexed data.","If indexed file system content changes, index\/commit engine  may be configured to preserve referential integrity of its indexes by updating relevant indexes to reflect the changes. For example, in one embodiment index\/commit engine  may be configured to detect when a change to file system content has occurred, such as by scanning event log . In some embodiments, a process or daemon external to index\/commit engine  may be configured to perform this detection. When a content change is detected, index\/commit engine  may update one or more indexes affected by the detected event to maintain their referential integrity. For example, if a particular file  is deleted, an event record corresponding to the deletion may be detected within event log . Index\/commit engine  may then modify the indexes it maintains to remove references to the deleted file .","Applying File System Security Model to Query System","As described above, query system  may be configured to allow users to select file system content to be read or modified through queries specifying the desired content. However, in some instances some or all of the content may be protected within file system  by a security model such as security model , or by multiple such models. Further, a given user submitting a query may or may not have sufficient privileges or credentials to access such protected content.","In one embodiment, security mapping functionality may be provided to apply one or more file system security models to query system , such that access to file system content via query system  is controlled subject to the protocols and procedures of the relevant file system security model. One such embodiment of security mapping functionality is illustrated in . In the illustrated embodiment, the embodiment of query system  illustrated in  and described above is shown along with security mapping functionality . Security mapping functionality  includes an arbitrary number of security converters -, each of which may correspond to a respective instance of security model  of file system  as described in greater detail below. It is contemplated that in embodiments where file system  implements only one security model , security mapping functionality  may include one corresponding security converter .","A given security converter  may be configured in one embodiment to obtain security information relevant to a particular file system content item, according to corresponding security model . Security information may in various embodiments include encryption keys, tokens, tickets, user and\/or group identifier strings or values, or any other information that may be employed by a particular security model  to control access to file system content. For example, in one embodiment certain file system content items may be protected using a version of the Kerberos authentication protocol, in which the items are individually or collectively delegated one or more passwords used to decrypt authentication tickets submitted by users along with their requests for access to protected items. In such an embodiment, a security converter  configured to implement functionality compliant with the implemented version of Kerberos protocol may retrieve the passwords, such as from a Kerberos ticket-granting server. Depending on the security model, security converter  may be configured to execute a defined protocol and\/or interact with other servers or processes to obtain security information. In embodiments where multiple security converters  are provided for respective security models, security mapping functionality  may be configured to select an appropriate security converter  to obtain security information for a given content item by, for example, examining metadata associated with the given content item indicating its relevant security model .","Once security converter  has obtained security information for a given file system content item, it may be configured to map or encode such security information in a format suitable for querying by query engine , along with other relevant information about the content item to be indexed or stored. For example, in one embodiment query engine  may be configured to query file system content stored in XML format as described above. In such an embodiment, security converter  may be configured to encode the security information it has obtained using XML tag fields. For example, security converter  may generate an XML record such as:",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<security_record>"]},{"entry":[{},"\u2003\u2003<path>\/test1\/foo.pdf<\/path>"]},{"entry":[{},"\u2003\u2003<security_type>security_model<\/security_type>"]},{"entry":[{},"\u2003\u2003<security_server>serverID<\/security_server>"]},{"entry":[{},"\u2003\u2003<password>password_text<\/password>"]},{"entry":[{},"\u2003\u2003. . ."]},{"entry":[{},"<\/security_record>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["610","610"]},"In one embodiment, security records generated by a security converter  may be stored within storage management system , for example within a named stream  corresponding to a file  for which the security record was generated. In embodiments of query system  that employ indexing, index\/commit engine  may be configured to index security records generated by security converters  along with file system content. For example, as described above, in some embodiments index\/commit engine  or a daemon external to query system  may be configured to scan event log  to detect file system content creation or modification events and to update associated indexes. In some such embodiments, the entity configured to detect content-related events and trigger index updates may also be configured to invoke the relevant security converter  to obtain a record of security information as described above. The resulting security record may be stored (and, in some embodiments, indexed) such that when a given file system content item is retrieved via query system , its associated security record will also be retrieved.","In response to query system  receiving a given query, query engine  may be configured to select a subset of file system content items (or, in some cases, portions of items, such as subsections or records, for example) that satisfy the given query, as described above. Further, in embodiments that employ indexing, query engine  may utilize one or more indexes maintained by index\/commit engine  to assist in the selection of the resultant subset of file system content items. In one embodiment, if a security information record exists for a given selected content item, query system  may be configured to convey the security record along with an indication of the corresponding selected content item to the appropriate security converter  via security mapping functionality . For example, in one embodiment query engine  may be configured to convey the entire selected subset of content items for a given query to security mapping functionality , which may in turn be configured to detect the presence of security information records and to direct those records to the appropriate security converters  based on the \u201csecurity_type\u201d field.","Upon receiving a record of security information for a given content item selected by a query, a security converter  may be configured to extract the security information from the record, for example by parsing an XML-formatted record, and subsequently to determine whether a credential supplied by a query requester (i.e., a user or process submitting a query to query system ) satisfies the extracted security information according to the security model  implemented by the security converter . For example, at the time a query requestor submits a query to query system , the requestor may also convey along with the query a credential, such as a password, key, or token, a data structure including required identifying information according to a security model , information regarding how to obtain identifying information for the requestor (such as from a server), or any other type of credential defined by security model . Alternatively, the requestor may submit the credential directly to security mapping functionality  when the query is submitted. Security converter  may then perform any necessary operation to determine whether the supplied credential satisfies the security information for the given selected content item. For example, a security converter  implementing Kerberos functionality may decrypt a ticket provided by a requestor using a password indicated in the security record to determine whether the ticket correctly indicates the identity of the requestor. A security converter  may alternatively or additionally contact another process or server to verify a credential.","Security mapping functionality  may be configured to return to the query requestor only those file system content items resulting from the query for which the requestor's credential satisfies a corresponding item's security information, as determined by a security converter . For example, for each content item selected by a given query and having a corresponding security record, the appropriate security converter  may indicate whether the query requestor's relevant credential does or does not satisfy the requirements indicated by the security record, and security mapping functionality  may prevent those content items that fail to satisfy from being returned to the requestor. In one embodiment, if a file system content item has no corresponding security record, it may be returned to a query requestor by default.","In one embodiment, security mapping functionality  may be configured to apply security model(s)  to query system  without query system  being aware of the security models in use. In such an embodiment, a daemon external to index\/commit engine  may be configured to invoke one or more security converters  to generate a corresponding security information record when a given file system content item is indexed, which index\/commit engine  may then treat as ordinary content item metadata. Further, security mapping functionality  may be configured to intercept query results before they are returned to query requesters so the results may be filtered by the appropriate security converters  as described above. It is contemplated that in some embodiments, all or a portion of security mapping functionality  may be implemented within query system .","It is noted that in some embodiments that employ indexing, after security information associated with a particular file system content item has been indexed such as described above, the security information associated with that content item may change. For example, a file owner may change permissions associated with a given file, users may be added to or deleted from groups having certain permissions, or users may otherwise gain or lose credentials. In some such embodiments, such changes to security information may be communicated to query system , for example by security model . In response, in various embodiments query system  may be configured to update its indexes to reflect the most current security information, to invalidate some or all existing indexes and rebuild them at a later time, or to maintain a queue or buffer of pending security information changes to be updated within index\/commit engine . The queue or buffer may be used by query engine  and\/or security mapping functionality  in addition to those security information records returned by a query to check the sufficiency of a user's credentials prior to returning query results.","One embodiment of a method of applying a file system security model to a query system is illustrated in the flow chart of . Referring collectively to . , operation begins in block  where file system content is stored along with security information according to a file system security model. For example, a given file system content item may be stored with Unix-style fields and permissions according to one embodiment of file system security model .","Subsequent to storing of file system content, security information associated with a given file system content item according to the file system security model is mapped to a queryable format (block ). For example, in one embodiment security mapping functionality  may include one or more security converters , each configured to obtain security information associated with the given content item according to its associated security model  and to generate a security record reflecting the obtained security information in XML format.","The mapped security information is then stored within a query system along with other file system content information such that the mapped security information may be retrieved in response to a query resulting in selection of the given content item (block ). For example, in one embodiment, an XML security information record may be stored within storage management system  by query system . In embodiments that employ indexing, the mapped security information may be indexed along with other metadata corresponding to the given content item, such as by index\/commit engine , for example. It is noted that in one embodiment, generation of security information corresponding to file system content and storage of such security information within a query system (and indexing, if applicable) may occur in response to the storing or modification of the file system content.","The given file system content item may then be selected by a query (block ) and the security information in its corresponding security record extracted (block ). The extracted security information is then compared against a credential of the user requesting the query to determine whether the credential satisfies the security information (block ). For example, in one embodiment query engine  may be configured to select a given file system content item and its corresponding security record in response to a given query, and to convey the security record to a corresponding security converter . Responsively, security converter  may extract the security information from the record and evaluate it against a credential supplied by the requesting user. If the credential satisfies the security information, the content item may be returned to the requesting user (block ); otherwise, the content item may be excluded from the results returned to the requesting user (block ).","In some embodiments, a query system may be configured to provide a security model of its own that may be distinct from the security model  provided by file system . For example, a query system may define a user namespace with which to identify users who are authorized to access the query system. Further, a query system may define a set of properties within its security model that determine the level of privileges a given user may have with respect to content items accessible by the query system.","One embodiment of a query system configured to provide a security model distinct from a file system security model, where the file system security model is mapped to the query system security model, is illustrated in . In the illustrated embodiment, query system  includes those elements shown in the embodiment of . In addition, query system  includes a query security model  and security mapping functionality , which in turn includes a security data dictionary .","In one embodiment, query security model  may define a plurality of users authorized to use query system . For example, query security model  may be configured to maintain a list of user names. In such an embodiment, query security model  may be additionally configured to interact with connection manager  to verify that a user seeking access is listed as an authorized user according to query security model . In some embodiments, query security model  may provide additional user authentication capabilities such as user passwords, for example.","Additionally, query security model  may define a plurality of roles that may be assigned to a given user, as well as a plurality of capabilities that may be performed by users in certain roles with respect to content accessible via query system . A role may be defined using a textual, numerical or any other suitable format. In one embodiment, a unique role may be assigned to each individual user defined within query security model . Each individual user may be assigned additional roles that are shared with other users. For example, users A and B may be respectively assigned unique roles  and , and as members of a common group (such as \u201caccounting\u201d, for example) may each be assigned role .","Capabilities defined within query security model  may, in one embodiment, be textual, numerical or otherwise-formatted identifiers signifying the set of actions that may be taken with respect to a data entity, such as a file system content item, accessible via query system . For example, the entire set of capabilities that may be defined for any file system content item accessible within query system  may include database manipulation semantics such as update (i.e., modify), read, insert (i.e., create), and delete. A given role may be assigned all, some, or none of these capabilities with respect to a given file system content item. As described in greater detail below, the explicit capabilities assigned to each role for a given file system content item may be stored such that query system  may restrict access to file system content items dependent on those stored capabilities and the role of the user or process submitting a given query.","In the illustrated embodiment, the file system security model  employed by file system  to control access to file system content may be mapped to query security model  by security mapping functionality . For example, security model  may implement a Unix-style permissions model in which a given file system content item has a corresponding owner (e.g., identified through a user ID) and a corresponding group (e.g., identified through a group ID). A permission field may further be used to identify specific file system capabilities the content item owner, associated group members, and non-group members may have with respect to the content item (such as read, write, and execute capabilities, for example). Security mapping functionality  may map the identification and capability information defined by security model  into security information compatible with query security model , and may store the mapped security information within security data dictionary , for example as XML data.","As an example, in one embodiment two file system users may be defined within file system  as \u201cnur\u201d and \u201cdhruba\u201d. Additionally, file system  may define two groups as \u201cdaemon\u201d and \u201cfcf\u201d. Correspondingly, in one embodiment several roles may be defined in XML format within query security model  as follows:",{"@attributes":{"id":"p-0099","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<role>"]},{"entry":[{},"\u2003\u2003<role-id>1<\/role-id>"]},{"entry":[{},"\u2003\u2003<role-name>admin<\/role-name>"]},{"entry":[{},"\u2003\u2003<description>All powerful for this file system"]},{"entry":[{},"security model <\/description>"]},{"entry":[{},"<\/role>"]},{"entry":[{},"<role>"]},{"entry":[{},"\u2003\u2003<role-id>2<\/role-id>"]},{"entry":[{},"\u2003\u2003<role-name>world<\/role-name>"]},{"entry":[{},"\u2003\u2003<description>any unrecognized user <\/description>"]},{"entry":[{},"<\/role>"]},{"entry":[{},"<role>"]},{"entry":[{},"\u2003\u2003<role-id>3<\/role-id>"]},{"entry":[{},"\u2003\u2003<role-name>dhrubarole<\/role-name>"]},{"entry":[{},"\u2003\u2003<description>user dhruba's role <\/description>"]},{"entry":[{},"<\/role>"]},{"entry":[{},"<role>"]},{"entry":[{},"\u2003\u2003<role-id>4<\/role-id>"]},{"entry":[{},"\u2003\u2003<role-name>nurrole<\/role-name>"]},{"entry":[{},"\u2003\u2003<description> user nur's role <\/description>"]},{"entry":[{},"<\/role>"]},{"entry":[{},"<role>"]},{"entry":[{},"\u2003\u2003<role-id>6<\/role-id>"]},{"entry":[{},"\u2003\u2003<role-name>daemon<\/role-name>"]},{"entry":[{},"\u2003\u2003<description> group daemon's role <\/description>"]},{"entry":[{},"<\/role>"]},{"entry":[{},"<role>"]},{"entry":[{},"\u2003\u2003<role-id>7<\/role-id>"]},{"entry":[{},"\u2003\u2003<role-name>fcf<\/role-name>"]},{"entry":[{},"\u2003\u2003<description> group fcf's role <\/description>"]},{"entry":[{},"<\/role>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this example, roles , ,  and  have been defined for users \u201cdhruba\u201d and \u201cnur\u201d and groups \u201cdaemon\u201d and \u201cfcf\u201d, respectively. Also, an additional administrative\/superuser role  and a world role , corresponding to otherwise unrecognized users, have been defined. In some embodiments, these roles may be defined and maintained manually, such as by an administrator of query system . In other embodiments, these roles may be defined and maintained automatically. For example, when a user or group is created or deleted within file system , file system  may be configured to propagate the change to query security model . Although each role in the illustrated example has been shown formatted in XML and including \u201crole-id\u201d, \u201crole-name\u201d and \u201cdescription fields, in other embodiments roles may be defined using more, fewer or different fields, or may be formatted in a data format other than XML.","In one embodiment, security data dictionary  may be configured to store a mapping of users of query system  to the roles defined within query security model . Referring to the aforementioned example, in one embodiment security data dictionary  may be configured to store the following XML-formatted information regarding users \u201cdhruba\u201d and \u201cnur\u201d and a guest user \u201cguest\u201d:",{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<user>"]},{"entry":[{},"\u2003\u2003<user-id>1598<\/user-id>"]},{"entry":[{},"\u2003\u2003<user-name>dhruba<\/user-name>"]},{"entry":[{},"\u2003\u2003<description>developer program <\/description>"]},{"entry":[{},"\u2003\u2003<password>S#@$*&65<\/password>"]},{"entry":[{},"\u2003\u2003<role-ids>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<role-id>3<\/role-id>\u2003<!-users own role ->"]},{"entry":[{},"\u2003\u2003\u2003\u2003<role-id>6<\/role-id>\u2003<!-daemon group role ->"]},{"entry":[{},"\u2003\u2003\u2003\u2003<role-id>7<\/role-id>\u2003<!-fcf group role ->"]},{"entry":[{},"\u2003\u2003<role-ids>"]},{"entry":[{},"<\/user>"]},{"entry":[{},"<user>"]},{"entry":[{},"\u2003\u2003<user-id>610<\/user-id>"]},{"entry":[{},"\u2003\u2003<user-name>nur <\/user-name>"]},{"entry":[{},"\u2003\u2003<description> my boss <\/description>"]},{"entry":[{},"\u2003\u2003<password>Simp{circumflex over (\u2009)}45te <\/password>"]},{"entry":[{},"\u2003\u2003<role-ids>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<role-id>4<\/role-id>\u2003<!-user's own role ->"]},{"entry":[{},"\u2003\u2003\u2003\u2003<role-id>7<\/role-id>\u2003<!-fcf group's role ->"]},{"entry":[{},"\u2003\u2003<role-ids>"]},{"entry":[{},"<\/user>"]},{"entry":[{},"<user>"]},{"entry":[{},"\u2003\u2003<user-id>100000<\/user-id>\u2003<!-guest, no password ->"]},{"entry":[{},"\u2003\u2003<user-name>guest <\/user-name>"]},{"entry":[{},"\u2003\u2003<description> anybody, has no password<\/description>"]},{"entry":[{},"\u2003\u2003<password> <\/password>"]},{"entry":[{},"\u2003\u2003<role-ids>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<role-id>2<\/role-id>\u2003<!-world role ->"]},{"entry":[{},"\u2003\u2003<role-ids>"]},{"entry":[{},"<\/user>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this example, user \u201cdhruba\u201d of query system  is associated with user ID  as well as roles ,  and  as defined above. User \u201cnur\u201d is associated with user ID  as well as roles  and  defined above. User \u201cguest\u201d is associated with user ID  as well as role  defined above. Entries for users \u201cdhruba\u201d and \u201cnur\u201d reflect passwords associated with those users, and each entry also includes a descriptive field. As with the role definitions shown above, in various embodiments, user entries within security data dictionary  may include more, fewer or different fields, or may be formatted in a data format other than XML.","When a given file system content item is stored (or, in some embodiments, indexed by index\/commit engine ), in one embodiment security mapping functionality  may be configured to utilize the information stored in security data dictionary  along with information specific to the given file system content item indicated by file system security model  in order to determine the various permissions to be associated with the given content item according to query security model . As shown below, content item permissions may include the various capabilities with respect to the given content item that are associated with each of one or more roles. In some embodiments, content item permissions may be stored in a data format such as XML or another data format and stored and\/or indexed along with other file system content, such that the permissions associated with a given file system content item may be retrieved when a given query selects that content item. In embodiments where indexing of file system content is not supported, query engine  may be configured to store content item permissions in the manner just described.","Continuing in the context of the example roles and security data dictionary  contents shown above, in one instance the following file may be selected for indexing by index\/commit engine , either by the index engine or by a daemon external to query system  as described previously:",{"@attributes":{"id":"p-0106","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"rwxrw-r--\u2003\u2003dhruba\u2003\u2003\u2003\u2003fcf\u2003\u2003\/test1\/foo.pdf"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"280"},"In one embodiment, when file \u201c\/test1\/foo.pdf\u201d is indexed, security mapping functionality  may be configured to map the aforementioned security semantics to the semantics defined by query security model  (e.g., roles and capabilities). For example, security mapping functionality  may consult security data dictionary  to generate the following permissions for file \u201c\/test1\/foo.pdf\u201d:",{"@attributes":{"id":"p-0108","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<permission>"]},{"entry":[{},"\u2003\u2003<roleid> 3 <roleid>\u2003\u2003<!-all permission for dhruba ->"]},{"entry":[{},"\u2003\u2003<capability> update,insert,read <\/capability>"]},{"entry":[{},"<\/permission>"]},{"entry":[{},"<permission>"]},{"entry":[{},"\u2003\u2003<roleid> 7 <roleid>\u2003\u2003<!-all permissions for fcf ->"]},{"entry":[{},"\u2003\u2003<capability> update,insert,read <\/capability>"]},{"entry":[{},"<\/permission>"]},{"entry":[{},"<permission>"]},{"entry":[{},"\u2003\u2003<roleid> 2 <roleid>\u2003\u2003<!-read permission for others->"]},{"entry":[{},"\u2003\u2003<capability> read <\/capability>"]},{"entry":[{},"<\/permission>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["700","3","7","720","700","2","700","280","460","205","400","205","400","280","700","460"]},"As mentioned above, the permissions generated by security mapping functionality  may be stored in one or more indexes along with other file system content information or otherwise stored within query system . When a given file system content item (or, in some embodiments, a portion of a given item) is selected by query engine  based on a given query, the permissions associated with the given content item may be examined and compared with the role of the user performing the given query. If the content item permissions allow the requested capability for that role, query system  may be configured to return the given content item to the user performing the given query; otherwise, query system  may suppress the given content item from the query results. Referring to the above example, if user \u201cdhruba\u201d submits a query seeking to read file \u201c\/test1\/foo.pdf\u201d, the associated permissions indicate that corresponding role  has the \u201cread\u201d capability, and the file may be returned as part of the query results. However, if user \u201cjones\u201d who is not a member of group \u201cfcf\u201d submits a query seeking to modify some aspect of file \u201c\/test1\/foo.pdf\u201d, the associated permissions indicate that corresponding role  has only \u201cread\u201d capability with respect to that file, and query engine  or another module within query system  may suppress file \u201c\/test1\/foo.pdf\u201d from the results returned to user \u201cjones\u201d.","A flow chart illustrating one embodiment of a method of mapping a file system security model to a query system security model is illustrated in . Referring collectively to ,  and , operation begins in block  where file system content is stored along with security information according to a file system security model. For example, a given file system content item may be stored with Unix-style fields and permissions according to one embodiment of file system security model .","Subsequent to storing of file system content, security information associated with a given file system content item according to the file system security model is mapped to security information according to a query security model (block ). For example, in one embodiment security mapping functionality  may be configured to map file system fields and permissions to query system roles and capabilities, according to roles and capabilities defined in query security model  and user mappings stored in security data dictionary .","After mapping, a record of query system security information for the given file system content item is stored such that the record may be retrieved if the given file system content item is selected by a given query (block ). For example, in one embodiment a record of permissions associated with the given content item may be generated in XML format and indexed along with other information about the given content item. It is noted that in one embodiment, generation of security information corresponding to file system content and storage of such security information within a query system (and indexing, if applicable) may occur in response to the storing or modification of the file system content.","Subsequently, the given file system content item may be selected by a query (block ) and its associated record of permissions tested against the role(s) associated with the user submitting the query (blocks -). For example, in one embodiment query system  may be configured to identify whether any role indicated in the record of permissions corresponds with the user submitting the query according to security mapping functionality , and for any corresponding role, query system  may determine whether a capability of that role for the given content item matches the capability requested by the query. If the requested capability is permitted according to the record, the content item is returned to the user requesting the query (block ); otherwise, the content item is suppressed from the results returned to the user (block ).","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
