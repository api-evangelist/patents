---
title: System and method for schema-driven compression of extensible mark-up language (XML) documents
abstract: A method (and system) for compressing an extensible markup language (XML) document, includes compressing an XML document such that information in a markup portion therein is maintained in a compressed form to allow the document to be reconstructed. During the compressing, the markup portion and a non-markup portion of the document are separated, and the non-markup component is compressed using a first compression method and the markup component is compressed using a second compression method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06883137&OS=06883137&RS=06883137
owner: International Business Machines Corporation
number: 06883137
owner_city: Armonk
owner_country: US
publication_date: 20000417
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to an efficient compression algorithm for XML (extensible mark-up language) documents, and more particularly to a computer system, method and computer-readable code for schema-driven compression of extensible mark-up language (XML) documents.","2. Description of the Related Art","The Binary XML Content Format Specification (e.g., WBXML which is an acronym for wireless application protocol binary XML) defines a compact binary representation of the Extensible Markup Language (XML). (\u201cXML\u201d is a trademark of Massachusetts Institute of Technology.) The binary XML content format is designed to reduce the transmission size of XML documents with no loss of functionality or semantic information.","For example, it preserves the element structure of XML, allowing a browser to skip unknown elements or attributes. More specifically, it encodes the tag names and the attributes names and values with tokens (e.g., a token may be a single byte). Tokens (e.g., application tokens) are split into a set of overlapping code spaces. A particular token's meaning is dependent on the context in which it is used. Tokens are organized in the following manner. That is, there are two classifications of tokens: global tokens and application tokens.","Global tokens are assigned a fixed set of codes in all contexts and are unambiguous in all situations. Global codes are used to encode inline data (e.g., strings, entitles, opaque data, etc.) and to encode a variety of miscellaneous control functions.","Application tokens have a context-dependent meaning and are split into two overlapping code spaces. These two code spaces are the tag code space and the attribute code space. A given token value (e.g., 0\u00d799 representing a hexadecimal value; the decimal value corresponding to the hexadecimal value 0\u00d799 is 153) will have a different meaning depending on whether it represents a token in the tag or attribute code space. The tag code space represents specific tag names. Each tag token is a single-byte code and represents a specific tag name (e.g., CARD).","The attribute code space is split into two numeric ranges representing attribute prefixes and attribute values respectively.","Each code space (e.g., for both tag and attribute code space) is further split into a series of 256 code pages. Code pages allow for future expansion of the well-known codes. A single token (e.g., SWITCH_PAGE) switches between the code pages. The definition of tag and attribute codes is document-type-specific. Global codes are divided between a generic set of codes common to all document types and a set reserved for document-type specific extensions.","Huffmann and Lempel Ziv (LZ77 and LZ78) algorithms ZLIB (Zip LIBrary) and GZIP (GNU (GNU's Not Unix) ZIP) are two implementations of these algorithms) are known for text data. However, as XML documents are compressed, the structural information is not necessarily maintained in the compressed form so that the documents cannot be easily reconstructed. Moreover, in applying these algorithms, some (if not all) structural information cannot be retrieved without prior decompression because the compressed stream in a flat byte stream.","Further, hitherto the present invention, separating markup (e.g., structure such as element names and attribute names and values) and non-markup (data), and compressing the non-markup component using ZLIB and the markup component using binary coding has not been performed.","Further, a binary encoding component which would retain the structure occupies approximately twice as much space as the ZLIB equivalent that loses structure. This is problematic so that there must be a tradeoff between compressing the structure component with a higher compression rate and retaining the structure.","That is, the exemplary data compression algorithms (Huffman, LZ77, LZ78, Millau (the inventive algorithm)) are lossless but traditional algorithms (Huffman, LZ) need prior decompression (a time costly operation) to retrieve the structure, whereas the inventive format does not need decompression to retrieve the structure encoded in binary format. Thus, prior to the invention, a tradeoff was required between compression rate and decompression time.","Further, the conventional methods perform poorly on relatively small documents (like eBusiness transactions) because they are designed to take advantage of the redundancy of the information which is not significant in small documents. They were not designed to take advantage of the structure. In contrast, as described below, the present invention is designed to take advantage of the structure described in the Document Type Definition (DTD) so it performs well on small documents as well as large documents.","In view of the foregoing and other problems, disadvantages, and drawbacks of the conventional methods and structures, an object of the present invention is to provide a method and system for providing an efficient compression algorithm for XML documents.","Another object of the present invention is to provide a method and system for building code spaces from information provided by a Document Type Definition (DTD) of an XML document.","In a first aspect of the present invention, a method of compressing an extensible markup language (XML) document, includes compressing an XML document such that the structural information is maintained in a compressed form to allow the document to be reconstructed. During this compression, a markup portion and a non-markup portion of the document are separated, and the non-markup component is compressed using a first compression method (e.g., preferably ZLIB or GZIP) and the markup component is compressed using a second compression method.","In a second aspect of the present invention, a method of compressing an XML document, includes creating the data structure on the server and on the client, parsing the document type definition (DTD) of the XML document, filling in the server code spaces, and filling in the client code spaces.","Hence, the present invention not only takes advantage of the separation of the structure and data of an XML document, but it also takes advantage of the associated DTD (schema) of the document to perform optimization. The DTD schema describes the constraints on the structures, possible values, and occurrence restrictions of attribute values and elements. The compression algorithm, once it knows that there is a schema associated with the document, takes advantage of this and produces further compression of the data.","Further, the present invention provides an efficient compression algorithm for XML documents in which the XML documents are compressed, and such that the structural information will be kept in the compressed form so that the documents can be easily reconstructed. The invention provides a lossless compression algorithm that gets as close as possible to the ZLIB algorithm. Hence, with the invention, the markup (structure) and non-markup (data) can be separated, and the non-markup component can be compressed using ZLIB and the markup component can be compressed using binary encoding.","Thus, with the unique and unobvious aspects of the present invention, the schema information (the DTD associated with the document) can be used to compress the structure component and obtain higher compression rate while simultaneously retaining the structure.","Further, the method and system of the present invention provide better compression rates for small documents (like eBusiness transactions) than GZIP and other conventional schemes.","Referring now to the drawings, and more particularly to , there are shown preferred embodiments of the method and structures according to the present invention.","Generally, the invention provides an efficient compression algorithm for XML documents.","As mentioned above, ZLIB algorithms are known for text data. As XML documents are compressed, the structural information will be kept in the compressed form so that the documents can be easily reconstructed. However, such compression and reconstruction in inefficient. Given that the lower bound on the compression size is what can be obtained by applying ZLIB where ZLIB loses all structural information, the invention provides a lossless compression algorithm that gets as close as possible to ZLIB.","With the invention, it is possible to separate markup (structure) and non-markup (data), and compress the non-markup component using ZLIB and the markup component using binary encoding. It is noted that binary encoding is described in the WAP Binary XML Content Format Specification, W3C Note, 24 Jun. 1999. The present invention has added enhancements to be able to separate content from structure and link them together. More specifically, the invention provides information in the structure stream to retrieve data from the content stream.","Further, the binary encoding component which retains the structure occupies approximately twice as much space (e.g., in the worst case but it can be smaller for small documents) as the ZLIB equivalent that loses structure. However, this is not truly a drawback because the structure stream is usually small compared to the data stream. Moreover, it can be compressed using a traditional compression algorithm, thus achieving better compression rate than with the traditional algorithm alone. In the invention, the schema information (the DTD associated with the document) can be used to compress the structure component and obtain higher compression rate while simultaneously retaining the structure.","An XML document primarily is formed of a strictly nested hierarchy of elements with a single root. In the context of the present application, \u201cstrictly nested\u201d means that an XML document can be represented as a tree. Elements can contain character data, child elements, or a mixture of both. In addition, the elements may have attributes (e.g., characteristics or properties). Child character data and child elements are strictly ordered (e.g., if element A is defined in the DTD with children B, C and D in this order, then chidden B, C and D must appear in this order in the XML document) whereas attributes are not. For example, consider:\n\n","An important reason to explicitly define the language is so that documents can be checked (e.g., both before and after compression because the inventive format retains the structure) to determine whether the documents conform to the language (e.g., such as XML). For example, if a grammar for the Book language was defined, authors using this grammar could use a validating parser to ensure that their documents conformed to the language.","An XML markup language is defined in a Document Type Definition (DTD). The DTD is either contained in a <!DOCTYPE> tag, contained in an external file and referenced from a <!DOCTYPE> tag, or both. For example, the document shown above could contain the following <!DOCTYPE> tag:",{"@attributes":{"id":"p-0044","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!DOCTYPE Book ["]},{"entry":[{},"<!ELEMENT Book (Title, Chapter+)>"]},{"entry":[{},"<!ATTLIST Book Author CDATA #REQUIRED"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Genre (literature|science|history) #REQUIRED>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!ELEMENT Title (#PCDATA)>"]},{"entry":[{},"<!ELEMENT Chapter (#PCDATA)>"]},{"entry":[{},"<!ATTLIST Chapter id ID #REQUIRED>"]},{"entry":[{},"]>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0045","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Group:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!ELEMENT A (B,C)>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Character data:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!ELEMENT A (#PCDATA)>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"EMPTY:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!ELEMFNT A EMPTY>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ANY:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!ELEMENT A ANY>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["<!ELEMENT A (#PCDATA)>","<!--Declare an attribute a for element A-->","<!ATTLIST A a CDATA #IMPLIED>\n\nAttributes can be optional, required, or have a fixed value. Optional attributes may have a default, but fixed attributes must have a default. For example:\n\nOptional without a default:\n","<!--Element A has an attribute a. #IMPLIED=\u201coptional, no default\u201d-->","<!ATTLIST A a CDATA #IMPLIED>\n\nOptional with a default:\n","<!If attribute a is not provided, a default of \u201caaa\u201d will be used. - - >","<!ATTLIST A a CDATA \u201caaa\u201d>\n\nRequired:\n","<!ATTLIST A a CDATA #REQUIRED>\n\nFixed:\n","<!--The value of attribute a is always \u201caaa\u201d-->","<!ATTLIST A a CDATA #FIXED \u201caaa\u201d>\n\nEach attribute has a type:\n"]}}}},"Character data:\n\n","ID, IDREF: These attributes point from one element to another. The value of the IDREF attribute on the pointing element is the same as the value of the ID attribute on the pointed-to element. For example, consider:\n\n","ENTITY, ENTITIES: These attributes point to external data in the form of unparsed entities. For complete details, see the XML specification (e.g., see Extensible Markup Language (XML) 1.0 Specification, W3C Recommendation, 10 Feb. 1998).\n\n","NMTOKEN, NMTOKENS. These attributes have single\/multiple tokens as values.\n\n","Compression","Referring now to , first a flow diagram of a method  according to the invention is provided which shows how code spaces are used to compress an XML structure.","First, in step , the server gets the DTD of the document requested by the client. It builds the code spaces from this DTD according to a specific data structure.","Then, in step , the server parses the document. Each time it encounters an element or attribute name or value, it searches its corresponding token in the code spaces and transmits it to the client.","In step , the client gets the DTD of the document if requested. It builds the code spaces from this DTD according to a specific data structure (e.g., different from the server).","In step , the client receives the document. Each time it encounters an element or attribute name or value token, it searches its corresponding text string in the code spaces in order to decode the binary structure.",{"@attributes":{"id":"p-0056","num":"0090"},"figref":"FIG. 2"},"More specifically, the input can be either an XML stream  or a Document Object Model (DOM\u00ae) tree . If it is an XML stream, this stream is spliced into two substreams, a structure stream  and a data stream . Similarly, if the input is a DOM\u00ae tree (\u201cDOM\u201d is a registered trademark of Massachusetts Institute of Technology), the system can produce two streams from this DOM\u00ae tress (e.g., a structure stream  and a data stream ).","\u201cDOM\u201d is an acronym for \u201cDocument Object Model\u201d, which is a language-independent application programming interface (\u201cAPI\u201d) for use with documents specified in markup languages including XML. DOM is published as a Recommendation of the World Wide Web Consortium, entitled \u201cDocument Object Model (DOM) Level 1 Specification, Version 1.0\u201d (1998) and available on the World Wide Web at http:\/\/www.w3.org\/TR\/REC-DOM-Level-1.","\u201cDOM tree\u201d refers to the logical structure with which a document is modeled using the DOM. A DOM tree is a hierarchical representation of the document structure and contents. Each DOM tree has a root node and one or more leaf nodes, with zero or more intermediate nodes, using the terminology for tree structures that is commonly known in the computer programming art. A node's predecessor node in the tree is called a \u201cparent\u201d and nodes below a given node in the tree are called \u201cchild\u201d nodes.","The DOM API enables application programs to access this tree-oriented abstraction of a document, and to manipulate document structure and contents (that is, by changing, deleting, and\/or adding elements). Further, the DOM enables navigating the structure of the document.","To reduce the size of the structure stream without losing any information, the system encodes the structure in WBXML format. This process generates a WBXML stream  that is smaller (about 80% smaller) than the initial structure stream . Similarly, the data stream  is compressed using a conventional compression algorithm (e.g., GZIP). This produces a smaller stream called compressed data stream . In an efficient embodiment of the present invention, the two first steps can be realized at the same time (e.g., performed in parallel).","The decoding can produce two outputs according to the needs of the application. That is, the system can generate a SAX event  for each received element. Possibly, it can create an XML stream from these SAX events. The system can also build dynamically a DOM tree . Each time an element is received, it is added dynamically to the DOM tree.","The decompression of the data is done using the conventional decompression algorithm corresponding to the algorithm used for the compression. It produces a data stream . Then, this data can be incorporated in the DOM tree or can be used to generate SAX characters events. In an efficient embodiment of the present invention, these steps can be realized at the same time (e.g., in parallel).","Turning now to the flow diagram in , the primary steps of a method  of the present invention will be described. These steps include creating the data structure on the server and on the client, parsing the DTD, filling in the server code spacers, and filling in the client code spaces.","In step , the data structure on the server is created. In step , the data structure on the client is created. That is, the data structure on the server and on the client are described respectively.","On the server side, for a specific tag name or attribute name or value (e.g., which are of string type), the server must find the corresponding token. Thus, the server must be able to quickly find a string in a table. Hence, in an exemplary embodiment, a Hash table may be used (e.g., see  for an exemplary hash table) where the keys are the strings and the value are the corresponding tokens.","On the client side, the client must find the tag name or attribute name or value corresponding to a specific token. More specifically, given a page number and an index in a code space page, it must find the corresponding string. The preferred data structure here is for each code space to have a two-dimensional array indexed by page numbers and indexes in pages (e.g., see FIG. C).","Then, in step , the DTD is parsed on the server and, in step , on the client. Preferably, the DTD is parsed using IBm XML Parser for JAVA\u00ae 1.1.16 which generates a tree structure for the DTD. JAVA\u00ae is a trademark of Sun Microsystems, Inc. (Parsing a DTD with IBM XML Parser for Java produces a tree where elements and attributes can be accessed by name.) It allows accessing elements declarations and attributes declarations with name and type and also attributes values when attribute type is enumerated. For example, method getElementDeclarations returns an enumeration of all element declarations in this DTD, getContentModel(elementName) returns the content model for the specified element name in this DTD, getAttributeDeclaratons(elementName) returns an enumeration of all attribute list declarations for the specified element name in this DTD.","In step , the server code spaces are filled-in. This step is described in further detail below with regard to FIG. .","For example, filling in the server code spaces is performed by the server filling in the hash table for an element code space. That is, in step , the page number variable is set to 0 and the index variable to 5 (e.g., in the exemplary implementation the first four indexes are reserved for global tokens).","For each element declaration (step ), the server system gets the element name, adds it in the hash table with the element name as the key and (256\u00d7pageNumber+index) as the value (step ). Then, the system increments the index by 1 (step ). The size of a page for elements is 64 because the last two bits of the index are reserved so that when the index reaches the value 64 (\u201cYES\u201d in step ), the system increments the page number by 1 and resets the index to 5 (step ). When the page number reaches its maximum value 255, an exception is raised such that an error message is displayed.","For the attribute code space, for each element declared, the server system obtains the corresponding attribute declaration from the previously built DOM tree (step ). It adds the attribute name in the hash table with the attribute name as the key and (256\u00d7pageNumber+index) as the value (step ).","If the attribute type is enumerated (e.g., enumerated attribute types are NOTATION or NAME_TOKEN_GROUP) (step ), then the system looks for the values of this enumerated attribute (step ). For each value, it adds the attribute value in the hash table with the attribute value as the key and (256\u00d7pageNumber+index) as the value (step ). Then, the system increments the index for the value by 1 (step ). The size of a page for attribute value is 128 so that when the index reaches the value 128 (step ), the system increments the page number by 1 and resets the index to 5 (step ).","When the page number reaches its maximum value 255, an exception is raised. If there are no values or when the values have been successfully added to the attribute value code space, the system increments the index for the name by 1 (step ). The size of a page for an attribute name is 128 so that when the index reaches the value 128 (\u201cYES\u201d in step ), the system increments the page number by 1 and resets the index to 5 (step ). When the page number reaches its maximum value 255, an exception is raised and an error message is displayed.","Finally, returning to , in step , the client code spaces are filled-in. A method  for filling in the 2-dimensional array for element code space will be described hereinbelow.","First, in step , the page number variable is set to 0 and the index variable to 5 (e.g., the first four indexes are reserved for global tokens). For each element declaration found (step ), the system obtains the element name, and adds it in the elements array at a predetermined position (e.g., page number, index) (step ). Then, the system increments the index by 1 (step ). The size of a page for elements is 64 because the last two bits of the index are reserved so that when the index reaches the value 64 (\u201cYES\u201d in step ), the system increments the page number by 1 and resets the index to 5 (step ). When the page number reaches its maximum value 255, an exception is raised.","For an attribute code space, for each element is declared, the client's system obtains the corresponding attribute declaration from the previously built DOM structure (step ). Then, the system adds the attribute name in the attribute names array at a predetermined position (page number, index) (step ). If the attribute type is enumerated (e.g., enumerated attribute types are NOTATION OR NAME_TOPKEN_GROUP) (step ), then the system checks for the values of this enumerated attribute (step ).","For each value, it adds the attribute value in the attribute values array at a predetermined position (page number, index) (step ). This system increments the index for the value by 1 (step ). The size of a page for an attribute value is 128. Thus, when the index reaches the value 128, the system increments the page number by 1 and resets the index to 5 (step ). When the page number reaches its maximum value 255, an exception is raised. If there are no values or when the values have been successfully added to the attribute value code space, the system increments the index for the name by 1 (step ). The size of a page for attribute name is 128 so that when the index reaches the value 128, the system increments the page number by 1 and resets the index to 5 (step ). When the page number reaches its maximum value 255, an exception is raised.","Improvements to Code Space","Improvement for the attribute code spaces can be provided by merging the attribute names cod space and the attribute values code space into one token. That is, each couple (e.g., attribute name, attribute value) is made into a single token instead of two tokens (e.g., name and value). Thus, if an attribute has 3 possible values, then there will be three different tokens for this attribute.","Referring now to , to fill this improved code space, for each element declared, the inventive system gets the corresponding attribute declaration from the previously-built DOM structure. If the attribute-type is not enumerated (e.g., no specific value is declared for this attribute) (a \u201cNO\u201d in step ), then the system adds the attribute name in the attribute code space (e.g., hash table for the server, array for the client) (step ).","If the attribute-type is enumerated (a \u201cYES\u201d in step ), then the system looks for the values of this enumerated attribute (step ). For each value, it adds the couple (attribute name, attribute value) with a specific token in the attribute code space (step ).","Thereafter, when the server comes across an attribute with a value, it will look in the attribute code space for the couple (attribute name, attribute value). If the server can find the couple, the server will send this token associated therewith.","If the server cannot find it, the server will look for the attribute name in the attribute code space. If the name is found, the server sends the corresponding token for this name followed by a string inline token followed by the attribute value encoded in the charset specified at the beginning of the inventive stream. If the name is not found, an exception is raised such that an error message is displayed and the process terminates.","Regarding improving the element code space, as mentioned above, some elements can have required or fixed attributes. For these elements, it is unnecessary to transmit tokens for the required or fixed attributes.","In order not to transmit tokens for required or fixed attributes in order to save bandwidth, the inventive system can store in the element code space the names of the required or fixed attributes with the element name. For example, attributes Author and Genre are required for element Book so the element code space stores the triplet (Book, Author, Genre) at the entry Book.","Hereinbelow is described the method used by the inventive system to fill in this element code space. That is, for each element declaration, the system gets the element name from the array on the client side, and the hash table on the server side, and the required and fixed attributes from the array on the client side, and the hash table on the server side. It adds the element names and the required and fixed attribute names to the element code space. For the fixed attributes, it also adds their value. Thus, the system knows which attributes are fixed. In the attribute code space, only the implied attributes will be stored with their value if defined as described above.","Hereinbelow is provided some exemplary code of the present invention.",{"@attributes":{"id":"p-0088","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*@param dtd a <code>DTD<\/code> object"},{"entry":"*\/"},{"entry":"private void build(DTD dtd)"},{"entry":"throws CodespaceException {"},{"entry":"System.outprintIn(\u201cProcessing OTO"},{"entry":"\/\/ Read elements names"},{"entry":"Enumeration elementDecl = dtd.getElementDeclarations( );"},{"entry":"int pageTag = 0, indexTag = 5, pageAtt = 0, indexAtt = 5;"},{"entry":"while (elementDecl.hasMoreElements( )) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String tagName = ((ElementDecl)(elementDecl.nextElement( ))).getName( );"]},{"entry":[{},"tagNames.put(tagName, new Integer(256*pageTag+indexTag));"]},{"entry":[{},"if((++indexTag)= =TAG_PAGE_SIZE) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if((++pageTag) = =SPACE_SIZE) throw new CodeSpaceException(\u201cToo many"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"tags\u201c);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"indexTag=5;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Read attributes names and values"]},{"entry":[{},"Enumeration attDefs = dtd.getAttributeDeclarations(tagName);"]},{"entry":[{},"while (attDefs.hasMoreElements( )) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AttDef attDef = (AtDef)(attDefs.nextElement( ));"]},{"entry":[{},"String attName = attDef.getName( );"]},{"entry":[{},"if ((attDef.getDeclaredType( )= =AtDef.NAME_TOKEN_GROUP)II"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(attDef.getDeclaredType( )= =AttDef.NOTATION)) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Enumeration enum = attDef.elements( ):"]},{"entry":[{},"if (enum= =null) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (!attNames.containsKey(attName)) {\/\/attribute name not yet in"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"table"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"AttNames.put(attName, new Integer(256*page Att+indexAtt));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/put it"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ((++indexAtt)= =ATT_PAGE_SIZE) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ((++pageAtt) ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"=SPACE_SIZE) throw new"},{"entry":"CodeSpaceException(\u201cToo many attributes\u201d);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"indexAtt = 5;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"while (enum.hasMoreElements( )) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"String attstart = attName +. \u201c=.\u201d + enum.nextElement( ):"},{"entry":"if (!attNames.containsKey(attStart)) {attNames.put(attstart, new"},{"entry":"if ((++indesAtt)= =ATT PAGE_SIZE) {"},{"entry":"if ((++pageAtt)= =SPACE_SIZE) throw new CodespaceException(\u201cToo many attributes\u201d);"},{"entry":"indexATT = 5;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}else{"},{"entry":"if (!attNames.containsKey(attName)) {\/\/attribute name not yet in table"},{"entry":"attNames.put(attName, new Integer(256*pagMt+indeXAn)); \/\/ put it"},{"entry":"if ((++indexAtt)= =ATT_PAGE_SIZE) {"},{"entry":"if ((++pageAtt)= =SPACE_SIZE) throw new CodeSpaceException(\u201cToo many attributes\u201d);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"indexAtt = 5;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0089","num":"0123"},"figref":["FIG. 7","FIG. 7"],"b":["700","700","720","740","720","700","700","760","720","740","780","721","722","740","741","720","761","740","720","781","702"]},"The workstation  may communicate with other computer or networks of computers, for example via a communication channel or modem . Alternatively, the workstation  may communicate using a wireless interface at , such as a CDPD (cellular digital packet data) card. The workstation  may be associated with such other components in a local area network (LAN) or a wide area network (WAN), or the workstation  can be a client in a client\/server arrangement with another computer, etc. All of these configurations, as well as the appropriate communications hardware and software, are known in the art.",{"@attributes":{"id":"p-0091","num":"0125"},"figref":"FIG. 8","b":["800","800","820","840","700"],"i":"f "},"Still referring to , the networks  and  may also include mainframe computers or servers, such as a gateway computer  or application server  (which may access a data repository ). A gateway computer  serves as a point of entry into each network . The gateway  may be preferably coupled to another network  by means of a communications link The gateway  may also be directly coupled to one or more workstations  using a communications link The gateway computer  may be implemented utilizing an Enterprise Systems Architecture\/380 available from the International Business Machines Corporation (\u201cIBM\u201d), an Enterprise Systems Architecture\/390 computer, etc. Depending on the application, a midrange computer, such as an Application System\/400 (also known as an AS\/400) may be employed (\u201cEnterprise Systems Architecture\/370\u201d is a trademark of IBM; \u201cEnterprise Systems Architecture\/390\u201d, \u201cApplication System\/400\u201d, and \u201cAS\/400\u201d are registered trademarks of IBM.)","The gateway computer  may also be coupled  to a storage device (such as data Repository ). Further, the gateway  may be directly or indirectly coupled to one or more workstations .","Those skilled in the art will appreciate that the gateway computer  may be located a great geographic distance from the network , and similarly, the workstations  may be located a substantial distance from the networks  and . For example, the network  may be located in California, while the gateway  may be located in Texas, and one or more of the workstations  may be located in New York. The workstations  may connect to the wireless network  using a network protocol such as the Transmission Control Protocol\/internet Protocol (\u201cTCP\/IP\u201d) over a number of alternative connection media, such as cellular phone, radio frequency networks, satellite networks, etc. The wireless network  preferably connects to the gateway  using a network connection such as TCP or UDP (User Datagram Protocol) over IP, X.25, Frame Relay, ISDN (Integrated Services Digital Network), PSTN (Public Switched Telephone Network), etc. The workstations  may alternatively connect directly to the gateway  using dial connections or Further, the wireless network  and network  may connect to one or more other networks (not shown), in an analogous manner to that depicted in FIG. .","Software programming code which embodies the present invention is typically accessed by the microprocessor  of the workstation  and server  from long-term storage media  of some type, such as a CD-ROM drive or hard drive. The software programming code may be embodied on any of a variety of known media for use with a data processing system, such as a diskette, hard drive, or CD-ROM. The code may be distributed on such media, or may be distributed to users from the memory or storage of one computer system over a network of some type to other computer systems for use by users of such other systems. Alternatively, the programming code may be embodied in the memory , and accessed by the microprocessor  using the bus . The techniques and methods for embodying software programming code in memory, on physical media, and\/or distributing software code via networks are well known and will not be further discussed herein.","A user of the present invention may connect his computer to a server using a wireless connection, or a wireless connection. Wireline connections are those that use physical media such as cables and telephone lines, whereas wireless connections use media such as satellite links, radio frequency waves, and infrared waves. Many connection techniques can be used with these various media, such as: using the computer's modem to establish a connection over a telephone line; using a LAN card such as Token Ring or Ethernet; using a cellular modem to establish a wireless connection, etc. The user's computer may be any type of computer processor, including laptop, handheld or mobile computers; vehicle-mounted devices; desktop computer; mainframe computers; etc., having processing (and optionally communication) capabilities. The remote server, similarly, can be only of any number of different types of computer which have processing and communication capabilities. These techniques are well known in the art, and the hardware devices and software which enable their use are readily available. The user's computer will be referred to eqivalently as a \u201cworkstation\u201d, \u201cdevice\u201d, or \u201ccomputer\u201d, and use of any of these terms or the term \u201cserver\u201d refers to any of the types of computing devices described above.","In the preferred embodiment, the present invention is implemented as one or more computer software programs. The implementation of the software for schema\u2014driven compressed of XML or DOM files may be operate on a server in a network, as one or more modules (also referred to as code subroutines, or \u201cobjects\u201d in object-oriented programming) which are invoked upon request. Alternatively, the software may operate on a user's workstation. The logic implementing the invention may be integrated with the code of a program which creates the XML files or it may be implemented as one or more separate utility modules, without deviating from the inventive concepts disclosed herein. The server may be functioning as a Web server, where the Web server provides services in response to requests from a client connected through the Internet. Alternatively, the server may be in a corporate intranet or extranet of which the client's workstation is a component, or in any other network environment. While the preferred embodiment anticipates that the compressed files are sent over a network connection, the file content may also be transferred between computers via a storage media (such as diskette), without deviating from the inventive concepts disclosed herein.","In addition to the hardware\/software environment described above, a different aspect of the invention includes a computer-implemented method for performing the above method.","Such a method may be implemented, for example, by operating a computer, as embodied by a digital data processing apparatus, to execute a sequence of machine-readable instructions. These instructions may reside in various types of signal-bearing media.","The signal-bearing media may include, for example, a RAM contained within the CPU\/processor, as represented by the fast-access storage for example. Alternatively, the instructions may be contained in another signal-bearing media, such as a magnetic data storage diskette  (FIG. ), directly or indirectly accessible by the CPU.","Whether contained in the diskette , the computer\/CPU, or elsewhere, the instructions may be stored on a variety of machine-readable data storage media, such as DASD storage (e.g., a conventional \u201chard drive\u201d or a RAID array), magnetic tape, electronic read-only memory (e.g., ROM, EPROM, or EEPROM), an optical storage device (e.g. CD-ROM, WORM, DVD, digital optical tape, etc.), paper \u201cpunch\u201d cards, or other suitable signal-bearing media including transmission media such as digital and analog and communication links and wireless. In an illustrative embodiment of the invention, the machine-readable instructions may comprise software object code, compiled from a language such as \u201cC\u201d, etc.","With the unique and unobvious features of the present invention, hence, the present invention not only takes advantage of the separation of the structure and data of an XML document, but it also takes advantage of the associated DTD (schema) of the document to perform optimization. The DTD schema describes the constraints on the structures, possible values, and occurrence restrictions of attribute values and elements. The compression algorithm, once it knows that there is a schema associated with the document, takes advantage of this and produces further compression of the data.","Further, the present invention provides an efficient compression algorithm for XML documents in which the XML documents are compressed, and such that the structural information will be kept in the compressed form so that the documents can be easily reconstructed. The invention provides a lossless compression algorithm that gets as close as possible to the ZLIB algorithm. Hence, with the invention, the markup (structure) and non-markup (data) can be separated, and the non-markup component can be compressed using ZLIB and the markup component can be compressed using binary encoding.","Thus, with the unique and unobvious aspects of the present invention, the schema information (the DTD associated with the document) can be used to compress the structure component and obtain higher compression rate while simultaneously retaining the structure.","While the invention has been described in terms of a preferred embodiment, those skilled in the art will recognize that the invention can be practiced with modifications within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other purposes, aspects and advantages will be better understood from the following detailed description of a preferred embodiment of the invention with reference to the drawings, in which:",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3A","b":"300"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["400","330","300"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5","b":"500"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6","b":"600"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7","b":"700"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 9","b":"800"}]},"DETDESC":[{},{}]}
