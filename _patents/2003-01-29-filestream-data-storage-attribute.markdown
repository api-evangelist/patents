---
title: Filestream data storage attribute
abstract: Large, unstructured objects can be manipulated within a relational database management system (RDBMS). A “filestream” data storage attribute is provided that can be used to tag a column in a relational table. The filestream attribute identifies the data for that column will be stored as a file in the file system in the operating system. The RDBMS manages the creation and deletion of the file in the file system. There is a 1:1 reference between the file in the file system and a cell (intersection of row and column). The data in the filestream column can be manipulated the same way as the data in other columns using a programming language, such as SQL or MICROSOFT®'s T-SQL.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421443&OS=07421443&RS=07421443
owner: Microsoft Corporation
number: 07421443
owner_city: Redmond
owner_country: US
publication_date: 20030129
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS","Exemplary Embodiments"],"p":["This invention relates in general to the field of database management. More particularly, this invention relates to the storage and searching of large unstructured data types in databases.","Existing commercial relational database management systems (RDBMS) are geared toward business applications that manipulate well-structured tabular data. However, the rapid growth of the Internet coupled with increased storage capacities has resulted in a proliferation of large, unstructured data objects (LOB) such as documents, images and video streams. A growing number of business applications combine the manipulation of structured tabular data with these LOBs. However, conventional databases have weak support for large, unstructured data objects; therefore, this type of data cannot be easily searched, manipulated, and accessed. This results in problems, such as data consistency and administration problems. Conventionally, large objects are stored as small pieces that must be retrieved and then assembled. Accordingly, there is a need for the ability to store a large object as one contiguous file that can be searched, manipulated, and accessed.","The present invention provides improved methods and systems for manipulating large, unstructured objects within a RDBMS. A \u201cfilestream\u201d data storage attribute is provided that can be used to tag a column in a relational table. The filestream attribute indicates that the data for that column will be stored as a file in the file system in the operating system (OS). The RDBMS manages the creation and deletion of the file in the file system. There is a 1:1 reference between the file in the file system and a cell (intersection of row and column). The data in the filestream column can be manipulated the same way as the data in other columns using a programming language, such as SQL or MICROSOFT\u00ae's T-SQL.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying drawings.","Overview","The present invention provides large object access in databases via query languages such as SQL and MICROSOFT\u00ae's T-SQL. A type \u201cfilestream\u201d is described and is exposed to a programming model in the form of a construct in order to implement efficient access to these values in the database.","Exemplary Computing Environment",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules and other data may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and non-volatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or information delivery media. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.","The system memory  includes computer storage media in the form of volatile and\/or non-volatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, non-volatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, non-volatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, non-volatile optical disk , such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/non-volatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Exemplary Distributed Computing Frameworks or Architectures","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and web-enabled interface for applications and computing devices, making computing activities increasingly web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET platform includes servers, building-block services, such as web-based data storage, and downloadable device software. Generally speaking, the .NET platform provides (1) the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them, (2) increased interactive capability for web sites, enabled by greater use of XML rather than HTML, (3) online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications, such as e-mail, for example, or software, such as Office NET, (4) centralized data storage, which will increase efficiency and ease of access to information, as well as synchronization of information among users and devices, (5) the ability to integrate various communications media, such as e-mail, faxes, and telephones, (6) for developers, the ability to create reusable modules, thereby increasing productivity and reducing the number of programming errors, and (7) many other cross-platform integration features as well.","While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, API, or a \u201cmiddle man\u201d object between a coprocessor and requesting object, such that services may be performed by, supported in, or accessed via all of NET's languages and services, and in other distributed computing frameworks as well.","A filestream data storage attribute is provided for storing and manipulating large, unstructured objects (LOB) within a relational database management system (RDBMS). The filestream attribute can be used with a database, such as a MICROSOFT\u00ae SQL Server. The filestream attribute alerts the RDBMS to store the attributed large object in the file system as a complete, contiguous file (not part of a basic database file in pieces) and manages the synchronization desired for data consistency and administration. The database management system provides a consistent programming and administration model for large objects to all business applications. This frees the application from creating ad-hoc infrastructure for manipulation of large objects. An example of such ad-hoc infrastructure would be when an application itself stores a LOB as a file in the file system and then stores a reference to that LOB (as an URL or pathname, for example) in a column of a table in a database. A problem with such an approach is that either there will be inconsistency in the system (when, for example, the system crashes) or the application will have to go to great lengths to ensure consistency.","Preferably, a column in a relational table is tagged with the filestream data storage attribute. The data for a column is stored as a file in the file system in the operating system (OS). The RDBMS manages the creation and deletion of the file in the file system. There is a 1:1 correspondence between the file in the file system and a cell (intersection of row and column). The data in the \u201cfilestream column\u201d can be manipulated the same way as the data in other columns using a programming language, such as MICROSOFT\u00ae's T-SQL. In this way, the view of the database to the user does not change; the user can use the file via a new statement in the existing database language.","The semantics of the filestream data type are preferably substantially identical to SQL blob types such as the variable length binary data type (i.e., varbinary). Applications can access the filestream value only through the database. The database owns the lifetime of the value, manipulation of the value, administration with respect to backup and restore, and any other consistency requirements. One can obtain\/generate a pathname that can be used in a request to manipulate this value in the programming model.","Preferably, the data is stored as a stream in a file system external to the database. Typically, in SQL for example, column values are stored inline with the row. For filestream-type values, the information stored inline with the row is not the value but an opaque blob (referred to herein as the \u201cFILESTREAMMONIKER\u201d) that preferably comprises the information to identify a stream in a file system volume.","A unique volume identifier (e.g., a volume GUID) and a unique stream identifier (e.g., a stream GUID) can be used to uniquely identify the stream in the file system and desirably store them in the FILESTREAMMONIKER. This ensures that the database encoding does not depend upon the environmental parameters associated with a volume when it is mounted, e.g., the drive letter associated with it or the server hosting it.","In the case of applications that use the database as the primary repository, it is desirable to store the data outside the database in file systems as opposed to large blobs in the database because of: (1) the convenience in using existing applications to manipulate large blob values in the database, e.g., MICROSOFT\u00ae's Windows Media Player for playing back media files; and (2) the performance\/price advantage in building very large databases.","Pathnames for blob values stored in a database enable the application designer to use existing tools and applications to manipulate the blob values. Manipulation of the blobs is offloaded from the SQL application server, for example, onto secondary blob storage servers called filestream servers. This enables database architectures to be built as a federation of SQL servers and storage servers, leveraging the price\/performance of advances in network attached storage.","When the filestream value is stored external to the database, it is possible to manipulate the value in two ways: (1) in-band using the SQL Language Processing and Execution Engine (LPE), Query Processor (QP) and the Storage Engine (SE), and (2) out-of-band using other APIs (application programming interfaces).",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","220","230","240","240","240"]},"Because the in-row data that is stored for a filestream value is a FILESTREAMMONIKER, the SE  and the FAM  use it along with a database unique identifier to identify filestream values and synthesize the appropriate interfaces. However, the introduction of filestream type preferably does not change the interface between the Storage Engine  and other components such as the Query Processor .","The in-band mechanism for manipulating the values can be further classified into retrieve-by-value and retrieve-by-reference techniques. In the retrieve-by-value technique, the actual data is sent back to the client, while in the retrieve-by-reference technique, a reference to the filestream values is sent back to the client. A pathname (described further below) is used as the mechanism for sending such references to the client.","The retrieve-by-reference mechanism is implemented for the clients to take full advantage of the filestream type. This permits the clients to lazily fetch the value of the column when desired. It is desirable, in terms of performance, to not evaluate the value for each column at the time of the initial query. Instead, a more demand-based approach is provided in which value evaluation is done on demand.","In SQL, a column can participate in an index and a row can have CHECK constraints and triggers associated with it. These CHECK constraints and triggers impose constraints on how a data value associated with a given column is updated in SQL. The current SQL implementation handles these in-band updates. In order to enable and exploit an out-of-band mechanism for updating filestream values, it is desirable to ensure that these constraints are honored.","The column containing the filestream value can be a part of a database index or trigger. In such cases, the out-of-band mechanism for updating the values desirably satisfies the following conditions: (1) establishes a suitable point where all data changes are completed; (2) provides pre- and post-images of the data for the column, when the changes are committed to the database; (3) has a cache coherency protocol between the database server and the filestream server (i.e., if a filestream column is added to an index or a new constraint or trigger is defined on the row, the database desirably communicates this information to the filestream server so it is aware of the extra consistency requirements); and (4) if accessing the column data requires obtaining row-level locks, the code responsible for out-of-band changes will acquire row-level locks before making the changes.","Preferably, the SQL Server administrator will be provided with DDL (Data Definition Language) statements to control the placement of filestream data on a file system volume. Further, the data in the file system is backed up and restored the same way as regular database data. Database recovery will synchronize with the recovery of data in the file system to guarantee data consistency.","In order to address the scalability needs of a number of scenarios, the filestream data can be scaled-out on a number of nodes separate from the node on which SQL Server is running. This offloads valuable processor cycles from the SQL Server machine to other machines for purposes of streaming out the filestream content.","A pathname refers to a file located on the database server machine. Typically, the pathnames are obtained by the client machine from the database server to manipulate values that reside on the filestream server. These various machines are described further below with respect to . It is desirable to make the access to the filestream values as efficient as possible. The pathname abstraction incorporates the ability to name a cell. In order to uniquely identify a cell name, the following are preferably specified: the database, the table in the database, the row in the table, and the column in a given row. Further disambiguation can be incorporated by including the name of the machine as another element of the tuple specifying the pathname. The name of the machine can be any one of the forms which can be currently used to identify the SQL Server machine in the client libraries (e.g., IP address, virtual IP address, machine name in domain, globally unique name of the service, etc).","A file system pathname can be generated for a cell containing the filestream data, which can be used to manipulate the cell's contents using the Win32 API, for example. Pathnames can be passed in\/out of the database; i.e., a pathname can be constructed and passed in as the \u201cvalue\u201d for a cell of type filestream. This may be used in cases where the application creates a file out-of-band and wants this to be preserved as the \u201cvalue\u201d for a cell. Alternately, a pathname can be obtained to a newly created row. In this case, the Storage Engine  will create a new file on one of many volumes associated with the database (e.g., using a round-robin scheme for load-balancing).","The pathname abstraction incorporates the notion of fetch-by-reference into T-SQL. Instead of retrieving the values associated with a column for any given row that satisfies a query, it may be desirable to retrieve the pathnames associated for a given row\/column pair in any given query. These pathnames can be subsequently used to retrieve the associated values.","Exemplary pathnames are typically of the form:\n\n","There are certain scenarios where the stored filestreams are largely read-only (e.g., an archive of satellite images). In this case, there is mostly read-only data stored as streams, and the column does not participate in an index. In such cases, the filestream column and the pathname extensions can be used for enhanced performance (e.g., by scale-out) without building additional code into the filestream server that handles out-of-band update issues.","Consider an application that stores tables for weather maps. In such cases, users desirably store pathnames to the row containing the weather map of their choice, e.g., a query results in a pathname to a column for the weather map of the city row in a table. As time varies, the actual value for this column also varies. The end-user desirably does not change the value. In such cases, the end-user application will store pathnames that only contain the unique volume identifier of the file system volume that stores the filestream value. The filestream server will work in conjunction with the database server to access the associated value at any point in time.","Content-editing applications edit streams on the filestream server with transactional semantics. For example, a photo-album application may store the photo images as filestreams. The application would like to annotate many rows at a time with all or nothing update semantics. Desirably, the filestream server would have transactional capabilities to implement this. A typical application would start a transaction against the database server, issue a query for multiple rows and get back a result set which contains pathnames for the filestream (e.g., photo image) column. The application then provides the pathnames to an application (e.g., a photo editor). The application opens these files in the context of the same transaction. The client redirector will communicate with the appropriate server, thereby passing the transaction context through. The server will open these streams after negotiation (e.g., row-level locking with the database). After the application has made the desired updates and commits, code on the server will tunnel the update through to the database with pre\/post images. This ensures the transactional semantics for the application (i.e., all the photos are updated or none).","If the LOB column (e.g., filestream) participates in indexes, triggers or constraints, it is desirable that all data updates go through the database so the indexes, triggers or constraints can be applied. In the case where manipulations on the filestream are by value, data changes are applied through the LPE\/QP\/SE stack. In accessing by value, the application does not have a FILESTREAMMONIKER and therefore is not changing data out-of-band of the database. A solution would be to provide the FILESTREAMMONIKER with the understanding that the entity that converts this into an open on a stream will use the pathname to obtain meta-information on a column. Specifically, the filestream server will use the pathname to go back to the row in the database and find out if the column participates in an index, constraint, etc. If this is the case, the server will ensure that at commit time, pre\/post images are sent via UPDATEs down the SQL stack. The solution is desirable because it means that the Storage Engine  can provide pathnames with embedded FILESTREAMMONIKERs and not have to make a choice based on whether or not a column participates in an index, constraint, trigger, etc. The burden of finding this out and acting accordingly is shifted to the entity that actually does the physical stream open, i.e., the server.","A programming model for creating a database with a filestream column is now described. MICROSOFT\u00ae's SQL Server 2000 has rich T-SQL commands for configuring the system files for a database. These commands give the database administrator a wide range of configuration choices, thereby enabling the administrator to take advantage of different configurations to get the desired performance for their database application.  is a flowchart of an exemplary method of creating a database with filestreams in accordance with the present invention.","Initially, at step , a database is created. A command to create a database is: CREATE DATABASE newdb. In the current programming model, this command can be augmented to create customized configuration (or added later as part of ALTER DATABASE). For example, SQL Server 2000 has the notion of FILEGROUPs. As part of CREATE DATABASE or ALTER DATABASE, the database administrator can add\/delete one or more FILEGROUPs. Each FILEGROUP consists of a set of OS files. When creating a TABLE, the administrator can specify the FILEGROUP for storing the data.","Filestream groups are created at step . Database configurations (FILESTREAMGROUPS) are provided in which the data is stored outside the database. A FILESTREAMGROUP is a set of volumes that contain the filestream data associated with a database. By default, there exists a primary FILESTREAMGROUP that has only one volume. This can be modified using ALTER DATABASE to add\/delete volumes to a FILESTREAMGROUP, at step . There are no restrictions on the number of FILESTREAMGROUPS associated with a database as well as the number of volumes associated with a FILESTREAMGROUP.","After a database has been associated with a FILESTREAMGROUP, each FILESTREAMGROUP is associated with a TABLE, at step . In SQL Server 2000, the TEXTIMAGE_ON modifier to CREATE TABLE allows the database administrator to specify the FILEGROUP in which the text, ntext and image column data associated with a table are stored. A FILESTREAM_ON modifier is implemented and added to the CREATE TABLE DDL. If not specified, the default volume is preferably the volume associated with the table's FILEGROUP. This provides the basis for defining the storage environment of a filestream column with any TABLE. The next step is the incorporation of a column of type filestream in a table definition to create a pathname, at step . One option for pathnames generated for the values is:\n\n","This organization has the property that all the values associated with a given column are grouped together. Therefore, operations like dropping a column in the database table translate to deleting the directory corresponding to the column. This provides a mechanism for deleting the row when a row has at most one filestream column type. Note that each such pathname corresponds to a cell in a table. It is noted that the filestream identifier (i.e., StreamGUID) picked for each filestream cell is unique.","At step , the filestream columns are populated. There are several techniques to populate the filestream column in a TABLE, several examples of which follow.","Insert a null value\u2014The FILESTREAM type will support NULLABILITY, i.e., A row can be created with a NULL value for the filestream column. This is useful for applications with sparse filestream content because unnecessary zero length files do not have to be created for column values that do not currently exist. An example is: INSERT customer VALUES (\u2018john\u2019, \u2018425-882-8080\u2019, \u20181234\u2019, NULL) In this case, the pathname to return for NULL columns should be provided.","Insert an empty value\u2014A row can be created with an empty value for the filestream column. This means a file will be created that is zero length. An example is: INSERT customer VALUES (\u2018john\u2019, \u2018425-882-8080\u2019, \u20181234\u2019, \u201c).","Insert with data inline\u2014A row can be created with data for the filestream column inline as part of the query language statement. Typically, the length of data stored in this column will be large. An example is: INSERT customer VALUES (\u2018john\u2019, \u2018425-882-8080\u2019, \u20181234\u2019, \u2018<contents>\u2019).","Insert with data copied from a file\u2014A row can be created with data for the filestream column copied from a pre-existing file. Instead of inserting the value in parentheses, a filename is indicated with the CopyFromFile( ) keyword. Data is copied in to the filestream column from this file. An example is:",{"@attributes":{"id":"p-0060","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DECLARE @pathname char(260)"]},{"entry":[{},"@pathname = \u2018<path to a file>\u2019"]},{"entry":[{},"INSERT customer VALUES (\u2018john\u2019, \u2018425-882-8080\u2019, \u20181234\u2019,"]},{"entry":[{},"CopyFromFile"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(@pathname))"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Preferably, when a row containing a filestream value is deleted, the file backing the filestream column residing outside the database is also deleted.","The filestream values can be subsequently retrieved from a table by value or by reference. An end user application issues a query for one or more pathnames. The application converts the pathname to a handle that may or may not entail a trip to the row in the database depending on whether the data has changed with time or not.","Certain applications may have the requirement that the row needs to be locked before the filestream column can be accessed. In such cases, it is desirable that (1) the server is able to use a pathname to get to the table in the database and find some property that indicates that row-level locks need to be acquired; and (2) the server acquires a row-level lock and releases it at appropriate times.","The infrastructure support for the filestream type will be implemented in the SE Access Methods module, provided within the Storage Engine . This is the place where a fork is made between varbinary and filestream data types. Based on the data type, the SE Access Methods code will call the FAM  which create, delete, read, and write file system streams. The FAM  will provide support for all the ILockBytes interface methods needed to support this data type.","Creating a row with a column of type filestream involves creating data outside the database, i.e., a file. Hence, consistency between the database and the data in the file system is very important. There are two kinds of consistency issues to consider: link level consistency and value level consistency. Link level consistency comes into play during creation\/deletion of a row. Creating a new row with a filestream column involves creating a new file. Similarly, deleting the row involves deleting the file. If a transaction aborts or there is a crash, it is desirable to ensure that there are no \u201cdangling\u201d references, i.e., a row with no file or a file with no row. In other words, the linkage between rows and files preferably is kept consistent. Value level consistency comes into play during updates to a row with a filestream column. Updates to the file need to be consistent with updates to the row. Values can be updated using in-place updates\u2014the file backing the filestream column is updated in-place, e.g., 15 bytes are modified at offset 10. This would necessitate logging of pre\/post images so that during recovery there is sufficient information to do redo\/undo processing. Values can also be updated by replacing updates in which the file backing the filestream column is deleted and a new file is created with the updated data.","According to an embodiment as shown in , three machines are implemented to play three different roles: (1) a client machine  from which the queries are initiated against the database(s)  to locate and manipulate the relevant information; (2) a database server  which hosts the database(s) ; and (3) a filestream server  which manages the file system volumes  on which the filestream values associated with a given database  are stored and supports out-of-band updates to the database(s) . Each database can have one or more filestream groups , and each filestream group  can include one or more volumes . The volumes reside on the filestream server . In an exemplary database installation, there are thousands of client machines, tens of filestream servers, and one database server. Specialized configurations arise when the volumes on which filestream data is stored are co-located with the database.","Preferably, a registration mechanism is provided by which the identifiers (e.g., GUIDs) associated with all file system volumes  containing filestream values are registered with a locator service which will enable a client machine  to establish network connectivity with a filestream server . Moreover, the database server(s)  register the identifiers (e.g., GUIDs) of the database(s)  hosted by them. One possible implementation of such a locator service would be the domain name system (DNS) service which can map the volume GUIDs and database GUIDs to IP addresses.","The filestream server  and the client redirector are preferably built on a protocol for maintaining the coherency of SQL metadata and filestream value data between the SQL database server  and the filestream server . On the client side, the protocol extensions enable the client machine  to handle redirected requests from the database server  to the filestream server . In order to facilitate the maximal offloading of activity from the database server  to the various filestream servers , the protocol extensions include the ability to exchange notifications about changes in the metadata of the various tables, e.g., addition of a constraint, trigger or column and deletion of a trigger, constraint or column. The FAM (e.g., FAM  in ) implemented as part of the SQL stack contains the callouts to initiate the propagation\/invalidation of cached metadata on the filestream servers  and ensure that they are synchronized with the metadata changes on the database server .","There are some cases in which the three machine configuration can be collapsed into fewer machines. In one scenario, for example, the file system volume containing the filestream data is hosted on the same machine as the database (e.g., SQL) server. In another exemplary scenario, the table is being accessed from the machine hosting the SQL server. From the underlying architecture perspective, this translates into either accessing a resource across the network or a local resource.","To enforce better consistency between the filestream references stored in the database and the filestream servers, a mechanism is provided on which the guarantees can be built in an incremental manner. The foundation for this is built on a user mode SQL agent that runs on the filestream servers and communicates with an agent running on the SQL server. By restricting the communication required to enforce consistency to this small group of machines, a better scale out architecture is provided.","This SQL agent is responsible for enforcing the link level consistency between the filestream servers  and the database server . For example, it will prevent the deletion of a StreamGUID that is being currently referenced by a row in a database. Preferably, the prevention of out of band deletion of stream values referenced in the database(s)  will be enforced. If the column were marked \u201cread only\u201d in the database , the filestream server  will deny write access to anyone using the generated pathname to gain write access to the value. If the column were marked \u201cread\/write\u201d, the filestream server  can obtain the raw access control list from the database server  and evaluate it before granting access to the value. This provides another opportunity for off-loading more processing from the database server  to the filestream server . The operations on the table such as dropping of a column and the corresponding deletion of all values referenced by that table can be offloaded to the filestream server .",{"@attributes":{"id":"p-0072","num":"0073"},"figref":["FIG. 5","FIG. 5"],"b":["480","483","400","489","400","430"]},"The client application  receives a result set back via the OLEDB stack . The client  then obtains pathnames for rows when it desires access to the content. This is done by calling the GetPathName( ) function provided by the OLEDB stack . The client application  performs a regular Win32 open (via element ) against this pathname or launches SHELL extension with this pathname. Win32 open goes to MUP  in the kernel, which contacts the available redirectors (RDR) . The appropriate redirector  claims this path and process the open via a lanman server (SRV) .","The filestream server  receives the open with a pathname, preferably in the canonical form described above. The SRV  reflects to a user-mode SQL agent . The agent  contacts the database  to obtain appropriate row-level locks, ACLs (access control lists), etc. This information is provided to the SRV . The SRV  now has enough information to complete a direct ID based open against the NT file system (NTFS)  volume  containing the stream. The SRV  caches the information thus obtained to save future user-mode roundtrips and\/or trips to the database. The SRV  completes the open to the RDR  which completes the open to the client application . The client application  now has a Win32 handle and can issue reads\/writes against it. It is noted that the communication between the user-mode SQL filestream agent  and the database(s)  can be bidirectional.","The present invention can be applied to a wide variety of technologies, database mapping, resources and localization, web services, business process modeling, enterprise software customization, and tools, for example.","As mentioned above, while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, or the like, the machine becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally, any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. For example, one skilled in the art will recognize that the methods as described in the present application may apply to any computing device or environment, such as a gaming console, handheld computer, portable computer, etc., whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 4"]}]},"DETDESC":[{},{}]}
