---
title: Generating object annotations
abstract: A computer-implemented method is disclosed for generating Dojo-conforming JavaScript Object Notation (JSON) objects for base objects of an object-oriented programming environment that have been annotated to denote which attribute declarations of the base object correspond to identified Dojo attributes. In a Java class, for example, annotations may be made to indicate which class attributes correspond to the identifier attribute of a Dojo JSON object and based on those annotations a Dojo-conforming JSON object may be generated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533665&OS=08533665&RS=08533665
owner: Cisco Technology, Inc.
number: 08533665
owner_city: San Jose
owner_country: US
publication_date: 20091116
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present disclosure generally relates to computer program application development and computer client-server communication techniques.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","In object-oriented computer program development, Rich Internet Application (RIA) architectures have recently become popular. An example of an RIA framework is Dojo, which is described at the Internet site dojotoolkit.org. In a Dojo based RIA architecture, RESTful web services act as the transport mechanism while JSON (JavaScript Object Notation) objects act as the data transfer object. \u201cRESTful web services\u201d refers to a web service implemented using HTTP and the principles of representational state transfer (REST), which is a style of software architecture for distributed hypermedia systems. JSON objects are described at the Internet site json.org.","JSON objects may be used to communicate object data from a JSON compatible server to clients such as those implemented using Dojo's RIA function libraries. However, Dojo also imposes other requirements on JSON objects to make them consumable directly by Dojo widgets. For example, Dojo widgets may require a JSON Object to contain a header instructing the widget how to map key pieces of its internal data to JSON attributes. Additionally, Dojo may expect the name of the first collection object in the JSON object to be named \u201citems\u201d and the names of any collection objects further down the hierarchy of the JSON object to be named \u201cchildren.\u201d Hence, generic JSON objects that do not meet these additional requirements cannot be consumed by Dojo widgets.","Generating Dojo-conforming JavaScript Object Notation (JSON) objects is described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Embodiments are described herein according to the following outline:\n\n","1.0 General Overview","Generating Dojo-conforming JavaScript Object Notation (JSON) objects is described. In an embodiment, a computer-implemented method includes obtaining and storing one or more annotations that denote, as a JSON attribute, one or more attribute declarations of a base object of an object-oriented programming environment.","In some embodiments, the computer-implemented method may also include, generating a JSON object based upon a base object at runtime of an executable computer program that has been created using the base object. Additionally, the computer-implemented method may include retrieving the annotations, creating a JSON header that comprises the annotations in a format compatible with a function library that expects name-value pair declarations, and attaching the JSON header to the JSON object, in some embodiments. In some embodiments, the JSON object may be modified to include an items attribute.","In other embodiments, a computer apparatus and a computer-readable medium are provided.","2.0 Structural and Functional Overview","Certain generic frameworks can transform other types of objects to JSON objects. As generic frameworks, they generate generic JSON objects, which conform to the JSON standard. For example, GSON, one of widely used JSON framework from Google, only generates standard JSON objects. However, if a standard JSON object is compared to a Dojo-conforming JSON object, there may be structural differences between these two objects that may make one unusable within the Dojo API without additional processing.","Currently, generating Dojo-conforming JSON objects may be accomplished by writing boilerplate code either at the server or client side to manipulate either the source objects or the generated JSON objects manually to make them Dojo Data Store compliant. However, the problem with this practice is that each Dojo developer may have to make modifications to object source code which may incur an increase in production costs and a reduction in product quality.",{"@attributes":{"id":"p-0019","num":"0028"},"figref":"FIG. 1","b":["102","104","104","106","108","110","116","108","104","112","104","108","114"]},"Computer  further comprises object transform logic , coupled to the RESTful web service  and server . The object transform logic  is configured to transform JSON objects into Dojo-compatible objects using the logic and functions that are further described herein. In an embodiment, object transform logic  comprises annotation receiving logic  coupled to a user input device  and to a JSON object creating unit . The annotation receiving logic  is configured to receive annotations of objects from the user input device  and to store the annotations in annotation store , which may comprise main memory, non-volatile memory, one or more disk storage units, or one or more other storage devices. The JSON object creating unit  is configured to create JSON objects and is coupled to a JSON object header unit , configured to create JSON object headers. A JSON object modifying unit  is coupled to unit  and comprises logic configured to modify header values and other aspects of Dojo-compatible JSON objects as further described.","For the server  to communicate with the application  using JSON objects , the JSON objects should conform to the Dojo API . For example, a basic unit of the dojo.data API is termed an item, which is composed of key\/value pairs called attributes and attribute values in dojo.data parlance. Additionally, ItemFileReadStore is the basic infrastructure component provided by the Dojo toolkit, which is built around the concept of an Item and acts as the model object driving most Dojo widgets. JSON objects conforming to the specific format required by the dojo.data API can be consumed directly by Dojo widgets. For example, a JSON object targeting a dojo ComboBox graphical user interface (GUI) widget may contain a JSON header that defines, for the widget, which field within the JSON object provides an item value and which field provides an item label.","Dojo framework  may call for JSON objects  to contain a JSON header instructing a widget in the Dojo framework how to map internal data elements to JSON attributes. Additionally, Dojo framework  may call for the name of the first collection object in a JSON object to be named \u201citems\u201d and the names of any collection objects further down the hierarchy of the JSON object to be named \u201cchildren.\u201d","In one embodiment, processes are configured for converting JSON objects into Dojo-conforming JSON objects, while interoperating with JSON and Dojo.","3.0 Generating Dojo-Conforming Json Objects","Embodiments relate to object annotations and a processing method or special-purpose computing devices configured to perform object transformations based on the annotations. Embodiments are operable as a JSON converter or as a post-processor to a JSON library.","3.1 Obtaining and Storing Annotations",{"@attributes":{"id":"p-0027","num":"0036"},"figref":"FIG. 2","b":["202","118","124","122"]},"In an embodiment, annotations are made to class definitions of base objects of an object oriented programming environment that indicate which attribute declarations within the class correspond to JSON attributes of by a Dojo function library. For example, in the Java programming environment, a Java class may declare class attributes. Some of these attributes may be annotated to indicate that the attribute corresponds to a specific Dojo attribute. In some embodiments, the object oriented programming environment may be different than Java, such as .NET, C#, SmallTalk, Objective-C, C++ or any other object oriented programming environment.","As one example, Java class object annotations may be implemented through the use of Java interfaces as shown in the code excerpt of TABLE 1. TABLE 1, and all other TABLES 2-9 in this disclosure, are provided to clearly illustrate examples of various techniques, but the techniques herein also encompass variations and alternatives and are not limited to the particular examples that are given in the tables. Thus, the tables represent possibilities but not the only approaches for implementation.",{"@attributes":{"id":"p-0030","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/**"]},{"entry":[{},"* Used to annotate the JSON \u2018identifier\u2019 attribute."]},{"entry":[{},"* fieldName is used to manually set value of \u2018identifier\u2019."]},{"entry":[{},"*\/"]},{"entry":[{},"@Target({FIELD, METHOD, CLASS})"]},{"entry":[{},"@Retention(RetentionPolicy.RUNTIME)"]},{"entry":[{},"@Documented"]},{"entry":[{},"public @interface JsonIdentifier {"]},{"entry":[{},"\u2003\u2003String fieldName( );"]},{"entry":[{},"}"]},{"entry":[{},"\/**"]},{"entry":[{},"* Used to annotate the JSON \u2018label\u2019 attribute."]},{"entry":[{},"* fieldName is used to manually set the value of \u2018label\u2019."]},{"entry":[{},"*\/"]},{"entry":[{},"@Target({FIELD, METHOD, CLASS})"]},{"entry":[{},"@Retention(RetentionPolicy.RUNTIME)"]},{"entry":[{},"@Documented"]},{"entry":[{},"public @interface JsonLabel {"]},{"entry":[{},"\u2003\u2003String fieldName( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In TABLE 1, the fieldname( )interface method may be implemented to indicate which attribute of the Java class corresponds to the JSON identifier attribute and the JSON label attribute that may be used by the Dojo function library. Hence, in an embodiment, a JSON object may be made into a Dojo-conforming object by providing code invoking the fieldname( )method of the JsonIdentifier and JsonLabel interfaces.","As a second example, Java class annotations may be implemented by annotating Java class attribute declarations as shown in TABLE 2.",{"@attributes":{"id":"p-0033","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/**"]},{"entry":[{},"\u2009*\u2003Details of a device"]},{"entry":[{},"**\/"]},{"entry":[{},"public class Device {"]},{"entry":[{},"\u2003\u2003@JsonIdentifier"]},{"entry":[{},"\u2003\u2003private String oid;"]},{"entry":[{},"\u2003\u2003@JsonLabel"]},{"entry":[{},"\u2003\u2003private String deviceName"]},{"entry":[{},"\u2003\u2003private String type;"]},{"entry":[{},"\u2003\u2003private String ip;"]},{"entry":[{},"\u2003\u2003[other declarations or code]"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the example of TABLE 2, the @JsonIdentifier and @JsonLabel annotations may be made inline with the Java class attribute declarations. For example, the @JsonIdentifier annotation may be made immediately before the declaration of the \u2018oid\u2019 class attribute. Thus, as discussed below, the JSON identifier attribute may be associated with and correspond to the oid class attribute. Similarly, the @JsonLabel attribute may be made immediately before the declaration of the \u2018deviceName\u2019 class attribute so that the JSON \u2018label\u2019 attribute may be associated with and correspond to the deviceName class attribute.","As a third example, Java class annotations may be implemented by annotating Java class object method declarations as shown in TABLE 3.",{"@attributes":{"id":"p-0036","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/**"]},{"entry":[{},"\u2009*\u2003Details of a device"]},{"entry":[{},"**\/"]},{"entry":[{},"\u2003\u2003public class Device {"]},{"entry":[{},"\u2003\u2003private String oid;"]},{"entry":[{},"\u2003\u2003private String deviceName"]},{"entry":[{},"\u2003\u2003private String type;"]},{"entry":[{},"\u2003\u2003private String ip;"]},{"entry":[{},"\u2003\u2003@JsonIdentifier"]},{"entry":[{},"\u2003\u2003public String getOid( ) {...};"]},{"entry":[{},"\u2003\u2003@JsonLabel"]},{"entry":[{},"\u2003\u2003public String getDeviceName( ) {...};"]},{"entry":[{},"\u2003\u2003[other declarations or code]"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the example of TABLE 3, the @JsonIdentifier and @JsonLabel annotations may be made inline with the Java class method declarations. For example, the @JsonIdentifier annotation may be made substantially immediately before the declaration of the \u2018getOid( )\u2019 class method. Thus, the JSON identifier attribute may be associated with and correspond to a value returned by an invocation of the \u2018getOid( )\u2019 method. Similarly, the @JsonLabel attribute may be made immediately before the declaration of the \u2018getDeviceName( )\u2019 class method so that the JSON \u2018label\u2019 attribute may be associated with and correspond to the value returned by an invocation of the \u2018getDeviceName( )\u2019 class method.","The code segments referred to above are merely illustrative and should not be construed as limitations on the concepts discussed herein as there are many different ways to annotate class objects in accordance with the embodiments discussed herein. Further, as previously indicated, the embodiments discussed are not limited to a Java programming environment implementation as the annotations discussed above may be made to objects of any object oriented programming environment.","Additionally, at step , obtaining and storing an embodiment may include receiving and storing a configuration file that includes a class name, and one or more tags, each tag associating a name of a class attribute used in the class with a JSON attribute. In some embodiments, annotations to object attribute declarations may be made using various configuration mechanisms. For example, annotations may be made in property files, XML files, a registry or other types of configuration mechanisms. An example of annotations in an XML configuration file may include the XML segment set forth in TABLE 4.",{"@attributes":{"id":"p-0040","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<class name= \u201dcom.cisco.person\u201d\/>"]},{"entry":[{},"\u2003\u2003<identifier name= \u201dSSN\u201d\/>"]},{"entry":[{},"\u2003\u2003<label name= \u201dFull_Name\u201d\/>"]},{"entry":[{},"<\/class>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the example XML annotation above, the XML is instrumented to denote JSON attributes that may be used to generate Dojo-conforming JSON objects, according to an embodiment. For example, the XML annotation above identifies a class \u2018com.cisco.person\u2019 and attributes of the class \u2018SSN\u2019 and \u2018Full_Name.\u2019 The XML annotation also associates the JSON attribute \u2018identifier\u2019 with the \u2018person\u2019 class attribute \u2018SSN\u2019 and the JSON attribute \u2018label\u2019 with the \u2018person\u2019 class attribute \u2018Full_Name\u2019. Thus, by identifying the \u2018identifier\u2019 and \u2018label\u2019 JSON attributes in this way, the XML annotation may be used to generate a Dojo-conforming JSON object. In an embodiment, using a separate annotation store, such as XML described above, may result in annotations that will work with objects where source code is not available, and may make embodiments described herein applicable to not only fully in-house or open-source artifacts, but also closed-end third party objects that may be provided via binary libraries, such as jars for Java programming language.","The XML annotations referred to above are merely illustrative and should not be construed as limiting the concepts discussed herein as there are many different ways to annotate object attribute declarations using various configuration mechanisms in accordance with the embodiments discussed herein. Further, as previously indicated, the embodiments discussed are not limited to an XML implementation as the annotations discussed above may be made using any configuration mechanism.","3.2 Generating Json Objects","Referring again to , at step , a JSON object is generated based upon the base object, according to an embodiment. In an embodiment, JSON object creating unit  receives a signal from annotation receiving logic  in response to obtaining the annotations. In response, the JSON object is created, for example, in main memory.","In some embodiments, a JSON object may be generated based upon the class definition of the base object using a JSON library, such as JSON-LIB or the GSON library from Google, Inc. In other embodiments, a JSON object may be generated based upon the class definition of the base object using a JSON converter that converts the base object into a Dojo-conforming JSON object according to other embodiments discussed herein. For example, a JSON converter may be implemented that converts a Java class into a Dojo-conforming JSON object rather than generating a standard JSON object that must be modified to be Dojo-conforming according to the embodiments discussed below.","3.3 Retrieving the Annotations","At step , at runtime of an executable computer program that has been created using a base object of an object-oriented programming environment, the annotations of the base object may be retrieved, according to an embodiment. In some embodiments, annotations may be retrieved by navigating through the object network of an object-oriented programming environment. In other embodiments, annotations may be retrieved from various configuration mechanisms, such as the XML or property files discussed above. In an embodiment, JSON object header unit  is configured to retrieve the annotations from annotation store .","In an embodiment, annotations may be retrieved by reading a plurality of base objects according to a recursive search order that iteratively reads all fields of a current class, a super class of the current class when the super class is present, and all non-primitive fields of the current class. However, objects native to the object-oriented programming environment may not be searched for annotations because developers may not have access to modify the class definitions of those objects. For example, annotations may be retrieved by first searching the current class object, i.e., the object to be converted into a JSON object.","After such retrieval, the properties of the current class may be searched followed by a search of any of the direct or indirect super classes. For example, annotations can be inherited by subclasses. Next, annotations may be retrieved by searching any of the classes enclosed in the current class. For example, a class may have attributes that are of a type defined by another class. Then, any of the direct or indirect super classes of the class objects enclosed in the current class may be searched for annotations. Finally, any of the properties of the class objects enclosed in the current class may be searched for annotations. If no annotations are found, an error may be reported.","In other embodiments, annotations may be retrieved from configuration mechanisms associated with base objects according to the recursive search order described in the preceding paragraph.","According to an embodiment, once the annotations are retrieved, the attribute declarations corresponding to the annotations may be associated with the JSON attributes to be consumed by the Dojo function library. For example, the \u2018oid\u2019 attribute of the Java class described above may be associated with the \u2018identifier\u2019 JSON attribute because the \u2018oid\u2019 attribute has been annotated with the @JsonIdentifier annotation. Similarly, the \u2018deviceName\u2019 attribute of the Java class described above may be associated with the \u2018label\u2019 JSON attribute required by the Dojo function library because the \u2018deviceName\u2019 attribute has been identified as corresponding to the @JsonLabel annotation. Hence, the identifier attribute of the JSON object may be assigned the \u2018oid\u2019 string and the label attribute of the JSON object may be assigned the \u2018deviceName\u2019 string, according to the example.","3.4 Generating the Json Header","At step  of , a JSON header including the JSON attributes compatible with the Dojo function library is generated, according to an embodiment. In an embodiment, JSON object header unit  receives a signal from JSON object creating unit and generates the JSON header in the manner now described.","In an embodiment, the base object attribute declarations denoted by the annotations described above may be analyzed to determine whether the attribute declarations declare attributes of a type that may be used as JSON attributes. For example, the attribute type may be any type that can be encoded as a string, such as integers, strings, or various kinds of scalar values. In some embodiments, a JSON header may be generated to include name-value pairs corresponding to annotated attribute declarations that may be consumable by Dojo widgets. For example, an identifier name-value pair may include the string \u2018identifier\u2019 as the name and a class attribute denoted by an annotation as the value. Thus, in the Java example above, the identifier name-value pair may be represented by the string \u201c\u2018identifier\u2019: \u2018oid\u2019\u201d and the header may be represented by the string \u201c\u2018identifier\u2019:\u2018oid\u2019, \u2018label\u2019:\u2018deviceName\u2019\u201d","In one embodiment, a JSON header may be defined as the data contained in a JSON object instructing a Dojo widget how to map key pieces of data to its internal data store. For example, a JSON header may be illustrated by the structure shown in TABLE 5, where the \u2018identifier\u2019 and \u2018label\u2019 attributes comprise the JSON header information.",{"@attributes":{"id":"p-0056","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\u2003\u2018identifier\u2019:\u2018oid\u2019,"},{"entry":"\u2003\u2003\u2018label\u2019:\u2018deviceName\u2019,"},{"entry":"\u2003\u2003\u2018items\u2019:"},{"entry":"\u2002\u2003\u2003["},{"entry":"\u2002\u2003\u2003\u2003\u2003{"},{"entry":"\u2002\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-3400-1)]}\u201d,"},{"entry":"\u2002\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-3400-1\u201d,"},{"entry":"\u2002\u2003\u2003\u2003\u2003\u2003\u2003..."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"If the above JSON object is used to drive a Dojo ComboBox widget, then the \u2018oid\u2019 of each object contained in the items collection will be used as the item value and \u2018deviceName\u2019 the item label. By using a JSON header, the JSON object may be consumed directly by the Dojo ComboBox widget. Additionally, the use of the JSON headers described herein may also make it possible for other Dojo widgets to consume JSON objects. For example, other annotations may be made to generate additional or different JSON attributes in the JSON header to allow the JSON object to be consumed by other Dojo widgets.","3.5 Modifying the JSON Object","At step  of , the JSON object may be modified to include the JSON header generated at step , according to an embodiment. In one embodiment, JSON object header unit  signals JSON object modifying unit  to perform modifications as now described. Modifications may comprise reading and writing new text or other data representing the objects stored on a computer-readable storage medium, such as disk storage, so that a state of the disk storage is transformed to reflect the modified objects.","In an embodiment, the JSON object may be modified to include an \u2018items\u2019 attribute. The JSON object may also be modified to include a \u2018children\u2019 attribute, according to some embodiments.","In an embodiment, a JSON header is inserted into a JSON object after the first left bracket (\u2018{\u2019) of the JSON object. For example, the JSON object may be data representing a base object of an object-oriented programming environment encoded into a string according to JSON format. The JSON formatted string may begin with a left bracket (\u2018{\u2019) indicating the beginning of the JSON object. The JSON header may be inserted into the JSON object by replacing the left bracket CI') with a concatenation of the left bracket and the generated JSON header (\u201c{\u2018identifier\u2019:\u2018oid\u2019, \u2018label\u2019:\u2018deviceName\u2019,\u201d).","In some embodiments, a JSON object may be modified to include an items attribute by replacing the first collection object identifier string with an items identifier string. For example, standard JSON objects may identify collection attributes using any attribute name. For example, in the JSON object set forth in TABLE 6, the first collection attribute is named \u2018devices\u2019.",{"@attributes":{"id":"p-0063","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\u2018devices\u2019:"]},{"entry":[{},"\u2003\u2003\u2003\u2003["]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2018oid\u2019:\u20191\u2019"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2018oid\u2019:\u20192\u2019"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003}, ..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"However, the Dojo function library may provide that the first collection attribute shall be named \u2018items\u2019. Hence, in an embodiment, the first collection attribute may be renamed \u2018items\u2019 to conform to the Dojo API.","In an embodiment, a JSON object may be modified to include a child attribute by replacing a second collection object identifier string with a children identifier string. For example, the \u2018devices\u2019 collection described above may contain other collections such as a collection of ports for each device. However, the Dojo API may only allow one \u2018items\u2019 attribute label and that label may be reserved for the first collection object. Consequently, the Dojo API may require that all other collection attributes be named \u2018children\u2019. Hence, a collection of \u2018items\u2019 may contain collections of \u2018children\u2019. Therefore, in an embodiment, JSON collection attributes other than the first collection attribute may be renamed \u2018children\u2019 to conform to the Dojo API.","In some embodiments, server  may be configured with object transform logic  so that the JSON data transfer objects  are prepared in a Dojo compatible form at computer  before transport over RESTful web services  to the application . In some embodiments, the methods described herein may be performed by a server computer configured for network communication with a client computer, at runtime of an executable computer program that has been created using the base object, and without modification of client-side script code that has been delivered to the client computer by the server computer.","TABLE 7 illustrates an example JSON object generated by the GSON library, for reference and background purposes. TABLE 8 illustrates an example JSON object that is consumable directly by Dojo widgets, and which may be generated by an embodiment of the techniques herein. TABLE 9 illustrates an example Dojo grid widget.",{"@attributes":{"id":"p-0068","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\u2003\u201cdevices\u201d:"},{"entry":"\u2003\u2003\u2003\u2003["},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20033400-1)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-3400-1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCISCO CATALYST ME-3400G-12CS-A\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.135\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(40)SE\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20037606-1)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-7606-1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCisco 7606\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.145\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(33)SRC3\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20037609-2)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-7609-2\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCisco 7609\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.147\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(33)SRB1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u20037606-2)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-7606-2\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCisco 7606\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.148\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(33)SRB1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003]"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0069","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*JSON Object (accessible from \/rest\/devices):"},{"entry":"{"},{"entry":"\u2003\u2003\u2018identifier\u2019:\u2018oid\u2019, \u2003<--JSON Header: attributes required by Dojo"},{"entry":"\u2003\u2003Data Store"},{"entry":"\u2003\u2003\u2018label\u2019:\u2018deviceName\u2019,"},{"entry":"\u2003\u2003\u2018items\u2019:"},{"entry":"\u2003\u2003["},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-3400-1)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-3400-1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCISCO CATALYST ME-3400G-12CSA\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.135\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(40)SE\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-7606-1)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-7606-1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCisco 7606\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.145\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(33)SRC3\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-7609-2)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-7609-2\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCisco 7609\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.147\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(33)SRB1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003},"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201coid\u201d:\u201c{[ManagedElement(Key\\u003dana-dev-7606-2)]}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cdeviceName\u201d:\u201cana-dev-7606-2\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cCisco 7606\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201cip\u201d:\u201c172.25.87.148\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201csoftwareVersion\u201d:\u201c12.2(33)SRB1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u201ccommunicationStateEnum\u201d:\u201c3\u201d"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003]"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0070","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*Dojo Grid Widget:"},{"entry":"<div\u2002dojoType=\u201cdojo.data.ItemFileReadStore\u201d"},{"entry":"\u2009\u2003\u2003jsId=\u201cwishStore\u201d url=\u201c\/rest\/devices\u201d>\u2003\u2190-Consumed directly by"},{"entry":"\u2009\u2003\u2003Dojo Widget"},{"entry":"<\/div>"},{"entry":"<table id=\u201cgrid\u201d"},{"entry":"\u2009\u2003\u2003dojoType=\u201cdojox.grid.Grid\u201d"},{"entry":"\u2009\u2003\u2003store=\u201cwishStore\u201d"},{"entry":"\u2009\u2003\u2003query=\u201c{ oid: \u2018*\u2019 }\u201d"},{"entry":"\u2009\u2003\u2003clientSort=\u201ctrue\u201d"},{"entry":"\u2009\u2003\u2003style=\u2018width:98%;height:210px;\u2019>"},{"entry":"\u2009\u2003\u2003<thead>"},{"entry":"\u2003\u2003\u2003\u2003<tr>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<th field=\u201coid\u201d width=\u201c400px\u201d>OID<\/th>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<th field=\u201cdeviceName\u201d width=\u201c200px\u201d>Device Name<\/th>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<th field=\u201ctype\u201d width=\u201c200px\u201d>Type<\/th>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<th field=\u201cip\u201d width=\u201c200px\u201d>IP<\/th>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<th field=\u201csoftwareVersion\u201d width=\u201c200px\u201d>Version<\/th>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<th field=\u201ccommunicationStateEnum\u201d width="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u201c200px\u201d>State<\/th>"},{"entry":"\u2003\u2003\u2003\u2003<\/tr>"},{"entry":"\u2003\u2003<\/thead>"},{"entry":"<\/table>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"4.0 Implementation Mechanisms\u2014Hardware Overview",{"@attributes":{"id":"p-0072","num":"0081"},"figref":"FIG. 3","b":["300","300","302","304","302","300","306","302","304","306","304","300","308","302","304","310","302"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another machine-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The terms \u201cmachine-readable medium\u201d and \u201ctangible computer-readable medium,\u201d \u201clogic\u201d or \u201ccomputer code\u201d as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system , various machine-readable media are involved, for example, in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to storage media and transmission media. Storage media includes both non-volatile media and volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications. All such media must be tangible to enable the instructions carried by the media to be detected by a physical mechanism that reads the instructions into a machine.","Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","5.0 Extensions and Alternatives","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
