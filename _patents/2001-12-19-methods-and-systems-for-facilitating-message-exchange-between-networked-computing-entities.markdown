---
title: Methods and systems for facilitating message exchange between networked computing entities
abstract: Methods for establishing communication between computing entities are provided. In one example, a service model illustrates communication with a web server using a service proxy to manage a communication exchange. The service model includes a dispatcher within the service proxy to process the communication exchange. The processing of the communication exchange includes defining a request, defining a container in which to enclose the request, defining a post request event to dispatch the container with the request, and defining a response container for obtaining a response to the request. The container with the request is transmitted through the web server to a service for a responding entity. The service uses a delegate registry to map the request to a delegate which obtains a response from the responding entity. The response is formatted and transmitted through the web server to the service proxy which provides the response to the requesting entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06950872&OS=06950872&RS=06950872
owner: Sun Microsystems, Inc.
number: 06950872
owner_city: Santa Clara
owner_country: US
publication_date: 20011219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates generally to communication between systems in the context of web services, and more specifically to a message exchange framework and methods.","2. Description of the Related Art","Communication between systems such as in business-to-business applications, web services, data base mining, and the like increasingly rely on developing XML (eXtensible Markup Language) technology for developing, disseminating, and exchanging data and knowledge. As newer and more robust systems emerge implementing advanced technologies, legacy systems remain vital contributors and resources. Legacy systems, however, need a method and system to enable communication and exchange with web servers and systems incorporating new communication protocols.","Web-enabling legacy systems typically involves communications APIs (Application Programming Interfaces). Communications APIs, however, tend to include low level dependencies, and emerge as complex systems incorporating protocol-specific and application-specific coding. Such communication APIs are therefore severely limited in development and deployment opportunities.","What is needed are computer implemented methods and systems to web-enable legacy systems that are implemented based on open source and standard APIs, using protocols as required to access local, remote, and secure services in a common fashion. The web-enabling of legacy systems should be based on core principles of open source and standard APIs without constraints of remote procedure call limitations.","Broadly speaking, the present invention fills these needs by providing methods to web-enable legacy systems by providing a message exchange framework implemented in a service model. The present invention can be implemented in numerous ways, including as a process, an apparatus, a system, a device, a method, or a computer readable media. Several embodiments of the present invention are described below.","In one embodiment, a computer implemented method for establishing communication between computing entities interconnected over a network is disclosed. The computer implemented method includes establishing communication with a web server to begin a communication exchange. A service proxy is executed to manage the communication exchange, and a dispatcher within the service proxy is executed. The dispatcher is configured to process the communication exchange which includes defining a request, defining a container for enclosing the request, defining a post request event for dispatching the container having the request, and defining a response container for obtaining a response to the request. The computer implemented method further includes transmitting the container enclosing the request and the response over the network to a responding entity. A response from the responding entity is received by the dispatcher in the response container.","In another embodiment, a method for enabling communication between a requesting entity and a responding entity is disclosed. The method includes receiving a request at the requesting entity, and the obtaining of the request by a service proxy. The service proxy is configured to generate a message for the request. The method further includes the service proxy dispatching the message to a service through a web server. The message is received at the service which has a delegate broker. The delegate broker is in communication with a delegate registry which associates the message with a delegate. The delegate is configured to communicate with the responding entity to process a transaction defined by the message.","In yet another embodiment, a computer readable media having program instructions for enabling communication between computing entities is disclosed. The computer readable media includes program instructions for invoking a service proxy to process a request by a requesting entity. The processing of the request includes receiving the request from the requesting entity, generating a message for the request, dispatching the message to a service through a web server, and preparing to receive a response. Further program instructions are included for receiving the message at the service, which includes a delegate broker, and for formatting a response which is obtained by the delegate broker, and for transmitting the response from the service to the service proxy.","Other aspects of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","An invention for web-enabling legacy systems is disclosed. In preferred embodiments, a service model includes computer implemented methods for establishing communication between computing entities interconnected over a network. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be understood, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.","Methods of the present invention, as described herein implement the well known Java\u2122 (hereinafter \u201cJava\u201d) programming language. In operation, a user of a typical Java based system interacts with an application layer of a system generally written by a third party developer. The application layer generally provides the user interface for the system. A Java module is used to process commands received by the application layer. A Java virtual machine is used as an interpreter to provide portability to Java applications. In general, developers design Java applications as hardware independent software modules, which are executed Java virtual machines. The Java virtual machine layer is developed to operate in conjunction with the native operating system of a particular hardware, which represents the physical hardware on which the system operates or runs. In this manner, Java applications can be ported from one hardware device to another without requiring updating of the application code.","Unlike most programming languages, in which a program is compiled into machine-dependent, executable program code, Java classes are compiled into machine independent byte code class files which are executed by a machine-dependent virtual machine. The virtual machine provides a level of abstraction between the machine independence of the byte code classes and the machine-dependent instruction set of the underlying computer hardware. A class loader is responsible for loading the byte code class files as needed, and an interpreter or just-in-time compiler provides for the transformation of byte codes into machine code.","More specifically, Java is a programming language designed to generate applications that can run on all hardware platforms, small, medium and large, without modification. Developed by Sun, Java has been promoted and geared heavily for the Web, both for public Web sites and intranets. Generally, Java programs can be called from within HTML documents or launched standalone. When a Java program runs from a Web page, it is called a \u201cJava applet,\u201d and when run on a Web server, the application is called a \u201cservlet.\u201d","Java is an interpreted language. The source code of a Java program is compiled into an intermediate language called \u201cbyte code\u201d. The byte code is then converted (interpreted) into machine code at runtime. Upon finding a Java applet, the Web browser invokes a Java interpreter (Java Virtual Machine), which translates the byte code into machine code and runs it. Thus, Java programs are not dependent on any specific hardware and will run in any computer with the Java Virtual Machine software. On the server side, Java programs can also be compiled into machine language for faster performance. However a compiled Java program loses hardware independence as a result.","Turning now to , a service model  in accordance with one embodiment of the present invention is illustrated. The service model  includes a requesting entity  and a responding entity . In one embodiment, the service model  represents a business-to-business exchange of data, such as the exchange of licensing data or rights, business data, and the like. For ease of understanding, a specific example of a business-to-business exchange of data is described in greater detail below in reference to FIG. .","In general, a business-to-business exchange might include a request for and receipt of data or information. Typically, a request is transmitted by a requesting entity  to a web server  which in turn transmits the request to a source of the requested information or data, e.g., responding entity . The web server  then receives a response, and transmits the response with the requested information or data to the requesting entity . Alternatively, a requesting entity  transmits a request through a web server  to a responding entity  which then processes the request, and provides a response.","The service model  illustrated in  illustrates an embodiment of an exchange between the requesting entity  and the responding entity  across web server . Additionally, exchange of information is illustrated between a requesting entity  and a data source  which does not involve communication across a web server .","In one embodiment, the requesting entity  and the responding entity  need not be previously known to each other, and need not be running the same types of operating systems using the same types or formatting of data. In accordance with known Internet and web protocols, dissimilar systems can effectively communicate, establishing the link to enable the service model  to conduct an exchange as illustrated, and enabling the requesting entity  to obtain data or information from a responding entity  to be used by the requesting entity  in a manner and format as required.","Typical Internet communication architecture is illustrated in the service model  as a web server . The exemplary Internet communication architecture of a web server  includes TCP\/IP  Internet protocol, HTTP(S)  communication formatting protocol, and an exemplary Servlet . In the illustrated embodiment, HTTP(S)  provides for secure communication formatting protocol, which is common when sensitive, confidential, or private information is to be communicated. In alternative embodiments of the present invention, HTTP, FTP, file, and other communication formatting protocols are supported, as will be described in greater detail below. In one embodiment of the invention, the communication formatting protocol is independent of the present invention. The URL (Uniform Resource Locator) is the Internet address of the requesting entity , of the responding entity , as well as of the web server  having a Servlet  facilitating the data exchange, and establishes the communication formatting protocols supported or required by each entity. Typically, a requesting entity  calls a web server  having a web server URL. Therefore, when making the call to the web server , the URL of the web server  dictates the communication formatting protocol required or optionally supported, e.g., HTTP, HTTP(S), file, or FTP. Similarly, if a requesting entity  transmits directly to a responding entity , the URL of the responding entity  dictates the formatting protocol required or optionally supported.","The service model  illustrates an embodiment in which requesting entity  communicates, ultimately, with a responding entity  to conduct an information or data exchange. The requesting entity  invokes a service proxy  to broker the exchange. The service proxy  is configured to operate with Java classes to standardize a communication link between the requesting entity  and the web server , or the responding entity , through a file transfer protocol. The Java classes are defined in greater detail with reference to Tables 1-4 below. In one embodiment, an initial communication between the requesting entity  and the responding entity  is established across a web server , using Servlet , to coordinate and facilitate, by way of example, the purpose of the exchange, to validate the requesting entity  and responding entity , to establish rights or entitlement to the exchange, to coordinate format, and other such administrative functions. The requesting entity  and the responding entity  may or may not be known to each other. In one embodiment, the requesting entity  establishes communication with web server , and Servlet  facilitates communication with the appropriate responding entity  for the requested information or data. Servlet  then invokes a service  which is analogous to the service proxy  of the requesting entity . In another embodiment, Servlet  facilitates communication with the appropriate responding entity  which invokes the service . Subsequent communication between requesting entity  and responding entity  is conducted between service proxy  and service  across web server .","The service proxy  dispatches messages containing requests for data or information obtained  from the requesting entity . Exemplary message requests are shown as \u201cmessage a request\u201d , \u201cmessage b request\u201d , and \u201cmessage c request\u201d . A dispatcher  of the service proxy  constructs a message to include a message request , , , which is then transmitted  across web server , in one embodiment, and received by service . A delegate broker  of service  uses a delegate registry  to provide  the received message request to the appropriate delegate for processing to obtain the response. In the illustrated service model , an exemplary delegate registry  shows the assignment of specific message requests to specific delegates, and exemplary delegates are shown as \u201cdelegate a\u201d , \u201cdelegate b\u201d , and \u201cdelegate c\u201d . The received message requests are shown as \u201cmessage a request\u201d \u2032 in \u201cdelegate a\u201d , \u201cmessage b request\u201d \u2032 in \u201cdelegate b\u201d , and \u201cmessage c request\u201d \u2032 in \u201cdelegate c\u201d ","The delegates , , , process the message requests \u2032, \u2032 \u2032, to provide responses, shown as \u2032, \u2032, and \u2032. Each of the delegates , , , is configured to process a particular type of request. Delegate registry  details the pairing of specific requests , , , to be received by service  with the correct delegate , , to process each request \u2032, \u2032 \u2032 and obtain the data or information to supply the appropriate response \u2032, \u2032, \u2032. The delegate broker  obtains  message responses \u2032, \u2032, \u2032, from delegates , , , and service  transmits  message responses \u2032, \u2032, \u2032 to web server , and, in one embodiment, Servlet  formats and transmits  message responses \u2032, \u2032, \u2032, to service proxy . In another embodiment, service  transmits  formatted message responses \u2032, \u2032 \u2032 across web server  to service proxy . Service proxy  processes the received transmission to provide  the responses to the requesting entity , shown as \u201cmessage a response\u201d , \u201cmessage b response\u201d , and \u201cmessage c response\u201d ","In another embodiment of the invention, the exchange is with a data source  that does not require transmission across web server . By way of example, dispatcher  uses a file protocol to transmit  a request and obtain  a response , which is then provided to the requesting entity . Service model  provides for information or data exchange by implementing the appropriate format and protocol as dictated by the source of the desired information.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2","FIG. 2"],"b":["100","100","102","104","102","116","106","106","120","2","124","120","130","104","120","130","106","116","116","102"]},"Service model  illustrates an exchange of information between a requesting entity  and a responding entity  that can range from the very simple request and response, to a complex series of multiple exchanges, conditional processes, a plurality of disparate source locations, and the like. As is known, process implementations to accomplish the range of possible exchanges can also vary from the very simple iteration of steps to perform simple tasks, to the detailed and complex specific iterations for a plurality of conditions and processes. In one embodiment of the present invention, service model  is implemented to accomplish a plurality of data or information exchange scenarios using elementary communication formatting protocols and routines.","By way of example, HTTP (HyperText Transfer Protocol) is implemented in the web environment using the elementary calls of \u201cget,\u201d \u201cpost,\u201d and \u201cmessage.\u201d In one embodiment of the present invention, service model  is implemented with HTTP protocol to exchange data with a responding entity  by way of a web server . As is described in greater detail below, a request is put into a message which is then processed through a dispatchable interface as a get message or a post message to a Servlet on a web server . The Servlet receives a response which is transmitted back to the service proxy  which removes the response from the message and provides the requested data or information to the requesting entity .","In one embodiment of the present invention, a requesting entity  desires to obtain, provide, or exchange data or information with a responding entity . The request is formatted in a protocol to be transmitted to web server  and processed by Servlet  (see FIG. ). Using HTTP protocol, the request is wrapped in a \u201cmessage.\u201d An HTTP message is a specific format and protocol for transmitting data. In one embodiment of the present invention, a request for information or data is wrapped in an HTTP message as illustrated in Table 1.",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MESSAGE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"+Message( )"]},{"entry":[{},"+Message(Map headers)"]},{"entry":[{},"+Message(String body)"]},{"entry":[{},"+Message(Map headers, String body)"]},{"entry":[{},"+setHeader(String key, String value)"]},{"entry":[{},"+getHeader(String key) : String"]},{"entry":[{},"+getHeaderKeys( ) : Iterator"]},{"entry":[{},"+getSessionId( ) : String"]},{"entry":[{},"+removeHeader(String key)"]},{"entry":[{},"+getBody( ) : String"]},{"entry":[{},"+setBody(String body)"]},{"entry":[{},"+hasBody( ) : boolean"]},{"entry":[{},"+toString( ) : String"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen in Table 1, an HTTP message in accordance with one embodiment of the present invention is some \u201cbody,\u201d and associated headers, that include the request to obtain, provide, or exchange information with a responding entity, and wrapped in the MIME (Multipurpose Internet Mail Extension) protocol headers providing for message transmission to a web server.","An HTTP message such as that illustrated in Table 1, is transmitted to a web server using a \u201cget\u201d or \u201cpost\u201d message class. As is known, an HTTP GetMessage is a class, and an HTTP PostMessage is another class that extends the GetMessage class. Table 2 shows an exemplary GetMessage in accordance with one embodiment of the present invention:",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GETMESSAGE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"method : String = null"]},{"entry":[{},"message : Message = null"]},{"entry":[{},"connection : URLConnection = null"]},{"entry":[{},"+GetMessage( )"]},{"entry":[{},"+GetMessage(URL url)"]},{"entry":[{},"+Getmessage(URL url, Message message)"]},{"entry":[{},"+getURL( ) : URL"]},{"entry":[{},"+setURL(URL url)"]},{"entry":[{},"+getHeader(String key) : String"]},{"entry":[{},"+getHeaderKeys( ) : Iterator"]},{"entry":[{},"+setHeaders(Map headers)"]},{"entry":[{},"+setHeader(String key, String value)"]},{"entry":[{},"+removeHeader(String Key)"]},{"entry":[{},"+isUnicodeEncoding( ) : boolean"]},{"entry":[{},"+setUnicodeEncoding(boolean isUnicodeEncoding)"]},{"entry":[{},"+isFollowRedirect( ) : boolean"]},{"entry":[{},"+setFollowRedirect(boolean isFollowRedirect)"]},{"entry":[{},"+dispatch( ) : Message"]},{"entry":[{},"+toString( ) : String"]},{"entry":[{},"getBody( ) : String"]},{"entry":[{},"setBody(String body)"]},{"entry":[{},"openConnection( )"]},{"entry":[{},"closeConnection( )"]},{"entry":[{},"doGet( )"]},{"entry":[{},"getResponse( )  : Message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The GetMessage class as illustrated in Table 2, takes the message (see Table 1), and provides for dispatching it to a web server. It should be noted in Table 2 that one embodiment of the present invention includes the synchronous actions of transmitting a message and receiving a response.","Table 3 shows an embodiment of a PostMessage class in accordance with the present invention:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00001","num":"00001"},"img":{"@attributes":{"id":"EMI-C00001","he":"84.24mm","wi":"109.81mm","file":"US06950872-20050927-C00001.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment of the present invention, the web server interactions of get or post are managed by the service proxy . Both get and post are transmitted to a web server  by a dispatch method, using a dispatchable interface. One embodiment of a dispatchable interface is shown in Table 4:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"<<interface>>"},{"entry":"Dispatchable"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"+getURL( ) : URL"]},{"entry":[{},"+setURL(URL)"]},{"entry":[{},"+getHeader(String key) : String"]},{"entry":[{},"+getHeaderKeys( ) : Iterator"]},{"entry":[{},"+setHeaders(Map headers)"]},{"entry":[{},"+setHeader(String key, String value)"]},{"entry":[{},"+removeHeader(String key)"]},{"entry":[{},"+isUnicodeEncoding( ) : Boolean"]},{"entry":[{},"+setUnicodeEncoding(boolean isUnicodeEncoding)"]},{"entry":[{},"+isFollowRedirect( ) : boolean"]},{"entry":[{},"+setFollowRedirect(boolean isFollowRedirect)"]},{"entry":[{},"+dispatch( ) : Message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Tables 1-4 illustrate an embodiment of the present invention in which a request to obtain, provide, or exchange information is wrapped in a message and transmitted to a web server  using HTTP protocol. In this manner, XML is transmitted over HTTP (or HTTP(S), FTP, or other protocol) in a message exchange framework. Further, as illustrated in FIG.  and , enabling XML to be transmitted over HTTP (or HTTP(S), FTP, or other protocol) web-enables at least the two participating entities (requesting entity  and responding entity ), and potentially a plurality of entities participating in the exchange of information.","The illustrated embodiment includes the synchronous actions of request and response, and therefore, once a request is transmitted through dispatchable interface, a response is anticipated (see the last line of GETMESSAGE in Tables 2 and 3). It should be understood that it is the illustrated actions of request and response that are synchronous, and not necessarily the underlying transactions. By way of example, a request action may stimulate a response consisting of acknowledgment of receipt of the request. In one embodiment, the transmission of the requested information or data may occur as a synchronous response to a request, and in another embodiment, the requested information or data may be transmitted as a request action in a separate exchange.","In one embodiment, the request message is formatted and transmitted to a web server  by service proxy . The dispatchable interface (see Table 4) is an interface between service proxy  and web server  providing for the transmission of an HTTP message as one of a GetMessage (Table 2) and a PostMessage (Table 3).","In one embodiment of the invention, the GetMessage or PostMessage is transmitted to web server  and processed by Servlet . In addition to the above described functions of invoking service  for processing of transmitted requests, Servlet  extracts the request from the GetMessage or PostMessage and provides the request to service  for processing by delegate broker . Once a response has been obtained from responding entity  by the appropriate delegate, service  provides the response to Servlet  which formats the response into a response message which is then transmitted back to service proxy .","In another embodiment, the Servlet  facilitates the communication between the service proxy  and the service . Once communication is established, the request as a GetMessage or PostMessage is transmitted from service proxy  to service , and a response as a GetMessage or PostMessage is transmitted from service  to service proxy .","It should be appreciated that, although the illustrated service model  has been described as an information or data exchange between a requesting entity  and a responding entity , exchange of data or information is a two-way operation, and therefore a requesting entity  in one embodiment can be a responding entity  in another embodiment, and the responding entity  in one embodiment can be a requesting entity  in another embodiment. Additionally, service model  can include a plurality of requesting entities , a plurality of responding entities , as well as a plurality of combinations of one or more requesting entities  and one or more responding entities . By way of example, a requesting entity  can transmit a request to a responding entity , and the responding entity , in order to provide the requested information, transmits one or more requests to one or more different responding entities, and so forth. A plurality of embodiments of the present invention, therefore, provide for communication exchange through client-server, peer-to-peer, multicast, chaining, and other communication configurations.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 3A","FIG. 3A"],"b":["3","4","102","116","200"]},"The method begins with operation  in which the request message is defined. A plurality of processes are accomplished in defining the request message. In one embodiment, a negotiation or exchange occurs between a service proxy  (see ) and a service  (see FIGS.  and ). The negotiation includes the establishing of a message format (e.g., XML, JDK, binary, etc.), and general subject or nature of the request. As described above in reference to , a delegate broker uses a delegate registry to route specific requests to specific, appropriate delegates for processing and obtaining the requested information or data from a responding entity. In one embodiment of the invention, the delegate registry contains the mapping of requests to delegates. The specific mapping contained in the delegate registry is established during operation  when the request message is defined.","In one embodiment of the invention, the same request may be transmitted multiple times. By way of example, in a business-to-business exchange in which information is periodically updated, a request may be repeatedly transmitted to obtain a continually updated response. In such an exchange, the requesting entity, the web server, the responding entity, and the request may remain constant. In operation , the defining of the request message includes the determining if the same request message has been previously transmitted by the same service proxy to the same service. If a message transmission is being repeated, no negotiation is necessary. In one embodiment, each exchange of data or information between a requesting entity and a responding entity results in a session ID being assigned to the requesting entity. A session ID is retained by the service proxy for use by the Servlet (or service proxy and service) to, for example, avoid unnecessary validation, verification of access, and the like. Although, in one embodiment, a message is instantiated for each request, instantiating a message includes calling the session ID (see Table 1), if one exists, and if a session ID exists, the defining in operation  is reduced or eliminated as appropriate. The session ID, therefore, enables stateful communication between a service proxy and service.","Once the request message is defined in operation , the method continues with operation  in which a request event is accessed. The accessing of a request event includes instantiating a request event, or re-using a request event that has previously been instantiated. In one embodiment, a request event must be instantiated at least once. Once instantiated, the request event is accessed or re-used as necessary for repeated occurrences of the same request event.","A request event is the operation that triggers the series of events that occur to accomplish a data or information exchange once a request message has been defined. In one embodiment of the invention, the request event is the creation of the container, the message, in which the request message is transmitted.","Once the request message is accessed in operation , the method advances to operation  in which the message is bound to the container. In one embodiment, the \u201cmessage\u201d of operation  is the request message defined in operation , which is the request to obtain, provide, or exchange data or information with a responding entity. The container of operation  is the instantiation of the message class as illustrated in Table 1. As illustrated in Table 1, instantiating the message class includes getting a body, if a message body exists for the particular exchange event. In operation , the message that is bound to the container may include the \u201cbody\u201d listed in Table 1.","Following the binding of the message to the container in operation , the method continues with operation  in which a dispatcher is accessed. The accessing of a dispatcher includes instantiating a dispatcher, or re-using a dispatcher that has previously been instantiated. In one embodiment, a dispatcher for a specific service proxy must be instantiated at least once. Once instantiated, the dispatcher is accessed or re-used as necessary for repeated request dispatch.","In one embodiment of the invention, a dispatcher, using either GetMessage or PostMessage as appropriate, transmits or dispatches the message through a dispatchable interface to a web server. As described above, a dispatcher may be instantiated once, and then re-set and re-used as necessary for multiple or repeated requests. A session ID assigned by the web server is retained by the service proxy, allowing repeated and multiple exchanges between the requesting entity and the responding entity using a dispatcher that is instantiated one time.","It should be further noted that although a dispatcher need only be instantiated once and re-used as appropriate, a dispatcher is not pre-programmed with code for the plurality of protocol which can be used in the exchange of data or information, in one embodiment of the invention. When a dispatcher is accessed, the dispatcher will be provided the URL of the destination web server. The dispatcher obtains protocol handlers appropriate for the destination URL. One embodiment of the present invention is therefore protocol agnostic, and easily implemented without limitation by destination protocol. The specific function of a dispatcher is described in greater detail in reference to  below.","The method advances to operation  in which the container is bound to the dispatcher. Following operation , the method concludes with operation  in which the dispatcher dispatches the message and waits for a response. As described earlier, flowchart  illustrates those method operations accomplished by the requesting entity through the service proxy. Once the dispatcher of the service proxy dispatches the container having the request message through dispatchable interface, the service proxy awaits a response (see Tables 1-4). Succeeding operations are accomplished by the service and responding entity, and therefore the method of the requesting entity is done.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 3B","FIG. 3A"],"b":["212","200","212","220"]},"The operation proceeds, if optional method operation  is performed and a response of valid is returned, with method operation  in which the request message is serialized. In one embodiment, the serialization of the request message includes the translation of the message request into XML, binary, or other format, to provide for transmission of the message request as a part of the HTTP message (see Table 1). In an embodiment of the invention, the serialization is accomplished at the time of dispatch, and is therefore illustrated as a detailed method operation in FIG. B.","In method operation , a message class with HTTP knowledge is instantiated. An exemplary message class is illustrated in Table 1. In one embodiment of the invention, the message class has HTTP knowledge because a URL that has been provided (see Tables 2, 3, and 4, and operation  above) dictates HTTP protocol. As described above in reference to operation  of flowchart , the dispatcher of the service proxy has no pre-programmed knowledge of the required protocol. When the dispatcher is provided the web server URL, the dispatcher obtains the appropriate protocol handlers dictated by the protocol of the destination URL. Similarly, when the message class is instantiated, the URL of the destination web server is known, and the protocol handlers are provided based on the protocol of the destination URL. In one embodiment, the destination web server uses HTTP protocol, and the message class is instantiated with HTTP knowledge.","It should be appreciated that corresponding actions and events occur on the back side of the exchange in accordance with known web services operations. In one embodiment, a Servlet on a web server invokes a service which is analogous to the service proxy of the requesting entity (see FIGS.  and ). When a Servlet processes a request for information, data, or exchange, a service is used to broker the communication with an appropriate responding entity, or service for the responding entity. In another embodiment, the Servlet facilitates the communication between the requesting entity and the responding entity, and once established, the communication exchange is conducted between the service proxy and the service.","Using a delegate registry to map requests with appropriate delegates for obtaining responses from responding entities, a delegate broker of the service transmits requests to the corresponding delegates which receive, process, and exchange information with a responding entity. Delegates provide responses to the service which in turn provides responses to the Servlet, or across the web service to the service proxy. In one embodiment of the present invention, the service constructs the response in the message exchange framework and transmits the message to the service proxy. In another embodiment, the service provides the responses to the Servlet which constructs the response in the message exchange framework and transmits the message to the service proxy.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 4","FIG. 3A"],"b":["300","300","302"]},"Once accessed, the dispatcher performs a number of method operations as illustrated in flow chart diagram . Table 5 is provided to illustrate an embodiment of a dispatcher, containing method operations described in reference to the remaining method operations of flow chart diagram :",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DISPATCHER"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public Message dispatch(URL url, Map queryString, Message message)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"throws IOException {"]},{"entry":[{},"URL u = bindQueryString(url, queryString);"]},{"entry":[{},"Dispatchable dispatcher = null;"]},{"entry":[{},"Message response = null;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"while (u != null) {"]},{"entry":[{},"dispatcher = (message != null ?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"new PostMessage(u, message) : new GetMessage(u));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"u = null;"]},{"entry":[{},"if(this.profile.isCookieEnabled( )) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(this.sessionId != null) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dispatcher.setHeader(COOKIE_HEADER,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SESSION_ID + EQUAL + this.sessionId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"response = dispatcher.dispatch( );"]},{"entry":[{},"if (response != null) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"String location = response.getHeader(LOCATION_HEADER);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (location != null) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"u = new URL(location);"]},{"entry":[{},"} catch (MalformedURLException mue) {"]},{"entry":[{},"if (VERBOSE) { mue.printStackTrace(  );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (response != null) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this.sessionId = response.getSessionId( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return response;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Returning to , the dispatcher determines whether the request message has a message body, as shown in decision block . If there is no message body, a \u201cno\u201d to decision block , the dispatcher will instantiate a GetMessage for transmission through the dispatchable interface to the web server. The method is illustrated by operation  in which the dispatcher instantiates a GetMessage class (see Table 2). The method continues with operation  in which the dispatcher passes the destination URL from post request event to GetMessage. The GetMessage is then dispatched through the dispatchable class interface in operation .","If the request message has a message body, a \u201cyes\u201d to decision block , the dispatcher instantiates PostMessage, as shown in operation . As described above in reference to Tables 2 and 3, PostMessage class extends GetMessage class, as shown in Table 3.","After instantiating a PostMessage in operation , the method continues with operation  in which the destination URL is passed from post request event to PostMessage.","The method then continues with operation  in which the message body is passed to PostMessage. As described above in reference to decision block , if a message body is a part of the transaction or communication exchange, in one embodiment, PostMessage is used. Operation  passes the message body to the PostMessage (see Tables 3, 5), enabling the method to continue with operation  in which the PostMessage is transmitted through the dispatchable class interface (see Table 4).","In one embodiment of the invention, the service model is implemented using high-level protocols based on open and standard APIs. Table 6 illustrates another embodiment of a dispatcher in which the HTTP re-direct logic has been removed from the dispatcher and re-implemented so that the dispatchable (see Table 4) handles HTTP re-directs. The embodiment illustrated in Table 6 yields the same functional results as the embodiment illustrated in Table 5.",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DISPATCHER"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public Message dispatch(URL url, Map queryString, Message message)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"throws IOException {"]},{"entry":[{},"URL u = bindQueryString(url, queryString);"]},{"entry":[{},"Dispatchable dispatcher = null;"]},{"entry":[{},"Message response = null;"]},{"entry":[{},"dispatcher = (message != null ?"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"new PostMessage(u, message) : new GetMessage(u));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if(this.profile.isCookieEnabled( )) {"]},{"entry":[{},"if(this.sessionId != null) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dispatcher.setHeader(COOKIE_HEADER,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SESSION_ID + EQUAL + this.sessionId);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"response = dispatcher.dispatch( );"]},{"entry":[{},"if (response != null) {"]},{"entry":[{},"this.sessionId = response.getSessionId( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return response;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 5","FIG. 5"],"b":["400","402","400","402","404","400","406","408","410","412","416"]},"In one embodiment of the invention, the service proxy instantiates  a LicenseRequest , instantiates  a LicenseRequestEvent , and instantiates  a PostLicenseRequestEvent . In the illustrated example, the request message is a license request. Once the license request has been defined (see FIG. A), the event diagram illustrates the instantiation of the objects that will be required to conduct the exchange of information, in accordance with one embodiment of the invention. In other embodiments, as described above, objects such as the dispatcher (analogous to PostLicenseRequestEvent  in FIG. ), once instantiated, may be re-set and re-used, and thereby obviating the need to instantiate the objects for subsequent data exchange events.","After the objects have been instantiated, the service proxy directs the construction  of the LicenseRequest . The construction  of the LicenseRequest  includes the providing of the specific request data or information to the dispatchable objects which, in the instant example, can be dispatched as a LicenseRequest .","The next event is the binding of the LicenseRequest  to the LicenseRequestEvent . As described above in reference to , a request event is the operation that triggers the series of events that occur to accomplish a data or information exchange once a request message has been defined. In the embodiment illustrated in , the request event is the LicenseRequestEvent , and the request message is the LicenseRequest . The LicenseRequestEvent , therefore, is the creation of the container, the HTTP message, in which the LicenseRequest  will be transmitted. The binding  of the LicenseRequest  to the LicenseRequestEvent . is set at , managing, in one embodiment, an XML formalization of the LicenseRequest .","The LicenseRequestEvent  having the LicenseRequest is then bound  to the PostLicenseRequestEvent . The binding  represents the joining of a specific LicenseRequestEvent  having a LicenseRequest  with a dispatcher. As described above in one embodiment of the invention, the dispatcher is instantiated by the service proxy , and using either GetMessage or PostMessage as appropriate, transmits or dispatches the message through a dispatchable interface to a web server. In the illustrated business model of , the message is the LicenseRequest  bound with a LicenseRequestEvent . The dispatcher was instantiated at , the LicenseRequestEvent  having a LicenseRequest  is bound  to the PostLicenseRequestEvent , and set at .","In one embodiment of the invention, service proxy  then directs dispatcher to dispatch  the message. The dispatcher, having received the command to dispatch , may optionally perform a validity check , and a boolean response  is supplied. In one embodiment, the validity check  is optional, and each message request defines specific parameters for validity verification. If a validity check  is performed, and a valid boolean response is received , the dispatcher proceeds with dispatch  of the license request.","In one embodiment, the dispatcher dispatches  the license request including a container for the expected response. As described above in reference to , in one embodiment of the invention, the service model is synchronous. A request is transmitted and a response is received. As described above in reference to Tables 1-4, in one embodiment it is the event or action that is synchronous and not necessarily the underlying transaction. In the instant example, the synchronous response is, in one embodiment, an acknowledgment of receipt of the LicenseRequest . In another embodiment, the synchronous response is the LicenseResponse  In the illustrated business model of , when a LicenseRequestEvent  having a LicenseRequest  is dispatched , service proxy  sets up for the expected response by creating a container  for the expected response. The LicenseResponseEvent  is analogous to the LicenseRequestEvent , and used for the expected LicenseResponse .","Once a LicenseResponse  is provided by a responding entity, the LicenseResponse  is transmitted to the service proxy  in much the same manner in which the LicenseRequest  was transmitted to the service. It should be appreciated that  illustrates a series of events as occurs from a Requesting Entity  perspective. In one embodiment, a corresponding series of events occur in the service of the responding entity, but are not illustrated for clarity. As described earlier, a responding entity may be required to initiate additional requests to obtain and provide the requested data. In such an example, the responding entity for a transaction becomes a requesting entity for a separate and intermediate transaction. In one embodiment of the present invention, the service model is implemented such that participating entities act as peers in the resulting information and data exchanges, regardless of locality, security, and other specific URL protocol handler implementations.","As described above, the business model illustrated in the embodiment of  can be used for such business transactions as requesting and obtaining a license for a particular hardware or software entitlements, or for requesting and obtaining a right to use (RTU) that must be presented before additional data, components, and the like can be obtained from another party. An exemplary license request, in accordance with one embodiment of the invention is illustrated in Table 7:",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"LICENSE REQUEST"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LicenseRequest request = buildLicenseRequest( );"]},{"entry":[{},"LicenseRequestEvent requestEvent = new LicenseRequestEvent( );"]},{"entry":[{},"RequestEvent.set.LicenseRequest(request);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"System.out.printIn(\u201crequest: \u201d + \u2018\\n\u2019 + requestEvent.toMessage( ) + \u2018\\n\u2019);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PostLicenseRequestEvent dispatcher ="]},{"entry":[{},"buildLicenseRequestDispatcher( );"]},{"entry":[{},"LicenseResponseEvent responseEvent = null;"]},{"entry":[{},"If (dispatcher != null) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Dispatcher.setEvent(requestEvent);"]},{"entry":[{},"try {"]},{"entry":[{},"\u2002responseEvent = (LicenseResponseEvent)(dispatcher.dispatch( ));"]},{"entry":[{},"}catch (Exception e) {"]},{"entry":[{},"\u2002 e.printStackTrace( );"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"System.out.println(\u201cresponse: \u201d + \u2018\\n\u2019 + (responseEvent != null ?"},{"entry":"responseEvent.toMessage( ).toString( ) : \u201cnull\u201d) + \u2018\\n\u2019);"},{"entry":"LicenseResponse response = responseEvent != null ?"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ResponseEvent.getLicenseResponse( ) : null;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Systyem.out.println(\u201cLicenseResponse.key:>\u201d + (response != null ?"},{"entry":"response.getKey( ) : \u201cnull\u201d) + \u201c<\u201d);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table 8 illustrates another embodiment in which the request is for an RTU serial number:",{"@attributes":{"id":"p-0088","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RTU SERIAL NUMBER REQUEST"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RTUSerialNumberRequest request = buildRTUSeralNumberRequest( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"RTUSerialNumberREqeustEvent requestEvent ="}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"New RTUSerialNumberRequestEvent( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RequestEvent.setRTUSeralNumberRequest(request);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"System.out.println(\u201crequest: \u201d + \u2018\\n\u2019 + requestEvent.toMessage( ) + \u2018\\n\u2019);"},{"entry":"PostRTUSerialNumberRequestEvent dispatcher ="}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"buildRTUSeralNumberREqeustDispatcher( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"RTUSerialNumberResponseEvent responseEvent = null;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If (dispatcher != null) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dispatcher.setEvent(requestEvent);"]},{"entry":[{},"try {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"responseEvent ="]},{"entry":[{},"\u2009(RTUSerialNumberResponseEvent)(dispatcher.dispatch( ));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}catch (Exception e) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"e.printStack Trace( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"System.out.println(\u201cresponse: \u201d + \u2018\\n\u2019 + (responseEvent != null ?"},{"entry":"responseEvent.toMessage( ).toString( ) : \u201cnull\u201d) + \u2018\\n\u2019);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RTUSerialNumberResponse response = responseEvent != null ?"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"responseEvent.getRTUSerialNumberResponse( ) : null;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing.","Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can thereafter be read by a computer system. Examples of the computer readable medium include read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes, and other optical data storage devices. The computer readable medium can also be distributed over network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion. Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be readily understood by the following detailed description in conjunction with the accompanying drawings, wherein like reference numerals designate like structural elements.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3B","FIG. 3A"],"b":"212"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
