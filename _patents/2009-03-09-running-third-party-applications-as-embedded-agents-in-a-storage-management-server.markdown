---
title: Running third party applications as embedded agents in a storage management server
abstract: Running applications to support a storage server is made more efficient by at least establishing a sandbox to run the applications as embedded agents within the storage server. To accomplish this, in at least one embodiment, a management module of the storage server designates resources of the storage server to establish the sandbox using a role based access control mechanism. The sandbox communicates with the management module to access the resources of an operating system of the storage server to run the applications. Based on this, the need for separate external computers to run the applications is eliminated. Additionally, an administrator can control operations of the applications through the management module, thus providing the administrator a uniform interface for controlling both the storage server and the applications. The applications also utilize an existing user interface of the storage server to display logs and events to the administrator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08224934&OS=08224934&RS=08224934
owner: NetApp, Inc.
number: 08224934
owner_city: Sunnyvale
owner_country: US
publication_date: 20090309
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["At least one embodiment of the present invention pertains to network storage systems, and more particularly, to a technique for running embedded applications in a storage server.","A storage management server (or simply, a \u201cstorage server\u201d) is a special purpose processing system used to store and retrieve data on behalf of one or more clients on a network. The storage server operates on behalf of one or more storage clients to store and manage data in a set of mass storage devices, such as magnetic or optical storage-based disks or tapes. The mass storage devices can be organized into one or more groups of disks (e.g., redundant array of inexpensive disks (RAID)).",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1","b":["101","105","110","115","120"]},"The network module  provides an interface to one or more storage clients (e.g., , ). The network module  receives data access requests from the storage clients (e.g., read and write requests) and transmits those requests to one or more storage media (e.g., , ). The network module  also transmits the response from the storage media to the storage clients. The network module , in some instances, utilizes a network  to enable communication between the storage clients and the storage media. The network module  can include functionality for translating between one or more protocols used by the storage clients and an internal protocol used by the storage server . Functions of the network module , which can include functions not mentioned here, are referred to collectively and individually as \u201cnetwork module functionality.\u201d","The data module  provides an interface to the storage media. The data module  can also control data layout on the storage media and respond to client-initiated read and write requests. The data module  can include other functionality, such as creating a backup, a mirror image or a snapshot of stored data. In some instances, the data module  communicates with the network module  to enable the storage clients to interface with the storage media. Functions of the data module , which can include functions not mentioned here, are referred to collectively and individually as \u201cdata module functionality.\u201d","The management module  provides an interface to a storage administrator to the various management and administrative functions of the storage server . The storage administrator can control various operations of the storage server  through the management module . Functions of the management module , which can include functions not mentioned here, are referred to collectively and individually as \u201cmanagement module functionality.\u201d","The database module  provides an interface to configuration information maintained of the storage server . The configuration information, for example, includes details on usage levels of the various storage media (e.g., , ) connected to the storage server. In another example, the configuration information includes details about the various storage clients (e.g., , ) connected to the storage server. Functions of the database module , which can include functions not mentioned here, are referred to collectively and individually as \u201cdatabase module functionality.\u201d","In addition to these core functionalities (e.g., management module functionality, data module functionality, etc.) provided by the storage server , in some instances, the storage system includes additional services or applications (e.g., antivirus services, security services, etc.) to add value and enhance the usability of the storage server . In some instances, these additional services or applications (hereinafter, \u201capplications\u201d or \u201cthird-party applications\u201d) are offered by third-party providers, i.e., providers other than the manufacturer of the storage server. Examples of such applications include security management applications, antivirus applications, third-party storage management applications, etc.","In conventional storage systems, these applications are offered by running the applications (e.g., , ) on one or more \u201cexternal\u201d computers (e.g., , ). The term \u201cexternal,\u201d as used herein, indicates that the computers running the applications are not part of the storage server . The external computers do not share or utilize hardware resources of the storage server . The external computers, in some instances, communicate with the storage server  through the network .","Various problems are associated with running the applications on external computers. For example, in some instances, the applications access the various modules of the storage server  to collect information about, for example, the usage statistics of the storage media. Because the applications are on external computers, they interface with the storage server  through the network . This introduces latency during the operation of the applications.","In another example, the overall cost of the storage system is higher owing to the use of external computers to run the applications. In some instances, the storage administrator has to set up separate interfaces for each of the applications, in order to enable them to communicate with the storage server . This further increases the overhead cost and operational expenses incurred in maintaining the external computers.","In another example, in addition to monitoring and controlling the functionality of the storage server  through the management module , the storage administrator has to access each external computer to manage the various applications. This further increases the operational overhead involved in maintaining the storage system.","A technique for embedding applications within a storage server is described. Note that references in this specification to \u201can embodiment\u201d, \u201cone embodiment\u201d, or the like, mean that the particular feature, structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment.","Running applications to support a storage server is made more efficient by at least establishing a sandbox to run the applications as embedded agents within the storage server. To accomplish this, in at least one embodiment, a management module of the storage server designates resources of the storage server to establish the sandbox using a role based access control mechanism of the storage server. The sandbox communicates with the management module to access the resources of an operating system of the storage server to run the applications. Based on this, the need for separate external computers to run the applications is eliminated. Additionally, an administrator can control operations of the applications through the management module, thus providing the administrator a uniform interface for controlling both the storage server and the applications. The applications also utilize an existing user interface of the storage server to display logs and events to the administrator.","In one embodiment of the technique introduced here, the various applications are run as embedded agents within the storage server. The applications utilize the resources of the storage server for their operation. To accomplish this, in some instances, the management module of the storage server establishes a \u201csandbox\u201d to run the applications.","A sandbox is a mechanism provided by a host computer to safely run one or more applications. In some instances, the sandbox provides a controlled set of resources for the applications to run in. In one example, the sandbox utilizes the host computer's scratch space (i.e., temporary storage space) to run the applications. In other examples, the sandbox restricts or controls the application's network access, ability to inspect the host computer, read from the host computer's input devices, etc.","In some instances, the sandbox also enables the guest program to be run in a \u201cjail\u201d mode. A jail is a set of resource limits imposed on the guest program by the kernel of the host computer's operating system. The limits can include I\/O bandwidth limits, disk quotas, network access restrictions, etc.","In one embodiment of the technique introduced here, the management module establishes a sandbox to run the various applications. Examples of such applications include security management applications, antivirus applications, third-party storage management applications, etc. The management module identifies specific resources of the storage server (e.g., a temporary storage area allocated to the management module) and establishes a sandbox using the specific resources.","The various applications are installed or copied into the location identified by the management module (i.e., into the sandbox). These applications are then run as embedded agents within the storage server. In some embodiments, the sandbox interfaces with the management module to gain access to resources of the operating system of the storage server. The sandbox utilizes these resources to run the various applications as embedded agents. In some instances, the management module controls the amount of the resources utilized by the sandbox.","By running the applications as embedded agents within the storage server, the need for external computers to run the application is eliminated. The applications utilize existing resources of the storage server, thereby reducing the cost involved in establishing and maintaining the external computers.","Additionally, because the applications are run as embedded agents within the storage server, a storage administrator can perform administrative and management operations on the applications through the management module. Therefore, the management module provides a common and uniform interface to the storage administrator.","Also, the sandbox provides a direct interface between the applications and the storage server. Therefore, the latency effects due to communication between the storage server and external computers are eliminated (for purposes of running the applications), allowing the applications to operate with higher efficiency.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","201","201","205","210","215","220","215","201","215","201"]},"The network module  provides an interface to one or more storage clients (e.g., , ). The network module  receives data access requests from the storage clients (e.g., read and write requests) and transmits those requests to one or more storage media (e.g., , ). The network module  also transmits the response from the storage media to the storage clients. The network module utilizes a network  to interface with the storage clients. Additionally, the data module  provides an interface to the storage media. In one embodiment, the data module  can also control data layout on the storage media and respond to client-initiated read and write requests.","In one embodiment of the technique described herein, the management module  establishes a sandbox  to run various applications (e.g., , ). The sandbox is a mechanism to run the various applications as embedded agents within the storage server . The sandbox  provides a controlled set of the storage server's  resources for the various applications to run.","In one embodiment, the management module  establishes a sandbox by assigning specific resources of the storage server  for use by the sandbox . For example, the management module  assigns a specific part of the storage server's  memory (e.g., a specific address range of the storage server's memory, a temporary or cache storage area of the storage server's memory, etc.) for use as the sandbox . A storage administrator can then install or copy over the various applications into the sandbox . Examples of such applications include security management applications, antivirus applications, third-party storage management applications, etc.","In one embodiment, the sandbox is implemented as a plurality of enforcements. The enforcements include, for example, the amount of resources (e.g., memory, processor, network bandwidth, etc.) that the sandbox can utilize at any given moment. In some instances, the enforcements represent the upper limit of such resources that the sandbox can utilize to run one or more applications. In other words, the enforcements constrain the operation of the application(s) within a controlled set of such resources.","In some embodiments, the management module of the storage management server establishes the plurality of enforcements using a role based access control (RBAC) mechanism. An RBAC, as described herein, refers to a mechanism that restricts access to system resources to authorized users based on their permission or authority level. The RBAC uses \u201croles\u201d for various job functions. Various roles can be implemented within, for example, the storage management server, with each role having different sets of permissions and access levels.","The permissions to perform certain operations within the storage management server are assigned to specific roles. For example, a primary application running within the management server may have an \u201cadministrative\u201d role, allowing the primary application to access all resources of the storage management server without any restrictions. On the other hand, for example, a third-party application may be run in a \u201csandbox role\u201d level.","Such a sandbox role is established by incorporating the plurality of enforcements previously identified for establishing the sandbox. Examples of such enforcements include a restriction on a quantity of data that the third-party applications may store in the local storage unit of the storage management server, a restriction on the amount of system memory that the third-party applications may access at any given time, a restriction on a number of processor cycles that the third-party applications may consume at a given time, a restriction on the maximum priority that may be allocated to the process thread of the third-party application, etc. Other restrictions to the operation of the third-party applications, as understood by a person of ordinary skill in the art, are also suitable as examples of the enforcements discussed herein.","In one embodiment, the sandbox role is established by encompassing, for example, one or more access permissions to define each of the enforcements. For example, a first permission level may define that the third-party applications have permission to store up until 10 MB of data in the local storage unit. In some instances, the sandbox role can be configured and changed at will by a network administrator (e.g., changing the limit to the amount of data that the applications running in the sandbox can store in a local storage location, etc.) by accessing the sandbox settings through the management module.","By establishing the sandbox with a specific role in the RBAC mechanism, the sandbox is inherently built with a set of controls and constraints to prevent the overall amount of resources consumed by the sandbox to be kept under a given level. When running the third-party applications, the RBAC mechanism uses the one or more access permissions defined in the specific role to implement the corresponding enforcements. Establishing the specific role precludes the need for an administrator to define a limit for each of the resources and monitor them separately.","In some instances, the sandbox  communicates with the management module  to access resources of the underlying operating system of the storage server . The sandbox utilizes these resources to run the various applications as embedded agents. In one example, the sandbox  uses application programming interface (API) calls of the RBAC mechanism to communicate with the management module  to access the resources of the underlying operating system. The sandbox  then runs the various applications utilizing the resources  allocated by the underlying operating system.","Because the applications are embedded in the storage server , each application, for example, runs as a service offered by the storage server . For example, when an antivirus application is installed within the sandbox , the storage server, in effect, offers an antivirus service. The antivirus service, in some instances, utilizes the network module functionality to monitor and perform antivirus operations on each of the storage clients (e.g., , ) and the storage media (e.g., , ).","In one embodiment, the sandbox  runs the various applications in a jail mode utilizing the RBAC mechanism. As discussed above, the management module  allocates a specific amount of resources to the sandbox . In the jail mode, the management module  places a predetermined limit on each of the resources allocated to the sandbox . For example, in some instances, the management module  limits the amount of memory allocated to the sandbox to a certain percentage. In another example, the management module  limits the number of processor cycles allocated to the sandbox to a certain percentage. In some embodiments, the storage administrator can assign such limits through a user interface of the management module .","In one embodiment, each application is initialized within the sandbox  in a jail mode. Here, the management module  limits the resources allocated to each of the individual applications based on predetermined conditions. For example, the management module  could limit the memory allocated to a first application to a certain percentage of the total memory allocated to the sandbox . In such an example, when the memory usage of the first application reaches a certain percentage of the memory allocated to the sandbox , the management module  prevents the first application from accessing any additional memory.","In some instances, when the first application seeks to utilize more than the predetermined amount of, for example, the memory allocated to the first application, the management module  determines whether there is any \u201cremainder resource\u201d in the sandbox . The remainder resource, as described herein, is the difference between an overall amount of resources allocated to the sandbox  and the total amount of the resources utilized by all the applications running within the sandbox  at a given moment. If the management module  determines that a remainder resource resists, or in this instance, a remainder memory exists, it allows the first application to access more than the predetermined amount of memory (to the extent of the remainder memory of the sandbox ).","In one embodiment, the management module  allocates resources to the various applications running in the sandbox  based on a priority assigned by a storage administrator. For example, in some instances, the storage administrator assigns a higher priority to a first application and a lower priority to a second application running in the sandbox . The management module , as discussed above, limits or restricts the overall amount of resources utilized by the applications running in the sandbox to a predetermined value. Consider an instance where the first application and the second application are simultaneously running, and the overall amount of resources utilized by the applications running in the sandbox reaches the predetermined value. In such an instance, the management module  allocates a higher amount of the resources to the first application, which has the higher priority. In such an event, at least a part of the resources allocated to the second application (with the lower priority) are instead redirected to the first application.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 3"],"b":["300","201","300","305","310","325","325","325"]},"The processor(s)  may include central processing units (CPUs) to control the overall operation of, for example, the host computer. In certain embodiments, the processor(s)  accomplish this by executing software or firmware stored in memory . The processor(s)  may be, or may include, one or more programmable general-purpose or special-purpose microprocessors, digital signal processors (DSPs), programmable controllers, application specific integrated circuits (ASICs), programmable logic devices (PLDs), or the like, or a combination of such devices.","The memory  is or includes the main memory of the computer system . The memory  represents any form of random access memory (RAM), read-only memory (ROM), flash memory (as discussed above), or the like, or a combination of such devices. In use, the memory  may contain, among other things, a set of machine instructions which, when executed by processor , causes the processor  to perform operations to implement embodiments of the present invention. The memory , also includes the operating system  of the storage server, which includes the network module , data module , etc.","Also connected to the processor(s)  through the interconnect  are a network adapter  and a storage adapter . The network adapter  provides the computer system  with the ability to communicate with remote devices, such as storage clients , over the interconnect  and can be, for example, an Ethernet adapter or Fibre Channel adapter. The storage adapter  allows the computer system  to access the storage media (e.g., ) and can be, for example, a Fibre Channel adapter or a SCSI adapter.","For purpose of further illustration, it is useful to consider the techniques explained herein as it applies to a single application installed within a sandbox. , discussed below, illustrates such an embodiment. Of course, however, it should be noted that the techniques introduced here apply to sandboxes that contain multiple applications.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4","b":["400","480","400","470","400","480","490","480","480","490","400","400","490","480","400","480","470","400"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["480","470","402","470","440","450","460","470","402","490","480"]},"In some instances, the application  generates log files indicating, for example, performance statistics of the application . The application  accesses the local storage  through the management module to store the log files. The management module, in some instances, restricts the amount of local storage  that the application  can use for storing log files.","In addition to access to the storage server's resources, the management module also enables the application  in the sandbox  to access the functional modules  of the storage server . In some instances, the application  accesses the database module  to retrieve, for example, configuration information associated with the overall storage system. The configuration information contains, for example, information about the various storage media and the storage clients connected to the storage server . In some instances, the management module  places a restriction on the amount or type of configuration information that the application  can access through the database module .","In some instances, the application  communicates with the data module  to access, for example, system logs associated with the storage server . The system logs maintain, for example, information about failure events, system events, SNMP traps, etc. In other instances, the application  communicates any associated events (e.g., failure events associated with the application, etc.) to the management module . In some instances, the management module  places a restriction on the amount or type of system logs that the application  can access through the data module .","Similarly, in one embodiment, the application  communicates with the network module  to access, for example, the storage clients connected to the storage server . In some instances, the management module  places a restriction on the network access of the application . In one example, the management module  allows the application  to access the internet through the network module , but restricts the application  from accessing any storage media connected to the storage server .","In one embodiment, the application  has access to a user interface  of the storage server  through the management module . The user interface  enables a storage administrator to perform administrative and management functions of the storage server  through the management module . By integrating the application  within the storage server , the storage administrator can now perform administrative and management functions on the application  through the user interface . The storage administrator can thus use a centralized interface to perform all performance and administrative functions both on the storage server  and the application .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":["505","510"]},"At , the storage administrator or the manufacturer of the storage server installs the applications within the sandbox. The applications communicate with the management module to gain access to the resources of the operating system of the storage server. By utilizing the resources, the applications run as embedded agents within the storage server. In some instances, the management module restricts or limits the amount of resources utilized by the applications, as indicated in . At , the storage administrator is able to perform administrative and management functions on the applications using a user interface associated with the management module of the storage server.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","b":["605","610","615"]},"In some instances, as indicated at , the management module places further limits to individually control the amount of resources utilized by each application. At , the management module monitors the resources utilized by each application and prevents the applications from exceeding the individual limits. At , the management module detects that a particular application is seeking to utilize more than a previously assigned limit of a resource. In such a case, as indicated in , the management module determines whether there is a remainder amount of resources within the sandbox that the particular application could utilize. If the remainder amount of resources exists, as indicated in , the management module allows the particular application to utilize more than the assigned amount of resources (to the extent of the remainder amount of resources).","Thus, the technique introduced here makes it possible to run applications within a storage server by establishing a sandbox within the storage server to run the applications. The technique introduced here allows the applications to be run without the requirement for any additional computers to be set up external to the storage server. The technique also allows an administrator to centrally control and monitor the applications through the management module of the storage server.","The techniques introduced above can be implemented in special-purpose hardwired circuitry, in software and\/or firmware in conjunction with programmable circuitry, or in a combination thereof. Special-purpose hardwired circuitry may be in the form of, for example, one or more application-specific integrated circuits (ASICs), programmable logic devices (PLDs), field-programmable gate arrays (FPGAs), etc.","Software or firmware to implement the techniques introduced here may be stored on a machine-readable medium and may be executed by one or more general-purpose or special-purpose programmable microprocessors. A \u201cmachine-readable medium\u201d, as the term is used herein, includes any mechanism that stores information in a form accessible by a machine (e.g., a computer, network device, personal digital assistant (PDA), any device with a set of one or more processors, etc.). For example, a machine-accessible medium includes recordable\/non-recordable media (e.g., read-only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; etc.), etc.","Although the present invention has been described with reference to specific exemplary embodiments, it will be recognized that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["One or more embodiments of the present invention are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
