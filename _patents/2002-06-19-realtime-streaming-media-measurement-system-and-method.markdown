---
title: Real-time streaming media measurement system and method
abstract: Systems and method for measuring parameters of a media stream are disclosed. Some example systems include a data collection agent that selectively couples with at least one user-designated media stream and collects data associated with the media stream. The example systems may further include a web server that communicates with at least one data collection agent. The web server may obtain a request from a user for measurement of a user-designated media stream, the user request including an identification of the media stream and a list of one or more performance parameters of said stream to be measured. The data collection agent receives from the web server a parameter set defining a measurement of the user-designated media stream, collects and measures media stream data according to the parameter set, and provides the user with real-time performance characteristics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07647418&OS=07647418&RS=07647418
owner: Savvis Communications Corporation
number: 07647418
owner_city: Town & Country
owner_country: US
publication_date: 20020619
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["The present application claims the benefit of the filing data of U.S. provisional application No. 60\/299,375, filed Jun. 19, 2001 and entitled \u201cReal-time Streaming Media Measurement System and Method.\u201d","This invention relates to measuring performance characteristics of at least one streaming media server over a network. More specifically, this invention provides a real-time systems and methods of providing users with streaming media performance characteristics.","Streaming media is one of the fastest growing segments of the Internet economy and is reaching across many sectors of the market. Demand for both content and improved delivery of that content continues to accelerate as more companies learn how to effectively utilize streaming media. The growing interest likely stems from two of the advantages streaming has over other multimedia: on demand content and interactivity. With the rapid deployment of broadband and increased network capacity, the demand for streamed content will likely continue to increase as the cost of delivery decreases.","Generally, for multimedia files to be streamed, they must first be broken into packets and compressed. The packets are then delivered across a network before being decompressed on the client-side by a streaming media player, a process handled by a set of algorithms termed codecs (compression\/decompression). Specialized streaming protocols, for example, open protocols RTSP (Real-Time Streaming Protocol), RTP (Real-Time Transfer Protocol), and proprietary protocols, for example, MMS (Microsoft Media Stream\/Streaming\/Service\/Server) of Microsoft Corporation\u00ae of Redmond, Wash., handle the process of delivering the data across the network. By compressing the files before they are sent, streaming technology attempts to minimize the bandwidth requirements for delivery. By decompressing and rendering the data as the packets arrive, the process of streaming avoids the need to download enormous media files in their entirety before viewing them. There are numerous codecs technologies available, and considerable variation in the way these process the data in attempt to maximize the fidelity to the original data and simultaneously minimize demand on the network.","The quality of streamed content delivery is very important. End-users are arbiters of stream quality, and good streaming media content can make more of a positive contribution to a website if that content is delivered efficiently and effectively. End-user satisfaction with the streamed content can be impaired if streaming media content is consistently delivered slower than that of the competition. By the same rationale, end-user satisfaction with the streamed content is generally harmed if incomplete versions of a requested product are delivered. For streaming media, successful delivery generally means knowing bandwidth is sufficient and that networks are not dropping valuable packets of streaming data. When streams are delivered too slowly or incompletely, end-users may turn elsewhere for their content.","To meet the high performance standards expected by the typical Internet user and to overcome inherent limitations imposed by an Internet Protocol (\u201cIP\u201d)-based network, the streaming media industry frequently explores innovative ways to improve delivery performance. For example, many are turning to content caching solutions, pushing their streamed content to the so-called \u201cedges\u201d of the network. Such solutions involve placing identical streamed content on servers at a different, additional locations than the origin server. Solutions such as these, (commonly referred to as \u201cmirroring\u201d content) provide a plurality of content-sites at different locations on the Internet, thus attempting to make the distance between a streaming server and the client requesting the content as short as possible. To determine the precise impact of content distribution solutions on performance, streaming performance may be reliably quantified and frequently monitored. Accordingly, it is sometimes advantageous for parties supplying the streaming media content (i.e., content providers) and the parties responsible for content delivery (i.e., content deliverers) to monitor existing quality levels.","To maintain a more reliable and better performing stream, the content deliverers can monitor performance for regular evaluation, but also diagnose several problems regarding, e.g., important measurement performance criteria regarding buffer overruns on routers, poor performance or interference on backbones, or the location of network problems (e.g. a backbone or the local server).","Various streaming media formats, e.g., RealMedia\u00ae, Microsoft\u00ae Windows Media, Apple Quicktime\u00ae, etc., report delivery statistics differently. For example, Apple Quicktime\u00ae format provides a performance metric for jitter, however, it does not provide a performance metric for current bandwidth. Such a lack of uniformity in reported performance metrics makes providing a synthetically composed single index value or \u201cgrade\u201d for stream quality of little or no use should quality of service issues arise. Additionally, the variation in providing delivery statistics makes a single grade difficult if not completely impossible to obtain.","Conventionally, networks of Data Collection Agents (\u201cDCAs\u201d) are distributed across the Internet backbone worldwide to measure web-page performance or streaming media performance. These DCAs are in numerous companies' backbones, such as Exodus, Sprint, GTE, AT&T and possible others.","DCAS are automated servers that receive a subscription (also known as a \u201cconfiguration\u201d). For web-page or streaming media measurement, the subscription generally includes but is not limited to the Uniform Resource Locator (\u201cURL\u201d) of the data content, e.g., web-page or streaming media content, to test and the frequency of tests to be performed (e.g., nine times per hour). This subscription is set by a user in advance of receipt of the subscription by the DCA. Following receipt of a subscription, the DCA performs the requested tests to collect performance data for the URL identified in the subscription. The collected performance data are then sent to a database, which is typically held at a network location apart from the DCA.","Streaming media measuring DCAs are often Windows NT\u00ae servers. UNIX\u00ae servers may be used, but are often used to measure web-page performance and not streaming media.","Analyzing performance data at various locations using a plurality of DCAs allows users to pinpoint problem areas. For example, universally poor performance may indicate a problem on a local server supporting the content, while poor performance at only one or some locations may indicate a problem with the network(s) and not the local server. Web applications, such as SM-WEBPOINT and SM-WEBPOINT+ by Exodus Communications, Inc., a Cable & Wireless company (\u201cExodus\u201d) of Santa Clara, Calif., allow the user to view the subscription (or other URLs in the case of SM-WEBPOINT+) and a time series history of the performance data of the web-page. These applications provide Internet accessibility to users for performance criteria from their desired URL.","These web applications provide various tools for performance data measurement. For example, SM-WEBPOINT+ provides: TimeLine, TraceRoute, Ping and DNS (\u201cDomain Name System\u201d) Lookup.","The TimeLine application measures every object on a web-page and indicates the type of object (e.g., text, graphics, etc.), where it originated, and its performance metrics.","The TraceRoute application reports the route to a subscribed URL's hosting site from one of the DCAs. Between any particular URL's hosting site and DCA are a number of routers that packets must travel through to get to their destination. It is this path of routers that TraceRoute plots.","Ping is a protocol for testing whether a particular computer is connected to the Internet by sending a packet to its IP address and waiting for a response. Ping computes round trip times and packet loss statistics.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["10","1","100","2","101","112","11","113","2","101","100","7","7","100","7","107"]},"The subscription information  in the subscription  is then requested in (at ) by a group of DCAs . Upon receiving the request, an agent interface server  queries the database  (at ) for the subscription information  in the subscription . Upon receiving this query, the database looks up and sends the subscription information  in the subscription  to the agent interface server  (at ). The agent interface server  then creates a configuration file  to the DCAs  (at ).","A DCA  then queues the subscription information  in the configuration file . The queue need not be a first-in, first-out queue, but may alternatively be arranged in any way so as to ensure a proper number of measurements per time frame (e.g., nine per hour).","When the DCA  reaches a given request in the queue, it takes measurements from the streaming media servers  referenced in the subscription information  received in the configuration file . The frequency of the measurements is based on information received in the subscription information . To perform these measurements, the DCAs  connect to the stream (at ), and the streaming media servers , in return, feed the stream to the DCAs  (at ). The DCAs  need not render the stream\u2014that is, convert the stream into its final form (e.g. audio and\/or video). The DCAs  write the performance data  to a log file  (at ) and then move on to measure the media stream for the next subscription in the queue.","The streaming media measurement can be pre-determined by the operator of the system not to exceed a given length of time, e.g., 90 seconds. This feature is important for monitoring long duration streams, such as full-time, 24-hours-a-day broadcasts.","The streaming media measurement will also stop if the stream itself terminates. For example, if the stream is from a 30 second sound clip, yet the measurement system is pre-set not to exceed 90 seconds, the streaming media measurement will terminate at the end of the 30 second sound clip stream. This ability to terminate frees the DCA to begin a media stream on the next URL in its queue.","The collected measurement data log files  are sent back to the agent interface server  (at ).","At predetermined times, e.g., every hour, the agent interface server sends these measurement data log files  to an ingestor  (at ), which is usually connected behind a firewall  for security purposes. After sending the log files  to the ingestor , the DCAs  and then the agent interface servers  request new configurations  for the next hour (or other predetermined time period) from the database .","The ingestor  then parses out the data and sends the measurement data  to the database  (at ). Once the data reaches the database, it is immediately available to the user terminal .","When the user terminal  attempts to view a report  (at ), at the end of a time period (e.g., after one day's worth of data collection), the web application software  queries the database  using the subscription information  in the subscription  and, in return at , receives the performance data in a record set . The web application software  then creates and displays a viewable report  for the user (at ) showing all or part of the measurement data  collected by the DCAs . The user terminal  then attempts to view a report  (at ).","The interface between the user terminal  and the web server , the interface between the web server  and the DCA  (or the DCA group), as well as the interface between the DCA  (or the DCA group) and the streaming media server  is often established through a network , such as, but not limited to, the Internet. When transmission over a network  occurs, the transition may pass through one or more routers, servers, etc. Also, the user terminal  often communicates with the web server  with a network browser . Some examples of network browsers  include Netscape Navigator\u00ae, Netscape Communicator\u00ae, Microsoft Internet Explorer\u00ae, and NCSA Mosaic\u00ae.","This sequence of events contains numerous operations and is also configured to only report data back at predetermined time intervals (e.g., at the end of an hour, day, week, etc.). Accordingly, it can be difficult for a user to obtain current information regarding the performance of a particular media stream. This latter deficiency of reporting back at intervals is inherent in conventional systems since the DCAs  queue measurement requests. Additionally, the system and method shown in  requires deployment of a relatively large number of components, which can be relatively costly and time-consuming.","As explained above, conventional measurement collection systems operate on a schedule, e.g., hourly, a master scheduler builds a list of subscriptions to monitor and then proceeds to work down the list, collecting measurement data on each subscription. Such systems may be designed only requiring one or a few media players (streaming media rendering engines) and the players would receive a new task from a master scheduler upon completion of each task. Thus, the scheduler would act on each subscription in a list of subscriptions in a serial manner. Such systems trade off simplicity of operation (one scheduler, one player, and one work list) with their inability to scale. For example, should the work list exceed what a single or a few players can measure in a certain period, e.g., an hour, the system would either have to refuse the work or replicate itself. It would be possible to replicate the system in another process but that merely increases the complexity of the system, making it more difficult to coordinate work, collect measurements, etc.","Furthermore, such system operation does not enable real-time or on-demand analysis. Should a real-time request enter the system, the scheduler would be forced to queue it ahead of other tasks. Nevertheless, the real-time task would still be forced to wait for the completion of the current task as preemption is not allowed. As media subscriptions typically take 90 seconds to collect a measurement the real-time task could easily end up waiting 45 seconds\u2014not very \u201creal-time\u201d at all.","Embodiments of the present invention provide Real-Time Measurement (\u201cRTM\u201d, also known as \u201creal-time monitoring\u201d) systems and methods that provide faster ways to retrieve streaming media performance data than conventional systems and methods.","In accordance with embodiments of the invention, systems and methods are provided for performing real-time measurements of media streaming over networks, which allow users to obtain current performance statistics regarding a media stream.","In accordance with embodiments of the invention, the RTM systems and methods do not require users to enter a subscription.","In accordance with embodiments of the invention, systems and methods are provided that are much simpler and faster method of retrieving performance metrics for streaming media servers. Additionally, these metrics can be provided on demand, instead of at the end of a predetermined measurement cycle.","In accordance with embodiments of the invention, systems and methods are provided for measuring parameters of a media stream.","Some embodiments of the invention provide methods that measures data from a media stream by a DCA, and transmits data by the DCA to a web server via a direct through a socket connection.","In accordance with at least one embodiment of the invention, a system and method are provided for performing real-time measurements of media streaming over networks in \u201creal-time,\u201d which allows a user to obtain current performance statistics regarding the media stream. The RTM system and method does not require that a user enter a subscription (unless used with an application requiring a subscription, e.g., SM-WEBPOINT). The user need only enter data indicating the URL and DCA into a web application to trigger performance of the desired measurement (unless used with an application requiring a subscription, such as SM-WEBPOINT). In such embodiments, the web application may establish a connection to the DCA and send the data associated with the desired measurement to the DCA. The DCA then may receive this data and attempt to perform the measurement. The DCA may then send the performance measurement data resulting from the performance of the measurement back to the web server without needing to first send it to an intermediary such as an ingestor or separate database. As a result, the user has access to the performance measurement data as soon as it is received by the web server. Such operation may be considered \u201creal-time\u201d in that there is no delay associated with an intermediary, e.g., ingestor or separate database operation.","In accordance with at least one embodiment of the invention, a system and method are provided that is much simpler and faster method of retrieving performance metrics for streaming media servers because there is no need for an intermediary (ingestor or separate database). Additionally, these metrics can be provided on demand, instead of at the end of a predetermined measurement cycle.","In accordance with at least one embodiment of the invention, a system and method are provided for measuring parameters of a media stream. The system includes a DCA configured to interconnect with at least one designated media stream and to collect data associated with the media stream, and a web server configured to communicate with a DCA. The DCA may be interconnected to the web server via a direct socket connection and receive data including a parameter set defining a measurement of a media stream from the web server supporting streaming of the media. The DCA may also be configured to collect media stream data according to the parameter set and measure data from a media stream.","At least one embodiment of the invention provides a system and method including a web server and a DCA, where the web server is connected directly through a network to the DCA, the DCA measures data from a media stream, and the DCA transmits the data to the web server.","At least one embodiment of the invention provides a method of measuring performance data of a media stream including providing the media stream from a streaming server, where the media stream is in a first format, the media stream being characterized by parameters. Subsequently, the media stream is received by a DCA interconnected with the streaming server. The parameters are then transfer from the DCA to a web server and subsequently transferred from the web server to a user terminal.","At least one embodiment of the invention provides a method that measures data from a media stream by a DCA, and transmits data by the DCA to a web server via a direct through a socket connection.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 2","FIG. 2"],"b":["1","2","3","3","3","4"]},"At least one embodiment of the inventive real-time streaming media measurement system (e.g., as depicted in ) provides for the user to supply subscription information directly to the web server . In these embodiments, a user preferably enters real-time configuration information  into a user terminal . The user terminal  then transmits the real-time configuration information  to the web server , without the information being stored for any significant time in an intermediate database, such as the subscription database .","User terminal  may be implemented via any type of computing device including, but not limited to, a laptop or desktop personal computer (an MSDOS\/Windows\u00ae PC, Macintosh\u00ae, etc.), supercomputer, handheld device (such as a PDA, web-enabled cellular phone, etc.) or any other device capable of communicating with a computer network. The user may interact with the user terminal  directly or indirectly. That interaction may occur, for example, via the user terminal  running a network browser  such as, but not limited to, Netscape\u00ae Navigator, Netscape Communicator\u00ae, Microsoft Internet Explorer\u00ae, or NCSA Mosaic\u00ae. The network browser  may utilize a Hypertext Transfer Protocol (\u201cHTTP\u201d) client that is configured to download a web-page or other content from the web server  and render (e.g., display) the page for the user on the user terminal . The network browser  may also facilitate transmission of data from the user terminal  to the web server .","The network , illustrated in , through which the user terminal  may connect to web server , web server  may connect to DCA , and DCA  may connect to streaming media server , may be any appropriate distributed computer network such as, but not limited to, a LAN, WAN, MAN (metropolitan area network), VAN (value-added network), PAN (personal area network), PON (passive optical network), VPN, enterprise-wide network, direct connection, active network, control network, the Internet, an intranet, or any other suitable network. Furthermore, the connections between user terminal , web server , DCA , and streaming media server  need not be implemented through the same network or same type of network.","The user and the user terminal  may be physically located anywhere. The user and user terminal  do not even need to be physically located together. The user terminal  also need only be connected either directly, indirectly, or through a network  to the web server . If networked, communication is generally faster between the user terminal  and the web server  if these components are placed geographically closer together (meaning that fewer nodes lie between them) and if the connection speeds to the network  of the terminal  and server  are maximized, as well as the connection speeds between the nodes between terminal  and server .","Much like user terminal , the web server  may be implemented via any type of computer including, but not limited to a laptop or desktop personal computer (e.g., running MSDOS\/Windows 3.1\u00ae\/Windows 95\u00ae\/Windows 98\u00ae\/Windows 2000\u00ae\/Windows NT\u00ae, UNIX\u00ae, LINUX\/etc. PC, Macintosh\u00ae, etc.), Virtual Address eXtension (VAX) terminal, workstation, handheld device (e.g., a PDA, web-enabled cellular phone, etc.) or any other device capable of communicating with a computer network. However, the physical web server  must also be capable of running web server software. The web server software is a program that, using, for example, a client\/server model and, often but not always, HTTP, communicates with the network browser  to send data content to the user terminal . The web server software can be incorporated in a web application software  (such as SM-WEBPOINT+) running on the web server .","DCA (or DCA group)  is an agent capable of connecting to the web server  and the streaming media server . Connection to each of the web server  and the streaming media server  may be implemented using a network . As stated above, streaming media measuring DCAs  are often Windows NT\u00ae servers. UNIX\u00ae servers may also or alternatively be used, but are often used to measure web-page content delivery rather than streaming media delivery. Furthermore, servers running LINUX\u00ae, Solaris\u00ae, Irix\u00ae, Windows 2000\u00ae, Virtual Memory System (VMS), AIX, and any other suitable operating system may also be used.","Streaming media server  may be implemented, for example, using any server capable of delivering streaming media data and may also be configured to be able to connect to DCA . This connection to DCA  may be made either directly, through a network, or both. The streaming media server  may provide any type of media including but not limited to: audio, visual, a combination of audio and visual, virtual reality environments, text, live broadcasts of any form, person-to-person communications of any form, tele-medicine data, and other digital, analog, or other data.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3"},"At least one other embodiment of the invention (e.g., as depicted in ) provides a system configured such that the user terminal  provides real-time configuration information  within subscription information  directly or indirectly to a subscription database  which stores the subscription information , and the web server  then looks up subscription information  from the subscription database  when appropriate.  depicts, in a schematic diagram, a system designed in accordance with such an embodiment of the inventive RTM streaming media measurement system using a database to store subscription information .  illustrates the physical components of the system in more detail including the user terminal , web server , DCA , and streaming media server .  also illustrates the subscription database  and examples of the software located on the user terminal , server , and DCA , and data flow between the database  software, and the streaming media server .","Subscription database  is a database that is accessible by the web server  and can store subscription information  received originally from the user terminal  or another appropriate source. Subscription database  is structured such that the web server  can also retrieve the subscription information .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 4","FIG. 4"],"b":["1","4","1"]},"As illustrated in , at least an inventive process performed in accordance with at least one embodiment of the invention begins with the user terminal  issuing a real-time measurement request, which includes real-time configuration  (not illustrated specifically in ) or subscription information  (not illustrated in ), to the web server  (at ). The web server  then connects to the DCA  (at ) and sends the real-time configuration (at ). At , the DCA  connects to the stream from the streaming media server . The streaming media server , then returns stream data to the DCA  (at ). The DCA  returns measurement data from the stream to the web server  (at ). The web server  then processes the measurement data (at ) and displays the results to the user terminal  (at ).","As illustrated in , at the beginning of monitoring, the user terminal  initiates a RTM request (at ), e.g., via web browser , to the web application software  on the web server . In this request, the user  may submit a real-time configuration  including a URL (or any other identifier) to be monitored. The identifier may provide a unique indication of the media stream to be monitored which may allow the desired media stream to be located on the network .","Optionally, the user can indicate a DCA  or group of DCAs  to perform the monitoring requested in the real-time configuration information . This may be performed by indicating names or other identifiers such as, but not limited to, an agent's name, URL, IP address, etc. A user may wish to use a specific DCA for a measurement because it is geographically close, typically has low traffic, has reputably low downtime, or other because of various reasons.","If the user does not indicate a DCA  or DCA group to use, a default DCA  or DCA group may be assigned by either the user terminal , web server , any database accessible directly or indirectly by the web server, or an external source, such as, but not limited to, an administrator, DCA management system (not illustrated in ), or other computer.","The real-time configuration information  is similar to subscription information , but need not include data such as monitoring frequency because the system may be configured to use the real-time configuration information  substantially instantaneous when entered by the user terminal , and not necessarily on occasion when retrieved from a database, such as subscription database  shown in .","However, the real-time configuration information  may also be encapsulated within the subscription information  if subscription information  is used by the system, and especially if subscription information  is stored by the system as a subscription . This is advantageous for many reasons including allowing the user to later refer to configuration information  by a name, label, code, abbreviation, or other identifier  to provoke a real-time measurement. The subscription information  encapsulating the real-time configuration information  may also be identical to the real-time configuration , itself, and not merely in values but also in the totality of information provided. Storing real-time configuration information  within subscription information  in a subscription  may also be helpful because it can facilitate the use of hybrid measurement systems that can perform regularly scheduled non-real-time measurements and provide non-real-time reports, as well as real-time measurements and substantially instantaneous reports, particularly when the later are requested by the user terminal .","In the embodiments illustrated in , the web server  logs the request to begin monitoring. If the web server  is using a subscription-based web application , such as SM-Webpoint, as shown in , the application  will look up the previously-entered subscription information  in the subscription database  storing the real-time configurations  held within the subscription information  within the subscriptions .","Referring to , the subscription information  and\/or the real-time configuration , separately or together, may contain, but are not limited to, a subscription name, label, code, abbreviation, or other identifier . After configuration of a number of subscriptions , a subscription name, label, code, abbreviation, or other identifier  allows a user to quickly and easily identify what media stream a specific subscription  monitors.","The subscription information  and\/or the real-time configuration information , separately or together, may also contain target configuration information . The target configuration information  parameter provides specific information about the location on the network  of the streaming media server  the user wishes to monitor or it can simply identify if there is a permanent connection between the DCA  and the streaming media server . The target configuration information  may be provided as a URL, but may also be provided as a specific IP address or in any other form which may allow a DCA to uniquely identify and locate the desired media stream on the network. The target configuration information  may also be absent from the subscription information , which may trigger a default response by the web server , such as, but not limited to, not making any measurement, using the previously used target configuration information, using target configuration information of the most similar subscription information , or performing a self-test.","The subscription information  and\/or the real-time configuration information , separately or together, may further include DCA information . The DCA information  may include, for example, identification of which DCAs , if any, are requested to perform the monitoring.","The subscription information  and\/or the real-time configuration information , separately or together, may also contain a monitoring frequency . Regardless of the user's (or other person or thing setting the subscription information  and\/or the real-time configuration information ) monitoring frequency setting , the DCA  may still return the measurement data in real-time after every block of measurements. However, it is possible to set a frequency limit, above which the DCA  may temporarily store measurement data and return the data less frequently for efficiency. It is also possible to set the system, if properly configured, to a hybrid real-time\/non-real-time function, providing for regularly scheduled non-real-time measurements and reports, yet capable of performing real-time measurements and providing real-time reports to the user terminal  on demand.","The subscription information , and\/or the real-time configuration information , separately or together, also may include monitoring duration  and\/or monitoring duration upper and\/or lower limits . Although a default monitoring duration is generally set (e.g., a maximum of 90 seconds), a user may provide, directly or indirectly, a separate monitoring duration. If the user is willing to sacrifice reliability of streaming media performance data in exchange for the time spent collecting and processing the data, the user may adjust the maximum measurement time to a shorter time. However, if the user would rather endure a longer time spent collecting and processing the data in exchange for streaming media performance data, which more accurately reflects the media stream, the user may adjust the maximum measurement time to a longer time. The user may also submit no monitoring time duration and rely solely on the default time provided to the system if one is so provided.","It is also possible for the subscription information to include a user name and\/or password . This feature can be particularly useful if the web server , DCA , streaming media server , or subscription database  requires any security. However, generally, for streaming media measurements, the only necessary data included in subscription information  are the monitoring frequency , target configuration information , a subscription name or label  if desired, and, also if desired, DCA information  identifying a DCA  or DCA group to perform the monitoring. Whereas, generally the only necessary data included in real-time configuration information  are target configuration information , and if desired, DCA information  identifying a DCA  or DCA group to perform the monitoring.","As illustrated in , the real-time configuration information  is transmitted by user terminal  to web server  (at ) with the aid of a web browser  on the user terminal  to web application software . Subsequently, the web application software  translates all or necessary parts of the real-time configuration information  received from the user into a language the DCAs  can interpret. For example, the translated stream can be coded in Service Metrics Configuration (SMC) script, encapsulated in XML, placed in another suitable format, etc. The web application  then opens a socket connection between the web server  and the selected DCA  (at ) or DCA group (or if no DCA or group of DCAs is selected, then to a default DCA or DCA group) creating a direct data feed through which the DCA  and web server  are able to send and receive data. Measurement and configuration data transmitted between web server  and DCA  may be transmitted, for example, through the socket connection.","After successfully connecting to the DCA , the web application sends the required elements of the real-time configuration  to the DCA . Components of the DCA  may be implemented as data transmission software running on DCA . If the DCA  is immediately busy, the DCA  obtains (either creating or retrieving an existing) a streaming media rendering engine and starts immediately. If the DCA  is not immediately busy when it receives the configuration information  and\/or subscription information , it similarly begins to act on the configuration information  immediately.","When the DCA  gets to the request, the DCA  connects to the stream issued by the media server  (at ) and the streaming media server , in return, feeds the stream to the DCA  (at ). The DCA  need not render the stream to perform the measurements. After receiving the media stream and calculating the measurement data, components of the DCA  creates statistic objects  for RealMedia stream servers or SMWinMediaStream objects for WindowsMedia stream servers. (SMRealStatistic and SMWinMedia objects are collectively called SMStatistic objects.) The statistic objects  are encapsulated packets of information that have been recorded by the measurements.","The DCA  components then serialize the statistic objects  into a comma delimited format stream  (at ). The DCA  then may transmit this stream  directly over the socket connection to the web server  (at ) without needing to transmit it through an agent interface server, ingestor, or database; however, transmission to such components could be optionally performed if so desired. Performance data also need not be transferred to a log file or stored and held for any amount of time, although this could also be performed if so desired. Thus, an agent interface server and ingestor are not needed and any database, e.g., a subscription database, is only needed if the real-time configuration  is desired to be stored.","The web server  then (at ) parses or deserializes the data into the objects, performs calculations, and builds a separate file  or transmits a separate stream in a suitable format, e.g., XML, JavaScript, etc. When the DCA  has sent the data back to the web server  or at least freed up the necessary media monitor , the DCA  may then proceed to measure the media stream for the next configuration\/subscription in the queue, or wait for a configuration\/subscription if no queue exists. Although DCAs  may handle only non-real-time measurement subscriptions or only RTM requests, the DCA  handling RTM requests could also be used for non-real-time measurement subscriptions when in down-time between RTM requests.","Once the web application  has formulated the final measurement data file , it may immediately display the results to the user terminal  via the web application  converting the final measurement data file  into a report  and sending the report , perhaps in a format such as HTTP to the user terminal  (at ). This report could easily be viewed using a network browser  or other similar application.","As illustrated in , the real-time configuration information  is transmitted by user terminal  to web server  (at ) and may be transmitted with the aid of a web browser  on the user terminal . As discussed above, the real-time configuration information may be encapsulated within subscription information  and passed to the web server  in its encapsulated form. This encapsulated transmission may be of particular utility when using a subscription database  or otherwise storing the configuration information .","If the real-time configuration information  is sent in a storable form, such as encapsulated in subscription information , and does not otherwise include instructions directing the web server  to store the real-time configuration information  in memory, the web application software  may transmit the real-time configuration information  to the subscription database  (at ) or similar storage device, as a URL post string, an XML stream, or any other appropriate format.","If the real-time configuration information  has been stored in a subscription database , the web application software  (at ) may request the real-time configuration information  from its storage location.","The real-time configuration  and\/or subscription information  is then transmitted from the database (at ) or directly or indirectly from the user (if not being retrieved from storage) (as at ). Subsequently, the real-time configuration  may be transmitted (at ) to a component  (\u201cCOM\u201d, e.g., a Microsoft\u00ae component architecture written in Java, referred to as a COM component herein merely for consistency and clarity and not to limit the component to COM or Java). This COM component  may be resident on or accessible by the web server  and run within or on the web application . The web application  may also route the real-time configuration  and\/or subscription information  to any other suitable component in lieu of a COM component , if a COM component  is not available or if an alternative component is used.","The COM component  translates (at ) all or necessary parts of the real-time configuration information  received from the user or the subscription information  into a language the DCAs  can interpret. For example, the translated stream can be coded in Service Metrics Configuration (SMC) script, encapsulated in XML, placed in another suitable format, etc.","A client monitoring routine module of the COM component  (RTMClientMonitor ), then opens a socket connection between the web server  and the selected DCA  (at ) or DCA group (or if no DCA or group of DCAs is selected, then to a default DCA or DCA group) creating a direct data feed through which the DCA  and web server  are able to send and receive data. Measurement and configuration data transmitted between web server  and DCA  may be transmitted, for example, through the socket connection.","After successfully connecting to the DCA , the client monitoring routine  sends the required elements of the real-time configuration  and\/or the subscription information , such as the target configuration information , other configurables, and DCA settings  to MonitorServer  or the DynamicServer routine  (at ). This information may then be routed to an appropriate media monitor .","MonitorServer  and the DynamicServer routine  may be implemented as data transmission software running on DCA . DynamicServer , in particular, may be implemented as software that primarily listens to the open socket port  and transmits information to the client monitor routine .","If the DCA  is immediately busy, the DCA  obtains (either creating or retrieving an existing) a streaming media rendering engine and starts immediately. If the DCA  is not immediately busy when it receives the configuration information  and\/or subscription information , it similarly begins to act on the target configuration information  received from the real-time configuration  and\/or subscription information  immediately.","Whether the target configuration information  is queued or not, when the DCA  gets to the request, the DCA's server monitor application , MonitorServer, will instantiate the appropriate media monitor , e.g., RealMediaMonitor for RealMedia streams, WindowsMediaMonitor for Windows Media streams, and QuicktimeMonitor for Quicktime streams. A media monitor  for each protocol may be included in MonitorServer , which is server monitor application. MonitorServer  may contain, for example, one or more media monitors: RealMediaMonitor , WindowsMediaMonitor , and QuicktimeMonitor . Alternative embodiments may be configured so any single media monitors, any combination of media monitors, or no media monitors are contained in the server monitor , but are instead located external to the server monitor . Regardless of their location, the media monitor  is configured to enable receipt of information from the streaming media server  and directly or indirectly communicate with the server monitor .","Selection of the specific media monitor to be used is based on information received from the COM component  or its subroutine . This information can be derived from the extension of the streaming media server URL in the target configuration information  or by separate information as submitted by the user (or user analog). Alternatively, the media monitor  can contact the streaming media server  and test the stream to determine which media monitor  to use.","The media monitor  then takes measurements from the streaming media servers  referenced in the target configuration information . To perform these measurements, media monitor  in the DCA  connects to the stream (at ) and the streaming media server , in return, feeds the stream to the media monitor  in the DCA  (at ). Neither the media monitor , nor the DCA  need render the stream to perform the measurements.","After receiving the media stream and calculating the measurement data, the media monitor  creates statistic objects  (at ) such as but not limited to SMRealStatistic objects for RealMedia stream servers or SMWinMediaStream objects for WindowsMedia stream servers. (SMRealStatistic and SMWinMedia objects are collectively called SMStatistic objects.) The statistic objects  are encapsulated packets of information that have been recorded by the measurements.","The server monitor application  of the DCA  may then serialize the statistic objects  into a comma delimited format stream  (at ). The server monitor application  (at ) potentially via DynamicServer , transmits this stream  directly over the socket connection to the client monitor subroutine  and\/or the COM component  on the web server  without needing to transmit it through an agent interface server, ingestor, or database; however, transmission to such components could be optionally performed if so desired. Performance data also need not be transferred to a log file or stored and held for any amount of time, although this could also be performed if so desired. Thus, an agent interface server and ingestor are not needed and any database, e.g., a subscription database, is only needed if the real-time configuration  is desired to be stored.","If the stream  was not sent directly to the COM component , the client monitoring subroutine  then returns the measurement data  to the COM component  (at ). The COM object  on the web server  the parses or deserializes (at ) the data into the objects, performs calculations, and builds a separate file or transmits a separate stream in a suitable format, e.g., XML, JavaScript, etc. This final measurement file  is then fed back into the web application itself (at ). This communication between the (COM object  and the web application  can be performed through, e.g., XML or JavaScript, as stated, or it can use other formats if desired. The format may be determined by the Application Programming Interface (\u201cAPI\u201d) function in the Java COM interface called by the web application.","When the DCA  has sent the data back to the web server  or at least freed up the necessary media monitor , the DCA  may then proceed to measure the media stream for the next configuration\/subscription in the queue, or wait for a configuration\/subscription if no queue exists. Although DCAs  may handle only non-real-time measurement subscriptions or only RTM requests, the DCA  could be used for non-real-time measurement subscriptions when in down-time between RTM requests.","Once the web application  has received the final measurement data file  from the COM object , it may immediately display the results to the user terminal  via the web application  converting the final measurement data file  into a report  and sending the report , perhaps in a format such as HTTP to the user terminal  (at ). This report could easily be viewed using a network browser  or other similar application.","A more detailed description of the types of measurable performance criteria measured and analyzed by the systems and methods of the invention embodiments in now provided. Measurable performance criteria may include, but are not limited to, Domain Name System (\u201cDNS\u201d) time, first stat time, buffering time, quantity of data received, jitter, percent packet loss, packet loss, packets received, packets late, packets resend requested, packets resend received, packets recovered, packets resent, packets received normally, access\/network errors, content errors, service errors, current bandwidth, clip bandwidth, and bandwidth ratio (current bandwidth divided by clip bandwidth).","The DNS time is the time for the DCA  to execute a DNS lookup for the streaming media server . The first stat time is the length of time from the start time to when the first statistic object  is returned by the media monitor . The buffering time is the time the first packet arrives from the streaming media server  to the media monitor's buffer  until the end of the setup phase. The setup phase may include the time from the user request to when the stream data begins to be rendered. This includes all events to establish a connection to the stream and buffer time, including DNS Time and buffering time.","The quantity of data received is a measure of the absolute: amount of data gathered by the media monitor . This performance criterion is usually measured in a dimension such as bytes or bits. The packet loss metric is the number of packets that are not received by the media monitor . The percent packet loss metric is the percentage of total packets that are considered lost. The packets received metric is the total number of packets received by the media monitor . This is the sum of the normal and recovered packets. The packets late metric is the number of packets received too late to functionally render, if the stream had been rendered. The packets resend requested metric is the number of packets that have been requested to be resent in a unicast environment. This metric particularly applies to RealMedia streams.","The packets recovered metric is the number of packets for which some type of corrective action is taken. The corrective action is taken by the core module of the media player on the streaming media server . Corrective action may be understood to include requesting that the missing or broken packets be resent. This metric particularly applies to RealMedia streams.","The packets resent metric, also known as packets resend received, is the number of packets requested again (the packets resend requested metric) and received. This metric particularly applies to RealMedia streams. The packets received normally metric is the number of packets received by the media monitor  from the streaming media server  without incident. The access\/network errors metric is the number of errors due to network problems, such as network congestion or loss of network connection at the DCA . This would be a successful negotiation, but an error would exist on the line (similar to a timeout).","The content errors metric is the number of content errors encountered while downloading a URL's contents. For each object that is part of a URL's contents, there is the potential for content error. Content errors are identified by HTTP error codes, such as , which indicates that an object was not found. For streaming media this is usually zero. The service errors metric is the number of service errors encountered when downloading a URL. A service error indicates that the download of an object completely failed for some reason. Unlike content errors, service errors are not detected by looking at the HTTP reply code. Service errors include all other kinds of errors such as failure to perform a DNS lookup, inability to connect to an IP address, or premature disconnection from a host.","The current bandwidth is the rate at which data is received measured over a very small time frame. Typically measured in bytes per second. The clip bandwidth is the rate at which data is received measured over the length of the entire stream or over a long predetermined timeframe.","Packet counts are those such as, but not limited to, packets lost, packets received, packets late, packets resend requested, packets resend received, packets recovered, and packets received normally. The packet counts reported by the media monitor  can be cumulative counts. For example, if there is one packet lost in each of the first-three seconds of the measurement period, the data collected could be represented in Table 1.",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Measurement","1","2","3"]},{"entry":[{},"Interval (seconds)"]},{"entry":[{},"Reported Lost","1","2","3"]},{"entry":[{},"Packet Count"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}}}},"However, this data may easily be misinterpreted by the user presented in this form. For example, in the second measurement interval, a user may erroneously believe that two packets were lost rather than one. Therefore, this data may be converted into the packets lost during each measurement interval, also referred to as the \u201cinstantaneous count\u201d. The converted data from Table 1 could be represented as shown in Table 2.",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Measurement","1","2","3"]},{"entry":[{},"Interval (seconds)"]},{"entry":[{},"Reported Lost","1","2","3"]},{"entry":[{},"Packet Count"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}}}},"This conversion calculation can be expressed as\n\n\n\nwhere x\u2032 is the reported lost packet count for interval i, xis the total lost packet count through interval i, and xis the total lost packet count through interval i\u22121. This calculation is may be performed when the data is passed back through the COM component , but may alternatively occur at any location capable of at least temporarily storing xand xand performing the required subtraction. This calculation may be performed for each packet count metric, including but not limited to: packets lost, packets received, packets late, packets resend requested, packets resend received, packets recovered, and packets received normally. However, if it is desired to perform this calculation on some packet count metrics and not on others, the system can easily achieve that result as well. Presenting packet data in the above-described format prevents user confusion between interval-specific metrics and cumulative metrics.\n","The COM component  (or other capable software) may also be configured to perform a cumulative bytes received calculation, which is a cumulative total of the amount of data (e.g., in bytes) received during the measurement. Assuming that the bandwidth is the rate at which data is received in bytes per second, this can be expressed as:\n\n+()\n\nwhere y is the quantity of data (e.g. number of bytes) measured, i is the measurement interval, z is the current bandwidth (e.g., bytes per second), and t is the time length of interval (in seconds).\n","Thus, RTM systems and methods designed in accordance with the various embodiments of the invention provide increased utility including, but not limited to, cost savings, increased speed of data return, reduced system complexity, reduced required processor capacity, and reduced space (both physical and memory) needed.","As explained above, various embodiments of the invention provide systems and methods for real-time measurement of streaming media and other data content delivery metrics. Such systems and methods may have increased utility in that they enable achievement of system scalability by threading the engine core. For example, the various systems and methods of the invention may be implemented using Real Networks\u00ae\u2032 Software Development Kit (SDK) that provides an API for accessing the components of their media player. This SDK is primarily intended for use by developers building custom user interfaces while relying on Real Networks\u00ae streaming technology to deliver content. Although SDK is for C\/C++ developers, it has utility even when used with a monitoring framework implemented entirely in Java because it is possible to interact between the two languages in a single process via JNI (Java Native Interface).","A first step in achieving scalability (defined here as being able to simultaneously measure multiple media streams in a single process) may be to activate Real Networks' \u201ccore\u201d by sending in a Java thread via a JNI call. The thread may stay in this native code (a dynamic link library written in C++) essentially in an endless loop where it may wait for commands from the controlling layer (Java code).","When the controlling code receives a monitoring request it may send a thread through the JNI layer into the native code where it may communicate with the \u201ccore\u201d thread via a PostThreadMessage( ) operation (PostThreadMessage is part of the Win32API provided by Microsoft\u00ae). This may enable the capability to launch multiple steaming monitors, but it does not enable the ability to control players or collect associated statistics. Control and collection is handled by the engine core; however, there are no default mechanisms for either controlling individual players or getting the correct statistics back to the Java control layer. In accordance with the invention embodiments, the identification mechanisms (numerical Ids) used in the Java layer are associated with a data structure encapsulating IDs with player objects. As a result, the PostThreadMessage operation may take three arguments: the message and two \u201cmessage parameters\u201d. It is possible to use the message parameters to transmit ID information along to the core engine thread, which can then store this in a data structure encapsulating these values and the player object.","Systems and methods designed in accordance with various embodiments of the invention may obtain statistical information from the engine core by providing an IRMCAClientAdviceSink interface and implementing an OnStatisticsChanged method, which is standard to SDK. These operations obtain a statistic from the engine core and provide it in the native layer but not into the Java layer where it is needed. For this reason, the systems and methods designed in accordance with the various embodiments of the system initiate a JNI call with the statistic and the ID information previously transmitted. For scalability reasons, the statistic is pushed on a queue existing at the lava layer (or JVM), which is then processed by an event thread. The event thread processes this queue, passing the statistic to every currently active Java player thread (each player at the Java controller layer is represented by a Java thread). The object running on this thread then checks the statistic ID against the ID information communicated earlier. If it is a match, it accepts the statistic, otherwise it is ignored.","Further details as to the use or other aspects of the system and method described herein may be drawn from the background that is intended to form part of the present invention. That is to say, all aspects described in the background, including those described and labeled as not being the invention, are described as and capable of being incorporated into the invention. Aspects labeled as not being the invention are merely not the invention as they stand in their own entirety as described, but their aspects are not precluded from being aspects of the present invention.","It is noted that this invention has been described and specific examples or variations of the invention have been portrayed. The use of those specific examples is not intended to limit the invention in any way. Additionally, to the extent that there are variations of the invention, which are within the spirit of the disclosure and are equivalent to features found in the claims, it is the intent that the claims cover those variations as well. All equivalents are considered to be within the scope of the claimed invention, even those which may not have been set forth herein merely for the sake of relative brevity. Furthermore, it is contemplated that each and every optional feature of the inventive variations described herein may be specifically excluded from the invention claimed and be so-described as a negative limitation. Also, the various aspects of the invention described herein, in any manner, may be modified and\/or used in combination with such other aspects also described to be part of the invention either explicitly, implicitly or inherently to form variations considered to be part of the invention."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various systems and methods designed in accordance with the embodiments of the invention are described herein with reference to the following drawings:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
