---
title: Vocabulary-independent search of spontaneous speech
abstract: A method of identifying a location of a query string in an audio signal is provided. Under the method, a segment of the audio signal is selected. A score for a query string in the segment of the audio signal is determined by determining the product of probabilities of overlapping sequences of tokens. The score is then used to decide if the segment of the audio signal is likely to contain the query string.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07584098&OS=07584098&RS=07584098
owner: Microsoft Corporation
number: 07584098
owner_city: Redmond
owner_country: US
publication_date: 20041129
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention relates to searching audio signals for query strings. In particular, the present invention relates to performing such searches without prior knowledge of the vocabulary of the query string.","With increases in the storage capacity of computing devices, it has become easier to store large amounts of recorded speech in a digital format. To help users find a particular segment of recorded speech, systems have developed that allow a user to search the recorded speech for particular keywords. These systems typically perform speech recognition on the recorded speech to identify words represented by the speech. Text strings representing the search query are then compared to the recognized words to identify the portion of the audio signal that contains the query terms.","One challenge to these audio search systems is that speech recognition is imperfect. Because of this, if a system uses a single speech recognition output, it will have poor recall when the recognizer makes an error. For example, if the recognizer identifies the word \u201cball\u201d but the speech signal actually contained the word \u201cdoll\u201d, the audio search system will not return a match for the query term \u201cdoll\u201d even though it is present in the speech signal.","To avoid this problem, many systems have utilized a lattice of possible speech recognition results instead of a single speech recognition result. Although this lattice approach improves recall, it greatly increases the amount of time needed to search for a query term. In addition, existing text-level indexing methods can not be trivially applied.","To speed up the search, it has been proposed that indexes should be generated from the lattice before the search query is received. Such indexes identify the location of particular sets of keywords in the audio signal. When the query is received, the index is consulted to find the location of the keywords of the query.","Such indexes must be very large in order to cover all possible query terms that may appear. In addition, it has been found that such indexes typically lack query terms that are the most useful in differentiating one portion of the audio signal from another. In particular, terms that are infrequently used, and thus are less likely to be included in the index, are more likely to differentiate two audio segments.","To overcome this problem, the prior art has suggested using indexes of sequences of sub-word units, such as phonemes, instead of full keywords. For example, the sequences can be formed of 4-grams of phonemes. Because these sequences are typically shorter than keywords, there are fewer possible sequences that need to be included in the index.","In one prior art system (discussed in C. Allauzen et al., -, Proc. HLT\u203204), each sequence of sub-word tokens is placed in the index with an expected term frequency of the sequence. This expected term frequency, also known as the expected count, is an indication of the number of times that the sequence of sub-word tokens appears in a lattice associated with a segment of the audio signal. When a query is received, it is divided into sub-word tokens and sequences of sub-word tokens are identified in the query. The expected term frequency of the query is then determined by using the expected term frequency of the sequence of sub-word tokens that has the lowest expected term frequency in the index. Such indexing is done for a plurality of segments of the speech signal and the segment with the highest expected term frequency is identified as containing the query term.","One problem with this prior art technique is that approximating the expected term frequency of the query by the minimum expected term frequency of all of its sub-word token sequences causes the worst matching sub-word token sequence to dominate the estimate. In addition, the sequence relationship between the individual sub-word token sequences is not exploited under the prior art.","A method of identifying a location of a query string in an audio signal is provided. Under the method, a segment of the audio signal is selected. A score for a query string in the segment of the audio signal is determined by determining the product of probabilities of overlapping sequences of tokens. The score is then used to decide if the segment of the audio signal is likely to contain the query string.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, telephony systems, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention is designed to be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules are located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  is operated in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210"]},"Memory  is implemented as non-volatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is preferably allocated as addressable memory for program execution, while another portion of memory  is preferably used for storage, such as to simulate storage on a disk drive.","Memory  includes an operating system , application programs  as well as an object store . During operation, operating system  is preferably executed by processor  from memory . Operating system , in one preferred embodiment, is a WINDOWS\u00ae CE brand operating system commercially available from Microsoft Corporation. Operating system  is preferably designed for mobile devices, and implements database features that can be utilized by applications  through a set of exposed application programming interfaces and methods. The objects in object store  are maintained by applications  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","Communication interface  represents numerous devices and technologies that allow mobile device  to send and receive information. The devices include wired and wireless modems, satellite receivers and broadcast tuners to name a few. Mobile device  can also be directly connected to a computer to exchange data therewith. In such cases, communication interface  can be an infrared transceiver or a serial or parallel communication connection, all of which are capable of transmitting streaming information.","Input\/output components  include a variety of input devices such as a touch-sensitive screen, buttons, rollers, and a microphone as well as a variety of output devices including an audio generator, a vibrating device, and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition, other input\/output devices may be attached to or found with mobile device  within the scope of the present invention.","The present invention provides a system for indexing and searching an audio signal without requiring any prior knowledge about the possible keywords that may be provided in a query.  provides a block diagram of one embodiment of the system of the present invention for performing indexing and searching of audio signals.","In , an audio signal  is provided to a lattice generation module , which includes a speech recognizer . Speech recognizer  divides audio signal  into a set of segments that have a substantially similar duration. Under one embodiment, lattice generation module  divides the audio signal at points of silence in the audio signal. Under one embodiment, the segments are each approximately fifteen seconds in length. Those skilled in the art will recognize that other segment lengths such as thirty seconds and sixty seconds can also be used.","Lattice generation module  takes each audio segment in turn and forms a token lattice such as lattice  of . This token lattice provides a network of token nodes where time is shown along a horizontal axis  and tokens are shown along vertical axis . At each discrete time point in lattice , a set of possible tokens is identified such as tokens , ,  and  at time point . Under some embodiments, these tokens are sub-word units such as phonemes and syllables. In other embodiments, the tokens are individual words. In still further embodiments, two different lattices are formed, one with sub-word units and one with full word units.","The tokens at each time point are speech units that have been recognized by speech recognizer  as possibly representing the speech in the audio signal. Each token has an associated probability that is assigned by the speech recognizer based on the degree to which the audio signal matches an acoustic model for the token. Thus, some tokens may be more probable than other tokens at any given time point. Speech recognizer  also provides allowed transitions between the tokens at different time points (and at same time point with different context) creating the transition network shown in . The probability of any one path through the network can be determined by multiplying the probabilities of each token along the path.","Lattice generation module  generates a separate token lattice for each audio segment. This creates a set of token lattice files  in .","Token lattice files  are provided to an index extraction module , which generates one or more index files that are stored in an index store . An index file provides expected term frequencies or probabilities for each of a set of n-grams . Under one embodiment, the set of n-grams  is identified by an n-gram trainer from a background dictionary. Specifically, in such embodiments, only those n-grams that are found in words in background dictionary are included as n-grams . This reduces the number of n-grams that must be considered during indexing by eliminating those n-grams that do not typically occur in a language. In some embodiments, the n-gram trainer is a simple selector filter that selects all n-grams in the background dictionary. In other embodiments, more complex algorithms are used to select the n-grams.","One disadvantage of using a limited set of n-grams is that some n-grams that are present in the audio segment will not be listed in n-gram list . As a result, these n-grams will be left out of the index files of index store . To overcome this, an embodiment of the present invention provides a backoff strategy to deal with n-grams that are not present in n-grams . This strategy is discussed further below.","The process for creating an index file is shown in the flow diagram of . In step  of  a lattice is selected. At step , a path through the lattice is selected. Using the probabilities of the tokens along the path, a probability of the path is determined at step . This can be determined by multiplying the probabilities of the individual tokens along the path to form the total probability of the path.","At step , each node along the path is sequentially selected. At each node, an expected term frequency for an n-gram along the path that ends at that node is updated. In order for the n-gram to be updated, it must be found within the list of n-grams . To update the expected term frequency of the n-gram, the probability of the path is added to the pervious value of the expected term frequency.","In addition, the expected term frequency for every sequence of tokens along the path of length n\u22121 to 1 that ends in the selected token is updated at step . Thus, if n=5, the expected term frequency for a 5-gram, a 4-gram, a 3-gram, a bigram and a unigram, that end at the current node along the selected path and are found in the background dictionary would be updated at step .","After the expected term frequencies for all token sequences of length n to 1 have been updated for all of the tokens along the selected path, the process determines if there are more paths at step . If there are more paths, the process returns to step  and the next path through the lattice is selected. Steps  and  are then repeated for the new path.","Those skilled in the art will recognize that the description above provides one example of how to traverse a lattice to form the index. Other techniques for traversing the lattice, such as changing the order of the steps described above, are within the scope of the present invention.","When there are no further paths at step , the process continues at step  where backoff weights are determined. The backoff weights are used during a backoff strategy when an n-gram is not found in an index file, as discussed further below. The backoff weights are calculated such that for each history h in the lattice, which consists of a sequence of n tokens q, . . . , qthe following is true:",{"@attributes":{"id":"p-0048","num":"0047"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":{"mrow":{"munder":{"mo":"\u2211","mrow":{"mo":"\u2200","mi":"qi"}},"mo":"\u2062","mrow":{"mover":{"mi":"P","mo":"~"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":{"mi":["q","i"]},"mo":"\u2758","mi":"h"},"mo":",","msup":{"mi":["O","s"]}}}}},"mo":"=","mn":"1"},"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}},"mi":"where"}},{"mrow":{"mi":"EQ","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"1"}}]},{"mtd":[{"mrow":{"mrow":[{"mover":{"mi":"P","mo":"~"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["q","i"]},{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}}],"mo":"\u2758"},"mo":[",","\u2062",",",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"msub":{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}},"msup":{"mi":["O","s"]}}}},{"mo":"{","mrow":{"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mover":{"mi":"P","mo":"~"},"mi":"MELL"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["q","i"]},{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}}],"mo":"\u2758"},"mo":[",","\u2062",",",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"msub":{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}},"msup":{"mi":["O","s"]}}}}}},{"mtd":{"mrow":{"mrow":{"mi":"if","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}},{"mi":["q","i"]}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},"mo":"\u2208","mi":"K"}}},{"mtd":{"mrow":{"mi":"B","mo":"\u2062","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}},"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"mrow":{"msub":{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}},"mo":"\u2758","msup":{"mi":["O","s"]}}}},"mo":["\u2062","\u00b7"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}}},{"mtd":{"mrow":{"mover":{"mi":"P","mo":"~"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["q","i"]},{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"2"}}],"mo":"\u2758"},"mo":[",","\u2062",",",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"msub":{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}},"msup":{"mi":["O","s"]}}}}}},{"mtd":{"mrow":{"mrow":{"mi":"if","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}},{"mi":["q","i"]}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},"mo":"\u2209","mi":"K"}}},{"mtd":{"mrow":{"mrow":{"mi":"but","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}},{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},"mo":"\u2208","mi":"K"}}},{"mtd":{"mrow":{"msub":{"mover":{"mi":"P","mo":"~"},"mi":"MELL"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["q","i"]},{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"2"}}],"mo":"\u2758"},"mo":[",","\u2062",",",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"msub":{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}},"msup":{"mi":["O","s"]}}}}}},{"mtd":{"mi":"otherwise"}}]},"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}},"mi":"where"}}],"mo":"="}},{"mrow":{"mi":"EQ","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"2"}}]},{"mtd":[{"mrow":{"mrow":{"msub":{"mover":{"mi":"P","mo":"~"},"mi":"MELL"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["q","i"]},{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}}],"mo":"\u2758"},"mo":[",","\u2062",",",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"msub":{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}},"msup":{"mi":["O","s"]}}}},"mo":"=","mfrac":{"mrow":[{"msub":{"mi":["ETF","s"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}},{"mi":["q","i"]}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}},{"msub":{"mi":["ETF","s"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"q","mrow":{"mi":["i","j"],"mo":["-","+"],"mn":"1"}},{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}}}}}]}}},{"mrow":{"mi":"EQ","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"3"}}]}]}}},"br":{},"sub":["i","i\u2212j+1","i\u22121","i\u2212j+1","i ","s","i\u2212j+1","i","i\u2212j+1","i","s","i\u2212j+1","i\u22121"],"sup":["s","s "],"b":"506"},"After the backoff weights have been calculated at step , the process of  determines if there are more lattices to be evaluated at step . If there are more lattices, the next lattice is selected at step  and steps , , ,  and  are repeated for the new lattice. When there are no further lattices to process at step , the method of  ends at step .","Under some embodiments of the present invention, the speech recognizer includes silence tokens in the lattice. These silence tokens represent portions of the audio signal that are recognized as not including any speech.  provides an example of a lattice  with a silence token .","Under one embodiment, when building the index, the silence tokens either operate as stops or are ignored when identifying the sequences of tokens. When a silence token acts as a stop, sequences of tokens along a path must stop when they reach a silence token. Thus, when the index extractor reaches token  for the path consisting of tokens , , ,  and , it will only update the bigram of tokens  and  and the unigram of token . It will not update the 5-gram, 4-gram or trigram that would have included silence token .","When the silence token is ignored, the sequences of tokens are formed by skipping the silence token. Thus, when the index extractor reaches token , it would update a 4-gram for the sequences of tokens , , , and , a trigram for the sequence of tokens ,  and , a bigram for the sequence of tokens  and  and the unigram for token .","The steps of generating the index files described above may be performed when a query is received. Under most embodiments, however, the index files are created off-line before a search query has been received.","After the index files have been created, the system is ready for searching. Under some embodiments of the present invention, a two stage search is performed. During the first stage, a user query  is provided to first stage search unit . First stage search unit  searches for the user query through a process described in .","After receiving the query at step , search unit  breaks the query into tokens. Under some embodiments, these tokens are sub-word tokens such as phonemes or syllables. In other embodiments, where the query has multiple words, the tokens are individual words. At step , an index file from index files  is selected. At step , the tokens identified in step  are grouped into overlapping n-grams and for each n-gram a probability is determined using EQ. 2 above. Under EQ. 2, if the n-gram is present in the index, the probability is calculated using EQ. 3. To reduce the amount of time needed to compute the probabilities of the n-grams, the probabilities can be pre-calculated and stored instead of storing the expected term frequencies of the n-grams in the n\u22121 grams used in Equation 3.","If the n gram is not present in the index, but the history portion of the n-gram is present in the index, a backoff probability is determined using the backoff weight and the probability for the n\u22121 gram as determined using EQ. 2. If the history portion of the n-gram is not present in the index, the probability is determined using EQ. 3 with a shorter history such that, if a 5-gram had been used initially, a 4-gram would be used under EQ. 2 if the 5-gram were not preset in the index and the history portion of the 5-gram were not present in the index.","At step , the probabilities determined at step  for the n-grams are combined to determine an estimate of the probability of the query given the audio segment associated with the index. This probability is determined using:",{"@attributes":{"id":"p-0058","num":"0057"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"Q","mo":"\u2758","msup":{"mi":["O","s"]}}}},{"mover":{"mi":"P","mo":"~"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"Q","mo":"\u2758","msup":{"mi":["O","s"]}}}}],"mo":"\u2248"},{"munderover":{"mo":"\u220f","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"l"},"mo":"\u2062","mrow":{"mover":{"mi":"P","mo":"~"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["q","i"]},{"mi":"q","mrow":{"mi":["i","n"],"mo":["-","+"],"mn":"1"}}],"mo":"\u2758"},"mo":[",","\u2062",",",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"msub":{"mi":"q","mrow":{"mi":"i","mo":"-","mn":"1"}},"msup":{"mi":["O","s"]}}}}}],"mo":"="}},{"mrow":{"mi":"EQ","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"4"}}]}}}},"br":{},"sup":["s","s","s"],"sub":["i","i\u2212n+1","i\u22121"]},"The estimate of the probability of the query given the audio signal associated with the index is then multiplied by the expected number of tokens in the audio signal to produce an expected term frequency for the query of:\n\nETF()=()\u2003\u2003EQ. 5\n","For compound word queries, two expected term frequencies can be calculated. One can be calculated assuming that there is a pause between the compound word queries, and another can be calculated assuming no pause between the words. The two expected term frequencies are then summed to form the expected term frequency for the compound word query. In other embodiments, the expected term frequency that is the greater of the two is used as the expected term frequency for the query.","When no pause is assumed between the words, the ETF of the query is calculated by assuming that the sequences of tokens span words such that a sequence of tokens can include tokens from two different words. When a pause is assumed to be present, the pause acts as a stop. Thus, the probability for a token after a pause is calculated using the backoff strategy of Equation 2 with the unigram probability of the token. In such cases, a probability for a sequence ending with the silence token is similarly calculated using the back of strategy of Equation 2 with the unigram probability of the silence token.","In addition, the expected term frequency of the query determined from the sub-word units can be augmented by linearly interpolating that expected term frequency with an expected term frequency calculated at the word level. In particular, the query can be divided into sub-word tokens and word tokens. One expected term frequency for the query is then determined using the sub-word tokens and a second expected term frequency for the query is determined using the word tokens using the techniques described above. The two expected term frequencies are than linearly combined using interpolation weights to produce a final expected term frequency for the query.","Under another embodiment, a cascading system is used in which the expected term frequency is calculated at the word level if the words are present in the index. If the words are not present, the expected term frequency is calculated at the sub-word level. Such a cascade approach has been proposed in M.Sraclar, R. Sproat, -, Proceedings HLTNAACL 2004. Other techniques for combining word-level expected term frequencies and sub-word-level expected term frequencies may also be used within the scope of the present invention.","After the expected term frequency of the query has been determined at step , the process of  determines if there are more index files at step . If there are more index files, the next index file is selected at step , and steps  and  are repeated to determine an expected term frequency of the query in the new index file.","When there are no further index files to be processed, the index files are ranked based upon their expected term frequency at step . The highest K ranking index files or all of the index files that have an expected term frequency above a particular threshold are then identified as files that are likely to contain the query. These files are identified as selected lattice files  in .","Under some embodiments of the present invention, the search technique ends with the identification of the selected lattice files. In other embodiments, an optional second stage search is performed as described further below.","Selected lattice files  are provided to a second stage search unit  that also receives the user query . Second stage search unit  performs a linear search of the lattices in selected lattice files  to identify the specific places within each lattice where the query appears. In addition, the second stage search generates a confidence measure indicating the likelihood of the query appearing in that location. This likelihood can be based on the speech recognition probabilities for the tokens associated with the query. The results of this second stage linear search can be ordered based on the confidence levels thereby forming a results list .","Because the selected lattice files  contain fewer lattice files than token lattice files , the linear search takes much less time than in the prior art.","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
