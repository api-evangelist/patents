---
title: Method and apparatus for programming a mobile device with multiple service accounts
abstract: Methods and systems enable mobile devices equipped with software defined radio based chipset modules to seamlessly re-program the mobile device to operate on any of a variety of service provider networks. By re-programming a mobile device equipped with software defined radio based chipset module, the mobile device can support communications over both GSM and CDMA communication networks. An environment is provided which allows a user to quickly and efficiently switch between service provider accounts supporting communications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08417231&OS=08417231&RS=08417231
owner: QUALCOMM Incorporated
number: 08417231
owner_city: San Diego
owner_country: US
publication_date: 20090517
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to provisioning and programming a mobile device, and more particularly to methods and apparatus for provisioning and programming multiple service provider accounts on a single mobile device.","Typically, conventional cellular communications devices operate using one of two main competing network technologies. Namely, Global System for Mobile Communications (GSM) or Code Division Multiple Access (CDMA). While there are a number of differences between the two competing technologies, at the core GSM implements a time-division multiplexing scheme, while CDMA (as its name implies) implements a code-based multiplexing scheme. In a GSM network a portion of the network's total bandwidth is allocated as a channel to a mobile device. The network base station then selectively \u201clistens\u201d to each of the allocated channels for a short amount of time to send and receive voice and\/or data information to and from the mobile device. The base station can only selectively listen to the allocated channel for a short amount of time because it must also listen to other channels allocated to other mobile devices operating on the network. While effective, the TDMA scheme is hampered by its limited bandwidth and need to dedicate a single channel to a single mobile device.","In contrast, in a CDMA network, each channel may be utilized by multiple mobile devices. In order to differentiate the information received from different mobile devices operating on the same allocated channel, each mobile device is assigned a different coding offset in which to encode its voice and\/or data information. By selectively switching the decoding code offset, the base station can decode the information received from multiple mobile devices operating on the same allocated channel. This greatly increases the capacity to service more mobile devices on the same amount of total bandwidth.","In addition to the multiplexing and encoding schemes implemented on each of the competing technologies, individual service providers operating competing communication networks may modify other aspects of the communication signals being sent and received over their respective communication networks. This allows each service provider to differentiate their network from another and in some instances offer differentiating features to its customers. These aspects may include communication signal waveforms, frequency, amplitude, etc.","In order to properly operate on a particular service provider's network, a mobile device must be equipped with the necessary hardware to generate the appropriate waveform with the correct modulation, and coding scheme as required by the service provider's network. Because of the fundamental differences in the type of waveform, modulation and coding schemes used between the two competing networks, mobile devices equipped with the necessary hardware to operate on a GSM technology network cannot operate on a CDMA technology network, and vice versa.","Moreover, competing service providers operating similar technology (e.g., GSM or CDMA) networks typically implement proprietary provisioning data that allows a mobile device to operate on a particular service provider's network. Each service provider typically employs a number of provisioning parameters that are unique in their usage or format. Conventional mobile devices store the provisioning data for the single service provider with which the device has been registered. While conventional mobile devices may be able to conduct communications over a different service provider's communication network (provided it is of the same technology type), such usage will be only permitted in accordance with the roaming rules and permissions dictated by the provisioning data loaded into the mobile device. If a user of a conventional mobile device wishes to utilize a different service provider's communication network for primary (i.e., non-roaming) service, the provisioning data loaded into the mobile device must be deleted and replaced with provisioning data of the newly selected service provider. Typically, such a change may only be made by activating a new account with the newly selected service provider. If the user subsequently desires to revert back to the original service provider's communication network for primary service, then a new account on the original service provider's network must be activated and the previous account data deleted.","In some settings, a removable smart card such as a Subscriber Identity Module (SIM) card or analogous R-UIM card may allow a user to interchange the provisioning data loaded into a mobile device without the need for service provider intervention. The provisioning data for different service providers may be stored on the removable smart card. Because each smart card may store the provisioning data for a different service provider a user may physically interchange smart cards in a mobile device to use different service provider networks for primary service. However, the need to physically interchange smart cards requires a user to carry multiple smart cards. In addition, the physical interchange of smart cards is cumbersome. Lastly, the use of smart cards still does not allow a mobile device equipped with the necessary hardware to operate on a GSM technology network to operate on a CDMA technology network and vice versa.","Various embodiment methods and systems are provided to store in non-volatile memory the necessary software builds and provisioning data parameters for multiple service providers so that an appropriately equipped mobile device can operate on any of a number of different service providers. Such a mobile device may include a software based radio chipset module enabling it to communicate with cellular networks of all technology types (including GSM and CDMA). Various embodiments further provide a method, system and device for switching between the software builds and provisioning data of different service providers. Additional embodiments provide a method for preventing the launching of multiple service provider connection managers which could result in a conflict in the programming of a mobile device.","The various embodiments will be described in detail with reference to the accompanying drawings. Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts. References made to particular examples and implementations are for illustrative purposes, and are not intended to limit the scope of the invention or the claims.","In this description, the term \u201cexemplary\u201d is used herein to mean \u201cserving as an example, instance, or illustration.\u201d Any implementation described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other implementations.","As used herein, the term \u201cmobile device\u201d is intended to encompass any form of programmable computer as may exist or will be developed in the future which implements a communication module for wireless voice and data communications, including, for example, cellular telephones, personal data assistants (PDA's), palm-top computers, laptop and notebook computers, wireless electronic mail receivers (e.g., the Blackberry\u00ae and Treo\u00ae devices), multimedia Internet enabled cellular telephones (e.g., the iPhone\u00ae), and similar personal electronic devices which include a wireless communication module, processor and memory. In a preferred embodiment, the mobile device is a portable computer with a software defined radio based chipset module.","Conventional mobile devices have typically been designed to operate on a single service provider's communication network. More specifically, conventional mobile devices have been designed to operate on a single communication technology (e.g., GSM v. CDMA). For example, cellular telephones have been typically purchased directly from a service provider for use on that service provider's network. Similarly, wireless modem cards for notebook computers are typically bought and sold directly from the service provider. Because of the fundamental differences between the competing technologies, the hardware contained within the mobile device enabling communications on one competing technology prevents the same mobile device from communicating with a network of another competing technology.","Moreover, even as two separate service providers may implement the same communication technology, different service providers may provide their customers with different feature sets. Consequently, even if the hardware enabling communication is the same, the software enabling communications on one service provider's communication network may vary greatly from that of a different service provider. Accordingly, a different software build must be implemented on a mobile device for each service provider.","In addition, most conventional mobile devices have been designed to load a single service provider's provisioning data. Because competing service providers implement proprietary provisioning data, conventional mobile devices operating on one service provider's communication network cannot operate on another service provider's communication network (as a primary service) without deleting the first service provider's provisioning data and replacing it with the second service provider's provisioning data. While some mobile devices allow a user to exchange the provisioning data of different service providers through the interchange of smart cards, such methods are cumbersome and still do not allow a user to utilize the communication networks of competing technologies.","In contrast to conventional mobile devices which use hardware to generate, encode\/decode, and modulate\/demodulate signals in conjunction with one of the competing technologies, future software defined radio based chipset modules, such as Qualcomm's Gobi\u00ae, generate, encode\/decode and modulate\/demodulate data signals within a programmable digital signal processor (DSP). The programmable DSP enables the communication signal to be defined by software to conform with the wave form, frequency and data packet requirements of any communication technology. By re-programming the DSP to generate signals with different characteristics, the mobile device may be made to generate a communication signal that is compatible with any service provider's unique communications network.","In order to re-program the DSP within the software defined radio based chipset to generate a data signal compatible with a selected service provider network, the mobile device must load an appropriate software build for the selected service provider. Each service provider's software build may contain the necessary instructions to generate, encode and modulate data signals to be properly carried over the service provider's communication network, as well as contain the necessary programming to carry out all of the additional features offered by the service provider. The various embodiments provide the capability to modify and switch various modules of the software build implemented on a mobile device. Various embodiments monitor which service providers have had an account activated by the mobile device so that previously generated parameters of a service provider's software build may be recycled. Other embodiments monitor the currently implemented service provider software build to prevent fatal collisions from occurring when a different software build is requested.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1","b":["10","10","191","191","191","192","11","10","20","20","25","26"],"i":["a ","b "]},"The mobile device  may include an antenna  for sending and receiving electromagnetic radiation that is connected to the software-defined communication module  coupled to the processor . Further, the mobile device  includes a speaker  to produce audible sound and a microphone  for sensing sound, such as receiving the speech of a user. Both the microphone  and speaker  may be connected to the processor  via a vocoder  which transforms analog electrical signals received from the microphone  into digital codes, and transform digital codes received from the processor  into analog electrical signals which the speaker  can transform into sound waves. In some implementations, the vocoder  may be included as part of the circuitry and programming of the processor . Mobile devices also typically include a key pad  and menu selection buttons or rocker switches  for receiving user inputs.","The processor  may be any programmable microprocessor, microcomputer or multiple processor chip or chips that can be configured by software instructions (applications) to perform a variety of functions, including the functions of the various embodiments described below. In some mobile devices, multiple processors  may be provided, such as one processor dedicated to wireless communication functions and one processor dedicated to running other applications. In some mobile devices , multiple processors , may be provided to share wireless communication functions and\/or application between them. Typically, software applications may be stored in the internal memory  before they are accessed and loaded into the processor . In some mobile devices, the processor  may include internal memory sufficient to store the application software instructions. In some mobile devices the processor  is included within the software-defined communication module , such as in Qualcomm's Gobi\u00ae which includes two processors in addition to signal generator and modem circuits.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 2","FIG. 3"],"b":["10","20","20","25"]},"A multi-interface software module  functioning in a processor  is in communication with the communication module  and a common application programming interface (C-API) . The multi-interface software module  contains the actual coding for various subroutines called on by applications via the C-API . Developers of applications for mobile devices  can utilize the C-API  to access or interface with various subroutine stored in the multi-interface module  to perform desired functions. The subroutines stored in the multi-interface module  may be used to perform a variety of functions including, but not limited to, programming and retrieving information from the communication module . The C-API  may contain a number of dynamic link libraries (DLL) . By containing a number of dynamic link libraries , the C-API  may use the hooks to and from the multi-interface module  to provision the communication module  for a particular service provider. By utilizing dynamically linked libraries of common subroutines, the subroutines appropriate for a selected service provider may be loaded into an application program at runtime rather than at compile time.","When an account for a service provider is activated on the mobile device , the DLL  supporting that account is loaded into the C-API and stored for future retrieval. Each of the various service providers activated on a mobile device  may load an application programming interface specific to the particular service provider that uses its respective DLLs to facilitate the loading of the service provider's software build and provisioning data. Each of the DLLs  may be programmed to communicate with the multi interface software module . The C-API  is in communication with a connection manager tracker  or directly with a service provider's connection manager. The connection manager tracker  effectively acts as a \u201ctraffic cop\u201d to insure that only a single service provider's software build is implemented on the mobile device  at a time. The connection manager tracker  determines which service provider account is selected and insures that only the software build corresponding to the selected service provider account is implemented. In the event a service provider account is selected that is not supported by the currently implemented software build, the connection manager tracker  may insure that the currently implemented software build is closed before the software build corresponding to the newly selected service provider account is launched. The connection manager tracker  is in communication with each individual connection manager , ,  supporting each service provider account (SP, SP, SP) activated on the mobile device . Each connection manager , ,  is responsible for launching the corresponding software build by loading the appropriate subroutines from the DLLs  and retrieving the appropriate parameters stored in non-volatile memory .","In an alternative embodiment, the mobile device  may implement a common connection manager  which is a central application that is capable of setting up the communication links for a plurality of service provider accounts (SP, SP, SP). In such an embodiment, the connection manager tracker  may be integrated within the common connection manager  or may continue to communicate with an external connection manager tracker  to insure that only a single service provider's software build is implemented on the mobile device  at a time.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 3","FIGS. 3","FIGS. 3","FIGS. 3"],"b":["4","5","4","5","4","5","4","5","4","1","2","3","4","10"]},"For each service provider, a variety of parameters and settings which are generated during the initial activation process of each respective service provider may be stored in data fields (illustrated as rows in , , and ).  illustrates an exemplary indexed data table of dynamic parameters utilized by a variety of service provider accounts. For example, each service provider may specify a different mode of activation. As the name implies, the mode of activation indicates the type of activation procedure that is employed by the particular service provider. The different types of activation procedures may include, for example, an Over-the-Air Service Provisioning (OTASP) procedure, an Internet Over-the Air (IOTA) procedure, or an Open Mobile Alliance Device Management (OMADM) procedure. Each of these procedures may implement different steps and\/or protocols to accomplish the activation procedure.","The data table may also specify the Network Access Identifier (NAI) for each service provider. The NAI is the username assigned to the mobile device  used to authenticate the device for data service. Each service provider may assign a unique format to the username. For example, service provider  uses the service provider 's name as the domain for each username. Alternatively, service provider  utilizes \u201chcm.SP2.com\u201d as the domain name. In some instances a service provider may assign multiple NAIs to the same mobile device . For example, as shown in , Service Provider  and Service Provider  may assign multiple NAIs to the same mobile device . The format of the NAI may differ not only between the different service providers, but also between the various NAIs assigned by the same service provider. Also, as shown in , other service providers such as Service Provider  and Service Provider  may only assign a single NAI to each mobile device . The multiple NAIs may be distinguished by the MIP User Profile N, where N={0, 1, 2, 3, . . . }. Thus, while  depicts some service providers assigning two NAIs (i.e., N={0, 1}) additional user profiles may be assigned in some instances.","The data table may further specify the Mobile Node-Home Agent (MN-HA) Shared Secret, also referred to as a password. The MN-HA password may be used to authenticate the mobile device  at the Mobile IP Home Agent. Each service provider may assign a unique format to the username. For example, service provider  uses the first 16 digits of the Authentication Key (Akey), while service provider  uses an 8 character Psuedo ESN (pESN). As a further example, service provider  utilizes \u201chcm.SP2.com\u201d as the domain name. Similar to the NAI, service providers may assign multiple MN-HA passwords to the same mobile device , such as shown in  for Service Provider  and Service Provider . Also, as shown in , other service providers such as Service Provider  and Service Provider  may only assign a single MH-NA password to each mobile device .","The data table may further specify the Mobile Node-Authentication, Authorization, and Accounting (MN-AAA) Shared Secret (password) which authenticates the mobile device  to the billing server (not shown). Again, each service provider may use a different specific format. Additionally, each service provider may utilize different values for each entry. Similar to the MN-HA password and NAIs, service providers may elect to assign multiple MN-AAA passwords to each mobile device .","In addition, the data table may specify other parameters and settings such as the Simple IP Authentication, Authorization, and Accounting NAI (SIP AAA NAI), which is sometimes referred to as the Simple IP Username. The data table may further specify the Simple IP Authentication, Authorization, and Accounting Password (SIP AAA password) which is a Simple IP password. Other parameters may include the Simple Parameter Index (SPI), not shown. It is noted that not all types of parameters and settings are used by all service providers. For example, while service providers  and  utilize a parameter for MN-HA Shared Secret\u2014Slot , service providers  and  do not utilize such a parameter. For some service providers no value may be recorded in the indexed data table for such a non-utilized parameter. In other cases, a null value may be stored as a place holder for such a value.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 4","FIG. 3","FIG. 4","FIG. 4"],"b":"1"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 5","FIGS. 3 and 4","FIG. 5"]},"The parameters and settings listed in the indexed data tables shown in , , and  are intended to be illustrative only and provide examples of possible formats and values utilized and implemented by different service providers. One of skill in the art would appreciate that service providers may employ several other parameters and settings utilized in their various software builds which may be reflected in the indexed data table.","When a user elects to initiate communications on a mobile device , the user may select a service provider account to support the communication by launching a connection manager (e.g., , , , ) corresponding to the selected service provider account. In instances where the mobile device  is a cellular telephone, a service provider account is typically running at all times. However, in instances where the mobile device  is a wireless modem card within a notebook computer, a service provider account is typically not running unless communication capabilities are desired. In order to initiate communications, the user may launch a service provider's independent connection manager. Alternatively, the user may select a particular service provider from a choice of several service providers presented in a user interface display generated by a common connection manager. A similar menu may be provided on a cellular telephone to select a new service provider account which would be analogous to launching a connection manager on a notebook computer. By launching the connection manager (, , , ) corresponding to the desired service provider account, the connection manager (, , , ) communicates with the C-API , either directly or through a connection manager tracker , to call up each of the necessary subroutines contained in the DLL  necessary to complete the software build necessary for communications over the selected service provider network. In addition, the C-API  may access the DLL  to retrieve the necessary parameters stored in a non-volatile memory  and\/or File System  via multi-interface module . The necessary parameters are stored in an indexed data table. That data table may contain each of the assigned parameters for a selected service provider account that have been previously generated during an initial service provider account activation procedure.","Referring back to , in some instances a mobile device  may be loaded with a variety of connection mangers (, , ) as part of an original equipment manufacturer's (OEM) software package. These connection managers (, , ) may be individual connection managers loaded on the mobile device or may be possible selections on a common connection manager program . In such instances, it is likely that a user has not established a service provider account with any\/all of the service providers corresponding to each of the connection managers\/selections. Therefore, the mobile device  may be provisioned with the default parameters as prescribed by the selected service provider only. Consequently, when a user launches a connection manager for a service provider that does not have a service provider account associated for the mobile device , an error will occur since the necessary parameters of a valid subscription will not be stored in the indexed data table. Accordingly, each time a connection manager\/selection is launched, a test to determine whether an account has been activated for the selected service provider may be performed.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIGS. 3-5"],"b":["10","191","101","191","105","191","10","105","191","110","40","30","45","25","26"]},"If, however, the processor  determines that an account for the selected service provider has not been previously activated (i.e., decision =No), then the processor initiates the appropriate activation procedure in order to obtain all of the necessary software build parameters for the selected service provider, step . Once these parameter values have been obtained and stored to the indexed data table, an activation flag indicating that an account has been activated on the selected service provider may be optionally set, step .","When a mobile device  initially activates an account with a selected service provider, the type of activation procedure that is initiated will depend upon the selected service provider. Thus, the type of activation procedure required for each individual service provider may also be stored in the indexed data table. For example, some service providers may require that the mobile device  initiate an Over-the-Air Service Provisioning (OTASP) procedure, an Internet Over-the Air (IOTA) procedure, or an Open Mobile Alliance Device Management (OMADM) procedure.","In an OTASP procedure, the mobile device  may be directed to wirelessly call a specified number (e.g., *228). While the mobile device  may not have sufficient parameter data to conduct unlimited communications on a service provider's network, the mobile device  may be programmed by the OEM with sufficient parameter data to conduct limited communications to contact a selected service provider's activation server for initial activation purposes. Once connected to the service provider's activation server the mobile device  receives various parameter and settings from the service provider's activation server which are used to configure the appropriate software build on the mobile device . Some of the parameters and settings may include a mobile identification number (MIN), preferred roaming list (PRL), as well as mobile directory number (MDN) and mobile station identifiers (MSID) both of which may be referred to as the mobile device's phone number. Once the OTASP procedure is complete, the mobile device  may be required to initiate an authentication parameters generation procedure which authenticates the mobile device  to the service provider by generating usernames and\/or passwords. Similarly, in an IOTA procedure, the mobile device may receive parameters and setting such as a MIN and MSID. However, rather than performing a separate authentication process, the IOTA process also generates and assigns passwords and usernames to the mobile device . Once either activation process is complete, the parameters and settings received during the activation procedure may be stored in the indexed data table in a non-volatile memory .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 7"],"b":["10","125","130","10","100","102","125","130","125","130","125","130"],"i":["a","a","a","a","a","a "]},"Alternatively, if the necessary minimum software and provisioning data is not loaded onto the mobile device  by the OEM, the mobile device  may connect through specified telephone numbers or website URLs maintained by a service provider's activation server , via wired connections through a wired communication network  to initiate activation procedures. Once connected to the service provider's activation server , the mobile device  may be connected through a mobile switching center , to the service provider's provisioning server , . As part of an activation process, the mobile device's  unique serial number, (e.g., mobile equipment identifier (MEID) and international mobile equipment identifier (IMEI)), may be transmitted to the service provider's provisioning server , for association with an account with the selected service provider. In return the service provider provisioning server , may transmit various parameters and settings necessary to operate on the service provider network. Alternatively, the service provider provisioning system may communicate with an external server to obtain the parameters or vice-versa. Such parameters and settings may be stored in the indexed data table in the non-volatile memory . In addition, a DLL  containing necessary subroutines for the selected service provider's software build may be transmitted to the mobile device .","Once the mobile device  has received all of the necessary parameters, settings and DLL  from the service provider provisioning server , , a connection manager for the selected service provider may be launched in the mobile device's processor . In case of modules embedded in computers or add-on cards, the connection manager may be launched in the computer in which the module is embedded or to which the module is connected. As discussed above, the launched connection manager may point to the corresponding software build file in memory. The software build file may contain all of the necessary instructions and subroutines required to compile the completed software build. The software build file may recall the necessary subroutines found in the DLL  and parameters associated with the selected service provider found in the indexed data table which is stored in a non-volatile memory  to modify the behavior of the appropriate software build to conduct communications over the selected service provider's communications network.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 8","b":["10","10","61","62","63","10","191","101","191","131","10"]},"If the user responds to the inquiry in the negative (i.e., decision =No), then the processor  closes the launched connection manager (, , ) or deselects the connection manager from the common connection manager , step . Once the connection manager is closed or deselected, the processor  may await the next connection manager launch request or selection of a different service provider step .","If the user confirms an intention to switch service provider accounts (i.e., decision =Yes), the processor  determines if an account with the selected service provider has been previously activated, decision . In an embodiment, a flag may be set in memory if an account has been previously activated on a selected service provider. This flag may be separately recorded in an indexed data table of service provider software parameters. Other indicators beside a flag may be used to indicate whether an account with the selected service provider has been previously activated. For example, in an alternative embodiment the processor  may check the format of the mobile identification number (MIN) stored in the indexed data table of service provider software parameters. The MIN is a 10-digit number unique to each mobile device which a service provider uses to identify individual mobile devices. Typically, after an account is activated with a service provider the MINs format will be altered from its original manufacturer format of 000-000-WXYZ. If the original manufacturer format exists, then no previous account has been activated on the mobile device .","If an account with the selected service provider has not been previously activated (i.e., decision =No), then the processor  loads the software build for the un-activated selected service provider, step . Once the software build is loaded, the mobile device  may attempt activation on the selected but previously un-activated service provider network. If the activation was successful (i.e., decision =Yes), then a flag may be set indicating that an account with the selected service provider has been activated, step . After setting the flag indicating that an account with the selected service provider has been activated, a call may proceed and the processor  may await the next connection manager launch request or selection of a different service provider, step . If the activation in step  was not successful (i.e., decision =No), then the processor  may repeat step  (see also process flow diagram illustrated in ) in an attempt to successfully activate an account for the selected but previously un-activated service provider. In an alternative embodiment, the processor  may inform user of the failed activation attempt and inquire whether the user wishes to repeat the activation attempt, step . If the user elects to continue activation attempts (i.e., decision =Yes), then the processor repeats step  (see also process flow diagram illustrated in ) in an attempt to successfully activate an account for the selected but previously un-activated service provider. However, if the user elects to cancel the activation attempt (i.e., decision =No), then the processor  may await the next connection manager launch, or selection of a different service provider, step .","In an alternative embodiment where the processor  may check the format of the mobile identification number (MIN) stored in the indexed data table of service provider software parameters to determined whether an account has been previously activated (i.e., decision ), the MIN's format will have already been altered from the original manufacturer format during the software build load step . Accordingly, step  will not be necessary.","If the processor  determines that an account with the selected service provider has been previously activated (i.e., decision =Yes), then the processor  may load the selected service provider's software build, step . Once the software build is loaded, the processor  retrieves from non-volatile memory the various parameters and settings previously stored in the indexed data table of service provider accounts, step . In some instances it may be the case that while an account was previously activated on the mobile device  for the selected service provider, the activated service provider account may have lapsed or been abandoned. This may occur, for example, when trial subscriptions for service are offered or a user temporarily elects to no longer utilize the selected service provider to support calls. Accordingly, it may be necessary to confirm that an account is still active\/valid for the selected service provider.","In an embodiment, the processor  may request the user to confirm that a prior account on the selected service provider was previously active and that the user wishes to switch to this previously activated account, decision . If the user confirms that a prior account on the selected service provider was previously active and that the user wishes to switch to this previously activated account (i.e., decision =Yes), the processor  implements the selected service provider account to support its data calls and awaits the next connection manager launch request or selection of a different service provider, step .","In some instances a user may have previously activated an account with the selected service provider, but has either intentionally or unintentionally abandoned the previously activated service provider account. Thus, in the case of intentional abandonment, the user may indicate that a previously activated service provider account is no longer active (i.e., decision =No). Alternatively, in the case of unintentional abandonment, the user may simply not know whether an account on the selected service provider account is active. Therefore, if the user does not confirm a desire to switch to the previously activated account (i.e., decision =No), the processor  completes a process of loading a software build for a previously un-activated service provider. Since many service providers expect a mobile device  to be used with a single service provider, some service provider software builds expect the mobile device  to be set to its original factory default settings and parameter values. Therefore, the processor  may reset the mobile device  to its original factory default setting and parameter values, step . Once the mobile device  has been reset to the original factory default settings and parameter values, the processor  resets the flag used in decision  indicating previous activation with the selected service provider, step , so that the activation status for the selected service provider is cleared when the account active status is undetermined (i.e., an account with the selected service provider has been activated (decision =Yes), but the user has failed to confirm activation (decision =No)). Resetting the flag indicating that an account with the selected service provider has been previously activated will require the user to activate an account with the selected service provider the next time the service provider is selected. This is because the next time the processor reaches decision  the reset flag will create a No output. One of skill in the art may appreciate that the end user may have to contact customer service of the selected service provider for activation\/reactivation, if needed.","In an alternative embodiment where the processor  checks the format of the mobile identification number (MIN) stored in the indexed data table of service provider software parameters step  may be unnecessary as such embodiments do not utilize such a flag. In addition, since step  previously reset the mobile device to its original factory settings and defaults the MIN entry for the selected service provider stored in the indexed data table will reset back to its original manufacturer format of 000-000-WXYZ. Consequently, in the alternative embodiment the user will be required to activate an account with the selected service provider the next time the service provider is selected.","Once the software build is loaded and the factory default parameters are reset (step ) and the any necessary resetting of flags, deletion of data or resetting of MIN (step ), the processor  implements the selected service provider account to support its data calls and awaits the next connection manager launch request or selection of a different service provider, step .","Alternative embodiments for confirming whether an account for the selected service provider is currently active and capable of supporting calls are described in more detail below with respect to .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 9","FIG. 8","FIG. 8"],"b":["145","101","191","201","10","192","201","191"]},"Once the new software build has been located and retrieved, the download service is reset, step . In an embodiment, the download service reset process may be a Windows(g service restart. The download service may be stopped and restarted by an API call. The download service may read a configuration file. The configuration file may contain the path to the software build for a particular service provider, and other files needed by the mobile device  to operate on that service provider's network. The download service may read this configuration file on restart. Accordingly, the download service may be required to be reset\/restarted (step ) so that the new changes in the configuration file may take effect.","Next the necessary files may be written into or deleted from the extended file service (EFS), step . The necessary files may be stored in the multi-interface module  during initial production of the mobile device , incorporated into the software build package, incorporated in a connection manager tracker application, or incorporated into a common connection manager installation package. As the software build for each new service provider account is loaded, the EFS files of the previously selected service provider account are deleted or replaced with those of the newly selected service provider account. Once the necessary files are written into or deleted from the EFS, the mobile device  may be reset so that the new changes take effect, step . With the mobile device  reset, the activation process for the selected service provider is initiated so that the appropriate parameters and settings may be obtained to complete the implementation of the software build, step . One of skill in the art would appreciate that in some instances a service call to a technician or operator for the selected service provider may be required to initiate the activation process. Once the activation process is complete, the mobile device  is capable of supporting communication over the newly selected service provider's network.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 10","FIG. 8","FIG. 8","FIG. 9"],"b":["160","101","191","201","191","202","10","202","202","191","10","205","10","10","10","206"]},"In many instances, when asked, a user may incorrectly confirm the prior activation of the selected service provider account (i.e., decision =Yes). Put another way, many users may not accurately know the status of each possible service provider account previously activated on their mobile device . For example, a user may have knowingly or unknowingly activated a trial subscription with a particular service provider. In either instance, the user may not know that the trial subscription has expired, but the parameters in the mobile device  will have been altered to indicate prior activation with the selected service provider despite the absence of an active\/valid service provider account to support calls on the selected service provider's network. Consequently, when the mobile device  performs the process flow shown in , the mobile device  will attempt to load the software build for the previously activated service provider, but no call will be supported by the selected service provider's network because there is no active\/valid account to support the call. This may lead to an unpleasant user experience and frustration by the user to initiate or receive a call through the selected service provider network.","Although the use of an optional flag set and stored in memory to indicate whether an account with the selected service provider has been previously activated may be implemented, such flags may be unreliable to indicate whether an account with the service provider is still active\/valid. This is particularly the case where a previously activated account has not been explicitly abandoned or lapsed. Accordingly, other alternative embodiments may be necessary to confirm whether an account with the selected service provider has been activated and is still active\/valid.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 11","FIG. 11","FIG. 8"],"b":["170","260","10","261","262","691","262","263","155"]},"However, if the data call is deemed to have failed (i.e., decision =Yes), then the processor  may determines if the mobile device  is currently within range of the selected service provider's home system, decision . If the mobile device  is not currently within range of the selected service provider's home system (i.e., decision =No), the processor  may presume that the mobile device  is in a roaming state and may indicate the roaming condition to the user. Since many if not all service provider's do not support roaming data calls, the mobile device's  roaming condition may prevent the data call from being successful. Thus, explaining the reason for the failed call attempt. The user may have to either wait until the mobile device  is moved within range of the selected service provider's home system or select a different service provider to support the call. Once the roaming condition is indicated to the user, the processor  may move onto step  to await the next connection manager launch request or selection of a different service provider.","Assuming an active\/valid account on the selected service provider, the attempted call should be successful provided the mobile device  is within the range of the selected service provider's home system. Therefore, if the processor determines that the mobile device  is in range of the selected service provider's home system (i.e., decision =Yes), but the data call failed (i.e., decision =Yes), the processor  may increment the FTC counter, step , and determine if the FTC counter is equal to some predetermined value \u201cX\u201d, decision . The value of X is arbitrary and may be selected such that the number of attempts to make a data call does not exceed an unreasonable number. If the FTC counter does not equal X (i.e., decision =No), the processor  may attempt to make another data call, step .","However, if the FTC counter does equal X (i.e., decision =Yes), meaning the number of attempts equals the \u201cnot to exceed\u201d value then it is likely that the service provider account corresponding to the loaded software build is no longer active. Therefore, a new service provider account should be activated. Accordingly, when the FTC counter equals X (i.e., decision =Yes) then the factory default parameters may be reset as in step  of . Subsequently, the process flow shown in  (i.e., steps  and ) may be implemented to load and activate a software build for the selected service provider.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 12","FIG. 12","FIG. 11","FIG. 11","FIG. 12"],"b":["260","268","268","191","25","26","280"]},"In addition, the credential values\/settings (actual password) currently existing in the mobile device's non-volatile memory are stored in a temporary file created in EFS. By changing the credential values stored in non-volatile memory to the boot strap values for the selected service provider, the mobile device can be assured to have known working credential values stored in non-volatile memory that will allow the mobile device to complete a data call to at least an accounts server  (discussed in more detail below with reference to ). Once the accounts server  is contacted, information regarding all active accounts supporting the mobile device  may be determined.","While changing the credential values stored in non-volatile memory will allow a call to at least the accounts server , a routine will be required to repair the settings in the mobile device. In the embodiment process flow shown in , as part of the process to change the mobile device's credentials, the processor  may create a copy of all the existing credentials. Once the processor  has created a copy of all the existing credentials, the processor  may direct the mobile device  to connect to the accounts server  (see ), step . The accounts server  may be in connection with each service provider's Operator Home Location Register\/Authentication, Authorization, and Accounting (HLRWAAA) server (not shown). By connecting to the selected service provider's Operator HLR\/AAA server, the accounts server  may determine if an account on the selected service provider is active\/valid for the mobile device  in question, decision . If an account with the selected service provider is active (i.e., decision =Yes), then the processor  may check the previously existing credentials which have been copied and stored in a temporary file in the EFS with the credential values stored for the selected service provider account in the selected service provider's HLR\/AAA to determine a match, decision . Any distinctions between the credentials stored in the temporary file and those stored for the selected service provider account in the selected service provider's HLRWAAA may be the cause for the failed data call attempt. If the credentials stored in the temporary file in the EFS match those stored in the selected service provider's HLRWAAA server (i.e., decision =Yes), then it is likely that another some temporary external interference or cause exists for the failed data call attempt. Accordingly, the selected service provider account will likely be able to support a data call after some passage of time or movement of the mobile device. Consequently, the processor may move to step  to await the next connection manager launch request or selection of a different service provider. If however, a discrepancy between the credentials stored in the temporary file in the EFS and those stored in the selected service provider's HLR\/AAA server exists (i.e., decision =No), then the credentials stored in the selected service provider's HLR\/AAA server may be written into the non-volatile memory of the mobile device , step . After the credentials stored in the mobile device's non-volatile memory are updated to those credential values stored in the selected service provider's HLR\/AAA server, the processor  may return to step  to await the next connection manager launch request or selection of a different service provider.","In other alternative embodiments (not shown), other repair routines may implemented which involve network initiated sessions for known activation methods such as OTAPA or Network Initiated IOTA to correct the mobile device credentials. Such alternative embodiment repair routines may also involve asking the end-user to perform known end-user initiated activation methods to repair issues with the mobile device. One of skill in the art would appreciate that various provisions in OTASP, OTAPA, IOTA and OMADM allow specific parameters to be written to the mobile device which may repair the mobile device and subsequently allow proper usage.","However, if an account with the selected service provider has not been previously activated (i.e., decision =No), then it is likely that the service provider account corresponding to the loaded software build is no longer active. Therefore, a new service provider account should be activated. Accordingly, if the selected service provider account is not active (i.e., decision =No) then the factory default parameters may be reset as in step  of . Subsequently, the process flow shown in  (i.e., steps  and ) may be implemented to load and activate a software build for the selected service provider","The indexed data table of service provider accounts may be stored in a non-volatile memory  contained within the communication module  for retrieval by the processor . In an alternative embodiment, the contents of the non-volatile memory may be remotely located.  illustrates an embodiment system wherein the indexed data table of service provider accounts may be stored in a remote data server. As described above with reference to , a mobile device  may communicate with a plurality of service providers ,  to receive the necessary parameters, settings and provisioning data via communication networks , . Alternatively, if the necessary minimum software and provisioning data is not loaded onto the mobile device  by the OEM, the mobile device  may connect through specified telephone numbers or website URLs maintained by a service provider's home address server ,  via wired connections through a wired communication network  to initiate activation procedures.","Referring to , the mobile device  may transmit the received data to an account server  for storage in an account database  in communication with an account server  or a non-volatile memory unit within the account server  via the communication networks ,  or Internet . Each of the various parameters, settings and provisioning data received from the service provider (, ) may be stored for each individual mobile device  in communication with the account server . For example, the account database  or non-volatile memory unit within the account server  may store an account data table which may be an indexed accounts data table for all mobile devices serviced by the account server . Each individual mobile device may be identified in the indexed accounts data table by the mobile device's phone number, unique serial number (such as mobile equipment identifier (MEID) or international mobile equipment identifier (IMEI)) or some other designation such as a generated account name, or user customized account name. For each mobile device entry in the indexed accounts data table, an indexed data table record such as illustrated in  may be stored. In this manner, the account server  maintains a record of the various parameters, settings and provisioning data that a particular mobile device  serviced by the account server  has previously generated. By storing the parameters, settings and provisioning data in a remote database, the local memory requirements of the mobile device  may be dramatically reduced. In addition, the remote storage of the parameter, setting and provisioning data may provide a degree of security to prevent unfettered access to a user's parameters, setting, and provisioning data in the event the mobile device  is stolen or inappropriately acquired. This is also useful for cases when a user voluntarily replaces the mobile device . The transfer of service provider accounts data to the new mobile device  is easier to accomplish with remotely stored credentials.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 14","b":["190","180","190","180","190","104","100","102","10","125","130","125","130","10","125","130","10","10","180","180","10","180","10","10","180","10","10","10"]},"As previously discussed, it may be important for a mobile device  to track which connection manager is currently operating and to insure that a subsequent connection manger is not launched until the currently operating connection manager is closed. This is because the launching of a subsequent connection manager while a current connection manager is currently operating may cause fatal collisions and a shutdown of the mobile device processor . Accordingly, a connection manager tracker  may be included to provide the necessary process to insure that two connection managers are not simultaneously launched on the same processor . Thus, each time a connection manager is launched, a flag indicating that a connection manager is active may be set in memory. In addition, the name of the currently launched connection manager may be stored in memory or a buffer. Each time the processor  receives a request to launch a connection manager, the processor  may first check the connection manager active flag to determine if it is set. If it is not set, then no connection manager is currently active. Therefore, the new connection manager may be launched without incident. However, if the connection manager active flag is set, the processor  may check to see which connection manager is currently active. If the currently active connection manager differs from the connection manager selected by the user for launch, then the processor  must deactivate the currently active connection manager prior to launching the selected connection manager. Such a connection manager tracker process may be used in embodiments where an independent connection manager exists for each service provider account or in embodiments where a common connection manager  allows a user to select a particular service provider account from a plurality of possible selections.","As previously discussed, at any time a processor  may receive a request from a user to launch a connection manager supporting a particular service provider account. For example, if the mobile device  is a cellular telephone, where communications are typically always active, the request to launch a connection manager would be in response to a user seeking to change the service provider account currently supporting communications. In other instances, such as when the mobile device  is a notebook computer with a wireless modem, communications capabilities are not always activated. Thus, the launching of a connection manager may indicate that the user wishes to enable wireless communications capability of the notebook computer. To prevent conflicting instructions to the software defined radio based chipset module , a currently enabled connection manager should be deactivated before a new connection manager is activated. If two different connection managers are concurrently activated, the possible conflicting software builds (e.g., a GSM software build and a CDMA software build) may cause errors in the software defined radio based chipset module . Accordingly, a process to track and control which connection manager is currently activated may be desired.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 15","b":["10","10","10","191","220","191","225","191","191","225","191","230","191","155"]},"If, however, the processor  determines that no connection manager is currently running, the processor  enters a value for the \u201cCM in use\u201d parameter as the name of the service provider of the selected connection manager request, step . The processor  also changes the value of the \u201cBuild for current CM\u201d parameter in the parameter table to the name of the service provider of the selected connection manager request, step . The processor  may determine if the connection manager currently selected for launch is the same as or different from the last connection manager launched, decision . The processor  may compare the values of the parameters of the \u201cBuild for current CM\u201d and \u201cLast Build Used\u201d stored in the parameter table. In instances where the mobile device  is being used for the first time to enable communication capabilities, the value of the parameter \u201cLast Build Used\u201d will be the initialized value of \u201cnone.\u201d As a result, the comparison of the \u201cBuild for current CM\u201d parameter value will not match the value of the \u201cLast Build Used\u201d parameter (i.e., decision =No). In addition, if the user has selected to launch a connection manager different from the connection manager launched immediately prior to the instant connection manager, the comparison of the \u201cBuild for Current CM\u201d and \u201cLast Build Used\u201d parameter will not result in a match (i.e., decision =No). If the comparison of the \u201cBuild for Current CM\u201d and \u201cLast Build Used\u201d parameters does not result in a match (i.e., decision =No), the processor may implement the process flow to re-program the mobile device  described above with reference to , step . Once the mobile device  has been reprogrammed with the software build for the selected service provider account, the processor  may set the value of the \u201cLast Build Used\u201d parameter to indicate that the last build used is the software build of the currently selected service provider, step, . Once the new value of the \u201cLast Build Used\u201d parameter is stored in memory, the processor  may await the next connection manager launch request or selection of a different service provider, step .","If the comparison of the \u201cBuild for Current CM\u201d and \u201cLast Build Used\u201d parameters results in a match (i.e., decision =Yes), then the processor  does not have to re-program the mobile device  with a new software build and the previously loaded software build may continue to support communications. Consequently, the processor  may set the value of the \u201cLast Build Used\u201d parameter to indicate that the last build used is the software build of the currently selected service provider, step, . Once the new value of the \u201cLast Build Used\u201d parameter is stored in memory, the processor  may await the next connection manager launch request or selection of a different service provider, step . In an optional embodiment, the processor  may simply skip step  and await the next connection manager launch request, step or selection of a different service provider.","When a user elects to disable the communication capabilities of the mobile device , the user may close any currently running connection manager. In such instances, the processor  will close the currently running connection manager and set the value of \u201cCM in Use\u201d parameter to \u201cnone.\u201d","The embodiments described above may also be implemented on any of a variety of server systems such as illustrated in . Such a server  typically includes a processor  coupled to volatile memory  and a large capacity nonvolatile memory, such as a disk drive . The processor  is coupled to one or more network interface circuits, such as high speed modems  coupled to a network  such as the Internet. The computer  may also include a portable media reader, such as a compact disc (CD) drive  coupled to the processor .","Those of skill in the art would appreciate that the various illustrative logical blocks, modules, circuits, and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware or a combinations of software and hardware. To clearly illustrate this interchangeability of hardware and software, various illustrative components, blocks, modules, circuits, and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.","The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware, in a software module executed by a processor, or in a combination of the two. A software module may reside in processor readable memory which may be any of RAM memory, flash memory, ROM memory, EPROM memory, EEPROM memory, registers, hard disk, a removable disk, a CD-ROM, or any other form of storage medium known in the art. An exemplary storage medium is coupled to a processor such that the processor can read information from, and write information to, the storage medium. In the alternative, the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal or mobile device. In the alternative, the processor and the storage medium may reside as discrete components in a user terminal or mobile device. Additionally, in some aspects, the steps and\/or actions of a method or algorithm may reside as one or any combination or set of codes and\/or instructions on a machine readable medium and\/or computer readable medium, which may be incorporated into a computer program product.","The foregoing description of the various embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the invention. Thus, the present invention is not intended to be limited to the embodiments shown herein, and instead the claims should be accorded the widest scope consistent with the principles and novel features disclosed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated herein and constitute part of this specification, illustrate exemplary embodiments of the invention, and, together with the general description given above and the detailed description given below, serve to explain features of the invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
