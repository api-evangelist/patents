---
title: Validation pipeline
abstract: Techniques for configuring validation rules in a client-server architecture, and for enforcing such validation rules are provided. A developer is enabled to configure a display screen for an application to enable a user at a client to input data. The developer is further enabled to input a validation rule that is configured to be applied to validate the data at the client and/or at a server. The validation rule is integrated into code of the application. During execution of the application, a client-side rules engine may be present to evaluate the validation rule at the client, and a server-side rules engine may be present to evaluate the validation rule at the server. The client-side rules engine and server-side rules engine may be configured to evaluate validation rules in an asynchronous manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09026580&OS=09026580&RS=09026580
owner: Microsoft Technology Licensing, LLC
number: 09026580
owner_city: Redmond
owner_country: US
publication_date: 20091120
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Embodiments","III. Further Example Embodiments","IV. Conclusion"],"p":["Business applications are being developed in increasingly greater numbers to increase business productivity. One example type of business application is a line of business (LOB) application. A LOB application is a resource configured to service one or more particular business needs. For example, a LOB system may perform accounting, order processing, supply chain management, resource planning, database management and\/or further enterprise-related functions.","Many business applications, including LOB applications, are implemented in client-server computer systems. In such a system, users may interact with the business application at a client computer, and the business application may store related data at a remote database located at the server. A business application may be implemented in a multi-tier (or \u201cn-tier\u201d) architecture, where the presentation, application processing, and data management processes are logically separated across the client-server computer system.","Many business applications implement business rules (or \u201cvalidation rules\u201d) that ensure the integrity of data. Enforcing business rules throughout client-server computer systems is a complex issue. Developers of business applications that operate in multi-tier architectures frequently have difficulties in configuring business rules throughout the architecture such that data integrity and data security are enforced.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Techniques for configuring validation rules in a client-server architecture, and for enforcing such validation rules are provided. A developer associates validation rules with data input fields of an application. The validation rules are configured to evaluate data input by users that interact with the application. The validation rules are integrated into the application to be performed at desired points of application execution. During execution of the application, a client-side rules engine may be present to evaluate validation rules at the client, and a server-side rules engine may be present to evaluate validation rules at the server. The client-side rules engine and server-side rules engine may be configured to evaluate validation rules in an asynchronous manner.","In one example implementation, a method in a development tool for client-server applications is provided. A developer is enabled to develop an application. The developer is enabled to configure a display screen for the application to have a user interface element that enables a user at a client to input data to be stored in a database accessible at a server. The developer is enabled to input a rule configured to be applied to validate the data at the client and at the server. The rule is integrated into code of the application.","In another implementation, a method for validation of data in a client-server environment is provided. A user is enabled to execute an application at a client. A display screen of the application is displayed at the client that includes a user interface element capable of receiving data from the user. A first validation of data received by the user interface element is performed at the client according to a client-side rule. A validation error is displayed in the display screen if the data received from the user does not validate according to the client-side rule. The user is enabled to interact with the display screen to attempt to save the data if the data received from the user validates according to the client-side rule. The data is transmitted from the client to the server if the user interacts with the display screen to attempt to save the data. A second validation of the data is performed at the server according to a server-side rule that corresponds to the client-side rule. A validation error is displayed in the display screen if the data received from the user does not validate according to the server-side rule. The data is persisted into a database accessible at the server if the data received from the user does validate according to the server-side rule.","Note that in further implementations, a validation of data input by the user to the display screen may be performed solely by a client-side rule, or solely by a server-side rule, as configured by the developer. Validations of data input by the user may be performed asynchronously, in some implementations.","In still another implementation, a system for validation of data is provided. The system includes an application, a first rules engine, and a second rules engine. The application is configured to execute on a client. The application is configured to display a display screen at the client that includes a user interface element capable of receiving data from the user. The first rules engine is configured to execute on the client, and is configured to perform a first validation at the client of data received by the user interface element according to a client-side rule. The second rules engine is configured to execute at a server. The application is configured to display a validation error in the display screen if the first rules engine indicates that the data does not validate according to the client-side rule. The application is configured to enable the user to attempt to save the data if the data received from the user validates according to the client-side rule. The data is transmitted from the client to the server if the user attempts to save the data. The second rules engine is configured to perform a second validation at the server of the data according to a server-side rule that corresponds to the client-side rule. The application is configured to display a validation error in the display screen if the data does not validate according to the server-side rule. The data is persisted into a database accessible at the server if the data does validate according to the server-side rule.","Computer systems and computer program products (stored on a computer readable medium) are also described herein that are capable of performing and\/or enabling the methods described above and elsewhere herein, including configuring validation rules in a client-server architecture, enforcing such validation rules, and for implementing further embodiments as described herein.","Further features and advantages of the invention, as well as the structure and operation of various embodiments of the invention, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The present specification discloses one or more embodiments that incorporate the features of the invention. The disclosed embodiment(s) merely exemplify the invention. The scope of the invention is not limited to the disclosed embodiment(s). The invention is defined by the claims appended hereto.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to implement such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Embodiments are provided herein for configuring business rules in a client-server architecture, and for enforcing such business rules. Business applications, such as line of business (LOB) applications, may perform many types of tasks, including accounting, order processing, supply chain management, resource planning, database management and\/or further enterprise-related functions. Such business applications need to enforce business rules to ensure the integrity of data that is input by users at client devices. Embodiments described herein enable business rules to be configured and enforced in various business application implementations, including multi-tier architecture (\u201cn-tier architecture) implementations.","For example, according to embodiments, business rules are enabled to be enforced on the client and on the server. In an embodiment, the business rules are analyzed to determine whether they are applicable to be enforced on the client(s) and\/or on the server. The business rules are allocated to the client(s) and server for enforcement according to this determination. Furthermore, business rules allocated to the client may be positioned in the business application at one or more locations of the application code to be enforced at desired points of application execution. Such allocations may be performed for the application developer, rather than the developer having to make such allocations.","In conventional systems, when business rules are in place, execution of such business rules tends to follow a synchronous mode, where data that is input by a user at a client triggers validation according to the business rules at that point in time. As such, the user interface that receives the input data may become unresponsive to the user while the business rules are being evaluated. In embodiments, validation rules are enabled to be executed in an asynchronous manner so that the user interface can be responsive while validation rules are being evaluated. For example, a rules engine may be provided at the client and\/or at the server to perform asynchronous evaluation of validation rules. In further embodiments, alternatively to synchronous\/asynchronous modes, one or more policies for execution of validation rules may be configured by an application developer. For example, a developer may configure a policy to enable validation rules to be executed when the application enters an idle state, to execute validation rules on added entities after a save is performed, and\/or in any other desired manner.","As described above, embodiments may be implemented in a client-server computing environment. For example,  shows a block diagram of a client-server computer system . As shown in , system  includes a plurality of client computer systems -, a network , and a server . Client computer systems -communicate with server  through network . Network  may be a LAN (local area network), a WAN (wide area network), or a combination of networks, such as the Internet. Any number of one or more of client computer systems -may be present, including numbers in the tens, hundreds, etc. Examples of client computer systems -include desktop computers (e.g., personal computers), mobile computing devices (e.g., mobile computers such as a personal digital assistant (PDA), a laptop computer, a notebook computer, etc.), mobile phones (e.g., smart phones, etc.) and further computing device types.","Each client computer system  and server  may communicate through network  according to a corresponding communication link. For example, as shown in , client computer systems -are communicatively coupled with network  through corresponding communication links -, and server  is communicatively coupled with network  through a communication link . Communication links -and  may include any type or combination of communication links, including wired and\/or wireless links, such as IEEE 802.11 wireless LAN (WLAN) wireless links, cellular network links, wireless personal area network (PAN) links (e.g., Bluetooth\u2122 links), Worldwide Interoperability for Microwave Access (Wi-MAX) links, Ethernet links, USB links, etc.","Server  may be any type of computer system capable of being configured to function as a server, as described elsewhere herein or otherwise known. Server  may be configured to enable client computer systems -to access data associated with one or more applications. Client computer systems -may interface with server  in any manner. For example, in one embodiment, server  may provide a web service or other API (application programming interface) for machine-to machine interaction with client computer systems -. In a Web service embodiment, client computer systems -may interact with the Web service at server  using SOAP messages, typically conveyed using HTTP with an XML serialization in conjunction with other Web-related standards.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["100","206","106","102","202","206","106","206","208","208"],"i":"a "},"Application  may be any type of business application, and may be capable of storing new data, updating existing data, and\/or deleting data maintained by database . For instance, a user of application  may enter data into a form provided by a user interface at client computer system . The data may be any type of data, such as order data (e.g., where application  is an order processing application), etc. Application  may optionally process the entered data, and client computer transmits the entered data as input data . Input data  is transmitted through network  to server . Server  may optionally include server-side application logic  associated with application  that processes input data . Server  provides input data  to database , which stores input data  in storage .","As described above, it may be desired for applications to enforce rules that ensure data integrity, including the integrity of data that is input by users, such as input data . Embodiments are described herein for configuring business rules in a client-server architecture, such as shown in , and for enforcing such business rules. For instance,  shows a block diagram of a client-server computer system , according to an example embodiment. Client-server computer system  is generally similar to client-server computer system  of , with the addition of a validation pipeline . Validation pipeline  enables the validation of data in system  according to developer-generated rules, including validation of data at client computer systems -and at server .","In an embodiment, validation pipeline  enables validation rules to be positioned in various locations in the client-server environment for specific scenarios and requirements. For instance, in a multi-tier architecture embodiment, validation pipeline  may define where in the logical tier that validation rules may be executed, such as the client, the server, or both the client and server, as well as enabling validation rules to be associated with various artifacts, such as entity fields, entities, and display screens. Validation pipeline  enables validation rules to be executed asynchronously, including being executed outside of the process of receiving data input from the end user.","Example embodiments for validation pipeline  are described in the following subsections. The next subsection describes example embodiments for configuring business rules in a client-server architecture, followed by a subsection describing example embodiments for enforcing such business rules in a client-server architecture.","A. Example Embodiments for Configuring a Validation Pipeline","Validation pipelines may be configured in client-server architectures in various ways to enable the validation of data according to rules, in embodiments. For instance,  shows a flowchart  providing a process for configuring rules in a client-server architecture, according to an example embodiment. For illustrative purposes, flowchart  is described with reference to .  shows a block diagram of a system  for configuring validation rules, according to an example embodiment. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  and system  are described as follows.","Flowchart  begins with step . In step , a developer is enabled to develop an application. For example, as shown in , system includes an application development tool . Application development tool  is configured to enable a developer  (e.g., a business application designer, a software developer, a computer programmer, etc.) to develop an application, such application  shown in . Application development tool  may be configured to enable development of one or more business application aspects, including user interface (UI) development, application functionality, etc.","Application development tool  may be any suitable application development tool, commercially available or proprietary, in which aspects of embodiments described herein may be implemented. Examples of application development tool  include application development tools published by Microsoft Corporation of Redmond, Wash. (e.g., Microsoft Visual Studio\u00ae, Microsoft Silverlight\u2122, etc.), application development tools published by Adobe Systems Inc. of San Jose, Calif. (e.g., Adobe Integrated Runtime (AIR)), Ruby on Rails (developed by the Rails Core Team), and further types of application development tools.","In step , the developer is enabled to configure at least one display screen for the application to have a user interface element that enables a user at a client to input data to be stored in a database accessible at a server. For example, as shown in , application development tool  may include a user interface (UI) configuration module , a rule configuration module , and a rule placement module . UI configuration module  may be configured to enable developer  to configure display screens for an application in development. For instance, UI configuration module  may enable developer  to generate one or more forms that enable a user to input data to the application. The input data may be intended to be stored in database  () by the application, when executing\/","UI configuration module  may enable developer  to generate display screens for receiving any type or form of data, including data structures such as objects, classes, etc. For example,  shows a block diagram of an entity , which is an example of data that may be received, and that may include one or more properties. Entity  has an entity name , such as \u201cEmployee\u201d (e.g., when the entity is used to represent employee data) or other name, which may be descriptive of a structure of the included data. As shown in , entity  has a structure defined by a set of properties -. Entity  may include one or more properties . As shown in , properties -are each expressed as a name\/value pair, each name\/value pair including a corresponding property name  and a data value . Data value  may include a value and an associated type (e.g., integer, string, date, etc.)). For example, property includes a property name and a data value , and property includes a property name and a data value . Each property name  has a value that is a name for the corresponding property , and the corresponding data value  is a data value for the property  in entity . For instance, in an example where entity name  for entity  is \u201cemployee,\u201d property name may be \u201cname,\u201d and data value may be \u201cTom Smith,\u201d property name may be \u201cbirth date,\u201d and data value may be \u201c1976-08-27,\u201d and a property name may be \u201coffice number,\u201d and data value may be \u201cB1078.\u201d","UI configuration module  may enable developer  to generate display screens for receiving any type or form of data, including entity . For instance,  shows a display screen  in the process of development by developer  interacting with UI configuration module  of tool  in , according to an example embodiment. A developer may configure user interface elements (e.g., \u201ccontrols\u201d) for receiving data to be present in display screen . As shown in , the developer has configured a first entity region for receiving data corresponding to a first entity, and a second entity region for receiving data corresponding to a second entity. Each entity region  is configured to enable a user to input property data for the corresponding entity. First entity region includes first and second entity field regions and for receiving associated property data corresponding to the first entity. In an embodiment, UI configuration module  may enable the developer to position entity regions  and entity field regions  in display screen , as desired.","Display screen  may be configured by the developer to include any number of entity regions  corresponding to entities, and each region  may include any number of entity field regions  for receiving data corresponding to entity fields. Entity regions  may be arranged in display screen  in any manner, and corresponding entity field regions  may be arranged therein in any manner. Each entity region  may be configured to include an entity label , which identifies the particular entity to a user. For example, entity region may be configured by the developer to enable users to enter employee data, and thus, in such an example, entity label  may be the text \u201cEmployee.\u201d","Entity field regions  may be configured to include any type of user interface element or control that enables data to be entered by a user, such as text entry boxes, etc. For example, as shown in , each entity field region  includes a field label  and a text entry box . Field label  identifies the particular entity field. For example, when entity region is configured by the developer to receive employee data, field label may be the text \u201cName,\u201d (so that a user knows to enter employee name data into text entry box ) and field label may be the text \u201cBirth date\u201d (so that the user know to enter a birth date for the employee in text entry box ).","Entity regions  and entity field regions  may be configured to enable new data to be provided to database , existing data to be updated in database , and\/or existing data to be deleted from database . When the developer has completed configuring display screen  as desired, the developer may select a save button  (\u201cSubmit\u201d) to save the configuration of display screen , or may select a cancel button  (to not save any changes to display screen ).","Referring back to , in step , the developer is enabled to input a rule configured to be applied to validate the data at the client and at the server. For example, as shown in , rule configuration module  may enable developer  to configure validation rules with regard to the application in development. Rule configuration module  may enable developer  to generate one or more rules for each entity field and\/or entity of a display screen, as well as for the display screen itself. For instance, rule configuration module  may generate a rule configuration interface that enables users to input validation rules. Rule configuration module  may generate business logic based on the input validation rules that may be executed to perform validations according to the input validation rules.","As described above, a developer is enabled to configure display screen  to include interfaces\/controls for receiving data (by UI configuration module  of ) in the form of entities and entity fields. Furthermore, for each entity and entity field, the developer may be enabled to configure associated validation rules by rule configuration module . Rule configuration module  may be configured to enable the rules to be input by the developer in various ways. For instance, as shown in , user interface elements may be provided that the developer can select if the developer desires to input validation rules. For instance, for each entity region  that is input into display screen  by the developer, a corresponding user interface element  may be provided. For each entity field region  input into display screen  by the developer, a corresponding user interface element  may be provided. Furthermore, a user interface element  corresponding to display screen  may also be provided. User interface elements  may be interacted with by the developer to invoke a rule configuration interface that enables a corresponding rule to be input associated with the respective entity region  (an entity-level rule). User interface elements  may be interacted with the developer to invoke the rule configuration interface that enables the developer to input a rule associated with the respective entity field region  (an entity field-level rule). User interface element  may be interacted with by the developer to invoke the rule configuration interface to enable a rule to be input that is associated with display screen  (a screen-level rule).","For example, as shown in , entity region has a corresponding user interface element , entity field has a corresponding user interface element , entity field has a corresponding user interface element , and entity region has a corresponding user interface element . User interface elements , , and  are shown in  as buttons (e.g., that may be selected using a pointing device, keystrokes, etc.), but in other embodiments may have other forms. User interface elements , , and  may be selected to invoke the rule configuration interface for the corresponding entity, entity field, or display screen. In another embodiment, rather than user interface elements , , and\/or  being present, a developer may move a pointing device over an entity region , entity field region , or a region of display screen , and may cause a menu to appear (e.g., by clicking using the pointing device) that has a \u201cconfigure rule\u201d selection, or similar selection, that may be selected to invoke a rule configuration interface to enable a rule to be entered by the developer. In further embodiments, a rule configuration interface may be invoked for an entity, an entity field, and a display screen in other ways.","For example,  shows a block diagram of a user interface  (e.g., a display screen) that includes a rule configuration interface , according to an example embodiment. Rule configuration interface  may be invoked to configure a validation rule  for an entity, a validation rule  for an entity field, and\/or a validation rule  for a display screen. Rule configuration interface  may include any combination of user interface elements or controls, including text entry boxes, check boxes, radio buttons, drop-down lists, etc., that enable a validation rule  to be entered\/configured. Rule configuration interface  may enable configuration of validation rules in any manner, including enabling rules to be configured to validate data parameters such as length, range, various types of information, type, etc. Standard, predetermined \u201cvalidators\u201d may be provided, and\/or developers may be enabled generate customized validation configurations.","Validation rules , , and  of any type may be configured using rule configuration interface . For instance, with regard to an entity field (e.g., an entity field region ), validation rule  may be configured to evaluate the correctness or acceptability of the data input into the entity field. Examples of attributes of the data input that may be evaluated by validation rule  include data type, length, range, format, etc. For instance, in one example, entity field region may be configured by a developer to receive birth date data. Validation rule  may be configured to verify that a birth date input to entity field region corresponds an acceptable age range (e.g., an age that is greater than or equal to 21 years old).","With regard to an entity (e.g., an entity region ), validation rule  may be configured to ensure that an entity instance is in the valid state. For example, validation rule  may be configured to as a cross-field validation rule to ensure that data entered into a first entity field is correct relative to data entered into a second entity field of an entity. Furthermore, validation rule  may be configured as a cross-entity validation rule that accesses related entities and evaluates data across the related entities. For instance, in a cross-field validation rule example with respect to entity region , entity field region may be configured to receive phone number data, and entity field region may be configured to receive office number data. Validation rule  may be configured to verify that a phone number input to entity field region corresponds to an office number input to entity field region ","With regard to a display screen (e.g., display screen ), validation rule  may be configured to perform screen level validation. For instance, a display screen may have access to bound entities as well as any other screen level members (e.g., screen text, etc.). Validation rule  may be configured to evaluate data across screen level members to ensure that the display screen as a whole is in a valid state, and that a save operation (e.g., selecting save button  in ) from the display screen can be executed.","As mentioned above, rule configuration module  converts each of the rules input by developer  (e.g., into rule configuration interface ) into business logic that may be executed to enforce the rules on entered data.","Referring back to , in step , the rule is integrated into code of the application. For example, as shown in , rule placement module  may be configured to integrate validation rules into an application. For example, as shown in , application development tool  generates an application . Application  may include application functionality configured by developer  using application development tool , including any display screens configured by developer . Furthermore, as shown in , application  may include client-side business logic . Client-side business logic  is generated by rule configuration module  to implement client-side rules . Client-side rules  includes one or more validation rules input by developer  (in step ) that are determined by rule placement module  to be implemented by a client in a client-server implementation. As shown in , application development tool  additionally generates server-side business logic . Server-side business logic  is generated by rule configuration module  to implement server-side rules . Server-side rules  includes one or more validation rules input by developer  (in step ) that are determined by rule placement module  to be implemented by the server in a client-server implementation.","Note that client-side business logic  and server-side business logic  may be implemented in any manner, including in the form of computer code in any programming language. Examples of programming languages for client-side business logic  and server-side business logic  include XML, C++, Borland\u00ae Delphi\u00ae, Java, JavaScript, Python, any Microsoft\u00ae.NET\u2122 programming language, etc.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 9","FIG. 9","FIG. 9","FIG. 5"],"b":["510","510","906","908","510","902","902","508","904","802","906","902","904","906","906"]},"Thus, in some embodiments, business logic for a particular validation rule may be designated to be executed on the client-side or on the server-side, but not both. In another embodiment, it may be desired for each validation rule designated for execution on the client-side to also be executed on the server-side. For instance, for purposes of security, it may be desired that all validation rules be executed on the server-side, including validation rules designated for execution on the client-side, to protect the database at the server from data accesses from unknown parties. Thus, in an embodiment, each validation rule designated for execution on the client-side is also designated for execution on the server-side. In such a case, data entered at a client may be validated first at the client, and again at the server.","Rule placement module  generates client-side business logic , which includes client-side rules , to include portions of business logic  corresponding rules  designated to be executed on the client-side. Rule placement module  generates server-side business logic , which includes server-side rules , to include portions of business logic  corresponding rules  designated to be executed on the server-side.","Rule inserter  is configured to insert client-side business logic  in application code  corresponding to application  (). Rule inserter  inserts business logic corresponding to each validation rule of client-side rules  into a corresponding position in application code  such that the validation rule is executed at an appropriate time. As such, the developer that input the validation rules (e.g., developer  in ) does not need to determine where to insert the validation rules in application code , because rule inserter  automatically inserts the validation rules (in the form of business logic) into appropriate positions in application code .","For example, in an embodiment, rule inserter  may perform flowchart  shown in . In step , a position of a plurality of predetermined positions of the code of the application is selected. A plurality of positions in application code  may be predetermined as being suitable for executing client side rules  (in the form of client-side business logic ). Examples of such positions in application code  include a position subsequent to code for receiving input data in an entity field control, a position subsequent to code for receiving all data in all fields for an entity, a position subsequent to a user attempting to save (e.g., selecting save button ) a display screen, a position after or before a display screen is rendered, and\/or further positions in application code . Rule inserter  may be configured to select a position from these predetermined positions in application code , based on the particular validation rule.","For example, a validation rule may be associated with a particular entity field that is not dependent on any other entity fields or entities. In such a case, rule inserter  may select a code position in application code  that is subsequent to code for receiving data in the entity field to insert the associated business logic. Alternatively, a validation rule may be associated with an entity having multiple entity fields. In such a case, rule inserter  may select a code position in application code  that is subsequent to code that determines that data has been received in each entity field of the entity to insert the associated business logic.","In step , the client-side business logic is inserted into the selected predetermined position of the code of the application. In an embodiment, rule inserter  may insert the client-side business logic in the position in application code  selected in step  for the particular validation rule. If multiple validation rules are present, business logic for each validation rule may be inserted into a corresponding selected position in application code .","Thus, as shown in , application development tool  generates an application  that has client-side business logic  (that implements client-side rules ) inserted therein, and generates server-side business logic  that implements server-side rules . Application  may be executed on a client by a user (e.g., client computer system of ), and server-side business logic  may be implemented on the corresponding server (e.g., server ) to validate data in a validation pipeline.","B. Example Embodiments for Enforcing Validation Rules in a Client-Server Architecture","This subsection describes embodiments for enforcing validation rules in a client-server architecture, such as client-server computer system  shown in . For instance,  shows a flowchart  providing enforcing rules in a client-server architecture, according to an example embodiment. For illustrative purposes, flowchart  is described with reference to .  shows a block diagram of a client-server computer system , according to an example embodiment. As shown in , system  includes a client computer system , network , server , and database . Client computer system  includes application  and a client-side rules engine . Server  includes server-side business logic  and a server-side rules engine . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","Flowchart  begins with step . In step , a user is enabled to execute an application at a client. For example, as shown in , application  may be invoked by a user  and executed at client computer system . Application  may be executed as a desktop application, may be executed in a web browser, or may be executed at client computer system  in any other manner. Application  may be transmitted to client computer system  upon execution, or may have been previously installed. Client-side rules engine  may be provided to client computer system  with application  (e.g., in an application package), or may be provided separately.","In step , a display screen of the application is displayed at the client that includes a user interface element capable of receiving data from the user. Application  may generate one or more display screens for display at client computer system  with which user  may interact. The display screens may include user interfaces for receiving data from user . For instance, display screen , which was configured by developer , as described above, may be displayed as a display screen , as shown in . As shown in , display screen  includes first entity region for receiving data corresponding to a first entity, and second entity region for receiving data corresponding to a second entity. First entity region includes first and second entity field regions and . First and second entity field regions and include text entry boxes and , respectively, as user interface elements or controls for receiving data from user .","In step , a first validation is performed at the client of data received by the user interface element according to a client-side rule. For example, user  may have entered data into text entry box of entity field region in . A validation rule may be triggered by entering the data into text entry box , including an entity-level validation rule, an entity-field-level validation rule, and\/or a screen level validation rule. As such, client-side rules engine  may perform a validation according to the validation rule. For instance,  shows a block diagram of client computer system , according to an example embodiment. In the example of , client-side business logic  implements a client-side rule  associated with text entry box . Client-side business logic  is encountered in application code  (in a position in application code  that may have been selected as described above), and is provided to client-side rules engine . Client-side rules engine  is configured to perform rule validations at client computer system  according to client-side rules, including evaluating client-side rule  associated with text entry box ","In step , a validation error is displayed in the display screen if the data received from the user does not validate according to the client-side rule. Client-side rules engine  executes business logic associated with the client-side rules to validate entities, entity fields, and display screens according to validation rules. In the example of , client-side rules engine  evaluates the data entered into text entry box  according to client-side business logic . If client-side rules engine  determines the data does not validate, client-side rules engine  may generate a validation error, which may be displayed in display screen . Furthermore, in an embodiment, validation warnings and\/or further validation information may be displayed in display screen , depending on the configuration of the particular validation rule.","For example, as shown in , regions are present in display screen  for display of validation errors. Entity level validation errors  may be displayed corresponding to entity regions , entity field-level validation errors  may be displayed corresponding to entity field regions , and screen-level validation errors  may be displayed corresponding to display screen . Validation errors  and  may be displayed adjacent to their respective entity regions  and entity field regions , or in other locations in display screen . Screen level validation errors  may be displayed anywhere in display screen , including in a predetermined screen location for such errors. For example, in an embodiment, all validation errors (e.g., entity level, entity field-level, and screen level validation errors) may be displayed at the bottom of display screen . Furthermore, validation warnings and\/or further validation information may be displayed in display screen , including in the regions described above for displaying validation errors.","If a validation error is received, user  may re-enter or change entered data to correct the validation error, which may retrigger validation according to the corresponding validation rule (and\/or other validation rules) by client-side rules engine . A validation error may again occur, needing to be corrected, or the re-entered or changed data may pass validation. Note that if no validation error occurs, if validation warnings (e.g., for minor issues) are displayed, or a prior validation error is corrected, a \u201cvalidation successful\u201d or similar message may be displayed in display screen . Such validation successful or similar messages may be displayed in display screen , including in the regions described above for displaying validation errors.","Furthermore, note that in step , in an alternative embodiment, the entered data may be transmitted to server-side rules engine  to perform validation of the data according to server-side business logic  rather than by client-side rules engine . For example, the validation rule may require remote data\/resources not accessible at client computer system , or may be too complex for evaluation at client computer system . In such case, the data may be transmitted to server , and server-side business logic  may perform the validation. The results of the validation may be transmitted back to client computer system , and displayed in display screen .","In step , the user is enabled to interact with the display screen to attempt to save the data if the data received from the user validates according to the client-side rule. Once all desired data has been entered into the display screen, user  may attempt to save the entered data (e.g., by selecting save button ). Note that the data may not be actually saved into database  until further validation occurs, as described as follows. Furthermore, note that in an embodiment, a \u201csave policy\u201d may be specified by developer . For instance, by default, display screen  may not enable entered data to be saved if there are invalid entities. However, developer  may configure display screen  to provide the ability to \u201csave as draft,\u201d such that invalid entities may be submitted according to a particular policy. Such a policy may be configured for client and server validation.","In step , the data is transmitted from the client to the server if the user interacts with the display screen to attempt to save the data. For example, as shown in , upon user  attempting to save the data, a data signal  that includes changes to the data (e.g., newly input data, updated data) may be transmitted from client computer system  through network  to server .","In step , a second validation is performed at the server of the data according to a server-side rule. In an embodiment, server-side rules engine  may perform a validation of the data received in data signal  according to a server-side validation rule. For instance,  shows a block diagram of server , according to an example embodiment. As shown in , server  includes server-side business logic  that implements a server-side rule  associated with text entry box . Server-side business logic  is received by server-side rules engine . Server-side rules engine  is configured to perform rule validations at server  of received data according to server-side rules, including evaluating server-side rule  associated with text entry box ","Note that in an embodiment, server-side rule  may be the same rule as client-side rule  of , such that the same validation rule is evaluated for the input data at the client-side and the server-side. In another embodiment, server-side rule  may be a different validation rule from client-side rule , even though client-side rule  and server-side rule  may be evaluated for the same data.","In step , a validation error is displayed in the display screen if the data received from the user does not validate according to the server-side rule. For example, if server-side rules engine  evaluates the data entered into text entry box  according to server-side business logic , and determines that it does not validate, server-side rules engine  may generate a validation error . As shown in , validation error  is transmitted from server  to client computer system . Validation error  may be displayed in display screen  in a region corresponding to the entity (e.g., an entity level validation error  in ), entity field (e.g., an entity field-level validation error ), or display screen (a screen-level validation error ) from which the server-side validation was invoked.","If validation error  is received from server , user  may re-enter or change the entered data to correct the validation error, which may retrigger validation according to the corresponding validation rule (e.g., and\/or further validation rules) by client-side rules engine  and\/or server-side rules engine . A validation error may again occur, needing to be corrected, or the re-entered or changed data may pass validation in a similar manner as described above.","In step , the data is persisted into a database accessible at the server if the data received from the user does validate according to the server-side rule. If server-side rules engine  successfully validates the data according to server-side business logic , server  may transmit the data as validated data  to database . Database  may accordingly store the data (e.g., new data, updated data, etc.) in storage . Database  may provide an indication to server  that the data was successfully stored, and server  may transmit an indication to client computer system  that the data was successfully stored (e.g., to indicate that the save attempted in step  was completed).","In this manner, data associated with entities, entity fields, and\/or display screens may be validated in a client-server environment. Any number and combination of types of validation rules may be evaluated serially or in parallel according to flowchart . As described above, such validation may occur synchronously (e.g., as data is received in a user interface from a user) or asynchronously. A limitation of conventional validation frameworks is the synchronous nature of rules execution. Often times, conventional validation frameworks require that validation rule be evaluated only when data input is assigned to an entity field as a part of a user's data input process. As such, these rules are evaluated synchronously, and cannot be executed outside of property setters. This does not meet some business application scenarios, where rules need to be executed not just on property setters but by triggers outside of an entity field itself.","In embodiments, validation rules are enabled to be evaluated and results to be generated asynchronously. For instance, in an embodiment, client-side rules engine  and server-side rules engine  may be configured to perform step  shown in . In step , the validation of the data is performed in an asynchronous manner. For example, a validation results property may be used to collect validation results from asynchronous validation execution. Normal property setter based validation rules may be aggregated separately from the validation results property. Asynchronous validation rule execution may be enabled by treating validation rules as a part of view model separate from the display screens of the application. This enables the display screens to be operational regardless of when validation rules are executed. Client-side rules engine  and\/or server-side rules engine  may be configured to determine when validation rules need to be evaluated, to execute such validation rules asynchronously, and to post notifications to the corresponding display screen when results are available.","Validation pipeline , application development tool , user interface configuration module , rule configuration module , rule placement module , rule evaluator , rule inserter , client-side rules engine , and server-side rules engine  may be implemented in hardware, software, firmware, or any combination thereof. For example, validation pipeline , application development tool , user interface configuration module , rule configuration module , rule placement module , rule evaluator , rule inserter , client-side rules engine , and\/or server-side rules engine  may be implemented as computer program code configured to be executed in one or more processors. Alternatively, validation pipeline , application development tool , user interface configuration module , rule configuration module , rule placement module , rule evaluator , rule inserter , client-side rules engine , and\/or server-side rules engine  may be implemented as hardware logic\/electrical circuitry.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 17","b":["1700","102","102","102","106","1700","1700","1700","1700","1700"],"i":["a","n"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing validation pipeline , application development tool , user interface configuration module , rule configuration module , rule placement module , rule evaluator , rule inserter , client-side rules engine , server-side rules engine , flowchart , flowchart , flowchart , and\/or step  (including any step of flowcharts , , and\/or ), and\/or any further embodiments as described above.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to the monitor, computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network adaptor or interface , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments of the present invention discussed herein. Accordingly, such computer programs represent controllers of the computer .","The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments of the present invention employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMs, nanotechnology-based storage devices, and the like.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be understood by those skilled in the relevant art(s) that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form a part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
