---
title: Information exchange using generic data streams
abstract: Systems and methods for information exchange using generic data streams, wherein a data stream is sent from one computer system to another, and the receiving computer system is not aware of the structure of the information in the data stream. A header of the data stream includes a description of a data object. A body of the data stream includes information for instances of a data object stored on a computer system. The object is compliant with the description provided in the header of the data stream. The information in the body of the stream is extracted based on the description provided in the header of the data stream. A user interface (UI) is dynamically created based on the description of data object to display portions of the received information, and further to allow a user to change the information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806345&OS=08806345&RS=08806345
owner: Business Objects Software Limited
number: 08806345
owner_city: Dublin
owner_country: IE
publication_date: 20091210
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The field of the invention relates generally to data processing and digital processing systems. More specifically, the invention is related to using specific protocols for information exchange within a computer system environment.","The current development of information technology is characterized by an abundance of information systems of different kinds providing various services to customers. Regardless of whether these systems are public, or available in a private environment, system integration is a crucial demand in the software and hardware industry. It is common for an enterprise to have more than a few computer systems from different vendors, working simultaneously to achieve a common goal. Typically, the data produced by one information system is required by another system to automate a business process in an enterprise. System integration means that the different information systems communicate efficiently with each other and exchange information for accomplishment of the common goal.","Different information systems generate and store data in different formats and quantities. Software and hardware developers implement various methods to enable smooth and efficient communication between the separate systems. The communication between two information systems could be defined as data exchange based on predefined syntax rules. The rules are necessary to guarantee that the systems understand each other. The structure of the exchanged data is predefined in both systems by the rules, e.g., data fields, data types, parameters and variables, special characters, etc. The predefined syntax rules present a flexibility and universality threshold before the system integration. This threshold corresponds to the amount of resources necessary to establish a communication between two information systems based on common syntax rules.","Systems and methods for information exchange using generic data streams are described, wherein a data stream is sent from one computer system to another, and the receiving computer system is not aware of the structure of the information in the data stream. A header of a data stream is received from a remote computer system. The header of the data stream includes a description of a data object. A body of the data stream is also received from the remote computer system. The body of the data stream includes information, for instance, of a data object stored on the computer system and compliant with the description of a data object in the header. The information in the body of the stream is extracted based on the description provided in the header of the data stream. A user interface (UI) is dynamically created based on the data object description. The created UI includes information from the header of the data stream and\/or from the body of the data stream. This information is synchronized with the information stored on the remote computer system, if the information is changed in the UI.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for information exchange using generic data streams are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","Generally, the described invention is related to data exchange between two information systems, where one of the systems sends information to the other. The two information systems could work together in same information environment, and could even be different modules in a same information system. Further, the two information systems could be remote computer systems connected via a public computer network, e.g., connected via the Internet. In this document, one of the communicating information systems is called client computer system, or just client system, and the other information system is called server computer system, or just server system. Client system and server system have different roles in the data exchange. The information is sent from the server computer system to the client computer system. The two systems could exchange information about data objects.","A data object is broadly defined in this document as an information entity. For example, a table in a database could be a data object. The columns of the table define the properties of the data object, e.g., the structure of the data object and the relationships with other data objects. The rows of the table represent different instances of the data object, where each property of the data object has a value of a particular type. Other examples for a data object are Java\u2122 beans or Enterprise JavaBean\u2122 (EJB) objects. The EJB objects also have properties that hold values per instance. The values of the properties of the data objects are exchanged between server computer system and client computer system by generic data streams, according to one embodiment of the invention. Further, EJB objects could have more advanced features like methods and interfaces that could also be instantiated. Descriptions for these advanced features could be exchanged between computer systems in generic data streams as well.","According to one embodiment of the invention, the communication between a server computer system and a client computer system could be organized as illustrated with process  in . At  in , a client computer system requests data from a server system. There are different approaches to request data. Usually, various data requests are predefined during a system integration process based on the syntax rules for data exchange between two systems. The information exchange using generic protocol or generic data streams does not require predefinition of syntax rules for data exchange, and respectively, predefinition of data requests. The client system is not aware of the structure and the volume of the information that is stored in the server computer system. The request sent at  could be very general, including a keyword, a name of a business object, a type of a business object, a reference to a business task, etc.","The server computer system sends a list of names of data objects hosted or stored in the server system to the client system. Respectively, at , the client computer system requests information for a data object with a particular name, without further insight about the structure or the contents of the requested information. Additionally, the request could include a search string or other criteria to filter the retrieved data in response to the request. A particular type or kind of data object could be retrieved. The request could also specify an index to retrieve information for a particular instance of a specified data object. The index indicates a position of the instance in an order of persisted instances of the data object. Further, the request could specify for how many instances of the data object to retrieve information, starting from the first instance, or from the instances with a particular index.","At , the client computer system receives a generic data stream from the server computer system. The client computer system is not aware of the structure of the received information. The generic data stream has two parts. The first part is a header that contains metadata describing the structure of the information. The second part of the received data stream is a body that is structured according to the description in the header. The body of the data stream contains information retrieved from the server computer system. The metadata in the header of the data stream includes a description of a data object, and the body of the data stream includes one or more instances of a data object compliant with the description. Metadata provides rules necessary for correct interpretation of the information included in the body of the data stream. The data stream could be formatted as an electronic file, and exchanged over a computer network using universal layer protocol, e.g., hyper text transport protocol (HTTP). The exact format of the electronic file could be compliant with a standard language to enable the client system to distinguish and read the metadata. For example, a data stream could be formatted as an extensible markup language (XML) file.","In one embodiment of the invention, metadata includes definitions of one or more properties of a data object. A data object property definition provides identifiers, e.g., name of the property and a type corresponding to the property. The property could be described as an information field of a data object. The corresponding type specifies the data type of the information that could be stored in the field. A data object property could also be a reference to other data objects. References indicate that the data object described in the metadata is part of a tree structure of data objects. The corresponding type of the reference property provides criteria about how to identify a child data object nested in the described data object. One of the possible criteria is a location of one or more instances of the child object nested in the instances of the parent object. A location reference is similar to a hyperlink providing a unified resource location (URL) within the server computer system, or within another computer system, depending on where the nested instances are stored.","Further, a property could be a complex property defined as a combination of two or more component properties. A complex property could present information from different types. The definition of a complex property includes a complex property identifier, two or more component property identifiers, and types corresponding to the component properties. In one embodiment of the invention, metadata could also define morphable properties. A morphable property of a data object presents information of different types in different instances of the data object. In other words, the morphable properties have alternative corresponding types. Complex and morphable properties extend the flexibility of the metadata to describe a data object of a particular kind, even when the data object is instantiated by different applications to persist different types of information.","The body of the data stream received at  includes information extracted from one or more instances of a data object compliant with the metadata. In one embodiment of the invention, the extractions for the different instances are listed in the electronic file one after another, with appropriate tags for beginning and ending of an instance extraction. Each extraction included in the body of the data stream provides a separate set of values for the properties defined in the header of the data stream. Table 1 illustrates a simple data stream formatted as an XML file, including extraction from only one instance of a data object.",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Data Stream"},{"entry":"<ol \/\/ tag that marks the beginning of the data stream"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"id=\u201clocales\u201d r=\u201c1\u201d a=\u201c1\u201d o=\u201c0\u201d s=\u201c0\u201d c=\u201c1\u201d m=\u201c1\u201d>"]},{"entry":[{},"<o p=\u201clocales\u201d d=\u201c0\u201d> \/\/ the header of the data stream"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<p id=\u201cid\u201d t=\u201cs36\u201d u=\u201c0\u201d i=\u201c0\u201d>Id<\/p>"]},{"entry":[{},"<p id=\u201cent\u201d t=\u201col\u201d i=\u201c1\u201d>Entries<\/p>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/o>"]},{"entry":[{},"<m n=\u201c0\u201d> \/\/ the body of the data stream, first extraction"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<o id=\u201cen\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<p id=\u201cid\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<v>en<\/v>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/p>"]},{"entry":[{},"<p id=\u201cent\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ol id=\u201clocales\/en\/ent\u201d i=\u201c1\u201d a=\u201c1\u201d s=\u201c0\u201d c=\u201c0\u201d"]},{"entry":[{},"m=\u201c\u22121\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/p>"]},{"entry":[{},"English"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/o>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/m>"]},{"entry":[{},"Localization"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ol>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Going back to , process  continues at  with creating a user interface (UI) at the client computer system. In one embodiment of the invention, the UI that is created is a graphical user interface (GUI). The UI is dynamically generated based on the metadata included in the header of the received data stream. This approach allows the client system to display the information that is included in the data stream at . The dynamically generated UI has the necessary structure and controls to display one or more of the properties described in the metadata, to browse or navigate between the properties and between the extracted information, to show the values of the properties included in the data stream, and even to modify the displayed data. The created UI enables user interaction with the information included in the data stream.","At , a check is performed to determine whether the information included in the header of the data stream and displayed in the UI has been updated. The check verifies whether the metadata in the data stream has been updated. By way of example, such an update could include change of a property type, including definition of a new property, deleting a definition of an existing property, etc. According to one embodiment of the invention, if the metadata has been updated, the description of a data object is no longer compliant with the retrieved information in the body of the data stream. Therefore, at , a new data query is generated based on the modified metadata. The new query is included in a new request to the server computer system, according to one embodiment of the invention.","At , a check is performed to determine whether the body of the data stream has been updated. According to one embodiment of the invention, the UI provides functionality to change the value of a property for an instance of the data object included in the body of the data stream. The new value is of a type corresponding to the type of the property. In case of a morphable property, a user could enter a new value of any of the alternative types. When the value of a property of an instance has been changed, at , the updated information is synchronized with the data stored in the server computer system to avoid discrepancies. The synchronization could be performed using any of the existing technologies, including messaging, distributed transactions, sending a modified data stream from the client computer system to the server system, etc.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["200","225","205","245","205","210","225","210","215","245","245","215","250","285","245","260","265","270","245","225","205","230","235","240","230","235","240","245","215","250","285","245"]},"Header  also includes additional information  that could be helpful for the recipient of the data stream . By way of example, additional information  could include the total number of data objects  of a particular type available on the server computer system, the total number of instances of a data object  compliant with metadata  available on the server, an index of an instance retrieved in body  of data stream , and the total number of the retrieved instances. In one embodiment of the invention, additional information  includes an index of the first instance retrieved in body . In one embodiment of the invention, a user could base a new data request on the additional information . For example, the new request could retrieve instances of data object  that are not included in data stream .","Generally, the client computer system is not aware of the structure of the requested data object. The number of the instances persisted in the server system is also unknown for the client system. The client computer system is not aware of the volume of the information that will be transferred from the server computer system. The requested data object could be part of a tree structure of objects hosted in the server computer system. In such a case, a simple request could retrieve torrents of data. To avoid unlimited information transfers, an embodiment of the invention provides an opportunity to retrieve information page by page, and to browse tree-structured data by levels. Thus, not all information is streamed or transported, which keeps the volume of data received at the client computer system within quantifiable limits. When streaming an object instance, server computer system places a link to a subordinated data stream containing information for a child object of the requested data object. Thus, client computer system receives information about a limited number of instances of the requested data object. Links or references provide a way to drill down on instances of child objects, e.g., to receive data streams with information for instances of a subordinated object by pages.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["300","302","336","342","302","336","342","302","304","314","316","326","304","306","312","306","1","308","310","1","2"]},"Definition  specifies a reference property with identifier \u201ch\u201d and corresponding type \u201cHyper Link\u201d. The reference property indicates the nested or tree-like structure of the described data object, where the instances of the data object include instances of other data objects. Extraction  includes information from an instance of a data object compliant with the description in header . The instance is stored in the server computer system. Extraction  contains tuples  to  providing values from the corresponding instance for each of the properties specified by the definitions  to . For example, tuple  provides value \u201cstring\u201d for the property with identifier \u201cs\u201d, tuple  provides value \u201cTrue\u201d for property \u201cb\u201d, and tuple  provides value \u201cstring\u201d for property \u201cs\u201d. Extraction  also includes a value for the reference property \u201ch\u201d in tuple . The provided value specifies a location of subordinated data stream . The subordinated data stream  contains header  describing a data object that is subordinated to the main object described in header  of main data stream . Further, subordinated data stream  contains body  including one or more instances of a data object compliant with the description in header .","In one embodiment of the invention, when information for a main data object from a tree based object structure hosted in the server computer system is retrieved, a main data stream is generated to include values from one or more instances of the data object. Additionally, references to instances of data objects subordinated to the main data object are created, where one or more instances of a subordinated data object are nested in an instance of the main data object. Information for the instances of the subordinated object could be retrieved in one or more subordinated data streams generated together with the main data stream. The reference properties of the instances of the main object could be set to provide a location of the relevant subordinated data streams within the server computer system. It is possible for some of the subordinated data objects to be hosted in other computer systems. Respectively, a reference property could provide a location of a subordinated data stream in terms of a local or global network address.","Extraction  contains values of another instance of the data object described in header  of data stream . As illustrated in , tuple  provides value \u201cstring\u201d for property \u201cs\u201d, tuple  provides value \u201cFalse\u201d for property \u201cb\u201d, and tuple  provides value \u201cstring\u201d for property \u201cs\u201d. Extraction  contains value for reference property \u201ch\u201d in tuple  to specify a location of the corresponding subordinated data stream . The subordinated data stream  contains header  describing a data object that is subordinated to the main object described in header  of main data stream . Subordinated data stream  also contains body  including one or more instances of a data object compliant with the description in header .","In an alternative embodiment of the invention, reference properties could provide requests or queries to be executed by a computer system hosting the instances of the corresponding subordinated data objects. The execution of the request causes a retrieval of the necessary information from the corresponding subordinated instances. In this case, a subordinated data stream is generated only when requested.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["400","402","408","404"]},"As illustrated in , the identifier of the morphable property is \u201ciconurl\u201d, and the corresponding type assigned is \u201cOption\u201d to introduce the morphable aspect of the described data object. As defined, morphable property \u201ciconurl\u201d is a holder of two alternative properties defined in aspect definitions  and . Aspect definition  specifies option \u201cAspect\u201d of property with identifier \u201cs\u201d and corresponding type \u201cString\u201d. Aspect definition  specifies option \u201cAspect\u201d as a combination of component properties with identifiers \u201cs\u201d and \u201cb\u201d and corresponding types \u201cString\u201d and \u201cBoolean\u201d, respectively. Header  also includes definition  of property \u201cstr\u201d or type \u201cString\u201d.","Data stream  further includes extractions ,  and  in body  presenting values from three different instances of a data object compliant with the metadata in header . Tuple  of extraction  carries value \u201cstring\u201d for property with identifier \u201cstr\u201d specified with definition . Tuple  of extraction  has a more complex structure, as it carries values for morphable property \u201ciconurl\u201d. The information included in tuple  indicates that option \u201cAspect\u201d is assigned to property \u201ciconurl\u201d, and the component properties \u201cs\u201d and \u201cb\u201d corresponding to option \u201cAspect\u201d are set to values \u201cstring\u201d and \u201cFalse\u201d, respectively.","Extraction  includes tuples  and . Tuple  provides value \u201cstring\u201d for property \u201cstr\u201d. Tuple  indicates that option \u201cAspect\u201d is assigned to morphable property \u201ciconurl\u201d, and the respective property \u201cs\u201d is set to value \u201cstring\u201d. Last extraction  contained in body  includes tuples  and . Tuple  provides value \u201cstring\u201d for property \u201cstr\u201d. Tuple  indicates that option \u201cAspect\u201d is assigned to morphable property \u201ciconurl\u201d. The component properties \u201cs\u201d and \u201cb\u201d corresponding to option \u201cAspect\u201d of property \u201ciconurl\u201d are set to \u201cstring\u201d and \u201cTrue\u201d, respectively.","In one embodiment of the invention morphable properties provide an opportunity for a user to modify the structure of an instance of a data object. A graphical user interface (GUI) could include a control based on the definition of the morphable property. The control allows a user to change a current aspect of the morphable property for a particular instance of the described data object. Further, by using the GUI, the user can change the value of a displayed property.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5A","FIG. 5D","FIG. 5A"],"b":["510","540","510"]},"In , morphable property \u201cIcon URL\u201d is specified as \u201cColumn value\u201d, and the corresponding GUI control  displays the attributes of a column value for a particular instance of the underlying data object. Further, in , morphable property \u201cIcon URL\u201d is specified as \u201cScript\u201d, and the corresponding GUI control  displays the attributes of a script. Finally, in , morphable property \u201cIcon URL\u201d is specified as \u201cEncrypted column value\u201d, and the corresponding GUI control  displays the attributes of an encrypted column. A user could edit the displayed attributes, and then, client computer system will synchronize the structure of the respective instance of the data object, and the value that the morphable property holds in the instance.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["600","600","610","610","620","630","640","650"]},"When a particular property of a data stream is selected, area  changes to display a detailed view of the selected property.  is a screen shot of GUI , generated by an embodiment of the invention at a client computer system, showing a detailed view control  for selected property  of a data stream. Detailed view control  is generated based on the definition of the property included in the header of the corresponding data stream. Thus the detailed view control displays all details of the property definition, and it could also display a value from a particular instance of the data object described in the metadata of the stream.","A user could use detailed view control  to change an aspect of the selected property, when the selected property is a morphable property. Further, a user could use detailed view control  to change the displayed value of the property for a particular instance of the described object. The client computer system could use the changes to the aspect or the value of the property in the GUI  to send an update to a particular instance of the described data object stored in the server computer system.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable medium as instructions. The term \u201ccomputer readable medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer-readable media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as that produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 8","b":["800","800","805","855","800","840","855","810","815","810","815","805","815","800","825","830","800","825","830","800","835","800","850","850","800","845","800","820","860","860","860","850","860"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5D"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
