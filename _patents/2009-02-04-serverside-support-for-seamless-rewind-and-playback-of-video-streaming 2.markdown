---
title: Server-side support for seamless rewind and playback of video streaming
abstract: A system and method provide server side support for seamless, scalable rewind and playback of a video stream. A video stream is stored and indexed in a network storage place. A video stream can be indexed at frame level where each intra frame of the video stream has an index indicating the file offset and the time stamp of the intra frame in the video stream. A user request for rewinding of a video stream while the video stream is being broadcast is processed by extracting the rewinding time requirement from the user request. The extracted rewinding time value is used to calculate the requested file offset. The video stream starting at the requested time is retrieved and played back according to the user request. The system also provides server side support for seamless rewinding of a video stream and scalable system performance across multiple streaming data centers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09538142&OS=09538142&RS=09538142
owner: Google Inc.
number: 09538142
owner_city: Mountain View
owner_country: US
publication_date: 20090204
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to streaming video content over a telecommunications network such as the Internet, and more particularly to a method for providing server side support for seamless rewind and playback of such live video streams.","A video streaming system is capable of delivering live video streams to a large number of users through Internet-based broadcasting-like services. Conventional video streaming systems provide the users with a video player running on a client machine. The video player receives and buffers the live video stream in the local memory of the client machine. In response to a user request for rewinding and then playback of a live video stream, the video player accesses the buffered video from the local memory. Such client-side support for rewinding video streams requires a large amount of client side computing resources, such as a fast central processing unit (CPU), adequate memory and disk space, for storing the received video stream from a streaming server, calculating the timing requirement for rewinding while continuing receiving subsequent streaming data packets. As a result, users have to typically suffer processing delay and experience degraded streaming services.","Another problem faced by the existing implementations of client side support for rewinding live video streams is lack of scalability of a video streaming system. A live video stream is commonly broadcasted to thousands, and potentially millions of viewers concurrently. A video streaming system often comprises a large number to sub-systems, each of which may include multiple incoming streaming servers to receive live video\/audio feeds, multiple of stream handlers to process the live video streams and multiple of video streaming servers to provide requested video streams to the viewers. Archiving and retrieving across the multiple sub-systems without downgrading user experience calls for a more efficient video stream archiving\/retrieving and scalability support at the server side of the video streaming system.","A method, system and computer program product provides server side support for seamless rewind and playback of video streams.","An embodiment of a video streaming computer system includes a plurality of streaming data center computer systems. A streaming data center computer system comprises an incoming streaming server computer system, one or more stream handlers, a stream archiving database system, a local index database system and one or more streaming server systems. A streaming data center computer system collects via a network connection incoming video\/audio streams from various video feeds, and distributes the video streams to the stream handlers for archiving and indexing. The streaming data center also receives streaming requests from user client devices, and provides the requested service to the users.","The streaming archiving database system stores video streams indexing information contributed by the streaming data centers. For each video stream from a streaming data center, in one embodiment, there is a GOP-level index file that stores an index of each GOP of the video stream. In another embodiment, for each video stream, there is a frame-level index file that stores an index of each intra frame of the video stream.","An embodiment of a method includes receiving a streaming request from a client device and identifying a stream handler to serve the request. In response to a rewinding request while the video stream is being broadcast, the method comprises extracting a rewinding time requirement, calculating a file offset corresponding to the rewinding time requirement and streaming the requested video stream. The time requirement is determined from the rewind request, relative to the start of the video broadcast. An offset into the video for the portion of the video corresponding to the time is determined from an index, and the data corresponding to the portion of the video is retrieved and streamed to the client device.","The features and advantages described in the specification are not all inclusive and, in particular, many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings, specification, and claims. Moreover, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the disclosed subject matter.","The figures depict various embodiments of the present invention for purposes of illustration only, and the invention is not limited to these illustrated embodiments. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","110","100","114","114","118","118","200","200","110","200","112","114","110","200","200","118","118","110","110","200","110","200"]},"The illustrated environment represents a typical scenario where multiple users\/viewers subscribe to video streaming services provided by the streaming data centers . In this scenario, a user uses the client  to send a video streaming service request to a streaming data center  through the data center dispatcher  and receives the requested service from the streaming data center  directly (i.e., without going through the data center dispatcher ). The data center dispatcher  dispatches the streaming service request to one of the streaming data centers  based on some criteria, such as load of each of the streaming data centers. The streaming data center  selected by the data center dispatcher  receives the streaming service request from the client and provides the requested service to the client  via the network .","Turning to the individual entities illustrated on , each client  is used by a user to request video streaming services. For example, a user uses a client  to send a request for subscribing to a broadcasted video stream, playing a video stream, pausing a video stream, or rewinding a video stream to a specified time point while the video is still being broadcast. The client  can be any type of computer device, such as a personal computer (e.g., desktop, notebook, laptop) computer, as well as devices such as a mobile telephone, personal digital assistant, IP enabled video player. The client  typically includes processor, a display device (or output to a display device), a local storage, such as a hard drive or flash memory device, to which the client  stores data used by the user in performing tasks, and a network interface for coupling to the system  via the network .","A client  also has a video player  (e.g., the Flash\u2122 player from Adobe Systems, Inc., or a proprietary one) for playing a video stream. The video player  may be a standalone application, or a plug-in to another application such as a network browser. Where the client  is a general purpose device (e.g., a desktop computer, mobile phone), the player  is typically implemented as software executed by the computer. Where the client  is dedicated device (e.g., a dedicated video player), the player  may be implemented in hardware, or a combination of hardware and software. All of these implementations are functionally equivalent in regards to the present invention. The player  includes user interface controls (and corresponding application programming interfaces) for selecting a video feed, starting, stopping, and rewinding a video feed. Also, the player  can include in its user interface a timeline slider configured to indicate the progress of the video streaming, for example, the current time of playback relative to the total time of the video stream (if known). The timeline slider would be further configured for direct manipulation in the user interface by which the user can move the timeline slider to specify how much (e.g., in minutes) he\/she wants to rewind video stream to view a previously broadcast portion thereof. Other types of user interface controls (e.g., buttons, keyboard controls) can be used as well to control the playback and rewind functionality of the player .","The network  enables communications between the clients  and the streaming data centers . In one embodiment, the network  is the Internet, and uses standardized internetworking communications technologies and protocols, known now or subsequently developed that enable the clients  to communicate with the streaming data centers .","For purpose of this description, a video stream is a video stream from a live video feed such as live sports, music, news, and entertainment broadcasted by streaming media content providers over the Internet. The video stream also comprises video streams from recorded feed such as a recorded live concert, TV shows or movies re-broadcasted by streaming media content providers over the Internet. Each video stream is identified by a stream identification (ID). A video stream comprises multiple intra frames (I frames), predictive frames (P frames) and may have bi-directionally predicted frames (B frames), depending on the codec. Multiple video frames of a video stream can be further grouped into groups of pictures (GOP), where each GOP comprises at least one intra frame. A video stream is stored in a network storage as one or more related files, each of which comprises a plurality of audio\/video data packets. The feed\/source of video (such as TV broadcasting stations, or Internet-based video streams providers) is connected to an encoder. The encoder is responsible for capturing and digitizing the received video stream, compressing it and passing the resulting data to a video server for further processing.","The data center dispatcher  is generally used when a user stream request sent from the client  requires a domain name server (DNS) lookup. For example, a requested stream from a user is located at \u201chttp:\/\/host.com\/stream_id\u201d. The client  on behalf of the user communicates with the data dispatcher  to find out the Internet Protocol (IP) address of the host server \u201chost.com\u201d that is hosting the stream \u201cstream_id\u201d. The data center dispatcher  dispatches the streaming service request to one of the streaming data centers  based on some criteria, such as load of each of the streaming data centers. The load of each of the streaming data centers can be calculated based on the bandwidth usage per data center and a bandwidth capacity value assigned to each streaming data center. The data center dispatcher  balances the load by avoiding sending streaming requests to a streaming data center whose bandwidth usage is close to its full capacity. Other load balancing mechanisms are readily available to those of ordinary skills in the art.","The shared index database  stores video streams indexing information contributed by the streaming data centers  for rewinding broadcast video streams. For each video stream from a streaming data center , in one embodiment, there is a GOP-level index file that stores an index of each GOP of the video stream. Specifically, the GOP-level index file keeps an index of the first intra frame of each GOP in a tuple (stream_ID, file_offset, time_stamp). In another embodiment, for each video stream, there is a frame-level index file that stores an index of each intra frame of the video stream. The index stores for each intra frame the tuple (stream_ID, file_offset, time_stamp). \u201cStream_ID\u201d identifies the video stream to which the intra frame belongs. \u201cfile offset\u201d indicates where, in terms of bytes of the video stream file, the intra frame starts. The \u201cfile_offset\u201d value is an absolute numerical value counting from the start of the archived file (i.e., byte ). \u201ctime stamp\u201d indicates when the intra frame starts in the archived file of the video stream. The \u201ctime_stamp\u201d value is an absolute numerical value counting from the video stream start playing time (i.e., 0 millisecond).","In one embodiment, the indexing information is stored as a global video streams indexing file. The global video streams index file comprises the indices for each video stream processed by the streaming data centers . The indices from a particular streaming data center  can be further identified by a streaming data center identification. The indexing information is shared by the streaming data centers  for serving user streaming requests among multiple streaming data centers  with scalability. The embodiments of streaming data center  and shared video streams indexing database  are further described below with respect to .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2A","FIG. 1"],"b":["200","200","210","220","230","240","118","250"]},"As illustrated in , an incoming server  has a plurality of stream handlers  coupled to it; each stream handler  has a stream handler ID. For each incoming video stream, the incoming server  selects one of the stream handlers , and directs all the data packets for this incoming video stream to the selected stream handler .","The streaming data center  also includes a plurality of streaming servers  to handle streaming requests from clients. A streaming server  handles two types of streaming requests: a request for subscribing to a broadcast video stream and a request for rewinding a broadcast stream. A streaming request for subscribing (subscribe request) to a broadcast video stream does not include timing information for rewinding. A streaming request for rewinding a broadcast stream (rewind request) includes timing information regarding the desired amount\/offset for rewinding the video stream while the video stream is being broadcast. Thus, the streaming server  differentiates between the requests by whether or not timing information is present in the requests; no other formal semantics are required.","In response to a rewind request, the streaming server  finds a file offset corresponding to the timing information in the request by checking the local index database , and reads the data packets of the requested video stream starting from the file offset of the video stream stored in the streaming archive database .","For example, the player  of a client  provides its user a timeline view of a video stream being broadcasted. The user can select a location in the timeline slider with a mouse. The player  maps the selected location on the timeline slider to a corresponding timing information. For example, assume a live broadcast video is 2-hour in length, and the user selects a location on the timeline slider that is at the halfway point between the beginning and end, then this location is mapped to 1:00. This timing information is included in the video streaming request and sent to the streaming server for processing.","An exemplary rewind request is in form of a URL, such as http:\/\/www.hostserver.com\/play?id=StreamID&time=timestamp, where streamID is the stream ID of the requested stream and timestamp is a numeric value representing the time value of a starting time relative to the start of the video stream. For example, the user may issue a request for a video stream with a URL like \u201chttp:\/\/www.hostserver.com\/1play?id=Stream12&time=600,\u201d which requests a video stream identified by its stream ID \u201cStream12\u201d and rewinding the video stream to the 600th second (i.e., end of the 10th minute). The timing information (e.g., timestamp value) indicates user rewinding requests regardless the video stream is from a live video feed (e.g., live broadcasting) or from a recorded video source (e.g., re-broadcasting of a recorded live event). In one embodiment, fast-forwarding requests are not supported.","To further illustrate the streaming requests and responses described above, the following pseudo-code represents a data structure used by the streaming server  storing the data for a streaming request\/response:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/video streaming request example\/\/"]},{"entry":[{},"Message LiveAchieveRequest {"]},{"entry":[{},"\u2003\u2003required message<StreamID> stream;"]},{"entry":[{},"\u2003\u2003required int64 start_time; \u2003\/\/relative time value"]},{"entry":[{},"}"]},{"entry":[{},"\/\/video streaming response example\/\/"]},{"entry":[{},"Message LiveAchieveResponse {"]},{"entry":[{},"\u2003\u2003enum Status {"]},{"entry":[{},"\u2003\u2003OK = 0;"]},{"entry":[{},"\u2003\u2003ERROR_STREAM_NOT_EXIST = 1;"]},{"entry":[{},"\u2003\u2003ERROR_INVALID_TIME = 2;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003required Status status = 1;"]},{"entry":[{},"\u2003\u2003byte_offset: 9000; \u2003\/\/Starts part-way into the stream file"]},{"entry":[{},"\u2003\u2003data_source <filepath: \/home\/storage\/HD\/archive_1234>;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"A subscribe request for subscribing to a broadcast video stream does not include timing information. Each streaming server  can communicate directly with a plurality of stream handlers . A streaming request from a client includes a stream ID. Given the stream ID, a streaming server  finds which stream handler  is responsible for the requested video stream by checking the local index database  for the stream ID, subscribes to the identified stream handler , and requests data packets of the requested video stream starting from the start of the video stream.  is block diagram showing a streaming data center for streaming requested videos directly from stream handlers according to the description above.","Turning now to , in one embodiment, the incoming streaming server  of a streaming data center  comprises a protocol interpretation module , a data extraction module  and a load balancer . The incoming streaming server  receives a video streams from a video stream feed , processes the video stream by the modules ,  and , and sends the processed video stream data  to a selected stream handler  for further indexing and achieving. The incoming streaming server  may be a streaming server, e.g., WOWZA\u00ae Media Server or Adobe\u00ae Flash Media Server. The incoming streaming server  may accept video streams using standard video streaming protocols, such as Real Time Streaming Protocol (RTSP), or proprietary protocols, such as Real Time Messaging Protocol (RTMP) developed by Adobe Systems\u00ae for streaming audio\/video data over the Internet between a Flash player and a streaming server.","The protocol interpretation module  processes the received video stream from the video stream feed  by identifying the streaming protocol(s) used in the video stream. For example, the incoming streaming server  is a streaming server that accepts video streams using RTMP protocol and allows flash players to play video streams in RTMP protocol. The protocols interpretation module  identifies the RTMP streaming protocol in the received video stream, and sends the protocol information as part of the video stream information to one or more of the stream handlers .","The data extraction module  extracts audio\/video data from the received video stream, forms the extracted audio\/video data into audio\/video data packets, and sends the extracted audio\/video data packets to one or more of the stream handlers . In one embodiment, the audio\/video packets are standard network data packets to be transmitted to the stream handlers  using User Datagram Protocol (UDP). Other embodiments may extract the received video stream into network packets using other Internet protocols.","The load balancer  determines, for an incoming video stream, which one of the stream handlers  receives the video stream for achieving and indexing using a load balancing algorithm. In one embodiment, the load balancer  selects a stream handler  among the plurality of stream handlers  for the video stream based on the traffic load of each stream handler . The load balancer  may choose the stream handler  with the lightest traffic load to process the received video stream. Other embodiments may allow the load balancer to include other determining factors, such as the number of distinct streams, processor utilization, or measures of a rate of packet handling, to select the stream handler  for processing the received video stream.","A stream handler  receives a plurality of audio\/video data packets of a video stream sent from the incoming streaming server  for further processing.  is a block diagram of a stream handler  shown in . The stream handler  comprises a stream archiving module  and a request processing module . The stream archiving module  writes stream indexing information  to the shared index database , and archives\/stores the received audio\/video data packets in the stream archiving database . For rewinding requests, the request processing module  retrieves the file offset information from the local index database  based on timing information in a rewinding request, and sends the file offset information to the streaming server . For streaming requests for subscribing to a video stream, the processing module  sends the data packets of the requested video stream received from the incoming streaming server  directly to the streaming server .","The stream archiving module  receives the plurality of audio\/video data packets of a video stream and\/or video stream information (e.g., video streaming protocols) and stores the data packets in stream archiving database . In one embodiment, an entire video stream is stored as one archived file in the stream archiving database . The archived video stream can be retrieved from the stream archiving database  via the stream ID. All the data packets belonging to a given video stream share the same stream ID for archiving and retrieving purposes.","The streaming archiving module  writes the indexing information of the archived file to the shared index database . To index the archived video stream, in one embodiment, the archiving module  stores an index of each intra frame of the video stream in an index file. The index stores for each intra frame the tuple (stream_ID, file_offset, time_stamp). For example, for an intra frame located at byte  and starts to play at 21,000 milliseconds, the index of the intra frame is (stream12, 123, 21000) in the index file. Similarly, for another intra frame of the same video stream that located at byte  and starts to play at 24,000 milliseconds, the index is (stream12, 345, 24000). The index file of the entire video stream is a list of indices, each of which corresponds to an intra frame of the video stream. The indices are ordered according to the processing order of the intra frames of the video stream.","To speed up indexing information writes to the shared index database , in another embodiment, the stream archiving module  keeps an index of each GOP of the video stream in an index file. Specifically, the stream archiving module  keeps an index of the first intra frame of each GOP in a format of (stream_ID, file_offset, time_stamp). For example, for a video stream having 5 GOPs, and each GOP being represented by its first intra frame, the index file of the video stream is illustrated in the following table:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GOP-Level Indexing"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1Intra","Stream","Indexing"]},{"entry":["GOP","Frame","ID","(stream_id, file_offset, timestamp)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["1","I","S12","(S12, 123, 21000)"]},{"entry":["2","I","S12","(S12, 345, 48000)"]},{"entry":["3","I","S12","(S12, 456, 96000)"]},{"entry":["4","I","S12","(S12, 789, 130000)"]},{"entry":["5","I","S12","(S12, 1200, 256000)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"It is possible that a video stream generates multiple related files to be stored in the archiving database and each related file corresponds to a part of the video stream, in which event the multiple related files will share the same stream ID. To relate the multiple files generated for a video stream, each file may be further tagged by a time stamp which indicates the time offset of this part of the video stream, counting continuously from the start of the first data packet of the video stream (e.g., 10 minutes in the video stream).","To support rewinding of a video stream to a user specified time point while the video stream is being broadcast, the indexing of a video stream needs to be efficient for archiving and retrieving. The stream archiving module  keeps the indexing information for each video stream for data retrieving. In one embodiment, the streaming archiving module  includes the indexing information for a video stream in a header of the stored video file. This allows the streaming archiving module  to first access the stored file based on the stream ID and then read from this header to access the desired offset into the file for the corresponding time point requested by a user.","In another embodiment, the archiving module  writes the indexing information for each video stream stored in the archiving database  to a global storage (e.g., the shared index database  of ) shared by multiple streaming data centers . The shared index database  identifies each indexing information from a particular streaming data center by a streaming center identification. The frame level indexing information for a video stream processed by a streaming center is a list of indices for each intra frame of the video stream. An index can have a tuple (DC_ID, stream_ID, file_offset, time_stamp), where \u201cDC_ID\u201d identifies the streaming data center. The indexing information in the shared index database  is updated periodically or on demand in response to new indexing information received for a streaming data center . Each streaming data center  stores a duplicate of the indexing information stored in the shared index database  so that each streaming data center has the knowledge of what video streams archived in other streaming data centers.","Sharing indexing information provides a variety of benefits for scalable video streaming across multiple streaming data centers . Sharing indexing information allows the streaming system to distribute video streams efficiently based on multiple factors. For example, the streaming system can designate a particular streaming data center  to handle unpopular (i.e., low number of client requests) video streams and archive unpopular video streams only in the designated streaming center . By doing so, the other streaming data centers can devote their computing resources to process videos streams in higher demand, while having the necessary information of where to fetch the unpopular video streams in response to a user request. The popularity determination of a video stream is a design parameter. For example, the popularity of a video stream may be determined based on the number of user subscriptions.","Sharing indexing information by multiple streaming data centers  also provides improved performance of streaming data centers . A streaming data center  has the flexibility of which video streams to archive and which video streams are available in the other streaming data centers. When a streaming data center  (a servicing streaming data center) receives a rewind request from a client for a video stream that is not locally archived, the servicing streaming data center determines from its local copy of the shared indexing information which other streaming data center (a source streaming data center) is handling the requested video stream. Instead of streaming the requested stream from the source streaming data center to the servicing streaming center then to the client, the servicing streaming data center caches the video stream locally and send the video stream to the client from the local cache. Thus, multiple cross-streaming between data centers is reduced, resulting in overall improved performance.","Referring to , the request processing module  receives a streaming request from the video streaming server , processes the streaming request and retrieves the requested video stream and sends the requested video stream to the video streaming server.","As described above regarding the streaming server  of , the subscribe requests do not have timing information, which indicates to the streaming server  that the client is requesting an initial subscription of a video stream. The streaming server  checks the local index database  to identify which stream handler  is to process the request and passes the request to the identified stream handler . The request processing module  of the identified stream handler starts sending the data packets of the requested stream received from the incoming streaming server  continuously to the streaming server .","In response to the rewind request, the streaming server  determines whether rewinding is needed. In one embodiment, the streaming server  extracts the timing information from the request and checks the value of the requested starting time in the request. The streaming server  sends the requested starting time and stream ID to the processing module  for further processing. Accordingly, the processing module  calculates the file offset based on the extracted timing information. In one embodiment, the processing module  maps the relative starting time to its corresponding file offset by checking the local index file to find the time_stamp value closest to the relative starting time. Alternatively, the streaming server  may also convert the relative starting time value from the request to an absolute starting time value relative to the current clock time, in which case the processing module  maps the absolute starting time value to its corresponding file offset. Here, the streaming server  calculates the absolute time value by subtracting the relative starting time from the current clock time used by the streaming server . The processing module  checks the local index file to find the time_stamp value based on the calculated absolute time value. The streaming server  retrieves the intra frame at the file offset closest to the time_stamp and sends the data packets of the intra frame to the client .","For example, the request processing module  of a stream handler  receives a streaming request in a URL as \u201chttp:\/\/www.hostserver.com\/play?id=Stream12&time=600000\u201d from a video streaming server . The request contains a relative starting time information, i.e., \u201ctime=600000\u201d. The requested starting time is a relative starting timing value of 600,000 milliseconds (i.e., 10 minutes from the start of the video stream). The processing module  checks the local index database  and finds an index record with a closest matching time value, for example (Stream12, 900, 600000).). The \u201c900\u201d value here indicate the byte offset for the intra frame corresponding to the time value of 600,000 milliseconds relative to the start of the video stream. Alternatively, the streaming server  converts the relative starting time value 6000,000 to an absolute time value relative to the current clock time. Assume that the video stream was broadcasted 1,800,000 milliseconds ago (i.e., 30 minutes), then the streaming server  determines that the absolute time to which to rewind from the current clock time is 1,200,000 milliseconds (20 minutes). The processing module  checks the local index database  and finds an index record with a closest matching time value, for example (Stream12, 900, 600000). The streaming server  retrieves data packets of the intra frame beginning at the file offset  of the archived stream and starts sending the data packets from that file offset to the client .","In another embodiment, the client  converts the timing information in a user request to an absolute time_stamp and sends the time_stamp to the streaming server  along with a stream identification. The processing module  checks the local index file to find the time_stamp value closest to the received absolute time_stamp value. The processing module  retrieves the intra frame at the file offset closest to the time_stamp and sends the data packets of the intra frame.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 5","b":["200","210","200","510","210","512","212","514","214","210","516","220","518","220"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 6","b":["250","200","610","250","612","220","240","220","250","614","224","616","250","618","620","120"]},"A typical implementation of distributed video streaming system will include multiple streaming data centers as described in . Server side support for seamless rewinding of a video stream while the stream is being broadcast and scalable system performance across multiple streaming data centers  is further illustrated in .  is a flow chart of the operations for serving video streaming requests across multiple streaming data centers , thus providing enhanced scalability. Initially, the data center dispatcher  receives  a streaming request from a client. The dispatcher  dispatches  the request to one of the streaming data centers  based on one or more determining factors, such as traffic load of the available streaming data centers . The selected streaming data center  checks the local index database based on the stream ID of the request. In response to the requested data being available in the local archive database  of the selected data center , the streaming data center  processes  the streaming request as described in conjunction with  description. In response to the requested data not being available locally, the streaming data center  checks the local index database  which contains a duplicate of a global indexing file shared by all streaming data centers. Based on the global indexing file, the streaming data center  identifies  which the other streaming data center  has the requested stream. Where the streaming request is a rewind request the streaming data center  obtains a copy of the requested stream and stores in a local cache . The streaming data center  continues to process  the streaming request. The processing of the streaming request comprises the processing steps described in , such as identifying  the stream handler, extracting  rewinding time requirement, calculating  archive file offset and streaming  the requested video stream. Where the streaming request is a subscribe request, the streaming data center  redirects the request to the identified streaming data center. The identified streaming data center checks its local index database  to find which stream handler  to handle the data packets of the requested stream and sends the data packets of the requested stream from the identified stream handler .","The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.","The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First, the particular naming of the components, capitalization of terms, the attributes, data structures, or any other programming or structural aspect is not mandatory or significant, and the mechanisms that implement the invention or its features may have different names, formats, or protocols. Further, the system may be implemented via a combination of hardware and software, as described, or entirely in hardware elements. Also, the particular division of functionality between the various system components described herein is merely exemplary, and not mandatory; functions performed by a single system component may instead be performed by multiple components, and functions performed by multiple components may instead performed by a single component.","Some portions of above description present the features of the present invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations, while described functionally or logically, are understood to be implemented by computer programs. Furthermore, it has also proven convenient at times, to refer to these arrangements of operations as modules or by functional names, without loss of generality.","Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software, firmware or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. Furthermore, the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.","The algorithms and operations presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent to those of skill in the, along with equivalent variations. In addition, the present invention is not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein, and any references to specific languages are provided for disclosure of enablement and best mode of the present invention.","The present invention is well suited to a wide variety of computer network systems over numerous topologies. Within this field, the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to dissimilar computers and storage devices over a network, such as the Internet.","Finally, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
