---
title: Data integrity monitoring in trusted computing entity
abstract: A method of security monitoring of data files in a computer platform is carried out by a trusted component having a processor and trusted memory area. The method comprises creating one or a plurality of data files in an untrusted memory area of said computing platform, for each created data file, periodically generating a digest data by applying a hash function to each data file, storing the digest data in a trusted memory area and for each file periodically comparing a current digest data of the file with a previously generated digest data of the file. Any differences between a previous and a current digest data indicate that a file in the untrusted memory area has been corrupted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07457951&OS=07457951&RS=07457951
owner: Hewlett-Packard Development Company, L.P.
number: 07457951
owner_city: Houston
owner_country: US
publication_date: 20000525
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND TO THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["The subject matter of the present application may also be related to the following U.S. patent applications: \u201cData Event Logging in Computing Platform,\u201d Ser. No. 09\/979,902, filed Nov. 27, 2001; \u201cInformation System,\u201d Ser. No. 10\/080,476, filed Feb. 22, 2002; \u201cTrusted Computing Environment,\u201d Ser. No. 10\/080,477, filed Feb. 22, 2002; \u201cMethod of and Apparatus for Investigating Transactions in a Data Processing Environment,\u201d Ser. No. 10\/080,478, filed Feb. 22, 2002; \u201cMethod of and Apparatus for Ascertaining the Status of a Data Processing Environment,\u201d Ser. No. 10\/080,479, filed Feb. 22, 2002; \u201cTrusted Platform Evaluation,\u201d Ser. No. 10\/194,831, filed Jul. 11, 2002; \u201cPrivacy of Data on a Computer Platform,\u201d Ser. No. 10\/206,812, filed Jul. 26, 2002; and \u201cMethod and Apparatus for Locking an Application Within a Trusted Environment,\u201d Ser. No. 10\/208,718, filed Jul. 29, 2002.","The present invention relates to a computing platform, and particularly, although not exclusively, to methods and apparatus for verifying a state of data integrity of the computing platform.","Conventional prior art mass market computing platforms include the well-known personal computer (PC) and competing products such as the Apple Macintosh\u2122, and a proliferation of known palm-top and laptop personal computers. Generally, markets for such machines fall into two categories, these being domestic or consumer, and corporate. A general requirement for a computing platform for domestic or consumer use is a relatively high processing power, Internet access features, and multi-media features for handling computer games. For this type of computing platform, the Microsoft Windows\u00ae '95 and '98 operating system products and Intel processors dominate the market.","On the other hand, for business use, there are a plethora of available proprietary computer platform solutions available aimed at organizations ranging from small businesses to multi-national organizations. In many of these applications, a server platform provides centralized data storage, and application functionality for a plurality of client stations. For business use, other key criteria are reliability, networking features, and security features. For such platforms, the Microsoft Windows NT 4.0\u2122 operating system is common, as well as the Unix\u2122 operating system.","With the increase in commercial activity transacted over the Internet, known as \u201ce-commerce\u201d, there has been much interest in the prior art on enabling data transactions between computing platforms, over the Internet. However, because of the potential for fraud and manipulation of electronic data, in such proposals, fully automated transactions with distant unknown parties on a wide-spread scale as required for a fully transparent and efficient market place have so far been held back. The fundamental issue is one of trust between interacting computer platforms for the making of such transactions.","There have been several prior art schemes which are aimed at increasing the security and trustworthiness of computer platforms. Predominantly, these rely upon adding in security features at the application level, that is to say the security features are not inherently imbedded in the kernel of operating systems, and are not built in to the fundamental hardware components of the computing platform. Portable computer devices have already appeared on the market which include a smart card, which contains data specific to a user, which is input into a smart card reader on the computer. Presently, such smart cards are at the level of being add-on extras to conventional personal computers, and in some cases are integrated into a casing of a known computer. Although these prior art schemes go some way to improving the security of computer platforms, the levels of security and trustworthiness gained by prior art schemes may be considered insufficient to enable widespread application of automated transactions between computer platforms. Before businesses expose significant value transactions to electronic commerce on a widespread scale, they may require greater confidence in the trustworthiness of the underlying technology.","In the applicant's co-pending International Patent Applications \u2018Trusted Computing Platform\u2019 PCT\/GB 00\/00528, filed on 15 Feb. 2000, and \u2018Smartcard User Interface for Trusted Computing Platform\u2019 PCT\/GB 00\/00752, filed on 3 Mar. 2000, the entire contents of which are incorporated herein by reference, there is disclosed a concept of a \u2018trusted computing platform\u2019 comprising a computing platform which has a \u2018trusted component\u2019 in the form of a built-in hardware and software component. Two computing entities each provisioned with such a trusted component, may interact with each other with a high degree of \u2018trust\u2019. That is to say, where the first and second computing entities interact with each other the security of the interaction is enhanced compared to the case where no trusted component is present, because\n\n","Prior art computing platforms have several problems which need to be overcome in order to realize the potential of the applicants' above disclosed trusted component concept. In particular,\n\n","In particular, conventional computer platforms are susceptible to attack by computer viruses, of which there are thousands of different varieties. Several proprietary virus finding and correcting applications are known, for example the Dr Solomons\u2122 virus toolkit program, and the Microsoft\u2122 virus guard facility provided within the Windows\u2122 operating system. However, such virus packages protect primarily against known viruses, and new strains of virus are being developed and released into the computing and internet environment on an ongoing basis.","In one specific form, the invention provides a computer platform with a trusted component which generates integrity metrics describing the integrity of data on the computer platform, which can be reported to a user of the computer platform, or to a third party entity communicating with the computer platform, for example over a network connection.","Suitably the integrity metrics are dynamic metrics, which can provide continuous, or regular monitoring of the computer platform during its operation.","Methods for measuring and reporting the dynamic integrity metrics are operated partly within a trusted component, and partly within a computer platform being monitored by the trusted component.","According to a first aspect of the present invention is provided a method of security monitoring of a computer platform, said method comprising the steps of:\n\n","Preferably said step of generating a first digest data comprises applying a hash function to said data file to produce a hash function data corresponding to said data file.","Said step of creating a data file in a memory area of said computer platform may comprise copying an existing user data file into a reserved portion of said memory area of said computer platform.","Said step of creating a data file in said memory area may comprise generating a random or pseudo random data in a reserved portion of said memory area of said computer platform.","Preferably step of generating a digest data corresponding to said data file is carried out by an algorithm operating on said computer platform.","Said step of generating a digest data may comprise sending a said data file to a trusted component comprising a trusted processor and a trusted memory area, and generating said digest data by applying an algorithm to said data file in said trusted component.","According to a second aspect of the present invention there is provided a computer entity comprising:\n\n","According to a third aspect of the present invention there is provided a method of security monitoring a computer platform comprising a first data processing means and a first memory means, said method comprising the steps of:\n\n","Said method may further comprise the step of: assigning a directory name of a directory used for storing said data file in said reserved memory area said directory name being a different directory name to a directory name of said original user directory from said unreserved area of said first memory area in which said data file was originally located.","Preferably said step of creating a monitor data comprises: applying a one-way function algorithm to data in said data file, to produce said monitor data from said data stored in said data file.","There will now be described by way of example a best mode contemplated by the inventors for carrying out the invention, together with alternative embodiments. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however, to one skilled in the art, that the present invention may be practiced without limitation to these specific details. In other instances, well known methods and structures have not been described in detail so as not to unnecessarily obscure the present invention.","Specific implementations of the present invention comprise a computer platform having a processing means and a memory means, and a monitoring component which is physically associated with the computer platform, and known herein after as a \u201ctrusted component\u201d (or \u201ctrusted device\u201d) which monitors operation of the computer platform by collecting metrics data from the computer platform, and which is capable of verifying to other entities interacting with the computer platform, the correct functioning of the computer platform. Such a system is described in the applicant's copending International Patent Application entitled \u2018Trusted Computing Platform\u2019, No. PCT\/GB 00\/00528, filed on 15 Feb. 2000, the entire contents of which are incorporated herein by reference. A token device which may be personal to a human user of computer platform interacts with a trusted component associated with the computer platform to verify to the human user the trustworthiness of the computer platform. Appropriate token devices and systems are described in the applicant's copending International Patent Application No. PCT\/GB 00\/00752, entitled \u2018Smartcard User Interface for Trusted Computing Platform\u2019, filed on 3 Mar. 2000, the entire contents of which are incorporated herein by reference.","A user of a computing entity established a level of trust with the computer entity by use of such a trusted token device. The trusted token device is a personal and portable device having a data processing capability and in which the user has a high level of confidence. The trusted token device may perform the functions of:\n\n","The token device may be requested to take an action, for example by an application resident on the computing platform, or by remote application, or alternatively the token device may initiate an action itself.","In this specification, the term \u201ctrusted\u201d when used in relation to a physical or logical component, is used to mean that the physical or logical component always behaves in an expected manner. The behavior of that component is predictable and known. Trusted components have a high degree of resistance to unauthorized modification.","In this specification, the term \u2018computer entity\u2019 is used to describe a computer platform and a monitoring component.","In this specification, the term \u201ccomputer platform\u201d is used to refer to at least one data processor and at least one data storage means, usually but not essentially with associated communications facilities e.g. a plurality of drivers, associated applications and data files, and which may be capable of interacting with external entities e.g. a user or another computer platform, for example by means of connection to the internet, connection to an external network, or by having an input port capable of receiving data stored on a data storage medium, e.g. a CD ROM, floppy disk, ribbon tape or the like. The term \u201ccomputer platform\u201d encompasses the main data processing and storage facility of a computer entity.","The term \u2018pixmap\u2019, as used herein, is used broadly to encompass data defining either monochrome or colour (or greyscale) images. Whereas the term \u2018bitmap\u2019 may be associated with a monochrome image only, for example where a single bit is set to one or zero depending on whether a pixel is \u2018on\u2019 or \u2018off\u2019, \u2018pixmap\u2019 is a more general term, which encompasses both monochrome and colour images, where colour images may require up to 24 bits or more to define the hue, saturation and intensity of a single pixel.","By use of a trusted component in each computing entity, there is enabled a level of trust between different computing platforms. It is possible to query such a platform about its state, and to compare it to a trusted state, either remotely, or through a monitor on the computer entity. The information gathered by such a query is provided by the computing entity's trusted component which monitors the various parameters of the platform. Information provided by the trusted component can be authenticated by cryptographic authentication, and can be trusted.","The presence of the trusted component makes it possible for a piece of third party software, either remote or local to the computing entity to communicate with the computing entity in order to obtain proof of its authenticity and identity and to retrieve measured integrity metrics of that computing entity. The third party software can then compare the metrics obtained from the trusted component against expected metrics in order to determine whether a state of the queried computing entity is appropriate for the interactions which the third party software item seeks to make with the computing entity, for example commercial transaction processes.","This type of integrity verification between computing entities works well in the context of third party software communicating with a computing entity's trusted component, but does not provide a means for a human user to gain a level of trustworthy interaction with his or her computing entity, or any other computing entity which that person may interact with by means of a user interface.","In a preferred implementation described herein, a trusted token device is used by a user to interrogate a computing entity's trusted component and to report to the user on the state of the computing entity, as verified by the trusted component.","A \u201ctrusted platform\u201d used in preferred embodiments of the invention will now be described. This is achieved by the incorporation into a computing platform of a physical trusted device whose function is to bind the identity of the platform to reliably measured data that provides an integrity metric of the platform. The identity and the integrity metric are compared with expected values provided by a trusted party (TP) that is prepared to vouch for the trustworthiness of the platform. If there is a match, the implication is that at least part of the platform is operating correctly, depending on the scope of the integrity metric.","A user verifies the correct operation of the platform before exchanging other data with the platform. A user does this by requesting the trusted device to provide its identity and an integrity metric. (Optionally the trusted device will refuse to provide evidence of identity if it itself was unable to verify correct operation of the platform.) The user receives the proof of identity and the identity metric, and compares them against values which it believes to be true. Those proper values are provided by the TP or another entity that is trusted by the user. If data reported by the trusted device is the same as that provided by the TP, the user trusts the platform. This is because the user trusts the entity. The entity trusts the platform because it has previously validated the identity and determined the proper integrity metric of the platform.","Once a user has established trusted operation of the platform, he exchanges other data with the platform. For a local user, the exchange might be by interacting with some software application running on the platform. For a remote user, the exchange might involve a secure transaction. In either case, the data exchanged is \u2018signed\u2019 by the trusted device. The user can then have greater confidence that data is being exchanged with a platform whose behaviour can be trusted.","The trusted device uses cryptographic processes but does not necessarily provide an external interface to those cryptographic processes. Also, a most desirable implementation would be to make the trusted device tamperproof, to protect secrets by making them inaccessible to other platform functions and provide an environment that is substantially immune to unauthorised modification. Since tamper-proofing is impossible, the best approximation is a trusted device that is tamper-resistant, or tamper-detecting. The trusted device, therefore, preferably consists of one physical component that is tamper-resistant.","Techniques relevant to tamper-resistance are well known to those skilled in the art of security. These techniques include methods for resisting tampering (such as appropriate encapsulation of the trusted device), methods for detecting tampering (such as detection of out of specification voltages, X-rays, or loss of physical integrity in the trusted device casing), and methods for eliminating data when tampering is detected. Further discussion of appropriate techniques can be found at http:\/\/www.cl.cam.ac.uk\/\u02dcmgk25\/tamper.html. It will be appreciated that, although tamper-proofing is a most desirable feature of the present invention, it does not enter into the normal operation of the invention and, as such, is beyond the scope of the present invention and will not be described in any detail herein.","The trusted device is preferably a physical one because it must be difficult to forge. It is most preferably tamper-resistant because it must be hard to counterfeit. It typically has an engine capable of using cryptographic processes because it is required to prove identity, both locally and at a distance, and it contains at least one method of measuring some integrity metric of the platform with which it is associated.",{"@attributes":{"id":"p-0059","num":"0107"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","105","110","115","120","125","130","135","122"]},{"@attributes":{"id":"p-0060","num":"0108"},"figref":["FIG. 2","FIG. 1"]},"According to , the host computer  comprises a central processing unit (CPU) , or main processor, connected to main memory, which comprises RAM  and ROM , and to a BIOS memory  (which may be a reserved area of main memory) all of which are mounted on a motherboard  of the host computer . The CPU in this case is a Pentium\u2122 processor. The CPU is connected via a PCI (Peripheral Component Interconnect) bridge  to a PCI bus , to which are attached the other main components of the host computer . The bus  comprises appropriate control, address and data portions, which will not be described in detail herein. For a detailed description of Pentium processors and PCI architectures, which is beyond the scope of the present description, the reader is referred to the book, \u201cThe Indispensable PC Hardware Handbook\u201d, 3rd Edition, by Hans-Peter Messmer, published by Addison-Wesley, ISBN 0-201403994. Of course, the present embodiment is in no way limited to implementation using Pentium processors, Windows\u2122 operating systems or PCI buses.","The other main components of the host computer  attached to the PCI bus  include: a SCSI (small computer system interface) adaptor connected via a SCSI bus  to a hard disk drive  and a CD-ROM drive ; a LAN (local area network) adaptor  for connecting the host computer  to a LAN , via which the host computer  can communicate with other host computers (not shown), such as file servers, print servers or email servers, and the Internet ; an IO (input\/output) device , for attaching the keyboard , mouse  and smartcard reader ; and a trusted device . The trusted device handles all standard display functions plus a number of further tasks, which will be described in detail below. \u2018Standard display functions\u2019 are those functions that one would normally expect to find in any standard host computer , for example a PC operating under the Windows NT\u2122 operating system, for displaying an image associated with the operating system or application software. The significance of providing the function of a \u2018trusted display processor\u2019 in the trusted device  will be described further below. It should be noted that the keyboard  has a connection to the IO device , as well as a direct connection to the trusted device .","All the main components, in particular the trusted display processor , are preferably also integrated onto the motherboard  of the host computer , although, sometimes, LAN adapters  and SCSI adapters  can be of the plugin type.","The computer entity can be considered to have a logical, as well as a physical, architecture. The logical architecture has a same basic division between the computer platform, and the trusted component, as is present with the physical architecture described in  herein. That is to say, the trusted component is logically distinct from the computer platform to which it is physically related. The computer entity comprises a user space being a logical space which is physically resident on the computer platform (the first processor and first data storage means) and a trusted component space being a logical space which is physically resident on the trusted component. In the user space are one or a plurality of drivers, one or a plurality of applications programs, a file storage area; smart card reader; smart card interface; and a software agent which can perform operations in the user space and report back to trusted component. The trusted component space is a logical area based upon and physically resident in the trusted component, supported by the second data processor and second memory area of the trusted component. Monitor  receives images directly from the trusted component space. External to the computer entity are external communications networks e.g. the Internet, and various local area networks, wide area networks which are connected to the user space via the drivers (which may include one or more modem ports). An external user smart card inputs into smart card reader in the user space.","Typically, in a personal computer the BIOS program is located in a special reserved memory area, the upper K of the first megabyte do the system memory (addresses F\u00d8\u00d8\u00d8h to FFFFh), and the main processor is arranged to look at this memory location first, in accordance with an industry wide standard.","The significant difference between the platform and a conventional platform is that, after reset, the main processor is initially controlled by the trusted device, which then hands control over to the platform-specific BIOS program, which in turn initialises all input\/output devices as normal. After the BIOS program has executed, control is handed over as normal by the BIOS program to an operating system program, such as Windows NT\u2122, which is typically loaded into main memory from a hard disk drive (not shown).","Clearly, this change from the normal procedure requires a modification to the implementation of the industry standard, whereby the main processor  is directed to address the trusted device  to receive its first instructions. This change may be made simply by hard-coding a different address into the main processor . Alternatively, the trusted device  may be assigned the standard BIOS program address, in which case there is no need to modify the main processor configuration.","It is highly desirable for the BIOS boot block to be contained within the trusted device . This prevents subversion of the obtaining of the integrity metric (which could otherwise occur if rogue software processes are present) and prevents rogue software processes creating a situation in which the BIOS (even if correct) fails to build the proper environment for the operating system.","Although, in the preferred embodiment to be described, the trusted device  is a single, discrete component, it is envisaged that the functions of the trusted device  may alternatively be split into multiple devices on the motherboard, or even integrated into one or more of the existing standard devices of the platform. For example, it is feasible to integrate one or more of the functions of the trusted device into the main processor itself, provided that the functions and their communications cannot be subverted. This, however, would probably require separate leads on the processor for sole use by the trusted functions. Additionally or alternatively, although in the present embodiment the trusted device is a hardware device that is adapted for integration into the motherboard , it is anticipated that a trusted device may be implemented as a \u2018removable\u2019 device, such as a dongle, which could be attached to a platform when required. Whether the trusted device is integrated or removable is a matter of design choice. However, where the trusted device is separable, a mechanism for providing a logical binding between the trusted device and the platform should be present.","After system reset, the trusted device  performs a secure boot process to ensure that the operating system of the platform  (including the system clock and the display on the monitor) is running properly and in a secure manner. During the secure boot process, the trusted device  acquires an integrity metric of the computing platform . The trusted device  can also perform secure data transfer and, for example, authentication between it and a smart card via encryption\/decryption and signature\/verification. The trusted device  can also securely enforce various security control policies, such as locking of the user interface.","According to , the trusted device  comprises:","a microcontroller , programmed to control the overall operation of the trusted device  and to interact with the other elements of the trusted device  and other devices on the motherboard ;","non-volatile memory , for example flash memory, containing respective control program instructions (i.e. firmware) for controlling the operation of the microcontroller  (alternatively, the trusted device  could be embodied in an ASIC, which would typically provide greater performance and cost efficiency in mass production, but would generally be more expensive to develop and less flexible)\u2014functions contained in such control program instructions include a measurement function for acquiring an integrity metric for the platform  and an authentication function for authenticating smart card ;","an interface  for connecting the trusted device  to the PCI bus for receiving image data (i.e. graphics primitives) from the CPU  and also authentication data such as trusted image data from the smartcard , as will be described;","frame buffer memory , which comprises sufficient VRAM (video RAM) in which to store at least one full image frame (a typical frame buffer memory  is 1-2 Mbytes in size, for screen resolutions of 1280\u00d7768 supporting up to 16.7 million colours);","a video DAC (digital to analogue converter)  for converting pixmap data into analogue signals for driving the (analogue) VDU , which connects to the video DAC  via a video interface ;","an interface  for receiving signals directly from the trusted switch ;","volatile memory , for example DRAM (dynamic RAM) or more expensive SRAM (static RAM), for storing state information, particularly received cryptographic keys, and for providing a work area for the microcontroller ;","a cryptographic processor , comprising hardware cryptographic accelerators and\/or software, arranged to provide the trusted device  with a cryptographic identity and to provide authenticity, integrity and confidentiality, guard against replay attacks, make digital signatures, and use digital certificates, as will be described in more detail below; and","non-volatile memory , for example flash memory, for storing an identifier Iof the trusted device  (for example a simple text string name), a private key Sof the trusted device , a certificate Certsigned and provided by a trusted third party certification agency, such as VeriSign Inc., which binds the trusted device  with a signature public-private key pair and a confidentiality public-private key pair and includes the corresponding public keys of the trusted device .","A certificate typically contains such information, but not the public key of the CA. That public key is typically made available using a \u2018Public Key Infrastructure\u2019 (PKI). Operation of a PKI is well known to those skilled in the art of security.","The certificate Certis used to supply the public key of the trusted device  to third parties in such a way that third parties are confident of the source of the public key and that the public key is a part of a valid public-private key pair. As such, it is unnecessary for a third party to have prior knowledge of, or to need to acquire, the public key of the trusted device .","The trusted device  lends its identity and trusted processes to the host computer and the trusted display processor has those properties by virtue of its tamper-resistance, resistance to forgery, and resistance to counterfeiting. Only selected entities with appropriate authentication mechanisms are able to influence the processes running inside the trusted device . Neither an ordinary user of the host computer, nor any ordinary user or any ordinary entity connected via a network to the host computer may access or interfere with the processes running inside the trusted device . The trusted device  has the property of being \u201cinviolate\u201d.","The trusted device  is equipped with at least one method of reliably measuring or acquiring the integrity metric of the computing platform  with which it is associated. In the present embodiment, the integrity metric is acquired by the measurement function by generating a digest of the BIOS instructions in the BIOS memory. Such an acquired integrity metric, if verified as described above, gives a potential user of the platform  a high level of confidence that the platform  has not been subverted at a hardware, or BIOS program, level. Other known processes, for example virus checkers, will typically be in place to check that the operating system and application program code has not been subverted.","The measurement function has access to: non-volatile memory  for storing a hash program  and the private key Sof the trusted device , and volatile memory  for storing acquired integrity metric in the form of a digest .","In one preferred implementation, as well as the digest, the integrity metric includes a Boolean value, which is stored in volatile memory  by the measurement function, for reasons that will become apparent.","A preferred process for acquiring an integrity metric will now be described with reference to .","In step , at switch-on, the measurement function monitors the activity of the main processor  to determine whether the trusted device  is the first memory accessed. Under conventional operation, a main processor would first be directed to the BIOS memory first in order to execute the BIOS program. However, in accordance with the present embodiment, the main processor  is directed to the trusted device , which acts as a memory. In step , if the trusted device  is the first memory accessed, in step , the measurement function writes to volatile memory  a Boolean value which indicates that the trusted device  was the first memory accessed. Otherwise, in step , the measurement function writes a Boolean value which indicates that the trusted device  was not the first memory accessed.","In the event the trusted device  is not the first accessed, there is of course a chance that the trusted device  will not be accessed at all. This would be the case, for example, if the main processor  were manipulated to run the BIOS program first. Under these circumstances, the platform would operate, but would be unable to verify its integrity on demand, since the integrity metric would not be available. Further, if the trusted device  were accessed after the BIOS program had been accessed, the Boolean value would clearly indicate lack of integrity of the platform.","In step , when (or if) accessed as a memory by the main processor , the main processor  reads the stored native hash instructions  from the measurement function in step . The hash instructions  are passed for processing by the main processor  over the data bus . In step , main processor  executes the hash instructions  and uses them, in step , to compute a digest of the BIOS memory , by reading the contents of the BIOS memory  and processing those contents according to the hash program. In step , the main processor  writes the computed digest  to the appropriate non-volatile memory location  in the trusted device . The measurement function, in step , then calls the BIOS program in the BIOS memory , and execution continues in a conventional manner.","Clearly, there are a number of different ways in which the integrity metric may be calculated, depending upon the scope of the trust required.","The measurement of the BIOS program's integrity provides a fundamental check on the integrity of a platform's underlying processing environment. The integrity metric should be of such a form that it will enable reasoning about the validity of the boot process\u2014the value of the integrity metric can be used to verify whether the platform booted using the correct BIOS. Optionally, individual functional blocks within the BIOS could have their own digest values, with an ensemble BIOS digest being a digest of these individual digests. This enables a policy to state which parts of BIOS operation are critical for an intended purpose, and which are irrelevant (in which case the individual digests must be stored in such a manner that validity of operation under the policy can be established).","Other integrity checks could involve establishing that various other devices, components or apparatus attached to the platform are present and in correct working order. In one example, the BIOS programs associated with a SCSI controller could be verified to ensure communications with peripheral equipment could be trusted. In another example, the integrity of other devices, for example memory devices or co-processors, on the platform could be verified by enacting fixed challenge\/response interactions to ensure consistent results. Where the trusted device  is a separable component, some such form of interaction is desirable to provide an appropriate logical binding between the trusted device  and the platform. Also, although in the present embodiment the trusted device  utilises the data bus as its main means of communication with other parts of the platform, it would be feasible, although not so convenient, to provide alternative communications paths, such as hard-wired paths or optical paths. Further, although in the present embodiment the trusted device  instructs the main processor  to calculate the integrity metric in other embodiments, the trusted device itself is arranged to measure one or more integrity metrics.","Preferably, the BIOS boot process includes mechanisms to verify the integrity of the boot process itself. Such mechanisms are already known from, for example, Intel's draft \u201cWired for Management baseline specification v 2.0\u2014BOOT Integrity Service\u201d, and involve calculating digests of software or firmware before loading that software or firmware. Such a computed digest is compared with a value stored in a certificate provided by a trusted entity, whose public key is known to the BIOS. The software\/firmware is then loaded only if the computed value matches the expected value from the certificate, and the certificate has been proven valid by use of the trusted entity's public key. Otherwise, an appropriate exception handling routine is invoked.","Optionally, after receiving the computed BIOS digest, the trusted device  may inspect the proper value of the BIOS digest in the certificate and not pass control to the BIOS if the computed digest does not match the proper value. Additionally, or alternatively, the trusted device  may inspect the Boolean value and not pass control back to the BIOS if the trusted device  was not the first memory accessed. In either of these cases, an appropriate exception handling routine may be invoked.",{"@attributes":{"id":"p-0096","num":"0144"},"figref":["FIG. 14","FIG. 14"],"b":"260"},"At the first instance, a TP, which vouches for trusted platforms, will inspect the type of the platform to decide whether to vouch for it or not. This will be a matter of policy. If all is well, in step , the TP measures the value of integrity metric of the platform. Then, the TP generates a certificate, in step , for the platform. The certificate is generated by the TP by appending the trusted device's public key, and optionally its ID label, to the measured integrity metric, and signing the string with the TP's private key.","The trusted device  can subsequently prove its identity by using its private key to process some input data received from the user and produce output data, such that the input\/output pair is statistically impossible to produce without knowledge of the private key. Hence, knowledge of the private key forms the basis of identity in this case. Clearly, it would be feasible to use symmetric encryption to form the basis of identity. However, the disadvantage of using symmetric encryption is that the user would need to share his secret with the trusted device. Further, as a result of the need to share the secret with the user, while symmetric encryption would in principle be sufficient to prove identity to the user, it would insufficient to prove identity to a third party, who could not be entirely sure the verification originated from the trusted device or the user.","In step , the trusted device  is initialised by writing the certificate Certinto the appropriate non-volatile memory locations of the trusted device . This is done, preferably, by secure communication with the trusted device  after it is installed in the motherboard . The method of writing the certificate to the trusted device  is analogous to the method used to initialise smart cards by writing private keys thereto. The secure communications is supported by a \u2018master key\u2019, known only to the TP, that is written to the trusted device (or smart card) during manufacture, and used to enable the writing of data to the trusted device ; writing of data to the trusted device  without knowledge of the master key is not possible.","At some later point during operation of the platform, for example when it is switched on or reset, in step , the trusted device  acquires and stores the integrity metric  of the platform.","When a user wishes to communicate with the platform, in step , he creates a nonce, such as a random number, and, in step , challenges the trusted device  (the operating system of the platform, or an appropriate software application, is arranged to recognise the challenge and pass it to the trusted device , typically via a BIOS-type call, in an appropriate fashion). The nonce is used to protect the user from deception caused by replay of old but genuine signatures (called a \u2018replay attack\u2019) by untrustworthy platforms. The process of providing a nonce and verifying the response is an example of the well-known \u2018challenge\/response\u2019 process.","In step , the trusted device  receives the challenge and creates an appropriate response. This may be a digest of the measured integrity metric and the nonce, and optionally its ID label. Then, in step , the trusted device  signs the digest, using its private key, and returns the signed digest, accompanied by the certificate Cert, to the user.","In step , the user receives the challenge response and verifies the certificate using the well known public key of the TP. The user then, in step , extracts the trusted device's  public key from the certificate and uses it to decrypt the signed digest from the challenge response. Then, in step , the user verifies the nonce inside the challenge response. Next, in step , the user compares the computed integrity metric, which it extracts from the challenge response, with the proper platform integrity metric, which it extracts from the certificate. If any of the foregoing verification steps fails, in steps , ,  or , the whole process ends in step  with no further communications taking place.","Assuming all is well, in steps  and , the user and the trusted platform use other protocols to set up secure communications for other data, where the data from the platform is preferably signed by the trusted device .","Further refinements of this verification process are possible. It is desirable that the challenger becomes aware, through the challenge, both of the value of the platform integrity metric and also of the method by which it was obtained. Both these pieces of information are desirable to allow the challenger to make a proper decision about the integrity of the platform. The challenger also has many different options available\u2014it may accept that the integrity metric is recognised as valid in the trusted device , or may alternatively only accept that the platform has the relevant level of integrity if the value of the integrity metric is equal to a value held by the challenger (or may hold there to be different levels of trust in these two cases).","The techniques of signing, using certificates, and challenge\/response, and using them to prove identity, are well known to those skilled in the art of security and therefore need not be described in any more detail herein.","The user's smart card  is a token device, separate from the computing entity, which interacts with the computing entity via the smart card reader port . A user may have several different smart cards issued by several different vendors or service providers, and may gain access to the internet or a plurality of network computers from any one of a plurality of computing entities as described herein, which are provided with a trusted component and smart card reader. A user's trust in the individual computing entity to which s\/he is using is derived from the interaction between the user's trusted smart card token and the trusted component of the computing entity. The user relies on their trusted smart card token to verify the trustworthiness of the trusted component.","The processing engine of a smartcard suitable for use in accordance with the preferred embodiment is illustrated in . The processing engine comprises a processor  for enacting standard encryption and decryption functions, and for simple challenge\/response operations for authentication of the smart card  and verification of the platform , as will be discussed below. In the present embodiment, the processor  is an 8-bit microcontroller, which has a built-in operating system and is arranged to communicate with the outside world via asynchronous protocols specified through ISO 7816-3, 4, T=0, T=1 and T=14 standards. The smartcard also comprises non-volatile memory , for example flash memory, containing an identifier Iof the smartcard , a private key S, used for digitally signing data, and a certificate Cert, provided by a trusted third party certification agency, which binds the smartcard with public-private key pairs and includes the corresponding public keys of the smartcard  (the same in nature to the certificate Certof the trusted display processor ). Further, the smartcard contains \u2018seal\u2019 data SEAL in the non-volatile memory , the significance of which will be discussed further below.","A preferred process for authentication between a user smart card  and a platform  will now be described with reference to the flow diagram in . As will be described, the process conveniently implements a challenge\/response routine. There exist many available challenge\/response mechanisms. The implementation of an authentication protocol used in the present embodiment is mutual (or 3-step) authentication, as described in ISO\/IEC 9798-3. Of course, there is no reason why other authentication procedures cannot be used, for example 2-step or 4-step, as also described in ISO\/IEC 9798-3.","Initially, the user inserts their user smart card  into the smart card reader  of the platform  in step . Beforehand, the platform  will typically be operating under the control of its standard operating system and executing the authentication process, which waits for a user to insert their user smart card . Apart from the smart card reader  being active in this way, the platform  is typically rendered inaccessible to users by \u2018locking\u2019 the user interface (i.e. the screen, keyboard and mouse).","When the user smart card  is inserted into the smart card reader , the trusted device  is triggered to attempt mutual authentication in step by generating and transmitting a nonce A to the user smart card  in step . A nonce, such as a random number, is used to protect the originator from deception caused by replay of old but genuine responses (called a \u2018replay attack\u2019) by untrustworthy third parties.","In response, in step , the user smart card  generates and returns a response comprising the concatenation of: the plain text of the nonce A, a new nonce B generated by the user smart card , the ID of the trusted device  and some redundancy; the signature of the plain text, generated by signing the plain text with the private key of the user smart card ; and a certificate containing the ID and the public key of the user smart card .","The trusted device  authenticates the response by using the public key in the certificate to verify the signature of the plain text in step . If the response is not authentic, the process ends in step . If the response is authentic, in step  the trusted device  generates and sends a further response including the concatenation of: the plain text of the nonce A, the nonce B, the ID of the user smart card  and the acquired integrity metric; the signature of the plain text, generated by signing the plain text using the private key of the trusted device ; and the certificate comprising the public key of the trusted device  and the authentic integrity metric, both signed by the private key of the TP.","The user smart card  authenticates this response by using the public key of the TP and comparing the acquired integrity metric with the authentic integrity metric, where a match indicates successful verification, in step . If the further response is not authentic, the process ends in step .","If the procedure is successful, both the trusted device  has authenticated the user smart card  and the user smart card  has verified the integrity of the trusted platform  and, in step , the authentication process executes the secure process for the user. Then, the authentication process sets an interval timer in step . Thereafter, using appropriate operating system interrupt routines, the authentication process services the interval timer periodically to detect when the timer meets or exceeds a pre-determined timeout period in step .","Clearly, the authentication process and the interval timer run in parallel with the secure process.","When the timeout period is met or exceeded, the authentication process triggers the trusted device  to re-authenticate the user smart card , by transmitting a challenge for the user smart card  to identify itself in step . The user smart card  returns a certificate including its ID and its public key in step . In step , if there is no response (for example, as a result of the user smart card  having been removed) or the certificate is no longer valid for some reason (for example, the user smart card has been replaced with a different smart card), the session is terminated by the trusted device  in step . Otherwise, in step , the process from step  repeats by resetting the interval timer.","In this preferred implementation, the monitor  is driven directly by a monitor subsystem contained within the trusted component itself. In this embodiment, in the trusted component space are resident the trusted component itself, and displays generated by the trusted component on monitor . This arrangement is described further in the applicant's copending European Patent Application No. 99304164.9, entitled \u201cSystem for Digitally Signing a Document\u201d and filed on 28 May 1999 (and any patent applications claiming priority therefrom, including an International Patent Application of even date to the present application), which is incorporated by reference herein.","As will become apparent, use of this form of trusted device provides a secure user interface in particular by control of at least some of the display functionality of the host computer. More particularly, the trusted device (for these purposes termed a trusted display processor) or a device with similar properties is associated with video data at a stage in the video processing beyond the point where data can be manipulated by standard host computer software. This allows the trusted display processor to display data on a display surface without interference or subversion by the host computer software. Thus, the trusted display processor can be certain what image is currently being displayed to the user. This is used to unambiguously identify the image (pixmap) that a user is signing. A side-effect of this is that the trusted display processor may reliably display any of its data on the display surface, including, for example, the integrity metrics of the prior patent application, or user status messages or prompts.","The elements and functionality of a \u201ctrusted display\u201d in which the trusted device is a trusted display processor will now be described further with reference to .","It will be apparent from  that the frame buffer memory  is only accessible by the trusted display processor  itself, and not by the CPU . This is an important feature of the preferred embodiment, since it is imperative that the CPU , or, more importantly, subversive application programs or viruses, cannot modify the pixmap during a trusted operation. Of course, it would be feasible to provide the same level of security even if the CPU  could directly access the frame buffer memory , as long as the trusted display processor  were arranged to have ultimate control over when the CPU  could access the frame buffer memory . Obviously, this latter scheme would be more difficult to implement.","A typical process by which graphics primitives are generated by a host computer  will now be described by way of background. Initially, an application program, which wishes to display a particular image, makes an appropriate call, via a graphical API (application programming interface), to the operating system. An API typically provides a standard interface for an application program to access specific underlying display functions, such as provided by Windows NT\u2122, for the purposes of displaying an image. The API call causes the operating system to make respective graphics driver library routine calls, which result in the generation of graphics primitives specific to a display processor, which in this case is the trusted display processor . These graphics primitives are finally passed by the CPU  to the trusted display processor . Example graphics primitives might be \u2018draw a line from point x to point y with thickness z\u2019 or \u2018fill an area bounded by points w, x, y and z with a colour a\u2019.","The control program of the microcontroller  controls the microcontroller to provide the standard display functions to process the received graphics primitives, specifically:","receiving from the CPU  and processing graphics primitives to form pixmap data which is directly representative of an image to be displayed on the VDU  screen, where the pixmap data generally includes intensity values for each of the red, green and blue dots of each addressable pixel on the VDU  screen;","storing the pixmap data into the frame buffer memory ; and","periodically, for example sixty times a second, reading the pixmap data from the frame buffer memory , converting the data into analogue signals using the video DAC and transmitting the analogue signals to the VDU  to display the required image on the screen.","Apart from the standard display functions, the control program includes a function to mix display image data deceived from the CPU  with trusted image data to form a single pixmap. The control program also manages interaction with the cryptographic processor and the trusted switch .","The trusted display processor  forms a part of the overall \u2018display system\u2019 of the host computer ; the other parts typically being display functions of the operating system, which can be \u2018called\u2019 by application programs and which access the standard display functions of the graphics processor, and the VDU . In other words, the \u2018display system\u2019 of a host computer  comprises every piece of hardware or functionality which is concerned with displaying an image.","As already mentioned, the trusted display of this embodiment relies on interaction between the trusted display processor and the user smartcard . Particularly significant is the \u2018seal\u2019 data SEAL in the non-volatile memory , which can be represented graphically by the trusted display processor  to indicate to the user that a process is operating securely with the user's smartcard, as will be described in detail below. In the present embodiment, the seal data SEAL is in the form of an image pixmap, which was originally selected by the user as a unique identifier, for example an image of the user himself, and loaded into the smartcard  using well-known techniques. The processor  also has access to volatile memory , for example RAM, for storing state information (such as received keys) and providing a working area for the processor , and an interface , for example electrical contacts, for communicating with a smart card reader.","Seal images can consume relatively large amounts of memory if stored as pixmaps. This may be a distinct disadvantage in circumstances where the image needs to be stored on a smartcard , where memory capacity is relatively limited. The memory requirement may be reduced by a number of different techniques. For example, the seal image could comprise: a compressed image, which can be decompressed by the trusted display processor ; a thumb-nail image that forms the primitive element of a repeating mosaic generated by the trusted display processor ; a naturally compressed image, such as a set of alphanumeric characters, which can be displayed by the trusted display processor  as a single large image, or used as a thumb-nail image as above. In any of these alternatives, the seal data itself may be in encrypted form and require the trusted display processor  to decrypt the data before it can be displayed. Alternatively, the seal data may be an encrypted index, which identifies one of a number of possible images stored by the host computer  or a network server. In this case, the index would be fetched by the trusted display processor  across a secure channel and decrypted in order to retrieve and display the correct image. Further, the seal data could comprise instructions (for example PostScript\u2122 instructions) that could be interpreted by an appropriately programmed trusted display processor  to generate an image.",{"@attributes":{"id":"p-0131","num":"0179"},"figref":"FIG. 16","b":["100","260","122","100","260","122"]},"In accordance with , the host computer  includes: an application process , for example a wordprocessor process, which requests the signing of a document; document data ; an operating system process ; an API  process for receiving display calls from the application process ; a keyboard process  for providing input from the keyboard  to the application process ; a mouse process  for providing input from the mouse  to the application process ; and a graphics primitives process  for generating graphics primitives on the basis of calls received from the application process via the API  process. The API process , the keyboard process , the mouse process  and the graphics primitives process  are build on top of the operating system process  and communicate with the application process via the operating system process .","The remaining functions of the host computer  are those provided by the trusted display processor . These functions are: a control process  for coordinating all the operations of the trusted display processor , and for receiving graphics primitives from the graphics primitives process and signature requests from the application process ; a summary process  for generating a signed summary representative of a document signing procedure in response to a request from the control process ; a signature request process  for acquiring a digital signature of the pixmap from the smartcard ; a seal process  for retrieving seal data  from the smartcard ; a smartcard process  for interacting with the smartcard  in order to enact challenge\/response and data signing tasks required by the summary process , the signature request process  and the seal process ; a read pixmap process  for reading stored pixmap data  and passing it to the signature request process  when requested to do so by the signature request process ; a generate pixmap process  for generating the pixmap data  on the basis of graphics primitives and seal image data received from the control process ; a screen refresh process  for reading the pixmap data, converting it into analogue signals and transmitting the signals to the VDU ; and a trusted switch process  for monitoring whether the trusted switch  has been activated by the user. The smartcard process  has access to the trusted display processor's identity data I, private key Sdata and certificate Certdata . In practice, the smart card and the trusted display processor interact with one another via standard operating system calls.","The smartcard  has: seal data ; a display processor process  for interacting with the trusted display processor  to enact challenge\/response and data signing tasks; smartcard identity data I, smartcard private key data Sand smartcard certificate data Cert.","In other embodiments of the invention, the functionality of trusted switch  may be replaced by software. When the trusted switch process  is activated (as in step ), instead of waiting for operation of a dedicated switch, the trusted component  uses its random number generation capability to generate a nonce in the form of a textual string. This textual string is then displayed on the trusted display in a message of the form \u201cPlease enter <textual string> to confirm the action>. To confirm the action, the user must then enter the given textual string, using the keyboard . As the textual string will be different every time, and because no other software has access to this textual string (it passes only between the trusted processor  and the display), it will not be possible for malicious software to subvert this confirmation process.","On each individual smart card may be stored a corresponding respective image data which is different for each smart card. For user interactions with the trusted component, e.g. for a dialogue box monitor display generated by the trusted component, the trusted component takes the image data from the user's smart card, and uses this as a background to the dialogue box displayed on the monitor . Thus, the user has confidence that the dialogue box displayed on the monitor  is generated by the trusted component. The image data is preferably easily recognizable by a human being in a manner such that any forgeries would be immediately apparent visually to a user. For example, the image data may comprise a photograph  of a user. The image data on the smart card may be unique to a person using the smart card.","In preferred embodiments of the present invention, the trusted component operates to monitor data, including user data files and applications, on the computer platform by creating a set of data files which the trusted component dynamically monitors for any changes in the data, including absence of the data, which may occur as a result of the computer platform being compromised by a virus attack, or other interference. The trusted component is allocated or seizes a plurality of memory location addresses and\/or file directories in the first memory area of the computer platform, which become a user space reserved for use by the trusted component. The reserved memory area comprises a selected proportion of the total memory area of the computer platform. Within the reserved memory area, the trusted component preferably creates a plurality of directories. Within the reserved memory area, the trusted component also creates a plurality of data files, which can either be copies from real user files on the computer platform, or which can be created by the trusted component. The primary purpose of these files is to act as a set of files to which the trusted component has access, and to which ordinary user accounts of the computer platform, under normal operation, do not have access. Because the files in the reserved memory area are reserved for use by the trusted component and under normal operation, are not accessed by applications on the computer platform, the trusted component can use files stored in the reserve memory area as a \u201ccontrol\u201d set of files by which to monitor for unauthorized changes to the data, for example as caused by a virus. It will be appreciated that the \u2018NT administrator\u2019 or the \u2018Unix super user\u2019 or similar accounts with overriding powers must refrain from making changes to the data in the reserved space, even though it can.","Because the files stored in the reserve memory area are either duplicates of user files, duplicates of applications or files created specifically by the trusted component, they are of little or no value to the computer platform for performing its normal operating functions. If the files in the reserve memory area become corrupted for any reason, they may be sacrificed and are easily replaceable. However, since access to the reserved access memory area is restricted to the trusted component, any corruption of the files in the reserve memory area is deemed to be indicative of changes to files occurring through undesirable mechanisms, e.g. by a virus program. The files in the reserve memory area are periodically monitored by the trusted component to check for such corruption. If corruption is discovered, by the monitoring process, then a measure of the likely corruption of the remaining memory area on the computer platform can be determined by probabilistic methods.","By providing a reserved memory area containing files which can be sacrificed, if the computer platform is compromised by a hostile attack, e.g. a virus, then the sacrificial files stored in the reserved memory area are at least as likely to be affected as other user data files stored in the remaining portion of the memory of the computer platform. Thus any corruption of the files in the reserve memory area, if spotted early enough, may give an indication to the trusted component that file corruption is occurring on the computer platform, in which case the trusted component can take action to limit the spread of corruption at an early stage, and preferably before damage is done to important data files stored in the remaining memory area of the computer platform.","Referring to  herein, there is illustrated schematically a logical architecture of the trusted computer entity referred to in  herein. The logical architecture has a same basic division between the computer platform, and the trusted component, as is present with the physical architecture described in  herein. That is to say, the trusted component is logically distinct from the computer platform to which it is physically related. In , components of the computer entity are illustrated within the dotted line , whereas elements external to the computer entity, such as the Internet , and one or more local area networks or wide area networks , and a user's smart card  are shown outside dotted line . Logically, the computer entity is divided into \u201cuser space\u201d , comprising all logical areas accessible by computer platform, and \u201ctrusted component space\u201d  comprising areas accessible solely by the trusted component . The user space  includes one or more communications port facilities ; one or more applications programs , for example a word processor, database package, accounts package, Internet access application, etc; a set of file directories ; smart card interface , for interfacing with the smart card reader , optionally a random number generator , and optionally, a software agent  which is used by the trusted component to manipulate files and applications in user space, and to report back to the trusted component. Optionally a software agent  is used by the smartcard  to manipulate files and applications in user space, and to report back to the smartcard.","In the trusted component space, are resident the trusted component itself, displays generated by the trusted component on monitor ; and confirmation key , inputting a confirmation signal via a confirmation key interface.","Within the file directory area  is a set of reserved directories  for creation of a set of data files reserved for use by the trusted component, and used for monitoring in the user space according to the specific methods described herein. For ease of reference, such files will hereafter be referred as \u2018reserved files\u2019.","The random data generator  is used to generate random data, forming the content of various of the reserved files in the reserved one or more directories.","Referring to  herein, the software agents  and  each comprise a corresponding respective one or more file manipulation programs ; and a corresponding respective communications interface . The file manipulation program(s) within the software agent  in user space operate on instruction from smartcard  to: monitor a plurality of said data files in the one or plurality of directories in user space reserved for use by the user of the smartcard: copy said files to user space reserved for use by the user of the smartcard but which also allows read access by the trusted component: and delete said copied files. The file manipulation program(s) within the software agent  in user space operate on instruction from trusted component  to: create and monitor a plurality of data files in the one or plurality of directories in user space reserved for use by the trusted component: copy files from user space reserved for use by the user of the smartcard but which also allows read access by the trusted component.","Referring to  herein, there is illustrated schematically logical components of trusted component . Trusted component  comprises a communications interface ; a set of cryptographic functions  including a random number generator and cryptographic algorithms for communicating with smart card reader ; one or more monitoring applications  for monitoring data relating to reserved files; a display interface program  for generating an interactive display on monitor  and allowing interface via the display using pointing device  and keypad ; optionally one or more file manipulation programs ; native code  for monitoring files by gathering and reporting information describing the data content of the files to the trusted component as in software agent ; and a dictionary program  for generating text and strings of text for using as data to name directories and files and fill reserved files in user space . The trusted component also contains a dictionary of file names, which is used automatically to name and rename the reserved file directories and reserved files.","There will now be described specific methods of operation of the computer entity for security monitoring of data files in the computer platform, by the trusted component . In the following description, there are illustrated in  herein main process steps operated by the trusted component and computer platform for performing the method. It will be understood by those skilled in the art that such process steps may be implemented in the form of code in a conventional programming language stored in the memory of the trusted component and the computer platform. Steps relating to operations carried out in user space, in general are executed on the processor  according to code stored in either the memory of the trusted component or the computer platform, but some part(s) of those operations may be carried out inside the trusted component  according to code stored in a memory device of the trusted component. On the other hand, where process steps are shown as operating in trusted component space, the steps are executed within the trusted component  (for example on the processor ) according to code stored in a memory device of the trusted component. Implementation of such code is well known by those skilled in the art, and such code may be written in conventional computer program languages such as C, C++, or the like.","Referring to  herein, there will now be described a first mode of operation for a security monitoring process, which is activated by user. The computer platform generates a conventional operating system display having a plurality of icons, for example a display as produced by the Windows 95\u2122 operating system. An icon is provided on the operating system display, created in known manner, which when activated by a user using the pointing device, e.g. mouse  results in a dialog box display generated by trusted component , for example as shown in  herein. The dialog box  is generated by display interface  of trusted component . The dialog box  comprises one or more menu displays , displayed upon a display background comprising an image  retrieved from a user smart card  which must be inserted into smart card reader device  in order to provide the image on the dialog box display background. Since the image displayed on the dialog box background is that stored on the user smart card, the user can be confident that the dialog box is created by the trusted component, since the obtaining of the image data from the smart card is carried out by obtained encrypted image data from the smart card using crypto functions ,  stored in the trusted component. On viewing the dialog box , the user may activate pointing device  to click on an icon display  to produce a drop-down menu  with options for file manipulation. For example, menu options may include icons to: start file monitoring; stop file monitoring; enable the copying of files; disable the copying of files; enable the creation of encrypted files; disable the creation of encrypted files; delete files in the reserved memory area of the computer platform or to display metrics of files. On the user selecting one of the options, the trusted component generates a confirmation display  prompting the user to activate the confirmation key . Because the confirmation key  is wired directly to the trusted component , activation of the confirmation key provides a secure method by which the trusted component is activated directly by the user without any third party intervention, and ensures that the options selected through the menu display from the pointing device input  are independently confirmed by separate key activation through a separate channel avoiding data bus , and avoiding the computer platform, and directly to the trusted component .","Referring to  herein, there is illustrated schematically process steps operated by the combination of the software agent  and trusted component  for monitoring of data files file directories .","In step , the trusted component  seizes a portion of the memory capacity of the computer platform, for example hard disc or RAM for exclusive access by the trusted component, via the software agent . The software agent  may seize the memory area by creating one or a plurality of directories, for its own use, either directly, bypassing the operating system functions for file creation, or alternatively by making appropriate instructions to the operating system to create the appropriate directory or directories. Agent  creates a plurality of data files in those reserved directories in step . Creation of data files can be by three methods. Firstly, file creation may occur by the copying into the reserved directories of existing files on the computer platform belonging to the user, with the user's permission. Secondly, agent  may allocate file names within those reserved directories. The file names and names of reserved dictionaries being provided by dictionary program . The data within the files is provided by dictionary program  within the trusted component  which generates individual words and strings of words of text which are passed to agent , which then writes those words or strings of words into the created reserved files in the reserved directories. Thirdly, the agent  may create its own data files of substantially random data, by storing random bits generated by random number generator  (or by the random number generator inside the trusted component's cryptographic functions) in the created files. In step , agent  monitors the plurality of created reserved data files stored in the reserved memory area . A data digest of each memory file created by agent  is produced by applying a hash function algorithm to the data. The hash function may be applied by the agent  and the digest data for each agent created file reported back periodically to trusted component , which stores the digest data in its trusted memory area . Alternatively, the agent  may periodically report each agent created file to the trusted component , which generates its own digest using its crypto functions and stores the digest data in its trusted memory area . Trusted component  stores at least two digest data, comprising a previous digest data and a most recently received current digest data for each monitored reserved data file in its memory area . Trusted component  operates an algorithm comprising digest monitoring component , to check whether the previous digest data of each particular agent created data file is identical to the current digest data of that file. Within digest monitoring component , there is provided a separate file space into which results of the monitoring process are recorded. Any changes to the reserved data files in the reserved memory area in user space  discovered by monitoring the digest data within the trusted component are recorded to the error record file within the trusted component in step . From time to time changes in data files stored in the reserved memory area may occur due to normal system malfunctions, which are not due to hostile attack by external stimuli, e.g. viruses. However, such changes to the data files may be very rare. An algorithm within the monitoring component of  of the trusted component applies a statistical test as to whether any changes to data files which have been recorded in the error file are statistically relevant. For example, the algorithm within the trusted component may be preset to allow a predetermined number of errors to occur within any given period. For example, an error level of one error per month on a predetermined number of reserved files may be preset as an allowable rate of errors. If more errors occur than this in the predetermined time, giving rise to a significant level of errors in the monitored files in the reserved memory area, in step , the test applied by the trusted component to see whether such tests are significant may prove positive. If no significant changes in the stored data files are determined in step , the trusted component and agent  continues to periodically monitor the selected data files in the reserved area of user memory on the computer platform in step . If the number of errors are significant, in step  the trusted component may generate an alarm data indicating a significant level of data corruption in the monitored files, and in step  may report such corruption by generating a display on monitor . Further, on experiencing a significant level of errors in the monitored data files, resulting in an alarm condition, the trusted component may notify any other third party entities communicating with the computer platform, that the computer platform is in an alarm condition and possibly that data on the platform or the functionality of the platform has been compromised.","Applying a hash program to data in the user space  using the main processor  and sending the digest to the trusted component  is fast, because of the superior processing capabilities of user space , but has the disadvantage that the hash program may have been subverted (by a virus, for example), so there is a reduced level of confidence in the digest given to the trusted component. Sending the entire original file data to the trusted component, and causing the trusted component to compute a digest using its own resources, for example on processor  and with its crypto functions, has the disadvantage that the process is slower, because the trusted component has inferior computing capability than the user space . It has the advantage that the hash program cannot be subverted, hence there is greater confidence in the value of the digest.","Where file manipulation is carried out by agent , its file manipulation program  runs continuously, monitoring files in the reserved directories, and reporting back to trusted component .","Because the files in the reserved directories in the user space which are created by agent , look to a computer virus as being exactly the same as real data files, or in the case of random data, look the same as encrypted data files, a hostile virus having entered into the computer platform is equally likely to affect the sacrificial files stored in the reserved directories as it is to attack user data files in the user space. The proportion of data files, in terms of file numbers, or in terms of megabytes of data stored in the files, can be selected by a user, by means of a drop-down menu in a dialog box, or can be preset in the trusted component, or agent software. For example, if the number of sacrificial files is set at being 10% of the number of real user files created, then for viruses which identify files by file name, there is a corresponding percentage (for example 10%) probability that a virus will attack the sacrificial files in reserved directories, of all the files including sacrificial files and user files stored on the computer platform. Thus, the extent, number and frequency of errors occurring in the sacrificial file directories may give a statistical measure of the extent of damage done by a computer virus. Because monitoring of the sacrificial files is continuous, whilst the computer entity is operating, the best mode herein may provide real time monitoring for attack by external programs, which provides an alarm function to operate when a predetermined level of file corruption has occurred on the computer platform, in a manner which cannot be interfered with by users of the computer platform, thereby lending increased trustability to the computer entity.","Referring to  herein, there is illustrated schematically in more detail process steps carried out by agent  in creating data files in the reserved directories by copying user files, and reporting to trusted component . In step , agent  obtains a named user data file from the untrusted memory area of the computer platform, with the user's permission. The user gave that permission by selecting the \u2018enable copy files\u2019 option on the file menu  in the security function dialog box . The user may indicate his or her permission for copying the file, by pressing confirmation key  upon display of the pressed confirmation key display prompt  as described previously. In step , agent  selects a new file name for the file copied over from the user files. The new file name may be selected randomly by agent , or may be generated according to predetermined rules stored in agent . A different file name is created, for the copied user file in the reserved directory in which it is stored, which is specific to the agent  and accessible only by agent . In step , the agent stores the renamed user data file in the reserved directory in the reserved memory area of the (untrusted) computer platform memory area, e.g. the hard disc or RAM. In step , agent  applies a hash function to the data file to generate a corresponding respective digest data for the file. The digest data is reported back to trusted component  in step . The trusted component stores the digest data in a trusted memory area  as described previously in step . In step , the trusted component determines whether it is the first time that a digest data has been created for that file. That is to say, the trusted component determines whether an historical data for that particular file already exists in the trusted component's memory area , or whether the currently obtained digest data from agent  is the first data obtained for that file. If the digest data obtained for that file is the first digest data obtained for that file, then the trusted component stores the digest data in its trusted memory area as current digest data, and waits for agent  to report a further digest data on the same file after a predetermined monitoring period i.e. waits until agent  applies a hash function as per step  described previously and reports a new current digest data. On receiving the new current digest data (the second digest data for that file) the trusted component then has a current and an historical digest data for that file, and can make a comparison between the current and historical stored digest data in trusted memory area  for a particular file in step . If the result of the comparison is that the current digest data for a particular file is the same as previous historical digest data for the file in step , then after waiting a predetermined period in step  during which agent  periodically monitors the user data file, agent  applies the hash function in step  and reports the digest data to trusted component  in steps -. However, if it is determined that there is a change in the current digest data for a particular file compared to the previously reported historical digest data in step , then the trusted component records the details of the file number and time of the change in data in the error file in the trusted memory area  for that file in step .","Hash functions are well-known in the prior art and comprise one way functions which are capable of generating a relatively small output data from a relatively large quantity of input data, where a small change in the input data results in a significant change in the output data. Thus, a data file to which is applied a hash function results in a first digest data (the output of the hash function). A small change e.g. a single bit of data in the original data file will result in a significantly different output when the hash function is reapplied to the modified data file. Thus, a data file comprising megabytes of data may be input into the hash function and result in a digital output of the order of 128 to 160 bits length, as the resultant digest data. Having a relatively small amount of digest data generated from a data file stored in the reserved directory is an advantage, since it takes up less memory space and less processing power in the trusted component.","Referring to  herein, there is illustrated schematically interactive steps between trusted component , proxy agent , proxy agent , and smart card , via smart card interface  and smart card reader  for copying of user files to reserved directories, and for continuous monitoring of sacrificial reserved files in the user space .","In step , trusted component  requests the smart card, via agent , for an update of a user's data files. In step , smart card  receives the request, which at this stage is unauthorized, and in response to receipt, in step  sends a nonce to the agent  which is received by the agent in step . The nonce may comprise a string of random bits created by smart card . The agent concatenates the request and the nonce, signs the concatenation, and sends the request and nonce and signature back to the smart card which is received by the smart card in step  so that the smart card can verify that the trusted component is on-line. Smart card  uses its proxy agent  operating in user space on behalf of the smartcard and\/or a pre-stored program on the smart card to make an inventory of the user's files and sends the inventory back to the trusted component in step , after first verifying the request in step  and constructing a file inventory which to send, in step . The file inventory is received by agent  in step . The trusted component  or the agent  uses the information on the file inventory by operating an algorithm to identify new or altered user files, and creates new directories in the reserved user space directories  allocated to the trusted component. The trusted component in step  requests from the smart card or its proxy agent  copies of the new user files, and the smart card in step  receives the request in step . The smartcard or its proxy agent  copies the named user files into a memory space where the trusted component has read access, and then indicates in step  that the copied files are ready for monitoring. In step , the agent  ensures that the files are copied from the user space to the reserved directories allocated to the trusted component. The file names are renamed in step , as previously described with reference to , and when agent  indicates that the files have been renamed, the smartcard and\/or its agent  deletes the copied files from the memory space where the trusted component has read access. At this stage, files have been copied from user space to the reserved directories allocated to the trusted component, and then in step  further read access to the agent  is denied by smart card . The agent then continues in step  to compute file digests by applying the hash function to each individual file in the reserved directories in user space, which are then reported to the trusted component periodically as described previously. In step  the trusted component stores the digests inside the trusted component, and generates the necessary error records if errors occur and generates alarms and reports to the monitor  and other entities as described previously herein with reference to .","The file manipulation program  may optionally be stored within the trusted component as file manipulation program , so that instead of the agent  corresponding with the smart card and computer platform memory for copying and monitoring of files, this may be done from inside the trusted component in a variation of the embodiment.","Since the preferred embodiment herein operates by monitoring the data on a computer platform, there may be provided a system which is immune to variations of virus programs and new generations of viruses, but which is capable of detecting the effects of any virus which operates by changing data on a computer platform."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of the invention and to show how the same may be carried into effect, there will now be described by way of example only, specific embodiments, methods and processes according to the present invention with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0025","num":"0070"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0071"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0072"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0073"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0074"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0030","num":"0075"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0031","num":"0076"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0032","num":"0077"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0078"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0079"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0080"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0081"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0037","num":"0082"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0083"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0039","num":"0084"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0040","num":"0085"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
