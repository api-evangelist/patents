---
title: Testing the operation of an application programming interface
abstract: An API testing component is provided that is configured to deploy test suites to one or more test virtual machine instances. The test suites include an API test. The API tests are periodically executed on the test virtual machine instances, and test results generated by the API tests are collected and stored. The API testing component also provides a user interface for viewing the test results using a user interface specification that defines a visual layout for presenting test results generated by one or more test suites. The API testing component might also generate one or more alarm messages utilizing the test results and an alarm specification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08862950&OS=08862950&RS=08862950
owner: Amazon Technologies, Inc.
number: 08862950
owner_city: Reno
owner_country: US
publication_date: 20110922
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["A programmable execution service (\u201cPES\u201d) can provide computing resources for executing applications on a permanent or an as-needed basis. The computing resources provided by a PES may include various types of resources, such as data processing resources, data storage resources, data communication resources, and the like. Each type of computing resource may be general-purpose or may be available in a number of specific configurations. For example, data processing resources may be available as virtual machine instances (\u201cinstances\u201d). The instances may be configured to execute applications, including World Wide Web (\u201cWeb\u201d) servers, application servers, media servers, database servers, and the like. The resources provided by a PES can typically be purchased and utilized according to various financial models.","A PES might expose an application programming interface (\u201cAPI\u201d) for managing the operation of instances executing within the PES. For instance, an API might be exposed for use by customers of the PES that allows the customers to create, configure, execute, and maintain instances executing on the PES. Other types of APIs might also be provided.","The methods exposed by an API for creating and maintaining instances executing within a PES might be implemented by a large number of inter-dependent components that execute in combination to provide the API. These components might be developed and\/or maintained by many different development teams. Components developed and maintained by each development team might have complex dependencies upon components developed and maintained by other teams.","In order to provide optimized service to customers of the PES, it is necessary for each development team to have current information regarding the health and operation of the API components that they are responsible for. To address this, development teams typically develop and maintain their own test mechanisms for testing the API components that they are responsible for. When multiple teams develop their own testing mechanisms, however, there may be significant duplication of effort. Moreover, because test mechanisms developed by different teams are typically incompatible, it may be difficult for a development team to determine the health of dependent API components that are maintained by other development teams.","It is with respect to these and other considerations that the disclosure made herein is presented.","The following detailed description is directed to technologies for testing the operation of an API, such as an API exposed by a PES for creating and maintaining virtual machine instances executing within the PES. Utilizing the technologies described herein, a centralized framework for testing the operation of an API can be provided that allows different developers or development teams to provide API tests for testing the operation of API components. The API tests can be deployed and executed on test instances executing within the PES and test results can be collected from the API tests. Development teams can also define user views that can be utilized to generate a textual or graphical user interface showing the test results from one or more API tests, including API tests owned by other development teams. In this manner, development teams can easily create, execute, and view the results of API tests, including results generated by API tests of dependent components owned by other development teams.","According to one aspect disclosed herein, a PES platform is configured to provide instances of computing resources. For example, the PES platform might provide virtual machine instances for executing all or a portion of a distributed application, such as an e-commerce application or another type of distributed application. Software components that implement the PES application are deployed to the virtual machine instances provided by the PES platform. PES applications might be implemented by many different components executing on many different instances. Customers of the PES might be permitted to purchase and utilize the instances under different financial models.","The PES platform is also configured to expose an API for controlling the configuration and execution of virtual machine instances executing within the PES. For instance, the PES platform might expose a Web services API for use by customers of the PES that allows the customers to create, configure, execute, and maintain instances executing on the PES. The PES platform might also provide other types of APIs.","In one embodiment, the PES platform also includes a framework for testing the operation of the APIs provided by the PES platform. The framework may be utilized by developers responsible for the components that implement the API to monitor the health and other operational characteristics of the API components that they are responsible for. Through the use of the framework, a developer can also monitor the health and operation of API components maintained by other developers, such as components that an API component depends upon.","According to one embodiment, the API testing framework includes a test suite data store, a user view data store, and an API testing component. The test suite data store is utilized to store test suites. Test suites include an API test and associated instructions for executing the corresponding API test. An API test is an executable component for testing aspects of an API. For instance, an API test might call a method exposed by an API, determine whether the call was successful, measure the time taken for the call to be processed, and perform other functions. Each API test generates test results that may be stored in a test results data store. API tests may be programmed in any programming language provided that they generate test results in a format compatible with the API testing framework.","User views include a user interface specification that defines a visual layout for presenting test results from one or more test suites. For instance, a developer might define a user interface specification for graphically presenting the test results for an API test of a component that the developer is responsible for along with test results from one or more other API tests of components owned by other developers or development teams. In this manner, a user view can be defined to provide quick access to the test results of only the API tests of interest to a developer.","User views might also include one or more alarm specifications. Alarm specifications define the conditions under which one or more alarm messages are generated based upon the test results received from an API test. Alarm specifications also define one or more recipients of an alarm message in the event that the specified conditions are encountered in test results. In this way, a developer can register to receive alarm messages, such as e-mail, SMS, or other types of messages, when certain conditions relating to the operation of an API component are encountered.","The API testing component is configured to deploy the test suites to one or more test virtual machine instances within the PES. Test virtual machine instances are virtual machine instances that have been created for the purpose of executing the test suites. The test virtual machine instances might be created in the same region, data center, or on the same computer that is utilized to execute customer virtual machine instances. In this manner, the actual network and other conditions experienced by customer virtual machine instances that utilize the API provided by the PES can also be tested.","In one embodiment, the API testing component is configured to handle the versioning of test suites stored in the test suite data store. In this regard, the API testing component might monitor the test suite data store for new test suites or modified versions of test suites previously added to the test suite data store. In response to discovering new test suites or new versions of previous test suites, the API testing component may be configured to automatically deploy the new or modified test suites to the test virtual machine instances. In this manner, the addition of a new or modified test suite to the test suite data store can trigger the deployment and execution of test suites.","Once the test suites have been deployed to the test virtual machine instances, the API tests are executed on the test instances utilizing the instructions associated with each API test for executing the API test. Test results generated by the API tests during or following execution are collected and stored in a test results data store. The API tests may be continually executed and test results collected from the API tests and stored on a pre-defined time schedule (e.g. once per minute). The time taken for each API test to execute might also be monitored and recorded.","As mentioned briefly above, the API testing component might also provide a mechanism by which a developer can request to view test results generated by one or more API tests. For instance, a Web interface might be provided through which a developer can select a user view. The selected user view can then be utilized to generate a user interface that shows the results of one or more API tests referenced by the selected user view. In response to receiving such a request, the API testing component retrieves the appropriate test results from the test results data store and generates the user interface. The user interface is then provided to the requesting user.","The API testing component might also periodically evaluate the alarm specifications to determine whether alarm messages should be generated. For instance, the API testing component might compare the test results stored in the test results data store to the conditions defined by the alarm specifications. Based upon such a comparison, the API testing component may determine whether to generate and transmit alarm messages. The API testing component might also generate a ticket in a support system in response to detecting certain test results.","In one embodiment, the API testing component is also configured to scale the number of test virtual machine instances. For example, the API testing component might determine whether the API tests are taking greater than a predetermined amount of time to complete their execution. If so, the API testing component might cause additional test virtual machine instances to be created. The API tests may then be deployed and executed on the additional test virtual machine instances in the manner described above.","It should be appreciated that the subject matter presented herein may be implemented as a computer process, a computer-controlled apparatus, a computing system, or an article of manufacture, such as a computer-readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types.","Those skilled in the art will also appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein, including multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, handheld computers, personal digital assistants, e-readers, cellular telephone devices, special-purposed hardware devices, network appliances, and the like. The embodiments described herein may also be practiced in distributed computing environments, where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","In the following detailed description, references are made to the accompanying drawings that form a part hereof, and that show, by way of illustration, specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1","FIG. 1"],"b":["100","108"]},"The PES platform  can provide computing resources for executing distributed applications on a permanent or an as-needed basis. The computing resources provided by the PES platform  may include various types of resources, such as data processing resources, data storage resources, data communication resources, and the like. Each type of computing resource may be general-purpose or may be available in a number of specific configurations. For example, data processing resources may be available as virtual machine instances. The instances may be configured to execute applications, including Web servers, application servers, media servers, database servers, services, and the like. Data storage resources may include file storage devices, block storage devices, and the like.","Each type or configuration of computing resource may be available in different sizes, such as large resources, consisting of many processors, large amounts of memory, and\/or large storage capacity, and small resources consisting of fewer processors, smaller amounts of memory, and\/or smaller storage capacity. Customers may choose to allocate a number of small processing resources as Web servers and\/or one large processing resource as a database server, for example.","The computing resources provided by the PES platform  are enabled by one or more data centers A-N (which may be referred to herein singularly as \u201ca data center \u201d or in the plural as \u201cthe data centers \u201d). The data centers  are facilities utilized to house and operate computer systems and associated components. The data centers  typically include redundant and backup power, communications, cooling, and security systems. The data centers  might also be located in geographically disparate locations. One illustrative configuration for a data center  that implements the concepts and technologies disclosed herein for testing an API will be described below with regard to .","The customers and other consumers of the PES platform  may access the computing resources provided by the data centers  over a wide-area network (\u201cWAN\u201d) . Although a WAN is illustrated in , it should be appreciated that a local-area network (\u201cLAN\u201d), the Internet, or any other networking topology known in the art that connects the data centers  to remote consumers may be utilized. It should also be appreciated that combinations of such networks might also be utilized.","The customer computing system  is a computer utilized by a customer or other consumer of the PES platform . For instance, the customer computing system  may be a server computer, a desktop or laptop personal computer, a tablet computer, a wireless telephone, a personal digital assistant (\u201cPDA\u201d), an e-reader, a game console, a set-top box, or any other computing device capable of accessing the PES platform .","The customer computing system  may be utilized to access and configure aspects of the computing resources provided by the PES platform . In this regard, the PES platform  might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on the customer computing system . Alternatively, a stand-alone application program executing on the customer computing system  might access an API exposed by the PES platform  for performing the configuration operations. Other mechanisms for configuring the operation of the PES platform  might also be utilized.","According to embodiments disclosed herein, the capacity of purchased computing resources provided by the PES platform  can be scaled in response to demand. In this regard, scaling refers to the process of instantiating (which may also be referred to as \u201claunching\u201d or \u201ccreating\u201d) or terminating (which may also be referred to as \u201cde-scaling\u201d) instances of computing resources in response to demand. In this manner, the capacity of resources purchased by a customer of the PES platform  can be scaled on-demand. As will be described in greater detail below, the testing of an API provided by the PES platform  might be scaled by adding new instances of computing resources that are utilized to execute API tests.","Auto scaling is one mechanism for scaling computing resources in response to increases or lulls in demand for the resources. Auto scaling allows customers of the PES platform  to configure the platform  to scale their purchased computing resources according to conditions defined by the customer. For instance, rules may be defined for scaling up capacity in a particular manner in response to the occurrence of specified conditions, such as a spike in demand. Similarly, rules might also be defined to scale down capacity in a particular manner in response to the occurrence of other conditions, such as a lull in demand.","The PES platform  may also be configured with a deployment component to assist customers in the deployment of new instances of computing resources. The deployment component may receive a configuration from a customer that includes data describing how new instances should be configured. For example, the configuration might specify one or more applications or software components that should be installed in new instances, provide scripts and\/or other types of code to be executed in new instances, provide cache warming logic specifying how an application cache should be prepared, and other types of information. The deployment component utilizes the customer-provided configuration and cache warming logic to launch, configure, and prime new instances of computing resources. The PES might also provide an API for deploying new instances.","The deployment component might also provide functionality for assisting customers with the deployment of updates to existing instances of computing resources. Through this mechanism, a customer can indicate that an update, or updates, is to be applied to an application executing on the PES platform. In response thereto, the deployment component is configured to apply the update to the application in an optimized fashion that satisfies any business or technical requirements of the customer.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 2","FIG. 2"],"b":["102","108","108","102","202","202","202","202","202","202","206","206"]},"In one embodiment, the instances A-N (which may be referred to herein singularly as \u201can instance \u201d or in the plural as \u201cthe instances \u201d) are virtual machine instances. As known in the art, a virtual machine instance is an instance of a software implementation of a machine (i.e. a computer) that executes programs like a physical machine. In the example of virtual machine instances, each of the servers  may be configured to execute an instance manager  capable of executing the instances. The instance manager  might be a hypervisor or another type of program configured to enable the execution of multiple instances  on a single server , for example. As discussed above, each of the instances  may be configured to execute all or a portion of an application.","It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances, other types of instances can be utilized with the concepts and technologies disclosed herein. For instance, the technologies disclosed herein might be utilized with instances of storage resources, instances of data communications resources, and with other types of resources. The embodiments disclosed herein might also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.","The data center  shown in  also includes a server computer  reserved for executing software components for managing the operation of the data center , the server computers , and the instances . In particular, the server computer  might execute a management component . As discussed above, a customer of the PES platform  might utilize the customer computing system  to access the management component  to configure various aspects of the operation of PES platform  and the instances  purchased by the customer. For example, the customer may purchase instances and make changes to the configuration of the instances. The customer might also specify settings regarding how the purchased instances are to be scaled in response to demand.","The auto scaling component  scales the instances  based upon rules defined by a customer of the PES platform . For instance, the auto scaling component  might allow a customer to specify scale up rules for use in determining when new instances should be instantiated and scale down rules for use in determining when existing instances should be terminated. The auto scaling component  might also be utilized to create new instances for use in testing an API provided by the PES platform .","As discussed briefly above, the data center  is also configured with a deployment component  to assist customers in the deployment of new instances  of computing resources. The deployment component  may receive a configuration from a customer that includes data describing how new instances  should be configured. For example, the configuration might specify one or more applications that should be installed in new instances , provide scripts and\/or other types of code to be executed for configuring new instances , provide cache warming logic specifying how an application cache should be prepared, and other types of information. The deployment component  might also be utilized to create test instances for executing API tests in the manner described below.","According to one embodiment, the server computer  is also configured to expose a PES API  (\u201cthe API\u201d) for controlling the configuration and execution of virtual machine instances executing within the PES platform . In one embodiment, the API  is a Web services API exposed by the PES platform  for use by customers of the PES platform  that allows the customers to create, configure, execute, and maintain virtual machine instances executing on the PES platform . The PES platform  might also provide other types of APIs that may be tested in the manner described herein.","In one embodiment, the PES platform also includes an API testing framework  (\u201cthe framework\u201d) for testing the operation of the API . Developers responsible for components that implement aspects of the API  may utilize the framework  to monitor the health and other operational characteristics of the API components that they are responsible for. Through the use of the framework , a developer can also monitor the health and operation of API components maintained by other developers, such as components that an API component depends upon. Details regarding the operation of the framework  will be provided below with regard to .","In the example data center  shown in , an appropriate LAN  is utilized to interconnect the server computers A-N and the server computer . The LAN  is also connected to the WAN  illustrated in . It should be appreciated that the network topology illustrated in  has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A-N, between each of the server computers A-N in each data center , and between instances  purchased by each customer of the PES platform . These network topologies and devices should be apparent to those skilled in the art.","It should be appreciated that the data center  described in  is merely illustrative and that other implementations might be utilized. In particular, functionality described herein as being performed by the API testing framework  might be performed by other components or by a combination of components. Additionally, it should be appreciated that this functionality might be implemented in software, hardware, or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["206","302","108","108","304","306","308","310"]},"The on-demand instances , which might also be referred to as \u201cregular\u201d instances, are instances that are paid for and in active use by a customer. The on-demand instances  allow customers of the PES platform  to pay for capacity per unit of time, such as an instance-hour, without requiring a long-term commitment. This frees the customer from the costs and complexities of planning, purchasing, and maintaining hardware and transforms what are commonly large fixed costs into much smaller variable costs.","The reserved instances  are instances of a computing resource that are reserved for a customer in exchange for a payment. The reserved instances  provide the customer the option to make a one-time payment for each instance they want to reserve. In turn, the customer may receive a significant discount on the hourly usage charge for the reserved instances  as compared to the on-demand instances . After the customer makes a one-time payment for the reserved instances , the reserved instances  are reserved for the customer and the customer has no further obligation. The customer may choose to run the reserved instances  for the discounted usage rate for the duration of a chosen term. If the customer does not use the reserved instances , the customer will not pay usage charges on these instances.","The spot instances  allow customers to bid on unused capacity in the PES platform . The customer can run the spot instances  for as long as their bid exceeds a current market price, referred to herein as the spot instance market price, which may fluctuate based upon supply and demand. The spot instances  may be terminated if a customer's maximum bid no longer exceeds the current spot instance market price.","In order to obtain the spot instances , the customer places a request for the spot instances  that specifies the desired number of spot instances  and the maximum price the customer is willing to pay per instance hour. If the customer's maximum price bid exceeds the current spot instance market price for the spot instances , the customer's request will be fulfilled and the customer's spot instances  will run until either the customer chooses to terminate them or the market price increases above the customer's maximum price (whichever is sooner). Various components operating within the PES platform  may manage the market for the spot instances , including setting the current spot instance market price for the spot instances .","The standby instances  are spot instances  that have been acquired on behalf of a customer and that are made ready for near immediate use by the customer in the manner described herein. The price charged for the standby instances  is typically less than the price charged for the on-demand instances , since the standby instances  may be terminated in the same manner as the spot instances . In one embodiment, the standby instances  are priced higher than the spot instances  and the reserved instances , but lower than the on-demand instances . It should be appreciated, however, that the various pricing mechanisms described above for the on-demand instances , reserved instances , spot instances , and standby instances  are merely illustrative and that other mechanisms may be utilized to set the pricing for the various instance types.","Turning now to , additional details will be provided regarding one illustrative process disclosed herein for testing the operation of the API . It should be appreciated that the logical operations described herein with respect to  and the other FIGURES are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as operations, structural devices, acts, or modules. These operations, structural devices, acts, and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel, or in a different order than those described herein.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 4","b":["400","216","108","400","218","400","210","214","212","400"]},"The routine  begins at operation , where the framework  deploys test suites to one or more test virtual machine instances (\u201ctest instances\u201d). As will be described in greater detail below, test suites include API tests for testing functionality provided by the API . The test instances are virtual machine instances created for the purpose of executing the API tests. Additional details regarding the framework  and the deployment of test suites to test instances will be provided below with regard to .","Once the test suites have been deployed to the test instances, the routine  proceeds from operation  to operation . At operation , the API tests provided by the test suites are executed on the test instances. Test results generated from the execution of the API tests are then collected and stored. Details regarding the execution of the API tests and the collection and storage of test results will be provided below with regard to .","Once test results have been collected and stored, the routine  proceeds to operation , where a user interface is provided for viewing the test results. In one embodiment, components provided by the framework  are configured to generate a Web-based user interface for viewing the test results through the use of developer-provided user views that define the API test results that should be included in the user interface. Other types of user interfaces might also be provided. Additional details regarding the provision of a user interface for viewing the test results will be provided below with regard to .","From operation , the routine  proceeds to operation . At operation , components provided by the framework  are executed to generate alarms based upon the test results. For instance, components within the framework  might be configured to cause an alarm message, such as an e-mail or SMS message, to be generated in response to identifying certain developer-specified conditions in the test results. Additional details regarding the generation of alarms will be provided below with regard to . From operation , the routine  proceeds to operation , where it ends.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5"],"b":["406","406","406","406","402","218","402","404","218"]},"The test suite data store  is utilized to store the test suites . The test suite data store  might be implemented as an electronic database utilizing a suitable database technology. The test suite data store  might also be implemented in other ways known to those skilled in the art.","Each of the test suites  includes an API test and associated instructions for executing the corresponding API test. An API test is an executable component for testing aspects of the API . For instance, an API test might call a method exposed by the API , determine whether the call was successful, measure the time taken for the call to be processed, and perform other functions. Each API test generates test results that may be stored in a test results data store. Details regarding the test results data store will be provided below with regard to .","The API testing component  is an executable component that is provided by the framework . The API testing component  is configured to deploy the test suites  to one or more test virtual machine instances A-C (which may be referred to herein individually as a test instance  or collectively as the test instances ) executing within the PES platform . The test instances  are virtual machine instances that have been created for the purpose of executing the test suites . As shown in , one or more test suites  might be deployed to each of the test instances . For instance, in , the test suite A is being deployed to the test instance A, the test suite B is also being deployed to the test instance A, and the test suite N is being deployed to the test instance C. It should be appreciated that, in various implementations, a single test suite  might be deployed to a single test instance , a single test suite  might be deployed to multiple test instances , multiple test suites  might be deployed to a single test instance , or multiple test suites  might be deployed to multiple test instances . The decision as to whether a test suite is deployed to one or more test instances may be made based upon the type of tests being performed, the location of the test instances, or other factors.","The test instances  might be created in the same region, data center, or on the same server computer that is utilized to execute the customer virtual machine instances D-I. For example, in the embodiment shown in , the test instance A is executing on the same server computer A as the customer instances D-E, the test instance B is executing on the same server computer B as the customer instances F-G, and the test instance C is executing on the same server computer C as the customer instances H-I. In this manner, the actual network and other conditions experienced by the customer virtual machine instances D-I that utilize the API  provided by the PES platform  can also be tested.","It should be appreciated that the test instances A-C are stateless and may be disposed of and recreated at any time. For instance, in one embodiment the API testing component  is configured to determine if a test instance  has become unresponsive or encountered another type of issue that prevents the instance from functioning properly. In response to detecting such a condition, the API testing component  might cause a test instance  to be terminated. The API testing component  might also cause a new test instance  to be instantiated and cause a test suite  to be deployed to the new test instance  and executed.","In one embodiment, the API testing component  is configured to handle the versioning of the test suites  stored in the test suite data store . In this regard, the API testing component  may be configured to monitor the test suite data store  for new test suites  or modified versions of test suites  previously added to the test suite data store . In response to discovering new test suites  or new versions of previous test suites , the API testing component  might automatically deploy the new or modified test suites  to the test instances . In this manner, the addition of a new or modified test suite  to the test suite data store  can trigger the deployment and execution of the test suites . Additional details regarding this process will be provided below with regard to .",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 6","b":["600","406","206","600","602","402","404","406","406","206","406","602","600","604"]},"At operation , the API testing component  or the API test determines whether a new test suite  or a new version of a test suite  has been added to the test suite data store . If not, the routine  proceeds back to operation  where additional polling of the test suite data store  may occur. If a new test suite  or a new version of a test suite  has been added to the test suite data store , the routine  proceeds from operation  to operation .","At operation , the API testing component  or the API test retrieves the new test suite  or the new version of the test suite  from the test suite data store . The routine  then proceeds to operation , where the new or modified test suite  is then deployed to one or more of the test instances . Deployment might include copying the test suite  to the appropriate test instance , installing the test suite  on the test instance , and causing the API test to be executed on the test instance . Details regarding the execution of the API tests on the test instances  will be provided below with regard to . From operation , the routine  proceeds back to operation , where additional polling of the test suite data store  and deployment of test suites  may occur in the manner described above.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 7","b":["702","702","406","206","406","206"]},"The instructions for executing an API test may be provided in the form of a shell script or other type of script or executable component that provides instructions defining how and when the API test should be executed. In one embodiment, the instructions are configured for inclusion in a cron table (\u201ccrontab\u201d) file. As known in the art, a crontab file is a configuration file that specifies commands to run periodically on a given schedule. The crontab file is utilized by a time-based job scheduler called \u201ccron\u201d that is provided in Unix-like computer operating systems. Cron enables users to schedule jobs (commands or shell scripts) to run periodically at certain times or dates. Other types of instructions might also be provided that indicate the manner in which an API test should be executed on a test instance .","When the API tests are executed on the test instances , the API tests are configured to test aspects of the operation of the API . As mentioned above, the API tests may call methods exposed by the API, determine the success or failure of the calls, and capture data defining how long the calls took to complete and other aspects of the success or failure of each API call.","The information collected by the API tests during the performance of the API test is stored as test results A-D. In the example shown in , a test suite A executing on the test instance A has generated the test results A, the test suite B executing on the test instance B has generated the test results B, and the test suites C and D executing on the test instance C have generated the test results C and D, respectively.","The test results  may be stored utilizing an appropriate extensible markup language (\u201cXML\u201d) schema or in another manner. The API tests might also provide the test results  to the API testing component  for storage in a test results data store . The API tests might also store the test results  directly in the test results data store . The test results data store  is a database or other type of data storage object or device configured for the storage of the test results . Once the test results  have been stored in the test results data store , the API testing component  may provide the test results  to a developer by way of an appropriate user interface in the manner described below.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 8","b":["406","702","800","802","406","206","802","800","804"]},"At operation , the executing API tests call methods exposed by the API  in order to test the functionality provided by the API . The API tests receive the results of the API calls at operation  and record the test results . As discussed above, the test results  might include various types of information describing the success or failure of the API calls made by the API tests. The routine  then proceeds to operation .","At operation , the API tests provide the test results  to the API testing component  for storage in the test results data store . Alternately, the API tests might store the test results  directly in the test results data store . In this manner, the test results  are stored in the test results data store  at operation . As will be described in greater detail below with regard to , the API testing component  may utilize the test results  stored in the test results data store  to provide a user interface for viewing the test results  and\/or for generating alarm messages. From operation , the routine  proceeds back to operation , where the process described above may be periodically repeated in order to continually test the operation of the API . For instance, the process described above might be repeated every minute or other specified unit of time.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 9","b":["912","702","914","402","402","702","402","912","702","904","904","906"]},"Each of the user views  includes a user interface specification  that defines a visual layout for presenting test results  from one or more test suites . For instance, a developer might define a user interface specification  for presenting the test results  for an API test of a component that the developer is responsible for along with test results  from one or more other API tests of components owned by other developers or development teams. The user views  may be defined utilizing XML or another suitable declarative language. In this manner, a user view  can be defined to provide quick access to the test results  of only the API tests of interest to a developer.","As illustrated in , each of the user views  might also include one or more alarm specifications . Alarm specifications  define the conditions under which one or more alarm messages  are to be generated based upon the test results  received from an API test. In this way, a developer can register to receive alarm messages , such as e-mail, SMS, or other types of messages, when certain conditions relating to the operation of an API component are encountered.","In order to view test results , the API testing component  might provide a Web user interface through which a developer using a developer computer  can select a user view . The selected user view  can then be utilized to generate a Web interface  that shows the results of one or more API tests referenced by the selected user view . In response to receiving such a request, the API testing component  retrieves the appropriate test results  from the test results data store  and generates the Web interface . The Web interface  is then provided to the developer computer .","It should be appreciated that although the interface provided by the API testing component  is described as a Web interface, other types of user interfaces might be provided. For instance, a client application may be executed on the developer computer  that is configured to receive and display test results  using the user views . Alternately, an e-mail message, an SMS message, or another type of message may be transmitted to the developer computer  that include test results  formatted according to a user view . Other types of textual and graphical user interfaces might also be provided.","As mentioned above, the API testing component  might also periodically evaluate the alarm specifications  stored in the user view data store  in order to determine whether alarm messages  should be generated. For instance, the API testing component  might periodically compare the test results  stored in the test results data store  to the conditions defined by the alarm specifications . Based upon the results of such a comparison, the API testing component  may determine whether to generate and transmit the alarm messages . In other embodiments, the API testing component  might also generate a ticket in a support system in response to detecting certain test results . Additional details regarding the provision of a user interface for viewing the test results  are provided below with regard to . Additional details regarding the generation of the alarm messages are provided below with regard to .",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 10","b":["702","1000","1002","402","702","902","702","904","402","904","1004","402","904","912"]},"From operation , the routine  proceeds to operation , where the API testing component  retrieves the user interface specification  for the selected user view . The routine  then continues to operation , where the API testing component  retrieves the test results  from the test results data store  for the API tests specified in the user interface specification . The routine  then proceeds to operation .","At operation , the API testing component  generates the Web interface  using the retrieved test results  for the API tests identified in the user interface specification . The API testing component  then provides the generated Web interface  to the developer computer  in response to the request to view the test results . From operation , the routine  proceeds to operation , where it ends.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 11","b":["914","702","1100","1102","910","402","910","1100","1104","702","910","702","1106","910","910","914"]},"From operation , the routine  proceeds to operation , where the API testing component  determines whether an alarm message  should be generated based upon the evaluation of the alarm specification  and the relevant test results . If an alarm should be generated, the routine  proceeds to operation , where an alarm message  is generated and transmitted to one or more individuals or entities identified in the alarm specification . At operation , a work order ticket might also be generated in a work order ticketing system associated with the PES platform . From operation , the routine  proceeds to operation .","If, at operation , the API testing component  determines that an alarm message  should not be generated for the current alarm specification , the routine  proceeds from operation  to operation . At operation , the API testing component  determines whether additional alarm specifications  remain to be evaluated. If so, the routine  proceeds from operation  to operation , where the variable maintaining the identity of the current alarm specification  is incremented to the next alarm specification .","From operation , the routine  proceeds to operation , where the next alarm specification  is evaluated in the manner described above. If no additional alarm specifications  remain to be evaluated, the routine  proceeds from operation  to operation , where the process described above is repeated. In this manner, each of the alarm specifications  may be continually evaluated in order to generate timely alarm messages  to developers or other interested parties.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 12","b":["402","206","402","402","206","206","1200"]},"The routine  begins at operation , where the API testing component  reviews the test results  to determine the amount of time that the API tests are taking to complete their execution. This information might also be reported directly to the API testing component  by the API tests or provided to the API testing component  in another manner.","From operation , the routine  proceeds to operation , where the API testing component  determines whether the API tests are taking longer than a threshold amount of time to execute. An administrator of the PES platform  might specify the threshold period of time. If the API tests are completing their execution within the threshold period of time, the routine  continues back to operation . If, however, the API tests are taking longer than the threshold period of time to complete their execution, then the routine  proceeds from operation  to operation .","At operation , the API testing component  causes new test instances  to be deployed. The API testing component  might operate in conjunction with the auto scaling component  and\/or the deployment component  in order to instantiate the new test instances . Once the additional test instances  have been created, the routine  proceeds to operation , where the API testing component  deploys the test suites  to the new test instances . The API tests in the deployed test suites  can then be executed in the manner described above. From operation , the routine  proceeds to operation , where the test instances  may continue to be scaled in the manner described above.","It should be appreciated that the number of test instances utilized might be scaled for other reasons and\/or in response to other conditions. For example, the number of test instances might be scaled in response to determining that resources used by the test instances are being utilized beyond a specified threshold. In this way, the number of test instances may be scaled in response to high utilization of memory, network bandwidth, storage, or other resources. The number of test instances utilized might also be scaled in order to execute a large number of test suites simultaneously, while also ensuring that all of the test suites can complete their execution within a certain period of time. For example, the number of test instances utilized might be scaled up until all of the test suites can complete their execution and reporting within one minute or other period of time specified by an administrator. The number of test instances might also be scaled in response to other factors or conditions.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 13","FIG. 13"],"b":["1300","102","102","202","202","104"]},"The computer  includes a baseboard, or \u201cmotherboard,\u201d which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment, one or more central processing units (\u201cCPUs\u201d)  operate in conjunction with a chipset . The CPUs  are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .","The CPUs  perform the necessary operations by transitioning from one discrete, physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states, such as flip-flops, and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements, such as logic gates. These basic switching elements may be combined to create more complex logic circuits, including registers, adders-subtractors, arithmetic logic units, floating-point units, and the like.","The chipset  provides an interface between the CPUs  and the remainder of the components and devices on the baseboard. The chipset  may provide an interface to a random access memory (\u201cRAM\u201d) , used as the main memory in the computer . The chipset  may further provide an interface to a computer-readable storage medium such as a read-only memory (\u201cROM\u201d)  or non-volatile RAM (\u201cNVRAM\u201d) for storing basic routines that help to startup the computer  and to transfer information between the various components and devices. The ROM  or NVRAM may also store other software components necessary for the operation of the computer  in accordance with the embodiments described herein.","The computer  may operate in a networked environment using logical connections to remote computing devices and computer systems through the network . The chipset  may include functionality for providing network connectivity through a network interface controller (\u201cNIC\u201d) , such as a gigabit Ethernet adapter. The NIC  is capable of connecting the computer  to other computing devices over the network . It should be appreciated that multiple NICs  may be present in the computer , connecting the computer to other types of networks and remote computer systems.","The computer  may be connected to a mass storage device  that provides non-volatile storage for the computer. The mass storage device  may store system programs, application programs, other program modules, and data, which have been described in greater detail herein. The mass storage device  may be connected to the computer  through a storage controller  connected to the chipset . The mass storage device  may consist of one or more physical storage units. The storage controller  may interface with the physical storage units through a serial attached SCSI (\u201cSAS\u201d) interface, a serial advanced technology attachment (\u201cSATA\u201d) interface, a fiber channel (\u201cFC\u201d) interface, or other type of interface for physically connecting and transferring data between computers and physical storage units.","The computer  may store data on the mass storage device  by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to, the technology used to implement the physical storage units, whether the mass storage device  is characterized as primary or secondary storage, and the like.","For example, the computer  may store information to the mass storage device  by issuing instructions through the storage controller  to alter the magnetic characteristics of a particular location within a magnetic disk drive unit, the reflective or refractive characteristics of a particular location in an optical storage unit, or the electrical characteristics of a particular capacitor, transistor, or other discrete component in a solid-state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description, with the foregoing examples provided only to facilitate this description. The computer  may further read information from the mass storage device  by detecting the physical states or characteristics of one or more particular locations within the physical storage units.","In addition to the mass storage device  described above, the computer  may have access to other computer-readable storage medium to store and retrieve information, such as program modules, data structures, or other data. It should be appreciated by those skilled in the art that computer-readable storage media can be any available media that provides for the storage of non-transitory data and that may be accessed by the computer .","By way of example, and not limitation, computer-readable storage media may include volatile and non-volatile, removable and non-removable media implemented in any method or technology. Computer-readable storage media includes, but is not limited to, RAM, ROM, erasable programmable ROM (\u201cEPROM\u201d), electrically-erasable programmable ROM (\u201cEEPROM\u201d), flash memory or other solid-state memory technology, compact disc ROM (\u201cCD-ROM\u201d), digital versatile disk (\u201cDVD\u201d), high definition DVD (\u201cHD-DVD\u201d), BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information in a non-transitory fashion.","The mass storage device  may store an operating system  utilized to control the operation of the computer . According to one embodiment, the operating system comprises the LINUX operating system. According to another embodiment, the operating system comprises the WINDOWS\u00ae SERVER operating system from MICROSOFT Corporation. According to further embodiments, the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device  may store other system or application programs and data utilized by the computer , such as the API testing framework  and\/or the other software components described above.","In one embodiment, the mass storage device  or other computer-readable storage media is encoded with computer-executable instructions which, when loaded into the computer , transforms the computer from a general-purpose computing system into a special-purpose computer capable of implementing the embodiments described herein. These computer-executable instructions transform the computer  by specifying how the CPUs  transition between states, as described above. According to one embodiment, the computer  has access to computer-readable storage media storing computer-executable instructions which, when executed by the computer , perform the routine  described above with regard to .","The computer  may also include an input\/output controller  for receiving and processing input from a number of input devices, such as a keyboard, a mouse, a touchpad, a touch screen, an electronic stylus, or other type of input device. Similarly, the input\/output controller  may provide output to a display, such as a computer monitor, a flat-panel display, a digital projector, a printer, a plotter, or other type of output device. It will be appreciated that the computer  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that technologies for testing an API have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological acts, and computer readable media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts, and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
