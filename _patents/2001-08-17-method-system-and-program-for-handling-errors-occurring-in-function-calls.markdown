---
title: Method, system and program for handling errors occurring in function calls
abstract: Provided is a method, system, and program for handling errors in a service program including service functions capable of being called from application programs. A call is received for one service function from a service function call within one application program. A series of test operations are performed when executing the service function call. Each test operation returns an identifier if the test operation failed where each identifier is associated with one error state. If one test operation failed, then the identifier for the failed test operation is transferred to an error handling agent, wherein the error handling agent accesses error information associated with the identifier and generates error information describing a specific cause of the error that caused the test operation to fail and then returns to the application program with a generic return code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06973643&OS=06973643&RS=06973643
owner: International Business Machines Corporation
number: 06973643
owner_city: Armonk
owner_country: US
publication_date: 20010817
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE PREFERRED EMBODIMENTS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Additional Implementation Details"],"p":["1. Field of the Invention","The present invention relates to a system, method, and program for handling errors occurring in function calls.","2. Description of the Related Art","In many situations, an application program will call service functions of another program or an operating system through an application program interface (API). If an error occurs, the service function may return an error code in response to the call from the calling application program. An application developer or program user may have difficulty isolating the cause of the error based on the returned error code. With many service functions, especially operating system functions, the returned error code is generic to numerous different specific errors and provides little or no assistance in identification of the specific cause of the error. For instance, many operating system service functions often return an error in the form of \u201cERRORINVALIDPARAMETER\u201d, without specifying the parameter that caused the error and reason the parameter value caused the error. The application developer may then have to spend considerable time re-writing the service function invocation code, compiling, building, and testing using a trial-and-error approach to attempt to diagnose the cause of the error. This diagnosis may be further complicated by the lack of meaningful documentation on the error codes.","In the prior art, different schemes exist for providing error codes from various service functions. For this reason, the number of error codes returned by service functions varies from as few as a couple to dozens and, in some cases, significantly more. In preparation for potential return of these error codes from the service functions, the application developer may then write, compile, build and test error handling code for each service function call within the application program to anticipate and properly handle the various errors returned from the service function. This may include checking for specific error codes and discontinuing processing or issuing a message to a human being or taking other actions that are thought to be appropriate for the specific error code. The time required to develop and test such error handling code is significant. In fact, given the above described complexity, in many cases, the error handling processing within the application may exceed the processing performed by the application program functions. Moreover, often the major emphasis for development and testing in application development is in the mainline path. It is not uncommon for error handling paths to be actually exercised for the first time in an end customer environment where well-intended, but nonetheless improper or nonexistent error handling can cause the application program to behave unexpectedly or to abruptly terminate causing disruption or outages for the end customer and added service costs for the application developer.","Even if the application developer is successful in properly implementing error handling processing for all possible return error codes for a service function, any subsequent updates to the service function that provides new return error codes may require that the application developer again build, compile, and test new error handling processing for the new return error codes introduced by the update. In the prior art, it is not uncommon for the application program error handling to become inconsistent with the potential return error codes from a service function when changes are made to the service function return error codes. Typically, once an application program is developed, ongoing maintenance of this type is often overlooked. For example, when a machine is running an application program that uses a service function provided by an operating system, it is not uncommon for the machine to be updated with operating system maintenance or the operating system to be updated to a newer version without an associated update to each application program to address changes in error codes returned from service functions.","Diagnosis problems are further exasperated in client\/server environments where the calling application program is running on a different operating system than the operating system including the service function. In such case, operating system diagnostic information may not be available to the calling application program running on a different operating system platform.","It is also sometimes necessary for providers of the service functions themselves to determine from where within the service function a particular error code was returned. Since generic return codes are used for many errors at different locations, pinpointing the exact location of the error in the service function source code may be extremely difficult because the return code could have been generated at many instances in the service function code.","For these reasons, there is a need in the art for improved techniques for handling and diagnosing errors resulting from function calls.","Provided is a method, system, and program for handling errors in a service program including service functions capable of being called from application programs. A call is received for one service function from a service function call within one application program. A series of test operations are performed when executing the service function call. Each test operation returns an identifier if the test operation failed where each identifier is associated with one error state. If one test operation failed, then the identifier for the failed test operation is transferred to an error handling agent, wherein the error handling agent accesses error information associated with the identifier and generates error information describing a specific cause of the error that caused the test operation to fail.","In further implementations, the identifier indicates an occurrence of an error at a unique location in the service program.","Further provided is a method, system, and program for handling errors resulting from execution of a service function in a service program, wherein one application program calls the service function in the service program. An identifier is received from the service program executing the service function. The service program performs a series of test operations when executing the service function, wherein each test operation returns one unique identifier if the test operation failed that is associated with one error state.","If the received identifier indicates that one error occurred during execution of the service function, then a return code is generated and transmitted to the application program indicating that an error occurred.","In further implementations, error information is generated providing a description of the service function error associated with the received identifier. With such implementations, a directory may be provided that includes entries corresponding to identifiers, wherein the directory maintains error information for identifiers describing a specific cause of the test operation failure associated with the identifier. One entry in the directory corresponding to the received identifier is accessed. The generated error information comprises the description of the specific cause of the error state in the directory entry for the received error number.","The described implementations provide a technique for generating error information using an error handling program that provides information to allow developers and other users of an application program to more efficiently and effectively diagnose and correct errors resulting from a service function call invoked by the application program. The described implementations allow pinpointing and exact identification of the error condition, provide an automatic and complete set of diagnostic information, significantly reduce the error handling code developers must generate, and minimize the error data that must be physically sent over a communication network.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["2","2","2","4","2","6","2","6","8","4","2","6","8","4","10","8","6"],"i":["a, b ","a, b ","a, b ","a ","b"]},"The service function call  in the application program , when executed, would make a call  to the service function  to execute the service function . The call  may include parameters set by the application program . In response to the call , the service function  would execute and generate a unique serial number , which may comprise any alpha-numeric or other type of code or identifier, such as a hexadecimal value, of an error state that occurred during execution of the service function .","The service program  transmits the unique serial number  to an error handling agent , which comprises a program layer between the application program  and service program . The error handling agent  provides special handling of the unique serial number , which comprises a unique serial number that the service function  generates when performing error testing. This unique serial number identifies one particular error state ascertained by one specific testing operation at one specific location within the source code of the service program. For instance, the service function  may perform a series of error test operations on a parameter passed with the call . Each error state in the sequence of test operations would correspond to a specific error, such as the parameter having a specific erroneous value. The service function  would provide a unique serial number for each possible error state tested by the service function  code to uniquely identify the point in the service program  code where the error occurred and the reason for the error.","If the service function  completed execution without encountering any error states, then the unique serial number  may be zero or some other value indicating that no error was encountered.","In additional implementations, the service function  may return additional data along with the unique error number. For instance, if the error is generated as the result of the presence of a certain environmental condition, such as low memory, then information on that environmental condition that triggered the error state may be included in the return code. Other additional data related to the error state may also be returned.","If the unique serial number  indicates an error state in the service program , then the error handling agent  processes a serial number directory  that maintains further information on the error identified by the serial number. The error handling agent  may then write detailed error information to an error log . Based on the content of the serial number directory  and the received unique serial number , the error handling agent  generates return code , which is returned to the application program . If the service function  completed successfully, then the return code  may be zero or some other value indicating no error occurred. If the service function  failed, then the return code  may comprise a generic error code or general description that applies to many specific error states, i.e., many unique error numbers may be defined by a single generic error code, e.g., invalid parameter. The error handling agent  would obtain the generic error code or description for a received unique serial number  from the entry in the serial number directory  for the received unique serial number . In additional implementations, the error handling agent  may return additional data with the return code  returned to the service function call .","By using the unique serial number , minimal data is returned by the service function . The unique serial number  provides all the context information about the source of the error through a lookup of the unique serial number in the serial number directory . This minimizes the amount of data that must be transmitted over a network from the service function  to the error handling agent . Since the invocation of the service function  passes through the error handling agent , the error handling agent  has the context information needed to identify what service function was invoked and what parameters were passed to the service function.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["8","14","8","50","8","12","8","8","52","14","54","72","1","2","12","54","58","62","66","70","14","56","60","64","68","72","14","56","60","64","68","72","76","14","16","74","8","14","16"]},"In , the test performed determined whether the parameters provided with the call  were acceptable. In additional implementations, the tests embedded in the service function  to set the unique serial number may consider factors other than parameters. For instance, the service function  may test various environmental variables concerning the state of the system, e.g., available system memory, availability of data needed by the service function , etc.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 3"],"b":["18","14","8","6","100","102","8","104","18","10","104"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["16","14","8","150","16","14","8","152","14","8","22","154","152","14","8","16","158","18","14","16","160","102","20","14","16","20"]},"The error handling agent  further sets (at block ) the return code  to the generic return code  value in the accessed entry of the serial number directory . In implementations where additional data is received with the unique serial number  from the service function , such additional data may be passed to the application program . From blocks  or , control proceeds to block  to transmit the generated return code  to the application program .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5","b":["4","22","16","200","202","22","4","22","22","4","10","10"]},"The user or developer of the application program  may specify different actions to take in the event that the return code  indicates the occurrence of one or more specific error states. The user or developer may specify that the application program  continue processing if the error state is non-fatal or immediately exit program  execution upon the occurrence of the error state. If the application program  continues processing, then the return code  may be displayed momentarily or written to a file of returned non-fatal codes. The displayed error information would include the return code  generic description. The user or developer may further access the error log  to review detailed information on error states that occurred during execution of the application program .","For instance, a developer may want the application program  to continue processing as far as possible and generate detailed error information into the error log  for later review. Alternatively, a user of the application program  may want to immediately review detailed information on the error state upon the occurrence of the error so they can take immediate corrective action. For instance, if the user is inputting data that is causing error states, then immediate display of detailed error information, including corrective actions to take to avoid the error, may be provided so the user can avoid entering erroneous data in the future.","In further implementations, the serial number directory  may be associated with a particular version of the service program . Upon initialization, the error handling agent  may check the version number of the service program . If the version has changed since the last initialization, then the error handling agent  may request an updated serial number directory  from the service program . The update would provide an updated serial number directory from the service program  to the error handling agent . This version checking ensures that any updates that add, modify or remove service functions  in a manner that affects the error numbers returned by the service function  are reflected in the serial number directory  used by the error handling agent .","With the above described arrangement, the calling application program does not have to be rewritten, recompiled, rebuilt, and retested whenever the service program  is updated with new error states. The error handling agent  automatically ensures that any new unique serial numbers corresponding to error states are incorporated into the serial number directory , thereby providing binary compatibility between the application program and the service program.","As discussed, the application program  and service program  may execute on different computer systems and operating systems. In the described implementations, the error handling agent  provides a portable extension of the service function. This allows the error handling agent  to provide diagnostic and error information to the application program  without depending on the operating system of the service program  to assist with diagnostic operations. Further, the error handling agent  may include serial number directories  for different operating systems. This would allow the error handling agent  to provide diagnostic information and error handling on all operating systems that the service program  executes.","The described implementations minimize the error handling code needed in the application program  by automating error handling in the agent . With the described implementations, application developers do not have to spend time incorporating diagnostic routines into the application code because detailed error information is provided through the error handling agent .","In certain implementations, the error handling agent  functions as a portable extension of the service function  that resides on the same platform as the application program  and is inserted between the application program  and the service function  to offload error handling from the application program  to an extension of the service function . The extension of the service function can accurately perform error handling on behalf of the service function.","The described error handling agent may be incorporated into new software architectures as well as added to existing application programs without modifications to these application programs (although the service functions would have to be modified to generate the unique serial numbers) to obtain the benefits from the error handling agent. Such incorporation of the described error handling agent may allow for exact identification of the error condition, an automatic and complete set of diagnostic information, significant reduction in error handling code and associated savings for application developers, avoidance of inconsistencies when the service function changes, minimizing error data that must be physically sent over a communication network, and, for service function providers, the ability to pinpoint the exact location the error was detected.","The described implementations may reduce the software development effort, time and cost by allowing service function developers and end users to readily pinpoint the exact location of error detection and access reliable and accurate error handling information. Further, the described implementations provide information to end users to assist in diagnosing problems when they occur.","The described implementations may be realized as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium (e.g., magnetic storage medium (e.g., hard disk drives, floppy disks, tape, etc.), optical storage (CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention, and that the article of manufacture may comprise any information bearing medium known in the art.","In further implementations, the additional data may be included with the unique serial number  from the service function  that is related to the cause of the error. This additional information may be written to the entry in the error log  for the particular error state to allow the developer to determine the instance in the application program  where the error occurred. Such information would allow the developer to determine whether any related processing in the application program  code proximate to the location where the failed service function call  was made contributed to the error.","In further implementations, additional notification actions may be taken after writing information on an error to the error log . For instance, either the application program  or error handling agent  may generate a message including information on an error added to the error log  and transmit such message to a designated user. The message may be transmitted as an electronic message transmitted through a messenger program, e-mail, pager alert, phone call with generated voice message describing the error, etc.","In the described implementations, the error handling agent  was described as a program component layer between the application program  and service program . Alternatively, the error handling agent  may be incorporated as a program component within the application program .","The described error handling agent may be employed in new implementations as well as retrofitted to existing application programs without modifications to these application programs (although modifications must be made to the service function  to generate unique serial numbers for each specific error state) to obtain the benefits from the error handling agent.","In , the error handling agent  is shown as handling errors for one application program . Additionally, the error handling agent  may handle function calls and errors for multiple application programs accessing service functions  in the service program . Moreover, a single log could be used for all applications or separate logs could be configured for each application.","The preferred logic of , , and  describe specific operations occurring in a particular order. In alternative embodiments, certain of the logic operations may be performed in a different order, modified or removed and still implement preferred embodiments of the present invention. Moreover, steps may be added to the above described logic and still conform to the preferred embodiments.","The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
