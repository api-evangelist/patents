---
title: System and method for providing a communications service in distributed computing environment
abstract: A broker of the present invention enables distributed applications to communicate with a server in distributed computing environment. The broker receives from a client a request to execute a transaction. The broker receives input parameters including input data. The broker uses a routing service to locate the server. The broker then establishes a communications connection to the server and forwards the input data. The transaction is executed and the broker receives a response from the server. The broker forwards the response to the client. The broker can segment the input data before forwarding the input data to the server. If the response is in multiple segments, the broker can combine the multiple segments into one string before forwarding the response to the client. Further, the broker may receive requests from multiple clients via multiple communications connections. The broker then consolidates the multiple communications connections and establishes one communications connection to the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07673053&OS=07673053&RS=07673053
owner: AT&T Intellectual Property I, L.P.
number: 07673053
owner_city: Reno
owner_country: US
publication_date: 20020830
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates generally to a communications infrastructure and, more particularly, to a system and method for providing a service that enables and manages communications between distributed applications and legacy systems in distributed computing environment.","2. Background of the Invention","The mainframe-based information technology (IT) environment is still a common architecture in many large organizations. One of the most popular operating systems for mainframes is IBM's OS\/390. OS\/390 consists of several subsystems, including IMS (Information Management System) and CICS (Customer Information Control System).","Mainframe based applications can be integrated into distributed computing environment using a CORBA-based system. CORBA is OMG's (Object Management Group's) open, vendor-independent specification for an architecture and infrastructure that computer applications use to work together over networks. CORBA is designed to provide interoperability between applications that may be written in different languages and may run on different platforms. CORBA defines an implementation independent object model, which is built with a programming language, such as C++ or Java. CORBA provides object services that are domain-independent interfaces that are used by many distributed object programs.","CORBA defines an ORB (Object Request Broker) that handles the transport of information between applications. The ORB functions as a communications infrastructure, transparently relaying object requests across distributed heterogeneous computing environments. ORB simplifies distributed programming by decoupling the client from the details of the method invocations. Interoperability is accomplished through well-defined object interface specifications, which allow client applications to connect to the ORB, specified in OMG IDL (Interface Definition Language). OMG IDL defines the types of objects according to the operations that may be performed on them and the parameters to those operations.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1","b":["100","102","102"]},"To use CORBA, OMG IDL specification is written and compiled to generate client stubs and server skeletons in the languages in which client and server are written. The stubs and skeletons serve as proxies for clients and servers, respectively. The stubs and skeletons are then included in the client's program and the server's program, respectively. Thereafter, client  initiates a request to an operation on object implementation  through IDL stub . The request is an event carrying information that includes an operation, an object reference of the service provider, and actual parameter. IDL stub  represents the mapping between the language of implementation of client  and ORB . IDL skeleton  represents the mapping between the language of implementation of object implementation  and ORB . ORB  locates the appropriate implementation code, transmits parameters and transfers control to object implementation  through IDL skeleton . In performing the request, the object implementation may obtain some services from ORB  through object adapter . When the request is complete, control and output values are returned to client .","Orbix, which is a CORBA compliant ORB from IONA Technologies, Inc., has become a popular CORBA based system. Orbix uses a connection-oriented network design where each client process establishes a socket connection to each server process. Socket is a TCP\/IP (Transmission Control Protocol\/Internet Protocol) application programming interface that allows connection between two TCP\/IP programs. For example, each of one hundred clients on system X communicating with one hundred servers on system Y would use 10,000 (100\u00d7100) sockets. The number of sockets of a system is limited. For any OS\/390 process, for example, there is a practical limit of 2,000 simultaneous socket connections.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 2"],"b":["200","208","200","206","222","220","206","206","210","210"]},"To execute transaction  in IMS , client  obtains an object reference of IMS adapter  from name service . Client  can use name service  to obtain the object reference. Client  then sends a request to execute transaction  to IMS adapter  through IMSraw interface . Client  establishes a socket connection to IMS adapter . IMS adapter  receives the request and forwards the request to control region . The request is processed (i.e., the transaction is executed). IMS adapter  sends a response to client . Clients ,  and  perform the same process described above to execute transaction . Each client establishes a socket connection to IMS adapter .","The present invention provides methods, systems, and computer program products for enabling distributed applications to communicate with legacy systems in distributed computing environment. The present invention provides a broker that manages communications between client applications and transaction adapters.","A preferred embodiment of the present invention is a broker that provides socket connection consolidation. The socket connection consolidation provided by the broker enables a service provider application to support a larger number of client applications. The broker provides routing to the appropriate service provider application by message content and context. The broker abstracts message segmentation complexities and application specific details from distributed client applications. The broker of the present invention can be provided as a CORBA service, an MQSeries-based service, or any kinds of middleware. The broker can be provided as distributed service miming separately from the client applications or co-located to the client applications. The broker also functions as an authority delegation between the client applications and the service provider applications.","In one embodiment, the broker of the present invention receives a request to execute a transaction from a client with input parameters. The input parameters may include a policy, a sequence of properties and a string of input data. The broker uses the policy and the sequence of properties to initiate a routing request. A routing service receives the routing request and returns a transaction name and the name of the transaction adapter that can execute the transaction. Using the name of the transaction adapter as the key, the broker then obtains an object reference of the transaction adapter. The name service can be used to obtained the object reference. Using the object reference, the broker submits the transaction to an interface of the transaction adapter with the input data as parameter. The transaction is executed and the broker receives a response from the transaction adapter. The broker forwards the response to the client. The broker can segment the input data before submitting to the transaction adapter if needed. If the response is in multiple segments, the broker can combine the multiple segments into one string before forwarding the response to the client. Further, the broker may receive a security identifier from the client and forward to the transaction adapter for security authentication and\/or authorization.","In another embodiment, The broker of the present invention receives multiple communications connections from multiple clients. The broker consolidates the multiple communications connections and establishes one communications connection to the server.","In another embodiment, the broker of the present invention enables distributed applications to communicate with existing IMS servers. A client initiates a request to the broker to execute an IMS transaction. The broker contacts the routing service. The routing service locates the IMS transaction and an IMS control region. The routing service returns a transaction name and the name of the Orbix IMS adapter that can execute the transaction. Using the Orbix IMS adapter name as the key, the broker obtains an object reference of Orbix IMS adapter. Using the object reference, the broker submits the transaction to an IMSraw interface. The response returned from the IMS control region is returned to the client.","The present invention provides a broker that enables distributed applications to communicate with legacy systems in distributed computing environment. The present invention provides a broker that manages communications between distributed applications and service provider applications. The broker of the present invention reduces a number of socket connections between distributed applications and transaction adapters. The broker enables the service provider applications to be able to provide services in a large scale distributed environment without degradation of performances. The broker of the present invention can be provided as a CORBA service, an MQSeries-based service, or other type of middleware services.","The broker of the present invention receives a request to execute a transaction from a client. The broker locates the transaction and an appropriate transaction adapter. The broker submits the request via the transaction adapter. Once the transaction is executed, the broker receives a response from the transaction adapter and forwards the response to the client. The broker may receive requests from multiple clients via multiple communications connections. The broker consolidates the multiple connections and provides one communications connection to the transaction adapter. The broker hides and encapsulates all of its functions within one service.","Reference will now be made in detail to the preferred embodiments of the present invention, examples of which are illustrated in the accompanying drawings.","The broker of the present invention can be used with any type of transaction adapters. For clarity, however, the below description uses an IMS adapter as an example.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["308","308","310","310","318","316","312","318","316","312","312","314"]},"Client  initiates a request to execute transaction . Broker  receives the request. Broker  then locates IMS adapter  and transaction  using routing service . Name service  provides an object reference of routing service . Routing service  is disclosed in U.S. patent application Ser. No. 10\/223,359 filed on Aug. 20, 2002, which is assigned to the assignee of the present application and is incorporated herein by reference in its entirety. Once IMS adapter  and transaction  are located, broker  submits the request to IMS adapter  to execute transaction .","Broker  includes interfaces. Interface  of broker  can be defined in an IDL as follows:\n\n","As shown above, input parameters of the execute method includes, for example, \u201cpolicy,\u201d \u201cdesiredProperties\u201d and input data.","The attributes of the execute method \u201cpolicy\u201d and \u201cdesiredProperties\u201d are forwarded to the routing service and used to locate an appropriate transaction. The first attribute \u201cpolicy\u201d can be equivalent to a contract name in the local database of the routing service.","The second input attribute \u201cdesiredProperties\u201d may be a sequence of property name\/value pairs. Some possible types of desiredProperties can include the following:","version: indicates a version of a transaction or object to be resolved by the routing service;","mode: provides a direction to the routing service;","userid: indicates an unique identifier associated with a user;","otherid: indicates an unique identifier associated with a user, which can be used for second level authentication by an IMS (This may be an option);","maxresplen: indicates desired maximum length of a response (This may be an option);","loglevel: indicates desired loglevel of the broker for a particular transaction (This may be an option);","key: indicates a content-based routing key to be used in mapping to a target service (For example, address, site code, state code, or any other content-based routing criteria defined by a client can be used. The routing service may parse the key provided by the client based on a rule specified on the policy to build the true concatenated key to be matched against the routing rules. The key can be extracted from the data and can be used by the routing service to find the routing information. For data 123456789, for example, key can be 123456. The key may be an option); and","timeout: indicates maximum amount of time that the broker would wait for a response from an IMS adapter (Timeout may be indicated in milliseconds. This may be an option).","Exceptions, such as, RequiredPropertyNotFoundException, InvalidValueException and UnrecognizedPropertyException, indicate errors in using the broker. For example, UnrecognizedPropertyException indicates that a property is not recognized by the broker.",{"@attributes":{"id":"p-0043","num":"0085"},"figref":["FIG. 4","FIG. 3"],"b":"300"},"In step , client  initiates a request to execute transaction . Client  invokes the execute method of broker  defined in the IDL shown above. Client  provides the input parameters. The input parameters include a policy, input data and desiredProperties.","In step , broker  receives the request with the input parameters from the client.","In step , broker  sends a routing request to routing service  to locate IMS adapter  and transaction . Broker  forwards information needed for routing service  to locate the IMS adapter and the transaction to the routing service. Broker  forwards the policy and the desiredProperties from the input parameters to routing service .","In step , routing service  receives the routing request and returns identifiers of IMS adapter  and transaction  to broker . The identifiers include, for example, a name of IMS adapter  and a name of transaction . The operation of routing service  is disclosed in U.S. patent application Ser. No. 10\/223,359 filed on Aug. 20, 2002.","In step , using the identifiers received from routing service , broker  obtains an object reference of IMS adapter . Broker  can use name service  to obtain the object reference.","In step , broker  connects to IMS adapter  and forwards the input data received from the client to execute transaction . An interface , such as an IMSraw interface, can be used for the communication.","In step , the transaction is executed and IMS adapter  returns a response. The response may include a character sequence. The response may also include a length of the response.","In step , broker  receives the response and forwards the response to client .",{"@attributes":{"id":"p-0052","num":"0094"},"figref":["FIG. 5","FIG. 3"],"b":["316","300"]},"In step , an IDL for broker  is obtained. The IDL is then compiled on client  to obtain a stub. The stub is integrated with a client code. The client will use the stub to communicate with broker .","In step , the input parameters of the execute method of broker  are provided in the client code. This can be achieved by providing a desired value for input attributes of the execute method. The input attributes of the execute method are described in detail above. A value for \u201cpolicy\u201d is provided. For \u201cdesiredProperties\u201d, for example, mode can be set as \u201cmode=T\u201d and timeout can be set as \u201ctimeout=40000.\u201d Other desiredProperties, such as key and loglevel can also be provided. Further, the input data string that is appropriate to execute the transaction is provided. The length of a request string may be provided.","Following is an example of the client code that can be used.",{"@attributes":{"id":"p-0056","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ims::Broker_ptr IT_obj;",{}]},{"entry":["CORBA::String_var","policy;"]},{"entry":["ims::Broker::PropertySeq","desiredProperties;"]},{"entry":["CORBA::String_var","request;"]},{"entry":["CORBA::String_var","response;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"policy=\u201cNAVTEST3\u201d;"},{"entry":"desiredProperties.length(3); \/\/ number of properties"},{"entry":"desiredProperties[0].name=\u201cVERSION\u201d;"},{"entry":"desiredProperties[0].value=\u201c0001\u201d;"},{"entry":"desiredProperties[1].name=\u201cMODE\u201d;"},{"entry":"desiredProperties[1].value=\u201cT\u201d;"},{"entry":"desiredProperties[2].name=\u201cKEY\u201d;"},{"entry":"desiredProperties[2].value=\u201cA04\u201d;"},{"entry":"indata=\u201cA04 BLAHBLAHBLAH\u201d;"},{"entry":"try {"},{"entry":"\u2003IT_obj->execute("},{"entry":"\u2003\u2003policy,"},{"entry":"\u2003\u2003desiredProperties,"},{"entry":"\u2003\u2003request, 0,"},{"entry":"\u2003\u2003response);"},{"entry":"}"},{"entry":"catch (const ims::Broker::NotFoundException &ex) {"},{"entry":"\u2003\u2002cout << \u201ccall_ims_Broker_execute( ): call failed properly due to...\u201d"},{"entry":"\u2002\u2003\u2003\u2003<< endl"},{"entry":"\u2002\u2003\u2003\u2003<< \u201c ims:Broker::NotFoundException exception = \u201d"},{"entry":"\u2002\u2003\u2003\u2003<< ex.reason << endl;"},{"entry":"\u2003\u2002return;"},{"entry":"}"},{"entry":"catch (const CORBA::SystemException &ex) {"},{"entry":"\u2003\u2003cout << \u201ccall_ims_Broker_execute( ): call failed.\u201d << endl"},{"entry":"\u2003\u2003\u2003\u2003<< ex << endl;"},{"entry":"\u2003\u2003return;"},{"entry":"}"},{"entry":"cout << \u201ccall_MBDB_Broker_execute( ): \u201d"},{"entry":"\u2003\u2003<< \u201csuccess: got back...\u201d"},{"entry":"\u2003\u2003<< endl;"},{"entry":"cout << \u201c response = \u201d << response << endl;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In step , an object reference of broker  is obtained. Remote CORBA services (either remote routing service or other remote CORBA services) or the client's local CORBA name service can be used to obtain the object reference. Preferably, the client's local CORBA name service is used. Lookup method can be used to obtain the object reference.","In step , the client invokes the execute method of broker . Broker  then locates transaction  and IMS adapter  using routing service . The broker accesses the transaction via the IMS adapter. The transaction is executed. The IMS adapter returns a response to broker .","In step , the client receives the response from the broker. The response may include character sequence. The response may also include a length of the response.","Broker  of the present invention facilitates execution of a transaction by building and sending a request to the legacy systems. Some of IMS transactions are horizontally distributed based on the data contained in the request (i.e., content routing). For example, a telephone service provider may have multiple mainframe regions. Each mainframe region has databases that contain information regarding a portion of the customers of the telephone service provider. Alabama customer accounts, for example, are located in a control region different from that of the South Florida accounts. The transactions also usually have different regions based on, for example, whether the request is for development, testing, or production (i.e., context routing). Using the routing service, the broker can locate the right transaction and right control region from the input parameters.","Broker  can segment the input data string provided by the client before sending the input data string to the IMS adapter. For example, the IMS adapter sends and receives data in 8K blocks. If the input data string received from the client is larger than 8K, the broker can segment the input data string into one or more of 8K segments before sending the input data string to the IMS adapter. The IMS Adapter may convert the segmented input data string from ASCII (American Standard Code for Information Interchange) character set to EBCDIC (Extended Binary Coded Decimal Interchange Code) character set. Broker  can also receive a response in multiple segments and combine the multiple segments into one string before forwarding to the client.","Broker  provides authenticate delegation. The client provides a security identity, such as \u201cuserid,\u201d to the IMS adapter through the broker. To use the transaction in a particular control region, the userid of the request needs to have authority in IMSSS (IMS Security System). Transactions must be authenticated with the IMSSS before they are scheduled. The IMS adapter uses the security identity forwarded by the broker to check IMS security, when starting the transaction. The property \u201cotherid\u201d can be used for security authentication, in addition to the \u201cuserid.\u201d","The broker provides connect-pooling. The broker consolidates multiple socket connections between clients and transaction adapters. The broker enables multiple clients to be able to connect to an transaction adapter using one socket connection. The broker concentrates the sockets for multiple clients within single application server and also for multiple servers.",{"@attributes":{"id":"p-0064","num":"0106"},"figref":"FIG. 6","b":["620","622","624","626","628","600","600","300","600","602","604","606","608","600","610","600","612","614","601","612","614","600","622","624","626","600","622","624","626"]},"The foregoing disclosure of the preferred embodiments of the present invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many variations and modifications of the embodiments described herein will be apparent to one of ordinary skill in the art in light of the above disclosure. The scope of the invention is to be defined only by the claims appended hereto, and by their equivalents.","Further, in describing representative embodiments of the present invention, the specification may have presented the method and\/or process of the present invention as a particular sequence of steps. However, to the extent that the method or process does not rely on the particular order of steps set forth herein, the method or process should not be limited to the particular sequence of steps described. As one of ordinary skill in the art would appreciate, other sequences of steps may be possible. Therefore, the particular order of the steps set forth in the specification should not be construed as limitations on the claims. In addition, the claims directed to the method and\/or process of the present invention should not be limited to the performance of their steps in the order written, and one skilled in the art can readily appreciate that the sequences may be varied and still remain within the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
