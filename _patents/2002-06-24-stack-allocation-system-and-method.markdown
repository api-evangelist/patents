---
title: Stack allocation system and method
abstract: A stack allocation system and method is described. In one implementation, an attempt is made to allocate N bytes of data to a stack having a fixed depth. A probe size for the stack is determined. Verification is then made to ascertain whether the probe size and the N bytes of data exceed the fixed depth of the stack, prior to allocating the N bytes of data to the stack. In another implementation, the N bytes of data are allocated to a heap; if the probe size and the N bytes of data exceed the fixed depth of the stack.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07124251&OS=07124251&RS=07124251
owner: Microsoft Corporation
number: 07124251
owner_city: Redmond
owner_country: US
publication_date: 20020624
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["This invention relates to stack memory allocation in computer systems.","A stack is a region of memory in which programs store data such as procedure and function call return addresses, passed parameters, local variables and other related status data. Various entities can maintain one or more stacks, including for instance, the processor, programs and the operating system. Some stacks are implemented as a region in virtual memory. A pointer, referred to as the \u201cstack pointer\u201d is used to reference virtual memory locations in the stack when reading and writing data to physical memory locations indicated by the virtual memory locations. The reference pointer is also used when reading and writing data directly to the stack.","An allocate-on-demand stack typically consists of two regions: an allocated region and a guard region. The guard region is not mapped to physical memory. The guard region is a reserved portion of non-committed virtual memory that bounds the outermost limit of the currently allocated stack memory. In other words, it is a range of virtual addresses into which the stack pointer can be advanced, but for which actual physical memory has not yet been committed.","When a program attempts to access a guard region a memory fault is generated, referred to as a \u201cstack overflow exception.\u201d The exception is typically handled by some type of exception handling block. Most executing programs will not fail at this point and the overflow exception is handled transparently to a user. However, if the system cannot commit memory for a now-longer stack, the \u201cstack overflow exception\u201d is considered unhandled which causes a catastrophic program failure.","The stack can also be extended programmatically through a high performance memory allocator function called \u201callocate-a\u201d indicated in source code as \u201calloca( ).\u201d Unfortunately, with fixed sized stacks and robust program threads, the allocate-a function can cause an stack overflow exception due to exhaustion of the stack or exhaustion of memory or page file. Accordingly, because of the limitations noted above, the allocate-a function is unable to prevent stack overflow exceptions from occurring when allocating data to a stack beyond the available depth of the stack.","A stack allocation system and method is described. In one implementation, an attempt is made to allocate N bytes of data to a stack having a fixed depth. A probe size for the stack is determined. Verification is then made to ascertain whether the probe size and the N bytes of data exceed the fixed depth of the stack, prior to allocating the N bytes of data to the stack.","In another implementation, the N bytes of data are allocated to a heap if the probe size and the N bytes of data exceed the fixed depth of the stack.","The following discussion is directed to stack memory allocation. The subject matter is described with specificity to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventors have contemplated that the claimed subject matter might also be embodied in other ways, to include different elements or combinations of elements similar to the ones described in this document, in conjunction with other present or future technologies.","Overview","The following discussion introduces the broad concept of safely allocating data to a stack without causing a stack overflow exception, even though the allocated data may exceed a generally fixed depth of the stack. This is accomplished by probing the available stack depth prior to allocating data to the stack. In the event that intended allocated data exceeds the allocated stack depth, the allocation is routed to a heap.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","106","100","100"]},"To the left of stack  is an associated thread , which is generally defined as a code of sequences that operate multitasked on individual stacks, such as stack . Associated with the exemplary thread  are functions A, B, C and D (generally referenced as  in ). Each function  includes N bytes of data, where N is any number greater than zero. It is appreciated that a function may be any data size including any combination of bytes.","Stack  is typically implemented as a region in virtual memory beginning at some stack base address. As each function  is called, they are placed on the stack  and a stack pointer is moved to a next available address to receive data. The guard region  provides a reserved region of non-committed virtual memory that bounds the outermost limit of allocated data to stack . In other words, the stack pointer cannot be advanced beyond a generally fixed address for stack  indicated by the guard region  without causing a stack overflow exception as described above.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2","FIG. 5"],"b":["200","200","502","200","202","208","208","100"]},"Also shown in  are two logic modules: an allocate module  and a safe-allocate module , both of which are functions that can be called by processor  when allocating data to a stack such as stack . In one implementation, the allocate module  and safe-allocate module  are a set of functions maintained as part of a Microsoft\u00ae C run-time (CRT) library (not shown) within memory management system . The combination of the allocate module  and safe-allocate module  serve as a stack allocator (in the form or logic and\/or computer-executable instructions forming a logic module) for computer system .","Application programs call safe-allocate module  to ensure that when data is allocated to a stack, the data is allocated safely preventing most occurrences of a stack overflow exception failure. This is accomplished in several ways. In one implementation, safe-allocate module  probes the stack prior to allocating data. If the event there is an overflow on the stack  or the guard region  cannot be extended, safe allocate module  attempts to route the data overflowing the available space on the stack  to a heap  after replacing the guard region.","Probing the Stack","In one exemplary implementation, safe-allocate module  determines a probe size of a stack. Accordingly, when a program operating on processor  attempts to allocate N bytes of data associated with a particular function  to a fixed-depth stack , safe-allocate module  determines the probe size for the stack and then ensures that the N bytes of data to be allocated plus the probe size do not exceed the available fixed-depth of the stack .","Suppose, for example purposes that a program is attempting to dynamically allocate 1K of data to stack . If the allocate module  performed the allocation independently of the safe-allocate module , allocate module  would allocate the 1K of data for Function C to stack  and would not ascertain whether future functions have enough space to be allocated to the stack. So, if the stack only has 2K of available space left and an attempt is made to allocate Function D (where function D is 3K) to the stack , then there is not enough space left of the stack  for Function D to be successfully allocated. Thus, the allocation of Function D may fail.","To address this problem, safe-allocate module  adds a size to the number of bytes that is requested to be allocated to the stack . For example, suppose a program desires to allocate data to the stack, but the stack requires 1K of available stack space after the data is allocated. Safe-allocate module  will add a probe size to 1K. The probe size is an estimate of additional space needed on the stack when receiving a command to allocate a function to the stack. So, even if there is 1K of space available on the stack in this example, an additional amount of space is needed for other future subfunction allocations. For instance, suppose when function C is allocated, in this example, that the probe size is 4K. Prior to allocating Function C, safe-allocate module  attempts to allocate 1K (for Function C) plus 4K (for the probe size) for a total 5K. In the event there is a total of 5K available on the stack , then Function C can be allocated by allocate module .","On the other hand, if there isn't enough room to allocate the 5K of code (the 5K code hits the guard region ), then safe allocate module  will attempt to extend the stack  to permit the allocation, by moving the guard region down to a higher address to accommodate the additional space needed on the stack. Alternatively, safe allocate module  can determine whether there is enough room on the stack without moving the guard region , by leaving the guard region intact if the allocation fails. If the additional space needed can be provided by extending the guard region, then when Function C calls Function D, there isn't an allocation problem, because there is extra space on the stack  for Function D.","If the guard region  cannot be moved, because the address space has already been committed or reserved in real virtual memory or the allocation requires the stack pointer to go past reserved space of the guard region in its entirety, then safe-allocate module  will attempt to allocate to the heap  after handing the generated stack overflow exception.","Routing to the Heap",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIGS. 3"],"b":["210","210","208","202","208","301","210","200","300","4","5"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4","b":["400","200","210","106","100","400","200"]},"At a block , an attempt is made to allocate to stack . At a block , safe-allocate module  is called by processor  to ascertain the probe size for stack . Safe-allocate module , after determining the probe size, adds the probe size to the N bytes of data to be allocated.","At a block , a determination is made whether the probe size together with the size of the data to be allocated would exceed the guard region . If according to the No branch of block , the probe size and function do not exceed the guard region, then according to block  the N bytes of data associated with the function  can be directly allocated to the stack  by allocate module .","On the other hand, if according the Yes branch of block , the probe size together with the size of the allocated data exceeds the maximum allowable stack allocation , then according to a block , safe-allocate module  routes the function to the heap . Safe-allocate module  contacts the heap manager  through standard Application Programming Interfaces (API) using native CRT functions such as \u201cMemory Allocate\u201d to allocate data from the heap .","At a block , whether the allocation was to the stack (see block ) or to the heap  (see block ), safe-allocate module  inserts a marker into the allocation indicating whether the allocation originated from the stack or heap. Safe-allocate uses this information later to determine whether to free-up data (e.g., when a program calls the free routine associated with the safe-allocate code).","Exemplary Computing System and Environment",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5","b":["500","200","500","500","500"]},"The computer and network architectures can be implemented with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, gaming consoles, distributed computing environments that include any of the above systems or devices, and the like.","Safe-allocate module  may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Safe-allocate module  may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","The computing environment  includes a general-purpose computing system in the form of a computer . The components of computer  can include, but are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including the processor  to the system memory .","The system bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, and a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus.","Computer system  typically includes a variety of computer readable media. Such media can be any available media that is accessible by computer  and includes both volatile and non-volatile media, removable and non-removable media. The system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM is . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently operated on by the processing unit .","Computer  can also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example,  illustrates a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown), a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . Alternatively, the hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by a SCSI interface (not shown).","The disk drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for computer . Although the example illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, random access memories (RAM), read only memories (ROM), electrically erasable programmable read-only memory (EEPROM), and the like, can also be utilized to implement the exemplary computing system and environment.","Any number of program modules can be stored on the hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of example, an operating system , one or more application programs , other program modules , and program data . Each of such operating system , one or more application programs , other program modules , and program data  (or some combination thereof) may include an embodiment of the safe-allocate module .","Computer system  can include a variety of computer readable media identified as communication media. Communication media typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","A user can enter commands and information into computer system  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to the processing unit  via input\/output interfaces  that are coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device can also be connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , other output peripheral devices can include components such as speakers (not shown) and a printer  which can be connected to computer  via the input\/output interfaces .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, the remote computing device  can be a personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, and the like. The remote computing device  is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computer system .","Logical connections between computer  and the remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. When implemented in a LAN networking environment, the computer  is connected to a local network  via a network interface or adapter . When implemented in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the wide network . The modem , which can be internal or external to computer , can be connected to the system bus  via the input\/output interfaces  or other appropriate mechanisms. It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication is link(s) between the computers  and  can be employed.","In a networked environment, such as that illustrated with computing environment , program modules depicted relative to the computer , or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs  reside on a memory device of remote computer . For purposes of illustration, application programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer system , and are executed by the data processor(s) of the computer.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is described with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
