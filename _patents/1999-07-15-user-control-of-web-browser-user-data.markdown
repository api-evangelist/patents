---
title: User control of web browser user data
abstract: A mechanism to dynamically present basic authentication and cookie information to a web browser user. As part of a login, a user will have entered a userid and password as part of the basic authentication process. He or she also can configure the web browser to display cookies that are sent to the browser for setting. After their initial display, however, this information is either hidden or not easily accessible to the user. The present invention is a mechanism that allows a web browser user easy access to his or her logged-on userid and cookies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06851060&OS=06851060&RS=06851060
owner: International Business Machines Corporation
number: 06851060
owner_city: Armonk
owner_country: US
publication_date: 19990715
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates generally to web browsing and, in particular, to a method and mechanism for dynamically presenting user data (e.g., basic authentication and cookie information) to a web browser user.","2. Description of the Related Art","The World Wide Web is the Internet's multimedia information retrieval system. In the web environment, a client machine and, in particular, a web browser, effects transactions to web servers using the Hypertext Transfer Protocol (HTTP), which is a known application protocol providing users access to files (e.g., text, graphics, images, sound, video, etc.) using a standard page description language known as Hypertext Markup Language (HTML). HTML provides basic document formatting and allows the developer to specify \u201clinks\u201d to other servers and files. In the Internet paradigm, a network path to a server is identified by a so-called Uniform Resource Locator (URL) having a special syntax for defining a network connection. Use of an HTML-compatible browser (e.g., Netscape Navigator or Microsoft Internet Explorer) at a client machine involves specification of a link via the URL. In response, the client makes a request to the server identified in the link and, in return, receives a document or other object formatted according to HTML. A collection of documents supported on a web server is sometimes referred to as a web site.","A web browser automatically stores certain user data during the process of the user browsing the Internet. Thus, for example, the HTTP protocol uses so-called \u201cbasic authentication\u201d to enable a user to present a login, typically a userid and password, to browse content on a given site. The basic authentication function works as follows. When the web browser receives a HTTP 401 unauthorized return code from a web server as part of the HTTP transaction if the user is not logged on to the specified realm, the web browser displays a dialog box prompting the user for his or her userid and password. This userid\/password is then passed along with every HTTP transaction to URLs in the specified realm. The userid and password are not visible to the user thereafter unless the receiving CGI script on the web server wishes to display the value. However, the userid and password are kept for all instances of the web browser as long as a session of the web browser exists.","Thus, once the user logs into a realm, the browser maintains the basic authentication data during the browsing session. After login, however, the basic authentication data is either hidden or not easily accessible to the user, which is undesirable. Thus, for example, assume that an administrator on an intranet has logged in as a simple user but then decides that he or she decrees to assume administrative duties. In the prior art, a user cannot login as a first user and then login as a second user during the same session without first logging off or closing down the browser.","Another type of user data is a so-called \u201ccookie.\u201d Because HTTP is a stateless protocol, a cookie can be set by a server to customize data to a particular user's web browser. Cookies thus provide a degree of \u201cstate\u201d to HTTP. By default, a browser automatically stores cookie data without giving the user the option or knowledge of it being done. When a cookie is set as part of a HTTP transaction, it will include the path the cookie is valid for, the cookie's name and value, and other optional attributes, such as the expiration date for the cookie. In the prior art, a user can configure his or her web browser to show the cookie that the web server is attempting to set in a dialog box along with the options to set or cancel the cookie. After this initial display, the cookie value is unavailable for viewing or modification by the user. The browser may store cookie values in a text file, but this file can only be viewed outside of the browser and may only be updated when the browser is closed.","Thus, like basic authentication data, cookie data typically is not exposed to the user. Thus, for example, after a user has agreed to accept cookies, there is no easy way for the user to modify the cookie without first bringing down the browser.","It would be highly desirable to provide a web browser user with more control over what authentication and cookie data is stored on his or her behalf by a web browser or any other HTTP client application. The present invention addresses this problem.","A web browser user data control mechanism dynamically presents basic authentication and\/or cookie information to the web browser user. The mechanism has two primary components: a basic authentication display routine and a cookie data display routine.","The basic authentication display routine presents the logged on userid for the user as part of the text and icons that remain visible above the web browser frame. Preferably, the web browser dynamically displays the basic authentication userid value based on the current URL. Some URLs may not have a userid associated with them. If desired, a userid and non-userid icon may be placed next to the userid or \u201cnot logged in\u201d text for further visual identification. The realm name may also be appended. This feature allows the user to immediately know whether or not they are logged into a site.","The basic authentication display routine also allows the user an option to flush the basic authentication userid and password associated with a domain or realm. Preferably, this option is made available when the user clicks on the displayed userid and selects a \u201clogoff\u201d menu item. Thus, the user is prompted by the web browser again when the web server returns a 401 return code due to protected access. This feature is useful for administration CGIs where the user may have more than one account that the user needs to switch between without having to take the web browser down.","The cookie display routine displays cookie data that is sent to the web browser from a given web server. The display routine places a cookie icon as part of the text and icons that remain visible above the web browser frame. The web browser displays a no-cookie icon if no cookies are set for the path. When the user selects the cookie icon, the browser displays a dialog box showing all the stored cookie values for the URL or path. A display in the dialog box shows the attributes of each cookie and scroll bars may be used to let the user browse all the values. Buttons at the bottom of the dialog box allow the user to delete or modify an existing cookie value. If desired, the cookie display routine could allow additional cookie values to be set. In addition, the cookie display routine could allow the user to view, edit, or delete all cookie values, not just ones for the current URL.","The cookie data display routine also enables a user to block all cookies from a particular site, such as a web server that returns nothing but advertisement graphics to subscribing URLs.","The foregoing has outlined some of the more pertinent objects and features of the present invention. These objects should be construed to be merely illustrative of some of the more prominent features and applications of the invention. Many other beneficial results can be attained by applying the disclosed invention in a different manner or modifying the invention as will be described. Accordingly, other objects and a fuller understanding of the invention may be had by referring to the following Detailed Description of the Preferred Embodiment.","A representative system in which the present invention is implemented is illustrated in  plurality of Internet client machines  are connectable to a computer network Internet Service Provider (ISP)  via a network such as a dialup telephone network . As is well known, the dialup telephone network usually has a given, limited number of connections -. ISP  interfaces the client machines  to the remainder of the network , which includes a plurality of web content server machines . Network  typically includes other servers (not shown) for control of domain name resolution, routing and other control functions. A client machine typically includes a suite of known Internet tools, including a Web browser, to access the servers of the network and thus obtain certain services. These services include one-to-one messaging (e-mail), one-to-many messaging (bulletin board), on-line chat, file transfer and browsing. Various known Internet protocols are used for these services. Thus, for example, browsing is effected using the Hypertext Transfer Protocol (HTTP), which provides users access to multimedia files using Hypertext Markup Language (HTML). The collection of servers that use HTTP comprise the World Wide Web, which is the Internet's multimedia information retrieval system.","A given client machine and the server may communicate over the public Internet, an intranet, or any other computer network. If desired, given communications may take place over a secure connection. Thus, for example, a client may communication with the server using a network security protocol, such as Netscape's Secure Socket Layer (SSL) protocol or the IETF's Transport Layer Security (TLS) protocol.","A representative client is a personal computer, notebook computer, Internet appliance or pervasive computing device (e.g., a PDA or palm computer) that is Pentium, PowerPC\u00ae- or RISC-based. The client includes an operating system such as Microsoft Windows, Microsoft Windows CE or PalmOS. As noted above, the client includes a suite of Internet tools including a Web browser, such as Netscape Navigator or Microsoft Internet Explorer, that has a Java Virtual Machine (JVM) and support for application plug-ins or helper applications. The browser includes support for basic authentication (i.e. user login to a server via userid and password) as well as server-set cookie data. These are conventional browser functions.","A representative web server is an IBM Netfinity server comprising a RISC-based processor , a UNIX-based operating system  and a web server program . OS  and web server program  are supported in system memory  (e.g., RAM). The server may include an application programming interface  (API) that provides extensions to enable application developers to extend and\/or customize the core functionality thereof through software programs including plug-ins, CGI programs, applets, and the like.","One such program is a web browser user data control mechanism  of the present invention. As illustrated in , the web browser user data control mechanism that dynamically presents basic authentication and\/or cookie information to the web browser user. The inventive mechanism has two primary components: a basic authentication display routine , and a cookie data display routine . The components would preferably exist on the web browser application. It would exist on the server if the web browser was being run on the server.","As described above, as part of a login, a user will have entered a userid and password as part of the basic authentication process. He or she also can configure the web browser to display cookies that are sent to the browser for setting. After their initial display, however, this information is either hidden or not easily accessible to the user. The user data control mechanism  allows the web browser user easy access to their logged-on userid and cookies.","In particular, the basic authentication display routine  enables the web browser user to ascertain the userid\/password under which he or she is logged in as part of basic authentication (assuming he or she did so). According to the invention, the basic authentication display routine  presents the logged on userid for the user as part of the text and icons that remain visible above the web browser frame. Preferably, the web browser dynamically displays the basic authentication userid value based on the current URL. Some URLs may not have a userid associated with them. If desired, a userid and non-userid icon may be placed next to the userid or \u201cnot logged in\u201d text for further visual identification. The realm name could also be appended. This feature allows the user to immediately know whether or not they were logged into a site.","The basic authentication display routine  also allows the user an option to flush their basic authentication userid and password associated with a domain or realm. Preferably, this option is made available when the user clicks on the displayed userid and selects a \u201clogoff\u201d menu item. Thus, the user is prompted by the web browser again when the web server returns a 401 return code due to protected access. The user would then have to login to the domain or realm again. This feature is useful for administration CGIs where the user may have more than one account, such as cell_admin and user1, that the user needs to switch between without having to take the web browser down.","The cookie display routine  displays cookie data that is sent to the web browser from a given web server. The display routine  places a cookie icon as part of the text and icons that remain visible above the web browser frame. The web browser would display a no-cookie icon if no cookies are set for the path. When the user selects the cookie icon, the browser displays a dialog box showing all the stored cookie values for the URL or path. A spreadsheet display in the dialog box shows the attributes of each cookie and scroll bars may be used to let the user browse all the values. Buttons at the bottom of the dialog box may allow the user to delete or modify an existing cookie value. If desired, the cookie display routine may allow additional cookie values to be set. In addition, the cookie display routine may allow the user to view, edit, or delete all cookie values, not just ones for the current URL.","If desired, the cookie data display routine enables a user to block all cookies from a particular site, such as a web server that returns nothing but advertisement graphics to subscribing URLs. In the prior art, as previously noted, the user does not have control over accepting or denying cookies for a particular site.",{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 2","b":["100","102","104","106","110","112","114","116","118","120","122","124"]},{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 3","b":["200","205","215","201","207","210","212","214"]},"When the user clicks on the cookie icon , a Cookie List Dialog  is displayed as illustrated in FIG. . The Dialog  presents a list of all the cookies that were sent to the matching domain and path. The cookie attributes  are shown in a list with all the possible actions represented as buttons  at the bottom of the dialog. When the user selects the Modify button, for example, a Cookie Modify Dialog  is displayed as illustrated in FIG. . The Dialog  allows the user to modify a selected cookie. The cookie attributes  are shown with modification fields and check boxes with all the possible actions represented as buttons  at the bottom of the dialog. Of course, one of ordinary skill in the art will appreciate that selection of the other buttons in the Cookie List Dialog allow the user to control other cookie data using similar dialog screens.",{"@attributes":{"id":"P-00039","num":"00039"},"figref":"FIGS. 6A and 6B","b":["300","305","307","345","307","307","310","330","312","315","315","317","320","300"]},"If the browser did not receive a 200 HTTP return code at decision step , processing continues to decision step , where the web browser checks to see if it received a 401 or Unauthorized HTTP return code from the web server. If not, the browser continues to step  where it posts the return code error to the user. Next, the browser proceeds back to step . If, however, the browser received a 401 HTTP return code at decision step , the web browser prompts the user for a userid and password. Next, at step , the browser sends the userid and password with the URL request back to the web server. The process flow then continues at decision step  where the browser checks if it received a 401 HTTP return code. If so, control returns to step . If not, the process flow continues to decision step .","At step , the browser checks if it received a 200 HTTP return code. If not, control proceeds to step . If the outcome of the test at step  is positive, control continues at step , where the routine stores the userid, password, and the associated server or domain name in the BasicAuth table. Next, at step , the browser displays the logon icon and the userid in the status area and proceeds to step . At step , the browser checks if the user selected the logoff action from a menu pull down from the logon and userid values in the browser status area. If not, some other action was taken and the browser processes it at step . If the outcome of the test at step  is positive, the browser clears the userid, password, and associated server or domain name in the BasicAuth table. This is step . Next, at step , the browser displays the no logon icon and clears the userid from the browser status area before returning to step .",{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 7","b":["400","403","405","427"]},"At step , the browser checks to see if the domain and path have entries in the Cookie Table. If the outcome of the test at step  is positive, control continues at step . At this step, the browser retrieves the matching cookie data whose entries are unblocked to the web server with the URL. Processing then continues at step . If there are no entries in the Cookie Table, the test at step  is negative and processing continues to step . At this point in the control routine, the web browser sends the URL request without cookie data to the web server. Processing then continues at step . At this step, the web browser received data from the web server and checks if it also received cookie data. If the outcome of step  is negative, the browser checks if there are matching cookie entries in the Cookie Data Table at step . If not, the browser displays no cookie icon and clears the cookie number value in the status area at step . Process flow then continues at step . If there are matching cookie entries in the Cookie Data Table, the browser posts the cookie icon in the status area at step , and control then continues at step .","If the browser received cookie data, which is indicated by a positive outcome at step , the browser continues to decision step  where the user may be prompted to accept the cookie data. The user could also have set the browser settings to automatically accept or reject cookie data. If the user did not accept the cookie data, process flow continues at step . If the user did accept the cookie data, process flow continues at step , where the browser posts the cookie icon and number of matching cookies in the status area. Next, at step , the browser stores the one or more cookie entries in the CookieData Table. Process flow then continues at step , where the browser displays the data retrieved from the web server in its visual area. The process flow then returns to step .","At decision step , the browser checks if the user selected the cookie icon or number in the status area. If not, the user performed another action in the browser, which action is then processed at step . If the outcome of step  is positive, at step , the browser posts the Cookie List Dialog showing all entries in the CookieData Table matching the server or domain name and path. Next, the browser waits for the Cookie List Dialog to close at step . Flow then continues back at step . This completes the processing.",{"@attributes":{"id":"P-00046","num":"00046"},"figref":"FIG. 8","b":["500","505","507","510","512","515"]},"At step , the browser checks if the user selected the delete button or the dialog. If not, processing continues to step . If the user has selected the delete button, processing continues at step , where the browser removes the selected cookie entry from the Cookie Data table. Next, at step , the browser removes the cookie entry from the Cookie List Dialog. The Cookie List Dialog is then refreshed at step . Process flow then continues back at step .","At step , the browser checks if the user selected the modify button on the dialog. If not, processing continues at step . If the user has selected the modify button, processing continues at step , where the browser displays the Modify Cookie Data Dialog. This dialog was illustrated above. The user changes entries in the Modify Cookie Data Dialog at step . The process flow then continues at step . If the user selects the save button for the Modify Cookie Data Dialog at step , the browser updates the corresponding cookie entry in the Cookie Data table at step . The browser closes the Modify Cookie Dialog at step  before proceeding to step . If the user did not select the save button at step , the browser checks if the user selected the cancel button in the Modify Cookie Data Dialog. This is step . If not, control returns to step . If the user selected the cancel button, the process flow continues at step .","At step , the browser checks if the user selected the block button an the dialog. If not, processing continues at step . If the user selected the block button, processing continues at step , where the browser changes the blocked attribute to an on state in the corresponding cookie entry in the Cookie Table. The process flow then returns to step . At step , the browser checks if the user selected the unblock button on the dialog. If not, processing returns to step . If the user has selected the unblock button, processing continues at step , where the browser changes the blocked attribute to an off state in the corresponding cookie entry in the Cookie Table. Flow then returns to step  to complete the processing.","The basic authentication and cookie data display routines are separate and independent. Thus, it is not required to display the cookie icon (and to provide the cookie data display functionality) while the browser displays the logon icon and userid. Likewise, it is not required to display the logon icon and userid (and to provide the basic authentication functionality) while the browser displays the cookie icon. Moreover, like the cookie data, the basic authentication routine may show all stored values for basic authentication userids and passwords, although passwords typically would not be displayed in plaintext. In addition, if desired, basic authentication userids and passwords could be remembered from one session to the next, although they should be encrypted if stored in a file.","Moreover, while the present invention has been illustrated in the context of a web browser, this inventive technique is not so limited. The functionality described above may implemented in any application that processes HTTP transactions.","The present invention provides significant advantages. The web browser user data control mechanism gives users more control over the information the web browser uses and keeps for and on them. Being able to view and change basic authentication userid and cookies gives the user the knowledge of what information is being kept by the browser and sent to the web server. The customized views to the current URL help provide more relevant information to the user. In addition, the basic authentication routine advantageously allows the clearing or constant display of the current userid.","As noted above, the inventive mechanism is preferably implemented in or as an adjunct to a web browser. Thus, the invention does not require any modifications to conventional server hardware or software. Although not meant to be limiting, the above-described functionality is preferably implemented as standalone native code or, alternatively, as a Java applet or application. Generalizing, the above-described functionality is implemented in software executable in a processor, namely, as a set of instructions (program code) in a code module resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network.","In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps.","Further, as used herein, a Web \u201cclient\u201d should be broadly construed to mean any computer or component thereof directly or indirectly connected or connectable in any known or later-developed manner to a computer network, such as the Internet. The term Web \u201cserver\u201d should also be broadly construed to mean a computer, computer platform, an adjunct to a computer or platform, or any component thereof. Of course, a \u201cclient\u201d should be broadly construed to mean one who requests or gets the file, and \u201cserver\u201d is the entity which downloads the file.","Having thus described my invention, what I claim as new and desire to secure by Letters Patent is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and the advantages thereof, reference should be made to the following Detailed Description taken in connection with the accompanying drawings in which:",{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIGS. 6A-6B"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
