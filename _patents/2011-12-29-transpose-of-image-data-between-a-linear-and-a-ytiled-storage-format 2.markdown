---
title: Transpose of image data between a linear and a Y-tiled storage format
abstract: Systems, apparatus, articles, and methods are described including operations to transpose image data between a linear-type storage format and a Y-tiled-type storage format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09659343&OS=09659343&RS=09659343
owner: INTEL CORPORATION
number: 09659343
owner_city: Santa Clara
owner_country: US
publication_date: 20111229
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Currently there are two typical methods to do the copy between linear storage in system memory and Y-tiled two dimensional (2D) surface storage in video memory. The first method uses the central processing unit (CPU) to do a copy, which typically favors a linear storage order. The second method uses the graphical processing unit (GPU) to do a copy, which typically favors a Y-tiled storage order.","For example, graphics hardware may often use Y-tiled 2D surface storage format in video memory for fast GPU access. Image data may be copied between system memory and Y-tiled surfaces in video memory.","One or more embodiments or implementations are now described with reference to the enclosed figures. While specific configurations and arrangements are discussed, it should be understood that this is done for illustrative purposes only. Persons skilled in the relevant art will recognize that other configurations and arrangements may be employed without departing from the spirit and scope of the description. It will be apparent to those skilled in the relevant art that techniques and\/or arrangements described herein may also be employed in a variety of other systems and applications other than what is described herein.","While the following description sets forth various implementations that may be manifested in architectures such system-on-a-chip (SoC) architectures for example, implementation of the techniques and\/or arrangements described herein are not restricted to particular architectures and\/or computing systems and may be implemented by any architecture and\/or computing system for similar purposes. For instance, various architectures employing, for example, multiple integrated circuit (IC) chips and\/or packages, and\/or various computing devices and\/or consumer electronic (CE) devices such as set top boxes, smart phones, etc., may implement the techniques and\/or arrangements described herein. Further, while the following description may set forth numerous specific details such as logic implementations, types and interrelationships of system components, logic partitioning\/integration choices, etc., claimed subject matter may be practiced without such specific details. In other instances, some material such as, for example, control structures and full software instruction sequences, may not be shown in detail in order not to obscure the material disclosed herein.","The material disclosed herein may be implemented in hardware, firmware, software, or any combination thereof. The material disclosed herein may also be implemented as instructions stored on a machine-readable medium, which may be read and executed by one or more processors. A machine-readable medium may include any medium and\/or mechanism for storing or transmitting information in a form readable by a machine (e.g., a computing device). For example, a machine-readable medium may include read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other forms of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.), and others.","References in the specification to \u201cone implementation\u201d, \u201can implementation\u201d, \u201can example implementation\u201d, etc., indicate that the implementation described may include a particular feature, structure, or characteristic, but every implementation may not necessarily include the particular feature structure, or characteristic. Moreover, such phrases are not necessarily referring to the same implementation. Further, when a particular feature, structure, or characteristic is described in connection with an implementation, it is submitted that it within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other implementations whether or not explicitly described herein.","As will be described in greater detail below, some example implementation may include operations to transpose image data between a linear-type storage formal and a Y-tiled-type storage format. Additionally, a reading of the image data from a source memory may be in a pattern adapted for the particular storage format associated with the source memory. Similarly, a writing of the image data to a destination may be in a pattern adapted for the particular storage format associated with the destination memory.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","102","102","112","114","120"]},"In some examples, graphics processing system  may include additional items that have not been shown in  for the sake of clarity. For example, graphics processing system  may include a radio frequency-type (RF) transceiver, and\/or an antenna. Further, graphics processing system  may include additional items such as a speaker, a display, an accelerometer, memory, a router, network interface logic, etc. that have not been shown in  for the sake of clarity.","In some examples, system memory  may be configured to store image data as a memory chunk  in a linear-type storage format. Such a linear-type storage format may be suitable for usage by CPU . Similarly, video memory  may be configured to store image data as a Y-tiled surface  in a Y-tiled-type storage format. Such a Y-tiled-type storage format may be suitable for usage by CPU .","In some examples, transpose module  may include matrix module  and vector module . In operation, one of CPU  and GPU  may operate to read image data from video memory  and write image data into system memory . Such a reading may include reading image data in a Y-tiled-type storage format via matrix module  (e.g., via a matrix pattern adapted for video memory ). Similarly, such a writing of image data into system memory  may include writing image data in a linear-type storage format via vector module  (e.g., via a vector pattern adapted for system memory ). Additionally or alternatively, similar operations may be performed in reverse to read image data from system memory  and write image data into video memory .","As illustrated, an image  may be stored in a Y-tiled-type storage format or in a linear-type storage format. The order of OWORDs  in  represents the storage order of the particular format (e.g., Y-tiled-type storage format represented by \u201cY\u201dWORDs or linear-type storage format represented by \u201cL\u201dWORDs). For example, the same image data may be associated with the same grid location regardless of formatting, however, Y-tiled-type storage format calls for one access order, while linear-type storage format calls for another access order. For instance. Y-tiled-type storage format OWORDs (e.g., YOW, YOW, YOW, YOW, etc.) are organized in a columnar order, while linear-type storage format OWORDs (e.g., LOW, LOW, LOW, LOW, etc.) are organized in a row order.","For example, in a Y-Tiled surface storage format, tiles may have a fixed 4 KB size and may be aligned to physical dynamic random access memory (DRAM) page boundaries. A 4 KB tile may be subdivided into a 32-high by 8-wide array of OWORDs for Y-Major Tiles, for Y-tiled-type storage formats, the 4 KB tiles may be stored sequentially in memory in row major order.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["200","200","203","202","205","204"]},"In operation, process  may operate with Y-tiled-type storage format to cache-line (YOW, YOW, YOW, YOW) from source memory . Similarly, process  may perform 8 total 64 byte cache-lime accesses . e.g., cache-line (YOW, YOW, YOW, YOW), cache-line (YOW, YOW, YOW, YOW) up to and including cache-line (YOW, YOW, YOW, YOW). At this point, process  may access the same image data for linear-type storage format to cache-line (LOW, LOW, LOW, LOW) for transfer to destination memory . Similarly, process  may perform 2 total 64 byte cache-line accesses , e.g., cache-line (LOW, LOW, LOW, LOW) and cache-line (LOW, LOW, LOW, LOW).","In such an implementation process  may operate so that on the source side, a portion  of each cache-line  is not used, resulting in substantial waste (e.g., seventy-five percent wasted and only twenty-five percent used).",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["300","300","303","302","305","304"]},"In operation, process  may operate with a Y-tiled-type storage format to cache-line (YOW, YOW, YOW, YOW) from source memory . Similarly, process  may perform 4 total 64 byte cache-line accesses , e.g., cache-line (YOW, YOW, YOW, YOW), cache-line (YOW, YOW, YOW, YOW) up to and including cache-line (YOW, YOW, YOW, YOW). At this point, process  may access the same image data for linear-type storage format to cache-line (LOW, LOW, LOW, LOW) for transfer to destination memory . Similarly, process  may perform 8 total 64 byte cache-line accesses , e.g., cache-line (LOW, LOW, LOW, LOW), cache-line (LOW, LOW, LOW, LOW) up to and including cache-line (LOW, LOW, LOW, LOW), each one twice.","In such an implementation, process  may operate so that on the destination side, a portion  of each cache-line  is not used, resulting in substantial waste (e.g., seventy-five percent wasted and only twenty-five percent used).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 1","FIG. 1"],"b":["400","400","402","404","403","402","114","404","112","405"]},"In such an implementation, the reading image data from source memory  may include reading image data from four contiguous data blocks of source memory  into sixteen cache lines of cache . For example, each data block may include eight rows of thirty-two bytes of image data and is associated with matrix pattern . Additionally, the transposing may include transposing matrix pattern,  into vector pattern  adapted for destination memory . Further, the writing image of data to destination memory  may include writing image data from the sixteen cache lines of cache  into eight contiguous data lines of destination memory , where each data line may include one row of one hundred and twenty-eight bytes of image data and is associated with vector pattern .","In the illustrated example, a GPU (not shown) may copy from a Y-tiled to a linear storage format through use of transpose process . The dotted line  indicates a GPU access order for copy of source memory . Similarly, the dotted line  indicates a GPU access order for writing to destination memory .","In operation, process  may operate with a Y-tiled-type storage format to cache-line (YOW, YOW, YOW, YOW) from source memory . Similarly, process  may perform 1.6 total 64 byte cache-line accesses , e.g., cache-line (YOW, YOW, YOW, YOW), cache-line (YOW, YOW, YOW, YOW) up to and including cache-line (YOW, YOW, YOW, YOW). At this point, transpose operations may be applied. After the transpose, process  may access the same image data via a linear-type storage format to cache-line (LOW, LOW, LOW, LOW) for transfer to destination memory . Similarly, process  may perform 16 total 64 byte cache-line accesses , e.g., cache-line (LOW, LOW, LOW, LOW), cache-line (LOW, LOW, LOW, LOW) up to and including cache-line (OW, OW, OW, OW). In such an implementation, process  may operate so that on both the source side and the destination side one hundred percent of each cache-line is used, resulting in zero waste.","In one example, process  may transpose four CM-type (C-for-Media) matrix (e.g., where each matrix is of size 8*32 byte) into eight CM-type vectors (e.g., where each vector is of size 128 byte). In such an example, each tile in video memory may be divided into 16 data blocks (e.g., where each data block is of size 8*32 byte), and each data block may be read into one of the CM-type matrix (e.g., of size 8*32 byte) by using CM media block read. Four data blocks (e.g., four CM-type matrix) in a row may be of size 8*128 byte and can be represented as eight CM vectors) (e.g., of size 128 byte). These eight vectors may be written into cache (e.g., via CmBufferUP) by using a CM OWORD block write. Finally, the four data blocks (e.g., four CM-type matrix) in the first row may be transposed into eight CM vectors) (e.g., of size 128 byte).","Below is one example of such a transpose algorithm. Since the CM matrix and CM vector may be stored in registers the transpose between them may be very fast:","\/\/ 1st 32 BYTE of 1st vector (e.g., LOW and LOW) is equal to 1st row of 1st matrix (e.g., YOW and YOW); 2nd 32 BYTE of 1st vector (e.g., LOW and LOW) is equal to 1st row of 2nd matrix (e.g., YOW and YOW); 3rd 32 BYTE of 1st vector (e.g., LOW and LOW) is equal to 1st row of 3matrix (e.g., YOW and YOW) 4th 32 BYTE of 1st vector (e.g., LOW and LOW) is equal to 1st row of 4th matrix (e.g., YOW and YOW): Vector[0 . . . 31]=Matrix[0]; Vector[32 . . . 63]=Matrix[0]; Vector[64 . . . 95]=Matrix[0]; Vector[96 . . . 127]=Matrix[0].","\/\/ 1st 32 BYTE of 2nd vector (e.g., LOW and LOW) is equal to 2nd row of 1st matrix (e.g., YOW and YOW); 2nd 32 BYTE of 2nd vector (e.g., LOW and LOW) is equal to 2nd row of 2nd matrix (e.g., YOW and YOW); 3rd 32 BYTE of 2nd vector (e.g., LOW and LOW) is equal to 2nd row of 3rd matrix (e.g., YOW and YOW); 4th 32 BYTE of 2nd vector (e.g., LOW and LOW) is equal to 2nd row of 4th matrix (e.g., YOW and YOW): Vector[0 . . . 31]=Matrix[1]; Vector[32 . . . 63]=Matrix[1]; Vector[64 . . . 95]=Matrix[1]; Vector[96 . . . 127]=Matrix[1]; . . . .","\/\/ 1st 32 BYTE of 7th vector (e.g., LOW and LOW) is equal, to 7th row of 1st matrix (e.g., YOW and YOW); 2nd 32 BYTE of 7th vector (e.g., LOW and LOW) is equal to 7row of 2nd matrix (e.g., YOW and YOW); 3rd 32 BYTE of 7th vector (e.g., LOW and LOW) is equal to 7th row of 3rd matrix (e.g., YOW and YOW) 4th 32 BYTE of 7th vector (e.g., LOW and LOW) is equal to 7th row of 4th matrix (e.g., YOW and YOW); Vector[0 . . . 31]=Matrix[7]; Vector[32 . . . 63]=Matrix[7]; Vector[64 . . . 95]=Matrix[7]; Vector[96 . . . 127]=Matrix[7]; etc.","In operation, each OWORD (e.g., \u201cY\u201dOWORD) may need to be brought into cache once on the video memory side. For example, in the video memory side, one media block read may be used to read a data block of size 8*32 byte front the source (e.g. CmSurface2D) to a matrix (e.g., a CM matrix of size 8*32 byte). Using the top-left data block  as example, the data to read is YOW, YOW, . . . YOW, YOW, YOW, . . . YOW, for the first matrix . Since the order here is the storage order, these data fit precisely into four 64-byte cache-lines . As a result, four data blocks fit precisely into 16 cache-lines .","Regarding the system memory side, one OWORD block write may be used to write a vector (e.g., a CM vector of size 128 byte) to the destination (e.g., CmBufferUP). Using the top vector  as example, the data to write is LOW, LOW, LOW . . . LOW. Since the order here is the storage order, these data fit precisely into two 64 BYTE cache-lines . As a result, eight vectors fit precisely into 16 cache-lines .","Experiments were performed to compare process  (see, e.g., ), process  (see, e.g., ), and process . As discussed above, process  introduces a transpose operation between the data read from a copy source and the data written to a copy destination. The source and destination may have different data storage format (e.g., one is Y-Tiled and the other is linear). The access pattern, which favors one storage format, may not favor the other storage format. As a result, a direct copy without transpose (e.g., as illustrated in, process  (see, e.g., ) and\/or process  (see, e.g., )) may cause redundant data access. With process , data access in both the source and the destination can be in fit into cache-lines, eliminating the redundant data access.","The following set-ups were compared: a Streaming SIMD Extensions (SSE) accelerated GPU copy performing process  of , a normal GPU copy without transpose performing process  of , and a Sandy Bridge GT1-type processor performing process  of , each coping a high definition image of 1920*1290*RGBA (red green blue alpha) format. In experimentation, process  achieved 8.5 GB per second transfer ratio in both directions (e.g., a 17 GB per second bandwidth was achieved since each copy involves both read and write), which is very close to memory bandwidth limitation of approximately 20 GB per second (e.g., for a 1333 Mhz double data rate type three synchronous dynamic random access memory (DDR3) 2-channel memory). Conversely, process  achieved a 2.4 GB per second transfer ratio. Similarly, process  achieved a 2.4 GB per second transfer ratio.","In another implementation (not illustrated), the reading of image data from a source memory may include reading image data in linear-type storage format via a vector pattern adapted for source memory and the writing image data into destination memory may include writing image data in the Y-tiled-type storage format via the matrix pattern adapted for destination memory. In such an implementation, the reading of image data from source memory may include reading image data from eight contiguous data lines of source memory into sixteen cache lines of cache , where each data line may include one row of one hundred and twenty-eight bytes of image data and is associated with the vector pattern. Additionally, the transposing may include transposing the or pattern into a matrix pattern adapted for destination memory. Further, writing image data to destination memory comprises writing image data, from the sixteen cache lines of cache into four contiguous data blocks of destination memory, wherein each data block comprises eight rows of thirty-two bytes of image data and is associated, with the matrix pattern. The transpose process  for the copy in this opposite direction (e.g., from linear-type storage format to Y-tiled-type storage format) can be derived from the operations described above in . Since in both the system memory side and the video memory side all data access fit into cache-lines, redundant accesses are avoided.","In operation, process  may operate so that a plurality of cache line source accesses to cache  may be performed during the reading of image data from source memory . In such an example, all of the space associated with the cache line source accesses may be utilized during the writing of image data into destination memory . Additionally or alternatively, process  may operate so that a plurality of cache line destination accesses to cache  may be performed during the writing of image data into destination memory . In such an example, all of the space associated with the cache line destination accesses may be utilized during the writing of image data into destination memory .","Some additional and\/or alternative details related to process  may be illustrated in one or more examples of implementations discussed in greater detail below with regard  and\/or .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","502","504","506","500","100"]},"Process  may begin at block , \u201cREAD IMAGE DATA IN A SOURCE STORAGE FORMAT\u201d, where image data may be read in a source storage format. For example, image data may be read from a source memory, where the source memory has a source storage format. In some implementations, source memory may have a linear-type storage format. In other implementations source memory may have a Y-tiled-type storage format. As will be described in greater detail below, the reading of the source memory may be in a pattern adapted for the source memory.","Processing may continue from operation  to operation , \u201cTRANSPOSE THE IMAGE DATA FROM THE SOURCE STORAGE FORMAT TO A DESTINATION STORAGE FORMAT\u201d, where the image data may be transposed from the source storage format to a destination, storage format. For example, the image data may be transposed from the source storage format to the destination storage format different from the source storage format. In some implementations, one of the source storage format and the destination storage format may have a linear-type storage format and the other of the source storage format and the destination storage format may have a Y-tiled-type storage format.","Processing may continue from operation  to operation , \u201cWRITE IMAGE DATA IN A DESTINATION STORAGE FORMAT\u201d, where the image data may be written into a destination memory. For example, the image data may be written into the destination memory, where the destination memory may have the destination storage format. As will be described in greater detail below, the writing of the destination memory may be in a pattern adapted for the destination memory.","Some additional and\/or alternative details related to process  may be illustrated in one or more examples of implementations discussed in greater detail below with regard to .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 6","FIG. 1"],"b":["100","600","600","610","612","614","616","618","600","100"]},"In the illustrated example, graphics processing system  may include GPU , transpose module  a source memory  (see, e.g., system memory  or video memory  of ), a destination memory  (see, e.g., system memory  or video memory  of ), a cache , and\/or the like. As illustrated, GPU  may be capable of communication with source memory , destination memory , and\/or cache . Although graphics processing system , as shown in , may include one particular set or blocks or actions associated with particular modules, these blocks or actions may be associated with different modules than the particular module illustrate here.","Process  may begin at block , \u201cREAD IMAGE DATA\u201d, where image data may be read in a source storage format. For example, image data may be read from source memory , via GPU , where source memory  may have a source storage format. In some implementations, source memory  may have a linear-type storage format. In other implementations source memory  may have a Y-tiled-type storage format. As will be described in greater detail below, the reading of source memory  may be in a pattern adapted for source memory .","In one implementation, the reading of image data from source memory  may include reading image data in the Y-tiled-type storage format via a matrix pattern adapted for source memory .","In another implementation, the reading of image data from source memory  may include reading image data in linear-type storage format via a vector pattern adapted for source memory .","Processing may continue from operation  to operation , \u201cSOURCE ACCESS OF CACHE\u201d, where cache  may be accessed. For example, GPU  may access cache  to store image data read from source memory .","In one implementation, the reading image data from source memory  may include reading image data in the Y-tiled-type storage format via a matrix pattern adapted for source memory . In such an implementation, the reading image data from source memory  may include reading image data from four contiguous data blocks of source memory  into sixteen cache lines of cache , where each data block may include eight rows of thirty-two bytes of image data and is associated with the matrix pattern.","In another implementation, the reading of image data from source memory  may include reading image data in linear-type storage format via a vector pattern adapted for source memory . In such an implementation, the reading of image data from source memory  may include reading image data from eight contiguous data lines of source memory  into sixteen cache lines of cache , where each data line may include one row of one hundred and twenty-eight bytes of image data and is associated with the vector pattern.","Processing may continue from operation  to operation , \u201cTRANSPOSE\u201d, where the image data may be transposed from the source storage format to a destination storage format. For example, the image data may be transposed, via transpose module , from the source storage format to the destination storage format different from the source storage format. In some implementations, one of the source storage format and the destination storage format may have a linear-type storage format and the other of the source storage format and the destination storage format may have a Y-tiled-type storage format.","In one implementation, the reading image data from source memory  may include reading image data in the Y-tiled-type storage format via a matrix pattern adapted for source memory  and the writing of image data into destination memory  may include writing image data in the linear-type storage format. In such an implementation, the transposing may include transposing the matrix pattern into a vector pattern adapted for destination memory .","In another implementation, the reading of image data from source memory  may include reading image data in linear-type storage format via a vector pattern adapted for source memory . In such an implementation, the transposing may include transposing the vector pattern into a matrix pattern adapted for destination memory .","Processing may continue from operation  to operation , \u201cDESTINATION ACCESS OF CACHE\u201d, where cache  may be accessed. For example, GPU  may access cache  to retrieve image data from cache  for writing to destination memory .","In one implementation, the reading image data from source memory  may include reading image data in the Y-tiled-type storage format via a matrix pattern adapted for source memory  and the writing of image data into destination memory  may include writing image data in the linear-type storage format via a vector pattern adapted for destination memory. In such an implementation, the writing image of data to destination memory  may include writing image data from the sixteen cache lines of cache  into eight contiguous data lines of destination memory , where each data line may include one row of one hundred and twenty-eight bytes of image data and is associated with the vector pattern.","In another implementation the reading of image data from source memory  may include reading image data in linear-type storage format via as vector pattern adapted for source memory  and the writing image data into destination memory  may include writing image data in the Y-tiled-type storage format via the matrix pattern adapted for destination memory . In such an implementation, writing image data to destination memory  comprises writing image data from the sixteen cache lines of cache  into four contiguous data blocks of destination memory , wherein each data block comprises eight rows of thirty-two bytes of image data and is associated with the matrix pattern.","Processing may continue from operation  to operation , \u201cWRITE IMAGE DATA\u201d, where the image data may be written into destination memory . For example, the image data may be written into destination memory , via GPU , where destination memory  may have the destination storage format. As will be described in greater detail below, the writing of destination memory  may be in a pattern adapted for destination memory .","In one implementation, the reading image data from source memory  may include reading image data in the Y-tiled-type storage format via a matrix pattern adapted for source memory  and the writing of image data into destination memory  may include writing image data in the linear-type storage format via a vector pattern adapted for destination memory .","In another implementation, the reading of image data from source memory  may include reading image data in linear-type storage format via a vector pattern adapted for source memory  and the writing image data into destination memory  may include writing image data in the Y-tiled-type storage format via the matrix pattern adapted for destination memory .","In some example implementations, source memory  and destination memory  may share the same physical storage device.","In operation, process  (and\/or process  or ) may operate so that a plurality of cache line source accesses to cache  may be performed during the reading of image data from source memory . In such an example, all of the space associated with the cache line source accesses may be utilized during the writing of image data into destination memory . Additionally alternatively, process  (and\/or process ) may operate so that a plurality of cache line destination accesses to cache  may be performed during the writing of image data into destination memory . In such an example, all of the space associated with the cache line destination accesses may be utilized during the writing of image data into destination memory . Additional details regarding such operations may be found in the discussion of  above.","In some implementations, a CM (C-for-Media) execution framework may be utilized to implement process  (and\/or process  or ). A CM application may have two components: kernel and host program. The kernel may be compiled offline by the CM compiler to produce an Intermediate Representation (IR) binary. The host program may call the CM runtime application programming interface (API) to create input\/output surfaces of the kernel, invoke the Just-In-Time compiler to obtain the Gen (e.g., Intel-brand GPU) binary, and pass it along with the kernel arguments specified by the application to the driver through CM runtime. The driver may prepare the command buffer and the batch buffer, and submit the command buffer and the batch buffer for GPU execution.","Such a CM kernel function may usually read from one or more input surfaces and write to one or more output surfaces. For example, CM typically supports 2D type surface (CmSurface2D) in video memory, which is of a Y-Tiled storage format. CM kernels may access CmSurface2D through a surface index and using a media block read\/write. CM may also support a buffer type surface (CmBuffer) in video memory, which may be of linear storage format. CM kernels may access CmBuffer through a surface index and using OWORD block read\/write and DWORD scatter read\/write.","Given the fact that video memory and system memory share the physical memory in graphics hardware, CM may also support, another type of buffer surface (CmBufferUP), which may be created upon user provided system memory. CmBufferUP and the corresponding system memory may actually be referring to the same physical memory. CmBufferUP may be accessed by the CM kernel through the surface index and using OWORD block read\/write and DWORD scatter read\/write. The corresponding system memory may be accessed by host program through a memory pointer. Given these two types of surfaces, a copy between Y-tiled 2D surface and system memory may be achieved using the CPU to copy between CmSurface2D and CmBufferUP. In some examples, process  (and\/or process  or ) may utilize a GPU  copy kernel, which may leverage a CM transpose function to get rid of the redundant access of image data. Such a GPU copy kernel may only need to access each OWORD once to copy the whole surface.","While implementation of example processes  and , as illustrated in , may include the undertaking of all blocks shown in the order illustrated, the present disclosure is not limited in this regard and, in various examples, implementation of processes  and  may include the undertaking only a subset of the blocks shown and\/or in a different order than illustrated.","In addition, any one or more of the blocks of  may be undertaken in response to instructions provided by one or more computer program products. Such program products may include signal bearing media providing instructions that, when executed by, for example, a processor, may provide the functionality described herein. The computer program products may be provided in any form of computer readable medium. Thus, for example, a processor including one or more processor core(s) may undertake one or more of the blocks shown in  in response to instructions conveyed to the processor by a computer readable medium.","As used in any implementation described herein, the term \u201cmodule\u201d refers to any combination of software, firmware and\/or hardware configured to provide the functionality described herein. The software may be embodied as a software package, code and\/or instruction set or instructions, and \u201chardware\u201d, as used in any implementation described herein, may include, for example, singly or in any combination, hardwired circuitry, programmable circuitry, state machine circuitry, and\/or firmware that stores instructions executed by programmable circuitry. The modules may, collectively or individually, be embodied as circuitry that forms part of a larger system, for example, an integrated circuit (IC), system on-chip (SoC), and so forth.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 7","b":["700","700","700","700"]},"In various implementations, system  includes a platform  coupled to a display . Platform  may receive content from a content device such as content services device(s)  or content delivery device(s)  or other similar content sources. A navigation controller  including one or more navigation features may be used to interact with, for example, platform  and\/or display . Each of these components is described in greater detail below.","In various implementations, platform  may include any combination of a chipset , processor , memory , storage , graphics subsystem , applications  and\/or radio . Chipset  may provide intercommunication among processor , memory , storage , graphics subsystem , applications  and\/or radio . For example, chipset  may include a storage adapter (not depicted) capable of providing intercommunication with storage .","Processor  may be implemented as a Complex Instruction Set Computer (CISC) or Reduced Instruction Set Computer (RISC) processors; x86 instruction set compatible processors, multi-core, or any other microprocessor or central processing unit (CPU). In various implementations, processor  may be dual-core processor(s), dual-core mobile processor(s), and so forth.","Memory  may be implemented as a volatile memory device such as, but not limited to, a Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), or Static RAM (SRAM).","Storage  may be implemented as a non-volatile storage device such as, but not limited to, a magnetic disk drive, optical disk drive, tape drive, an internal storage device, an attached storage device, flash memory, battery backed-up SDRAM (synchronous DRAM), and\/or a network accessible storage device. In various implementations, storage  may include technology to increase the storage performance enhanced protection for valuable digital media when multiple hard drives are included, for example.","Graphics subsystem  may perform processing of images such as still or video for display. Graphics subsystem  may be a graphics processing unit (GPU), a Synergistic Processing Unit (SPU), or a visual processing unit (VPU), for example. An analog or digital interface may be used to communicatively couple graphics subsystem  and display . For example, the interface may be any of a High-Definition Multimedia Interface, DisplayPort, wireless HDMI, and\/or wireless HD compliant techniques. Graphics subsystem  may be integrated into processor  or chipset . In some implementations, graphics subsystem  may be a stand-alone card communicatively coupled to chipset .","The graphics and\/or video processing techniques described herein may be implemented in various hardware architectures. For example, graphics and\/or video functionality may be integrated within a chipset. Alternatively, a discrete graphics and\/or video processor may be used. As still another implementation, the graphics and\/or video functions may be provided by a general purpose processor, including a multi-core processor. In further embodiments, the functions may be implemented in a consumer electronics device.","Radio  may include one or more radios capable of transmitting and receiving signals using various suitable wireless communications techniques. Such techniques may involve communications across one or more wireless networks. Example wireless networks include (but are not limited to) wireless local area networks (WLANs), wireless personal area networks (WPANs), wireless metropolitan area network (WMANs), cellular networks, and satellite networks. In communicating across such networks, radio  may operate in accordance with one or more applicable standards in any version.","In various implementations, display  may include any television type monitor or display. Display  may include, for example, a computer display screen, touch, screen display, video monitor, television-like device, and\/or a television. Display  may be digital and\/or analog. In various implementations, display  may be a holographic display. Also, display  may be a transparent surface that may receive a visual projection. Such projections may convey various forms of information, images, and\/or objects. For example, such projections may be a visual overlay for a mobile augmented reality (MAR) application. Under the control of one or more software applications , platform  may display user interface  on display .","In various implementations, content services device(s)  may be hosted by any national, international and\/or independent service and thus accessible to platform  via the Internet, for example. Content services device(s)  may be coupled to platform  and\/or to display . Platform  and\/or content services device(s)  may be coupled to a network  to communicate (e.g., send and\/or receive) media information to and from network . Content delivery device(s)  also may be coupled to platform  and\/or to display .","In various implementations, content services device(s)  may include a cable television box, personal computer, network, telephone, Internet enabled devices or appliance capable of delivering digital information and\/or content, and any other similar device capable of unidirectionally or bidirectionally communicating content between content providers and platform  and\/display , via network  or directly. It will be appreciated that the content may be communicated unidirectionally and\/or bidirectionally to and from any one of the components in system  and a content provider via network . Examples of content include any media information including, for example, video, music, medical and gaming information, and so forth.","Content services device(s)  may receive content such as cable television programming including media information, digital information, and\/or other content. Examples of content providers may include any cable or satellite television or radio or Internet content providers. The provided examples are not meant limit implementations in accordance with the present disclosure in any way.","In various implementations, platform  may receive control signals from navigation controller  having one or more navigation features. The navigation features of controller  may be used to interact with user interface , for example. In embodiments, navigation controller  may be a pointing device that may be a computer hardware component (specific a human interface device) that allows a user to input spatial (e.g., continuous and multi-dimensional) data into a computer. Many systems such as graphical user interfaces (GUI), and televisions and monitors allow the user to control and provide data to the computer or television using physical gestures.","Movements of the navigation features of controller  may be replicated: on a display (e.g., display ) by movements of a pointer, cursor, focus ring, or other visual indicators displayed on the display. For example, under the control of software applications , the navigation features located on navigation controller  may be mapped to virtual navigation features displayed on user interface , for example. In embodiments, controller  may not be a separate component but may be integrated into platform  and\/or display . The present disclosure, however, is not limited to the elements or in the context shown or described herein.","In various implementations, drivers (not shown) may include technology to enable users to instantly turn on and off platform  like a television with the touch of a button after initial boot-up, when enabled, for example. Program logic may allow platform  to stream content to media adaptors or other content services device(s)  or content delivery device(s)  even when the platform is turned \u201coff.\u201d In addition, chipset  may include hardware and\/or software support for (5.1) surround sound audio and\/or high definition (7.1) surround sound audio, for example. Drivers may include a graphics driver for integrated graphics platforms. In embodiments, the graphics driver may comprise a peripheral component interconnect (PCI) Express graphics card.","In various implementations, any one or more of the components shown in system  may be integrated. For example, platform  and content services device(s)  may be integrated, or platform  and content delivery device(s)  may be integrated, or platform , content services device(s) , and content delivery device(s)  may be integrated, for example. In various embodiments, platform  and display  may be an integrated unit. Display  and content service device(s)  may be integrated, or display  and content delivery device(s)  may be integrated, for example. These examples are not meant to limit the present disclosure.","In various embodiments, system  may be implemented as a wireless system, a wired system, or a combination of both. When implemented as a wireless system, system  may include components and interfaces suitable for communicating over a wireless shared media, such as one or more antennas, transmitters, receivers, transceivers, amplifiers, filters, control logic, and so forth. An example of wireless shared media may include portions of a wireless spectrum, such as the RF spectrum and so forth. When implemented as a wired, system, system  may include components and interfaces suitable for communicating over wired communications media, such as input\/output (I\/O) adapters, physical connectors to connect the I\/O adapter with a corresponding wired communications medium, a network interface card (NIC), disc controller, video controller, audio controller, and the like. Examples of wired communications media may include a wire, cable, metal leads, printed circuit board (PCB), backplane, switch fabric, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, and so forth.","Platform  may establish one car more logical or physical channels to communicate information. The information may include media information and control information. Media information may refer to any data representing content meant for a user. Examples of content may include, for example, data from a voice conversation, videoconference, streaming video, electronic mail (\u201cemail\u201d) message, voice mail message, alphanumeric symbols, graphics, image, video, text and so forth. Data from a voice conversation may be, for example, speech information, silence periods, background noise, comfort noise, tones and so forth. Control information may refer to any data representing commands, instructions or control words meant for an automated system. For example, control information may be used to route media information through a system, or instruct a node to process the media information in a predetermined manner. The embodiments, however, are not limited to the elements or in the context shown or described in .","As described above, system  may be embodied in varying physical styles or form factors.  illustrates implementations of a small form factor device  in which system  may be embodied. In embodiments, for example, device  may be implemented as a mobile computing device having wireless capabilities. A mobile computing device may refer to any device having a processing system and a mobile power source or supply, such as one or more batteries, for example.","As described above, examples of a mobile computing device, may include a personal computer (PC), laptop computer, ultra-laptop computer, tablet, touch pad, portable computer, handheld computer, palmtop computer, personal digital assistant (PDA), cellular telephone, combination cellular telephone\/PDA, television, smart device (e.g., smart phone, smart tablet or smart television), mobile internet device (MID), messaging device, data communication device, and so forth.","Examples of a mobile computing device also may include computers that are arranged to be worn by a person, such as a wrist computer, finger computer, ring computer, eyeglass computer, belt-clip computer, arm-band computer, shoe computers, clothing computers, and other wearable computers. In various embodiments, for example, a mobile computing device may be implemented as a smart phone capable of executing computer applications, as well as voice communications and\/or data communications. Although some embodiments may be described with a mobile computing device implemented as a smart phone by way of example, it may be appreciated that other embodiments may be implemented using other wireless mobile computing deices as well. The embodiments are not limited in this context.","As shown in , device  may include a housing , a display , an input\/output (I\/O) device , and an antenna . Device  also may include navigation features . Display  may include any suitable display unit for displaying information appropriate for a mobile computing device. I\/O device  may include any suitable I\/O device for entering information into a mobile computing device. Examples for I\/O device  may include an alphanumeric keyboard, a numeric keypad, a touch pad, input keys, buttons, switches, rocker switches, microphones, speakers, voice recognition device and software, and so forth. Information also may be entered into device  by way of microphone (not shown). Such information may be digitized by a voice recognition device (not shown). The embodiments are not limited in this context.","Various embodiments may be implemented using hardware elements, software elements or a combination of both. Examples of hardware elements may include processors, microprocessors circuits, circuit elements (e.g., transistors, resistors, capacitors, inductors, and so forth), integrated circuits, application specific integrated circuits (ASIC), programmable logic devices (PLD), digital signal processors (DSP), field programmable gate array (FPGA), logic gates, registers, semiconductor device, chips, microchips, chip sets, and so forth. Examples of software may include software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. Determining whether an embodiment is implemented using hardware elements and\/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, heat tolerances, processing cycle budget, input data rates, output data rates, memory resources, data bus speeds, and other design or performance constraints.","One or more aspects of at least one embodiment may be implemented by representative instructions stored on a machine-readable medium which represents various logic within the processor, which when read by a machine causes the machine to fabricate logic to perform the techniques described herein. Such representations, known as \u201cIP cores\u201d may be stored on a tangible, machine readable medium and supplied to various customers manufacturing facilities to load into the fabrication machines that actually make the logic or processor.","While certain features set forth herein have been described with reference to various implementations, this description is not intended to be construed in a limiting sense. Hence, various modifications of the implementations described herein, as well as other implementations, which are apparent to persons skilled in the art to which the present disclosure pertains are deemed to lie within the spirit and scope of the present disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The material described herein is illustrated by way of example and not by way of limitation in the accompanying figures. For simplicity and clarity of illustration, elements illustrated in the figures are not necessarily drawn to scale. For example, the dimensions of some elements may be exaggerated relative to other elements for clarity. Further, where considered appropriate, reference labels have been repeated among the figures to indicate corresponding, or analogous elements. In the figures:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
