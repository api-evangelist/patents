---
title: Method and apparatus for the automatic migration of applications and their associated data and configuration files
abstract: A method, apparatus, and computer implemented instructions for the automatic migration of applications and their associated data and configuration files from a source data processing system to a destination data processing system. A data store containing meta data regarding files associated with the application is queried in which the data store includes meta data describing the files accessed by the application. A result is received in response to querying the data store in which the associations are maintained. Copying of the files from the source data processing system to the destination data processing system using the result is initiated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07028079&OS=07028079&RS=07028079
owner: Lenovo (Singapore) Pte, Ltd.
number: 07028079
owner_city: Singapore
owner_country: SG
publication_date: 20010525
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention is related to Method and Apparatus for the Automatic Discovery of the Relationships Between Applications and Their Associated Data and Configuration Files, Ser. No. 09\/865,243, and Method and Apparatus for Performing the Identification of Files to be Backed Up Using Relational Meta Data, Ser. No. 09\/866,251 filed even date hereof, assigned to the same assignee, and incorporated herein by reference.","1. Technical Field","The present invention relates generally to an improved data processing system, and in particular to a method and apparatus for managing information about applications and files. Still more particularly, the present invention provides a method, apparatus, and computer implemented instructions for the automatic migration of applications and the files associated with the applications.","2. Description of Related Art","When an application is installed on a computer system, the setup program, which is part of the application and supplied by the application supplier, registers with the operating system that the application will be creating data files of a certain file type on the file system. More specifically, the setup program tells the operating system the type of data files that will be created, edited, deleted, or otherwise manipulated by the application. Data files manipulated by the application are associated with that application as long as that application remains installed on the computer system, providing the file type is not changed. If the application is removed, the mapping of the file extension to the application is lost. The current state of the art is to identify the data file type with a one to three-letter filename extension. For example, the setup program for Microsoft Word registers with the operating system to indicate that filenames with the extension \u201c.doc\u201d are associated with Microsoft Word. Microsoft Word is a word processing program available from Microsoft Corporation. As a result, when a user selects a data file to be opened, the operating system uses the filename extension of that data file to determine which application should be launched.","Users typically install dozens of applications on a data processing system, such as editors, e-mail programs, Internet browsers, and business applications such as payroll or inventory access. Each of these applications usually create, edit, rename, or delete data files of a certain data type as determined by the file type extension. These data files may include user identification such as users Ids and passwords, application configuration files, reports, and data files. Currently, each application consistently creates data file types associated with an application vendor determined by the filename extension. For example, Microsoft Word creates document data files using the filename extension \u201c.doc\u201d, Lotus WordPro creates document data files using the filename extension \u201c.lwp\u201d, and Lotus Notes creates data files using the filename extension \u201c.id\u201d for userid information and \u201c.nsf\u201d for notes databases. Lotus Word Pro and Lotus Notes are available from Lotus Development Corporation. Each application vendor selects a unique filename extension to be used for their application and hopes that no other application vendor selects the same extension. In the case of some programs that use common types of files such as .mid or .jpg, installing another program will often incorrectly associate the data files with the newly installed application.","As the end user executes applications and works on data files, the list of data files associated with the application continually changes. Some data files may be created, others deleted or edited, and some renamed with other filenames or file type extensions. The user also may place some of these files in other places within the file system. With these types of file manipulations, the files may become hard to locate without using a tool to search the hard disk drive for filenames with a well known filename extension for a particular application. The files also may contain extensions that do not follow the recommended file naming convention. For example, the user may create a Microsoft Word document and save it with the filename extension of \u201c.zoo\u201d instead of the standard .doc extension.","If the user's data processing system is replaced for any reason, it becomes nearly impossible to locate all the data files created and required by an application for the purposes of moving those files to the new data processing system. The files may not be in the same place that they were originally created and may not have the same filename or filename extension that is indirectly associated with the application. In addition, the application might create data files, such as application settings, that are not registered with the operating systems associations to applications.","For example, Lotus Notes creates a desktop.dsk file to store the layout of the applications workspace, but the file extension .dsk is not associated with Lotus Notes during the applications installation. If the user attempts to relocate or migrate this application or other applications to another system, all of the files associated with the application should also be moved. Currently, no system or process is present to ensure that all of the data and configuration files can be located and subsequently moved.","The user can search for all occurrences of a particular file extension, but this process is a tedious task. Even if the user finds all files with a particular extension, it is impossible to ensure that all the files of that type have been located because the files may have been renamed or move to another location, such as a network share.","Therefore, it would be advantageous to have an improved method and apparatus for migrating applications and associated data for those applications.","The present invention provides a method, apparatus, and computer implemented instructions for the automatic migration of applications and their associated data and configuration files from a source data processing system to a destination data processing system. A data store containing meta data regarding files associated with the application is queried in which the data store includes meta data describing the files accessed by the application. A result is received in response to querying the data store in which the associations are maintained. Copying of the files from the source data processing system to the destination data processing system using the result is initiated.","With reference now to the figures,  depicts a pictorial representation of a network of data processing system in which the present invention may be implemented. Network data processing system  is a network of computers in which the present invention may be implemented. Network data processing system  contains a network , which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network  may include connections, such as wire, wireless communication links, or fiber optic cables.","In the depicted example, server  is connected to network  along with storage unit . In addition, clients , , and  are connected to network . These clients , , and  may be, for example, personal computers or network computers. In the depicted example, server  provides data, such as boot files, operating system images, and applications to clients \u2013. Clients , , and  are clients to server . Network data processing system  may include additional servers, clients, and other devices not shown. In the depicted example, network data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the TCP\/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages. Of course, network data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the present invention.","Referring to , a block diagram of a data processing system that may be implemented as a server, such as server  in , is depicted in accordance with a preferred embodiment of the present invention. Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors  and  connected to system bus . Alternatively, a single processor system may be employed. Also connected to system bus  is memory controller\/cache , which provides an interface to local memory . I\/O bus bridge  is connected to system bus  and provides an interface to I\/O bus . Memory controller\/cache  and I\/O bus bridge  may be integrated as depicted.","Peripheral component interconnect (PCI) bus bridge  connected to I\/O bus  provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to clients \u2013 in  may be provided through modem  and network adapter  connected to PCI local bus  through add-in boards.","Additional PCI bus bridges  and  provide interfaces for additional PCI local buses  and , from which additional modems or network adapters may be supported. In this manner, data processing system  allows connections to multiple network computers. A memory-mapped graphics adapter  and hard disk  may also be connected to I\/O bus  as depicted, either directly or indirectly.","Those of ordinary skill in the art will appreciate that the hardware depicted in  may vary. For example, other peripheral devices, such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.","The data processing system depicted in  may be, for example, an IBM e-Server pSeries system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system or LINUX operating system.","With reference now to , a block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system  is an example of a client computer. Data processing system  employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Accelerated Graphics Port (AGP) and Industry Standard Architecture (ISA) may be used. Processor  and main memory  are connected to PCI local bus  through PCI bridge . PCI bridge  also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus  may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter , SCSI host bus adapter , and expansion bus interface  are connected to PCI local bus  by direct component connection. In contrast, audio adapter , graphics adapter , and audio\/video adapter  are connected to PCI local bus  by add-in boards inserted into expansion slots. Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . Small computer system interface (SCSI) host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system, such as Windows 2000, which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system . \u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, maybe used in addition to or in place of the hardware depicted in . Also, the processes of the present invention may be applied to a multiprocessor data processing system.","As another example, data processing system  may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system  comprises some type of network communication interface. As a further example, data processing system  may be a personal digital assistant (PDA) device, which is configured with ROM and\/or flash ROM in order to provide nonvolatile memory for storing operating system files and\/or user-generated data.","The depicted example in  and above-described examples are not meant to imply architectural limitations. For example, data processing system  also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system  also may be a kiosk or a Web appliance.","With reference now to , a diagram illustrating components involved in migrating applications and associated data is depicted in accordance with a preferred embodiment of the present invention. The components illustrated in  may be implemented as software and data structures in data processing systems, such as data processing system  in  and data processing system  in .","In the depicted examples, source  includes operating system , which contains file functions . These files functions are used to perform different functions on files, such as file  in response to requests from applications, such as application . These functions include, for example, opening, closing, creating, copying, renaming, and deleting files. When the user starts application , application  generally requires a data file to act upon. For instance, starting a word processor usually requires that the user indicate the name of the file to be created, edited, or processed. Most applications have some type of open menu where the user specifies which file they are going to work on. The user generally clicks a \u201cfile open\u201d button or menu item to open a file, and is then presented with a list of files meeting that criteria to work on.","Using current technology, the list of files available to work on is determined by file type, which may be identified through the file type extension. When an application is installed, it usually notifies the operating system, which file type extension should be associated with that program. For example, Microsoft Word notifies the operating system that it will use files with the .doc extension. After the application is installed, if the user selects a file with the .doc extension, the Microsoft Word application will be launched to operate on that file. Using current technology, the association between the application program and the file type extension exists until that application program is removed from the system. When the application is removed, the removal program also removes any associations that had been established at the time the application was installed.","With the mechanism of the present invention, calls by application  to file functions  are hooked or routed to device driver . Some other service may be used other that device driver  depending on the implementation. These functions calls include opening, closing, creating, copying, renaming, and deleting a file. Each time a call for one of the file functions is made, the call is intercepted by device driver . The name of the program making the call is identified by device driver  along with the name of the data file being operated on.","For example, device driver  hooks the single entry point of the \u201cfile close\u201d function. Each time a file, such as file , is closed, the close is intercepted by device driver . Device driver  identifies the name of application  closing file , along with the name of file . In this example, file  is opened and closed by application , representing a normal close of file . The relational meta data that represents the association of file  to application  is updated in database  with the new information. If application  opens file , but another software entity, such as operating system  closes file , then an abnormal close may have occurred because of a failure in application .","Each time a file is opened or closed, the relational meta data for the given file is updated by device driver . The mechanism of the present invention also may hook the operating system entry points for file erase, file rename, file move, and file copy functions. These additional hooks also update the relational meta data in database . If an application program, in the process of executing, creates a file, the file creation information and association to the application program is stored in relational meta data. If the application program deletes a file, the relational meta data for the deleted file is deleted. The relational meta data for file  is updated in database  is updated if the application renames file . It is important to note that, in these examples, in the event that the same file is accessed by more than one program, the database will contain the reference to the application that accessed the file most recently.","If the user copies file  to another location, the relational meta data for file  is updated with the new location. If multiple applications perform activity against file , the relational meta data for file  is updated to reflect the association to multiple applications.","When application  is started, the user is presented with a list of files to work on, depending on the file type extension registered with the operating system by application . The user selects one or more files to work on, and then confirms the choice by clicking an OK button or similar type of control. Some application programs, such as Microsoft Word, keep a finite length list of the files acted upon in persistent storage. One of the options the user has is to select the history list of files that have been accessed by the application program. The mechanism of the present invention provides for a method, apparatus, and computer implemented instructions for a convenient way to provide quick access to frequently manipulated files.","The list of files displayed that can be acted upon is based on the file type extension. However, the user may have renamed the file with a different extension, or moved the file to another area on the disk or even another computer or network share. Application  has no direct knowledge of these files, their new extension, or their new location because the file type extension has changed or the files have been moved to an unknown location. Because this information is in database , application  can query database  through calls to device driver  to find the file names and location of all of the data and configuration files associated with the application . Application  then uses the list of files from database  to present to the user at the time application  is run. Instead of choosing a data file of a certain file type extension and from a specified physical location on the disk, the user can now select any file that had been created by application  and from any location on the disk. The access to database  may be provided through standard application programming interface (API) calls made to device driver  from application  or another application. Using the access methods provided by the invention the user can query the relational database with such queries as:","Show me the files created between Dec. 1, 2000 and Dec. 15, 2000.","Show me the files created since Jan. 1, 2001 by the user stevemas.","Show me all of the files associated to the Lotus 1-2-3 program.","The association of applications with files and file locations may extend to files created, stored, or moved to remote storage devices located on another computer system. The mechanism of the present invention may be installed as an integral part of operating system , such as within a kernel. Alternatively, the mechanism may be added as a patch or add-on component if added to operating system  after its installation.","In these examples, the meta data is stored in a data store that takes the form of a database. A data store is some data structure or system used to store meta data. Another data store, which may be used, is a flat file or a table.","When a user or administrator desires to migrate an application from source  to another data processing system, such as destination , the user invokes the mechanism of the present invention. The user may select a \u201cmigrate\u201d function on management server . This option presents a menu of the files to migrate by reading the relational meta data for each file that is related to the relevant applications. The user can then accept or refuse for one or more files to be copied or migrated to the new system. Alternatively, management server  may be employed to identify files without requiring a user to select files for migration.","When it becomes necessary to migrate the user's data due to machine failure, machine replacement, hardware failure, or any other circumstance, the user invokes the mechanism of the present invention by using the normal program invocation method for that computer system or optionally by booting up the system using a set of special floppy disks that contain the processes of the present invention. The latter method of invocation is particularly useful if the system from which to migrate the data has become inspirational or unbeatable using normal methods.","The mechanism of the present invention queries the relational meta data in database  and builds a list of the files to transfer from source  to destination . Management server  acts as an agent or intermediary to ensure that the data is transferred successfully and completely, and that the data is copied and stored in the correct folder or directory on destination . Files may be transferred from source  to management server  for temporary storage. When destination  is ready to accept files or has been identified, then the files may be sent from management server  to destination . Alternatively, the files may be transferred directly from source  to destination  with management server  monitoring and verifying the transfer of data.","The mechanism of the present invention determines the correct location on destination  by examining the system configuration to determine the correct location of the data files. Alternatively, destination  may act as the intermediary or agent instead of requiring the management services of management server  to facilitate the transfer of files from source  to destination . In this instance agent  ensures that the files are transferred to the appropriate location within destination . Additionally, agent  resolves placement of migrated data in destination  even if the location of the application on destination  is different from that in source .","The invention on the source machine then begins the process of copying the necessary data and configuration files to the destination machine until all required files have been successfully copied.","Turning next to , a diagram of meta data describing relationships between applications and associated data is depicted in accordance with a preferred embodiment of the present invention. In the depicted example, records , , and  are examples of meta data, which may be stored in a database, such as database  in . Record  includes sections , , , , , and . Section  identifies the date of the last file update. Section  indicates the time the file was last accessed in hours, minutes, and seconds. Section  identifies the name of the file, while section  identifies the location of the file. The application making the call for the function is identified in section . The user is identified in section .","With reference now to , a diagram illustrating an example call is depicted in accordance with a preferred embodiment of the present invention. Call  is an example of a call, which may be used to obtain a file list. The call specifies an application name as well as criteria, which may be used to search for records, such as records , , and  in  within database  in . The criteria may be, for example, a list of files associated with the Lotus Word Pro application that are more than 30 days old.","Turning next to , a flowchart of a process used for installing the processes for automatically discovering relationships between applications and associated data is depicted in accordance with a preferred embodiment of the present invention. The process begins by detecting a system boot of the data processing system (step ). Next, hooks are installed (step ). The hooks installed are those for use by a device driver to hook or intercept calls for file functions. Then, the system boot is continued (step ) with the process terminating thereafter.","The flowcharts illustrated in  are examples of processes used to automatically discover relationships between applications and associated data. With reference now to , a flowchart of a process used for handling requests for file operations is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented in a device driver, such as device driver  in .","The process begins by receiving a request for a file operation (step ). Next, a determination is made as to whether the file operation is to open a file (step ). If the file operation is not open, then a determination is made as to whether the file is to be deleted (step ). If the file is not to be deleted, a determination is made as to whether the file is to be renamed (step ).","If the file is not to be renamed, a determination is made as to whether the file is closed or copied (step ). If the file is not to be closed or copied, the file operation continues (step ) with the process terminating thereafter. At this point, the file operation request is passed to the actual file function that is to process the request.","With reference again to step , if the file is to be closed or copied, close or copy operation is performed (step ) with the process proceeding to step . Turning back to step , if the file is to be renamed, a rename operation is performed (step ) with the process proceeding to step  thereafter. With reference again to step , if the file is to be deleted, a delete operation is performed (step ) and the process proceeds to step  as described above. With reference again to step , if the file is opened, an open operation is performed (step ) with the process proceeding to step .","Turning next to , a flowchart of a process used for processing an open operation is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  is a more detailed description of step  in .","This process is called in response to an open operation being present. The process begins with a determination as to whether a record of the file identified for the operation is present in the database (step ). If the file is not present in the database, an identification of the file is added to the database (step ) with the process returning thereafter for a continuation of the file operation. The identification may include, for example, the name of the file, the name of application requesting the operation, a date, and a time of the request.","Otherwise, a determination is made as to whether the file is found in the same location (step ). If the file is found at the same location, the process returns to continue process the file operation. If the file is not in the same location, the record is updated with the new location (step ) with the process then returning. The open operation occurs immediately because the database cannot be updated until it is known that the file can be opened.","With reference now to , a flowchart of a process used for processing a delete operation is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  is a more detailed description of step  in .","The process begins with a determination as to whether a record of the file is in a database (step ). If the file is in the database, the database is updated (step ) with the process then returning to continue the file operation. This update reflects the application closing the file as well as other information, such as a time and date of the operation. Otherwise, the process returns without performing any action in the database. In this instance, the file is not tracked by the mechanism of the present invention.","Turning next to , a flowchart of a process used for renaming is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  is a more detailed description of step  in .","The process begins with a determination as to whether a record of the file is in the database (step ). If the file is not in the database, a new record is established in the database (step ), and the process returns to continue processing the file operation. The new record may be in a format, such as, for example, record  in . Otherwise, the database is updated (step ) with the process returning for continued processing of the file operation.","With reference now to , a flowchart of a process used for processing a close or copy operation is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  is a more detailed description of step  in .","The process begins with a determination as to whether a record of the file is in a database (step ). If the file is in the database, a reference is updated (step ) with the process returning to continue the file operation. Otherwise, a new record for the file is added to the database (step ), and the process returns for continuation of the file operation.","Turning next to , a flowchart of a process used for processing queries for file information is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented in a device driver, such as device driver  in .","The process begins by receiving a call for file information (step ). This call may be received from an application, such as application  in . Next, a database is queried for file names and locations of files for the application identified in the query (step ). A result is received from the database (step ) and returned to the caller (step ) with the process terminating thereafter.","With reference now to , a flowchart of a process used by an application to obtain a list of files is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented in an application, such as application  in .","The process begins by sending a call for a list of files for an application (step ). This application may be the application generating the call for the list or for another application. This call is sent to a device driver, such as device driver  in . Next, a result is received (step ). Then, a list of file names and locations is presented on a display to the user (step ) with the process terminating thereafter.","One use of the mechanism of the present invention is for migration of applications. When the user needs to migrate the application file data to another system, the user first installs the relevant applications on the new system. The user then invokes the invention and selects the \u201cmigrate\u201d option. This option presents a menu of the files to migrate by reading the relational meta data for each file that is related to the relevant applications. The user can then accept or refuse for one or more files to be copied or migrated to the new system.","Turning next to , a flowchart of a process used for migrating an application and associated data is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented in a management sever, such as management server  in .","The process begins by requesting relational meta data for an application from a source (step ). In this example, the meta data may be requested from a data store, such as database  in . This meta data may take a form, such as the records illustrated in . Next, relational meta data is received from the source (step ). Files are identified for migration to a destination system from the source (step ). Identified files are requested (step ), and then received from the source (step ). Files are stored on the destination system (step ). Billing is performed for the migration process (step ) with the process terminating thereafter. In this example, the billing is performed on a per migration basis. Alternatively, the process may be offered as a service that is billed as a monthly fee or on some other periodic basis.","Alternatively, an agent on the destination may include processes illustrated in  for identifying and transferring files from the source to the destination system. In this case, the agent may be requested by a local or remote server to perform the migration on behalf of the user. This migration may be performed at a specified time so that it will not impact normal daily operations. The agent will perform the steps as described in  and then report the status of the migration completion to the requesting local or remote server. This allows the migration service to be directed by a remote management server or provider.","With reference now to , a flowchart of a process used for migrating an application and associated data through user input is depicted in accordance with a preferred embodiment of the present invention. The process illustrated in  may be implemented in a management sever, such as management server  in . In this particular example, user input is received to initiate and select files for migration by a user.","The process begins by receiving a request from a user to migrate files for a application to a destination (step ). The user input may be received through a graphical user interface (GUI). For example, the user may select a \u201cmigrate\u201d button in the GUI. Next, files associated with the application are identified (step ). A list of identified files is presented to the user (step ). The files may be presented in a number of different ways in GUI. For example, a window containing a list of files may be presented on the GUI. A user may select files from the list that are to be migrated, while other files will be ignored. User input selecting the files is then received (step ). Requested files are selected (step ), and the identified files are received (). Then, the identified files are stored on a destination (step ). A verification of the transfer of the identified files is presented to the user (step ). The user is billed for the migration of the files (step ) with the process terminating thereafter.","In the example illustrated in , a user may initiate the processes in management server  in  from a remote data processing system or at the data processing system on which management server  is located. For example, the user may actually initiate the process at destination  in . The files also may be transferred directly from the source to the destination, rather than being stored temporarily by management server . Also, these processes may be implemented in destination  without requiring an intermediary, such as management server .","Thus, the present invention provides an improved method, apparatus, and computer implemented instructions for migrating applications and associated data to a destination data processing system. The identification of files to be migrated are based on meta data collected during the creating and accessing of files by an application on the source data processing system. This data is collected at an operating system level in the depicted examples. When an application and data are to be migrated to a destination data processing system, the mechanism of the present invention is invoked to retrieve the meta data. This retrieved meta data is used to identify the files and their locations on the source data processing system. Based on these identifications, the files are copied or moved from the source data processing system to the destination data processing system. With the mechanism of the present invention problems associated with changing extensions for files are avoided.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. Although the depicted illustrations show the mechanism of the present invention embodied on a single server, this mechanism may be distributed through multiple data processing systems. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
