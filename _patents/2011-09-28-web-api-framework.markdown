---
title: Web API framework
abstract: Embodiments allow developers to use HTTP message abstractions inline within their Web API methods to directly access and manipulate HTTP request and response messages. A hosting layer is provided for in-process, in-memory and network-based services. Message handlers and operational handlers may be combined to create a message channel for asynchronous manipulations of the HTTP requests and response. A formatter may be used on the server or client for consuming HTTP and providing desired media types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08918452&OS=08918452&RS=08918452
owner: Microsoft Corporation
number: 08918452
owner_city: Redmond
owner_country: US
publication_date: 20110928
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Hypertext Transfer Protocol (HTTP) provides a simple application model for exchanging information between servers and clients. The most common approach uses HTTP for delivering web pages for presentation on a browser. A Web API (Application Programming Interface) is a defined set of HTTP request and response messages, typically expressed in JSON (JavaScript Object Notation) or XML (Extensible Markup Language). The idea of exposing resources as Web APIs that expose data and logic for programmatic consumption is gaining popularity. These APIs are exposed to a broad range of clients running on many different devices. Each of these clients often has different capabilities. HTTP is well suited for these scenarios because it allows different clients to receive different representations to meet the needs of each client. Additionally, there are many scalability and evolvability benefits to systems that directly leverage HTTP. As a result, Web APIs are an attractive choice for many systems being built today.","Typically HTTP messages are exchanged over the Internet using TCP\/IP (Transmission Control Protocol\/Internet Protocol) as the underlying transport protocol stack. However, HTTP is not inherently reliant on TCP\/IP and can be used over any number of transport protocol stacks as long as the protocol semantics are honored. As HTTP continues to gain popularity and more and more components use HTTP to expose their functionality, being able to communicate not only across the Internet but also between components located within the same application domain is increasingly important.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Embodiments of the invention provide a highly efficient end-to-end communication mechanism for exchanging HTTP traffic between clients and servers whether they are running in the same process or separated by a network boundary. Fine-grained manipulation of HTTP messages is provided in order to achieve richer client interactions and to benefit from the web intermediaries. Such message may also be exchanged in an in-process fashion where the client and server live in the same app domain.","Embodiments of the invention provide benefits over traditional HTTP message-based exchange mechanisms, such as:\n\n","Developers author one or more Web APIs, which are classes that contain methods that map to HTTP methods and a URI (Uniform Resource Identifier). The parameters of the Web API methods are values that are serialized\/deserialized from the body of the message, the URI parameters, or from other parts of the message. Developers use HTTP message abstractions inline\u2014within their Web API methods\u2014for directly accessing and manipulating the request and response. To support different clients, Web API allows a developer to supply pluggable formatters that handle different media types. For addressing cross-cutting\/low-level HTTP concerns, Web API provides an extensible async pipeline. At runtime, the developer has a range of hosting options including self-hosted (mini web server), on top of IIS\/ASP.NET or in process.","Embodiments of the invention provide a hosting layer for in-process and network based services. A pluggable high message channel (Message Handlers) provides asynchronous manipulations of HTTP requests and response. A pluggable formatting mechanism provides support for a multitude of clients and formats.","Also, on the client side API is provided for consuming HTTP either on a standalone client or for middle tier scenarios.",{"@attributes":{"id":"p-0021","num":"0025"},"figref":"FIG. 1","b":["101","102","101","103","102","102","104","102","105","101"]},"Request  comprises a header portion with an Accept header field that contains a list of MIME media types that will be accepted by the client . The Accept header is used to specify certain media types that are acceptable for response . Problems arise when an application  on server  is not configured to provide a response in one of the media types listed in the accept header of request . For example, if application  has a strongly typed domain, it may not be configured to provide the format identified in the Accept header.","Server  may use the URI in the header of request  to identify what operation to execute within the domain of application . The header URI may match to a specific part of application  to be executed. The Accept header in request  defines the format or specific content type that server  should use to respond in response . The application  is designed to accept a specific input format and to generate a specific output format in the domain selected by the developer. Those formats may not correspond to the media types listed in request . In one embodiment, server  may address this problem by providing a formatter  that converts the information in request  to a format understood by application . Likewise, server  uses formatter  to convert the output of application  to the media type identified in request  before preparing response .","In one embodiment, server  may select a default formatter  unless other data in request  indicates that another formatter  should be used. For example, formatter  may be selected based upon the message content type that is identified in the request  header. Alternatively, the Accept header may be used by server  to determine which formatter  to use. In other embodiments, the request URI may be used to identify the proper formatter .","Formatters  convert and change the content received in request  to a format useable by application . Similarly, formatter  converts the output of application  to a format identified for response . A developer of application  or a third party may create formatter  to convert between two or more different media types. Formatter  extracts content from request  and populates the application domain types.",{"@attributes":{"id":"p-0026","num":"0030"},"figref":"FIG. 2","b":["201","202","203","202","204","203","205","201","202","204","205","202","206","203","205"]},"Server  then generates HTTP response  from the output of application . Response  has content formatted according to the domain of application . Upon receipt of response  at client , formatter  maps the content of response  to the format required by the domain of application .","Client  may have a plurality of formatters . Client  selects the appropriate formatter  to map content between the domains of applications  and . In one embodiment, the selection of formatter  may be based upon a URI of server .","In other embodiments, both the client and server may have formatters and either or both devices may be configured to select a formatter based upon information in the HTTP request or response.",{"@attributes":{"id":"p-0030","num":"0034"},"figref":"FIG. 3","b":["301","303","304","305","306","301","303","304","305","304","305","301","303","304","305"]},"The operation handlers - provide an extensibility model that allows server  to extend the custom types used in the domain of application  to any message types . The operation handlers - ensure that application  has all of the components and types that it needs to start running when required. The operation handlers - use the content of message  to generate the proper types needed for the input to application . For example, the operation handlers may analyze the HTTP request and then add or remove header information or otherwise modify the request content as needed to provide the domain type information required in application .","In one embodiment, at the start-up of application , server  analyzes the extension code in operation handlers - to ensure that application  will have the inputs required by the application methods to operate on message . Server  identifies the inputs needed by application , identifies what information is provided by operation handlers -, and determines if the information available at the output of the operation handler pipeline matches the inputs required by application . By performing this analysis at start-up, server  can prevent the application from failing when an actual message arrives. Server  can identify any missing information at the input to application  on start-up and adjust the operation handlers - used in the input pipeline to provide the required format or type.",{"@attributes":{"id":"p-0033","num":"0037"},"figref":"FIG. 4","b":["401","402","403","401","402","401","402"]},"Applications  and  may have different domain types that are not directly compatible with or understood by the other application. Similar to the traditional network-based HTTP communication illustrated in , applications  and  may communicate using one or more formatters . For example, an HTTP request  sent by application  may not be compatible with the domain type of application . Formatter  maps the information from the request  into new request  having the proper format for the domain of application , which processes the request.","Application  generates an HTTP response  corresponding to the domain of application . Response  is converted by formatter  into response , which can be understood by the domain of application . The formatter used for the mapping the response messages \/ may be the same as or different from the formatter used to map the request messages \/.",{"@attributes":{"id":"p-0036","num":"0040"},"figref":"FIG. 5","b":["501","502","504","501","505"]},{"@attributes":{"id":"p-0037","num":"0041"},"figref":"FIG. 6","b":["601","602","604","605","601"]},"The message handlers may operate asynchronously. Once the message handler begins processing the HTTP request, for example, it may pause if external data or events are required for the processing.",{"@attributes":{"id":"p-0039","num":"0043"},"figref":"FIG. 7","b":["701","702","703","704","703","704","703","701","703","704","706"]},{"@attributes":{"id":"p-0040","num":"0044"},"figref":"FIG. 8","b":["801","809","802","803","804","803","804","805","806","807","808","809"]},"In an example embodiment, the in-memory channel may be implemented as a custom WCF (Windows Communication Foundation) transport channel with a corresponding channel listener. The solution may include a custom WCF binding element that constructs a minimal channel stack. Knowing that the binding will be used when the client and service are running in the same application domain, the channel stack can be constructed using assumptions about the types of messages that it process. Therefore, instead of an encoding step, the message may be simply enqueued and dequeued into an in-memory queue. The channel configuration may be specified on the client as a part of an HTTP client binding configuration that is specified on the server as a part of the endpoint binding configuration.","In one embodiment, the following example code creates a service endpoint and configures it to use the in-memory channel:\n\n","A corresponding client may then be configured to use the same in-memory binding:\n\n","As the client interacts with the service using httpClient, HTTP message objects will be transmitted using an in-memory queue as an intermediary. This differs significantly from the current process of encoding the message and then passing it to the operating system's networking stack, only to have it sent back to a service running in the same application domain.",{"@attributes":{"id":"p-0045","num":"0055"},"figref":"FIG. 9","b":["900","901","902","902"]},"Dispatcher  invokes the application  as a result of incoming HTTP requests. Operation handlers  operate on typed representations of HTTP requests and responses. Operation handlers  convert generic HTTP requests and responses to and from domain application specific typed representations as part of pipeline .","It will be understood that the steps of the processes discussed herein may be executed simultaneously and\/or sequentially. It will be further understood that each step may be performed in any order and may be performed once or repetitiously.",{"@attributes":{"id":"p-0048","num":"0058"},"figref":["FIG. 10","FIGS. 1-9"],"b":["1000","1000"]},"The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer . Components may include, but are not limited to, processing unit , data storage , such as a system memory, and system bus  that couples various system components including the data storage  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media . Computer-readable media  may be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media  may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer-readable media.","The data storage or system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM) and random access memory (RAM). A basic input\/output system (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM. RAM typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation, data storage  holds an operating system, application programs, and other program modules and program data.","Data storage  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only, data storage  may be a hard disk drive that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive that reads from or writes to a removable, nonvolatile magnetic disk, and an optical disk drive that reads from or writes to a removable, nonvolatile optical disk such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The drives and their associated computer storage media, described above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer .","A user may enter commands and information through a user interface  or other input devices such as a tablet, electronic digitizer, a microphone, keyboard, and\/or pointing device, commonly referred to as mouse, trackball or touch pad. Other input devices may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface. The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers and printer, which may be connected through an output peripheral interface or the like.","The computer  may operate in a networked environment using logical connections  to one or more remote computers, such as a remote computer. The remote computer may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include one or more local area networks (LAN) and one or more wide area networks (WAN), but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  may be connected to a LAN through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem or other means for establishing communications over the WAN, such as the Internet. The modem, which may be internal or external, may be connected to the system bus  via the network interface  or other appropriate mechanism. A wireless networking component such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a WAN or LAN. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DRAWINGS","p":["To further clarify the above and other advantages and features of embodiments of the present invention, a more particular description of embodiments of the present invention will be rendered by reference to the appended drawings. It is appreciated that these drawings depict only typical embodiments of the invention and are therefore not to be considered limiting of its scope. The invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0011","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0024"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
