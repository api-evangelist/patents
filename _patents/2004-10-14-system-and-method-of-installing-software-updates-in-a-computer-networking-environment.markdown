---
title: System and method of installing software updates in a computer networking environment
abstract: The present invention provides a system and method of installing software updates to computing devices connected to an enterprise network. More specifically, the present invention provides a system and method of installing software updates based on input received from a system administrator or similar entity. When a command to install a software update is received, the present invention obtains the requested software update from a download center and causes the software update to be transmitted to client computing devices that need the functionality provided by the software update. Then the software update is installed in accordance with the input previously obtained from the system administrator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546595&OS=07546595&RS=07546595
owner: Microsoft Corporation
number: 07546595
owner_city: Redmond
owner_country: US
publication_date: 20041014
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to computer programs and, more specifically, to computer programs that improve distribution and installation of software updates over computer networks.","Explosive growth in computer networks in the last two decades has changed the uses of computers dramatically. The largest computer network, commonly known as the Internet or World Wide Web (\u201cWWW\u201d), is now connecting millions of computing devices in the world, providing services like e-mail, file transfer, and hypermedia information retrieval across different computer platforms. Increasingly, organizations such as companies, educational institutions, service providers and the like depend on networks that operate inside an organization (hereinafter referred to as an \u201centerprise network\u201d) and also connect to external networks such as the Internet. With the rapid growth of computer network technology, the management of software that executes in a networking environment has gained in importance. For example, as additional computing devices are interconnected through various networks, computing device security in the form of antivirus software has become increasingly important.","A large number of application programs and files used by computing devices need periodic updates. Many updates are of vital importance, such as those updates that involve antivirus software. Recently, network-based systems have been developed that distribute software updates as a download over a computer network such as the Internet. For example, U.S. Pat. No. 6,199,204, to Donohue et al., describes a system that provides software updates from a Web site. The software updates may be automatically installed based on the perceived needs of a computing device or the software updates may be installed manually based on input received from a user.","Installing and maintaining software in an enterprise network environment is a major cost to organizations. This is particularly the case where a large number of networked computing devices are involved, each computing device having a large number of application programs and possible software updates. As the number of computing devices in an enterprise network increases, it becomes progressively more difficult to maintain each computing device in a condition that maximizes security and functionality. Even though distribution of software updates has improved, system administrators of enterprise networks are not able to easily maintain all computing devices in an enterprise network with the most recent software updates.","In light of the above-identified problems, it would be beneficial to have a system that distributes and installs software updates to all computing devices in an enterprise network. Desirably, an administrator would have control over the updates installed and could schedule installations of the software updates. The present invention is directed to providing such a system.","To address the above-described problems and other shortcomings in the prior art, the present invention provides a system and method of installing software updates to computing devices connected to an enterprise network. More specifically, the present invention provides a system and method of installing software updates based on input received from a system administrator or similar entity. When a command to install a software update is received, the present invention obtains the requested software update from a download center and causes the software update to be transmitted to computing devices connected to the enterprise network. Then the software update is installed in accordance with the input previously obtained from the system administrator.","One aspect of the present invention assists system administrators in identifying necessary software updates by performing \u201caudits\u201d of computing devices connected to the enterprise network. More specifically, the software state of client computing devices in an enterprise network is identified by scanning configuration databases stored on the client computing devices. When the client computing devices are being scanned, audit data is assembled and transmitted to a server computing device. From the audit data, an administrator may generate reports that provide statistics regarding the software state of client computing devices.","Another aspect of the present invention is a method that automatically installs software updates based on input received from a system administrator or similar entity. In this aspect, options are presented to a system administrator which allows the system administrator to (1) identify software updates that will be installed, (2) determine a time period when software updates will be installed, and (3) prioritize installation of software updates. After input from the system administrator is received, the requested software updates are obtained from a download center. Then the method causes the requested software updates to be installed in accordance with the options chosen by the system administrator.","In another aspect of the present invention, a computer system is provided that is configured to install software updates on computing devices connected to an enterprise network. The computer system includes a scan engine, a statistical analysis module, a graphical user interface, and a software distribution module. The scan engine is configured to identify the software state of computing devices connected to the enterprise network by performing a scan of configuration databases stored on the computing devices. Audit data produced by the scan engine is analyzed by the statistical analysis module and summarized in reports. From the reports, a system administrator or similar entity may easily identify software updates that need to be installed. The graphical user interface may be configured to accept a command to install a software update to one or more client computing devices. When a command is received, the software distribution module obtains the software update and causes the software update to be installed on one or more client computing devices.","In yet another aspect of the present invention, a computer-readable medium may be provided with contents that cause a computing system to operate in accordance with the methods described herein.","The present invention provides a system and method of installing software updates to computing devices connected to an enterprise network. More specifically, the present invention provides a system and method of installing software updates based on input received from a system administrator or similar entity. When a command to install a software update is received, the present invention obtains the requested software update from a download center and causes the software update to be transmitted to client computing devices that need the functionality provided by the software update. Then the software update is installed in accordance with the input previously obtained from the system administrator.","Although the present invention will primarily be described in the context of an enterprise network, those skilled in the relevant art and others will appreciate that the present invention is also applicable in other areas of computer networking and software engineering. The following description first provides an overview of a system in which the present invention may be implemented. Then methods for generating reports and installing software updates on client computing devices connected to an enterprise network are described. The illustrative examples provided herein are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Similarly, any steps described herein may be interchangeable with other steps, or combinations of steps, in order to achieve the same result.","Referring to , the following is intended to provide an exemplary overview of one suitable computer environment in which the present invention may be implemented. The illustrated environment comprises a plurality of client computing devices , , and , an update server , and a download server . The client computing device  is shown associated with user . The update server  is communicatively connected with the client computing devices , , and  and the download server . Also, the update server  is configured to communicate with the client computing devices , , and  via an internal network  that may be implemented as a local area network (\u201cLAN\u201d), wide area network (\u201cWAN\u201d) or even a direct communication link. Conversely, the update server  is configured to communicate with the download server  over the Internet . As known to those skilled in the art and others, the computing devices illustrated in  may be configured to exchange documents, commands, and other types of data.","As illustrated in , the download server  is associated with a catalog database  and a software update database . As described in further detail below, software formed in accordance with the present invention (1) assists system administrators in identifying necessary software updates, and (2) installs software updates on client computing devices. The catalog database  includes a listing of software updates that are available from the software update database . Also, the catalog database  may include rules, typically in the form of Boolean logic, which prescribe the conditions under which individual software updates should be installed. In one embodiment of the present invention, the catalog database  may be configured as an XML document. When a system administrator identifies software updates that will be installed, the program code that implements the software updates is obtained from the software update database . Both the catalog database  and software update database  may be maintained on the download server  by a trusted software source, such as Microsoft Corporation.","Now, with reference to , components of the update server  shown in  will be described. In general, the update server  acts as a distribution point for software updates that are initially made available from the download server . Also, the update server  allows a system administrator to customize how software updates will be installed on client computing devices in an enterprise network. For example, the update server  may be configured to perform installations at predetermined periods of time, thereby minimizing inconvenience to users. Similarly, some types of software updates may be assigned a higher priority than other software updates. For example, software updates to antivirus software may be assigned a high priority level. In this instance, when a software update for antivirus software becomes available, the update server  may suspend installation of a lower priority software update until installation of the higher priority software update is complete. As illustrated in  and described in further detail below, the update server  includes a synchronization module , a scan engine , a statistical analysis module , a graphical user interface , and a software distribution module . Also, the catalog database  and software update database  may be replicated on the update server  by the synchronization module .","The synchronization module  is configured to download a copy of the catalog database  and the software update database  from the download server  (). Since a software update provider may regularly alter or add entries to the catalog database  and the software update database , the synchronization module  may be configured to check the download server  at regular intervals for changes. Each time the databases  and  are changed by the software update provider, the synchronization module  downloads the changes to the update server .","The scan engine  is configured to identify the software state of client computing devices by performing an analysis of configuration databases stored on those computing devices. As known to those skilled in the art and others, modern computing devices maintain databases from which configuration information may be obtained. For example, the system registry is a database used to store settings, options, and preferences regarding the operation of a computing device, including settings for all the hardware, software, and user preferences. The system registry also stores references to libraries, such as dynamically linked libraries, which identify the code segments and data used by application programs installed on the computing device. The scan engine  analyzes the system registry and other configuration databases to identify the operating system, application programs, and previously installed software updates installed on a client computing device. Then the scan engine  queries the catalog database  for information about available software updates and rules that govern when a particular software update should be installed. The output produced by the scan engine  is audit data which describes the software state of a client computing device including software updates that need to be installed on the client computing device.","In one embodiment of the present invention, a module for producing audit data is located on a client computing device such as client computing device  (). In this embodiment, the update server  obtains audit data by interfacing with a previously developed client-based program module located on the client computing device . The module maintains an application programming interface (\u201cAPI\u201d) that defines the services available to other program modules. In this instance, the update server  is able to obtain audit data and other information from the client computing device  by making API calls. One commercially available software application that has a client-based program module capable of satisfying API calls for audit data is Windows\u00ae Update Services. When audit data is available to the update server  through a set of APIs, performance of the present invention in installing software updates is improved. For example, a scan for software installed on the client computing device may be performed by the client-based program module at regular intervals. The results of the scan are readily available to the update server  without requiring the update server  to perform an additional scan.","The statistical analysis module  is configured to obtain audit data for each client computing device. In one embodiment of the present invention, audit data is aggregated into reports to assist system administrators in identifying software updates that are needed throughout an enterprise network. As known to those skilled in the art and others, an enterprise network may consist of a large number of computing devices. To assist system administrators in identifying vulnerabilities in the enterprise network, the statistical analysis module  produces reports that describe the software state of a plurality of client computing devices. By viewing the reports, a system administrator may gain an understanding of which software updates need to be installed.","The reports generated by the statistical analysis module  may assist system administrators in numerous contexts of which the following are only examples. For instance, a system administrator may want to know which client computing devices have a specific software update installed. Reports may be generated that allow system administrators to identify client computing devices that have the software update installed. Also, after installation of a software update has been initiated, reports may be generated that identify client computing devices that were successfully updated as well as client computing devices that are yet to install the software update.","The update server  also maintains a graphical user interface (\u201cGUI\u201d)  for communicating with a user, such as a system administrator. As known to those skilled in the art and others, a GUI is an input system characterized by the use of graphics on a computer display to communicate with a computer user. For example, reports generated by the statistical analysis module  may be displayed on the GUI . Also, the GUI  allows a system administrator to click buttons, icons, and menu options to generate commands. As described in further detail below with reference to , the types of commands accepted by the GUI  include commands for generating different kinds of reports and for installing software updates.","The update server  also maintains a software distribution module  configured to transmit software updates from the download server  to the client computing devices where the software updates will be installed. To transmit the software updates, the software distribution module  uses network protocols generally known in the art such as File Transfer Protocol (\u201cFTP\u201d). When the software updates are located on the client computing devices, the software distribution module  then causes the updates to be installed.","As illustrated in , each component of the update server , e.g., the synchronization module , scan engine , statistical analysis module , GUI , software distribution module , catalog database , and software update database , are interconnected and able to communicate with other components. As known to those skilled in the art,  is a simplified example of one computing device capable of performing the functions of the present invention. Actual embodiments of the update server  will have additional components not illustrated in  or described in the accompanying text. Also,  shows one component architecture for installing software updates using an update server , but other component architectures are possible. Thus,  should be construed as exemplary and not limiting.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIGS. 1 and 2","FIG. 3"],"b":["300","300","300"]},"The software analysis method  begins at block  where a command is obtained from a user, such as a system administrator, to perform an audit of one or more computing devices connected to an enterprise network. In one embodiment of the present invention, a system administrator manually issues a command to perform an audit. For example, a system administrator may determine that some client computing devices in an enterprise network are susceptible to a newly discovered and malicious computer program. In this instance, a system administrator may issue a command to immediately perform an audit of one or more client computing devices to determine whether a software update designed to \u201cdisinfect\u201d these client computing devices is installed. In another embodiment, the command issued by a system administrator specifies a predetermined time period when an audit may be performed. For example, a system administrator may issue a command that causes an audit to be performed on every client computing device in an enterprise network at regular intervals (i.e., hourly, daily, weekly, monthly, etc.). In either instance, a command is accepted at block  using the GUI  that provides graphical elements for generating commands.","At block , the most recent version of the catalog database  is downloaded from a download center, such as download server , to a distribution point, such as update server . The data downloaded may be the entire catalog database  or merely changes made to the database  since the previous download. By downloading the catalog database  to the update server , the method  insures that the most recent information regarding available software updates is known. In accordance with an alternative embodiment of the present invention, the updates made to the catalog database  are downloaded at regular intervals (i.e., hourly, daily, weekly, monthly, etc.). In either instance, a recent version of the catalog database  is available on the update server  so that necessary software updates may be identified.","At block , the software analysis method  selects a client computing device from which audit data will be obtained in response to the command received at block . One aspect of the present invention allows a system administrator to identify the client computing devices from which audit data will be obtained. For example, a system administrator may issue a command for audit data to be obtained from computing devices in a specified geographic region. Alternatively, a system administrator may issue a command for a \u201cblanket\u201d audit to be performed on all client computing devices in an enterprise network. As described in further detail below, audit data may be presented to a system administrator in reports that summarize the software state of a plurality of client computing devices.","At decision block , the software analysis method  determines if a program module for producing audit data and other configuration information is installed on the selected client computing device. As described previously, some client computing devices may have a program module installed that maintains an interface, such as a set of APIs for providing services to other program modules. For example, a client-based program module included with Windows\u00ae Update Services is designed to scan configuration databases stored on a client computing device and produce audit data that is accessible through a set of APIs. At block , the software analysis method  determines whether audit data is available from the selected client computing device through an interface such as a set of APIs. In instances where audit data is accessible through an interface, the software analysis method  proceeds to block . Alternatively, when audit data is not accessible through an interface, the software analysis method  proceeds to block .","At block , the catalog database  is transmitted to the selected client computing device in preparation for the audit. If block  is reached, the selected client computing devices does not have a program module installed from which audit data may be obtained. Instead, a server-based computing device, such as the update server  (), will perform an audit of the selected computing device. In order to perform the audit, the catalog database  is transmitted to the selected client computing device in preparation for the audit. The speed of the present invention is improved if a resident version of the catalog database  is stored on all client computing devices in an enterprise network. If the selected client computing device was not audited previously, all of the data in the catalog database  is transmitted at block . Alternatively, if the selected client computing device was audited previously, the version of the catalog database  on the selected client computing device is updated with changes that occurred to the database  on the download server  since the previous audit.","At block , an audit is performed on the selected client computing device. The scan engine  is configured to identify the operating system, application programs, and software updates already installed on the selected client computing device. For example, as known to those skilled in the art and others, a system registry is a database used to store settings, options, and preferences regarding the operation of a computing device, including settings for all the hardware, software, and user preferences. An application program may not be functional unless certain information about the application program is contained in the system registry. The scan engine  is configured to parse configuration databases like the system registry and identify the exact version of the operating system, application programs, and software updates already installed on the selected client computing device. As known to those skilled in the art and others, a system registry is one illustrative example of a database used to store settings regarding the software state of a computing device.","The catalog database  downloaded to the selected client computing device at block  provides information regarding the relationship between software potentially present on the computing device and available software updates. After the software state of the selected client computing device is known, the scan engine  is configured to determine the software updates that need to be installed on the selected client computing device. Then the scan engine  assembles the data known about the selected client computing device and transmits the data to the update server .","At block , the software analysis method  obtains audit data from the selected client computing device. If block  is reached, the selected client computing device has a program module installed that maintains an interface for providing services to other program modules. More specifically, the selected client computing device maintains a set of APIs that may be used to identify the software updates that are not installed on the computing device. In this instance, the program module maintains a resident copy of the catalog database  that is updated at regular intervals when the program module performs a scan of the selected client computing device. Since a client-based program module is responsible for generating audit data, the software analysis method  is able to identify the updates that need to be installed by making one or more API calls.","At decision block , the software analysis method  determines if any additional client computing devices will be selected. As described previously, the command received at block  may require the software analysis method  to obtain audit data from one or more client computing devices. If additional client computing devices need to be selected, the software analysis method  proceeds to block  discussed below. Conversely, if additional client computing devices will be selected, the method  proceeds back to block  and blocks  through  repeat until all of the necessary client computing devices have been selected.","At block , the software analysis method  determines if audits of client computing devices will be conducted in a continuous loop. The catalog database  may be updated at any time by a software update provider. For example, a new malicious computer program may be released on computer networks that require an immediate software update. The present invention may be configured to perform audits in a continuous loop so that when a new software update becomes available, client computing devices in an enterprise network may begin installing the software update immediately.","At block , the software analysis method  remains idle and waits for a command from a system administrator to generate a report. As described previously, a report summarizes the software state of one or more client computing devices in an enterprise network. In one embodiment of the present invention, the system administrator generates commands using tools (i.e., buttons, icons, menus, etc.) available from the graphical user interface . As known to those skilled in the art and others, graphical user interfaces are event driven systems. Thus, a system administrator may issue a command to generate a report at any time audit data is available on the update server .","At block , a report that is responsive to the command received at block  is generated by the statistical analysis module . At block , different types of commands that assist system administrators in identifying necessary software updates may be generated. Stated differently, a system administrator may gain an understanding of the vulnerabilities facing an enterprise network by causing one of many different types of reports to be generated. When a command is received, audit data that describes the software state of one or more client computing devices in an enterprise network is analyzed and summarized in a report. Then the statistical analysis method  proceeds to block  where it terminates.","The statistical analysis method  is designed to function with both a system where a client-based program module identifies necessary software updates and a system where a scan of client computing devices is performed by a server computing device. To accommodate these different systems, the statistical analysis method  may include additional or fewer steps than described above. In instances where a client-based program module identifies necessary software updates, certain data may be obtained by the method  in an additional step. For example, a client-based program module is able to obtain data regarding the reasons why an installation failure occurred. This type of data may be obtained by the statistical analysis method  in an additional step and displayed to a system administrator in a report.","For illustrative purposes and by way of example only, a representative report  is illustrated in . The report  consists of six columns, each of which contains multiple entries. The columns are identified as SOFTWARE UPDATE ID , SOFTWARE INSTALLED BY UPDATE SERVER , SYSTEMS UPDATED BY EXTERNAL MEANS , TOTAL SYSTEMS UPDATED , SYSTEMS NOT REQUIRING THE UPDATE , and COMPLIANT SYSTEMS . The SOFTWARE UPDATE ID  column contains a unique identifier for software updates that are available from a download center such as the download server . The SOFTWARE INSTALLED BY UPDATE SERVER  column identifies the number and percentage of client computing devices in an enterprise network that had the specified software update installed by the present invention. The SYSTEMS UPDATED BY EXTERNAL MEANS  column identifies the number and percentage of client computing devices in an enterprise network that had the specified software update installed using a system other than the present invention. As known to those skilled in the art and others, existing systems allow users to obtain and install software updates. For example, a user may manually download a software update and cause an installation program to be executed. The number and percentage of client computing devices that use a system other than the present invention to install the specified software update is identified in column . The TOTAL SYSTEMS UPDATED  column identifies the number and percentage of client computing devices in an enterprise network that had a specified software update installed, regardless of the mechanism used. The SYSTEMS NOT REQUIRING THE UPDATE  column identifies the number and percentage of client computing devices in an enterprise network that do not need the specified software update installed. Lastly, the COMPLIANT SYSTEMS  column identifies the number and percentage of client computing devices in an enterprise network that do not need the specified software update installed, either because the software update was already installed or because the software update is not needed. Aggregating audit data in the report  provides an easy way for system administrators to identify vulnerabilities in an enterprise network. Also, reports may provide a mechanism for system administrators to obtain more specific information regarding a software update. For example, the report  illustrated in  contains links , , , , , and . As described in further detail below with regard to , when a link is activated, additional information about the specified software update may be obtained. Although  illustrates one report  having specific attributes, those skilled in the art will appreciate that the present invention may operate with more or fewer than all of the listed attributes.","For illustrative purposes and by way of example only, another representative report  is depicted in . The report  depicted includes exemplary data that may be displayed after a system administrator activates the \u201cMS03-\u201d link  shown in . When a link is activated, a command is sent to the download server  requesting additional information about a software update. More specifically, the report  in  consists of five columns that collectively provide information about the state of the specified software update. The columns are identified as SOFTWARE UPDATE ID , PRELIMINARY SUCCESS , INSTALL VERIFIED , INSTALL FAILED , and NO STATUS . Similar to , the SOFTWARE UPDATE ID  column contains a unique identifier assigned to a software update. The PRELIMINARY SUCCESS  column displays the number and percentage of client computing devices in which the software update installed without any known errors. The INSTALL VERIFIED  column displays the number and percentage of client computing devices in which installation was verified with an audit. Similarly, the INSTALL FAILED  column identifies the number and percentage of client computing devices in which an installation failure was verified with an audit. Lastly, the NO STATUS  column identifies the number and percentage of client computing devices in which information about the specified software update is not known. This may occur, for example, if an audit of one or more client computing devices in an enterprise network has not been performed.","In instances when a program module is installed on a client computing device that is capable of producing audit data, the present invention may be used to provide the status of an installation. As described above, a program module may be installed on a client computing device that provides a set of APIs. In one embodiment of the present invention, the client-based program module is able to obtain messages regarding the status of an installation. When status messages are accessible, those messages may be displayed to a system administrator using the type of report .","By way of example only, the report  contains a brief description  of the functionality provided by the selected software update. Also, as illustrated in , the report  may be configured with embedded controls, such as a \u201cmore information\u201d button  that allows a system administrator to obtain additional information about the specified software update. When the button  is activated, a signal is sent to the download server  where a hypertext document that contains additional descriptive text regarding the specified software update is obtained.","For illustrative purposes and by way of example only, another representative report  is depicted in . Similar to , the report  contains a unique identifier  that identifies a specified software update. Also, the report  depicted in  consists of five columns that collectively provide information about the installation of a software update over time. The columns are identified as TIME PERIOD , INSTALLED BY UPDATE SERVER , INSTALLED BY EXTERNAL MEANS , SYSTEMS NOT REQUIRING THE UPDATE , and COMPLIANT SYSTEMS . The TIME PERIOD  column contains a time when client computing devices in an enterprise network were scanned to determine if a software update was installed. The time interval between entries in the TIME PERIOD  column may be set to any value (such as hourly, daily, monthly, etc.). The INSTALLED BY UPDATE SERVER  column identifies the number and percentage of client computing devices in an enterprise network that have the specified software update installed at the given time. The SYSTEMS UPDATED BY EXTERNAL MEANS  column identifies the number and percentage of client computing devices that have the specified software update installed using a system other than the present invention at the given time. The SYSTEMS NOT REQUIRING THE UPDATE  column identifies the number and percentage of client computing devices that do not need the specified software update installed. Lastly, the COMPLIANT SYSTEMS  column identifies the number and percentage of client computing devices that no longer need the functionality provided by the specified software update. Aggregating audit data in the report  provides an easy way for system administrators to track the installation of software updates over time.","For illustrative purposes and by way of example only, another representative report  is depicted in . Similar to , the report  contains a unique identifier  used to reference a software update. Also, the report  depicted in  consists of four columns identified as COMPUTER NAME , USER DOMAIN , LAST STATUS MESSAGE , and LAST STATUS TIME . The COMPUTER NAME  column contains a string-based name used to identify a computing device in an enterprise network. The USER DOMAIN  column identifies a logical division of an enterprise network to which a specified computing device belongs. As known to those skilled in the art and others, large enterprise networks are typically divided into logical divisions. For example, since an enterprise network may be dispersed geographically, a logical division may be based on the location of a computing device. The LAST STATUS MESSAGE  column identifies the last status message received from a computing device with regard to a software update. As known to those skilled in the art and others, when an attempt to install a software is made, a client computing device may be configured to produce \u201cstatus\u201d messages. For example, a status message may indicate that a software update either did or did not install successfully. Also, a status message may indicate that installation of a software update is pending until a \u201creboot\u201d occurs. Lastly, the LAST STATUS TIME  field contains a time when the most recent status message was obtained. The report  illustrated in  assists system administrators in identifying the state of software updates. For example, by viewing a report of the type illustrated in , a system administrator may learn that all computing devices in a particular domain failed to install a software update. In this instance, the system administrator may begin \u201ctroubleshooting\u201d the software installation failure with information contained in the report .","As will be appreciated by those skilled in the art and others,  are highly simplified examples of reports that illustrate certain aspects of the present invention. Additional reports may be generated that allow a system administrator to obtain data that is not described above. For example, reports may be generated that allow system administrators to \u201cdrill down\u201d and obtain information about the software state of any client computing device in an enterprise network.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 8","FIGS. 1-7","FIG. 8"],"b":["800","800","108","800","800"]},"The installation method  begins at block  where a command is received from a system administrator to install one or more software updates. In this respect, command data is received that (1) provides a time period when the software updates will be installed, and (2) assigns priority levels to the software updates. The command data is obtained using the GUI  that presents easily understood graphical elements for generating commands.","When software formed in accordance with the invention is implemented in a computing device, such as update server , the computing device provides a way to install software updates to client computing devices communicatively connected to the update server . The software updates are installed in accordance with the command received at block . For example, a system administrator may generate a command to immediately install a software update to every computing device in an enterprise network. A software update may be assigned a priority level so that other installations with a lower priority level are suspended until installation of the higher priority software update is complete. In another example of an application of the present invention, a system administrator may generate a command for a software update to be installed during a time period when computing devices are likely to be idle. Since updating large numbers of computing devices may be time consuming, the system administrator may designate a reoccurring time period for installations to occur (i.e., daily from 12:00 a.m. to 2:00 a.m.).","At decision block  the installation method  remains idle and waits for an installation event. As described previously, installations may be scheduled to begin at any time. When the time period for a software update to be installed arrives, the installation method  causes a software update to be installed.","At block  the software update that will be installed is downloaded from a download center, such as the download server , to a distribution point, such as the update server . The software update may be downloaded to the update server  just prior to installation. Alternatively, software updates may be downloaded at regular intervals (i.e., hourly, daily, weekly, monthly, etc.). In either instance, at block  the software update that will be installed is obtained by the method .","At block , the installation method  selects a client computing device in the enterprise network. For each client computing device selected, the installation method  causes the software update to be transmitted to the selected client computing device and installed in accordance with the command received at block .","At block , the executable code required to install the software update is transmitted from a distribution point (i.e., update server ) to the selected client computing device. Since transmitting data over a network may utilize any one of a number of different communication protocols generally known in the art, further description of these protocols is not provided here.","At block , the software update is installed on the selected client computing device in accordance with the command generated by the system administrator at block . However, prior to installing the software update, the scan engine  performs an audit of the selected client computing device to determine if the software update still applies. Stated differently, software updates may be installed using a system other than the present invention. In this instance, the installation method  prevents duplicative installations by performing another scan of the selected client computing device. If the audit data indicates that the software update has not already been installed, then the software update is installed. After the installation is complete, the scan engine  again evaluates the configuration databases on the selected client computing device to determine if installation of the software update completed successfully.","During the installation process at block , a previously realized software system may present a user of the selected client computing device with options for installing the software update. By way of example only, one option available to a user is to delay installation of the software update until a later time. A detailed description of a system and method of presenting a user with various options for installing a software update may be found in commonly assigned Application No. 60\/455,197, titled \u201cSOFTWARE UPDATING SYSTEM AND METHOD\u201d, filed Mar. 17, 2003, the content of which is expressly incorporated herein by reference.","At decision block , the software analysis method  determines if any additional client computing devices will be selected. As described previously, the command received at block  may require the installation method  to install a software update on more than one client computing device. If additional client computing devices do not need to be selected, the installation method  proceeds to block  where it terminates. Conversely, if additional client computing devices will be selected, the method  proceeds back to block  and blocks  through  repeat until the software update has been installed on all of the requested client computing devices.","Implementations of the present invention are not limited to the installation  method shown in . As noted above, a system administrator may assign different priority levels to software updates. In this instance, a software update with a low priority level that is currently being installed may be suspended when a higher priority software update begins the installation process. Thus, the installation method , described above, may be suspended at any step to service a different software update. Also, other methods may eliminate steps or add steps to the installation method . For example, audits performed by the scan engine  may indicate that a plurality of software updates needs to be installed on one or more client computing devices in an enterprise network. In this instance, the installation method  may cause all of the necessary software updates to be installed. Thus, the embodiment of the present invention described above with reference to  should be construed as exemplary and not limiting.","The statistical analysis method  () and the installation method  () may be implemented in combination to fully automate the process of identifying and installing necessary software updates. For example, a system administrator may issue a command so that audits of client computing devices are performed in a continuous loop. When a new software update becomes available at a download center, such as download server , audit data generated by the scan engine  will indicate that the new software update needs to be installed. The installation method  may be configured to install the software update when audit data indicates that installation of the new software update is needed.","While an embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 7","FIG. 3"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
