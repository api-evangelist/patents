---
title: Command interpreter
abstract: A system includes a first computer configured to store and run a computer program. The computer program includes an internal interface with tangible machine-readable instructions stored on the first computer, to provide communications between the computer program and external computers and our computer processes. The system also includes a command interpreter configured to interface with the computer program through the internal interface. The command interpreter includes tangible machine-readable instructions to detect a script file; generate one or more command objects, interpretable by the internal interface, representative of a functionality defined in the script file; generate a command script comprising the generated command objects; and execute the command script by executing at least a portion of the machine-readable instructions in the internal interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892519&OS=08892519&RS=08892519
owner: General Electric Company
number: 08892519
owner_city: Schenectady
owner_country: US
publication_date: 20111006
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF DESCRIPTION OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The subject matter disclosed herein relates to computer programs, and more specifically, computer programs that utilize a command interpreter to provide run-time commands after the program has been developed.","Computer programs provide computer-implemented instructions useful for completing one or more goals. One such example of a distributed computer program may be a model versioning manager (MVM). An MVM is a software application that maintains a representation (model) of a system (e.g., a power distribution network). Updates to the model are submitted via multiple systems in a distributed network. The updates are sent in the form of jobs containing additions\/deletions\/modifications to the model. The MVM maintains the current state of the model as well as the historical changes that have taken place over time. The MVM system can thus provide the version of the entire model as it existed at a particular point in time. The MVM allows the exporting of a model version as a baseline (containing a snapshot of the model at a particular point) or as increments (which are applied to a particular version to bring the model to a new version).","Over time, it may be useful to implement features beyond those which were included in the design and implementation of the computer program. For example, maintenance procedures, control procedures, and\/or reporting procedures may be desirable after the computer program has been designed and implemented. For example, in MVMs, the number of model modifications can become quite numerous. Accordingly, a large amount of storage may be necessary to store the model modifications. Thus, it may be desirable to add data purging functionality to the MVMs. Typically, such modification may occur through the use of standard services (e.g., web services). Unfortunately, in many situations, generating functionality using these services can be quite complex and time consuming Thus, in certain situations, the added functionality may not be worth the added complexity and time needed to implement the functionality. Further, updates made through these standard services are often times not expandable.","Certain embodiments commensurate in scope with the originally claimed invention are summarized below. These embodiments are not intended to limit the scope of the claimed invention, but rather these embodiments are intended only to provide a brief summary of possible forms of the invention. Indeed, the invention may encompass a variety of forms that may be similar to or different from the embodiments set forth below.","In one embodiment, a system includes a first computer configured to store and run a computer program, an internal interface comprising tangible machine-readable instructions stored on the first computer, wherein the internal interface is configured to provide communications between the computer program and external computers or computer processes, and a command interpreter configured to interface with the computer program through the internal interface, the command interpreter comprising tangible machine-readable instructions, stored on a second computer, configured to detect a script file, generate one or more command objects, interpretable by the internal interface, representative of functionality defined in the script file, generate a command script comprising the generated command objects, and execute the script by executing at least a portion of the machine-readable instructions in the internal interface.","In a second embodiment, a system includes a computer data access component, comprising tangible computer readable instructions stored on a computer, the computer data access component configured to store data in a version control system repository, a database, a file system or combination thereof, and provide exposed import and export operations of the version control system repository, database, file system or combination thereof to external computer programs, and a command interpreter, comprising tangible computer-readable instructions stored on a computer, the command interpreter configured to execute a script using at least the exposed import and export operations, wherein the script is configured to purge content in the version control system repository, the database, or both, that was created, modified, or both prior to a date specified in the script, while retaining content in the version control system repository, the database, or both, that was generated, modified, or both after the date specified in the script.","In a third embodiment, a method of purging data, including detecting, via a command interpreter implemented on a first computer, a script file, generating, via the command interpreter implemented on the first computer, a command script comprising tangible machine-readable instructions stored in a data storage to suspend a computer program, running on the first computer or a second computer, such that jobs sent to the computer program are not executed, determine what data related to the computer program should be preserved, export the data that should be preserved, delete all database tables and version control repositories not relating to configuration of the computer program, database tables, and version control repositories, import the exported data, and resume the computer program so that jobs sent to the computer program may be executed, and executing, via the command interpreter, the command script.","One or more specific embodiments of the present invention will be described below. In an effort to provide a concise description of these embodiments, all features of an actual implementation may not be described in the specification. It should be appreciated that in the development of any such actual implementation, as in any engineering or design project, numerous implementation-specific decisions must be made to achieve the developers' specific goals, such as compliance with system-related and business-related constraints, which may vary from one implementation to another. Moreover, it should be appreciated that such a development effort might be complex and time consuming, but would nevertheless be a routine undertaking of design, fabrication, and manufacture for those of ordinary skill having the benefit of this disclosure.","When introducing elements of various embodiments of the present invention, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","Present embodiments relate to computer systems that use a command interpreter to execute functions beyond those typically available in a set of implemented computer program instructions. The use of the command interpreter to implement supplemental functionality allows the computer system to be expandable (e.g., to be able to execute supplemental computer-readable instructions) while reducing complexity and time constraints necessary for alternative methods of adding such supplemental functionality to the computer program instructions of the computer system.","With the foregoing in mind,  is a block diagram of a system , which includes a computer  that may execute a computer program  utilizing a command interpreter , in accordance with an embodiment. The computer  includes storage  and a processor  that may be utilized to store and execute the computer program  (i.e., computer-readable instructions that implement the functionality described herein). As discussed above, the computer-readable instructions (e.g., computer program ) may not always implement all the desired features that a computer program user desires to execute. For example, the computer program  may be a model version manager (MVM) program that includes instructions to retain historical version information about models configured in the MVM program. The computer program  may include instructions to facilitate data storage in many different data stores, such as a version control repository , a database , and\/or a file system , each of which may be contained on one or more computer storage systems (e.g., computer hard drives, storage arrays, storage servers, etc.).","Moreover, additions, deletions, and modifications to the models may be presented to the computer program in the form of jobs. Accordingly, the number of jobs presented to the computer program  may be quite large. For example, in certain situations, the number of jobs may be in the hundreds or thousands of jobs per day. Each of the additions, deletions, and\/or modifications generated by the jobs may be stored in the data stores , , and\/or . Over time, the amount of storage space used by the data stores may reach a size that is beyond a desirable or acceptable amount. Further, a user of the computer program may have no use for older data stored in the data stores , , and .","In one embodiment, the computer program  (e.g., MVM program) may not natively include instructions for a comprehensive purging mechanism that purges data that is no longer useful (e.g., old or stale). Accordingly, the command interpreter  may be incorporated into the computer program  so that additional functionality (e.g., enhanced data purging) may be added to the computer program . In one embodiment, the command interpreter  may include computer-readable instructions stored on the computer  or another computer in the computer system . The command interpreter  may receive a script file  in the form of text generated by a user of the computer program . The script file  may be received by the command interpreter from any data store  (e.g., a web service output  from a computer, a database  stored in computer storage, and\/or a computer storage file system ). The script file  may be generated and\/or maintained by a user and\/or administrator of the MVM program (e.g., an electric power company employee). The script file  may define functions and\/or arguments (e.g., parameters) useful to implement additional functionality within the computer program . For example, a script  may include a definition generated by a computer administrator for enhanced data purging functionality that is not included in the computer-readable instructions provided in the computer program .","The computer program  may include instructions to provide one or more internal interfaces (e.g., computer-readable instructions) that allow external computers and\/or computer processes to interface with the computer program  on the computer . For example, one internal interface  may be an application programming interface (API) of the computer program  running on the computer  that enables external computers and\/or processes to execute data imports and\/or exports from the computer program . As will be described in more detail below regarding , the command interpreter  may include instructions to generate one or more commands  based upon the script files . The commands  may be configured to execute functionality of the internal interfaces  of the computer program  to facilitate the functionality defined in the script files  (e.g., the enhanced data purging functionality).","Turning now to , a flow diagram is presented, illustrating a process  of executing a script via the command interpreter  of , in accordance with an embodiment. The command interpreter  may include instructions to wait a certain interval of time before processing a script (block ). In some embodiments, the command interpreter may sleep, for example, for approximately 1, 10, 20, 50, or 60 seconds before trying to detect a script file (e.g., a user generated set of instructions defining functions and\/or parameters useful for implementing additional functionality within the computer program  of ).","The command interpreter may then determine whether a script is in the database by actively polling the database via a database query (block ). If a script is found in the database, the script may be retrieved (e.g., transferred to internal storage of the command interpreter ) (block ). The command interpreter  may then generate a script containing executable commands (block ) and execute the script (block ). For example, the command interpreter  may convert the set of instructions in the script to commands interpretable by the internal interface of the computer program  (e.g., data imports and exports) running on computer .","However, if no script is found in the database at block , the command interpreter may detect whether a script is found in the file system by querying the file system (block ). If no script is found, the command interpreter waits (block ) before polling again. However, if a script file is found in the file system, the command interpreter may read the script file (block ) and create a shell script (block ). The command interpreter many then determine whether the end of the script file has been reached (block ). If not, a line of text is retrieved from the script (block ). The line of text may not be a physical line displayed on a computer screen, but may be a delimited line of text (e.g., delimited by a comma or carriage return in the script). The command interpreter determines whether the line is empty or a comment (block ). If the line is empty or a comment, the command interpreter moves to the next line (block ) and returns to determine whether the end of the file has been reached (block ).","If the line obtained in block  is not empty or a comment, the command interpreter creates a command object based upon the text in the line (block ). For example, the line of text may include arguments and\/or procedures that are converted into commands interpretable through the internal interfaces  of . The command interpreter then detects whether a syntax error has occurred with regards to the command created in block  (block ). If a syntax error is detected, the error may be reported (block ). The reporting feature allows a user who generates a script to understand the syntax errors that arise so modified scripts may be implemented and sent to the command interpreter. Further, the script may be deleted (block ) so that the syntax error does not negatively impact the computer program. The process then continues by waiting to re-poll for additional script files (block ).","If, however, no syntax errors are found in block , the command is added to the shell script created in block  (block ). The process then moves to the next line of text (block ) and blocks - are repeated until the end of the script file is reached. Once the end of the script file is reached, the script has been populated with each line of text from the script file. Thus the script may be executed (block ). After execution of the script, the command interpreter waits to poll for additional script files (block ).","To generate commands, the command interpreter  relies on the internal interface  of  to provide basic functionally that the command interpreter  may use to implement the functionality provided in the scripts. The internal interface  may include functionality that is either synchronous or asynchronous. As illustrated in , the command interpreter  may provide commands  that are synchronous or asynchronous. Commands  that are synchronous commands are, for example, dependent on a computer program flow, and thus may be executed without concern for other events taking place in the computer program . Commands  that are asynchronous, on the other hand, occur independently of the computer program flow, and, thus, may depend on events to determine timing of their execution. Thus, to implement commands  that are asynchronous, a notifier module  may be implemented. The notifier module  may notify the commands  and\/or the command interpreter  when certain command events occur. For example, the notifier module  may notify the commands  and\/or the command interpreter  when a command  completes.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 3"],"b":["100","32","32","14","102","32","30","32","12","32","12","104","32","106","14"]},"Asynchronous commands depend on events to determine when additional commands should be executed. Thus, the completion time of commands is of direct importance.  is a sequence diagram  illustrating execution of an asynchronous command , in accordance with an embodiment. The command interpreter  registers itself  with the notifier  to be notified of COMMAND events. The command interpreter  invokes the execute method  of the asynchronous command . The asynchronous command  registers itself  to be notified of some event (e.g., a condition) specific to execution of the command. The asynchronous command  then starts asynchronous execution of the command (e.g., by invoking an asynchronous computer program-specific process through the internal interfaces ) and then returns  to the command interpreter . The command interpreter  waits  to receive a COMMAND event from the notifier . Eventually, the asynchronous process in the computer program  completes and a particular event (e.g., the condition) is raised  in the notifier . The notifier  notifies  the asynchronous command  that the event (e.g., condition) has been raised. The asynchronous command  then raises  the COMMAND event in the notifier . The notifier  then notifies  the command interpreter  that the COMMAND event has been raised, thus allowing the command interpreter  to know that the command has completed.","As previously discussed, MVM programs may utilize the command interpreter to incorporate enhanced data purging.  is a flow diagram  illustrating execution of a script of commands by the command interpreter  to purge data in an MVM program, in accordance with an embodiment. As discussed above, the command interpreter  executes commands  using internal interfaces  of the computer program  (e.g., an MVM program)","The command interpreter may support any extensive set of commands, however a specific set is useful for enhance purging functionality. For example, the set of commands may include a suspend command, an integrity validation command, one or more export commands, one or more clear commands, one or more import commands, and a resume command. To purge data in an MVM program, there are three broad tasks that may take place. First, useful data may be preserved. Next, the MVM program may be purged of all data. Last, the useful data may be restored.","To preserve the data, it may be useful to suspend the MVM program, such that no new jobs are accepted by the MVM program. Suspending the MVM program may help ensure that additions, deletions, and\/or modifications to the data in the MVM program do not occur during data preservation process. Thus, the command interpreter  may execute a suspend command . In some embodiments, while the suspend function may block additional jobs from reaching the MVM program, jobs that reach the MVM program prior to suspension may be completed. Further, in certain embodiments, jobs that attempt to reach the MVM program subsequent to suspension may be stored in a queue and processed once the MVM program is resumed. In some embodiments, the processing of jobs in the queue may be prioritized in a first-in-first-out (FIFO) fashion.","Once the MVM program  is suspended and all of the jobs that reached the MVM program  have completed, the command interpreter  may execute an integrity check command . The version control repository  and the database  may have data dependences with one another for data, and thus may have an integral relationship. The integrity check command  may validate that the data in version control repository  and the database  are properly synced with one another.","Once the integrity check is complete, the command interpreter  may export data that is useful for the MVM program . The internal interfaces  of the MVM program  may include multiple export functionalities such as an exportProfile function and\/or an exportData function. The exportProfile function may export profile information  from the MVM program  to a file share and\/or database connected to the MVM program . The exportData function may export model data  from the MVM program  to a file share and\/or database connected to the MVM program . The exportData function may include a parameter that allows a user to specify a baseline time frame. The baseline time frame signifies the earliest time for useful data. The versions of data dated before the baseline time frame will not be exported. The command interpreter  may execute an export data command  to export data in the MVM program , and may execute an export profile command  to export the MVM program  profile information.","Once the profile information  and useful data  is exported, the command interpreter  may execute a command  to clear the version control system repository . In some embodiments, the function to clear the version control system repository may completely remove the version control system repository  and generate a new one. In other embodiments, the function to clear the version control system repository may remove all data in the version control system repository , while leaving the structure of the version control system repository  in place.","The command interpreter  may also execute a command  to clear the database . In some embodiments, the function to clear the database may completely remove any data in the database relating to model information, while retaining the MVM program  configuration information. In other embodiments, the function to clear the database may delete and recreate all tables relating to model information, while leaving the data tables relating to configuration information untouched.","Once the version control system repository  and the database  are cleared, the command interpreter  may execute a command  to import the exported profile information . Further, the command interpreter  may execute a command  to import the exported model data . Once commands  and  are completed, the version control system repository  and the database  have been populated with only useful information as defined by the baseline time frame in the export data command.","Once all of the profiles and data are imported back into the MVM program , the command interpreter  may run another integrity check command  to ensure that the data in version control system repository  and the data in the database  are properly synced. Once verified, the command interpreter  may execute a resume command  to resume the MVM program  (e.g., allow jobs to be processed by the MVM program ). As previously discussed, jobs that attempted to reach the MVM program  while it was suspended, may be taken from a queue and executed in a FIFO manner.","Technical effects of the invention include enabling expansion of a computer program to increase functionality over the designed implementation of the computer program. A user or administrator of the computer program may create a simple text based script file which is converted into machine-readable commands by a command interpreter. Specifically, the machine-readable commands may be useful to implement enhanced data purging functionalities in model version management (MVM) programs that store multiple versions of model information in data stores such as a database and a version control system repository. The enhanced data purging functions, implemented by the command interpreter, allow data that is no longer useful (e.g., old or stale) to be easily purged without requiring significant modification to the MVM programs.","This written description uses examples to disclose the invention, including the best mode, and also to enable any person skilled in the art to practice the invention, including making and using any devices or systems and performing any incorporated methods. The patentable scope of the invention is defined by the claims, and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims, or if they include equivalent structural elements with insubstantial differences from the literal language of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects, and advantages of the present invention will become better understood when the following detailed description is read with reference to the accompanying drawings in which like characters represent like parts throughout the drawings, wherein:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4","FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 1"]}]},"DETDESC":[{},{}]}
