---
title: System for identification of smart cards
abstract: The present invention relates to a system which allows third-party smart cards to be recognized by computing devices configured to receive smart cards. According to one or more embodiments of the present invention, a smart card is presented to a computing device. One or more token IDs are extracted from the smart card. Thereafter, a token type is obtained. In one embodiment, a probe order file is consulted first when the smart card is presented to the computing device. The probe order file is configured to direct a computing device to consult the correct configuration files in the correct order. Using the probe order file, the device inspects each configuration file specified in order. The probing is halted after a configuration file successfully returns a usable identification and card type. If the probing goes through every configuration file and there is no match then the smart card cannot be utilized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07082614&OS=07082614&RS=07082614
owner: Sun Microsystems, Inc.
number: 07082614
owner_city: Santa Clara
owner_country: US
publication_date: 20010308
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to a system specifically designed to allow third-party smart cards to be recognized by computing devices configured to receive smart cards.","Portions of the disclosure of this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","2. Background Art","In modern computing it is desirable for a user to be interacting with a computing device, to stop interacting with the device, to move to a new location, and to begin interacting with a new device at precisely the point where the user stopped interacting with the first device. To perform such an activity a \u201csmart card\u201d may be used. A smart card is a card-like device that is physically inserted into the device and read by the device. The smart card provides information to the new device, for instance, that enables it to locate the data and computer programs necessary to re-create the user's interaction that was terminated on the old device.","To enable a computing device to understand the information a smart card is providing, a system must be used whereby the computing device is instructed how to interact with the smart card. Current systems that enable the use of smart cards, however, are inadequate because typically the system only applies to a single type of smart card that is to be used on a single type of device. There is no mechanism whereby a third-party smart card may be configured to operate with any given device. Before further discussing the drawbacks of current schemes, it is instructive to discuss how the nature of computing is changing.","The Nature of Computing","The nature of computing is changing. Until recently, modern computing was mostly \u201cmachine-centric\u201d, where a user accessed a dedicated computer at a single location. The dedicated computer had all the data and computer programs necessary for the user to operate the computer, and ideally, it had large amounts of hardware, such as disk drives, memory, processors, and the like. With the advent of computer networks, however, different computers have become more desirable and the focus of computing has become \u201cservice-oriented\u201d. In particular, computer networks allow a user to access data and computer programs that exist elsewhere in the network. When the user accesses such data or computer programs, the remote computer is said to be providing a service to the user. With the improvement in services available to users, the need to have a dedicated computer following the machine-centric paradigm is greatly reduced. The machine-centric paradigm also becomes much less practical in this environment because distributing services is much more cost-effective.","In particular, computers in a service-oriented environment have little need for powerful hardware. For instance, the remote computer processes the instructions before providing the service, so a powerful processor is not needed locally. Similarly, since the service is providing the data, there is little need to have large capacity disk drives locally (or on the local access hardware). In such an environment, one advantage is that computer systems have been implemented that allow a user access any computer in the system and still use the computer in the same manner (i.e., have access to the same data and computer programs).","For instance, a user may be in location A and running a word processor, a web browser, and an interactive multimedia simulation. In a service-oriented environment, the user might stop using the computer in location A and move to location B where the user could resume these computer programs on a different machine at the exact point where the user stopped using the machine at location A, as long as both computers had access via the computer network to the serves where the programs were being executed. An architecture that makes such an interaction possible is described below.","Multi-Tier Application Architecture","In the multi-tier application architecture, a client communicates requests to a server for data, software and services, for example, and the server responds to the requests. The server's response may entail communication with a database management system for the storage and retrieval of data.","The multi-tier architecture includes at least a database tier that includes a database server, an application tier that includes an application server and application logic (i.e., software application programs, functions, etc.), and a client tier. The application server responds to application requests received from the client. The application server forwards data requests to the database server.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","110","110"]},"Further application functionality is provided by application logic managed by application server  in application tier . The apportionment of application functionality between client tier  and application tier  is dependent upon whether a \u201cthin client\u201d or \u201cthick client\u201d topology is desired. In a thin client topology, the client tier (i.e., the end user's computer) is used primarily to display output and obtain input, while the computing takes place in other tiers. A thick client topology, on the other hand, uses a more conventional general purpose computer having processing, memory, and data storage abilities. Database tier  contains the data that is accessed by the application logic in application tier . Database server  manages the data, its structure and the operations that can be performed on the data and\/or its structure.","Application server  can include applications such as a corporation's scheduling, accounting, personnel and payroll applications, for example. Application server  manages requests for the applications that are stored therein. Application server  can also manage the storage and dissemination of production versions of application logic. Database server  manages the database(s) that manage data for applications. Database server  responds to requests to access the scheduling, accounting, personnel and payroll applications' data, for example.","Connection  is used to transmit data between client tier  and application tier , and may also be used to transfer the application logic to client tier . The client tier can communicate with the application tier via, for example, a Remote Method Invocator (RMI) application programming interface (API) available from Sun Microsystems\u2122. The RMI API provides the ability to invoke methods, or software modules, that reside on another computer system. Parameters are packaged and unpackaged for transmittal to and from the client tier. Connection  between application server  and database server  represents the transmission of requests for data and the responses to such requests from applications that reside in application server .","Elements of the client tier, application tier and database tier (e.g., client , application server  and database server ) may execute within a single computer. However, in a typical t system, elements of the client tier, application tier and database tier may execute within separate computers interconnected over a network such as a LAN (local area network) or WAN (wide area network).","Smart Cards","In a multi-tier computer architecture computing sessions may be moved between computers in the network. One way to move between computers and to resume the user's computing session is to use a smart card. Typically each type of computing system uses only one type of smart card. There is no way for a third-party to take a generic smart card and configure it to be able to interact with a specific computing system because there is currently no system with which a developer may create instructions to perform such an action.","The present invention relates to a system specifically designed to allow third-party smart cards to be recognized by computing devices configured to receive smart cards. According to one or more embodiments of the present invention, a smart card is presented to a computing device. Then, one or more token IDs are extracted from the smart card. The token ID is an identifier that is unique to each smart card. Thereafter, a token type is obtained. The token type identifies a particular type of smart card. The token type is utilized to identify each group of smart cards that require different communications or utilize different identifiers. In one embodiment, the token type is extracted from the smart card. In another embodiment, a configuration file supplies the token type.","In one embodiment, a probe order file is consulted first when the smart card is inserted. The probe order file is configured to direct a computing device to consult the correct configuration files in the correct order. Using the probe order file, the device inspects each configuration file specified in order. The probing is halted after a configuration file successfully returns a usable identification and card type. If the probing goes through every configuration file and there is no match then the smart card cannot be utilized.","In one embodiment, the insertion of the smart card causes the computing device to initiate a process on a remote computer (a server, for instance) connected to the computing device via a computer network. The remote computer performs the probing and the identification process and returns a message to the computing device whether the smart card has been identified or not.","The configuration files may be created by software developers in any language that allows the extraction of a token ID and a token type. Such languages include FORTH-like languages where operators may be set, such as bit and byte operations, math, reading, and writing.","The invention relates to a system for identification of smart cards. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It will be apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention.","According to one or more embodiments of the present invention, a smart card is presented to a computing device. Then, one or more token IDs are extracted from the smart card. The token ID is an identifier that is unique to each smart card. Thereafter, a token type is obtained. The token type identifies a particular type of smart card. The token type is utilized to identify each group of smart cards that require different communications or utilize different identifiers.","System for Identification of Smart Cards","One embodiment of the present invention is shown in . At step  a smart card is presented to a computing device. Then, at step , a token ID is obtained by extracting it from the smart card. Next, at step , a token type is obtained by extracting it from the smart card. Thereafter, the token ID and token type are used to identify the smart card at step .","In the embodiment shown in , the token type is extracted directly from the smart card. In another embodiment, shown in , the token type is obtained from a configuration file. In this embodiment, a smart card is presented to a computing device at step . Then, at step , a token ID is obtained by extracting it from the smart card. Next, at step , a token type is obtained by consulting a configuration file. The configuration file will be explained in more detail below, but generally it is a file that interprets potential valid token ID's and associates a correct token type with a token ID. Thereafter, the token ID and token type are used to identify the smart card at step .","Probe Order File","In one embodiment, a probe order file is consulted when the smart card is inserted. The probe order file is configured to direct a computing device to the correct configuration files in the correct order. Using the probe order file, the device inspects each configuration file specified in order. The probing is halted after a configuration file successfully returns a usable identification and card type. If the probing goes through every configuration file and there is no match then the smart card cannot be utilized.","In one embodiment, the insertion of the smart card causes the computing device to initiate a process on a remote computer (a server, for instance) connected to the computing device via a computer network. The remote computer performs the probing and the identification process and returns a message to the computing device whether the smart card has been identified or not. This embodiment of the present invention is shown in .","At step , a smart card is presented to a computing device. Next, at step , a token ID is extracted from the smart card. At step , a communication path between the device and a remote computer is established. Then, at step , the remote computer consults a probe order file. Using the probe order file, the remote computer consults a configuration file specified by the probe order file at step . At step , it is determined whether the current configuration file resulted in a successful identification of the smart card.","If the current configuration file did in fact result in a successful identification of the smart card, the process is complete. If the current configuration file did not correctly identify the smart card, it is determined at step  whether this configuration file is the last one specified by the probe order file. If it is, the smart card cannot be used and the process ends. Otherwise, the process repeats at step , where the next configuration file specified by the probe order file is consulted.","System Architecture",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4","b":["400","410","410","420","420","410"]},"To do so, a communication channel  is established between a server  and the firmware . In particular, an authentication manager  resides at the other end of the communication channel  and interfaces with a smart card ID module  to handle requests for identification of the card. The smart card ID module  utilizes the probe order and configuration files . The probe order and configuration files  may be stored on server  using any well known directory service, such as lightweight directory access protocol (LDAP).","If the probe order and configuration files result in a successful identification of the smart card, server software  is used to re-create the data and computer programs necessary for the user of the computing device  to begin working with the device.","File Token and Communication Formats","It should be understood that any applicable formats for the files, tokens, and communication mechanisms may be used. In one embodiment, however, the token ID is treated as a string that may be up to 32 characters in length. The string may consist of the character sets: [A\u2013Z] [a\u2013z] and [0\u20139]. Typically, the configuration file returns the token ID to the system as a string of hex digits, for example:","0001035d650001000","The token type is typically the name of the card or the card family that the configuration file is processing. The token type is treated as a string and follows the same rules for encoding the token ID. Typically, the configuration file returns the token type to the system as a string of hex digits, for example:","MicroPayflex","In one embodiment, the token type for a smart card is identified via a configuration file. The token type is utilized to identify each group of smart cards that require different communications or utilize different identifiers. One configuration file is typically required for each card type. Configuration files are normally in ASCII text and consist of two parts:","Administration\/installation header information; and","Language Tokens","The probe order file is utilized to determine which smart card configuration files are used and in what order. Typically the probe order file is an ASCII text file that consists of fully qualified path names to card configuration files. One configuration file is listed per line. The probe order is maintained by any well known directory service, such as LDAP. To extract data from a smart card, the smart card should be capable of communicating via an answer to reset (ATR) and\/or issuing one or more application protocol data units (ADPU) to the card.","Creating Configuration Files","Developers may create configuration files to operate with the present invention so that a smart card of their choice may be configured to operate with any computing system they choose. In this scenario, the developer creates a configuration file that performs the required operations on the smart card to extract a token ID or token type. In one embodiment, a FORTH-like language is used to set operators such as bit and byte operations, math, reading and writing. For some cards, the token type and token ID may be delivered in the ATR Other cards select a file to read.","An example of the steps a configuration file takes that operates on a Schlumberger MicroPayflex smart card is shown in . This type of card has a file 0x0002 under the top directory which contains an 8-byte vendor-supplied unique card ID. First, the command 0x00B20000 is executed to get the serial number at step . Then it is determined if this is an old or a new MicroPayflex card. Old MicroPayflex cards have a \u201cshort\u201d ATR which has a 3-byte history section. New MicroPayflex cards have a longer ATR which ends in 0x00A9. Thus, at step , the ATR history is obtained.","Next, it is determined if the ATR history is greater than or equal to nine byes in length at step . If it is, it is verified at step  that byte  of the ATR history is 0x00 and byte  of the ATR history is 0xa9. If these bytes do not have these values, it is concluded that the present card is not a MicroPayflex card that can be identified, so the next configuration file (if any) is selected at step  to try to identify the card. If, however, at step  bytes  and  are verified, file 0x0002 is selected at step  and at step  8 bytes of the record are read to retrieve the token ID. The result of reading the record must be at least 8 bytes in length. The first 8 bytes of the result are the ID.","If at step  the ATR history is not greater than or equal to nine bytes in length, the card might be an old MicroPayflex card, so it is determined if the ATR history is 3 bytes in length at step . If the ATR history is not 3 bytes in length, it is concluded that the present card is not a MicroPayflex card that can be identified, so the next configuration file (if any) is selected at step  to try to identify the card.","Otherwise, it is determined at step  if the 3-byte history is a valid value. The 3-byte ATR history may take on one of several values. All of the following values are legal for the old MicroPayflex cards:","3513ff","351180","354080","If the ATR history is not one of these values, it is concluded that the present card is not a MicroPayflex card that can be identified, so the next configuration file (if any) is selected at step  to try to identify the card. Otherwise, file 0x0002 is selected at step  and at step  8 bytes of the record are read to retrieve the token ID. The result of reading the record must be at least 8 bytes in length. The first 8 bytes of the result are the ID.","Virtual Desktop System Architecture",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 6","b":["600","610"]},"The functionality of the virtual desktop system is partitioned between a display and input device such as a remote system and associated display device, and data sources or services such as a host system interconnected to the remote system via a communication link The display and input device is a human interface device (HID). The system is partitioned such that state and computation functions have been removed from the HID and reside on data sources or services. One or more services communicate with one or more HIDs through a communication link such as network An example of such a system is illustrated in , wherein the system comprises computational service providers  communicating data through communication link  to HIDs .","The computational power and state maintenance are provided by the service providers or services. The services are not tied to a specific computer, but may be distributed over one or more traditional desktop systems such as described in connection with , or with traditional servers. One computer may have one or more services, or a service may be implemented by one or more computers. The service provides computation, state and data to HIDs and the service is under the control of a common authority or manager. In , the services are provided by computers , , and . In addition to the services, a central data source can provide data to the HIDs from an external source such as for example the Internet or world wide web. The data source can also be broadcast entities such as those that broadcast data (e.g., television and radio signals).","Examples of services include X11\/Unix services, archived or live audio or video services, Windows NT service, Java\u2122 program execution service and others. A service herein is a process that provides output data and response to user requests and input. The service handles communication with an HID currently used by a user to access the service. This includes taking the output from the computational service and converting it to a standard protocol for the HID. The data protocol conversion is handled by a middleware layer, such as the X11 server, the Microsoft Windows interface, video format transcoder, the OpenGL\u00ae interface, or a variant of the java.awt.graphics class within the service producer machine. The service machine handles the translation to and from a virtual desktop architecture wire protocol described further below.","Each service is provided by a computing device optimized for its performance. For example, an Enterprise class machine could be used to provide X11\/Unix service, a Sun MediaCenter\u2122 could be used to provide video service, a Hydra based NT machine could provide applet program execution services.","The service providing computer system can connect directly to the HIDs through the interconnect fabric. It is also possible for the service producer to be a proxy for another device providing the computational service, such as a database computer in a three-tier architecture, where the proxy computer might only generate queries and execute user interface code.","The interconnect fabric can comprise any of multiple suitable communication paths for carrying data between the services and the HIDs. In one embodiment the interconnect fabric is a local area network implemented as an Ethernet network Any other local network may also be utilized. The invention also contemplates the use of wide area networks, the Internet, the world wide web, and others. The interconnect fabric may be implemented with a physical medium such as a wire or fiber optic cable, or it may be implemented in a wireless environment.","The interconnect fabric provides actively managed, low-latency, high-bandwidth communication between the HID and the services being accessed. One embodiment contemplates a single-level, switched network, with cooperative (as opposed to completing) network traffic. Dedicated or shared communications interconnects maybe used in the present invention.","The HID is the means by which users access the computational services provided by the services.  illustrates HIDs ,  and . Each HID comprises a display , a keyboard , mouse , and audio speakers . The HID includes the electronics need to interface these devices to the interconnection fabric and to transmit to and receive data from the services.","A block diagram of an example embodiment of the HID is illustrated in . The components of the HID are coupled internally to a PCI bus . Network control block  communicates to the interconnect fabric, such as an Ethernet, through line . An audio codec  receives audio data on interface  and is coupled to network control block . USB data communication is provided on lines  to a USB controller . The HID further comprises a embedded processor  such as a Sparc2ep with coupled flash memory  and DRAM . The USB controller , the network control block  and the embedded processor  are all coupled to the PCI bus . A video controller , also coupled to the PCI bus , can include an ATI RagePro+ frame buffer controller which provides SVGA output on the line . NTSC data is provided in and out of the video controller through video decoder  and encoder  respectively. A smartcard interface  may also be coupled to the video controller .","Alternatively, the HID can comprise a single chip implementation as illustrated in . The single chip includes the necessary processing capability implemented via CPU  and graphics renderer . Chip memory  is provided, along with video controller\/interface . At internal bus (USB) controller  is provided to permit communication to a mouse, keyboard and other local devices attached to the HID. A sound controller  and interconnect interface  are also provided. The video interface shares memory  with the CPU  and graphics renderer . The software used in this embodiment may reside locally in on-volatile memory or it can be loaded through the interconnection interface when the device is powered.","The operation of the virtual desktop system architecture is described in co-pending U.S. patent application Ser. No. 09\/063,335, filed Apr. 20, 1998, entitled \u201cMethod and Apparatus for Providing A Virtual Desktop System Architecture\u201d and assigned to the present assignee, and incorporated herein by reference.","Embodiment of Computer Execution Environment (Hardware)","An embodiment of the invention can be implemented as computer software in the form of computer readable program code executed in a general purpose computing environment such as environment  illustrated in , or in the form of bytecode class files executable within a Java\u2122 run time environment running in such an environment, or in the form of bytecodes running on a processor (or devices enabled to process bytecodes) existing in a distributed environment (e.g., one or more processors on a network). A keyboard  and mouse  are coupled to a system bus . The keyboard and mouse are for introducing user input to the computer system and communicating that user input to central processing unit (CPU) . Other suitable input devices maybe used in addition to, or in place of, the mouse  and keyboard . I\/O (input\/output) unit  coupled to bi-directional system bus  represents such I\/O elements as a printer, A\/V (audio\/video) I\/O, etc.","Computer  may include a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling via a network link  to a local network . For example, if communication interface  is an integrated services digital network (ISDN card or a modem, communication interface  provides a data communication connection to the corresponding type of telephone line, which comprises part of network link . If communication interface  is a local area network (LAN) card, communication interface  provides a data communication connection via network link  to a compatible LAN. Wireless links are also possible. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to host  or to data equipment operated by ISP . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  may use electrical, electromagnetic or optical signals which carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer , are exemplary forms of carrier waves transporting the information.","Processor  may reside wholly on client computer  or wholly on server  or processor  may have its computational power distributed between computer  and server . Server  symbolically is represented in  as one unit, but server  can also be distributed between multiple \u201ctiers\u201d. In one embodiment, server  comprises a middle and back tier where application logic executes in the middle tier and persistent data is obtained in the back tier. In the case where processor  resides wholly on server , the results of the computations performed by processor  are transmitted to computer  via Internet , Internet Service Provider (ISP) , local network  and communication interface . In this way, computer  is able to display the results of the computation to a user in the form of output.","Computer  includes a video memory , main memory  and mass storage , all coupled to bi-directional system bus  along with keyboard , mouse  and processor . As with processor , in various computing environments, main memory  and mass storage , can reside wholly on server  or computer , or they may be distributed between the two. Examples of systems where processor , main memory , and mass storage  are distributed between computer  and server  include the thin-client computing architecture developed by Sun Microsystems, Inc., the palm pilot computing device and other personal digital assistants, Internet ready cellular phones and other Internet computing devices, and in platform independent computing environments, such as those that utilize the Java technologies also developed by Sun Microsystems, Inc.","The mass storage  may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology. Bus  may contain, for example, thirty-two address lines for addressing video memory  or main memory . The system bus  may also include, for example, a 32-bit data bus for transferring data between and among the components, such as processor , main memory , video memory  and mass storage . Alternatively, multiplex data\/address lines maybe used instead of separate data and address lines.","In one embodiment of the invention, the processor  is a microprocessor manufactured by Motorola, such as the 680X0 processor or a microprocessor manufactured by Intel, such as the 80X86, or Pentium processor, or a SPARC microprocessor from Sun Microsystems, Inc. However, any other suitable microprocessor or microcomputer may be utilized. Main memory  may be comprised of dynamic random access memory (DRAM). Video memory  maybe a dual-ported video random access memory. One port of the video memory  maybe coupled to video amplifier . The video amplifier  maybe used to drive a display\/output device , such as a cathode ray tube (CRT) raster monitor. Video amplifier  is well known in the art and may be implemented by any suitable apparatus. This circuitry converts pixel data stored in video memory  to a raster signal suitable for use by display\/output device . Display \/output device  maybe any type of monitor suitable for displaying graphic images.","Computer  can send messages and receive data, including program code, through the network(s), network link , and communication interface . In the Internet example, remote server computer  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . The received code may be executed by processor  as it is received, and\/or stored in mass storage , or other non-volatile storage for later execution. In this manner, computer  may obtain application code in the form of a carrier wave. Alternatively, remote server computer  may execute applications using processor , and utilize mass storage , and\/or video memory . The results of the execution at server  are then transmitted through Internet , ISP , local network  and communication interface . In this example, computer  performs only input and output functions.","Application code may be embodied in any form of computer program product. A computer program product comprises a medium configured to store or transport computer readable code, or in which computer readable code may be embedded. Some examples of computer program products are CD-ROM disks, ROM cards, floppy disks, magnetic tapes, computer hard drives, servers on a network, and carrier waves.","The computer systems described above are for example only. An embodiment of the invention may be implemented in any type of computer system or programming or processing environment.","Thus, a system for identification of smart cards is described in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects and advantages of the present invention will become better understood with regard to the following description, appended claims and accompanying drawings where:",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
