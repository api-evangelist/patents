---
title: Systems and methods for client-side media chunking
abstract: A computer implemented method of downloading one or more chunks of a selected media file from a server to a computing device is provided. A client application resides on the computing device and is configured to obtain a metadata file describing how the selected media file may be chunked, to determine, based on the metadata file, the portion of the selected media file to download, and to download the portion. The client application prepares a local media file corresponding to one or more chunks of the downloaded portion of the selected media file, and facilitates playback of the local media file on the computing device. The time interval of the chunk may be selected based on a suitable chunk time interval for the computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09313084&OS=09313084&RS=09313084
owner: VUCLIP (SINGAPORE) PTE. LTD.
number: 09313084
owner_city: Singapore
owner_country: SG
publication_date: 20110901
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a National Phase application claiming the benefit of No. PCT\/CA2011\/050534 filed on Sep. 1, 2011, in English, which further claims priority to U.S. Provisional Application No. 61\/379,199, titled \u201cSYSTEMS AND METHODS FOR CLIENT-SIDE MEDIA CHUNKING\u201d and filed on Sep. 1, 2010, the entire contents of which are incorporated herein by reference.","The present disclosure relates to systems and methods for streaming media content, and more particularly, this disclosure relates to systems and methods for chunking streamed media content.","Progressive downloading is commonly used for streaming media from a server to a client application. Using progressive download, a client video player can start playing a video clip even before the clip has been fully downloaded. Some progressive download methods require the input file to be segmented into a number of chunks, where each chunk represents an independent media file to be downloaded from the server. A media player capable of playing such chunked files can download and play the chunked media files one after another in a streaming session. Apple's HTTP Live Streaming System is an example of such an approach. In another example, progressive downloading and chunking is employed on certain mobile devices (such as many Nokia Series 40 phones), where it is not possible to play a large video file over HTTP due to the small memory footprint of the device. For such devices, chunking large video clips into multiple chunks and playing them separately is a viable progressive download and playback option.","Unfortunately, the chunk size, which is determined at the server, may not be common for all device types. For example, Apple HTTP Live Streaming recommends a chunk size of 10 seconds. Such small chunk size however does not play well on feature phones using a similar technique.","Furthermore, when downloading files over HTTP, it is not possible to download more than one file at a time using the same HTTP connection on most feature phones. Tearing down and setting up new HTTP connections for each of the chunks is less efficient than the alternate approach of using the same HTTP connection to download arbitrary number of chunks.","A computer implemented method of downloading one or more chunks of a selected media file from a server to a computing device is provided. A client application resides on the computing device and is configured to obtain a metadata file describing how the selected media file may be chunked, to determine, based on the metadata file, the portion of the selected media file to download, and to download the portion. The client application prepares a local media file corresponding to one or more chunks of the downloaded portion of the selected media file, and facilitates playback of the local media file on the computing device. The time interval of the chunk may be selected based on a suitable chunk time interval for the computing device.","Accordingly, in one aspect, there is provided computer implemented method of downloading and preparing one or more chunks of a selected media file for playback on a computing device, comprising the steps of: determining a suitable time interval of a chunk for media playback on the computing device; receiving input selecting a media segment; identifying a location of a selected media file containing the media segment and a location of a metadata file associated with the selected media file, the metadata file including metadata describing a format of the selected media file; downloading the metadata file; determining, based on the metadata file and the media segment, a portion of the selected media file to download, wherein the portion of the selected media file has a time offset, and wherein a time duration of the portion of the selected media file is greater than or equal to that of one or more chunks; downloading the portion of the selected media file; preparing one or more local media files from the portion of the selected media file, wherein each local media file includes one chunk; and determining, based on the metadata file, a suitable header for each local media file, and prepending the each header to each local media file.","In another aspect, there is provided a computer-readable storage medium comprising instructions for downloading one or more chunks of a selected media file to a computing device, wherein execution of the instructions by one or more processors of the computing device causes the one or more processors to carry out the steps of: determining a suitable time interval of a chunk for media playback on the computing device; receiving input selecting a media segment;","identifying a location of a selected media file containing the media segment and a location of a metadata file associated with the selected media file, the metadata file including metadata describing a format of the selected media file; downloading the metadata file; determining, based on the metadata file and the media segment, a portion of the selected media file to download, wherein the portion of the selected media file has a time offset, and wherein a time duration of the portion of the selected media file is greater than or equal to that of one or more chunks; downloading the portion of the selected media file; preparing one or more local media files from the portion of the selected media file, wherein each local media file includes one chunk; and determining, based on the metadata file, a suitable header for each local media file, and prepending the each header to each local media file.","In another aspect, there is provided a computer implemented method of uploading, from a server, one or more chunks of a selected media file to a computing device, comprising the steps of: receiving, from the computing device, a request to upload a metadata file associated with a media file, the metadata file including metadata describing a format of the selected media file; uploading the metadata file to the computing device; receiving a request to upload a portion of the media file to the computing device, the portion of the media file corresponding to one or more chunks suitable for playback on the computing device, the chunk size being specified by the computing device; and uploading the portion of the media file to the computing device.","A further understanding of the functional and advantageous aspects of the disclosure can be realized by reference to the following detailed description and drawings.","Various embodiments and aspects of the disclosure will be described with reference to details discussed below. The following description and drawings are illustrative of the disclosure and are not to be construed as limiting the disclosure. Numerous specific details are described to provide a thorough understanding of various embodiments of the present disclosure. However, in certain instances, well-known or conventional details are not described in order to provide a concise discussion of embodiments of the present disclosure.","As used herein, the terms, \u201ccomprises\u201d and \u201ccomprising\u201d are to be construed as being inclusive and open ended, and not exclusive. Specifically, when used in the specification and claims, the terms, \u201ccomprises\u201d and \u201ccomprising\u201d and variations thereof mean the specified features, steps or components are included. These terms are not to be interpreted to exclude the presence of other features, steps or components.","As used herein, the term \u201cexemplary\u201d means \u201cserving as an example, instance, or illustration,\u201d and should not be construed as preferred or advantageous over other configurations disclosed herein.","As used herein, the terms \u201cabout\u201d and \u201capproximately\u201d, when used in conjunction with ranges of dimensions of particles, compositions of mixtures or other physical properties or characteristics, are meant to cover slight variations that may exist in the upper and lower limits of the ranges of dimensions so as to not exclude embodiments where on average most of the dimensions are satisfied but where statistically dimensions may exist outside this region. It is not the intention to exclude embodiments such as these from the present disclosure.","Referring to , a system is shown for client-side chunking of a progressively downloaded media file for media playback on a computing device with greater resiliency. The system includes a computing device  which runs client application  and communicates with server  through network  for the progressive downloading of a media file.","The media file, which may been coded according to a codec for efficient transport, may reside on remote server , or may be provided to by media server . A chunking metadata generator application , which may reside on media server , remote server , or another remote computing device, generates metadata specifying how a given media file may be chunked according to different chunk sizes based on the encoding scheme of the media file. Remote server  may be any server capable of providing the media file via progressive download, including, but not limited to, a web server and a file transfer protocol (FTP) server.","As described further below, unlike known server-side chunking methods, the chunking of the media file during progressive download to computing device  is determined by client application . Client application  downloads the metadata file and then progressively downloads selected chunks of the media file based on the chunking information provided in the metadata file.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["200","200"]},"Computing device  includes at least one processing unit  and memory . Processing unit  executed computer-executable instructions and may comprise one or more processors. In a multi-processing system, multiple processors execute computer-executable instructions for increased processing power. Memory  may be volatile memory (e.g., registers, cache, RAM), non-volatile memory (e.g., ROM, EEPROM, flash memory, etc.), or a combination thereof. Software is stored in memory  for implementing the methods described in the proceeding embodiments.","Computing device  may include additional features. Computing device  may include one or more media output devices , one or more input devices , and one or more communication interfaces or connections . Computing device  may further include a storage unit or apparatus , which may be removable or non-removable. For example, storage unit or apparatus  may include magnetic disks, magnetic tapes or cassettes, CD-ROMs, DVDs, or any other medium which can be used to store information and which can be accessed within the computing device .","An interconnection mechanism interconnects the components of the computing environment. An example interconnection mechanism is shown as bus . Typically, operating system software such as J2ME (not shown) provides an operating environment for other software (e.g. APIs) executing in the computing device , and coordinates activities of the components of the computing device .","Media output device  may be a display, speaker or another media device that provides media output from the computing device . Input device  may be a touch input device such as a keyboard, mouse, pen, or trackball, a voice input device, a scanning device, or another device that provides input to the computing device .","Communication interface  enables communication over a communication medium to another computing entity, such as remote server  in . The communication medium conveys information such as computer-executable instructions, audio or video input or output, or other data in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired or wireless techniques implemented with an electrical, optical, RF, infrared, acoustic, or other carrier.","The systems and methods can be described in the general context of computer-readable media. Computer-readable media are any available media that can be accessed within a computing environment. By way of example, and not limitation, with the computing device , computer-readable media include memory , storage unit or apparatus , communication media, and combinations of any of the above.","The systems and methods can be described in the general context of computer-executable instructions, such as those included in program modules, being executed in a computing environment on a target real or virtual processor. Generally, program modules include routines, programs, application programming interfaces, libraries, objects, classes, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer-executable instructions for program modules may be executed within a local or distributed computing environment.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3"},"Chunking the media file into appropriate multiple segments is typically based on knowledge of the codec and CPU power of the computing or media playback device. To support client-side chunking, a metadata file that provides sufficient metadata to enable the downloading of a portion of the media file, such that the portion of the media file corresponds to at least one chunk of the selected chunk size. The metadata file may be stored at the remote server with the media file, but may also be pre-downloaded or otherwise provided or made available to the computing device.","In one embodiment, the media file residing on the server is provided in an interleaved format to support the chunking of the media file for progressive download. Generally speaking, the process of interleaving involves storing alternatively storing the audio and video in the media file. For example, an interleaved audio\/video media file may include N milliseconds of video samples, followed by N milliseconds of audio samples, followed by N milliseconds of video samples, etc. Interleaving is advantageous in that it reduces disk accesses, playback buffer requirements and enables progressive download and playback. It will be known to those skilled in the art that there are presently many tools available that are suitable for producing an interleaved media file, such as MP4Box (http:\/\/gpac.wp.institut-telecom.fr\/mp4box\/). For example, running the following command will interleave a test.mp4 file so that its video and audio data are stored close to each other: \u201cMP4Box -inter 500 test.mp4\u201d.","Referring again to , in step , the client application, having been instructed to download a media file, or a segment of a media file (illustrated in the Figure as a video file), by a user operating the computing device (for example, through a user interface residing on the computing device), determines a suitable chunk size based on the device capability and\/or known performance characteristics, or pre-configured settings, and a optionally a selected time offset within the media file.","The selection of the media file, or segment of the media file, may be made by downloading a list of available media files and presenting the list of media files to the user on a user interface. The time offset within the media file is determined by the starting time point of the media file or media segment as selected by the user. The location of the media file is provided to the computing system.","The suitable chunk size for a given level of media playback performance is dependent on the device characteristics. For example, experiments have shown that a chunk size of 60 seconds provides a better quality of user experience on J2ME-based feature phones, and for which case a 60 second chunk duration is selected (this example implementation is shown in ). In other examples, while an iPhone device has been found to provide better playback with a chunk size of about 10 seconds, it has been found that Nokia feature phones provide improved playback with a chunk size of about 60 seconds. Accordingly, the chunk size may be selected based on the anticipated and\/or measured device capability and performance.","In step , the client application determines whether or not metadata is available regarding how to chunk the media file. If the metadata is not already available, the metadata is downloaded from the remote server in step , based on input providing the location of the metadata file.","The downloaded metadata is then utilized to determine the portion of the media file to be downloaded in step , where the portion to be downloaded may correspond to the desired chunk, or multiple chunks, as further described below. The client application determines the portion of the media file to be downloaded based on the information provided in the metadata file, which provides the information for chunking up the media file into appropriate sizes without requiring any knowledge of the underlying codec used to encode the media file. The portion to be downloaded is then downloaded in step .","The downloaded portion of the media file is subsequently prepared for playback on the computing device. This step is performed, as shown in step , by creating an appropriate header for the media segment based on the information provided in the metadata file. Finally, in step , a local media file is created by incorporating a file header including all the mandatory information that is required for constructing the local media file (e.g. the metadata required for producing a 3gp or MP4 file). If the portion of the media file included multiple chunks, one local media file is generated for each chunk. This process may then be repeated to download multiple portions or chunks of a large media file, and, optionally, to enable to playback of the entire selected media file or the segment of the selected media file.","The content of the metadata file depends on the format of the video file container. For example, in some example cases, the video may be encoded according to mp4 or 3gp formats. In the case of the mp4 file type, the information contained in the metadata file may include the total duration of the clip, the position of all key frames, the time scale, and the decoding time stamps.","In one embodiment, the metadata file includes information contained within the original media file, and this information may be employed by the client to regenerate a complete media file from a fragment of raw data. The metadata file will depend on the type of the video container.","It is to be understood that the portion of the media segment that is downloaded by the computing device need not be equal to the chunk size, and that the computing device may subsequently chunk the downloaded portion of the media file into multiple local files for playback (as individual chunks) after having downloaded the portion of the media file. For example, if a suitable chunk size for the computing device is 60 seconds, the computing device can download a portion of the media file that exceeds this chunk size. In one example, the computing device may download a 120 second portion of raw audio\/video data from the media file before performing a chunking step (involving the computing of headers and the creation of local media files). In the present example, the computing device could create two 60-second chunks from a 120 second portion of the media file. Furthermore, in an extension of this example, the computing device could begin progressively downloading the 120 second file, and create the first chunk after 60 seconds and initiate playback, and then create the second chunk after having downloaded the remaining 60 seconds.","For example, referring to , the portion of the media file downloaded in step  may encompass a time interval spanning multiple chunks. Accordingly, the steps of creating a local media file (steps  and ) may be performed multiple times, as indicated by optional step , in order to chunk the downloaded portion of the media file into multiple local media files of a selected chunk size.","This embodiment enables the client application to download an arbitrary amount of data over a connection (such as a single HTTP connection) before chunking the portion of the media file. This modality of downloading subsequently chunking on the client side of the network is achievable since it is only the raw audio\/video data of the media file that is downloaded (apart from the metadata file), thus enabling the client application to arbitrarily chunk the downloaded media portion at the client side.","In one embodiment, this modality enables the computing device to download as much raw data as desired (or as possible) over a single HTTP connection and then create the header with all or some of the raw data. In the next HTTP connection, one may then again download as much as possible. An additional benefit of this method is that a minimal number of HTTP sessions are required to stream an entire media clip. This optimizes the connection setup time for low power devices.","It is to be understood that the downloaded raw media data need not be equivalent to the time interval of one or more chunks (i.e. the temporal boundaries of the downloaded media portion need not coincide with the temporal boundaries of one or more adjacent chunks). The downloaded portion need only overlap at least one chunk time span, such that a local media file spanning at least one chunk may be created (based on the information in the metadata file). This may be contrasted with the modality of Apple HTTP live streaming, where all chunks are already created at the server side as separate files, and where each file needs to be downloaded in separate HTTP sessions.","It is also to be noted that the steps of downloading raw data and creating the header portion of the local media files do not need to occur in a given sequential order, as the computing device may prepare the header portions at any time after the metadata file is available.","In one example implementation, the media file is provided using MP4 as the video container format.  show some of the relevant attributes of an example MP4 video file that may be included in the metadata file. In an MP4 file, audio and video headers are captured in different tracks. Each of these tracks point to the raw media data using a number of hierarchical tables (atoms). Both video and audio data are stored as a series of samples with one table (stsz) indicating the size of each sample and another table (stco) offset of the raw data in the file. Also the time scales of both video and audio data are also available within their track atom.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIGS. 4() and 4()"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 4()","FIG. 4()","FIGS. 4() and 4()"]},"In one example embodiment, the structure of the metadata file is a standard XML file with media related attributes. An example of this embodiment is shown below, where a suitable metadata file based on the MP4 file format shown in  is generated as follows:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<metadata>"]},{"entry":[{},"\u2003<video>"]},{"entry":[{},"\u2003\u2003<timescale>7<\/timescale>"]},{"entry":[{},"\u2003\u2003<duration>421<\/duration>"]},{"entry":[{},"\u2003\u2003<samplecount>421<\/samplecount>"]},{"entry":[{},"\u2003\u2003<sampledur>1<\/samledur>"]},{"entry":[{},"\u2003\u2003<samplesizes>3878, 14, 73, ... <\/samplesizes>"]},{"entry":[{},"\u2003\u2003<sampleoffsets>48, 4216, 4498, ... <\/sampleoffsets>"]},{"entry":[{},"\u2003<\/video>"]},{"entry":[{},"\u2003\u2002<audio>"]},{"entry":[{},"\u2003\u2003<timescale>8000<\/timescale>"]},{"entry":[{},"\u2003\u2003<duration>481280<\/duration>"]},{"entry":[{},"\u2003\u2003<samplecount>470<\/samplecount>"]},{"entry":[{},"\u2003\u2003<sampledur>1024<\/samledur>"]},{"entry":[{},"\u2003\u2003<samplesizes>48, 242, 268, ... <\/samplesizes>"]},{"entry":[{},"\u2003\u2003<sampleoffsets>3926, 3974, 4230, ... <\/sampleoffsets>"]},{"entry":[{},"\u2003<\/audio>"]},{"entry":[{},"<\/metadata>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This metadata file, which describes key aspects of the media MP4 file, may be employed by the client application to determine the portions of the file to be downloaded (step ), and to form the header portion of the local media file for the downloaded media segments to enable playback (step ). It is to be understood that the header portion of the local media file, which is generated based on the metadata file and the known file type of the media file, includes all required information, components or atoms that are needed to complete the local media file such that it is playable. In one example implementation, the client application may provide one or more static atoms according to the known type of the media file. In another example implementation, one or more static atoms may be provided in the metadata file.","The metadata may be captured in various formats including XML, JSON, or any binary notation. The above XML fragment is provided only as an example. Furthermore, although the preceding example implementation employed MP4 as the example media container, it is to be understood that the method may also be applied to other media container formats, such as, but not limited to, AVI, Flash Video (FLV, F4V), Quick Time file format, Ogg, MPEG program stream, MPEG-2 transport stream, etc.","With the above metadata available to the client, the client can selectively download raw media data between any start and end time period and recreate a new header. The steps of determining which portion of raw data to download are described in the flow chart shown in .","In step , after having determined the portions of the video file to be downloaded in step , the metadata file is employed to convert the start and end time of the video sample numbers, where a sample number is obtained by dividing the product of the time and timescale by the sample duration. Having determined the start and end sample numbers, the preceding step is repeated for the audio sample numbers in step . In step , the file offsets for the audio and video start and end times are determined based on the sample size and sample offset tables. In step , the required block of data to be downloaded (including both audio and video portions) is determined based on the sample numbers and offsets identified in the preceding steps. Having determined the block of data to download and downloaded the data block, a header is prepared in step  (as in step ) and prepended on the data block to provide a suitable form of a media segment for playback on the computing device. The header thus created only includes sample size and sample offset information of the relevant samples; in other words, the sample size and sample offset information included in the header refers to the raw data that make up the one or more chunks and not necessarily other portions of the raw data that is not downloaded. Since only a portion of the raw data is downloaded, each of the sample offsets needs to be adjusted so that the first sample offset refers to the first block of raw data in the chunk.","For example, if a chunk needs to be created between a time interval spanning 10 seconds to 20 seconds relative to a start of a given MP4 (or 3gp) file for the example file header shown above, the following steps are followed:","1. Video sample number at time 10=(10*7)\/1=70","2. Video sample number at time 20=(20*7)\/1=140","3. File offset for video sample #70=76039 (the 70th entry in the sample offset; not shown in the figure for brevity)","4. File offset for video sample #140=136183","5. Add size of the 140th video sample to the above to get the final offset=136183+301=136484. The sample size is taken from the 140th entry in the video sample sizes (not shown in figure for brevity).","6. Audio sample number at time 10=(10*8000)\/1024=78.","7. Audio sample number at time 20=(20*8000)\/1024=156.","8. File offset for audio sample #78=75867 (the 78th entry in the sample offset)","9. File offset for audio sample #156=135937","10. Add size of the 156th audio sample to the above to get the final offset=135937+246=136183. The sample size is taken from the 156th entry in the audio sample sizes.","11. The start file offset to download from=min(video start offset, audio start offset)=min(76039, 75867)=75867","12. The end file offset to download from=max(video end offset, audio end offset)=max(136484, 136183)=136484","13. Client will download raw data from the MP4 file starting from offset 75867 and ending at 136484.","14. To generate the MP4 header, the client will only use the entries between 70 and 140 for video sample sizes; entries between 78 and 156 for audio sample sizes.","15. The client will only use the entries between 70 and 140 for video offsets after deducting the start data file offset of 75867.","16. The client will only use the entries between 78 and 156 for audio offsets after deducting the start data file offset of 75867.","Having determined the relevant parameters of the downloaded portion of the media file, a header for the local media file may be created. As noted above, the header portion of the local media file includes all necessary atoms to support playback of the local media file. In one example embodiment, the header may be obtained by modifying the header portion of the original media file to specify the downloaded portion of the media file, using the information determined in the preceding steps. As described above, the downloaded portion of the media file may be chunked into one or more local media files for playback as chunks.","Chunking the downloaded media file in real time at the client side provides many advantages. Most importantly, it allows the client application to determine and select a suitable and\/or optimal chunk size to employ. Furthermore, a traditional web server can be used to statically deliver the media files and the associated metadata file. Since no dynamic application logic is required at the server side, this results in a highly scalable server solution which can benefit from content delivery network solutions such as Akamai.","The specific embodiments described above have been shown by way of example, and it should be understood that these embodiments may be susceptible to various modifications and alternative forms. It should be further understood that the claims are not intended to be limited to the particular forms disclosed, but rather to cover all modifications, equivalents, and alternatives falling within the spirit and scope of this disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments will now be described, by way of example only, with reference to the drawings, in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
