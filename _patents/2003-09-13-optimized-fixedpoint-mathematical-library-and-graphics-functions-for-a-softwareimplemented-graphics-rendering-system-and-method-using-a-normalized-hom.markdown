---
title: Optimized fixed-point mathematical library and graphics functions for a software-implemented graphics rendering system and method using a normalized homogenous coordinate system
abstract: A software-implemented graphics rendering system and method designed and optimized for embedded devices (such as mobile computing devices) using fixed-point operations including a variable-length fixed point representation for numbers and a normalized homogenous coordinates system for vector operations. The graphics rendering system and method includes a fixed-point mathematics library and graphics functions that includes optimized basic functions such as addition, subtraction, multiplication, division, all vertex operations, matrix operations, transform functions and lighting functions, and graphics functions. The mathematical library and graphics functions are modified and optimized by using a variable-length fixed-point representation and a normalized homogenous coordinate system (NHCS) for vector operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07139005&OS=07139005&RS=07139005
owner: Microsoft Corporation
number: 07139005
owner_city: Redmond
owner_country: US
publication_date: 20030913
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Addition","Subtraction","Multiplication","Division","Lighting","Normal","Texture Coordinate","Output Vertex Coordinate","Model Space to World Space","World Space to View Space","View Space to Clip Space","Model Space to View Space","Model Space to Clip Space","Feature Division","Features Supported in the Rasterizer","Features Supported in Resource Management","Features Supported in T&L","View Frustum Culling","Invert Length of a Normal","NHCS Vector Normalization","Negative Normalization of NHCS Vector","Subtraction of Two NHCS Vectors","Dot Production of Two Normalized Vectors","Power","Half Vector","Reflection Vector from Normal and View","Calculate Efficient Digits in UFIX8","Calculate Efficient Digits in SFIX32","Calculate Efficient Digits in SFIX64","Conversion from SFIX64Quad to SFIX32Quad NHCS","Conversion from SFIX64Triple to SFIX16Triple NHCS","Conversion from SFIX64Triple to SFIX16Triple NHCS"],"p":["The present invention relates in general to graphics rendering and more particularly to a software-implemented graphics rendering system and method designed and optimized for embedded devices (such as mobile computing devices) using fixed-point operations including a variable-length fixed point representation for numbers and a normalized homogenous coordinates system for vector operations.","The importance of three-dimensional (3D) enabled embedded platforms has become increasingly important due to users' expectations of multimedia-rich environments in products ranging from DVD players, set-top boxes, Web pads and mobile computing device (including handheld computing devices) to navigational equipment and medical instrumentation. The importance of 3D rendering is manifested in its ability to provide users with greater and more detailed visual information. As users continue to expect equal or nearly equal graphics quality on embedded devices as on their desktop systems, applications designed to run on embedded platforms continue to converge with their desktop equivalents. Thus, the need for 3D graphics rendering is vital in today's embedded systems.","One of the more popular 3D rendering standards available today is Direct3D by Microsoft\u00ae Corporation. Direct 3D is an application programming interface (API) for manipulating and displaying 3D objects. Direct3D provide programmers and developers with a way to develop 3D applications that can utilize whatever graphics acceleration hardware is installed on the system. Direct3D does an excellent job in supporting efficient rendering in desktop applications. These desktop systems typically have powerful central processing units (CPUs), math coprocessors, and graphics processing units (GPUs).","Typical graphic rendering standards (such as Direct3D) are implemented using floating-point operations (such as transform and lighting). In embedded systems, the CPUs may not be powerful enough to support floating-point operations and they typically have no coprocessors or GPUs for accelerating the floating-point operations. Moreover, the graphics technology in these embedded platforms generally do not enable a number of key 3D graphics technologies (such as a vertex shader, a pixel shader, and vertex blending) that are required in applications designed for desktop systems. Thus, moving these rendering standards that work well on desktop systems directly to embedded platforms is not feasible because of the lack of powerful hardware and processing power on embedded systems.","One technique used to overcome the hardware problem in embedded systems is to integrate the graphics rendering into software. However, floating-point software routines are notoriously slow. Moreover, floating-point operations are expensive and require large amounts of memory and have a large code size. Thus, using floating-point operations in software-implemented graphics rendering is in impractical on an embedded platform. Therefore, there exists a need for a graphics rendering system that is optimized for operation on an embedded platform. Moreover, there is a need for a graphics rendering system that is software-implemented such that powerful hardware and processing power is not required. There is also so need for a software-implemented graphics rendering system to be fast, efficient require less memory and have a small code size such that the graphics rendering system is ideal for embedded platforms.","The invention disclosed herein includes a graphics rendering system and method that is optimized for use on embedded platforms (such as mobile computing devices). The graphics rendering system and method are software implemented and do not require powerful graphics and processing hardware. Moreover, the graphics rendering system and method use fixed-point operations instead of floating-point operations for renderings. Using fixed-point operations is much faster and more efficient than floating-point operations. In addition, fixed-point operations may be performed efficiently on less powerful processors that support only integer mathematics. This means that the graphics rendering system and method is optimized for embedded platforms and is faster, more efficient, requires less memory and has a smaller code size than graphics rendering system for desktop systems.","The graphics rendering system and method includes a fixed-point mathematics library and graphics functions that enable efficient graphics rendering in embedded devices. The fixed-point mathematics library and graphics functions are generated considering the efficiency, resolution, CPU and memory of the embedded device. The fixed-point mathematics library includes optimized basic functions such as addition, subtraction, multiplication, division, all vertex operations, matrix operations, transform functions and lighting functions, and graphics functions. The data structure definition, mathematical operations, and graphics functions are optimized for embedded platforms. The mathematical library and graphics functions are modified and optimized by using a variable-length fixed-point representation and a normalized homogenous coordinate system (NHCS) for vector operations. Using NHCS solves the fixed-point overflow problem. The graphics rendering system and method achieves a higher efficiency using software rendering and fixed-point NHCS representation without graphics hardware than traditional floating-point rendering with powerful graphics hardware.","The NHCS graphics rendering method disclosed herein includes inputting rendering data in a floating-point format, fixed-point format, or both. The rendering data then is converted into a variable-length fixed-point format having a normalized homogenous coordinate system (NHCS). This converts the input rendering data into a NHCS fixed-point format. The NHCS fixed-point format allows computations and operations to be performed on the converted rendering data such that a range can be predicted. Any data outside of the range is truncated. This processing of the data in the NHCS fixed-point format allows more efficient use of valuable memory and processing power. A NCHS fixed-point data structure then is defined to characterize the converted rendering data and fixed-point math library is used to process the rendering data in the NHCS fixed-point data structure. The math library includes mathematical operations and graphics functions. The processed rendering data then is ready for rendering by a rendering engine.","Conversion of the input rendering data into a NHCS fixed-point format is performed as follows. First, values are input and a maximum value is determined from among all of the input data. Next, a maximum fixed-point buffer size for a destination buffer is determined. Next, the maximum value is scaled to the maximum fixed-point buffer size and the number of digits that the value is shifted is recorded. Using this shift digit, the remainder of the values is normalized and the output is the input rendering data in a NHCS fixed-point format.","The NHCS graphics rendering system disclosed herein includes a task module, an application program interface (API) module, and a driver module. The task module inputs raw rendering data and converts the data into a desired fixed-point format. In some embodiments, the task module is capable of converting the input rendering data into either a traditional fixed-point format or a preferred NHCS fixed-point format. The API module creates buffers for storing the converted data. In addition, the API module prepares a command buffer for the driver module. The driver module contains mathematical operations and graphics functions to prepare the data for rendering. The data is in a fixed-point format (preferably a NHCS fixed-point format) and the mathematical operation and graphics functions are specially created to process the fixed-point data. The output is the processed rendering data that is ready to be rendered by a rendering engine.","The task module includes a math library and translator that converts input rendering data and performs preliminary mathematical operations on the converted data. In addition, the math library and translator defines a specific data structure for the converted data. The API module includes an index buffer for storing indices and a vertex buffer for storing vertex information. The API module also includes a wrapper that packages commands and provides convenience, compatibility and security for the commands. This ensures that the commands are ready for the driver module. A command buffer residing on the API module stores the wrapper prior to the commands being sent to the driver module.","The driver module prepares data for the raster translating the data into the language of the computing device's graphics hardware. The driver module includes a transform and lighting (T&L) module and a rasterizer. The T&L module includes all necessary mathematical operations and graphic functions in a NHCS fixed-point data format for processing the converted rendering data. The rasterizer prepares the processed rendering data to be sent to the raster.","In the following description of the invention, reference is made to the accompanying drawings, which form a part thereof, and in which is shown by way of illustration a specific example whereby the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","I. General Overview","Embedded platforms (such as mobile computing devices) often have hardware that does not support intensive graphics rendering. In particular, a mobile computing device may have a central processing unit (CPU) with limited processing power and lack a coprocessor or graphics processing unit (GPU). This type of hardware that is found on most mobile computing devices typically will not support floating-point operations that are commonly used in graphics rendering. This severely limits the usefulness and desirability of mobile computing devices.","The NHCS graphics rendering system and method disclosed herein is implemented in software and uses a fixed-point representation of numbers instead of traditional floating-point representation. Using a fixed-point representation is a much faster way to perform mathematical operations and can easily be optimized for use on a mobile computing device. The NHCS graphics rendering system and method disclosed herein includes an optimized fixed-point math library that enables efficient and fast graphics rendering in embedded devices. The math library includes fixed-point mathematical operations and graphics functions. The data structure, mathematical operations, and graphics functions are optimized for embedded platform by using a variable-length fixed-point representation and a normalized homogenous coordinates system (NHCS) for vector operations. The NHCS graphics rendering system and method is software-based and can easily be implemented into existing mobile computing devices without hardware modification.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","100","110","100","120","120","130","120"]},"As shown in , the NHCS graphics rendering system  includes a task module , an application program interface (API) module , and a driver module . The task module  inputs the raw rendering data  in a floating-point format and converts the data  into a desired fixed-point format. In some embodiments, the task module  is capable of converting the data  in a floating-point format into either a traditional fixed-point format or a preferred NHCS fixed-point format. The converted data then is sent to the API module . The API module  creates buffers for storing the converted data. In addition, the API module  prepares a command buffer for the driver module . The driver module  contains the mathematical operation and graphics functions to prepare the data for rendering. The data is in a fixed-point format (preferably a NHCS fixed-point format) and the mathematical operation and graphics functions are specially created to process the fixed-point data. The output is the processed rendering data  that is ready to be rendered by a rendering engine.","II. Exemplary Operating Environment","The NHCS graphics rendering system and method disclosed herein is designed to operate in a computing environment. The following discussion is intended to provide a brief, general description of a suitable computing environment in which the NHCS graphics rendering system and method may be implemented.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["200","200","200","200"]},"The NHCS graphics rendering system and method is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the NHCS graphics rendering system and method include, but are not limited to, personal computers, server computers, hand-held, laptop or mobile computer or communications devices such as cell phones and PDA's, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The NHCS graphics rendering system and method may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices. With reference to , an exemplary system for implementing the NHCS graphics rendering system and method includes a general-purpose computing device in the form of a computer  (the computer  is an example of the computing device  shown in ).","Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data.","Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.","Note that the term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media.","Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad.","Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, radio receiver, or a television or broadcast video receiver, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as, for example, a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","III. System Components",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 1"],"b":["100","100"]},"The basic structure of D3DM is that there is a \u201cthin\u201d API module and a \u201cthick\u201d driver module. In the thin API module, the interface is simple and straightforward. Thus, the API code provides integration with the operating system and hosting for the display driver, but does not provide any actual drawing code. In the thick driver module, most of the work is forwarded by the API module and performed in the driver module. Thus, the thick driver module includes drawing code, which may only be overridden by the display driver.","The design of D3DM is based on the fact that models can be described in terms of primitives. In turn, each primitive is described in terms of a plurality of vertexes (or vertices). A vertex is the point at which two lines meet. The vertex carries a great of information. For example, the vertex contains the 3-D coordinates and weight. In addition, there is color information, often specified in the form of a diffuse and a specular color. This color data is commonly coded in the \u201cRGBA\u201d format (for red, green, blue and alpha). The vertex also contains a normal, the vector that is orthogonal to its surface, and the texture coordinates that represent the texture and its position for the vertex. The vertex may have several texture coordinates in case more than one texture is applied to the vertex. Further, the vertex may contain texture fog as well as other information such as point size. Thus, the vertex, the smallest unit in a 3-D scene, contains a large amount of information.","D3DM loads this data for the vertices into vertex buffers. The data then is processed by a transform and lighting (T&L) pipeline where the output is pixel color values for a frame buffer. The NHCS graphics rendering system and method contains a mathematical library that is used by D3DM for two purposes. First, the mathematical library is used to translate floating-point data into a NHCS fixed-point format and perform some necessary mathematical operations. Second, the mathematical library is used to implement the transform and lighting. The D3DM drivers expose all of the features of the mobile computing device on which an application is running, thus achieving maximum drawing performance.","Referring to , the task module  includes a math library and translator , an application , and floating-point data . In general, the task module  inputs the floating-point data  and converts the data  into a fixed-point format or a NHCS fixed-point format. The converted data then is sent to buffers created by the API module . The math library and translator  converts the data  and performs preliminary mathematical operations on the converted data. In addition, the math library and translator  defines a specific data structure for the converted data. The preliminary mathematical operations and data structure definitions are discussed in detail below.","The API module  creates buffers for storing the converted data and preparing the data for the driver module . The API module  includes an index buffer , for storing indices, and a vertex buffer , for storing vertex information. The index buffer holds a value for each vertex. The value is called an index. Indices are used to retrieve a vertex in the vertex buffer. Each index is an offset in the current vertex buffer of the data for this vertex. This allows for the sharing of vertex data between multiple vertices and avoids the duplicated storage of vertices when two neighboring triangles share vertices. The API module  also includes commands  that provide instructions for the rendering and texture  that provides texture information. The API module  includes a wrapper  that packages the commands  and provides convenience, compatibility and security for the commands . This ensures the that the commands  are ready for the driver module . A command buffer  stores the wrapper  prior to them being sent to the driver module .","The driver module  prepares data for the raster. In addition, the driver module  prepares the data for use by a rendering engine. This means that the data is translated into the language of the computing device's graphics hardware and causes particular primitives to be drawn. The driver module  includes a transform and lighting (T&L) module  and a rasterizer . The T&L module  includes all necessary mathematical operations and graphic functions in the NHCS fixed-point data format. These mathematical operations and graphic functions are discussed in detail below. The rasterizer prepares the rendering data to be sent to the raster.","IV. Components Details","As stated above, the math library and translator  converts the data  and performs preliminary mathematical operations on the converted data. In addition, the math library and translator  defines a specific data structure for the converted data. The basic mathematical operations of fixed-point data, the NHCS fixed-point format, and the data structure definitions of the math library and translator  now will be addressed.","Fixed Point Mathematical Operations","The basic mathematical operations performed by the math library and translator module  include addition (+), subtraction (\u2212), multiplication (\u00d7) and division (\/). Each of these basic functions is optimized to achieve more efficiently in software rendering than can be had with traditional floating point rendering with graphics hardware. Each of these optimized basic mathematical operations will now be discussed.","Most central processing units (CPUs) designed for mobile computing devices support integer addition. For example, CPUs designed for use with D3DM support integer addition. When adding two fixed-point numbers having the same bits of mantissa, integer addition can be used. However, care is required to avoid the overflow problem. In addition, care must also be used when adding signed and unsigned fixed-point data.","The basic algorithm of the addition of fixed-point numbers assumes that operand A and operand B are in both fixed-point data with m-bit mantissa. In this situation,\n\n\n\nwill also be fixed-point data with m-bit mantissa. It should be noted that overflow is possible in fixed-point addition.\n","Overflow in a signed integer is different from overflow in an unsigned integer. By way of example, given two unsigned 32-bit integer,\n\n0\u00d770\u00d770\n\nthere is no overflow. However, if the same data is added as signed 32-bit integer, overflow occurs in the sign bit. Most compilers can distinguish signed integer from a unsigned integer, so there typically is no need to address this situation. However, when writing in assembler language, code or programs (ASM), the difference between signed and unsigned must be taken into account.\n","The addition of signed and unsigned data is only appropriate when the signed operand is positive. The result can be saved as a signed or unsigned number, as long as no overflow occurs. The addition of different bit integers requires alignment. For example, when adding a 32-bit integer with a 16-bit integer, the 16-bit integer must be aligned to the 32-bit integer. Given that mantissa bits in operands are the same, the addition will be correct. It should be noted that when coding in C++ the C++ compiler will automatically perform the alignments, but when coding using ASM the need for alignment must be recognized.","Addition results larger than the maximum or less than the minimum will cause an overflow. The mathematical operations of the NHCS graphics rendering system  will not deal with overflow for performance consideration. In such cases, the operand can be pre-shifted before adding to avoid overflow. In a working example of the NHCS graphics rendering system , the following are the maximum and minimums:\n\n","Integer subtraction is supported on mobile computing devices using D3DM. Integer subtraction can be used when subtracting two fixed-point data with the same bits of mantissa. Once again, care is required to avoid the overflow problem. Moreover, care must also be used when subtracting signed and unsigned fixed-point data.","The basic algorithm of the subtraction of fixed-point numbers assumes that operand A and operand B are in both fixed-point data with m-bit mantissa. In this situation,\n\n\n\nis also fixed-point data with m-bit mantissa. Overflow also is possible in subtraction.\n","Subtraction results larger than the maximum or less than the minimum will cause an overflow. The NHCS graphic rendering system  does not deal with overflow for performance consideration. In such cases, the operand is pre-shifted before subtracting to avoid overflow. In a working example of the NHCS graphics rendering system , the following are the maximum and minimums:\n\n","Integer multiplication also is supported on mobile computing devices using D3DM. When multiplying two fixed-point numbers, the intermediate result is stored in double buffer. Overflow may appear when the double buffer is truncated to a single buffer.","The basic algorithm of the multiplication of fixed-point numbers assumes that operand A is a n-bit fixed point data with a-bit mantissa, and operand B is a n-bit fixed point data with b-bit mantissa. In this situation,\n\n\n\nis a 2n-bit fixed point data with (a+b)-bit mantissa.\n","Overflow in multiplication happens C is truncated to a smaller storage. This may occur when it is desired to truncate to the same n-bits as with the operands. In this truncation, both overflow and underflow is possible. To avoid this overflow, the multiplication principle is followed that states all intermediate results should not be truncated. This can cause problems if three 32-bit operands are multiplied sequentially. At the first multiplication, a 64-bit intermediate result is obtained. Next, the 64-bit intermediate result is multiplied with the third 32-bit operand, which produces a 96-bit result.","In the NHCS graphics rendering system and method, the overflow is handled as follows. First, after each multiplication the 64-bits intermediate result is truncated to 32-bits. This assumes that no overflow can occur in the truncation. A second solution is to use NHCS to all operands to reduce their bits, say, from 32-bits to 16-bits. Then the sequentially multiplication of three integer yields a 48-bits result. Of course, this will result in some lose of precision, but it is useful if the sign of the final result is needed. This need may occur, for example, in back face culling.","Division is a common operation, but it is expensive in CPU time. Moreover, in some embedded CPUs division is not supported in hardware at all. The NHCS graphic rendering system and method avoid this by implementing division with software.","The basic algorithm of the division of fixed-point numbers assumes operand A is a n-bit fixed-point data with a-bit mantissa, and operand B is a n-bit fixed point data with b-bit mantissa. In this situation,\n\n\n\nis a n-bit fixed-point data with (a\u2212b)-bit mantissa. It can be seen that division will lose precision, so that the dividend must be shifted to increase its mantissa bits before division. If a result is needed with c-bits mantissa, the operand A must be pre-shifted with c\u2212(a\u2212b) bits. This pre-shift can cause operand A to overflow if A stores as n-bits. Generally, A is converted to 2n-bit integer before the pre-shift. For constant division, the value could be converted to its reciprocal, and then division becomes multiply. For non-constant division, the basic operation is reciprocal and a method such as Newton's iteration method can be used.\n","Given a, the desire is to obtain 1\/a. The target function is:",{"@attributes":{"id":"p-0070","num":"0073"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"x"}},{"mfrac":{"mn":"1","mi":"x"},"mo":"-","mi":"a"}],"mo":"="}}},"br":{}},{"@attributes":{"id":"p-0071","num":"0074"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":"x","mrow":{"mi":"i","mo":"+","mn":"1"}},"mo":"=","mrow":{"mrow":[{"msub":{"mi":["x","i"]},"mo":"-","mrow":{"mrow":[{"mi":"f","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["x","i"]}}},{"msup":{"mi":["f","\u2032"]},"mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["x","i"]}}}],"mo":"\/"}},{"mrow":[{"msub":{"mi":["x","i"]},"mo":"-","mrow":{"mrow":[{"mo":["(",")"],"mrow":{"mfrac":{"mn":"1","msub":{"mi":["x","i"]}},"mo":"-","mi":"a"}},{"mo":["(",")"],"mrow":{"mo":"-","mfrac":{"mn":"1","msubsup":{"mi":["x","i"],"mn":"2"}}}}],"mo":"\/"}},{"mrow":{"msub":{"mi":["x","i"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"2","mo":"-","mrow":{"mi":"a","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["x","i"]}}}}},"mo":"."}],"mo":"="}],"mo":"="}}}}},"Each iteration step involves 2 multiplications and 1 subtraction, and gives twice the precision. Given a 256-items array for the initial guess, we 32-bit precision can be obtained with two iterations. The division latency for 32-bit precision has 1 memory lookup, 5 multiplications, and 2 subtractions.","Overflow does not occur in division for non-preshifted integers. However, when dividing a 64-bit integer by a 32-bit integer and storing the result in 32-bit integer, overflow may occur. This may happen when the dividend is pre-shifted. Moreover, underflow can occur if an inappropriate mantissa bit of result is chosen. As with other forms of division, a zero divisor should be prevented.","Fixed-Point Number Representation","The NHCS graphics rendering system and method disclosed herein use a normalized homogenous coordinate system (NHCS) to represent numbers. NHCS is a high-resolution variation of fixed-point number representation. In general, fixed-point representation of numbers is a way to represent a floating-point number using integers. Briefly, representing a number in a floating-point representation means that the decimal does not remain in a fixed position. Instead, the decimal \u201cfloats\u201d such that the decimal always appears immediately after the first digit. As discussed above, using a floating point representation on a mobile device may not be possible due to processor and other hardware limitations.","The alternative is to use fixed-point number representation that is executed using integer functions. On mobile, wireless and other embedded platforms, the CPU may not be powerful enough to support floating-point operations and there typically are no coprocessors for accelerating the floating-point operations. Another important issue is that most floating point software routines are quite slow. Fixed-point is a much faster way to handle calculations.","Fixed-point number representation is a way to speed up any program that uses floating point. Typically, some of the bits are use for a whole part of the number and some bits are used for a fractional part. For example, if there are 32 bits available, a 16.16 configuration means that there are 16 bits before the decimal (representing the whole part of the number) and 16 bits after the decimal (representing the fractional part of the number). In this case, the value 65535.999984741211 is the largest possible number for the 16.16 configuration. This is obtained by setting the decimal portion to all 1's (in binary). The value 65535 with 16 bits is obtained for the whole part of the number. If 65535 is divided by 65536, then the value 0.999984741211 is obtained for the fractional part. There are other variants such as 24.8 (24 bits before the decimal and 8 bits after) and 8.24 (8 bits before the decimal and 24 bits after). The configuration type depends on the amount of precision that an application needs.","In an exemplary embodiment of the optimized NHCS graphics rendering system and method, Direct3D for mobile devices (D3DM) is used. In order to uses numbers in the D3DM transform and lighting (T&L) module, floating point numbers need to be converted to NHCS fixed-point numbers. Preferably, the conversion is easy as possible (such as we need not to know the range of the input vertices) while preserving the precision of the data. NHCS fixed-point number representation achieves these objectives.","NHCS is a type of vertex representation. NHCS can eliminate the annoying overflow, and provides a wider data space. For example, without NHCS, the model space vertex coordinates range from 2\u02dc2, assuming that a 16-bit mantissa is used. On the other hand, if NHCS is used, the model space vertex coordinates range from 2\u02dc2. By adopting NHCS it can be seen that both range and precision are greatly increased.","NHCS also makes the conversion from floating-point to fixed-point easy. It is not necessary to know the exact range of the input vertices. NHCS also eliminates the factitious overflow and takes advantage of the full storage of the buffer. Moreover, NHCS has the advantage of providing a wider data representation given the same precision. NHCS also preserves all transform and lighting (T&L) operations and makes use of the \u201cw\u201d in homogeneous coordinate representation.","Data Structure for Transform & Lighting","The data structure definition for the NHCS fixed-point format is shown in the following tables:",{"@attributes":{"id":"p-0081","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Basic type",{}]},{"entry":["SFIX64:","signed 64-bit integer"]},{"entry":["UFIX64:","unsigned 64-bit integer"]},{"entry":["SFIX32:","signed 32-bit integer"]},{"entry":["UFIX32:","unsigned 32-bit integer"]},{"entry":["SFIX16:","signed 16-bit integer"]},{"entry":["UFIX16:","unsigned 16-bit integer"]},{"entry":["SFIX8:","signed 8-bit integer"]},{"entry":["UFIX8:","signed 8-bit integer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Structure type",{},{}]},{"entry":["typedef","SFIX64","SFIX64Quad[4]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 4-element vector, and each element"},{"entry":"is a 64-bit signed integer. This vector can be either NHCS or non-NHCS."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["typedef","SFIX64","SFIX64Triple[3]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 3-element vector, and each element"},{"entry":"is a 64-bit signed integer. This vector can be either NHCS or non-NHCS."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["typedef","SFIX32","SFIX32Quad[4]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 4-element vector, and each element"},{"entry":"is a 32-bit signed integer. This vector can be either NHCS or non-NHCS."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["typedef","SFIX32","SFIX32Triple[3]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 3-element vector, and each element"},{"entry":"is a 32-bit signed integer. This vector can be either NHCS or non-NHCS."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["typedef","SFIX16","SFIX16Quad[4]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 4-element vector, and each element"},{"entry":"is a 16-bit signed integer. This vector can be either NHCS or non-NHCS."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["typedef","SFIX16","SFIX16Triple[3]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 3-element vector, and each element"},{"entry":"is a 16-bit signed integer. This vector can be either NHCS or non-NHCS."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["typedef","UFIX8","UFIX8Quad[4]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 4-element vector, and each element"},{"entry":"is an 8-bit unsigned integer. This vector is non-NHCS. This vector is used"},{"entry":"mainly for representing color RGBA components."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["typedef","SFIX32Mat4x4","SFIX32[16];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This data structure is used to store a 16-element matrix, which is 4 by 4."},{"entry":"Each element of the matrix is a 32-bit unsigned integer. This matrix can be"},{"entry":"either NHCS or non-NHCS."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The default mantissa bits listed here are for fixed-point data representation:",{"@attributes":{"id":"p-0083","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define DEFAULT_SFIX32","16","\/\/default mantissa"]},{"entry":[{},{},{},"bits for 32-bit"]},{"entry":[{},{},{},"signed"]},{"entry":[{},"#define ONE_SFIX32","30","\/\/mantissa bits"]},{"entry":[{},{},{},"for 32-bit signed"]},{"entry":[{},{},{},"with (\u22121~1)"]},{"entry":[{},"#define NORMAL_SFIX16","14","\/\/normal mantissa"]},{"entry":[{},{},{},"bits for 16-bit"]},{"entry":[{},{},{},"signed"]},{"entry":[{},"#define TEXTURE_SFIX16","12","\/\/mantissa bits for"]},{"entry":[{},{},{},"16-bit texture"]},{"entry":[{},{},{},"coordinate"]},{"entry":[{},"#define ONE_UFIX16","15","\/\/mantissa bits for"]},{"entry":[{},{},{},"16-bit unsigned"]},{"entry":[{},{},{},"within (0~1)"]},{"entry":[{},"#define COLOR_UFIX16","8","\/\/color mantissa bits"]},{"entry":[{},{},{},"for 16-bit unsigned"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The constants listed here are for integer shifting during computation and conversion between different data formats:",{"@attributes":{"id":"p-0085","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"const SFIX32","SFIX32_1 ="]},{"entry":[{},{},"(SFIX32)1<<DEFAULT_SFIX32;"]},{"entry":[{},"const SFIX32","ONE_SFIX32_1 ="]},{"entry":[{},{},"(SFIX32)1<<ONE_SFIX32;"]},{"entry":[{},"const SFIX16","NORMAL_SFIX16_1 ="]},{"entry":[{},{},"(SFIX16)1<<NORMAL_SFIX16;"]},{"entry":[{},"const int","POSTOTEX ="]},{"entry":[{},{},"ONE_SFIX32\u2212 TEXTURE_SFIX16;"]},{"entry":[{},"const int","NORMTOTEX ="]},{"entry":[{},{},"NORMAL_SFIX16 \u2212 TEXTURE_SFIX16;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The basic operations have the following data structure definition:","Type Convert","The following macros are conversion macros for converting between different data formats:",{"@attributes":{"id":"p-0088","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define PosToTex(a)","((SFIX16)((a)>>POSTOTEX))"]},{"entry":["#define NormToTex(a)","((SFIX16)((a)>>NORMTOTEX))"]},{"entry":["#define FloatToSFIX32(a,n)","((SFIX32)((a)*((SFIX32)1<<(n))) )"]},{"entry":["#define SFIX32ToFloat(a,n)","((float)(a)\/((SFIX32)1<<(n)))"]},{"entry":["#define FloatToSFIX16(a,n)","((SFIX16)((a)*((SFIX16)1<<(n))))"]},{"entry":["#define FloatToUFIX16(a,n)","((UFIX16)((a)*((UFIX16)1<<(n))))"]},{"entry":["#define SFIX16ToFloat(a,n)","((float)(a)\/((SFIX16)1<<(n)))"]},{"entry":["#define FloatToUFIX8(a)","((UFIX8)((a)*255))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The following macros are computation macros for computing between fixed-point data:",{"@attributes":{"id":"p-0090","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define Mul_SFIX32(a,b,n)","( (SFIX32)(((SFIX64)(a)*(b))>>(n)) )"]},{"entry":["#define Mul_UFIX32(a,b,n)","( (UFIX32)(((UFIX64)(a)*(b))>>(n)) )"]},{"entry":["#define Div_SFIX32(a,b,n)","( (SFIX32)(((SFIX64)(a)<<(n))\/(b)) )"]},{"entry":["#define Mul_SFIX16(a,b,n)","( (SFIX16)(((SFIX32)(a)*(b))>>(n)) )"]},{"entry":["#define Mul_UFIX16(a,b,n)","( (UFIX16)(((UFIX32)(a)*(b))>>(n)) )"]},{"entry":["#define Mul_UFIX8(a,b,n)","( ((UFIX16)(a)*(b))>>(n))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The data structure definition for the different types of data are as follows:",{"@attributes":{"id":"p-0092","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Name","Type","Mantissa bits"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Input data",{},{}]},{"entry":["Model space vertex","SFIX32Quad","NHCS"]},{"entry":"coordinates"},{"entry":["Model space normal","SFIX16Triple","NORMAL_SFIX16"]},{"entry":["Model space texture","SFIX16","TEXTURE_SFIX16"]},{"entry":"coordinates"},{"entry":["Model space","DWORD with"]},{"entry":["diffuse\/specular color","A8R8G8B8"]},{"entry":["Vertex\/Texture","SFIX32Mat4x4","DEFAULT_SFIX32"]},{"entry":"transform matrices"},{"entry":["Light\/view vectors for","SFIX32Quad","NHCS"]},{"entry":"lighting"},{"entry":["Fog parameters","SFIX32","DEFAULT_SFIX32"]},{"entry":["Color in light\/material","UFIX8Quad","0"]},{"entry":["Power in material","UFIX8","0"]},{"entry":"Output data"},{"entry":["Transformed vertex","SFIX32","ONE_SFIX32"]},{"entry":"coordinates (x, y, z)"},{"entry":["Transformed vertex","SFIX32","DEFAULT_SFIX32"]},{"entry":"coordinates (w)"},{"entry":["Color","DWORD with"]},{"entry":[{},"A8R8G8B8"]},{"entry":["Texture coordinates","SFIX16","TEXTURE_SFIX16"]},{"entry":["Fog","SFIX32","DEFAULT_SFIX32"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Details of each of the above data types is listed below. The reason why such data types and the mantissa bits were chosen are explained.","Position\/Direction","Light position or direction is taken as",{"@attributes":{"id":"p-0095","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Light position","SFIX32Quad,","NHCS"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"This representation provides the enough range and precision for lighting, and no extra cost exists comparing with the traditional representation such as non-NHCS.","Viewpoint","Viewpoint is represented as:",{"@attributes":{"id":"p-0098","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Viewpoint","SFIX32Quad,","NHCS"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"This representation provides enough range and precision for lighting, and no extra cost exists comparing with the traditional representation such as non-NHCS.","Lighting Color","Lighting color includes:\n\n",{"@attributes":{"id":"p-0101","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Lighting color","UFIX8Quad","No mantissa"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},"Material color includes:\n\n",{"@attributes":{"id":"p-0103","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Material color","UFIX8Quad","No mantissa"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0104","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Power component","UFIX8","No mantissa"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"In one embodiment of the NHCS graphics rendering system , the power is assumed to be an integer from 0 to 127.","Normal is taken as:",{"@attributes":{"id":"p-0107","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Normal","SFIX16","NORMAL_SFIX16 mantissa"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"From empirical evidence, it is concluded that a 16-bit normal is enough for rendering a Microsoft\u00ae Windows CE\u00ae device window. In a preferred embodiment, the NORMAL_SFIX16 is equal to 14. Moreover, the 1 sign bit must be preserved and 1 additional bit should be preserved as integer part for normal coordinates like 1.0 or \u22121.0.","Texture coordinate is represented as:",{"@attributes":{"id":"p-0110","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Texture","SFIX16","TEXTURE_SFIX16 mantissa"]},{"entry":[{},"coordinate"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"In a preferred embodiment, the TEXTURE_SFIX16 is equal to 12. Further, there is 1 bit for sign and 3 bits for an integer part. This provides supports for finite tiling (\u22128\u02dc8), and gives 4-bits sub-pixel resolution for a texture as large as (256\u00d7256). Note that there is a trade off between the titling size and sub-pixel resolution.","The NHCS graphics rendering system  produces an output vertex suitable for a vertex shader. The representation is:",{"@attributes":{"id":"p-0113","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"x","SFIX32","ONE_SFIX32 mantissa"]},{"entry":[{},"y","SFIX32","ONE_SFIX32 mantissa"]},{"entry":[{},"z","SFIX32","ONE_SFIX32 mantissa"]},{"entry":[{},"w","SFIX32","DEFAULT_SFIX32 mantissa"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},"Prior to rendering, several matrices should be ready. All matrices are of the data structure SFIX32, with DEFAULT_SFIX32 bits mantissa.","M: Transform matrix from model space to world space.","Currently, a D3DM implementation assumes that the last column of this matrix is (0,0,0,1). No error is returned, and if a user specifies a matrix with different last column texture coordinate and fog it will be incorrect.","M: Transform matrix from world space to view space.","Currently, a D3DM implementation assumes that the last column of this matrix is (0,0,0,1). No error is returned, and if user specifies a matrix with different last column texture coordinate and fog it will be incorrect.","M: Projection matrix from view space to clip space","Currently, a D3DM implementation assumes that the last column of this matrix is (0,0,1,0)or (0,0,a,0). No error is returned. For correct fog, the last column should be (0,0,1,0)to give a correct w value. This is called the W-friendly projection matrix.","M: Matrix combination from model space to view space\n\nM=MM\n","A D3DM implementation combines the matrices Mand Mand the last column of this matrix is (0,0,0,1). No error is returned. If user specifies a matrix with different last column texture coordinate and fog it will be incorrect.","M: Matrix combination from model space to clip space\n\nM=MMM\n","A D3DM implementation combines the matrices M, Mand M. The last column of this matrix is determined by the parameters of these matrices. No error is returned.","V. Operational Overview","The NHCS graphics rendering system  disclosed herein uses the NHCS graphics rendering method to enable efficient and fast graphics rendering on a mobile computing device.  is a general flow diagram illustrating the operation of the NHCS graphics rendering method of the NHCS graphics rendering system  shown in . The method begins by inputting rendering data (box ). In one embodiment, the rendering data is in a floating-point format. In another embodiment, the rendering data is in a fixed-point format. Next, the rendering data is converted into a variable-length fixed-point format including a normalized homogenous coordinate system (NHCS) fixed-point format for vector operations (box ). The NHCS fixed-point format allows computations and operations to be performed on the converted rendering data such that a range can be predicted. Any data outside of the range is truncated. This processing of the data in the NHCS fixed-point format allows more efficient use of valuable memory and processing power.","A NCHS data structure then is defined to characterize the converted rendering data (box ). Next, a fixed-point math library is used to process the rendering data in the NHCS data structure (box ). The math library includes mathematical operations and graphics functions. The processed rendering data then is ready for rendering by a rendering engine.","VI. Operational Details",{"@attributes":{"id":"p-0127","num":"0136"},"figref":["FIG. 5","FIGS. 1 and 3"],"b":["140","140","140"]},"In general, a normalized homogenous coordinates (NHCS) is a vertices representation. More specifically, as shown in , the input to the task module  is scalar values representing a vertex in either a floating-point or a fixed-point format (box ). Next, a maximum scalar value is determined from among all of the scalar values (box ). Moreover, a maximum fixed-point buffer representation for a destination buffer is determined (box ). In one embodiment, the maximum fixed-point buffer representation is the size of the destination buffer, characterized by the number of bits.","Next, the maximum scalar value is scaled to the maximum fixed-point buffer representation (box ). The number of digits that the value is shifted then is recorded (box ). This number of digits is known as the shift digit. Using the shift digit, the remainder of the scalar values are normalized (box ). The output is the input values represented in a NHCS fixed-point format (box ).",{"@attributes":{"id":"p-0130","num":"0139"},"figref":["FIG. 6","FIG. 5","FIG. 6","FIG. 6","FIG. 6"],"b":["4","4","0","63","600","0","31"]},"Next, scaling is performed such that the maximum scalar value (scalar c) is scaled to the maximum size of the destination fixed-point buffer, in this case 32 bits. The shift digit r, or the number of digits needed to shift scalar c, is recorded. Finally, the shift digit r is used to normalize the rest of the scalars (a, b, d) based on the maximum scalar c. This converts input data in a floating-point or fixed-point format into a NHCS fixed-point format.","NHCS preserves the full resolution of the maximal resolution and in vector computation. With NHCS, the intermediate result is stored as L\u00d72-bits for the original L-bits, which assures no precision loss in multiplication. The intermediate result is then truncated to L-bits to preserve maximum precision (in , L=32).",{"@attributes":{"id":"p-0133","num":"0142"},"figref":["FIG. 7","FIGS. 1 and 3"],"b":["150","150","140","150","160","700","710","720"]},{"@attributes":{"id":"p-0134","num":"0143"},"figref":["FIG. 8","FIGS. 1 and 3"],"b":["160","160","800","810","820","160","830"]},"Mathematical Library","The mathematical library includes mathematical operations and graphics functions. The mathematical library now will be discussed in detail.","The features of the mathematical library are divided into features that are supported by the rasterizer, resource management, and features supported by transform and lighting (T&L). The mathematical library implements all features supported by T&L.","The following features are features in the mathematical library that are supported by the rasterizer:\n\n","Resources are objects that are resident in memory, such as textures, vertex buffers, index buffers and render surfaces. Resource management is the management of the various memory operations on these objects. These operations include allocation, copying, moving, locking for exclusive usage, unlock and de-allocation. The following features are features in the mathematical library that are supported in resource management:\n\n","The following features are features in the mathematical library that are supported by in T&L:\n\n","In this section, the mathematical functions indexed by features are described. The functions cover transform, culling, lighting, culling, texture and other miscellaneous functions. In addition, the overflow and underflow (resolution loss) problems of these functions are discussed.","Transform Functions",{"@attributes":{"id":"p-0141","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"NHCS vector transform"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"int TransQuad_SFIX32(SFIX32Quad b, SFIX32Mat4x4 m,"},{"entry":"SFIX32Quad c)"},{"entry":"This function transforms a 32-bits NHCS vector b to"},{"entry":"another 32-bits NHCS vector c by matrix m."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","b,"]},{"entry":[{},"Input vector in SFIX32Quad in"]},{"entry":[{},"NHCS format"]},{"entry":[{},"m"]},{"entry":[{},"Transform matrix in SFIX32Mat4x4"]},{"entry":[{},"and DEFAULT_SFIX32 format."]},{"entry":[{},"c,"]},{"entry":[{},"Output vector after transform"]},{"entry":[{},"in SFIX32 format in NHCS"]},{"entry":[{},"representation."]},{"entry":["Return","An integer indicates the shift"]},{"entry":["value","bits in converting intermediate 64-"]},{"entry":[{},"bits c to 32-bits NHCS c."]},{"entry":["Remarks","Overflow:"]},{"entry":[{},"The maximum possible"]},{"entry":[{},"intermediate value is: 4*(0x8000"]},{"entry":[{},"0000*0x8000 0000) = 0x 1"]},{"entry":[{},"0000 0000 0000 0000. This indicates"]},{"entry":[{},"that a 64-bits intermediate"]},{"entry":[{},"value will have overflow in the"]},{"entry":[{},"intermediate data before NHCS."]},{"entry":[{},"Underflow:"]},{"entry":[{},"Appears when truncated from"]},{"entry":[{},"intermediate buffer."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Matrix combination"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"void MatMul4x4_SFIX32(SFIX32Mat4x4 m1, SFIX32Mat4x4 m2,"},{"entry":"SFIX32Mat4x4 m3, UFIX8 n)"},{"entry":"This function combines two 32-bits 4 \u00d7 4 matrices to"},{"entry":"another 32-bits 4 \u00d7 4 matrix"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","m1, m2"]},{"entry":[{},"Input matrices in SFIX32Mat4x4"]},{"entry":[{},"n"]},{"entry":[{},"Input shift bits for shifting the"]},{"entry":[{},"64-bits multiplication results to"]},{"entry":[{},"32-bits results."]},{"entry":[{},"m3,"]},{"entry":[{},"Output combined matrix."]},{"entry":["Return value","No return value"]},{"entry":["Remarks","Shift"]},{"entry":[{},"The matrices m1, m2, m3 can"]},{"entry":[{},"have different mantissa bits."]},{"entry":[{},"Suppose m1 with a bits"]},{"entry":[{},"mantissa and m2 with b bits"]},{"entry":[{},"mantissa, to get a c-bits"]},{"entry":[{},"mantissa m3, we should set n ="]},{"entry":[{},"(a + b) \u2212 c"]},{"entry":[{},"Overflow:"]},{"entry":[{},"The maximum possible"]},{"entry":[{},"intermediate value is: 4*(0x8000"]},{"entry":[{},"0000*0x8000 0000) = 0x 1 0000"]},{"entry":[{},"0000 0000 0000. This indicates"]},{"entry":[{},"that a 64-bits intermediate"]},{"entry":[{},"value will have overflow"]},{"entry":[{},"in the intermediate data."]},{"entry":[{},"When truncating the 64-bits"]},{"entry":[{},"intermediate result to 32-"]},{"entry":[{},"bits output, overflow is also"]},{"entry":[{},"possible."]},{"entry":[{},"Underflow:"]},{"entry":[{},"Appears when truncated from"]},{"entry":[{},"intermediate buffer."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Non-NHCS vector transform"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"void TransQuad_SFIX16(SFIX16Quad b, SFIX32Mat4x4 m,"},{"entry":"SFIX16Quad c)"},{"entry":"This function transforms a 16-bits vector to a"},{"entry":"16-bits vector."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","b,"]},{"entry":[{},"Input vector in SFIX16Quad"]},{"entry":[{},"with TEXTURE_SFIX16 bits"]},{"entry":[{},"mantissa."]},{"entry":[{},"m"]},{"entry":[{},"Transform matrix in"]},{"entry":[{},"SFIX32Mat4x4 and"]},{"entry":[{},"DEFAULT_SFIX32 format."]},{"entry":[{},"c"]},{"entry":[{},"Output vector after transform"]},{"entry":[{},"in SFIX16 format with"]},{"entry":[{},"TEXTURE_SFIX16 bits mantissa."]},{"entry":["Return Value","No return value."]},{"entry":["Remarks","Overflow:"]},{"entry":[{},"Appears when go out range"]},{"entry":[{},"of TEXTURE_SFIX16 mantissa."]},{"entry":[{},"Underflow:"]},{"entry":[{},"Appears when go out range"]},{"entry":[{},"of TEXTURE_SFIX16 mantissa."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"void TransNorm_SFIX16(SFIX16Triple b, SFIX32Mat4x4 m,"},{"entry":"SFIX16Triple c)"},{"entry":"This function transforms a 16-bit normal to a"},{"entry":"16-bits normal."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","b"]},{"entry":[{},"Input vector in SFIX16Triple"]},{"entry":[{},"with NORAML_SFIX16 bits"]},{"entry":[{},"mantissa."]},{"entry":[{},"m"]},{"entry":[{},"Transform matrix in"]},{"entry":[{},"SFIX32Mat4x4 and"]},{"entry":[{},"DEFAULT_SFIX32 format."]},{"entry":[{},"c"]},{"entry":[{},"Output vector after transform,"]},{"entry":[{},"it is in SFIX16 format with"]},{"entry":[{},"NORMAL_SFIX16 bits mantissa,"]},{"entry":[{},"normalized."]},{"entry":["Return value","No return value."]},{"entry":["Remarks","Matrix"]},{"entry":[{},"For transform normal, only the"]},{"entry":[{},"upper 3 \u00d7 3 part of m is used."]},{"entry":[{},"Normalization:"]},{"entry":[{},"The output is normalized by"]},{"entry":[{},"Normalize_SFIX16Triple(\u2009)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"NHCS to non-NHCS convert"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Void DivWW_SFIX32(SFIX32 w, int shift, SFIX32Quad c,"},{"entry":"SFIX32Quad cc)"},{"entry":"This function transforms a NHCS vertex to clip space"},{"entry":"non-NHCS vertex."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","w"]},{"entry":[{},"Input w to be divided from the"]},{"entry":[{},"NHCS vertex, SFIX32. It is the"]},{"entry":[{},"b[3] in TransQuad_SFIX32(\u2009)."]},{"entry":[{},"shift"]},{"entry":[{},"Input shifted bits return"]},{"entry":[{},"from TransQuad_SFIX32(\u2009). For"]},{"entry":[{},"calculating the correct w"]},{"entry":[{},"c"]},{"entry":[{},"Input vertex after"]},{"entry":[{},"TransQuad_SFIX32(\u2009), NHCS"]},{"entry":[{},"cc"]},{"entry":[{},"Output vertex with non-NHCS"]},{"entry":[{},"SFIX32 format. cc[0]~cc[2] has"]},{"entry":[{},"ONE_SFIX32 bits mantissa, and"]},{"entry":[{},"cc[3] has DEFAULT_SFIX32"]},{"entry":[{},"bits mantissa."]},{"entry":["Return value","No Return value"]},{"entry":["Remarks","This function is related"]},{"entry":[{},"to TransQuad_SFIX32( )."]},{"entry":[{},"With this function we get the"]},{"entry":[{},"actual clip space vertex from"]},{"entry":[{},"NHCS clip space vertex for"]},{"entry":[{},"finally converting to float"]},{"entry":[{},"point vertex and output to"]},{"entry":[{},"vertex shader."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Void DivW_SFIX32(SFIX32 w, int shift, SFIX32Quad c,"},{"entry":"SFIX32Quad cc)"},{"entry":"This function transforms a NHCS vertex to clip space"},{"entry":"non-NHCS vertex."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","w"]},{"entry":[{},"Input w to be divided from the"]},{"entry":[{},"NHCS vertex, SFIX32. It is the"]},{"entry":[{},"b[3] in TransQuad_SFIX32(\u2009)."]},{"entry":[{},"shift"]},{"entry":[{},"Input shifted bits return"]},{"entry":[{},"from TransQuad_SFIX32(\u2009). For"]},{"entry":[{},"calculating the correct w"]},{"entry":[{},"c"]},{"entry":[{},"Input vertex after"]},{"entry":[{},"TransQuad_SFIX32(\u2009), NHCS"]},{"entry":[{},"cc"]},{"entry":[{},"Output vertex with"]},{"entry":[{},"DEFAULT_SFIX32 format."]},{"entry":["Return value","No Return value"]},{"entry":["Remarks","This function is related"]},{"entry":[{},"to TransQuad_SFIX32(\u2009)."]},{"entry":[{},"This function is used in"]},{"entry":[{},"texture coordinate generation"]},{"entry":[{},"from view space position,"]},{"entry":[{},"so the precision and range is"]},{"entry":[{},"different from"]},{"entry":[{},"DivWW_SFIX32 above."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0142","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Backface testing"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BOOL Backface_SFIX32(SFIX32* a, SFIX32* b, SFIX32* c,"]},{"entry":[{},"BOOL bCCW)"]},{"entry":[{},"This function checks if the triangle (a, b, c) is a"]},{"entry":[{},"back face."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a, b, c"]},{"entry":[{},{},"3 sequential vertex"]},{"entry":[{},{},"of an triangle, they"]},{"entry":[{},{},"are in SFIX32Quad"]},{"entry":[{},{},"with NHCS representation"]},{"entry":[{},{},"bCCW"]},{"entry":[{},{},"Face orientation, TRUE"]},{"entry":[{},{},"for CCW, FALSE for CW"]},{"entry":[{},"Return value","BOOL, TRUE for back face,"]},{"entry":[{},{},"FALSE for non-back face."]},{"entry":[{},"Remarks","There is a sequential"]},{"entry":[{},{},"multiplication of 3 operands."]},{"entry":[{},{},"NHCS is used to compress"]},{"entry":[{},{},"the operand from 32-bits to"]},{"entry":[{},{},"16-bits since we only"]},{"entry":[{},{},"need the sign."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"View frustum culling removes the triangles whose vertices are outside of one view frustum plane. View frustum involves 6 planes:\n\n","A UFIX8 is set to hold 6 flags for culling.  illustrates an exemplary implementation of a buffer to store culling planes. In particular,  shows an UFIX8 format buffer to store the culling planes. View frustum culling is performed in clip space. If it is assumed that b is a NHCS coordinate in the clip space, the algorithm is:",{"@attributes":{"id":"p-0145","num":"0195"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SFIX32Quad b; \/\/ NHCS clip space coordinates"]},{"entry":[{},"UFIX8 f=0;"]},{"entry":[{},"if (b[0]<\u2212b[3])"]},{"entry":[{},"\u2003f |= 0x01;"]},{"entry":[{},"else if (b[0]> b[3])"]},{"entry":[{},"\u2003\u2003f |= 0x02;"]},{"entry":[{},"if (b[1]<\u2212 b[3])"]},{"entry":[{},"\u2003f |= 0x04;"]},{"entry":[{},"else if (b[1]> b[3])"]},{"entry":[{},"\u2003\u2003f |= 0x08;"]},{"entry":[{},"if (b[2]<0)"]},{"entry":[{},"\u2003f |= 0x10;"]},{"entry":[{},"else if (b[2]> b[3])"]},{"entry":[{},"\u2003\u2003f |=\u20030x20;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If three flags for each vertex are obtained, an \u201cAND\u201d operation can be used to test whether the flags are outside of the same plane.","The flag is also useful in the vertex cache, and the 2 unused bits will indicate:\n\n","The direct3D for mobile supports both directional light and point light. The lighting model used is the Phong model for vertices. Lighting is done in model space. A material should be assigned to the object, and the ambient, diffuse, specular, power property is denoted as M, M, Mand Mrespectively. In D3D, M, M, Mare defined as (r, g, b, a), and each component is a float within [0\u02dc1].","Each component only need be represented as:",{"@attributes":{"id":"p-0150","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Lighting component","UFIX8","8 bits mantissa"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The color of lighting is noted as L, Land L. Given normalized vectors N, L and V, which represent vertex normal, vertex-light direction and vertex-view direction respectively, the color of a vertex can be calculated as:\n\n()+()\n",{"@attributes":{"id":"p-0152","num":"0204"},"figref":["FIGS. 10A","FIG. 10A","FIG. 10B"]},"All the vectors are transformed to the same space for \u201cdot product\u201d computation, and are normalized for calculation. In this implementation, the model space for saving the transformation of each vertex normal to view space was chosen. However, this choice also brings problems if the model transform contains shears and scaling. Although lighting in model space is discussed here, it is easy to extend the discussion to other spaces. Both lit in model space and lit in view space are supported in the rendering pipeline of the NHCS graphics rendering system.",{"@attributes":{"id":"p-0154","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SFIX32 TripleInvLen(SFIX16Triple a)"},{"entry":"This function gives the invert length of a SFIX16Triple, which is useful in"},{"entry":"normalize"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","a"]},{"entry":[{},"Un-normalized input"]},{"entry":[{},"in SFIX16 in NHCS"]},{"entry":["Return value","Invert length in SFIX32"]},{"entry":["Remarks","Assume a is a n-bits mantissa,"]},{"entry":[{},"the result is of 42 \u2212 n bits"]},{"entry":[{},"mantissa. It does not matter"]},{"entry":[{},"if 42 \u2212 n > 32, because the"]},{"entry":[{},"calculation does not use n"]},{"entry":[{},"explicitly."]},{"entry":[{},"Newton's iteration method"]},{"entry":[{},"is used here for solving the"]},{"entry":[{},"invert square root, using"]},{"entry":[{},"a 256-item lookup table."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0155","num":"0207"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Void Normaliz _SFIX16Triple(SFIX16Triple a, SFIX16Triple b)"},{"entry":"This function normalizes a NHCS SFIX16Triple."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","a"]},{"entry":[{},"Un-normalized input"]},{"entry":[{},"in SFIX16 in NHCS"]},{"entry":[{},"b"]},{"entry":[{},"Normalized output in SFIX16"]},{"entry":[{},"format with NORMAL_SFIX16"]},{"entry":[{},"mantissa"]},{"entry":["Return value","No return value"]},{"entry":["Remarks","We use SFIX32 to hold the"]},{"entry":[{},"intermediate TripleInvLen(\u2009)"]},{"entry":[{},"result to prevent overflow"]},{"entry":[{},"and keep precision."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0156","num":"0208"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Void NagNormalize_SFIX16Triple(SFIX16Triple a, SFIX16Triple b)"},{"entry":"This function gives a negative result to Normalize_SFIX16Triple"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","A"]},{"entry":[{},"Un-normalized input"]},{"entry":[{},"in SFIX16 in NHCS"]},{"entry":[{},"b"]},{"entry":[{},"Normalized output in SFIX16"]},{"entry":[{},"format with NORMAL_SFIX16"]},{"entry":[{},"mantissa"]},{"entry":["Return value","No return value"]},{"entry":["Remarks","We use SFIX32 to hold the"]},{"entry":[{},"intermediate TripleInvLen(\u2009)"]},{"entry":[{},"result to prevent overflow."]},{"entry":[{},"It is used in normalization"]},{"entry":[{},"of directional light. Gives a"]},{"entry":[{},"normal L from vertex to"]},{"entry":[{},"lighting source."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0157","num":"0209"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Void SubNorm_SFIX32Quad (SFIX32Quad a, SFIX32Quad b,"},{"entry":"SFIX16Triple c)"},{"entry":"This function calculates normal from subtraction of two NHCS vectors."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","a, b"]},{"entry":[{},"Input vectors in SFIX32"]},{"entry":[{},"with NHCS format"]},{"entry":[{},"c"]},{"entry":[{},"Normalized (a \u2212 b) in SFIX16"]},{"entry":[{},"with NORMAL_SFIX16 bits"]},{"entry":[{},"mantissa"]},{"entry":["Return value","No return value"]},{"entry":["Remarks","It is used in normalization"]},{"entry":[{},"of view direction V and light"]},{"entry":[{},"direction L when using point"]},{"entry":[{},"light."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0158","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UFIX16 Dot_SFIX16Triple(SFIX16Triple a,"]},{"entry":[{},"SFIX16Triple b)"]},{"entry":[{},"This function returns the dot product of two"]},{"entry":[{},"normalized vector"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a, b"]},{"entry":[{},{},"Normalized input in SFIX16"]},{"entry":[{},{},"with DEFAULT_SFIX16 bits"]},{"entry":[{},{},"mantissa."]},{"entry":[{},"Return value","Dot product with ONE_UFIX16"]},{"entry":[{},{},"bits mantissa"]},{"entry":[{},"Remarks","If the two vectors are normalized,"]},{"entry":[{},{},"there will no overflow at"]},{"entry":[{},{},"all because the result will"]},{"entry":[{},{},"be within (0~1)."]},{"entry":[{},{},"Value that less than 0 is clamped to 0."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0159","num":"0211"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UFIX16 Power_UFIX16 (UFIX16 a, UFIX8 n)"]},{"entry":[{},"This function returns the power(a, n)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a"]},{"entry":[{},{},"Power base with ONE_UFIX16"]},{"entry":[{},{},"bits mantissa."]},{"entry":[{},{},"n"]},{"entry":[{},{},"Power exponential within 0~127"]},{"entry":[{},"Return value","Power value with UFIX16 format"]},{"entry":[{},"Remarks","We use the efficient digit"]},{"entry":[{},{},"of n to determine how much"]},{"entry":[{},{},"multiply we need."]},{"entry":[{},{},"In rendering pipeline the n"]},{"entry":[{},{},"can be fixed. We use static"]},{"entry":[{},{},"variables to store the n and"]},{"entry":[{},{},"its efficient digit. If n is the"]},{"entry":[{},{},"same in the consequential calling,"]},{"entry":[{},{},"the efficient digit will be"]},{"entry":[{},{},"same as previous one instead of"]},{"entry":[{},{},"calculated again."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The half vector is used to approximate the actual cos \u03b8=(V\u00b7R) by cos \u03c8=(N\u00b7H) for calculating the specular component. H can be calculated by the normalized L and V:",{"@attributes":{"id":"p-0161","num":"0213"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"H","mo":"=","mfrac":{"mrow":[{"mi":["L","V"],"mo":"+"},{"mrow":{"mi":["L","V"],"mo":"+"},"mo":"|"}]}}}}},"L and V are represented by SFIX16Triple with NORMAL_SFIX16 bits mantissa. To avoid overflow and keep precision, they are first added together as a SFIX32Triple. Next, the half vector H is made in NHCS SFIX16Triple, and H then is normalized.","Texture Coordinate Generation","Texture coordinate generation uses view space normal\/position\/reflection to generate the texture coordinates in each vertex. View space normal and position is available after lighting in view space. However, reflection vectors need to be calculated here.",{"@attributes":{"id":"p-0164","num":"0216"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Void CalcR_SFIX16Triple(SFIX16Triple norm, SFIX16Triple view,"},{"entry":"SFIX16Triple reflect)"},{"entry":"This function calculates reflection vector from normal"},{"entry":"and view"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","Norm"]},{"entry":[{},"normalized normal in"]},{"entry":[{},"SFIX16, NORMAL_SFIX16"]},{"entry":[{},"view"]},{"entry":[{},"normalized view direction"]},{"entry":[{},"in SFIX16, NORMAL_SFIX16"]},{"entry":[{},"reflect"]},{"entry":[{},"Normalized output in SFIX16"]},{"entry":[{},"format with NORMAL_SFIX16"]},{"entry":[{},"mantissa"]},{"entry":["Return value","No return value"]},{"entry":["Remarks","R = 2(N \u00b7 V)N \u2212 V"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The model-view transform and view-projective transform can be combined into a 4\u00d74 matrix :",{"@attributes":{"id":"p-0166","num":"0218"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mi":"x"},{"mi":"y"},{"mi":"z"},{"mn":"1"}]}}},"mo":"\u2062","msub":{"mi":"P","mrow":{"mn":["4","4"],"mo":"\u00d7"}}},{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mrow":{"mfrac":{"msub":[{"mi":["x","p"]},{"mi":["w","p"]}]},"mo":"\u2062","msub":{"mi":["w","p"]}}},{"mrow":{"mfrac":{"msub":[{"mi":["y","p"]},{"mi":["w","p"]}]},"mo":"\u2062","msub":{"mi":["w","p"]}}},{"mrow":{"mfrac":{"msub":[{"mi":["z","p"]},{"mi":["w","p"]}]},"mo":"\u2062","msub":{"mi":["w","p"]}}},{"msub":{"mi":["w","p"]}}]}}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}}},"The term",{"@attributes":{"id":"p-0168","num":"0220"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mfrac":{"msub":[{"mi":["x","p"]},{"mi":["w","p"]}]},"mo":"=","msub":{"mi":["x","w"]}}}},"br":{}},{"@attributes":{"id":"p-0169","num":"0221"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mo":["(",")"],"mrow":{"mfrac":{"mn":"1","msub":{"mi":["w","p"]}},"mo":"\u2062","msubsup":{"mi":"P","mrow":[{"mn":["4","4"],"mo":"\u00d7"},{"mo":"-","mn":"1"}]}}},"mo":","}}},"br":{}},{"@attributes":{"id":"p-0170","num":"0222"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mfrac":{"mi":"x","msub":{"mi":["w","p"]}}},{"mfrac":{"mi":"y","msub":{"mi":["w","p"]}}},{"mfrac":{"mi":"z","msub":{"mi":["w","p"]}}},{"mfrac":{"mn":"1","msub":{"mi":["w","p"]}}}]}}},{"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"msub":{"mi":["x","w"]}},{"msub":{"mi":["y","w"]}},{"msub":{"mi":["z","w"]}},{"mn":"1"}]}}},"mo":"\u2062","msubsup":{"mi":"P","mrow":[{"mn":["4","4"],"mo":"\u00d7"},{"mo":"-","mn":"1"}]}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"2"}}]}}}}},"Equation (2) is a linear equation, which indicates that 1\/wp can be linearly interpolated. Given three vertices and three texture coordinates: (1) and (1) (i=1,2,3) for a triangle, there exists an affine transform which maps texture coordinates to object space, if the triangle is not degenerated:\n\n(1)=(1)\u2003\u2003(3)\n","Combining (3) and (1), both sides are divided by the wp, and thus:",{"@attributes":{"id":"p-0173","num":"0225"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mfrac":{"mi":"u","msub":{"mi":["w","p"]}}},{"mfrac":{"mi":"v","msub":{"mi":["w","p"]}}},{"mfrac":{"mn":"1","msub":{"mi":["w","p"]}}}]}}},"mo":"\u2062","mi":"B"},{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"msub":{"mi":["x","w"]}},{"msub":{"mi":["y","w"]}},{"msub":{"mi":["z","w"]}},{"mn":"1"}]}}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"4"}}]}}}},"br":{},"sup":["B=A",{"sub2":"3\u00d74 "},"P",{"sub2":"4\u00d74 "}]},"Equation (4) indicates u\/wp, v\/wp can be interpolated linearly. For perspective-correct texture mapping, after linearly interpolating u\/wp, v\/wp and 1\/wp, the correct texture coordinates can be computed for projective-correct texture mapping.","The algorithm for interpolating between two points is:\n\n","The intersection point () will satisfy:",{"@attributes":{"id":"p-0177","num":"0231"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mo":"\u2003","mrow":{"mo":"{","mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":["x","w"]},"mo":"=","mrow":{"mrow":[{"msub":[{"mi":["x","p"]},{"mi":["w","p"]}],"mo":"\/"},{"mrow":[{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\/"},{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\/"},{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\/"}],"mo":"-"}},"mo":"\u2062","mi":"t"}],"mo":"+"},{"msub":{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"w"}},"mo":"+","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"w"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"w"}}],"mo":"-"}},"mo":"\u2062","mi":"t"}}],"mo":"="}],"mo":"="}}}},{"mtd":{"mrow":{"msub":{"mi":["y","w"]},"mo":"=","mrow":{"mrow":[{"msub":[{"mi":["y","p"]},{"mi":["w","p"]}],"mo":"\/"},{"mrow":[{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\/"},{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\/"},{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\/"}],"mo":"-"}},"mo":"\u2062","mi":"t"}],"mo":"+"},{"msub":{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"w"}},"mo":"+","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"w"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"w"}}],"mo":"-"}},"mo":"\u2062","mi":"t"}}],"mo":"="}],"mo":"="}}}},{"mtd":{"mrow":{"msub":{"mi":["z","w"]},"mo":"=","mrow":{"mrow":[{"msub":[{"mi":["z","p"]},{"mi":["w","p"]}],"mo":"\/"},{"mrow":[{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\/"},{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\/"},{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\/"}],"mo":"-"}},"mo":"\u2062","mi":"t"}],"mo":"+"},{"msub":{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"w"}},"mo":"+","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"w"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"w"}}],"mo":"-"}},"mo":"\u2062","mi":"t"}}],"mo":"="}],"mo":"="}}}},{"mtd":{"mrow":{"mrow":[{"mn":"1","mo":"\/","msub":{"mi":["w","p"]}},{"mrow":[{"mn":"1","mo":"\/","msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}},{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mn":"1","mo":"\/","msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}},{"mn":"1","mo":"\/","msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}}],"mo":"-"}},"mo":"\u2062","mi":"t"}],"mo":"+"}],"mo":"="}}}]}}}}},"br":{}},{"@attributes":{"id":"p-0178","num":"0232"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"w"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"w"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"w"}}],"mo":["+","+","+","+"],"mi":"d","mrow":{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":"a","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"w"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"w"}}],"mo":"-"}}},{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"w"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"w"}}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"w"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"w"}}],"mo":"-"}}}],"mo":["+","+"]}},"mo":"\u2062","mi":"t"}},"mo":"=","mn":"0"}}},{"mtd":{"mrow":{"mi":"t","mo":"=","mfrac":{"mrow":[{"mo":"-","mrow":{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"mi":"a","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}},"mo":["+","+","+"],"msub":[{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}]}}}},{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":"-"}]}}}},{"mtd":{"mrow":{"mi":"Then","mo":"\u2062","mstyle":{"mtext":":"}}}},{"mtd":{"mrow":{"mrow":[{"mn":"1","mo":"\/","msub":{"mi":["w","p"]}},{"mrow":[{"mn":"1","mo":"\/","msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}},{"mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mn":"1","mo":"\/","msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}},{"mn":"1","mo":"\/","msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}}],"mo":"-"}},"mo":"\u2062","mi":"t"}],"mo":"+"}],"mo":"="}}},{"mtd":{"mrow":{"mstyle":{"mspace":{"@attributes":{"width":"3.3em","height":"3.3ex"}}},"mo":"\u2062","mrow":{"mo":"=","mrow":{"mfrac":[{"mn":"1","msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}},{"mrow":[{"mrow":[{"mo":"-","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"-"}}},{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+","+"]}}],"mo":"\u2062"},{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":"-"}}}]}],"mo":"+"}}}}},{"mtd":{"mrow":{"mstyle":{"mspace":{"@attributes":{"width":"3.3em","height":"3.3ex"}}},"mo":"\u2062","mrow":{"mo":"=","mfrac":{"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":["-","-"]}}},{"mtd":{"mrow":{"mrow":[{"mo":["(",")"],"mrow":{"msub":[{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"-"}},{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+","+"]}}],"mo":"\u2062"}}}]},"mrow":{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":"-"}}}}}}}},{"mtd":{"mrow":{"mstyle":{"mspace":{"@attributes":{"width":"3.3em","height":"3.3ex"}}},"mo":"\u2062","mrow":{"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"a","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"-"}}},{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"-"}}},{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"-"}}}],"mo":["+","+","+"]},{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":"-"}]}}}}},{"mtd":{"mrow":{"mi":"And","mo":","}}},{"mtd":{"mrow":{"msub":{"mi":["x","w"]},"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]},{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":"-"}]}}}},{"mtd":{"mrow":{"msub":{"mi":["y","w"]},"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"a","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]},{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":"-"}]}}}},{"mtd":{"mrow":{"msub":{"mi":["z","w"]},"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"a","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]},{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":["+","+"]}}}],"mo":"-"}]}}}}]}}},"br":[{},{},{}],"in-line-formulae":[{},{}],"i":["x","y",", z",", w","c","c","c","w","x",", y",", z",", w"],"sub":["np","np","np","np","w","v","p","nm","p","p","p","p"]},{"@attributes":{"id":"p-0179","num":"0233"},"maths":{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":[",",",",","]}},{"mfrac":{"mn":"1","mrow":{"msub":[{"mi":"c","mn":"1"},{"mi":"w","mrow":{"mn":"1","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}],"mo":"\u2062"}},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":[",",",",","]}}}],"mo":"="}}},{"mtd":{"mrow":{"mrow":[{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}}],"mo":[",",",",","]}},{"mfrac":{"mn":"1","mrow":{"msub":[{"mi":"c","mn":"2"},{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}],"mo":"\u2062"}},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":[",",",",","]}}}],"mo":"="}}}]}}}},"Thus, the final representation of (, 1\/w) becomes:",{"@attributes":{"id":"p-0181","num":"0235"},"maths":{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":{"mn":"1","mo":"\/","msub":{"mi":["w","p"]}},"mo":"=","mfrac":{"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":{"mi":"c","mn":"1"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"1","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}},"mo":"-"}}},{"mtd":{"mrow":{"msub":{"mi":"c","mn":"2"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}}}}]},"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}}],"mo":"-"}}}}},{"mtd":{"mrow":{"msub":{"mi":["x","w"]},"mo":"=","mfrac":{"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]}}},{"mtd":{"mrow":{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}}}]},"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}}],"mo":"-"}}}}},{"mtd":{"mrow":{"msub":{"mi":["y","w"]},"mo":"=","mfrac":{"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"a","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]}}},{"mtd":{"mrow":{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}}}]},"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}}],"mo":"-"}}}}},{"mtd":{"mrow":{"msub":{"mi":["z","w"]},"mo":"=","mfrac":{"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"a","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]}}},{"mtd":{"mrow":{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}}}]},"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}}],"mo":"-"}}}}}]}}},"br":{},"sup":["x",{"sub2":"p"},", y",{"sub2":"p"},", z",{"sub2":"p"},", w",{"sub2":"p"}]},{"@attributes":{"id":"p-0182","num":"0236"},"maths":{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":["w","p"]},"mo":"=","mfrac":{"mrow":{"mrow":[{"msub":{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+"]}}}],"mo":"-"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":{"mi":"c","mn":"1"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"1","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}},"mo":"-"}}},{"mtd":{"mrow":{"msub":{"mi":"c","mn":"2"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}}}}]}}}}},{"mtd":{"mrow":{"msub":{"mi":["x","p"]},"mo":"=","mfrac":{"mtable":[{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]}}},{"mtd":{"mrow":{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}}}]},{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":{"mi":"c","mn":"1"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"1","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}},"mo":"-"}}},{"mtd":{"mrow":{"msub":{"mi":"c","mn":"2"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}}}}]}]}}}},{"mtd":{"mrow":{"msub":{"mi":["y","p"]},"mo":"=","mfrac":{"mtable":[{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"c","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]}}},{"mtd":{"mrow":{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}}}]},{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":{"mi":"c","mn":"1"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"1","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}},"mo":"-"}}},{"mtd":{"mrow":{"msub":{"mi":"c","mn":"2"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}}}}]}]}}}},{"mtd":{"mrow":{"msub":{"mi":["z","p"]},"mo":"=","mfrac":{"mtable":[{"mtr":[{"mtd":{"mrow":{"mrow":[{"mi":"a","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"x","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}},{"mi":"b","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"y","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}],"mo":["+","+"]}}},{"mtd":{"mrow":{"mi":"d","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"msub":[{"mi":"z","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":"\u2062"},{"msub":[{"mi":"z","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":"\u2062"}],"mo":"-"}}}}}]},{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":{"mi":"c","mn":"1"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"1","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}},"mo":"-"}}},{"mtd":{"mrow":{"msub":{"mi":"c","mn":"2"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}}}}]}]}}}}]}}}},"In case the new intersection point will participate in further clipping, it can be written in NHCS form:\n\n()+()+()\n\n()+()+()\n\n()+()+()\n\n()\u2212()\n\nAnd\n\n()\u2212()\n","Here, C is the shifted bits and w is the weight, and the interpolate parameter is:",{"@attributes":{"id":"p-0185","num":"0239"},"maths":{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":["T","p"]},"mo":["=","\u2062"],"mi":{},"mfrac":{"mrow":[{"msub":[{"mi":["w","p"]},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"-"},{"msub":[{"mi":"w","mrow":{"mn":"2","mo":"\u2062","mi":"p"}},{"mi":"w","mrow":{"mn":"1","mo":"\u2062","mi":"p"}}],"mo":"-"}]}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":{},"mfrac":{"mrow":{"mrow":[{"mo":"-","msub":{"mi":"c","mn":"2"}},{"msub":{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}],"mo":"\u2062"},"mtable":{"mtr":[{"mtd":{"mrow":{"mrow":{"msub":{"mi":"c","mn":"1"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"1","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"2","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"2","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}},"mo":"-"}}},{"mtd":{"mrow":{"msub":{"mi":"c","mn":"2"},"mo":"\u2062","mrow":{"msub":{"mi":"w","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["n","m"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"ax","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"by","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"cz","mrow":{"mn":"1","mo":"\u2062","mi":"np"}},{"mi":"dw","mrow":{"mn":"1","mo":"\u2062","mi":"np"}}],"mo":["+","+","+"]}}}}}}]}}}}}]}}},"br":{}},"There are some functions that have not been discussed in the previous sections. These functions include: (1) NHCS functions that perform NHCS conversion; and (2) EffiDigit functions that calculates efficient digit of an integer. These functions will now be discussed.",{"@attributes":{"id":"p-0187","num":"0241"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UFIX8 EffiDigit_UFIX8(UFIX8 a)"]},{"entry":[{},"This function calculates efficient digits in an"]},{"entry":[{},"UFIX8 integer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a"]},{"entry":[{},{},"Input integer, unsigned 8-"]},{"entry":[{},{},"bits integer in UFIX8 format"]},{"entry":[{},"Return value","Efficient digit of the integer,"]},{"entry":[{},{},"which equals ceil(log(abs(a)) in"]},{"entry":[{},{},"UFIX8 format."]},{"entry":[{},"Remarks","Using Bisearch algorithm"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0188","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UFIX8 EffiDigit_SFIX32(SFIX32 a)"]},{"entry":[{},"This function calculates efficient digits in an"]},{"entry":[{},"SFIX32 integer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a"]},{"entry":[{},{},"Input integer, signed"]},{"entry":[{},{},"32-bits integer in SFIX32 format"]},{"entry":[{},"Return value","Efficient digit of the integer,"]},{"entry":[{},{},"which equals ceil(log(abs(a)) in"]},{"entry":[{},{},"UFIX8 format."]},{"entry":[{},"Remarks","Using Bisearch algorithm"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0189","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UFIX8 EffiDigit_SFIX64(SFIX64 a)"]},{"entry":[{},"This function calculates efficient digits in an"]},{"entry":[{},"SFIX64 integer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a"]},{"entry":[{},{},"Input integer, signed 64-bits"]},{"entry":[{},{},"integer in SFIX64 format"]},{"entry":[{},"Return value","Efficient digit of the integer,"]},{"entry":[{},{},"which equals ceil(log(abs(a)) in"]},{"entry":[{},{},"UFIX8 format."]},{"entry":[{},"Remarks","Using Bisearch algorithm"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0190","num":"0244"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int NHCS_SFIX64Quad (SFIX64Quad a, SFIX32Quad b)"]},{"entry":[{},"This functions convert from non-NHCS to NHCS"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a"]},{"entry":[{},{},"Input integers, signed 64-bits"]},{"entry":[{},{},"Quad, in SFIX64Quad format."]},{"entry":[{},{},"b"]},{"entry":[{},{},"Output integers, signed 32-bits"]},{"entry":[{},{},"Quad, in SFIX32Quad, NHCS"]},{"entry":[{},{},"format."]},{"entry":[{},"Return value","An integer records shift bits"]},{"entry":[{},{},"from 64-bit non-NHCS to 32-bit"]},{"entry":[{},{},"NHCS."]},{"entry":[{},"Remarks","NHCS_SFIX64Quad is used"]},{"entry":[{},{},"in transform. In transform,"]},{"entry":[{},{},"we need not shift when"]},{"entry":[{},{},"efficient digits of maximum"]},{"entry":[{},{},"component are less than"]},{"entry":[{},{},"storage bits."]},{"entry":[{},{},"In clip space has either"]},{"entry":[{},{},"NHCS or non-NHCS, For"]},{"entry":[{},{},"recovering the correct w,"]},{"entry":[{},{},"it needs to record the shift"]},{"entry":[{},{},"bits."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0191","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Void NHCS_SFIX64Triple(SFIX64Triple a,"]},{"entry":[{},"SFIX16Triple b)"]},{"entry":[{},"This functions perform NHCS conversion"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a"]},{"entry":[{},{},"Input integers, signed"]},{"entry":[{},{},"64-bits Triple, non-NHCS"]},{"entry":[{},{},"b"]},{"entry":[{},{},"output integers, signed"]},{"entry":[{},{},"16-bits Triple, NHCS"]},{"entry":[{},"Return value","No return value"]},{"entry":[{},"Remarks","NHCS_SFIX64Triple is"]},{"entry":[{},{},"used in lighting before"]},{"entry":[{},{},"normalization. Either"]},{"entry":[{},{},"efficient digit of maximum"]},{"entry":[{},{},"component is less than"]},{"entry":[{},{},"storage bits or not, we"]},{"entry":[{},{},"need shift to preserve"]},{"entry":[{},{},"precision."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0192","num":"0246"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Void NHCS_SFIX64Triple(SFIX32Triple a,"]},{"entry":[{},"SFIX16Triple b)"]},{"entry":[{},"This functions perform NHCS conversion"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters","a"]},{"entry":[{},{},"Input integers, signed"]},{"entry":[{},{},"32-bits Triple, non-NHCS"]},{"entry":[{},{},"b"]},{"entry":[{},{},"output integers, signed"]},{"entry":[{},{},"16-bits Triple, NHCS"]},{"entry":[{},"Return value","No return value"]},{"entry":[{},"Remarks","NHCS_SFIX32Triple is"]},{"entry":[{},{},"used in lighting before"]},{"entry":[{},{},"normalization. Either"]},{"entry":[{},{},"efficient digit of maximum"]},{"entry":[{},{},"component is less than"]},{"entry":[{},{},"storage bits or not, we"]},{"entry":[{},{},"need shift to preserve"]},{"entry":[{},{},"precision."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The foregoing description of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description of the invention, but rather by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention can be further understood by reference to the following description and attached drawings that illustrate aspects of the invention. Other features and advantages will be apparent from the following detailed description of the invention, taken in conjunction with the accompanying drawings, which illustrate, by way of example, the principles of the present invention.","Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIGS. 1 and 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 7","FIGS. 1 and 3"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 8","FIGS. 1 and 3"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 10A"}]},"DETDESC":[{},{}]}
