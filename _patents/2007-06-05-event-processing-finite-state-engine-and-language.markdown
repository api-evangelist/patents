---
title: Event processing finite state engine and language
abstract: In various embodiments, a method for processing event streams includes receiving a finite state machine defined in response to a set of processing components, a set of states, and a set of entry points. Event data associated with an event stream is also received. The event data is processes according to the finite state machine to generate an event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099737&OS=08099737&RS=08099737
owner: Oracle International Corporation
number: 08099737
owner_city: Redwood Shores
owner_country: US
publication_date: 20070605
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present disclosure may be related to the following commonly assigned applications\/patents:","This application is related to co-pending U.S. patent application Ser. No. 11\/685,655 filed Mar. 13, 2007 and entitled \u201cVirtualization and Quality of Data;\u201d","This application is related to co-pending U.S. patent application Ser. No. 11\/685,673 filed Mar. 13, 2007 and entitled \u201cReal-Time and Offline Location Tracking Using Passive RFID Technologies;\u201d","This application is related to co-pending U.S. patent application Ser. No. 11\/758,538, filed Jun. 5, 2007 and entitled \u201cRFID Key Rotation System;\u201d","This application is related to co-pending U.S. patent application Ser. No. 11\/758,532, filed Jun. 5, 2007 and entitled \u201cRFID and Sensor Signing System;\u201d and","This application is related to co-pending U.S. patent application Ser. No. 11\/871,829, filed Oct. 12, 2007 and entitled \u201cIndustrial Identify Encoding and Decoding Language,\u201d the respective disclosures of these applications\/patents are incorporated herein by reference in their entirety for all purposes.","Embodiments of the present invention generally relate to Radio Frequency Identification (RFID) applications. More specifically, embodiments of the present invention relate to techniques for processing events using a finite state engine.","Radio Frequency Identification (RFID) is an automatic identification method which relies on the storing and remotely retrieving of data using devices, such as RFID tags or transponders. RFID tags or transponders are also known as proximity, proxy, or contactless cards, because data from an RFID tag can be retrieved without physical contact. Generally, a device, such as an RFID reader, uses radio waves to remotely retrieve a unique identifier stored using the RFID tag when the RFID tag is within proximity of the RFID reader. RFID tags can be attached to or incorporated into a product, animal, or person for the purpose of identification by the RFID reader. RFID readers can be placed on doorways, in train cars, over freeways, mounted on vehicles, and also can be embodied in mobile handheld devices.","RFID technologies have been traditionally implemented in different ways by different manufacturers, although global standards are being developed. Thus, computer applications using RFID are also typically hard-coded to specific RFID devices sold by the same manufacture. One problem with this arrangement is that these computer applications have traditionally been limited to using only the sensor data retrieved from the vendor supplied RFID readers.","Moreover, in order to provide automated shipping and receiving, real-time inventory, automated shipping and received, and real-time security, other types of RFID sensor devices, such as environment sensors (e.g., temperature and humidity sensors), location sensors (e.g., Global Positioning System or GPS devices), and notification devices, may be required. Accordingly, with the addition of each sensor device, a specific application may be required to access the sensor data from the sensor device. This vendor lock-in leads to having too many non-integrated applications, creates unnecessary complexity, and also increases costs associated with the management and deployment of RFID technologies.","One solution is to embed the sensor device with the RFID tag. For example, one cold chain solution provides an RFID tag embedded with a temperature sensor. Cold chain refers to a temperature-controlled supply chain. An unbroken cold chain is an uninterrupted series of storage and distribution activities which maintain a given temperature range. A reader can read both the identifier of the RFID as well as the temperature from the embedded sensor.","However, by embedding sensors with RFID tags, the cost, and complexity associated with each RFID tag increase. Furthermore, computer applications configured to read the sensor data are still tied directly to specific RFID readers. Thus, the only items for which sensor data can be used from those applications are still those that can be tagged and directly sensed using the specific vendor supplied RFID readers.","Accordingly, what is desired are improved methods and apparatus for solving the problems discussed above, while reducing the drawbacks discussed above.","Embodiments of the present invention generally relate to Radio Frequency Identification (RFID) applications. More specifically, embodiments of the present invention relate to techniques for processing events using a finite state engine.","In various embodiments, a method for processing event streams includes receiving a finite state machine defined in response to a set of processing components, a set of states, and a set of entry points. Event data associated with an event stream is also received. The event data is processes according to the finite state machine to generate an event.","In some embodiments, the set of processing components may be received. Each of the processing components may include one or more operations. The one or more operations may include at least one of a logical operation, an arithmetic operation, a binary operation, and a compare operation. In one embodiment, the set of states is received. Each of the states may identify one or more relationships between a first processing component and a second processing component.","In various embodiments, the set of entry points is received. Each entry point may identify one or more states as start states associated with the finite state machine. The finite state machine may be generated based on the set of processing components, the set of states, and the set of entry points.","In some embodiments, a system for processing event streams includes a processor and a memory. The memory is coupled to the processor and configured to store a plurality of code modules which when executed by the processor cause the processor to receive a finite state machine defined in response to a set of processing components, a set of states, and a set of entry points, receive event data associated with an event stream, and process the event data according to the finite state machine to generate an event.","In further embodiments, a computer program product is stored on a computer readable medium for processing event streams. The computer program product includes code for receiving a finite state machine defined in response to a set of processing components, a set of states, and a set of entry points, code for receiving event data associated with an event stream, and code for processing the event data according to the finite state machine to generate an event.","A further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.","Embodiments of the present invention generally relate to sensor technologies and more specifically to techniques for virtualization and quality of sensor data. In order to better understand the present invention, aspects of the environment within which the invention operates will first be described.","In order to better understand the present invention, aspects of the environment within which various embodiments operate will first be described.","Collection of Sensor Data","In various embodiments, methods and systems for collection of sensor data that may incorporate embodiments of the present invention augment enterprise software with RFID and sensor technologies. The methods and systems generally provides a faster reasons loop, greater visibility, an extensible framework, and scalability for the collection of sensor data from a variety of sensor devices and the processing of sensor data by a variety of applications. The systems typically can be deployed in locations where sensor devices can provide better insight into business processes.","In various embodiments, the methods and systems provide localized management and control of sensor devices through an extensible framework and interface. The methods and systems can funnel data sensor and environment data from RFID readers and sensor device, typically located at the periphery of an enterprise, for access by core applications.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIG. 1"],"b":"100"},"As shown in , system  includes sensor devices , middleware , and applications . Middleware  is communicatively coupled to sensor devices  and to applications . Middleware  includes sensor devices interface , data management services , analysis service , and access services .","Sensor devices  include contactless cards, transponders, RFID tags, smart labels, fixed interrogators\/readers, mobile readers, handheld readers, image capture devices, video captures devices, audio capture devices, environmental sensing devices (e.g., temperature, humidity, and air pressure sensors), location information devices (e.g., Global Positioning System), weight sensing devices, notification and alert generation devices, and the like. One example of an RFID tag is described further with respect to . One example of an RFID reader is described further with respect to . In some embodiments, sensor devices  include hardware and\/or software elements that respond to external input from middleware  to perform actions, manipulate objects, and the like.","In general, middleware  includes hardware and\/or software elements that provide an interface for using sensor devices . In this example, middleware  includes sensor devices interface , data management services , analysis service , and access services .","Sensor devices interface  includes hardware and\/or software elements that communicate with sensor devices . One example of sensor devices interface  is Oracle's Application Server: Sensor Edge Server from Oracle Corporation, Redwood Shores, Calif. In various embodiments, sensor devices interface  receives sensor data from sensor devices . In some embodiments, sensor devices interface  communicates with one or more of sensor devices  to provide external input from middleware  to cause the one or more of sensor devices  to display notifications and alerts, and to perform responses, actions, or activities (e.g., control a conveyor belt or robot).","In general, sensor data is any information, signal, communication, and the like, received from sensor devices . Some examples of sensor data are unique, or semi-unique identifiers associated with RFID tags, temperature information received from a temperature sensor, data and information associated with humidity and pressure, position and location information, still-image data, video sequence data, motion picture data, audio data, and the like.","Data management services  include hardware and\/or software elements that provide storage of and access to collected sensor data. Some examples of data management services  include databases, storage arrays, storage area networks, network attached storage, data security devices, data management devices, and the like.","Analysis services  include hardware and\/or software elements that provide analysis of collected sensor data. Some examples of analysis which may be performed by analysis services  include business intelligence, business process management, inventory management, distribution and supply chain management, accounting, reporting, and the like.","Access services  include hardware and\/or software elements that provide access to features of middleware . In various embodiments, access services  include hardware and\/or software elements that manage sensor devices  through sensor devices interface . In some embodiments, access services  include hardware and\/or software elements provide access to sensor data via data management services . In some embodiments, access services  include hardware and\/or software elements that provide access to analysis services . For example, in various embodiments, access services  provides one or more users or computer processes with a portal using web services to access sensor data from analysis services  and data management services . In further embodiments, access services  allows the one or more users or computer processes to initiate or coordinate actions or activities using sensor devices  through sensor devices interface .","Applications  include hardware and\/or software elements that access sensor data and\/or control sensor devices  through middleware . Some examples of applications  are Oracle's E-Business Suite, PeopleSoft Enterprise, and JD Edwards Enterprise from Oracle Corporation, Redwood Shores, Calif.","In one example of operation, system  collects sensor data from one or more of sensor devices  (e.g., an RFID reader). For example, a plurality of RFID readers detect the presents of a plurality of RFID tags at various times during the movement of objects in a warehouse or at locations in a supply-chain.","In this example, middleware  collects the sensor data via sensor devices interface , and stores the sensor data using data management services . Middleware  provides access and analysis of collected and stored sensor data to applications  via analysis service  and access services . Accordingly, system  provides a framework for accessing a wide variety of sensor devices to obtain sensor data from a variety of applications.","In various embodiments, system  deployed in locations where sensor devices  can provide better insight into business processes. System  provides greater visibility of sensor data by allowing non-vendor specific applications to have access to sensor data. This extensible framework also provides scalability for the collection of sensor data from a variety of sensor devices. In various embodiments, system  provides localized management and control of sensor devices  through middleware  and sensor devices interface .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2","b":["200","200","210","220","210","230","230","240"]},"In operation, tag  typically obtains power to operate circuitry  from an inductive coupling of tag  to energy circulating around a reader coil (e.g., low frequency, high frequency, very high frequency, and ultra high frequency radio waves). In some embodiments, tag  operates in a low frequency (LF) band (e.g., 13.56 MHz). Alternatively, tag  may use radiative coupling, such as in ultra-high frequency (UHF) and microwave RFID systems to energize circuitry  which in turn communicates data (e.g., identifier ) stored in memory  via antenna . Antenna  typically is a conductive element that enables circuitry  to communicate data.","In general, tag  and other contactless cards, smart labels, transponders, and the like, typically use three basic technologies: active, passive, and semi-passive. Active tags typically use a battery to power microchip circuitry and transmit signals to readers. Active tags can generally be read from distances of 100 ft. or more. Passive tags do not include a battery. Instead, passive tags draw power from a magnetic field that is formed by the coupling of an antenna element in the tags with the coiled antenna from a reader. Semi-passive tags are similar to active tags in that they use a battery to run microchip circuitry. However, in semi-passive tags, the battery generally is not used to broadcast a signal to the reader.","In various embodiments, circuitry  may include an RF interface and control logic, in addition to memory , combined in a single integrated circuit (IC), such as a low-power complementary metal oxide semiconductor (CMOS) IC. For example, the RF interface can be an analog portion of the IC, and the control logic and memory  can be a digital portion of the IC. Memory  may be a non-volatile read-write memory, such as an electrically erasable programmable read only memory (EEPROM).","In some embodiments, circuitry  includes an antenna tuning capacitor and an RF-to-DC rectifier system designed for Antenna , which is the coupling element for tag . Antenna  can enable tag  using passive RFID to obtain power to energize and active circuitry . Antenna  can have many different shapes and sizes, depending on the type of coupling system (e.g., RFID) being employed.","Some examples of tag  are ISO 11784 & 11785 tags, ISO 14223\/1 tags, ISO 10536 tags, ISO 14443 tags, ISO 15693 tags, ISO 18000 tags, EPCglobal, ANSI 371.1, 2 and 3, AAR S918, and the like.","In some embodiments, circuitry  of tag  is configured to read from and write to memory . Identifier  is generally a unique serial number. Identifier  may also be hard coded into circuitry . In some embodiments, information such as a product information and location may be encoded in memory  of circuitry .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 3","b":["300","300","305","310","315","320","325","330","335","340","305","310","315","320","325","330","340","320","325"]},"In this example, reader  uses radio frequencies to communicate with tag  using antenna . For example, when tag  is within proximity of reader , tag  draws power from a magnetic field that is formed by the coupling of antenna  from tag  with antenna  from reader . Circuitry  from tag  then transmits identifier  via antenna . Reader  detects the transmission using antenna  and receives identifier  through antenna interface . In some embodiments, reader  stores the identifier  in memory . Reader  may transmit data, including identifier , in digital or analog form to sensor devices interface  using communications interface .","In various embodiments, reader  uses low, high, ultra-high, and microwave frequencies to store and retrieve data from products or devices using RFID tags.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 4","b":["140","110"]},"In this example, sensor devices interface  includes device abstraction layer , groups module , local processors , internal store\/forward module , dispatch interfaces , administration interfaces , data management interface , and development services interface . Device abstraction layer  is linked to groups module  and local processors . Local processors  are linked to groups module  and to internal store\/forward module . Internal store\/forward module  is link to dispatch interface .","Device abstraction layer  communicates via line  with sensor devices  to received collected sensor data and drive operations of one or more of sensor devices . Dispatch interface  communicates collected sensor data via line  with one or more applications, such as analysis services  and applications . Administration interface  is link via line  to one or more computers systems that administer the operations of sensor devices interface . Data management interface  communicates collected sensor data via line  with data repositories, such as a database provided by data management services . Development services interface  communicates via line  with applications to provide an Application Program Interface (API) to collected sensor data and operations of one or more of sensor devices .","Device abstraction layer  includes hardware and\/or software elements that received collected sensor data and drive the operations of one or more of sensor devices . In one embodiment, device abstraction layer  provides a plug-and-play architecture and extendable driver framework that allows applications (e.g., Applications ) to be device agnostic and utilize various sensors, readers, printers, and notification devices. In some embodiments, device abstraction layer  may include out-of-the-box drivers for readers, printers, and display\/notification devices from various vendors, such as Alien of Morgan Hill, Calif. and Intermec of Everett, Wash.","Groups module  and local processors  include hardware and\/or software elements that provide a framework for simple, aggregate, and programmable filtering of sensor data received from device abstraction layer . For example, using groups module , filters executed by local processors  are applied to a single device or to logical groups of devices to collect sensor data that satisfies predefined criteria. Local processors  include hardware and\/or software elements for creating filters and rules using sensor data. Some examples of filters may include Pass Filter, Movement Filter, Shelf Filter, Cross Reader Filter, Check Tag Filter, Pallet Shelf Filter, Pallet Pass Filter, and Debug Filter. In some embodiments, filters and rules may be created using the JavaScript programming language and through the use of regular expressions.","Internal store\/forward module  includes hardware and\/or software elements that provide an interface between local processors  and dispatch interfaces . In one example, internal store\/forward module  includes a buffer used for communication between local processors  and dispatch interfaces . Dispatch interfaces  include hardware and\/or software elements that disseminate sensor data to applications (e.g., applications ). In some embodiments, dispatch interfaces  include a web services component, an HTTP-dispatcher component, a stream dispatcher component, and an interface supporting subscription or query based notification services.","Administration interface  includes hardware and\/or software elements that managing operations of sensor devices interface . In one example, administration interface  provides a task oriented user interface for adding, configuring, and removing devices, creating and enabling filters and rules, and creating and enabling dispatchers that disseminate sensor data.","Data management services  include hardware and\/or software elements that provide reporting, associations, and archiving of sensor data. Development services interface  includes hardware and\/or software elements that provide an Application Program Interface (API) to collected sensor data and operations of one or more of sensor devices . Some examples of API services provided by development services interface  include web services, IS services, device management, monitoring interfaces, EPC management, and raw sensor data interfaces.","In one example of operation, sensor devices interface  collects sensor data from sensor devices  (e.g., RFID readers, RFID tags or labels, temperature sensors, laser diodes, etc.) using device abstraction layer . Groups module  and local processors  filter, clean, and normalize the collected sensor data and forward \u201crelevant\u201d events, such as those that meet predefined criteria or are obtained from a selected device, to internal store\/forward interface .","The filtered sensor data is then distributed by internal store\/forward interface  to various distribution systems through dispatch interfaces . The unfiltered and\/or filters sensor data may further be archived and storage using data management interface .","In various embodiments, sensor devices interface  provides a system for collection, filtering, and access to sensor data. Sensor devices interface  can provide management and monitoring of sensor devices  by printing labels, operating sensors, light stacks, message boards, carousels, and the like. In some embodiments, sensor devices interface  provides scalability that allows access to sensor data without being tied to one specific vendor application.","Event Processing Finite State Engine","In general, sensor devices  generate events. An event is typically an asynchronous message that includes event data. Typically, processing is performed on the events, rather than providing the raw event data to an application. This processing may include transformations and evaluation of event data, and also may require a record or history of state because the messages are asynchronous.","Typically, events may be transformed and mapped (for example, using XSLT) before being used or consumed by applications. However, much of the processing to transform or map events needs to be performed using compiled or scripted code. This leads to some inflexibilities when designing transformations because there may be no common agreements or interfaces between pieces of compiled or scripted code.","Accordingly, in various embodiments, system  provides an engine and language that allows a user or administrator to quickly define a finite state machine that can process asynchronous messages received from sensor devices . In general, system  provides a metadata driven engine that allows, in addition to data transformations, complex functionality, expression computation, decision-making capabilities. Accordingly, system  provides a finite state machine and a well-defined context that provides transformations, processing, evaluation, and manipulation of event data.","In general, system  implements a metadata-based language that allows a user or administrator to define complex operations and processing on event streams. Thus, system  provides an engine to execute the metadata-based language to create a finite state machine that receives and asynchronously processes event data.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 5","b":["500","500","510","520","530","520","510","530"]},"Sensor hardware  includes hardware and\/or software elements that generate events. An event may be contained in a discreet or a continuous stream of event data. Event processing engine  includes hardware and\/or software elements for processing event data. One example of event processing engine  is sensor devices interface  of . However, other components of system  may perform event processing.","In one example of operation, sensor hardware  sends event data  to event processing engine . Event processing engine  may transform event data , or perform any number of other operations\/transformations, after which event processing engine  sends event data  to applications .","In order to process event data , event processing engine  receives a metadata-based language which defines processing components, sets of states, and entry points that are used to build a finite state machine. The event processing engine  executes the finite state machine defined by the metadata-based language to asynchronously process event data . During the processing of event data , event processing engine  may call any number of internal or external services to process or manipulate event data  as specified by the metadata-based language.","Accordingly, event processing engine  may asynchronously process event data  using the metadata-based language. This allows a user to define complex operations and processing on event data  at runtime using the metadata-based language. Additionally, processing components may be written at any time, and provided as plug-ins using the metadata-based language, such that event processing engine  may be expanded without using compiled code.","Furthermore, entry points into the finite state machine defined by the metadata-based language may be also written at any time, and provided as plug-ins. This allows a user to define processing on event data  at a particular starting point in the finite state machine or using pre-existing processing components already part of another finite state machine.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["140","120","120","600"]},"In step , sensor devices interface  receives event data. Event data may be received in discreet form, or as a continuous event stream. In step , sensor devices interface  processes the event data using a finite may state machine defined by a set of processing components, a set of states, and a set of entry points.","In general, a processing component defines one or more operations to be performed on event data. Typically, a processing component receives input in the form of parameters. The parameters define the data on which to operate. The processing component may generate a return value indicating success or failure of the one or more operations.","A state defines one or more processing components, and one or more relationships between one or more processing components. The one or more relationships define transitions to and from the one or more processing components. For example, a \u201cmatch\u201d state may include a processing component generates a set of results based on a comparison between a first input and a second input. The comparison may be a binary comparison, a text comparison, a numerical comparison, and the like. One or more relationships defined in the \u201cmatch\u201d state indicate transitions to other states from the match state based on a set of results. The state may also define return values, execution codes, and error exceptions.","An entry point defines one or more states in which to enter processing of the finite state machine based on event data. For example, if a particular attribute of event data is matched by a given entry point, sensor devices interface  begins processing of the event data at the state indicated by the given entry point. A finite state machine according to embodiments of the present invention may have more than one entry point.","In step , sensor devices interface outputs transformed event data to an application.  ends in step .","Accordingly, sensor devices interface  may process event data asynchronously using the finite state machine. Based on one or more entry points, sensor devices interface  may enter processing according to the finite state machine to transform or otherwise manipulate event data to be output to applications. Thus, in various embodiments, processing components may be written and used by sensor devices interface  as plug-ins during runtime. This allows the processing capabilities of sensor devices interface  to be expanded at any time simply by adding a new plug-in and a possible entry point, without using compiled or scripted code.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 7","FIG. 7"],"b":"700"},"In step , sensor devices interface  receives a set of processing components. In step , sensor devices interface  receives a set of states. In step , sensor devices interface  receives a set of entry points. In step , sensor devices interface  generates a finite state machine using the set of processing components, the set of states, and the set of entry points.","In various embodiments, sensor devices interface  generates a graph representing a state machine from the set of processing components, the set of states, and the set of entry points. Sensor devices interface  then uses the graph during asynchronous processing of event data to process the finite state machine represented by the graph.  ends in step .",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 8","b":["800","800","805","810","815","820","825","805","810","830","810","835","815","815","840","820","820","845","815","850","825"]},"In general, sensor devices interface  generates a graph representing the finite state machine  in response to metadata-based language defining the set of processing components, the set of states, and the set of entry points. In this example, sensor devices interface  receives event data, and analyzes the event data for a particular attribute or data set that is specified by entry point .","Upon finding the particular attribute or data set specified by entry point , sensor devices interface  passes the event data to processing component  using transition . Processing component  then performs one or more operations, transformations, evaluations, and the like, on the event data. In response to a successful execution by processing component , processing component  transitions to processing component  using transition . Processing component  may pass one or more parameters to processing component  as a result of processing the event data. The one or more parameters may include the event data as transformed by processing component .","Processing component  may also perform one or more operations, transformations, evaluations, and the like on the event data or parameters received from processing component . Processing component  then calls or transitions to processing component  using transition . Processing component  may also then perform one or more operations, transformations, evaluations, and the like, on the event data.","In this example, processing component  may transition to processing component  using transition , or transition to processing upon  using transition . Processing component , may perform one or more operations, transformations, evaluations, and the like, on the event data. If processing component  represents the final or accepting state of finite state machine , sensor devices interface  then may forward be processed event data to one or more applications.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 9","b":["900","900","902","904","906","908","910","912","914","916","918","920"]},"Entry point  is linked to match state  via transition . Entry point  is linked to encode state  via transition . Entry point  is linked to decode state  via transition . Match state  is linked to encode state  via transition , and to log state  via transition . Log state  is linked to format state  via transition . Format state  is linked to encode state  via transition . Encode state  is linked to web services state  via transition . Decode state  is linked to web services state  via transition . Web services state  is linked to API state  via transition .","In this example, sensor devices interface  receives event data and monitors or processes the event data for one or more attributes or data sets defined by entry points , , and . Each of the entry points , , and  may specify a different attribute or data set to be monitored by sensor devices interface . For example, entry point  may direct sensor devices interface  to monitor for RFID tags that include a UPC code, while entry point  may direct sensor devices interface  to monitor for RFID tags that include a GLN code, while entry point  may direct sensor devices interface  to monitor for RFID tags that include a GTLN code. Thus, sensor devices interface  asynchronously processes the event data and enters multiple points of finite state machine  using entry points , , and .","Match state  provides a processing component that performs one or more types of comparisons or matches on input data. Based on the one or more types of comparisons, match state  generates a set of results. Based on the set of results, sensor devices interface  either transitions to encode state , or transitions to log state .","Log state  provides a processing component that logs input data to a system log, such as a file or a database. Log state  may not transform event data received from match state  but merely writes all or portions of the event data to the system log. Log state  and transitions to format state .","Format state  provides a processing component that formats event data according to predetermined criteria. For example, format state  may format the event data as plaintext, encapsulate the event data in a markup language (e.g., HTML or XML), convert the event data to different number spaces, and the like. Format state  then transitions to encode state .","Encode state  provides a processing component that encodes event data according to an encoding scheme. For example, encoding state  may encrypt or decrypt event data. Encoding state  may also convert portions of the event data to different number spaces, characters spaces, and the like. Encoding state  may also format the data similar to format state . Encoding state  transitions to web services state .","Alternatively, sensor devices interface  may monitor for event data which matches an attribute, field, or data set defined by entry point . Sensor devices interface  then may initiate processing of the event data at encoding state  via transition .","In another alternative, sensor devices interface  may monitor for event data which matches an attribute, field, portion of event data, or data set defined by entry point . Sensor devices interface  then may initiate processing of the event data at decode state  via transition .","Decode state  provides a processing component ID codes event data according to a decoding scheme. For example, decoding state  may encrypt or decrypt event data, decoding state  may also convert portions of the event data to different number spaces, character spaces, and the like. Decode state  then transitions to web services state  via transition .","Web services state  provides a processing component that provides web services. For example, web services state  may call a web service protocol stack. In general, a web service protocol stack is a collection of computer networking protocols that are used to define, locate, implement, and make web services interact with each other. Typically, a web service protocol stack mainly comprises four areas: service transport, XML messaging, service description, and service discovery.","Service transport is typically responsible for transporting messages between network applications, and includes protocols such as HTTP, SMTP, FTP, and Blocks Extensible Exchange Protocol (BEEP). XML messaging is typically responsible for encoding messages in a common XML format so that the messages can be understood at either end of a network connection. Some examples of protocols used for XML messaging include XML-RPC, SOAP, and REST.","Service description is typically responsible for describing the public interface to a specific web service. One example of a service description is provided by the WSDL interface format. Service discovery is typically responsible for centralizing services into a common registry, such that network web services can publish their location and description, and makes it easy to discover what services are available. One example of a service discovery is provided by the UDDI API. Web service protocol stack may also include a range of defined protocols, such as BPEL and SOAP-DSIG.","In this example, at the return of successful processing, web services state  transitions to API state  via transition . API state  includes a processing component that provides an interface to one or more applications for accessing transformed event data. In general, an application programming interface (API) is an interface that a computer system or program library provides in order to support requests for services, such as a coherent interface consisting of several classes or several sets of related functions or procedures. For example, API state  may include one or more buffers, filters, or further data transformations that allow applications to access the event data, or to access operations to be further performed on the event data.","Thus, finite state machine  may include various types of processing components to perform different operations on event data. According to various embodiments, the processing components may be written as plug-ins, and inserted into processing of event data at real-time. This allows an administrator to implement or updated finite state machines doe real-time asynchronous processing of event data.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 10","b":["1000","1000","1010","1020","1030","1040"]},"Schema definition  includes one or more statements that define the finite state machine. In this example, the schema definition  is written in the Extensible Markup Language (XML). Other markup languages, scripted or complied languages may be used to generate the one or more statements that define the finite state machine.","Components definition  includes one or more statements that define at least one processing component. In this example, components definition  includes a \u201cMatch Event\u201d processing component . Processing component  (e.g., expressed as <component name=\u201cmatchEvent\u201d class=\u201c\\\\class_path\\.MatchEventState\u201d\/>) includes a namespace and a class variable. The namespace is used by one or more states to reference processing component . The class variable, in this example, provides a pointer or URL to a set of functions or procedures (e.g., a JAVA class or other API interface).","Entry point definition  includes one or more statements that define at least one entry point. In this example, entry point definition  includes an entry point . Entry point  (e.g., expressed as <onEvent state=\u2018A.check\u2019\/>) includes a pointer or reference to one or more states (e.g., state A.check).","State definition  includes one or more statements that define at least one state. In this example, state definition  includes a state . State  (e.g., expressed as:",{"@attributes":{"id":"p-0117","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<matchEvent name=\u201cA.check\u201d control=\u201cmatchEvent\u201d"]},{"entry":[{},"type=\u201c200\u201d x=\u201c100\u201d y=\u201c200\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<case result=\u201cok\u201d next=\u201crfid.event\u201d\/>"]},{"entry":[{},"<\/matchEvent>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["1080","1080"]},"The following is an expanded view of specification . The following is merely one example, and is not intended to be limiting in any manner.",{"@attributes":{"id":"p-0119","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<eflow>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!--"]},{"entry":[{},"In general, a dispatcher (e.g., sensor devices interface 140) cycles through states that"]},{"entry":[{},"are described in this xml file. This xml file describes a state machine and the"]},{"entry":[{},"conditions under states transition from one state to the next. The states are initialized"]},{"entry":[{},"from the first section (described next). And then the conditions to enter and leave"]},{"entry":[{},"each state are described further down in this file. Note, throughout this document,"]},{"entry":[{},"there will be references to a Context class. This class is \\\\class_path\\.Context. Its a"]},{"entry":[{},"very simple class which basically provides hashtable type lookup into the various"]},{"entry":[{},"event and server related fields. These are the fields defined (most of them are self"]},{"entry":[{},"explanatory):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"server.name"]},{"entry":[{},"server.siteName"]},{"entry":[{},"server.time"]},{"entry":[{},"server.isoTime"]},{"entry":[{},"dispatcher.name"]},{"entry":[{},"dispatcher.description"]},{"entry":[{},"dispatcher.version"]},{"entry":[{},"event.type"]},{"entry":[{},"event.subType"]},{"entry":[{},"event.id - list of concatenated ids separated by \u2018,\u2019"]},{"entry":[{},"event.data - list of concatenated data fields separated by \u2018,\u2019"]},{"entry":[{},"event.time"]},{"entry":[{},"event.siteName"]},{"entry":[{},"event.deviceName"]},{"entry":[{},"event.correlationId"]},{"entry":[{},"event.sourceName"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0120","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"event.idCount - the number of separate ids in this event (before id)"},{"entry":"event.id[i] - this is set for every id where i is from 0 to event.idCount"},{"entry":"event.data[i] - this is set for every data where i is from 0 to event.idCount"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":"\\\\class_path\\.State\n\nThe name attribute under each component element refers to how the eflow dispatcher will identify that particular state.\n"}}}},{"@attributes":{"id":"p-0121","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<components>"},{"entry":"<component name=\u201caddContext\u201d class=\u201c\\\\class_path\\.impl.AddContextState\u201d\/>"},{"entry":"<component name=\u201ccallBean\u201d class=\u201c\\\\class_path\\.impl.CallBeanState\u201d\/>"},{"entry":"<component name=\u201cdbproc\u201d class=\u201c\\\\class_path\\.impl.DbProcState\u201d\/>"},{"entry":"<component name=\u201cfireTrigger\u201d class=\u201c\\\\class_path\\.impl.FireTriggerState\u201d\/>"},{"entry":"<component name=\u201cmatchEvent\u201d class=\u201c\\\\class_path\\.impl.MatchEventState\u201d\/>"},{"entry":"<component name=\u201cpost\u201d class=\u201c\\\\class_path\\.impl.PostState\u201d\/>"},{"entry":"<component name=\u201csendEvent\u201d class=\u201c\\\\class_path\\.impl.SendEventState\u201d\/>"},{"entry":"<component name=\u201ctemplate\u201d class=\u201c\\\\class_path\\.impl.TemplateState\u201d\/>"},{"entry":"<component name=\u201ctransport\u201d class=\u201c\\\\class_path\\.impl.TransportState\u201d\/>"},{"entry":"<component name=\u201ccallWs\u201d class=\u201c\\\\class_path\\.impl.WsState\u201d\/>"},{"entry":"<component name=\u201consLookup\u201d class=\u201c\\\\class_path\\.impl.OnsLookupState\u201d\/>"},{"entry":"<component name=\u201cdecodeTag\u201d class=\u201c\\\\class_path\\.impl.DecodeState\u201d\/>"},{"entry":"<component name=\u201cencodeTag\u201d class=\u201c\\\\class_path\\.impl.EncodeState\u201d\/>"},{"entry":"<component name=\u201cisCapture\u201d class=\u201c\\\\class_path\\.impl.IsCaptureState\u201d\/>"},{"entry":"<component name=\u201cisQuery\u201d class=\u201c\\\\class_path\\.impl.IsSimpleQueryState\u201d\/>"},{"entry":"<\/components>"},{"entry":"<!--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0122","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-->"]},{"entry":[{},"<entry>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<onEvent state=\u2018A.check\u2019\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/entry>"]},{"entry":[{},"<!--"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0123","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-->"]},{"entry":[{},"<states>"]},{"entry":[{},"<!--"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["\u2018matchEvent\u2019 is currently the only acceptable value.\n\nThe following attributes refer to matching the various fields of the event to be matched. If a value is given for any the event fields then those fields have to match the fields of the incoming event to result in:\n","type","subtype","id","data\n\nThere are two final attributes that don't map directly to the event structure:\n","idsAny: This is a comma separated list of ids. If the incoming id of the event matches any id in this list, the condition will be satisfied.","idsAll: This is a comma separated list of ids. The incoming ids of the event must match all of the ids listed in this list for the condition to be satisfied."]}}}},{"@attributes":{"id":"p-0124","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<matchEvent name=\u201cA.check\u201d control=\u201cmatchEvent\u201d type=\u201c200\u201d x=\u201c100\u201d y=\u201c200\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<case result=\u201cok\u201d next=\u201crfid.event\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/matchEvent>"},{"entry":"<matchEvent name=\u201crfid.event\u201d control=\u201cmatchEvent\u201d type=\u201c200\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"id=\u201c000000000001\u201d x=\u201c100\u201d y=\u201c200\u201d>"]},{"entry":[{},"<case result=\u201cok\u201d next=\u201ccallbean.event\u201d\/>"]},{"entry":[{},"<case result=\u201cnotFound\u201d next=\u201cbad.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/matchEvent>"},{"entry":"<!--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"public void methodName(java.lang.String, \\\\class_path\\.Context)\n\nContext is the class that holds all the field values of the event to be dispatched. The String is the userdata supplied as an attribute below. If the function returns without any errors, then the handler returns \u201cok\u201d. If there are errors, the handler returns \u201cerror\u201d.\n"}}}},{"@attributes":{"id":"p-0125","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-->"]},{"entry":[{},"<callBean name=\u201ccallbean.event\u201d class=\u201cmypackage.myclass\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"methodName=\u201conEvent\u201d userData=\u201cmyuserdata\u201d>"]},{"entry":[{},"<case result=\u201cok\u201d next=\u201cdbproc.event\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/callBean>"]},{"entry":[{},"<!--"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["jndi\u2014this is the jdni name that will be used to look up the connection","it should be preconfigured through the EM console","method\u2014this is the method name that will be called through jdbc","dbcallback\u2014this is used to do further processing on returned values.\n\nIf an xml file is listed there, the state handler will try to load this file from the config dir (Where eflow.xml is located) and then try to parse it.\n\nUnderneath the <dbproc> element, each parameter which is an argument into the database callback is defined. The name defines which parameter order in which the method will be called. And then there are several datatypes that can be argument types:\n","clob, string, date, int, io to the database method.","\u2018io\u2019 refers to input\/output to the method. In other words, it can be used to return values to the state handler.\n\nFor clob, string, date, date, and int, the valid inputs are:\n"]}}}},{"@attributes":{"id":"p-0126","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"event.<field name> - where fieldname matches the fieldnames in the"},{"entry":"Context object described at the top of this file."},{"entry":"number(<an integer>) - where this will set the value of this argument to"},{"entry":"the callback to be the integer listed between the parens."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0127","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<dbproc name=\u201cdbproc.event\u201d x=\u201c100\u201d y=\u201c200\u201d method=\u201cmypackage.myprocedure\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"jndi=\u201cdbconn\u201d dbcallback=\u201ceflow-instructions.xml\u201d>"]},{"entry":[{},"<param name=\u201cparam1.clob\u201d>event.id<\/param>"]},{"entry":[{},"<param name=\u201cparam2.clob\u201d>event.data<\/param>"]},{"entry":[{},"<param name=\u201cparam3.string\u201d>event.devicename<\/param>"]},{"entry":[{},"<param name=\u201cparam4.date\u201d>event.date<\/param>"]},{"entry":[{},"<param name=\u201cparam5.string\u201d>event.sitename<\/param>"]},{"entry":[{},"<param name=\u201cparam6.int\u201d>number(0)<\/param>"]},{"entry":[{},"<param name=\u201cparam7.int\u201d>number(0)<\/param>"]},{"entry":[{},"<param name=\u201cparam8.int\u201d>number(0)<\/param>"]},{"entry":[{},"<param name=\u201cparam9.int\u201d>number(0)<\/param>"]},{"entry":[{},"<param name=\u201cparam10.int\u201d>number(0)<\/param>"]},{"entry":[{},"<param name=\u201cparam11.io\u201d>ret_val<\/param>"]},{"entry":[{},"<param name=\u201cparam12.io\u201d>ret_msg<\/param>"]},{"entry":[{},"<case result=\u201cok\u201d next=\u201cdecode.event\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/dbproc>"},{"entry":"<!--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0128","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<fireTrigger name=\u201cfiretrigger.event\u201d triggerName=\u201ctriggername\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<case result=\u201cok\u201d next=\u201caddcontext.event\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/fireTrigger>"},{"entry":"<!--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0129","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-->"]},{"entry":[{},"<addContext name=\u201caddcontext.event\u201d isPersistent=\u201ctrue\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<param name=\u201cparam1\u201d>The value of param 1<\/param>"]},{"entry":[{},"<param name=\u201cparam2\u201d>The value of param 2<\/param>"]},{"entry":[{},"<case result=\u201cok\u201d next=\u201cpost.event\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/addContext>"]},{"entry":[{},"<!--"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["1) It will look up a value from the Context object using (as a key) the valuedefined in the \u201csrc\u201d attribute. In this case, it does a context.getParam(\u201csrcvalue\u201d);","2) If this value is null, the handler will throw an error.","3) If not null, once a url has been constucted, and an http connection opened, the post handler will actually write out the param retrieved on step #1","4) Whatever value is returned by the http server in the http response, the post handler will set it in the Context object using the key \u201cpost.result\u201d.","5) This return value is not available for future state handlers.\n\nThe url that is used to open an http connection is in the following form:\n","http:\/\/<url>?(&) contextkey=contexttval\n\nWhere contextkey is one of the keys in the Context object, and the contextval is the corresponding value. Then an \u2018&\u2019is appended and this repeats until all of the keys in the Context object are enumerated with their corresponding values. This list is at the top of this file where we discuss what the Context object looks like. If the procedure returns successfully with no errors, then the state handler returns \u201cok\u201d, if there is an exception, the state handler returns \u201cerror.\u201d\n"]}}}},{"@attributes":{"id":"p-0130","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-->"]},{"entry":[{},"<post name=\u201cpost.event\u201d url=\u201chttp:\/\/someserver.com\/target\u201d"]},{"entry":[{},"doPost=\u201ctrue\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"proxy=\u201chttp:\/\/myproxy.com\u201d proxyPort=\u201c80\u201d"]},{"entry":[{},"src=\u201csrcvalue\u201d>"]},{"entry":[{},"<case result=\u201cok\u201d next=\u201ctemplate.event\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/post>"]},{"entry":[{},"<!--"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0131","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<template name=\u201ctemplate.event\u201d file=\u201c\/home\/myuser\/template.file\u201d"},{"entry":"dest=\u201cmykey\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<case result=\u201cok\u201d next=\u201ctransport.event\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/template>"},{"entry":"<!--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0132","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<transport name=\u201ctransport.event\u201d src=\u201ckeyname\u201d uri=\u201cconnection uri\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<case result=\u201cok\u201d next=\u201ccallWs.event\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.evemt\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/transport>"},{"entry":"<!--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0133","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<callWs name=\u201ccallWs.event\u201d wsdl=\u201curi of wsdl endpoing\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"method=\u201cws method name\u201d>"]},{"entry":[{},"<param name=\u201cdevicename\u201d type=\u201cstring\u201d>MyDevice<\/param>"]},{"entry":[{},"<param name=\u201ctype\u201d type=\u201cstring\u201d>$event.type$<\/param>"]},{"entry":[{},"<param name=\u201csubtype\u201d type=\u201cint\u201d>$event.subtype$<\/param>"]},{"entry":[{},"<param name=\u201cid\u201d type=\u201cint\u201d>$event.id$<\/param>"]},{"entry":[{},"<case result=\u201cok\u201d next=\u201cundefined\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.evemt\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/callWs>"},{"entry":"<!--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0134","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-->"]},{"entry":[{},"<sendEvent name=\u201cbad.event\u201d toDispatcher=\u201ctrue\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Event>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<siteName>MySite<\/siteName>"]},{"entry":[{},"<correlationId>Correlationid<\/correlationId>"]},{"entry":[{},"<from>mysourcename<\/from> <!-- This sets the sourcename in the"]},{"entry":[{},"event -->"]},{"entry":[{},"<to>$event.deviceName$<\/to> <!-- This sets the devicename in the"]},{"entry":[{},"event -->"]},{"entry":[{},"<type>$event.type$<\/type>"]},{"entry":[{},"<subType>$event.subType$<\/subType>"]},{"entry":[{},"<createTime>1143506033794<\/createTime>"]},{"entry":[{},"<item id=\u201cid1\u201d>data 1<\/item>"]},{"entry":[{},"<item id=\u201cid2\u201d>"]},{"entry":[{},"<i>abc<\/i>"]},{"entry":[{},"<\/item>"]},{"entry":[{},"<item id=\u201cidn\u201d>data n<\/item>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Event>"]},{"entry":[{},"<!-- There can be multiple events. events can be repeated -->"]},{"entry":[{},"<Event>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<siteName>MySite<\/siteName>"]},{"entry":[{},"<correlationId>Correlationid<\/correlationId>"]},{"entry":[{},"<from>mysourcename<\/from> <!-- This sets the sourcename in the"]},{"entry":[{},"event -->"]},{"entry":[{},"<to>$event.deviceName$<\/to> <!-- This sets the devicename in the"]},{"entry":[{},"event -->"]},{"entry":[{},"<type>$event.type$<\/type>"]},{"entry":[{},"<subType>$event.subType$<\/subType>"]},{"entry":[{},"<createTime>1143506033794<\/createTime>"]},{"entry":[{},"<item id=\u201cid1\u201d>data 1<\/item>"]},{"entry":[{},"<item id=\u201cidn\u201d>data n<\/item>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Event>"]},{"entry":[{},"<!-- Note here that we do not define what happens if this state returns \u2018ok\u2019. If"]},{"entry":[{},"the eflow state machine does not receive an a return value from a state that"]},{"entry":[{},"matches one of these cases, then it just exits out and waits for the next event."]},{"entry":[{},"IF this is the case, the event gets committed in the underlying file queue. IF in"]},{"entry":[{},"the case of an error you wish to rollback the event and try to process it again,"]},{"entry":[{},"we move to the next state as defined below called \u2018rollback\u2019. -->"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201crollback.event\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sendEvent>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!--"]},{"entry":[{},"The rollback state is a special state. It does not have to be defined in the class"]},{"entry":[{},"definitions at the beginning of this file which refer to all the classes of all the diff"]},{"entry":[{},"states. Its part of the core eflow engine. If the eflow state machine enters this state,"]},{"entry":[{},"then all further processing is cancelled and the event currently being dispatched by the"]},{"entry":[{},"eflow dispatcher will be rollbacked and then tried again from the file queue."]},{"entry":[{},"-->"]},{"entry":[{},"<rollback name=\u201crollback.event\u201d >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<case result=\u201cok\u201d next=\u201cundefined\u201d\/>"]},{"entry":[{},"<case result=\u201cerror\u201d next=\u201cbad.evemt\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ rollback>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/states>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/eflow>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As described above, system  provides an engine and a metadata-based language that can implement finite state machines for asynchronously processing event data in real-time. This allows new transformations, evaluations, and processing of event data received from sensor devices to be quickly and rapidly implemented using a plug-in architecture. Using system , a user can rapidly define complex operations and processing on event streams. Furthermore, using system , the user can further defined entry points into processing of event data using the finite state machines.",{"@attributes":{"id":"p-0136","num":"0156"},"figref":["FIG. 11","FIG. 11"],"b":["1100","1100","1102","1104","1106","1108","1110","1112","1114","1116"]},"Bus subsystem  provides a mechanism for letting the various components and subsystems of computer system  communicate with each other as intended. Although bus subsystem  is shown schematically as a single bus, alternative embodiments of the bus subsystem may utilize multiple busses.","Network interface subsystem  provides an interface to other computer systems, and networks, and devices. Network interface subsystem  serves as an interface for receiving data from and transmitting data to other systems from computer system .","User interface input devices  may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a barcode scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and other types of input devices. In general, use of the term \u201cinput device\u201d is intended to include all possible types of devices and mechanisms for inputting information to computer system .","User interface output devices  may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices, etc. The display subsystem may be a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), or a projection device. In general, use of the term \u201coutput device\u201d is intended to include all possible types of devices and mechanisms for outputting information from computer system .","Storage subsystem  may be configured to store the basic programming and data constructs that provide the functionality of the present invention. Software (code modules or instructions) that provides the functionality of the present invention may be stored in storage subsystem . These software modules or instructions may be executed by processor(s) . Storage subsystem  may also provide a repository for storing data used in accordance with the present invention. Storage subsystem  may comprise memory subsystem  and file\/disk storage subsystem .","Memory subsystem  may include a number of memories including a main random access memory (RAM)  for storage of instructions and data during program execution and a read only memory (ROM)  in which fixed instructions are stored. File storage subsystem  provides persistent (non-volatile) storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a Compact Disk Read Only Memory (CD-ROM) drive, a DVD, an optical drive, removable media cartridges, and other like storage media.","Computer system  can be of various types including a personal computer, a portable computer, a workstation, a network computer, a mainframe, a kiosk, or any other data processing system. Due to the ever-changing nature of computers and networks, the description of computer system  depicted in  is intended only as a specific example for purposes of illustrating the preferred embodiment of the computer system. Many other configurations having more or fewer components than the system depicted in  are possible.","Although specific embodiments of the invention have been described, various modifications, alterations, alternative constructions, and equivalents are also encompassed within the scope of the invention. The described invention is not restricted to operation within certain specific data processing environments, but is free to operate within a plurality of data processing environments. Additionally, although the present invention has been described using a particular series of transactions and steps, it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.","Further, while the present invention has been described using a particular combination of hardware and software, it should be recognized that other combinations of hardware and software are also within the scope of the present invention. The present invention may be implemented only in hardware, or only in software, or using combinations thereof.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that additions, subtractions, deletions, and other modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to more fully understand the present invention, reference is made to the accompanying drawings. Understanding that these drawings are not to be considered limitations in the scope of the invention, the presently described embodiments and the presently understood best mode of the invention are described with additional detail through use of the accompanying drawings.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
