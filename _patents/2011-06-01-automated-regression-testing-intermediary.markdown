---
title: Automated regression testing intermediary
abstract: An automated regression testing intermediary configured to accept a first set of automated test instructions from an application testing tool. A data structure comprising predefined fields is configured so when a test instruction is received from the application testing tool, a command will be used to identify at least one field of the data structure that will be populated with a parameter test instruction. A library of generic target automated test instructions is provided. Each generic test instruction has a form and format different from the received test instruction. The intermediary is configured to select generic target automated test instructions from the library and populate selected generic target automated test instructions with parameters obtained from the data structure such that the resulting created target-specific automated test instructions can be used to regression test the application under test.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397114&OS=08397114&RS=08397114
owner: Morgan Stanley
number: 08397114
owner_city: New York
owner_country: US
publication_date: 20110601
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field","This disclosure relates generally to software testing, and, more particularly, to automated regression testing.","2. Background","Test automation uses software to control the execution of tests. The execution of testing, comparison of experimental outcomes to predicted outcomes, preparation of test preconditions, and other test control\/reporting functions may be automated utilizing test automation software. Automation tools, therefore, include actions such as, for example, object identification, operations on objects and reading object properties. However, test automation tools often suffer from compatibility issues with the application under test (\u201cAUT\u201d). Compatibility issues between automation tools and the AUT are sometimes solved with the use of \u201cadd-ins,\u201d which are software elements that extend functionality when added to the test automation tools.","The add-ins, however, are often insufficient to resolve all compatibility issues. The add-ins may be unstable, or they may fail to implement control for some or all of the actions. The appropriate add-ins may not even exist. These difficulties are compounded when the add-ins are weakly supported (if at all) by the developer of the test automation tool. There is the option to switch to another automation tool, but users still face the prospect of incomplete automation and weak developer support from other automation tools. As a result, users may be negatively impacted by compatibility problems and performance issues.","In one aspect of this disclosure, a computer apparatus is disclosed, comprising at least one programmable processor and data storage accessible by the processor. The processor is operatively connected to the data storage to receive information from the data storage. The data storage includes programming which, when executed by the processor, implements an automated regression testing intermediary. The automated regression testing intermediary is configured to receive, from an application testing tool, a first set of automated test instructions intended for regression testing of an application under test. The first set comprises at least one automated test instruction, which comprises a command and a parameter. A data structure comprises predefined fields such that, when the automated test instruction from the first set is received, the command in the automated test instruction will be used to identify a field of the data structure that will be populated with the parameter from the automated test instruction. A library of generic target automated test instructions is stored in the data storage, the generic target automated test instructions having a form and format different from automated test instructions of the first set, and being usable to regression test the application under test when a generic target automated test instruction is selected and populated with the parameter from the automated test instruction to create a target-specific automated test instruction. The automated regression testing intermediary is configured to select at least one generic target automated test instruction from the library based on the field populated with the parameter, and populate the selected generic target automated test instruction with the parameter obtained from the data structure, so that the resulting created target-specific automated test instruction can be used to regression test the application under test.","In another aspect of this disclosure, a method performed by an automated regression testing intermediary is disclosed, comprising receiving, using a processor, a first set of automated test instructions from an application testing tool usable for regression testing of an application under test. The first set comprises at least one automated test instruction, the automated test instruction comprising a command and a parameter. A predefined field of a data structure to be populated with the parameter from the automated test instruction is identified from the received automated test instruction based upon the command. The predefined field of the data structure is populated with the parameter. A generic target automated test instruction is identified from a library of generic target automated test instructions, based on the predefined field, the generic target automated test instruction having a form and format different from the automated test instruction of the first set. The identified generic target automated test instruction is populated with the parameter to create a target-specific automated test instruction that can be used to regression test the application under test.","The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of this disclosure in order that the following detailed description may be better understood. Additional features and advantages of this disclosure will be described hereinafter, which may form the subject of the claims of this application.","The disclosed automated regression testing intermediary (referred to \u201cART intermediary\u201d hereinafter) operates by interposing an intermediary between the automation tool (and its respective add-ins) and the AUT. Because the ART intermediary can be built on any respective technology, the technology may be selected so that it is both well-supported by the automated regression testing add-ins, and compatible with the AUT. This eliminates compatibility issues between the add-ins and the AUT. Similarly, because the user controls the ART intermediary, the user may implement any action desired for testing the AUT, and is no longer dependant upon third parties for the support and development of add-ins.","The following may be illustrative of the problems inherent in current implementations of testing systems.  is a high level representation of automated regression testing performed without the aid of an ART intermediary. Automated testing tool  is the tool used to test an AUT . Generally, the automated testing tool  performs actions on the AUT  to iterate through a range of possible user actions on the AUT . Results are received from this testing to determine whether any action or sequence of actions causes errors with the AUT . Therefore, automated testing tool  may include a number of action sets, such as object identification , objection action list , action execution  and object property reading .","The automated testing tool  may include add-ins . Add-ins  extend the functionality of the automated testing tool  so that it may interface with (and thus automate) the AUT . Unfortunately, the add-ins  often fail to adequately support the AUT  platform, causing deficient performance or failure to implement functions (such as object identification , objection action list , action execution  and object property reading ).","For example, the AUT  may be rendered using commercially available graphical products for rendering such interfaces, such as Windows Presentation Foundation\u00ae. Similarly, the automated testing tool may be implemented in Hewlett-Packard QuickTest Professional\u00ae. Unfortunately, add-ins developed by Hewlett-Packard for QuickTest Professional\u00ae do not adequately support Windows Presentation Foundation\u2122, therefore causing poor performance, or even the inability to execute certain actions (such as those related to object identification , objection actions , action execution  and object property reading ).",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1"],"b":["200","100","105","200","130","100","105","100","105","130","200","205","200","105"]},"Continuing the above example, an ART intermediary  may be, for example, beneficially developed in Visual Basic\u00ae .NET\u2122, because there is ample add-in  support from Hewlett-Packard for integrating QuickTest Professional\u2122 with Visual Basic\u00ae .NET\u2122 Similarly, the Visual Basic\u00ae .NET\u2122 ART intermediary  is well suited (through a .NET\u2122 API ) for executing functions on a Windows Presentation Foundation\u2122 AUT . Users would have complete control over implemented functions, because they would have the capacity to develop additional functions directly in the ART intermediary . Similarly there would be no compatibility issues between the automated testing tool  and ART intermediary . Users would no longer be forced to rely on add-in  support from Hewlett-Packard.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":["300","200","200","300","300","300","305","310","315","320"]},"The CPU  processes and executes computer program instructions. Random access memory (RAM)  and\/or fast access cache memory preferably provides fast data supply to CPU . Long-term storage may be provided as a more permanent form of computer memory, and may be, for example, a hard disk, optical disk, flash memory, solid-state memory, tape, or any other type of memory. The database may exist at an onsite facility (if one exists) or, it may be implemented via \u201ccloud-computing\u201d enabled data storage and retrieval. The network interface device  may provide the computing system  with access to a network , which may be a wireless or wired connection. The network  may be, for example, the Internet, a corporate intranet, or any other computer network through which the computing system may connect to or otherwise communicate with other computers.","The automated testing tool  will typically be a software process that enables automated testing for software applications. As described above, automated software testing utilizes software to set up test conditions, execute tests and analyze test outcomes. Automated testing tools  are commonly available on the market, and may include products such as Hewlett-Packard QuickTest Professional\u00ae, IBM Rational Functional Tester\u00ae, and Microsoft Visual Studio Test Professional\u00ae. The AUT  will be a software process currently undergoing testing. The AUT  may include, for example, a user interface that is currently undergoing testing. The user interface may be rendered utilizing any commercial graphical subsystems used for rendering user interfaces, such as (for example) Windows Presentation Foundation\u2122.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 4","FIG. 1","FIGS. 1 and 2"],"b":["200","400","100","200","200","110","125","200","200","130","100"]},"Therefore, an automation instruction, for example, to obtain information from a cell in a grid may contain instructions to set the row value, set the column value, set the description of the grid, read the cell value, and then read the returned output value. In step , the instructions are received by the ART intermediary . In one embodiment, the instructions operate on a graphical user interface for the ART intermediary . Therefore, inputs contained within the instructions may populate corresponding pre-designated fields of the graphical user interface. For instance, a column value input would be inserted into a pre-designated column field on the ART intermediary  graphical user interface. These instructions may, for example, be issued by QuickTest Professional\u00ae automated testing tool  and executed upon a rendered graphical user interface for the Visual Basic\u00ae .NET\u2122 based ART intermediary .","Subsequently, in step , the ART intermediary  selects pre-written computer code based on the populated graphical user interface for the ART intermediary . Executable code may be generated by combining pre-written computer code with relevant inputs (such as the column value). The corresponding pre-written computer code is identified by a pre-defined association with one or more fields in the ART intermediary . For example, a populated column field in the ART intermediary  may therefore indicate to the ART intermediary  that the corresponding pre-written computer code for setting a column value should be selected for execution.","In step , the ART intermediary  populates the selected pre-written computer code with the correct inputs. Executable code may be created by simply inserting the relevant inputs populating the input fields of the graphical user interface (i.e. row value, column value, etc.) into the selected pre-written computer code corresponding to the input fields. Continuing the previous example, the pre-written computer code for setting a column value would be populated with the column value input. The ART intermediary  will have therefore created corresponding functional output code that, when executed, would set a column value on the AUT .","In step , the ART intermediary  may issue all populated output code for execution. The ART intermediary  may execute the code on the AUT , or it may be passed to, for example, an API  for execution upon the AUT . Subsequently, the output code executes upon the AUT , thereby initiating actual automated regression testing on the AUT .","It is understood that the ART intermediary  may be adapted to operate in conjunction with more than one AUT  or more than one application testing tool . For example, the ART intermediary  may be designed to operate in conjunction with multiple AUTs simultaneously. Because different AUTs will often understand different types of computer code instructions, ART intermediary  may be adapted to contain multiple libraries of pre-written computer code. ART intermediary  would therefore select the appropriate library from which to retrieve pre-written computer code depending on the AUT it is currently operating on. ART intermediary  may determine which library to use by any suitable means. For example, the AUT type (and corresponding library) may be designated in advance by a user, the AUT may be queried for such information, the AUT may be analyzed for identifying features, etc.","Multiple application programming interfaces may be utilized to handle a plurality of AUTs. For example, each application programming interface may be designed to operate with a subset of AUTs. The ART intermediary  would preferably receive some indication as to which application programming interface to use for a particular AUT. This information may be, for example, pre-indicated to the ART intermediary  by a user, contained within an automation instruction, detected by the ART intermediary , etc. Subsequently, populated output code would be forwarded to the appropriate application programming interface for execution based on the designated AUT.","ART intermediary  may also be adapted to receive input from multiple compatible automated testing tools. Because different automated testing tools may have different output languages, ART intermediary  would have the capacity to discern automation instructions from a variety of sources. ART intermediary  might accomplish this in a variety of ways. For example, ART intermediary  may identify the source (and thus the format) of the automation instruction with a bit of code (prior to the automation instruction itself) indicating the source of the instruction, querying the source of the instruction, or parsing the instruction itself to determine which language should be used to interpret the instruction, etc. A number of libraries may be kept to aid the ART intermediary  in decoding automation instructions. Once the format of the automation instruction is known, ART intermediary  may utilize the associated library to parse and execute the instruction upon itself, as typical.","Having described and illustrated the principles of this application by reference to one or more preferred embodiments, it should be apparent that the preferred embodiment(s) may be modified in arrangement and detail without departing from the principles disclosed herein and that it is intended that the application be construed as including all such modifications and variations insofar as they come within the spirit and scope of the subject matter disclosed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["This disclosure is further described in the detailed description that follows, with reference to the drawings, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
