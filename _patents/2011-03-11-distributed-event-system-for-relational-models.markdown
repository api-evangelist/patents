---
title: Distributed event system for relational models
abstract: A distributed event system for a relational database is disclosed. An event data model operatively describes a target database. For a subject entity in the target database, the event data model declares and defines triggering events and respective corresponding operations. An event engine monitors database queries and events involving the subject entity and determines from the event data model corresponding operations. Execution of the determined corresponding operations is distributed to network-based agents. Agents may be filtered based on skills and/or credentials injected at runtime. Code binaries of the operations are downloaded to the agents for execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384361&OS=09384361&RS=09384361
owner: VMware, Inc.
number: 09384361
owner_city: Palo Alto
owner_country: US
publication_date: 20110311
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a national stage application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/028095, filed Mar. 11, 2011, which claims priority to and the benefit under 35 U.S.C. \u00a7119(e) of U.S. Provisional Application No. 61\/313,951, filed on Mar. 15, 2010, which applications are all incorporated by reference into the present disclosure in their entirety.","The entire teachings of the above application(s) are incorporated herein by reference.","Generally in the state of the art, relational database systems only provide security at object\/operation level. For example, it is possible to configure which users can read or modify a table, view or store procedure. It is also possible in more advanced database systems to control row level access using views to control access to the data (using role membership functions provided by the database system) and a model to store the association of data labels to roles that can be used to filter the data presented by the view. Those mechanisms present the following problems:","(1) The user or group accessing the database needs to be configured in the database system.","(2) The database system must have physical access to the security store (i.e. LDAP) in order to resolve user group memberships and the state of the account (enabled\/disabled).","(3) The identity of the user must be used with or upon connection to the database.","(4) Authentication of users on multi layer systems requires delegation of credentials which is not universally available.","(5) Authenticating every user in the database server prevents the usage of connection pools and therefore degrades performance.","(6) Forcing the database to resolve users, groups and role memberships degrades performance.","(7) Changes on the security roles, requires modification of database objects (i.e. views or store procedures).","Further traditional distributed systems or ordinary centralized systems provide no transparency to the user and lack ability to adapt to complexities of the user and their environment.","The present invention addresses the shortcomings of the prior art. In particular, embodiments provide a declarative distributed event system for relational data models.","The event system allows the execution of predefined operations upon the creation, modification or deletion of entities on a target relational model. Events can be filtered using conditional statements over the data of the target entity.","In one embodiment, a database method and system comprise:","providing an event data model of a target database, the target database being one of a plurality of unrelated and non-centrally managed databases;","per a subject entity in the target database, using the event data model to declare and define triggering events and respective corresponding operations for each triggering event;","monitoring queries of the target database in a manner detecting occurrence of an event involving the subject entity in the target database;","based on the detected event, determining from the event data model corresponding operations; and","distributing execution of the determined corresponding operations. In particular, the distributed execution employs one or more agents. Each agent downloads the respective code binaries of the determined corresponding operation that the agent is executing.","In one embodiment, each agent has a common set of skills. The invention system further annotates the event data model with skills in a manner that enables respective filtering of agents for executing different operations.","In accordance with another aspect of the present invention, different agents have different credentials. An event engine of the invention system injects credentials per operation at runtime. An event runtime subsystem of the event engine posts the pending operations for agents to obtain on a first come, first served basis in some embodiments.","In accordance with other aspects, the event engine monitoring and detecting occurrence of an event involving the subject entity includes a security runtime subsystem. The security runtime subsystem intercepts a query of the target database and identifies the subject entity as part of the query. The security runtime subsystem then cross-references events and corresponding operations in the event data model for the subject entity as identified.","A description of example embodiments of the invention follows. The teachings of all patents, published applications and references cited herein are incorporated by reference in their entirety.","The diagram of  represents the components of one embodiment of the present invention. The illustrated system  provides and implements a declarative distributed event system for relational data models or a target database system . Systems  embodying the present invention may operate on or otherwise apply to a plurality of relational models\/databases  at a time. The databases  are unrelated to each other and non-centrally managed. The illustrated non-limiting, example system  comprises:","(1) a repository  storing models  of the target databases ;","(2) a model manager  defining and managing models ;","(3) a distributed event engine  that at run time manages different types of events and associates them with the execution of one or more workflows; and","(4) a web service interface  that presents to users representations of the models .","The repository  comprises: (1) a plurality of models  and (2) a model manager . The plurality of models  includes custom models along with system standard models. Each model  is formed of data models representative of a target database , business logic, event triggers and functions, security definitions and distribution configurations. Each of these elements that are part of a model  can be created, modified, and injected into the model manager \/repository . The model manager  manages these elements per model  and groups these elements into a model .","For a given model , its data model defines entities, attributes and relationships, such as tables and sub-tables and organization of the tables\/sub-tables of the target database . Security configurations can be defined at each logical level (table element, sub-table element, table part or whole, sub-table part or whole).","Custom business logic can be easily written composing workflows from a library of existing activities that include integrations with external systems, and utilities for data and model management. System  can associate a different custom task for each read, write and delete operation on any data element in a subject model . For example, system  can execute workflow \u201cA\u201d every time a new request is submitted, or execute workflow \u201cB\u201d every time a virtual machine is deleted.","Defining, modifying or updating part of a model , injecting new models  into the model manager \/repository  or updating old ones is a simple configuration task in system  that requires no coding or compilation, and can be performed while an instance of repository  is running. For each model , the system  defines in model manager \/repository  the model's data and business logic and specifies in model manager  the model's security, event and distribution configurations. This enables the model manager  and repository  to govern who, when and where business logic is executed and data is accessed.","In one embodiment, the governance structure of repository  can tailor and control how services are provided and customized for specific users, groups and organizations. By services, Applicant's refer to virtual machines, desk tops, physical servers, and in general any infrastructure, platform or software managed by the system  within a private or public cloud.","Repository's  governance structure controls aspects of a custom solution that integrates with an external database\/relational model  system. In particular, repository's  governance controls:\n\n","A new data model (at ) can be defined in two ways:\n\n","The data model and corresponding model  can then be injected into the model manager  and the repository , and in turn the model manager  automatically generates a REST interface  (or the like web service interface). Unlike a typical REST interface  that exposes the entire contents of a URI (Uniform Resource Identifier, identifying a resource on the internet), system's  automatically generated REST interface  exposes only selected parts to the data using access permissions, rules and filters that can easily support complex conditions. This is accomplished without writing explicit or dedicated code. The data from external systems  or from new models  can be read, modified, and deleted by users using the REST interface  and governance structure of repository .","The foregoing discusses how the model manager  is used to define and configure data, workflows, security and events. Next is described the system  run time environment.","Both the repository  management logic and any custom logic added to model manager  is executed in a distributed execution environment. In a preferred embodiment, the repository  run time environment is formed of a distributed event engine  and one or more agents . Agents  are empty \u201ccontainers\u201d that can execute any workflow managed by the model manager .","Generally, an agent , through distributed event engine , communicates with repository  using the REST interface . An agent  pings or otherwise communicates with the model manager  to see whether there are workflows to be executed. If there are, then an appropriate workflow (in code binaries) is downloaded from the model manager  and executed. The fact that an agent  initiates the communication with repository  greatly simplifies the installation of agents  across network segments and across firewalls. Upgrading the software that is executed by an agent  becomes a non-issue, as an agent  is logically an empty container that can only execute workflows (code binaries) downloaded from the model manager .","In some embodiments, version checking on the downloaded binaries using known technology may be utilized by agents . Other techniques common in the art for determining that the code binaries at the agent  end are up-to-date relative to the code binaries at the model manager  end are suitable.","The high level operation of invention system  is as follows. First a user submits a query  to a target relational model  via repository . The target relational model  may be one of many databases . In response, the repository  intercepts the input query  and identifies the submitting user. The user name can be provided as additional information in the query  in order to support delegation.","Next, repository  parses the query  and identifies which database objects or entities are to be accessed by the query . The repository  looks up in the MetaModel  the security information of the database entities to be accessed and resolves any group memberships stored in the authorization store (i.e. LDAP) . As a result, the repository  either allows or disallows access to the database objects\/entities before even reaching the database .","For allowed access, the repository  modifies the query before it is submitted to the relational model  such that the data objects for which the user is unauthorized to access are filtered out, for example using a SQL where clause. A modified query applied to relational model  results.","In response to a triggering event, e.g., creation, modification or deletion of entities in data model , distributed event engine  determines which operations to execute and which agents  to employ to process the operations.","Distributed event engine  looks up, in models  and metamodel , stored definitions of operations per events. In this way, the event operations are predefined in and by models . Example event operations include filters, event scheduling (by absolute time, relative time or recurrent interval), a dynamic menu to an end user's application, and others.","Distributed event engine  may annotate the operations with certain skills and may inject credentials at runtime. This filters the operations to agents  having qualifying skills and network credentials. As a result, system  can load balance the work across agents  and with the injected credentials adds a level of flexibility in distributing work across the network.","In preferred embodiments, a skill is a qualifier that is associated to workflows and to agents . Any number and combination of required skills can be associated with a workflow. For example, a workflow will only run in a specific location or will require an environment that supports a specific API that the workflow is using. Any number or combination of skills can be supported by an agent . Any combination of workflow\/agent skills determines which agent  will be used for the execution of a specific workflow.","Distributed event engine  posts or queues the operations ready for execution. Agents  obtain operations from the queue on a first come, first served basis, and execute. In particular, agents  download the code binaries of the operations to execute.","In a preferred embodiment, MetaModel  stores the security configuration information as data that qualify which data object(s) is accessible by certain user role\/task. This information is also secured by the repository  itself (in models ) making the invention security system  dynamically adjustable at runtime.","Relational Models ","A plurality of relational data models  is hosted in a storage system that includes a query language capable of processing queries with conditional statements support. An example of (but not limited to) such a storage system is a relational database with support for primary and foreign keys, join statements and where clauses. The relational data models  in the plurality are generally unrelated to each other, disparate and non-centrally managed.","Each relational model  includes all of its relationships and entities in a standard machine readable format. This machine readable information (model metadata ) includes a full description of all of the entities that are used to store data, including the type of information of the data stored, and the relationships between all the entities.","An example of a rational data model  and corresponding XML metadata  (machine readable) is provided in  and detailed as follows:",{"@attributes":{"id":"p-0062","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","<model>"]},{"entry":[{},{},"<entities>"]},{"entry":[{},{},"\u2003<entity name=\u201cAddress\u201d>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cAddressId\u201d key=\u201ctrue\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cStreet\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cCity\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cZipCode\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cCountry\u201d\/>"]},{"entry":[{},{},"\u2003<\/entity>"]},{"entry":[{},{},"\u2003<entity name=\u201cEmployee\u201d>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cEmployeeId\u201d key=\u201ctrue\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cName\u201d\/>"]},{"entry":[{},{},"\u2003<\/entity>"]},{"entry":[{},{},"\u2003<entity name=\u201cTelephone\u201d>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cTelephoneId\u201d key=\u201ctrue\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<properties name=\u201cPhoneNumber\u201d\/>"]},{"entry":[{},{},"\u2003<\/entity>"]},{"entry":[{},{},"<\/entities>"]},{"entry":[{},{},"<relationships>"]},{"entry":[{},{},"\u2003<relationship>"]},{"entry":[{},{},"\u2003\u2003<end name=\u201cAddress\u201d multiplicity=\u201c*\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<end name=\u201cEmployee\u201d multiplicity=\u201c*\u201d\/>"]},{"entry":[{},{},"\u2003<\/relationship>"]},{"entry":[{},{},"\u2003<relationship>"]},{"entry":[{},{},"\u2003\u2003<end name=\u201cTelephone\u201d multiplicity=\u201c*\u201d\/>"]},{"entry":[{},{},"\u2003\u2003<end name=\u201cEmployee\u201d multiplicity=\u201c1\u201d\/>"]},{"entry":[{},{},"\u2003<\/relationship>"]},{"entry":[{},{},"<\/relationships>"]},{"entry":[{},{},"<\/model>"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The meta model  data provides the data models of models .","Role Based Security System ","The declarative role based security system  is preferably formed of two main subsystems: a data subsystem and a security runtime subsystem.","That Data subsystem is a relational model used to store security access rules of the target relational model . The rules set forth who has access by organization, groups of users, and the like roles, and what these roles can respectively see and do. This defines how to relate to the relational model  data and what database  rows to relate. The security system  uses hierarchical structures in order to maximize the expressiveness of the system and thus minimize repetition of information when representing complex relationships between the access control rules and different user roles of the target model .","The security runtime subsystem is a set of algorithms used to determine the access control rules that apply to a particular user, and filter data not accessible to (unauthorized for) that user. The security runtime intercepts any queries  to the storage system of the target relational model . It then modifies the queries such that unauthorized data (i.e., data not authorized to be accessible to the user) is filtered.","In one embodiment, the role based security information  is stored using the relational model illustrated in . In ,","Model: represents a target relational model  to be secured and has declared definitions of data entities and relationships.","Entity: represents an entity or object in the target model .","EntityAuthorization: represents an access rule associated to an entity, for example read access to the entity.","EntityFilter: is a set of conditional statements over the data of a target entity and its relationships. For example \u201cEmployee.Addresses.City=London\u201d","Scope: is a bit of information that can be used to group a set of entities in the target model . The data in a scope can be used to uniquely identify the entities that belong to that scope. For example, a scope could be the name of a city, such as London, then all of the addresses in London, employees who live in London and all London phone numbers can be uniquely identified as part of the scope.","RoleAssignment: represents the role of a user in a particular scope.","RoleDefinition: represents a role within the system, for example, users, administrators, visitors.","TaskDefinition: represents a set of tasks associated to a role.","Model manager  uses the foregoing as part of the security configuration of a model  stored in repository  and related to a target database\/relational model . Then in accordance with model  definitions, model manager  generates code to produce a pertinent representation of target database  in REST or web service interface .","Distributed Event Engine ","In embodiments of the invention system , the distributed event engine  comprises an event data subsystem , an event runtime subsystem , and one or more agents .","The event data subsystem  is a relational model used to store event definitions on the target relational model . It also contains the definitions of operations and filters.","The event runtime subsystem  is a set of algorithms used to determine which operations to execute when an target database  event occurs.","Each Agent  is a remote process executing respective operations scheduled by the event runtime subsystem . An agent  processes operations in an asynchronous manner. In some embodiments, there are a plurality of agents , each having common skills. Agents  obtain operations scheduled by the event runtime subsystem  on a first-come-first served basis. Where the agents  have a same set of skills, the invention system  can load balance the work across plural agents . As will be made clear below, the invention system  filters work (operations) by agent skill and agent credentials.","The event data subsystem  relational model in one embodiment is illustrated in  and detailed as follows:","Model: represents a target relational model  to be secured and has declared definitions of data entities and their relationships.","Entity: represents an entity in the target database model .","EntityEventDefinition: represents an event associated to an operation over an entity, for example create a new instance of an entity.","EntityFilter: set of conditional statements over the data of a target entity and its relationships. For example \u201cEmployee.Name=\u2018Abe\u2019\u201d","Workflow: An operation or program to be executed when an entity event is triggered. Invention system  can annotate workflows with skills. This serves to filter WorkflowInstances to the agents  having respective skills.","WorkflowInstance: An instance of an operation to be executed in an agent .","WorkflowArgument: Arguments of an operation.","Agent: The name of a remote process capable of executing WorkflowInstances. Each agent  in the network can run under different network credentials, for example credentials may be specific to location the agent  is running in. The invention distributed event engine  in some embodiments can inject credentials into a WorkflowInstance assigned to an agent where the agent  has respective credentials. This provides a level of flexibility in distributing workflow.","For any given query , the process sequence by invention system  is as follows.","Step 1. To begin, a query  is submitted and in turn intercepted by the security runtime subsystem at  in the form of an expression tree. For example:","\u201cINSERT INTO Employee (Name) VALUES (\u2018Abe\u2019)\u201d","Step 2. The security runtime subsystem of  parses the expression tree and identifies which entities in the target model  are part of the query . In the example:","Employee","Step 3. Next the security runtime subsystem of  builds a list of events associated to that entity from metadata definitions (including annotations of skills) stored in event data subsystem . In the example:","Workflow=NotifyUser","EntityEventDefinition=Employee (Create=true)","EntityFilter=Employee.Name=\u2018Abe\u2019","Step 4. The security runtime subsystem of  builds an expression tree to filter the events using the following algorithm:","a. Generate an expression for each filter in the list generated in Step 3:\n\n","b. All expressions are concatenated into a single expression using the AND expression.","Step 5. The security runtime subsystem of  evaluates the expression generated in Step 4. If the return value is true, the security runtime subsystem  schedules with event engine  (event runtime subsystem ) an instance of the operation associated to the event. In doing so, the security runtime subsystem  passes as arguments a copy of the entity data as it looks at the time the event occurred. In turn, event runtime subsystem  compiles and automatically generates the desired code and injects that code (operations) into system . One or more pending operations managed by model manager  result.","Step 6. An agent  of event engine  reads the list of pending operations scheduled above, pulls down from repository  the code binaries for an operation and executes the code\/operation. That is, per skill and credentials of the agent , the agent obtains an operation (WorkInstance) having matching or otherwise qualifying\/acceptable skill (as annotated) and credentials (as injected) and executes that operation. If in operation, the agent  needs to make a data request, the agent generates a suitable query and system  processes as described above.","In this way, the invention system  automates low level code generation using a declarative approach. Definitions of business processes, triggering events and corresponding data model (target databases), and organizational rules for the data (actions and operations) are declared. In accordance with these declarations, event engine  compiles and generates low level code on the fly and interjects such code into the system  and computer network thereof.","Thus the present invention system  provides a declarative distributed event system for relational data models . Moreover, the present invention presents a resource and data centric, global computer network (i.e., Internet) scale architecture. Declarative, distributed events systems of the present invention are capable of operation across a computer network, and allow for adapting to, preserving and having no limits on canonical styles of target database. The declarative approach of Applicant's invention allows one to describe what the system should do as opposed to how the system should do it. Such advantages are not achieved by the prior art.",{"@attributes":{"id":"p-0108","num":"0115"},"figref":"FIG. 5"},"Client computer(s)\/devices  and server computer(s)  provide processing, storage, and input\/output devices executing application programs and the like. Client computer(s)\/devices  can also be linked through communications network  to other computing devices, including other client devices\/processes  and server computer(s) . Communications network  can be part of a remote access network, a global network (e.g., the Internet), a worldwide collection of computers, Local area or Wide area networks, and gateways that currently use respective protocols (TCP\/IP, Bluetooth, etc.) to communicate with one another. Other electronic device\/computer network architectures are suitable.",{"@attributes":{"id":"p-0110","num":"0117"},"figref":["FIG. 6","FIG. 5","FIG. 5"],"b":["50","60","50","60","79","79","79","82","50","60","86","70","90","92","94","17","25","41","95","92","94","84","79"]},"In one embodiment, the processor routines  and data  are a computer program product (generally referenced ), including a computer readable medium (e.g., a removable storage medium such as one or more DVD-ROM's, CD-ROM's, diskettes, tapes, etc.) that provides at least a portion of the software instructions for the invention system. Computer program product  can be installed by any suitable software installation procedure, as is well known in the art. In another embodiment, at least a portion of the software instructions may also be downloaded over a cable, communication and\/or wireless connection. In other embodiments, the invention programs are a computer program propagated signal product  embodied on a propagated signal on a propagation medium (e.g., a radio wave, an infrared wave, a laser wave, a sound wave, or an electrical wave propagated over a global network such as the Internet, or other network(s)). Such carrier medium or signals provide at least a portion of the software instructions for the present invention routines\/program .","In alternate embodiments, the propagated signal is an analog carrier wave or digital signal carried on the propagated medium. For example, the propagated signal may be a digitized signal propagated over a global network (e.g., the Internet), a telecommunications network, or other network. In one embodiment, the propagated signal is a signal that is transmitted over the propagation medium over a period of time, such as the instructions for a software application sent in packets over a network over a period of milliseconds, seconds, minutes, or longer. In another embodiment, the computer readable medium of computer program product  is a propagation medium that the computer system  may receive and read, such as by receiving the propagation medium and identifying a propagated signal embodied in the propagation medium, as described above for computer program propagated signal product.","Generally speaking, the term \u201ccarrier medium\u201d or transient carrier encompasses the foregoing transient signals, propagated signals, propagated medium, storage medium and the like.","While this invention has been particularly shown and described with references to example embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing will be apparent from the following more particular description of example embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating embodiments of the present invention.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 6","FIG. 5"]}]},"DETDESC":[{},{}]}
