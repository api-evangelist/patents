---
title: Arrangement for arbitration of display information from multiple applications for a network enabled display device
abstract: A network-enabled user interface device, for example a VoIP telephony device, includes a display, a user input interface, an interface controller, and an application controller. The display is logically defined to include multiple distinct display areas. The interface controller is configured for generating display elements for the respective display areas based on received display requests, and controlling the user input interface based on received commands, and outputting responses to the application controller. The application controller is configured for supplying the commands to the interface controller and display requests based on execution of application operations. The application operations may be executed locally (i.e., within the user interface device), or remotely (e.g., by a server in communication with the user interface device). Remote application operations may include communications between the application controller and the remote server. The interface controller includes an arbitrator configured for selecting, for each display area, a corresponding display element to be displayed based on the received display requests, and based on determined conditions such as application state based on user input. Hence, multiple display elements for different application services may be selected for simultaneous display in respective display areas on the network-enabled user interface device based on prescribed conditions; moreover, the display may be dynamically changed by the arbitrator based on prescribed conditions, for example user input, an application state change, or a prescribed detected event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07106298&OS=07106298&RS=07106298
owner: Cisco Technology, Inc.
number: 07106298
owner_city: San Jose
owner_country: US
publication_date: 20010919
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to control of display data on network enabled user devices, for example Voice over IP Telephones, configured for displaying data for multiple service operations.","2. Description of the Related Art","Telephony devices have advanced to provide enhanced features for business consumers. For example, a business premises deploying a Private Branch Exchange (PBX) for intraoffice or interoffice communications utilizes telephony devices capable of receiving messages from the PBX, including a time of day string or a calling party identity string. However, proprietary PBX systems limit the availability of features that can be added to the telephony device. In addition, proprietary PBX systems typically provide voice-only services, such that text, data, or images cannot be transferred to the telephony device.","Voice over IP (VoIP) technology has evolved to provide network enabled telephony devices, for example Voice over IP telephony devices, configured for performing multiple operations that emulate a telephony device. VoIP telephony devices often include large display screens or other display capabilities, enabling new service features to be provided for a user. For example, the VoIP telephones, such as the commercially-available Cisco Telecaster 7960 IP Telephone from Cisco Systems, San Jose, Calif., includes user input and display operations. These user input and display operations enable a user to access multiple windows displaying respective applications based on soft key or hard key inputs, such as accessing a central telephone directory for retrieval of an employee's telephone number using a search query or selection from the displayed list. A user of the VoIP telephone can access one window configured for displaying call status (e.g., duration of call, called party identity), or access another window configured for displaying the central telephone directory.","The executable software resident in the VoIP telephone, however, tends to be device-specific. Hence, the executable software needs to be rewritten for newer VoIP telephones having different hardware configurations (e.g., different sets of hard buttons, color display vs. greyscale display, different-sized display, etc.), although compatability issues may be reduced using hardware abstraction layers and input abstraction layers between the telephone display controller, the display portion, and the input portion. Moreover, the device-specific nature of the VoIP telephone software limits the manner in which different application services can be added to the VoIP telephone device for the device user: the VoIP telephone software needs to be modified to add the different application services. In addition, the VoIP telephone typically is configured for communication with a single call server, resulting in additional resource requirements imposed on the call server as services are added.","Browser-based telephony device technology is being implemented in wireless telephones using Wireless Application Protocol (WAP). In particular, WAP uses Extensible Markup Language (XML) technology to communicate interface changes to wireless devices such as digital wireless telephones and pagers, enabling applications and services to be provided to the digital wireless telephones. The use of XML tags enables the data to be displayed on the digital wireless telephone display in a prescribed manner.","The WAP-based approach to displaying data on the digital wireless telephone still suffers from the disadvantage that the input and display controllers of the digital wireless telephone interact with a single WAP portal (i.e., server), limiting the flexibility of the telephony device operations. In particular, a user is unable to send or receive a wireless telephone call on his or her web-enabled digital wireless telephone while using the digital wireless telephone to access the Internet.","Hence, the WAP-based systems still limit flexibility in delivering user interface applications to a telephony user.","Existing display technology for personal computers utilizes an application resource to control at least a portion of a display. Hence, a computer executing a Microsoft Windows operating system opens up a new window for each application instance, where the application instance controls the contents of the display area within the window. The user may initiate multiple application instances and control the size and location of each corresponding window using a mouse, such that there may be overlapping windows, however each application instance still retains control of the corresponding nonoverlapping area.","Use of a user pointing device, such as a mouse, however, is not practical on certain user devices, such as the Voice over IP telephony device, hence overlapping windows cannot be easily controlled on the display of the user device. Moreover, the limited size of the display on the user device renders impractical the use of overlapping windows. Hence, the Microsoft Windows type system is not practical for use for controlling the display of multiple application services on a Voice over IP telephony device.","There is a need for an arrangement that enables multiple application services to be displayed on a network-enabled user device, for example a VoIP telephony device having a display, independent of the hardware implementation of the display.","There also is a need for an arrangement that enables a multiple application services to be displayed on a network-enabled user device, for example a VoIP telephony device, according to an open protocol.","There also is a need for an arrangement that enables multiple application servers to provide display content to an IP-based client device, for example a VoIP telephony device, in a manner that enables the VoIP telephony device to retain control of the presentation of the display content to the user.","There also is a need for an arrangement that enables a network-enabled user device, for example a VoIP telephony device, to control the simultaneous display of selected application display objects from respective application services without the necessity of overlapping window regions.","These and other needs are attained by the present invention, where a network-enabled user interface device, for example a VoIP telephony device, includes a display, a user input interface, an interface controller, and an application controller. The display is logically defined to include multiple distinct display areas. The interface controller is configured for generating display elements for the respective display areas based on received display requests, and controlling the user input interface based on received commands, and outputting responses to the application controller. The application controller is configured for supplying the commands to the interface controller and display requests based on execution of application operations. The application operations may be executed locally (i.e., within the user interface device), or remotely (e.g., by a server in communication with the user interface device). Remote application operations may include communications between the application controller and the remote server. The interface controller includes an arbitrator configured for selecting, for each display area, a corresponding display element to be displayed based on the received display requests, and based on determined conditions such as application state based on user input. Hence, multiple display elements for different application services may be selected for simultaneous display in respective display areas on the network-enabled user interface device based on prescribed conditions; moreover, the display may be dynamically changed by the arbitrator based on prescribed conditions, for example user input, an application state change, or a prescribed detected event.","One aspect of the present invention provides a network-enabled user interface device. The device includes a display screen configured for displaying display elements within respective distinct display areas, a user input interface configured for supplying user inputs, an application controller, and an interface controller. The application controller is configured for obtaining display requests from executable application resources, and includes a network interface configured for receiving at least a portion of the display requests from a corresponding remote group of the executable application resources via an open protocol network. The interface controller is configured for defining the distinct display areas and outputting the display elements for the respective distinct display areas, and includes an arbitrator configured for selecting, from the display requests, the display element for each corresponding display area based on at least one of a corresponding determined condition and a determined presence of a selected one of the user inputs. Use of the interface controller to define the distinct display areas simplifies the display of display elements, since application resources can send requests in the form of an application programming interface for the display of prescribed application objects, eliminating the necessity of application-based control of the display. Moreover, use of the arbitrator enables the device to centrally control the display based on detecting events including user inputs, received event messages, and received display requests from executable applications. Hence, multiple arbitrary applications may be executed remotely while the user interface device dynamically controls the display based on display state and detected events.","Another aspect of the present invention provides a method of controlling a display screen of a network-enabled user interface device configured for network-based communications via an open protocol network. The method includes receiving application-based display requests from executable application resources, at least a portion of the display requests received via an open protocol network. The method also includes selecting display elements to be displayed within respective distinct display areas of a display screen, based on arbitrating the display requests relative to at least one of a corresponding determined condition and a determined presence of a selected user input, and outputting the display elements for display within the respective distinct display areas.","Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.","The disclosed embodiment is directed to an arrangement for controlling the display of a user interface device based on generation of display elements for respective display areas, where display requests are arbitrated to select the appropriate display element for each corresponding display area. Hence, the use of arbitration for prescribed display areas enables use of a message-based display arrangement, where executable application resources, executed locally within the user interface device or remotely on the open protocol network, can send display requests for application objects to be displayed. Hence, the use of arbitration enables the display to be dynamically adjusted based on the received display requests, user inputs, or asynchronous events detected by the user interface device. A description will first be provided of the network enabled user interface device configured for receiving arbitrary application services via a network, followed by a detailed description of the arrangement for controlling the display based on arbitration of received display requests.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIG. 1"],"b":["10","12","12","14","16","12","14","16","16","16","12","16","16","16"],"i":["a ","e ","b ","c ","c ","d "]},"Any of the services provided by the respective servers  can be supplied and displayed to the Voice over IP telephone device  based on commands (i.e., \u201crequests\u201d) that specify GUI operations to be performed by the Voice over IP telephone device . In addition, a locally executable application (i.e., an application executed by the Voice over IP telephone device ) may include a device manager configured for establishing a default communications with the call server : the locally executable application also may specify GUI operations to be performed by generating a request, described below. If additional services are desired by the user of the Voice over IP telephone device , the user may generate a request for initiation of such services using, for example, a services installation application which may be executable locally within the Voice over IP telephone device , or a remote server such as the call server ","In addition, the Voice over IP telephone  may receive notification messages from servers such as the newscast server or the notification server , independent of any actions by the user of the Voice over IP telephone device .","Hence, arbitrary services can be provided to the user of the Voice over IP telephone device  based on execution of local application or servers (i.e., remote applications), using a generic application-based command set for control and configuration of the user interface components of the Voice over IP telephone device  described below.","The Voice over IP telephone device  includes a display screen  configured for displaying display elements . For example, the display screen  may display an application window having soft key buttons for window-specific user input options. Additional display elements may be implemented as tab keys that identify additional application services that may be selected by a user, where a user selects the corresponding application by pressing the corresponding tab . Additional display elements may be implemented as telephone device elements that may indicate device-specific state information, any one of which may be used to provide a hierarchal menu list based on pressing the corresponding soft key input.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 3","FIG. 1","FIG. 2"],"b":["12","12","20","12","24","22","22","22","26","26","26","24","26","12","27","29"],"i":["b","c","d","a","b"]},"The Voice over IP telephone device  also includes a graphic user interface (GUI) controller , and an application controller . The Voice over IP telephone device  also includes locally executable applications , for example a telephone application configured for initiating and receiving Voice over IP based telephone calls between the call server according to Voice over IP protocol, for example, Media Gateway Control Protocol (MGCP) (RFC 2705), Session Initiation Protocol (SIP) (RFC 2543), H.323 protocol, etc. Other examples of locally executable applications include a device manager configured for managing local operation of the Voice over IP telephone device .","The GUI controller  is configured for receiving application-based commands (i.e., \u201crequests\u201d)  from the application controller  that specify an application state (specified by an XML document ) to be performed. For example, each application-based command  is received by the GUI controller  in the form of a text-based message, and specifies at least one of a display operation that specifies display parameters (e.g., an application object and corresponding application information) for a display element , an input operation specifying an input operation for a soft key or a hard key by the user input interface , and\/or response logic enabling the GUI controller  to determine how to respond to a prescribed user input supplied by the user input interface .","The GUI controller  also is configured for outputting application-based responses (i.e., \u201cposts\u201d)  based on the supplied user inputs from the user input interface  and based on the application-based commands that specify the manner in which the posts  should be generated. Hence, each application, executed locally (e.g., application ) or remotely (e.g., a server ), operate according to a request\/response system, enabling deployment of arbitrary application within the Voice over IP telephone device  based on standardized messaging protocols, described below.","The Voice over IP telephone device  implements application-specific messaging using extensible markup language (XML) documents , referred to as \u201capplication state documents\u201d, that are used to define the generic messaging protocol (i.e., command set) available to executable applications. In particular, the GUI controller  includes a stack , and an XML module . The XML module  includes an XML file store  for storing XML documents , and an XML parser  for parsing a selected XML document. Each XML document  corresponds to a specified state of an executable application (hence the term \u201capplication state document\u201d), and may reference another XML document. Each XML document  includes XML tags that specify an operation to be performed: for example, XML tags can specify the manner in which display elements  are to be displayed, how input operations are to be performed by the user input interface , how inputs supplied by a user should be interpreted, how audio files should be played, etc.","In other words, an XML document  can specify any operation to be performed, for example displaying text, graphics, or video (stored locally within the GUI controller  as interface elements or supplied from a remote location via the IP network), playing an audio (e.g., .wav) file (stored locally as an interface element or supplied with the command), or initiating a prescribed procedure. Each XML document  also has a corresponding identifier that enables the executable applications (e.g.,  or ) to identify for execution a prescribed interface operation (e.g., displaying a prescribed display element and providing prescribed input operations).","As described above, each XML document (e.g., ) specifies a prescribed application state, and may reference another XML document (e.g., ) that specifies another corresponding application state for the same executable application. Hence, the XML application state documents  are grouped into XML applications , where a group of application state documents  collectively define the XML-based application to be performed. Hence, the XML application state documents  are stored within an XML file store  in groups of XML applications , , and . For example, the XML documents and specify respective states of the XML application , and the XML documents and specify respective states of the XML application ","The XML documents for a prescribed application typically are loaded in the XML file store  as default documents; alternately, newer application-specific XML documents  may be loaded into the XML file store  during registration of a new application service. A remote application service provided by a remote server  also may supply its own XML document, within the message  via the IP network , for parsing by the XML parser . The stack  is configured for storing active XML documents used by the GUI controller  for active applications, and display lists, described below with reference to . The XML parser  is configured for generating display element identifiers specifying display elements to be displayed (i.e., display operations), input identifiers that specify the input operations to be performed by the user input interface , and any other identifiers specified during the selected XML document based on the application-specific commands  (e.g., video or audio operations).","In particular, the graphic user interface (GUI) controller  is configured for parsing the text strings  and recovering the application specific commands (e.g., the XML document identifiers), and forwarding the application-specific commands to the XML module . For example, the application specific command may specify the XML document  to be retrieved from the XML file store  and parsed to determine the interface elements to be applied. The XML parser , upon parsing the selected XML document, outputs the identifiers specified in the parsed XML document to a GUI elements table .","The GUI elements table  is configured for storing available interface elements, for example menu elements, input elements, text elements, graphic elements, soft key elements, hardware light elements, speaker elements, etc. Each GUI element specifies instructions and parameters that enable the generation of the corresponding interface operation. The GUI elements table  outputs the selected elements to a display abstraction interface  and\/or an input abstraction interface , or the speaker  as appropriate. The display abstraction interface  is configured for generating display-specific images for display of the respective display elements by the display screen , and the input abstraction interface  is configured for generating hardware-specific commands for configuration of the user input interface for the respective selected input operations.","Hence, the local and remotely executed applications control the user interface of the Voice over IP telephone device  by sending text-based messages to the GUI controller ; the text-based messages are used to identify an XML document , stored in the XML file store , to be parsed for identification of display elements and selected input operations to be provided to the display screen  and the user input interface , respectively. The XML module  outputs the display element identifier and\/or the input operation identifier, also referred to in  as application objects , in the form of a request  which is output to an arbitrator . The arbitrator  is configured for selecting the requests  that are executed immediately, as opposed to being cached, described below. The selected display element identifiers are supplied to the GUI elements table  for retrieving the display elements to be displayed and\/or the input operations to be performed.","Specific data defining the display element and the input operations are retrieved from the GUI element table  and forwarded to the appropriate hardware abstraction interface  or . The hardware abstraction interfaces convert the supplied GUI elements to hardware-specific instructions to cause the display screen  and the user input interface  to provide the appropriate interface elements.","The GUI controller  also include a messaging interface  configured for receiving event messages , composed of text-based messaging. In particular, the event messages are time-oriented messages that specify the occurrence of prescribed events, for example a one second timer for updating the time display element, or other time-oriented messages occurring independently of local or remote application states. The event messages may be sent either to the XML module  for parsing a prescribed XML document  (e.g., for playing an audio or video announcement), or to the GUI elements table  for generation of a display element including the supplied text.","Additional details related to the execution of arbitrary applications by the Voice over IP telephony device  are disclosed in commonly-assigned, copending application Ser. No. 09\/883,211, filed Jun. 19, 2001, entitled \u201cArrangement for Delivering Applications to a Network Enabled Telephony Device\u201d, the disclosure of which is incorporated in its entirety herein by reference.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["12","22","20","60","25","48","20","60","48","20","60","60","22","60","60","60","60","90","40","60","90","60","25","34","30","32","38","38","62","64","66","64","48","62","64","68","70"],"i":["a ","b ","c","d","e","f","a "]},"The arbitrator  is configured for selecting the display list entries  to be displayed based on different rules defining the arbitration. For example, the arbitrator may apply a first-come first-serve arbitration; however, the arbitrator also may apply rule-based heuristics to select which display list entries  are to be displayed.","For example, the arbitrator  may execute a set of rules, stored as XML documents accessable by the arbitrator , that define the logic (heuristics) for determining which elements are to be displayed. Certain rules may specify arbitration based on service level (i.e., importance) and application state for a particular application service; in this case, the application  may provide a service level identifier and an application state identifier for the arbitrator  to make its decision. The service level identifier may be supplied locally (e.g., by the XML module ), or remotely (e.g., included with the display request via the IP network ).","As illustrated in , the stack  is configured for storing display lists  for the respective display areas , such that each display area  has a corresponding display list ; each display list includes at least one corresponding display list entry  for storage of an application object  to be displayed in the corresponding display area . In addition to identifying the display list  for an application object , the arbitrator  also selects a display list entry  to be displayed as the display elements .","Hence, use of the arbitrator  to define the display areas , manage the respective display lists  and select a display list entry  to be displayed as a display element  enables executable resources such as the telephony application , the device manager , the notification server , etc. to send requests to display application objects within the specified display areas . The arbitrator , based on the display request , or an external event such as an event message , or the detection of a user input, determines whether the application object  within the received display request  should be displayed, and in which display area . As apparent from the foregoing, the arbitrator  may identify the display area  for the received application object  based on determining the nature of the application object  (e.g., application class, stated priority, application service lifetime, etc.), or the display area  may be specified within the display request .","As described below, the arbitrator  may also generate a new application object \u2032 that represents a compilation of information from multiple display requests, for example a list of incoming e-mail messages, where each e-mail message was received as a separate display request . Hence, the arbitrator  may dynamically generate its own application object as a summary of received display requests, enabling a user to view different application services in summary form; as apparent from the foregoing, selection by the user of a display element specifying a summary form may cause the arbitrator  to open up a new display element within the window , providing additional information for the user. Another example involves the use of instant messaging services by the Voice over IP telephony device , wherein instant messages may be temporarily suspended based on prescribed priority conditions determined by the arbitrator , for example presence status. Additional details related to presence based applications within the Voice over IP telephony device  are disclosed in commonly assigned, copending application Ser. No. 09\/908,578, filed Jul. 20, 2001, entitled \u201cIntegration of Presence Services within a Network Enabled Telephony Device\u201d, the disclosure of which is incorporated in its entirety herein by reference.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 4","FIG. 4"],"b":["20","12"]},"The method begins in step , where the XML module  detects an event, for example an event message  that specifies an asynchronous event, a user input (e.g., the user pressing a specified key), or a received display request . The XML module  accesses in step  a selected XML document based on the display state and the detected event, and parses the XML document to provide a display request  having the application object  to be displayed. The display request  is supplied to the arbitrator , which parses in step  an XML document in order to determine the arbitration rules to be applied for the given application state.","Based on the determined arbitration rules, the arbitrator  determines in step  whether the application object , which typically includes a display element identifier specifying a display element stored locally in the GUI element table , should be selected for display. If the arbitrator  determines that the application object should not be displayed, for example due to a low priority or due to an incompatible user state, etc., the arbitrator  discards the display request in step  without any change to the display . Hence, instances may arise where an executable application sends a display request, however the display object is never displayed due to the arbitration rules applied by the arbitrator .","If in step  the arbitrator  determines the application object (e.g., object ) should be displayed, the arbitrator  identifies the display list  to be used for storage of the application object  in step . For example, if the application object  specifies a pop-up message, the arbitrator  may select the display list corresponding to the window display areas ","The arbitrator  determines in step  whether a summary object \u2032 should be generated. If a summary object \u2032 is needed, the arbitrator  adds a new display list entry  including a compiled summary object \u2032 that specifies the summary information for multiple application objects in step . If no summary object is needed, the arbitrator  adds in step  the display list entry  including the application object  to the identified display list .","The arbitrator  then determines in step  whether the newly added display list entry  should be immediately displayed; for example, the arbitrator  may determine that a pop up message specified in a display list entry cannot be displayed until the user has completed a dialing sequence for a VoIP telephony session, displayed using the display list entry . Hence, the display list entries may be reselected once the user has completed a prescribed application state with a given application.","If in step  the newly added display list entry  should be immediately displayed, the arbitrator  reselects the new display entry for display in step , and outputs the top display entries  for each display list  in step  as display elements  for the respective display areas .","The arbitrator  also determines in step  whether any unused display list entries  should be discarded, and selectively discards in step  any unused display list entries .","According to the disclosed embodiment, display of information from multiple arbitrary applications may be effectively managed based on providing an application programming interface for display operations, where an executable application may specify a request to display an application object within a prescribed display area. Moreover, use of arbitration based on local display status, application state, user input, event messages, etc., enables the user to receive effectively managed display content from multiple application services, without being overwhelmed by low priority display information. In addition, since no single executable application controls the entire display , the arbitrator can present the appropriate data to the user based on a number of context sensitive heuristics.","While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not limited to the disclosed embodiments, but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
