---
title: Universal authorization and access control security measure for applications
abstract: The invention provides a system that includes: a web server, an application server, and a data server all connected to each other. The system is intended to protect web based applications. A web server receives a request and transmits it as a message to the application server. When the application server receives the request, the application server extracts attributes of this request. The application server uses an authorization engine to determine if each attribute of the request is authorized by accessing the data server to compare each attribute of the request with at least one rule from a rules store. The rules store resides on the data server. If the attributes of the request meet the rules in the rules store, then the request is executed by the application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865931&OS=07865931&RS=07865931
owner: Accenture Global Services Limited
number: 07865931
owner_city: Dublin
owner_country: IE
publication_date: 20021125
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["This invention relates generally to the field of computer network security systems. In particular, it presents a technique for controlling access to applications that perform useful functions in the processing of data through a centralized authorization system.","An unprecedented number of electronic transactions are required to sustain a modern global economy. In order to protect the persons and companies performing these transactions, it has been necessary to provide authentication and authorization systems to provide security. A typical transaction normally requires: a data server, an application, and a user of the application. The data server may, for example, be a central mainframe computer at a bank containing account information, or a database server at a retailer containing customer information, or a file server for an accounting agency containing tax files. The application may be a program running on a personal computer (PC), a portable program running on a hand-held PC or personal digital assistant (PDA), or a web-based program running on the combination of a PC web-browser, web server, and application logic server. The application is usually connected or connectable via telecommunications to the data server. The user utilizes the application to generate action requests or messages which are transmitted to the data server. Actions will be performed on resources on the data server based on the contents of the request.","Unique information for the application and\/or the user, such as a communication address, a user-id password combination, biometric information, or a security token uniquely identifies the user of the application. Whenever an action request is generated in the application, usually at the request of the user, this unique identification information is used to authenticate the user. Typically, the action request is authenticated by using an authentication algorithm to generate a digital token using the unique information. The authenticated information is sent to the data server along with the action request. The data server (or possibly web-server) uses the same authentication algorithm or a complementary authentication algorithm to verify the authenticity of the action request, and can grant or deny access for to the action based on the authentication information.","For certain application requests, such as an instruction given to a bank to transfer money from an account, it may be required to perform some form of access control that ensures only an authorized user can issue the instruction. The process of authorizing the user can be based on attributes of the user, attributes of the action request, or attributes of the resource the action is being performed on. Authorization typically requires that the user be authenticated. For other applications, it may not be required or, it may be undesirable to provide authorization access control for reasons of efficiency or performance.","Access control is the process of granting or denying an action based on authentication and authorization. Authentication is the process of verifying that a user is who he or she purports to be. Authorization is the process of determining whether a user is allowed to perform a requested action based on a set of pre-defined rules. Authorization is often reliant on authentication to ensure that a user is correctly identified. For example, an authorization mechanism is described in U.S. Pat. No. 5,455,953, which discloses a method and apparatus for use in a data processing system for providing authorization information for a client requesting access to a server resource in a server. This data processing system includes a client mechanism, a server mechanism including a server resource and an authorization mechanism.","Traditionally, authentication and authorization checks have been coded directly into applications. However, with the advent of web-based application architecture, authentication has been abstracted out of many applications and performed by a centralized authentication system. There are several commercial products available today that offer such functionality. One such authentication system is described in U.S. Pat. No. 6,185,682, which discloses an authentication system that includes at least one station and a host. A user transmits an authenticated instruction on the station to the host. The host checks the authenticated instruction, and if valid proceeds with processing the instruction. This system protects against any third party fraudulently pretending to be another party transmitting a message on behalf of the other party.","For the most part, authorization is still typically performed inside of applications; consequently, performing authorization in this manner makes any change in authorization rules slow and costly. In many industries new security regulations are mandated at a rate that makes it impossible and\/or very costly to keep authorization rules up to date. Therefore, there is a need for a system that allows a user to implement and manage authorization access controls in a relatively simple and convenient manner external to applications.","The present invention provides a computer network system that authorizes access to an application by performing authorization of requests based on audit and authorization rules contained in a data store. The process of authorizing the requests occurs external to the secured application. This authorization process is dynamically performed based on rules that employ combinatory and comparison logic of user attributes, resource attributes, and action attributes.","Web-based application architecture separates the presentation logic, application logic, and data into three logic tiers. The presentation logic resides on a web server. The data tier resides on a data server. The application logic occurs on an application server. In some instances, the application server may reside on the same physical system as either the web server or the data server. Users of web based applications use a web browser to initiate an action on the web server. The web server passes the action request to the application server. The application then performs actions on resources residing on the data server based on the requested actions.","The components of the system includes: an authorization engine, an entry point, a rule store, and a management console. The entry point component includes a request interceptor program and an application programming interface (API). Components of the entry point reside on the application server. The interceptor program allows application action requests to be captured and authorized before they reach the application logic server components that perform actions on the resources. Use of the interceptor program allows authorization access control to be applied to existing or new applications without requiring any modification to the application. The API allows application components on either the web server or the application server to make explicit authorization requests.","The authorization engine is a component that evaluates the action request; retrieves attributes associated with the action, resource, and user; retrieves rules associated with the action and the resource; and then determines whether the action is authorized. The authorization engine is a neutral user authentication mechanism; it can be used in conjunction with any user authentication mechanism on the web server provided that the authentication mechanism is trusted and can pass verifiable user identification information. The authorization engine provides components that allow authorization activities to be audited. Additionally, the authorization engine uses caching mechanisms to improve authorization response time by caching attributes and rules.","The rules store is a repository for authorization rules that the authorization engine uses to evaluate requests. The rules contained in the rules store are keyed off an action and the resource the action is being performed on. The rules are comprised of operations that define how to combine, compare, and evaluate attributes of users, resources, and actions in order to determine if an instance of a request is authorized. The rule store resides on the data server.","The management console is a central web based application that provides an interface for administering authorization rules, administering audit rules, and for configuring the authorization system.","In one aspect of this invention, there is a system for authorizing access to an application on a protected computer network. The system comprises a web server, an application server and a data server. The web server is configured to receive a request and transmit it to the application server. The application server is connected to the web server. A rules store in an external data store is connected to the application server. The application server is configured to: receive the request from the web server; to extract attributes of the request; retrieve at least one rule from the rules store; compare the extracted attributes of the request with the at least one retrieved rule; and authorize the request if the extracted attributes of the request meet the at least one rule.","The presently preferred embodiment of the invention is described herein with reference to the drawings, wherein like components are identified with the same reference numerals. These descriptions are intended to be exemplary in nature and are not intended to limit the scope of the invention.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["100","101","103","105","107","100","100","102","100","101","102","102"]},"Computer  includes a memory, a processor, and firmware that perform functions such as the rerouting of incoming data to a printer or video screen. In a preferred embodiment, computer  may be a conventional computer, personal digital assistant (PDA), laptop computer, mobile telephone or any other device that can receive and send information through a communication device. Computer  may also include a display device, a keyboard, a mouse, a touch panel, a graphical user interface (GUI), a printer, a scanner and any other device associated with a conventional computer.","In the preferred embodiment, computer  may request information from web server  through network . Web server  includes a program that is housed on a conventional computer that awaits and fulfills the requests from computer . This web server  transmits to the computer a response to the request in a Hypertext Transfer Protocol (HTTP), such as Hypertext Markup Language (HTML) pages or files. Normally, every computer connected to a web site on the Internet must have a web browser program. Web browsers often come as part of a larger package of Internet and Intranet-related programs, which provide Internet client functionality.","Application server  is used to facilitate the interaction between diverse operating systems and applications or component across internal and external networked systems. An application is a program that performs useful functions in the processing or manipulation of data. In addition, the term \u201capplication\u201d includes database managers, word processors, spreadsheets, and other programs that enable the useful manipulation of data. Application server  applications are built to follow standards, such as Extensible Markup Language (XML), HTTP, Java Message Service (JMS), Simple Object Access Protocol (SOAP), and Lightweight Directory Access Protocol (LDAP).","Generally, an application server has one of two architectures: the hub-and-spoke model or the network centric bus model, also called the message-bus model. In the hub-and-spoke model, all applications are connected through a central server. The application server manages all communication, data translation, and process interactions among the connected operating systems and applications. When a new operating system or application is connected, it is automatically integrated with all other systems. The hub-and-spoke model is advantageous for companies with limited information technology resources with only a handful of systems handling a moderate volume of transactions.","In the network-centric bus model, all nodes are linked in a series along a common backbone. A node is a connection point, either a redistribution point or an end point for data transmissions. It is programmed or engineered to recognize and process or forward transmissions to other nodes. The network-centric bus model is suited for large enterprises that have dozens or even hundreds of systems handling heavy transaction volumes.","Preferably, data server  may be referred to as a \u201csuperprogram\u201d that runs under the operating system in a computer. Data server  may also be referred to as a mainframe or host computer system. This super program provides services for the system administrator, services for the business application programs and specialized servers that run in the computer.","Originally, many services provided by a data server tended to be available only on mainframe computers while less powerful computers ran specialized applications. As these smaller \u201cserver\u201d computers became better adapted for business (and recently Internet) applications, the bundle of services required to manage a company-wide set of applications was renamed \u201cthe enterprise data server.\u201d","Referring to , data or information from the web server  is preferably transferred through network  to the computer . In addition, data or information is transferred from web server  through network  to the application server . Further, data or information is transferred preferably from application server  through network  to data server . Network  represents, for example, the Internet which is an interconnection of networks. In addition, the network may be a local access network, a wireless local network, a wide area network, a metropolitan area network, a virtual area network or any network that is able to facilitate the transfer of data between computers. Further, in traversing the network, the data may be transferred through several intermediate servers and many routing devices, such as bridges and routers.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 2","b":["102","102","102","102","102","102","102","102","102","102","102","102","102"],"i":["a","c","h","i","e","f ","g","a","i","c","h ","b. "]},"Mass storage device , input device , display and the speaker are interconnected to the system through I\/O controller . Input device can be a keyboard, mouse, touch screen, touch panel, graphical user interface or any other device or method that can be utilized as an input device. Display is any type of conventional display, for example a Liquid Crystal Display (LCD) or Cathode Ray Tube (CRT). Speaker may be any type of conventional speaker. Computer  may also include a printing device (not shown). The structure illustrated in user computer  is typical for a personal computer \u201cPC\u201d. Connection interface connects computer  to network , which in turns connects computer  to web server , in compliance with the necessary data communication protocols.","Web server  includes conventional components, such as a processor , an Input\/Output (I\/O) controller , a connection interface , a memory , an input device , a display and at least one speaker . The processor , memory , I\/O controller , and the connection interface are interconnected through a bus ","Mass storage device , input , display and speaker are interconnected to the system through I\/O controller . Input device is similar to input device described above. Display is similar to display described above. Speaker may be any type of conventional speaker. Web server  may also include a printing device (not shown). The structure illustrated in web server  is typical for a personal computer \u201cPC\u201d. Connection interface provides an operative connection to connect web server  to network , which in turn connects web server  to computer  and application server , in compliance with the necessary data communication protocols.","Application server  includes conventional components, such as a processor , an I\/O controller , a connection interface and a memory . The processor , memory , I\/O controller and the connection interface are interconnected through a bus . Mass storage device is interconnected through I\/O controller to the bus . The structure illustrated in application server  is normal for a personal computer \u201cPC\u201d. Application server  may also include: an input device similar to input , a speaker similar to and a display similar to display . Application server  may also include a printing device (not shown). Connection interface provides an operative connection to connect application server  to the network , which in turns connects application server  to web server  and data server , in compliance with the necessary data communication protocols.","Data server  includes conventional components, such as a processor , an I\/O controller , a connection interface , a memory and a printing device . The processor , memory , I\/O controller and the connection interface are interconnected through a bus . Mass storage device is interconnected through I\/O controller to the bus . The structure illustrated in data server  is normal for a personal computer \u201cPC\u201d. Data server  may also contain an input device, a display device and at least one speaker as in web server .","Connection interface provides an operative connection to connect the data server  to the network , which in turn connects data server  to application server , in compliance with the necessary data communication protocols. It will be appreciated from the description below, that the present invention may be implemented in components, which are stored as executable instructions on a computer readable medium on the computer , web server , application server  and data server . These components may be in mass storage devices , , and , or in memories , , and or in any part of computer , web server , application server , and data server . Alternatively the components may be hardware implemented by using electronic circuitry, such as microprocessors, operational amplifiers, logic circuits etc.","The components residing on mass storage , mass storage and mass storage in the computer network system  are depicted in . These figures illustrate examples of the utilization of specific components in the computer network system to perform various authorization functions.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIGS. 3","FIGS. 6","FIGS. 8","FIGS. 10","FIGS. 11","FIGS. 12","FIGS. 13"],"b":["4","5","6","7","8","8","9","10","10","11","12","13"],"i":["a","b ","a, ","b","c ","a, ","b ","c ","a ","b ","a ","b ","a ","b "]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 3","b":["103","105","107","103","105","107","105","102","103","107","103","105","105","103","101","105"],"i":["d ","d ","h ","e. "]},"Mass storage device on web server  includes magnetic disk drives, Single in line Memory Module (SIMM) or magneto optical disk drives.","SIMM is a module containing one or several random access memory (RAM) chips on a small circuit board with contact pins that connect a computer motherboard. Alternative storage systems may be used, such as a bubble memory, flash memory, or systems using other storage technologies.","Mass storage device also includes the following components: NTLM\/Site Minder , Active Server Page (ASP) , an application controller , utilities , a signing utility , an in-memory cache  and a certificate store database , where all of these components are connected to each other in any combination thereof.","NTLM is an authentication program used for Windows\u00ae NT. Any type of authentication program known to those of ordinary skill in the art may be used by this invention in place of NTLM or Siteminder to authenticate the user, such as Kerbos. Kerbos is an authentication program used in Windows\u00ae 2000, Windows\u00ae XP and Unix Systems. Windows\u00ae 2000 and Windows\u00ae XP are registered trademarks of Microsoft Corporation which has a corporate headquarters in Redmond, Wash. There are other authentication programs that include biometrics information and\/or password identification that may be used in place of NTLM\/Site Minder  when the user is authenticated at web server . Biometrics is the science and technology of measuring and statistically analyzing biological data; it usually refers to technologies for measuring and analyzing human body characteristics such as fingerprints, eye retinas and irises, voice patterns, facial patterns, and hand measurements for authentication and\/or security purposes.","Active Server Page (ASP)  is an HTML page that includes one or more scripts or small embedded programs processed on a Microsoft Web server before the page is sent to the user. The script on the Web page of the server uses input received as the result of the user's request for the page to access data from a database and then builds or customizes the page before sending it to the requestor. Application controller  is a part of the protected application that makes method calls to the application server  to perform specific actions based on the request. Application controller  either submits the request to the application server  or transmits the request to an authorization component . Thus, application controller  is connected to an entry point component  or authorization component  of the application server  through the network . Signing utility in utilities  generates at least one message signature for requests using a signing token associated with the application.","Preferably, the in-memory cache  is another type of random access memory (RAM) that a computer microprocessor can access more quickly than it can access regular RAM. As the microprocessor processes data, it looks first in the cache memory. If the microprocessor finds the data there (from a previous reading of data), it may avoid the more time-consuming reading of data from larger memory.","Certificate store  communicates with signing utility in order for signing utility to retrieve certificates associated with various users or computer program applications from the certificate store . As discussed above, mass storage is connected to application server by connection interface through network  to connection interface to allow the application controller  to communicate with entry point component .","Mass storage device on application server , preferably, includes the same storage system as described in . Mass storage device includes: an entry point component , an audit component , an authorization component , a system protection component  and a protected application component , where all of these components are connected to each other in any combination thereof.","Preferably, entry point component  receives authorization requests at the application server . In the preferred embodiment, entry point  includes an interceptor program and an application program interface (API) as illustrated in .  illustrates a sub-component schematic that depicts the interaction between an entry point component, an authorization component, the user database and other components on the computer network system. In , interceptor program intercepts Simple Object Access Protocol (SOAP), Extensible Mark up Language (XML), or Remote Procedure Call (RPC) messages or application requests to a business logic layer and extracts attributes of the request. SOAP messaging provides a way for a program running in one kind of operating system (such as Windows 2000) to communicate with a program in the same or another kind of an operating system (such as Linux) by using the World Wide Web's Hypertext Transfer Protocol (HTTP) and its Extensible Mark-up Language (XML) as the mechanisms for information exchange. RPC is a protocol used by a program in a computer to request service from a program located in another computer in a network without having to understand network details. A procedure call is also sometimes known as a function call or a subroutine call. The attributes of the request include information, such as the identity of the application making the request, the identity of the user making the request, the method to be invoked, and the parameters associated with the request. In one example, the attributes may be a specific amount of money, such as $3,000.00.","With reference to , once the interceptor program , has extracted the attribute, it uses API to call an authorization engine in order to determine whether the request should be authorized. If the call is authorized, interceptor program raises an exception and sends the exception back to the calling application or web server . API provides an interface that allows components, such as a web server application on web server  to make calls directly to the application server . For example, if an application controller  needs to retrieve authorization information for presentation purposes, then it would call API to retrieve this information.","In , audit component  is used to log all activities related to authorization in the application server . In addition, audit component  includes: a logging queue , an audit rules store or logging rule cache , an audit rule evaluator and a logging component as shown in . is a sub-component schematic that depicts an audit component interacting with the authorization components and the other components described in in accordance with the invention.","Referring to , the authorization component  evaluates the extracted attributes from the requests transmitted from the web server  to determine whether a requested action is authorized. Authorization component  retrieves rules from a rules store in authorization rules database and audit rules database . Authorization rules database may be referred to as authorization rules data store . Audit rules database may also be referred to as audit rules data store . For performance reasons, the data stores and are preferably directories. Likewise, other data and rule storage components referred to herein as databases may also be data stores or directories. Authorization component  is connected through the connection interface through network  to connection interface to mass storage device , which includes authorization data store and audit data store in host server database . The determination of the request being authorized is based on one or more rules that are associated with the requested action in a rules store. In the preferred embodiment, authorization component  receives the extracted attributes from the requests from the API and compares the extracted attributes with rules that are in and from a rules store in audit data store , authorization data store , a local cache or database. The rules cache or rules store is also included in authorization component .","The rules in audit data store determine what actions to audit. These rules are based on the same ones associated with the authorization rules. In the preferred embodiment, these authorization and audit rules can be updated or changed in any way by any person who has authorized access to the user database  or store database . The process of updating authorization and audit rules does not affect the operation of the audit data store and authorization data store ","In addition, these rules in audit data store and authorization data store , preferably, determines if a user is authorized to perform a request or action based on the rules that relate to date, time, particular role, group, location etc. The request is any type of action requested by a user, such as a request to transfer money, to access information, to print information, to download information, to upload information, etc.","The rules are a combination of operators and elements used to evaluate whether a user or entity is authorized to perform a specific request or action. The operators include: logical operators, context operators and combination operators. Logic operators include: equal, and, or, not, greater than and less than values. Context operators include: contains and matches. Combination operators include: plus, minus, times, divide, union and intersection.","These elements, preferably, include five different types of information: user specific information, action\/request specific information, resource\/data specific information, transactional specific information and application specific information. First, the user specific information comprises: user identification, user type, user roles, user group membership, current user location and custom user attributes. Next, action\/request specific Information includes: action type, action\/request time, request source, action priority and custom action attributes. Third, resource\/data specific information comprises: resource value, resource type, resource classification and custom resource attributes. Transactional specific information includes: transaction type and previous transaction status. Last, application specific Information includes application availability, application version and application performance. There are other operators and elements known to those of ordinary skill in the art, which may be used in this invention and are not discussed herein.","Preferably, the rules store on authorization data store and audit data store are used to avoid storing all user profile information in one very large directory. Pointers are used in the rules store to point to different data stores on store database  that is accessible by authorization component . These pointers are called namespaces, and are analogous to the namespaces that are included in an XML schema. Since there are many sources of data, it would be difficult and impractical to store all of the data in a system data store. Preferably, namespaces allow the system to leverage the component that encapsulates the data stores, in a very loosely coupled manner. The namespace information will be stored in a separate table in a host server database  on authorization data store and audit data store . This table will contain information, such as the source of the data, the connection string, the programmatic identifier of the component used to access, how to invoke the component, etc. An example of a rule using a namespace is the following: \u201cUserDir:jobCode=12345\u201d. This rule dictates that the user must have an attribute on their profile named jobCode, the location, or namespace to find this information.","The utilization of operators and elements may be illustrated by an example of a user initiating an inter-account transfer. In this example, the user requests a transfer of $8,000.00 at 8:00 pm from one account to another. There are several attributes in this request, such as the time, the amount of money, and user identification information. When the aforementioned attributes of the request are transmitted to the authorization component , the authorization component  determines based on the rules in the rules store in audit data store and authorization data store if the request is authorized. Authorization component  uses audit rules database and authorization data store to compare the operator and elements with the attributes of the request to determine if the request is authorized. If the request is authorized, then authorization component  executes or performs the request.","Referring to , first, authorization component  preferably retrieves and uses one or more rules or elements in audit data store and authorization data store to compare the user identification information attribute in the request with the element of user specific information. If the user identification information is equivalent to or meets the element of user specific information, then this attribute of the request is authorized. Alternatively, if the user identification information is not equivalent to or does not meet the user specific information, then this attribute of the request is not authorized.","Next, authorization component  uses one or more rules or elements in audit data store and authorization data store to compare the time attribute of 8:00 pm with the element of action\/request time. If the 8:00 pm time attribute is equal to or meets the action\/request time, then this attribute of the request is authorized. On the other hand, if this time attribute is not equal to or does not meet the action\/request time, then this attribute of the request is not authorized.","Authorization component , preferably, combines the authorized user specific information and action\/request time attributes to compare them with the operators in the audit data store and authorization data store . The operator AND is used for various combinations of elements, such as the combination of user\/specific information and action\/request time attributes. These attributes of the request are compared with the operator in audit data store and authorization data store . If there is a match between the attributes and the operator or the attributes meets the operator, then these attributes combined are authorized. Alternatively, if there is not a match between the attributes and the operator or the attributes and the operator do not meet, then these attributes combined are not authorized.","Next, authorization component , preferably, uses one or more rules or elements in audit data store and authorization data store to compare the amount of money attribute of $8,000.00 with an element of custom resource attributes. If the amount of money attribute is equivalent to or meets the custom resource attributes, then this attribute of the request is authorized. On the other hand, if the amount of money attribute is not equivalent to or does not meet the custom resource, then this attribute is not authorized.","Next, authorization component , preferably, combines the authorized user specific information, action\/request time and custom resource attributes to compare them with the operators in the audit data store and authorization data store . The operator AND is used for various combinations of elements, such as the combination of user\/specific information, action\/request time and custom resource attributes. Preferably, these three attributes of the request are compared with the operator in audit data store and authorization data store . If there is a match between the three attributes and the operator, then these attributes combined are authorized. Alternatively, if there is not a match between the attributes and the operator, then these attributes combined are not authorized.","Next, authorization component , preferably, uses one or more rules or elements in audit data store and authorization data store to compare the transaction type attribute of transferring money from one account to another with an element of transaction type. If the transaction type attribute is equivalent to or meets the transaction type, then this attribute of the request is authorized. On the other hand, if the transaction type attribute in the request is not equivalent to or does not meet the element of transaction type element, then this attribute is not authorized.","Last, authorization component , preferably, combines the authorized user specific information, action\/request time, custom resource and transaction type attributes to compare them with the operators in the audit data store and authorization data store . The operator AND is used for various combinations of elements, such as the combination of user\/specific information, action\/request time, custom resource and transaction type attributes. Preferably, these four attributes of the request are compared with the operator in audit data store and authorization data store . If there is a match between the attributes and the operator, then these attributes combined are authorized. Otherwise, if there is not a match between the attributes and the operator, then these attributes combined are not authorized.","Referring to , system protection component  preferably secures system  by preventing unauthorized users from using it or having access to it. This protection component  protects system  from many types of attacks, such as man-in-the-middle attacks or from being spoofed by rouge or improperly configured requests. Another way of protecting the system is by requiring all users to become authenticated by using a digital certificate.","The digital certificate is an electronic \u201ccredit card\u201d that establishes credentials of a user when doing business or other transactions on the Internet. It is issued by a certification authority (CA). This certificate contains a user name, a serial number, expiration dates, a copy of the certificate holder's public key (used for encrypting messages and digital signatures), and the digital signature of the certificate-issuing authority so a recipient can verify that the certificate is real. Some digital certificates conform to a standard, X.509 and they can be kept in registries so that authenticating users can look up other users' public keys. This digital certificate may be used for at least one company for a trusted application.","After being used, the certificate creates a token to sign all messages from the user to the application server . This process ensures the integrity of the messages sent to the system, and that unauthorized applications will not be able to use the functionality of the system.","Preferably, application component  includes a management component and a business component . Application component  provides two aspects of functionality: application administration and system administration. The application administration provides for the administration of authorization rules and audit rules. The system administration aspect is used for managing the system administrative users, system configuration settings and may be extended to manage additional applications (SiteMinder, Interceptor etc.). Both administration aspects may be delegated to downstream managers, who may administer rights of subordinates within associated applications.","Mass storage device of data server , preferably, includes an equivalent storage system as described in mass storage device . In the preferred embodiment mass storage device also includes the components: store database , a data server , a user database  and a business database , where all of these components are connected to each other in any combination thereof. Store database  comprises: a system configuration database , a system administration store , and a system certificate database store . Data server  includes the audit data store and the authorization data store ","Preferably, user database  has an updatable database that is filled with information provided by an operator of the data server . Preferably, user database  also has stores that refer to any data source which contains user information (Databases, Directory Services, custom files, etc). Preferably, business database  includes IBM Mainframe Service (IMS) and other business databases.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 4","FIG. 5","FIG. 4"]},"Referring to , at , a user initializes the process of transmitting at least one request by activating computer  to operatively connect through network  to web server . Alternatively, the request is generated by an internally generated mechanism at computer , web server , application server  or data server  or any operator at computer , web server , application server  and data server . The user may utilize any input device () to initialize an operative connection between computer  and web server  by any conventional means or methods known to those of ordinary skill in the art. In this embodiment, for example, the user accesses, through computer , a web application on the web server  to make at least one request, such as a transfer of $2,000.00 from his savings account to a checking account.","Also at , the user is, preferably, authenticated by NTLM\/SiteMinder authentication program  () before the request is allowed to reach the web application page associated with web server . If the user does not enter a correct password on the web application page, then the connection can be halted and the authentication process ends. The user may choose to end the program or reinitiate the program at . If the user is able to enter a correct password on the web application page, then the request is transmitted to web server .","At , NTLM\/SiteMinder authentication program  transmits the request to ASP  (if the user was authenticated) where ASP  creates an instance of an application controller  object. The application controller object is a part of the protected application that makes method calls to the application server to perform specific banking actions, for example, the request or an inter-account transfer on the application server .","At , application controller  either submits an action request to the application server  for automatic authorization or calls the Authorization API directly in entry point component  to authorize the request as shown in . At , application controller  submits the action request to the application server , then application controller  formats the method call or the request (inter account transfer request) from the application controller into a communication protocol, such as SOAP (or XML\/RPC) message and sends it via HTTP to the application server . The message is received or caught by interceptor program in the authorization entry point component  of application server . Interceptor program extracts attributes of the SOAP message or the request, such as the identity of the application making the request, the identity of the user making the request, the method to be invoked and any other attributes ($2,000.00) associated with the request or message. Interceptor program contacts the authorization API to determine if the request is authorized and transmits the extracted attributes to API ","At , application controller  calls the Authorization API directly to determine if the user is authorized to perform the method call (inter account transfer request). This call can be used, for example, to limit the options displayed in the web application to those actions the user can actually perform.","At , API transmits the extracted attribute to authorization component  to determine, in , if the request should be authorized, then executed as described in . Referring to  authorization component  is in communication with authorization data store . Authorization component  includes an authorization engine , a rule cache and a returned data cache . Authorization engine is responsible for retrieving and evaluating the rules associated with a method call or the request.","First, authorization component  retrieves and uses one or more rules or elements in audit data store and authorization data store to compare user identification information attribute in the request with the element of user specific information. If the user identification information attribute is equivalent to or meets the user specific information, then this attribute of the request is authorized. Otherwise, if the user identification information is not equivalent to or does not meet the user specific information, then this attribute is not authorized.","Next, authorization component  uses one or more rules in audit data store and authorization data store to compare the amount of money attribute of $2,000.00 with an element of custom resource attributes. If the amount of money attribute is equal to or meets the custom resource attribute, then this amount of money is authorized. Alternatively, if the amount of money is not equal to or does not meet the custom resource, then this amount of money is not authorized.","Authorization component  combines the authorized user specific information and custom resources attribute to compare them with the operators in the audit data store and authorization data store . The operator AND is used for various combinations of elements, such as the combination of user\/specific information and custom resource attributes. Preferably, the two attributes of the request are combined and compared with the operator in audit data store and authorization data store . If there is a match between the attributes and the operator or the attributes meet the operator, then these attributes combined are authorized. On the other hand, if there is not a match between the attributes and the operator or the attributes do not meet the operator, then these attributes combined are not authorized.","Next, authorization component  uses one or more rules in audit data store and authorization data store to compare the transaction type attribute of transferring money from a savings to a checking account to an element of transaction type. If the transaction type is equivalent to or meets the element of transaction type, then this attribute of the request is authorized. Alternatively, if the transaction type attribute in the request does not match with the element of transaction type or the transaction type attribute does not meet with the element of transaction type, then this attribute of the request is not authorized.","Last, authorization component  combines the authorized user identification information, custom resources attribute and transaction type attributes to compare them with the operators in the audit data store and authorization data store . The operator AND is used for various combinations of elements, such as the combination of user\/specific information, custom resource and transaction type attributes. Preferably, these three attributes of the request are compared with the operator in audit data store and authorization data store . If there is a match between the attributes and the operator or the attributes and the operator meet, then these attributes combined are authorized. Otherwise, if there is not a match between the attributes and the operator or the attributes and the operator do not meet, then these attributes combined are not authorized.","Based on the process described above, the authorization engine , preferably, returns a yes\/no response to the calling application as to whether the request to execute the method is authorized or not. Rule Cache is an in-memory store for all rules retrieved from the rules database . Returned data cache is an in memory store for all namespace data that has been retrieved from an application data in database server  and business database . Authorization component , preferably, provides the API with the results of the determination.","Referring to , at , API writes the returned results in the results cache. Preferably, these results are based on the rules in authorization data store and\/or audit data store . In addition, the results are in response to the extracted attributes from the request. For instance, the authorization data store may allow certain users to transfer $2,000.00 or more money, allow certain users access to a particular account, allow users to transfer money if it is before 5 pm and there are other authorization rules that the extracted information may need to comply with to authorize the request.","The results are transmitted to the interceptor program or application controller . At , if the results do not authorize the request, then the interceptor program discards the request and returns a refusal status message or failure message by using any means, such as electronic mail to the application controller . Application controller  reports the refusal in a SOAP message to the web application of web server  and then to the user of computer . On the other hand, if the result authorizes the request, then the interceptor program based on the authorization data store forwards the method call (inter account transfer request) to the appropriate business component for execution.","At , there is a determination if the authorization request came from the interceptor program based on a source field included in the authorization request. At , if the authorization request did not come from the interceptor program , then the return verification that the action is authorized is sent to the application controller . At , if the authorization request did come from the interceptor program then the action request is transferred or passed to application server business components which the authorization interceptor is protecting. At , the authorization of the application request ends.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIGS. 6","FIG. 6","FIG. 6","FIG. 6","FIG. 7","FIG. 6"],"i":["a","b ","a ","b ","a","a. "],"b":["6","7"]},"Referring to , this flow chart continues from  described in . In this embodiment, the request is initiated by an Application Privilege Administrator (APA) for a banking application who creates a new rule that only the primary account holder can withdraw funds from the savings account. At , application controller , preferably, formats the method call or request from , which is the inter account transfer request or rule creation request, into a SOAP, XML or RPC message. The request may be sent in any Internet language or any language that can be received and interpreted by a computer, web server, application server or data server.","Application controller , preferably, calls for a signing utility of utilities  to digitally sign the SOAP message in order to guarantee the request is being sent from an authenticated application controller and not from a hacked component or an outside source. At , if there is no signing token for the application controller  in the in-memory cache , the signing utility uses, preferably, the digital certificate of application controller  to establish a secure connection to the system protection component  and request a new signing token as shown in . Referring to , the communication between application controller , signing utility and system protection component  is shown in ","Signing utility generates at least one message signature for application requests using the signing token associated with that application. In addition, signing utility retrieves the signing token if one does not exist, or if the token application has expired. Signing utility stores and retrieves the signing token from the signing token store . The signing token store contains the tokens retrieved by the signing utility . The tokens are lightweight (8-32 byte) symmetric keys that have a configurable expiration time.","A certificate store  communicates with signing utility in order for the signing utility to retrieve certificates associated with various users or applications from the certificate store . Preferably, signing utility uses a secure connection based on the application certificate to retrieve a signing token from signing token generator in system protection component . When the web server  or system requests a new token, the token generator : validates the identity of the requesting application, creates the signing token, stores the token and sends the token back to the requestor or web server . A signature validator , in system protection component  validates the signature, and then compares it to the request to ensure that the source is authentic. Preferably, signature validator uses a message signing token store to verify that all application signatures are valid.","Signing token generator interacts with a system certificate store in store database  of data server . Preferably, system certificate store contains the certificates assigned to the applications. Preferably, these certificates are used by the signing token generator to validate the authenticity of token requests.","Referring to the flow chart of , at , application controller  incorporates the signature or signing token into the SOAP (or XML\/RPC) message and sends it via http to the application server . Preferably, the message is received at entry point component  by an Internet Information Service (IIS). Internet Server Application Program Interface (ISAPI) filter or .NET http module. The .NET module is a module in the Microsoft.NET platform that allows http requests to be intercepted before they reach an application (similar to ISAPI filters).","ISAPI is a set of Windows program calls that allows a user to write a Web server application that will run faster than a common gateway interface (CGI) application. A disadvantage of a CGI application (or \u201cexecutable file,\u201d as it is sometimes called) is that each time it is run, it runs as a separate process with its own address space, resulting in extra instructions that have to be performed, especially if many instances of it are running on behalf of users. By using ISAPI, a dynamic link library (DLL) application file is created that and can run as part of the Hypertext Transport Protocol (HTTP) application's process and address space. The DLL files are loaded into the computer when HTTP is started and remain there as long as they are needed; they don't have to be located and read into storage as frequently as a CGI application.","The ISAPI as the interceptor program , as described above, extracts attributes or information from the SOAP message, such as the identity of the application making the request, the identity of the user making the request, the method to be invoked and the attributes ($2,000.00) associated with the request or message.","At , system protection component  verifies the digital certificate against a back-end certificate store in database  to create a new signing token and return it to the signing utility of utilities , as shown in ","At , entry point component  requests authorization component  to determine the privilege or rights of the user to transfer funds or the APA's privilege to create an authorization rule based on the extracted information.","At , authorization component , retrieves rules for the requested action from the rules store or rules cache by retrieving authorization rules from authorization data store , as shown in . Referring to , at , authorization component  retrieves attributes of the user from the user database  or administrative privileges from the back-end certificate store or administration store needed to evaluate the method rules.","At , authorization component , compares and evaluates the rules of authorization data store and user database  to the attributes of the request to determine whether the user or APA is authorized to perform the requested action shown at . First, authorization component  uses one or more rules or elements in audit data store and authorization data store to compare APA identification information attribute in the request with the element of user specific information. If the APA identification information attribute is equivalent to or meets the element of user specific information, then this attribute is authorized. Alternatively, if the APA identification information attribute is not equivalent or does not meet the user specific information, then this attribute of the request is not authorized.","Next, authorization component  uses one or more rules or elements in audit data store and authorization data store to compare the rule creation attribute with an element of action\/request type. If the rule creation attribute is equal to or meets the action\/request type, then this attribute of the request is authorized. On the other hand, if the rule creation attribute is not equal to or does not meet the action\/request type, then this attribute of the request is not authorized.","Authorization component  combines the authorized user specific information attribute and action\/request time attribute to compare them with the operators in the audit data store and authorization data store . The operator AND is used for various combinations of elements, such as the combination of user\/specific information attribute and action\/request type attribute. Preferably, these two attributes of the request are combined and compared with the operator in audit data store and authorization data store . If there is a match between the two attributes and the operator or the two attributes and the operator meet, then these attributes combined are authorized. Alternatively, if there is no match between the attributes and the operator or the two attributes and the operator do not meet, then these attributes combined are not authorized.","Next, authorization component  uses one or more rules or elements in audit data store and authorization data store to compare the specific banking application attribute with an element of transaction type. If the specific banking application attribute is equal to meets the transaction type, then this attribute is authorized. Otherwise, if the specific banking application attribute is not equal to or does not meet the element of transaction type, then this attribute of the request is not authorized.","Last, authorization component  combines the authorized user specific information attribute, action\/request time attribute and transaction type attribute to compare them with the operators in the audit data store and authorization data store . The operator AND is used for various combinations of elements, such as the combination of user\/specific information attribute, action\/request type attribute and transaction type attribute. Preferably, these three attributes of the request are compared with the operator in audit data store and authorization data store . If there is a match between the three attributes and the operator or the three attributes and the operator meet, then these attributes combined are authorized. Alternatively, if there is no match between the attributes and the operator or the attributes and the operator do not meet, then these attributes combined are not authorized.","If the user or APA is authorized to perform the action, then the entry point component  forwards the action to the proper protected application component , such as a business object for the funds-transfer request or management component for the rule creation request as shown in ","Referring to , at , audit component , preferably, retrieves the audit rules for the log entry from the audit rules store in authorization component , and audit data store . For example, an audit rule might specify that a request for an inter-account transfer is recorded only when the amount is $200.00 or greater; a similar rule might specify that all rule-creations must be recorded. If the rules determine that the log entry should be recorded, the audit component , preferably, stores the log entry to the data store specified by the logging rules. Otherwise, the log entry is simply discarded.","At , the protected application component , preferably, acts on the request or processes the audit rules in three different ways. First, management component stores the definition of a namespace of the system in a configuration store , or a rule management component can store a new rule in the rules store. Next, an external user\/group management component can retrieve or update the attributes of the user in back-end directories and databases by interacting with user data server . Last, business component interacts with business data server  to retrieve or update back-end application data.","At , entry point component , authorization component , protection component  can send a formatted log entry to the audit component . For example, the entry point component  could log the request for an inter-account transfer or rule-creation and the authorization component  could log whether the requested action was authorized or refused.","At , the user is notified what occurred in the transaction, such as a returned authorization granted or denied. For example, the user may be informed that the inter-account transfer is successful or failed by a display on the web application of web server  that says, \u201cYou are not authorized\u201d or \u201cSystem is not working, call the help desk.\u201d The notification is sent by SOAP (XML\/RPC) messaging in a HTTP from application server  to web server  to computer . After the user receives the notification at computer , then he can continue the process at  or end the process at .",{"@attributes":{"id":"p-0126","num":"0125"},"figref":["FIGS. 8","FIGS. 8","FIG. 8","FIGS. 8","FIG. 9","FIGS. 8"],"i":["a, ","b","c ","a ","b ","c ","a ","b","a ","b. "],"b":["8","8","9","8","8","8"]},"Referring to , this flow chart continues from  described in . At , application controller , preferably, formats the method call or request from , which is the inter account transfer request or rule creation request, into a SOAP (XML\/RPC) message and sends it via HTTP to the application server . Preferably, the message is received by the interceptor program , which is transmitted to authorization component  for verification or authorization as shown in ","Referring to , itnterceptor program , as described above, extracts all the attributes of the request, such as the identity information of the user and calls the authorization API to determine if there is authorization for the request.","Referring to , at , authorization API , preferably, checks the results cache to determine if the same method call (inter-account transfer from the same user (authenticated) with the same attributes, for example $2,000.00, was already performed or checked in the past as shown in . Referring to , entry point component  includes an authorization API , results cache and interceptor program . Authorization API allows various users at user computers, such as the user at computer , make direct authorization calls. Interceptor program , as described above, extracts from the request all the identity information of the user. The extracted attributes are compared with the rules in the rules store.","API enables calls to the authorization engine to check the results cache to determine if the request should be authorized based on the rules in the rules store. Results cache contains the recently requested authorization results from audit data store and authorization data store returned from the authorization engine . Interceptor program captures SOAP messages or requests sent to the application server , and then interceptor program verifies the signature of the request and calls the API . API checks with authorization engine to verify if the request should be authorized.","Referring to , at , if the same method call or request was submitted in the past, then this process skips to . If the same method call was not submitted in the past, then this process continues at . At , authorization API cannot find the same method call or request in the results cache . Preferably, results cache reports to the authorization engine that the method calls or request is not there. At , authorization engine checks the rule cache to determine whether the rules associated with the particular method call have been retrieved in the past. If the rules associated with the particular method call were used in the past, then the process skips to . If the rules were not used in the past, then the process continues to .","At , authorization engine retrieves the rules for the method from the rules store of audit data store and authorization data store as shown in . The rules, as described above, for audit data store and authorization data store may have certain restrictions, such as the type of transaction the user can request, the time the user can request the transaction, the group that can request the transaction and any of the rules in the rules store, described above.","Referring to , at , the authorization engine , stores the retrieved rules in a rules cache. At , authorization engine checks a returned data cache to determine if all the data necessary to evaluate the attribute of the request, such as rules for the user and other attributes were retrieved in the past. If the attributes of the request were retrieved in the past, then the process skips to . Alternatively, if the attributes of the request were not retrieved in the past, then the process continues at .","At , the authorization engine retrieves back-end directories or databases, such as the ones in user database  to evaluate the attribute rules as shown in . At , authorization engine stores the retrieved user attributes in the returned data cache. At , authorization engine compares the attributes of the request with the rules in the rules store to determine from the results if the request should be authorized. For example, the rule may not allow the user to withdraw more than a certain amount of money, for example $500.00 from a savings account per day, or the user may be a family member (for a family account) who can make deposits into a savings account but not withdrawals from the account. Authorization engine returns the results to the API . The results reveal whether the request should be authorized or refused.","Referring to , at , API stores the outcome of the results, if the request is authorized or refused in the results cache . At , API , preferably, returns the decision to the interceptor program . At , if refused, the interceptor program discards the method call or request, returns a refusal status to the calling application controller, which is sent to the user at computer . The message may be any type of conventional message that says, \u201cYou are not allowed to perform this transaction.\u201d At this point, the user may reinitiate the program at .","At , if authorized, interceptor program forwards the method call to the appropriate business component for execution and continues at . At , the business component , preferably, executes the method call or request when it interacts with back-end data sources, such as the databases on data server  as needed.","At , the business component , preferably, returns a success status to the calling application controller  as shown in . Application controller , preferably, transmits a response by SOAP, XML or RPC message to the user at computer  that the request has been performed. For example, the application controller can send an electronic mail (e-mail) message that states: \u201cYour request has been performed.\u201d Then, at , the user can decide if he wants to reinitiate the process or end. If the user wants to end the process, then he simply uses any conventional means to disconnect from the web server , application server  and data server . If the user chooses to continue, then he can use any conventional means to return to .",{"@attributes":{"id":"p-0138","num":"0137"},"figref":["FIGS. 10","FIG. 10","FIG. 10","FIG. 10","FIG. 10","FIG. 10"],"i":["a, ","b ","c ","a ","b ","a","c ","a. "],"b":["10","10"]},"Referring to , the flow chart continues from  described in . At , interceptor program calls for authorization engine to authorize the method call or request, as shown in ","Referring again to , at , each of the subsystems entry point component , authorization component , protection component  and management component  can send a formatted log entry or request to a local logging queue in audit component  as shown in . In , the logging queue stores incoming log information. In addition, the logging queue is a centralized queuing mechanism that receives the log information from all of the components in application server . The log entries in the logging queue are removed as the audit rule evaluator processes the entries.","Audit rules store or logging cache  houses the audit rules. In the preferred embodiment, the audit rule evaluator determines which items in the logging queue should be recorded. In addition, it reviews and evaluates the log entries that are retrieved from the logging queue . Further, the audit rule evaluator compares the entries to rules from the rules store to determine if they should be recorded, and the location where they should be stored.","The logging component writes the log information to the appropriate component audit repositories. Since the system does not provide a centralized logging and audit store, the application area must provide and manage these stores. In the preferred embodiment, the logging component is responsible for storing entries to the audit stores on audit data store ","Preferably, the entry point component  logs the request for an inter-account transfer of any sum, for example $2,000.00 from checking to savings account, together with the user's identity and the application identity extracted by interceptor program as described in . Authorization component  logs whether the request was authorized or refused in the logging queue ","Referring to , at , the local logging queue , allows authorization processing to continue without waiting for log entry handling to be completed. Log entries are forwarded asynchronously to the logging queue . At , an audit rule evaluator in audit component  retrieves at least one log entry from the logging queue ","At , audit rule evaluator , preferably, checks a logging rule cache  to determine if the rules associated with the type of log entry (method call for an inter-account transfer) have been retrieved in the recent past. If it is determined that the rules associated with the type of log entry were retrieved in the past, then this process skips to .","If there is a determination that the rules associated with the type of log entry were not retrieved in the past, then this process goes to . At , audit rule evaluator retrieves the rules for the log entry type from the audit data store . At , audit rule evaluator, preferably, stores the retrieved rules in the logging rule cache .","At , audit rule evaluator determines whether the log entry should be recorded. For example, the rules might specify that a request for an inter-account transfer is recorded only when the amount is $200 or greater. If the log entry should not be recorded, then it is simply discarded at . The user may be notified that the request or log entry was discarded by a SOAP message from API , which receives the message from the logging queue . API , preferably, returns the results to the application controller , which returns the results to the web application of web server . For example, the web application includes a display that allows the recording of the transfer of funds or it will include a display that says there is no authorization to transfer funds at this amount or no authorization to transfer funds.","At , if the log entry should be recorded, the audit rule evaluator forwards the log entry to the logging component . Preferably, logging component stores the log entry to the data stored specified by the logging rules. The user may be notified that the request was accepted by a SOAP message from API , which receives the message from the logging queue . Preferably, API returns the results to the application controller , which returns the results to the web application of web server . The web application displays the message \u201cYou request was accepted.\u201d For example, the web application includes a display that says, \u201cTransfer of funds is allowed.\u201d",{"@attributes":{"id":"p-0149","num":"0148"},"figref":["FIGS. 11","FIG. 11","FIG. 11","FIG. 11"],"i":["a ","b ","a ","b ","a. "],"b":"11"},"Referring to , the flow chart continues from reference numeral  described in . At , application controller , preferably, formats the method call into a SOAP, XML or RPC message (any type of Internet message). Preferably, this message includes all the attributes associated with the request, such as the user identity, the application identity, the inter-account transfer request, and any other attributes associated with the request.","Preferably, application controller  calls for signing utility to digitally sign the SOAP message, in order to guarantee the request is being sent from an authenticated application controller and not from a hacked component or an outside source.","At , signing utility , preferably, determines if the in-memory cache  includes a digital signing token for application controller . In order to guard against brute-force crypto analytic attacks, a signing token has a limited lifetime after which a new token must be created. Preferably, signing tokens are per-application controller, not per-user, so the performance requirement to create new tokens does not depend on the number of users, only on the number of application controllers in use. A determination is made if a current signing token is available for application controller . If the token is available, then the process skips to . If there is no signing token available, then the process continues at .","At , preferably, signing utility retrieves a digital certificate for application controller  from the certificate store . At , by using the digital certificate signing utility establishes a Secure Sockets Layer (SSL) connection to the token generator and requests a new signing token for application controller  as shown in . At , token generator , preferably, determines, compares or verifies the digital certificate of the application controller  against the back-end certificate store . At , if the verification fails, then the request for a new signing token is refused and the user may be informed of the failure by any conventional means, such as by transmitting a SOAP message from application controller  to web server application of web server , as described above. The display on the web server application may state: \u201cYou are not authorized\u201d or \u201cSystem is not working, call help desk.\u201d","If the verification is successful, then, at , the token generator creates a new signing token and stores it in signing token store in protection component . At , token generator returns the signing token to signing utility . At , signing utility , stores the signing token for the application controller  in the in memory cache .","At , signing utility returns a signature for the SOAP message to the application controller . At , application controller  incorporates the signature into the SOAP, XML or RPC message and sends it via HTTP to application server . This message is received by interceptor program as shown in ","At , interceptor program forwards the message with digital signature to the signature validator . At , signature validator uses the signature and the stored signing token to verify the message. At , signature validator returns the signature decision, valid or invalid to the interceptor program . At , the interceptor program , preferably, sends a message to application controller , then the controller sends a SOAP message to the user at computer  of whether the signature is valid or invalid, by the methods described above. At , the user can decide if he wants to continue the process or another process at  or end the process at .",{"@attributes":{"id":"p-0157","num":"0156"},"figref":["FIGS. 12","FIG. 12","FIG. 12","FIG. 12"],"i":["a ","b ","a ","b ","a. "],"b":"12"},"Referring to , at user initializes the process of transmitting a request by activating computer  to connect through network  to web server  as shown in . The user may utilize any input device to initialize a connection with web server  by any conventional means or methods known to those of ordinary skill in the art.","In this embodiment, the at least one request concerns an Application Privilege Administrator (APA) for a banking application who accesses web server  to use a web browser, run a script or create or modify an authorization rule for an application. For example, the APA for the banking application may create a new rule that only the primary account holder can withdraw funds from a savings account. The attributes of the request includes: the APA identification information and the specific banking application.","Referring to , at , the APA, preferably, is authenticated by NTLM\/SiteMinder  authentication program before the request is allowed to reach a web application page associated with web server . NTLM\/SiteMinder  or another authentication program may authenticate the user by utilizing the methods discussed above. If the user is able to enter a correct password upon connecting with web server , then the user can utilize web server . At , if the user does not enter a correct password upon connecting with web server , then the connection is halted and the authentication process ends.","At , NTLM\/SiteMinder , preferably, transmits the request to ASP , where ASP  creates an application controller object. At , the application controller, preferably, object creates instances of application controllers  and uses them to make method calls or requests to perform privileged administration actions on the application server ; in this case, creation of a new rule for a specific banking application.","At , application controller  formats the method call (rule creation request) from the application controller into a SOAP (or XML\/RPC) message and sends it via http to the application server . The message is received by the interceptor program in the authorization entry point  of application server  for authorization checking. Interceptor program extracts the attributes of the requests in order to compare the attributes with the rules in the audit data store and the authorization data store ","At , interceptor program invokes authorization engine for authorization of the method call (rule-creation request). At , authorization engine retrieves the rules governing creation of authorization rules for the specific banking application from the rules store in authorization component , audit data store and authorization data store as shown in ","At , authorization engine retrieves administrative privileges for the authenticated APA and the administration store in data server  as shown in . Authorization engine  compares the authorization rules with the attributes of the request to determine if the request is authorized, by the methods described above.","At , authorization engine returns the decision, authorized or refused to the interceptor program . In this case, the authenticated APA must have been delegated the privilege to create authorization rules for the specified banking application from at least one store in user database .","If the request is not authorized, it is discarded, as shown at . At , the refusal is transmitted to application controller . At , application controller  transmits the refusal by SOAP message to the user at computer . Then the user may end this process, reinitiate the process or initiate another process.","At , if the request is authorized, then the interceptor program forwards the method call (rule-creation request) to management component . The acceptance of the request is forwarded in a SOAP message from application controller  to the user at computer , as described above. The user may decide to initiate the process again at  or end the process, as described above. The new rule is stored in rules store authorization component , audit data store and authorization data store ",{"@attributes":{"id":"p-0168","num":"0167"},"figref":["FIGS. 13","FIG. 13","FIG. 13","FIG. 13"],"i":["a ","b ","a ","b ","a. "],"b":"13"},"Referring to , at , a user initializes the process of transmitting a request by activating computer  to connect through network  to web server . In this embodiment, for the request a system administrator accesses web server  to use a web browser, or runs a script to administer the management of the entire system. For example, a system administrator may define a name space (and its corresponding source connection string) to be used in authorization rules. The attributes of the request includes: system administrator identification attribute and administer the management of the entire system attribute.","At , the system administrator, preferably, is authenticated by NTLM\/SiteMinder authentication program  before the request is allowed to reach a web application page associated with web server . Preferably, NTLM\/SiteMinder  authenticates the user of web server  by utilizing the methods discussed above. At , if the user does not enter a correct password, then the connection is halted and the authentication process ends. If the user is able to enter a correct password upon connecting with web server , then web server  can receive the request and continue at . At , NTLM\/SiteMinder  transmits the request to ASP , where ASP  creates an application controller object. At , the application controller object, preferably, initiates instances of application controllers  and uses them to make method calls to perform system administration actions on the application server ; in this case, the system administration actions include the creation of a new namespace to be used in the authorization data store ","At , application controller , preferably, formats the method call (namespace-creation request) from the application controller into a SOAP (or XMURPC) message and sends it via http to the application server . The message is received by the interceptor program , preferably, at the entry point  of application server  for authorization. Interceptor program , preferably, extracts the attributes of the request in order to determine if the request is authorized as shown in ","Referring to , at , interceptor program , preferably, invokes authorization engine for authorization of the method call (namespace creation request). At , authorization engine , preferably, retrieves the rules governing creation of namespaces from the administration store . Authorization engine , preferably, retrieves the rules governing creation of namespaces from the administration store . In this case, rules are held in the administrative store , not the rules store or audit data store and authorization data store , for security purposes.","At , authorization engine , preferably, retrieves administrative privileges for the authenticated system administration from the administration store as shown in . Authorization engine , preferably, compares the authorization rules with the attributes of the request, then, at , authorization engine , preferably, returns the decision, authorized or refused, to the interceptor program . In this case, the authenticated system administrator must have been delegated the privilege to create namespaces for the system.","If the request is refused, then at , interceptor program discards the request and transmits a refusal status to the application controller  as shown in . At , application controller  transmits the SOAP message through web server  to computer , where the web application on web server displays the message \u201cYou are not authorized\u201d or \u201cSystem is not working, call the help desk.\u201d At , the user may reinitiate the whole process at  or initiate another process at  by any conventional means. The user may also end the program at  by any conventional means.","If the request is authorized, then the interceptor program forwards the method call (namespace creation request) to the management component . At , the management component stores the definition of the new namespace in the configuration store . Preferably, a SOAP message is sent from the interceptor program to the application controller , where the application controller  transmits a message to the user that the request is authorized. The display may state \u201cYour request is accepted.\u201d Preferably, the user may receive the same kind of display notification, as described above, on the web application of web server  that the request has been authorized. The user may decide to reinitiate the process or another process or end the program, as described above.","In summary, the present invention provides a system that secures access to an application by performing authorization of action requests based on authorization rules contained in a data store. This system allows a user to implement and manage authorization access controls in a relatively simple and convenient manner external to applications on the web browser and application server. The authorization of the action requests, which occurs external to the application being secured, is dynamically performed based on rules which employ combinatory and comparison logic of user attributes, resource attributes, and action attributes.","Variations and modifications of the disclosed embodiments of the invention may be made without departing from the scope of the invention. The aforementioned description is intended to be illustrative rather than limiting and that it be understood that it is the following claims and their equivalents, set forth the scope of the invention."],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PRESENTLY PREFERRED EMBODIMENT"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF SEVERAL VIEWS OF THE DRAWINGS","p":["The features and advantages of the present invention will become more apparent as the following description is read in conjunction with the accompanying drawings:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6","i":"a "},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 6","FIG. 6"],"i":["b ","a "]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 7","FIG. 6"],"i":"a "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 8","i":["a ","b "],"b":"8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 8","FIGS. 8"],"i":["c ","a ","b "],"b":"8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 9","FIGS. 8"],"i":["a ","b "],"b":"8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10","i":"a "},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 10","FIG. 10"],"i":["b ","a "]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 10","FIG. 10"],"i":["c ","a "]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11","i":"a "},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 11","FIG. 11"],"i":["b ","a "]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 12","i":"a "},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 12","FIG. 12"],"i":["b ","a "]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 13","i":"a "},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 13","FIG. 13"],"i":["b ","a "]}]},"DETDESC":[{},{}]}
