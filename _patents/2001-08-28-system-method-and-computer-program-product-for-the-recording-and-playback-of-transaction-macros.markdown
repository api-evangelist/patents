---
title: System, method and computer program product for the recording and playback of transaction macros
abstract: A system, method and computer program product are provided for carrying out a transaction. Initially, a transaction pattern reflecting a transaction is stored in memory. Thereafter, the transaction pattern is executed to carry out the transaction in an automated manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814020&OS=07814020&RS=07814020
owner: NVIDIA International, Inc.
number: 07814020
owner_city: St. Michael
owner_country: BB
publication_date: 20010828
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/283,781 filed on Apr. 12, 2001, the disclosure of which is incorporated herein by reference.","The present invention relates to computer-related transactions, and more particularly to automating computer-related transactions.","The Internet is composed of content distributed in the World Wide Web and various intranets. While a large fraction of the content is static, the truly interesting content is the one that a user can interact with dynamically. This content is of various types including, but not limited to (i) the content stored in various databases, (ii) e-commerce web-pages, (iii) directories, (iv) intranet pages, and\/or (v) data warehouses, etc.","The interaction with this dynamic content is accomplished through (i) queries\/submissions to databases, (ii) buying\/selling\/interacting through e-commerce, (iii) running queries and lookups in directories, (iv) accessing and interacting with content resident on intranet pages (including on individual computers), and\/or (v) accessing, interacting with, adding, subtracting or modifying content resident in data warehouses.","The access to or interaction with this dynamic content is done in a variety of ways. For example, such interaction may be accomplished through direct access to the databases by running specific commands or through form submissions on the Internet that run specific queries or perform specific actions. This interaction requires the submission of necessary parameters or information to complete a query or interaction (addition, modification, subtraction) with the dynamic content. This information may need to be submitted in multiple steps. Once the submission of information is finished, the results of the interaction\/query\/e-commerce are sent back to the user.","Each time a user wishes to interact in the foregoing manner, the user is required to carry out each and every one of the steps associated with the submission of necessary parameters or information. If a same type of transaction is to be carried out in a repeated manner, this may be very time consuming and problematic.","Therefore, there is a need for a technique involving automated execution of transactions of various types, no matter the complexity thereof.","A system, method and computer program product are provided for carrying out a transaction. Initially, a transaction pattern reflecting a transaction is stored in memory. Thereafter, the transaction pattern is executed to carry out the transaction in an automated manner.","In one embodiment of the present invention, the transaction pattern may include a record of: information submitted by a user, actions taken by the user, actions taken by a system to generate results, and results sent to the user. As an option, the transaction pattern may include a record of actions taken by the system which enable access of the user to data, and actions enabled by the data to retrieve content.","In another embodiment of the present invention, the storage of the transaction pattern may includes the storage of records relating to: (1) an interface presented to a user; (2) submission of information by a user; (3) parameters required to complete the transaction; (4) navigation of a user during the transaction; (5) information returned by a system; and\/or (6) information selected by a user.","In still another embodiment of the present invention, the execution of the transaction pattern may include: (1) retrieval of the transaction pattern by an automated and\/or programmable agent; (2) submission of required parameters during the transaction; (3) automatic navigation during the transaction; (4) retrieval of content; and\/or (5) relaying content to a user.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1","b":["100","102","104","102","104"]},"For example, a transaction, in one embodiment, may refer to: information submitted by the user, actions taken by the user, actions taken by a system enabling the access of the user to the data, actions taken by the data to retrieve\/modify content, results sent back to the user, and\/or any combination or portion of the foregoing entities.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["200","102"]},"In one embodiment of the present invention, the transaction pattern may include a record of: information submitted by a user, actions taken by the user, actions taken by a system to generate results, and results sent to the user. As an option, the transaction pattern may include a record of actions taken by the system which enable access of the user to data, and actions enabled by the data to retrieve content. Storage in accordance with operation  may take any form with sufficient identification and description of any required step in the transaction process.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2A","FIG. 2"],"b":["220","102"]},"During use of the present invention, such transaction pattern may be retrieved from memory when desired in operation . Thereafter, the transaction pattern is executed to carry out the transaction in an automated manner. Note operation . An execution, or playback, in accordance with operation  may include the invocation of a stored transaction pattern.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2B","FIG. 2"],"b":["230","106"]},"A transaction pattern for any transaction need only be recorded once by anyone with sufficient system access privilege. Once recorded, any user may conduct that transaction, any number of times, by the invocation of the recorded transaction pattern, or \u201ctransaction macro.\u201d","Since a transaction macro can be stored in any fashion and invoked, directly or indirectly, by any agent (human or automated), it enables the completion of the transaction it describes in any fashion from any device.","System Architecture",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 2"],"b":["200","310","312"]},"The workstation shown in  includes a Random Access Memory (RAM) , Read Only Memory (ROM) , an I\/O adapter  for connecting peripheral devices such as disk storage units  to the bus , a user interface adapter  for connecting a keyboard , a mouse , a speaker , a microphone , and\/or other user interface devices such as a touch screen (not shown) to the bus , communication adapter  for connecting the workstation to a communication network  (e.g., a data processing network) and a display adapter  for connecting the bus  to a display device .","The workstation typically has resident thereon an operating system such as the Microsoft Windows NT or Windows\/95 Operating System (OS), the IBM OS\/2 operating system, the MAC OS, or UNIX operating system. Those skilled in the art may appreciate that the present invention may also be implemented on platforms and operating systems other than those mentioned.","Applications","Following is a plurality of exemplary applications of the present invention. It should be noted that such examples are not exhaustive, and should not be construed as limiting.","Scenario I",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":"400"},"In this case, the transaction pattern includes: (i) required parameters submitted by the user (ii) the entire internal process of submission of these parameters to the database by the interface and (iii) the results returned by the database and presented to the user. Note .","Scenario II",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5","b":"500"},"In this case, the transaction pattern consists of (i) the creation and actions associated with the forms presented in the web-interface with which the user submits information (ii) the information submitted by the user, in every form in every step of the e-commerce flow (iii) the internal process whereby the submitted information is sent to the servers and databases of the e-commerce site (iv) the navigation (automatic or user determined) of the user within the e-commerce process and (v) the results returned by the e-commerce site once the submitted information has been processed. Note .","Scenario III",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":"600"},"In this case, the transaction pattern consists of (i) the creation and the action associated with the forms presented in the web-interface with which the user submits information (ii) the information submitted by the user, in every form in every step of the login and account access process (iii) the internal process whereby the submitted information is sent to the servers and databases of the user's portfolio account site (iv) the navigation (automatic or user determined) of the user within the portfolio account and (v) all the content that the user desires in every step of his navigation within the portfolio account. Note .","In all of these scenarios, the user submits and retrieves different pieces of information in multiple steps. While it is possible to submit information in this fashion from a desktop computer, it becomes increasingly inconvenient once a user tries to do so through devices other than PC's where the entry of information is not as convenient. Therefore, a process whereby a query or a transaction can be completed and the resulting content sent to the user with a minimum amount of information input and navigation, is highly desirable.","The present invention thus allows any transaction to be automated through the concept of the recording and the playback of a \u201ctransaction macro.\u201d","Dynamic Content","A description of dynamic content in the context of the present invention will now be set forth along with a comparison with static content. A computer network system has one or more host network servers connected to serve data to one or more client computers over a network.  shows a simple computer network system  with a single host network server  connected to serve data to a client  via a network . The client  sends a request for data and\/or services to the server  over the network . The server  processes the request and returns a response over the network . If the request is for data, the server  accesses a database  to retrieve the requested data  and returns the data  as part of the response.","The client-server system  is representative of many different environments. One particular environment of interest is the Internet. The server  runs a Web server software program that accepts requests from client-based programs (e.g., browsers) and returns data  in the form of Web pages or documents to the client . The Web pages are commonly written in HTML (hypertext markup language) and XML (extensible markup language). Web pages are transmitted using conventional network protocols, such as TCP\/IP (Transmission Control Protocol\/Internet Protocol), HTTP (Hypertext Transfer Protocol) and DCOM (Distributed Component Object Model). The client  executes a browser or other application to render the Web page into human-perceptible forms. A Web document might include text, images, sound, video, active code, and so forth.","Documents served from a server to client are typically generated using either or both of two methods: a static content method and a dynamic content method. In a static content method, the document is created in advance and stored statically on a server database. When a client requests the document, the server retrieves the document and transmits it over the network to the client.  is an example in which the server retrieves the static data  from database  and serves the data to the client . It is further noted that conventional servers, and particularly Web servers, may be configured to push the content to the client without receiving a request. The static content method has an advantage of minimizing the user's perceived response time, meaning the time between requesting the document and seeing it rendered on a computer screen. It has a disadvantage that all users who request the document receive exactly the same content. With static content, the server cannot respond to specific user requests or personalize a document for individual users.","In a dynamic content method, the document is generated dynamically by the server. When a client requests a document, the server invokes one or more agents, feeding the agents relevant parameters from the user's request (such as the user's name). The agent(s) generate the document that satisfies the user's request and the server returns the document over the network to the client. The dynamic content method has the advantage of responding to specific user requests or personalizing content for individual users. It has the disadvantage that the user's perceived response time will generally be longer than with static document requests. This is because the document generation process involves additional time to invoke the appropriate agent(s) and generate the document.","The server generates dynamic content documents by invoking an agent in one of two ways: an \u201cout-of-process\u201d method and an \u201cin-process\u201d method. In an \u201cout-of-process\u201d method, the agent runs in its own process and address space, separate from the server's process and address space. Typically, the out-of-process method uses the industry-standard common gateway interface (CGI) as the communication mechanism between the server and agent. In an \u201cin-process\u201d method, the agent runs within the Web server's process and address space. The in-process method typically uses a vendor-specific application programming interface, like the Internet Server Application Programming Interface (ISAPI) implemented by Internet Information Server (IIS), which is available from Microsoft Corporation.","To illustrate the two dynamic content methods and how they can be used in conjunction with the static content method, consider a scenario in which the server  runs a Web server for an online retail company. When the client  first accesses the Web site, the server  might retrieve a pre-existing home page for the company from the database  and serve that page to the client . This initial step is an example of a static content method. From the home page, the client might request to view an online catalog of products offered by the company. In response, the Web server might invoke a catalog agent to guide the user through various product offerings. When the user decides to purchase a product, the client submits an order request. In response, the Web server might invoke an order agent to assist the user in ordering the product. The steps involved with actively serving a catalog or taking an order are examples of dynamic content methods. They both involve dynamic generation of documents in response to input received from the client.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8","b":["22","40","1","40","40","42","28","42","40","44","44","2","1"]},"When the user selects an item, the order manager  dynamically generates an order document  that contains the user's name, a description of the selected item, the cost of the item, and payment terms. The order manager  returns the order document  to the Web server , which then serves the document  to the client. Afterwards, the order manager  is terminated and the second process  is halted.","The out-of-process method shown in  has an advantage in crash prevention and recovery. If the out-of-process order manager  is unreliable and ultimately crashes, it will not cause the Web server  to crash. However, the out-of-process method has a disadvantage in that a particular agent must be loaded into memory each time a request arrives for it. Using CGI technology, the agent must also be unloaded from memory once it finishes the request. This loading and unloading consumes resources, resulting in a relatively slow response time. Another problem compounding the slowness is that the out-of-process method involves cross-process communication between processes  and , including such activities as marshalling, messaging, and the like.","A variation of CGI, known as FastCGI, allows the server to keep the agent loaded, rather than terminating the agent each time it responds to a particular request. FastCGI is an improvement over CGI in that it saves the per-request invocation overhead, thereby improving the response time. However, the FastCGI is still run in a separate process, and hence the drawbacks associated with cross-process communication remain.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 9","b":["40","48","48","1","40","40","48","48","50","48","50","40","46","48"]},"The in-process method is advantageous in that a particular agent need only be loaded into memory once, when the first request arrives for it. The agent can then remain in memory within the server's process and address space, and can handle additional requests that arrive for it. The in-process method has a further advantage in that there is no need for cross-process communication. As a result, the in-process method is comparatively faster than the out-of-process method.","Mobile Electronic Commerce (M-Commerce)","The prior art has suggested two ways to wireless-enable an electronic commerce \u201ce-commerce\u201d) infrastructure. The first is starting from scratch and writing the e-commerce application for wireless devices. The second way is to use the same backend databases, but to recreate the application logic\/programming and the presentation logic\/programming for wireless. One skilled in the art will realize the long and tedious task presented under either of these methods.","M-Commerce involves the process of mobilizing an existing e-commerce flow to mobile commerce. The present invention leverages an existing e-commerce infrastructure and enables it for wireless applications. The present invention overcomes the disadvantages inherent in the prior art by adding a separate presentation layer to an existing e-commerce application or system. The existing back end databases, application logic\/programming, and presentation logic\/programming are not affected. In this way, the existing e-commerce application or system can be mobilized without requiring the user to be a programmer. Further, the existing e-commerce application or system can be mobilized without requiring the existing application to be specifically modified. For example, the presentation layer of the present invention can be stored on a server that interacts with the e-commerce related content from the remote site, wireless enables it, and sends it to a user's wireless device.","Pattern Recording and Replay","The additional layer can include pattern recording and replay capabilities to enable wireless ecommerce.","Pattern Recording","A preferred embodiment of the present invention gives its users the ability to create (record) functional elements called patterns and use those elements (replay) in their custom applications. A pattern consists of a collection of states. A state refers to the state of the remote application in its interaction by the user (the designer). States can be of different types. For example, an action that requires accessing the World Wide Web can be represented by an XML (or other type) state and an action that would require sending e-mail can be a part of an SMTP state. Each type of state has a dedicated connector, which is used to create the state definitions and operate on those states. Thus, an XML Connector Module (XCM) is the connector that aids in recording and replaying of XML states. A database connector is used to store and retrieve data from a database, but may or may not point to a next state. An HTML Connector points to a next table. For example, the HTML Connector in state A would instruct a User Agent to execute action X to access state C. The User Agent is used to fetch the output from a remote application and execute any user actions on that output.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 10","b":["1000","1002","1004","1006","1008","1010","1012","1014","1016","1018","1020","1022"]},"The system now knows how to retrieve desired information using the pattern. Accordingly, all users using the system can obtain that content. The next (or same) user that wants to perform a similar action enters the URL of the pattern by selecting it. The pattern is replayed with the User Agent executing the actions received of operation . The parts of the web page that were identified by the user and stored in operation  are returned to the user. The user can also define a default area to access in the event that a state is not recognized. See also the description below regarding state identification based on content and probability.","The information stored in a pattern may involve (i) the web or non-web interfaces presented to the user, (ii) the actions performed by the user or the system in the submission of the information, (iii) the parameters required to complete the transaction and submitted by the user, (iv) the automatic or manual navigation of the user within the transaction process, and\/or (v) the content or results returned by the system or selected by the user.","A transaction pattern for any transaction need only be recorded once by anyone with sufficient system access privilege. Once recorded, any user may conduct that transaction, any number of times, by the invocation of the recorded transaction pattern, or \u201ctransaction macro.\u201d","Since a transaction pattern can be stored in any fashion and invoked, directly or indirectly, by any agent (human or automated), it enables the completion of the transaction it describes in any fashion from any device.","As an example of use, suppose the user invokes a pattern to search and buy a book from Amazon.com. The PRE asks the user for a search phrase. The PRE then invokes the UA to submit the search phrase to the Amazon.com website. The UA then picks up the results of the search from the Amazon.com website and presents them to the user properly formatted for the device that the user is using. The formatting can be performed by the TRE, discussed below. The Buy and Buy Later buttons are output along with the results. The user is allowed to select one of the books. The User Agent retrieves additional information about the book (by following a link, for example). If the user clicks on the Buy button, the User Agent follows a pattern to purchase the book automatically by filling in the appropriate information, including pre-stored user address information and credit card information. A Purchase Completed page is shown to the user stating that the book has been purchased.","Exemplary Pattern Recording Interface","According to a preferred embodiment of the present invention, pattern recording is done through an intuitive interface that allows the user to quickly and easily record patterns. More particularly, the interface described in the following paragraphs allows creation of an application for retrieving a variable from a database as well as creation of an interface for displaying the variable on a particular type and\/or model of device.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 11","b":["1100","1102","1104","1106","1108","1110","1112"]},"The following example illustrates creation of an application for retrieving a customer identifier (ID) from a database and creating an interface for displaying the customer ID on a particular type and\/or model of device. As will be discussed in the example, the recording interface allows creation of different interfaces for different devices based on the capabilities of each.","Referring again to , a start screen  is displayed upon selection of the wizard button. The database server is selected from the drop down menu  and the Next button is selected. A database selection screen (not shown) is presented, which allows the user to select the desired database from which the desired data is to be retrieved.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 12","b":"1200"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 13","b":["1300","1302","1304"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 14","b":["1400","1402","1404","1406"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 15","b":["1500","1502","1504","1506"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 16","b":["1600","1602"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 17","b":["1100","1110","1702","1704","1706"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 18","b":["1802","1804","1806"]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 19","b":["1900","1902","1904","1906","1908","1910"]},"For example, a website may have a table having an output with five columns. On a PDA, perhaps only four columns can be displayed on the display. The output can be set to only show four variables. Similarly, if only two columns of the table can be displayed on a phone, the output can be set to show only two variables. More information about operation and functionality of the PRE is found in US Patent Application entitled SYSTEM, METHOD AND COMPUTER PROGRAM PRODUCT FOR PATTERN REPLAY USING STATE RECOGNITION, filed concurrently herewith under Ser. No. 09\/942,080 and assigned to common assignee Clickmarks, Inc., and which is herein incorporated by reference.","Pattern Replay Engine","The Pattern Replay Engine (PRE) is the component of the platform that is responsible for replaying a pattern from one particular state to another during runtime.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 20","b":["2002","2004","2006","0008","2010"]},"The PRE is a request-driven component. The PRE takes the request to make a transition from a particular State. Transitions from one State to another are made by executing Actions. The PRE communicates with the appropriate Connector (of the current State) to execute the current Action in the request and get the new resulting State. Next, all Script associated with the State is evaluated.","The PRE then calls the Transcoding Page Rendering Engine (TRE) to \u201cflush\u201d its output to the device. This means that any Content, which has been queued for display in the TRE (while processing the request), is sent to the device. Every state can potentially generate output to be displayed on the device, including internal states. This is a desirable feature as it means the designer can send a status message to the device, e.g. \u201cPlease wait while processing.\u201d etc. Finally, a script is called, which can initiate further State transitions from this script method if necessary.","More information about operation and functionality of the PRE is found in US Patent Application entitled SYSTEM, METHOD AND COMPUTER PROGRAM PRODUCT FOR PATTERN REPLAY USING STATE RECOGNITION, discussed above.","Transcoding Page Rendering Engine (TRE)","The Transcoding Page Rendering Engine (TRE) is a tool used to render content on any display environment.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 21","b":["2100","2102","2104","2106","2108","2110","2112"]},"More information about operation and functionality of the TRE is found in US Patent Application entitled SYSTEM, METHOD AND COMPUTER PROGRAM PRODUCT FOR PAGE RENDERING UTILIZING TRANSCODING, filed concurrently herewith under Ser. No. 09\/942,051 and assigned to common assignee Clickmarks, Inc., and which is herein incorporated by reference.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 7-9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 13","FIG. 11"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 14","FIG. 11"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 15","FIG. 11"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 16","FIG. 11"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 17","FIG. 11"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 18","FIG. 17"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 19","FIG. 11"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
