---
title: System and method for dynamically simulating devices at a computing device
abstract: A method is provided and includes generating a first simulated device at a device simulator. The first simulated device corresponding to a first physical device. Also, a second simulated device is generated at the device simulator. The second simulated device corresponds to a second physical device. At least one behavior extension file is loaded at the device simulator. Further, the behavior extension file is applied to the first simulated device or to the second simulated device. The method further includes selectively loading an application to the device simulator. The application can be selectively executed with respect to the first simulated device, the second simulated device, or to the first simulated device and the second simulated device. Also, the application can be modified at least partially in response to the execution of the application at the device simulator to produce a modified application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07877247&OS=07877247&RS=07877247
owner: Qualcomm Incorporated
number: 07877247
owner_city: San Diego
owner_country: US
publication_date: 20041115
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","REFERENCE TO COMPUTER PROGRAM LISTING APPENDIX","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. provisional application 60\/520,047, filed Nov. 13, 2003 and incorporated herein by reference in its entirety.","A portion of the present disclosure is contained in a computer program listing appendix electronically submitted via EFS-Web. The submission contains an MS-WINDOWS text file named \u201cAppendixI.txt\u201d created on Sep. 27, 2007, and having a file size of approximately 19 kilobytes. The contents of this file are incorporated by reference herein. Any references to \u201cAppendix I\u201d or the like in this specification refer to the file contained on the compact disc.","The contents of this file are subject to copyright protection. The copyright owner has no objection to the reproduction by anyone of the patent document or the appendix as it appears in the Patent and Trademark Office patent files or records, but does not waive any other copyright rights by virtue of this patent application.","Continuing the description of the method, at decision step , the device simulator detects whether a data set is selected via the device simulator. If a data set is selected, the method continues to block  and the device simulator loads the data set. In a particular embodiment, the data set can be a joint photographic experts group (JPEG) file, a graphics interchange format (GIF) file, a tagged image file format (TIFF) file, a Adobe Photoshop (PSD) file, a portable networks graphics (PNG) file, a windows metafile (WMF) file, or other type of picture file that can be viewed at the simulated device. Also, the data set can be a moving picture experts group (MPEG) file, an audio video interleave (AVI) file, a Windows media video (WMV) file, an advanced streaming format (ASF) file, a Quicktime (MOV) file, a Real Media (RM) file, or other type of video file that can be viewed at the simulated device. The data set can be an MPEG audio layer three (MP3) file, a waveform audio format (WAV) file, a Windows Media Audio (WMA) file, an OGG file, a Monkey's Audio digital file (APE) file, a VOX file, a Real Audio (RA) file, a synthetic music mobile application format (MMF) file, or musical instrument digital interface (MID) file, a phrase format (SPF) file, a Qualcomm PureVoice audio file (QCP) or other sound file that can be listened to via the simulated device. The audio files can also be used as ring tones for cellular telephone devices. Further, the data set can be a font file that includes one or more fonts available on the computer or one or more fonts that are specific to simulated devices. Moving to block , the data set is applied to the simulated device. From block , the method moves to decision step . Returning to decision step , if a data set is not selected via the device simulator, the method proceeds to decision step .","I. Field","The present invention generally relates to device simulators. More particularly, the invention relates to computer applications for simulating devices.","II. Description of Related Art","Advances in technology have resulted in smaller and more powerful personal computing devices. For example, there currently exist a variety of portable personal computing devices, including wireless computing devices, such as portable wireless telephones, personal digital assistants (PDAs), and paging devices that are small, lightweight, and easily carried by users. More specifically, portable wireless telephones, for example, further include cellular telephones that communicate voice and data packets over wireless networks. Further, many such wireless telephones provide significant computing capabilities, and as such, are becoming tantamount to small personal computers and hand-held PDAs.","Typically, these smaller and more powerful personal computing devices are often resource constrained. For example, the screen size, the amount of available memory and file system space, and the amount of input and output capabilities may be limited by the small size of the device. Because of such severe resource constraints, it is can be desirable to maintain a limited size and quantity of software applications and other information residing on such personal computing devices (client computing devices).","Some of these personal computing devices utilize application programming interfaces (APIs) that are sometimes referred to as runtime environments and software platforms. The APIs can be installed onto a local computer platform and can be used to simplify the operation and programming of such devices by providing generalized calls for device specific resources. Further, some APIs can provide software developers the ability to create software applications that are fully executable on such devices. In addition, APIs can provide an interface between a personal computing device system hardware and the software applications. As such, the personal computing device functionality can be made available to the software applications without requiring the software developer to access the source code of the specific personal computing device. Further, some APIs can provide mechanisms for secure communications between personal devices, such as client devices and server systems, using secure cryptographic key information.","Examples of such APIs, some of which are discussed in more detail below, include those currently publicly available versions of the Binary Runtime Environment for Wireless\u00ae (BREW\u00ae), developed by Qualcomm, Inc. of San Diego, Calif. BREW\u00ae can be described as a thin veneer that exists over the operating system of a computing device, such as a wireless cellular phone. BREW\u00ae can provide one or more interfaces to hardware features particularly found on personal computing devices.","Further, BREW\u00ae is advantageous in that it can be provided on personal computing devices at a relatively low cost with respect to the demands on device resources and with respect to the prices typically paid by consumers for devices containing the BREW\u00ae API. Additionally, BREW\u00ae provides an end-to-end software distribution platform that includes a variety of benefits for wireless service operators, software developers and computing device consumers. One such currently available end-to-end software distribution platform includes logic distributed over a server-client architecture, wherein the server can perform billing, security, and application distribution functionality, and wherein the client can perform application execution, security and user interface functionality.","In order to develop software for various types of portable personal computing devices, it is sometimes necessary to physically possess and test the particular physical device for which the software is being developed. The possession of the physical device can allow a developer to execute the software loaded onto the physical device in order to debug the software and determine if the developed software provides the functionality intended by the developer. Alternatively, the software developer can use a device simulator, but such device simulators are typically static and tied to a single type and model of a physical device.","Accordingly it would be advantageous to provide an improved device simulator that can simulate multiple devices exhibiting multiple behaviors.","A method is provided and includes generating a first simulated device at a device simulator. The first simulated device corresponds to a first physical device. Also, a second simulated device is generated at the device simulator. The second simulated device corresponds to a second physical device. At least one behavior extension file is loaded at the device simulator. Further, the behavior extension file is applied to the first simulated device or to the second simulated device.","In a particular embodiment, the behavior extension file is applied to the first simulated device and to the second simulated device. Additionally, in a particular embodiment, the first physical device is selected from the group consisting of a cellular telephone, a portable digital assistant, and a pager. Also, the second physical device is selected from the group consisting of a cellular telephone, a portable digital assistant, and a pager. In a particular embodiment, a first device pack is executed and includes the behavior extension file that represents selected behaviors of the first simulated device. Moreover, a second device pack is executed and includes a second behavior extension file that represents selected behaviors of the second simulated device.","In another particular embodiment, the method further includes selectively loading a data set to the device simulator. The data set can be an audio file, a video file, an image file, or a font file. Additionally, the data set can be selectively applied to the first simulated device, the second simulated device, or to the first simulated device and the second simulated device. Also, in a particular embodiment, the method includes selectively loading an application to the device simulator. The application can be selectively executed with respect to the first simulated device, the second simulated device, or to the first simulated device and the second simulated device. Also, the application can be modified at least partially in response to the execution of the application at the device simulator to produce a modified application. The modified application can be selectively executed on the first simulated device, the second simulated device, or the first simulated device and the second simulated device.","In another embodiment, a computer program is embedded within a computer readable medium and includes instructions to generate a base simulator and instructions to generate a first simulated device for use with the base simulator. The computer program also includes instructions to load a first of a plurality of behaviors onto the first simulated device. Further, the computer program includes instructions to generate a second simulated device within the base simulator. Particularly, the second simulated device is different from the first simulated device. The computer program also includes instructions to load a second of the plurality of behaviors onto the second device.","In another embodiment, a base simulator is provided and simulates a baseline set of behaviors of a physical portable computing device. A plurality of behavior extensions is accessible to the base simulator. Further, the behavior extensions are applicable to the base simulator to simulate additional behaviors, other than the baseline set of behaviors, of the physical portable computing device.","In yet another embodiment, a software development system is provided and includes a processor and a memory device that is accessible to the processor. Further, a device simulator is embedded within the memory device. The device simulator includes instructions to simulate a first portable computing device and instructions to simulate a second portable computing device. Additionally, the device simulator includes instructions to apply at least one behavior extension to the first portable computing device, the second portable computing device, or to the first portable computing device and to the second portable computing device.","In still another embodiment, a user interface is provided and includes a first simulated device that has a first behavior and a second a second simulated device that has a second behavior. One or more programs can be executed at the first simulated device, the second simulated device, or at both the first simulated device and the second simulated device. Also, the first simulated device is a simulation of a unique model of a cellular telephone, a portable digital assistant, or a pager.","In yet still another embodiment, a portable computing device includes a processor and a memory accessible that is to the processor. An application is loaded into the memory. The application is a tested application and the tested application is executed on a device simulator that has a set of device behaviors common to a plurality of different types of physical computing devices. Also, the device simulator has a plurality of extension files that define extension features for use by the device simulator to simulate a plurality of additional behaviors for at least one of the plurality of different types of physical computing devices.","In another embodiment, a method for testing an application is provided and includes receiving an application. The application is tested at a device simulator to generate a debugged application. Particularly, the device simulator includes a core simulation program that can be used to simulate a baseline set of behaviors of at least one physical portable computing device. Further, the device simulator includes extension files that define extension features to be applied to the simulation program to simulate additional behaviors of the at least one physical portable computing device. The debugged application can be communicated to a server.","In yet another embodiment, a method includes receiving an application at a server. Particularly, the application is tested on a device simulator that includes a plurality of behaviors common to a plurality of different types of physical computing devices. Also, the device simulator includes a plurality of extension files that define extension features for use by the device simulator to simulate a plurality of additional behaviors of the at least one of the physical computing devices. The application can be communicated from the server to a physical device corresponding to the simulated device.","In yet still another embodiment, a system is provided and includes a processor and a computer memory that is accessible to the processor. A simulation program is stored within the computer memory and is executable by the processor. The simulation program includes a core simulation program to simulate a set of behaviors common to a plurality of different types of physical portable computing devices that may be simulated. Moreover, the simulation program includes extension files that define extension features for use by the simulation program to simulate device behaviors in addition to the set of behaviors. Particularly, the device behaviors correspond to additional features of a physical device selected from the plurality of different types of physical portable computing devices. The system also includes an application program that is targeted for execution on at least one of the plurality of different types of physical portable computing devices. Further, the application program is tested using the simulation program.","In still yet another embodiment, a system is provided and includes a processor and a computer memory that is accessible by the processor. A simulation program is stored within the computer memory and is executable by the processor. The simulation program includes means for simulating a baseline set of behaviors of at least one physical portable computing device. Also, the simulation program includes means for defining extension features to be applied to the simulation program to simulate additional behaviors of the at least one physical portable computing device.","In another embodiment, a device simulator is provided and includes a BREW core for providing a base simulator. A shared extensions module coupled to the BREW core. Further, at least one built-in extension is implicit to the shared extensions module. The at least one built-in extension is accessible to the BREW core and provides a first behavior for a physical device simulated by the base simulator. Also, at least one generic extension is explicit to the shared extensions module. The at least one generic extension is accessible to the BREW core and provides a second behavior for the physical device simulated by the base simulator. Additionally, the device simulator includes at least one device pack that is accessible to the BREW core. The at least one device pack includes at least one device pack extension that is accessible to the BREW core and provides a third behavior for the physical device simulated by the base simulator.","Other aspects, advantages, and features of the present invention will become apparent after review of the entire application, including the following sections: Brief Description of the Drawings, Detailed Description, and the Claims.","The word \u201cexemplary\u201d is used herein to mean \u201cserving as an example, instance, or illustration.\u201d Any embodiment described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other embodiments. The word \u201csimulator\u201d is used to describe a computer application that can simulate an actual physical device or a device run time environment. As used herein, the word \u201csimulator\u201d is intended to include emulators. Further, many embodiments are described in terms of sequences of actions to be performed by, for example, elements of a computing device. It will be recognized that various actions described herein could be performed by specific circuits, e.g., application specific integrated circuits (ASICs), by program instructions being executed by one or more processors, or by a combination of both.","Further, the embodiments described herein can additionally be considered to be embodied entirely within any form of computer readable storage medium having stored therein a corresponding set of computer instructions that upon execution would cause an associated processor to perform the functionality described herein. Thus, the various aspects of the invention may be embodied in a number of different forms, all of which have been contemplated to be within the scope of the claimed subject matter. In addition, for each of the embodiments described herein, the corresponding form of any such embodiments may be described herein as, for example, \u201clogic configured to\u201d perform a certain action or \u201ccode operable to\u201d perform the described action.","The following detailed description describes methods, systems, software and apparatus used to simulate one or more devices at a computing device. In at least one embodiment a device simulator can simulate a portable device at a computing system. Application programs developed for the actual physical portable device that corresponds to a simulated device can be executed at the computing system. In particular, the application programs can be tested using simulated devices generated at the computer device.","In one or more embodiments, a device simulator can simulate one or more personal computing devices and can operate in conjunction with a runtime environment. One such runtime environment is a version of the Binary Runtime Environment for Wireless\u00ae (BREW\u00ae) software platform developed by QUALCOMM, Inc., of San Diego, Calif. In at least one embodiment in the following description, the system used to provide communications between client computing devices and servers is implemented on a computing device executing a runtime environment, such as the current version of the BREW\u00ae software platform. However, one or more embodiments of the system used to provide communications between client computing devices and servers are suitable for use with other types of runtime environments that, for example, operate to control the execution of applications on wireless client computing devices.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1","b":["100","102","102","104","106","106","104"]},"As illustrated in , the wireless device can be a cellular telephone , a personal digital assistant , a pager , or a separate computer platform  that has a wireless communication portal. In a particular embodiment, the pager  can be a two-way text pager. Further, in an alternative embodiment, the wireless device can have a wired connection  to a network or the Internet. The exemplary, non-limiting system can include any form of a remote module including a wireless communication portal, including without limitation, wireless modems, PCMCIA cards, personal computers, access terminals, telephones without a display or keypad, or any combination or sub-combination thereof.","As depicted in , the application download server  is coupled to a network  with other computer elements in communication with the wireless network . The system  includes is a second server  and a stand-alone server , and each server can provide separate services and processes to the wireless devices , , ,  across the wireless network . Further, as indicated in , the system  also includes at least one stored application database  that stores software applications that are downloadable by the wireless devices , , , . Different embodiments are contemplated that locate logic to perform secure communications at any one or more of the application download server , the second server  and the stand-alone server .","In , a block diagram is shown that more fully illustrates the system , including the components of the wireless network  and interrelation of the elements of the system . The system  is merely exemplary and can include any system whereby remote modules, such as the wireless client computing devices , , ,  communicate over-the-air between and among each other and\/or between and among components connected via a wireless network , including, without limitation, wireless network carriers and\/or servers. The application download server  and the stored application database , along with any other servers, such as server , that can provide cellular telecommunication services and can communicate with a carrier network  through a data link, such as the Internet, a secure LAN, WAN, or other network. In an illustrative embodiment, the server  contains a server security module  that further contains logic configured to provide for secure communications over the carrier network . In a particular embodiment, the server security module  can operate in conjunction with a client security module located on a client computing device, such as wireless devices , , , , to provide secure communications.","The carrier network  controls messages (sent as data packets) sent to a mobile switching center (\u201cMSC\u201d) . The carrier network  communicates with the MSC  by a network, such as the Internet and\/or POTS (\u201cplain ordinary telephone system\u201d). Typically, the network connection between the carrier network  and the MSC  transfers data, and the POTS transfers voice information. The MSC  is connected to multiple base transceiver stations (\u201cBTS\u201d) . The MSC  can be connected to the BTS  by both the network and\/or Internet for data transfer and POTS for voice information. The BTS  ultimately broadcasts messages wirelessly to the wireless devices, such as to cellular telephone , by the short messaging service (\u201cSMS\u201d), or other over-the-air methods known in the art.","The wireless device, e.g., a wireless client computing device, such as cellular telephone , has a computer platform  that can receive and execute software applications transmitted from the application download server . The computer platform  may be implemented as an application-specific integrated circuit (\u201cASIC\u201d ), a processor, microprocessor, logic circuit, or other data processing device. The ASIC  is installed at the time of manufacture of the wireless device. The ASIC  or other processor can execute an application programming interface (\u201cAPI\u201d)  layer that interfaces with resident programs in the memory  of the wireless device. The memory  can be comprised of read-only or random-access memory (RAM or ROM), EEPROM, flash memory, or any other memory suitable to computer platforms. The API  also includes a client security module  containing logic configured to provide for secure communications over the carrier network . In a particular embodiment, the client security module  can operate in conjunction with the server security module  to provide secure communications. As illustrated in , the computer platform  can further include a local database  that can hold applications not actively used in memory . In an illustrative embodiment, the local database  is a flash memory cell, but can be any secondary storage device as known in the art, such as magnetic media, EEPROM, optical media, tape, or floppy or hard disk.","A wireless client computing device, for example, the cellular telephone , can download one or more software applications, such as games, news, stock monitors, and the like, from the application download server . Further, the wireless computing device can store the application in the local database , when not in use, and can upload stored resident applications from the local database  to memory  for execution by the API  when desired by the user. Further, communications over the wireless network  are performed in a secure manner, at least in part, by the interaction and operation between the client security module  and the server security module .","Referring now to , a system for simulating personal computing devices is shown and is generally designated . As shown, the system  includes a computing system . In an illustrative embodiment, the computing system  can be a desktop computing device, a laptop computing device, or a handheld computing device. An input device  is coupled to the computing system . In an illustrative embodiment, the input device  can be used to input data or information. In a particular embodiment, the input device  is a keyboard. In other exemplary, non-limiting embodiments, the input device  can be a mouse, a light pen, a scanner, a touch screen, a cellular telephone, a digital camera, or an MP3 player.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIG. 3"],"b":["306","302","306","302","306","306","308","302","308","308"]},"As shown in , the computing system  includes a processor  and a memory . The memory device  is coupled to the processor  and is accessible to the processor . In an illustrative embodiment, the memory device  can be a non-volatile memory device , such as a hard disk drive. The memory device  can be a read-only memory (ROM) device or random access memory (RAM) device. As further illustrated in , a device simulator  is loaded and is embedded within the memory device . In a particular embodiment, the device simulator  can simulate one or more personal computing devices at the computing system .","In a particular embodiment, an application program can be executed on the device simulator  within the computing system to simulate operation of a physical personal computing device. The application can be input to the computing system  and executed so that it appears to be executed on a simulated device that corresponds to the a selected physical personal computing device for which the computer application is intended. As such, a software developer can test a particular application program without having to port the application program to the particular physical personal computing device for which the program is intended. In an illustrative embodiment, the device simulator  can simulate different makes and models of cellular telephones. Also, the device simulator  can simulate different makes and models of portable digital assistants (PDAs), different makes and models of pagers, and different makes and models of other devices for which a computer application can be written. Further, the device simulator  can assign a core set of behaviors and an optional variety of additional behaviors to the simulated devices. For example, the device simulator  can use extension files to assign an audio player behavior, a video player behavior, an image viewer behavior, a digital video camera behavior, a digital still camera behavior, and a digital audio recorder behavior.","After applications are tested at the device simulator, the tested applications can be uploaded to a repository, e.g., the stored application database  show in . Further, the tested applications, which may have been modified based on the testing, can be downloaded to one or more wireless devices , , ,  (). A service provider can charge a fee for each downloaded application and pass a portion of that fee to the software developer.","Referring to , an exemplary, non-limiting embodiment of a device simulator is shown and is generally designated . In an illustrative embodiment, the device simulator  can operate with the binary run-time environment for wireless (BREW) platform. However, the device simulator can operate on any other platform or operating system. As shown, the device simulator includes a BREW core . Further, the device simulator  includes an original equipment manufacturer (OEM) layer . The BREW core  includes multiple core BREW libraries and modules that can be used as an API to OEM layer . In a particular embodiment, the OEM layer  includes device specific code that can port BREW onto a computer in which the device simulator  is installed and executed.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","b":["400","406","402","406","400","406","408","410","406","412","414"]},"In a particular embodiment, the generic extensions ,  and the built-in extensions ,  include features that are typically common to the devices that can be simulated by the device simulator. These features, for example, can include generic button sizes and shapes, generic display sizes and shapes, generic speaker sizes shapes, generic microphone sizes and shapes, generic antenna sizes and shapes.","As illustrated in , the device simulator  includes a first device pack  and a second device pack . Each device pack ,  represents a particular physical device that can be simulated by the device simulator . Further, each device pack ,  includes device model information relevant to the device that is represented by the device pack , . For example, each device pack ,  can include networking and socket information for a particular device. Also, each device pack ,  can include memory information such as the type of memory included in the device and the size of the memory. Further, the device packs ,  can include display information including the type of display, e.g., liquid crystal display (LCD), the size of the display, and the resolution of the display.","Additionally, the device packs ,  can include primary keypad information, secondary keypad information, keyboard information, primary display information, secondary display information, audio information, font information, supported media formats, application support, Bluetooth information, joystick information, touch screen information, global positioning system information, network information, predictive text entry information, memory information, subscriber information module information, and other device specific information, such as ring tones, call history information, address book information, and screen saver information. Appendix I shows an exemplary, non-limiting embodiment of a program written to create a device pack. In particular, the program shown in Appendix I can cause the device simulator  to display a simulation of a cellular telephone.  shows that the first device pack  includes a first extension , a second extension , and a third extension .  also shows that the second device pack  includes a first extension  and a second extension .","In a particular embodiment, the extensions included in each device pack ,  are specific to the simulated device associated with the device pack , . Also, the extensions represent certain features or characteristics of a physical device that correspond to a simulated device. For example, these features can include, but are not limited to, audio player features, e.g., MP3 file playing, video player features, image viewer features, video camera features, still camera features, and audio recorder features. In a particular embodiment, if the device pack ,  includes any behavior extensions that conflict with the generic extensions, the device pack extensions will override the generic extension behavior. When either device pack ,  is loaded by a computer to the device simulator after being selected by a user, the extensions are available to any dynamic applications that are loaded to the device simulator for execution at the simulated device.","Additionally,  shows a plurality of dynamic BREW applications. Specifically,  shows a first dynamic BREW application , a second dynamic BREW application , a third dynamic BREW application , and a fourth dynamic BREW application . The dynamic applications , , ,  can include programs that are being developed for use on a physical portable computing device. For example, the dynamic applications can include games, business applications, ring tones, and other business or entertainment related applications. In a particular embodiment, the dynamic BREW applications , , ,  can have direct access to the BREW core , any shared applications, and any device pack extensions that are loaded to the device simulator. In a particular embodiment, during operation, the dynamic BREW applications , , ,  can be executed by the device simulator on a simulated device or environment. This can allow developers of the dynamic BREW applications , , ,  to execute the BREW applications , , ,  on a BREW platform during development, in order to test and debug the BREW applications , , ,  and to determine whether the operation of the dynamic BREW applications , , ,  is as intended by the developer.","In a particular embodiment, the device simulator includes a common location for loading all extensions and the loaded extensions are applicable across all device packs for a particular instance of the device simulator. Further, when a device pack is loaded in the device simulator, the extensions may be loaded as follows: First, the built-in extensions are loaded. The built-in extensions are implicit to the device simulator and cannot be changed by the user. Second, generic extensions that are available and applicable to the device packs are loaded. The generic extensions are explicit to the device simulator can be modified or provided by a user and uploaded to the device simulator. The generic extensions can override the previously loaded built-in extensions only if they implement the functionality for the same BREW interface or BREW class as the previously loaded extensions. Third, the device pack extensions that are specific to the device pack are loaded. The device pack extensions are also explicit to the device simulator and can be modified or provided by a user and uploaded to the device simulator. The device pack extensions can override the generic extension loaded second if they implement the functionality for the same BREW interface or BREW class as the generic extensions loaded second. The device pack extensions can also override the built-in extensions, loaded first, if they implement the functionality for the same BREW interface or BREW class as the extensions loaded first.","Accordingly, if a built-in extension for a display is loaded first and then, a generic extension for the display is loaded, the generic extension will override the built-in extension. Thereafter, if a device pack extension for a display is loaded, it will override the generic extension and the built-in extension. If the generic extension is for a keypad, it will not override the built-in extension for a display, but a device pack extension for a display will still override a built-in extension for a display. In the explanation above, a BREW interface is intended to mean a collection of functions offering a similar service and is uniquely identified by a 32-bit identifier. Further, a BREW class is intended to mean an implementation of functions in a BREW interface.","In a particular example, with reference to , the assumption is made that the first device pack extension  is an updated or modified implementation of the second generic extension  and the second generic extension , in turn, is an updated or modified implementation of the first built in extension. As such, when the first device pack  is loaded onto the device simulator , the functionality provided by the first device pack extension , the second device pack extension , the third device pack extension , the first generic extension , and the second built-in extension  are available to the BREW applications , , , . This is due to the fact that the first device pack extension  overrides the second generic extension , which, in turn, overrides the first built-in extension .","Referring to , a method of simulating devices is shown and commences at block . At block , a computer executes a device simulator, e.g., the device simulator described herein. At block , the device simulator detects a selection of a particular physical device to be simulated. In a particular embodiment, a user can use a drop down menu to select from a list of physical devices that can be simulated or the user can use a drop down menu to select a particular device pack associated with a particular physical device. Moving to block , the computing device loads a device pack associated with the selected device. Then, at block , the device simulator executes the device pack to create a simulated device at the device simulator.","Proceeding to block , the device simulator loads one or more device behavior extensions associated with the device pack. The extensions can be loaded as described herein. Thereafter, at block , the device simulator can apply the device behavior extension to the simulated device presented by the device simulator. The device behavior extensions can define or modify the appearance of the simulated device. Further, the device behavior extensions can define or modify the functionality or the behavior of the simulated device. Then, the method proceeds to decision step .","Continuing the description of the method, at decision step , the device simulator detects whether a data set is selected via the device simulator. If a data set is selected, the method continues to block  and the device simulator loads the data set. In a particular embodiment, the data set can be a joint photographic experts group (JPEG) file, a graphics interchange format (GIF) file, a tagged image file format (TIFF) file, a Adobe Photoshop (PSD) file, a portable networks graphics (PNG) file, a windows metafile (WMF) file, or other type of picture file that can be viewed at the simulated device. Also, the data set can be a moving picture experts group (MPEG) file, an audio video interleave (AVI) file, a Windows media video (WMV) file, an advanced streaming format (ASF) file, a Quicktime (MOV) file, a Real Media (RM) file, or other type of video file that can be viewed at the simulated device. The data set can be an MPEG audio layer three (MP3) file, a waveform audio format (WAV) file, a wma file, an OGG file, a Monkey's Audio digital file (APE) file, a VOX file, a Real Audio (RA) file, a synthetic music mobile application format (MMF) file, or musical instrument digital interface (MID) file, a phrase format (SPF) file, a Qualcomm PureVoice audio file (QCP) or other sound file that can be listened to via the simulated device. The audio files can also be used as ring tones for cellular telephone devices. Further, the data set can be a font file that includes one or more fonts available on the computer or one or more fonts that are specific to simulated devices. Moving to block , the data set is applied to the simulated device. From block , the method moves to decision step . Returning to decision step , if a data set is not selected via the device simulator, the method proceeds to decision step .","At decision step , the device simulator detects whether an application written for a simulated device has been selected via the device simulator. If so, the application is loaded onto the device simulator at block . At block , the application is executed at the device simulator, e.g., at the simulated device. Particularly, the application can be executed at a simulated device environment that is provided by the device simulator and that corresponds to the operating environment of a particular physical device. Moving to decision step , the computer or the user determines whether the application has any problems or \u201cbugs.\u201d If not the method then moves to decision step  of . If there are bugs, the logic moves to block  and the application is modified, i.e., debugged. Next, at block , the debugged application is loaded to the device simulator. The logic then returns to block  and continues as described herein. Returning to decision step , if an application is not selected via the device simulator the method also moves to decision step  of .","Referring to , at block , the device simulator detects whether a new device is selected to be simulated at the device simulator. If a new device is selected, the device simulator executes a device pack associated with the newly selected device in order to create a new simulated device, at block . At block , a device behavior extension associated with the newly selected device is loaded at the device simulator. Thereafter, at block , the device simulator applies the new device behavior extension to the simulated device. The method then moves to decision step .","At decision step , the device simulator detects whether a new data set has been selected via the device simulator. If a new data set has been selected, the new data set is loaded to the device simulator, at block . Particularly, the new data set is loaded to the new simulated device at the device simulator and can be applied to, or processed by, the new simulated device, at block . Thereafter, the method proceeds to decision step . Returning to decision step , if a new data set is not selected, the logic moves to decision step  and the device simulator determines whether to apply the previously selected data to the new simulated device. In a particular embodiment, this determination can be made by presenting a question to a user. If the device simulator determines to apply the previously selected data to the new simulated device, the method proceeds to block  and the device simulator applies the previously selected data to the simulated device. The logic then proceeds to decision step .","At decision step , the device simulator determines whether a new application developed for the new simulated device is selected. If so, the new application is loaded onto the device simulator, at block . Particularly, the new application is loaded onto the simulated device at the device simulator. Next, at block , the new application is executed at the device simulator as described herein. Thereafter, the logic proceeds to decision step .","Returning to decision step , if a new application is not selected, the method continues to decision step  and the device simulator determines whether to execute the previously selected application at the simulated device. If so, the device simulator executes the previously selected and previously loaded device application at the simulated device. On the other hand, if the previously selected application is not to be executed, the logic continues to decision step  and the device simulator detects whether a user has decided to close the device simulator. If the user has decided to close the device simulator, the device simulator closes at block  and the method ends at step . If the device simulator is not closed at decision step , the logic returns to decision step  and continues as described above. In an illustrative embodiment, the method steps described herein are performed in the sequence shown. However, in one or more alternative embodiments, one or more of the method steps may be performed in a different sequence.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 7","FIG. 7"],"b":["700","700","702","704","702","706","704","708","706","708","702","704"]},"A user can select a particular physical device via a drop down menu. The device simulator will generate a simulation of the physical device and present the simulation to the user as shown. The simulated devices ,  will appear, behave, and function according to one or more behavior extensions loaded onto the device simulator , . Accordingly, if a camera behavior extension is loaded onto either of the simulated devices ,  may operate as a camera phone. Further, if an audio player extension is loaded onto either of the simulated devices ,  may operate as an MP3 player.","A user can select files, e.g., audio files, to load onto the simulated devices , . This can allow a user to test the operation of the simulated devices , . Further, a user can select one or more applications to be executed at the simulated devices , . Thus, a user can determine if one or more applications can be supported by particular physical devices. Further, a user can determine if one or more applications can function as intended by the user. In a particular embodiment, a particular application, or file, may utilize a first set of behavior extensions at the first simulated device  and a second set of behavior extensions at the second simulated device . As such, a particular program may exhibit a first behavior at a first simulated device  and a second behavior at a second simulated device .","In the example shown in , MID, MMF, and SPF files are enabled for the first simulated device . However, QCP and MP3 file formats are not included in the device pack for the first simulated device . As such, a Media Player list for the first simulated device  only lists mid, .mmf, and .spf files. On the other hand, the device pack associated with the second simulated device  does not contain the MID multimedia extension.","With the configuration of structure described above, the device simulator provides a very flexible tool that can be used during the development of applications for various portable computing devices. The device simulator allows device packs to dynamically provide functionality for the simulated devices provided by the device packs. Further, the functionality of the device simulator can be extended as new devices are developed by developing new device packs for the new devices. Also, the device simulator is modular and enables a simulation environment that provides operations that are very close to those of physical devices.","Those of skill would further appreciate that the various illustrative logical blocks, configurations, modules, circuits, and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware, computer software, or combinations of both. To clearly illustrate this interchangeability of hardware and software, various illustrative components, blocks, configurations, modules, circuits, and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.","The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware, in a software module executed by a processor, or in a combination of the two. A software module may reside in RAM memory, flash memory, ROM memory, PROM memory, EPROM memory, EEPROM memory, registers, hard disk, a removable disk, a CD-ROM, or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from, and write information to, the storage medium. In the alternative, the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a computing device or a user terminal. In the alternative, the processor and the storage medium may reside as discrete components in a computing device or user terminal.","The previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the invention. Thus, the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features as defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and the attendant advantages of the embodiments described herein will become more readily apparent by reference to the following detailed description when taken in conjunction with the accompanying drawings wherein:",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
