---
title: Computer system and processing method for driving program of smart peripheral device
abstract: A processing method and a computer system for the driving program of a smart peripheral device. The processing method requests that the computer's operating system return any information regarding any smart peripheral device connected to a peripheral bus through a driving program written according to this invention. If the particular smart peripheral device is supported by the operating system, a plug-and-play notification is used to open a function device object established through a factory-provided driving program. The function device object is used to retrieve a physical device object established through a bus-driving program. Using the physical device object, descriptors and calling data of the smart peripheral device are retrieved and employed to set up necessary information for executing the driving program of this invention.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06915368&OS=06915368&RS=06915368
owner: 
number: 06915368
owner_city: Hsinchu
owner_country: TW
publication_date: 20011127
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims the priority benefit of Taiwan application serial no. 90124028, filed Sep. 28, 2001.","1. Field of Invention","The present invention relates to the driving program of a peripheral device. More particularly, the present invention relates to the computer system and processing method for the driving program of a smart peripheral device.","2. Description of Related Art","At present, more and more smart peripheral devices such as personal digital assistants (PDA) and smart phones have the capacity to hook up with a personal computer via a peripheral bus such as universal serial bus (USB) and IEEE-1394 bus. Both the USB and the IEEE-1394 have plug-and-play (PnP) features. The operating system of a personal computer may retrieve factory-supplied driving program to drive the peripheral devices once they are plugged to one of the two major types of buses. Using the factory-supplied synchronous programs (for example, palm desktop, active-sync and so on), the personal computer may synchronize with the peripheral device to perform data uploading or transmission.","Because former peripheral devices were mostly single purpose devices, that is, devices purely for data transmission and reception, the application programming interface (API) provided by most factory-supplied driving programs performs simple interface functions. However, with the rapid development of smart peripheral devices, many of the devices are programmable and are receptive to various types of programs. Hence, in some applications, application programs within the personal computer and programs within the peripheral device need to transmit data to each other through the peripheral bus. For example, a touch panel on the peripheral device may serve as a writing board for the personal computer, images on the digital imaging device of a peripheral device may be transmitted to the personal computer for further processing or the PDA may record sound. Yet, all these applications are outside the scope of the original factory-supplied synchronizing programs.","Conventionally, communication with the various programs of a smart peripheral device relies on the application program interface provided by the original driving program provider. Through the factory-provided driving programs, the application programs of a personal computer may transmit data to the smart peripheral device and vice versa via the peripheral bus.","Furthermore, the originating factory provides only minimal API functions rather than general-purpose API functions. If different smart peripheral devices are plugged into the peripheral bus, the application program needs to adjust the calling method according to the API within the driving program supplied by the originating factory and hence generates much inconvenience.","Another method of dealing with smart peripheral device is to switch the peripheral bus into a diagnostic mode. In other words, an API is provided such that the application program at the personal computer end is able to communicate with the smart peripheral device. Under the diagnostic mode, the peripheral bus cannot coexist with the factory-supplied driving programs in the same operating system. Hence, if different smart peripheral devices are used, the peripheral must switch to an appropriate diagnostic mode. Furthermore, only original factory-supplied driving programs are found when a new peripheral device is plugged into the peripheral bus. Because diagnostic mode cannot be switched in a dynamic state, switching must be initiated by a re-plugging of the smart peripheral device. Consequently, if peripheral devices have already been plugged into the peripheral bus and some factory-supplied driving programs has already been downloaded, the smart peripheral device must be re-plugged to switch into the diagnostic mode.","In brief, major drawbacks into conventional techniques include:\n\n","Accordingly, one object of the present invention is to provide a computer system and a processing method for dealing with the driving programs of a smart peripheral device. The driving program according to this invention does not depend on the application programming interface (API) within the factory-provide driving programs. Hence, problems resulting from a reliance on the API of factory-supplied driving programs and problems resulting from incompatible API due to the presence of a variety of driving programs each developed by a different manufacturer are avoided. Furthermore, the driving programs according to this invention can coexist with factory-supplied driving program in the same operating system. Therefore, there is no need to switch API when a different application program is used, download driving programs or re-plug the smart peripheral device.","To achieve these and other advantages and in accordance with the purpose of the invention, as embodied and broadly described herein, the invention provides a method of processing the driving program of a smart peripheral device. The method is suitable for processing the operating system of a computer system. The smart peripheral device may connect with the computer system via a peripheral bus and the operating system includes a bus-driving program for controlling the peripheral bus. The processing method includes the following steps. First, the driving programs of the smart peripheral device according to this invention request the operating system to report on any peripheral device having linkage with the peripheral bus. According to the plug-and-play notifications received from the operating system, the driving program of the smart peripheral device are inspected to see if they support any peripheral bus linked peripheral device. If the driving program of the smart peripheral device supports the linked peripheral device, the plug-and-play notifications are used to trigger the function device object established through the factory-provided driving programs. According to the function device object, the physical device object established through the bus driving programs is retrieved. Thereafter, descriptor and calling information of the connected peripheral device are retrieved according to the physical device object. Through the descriptor and calling information, various types of information required for executing the driving programs of a smart peripheral device is established.","This invention also provides a computer system capable of connecting with a smart peripheral device. The computer system includes a peripheral bus, an operating system, a factory-provided driving program and a general-purpose driving program. The smart peripheral device is coupled to the computer system via the peripheral bus. The operating system includes a bus-driving program for controlling the peripheral bus. The bus-driving program is utilized to establish a physical device object corresponding to the smart peripheral device. The factory-provided driving program is utilized to establish a function device object. The function device object communicates with the smart peripheral device through the physical device object. The general-purpose driving program communicates with the smart peripheral device also through the physical device object. As soon as the smart peripheral device is connected to the computer system, the general-purpose driving program triggers the function device object established through the factor-provided driving program. The physical device object established through the bus-driving program is retrieved according to the function device object. Thereafter, descriptor and calling information of the smart peripheral device are retrieved according to the physical device object. Using the descriptor and calling information, various types of information necessary for executing the general-purpose driving program are established.","In brief, the driving program according to this invention does not depend on the API of factory-provided driving programs. Hence, the need to receive APIs from factory-provided driving programs is eliminated and the problem of having incompatible APIs due to each smart peripheral device manufacturer manufacturing its own driving program is solved. Furthermore, the driving program according to this invention may coexist with the factory-provided driving program in the same operating system. Hence, there is no need to switch APIs, download driving programs or re-plug when a different application program is used.","It is to be understood that both the foregoing general description and the following detailed description are exemplary, and are intended to provide further explanation of the invention as claimed.","Reference will now be made in detail to the present preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings. Wherever possible, the same reference numbers are used in the drawings and the description to refer to the same or like parts.",{"@attributes":{"id":"p-0022","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":["100","104","106","108","110","102","100","104","104","106","114","104","114","102","108","102","110","102","102","100","110","110","114","102","110"]},"In addition, the computer system  further includes an application program . When the application program  issues a processing request call to the general-purpose driving program , the general-purpose driving program  produces a request block and an input\/output request packet (IRP). The input\/output request packet is transmitted to the physical device object for further processing. The request block, for example, is a USB request block (URB) or an IEEE-1394 request block (IRB). Similarly, the input\/output request packet can also be a URB or an IRB. After the input\/output request packet is processed, the physical device object returns correct data to the application program . On the other hand, if there is a delay in the processing of the input\/output request package, the physical device object responds by returning a delay signal to the application program .",{"@attributes":{"id":"p-0024","num":"0026"},"figref":"FIG. 2","b":["1","110","106","104"],"sub":"\u2014"},"When the peripheral bus  already has a smart peripheral device  plugged into the peripheral bus  or a new smart peripheral device  is plugged into the peripheral bus , the operating system  utilizes the plug-and-play notification to inform the general-purpose driving program (in step ).","According to the special identification code provided by the plug-and-play notification, the smart peripheral device  is checked to see if the smart peripheral device  meets the operating characteristics of the types of peripheral devices processed by the general-purpose driving program  (in step ). If the peripheral bus  is a USB bus, the special code is the vender identification (VID) and the product identification (PID). On the other hand, if the peripheral bus is the IEEE-1394 bus, the special code is the plug-and-play identification (PnPID).","If the general-purpose driving program  supports the smart peripheral device , device name and other data from plug-and-play notification corresponding to the smart peripheral device  are used to retrieve the device object. The device object has a stacked structure. Thereafter, the factory-provided driving program established function device object is opened (in step ).","According to the function device object, a special input\/output request packet (IRP) is prepared and the function device object is called. When the lower layer of the device object processes the special input\/output request packet, it will report its pointer in the special input\/output request packet. A block of memory is set aside for holding data indicated by the pointer. On returning from the function device object, physical device object is retrieved according to the pointer within the special input\/output request packet and then the memory block is release (in step ). Note that since the device object has a stacked structure, the function device object is formed over and above the physical device object of the bus-driving program . The special input\/output request packet is processed such that the input\/output request packet is downwardly delivered, layer by layer, so that the driving program of each layer may be reported. The special input\/output request packet is sent to the function device object in this manner. Because the special input\/output request packet not processed by the function device object is delivered to the next lower layer, pointers of the physical device object in the next lower layer can be retrieved.","Descriptor and calling data of the smart peripheral device  are retrieved according to the physical device object (in step ). According to the descriptor and the calling data, various data necessary for executing the general-purpose driving program  of the smart peripheral device  are established (in step ). In this embodiment, if the peripheral bus is the USB bus, the descriptor and calling data include device descriptor, configuration descriptor, interface descriptor, end-point descriptor and USB pipe. On the other hand, if the peripheral bus is the IEEE-1394 bus, the descriptor and calling data include configuration ROM. For example, from the descriptor and calling data, transmission characteristics such as control, interrupt, bulk or isochronous of the end point, size of the largest transmission packet at the end point or USB pipe handle of the end point may all be obtained.","If the received plug-and-play notification indicates the absence of the particular smart peripheral device , the application program  for calling the general-purpose driving program  is informed of the non-existence of the smart peripheral device . Afterwards, all requests for processing the non-existent smart peripheral device are canceled. Finally, the operating system  is returned to its initial state.","In addition, when the smart peripheral device  is automatically shut to preserve energy or the smart peripheral device  is removed from the peripheral bus , the operating system  informs the general-purpose driving program  through the plug-and-play notification. After the general-purpose driving program  has confirmed the removal of the smart peripheral device , the application program  is informed and the in-process requests for transmission or reception are canceled. Again, the operating system  is returned to its initial state.",{"@attributes":{"id":"p-0032","num":"0034"},"figref":"FIG. 3","b":["1","112","110","102","300","102","112","102","102","302","102","112","102","304","306","308","112","310","112","312"]},"In conclusion, major advantages of this invention include:\n\n","It will be apparent to those skilled in the art that various modifications and variations can be made to the structure of the present invention without departing from the scope or spirit of the invention. In view of the foregoing, it is intended that the present invention cover modifications and variations of this invention provided they fall within the scope of the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings are included to provide a further understanding of the invention, and are incorporated in and constitute a part of this specification. The drawings illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention. In the drawings,",{"@attributes":{"id":"p-0018","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0022"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
