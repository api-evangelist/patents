---
title: Process flow designing based on connection compatibility between process components
abstract: In one embodiment, a selection of a process component associated with a process flow is received. Further, a check is made to determine whether a graphical editor includes process components associated with the process flow. If the graphical editor does not include process components, the selected process component is placed on the graphical editor. If the graphical editor includes the process components, then compatibility of the selected process component with at least one of the one or more process components is determined by identifying cardinality and type of the process component. Further, the selected process component is connected to the process flow on the graphical editor based on the determined compatibility.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09383889&OS=09383889&RS=09383889
owner: Business Objects Software Limited
number: 09383889
owner_city: Dublin
owner_country: IE
publication_date: 20111220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments generally relate to process flow designing and more particularly to methods and systems to design a process flow based on connection compatibility between process components.","Enterprises often use different business applications built over time for analyzing business data. Such business applications may use data mining techniques including execution of a sequence of steps. The sequence of steps is referred to as a process flow associated with the business application. The sequence of steps may include reading data from multiple sources, followed by data preparation step including activities like applying filters or merging data from two different sources. Further, the sequence of steps may include an algorithm step followed by the data preparation step to process the prepared data. Furthermore, a user can visualize and analyze the output data by executing the process flow.","Typically, these steps in the process flow are performed using process components. For example, data source components retrieves the data from data sources, data preparation components performs merging activities, algorithm components process the data, data writer components store the processed data, and the like. Therefore, the process flow includes a chain of process components. This is sometimes called a pipe and filter architecture where the components are filters and the connections between are pipes. Further, each process component may include a standard cardinality, that is, a standard number of input and output ports. For example, a data source component may not include an input port as the data source component is a data reader. Also, a data preparation component may need at least two data source components as the input.","Hence, during designing of the process flow or in other words during construction of the process components chain, a user needs to connect the process components in a proper sequence. Currently, process components are connected manually by the user connecting the process component. Therefore, manually connecting the process components may be prone to errors, time consuming and also the user has to understand the cardinality of the process components. Therefore, a method to connect the process components by automatically detecting the connection compatibility between the process components would be desirable.","Various embodiments of systems and methods to design a process flow based on connection compatibility between process components are described herein. In one aspect, a selection of a process component associated with a process flow is received. Further, a check is made to determine whether a graphical editor includes process components associated with the process flow. If the graphical editor does not include process components, the selected process component is placed on the graphical editor. In another aspect, if the graphical editor includes the process components, then compatibility of the selected process component with at least one of the one or more process components is determined by identifying cardinality and type of the process component. Further, the selected process component is connected to the process flow on the graphical editor based on the determined compatibility.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques to design a process flow based on connection compatibility between process components are described herein. The process flow includes a set of process steps and an order of performing the process steps to produce a desired result. The process steps are performed using process components. Thereby, the process flow includes a chain of process components. In other words, the chain of process components defines the process components involved for predictive analysis and the data flow in the process components. In one embodiment, the chain of process components is designed on a graphical editor. The graphical editor may include a canvas on a computer generated user interface, where a user designs the process flow. The computer may be desktop computers, work stations, laptop computers, hand held computers, smart phone, console devices or the like. The user refers to an agent, a human or a process flow designer capable of providing input to the computer system for designing the process flow.","According to one embodiment, the connection compatibility between the process components is determined. When a user selects a process component to connect to the process flow, the mutual connection compatibility of the process component and the existing process components on the graphical editor is determined. The compatibility is determined by cardinality and type of the process components. Further, the process component is connected to the process flow depending on the determined compatibility. Since the cardinality is determined automatically without user intervention, designing of the process flow becomes faster and easier. Further, the user need not have knowledge of cardinality of the process components.","In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","110"]},"At step , a check is made to determine whether a graphical editor includes one or more process components associated with the process flow. In one embodiment, if the graphical editor does not include the process components, the selected process component is placed on the graphical editor. For example, the process component is placed at the center of the graphical editor. Placing the process component on the graphical editor is described with an example in .","At step , if the graphical editor includes the one or more process components, compatibility of the selected process component with at least one of the one or more process components in the graphical editor is determined. The at least one of the process components may include a preferred process component. The at least one of the process components is considered as the preferred process component depending on the type of selection used to select the process component. For example, if the process component is selected by dragging and dropping, the at least one of the process components on the graphical editor is considered as the preferred process component based on the distance between the dragged process component and the at least one of the process component on the graphical editor. In other words, the process component on the graphical editor is considered as the preferred process component if the dragged process component is dragged near to the process component on the graphical editor or within a vicinity of the process component on the graphical editor (described with an example in ).","Further, if the process component is selected by highlighting the process component to insert onto the graphical editor (e.g., using inserting mechanism such as \u2018enter\u2019, \u2018click\u2019, and the like), a check is made to determine if the graphical editor includes the preferred process component. In one exemplary embodiment, an option is provided to a user to select a process component in the graphical editor as preferred process component. If the graphical editor does not include the preferred process component, a previous process component connected to the process flow is considered as the preferred process component (explained with an example in ).","In one embodiment, the compatibility between the selected process component and the preferred process component is determined by identifying cardinality and type of the selected process component. The cardinality defines number of input ports and number of output ports of the process component. The input ports indicate the minimum and maximum number of possible input connections to the process component. Output ports indicate the minimum and maximum possible output connections from the process component. The cardinality and type of the process components is depicted in Table 1.",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Process","Type of Process","No. of","No. of"]},{"entry":["Component","Component","Input Ports","Output Ports"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CSV Reader","Data Source Component","Min: 0; Max: 0","Min: 1; Max: n"]},{"entry":["Merge ","Data Preparation","Min: 2; Max: 2","Min: 1; Max: n"]},{"entry":["Component","Component",{},{}]},{"entry":["K-Means","Algorithm Component","Min: 1; Max: 1","Min: 1; Max: n"]},{"entry":["Component",{},{},{}]},{"entry":["JDBC Writer","Writer Component","Min: 1; Max: n","Min: 0; Max: 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"For example, the data source component (e.g., CSV reader) may be the starting process component of the process flow as the CSV reader does not have an input port to take input from other process components. Similarly, writer components (e.g., Java Database Connectivity (JDBC writer) may be at the end of the process flow as the JDBC writer does not have an output port to connect to the other process components. Further, the data preparation component (e.g., merge component) expects two input connections to form a valid process flow. In other words, the process flow may be considered as a tree with multiple nodes. The nodes may include a plurality of parent nodes, child nodes and leaf nodes, where the parent node is the first process component in the process flow. In this scenario, the data source component may be the parent node, the data preparation component may be the child node and the writer component may be the leaf node (e.g., the last process component in the process flow).","At step , the selected process component is connected to the process flow on the graphical editor based on the determined compatibility. For example, considering preferred process component as the CSV Reader and the selected process component as Merger Component, the Merge Component gets connected to the CSV Reader as CSV Reader has \u2018n\u2019 output ports and Merge Component has two input ports. In another example, if the JDBC Writer is the preferred process component and K-Means Component is the selected process component, the K-Means Component does not get connected to the JDBC Writer as the JDBC Writer does not have output port. Instead, the K-Means Component is placed on the graphical editor without getting connected to the existing process chain. The method of designing process flow is described with an example in .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2","b":["200","210"]},"At step , a check is made to determine whether a graphical editor includes one or more process components. If the graphical editor does not include process components, the selected process component is placed on the graphical editor as in step  (described with an example in ).","At step , a check is made to determine whether the graphical editor includes a preferred process component. In one exemplary embodiment, a user can select a process component on the graphical editor as the preferred process component. For example, considering a CSV reader component and a K-Means component are present in the graphical editor, the user may select one of the CSV reader component or the K-Means component as the preferred process component.","At step , if the graphical editor includes the preferred process component, compatibility of the selected process component with the preferred process component is determined. For example, if the K-Means component on the graphical editor is the preferred process component and a JDBC writer component is the selected process component, the compatibility between the K-Means component and the JDBC writer component is determined. The compatibility is determined by identifying the cardinality and the type of the JDBC writer component and the K-Means component. The JDBC writer component is a data writer component including multiple input ports and no output port. Further, K-Means component may include multiple output ports. Therefore, the connection of the K-Means component and the JDBC component may be connected.","At step , if the graphical editor does not include the preferred process component, compatibility of the selected process component with a previous process component is determined. In other words, if the user does not select the preferred process component, the previous process component is considered as the preferred process component. For example, consider the K-Means component as the selected process component. The CSV reader component, the table reader component and the Merge component are present on the graphical editor, the Merge component is considered as the preferred process component as the Merge component is connected lastly to the process flow on the graphical editor. Further, the compatibility between the Merge component and the K-Means component is determined. The compatibility is determined by identifying the cardinality and the type of the Merge component. The Merge component, being the data preparation component, includes two input ports and multiple output ports. Further, K-Means component, being the algorithm component, may include single input port and multiple output ports. Therefore, the Merge component and the K-Means component are compatible.","In another example, consider the CSV reader component on the graphical editor as the preferred process component and the JDBC reader component as the selected process component. The compatibility of the CSV reader component and the JDBC reader component is determined. Since both the JDBC reader and the CSV reader are data source components having no input ports, the CSV reader component may not be compatible with the table reader component.","At step , the selected process component is connected to the process flow in the graphical editor based on the determined compatibility. For example, the JDBC writer component gets connected to the K-Means component as per one example in step . The K-Means component gets connected to the Merge component as per one example in step . The table reader component does not get connected to the CSV reader component, instead the JDBC reader component is placed on the graphical editor creating a new parent node of the process flow (described with an example in ). In general, the process components get connected to the process flow on double clicking the process components and therefore the process components associated with the process flow can be connected without having knowledge about the cardinality of the process components.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["300","310"]},"At step , a check is made to determine whether the graphical editor includes one or more process components. At step , the selected process component is placed on the graphical editor at the dropped position on the graphical editor, if the graphical editor does not include process components.","At step , if the graphical editor includes the process components, compatibility of the process component with at least one of the one or more process components is determined. The at least one of the process component is the preferred process component. The process component on the graphical editor is considered as the preferred process component based on the distance between the dragged process component and the process components on the graphical editor. In other words, if the process component is dragged closer or within a predetermined vicinity of the process component on the graphical editor, the process component on the graphical editor is considered as the preferred process component. In one exemplary embodiment, if there are multiple process components on the graphical editor having equal distance with the dragged process component, then the compatibility is determined with the most compatible process component depending on the type and the cardinality of the process components.","At step , the selected process component is connected to the process flow in the graphical editor based on the determined compatibility. Therefore, the user can design the process flow by dragging and dropping the process components on the graphical editor without having knowledge of cardinality of the process components. The designing of the process flow by selecting the process component via dragging and dropping the process component is described with an example in .","In one exemplary embodiment, if the user drags and drops a process component between the connected two process components on the graphical editor, the compatibility between the two process components with the dropped process component is determined. If the process components are compatible with one another, the dropped process component gets connected with the two process components on the graphical editor. On other hand, if the process components are not compatible with one another, then the dropped process component is retracted from the process flow and a transient message will be displayed to the user showing the reason of retraction (described with an example in ).","In another exemplary embodiment, if the process component is already connected to another process component in the graphical editor, the user can force connection by dragging a new process component closer to the process component on the graphical editor (e.g., may be 30 pixels closer). On forcing, the connection of the process components in the graphical editor can be deleted and the new process component will get connected to the process component in the graphical editor depending on the compatibility between the new process component and the process component on the graphical editor. If the new process component and the process component on the graphical editor are not compatible, the new process component may be repelled from the process component on the graphical editor.","In yet another exemplary embodiment, during the drag operation, if the process component is dragged nearer to any compatible process component in the graphical editor, a dummy connection appears from the process component indicating a connection proposal with the process component on the graphical editor at which the process component is dragged. In one embodiment, the cardinality and type of the process component is evaluated before showing the proposal. Further, if the user is satisfied with the proposed connection, the user can drop the process component. On dropping, the new connection will be placed in the graphical editor and the connection proposals will be changed to actual connections between the process components.","In another exemplary embodiment, the user can snap connection of the process components in the graphical editor. The connection line between the process components on the graphical editor is dragged out at certain speed to snap the connection between the process components. Further, the user may be notified of the connection snap using a bubble message stating that the connection with a specific process component has been snapped.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 4A to 4E","FIGS. 4A to 4E"],"b":["400","405","410","405","410","415","400","420","425"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 4A","b":["400","415","430","415","410","415","435"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4B","b":["400","440","415","415","435"]},"At the next step, a preferred process component on the canvas  is identified. In one embodiment, the process component on the canvas is considered as the preferred process component based on the distance between the dragged process component and the process components on the canvas . In this example, when the JDBC reader is dragged towards the CSV reader, the CSV reader is considered as the preferred process component. Therefore, the compatibility between the JDBC reader and the CSV reader is determined. In other words, when the JDBC reader is dragged within a vicinity of the CSV reader, the cardinality of the JDBC reader is displayed. For example, an arrow  is displayed showing that the JDBC reader may have output port. Further, there is no representation of the input port of the JDBC reader as the JDBC reader does not include any input port. Furthermore, both the CSV reader and the JDBC reader are of same type of the process component (e.g., data source components) and the JDBC reader does not include input ports, the CSV reader and the JDBC reader may not be connected. In this scenario, the JDBC reader is placed on the canvas  at the dropped position as shown in  forming another parent node in the process flow.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4C","b":["400","455","415","415","435","450"]},"At next step, a preferred process component on the canvas  is identified. In one embodiment, the process component on the canvas is considered as the preferred process component based on the distance between the dragged process component and the process components on the canvas . In this example, when the data merger is dragged towards the CSV reader, the compatibility between the data merger and the CSV reader is determined. If the data merger reader is dragged towards the JDBC reader, the compatibility between the data merger and the CSV reader is determined. On other hand, if the data merger is dragged at a position having equal distance to the two data source components (e.g., the CSV reader  and the JDBC reader ), the compatibility of the data merger with the best compatible process component is determined.","In this example, the data merger is dragged at the position having equal distance with the two data source components (e.g., the CSV reader  and the JDBC reader ). Since both the CSV reader and the JDBC reader are of same type and having same cardinality, the cardinality of the data merger is displayed by determining the compatibility of the data merger with the two data source components (e.g., the CSV reader  and the JDBC reader ). The cardinality of the data merger can include two input ports as shown in A and multiple output ports as shown in B. Further, the data merger gets connected to the CSV reader  and the JDBC reader  upon dropping the data merger at the distance equal to the both the CSV reader  and the JDBC reader .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4D","b":["400","470","415","415","435","450","465"]},"At the next step, a preferred process component on the canvas  is identified. In this example, the data merger reader is selected as the preferred process component by a user as shown in . Therefore, the compatibility between the data merger and the JDBC writer is determined. In one embodiment, the compatibility is determined by the cardinality and the type of the process component. The JDBC writer is the data writer component having an input port and no output ports. The data merger  can have multiple output ports. Therefore, the input of the JDBC writer is connected to the output of the data merger  and hence the JDBC writer  is connected to the process flow. In one exemplary embodiment, if the user does not select the process components on the canvas as the preferred process component, a previous process component connected to the process flow is considered as the preferred process component. In this example, the data merger  is considered as the preferred process component.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4E","b":["400","490","415","415","435","450","465","480"]},"At the next step, a preferred process component on the canvas  is identified. In one embodiment, the process component on the canvas is considered as the preferred process component based on the distance between the dragged process component and the process components on the canvas . In this example, the R-K-Means is dragged in-between the data merger  and the JDBC writer . Therefore, the compatibility of the R-K-Means with the data merger  and the JDBC writer  is determined. In one embodiment, the compatibility is determined by the type and the cardinality of the process component. R-K-Means can include an input port and can have multiple output ports. Further, the data merger can have multiple output ports and the JDBC writer can have an input port. Therefore, the R-K-Means gets connected to the process flow. In other words, the input of the R-K-Means  gets connected to the output of the data merger  and the output of the R-K-Means  gets connected to the input of the JDBC writer .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 5","FIG. 4E","FIGS. 4A to 4E"],"b":["500","500","505","510","505","510","515","500","520","525"]},"In operation, when the analyzer  is selected, the process flow on the canvas  is analyzed. In one exemplary embodiment, the execution status of the process components is displayed. For example, a tick  in the process component indicates that the process component is successfully executed. A cross  in the process component indicates that the process component is not successfully executed. Thereby, the execution status of the process flow can be easily tracked. The graphical representation of the process components on the graphical editor is described in greater detail in .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 6","b":["600","605","600","605","610","600"]},"In one embodiment, the cardinality of the process component is displayed. For example, the number of input ports is displayed by a connection line having oval end  and the number of output ports is displayed by a connection line having an arrow at the end . In one exemplary embodiment, the connection lines may be grayed out until a connection is established. Once the connection is established, the connection lines become darker. Further, the connection lines can rotate around 90 degrees up and 180 degrees down the axis depending on the location of the connected process component.","In one embodiment, upon right clicking the process component , a context menu is displayed. The context menu includes a shortcut to delete the process component  as shown in . A list of compatible process components associated with the process component  is displayed as shown in . In one exemplary embodiment, on selection of a process component from the list, the process component gets connected to the process flow. This is to enable creation of process flow without going to a process component panel. For example, the user needs to drag and drop, or double click the first process component of the process flow and then onwards, the user can use the right click to find out the compatible process components and construct the process flow on the graphical editor. Further, the context menu may include an option to execute the process flow as shown in  and an option to view the result of the process flow as shown in . In addition, the context menu can include shortcuts to context specific actions that the user can perform on the process component  to complete the design of the process flow.","In one exemplary embodiment, once a connection is made to a process component, a new connection arrow may appear at the middle of the process component to visually indicate that the user can pull the arrow for more connections. When highly compatible process components are placed closer, the connection arrows automatically turn towards the components to visually indicate that the component placed closer could be a best compatible process component. In case, if there are multiple compatible components which are in the same vicinity, the length of the arrow determines the highly compatible process components among the other process components. The highly compatible process component may have a longer arrow suggesting to the user that the process component is highly compatible. In case there are multiple compatible process components which are in the same vicinity, and user drags and drops a new process component which is equally compatible with both the existing components, multiple connection suggestions may be displayed to the user. The user may have to drag the new process component for the connection to be established.","In general, the method as described above inherits magnetic properties as compatible process components attract and non-compatible process components repel to design the process flow. It is advantageous that even though the method of determining compatibility is described with an example of designing the process flow on the graphical editor, the method can be implemented with other graphical visualization tools. Further, the above described method may provide infrastructural supports, like modeling canvas where the user can drag and drop the process components, property panel supports where the user can set values to various properties to the process components, linking support where the user can link the process components to create a process component chain, execution support where the user can execute the process component chain and visualization support where the user can visualize the results of the process component chain execution.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 7","b":["700","700","705","755","700","740","755","710","715","710","715","705","715","700","725","730","700","725","730","700","735","700","750","750","700","745","700","720","760","760","760","750","760"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 4A to 4E"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 4E"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
