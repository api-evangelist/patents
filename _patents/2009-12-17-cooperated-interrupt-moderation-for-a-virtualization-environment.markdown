---
title: Cooperated interrupt moderation for a virtualization environment
abstract: Generally, this disclosure describes systems (and methods) for moderating interrupts in a virtualization environment. An overflow interrupt interval is defined. The overflow interrupt interval is used for triggering activation of an inactive guest so that the guest may respond to a critical event. The guest, including a network application, may be active for a first time interval and inactive for a second time interval. A latency interrupt interval may be defined. The latency interrupt interval is configured for interrupt moderation when the network application associated with a packet flow is active, i.e., when the guest including the network application is active on a processor. Of course, many alternatives, variations, and modifications are possible without departing from this embodiment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176770&OS=09176770&RS=09176770
owner: Intel Corporation
number: 09176770
owner_city: Santa Clara
owner_country: US
publication_date: 20091217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a U.S. national phase application under 37 C.F.R. \u00a7371 of International Application No. PCT\/CN2009\/001480 filed 17 Dec. 17, 2009, the entire content of which is incorporated herein by reference.","The disclosure relates to interrupt moderation in a virtualization environment.","In a virtualization environment, a processor and\/or a device and\/or interface may be shared by a plurality of guests. A single physical processor may be configured as a plurality of virtual CPUs. Each virtual CPU may be configured to share the physical processor resources with other virtual CPU(s). A guest may include a virtual CPU and a guest process configured to execute on the virtual CPU. Similarly, a single physical device and\/or interface may be configured as a plurality of virtual devices and\/or interfaces, with each virtual device and\/or interface configured to share the resources of the device and\/or interface with other virtual device(s) and\/or interface(s).","One technique for sharing resources includes sharing processor resources in \u201ctime slices\u201d. In other words, for a plurality of guests, a subset of the plurality may be active at any point in time. As used herein, \u201cactive\u201d means executing on at least a portion of a processor. A virtual machine monitor (\u201cVMM\u201d) may be configured to manage scheduling guest access to the processor. The VMM may schedule a guest in (\u201cactive\u201d) or schedule a guest out (\u201cinactive\u201d) based on time, e.g., at particular time intervals. The VMM may also be configured to schedule a guest in or out in response to an \u201cevent\u201d, e.g., an interrupt from the device.","Interrupt frequency may depend on the type of device and\/or interface and\/or the number of virtual devices and\/or interfaces active on the device and\/or interface. For example, a network adapter may be configured to interrupt a host to indicate that packets have been received. Depending on the speed of the adapter and\/or the number of active virtual devices and\/or interfaces and network traffic, i.e., frequency at which packets are received, a network adapter may interrupt relatively frequently.","Although the following Detailed Description will proceed with reference being made to illustrative embodiments, many alternatives, modifications, and variations thereof will be apparent to those skilled in the art.","Generally, this disclosure describes systems (and methods) of moderating interrupts in a virtualization environment. An overflow interval is defined. The overflow interrupt interval is used to trigger activation of an inactive guest so that the guest may respond to a critical event. For example, the overflow interrupt interval may be used to prevent receive buffer overflow, when a guest is or has\/been inactive on a processor. The guest, including a network application, may be active for a first time interval and inactive for a second time interval. A latency interrupt interval may be defined. The latency interrupt interval is configured for interrupt moderation when the network application associated with a packet flow is active, i.e., when the guest including the network application is active on a processor.","A network adapter may be configured to interrupt a host based on network traffic, e.g., receiving one or more packets. Typically, packets are received in bursts. In order to reduce the number of interrupts, interrupts may be moderated. For example, the network adapter may be configured to send an interrupt to the host if a time period corresponding to the latency interrupt interval has passed since a prior interrupt and a packet in an identified packet flow has been received (\u201cevent\u201d). In another example, a device driver in the host may be configured to delay processing received packets for a time interval. In both examples, a plurality of packets associated with the identified packet flow may be received during the time interval. The plurality of packets may then be processed by the device driver in the host.","In a virtualization environment, interrupt moderation using only the latency interrupt interval may be inadequate. For example, a guest associated with an identified packet flow may or may not be active when packet(s) corresponding to the identified flow are received. As used herein, \u201cguest\u201d includes a virtual CPU and an associated guest process configured to execute on the virtual CPU. Further, the \u201ctime slice\u201d or \u201cscheduler tick\u201d at which the VMM is configured to schedule guests in and out may be longer than the latency interrupt interval. If the guest associated with the packet flow is inactive, the VMM may schedule the guest in response to the interrupt. The VMM shares processor resources with the guest(s). If there are a relatively large number of interrupts, the VMM may consume a significant portion of processor resources handling the interrupts. If the device is configured to reduce its interrupt frequency and\/or interrupts are disabled, and packets are received, a receive buffer may overflow. Embodiments consistent with the present disclosure are configured to provide interrupts at the latency interrupt interval when packet(s) are received and an associated guest is active. Embodiments are further configured to trigger activation of an inactive guest so that the guest may respond to a critical event. For example, an interrupt at the overflow interrupt interval may be used to prevent receive buffer overflow, when the guest is or has\/been inactive.","System Architecture",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","102","104","102","102","106","108","106","1"]},"System memory  may host virtual machine monitor (VMM) , operating system code  (e.g., OS kernel code) and network adapter device driver code . The VMM  may include the OS kernel code . Network adapter device driver code  may be included in the VMM  and\/or the OS kernel code . In some embodiments, the OS kernel code  and the VMM  may be combined. In some configurations, VMM may be implemented in circuitry, for example, in processor .","System memory may be configured to host at least one guest process. Each guest process A, B, n may include a guest device driver A, B, n, a guest operating system (Guest OS) A, B, . . . , n, and a plurality of applications. Device driver  and\/or guest device drivers A, B, . . . , n, when executed, are configured to communicate with the network adapter , as will be explained in greater detail below.","In some embodiments, a device, e.g., network adapter , may be dedicated to, i.e., assigned to, one guest. In this embodiment, device driver  may not be present and\/or may not be utilized. Instead, guest device drivers A, . . . , n may communicate with the network adapter .","A guest including a VCPU and an associated guest process may be executed in a core of processor  when the guest is scheduled in. In other words, a guest is active when it is scheduled in and inactive when it is scheduled out. For example, as depicted in , VCPU A of Guest A or VCPU B of Guest B may be scheduled on CPU , meaning that CPU  has the primary responsibility for executing instructions and exchanging commands and data related to the guest operating system, guest device driver and applications associated with Guest A and Guest B. In other words, Guest A and Guest B may share CPU  using, for example, different time slices. It should be noted at the outset that at least one application associated with each guest process A, B, . . . , n running in system memory  may include a \u201cnetwork application,\u201d meaning that such an application involves receiving and\/or sending packets from\/to the network adaptor . Of course, other system applications, including non-network applications, may be running in system memory .","Virtual machine monitor  is configured to manage sharing the host processor  among the plurality of guest processes residing in system memory . Specifically, VMM  is configured to schedule a guest, including a guest process and virtual CPU, in a core for processing. Scheduling a guest may occur, for example, upon system initialization and may also be performed dynamically during operation of the system . For example, VMM  may be configured to activate (\u201cschedule in\u201d) a guest at a time interval. In another example, a guest, e.g., Guest A, may be inactive and an interrupt may be received that network traffic, e.g., received packets, is available for processing by a network application and\/or guest device driver of Guest A. The VMM  may activate Guest A in response to the interrupt. The VMM  may be configured to manage a state, i.e., active or inactive, of each guest. In this manner, the VMM  may manage scheduling associated with sharing one or more cores between a plurality of guests.","Network adapter  may comprise a network interface card (NIC)  that generally includes media access control (MAC) circuitry  and physical interface (PHY) circuitry . MAC circuitry  may be configured to assemble data to be transmitted into packets, that include destination and source addresses along with network control information and error detection hash values. PHY circuitry  may include encoding and decoding circuitry (not shown) to encode and decode data packets. NIC  may be coupled to a medium to receive one or more packet flows, as indicated by packet flow . NIC  may also include a plurality of receive queues, labeled Queue A, Queue B, . . . , Queue n. Receive queues Queue A, Queue B, . . . , Queue n are configured to reference packets associated with a particular application received by the NIC  (via incoming packet flow ).","Network traffic associated with a packet flow may be identified based on one or more fields in each packet in the packet flow. For example, the packet flow ID for a TCP packet may include a sequence of source IP address, destination IP address, source port number, and destination port number, L2\/L4 data, etc., any of which can be utilized to ID the packet flow. Of course, other packet protocols may be identified, e.g., using UDP packet information. An identified packet flow may be associated with a network application in a guest. When a packet associated with the packet flow ID is received, the guest may be active (corresponding to executing on at least a portion of processor ) or the guest may be inactive.","A network adapter  consistent with the present disclosure may include a physical interface PI  and a plurality of virtual interfaces VIs  A, . . . , n. The physical interface  is configured to manage physical resources of the network adapter  and may be configured to communicate with device driver  associated with host OS  and VMM . The physical interface  may be configured to manage sharing the network adapter between the virtual interfaces A, B . . . , n. Each virtual interface A, B . . . , n may include interrupt moderation circuitry A, . . . , n. Interrupt moderation circuitry A, . . . , n may be configured to moderate interrupts for packet flows associated with each virtual interface A, B . . . , n.","In a virtualization environment, a guest in the host and a virtual function and queue in the network adapter may be configured as a \u201ccomplete\u201d system. Although the guest and virtual function are sharing physical resources, it may appear to the guest and virtual function that each \u201cowns\u201d its respective physical resource. The scheduling and processing associated with sharing the physical resources may generally be performed by the VMM  and PI . The VMM  may be configured to manage the PI .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 2","FIG. 1","FIG. 2","FIG. 1"],"b":["200","120","200","120","100","106","108","116","118"]},"A first exemplary embodiment includes an overflow control register  while a second exemplary embodiment does not include the overflow control register . Both embodiments include a latency interrupt register \u201clatency ITR\u201d , an overflow interrupt register \u201coverflow ITR\u201d , control circuitry  and an event flag(s) register . The latency ITR  may include a latency counter  and a latency interrupt interval . Similarly, the overflow ITR  may include an overflow counter  and an overflow interrupt interval . Latency ITR  is configured to facilitate interrupt moderation at a latency interrupt interval. Overflow ITR  is configured to facilitate providing an interrupt at an overflow interrupt interval for the virtual function associated with interrupt moderation circuitry  and the virtual function's associated guest.","The latency interrupt interval  may be determined based on interrupt moderation in a native environment. In other words, the latency interrupt interval  is configured for a guest that is active. The overflow interrupt interval  is configured to trigger activation of an associated guest so that the associated guest may respond to a critical event. For example, the overflow interrupt interval may be used to prevent receive buffer overflow, when the associated guest is or has\/been inactive. For example, the overflow interrupt interval  may be determined based, at least in part, on a size of the receive buffer and a speed of the network adapter. If network traffic is received, destined for the associated guest, and the associated guest is not active, the received packets may be placed in the associated guest's receive buffer by direct memory access. If the associated guest is not scheduled in so that the guest device driver and\/or network application may process the packets, the interrupt moderation circuitry  is configured to cause an interrupt to the VMM at the expiration of the overflow interrupt interval. This interrupt is configured to result in the VMM scheduling in the associated guest and removal of the packets from the receive buffer for processing.","For example, latency interrupt interval  and overflow interrupt interval  may be configured to store an interval count corresponding to a time duration of a latency interrupt interval and a time duration of an overflow interrupt interval, respectively. Each respective counter ,  may then be configured to count down from latency interrupt interval  and overflow interrupt interval , respectively, to zero. When latency counter  and\/or overflow counter  reach(es) zero, Control circuitry  may be configured to determine whether an event flag in the event flag(s) register  indicates that a packet associated with a packet flow ID has been received. If such a packet has been received, control circuitry  is configured to generate interrupt  to VMM . VMM  and\/or device driver  may then send an interrupt to guest device driver .","The latency counter  and overflow counter  are configured to be reset (and counting commenced) by guest device driver  and\/or control circuitry , as will be described in more detail below. For example, each counter ,  may be reset when an interrupt is triggered. In another example, latency counter  may be reset by guest device driver based, at least in part, on packet processing in guest.","Although counters ,  and interrupt intervals ,  have been described above as count-down counters and counting intervals, respectively, other configurations are possible. For example, counters ,  may count up to interrupt intervals , , respectively. In another example, counters ,  may correspond to timers and interrupt intervals ,  may correspond to time out intervals.","Control circuitry  is configured to receive and\/or to receive an indication of incoming packet flow(s) . Event flag(s) register  is configured to store an event flag associated with a respective packet flow destined for an application in an associated guest. Control circuitry  is configured to set an event flag in the event flag(s) register  indicating that a packet corresponding to a packet flow ID has been received. For example, control circuitry  may set the associated event flag when a first packet is received corresponding to an associated packet flow ID. \u201cFirst packet\u201d means the first packet received following an associated interrupt. The event flag may be cleared when an interrupt is triggered.","Control circuitry  may be configured to generate an interrupt  to VMM  if a latency interrupt interval expires and\/or an overflow interrupt interval expires, and the event flag indicates that an associated packet has been received. If the associated guest is active, VMM  may forward the interrupt to the associated guest device driver . In an embodiment, control circuitry  may be configured to generate an interrupt  to associated guest device driver  if a latency interrupt interval expires and to VMM  if an overflow interrupt interval expires, and the event flag indicates that an associated packet has been received. In this embodiment, an interrupt vector associated with the interrupt may indicate (identify) the associated guest driver. In some embodiments, control circuitry  may be configured to reset latency counter  and\/or overflow counter . In some embodiments, guest device driver  may be configured to reset latency counter  and\/or overflow counter  and\/or event flag(s).","In the first exemplary embodiment, overflow control  may be configured to indicate whether a guest is active or inactive. VMM  and\/or device driver  may be configured to set and\/or reset a guest state indicator in overflow control register  when VMM  schedules guest in (active) or out (inactive). The associated guest device driver  may be configured to set the guest state indicator when guest becomes active. For example, the guest state indicator may be set and\/or reset using a memory mapped input\/output (\u201cMMIO\u201d) operation.","As described herein with respect to , interrupt moderation circuitry  is configured to generate an interrupt to its associated guest device driver  and\/or to VMM  when latency interrupt interval and\/or overflow interrupt interval expires and a packet corresponding to an associated packet flow ID has been received.","Exemplary Methodology",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIGS. 3A and 3B","FIG. 1"],"b":["300","350","104"]},"Turning to , operations of this embodiment may be performed by network adapter , e.g., by interrupt moderation circuitry . For example, operations of this embodiment may be performed by interrupt moderation circuitry A in virtual function A for associated guest A. Operations of this embodiment may begin at start . At operation  of this embodiment, whether a packet has been received may be determined. For example, a packet associated with a packet flow may be received by virtual function A. An event flag in event flag(s) register  of interrupt moderation circuitry  may be set. Operation  may read the event flag to determine whether a packet has been received. If a packet has not been received, e.g., event flag is not set, program flow may pause at operation  until a packet has been received.","If a packet has been received, i.e., event flag is set, whether an interrupt interval has expired may be determined at operation . The interrupt interval may be the latency interrupt interval or the overflow interrupt interval. If an interrupt interval has not expired, program flow may pause at operation  until an interrupt interval expires. If an interrupt interval has expired, an interrupt may be triggered .","At operation , whether an associated guest, e.g., Guest A, is active may be determined. For example, overflow control register  may be queried to determine the state of the associated guest. If the associated guest is active, latency counter  may be reset at operation  and may begin counting corresponding to starting a latency interrupt interval. If the associated guest is not active, overflow counter  may be reset at operation  and may begin counting corresponding to starting an overflow interrupt interval.","These exemplary operations are configured to trigger an interrupt at the overflow interrupt interval if the guest associated with a packet flow ID is inactive and an associated packet is received or to trigger an interrupt at the latency interrupt interval if the guest is active and an associated packet is received.","Turning to , operations of this embodiment may be performed, for example, by a VMM in the host system and\/or an associated guest device driver. As described herein, the VMM may be implemented in circuitry and\/or software. Operations of this embodiment may begin at start . At operation  of this embodiment, the state of an associated guest may be changed. For example, an active guest may be scheduled out or the inactive guest may be scheduled in. For example, the state of the guest may be changed (i.e., scheduled) based on a timer. In another example, the state of the guest may be changed based on an event, e.g., an interrupt to the VMM. At operation , the overflow control register  may be updated. The overflow control register  in the interrupt moderation circuitry  is configured to indicate the guest state to control circuitry  to support resetting and starting the appropriate interval counter. The overflow control register  may be updated by the VMM  and\/or a guest device driver, when a guest is scheduled in.","Whether an interrupt from a device, e.g., network adapter , has been received may then be determined . If such an interrupt has not been received, program flow may pause at operation  until an interrupt is received. If an interrupt is received, the VMM may provide a virtual interrupt to the associated guest, so that received packets associated with the interrupt may be processed by, e.g., the associated guest device driver and\/or network application running in the associated guest, if the guest is active. If the guest is not active when the interrupt is received, the guest may be scheduled in by the VMM.","Whether to change the guest state may be determined at operation . If the guest state is to be changed, program flow may proceed to operation . If the guest state is not to be changed, program flow may proceed to operation  to determine whether an interrupt from a device has been received.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIGS. 4A and 4B","FIG. 1"],"b":["400","450","104"]},"Turning to , operations of this embodiment may be performed by network adapter , e.g., by interrupt moderation circuitry . For this embodiment, it is assumed that the latency overflow counter is reset by a guest device driver when the associated guest is active. The guest device driver may also reset the overflow counter. It is further assumed that the overflow counter has been reset. Operations according to this embodiment may begin at start . Whether a packet has been received may be determined . For example, a packet associated with a packet flow may be received by virtual interface A. An event flag in event flag(s) register  of interrupt moderation circuitry  may be set. Operation  may read the event flag to determine whether a packet has been received. If a packet has not been received, e.g., event flag is not set, program flow may pause at operation  until a packet has been received.","If a packet has been received, i.e., event flag is set, whether in interrupt interval has expired may be determined at operation . For example, the overflow interrupt interval and\/or the latency interrupt interval may be expired. If an interrupt interval has not expired, program flow may pause at operation . If an interrupt interval has expired, flow may proceed to operation  and an interrupt may be triggered . For example, the interrupt may be provided from interrupt moderation circuitry  to an associated guest device driver and\/or to the VMM . At operation , the overflow counter may be reset, starting an overflow interrupt interval. Flow may then proceed to operation .","Turning to , operations of this embodiment may be performed, for example, by a VMM in the host system and\/or a guest device driver. Operations according to this embodiment may begin at start . Operation  may include determining whether an interrupt from a device, e.g., network adapter , has been received. If a interrupt has not been received, program flow may pause at operation  until an interrupt is received. If an interrupt has been received, received packets may be processed at operation . For example, if the guest associated with the packets is active, the guest device driver and\/or a network application may process the received packets. If the guest is inactive, the VMM  may schedule in the guest to process the packets.","Operation  may include resetting the latency counter. For operation , it is assumed that the guest is active. For example, the guest device driver and\/or network application may be configured to reset the latency counter upon completion of packet processing. Operation  may be included in some embodiments. Operation  includes resetting the overflow counter. The overflow counter may be reset at the completion of packet processing, similar to resetting the latency counter. Program flow may then proceed to operation .","The embodiments illustrated in  are configured to provide interrupt moderation at the latency interrupt interval when a guest is active and to provide an interrupt at the overflow interrupt interval, e.g., to prevent receive buffer overflow. The embodiments illustrated in  do not include an explicit guest state register. Rather a guest device driver may be configured to reset the latency counter when it completes packet processing, thereby implicitly \u201cinforming\u201d a network adapter that the guest associated with a packet flow is active.","While the foregoing is prided as exemplary system architectures and methodologies, modifications to the present disclosure are possible. For example, operating system , VMM  and\/or guest operating system(s) A, . . . , n may manage system resources and control tasks that are run on system . For example, guest OS A, . . . , n may be implemented using Microsoft Windows, HP-UX, Linux, or UNIX, although other operating systems may be used. When a Microsoft Windows operating system is used, the ndis.sys driver may be utilized at least by guest device driver A, . . . , n and an intermediate driver (not shown). For example, the ndis.sys driver may be utilized to define application programming interfaces (APIs) that can be used for transferring packets between layers.","Guest operating system A, . . . , n may implement one or more protocol stacks (not shown). A protocol stack may execute one or more programs to process packets. An example of a protocol stack is a TCP\/IP (Transport Control Protocol\/Internet Protocol) protocol stack comprising one or more programs for handling (e.g., processing or generating) packets to transmit and\/or receive over a network. A protocol stack may alternatively be comprised on a dedicated sub-system such as, for example, a TCP offload engine.","Other modifications are possible. For example, memory  and\/or memory associated with the network adaptor  (not shown) may comprise one or more of the following types of memory: semiconductor firmware memory, programmable memory, non-volatile memory, read only memory, electrically programmable memory, random access memory, flash memory, magnetic disk memory, and\/or optical disk memory. Either additionally or alternatively, memory  and\/or memory associated with the network adaptor  (not shown) may comprise other and\/or later-developed types of computer-readable memory.","Embodiments of the methods described herein may be implemented in a system that includes one or more storage mediums having stored thereon, individually or in combination, instructions that when executed by one or more processors perform the methods. Here, the processor may include, for example, a system CPU (e.g., core processor of ) and\/or programmable circuitry such as the MAC circuitry. Thus, it is intended that operations according to the methods described herein may be distributed across a plurality of physical devices, such as processing structures at several different physical locations. The storage medium may include any type of tangible medium, for example, any type of disk including floppy disks, optical disks, compact disk read-only memories (CD-ROMs), compact disk rewritables (CD-RWs), and magneto-optical disks, semiconductor devices such as read-only memories (ROMs), random access memories (RAMs) such as dynamic and static RAMs, erasable programmable read-only memories (EPROMs), electrically erasable programmable read-only memories (EEPROMs), flash memories, magnetic or optical cards, or any type of media suitable for storing electronic instructions.","The Ethernet communications protocol, described herein, may be capable permitting communication using a Transmission Control Protocol\/Internet Protocol (TCP\/IP). The Ethernet protocol may comply or be compatible with the Ethernet standard published by the Institute of Electrical and Electronics Engineers (IEEE) titled \u201cIEEE 802.3 Standard\u201d, published in March, 2002 and\/or later versions of this standard.","As used herein, a \u201cPHY\u201d may be defined as an object and\/or circuitry used to interface to one or more devices, and such object and\/or circuitry may be defined by one or more of the communication protocols set forth herein. The PHY may comprise a physical PHY comprising transceiver circuitry to interface to the applicable communication link. The PHY may alternately and\/or additionally comprise a virtual PHY to interface to another virtual PHY or to a physical PHY. PHY circuitry  may comply or be compatible with, the aforementioned IEEE 802.3 Ethernet communications protocol, which may include, for example, 100BASE-TX, 100BASE-T, 10 GBASE-T, 10 GBASE-KR, 10 GBASE-KX4\/XAUI, 40 GbE and or 100 GbE compliant PHY circuitry, and\/or PHY circuitry that is compliant with an after-developed communications protocol.","\u201cCircuitry\u201d, as used in any embodiment herein, may comprise, for example, singly or in any combination, hardwired circuitry, programmable circuitry, state machine circuitry, and\/or firmware that stores instructions executed by programmable circuitry.","The terms and expressions which have been employed herein are used as terms of description and not of limitation, and there is no intention, in the use of such terms and expressions, of excluding any equivalents of the features shown and described (or portions thereof), and it is recognized that various modifications are possible within the scope of the claims. Accordingly, the claims are intended to cover all such equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Features and advantages of embodiments of the claimed subject matter will become apparent as the following Detailed Description proceeds, and upon reference to the Drawings, wherein like numerals depict like parts, and in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4A and 4B"}]},"DETDESC":[{},{}]}
