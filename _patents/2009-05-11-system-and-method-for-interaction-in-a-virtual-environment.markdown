---
title: System and method for interaction in a virtual environment
abstract: A system and method for implementing game play are disclosed. In one embodiment, the method comprises defining, in a game play controller object, at least one game play rule of a virtual multiplayer game, maintaining, in the game play controller object, at least one game play state, maintaining, in a virtual object controller object, at least one state of a virtual object in a virtual multiplayer game environment, wherein the virtual object is one of a plurality of object types, receiving, over a network, user commands regarding the virtual object, and executing the game play rule based on the received instructions and the object type of the virtual object, wherein the execution of the game play rule modifies the game play state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08721443&OS=08721443&RS=08721443
owner: Disney Enterprises, Inc.
number: 08721443
owner_city: Burbank
owner_country: US
publication_date: 20090511
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Field of the Invention","This disclosure relates to multiplayer online games.","2. Description of the Related Art","A virtual world is a computer-based simulated environment in which users interact. There currently is a need for improved systems for implementing game play in these simulated environments.","The system, method, and devices of the invention each have several aspects, no single one of which is solely responsible for its desirable attributes. Without limiting the scope of this invention as expressed by the claims which follow, its more prominent features will now be discussed briefly. After considering this discussion, and particularly after reading the section entitled \u201cDetailed Description of Certain Embodiments\u201d one will understand how the features of this invention provide advantages that include a one or more object controllers and a game play controller.","One aspect of the disclosure is a method comprising defining, in a non-player object controller object, at least one game play rule of a virtual multiplayer game, maintaining, in the non-player object controller object, at least one state of the non-player object, maintaining, in a first player object controller object, at least one state of a first player object in a virtual multiplayer game environment, wherein the first player object is a first player object type, maintaining, in a second player object controller object, at least one state of a second player object in the virtual multiplayer game environment, wherein the second player object is second player object type different from the first player object type, receiving, over a network, first user commands regarding the first player object, executing the game play rule based on the first user commands, the state of the first player object, and the state of the non-player object, wherein execution of the game player rule modifies the state of the non-player object, receiving, over the network, second user commands regarding the second player object, and executing the game play rule based on the second user commands, the state of the second player object, and the state of the non-player object, wherein execution of the game play rule modifies the state of the non-player object.","Another aspect of the disclosure is a system comprising one or more virtual object controllers, each virtual object controller configured to maintain at least one state of a virtual object in a virtual multiplayer game environment, wherein each of the virtual objects is one of a plurality of virtual object types, and wherein at least a portion of the virtual objects are controlled by different players of the virtual multiplayer game, and a game play controller configured to maintain at least one game play state and to define at least one game play rule of the virtual multiplayer game, wherein the game play controller is configured to update the game play state based on information provided by the virtual object controllers, and wherein the game play controller is configured to implement a game play rule based on the virtual object types of virtual object controllers that have a defined relationship with the game play controller.","Another aspect of the disclosure is a method comprising defining, in a game play controller object, at least one game play rule of a virtual multiplayer game, maintaining, in the game play controller object, at least one game play state, maintaining, in a virtual object controller object, at least one state of a virtual object in a virtual multiplayer game environment, wherein the virtual object is one of a plurality of virtual object types, receiving, over a network, user commands regarding the virtual object, and executing the game play rule based on the received commands and the virtual object type of the virtual object, wherein the execution of the game play rule modifies the game play state.","The following detailed description is directed to certain specific aspects of the invention. However, the invention can be embodied in a multitude of different ways, for example, as defined and covered by the claims. It should be apparent that the aspects herein may be embodied in a wide variety of forms and that any specific structure, function, or both being disclosed herein is merely representative. Based on the teachings herein one skilled in the art should appreciate that an aspect disclosed herein may be implemented independently of any other aspects and that two or more of these aspects may be combined in various ways. For example, an apparatus may be implemented or a method may be practiced using any number of the aspects set forth herein. In addition, such an apparatus may be implemented or such a method may be practiced using other structure, functionality, or structure and functionality in addition to or other than one or more of the aspects set forth herein. Similarly, methods disclosed herein may be performed by one or more computer processors configured to execute instructions retrieved from a computer-readable storage medium. A computer-readable storage medium stores information, such as data or instructions, for some interval of time, such that the information can be read by a computer during that interval of time. Examples of computer-readable storage media are memory, such as random access memory (RAM), and storage, such as hard drives, optical discs, flash memory, floppy disks, magnetic tape, paper tape, punch cards, and Zip drives.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","101","102","103","101","103","102","103"]},"Each of the system units  can include a computer processor, memory and\/or storage, one or more input devices, one or more output devices, and a network controller. The processor can be a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any suitable combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor such as an ARM, Pentium\u00ae, Pentium II\u00ae, Pentium III\u00ae, Pentium IV\u00ae, Pentium\u00ae Pro, an 8051, a MIPS\u00ae, a Power PC\u00ae, an ALPHA\u00ae, but in the alternative, the processor may be any conventional processor, controller, microcontroller, or state machine. A processor may also be implemented as a combination of computing devices, e.g., a combination of a DSP and a microprocessor, a plurality of microprocessors, one or more microprocessors in conjunction with a DSP core, or any other such configuration.","The processor can be coupled, via one or more buses, to read information from or write information to memory and\/or storage. The processor may additionally, or in the alternative, contain memory, such as processor registers. The memory can include processor cache, including a multi-level hierarchical cache in which different levels have different capacities and access speeds. The memory can also include random access memory (RAM), other volatile storage devices, or non-volatile storage devices. The storage can include hard drives, optical discs, such as compact discs (CDs) or digital video discs (DVDs), flash memory, floppy discs, magnetic tape, and Zip drives.","Each system unit can also include one or more input devices and one or more output devices for, respectively, receiving input from and providing output to, a user of the system unit. Suitable input devices include, but are not limited to, a keyboard, buttons, keys, switches, a pointing device, a mouse, a joystick, a remote control, an infrared detector, a video camera (possibly coupled with video processing software to, e.g., detect hand gestures or facial gestures), a motion detector, or a microphone (possibly coupled to audio processing software to, e.g., detect voice commands). Suitable output devices include, but are not limited to, visual output devices, including displays and printers, audio output devices, including speakers, headphones, earphones, and alarms, and haptic output devices, including force-feedback game controllers and vibrating devices.","Each system unit  can also receive and transmit information over the network  via a network controller, or network card. The network card can be an Ethernet card with a unique 48-bit serial number called a MAC address stored in ROM (read-only memory) carried on the card. The network card can be an expansion card which plugs into a network bus or be a network interface built into a motherboard of the system unit.","As disclosed above, each system unit  of the system  is connected, via a network , to a server , and also to other system units . The network can include various forms of hardware and software technology including optical fiber, Ethernet, Wireless LAN, HomePNA, or power line communication. The network can be public access network, such as the Internet, or a private network. The network can communicate using a number of protocols known to those skilled in the art, including IPv4 or IPv6.","The server , like the system units , can include a processor, memory and\/or storage, and a network interface. In some embodiments, the server  can include an application server, a database server, a file server, a standalone server, a client-server, or a Web server. Although the server may have one or more input or output devices in some embodiments, in other embodiments, the server lacks input or output devices.","As mentioned above, the server  may be an application server. An application server is a server that hosts an API (application programming interface) to expose logic and processes for use by third-party applications. The application server can be a Java application server or use the Microsoft .NET framework. The application server hosts an API containing a set of routines, data structures, object classes, and\/or protocols provided by libraries and\/or operating system services in order to provide an application to users accessing the application server via the network .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["10","20","30","40","50","20","21","22","23","24","25","26"]},"The users of the system, by controlling their respective player objects, interact with each other and the non-player objects. A user of the system can receive information regarding the virtual world which is displayed in the information window . The information regarding the virtual world can include information transmitted by other users to enable a chat feature. The information can also include events which have occurred at locations near the player object associated with the user. Information can also be displayed to the user graphically via the map window , which displays information regarding the location of various virtual objects in the virtual world.","In one embodiment, a first user associated with a first player object of a first player object type can interact with a non-player object so as to enable game play for a second user associated with a second player object of a second player object type. For example, in one implementation, the non-player character objects Zippy  and Speedy  are configured by default to move along a path in the virtual world. The non-player character objects ,  can be immobilized via interaction from player objects of the first player object type. After being immobilized, the non-player character objects ,  can be moved to building  via interaction from player objects of the second player object type.","This type of game play, called baton style game play or open quest style game play, allows players to implicitly join quests and participate in game play that affects other players and create game play for each other. As mentioned above, a player associated with a player object of a first player object type can perform an action on a non-player character object which will result in the non-player character object providing game play for a player having associated with a player object of a second player object type. Described below is a system for implementing such game play.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 1"],"b":["103","101"]},"In the illustrated embodiment of , the data objects include a game play controller object  operatively connected to a plurality of virtual object controller objects  and a map controller object . In other embodiments, there is more than one game play controller object .","Each virtual object controller object  is associated with a virtual object in the virtual world and includes one or more virtual object states  and one or more virtual object behaviors . The virtual object controller objects  can include player object controller objects associated with particular users of system units  connected to the server  via the network  of . Each player object controller object includes player state information. The player state information can include information regarding the player object, including an avatar selected by the user for interaction in the virtual world and information regarding items acquired by the user within the virtual world. The information regarding the player object can include a player object type, predetermined statistics regarding the player object type, or dynamic attributes of the player object which change via the game play mechanics and defined game play rules. The player state information can also include a location of the player object in the virtual world and an action being performed by the player object. The player state information can be altered by the user of a system unit  by transmitting commands via the network . The player state information can also be altered by other virtual object controller objects , the game play controller object , or via other mechanisms.","The virtual object controller objects  can also include non-player character (NPC) object controller objects generated at the system  of  or by the game play controller object . Each NPC object controller object includes NPC state information and NPC behavior, which can be written as a script. The NPC state information can include a location of an NPC object in the virtual world and an action being performed by the NPC object. The NPC state information can be altered by the NPC behavior, by the game play controller object , or by interaction with other object controller objects .","The game play controller object  defines one or more game play rules  and stores game play state information . The game play rules  can be written as scripts and can generate additional virtual object controller objects, such as NPC object controller objects. The game play rules  can include specific scripts for execution when an interaction with a player object controller object having specific player state information is detected. For example, different scripts can be executed when interaction with player controller objects having different player object types is detected. As another example, a specific script can be executed when interaction with a player object controller object having state information indicating that a specific item has been acquired by the user within the virtual world.","The map controller object  contains information accessible by the game play controller  relating the state of the virtual world. The map controller object  can include world state information  and a clock . By accessing this information, the game play controller object can execute scripts incorporating information relating to the state of the virtual world, or the time.","As mentioned above, each data object contains members that represent processes for reading and modifying the data of the data object in predefined ways. This feature can be used to implement specific types of game play, including the baton style game play described above. For example, a first player object controller object can store information indicative of a first player object type as a player object state. Similarly, a second player object controller object can store information indicative of a second play object type as a player object state. A game play controller object having game play rules defined therein can generate an NPC object controller object for the first and second player controller objects to interact with.","The generated NPC object controller object includes a NPC object state which is originally set to a default state in which the NPC object changes its location on a predefined path. When a first user associated with the first player object transmits commands via the network to move the player object, the player object controller object interprets these commands by altering the player object state within the player object controller object. When the location of the player object (as stored in the player object state of the player object controller object) is near to the location of the NPC object (as stored in the NPC object state of the NPC object controller object), the first user transmits commands to immobilize the NPC object. These commands are interpreted by the player object controller object to call a method member of the NPC object controller to change the NPC state from its default state to an immobilized state. The particular method member may check that certain criteria are met, including that the location of the first player object is near the NPC object, that the first player object is of a particular object type, and that the NPC object is in the default state. The particular method member can also call method members from the game play object controller to reward the user for accomplishing the task, which may include calling a method member of the player object controller object to change the player object state.","A second user associated with a second player object transmits commands via network to move the player object to the immobilized NPC object. When the location of the player object is near to the location of the NPC object, the second user transmits commands to move the NPC object. These commands are interpreted by the player object controller to call a method member of the NPC object controller to change the NPC state from its immobilized state to a move state. As mentioned above, the particular method member may check that certain criteria are met, including that the location of the second player object is near the NPC object, that the second player object is of a particular object type, and that the NPC object is in the immobilized state. The particular method member can also call method members from the game play object controller to reward the user for accomplishing the task, which may include calling a method member of the player object to change the player object state.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":["300","305","307","320","305","320","307","222","220","320","320","307","320","224","220"],"i":"x "},"As described above, the game play rules  can generate additional virtual object controller objects, such as NPC object controller objects. A representation of generated virtual object controller objects  is also displayed associated with the representation of the game play controller object  in the data object editing portion . The representation  can be manipulated so as to define object state  and object behavior  of the object controller object  of  represented by the representation. The object state  can be edited, at least in part, by dragging the representation  to a location on the location grid . This location can be displayed to an editor by the presence of one or more proxies of the representation  displayed on the location grid . The object behavior  can similarly be edited by defining a path  on the location grid .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 5","FIG. 3","FIG. 3"],"b":["400","410","220","400","420","220"]},"Next, in block , a virtual object state is maintained in a virtual object controller object, wherein the virtual object is one of plurality of virtual object types. The virtual object state can be stored in the object controller object  of  and can include player object state information and NPC object state information. Player object state information can include, as described above, information regarding an avatar selected by the user for interaction in the virtual world and information regarding items acquired by the user within the virtual world. The information regarding the player object can include a player object type, predetermined statistics regarding the player object type, or dynamic attributes of the player object that changes via the game play mechanics and defined game play rules. The player object state information can also include a location of the player object in the virtual world and an action being performed by the player object. The NPC object state information can include a location of an NPC object in the virtual world and an action being performed by the NPC object.","Each of the virtual objects is one of plurality of virtual object types. The specific type of each virtual object can be stored as an object state  in the object controller object  of . The plurality of virtual object types can include a plurality of different avatar types selected by the user.","Proceeding to block , user commands are received over a network regarding the virtual object. The user commands can be transmitted over the network  of  by a system unit  associated with the user transmitting the commands. The user commands can be received by the server  of . In one embodiment, the user commands alter the virtual object state maintained in the virtual object controller object. For example, the user commands can alter a location of the virtual object stored in the virtual object controller object. In another embodiment, the user commands initiate an interaction between the virtual object controller object and a game play controller object.","Finally, in block , the game play rule is executed based on the object type of the virtual object. In one embodiment, the game play rule includes different scripts to be executed based on the object type of the virtual object. In another embodiment, the execution of the game play rule is further based on at least one of the virtual object states maintained in the virtual object controller object or the game play state maintained in the game play controller object.","While the above detailed description has shown, described, and pointed out novel features of the invention as applied to various aspects, it will be understood that various omissions, substitutions, and changes in the form and details of the device or process illustrated may be made by those skilled in the art without departing from the scope of this disclosure. As will be recognized, the invention may be embodied within a form that does not provide all of the features and benefits set forth herein, as some features may be used or practiced separately from others. The scope of this disclosure is defined by the appended claims, the foregoing description, or both. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
