---
title: Systems and methods for using virtualization of operating-system-level components to facilitate software testing
abstract: A computer-implemented method for facilitating software testing using operating-system component virtualization may include 1) identifying a software product installed on a computing system comprising a base operating system; 2) selecting an operating-system-level component with which the software product is to be tested; 3) isolating the operating-system-level component in a virtualization layer that is distinct from the base operating system; 4) activating the virtualization layer such that access requests directed to the base operating system for the operating-system-level component are redirected to the virtualization layer; 5) testing the software product while the virtualization layer is active to determine how the software product would function if the operating-system-level component was part of the base operating system; and 6) after the testing is complete, deactivating the virtualization layer such that the operating-system-level component is no longer visible to the base operating system or the software product.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116725&OS=09116725&RS=09116725
owner: Symantec Corporation
number: 09116725
owner_city: Mountain View
owner_country: US
publication_date: 20110315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["A significant aspect of software testing, both for software developers (e.g., software quality assurance teams) and Information Technology (\u201cIT\u201d) administrators, is determining how software will execute with different settings, on different types of hardware, and in different operating system environments. Thus, it may be important for software testers to be able to quickly change the configuration of a software testing environment.","To reduce the time involved in changing the configuration of a software testing environment, software testers may perform testing on virtual machine images. While using virtual machines images for testing may speed up many testing processes, such an approach may also introduce an additional test variable\u2014the virtual machine. Sometimes, a software product that runs flawlessly on a virtual machine may have problems when running on a physical machine, and these problems may go undetected if the software is only tested on a virtual machine. Furthermore, using virtual machines for testing may still take a significant amount of time and consume significant resources, especially in situations where a software tester may want to test a software product using numerous relatively small configuration changes.","What is needed, therefore, is a more efficient and effective mechanism for testing software with different settings, using different types of hardware, in different operating system environments, and\/or in any other context.","As will be described in greater detail below, the instant disclosure generally relates to systems and methods for using virtualization of operating-system-level components to facilitate software testing. For example, a method may include: 1) identifying a software product installed on a computing system comprising a base operating system; 2) selecting an operating-system-level component with which the software product is to be tested; 3) isolating the operating-system-level component in a virtualization layer that is distinct from the base operating system; 4) activating the virtualization layer such that access requests directed to the base operating system for the operating-system-level component are redirected to the virtualization layer; 5) testing the software product while the virtualization layer is active to determine how the software product would function if the operating-system-level component was part of the base operating system; and 6) after the testing is complete, deactivating the virtualization layer such the operating-system-level component is no longer visible to the base operating system or the software product.","The software product may be tested in a variety of different environments. For example, the computing system may be a software development environment, and testing the software product may include debugging the software product. In other embodiments, the software may be tested in an enterprise environment to determine how the software functions in the enterprise environment.","The operating-system-level component may include one or more of any of a variety of operating system resources. For example, the operating-system-level component may be a set of one or more registry entries (e.g., registry keys and\/or other registry information), and activating the virtualization layer may cause the set of registry entries to be functionally merged with a registry of the base operating system. In some embodiments, the set of registry entries enable the software product to interact with an additional software product, and testing the software product may involve monitoring interactions between the software product and the additional software product to determine whether the software product and the additional software product interact in an expected manner.","As another example, the operating-system-level component may include a device driver for a hardware device, activating the virtualization layer may cause the hardware device to be accessible to the software product, testing the software product may include determining whether the software product is able to properly interact with the hardware device, and deactivating the virtualization layer may cause the hardware device to be inaccessible to the software product.","Another example of an operating-system-level component is a user profile, which may include registry entries associated with a particular user. When the operating-system-level component is a user profile, activating the virtualization layer may cause the user to be logged onto the computing system, testing the software product may include determining how the software product functions in the context of the user's profile, and deactivating the virtualization layer may cause the user to not be logged onto the computing system.","In some embodiments, the operating-system-level component may include a domain state of a network domain, activating the virtualization layer may cause the computing system to be part of the network domain associated with the domain state, and testing the software product may include determining whether the software product functions properly within the network domain.","The operating-system-level component may provide a testing alternative to a component that is already part of the operating system. For example, the operating system may include an integrated component that corresponds to the operating-system-level component in the virtualization layer, and the integrated component of the operating system would conflict with the operating-system-level component in the virtualization layer if the virtualized operating-system-level component was integrated directly into the operating system. In this example, the method for using virtualization to facilitate software testing may further include testing the software product while the virtualization layer is inactive to determine how the software product functions when the integrated component is part of the base operating system. The method may further include comparing functionality of the software product when the virtualization layer is inactive to functionality of the software product when the virtualization layer is active.","The methods and systems described herein may also be used to test multiple corresponding and\/or alternative operating-system-level components. For example, the previously described method for using virtualization to facilitate software testing may further include: 1) selecting an additional operating-system-level component with which the software product is to be tested; 2) isolating the additional operating-system-level component in an additional virtualization layer that is distinct from the base operating system; 3) activating the additional virtualization layer such that access requests directed to the base operating system for the operating-system-level component are redirected to the additional virtualization layer; and 4) testing the software product while the additional virtualization layer is active to determine how the software product would function if the additional operating-system-level component was part of the base operating system.","In some embodiments, a system for using virtualization to facilitate software testing may include: 1) an identification module programmed to identify a software product installed on a computing system comprising a base operating system; 2) a selection module programmed to select an operating-system-level component with which the software product is to be tested; 3) an isolation module programmed to isolate the operating-system-level component in a virtualization layer that is distinct from the base operating system; 4) an activation module programmed to activate the virtualization layer such that access requests directed to the base operating system for the operating-system-level component are redirected to the virtualization layer; 5) a test module programmed to test the software product while the virtualization layer is active to determine how the software product would function if the operating-system-level component was part of the base operating system; 6) a deactivation module programmed to, after the testing is complete, deactivate the virtualization layer such that the operating-system-level component is no longer visible to the base operating system or the software product; and 7) at least one processor configured to execute the identification module, the selection module, the isolation module, the activation module, the test module, and the deactivation module.","Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.","Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","As will be described in greater detail below, the instant disclosure generally relates to systems and methods for using virtualization of operating-system-level components to facilitate software testing. For example, a virtualization system may virtualize an operating-system-level component (e.g., a set of registry keys, a device driver, a user profile, etc.) to facilitate testing of a software product. The virtualization system may store the operating-system-level component in a virtualization layer such that the operating-system-level component may be quickly and easily activated and deactivated for testing purposes. In this manner, embodiments of the instant disclosure may provide for efficient and effective testing of software using a variety of settings, within a variety of environments, with different types of hardware, and in many other contexts.","The following will provide, with reference to , detailed descriptions of exemplary systems for using virtualization of operating-system-level components to facilitate software testing. Detailed descriptions of corresponding computer-implemented methods will also be provided in connection with . Detailed descriptions of exemplary virtualization systems will be presented in the discussion of . In addition, detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with , respectively.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","102","100","104","100","106","100","108"]},"System  may also include an activation module  programmed to activate the virtualization layer such that access requests directed to the base operating system for the operating-system-level component are redirected to the virtualization layer. As shown in , system  may further include a test module  programmed to test the software product while the virtualization layer is active to determine how the software product would function if the operating-system-level component was part of the base operating system. System  may further include a deactivation module  programmed to, after the testing is complete, deactivate the virtualization layer such that the operating-system-level component is no longer visible to the base operating system or the software product. Although illustrated as separate elements, one or more of modules  in  may represent portions of a single module or application.","In certain embodiments, one or more of modules  in  may represent one or more software applications or programs that, when executed by a computing device, may cause the computing device to perform one or more tasks. For example, as will be described in greater detail below, one or more of modules  may represent software modules stored and configured to run on one or more computing devices, such as the devices illustrated in  (e.g., computing system  and\/or server ), computing system  in , and\/or portions of exemplary network architecture  in . One or more of modules  in  may also represent all or portions of one or more special-purpose computers configured to perform one or more tasks.","Exemplary system  in  may be deployed in a variety of ways. For example, all or a portion of exemplary system  may represent portions of a cloud-computing or network-based environment, such as exemplary system  illustrated in . Cloud-computing environments may provide various services and applications via the Internet. These cloud-based services (e.g., software as a service, platform as a service, infrastructure as a service, etc.) may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud-based computing environment.","As shown in , system  may include a computing system  in communication with a server  via a network . In one embodiment, and as will be described in greater detail below, computing system  may be programmed with identification module , selection module , isolation module , activation module , test module , and deactivation module . Computing system  may also include a software product , a virtualization layer , and a base operating system . Virtualization layer  may include an operating-system-level component , with which software product  may be tested, as described in greater detail in the discussion corresponding to .","Base operating system  may be an operating system that runs directly on physical hardware of computing system  (i.e., base operating system  may not be part of a virtual machine or other virtual environment). Similarly, software product  may run directly within base operating system  (i.e., software product  may not be virtualized). Thus, in some embodiments of the instant disclosure, operating-system-level component  may be the only virtualized component on computing system , reducing the number of variables involved in testing software product  and reducing or eliminating many of the disadvantages of testing software using a virtual machine image and\/or a virtualized software application.","Alternatively, base operating system  and\/or software product  may be virtualized. In other words, software  may be tested within a virtual environment, and embodiments of the instant disclosure may still provide various advantages (e.g., greater testing speed and efficiency) in such situations. For example, base operating system  may be a base operating system of a virtual machine and\/or software product  may be installed to a virtualization layer.","Computing system  generally represents any type or form of computing device capable of reading computer-executable instructions. Examples of computing system  include, without limitation, laptops, desktops, servers, cellular phones, personal digital assistants (PDAs), multimedia players, embedded systems, combinations of one or more of the same, exemplary computing system  in , or any other suitable computing device.","Server  generally represent any type or form of computing device that is capable of communication with and running testing operations on computing system . While  shows all of modules - on computing system , in some embodiments one or more of modules - may be located on server , which may perform remote testing and monitoring of software product . Examples of server  include, without limitation, application servers and database servers configured to provide various database services and\/or run certain software applications.","As noted, server  may communicate with computing system  over network . Network  generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network  include, without limitation, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), the Internet, power line communications (PLC), a cellular network (e.g., a GSM Network), exemplary network architecture  in , or the like. Network  may facilitate communication or data transfer using wireless or wired connections.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 1","FIG. 2"],"b":["300","100","200"]},"At step  in , one or more of the systems described herein may identify a software product installed on a computing system comprising a base operating system. For example, identification module  in  (which may, as detailed above, represent a portion of computing system  in ) identify software product  on computing system . As used herein, the phrase \u201csoftware product\u201d generally refers to any type or form of computer-executable code, including software applications, device drivers, application plug-ins, operating system services or other operating system functions, an operating system kernel, and\/or any other module or set of computer-executable code.","Identification module  may identify software product  in a variety of different manners and\/or contexts. For example, identification module  may identify software product  when software product  is installed on computing system , when a user indicates that software product  is to undergo testing, and\/or at any other suitable time. Identification module  may identify software product  by identifying an executable file associated with software product , by identifying one or more actions performed by software product , in a testing process in which software product  is being tested, and\/or in any other suitable manner.","At step  in , one or more of the systems described herein may select an operating-system-level component with which the software product is to be tested. For example, selection module  in  (which may, as detailed above, represent a portion of computing system  in ) select operating-system-level component  shown in . As used herein, the phrase \u201coperating-system-level component\u201d generally refers to any computer-executable code and\/or data stored at an operating-system-level of a computing system. For example, an operating-system-level component may be a registry key, a dynamic-link-library file, a device driver, an application programming interface, a user interface component, a networking component, a security component, an operating system service or function, an operating system update, and\/or any other part of an operating system.","Selection module  may select operating-system-level component  in a variety of manners and contexts. For example, selection module  may select operating-system-level component  in response to a user's request and\/or identification of operating-system-level component  for use in testing software product . Additionally or alternatively, selection module  may automatically select operating-system-level component  for use in testing software product . In some embodiments, test module  may direct selection module  to select operating-system-level component  as part of a testing process managed by test module .","Selection module  may select operating-system-level component  when a test is about to be performed, during a test, as one of numerous components to be tested with software product  during a product or system test, and\/or in a variety of other contexts.","At step  in , one or more of the systems described herein may isolate the operating-system-level component in a virtualization layer that is distinct from the base operating system. For example, isolation module  in  (which may, as detailed, represent a portion of computing system  in ) isolate operating-system-level component  in virtualization layer  within computing system . Isolation module  may isolate operating-system-level components by redirecting requests to base operating system  for operating-system-level components to virtualization layer . Isolation module  may be part of a virtualization system that enables operating-system-component virtualization on computing system , as described in greater detail in the description corresponding to .","In some embodiments, operating-system-level component  may be isolated from all other components of base operating system . For example, operating-system-level component  may be a single registry key entry, a single hardware and\/or networking driver, a single application programming interface, and\/or any other individual element of base operating system . Additionally or alternatively, operating-system level component  may be stored in virtualization layer  along with one or more other operating-system-level components.","At step  in , one or more the systems described herein may activate the virtualization layer such that access requests directed to the base operating system for the operating-system-level component are redirected to the virtualization layer. For example, activation module  in  (which may, as detailed above, represent a portion of computing system  in ) activate virtualization layer  such that access requests directed to base operating system  for operating-system-level component  are redirected to virtualization layer . Activation module  may activate virtualization layer  by enabling virtualization layer  and\/or otherwise overlaying virtualization layer  over base operating system . Like isolation module , activation module  may be part of a virtualization system that enables operating-system-component virtualization on computing system .","Activating virtualization layer  may cause operating-system-level component  to appear as though it is part of base operating system  even though it remains distinct from base operating system . For example, if operating-system-level component  includes a set of one or more registry entries, activating virtualization layer  may cause the set of registry entries to be functionally merged with a registry of base operating system . In other words, activating virtualization layer  may cause the registry entries to appear as though they are part of the base operating system registry. In some embodiments, the set of registry entries may take priority over any corresponding and\/or conflicting registry entries already present in base operating system .","In one example, the virtualized registry entries may include a flag and\/or other information that indicates an additional software product is supported and available to software product . In this example, activating virtualization layer  may functionally install support for the additional software product. For example, if the additional software product is a notification system, activating virtualization layer  containing registry keys associated with the notification system may enable software product  to interact with the notification system. In this manner, embodiments of the instant disclosure may enable software product  to interact with the notification system without requiring software product  to be uninstalled and then reinstalled with support for the notification system (as may have been required using traditional testing solutions).","As another example, operating-system-level component  may include a device driver for a hardware device. In such embodiments, activating virtualization layer  may cause the hardware device to be accessible to software product . In other words, activating virtualization layer  may make a hardware device visible and accessible to software product  on computing system .","In some embodiments, operating-system-level component  may include a user profile. As used herein, the phrase \u201cuser profile\u201d generally refers to any collection of data associated with a specific user. In other words, a user profile may be a digital representation of a person's identity (e.g., including a name, username, logon credentials, and\/or other personal information), a person's preferences for configuration of a graphical user interface (e.g., placing shortcuts on a desktop, in a taskbar, in a notification area, in the start menu, within certain folders or interfaces, etc.), settings set by the user for one or more programs (e.g., functional settings that control the operation of a program, settings that control the look and feel of a program, bookmarks or shortcuts accessed by the program, etc.), operating system settings, and\/or any other settings or data that may be associated with a user.","In such embodiments, activating virtualization layer  may cause a user associated with the user profile (i.e., operating-system-level component ) to be logged onto computing system . In other words, when operating-system-level component  is a user profile, activating virtualization layer  may perform the same function as logging the user into computing system , but without going through a conventional authentication process (e.g., without entering a username and password, etc.).","As another example, operating-system-level component  may include one or more elements that define a domain state of a network domain. As used herein, the phrase \u201cdomain state\u201d may refer to any settings and\/or other information that identifies and\/or configures a network domain (e.g., enterprise network, home network, WINDOWS NT network, etc.) for a computing system. In such embodiments, activating virtualization layer  may cause computing system  to become part of the network domain associated with the domain state.","At step  in , one or more the systems described herein may test the software product while the virtualization layer is active to determine how the software product would function if the operating-system-level component was part of the base operating system. For example, test module   (which may, as detailed above, represent a portion of computing system  in ) may test software product  while virtualization layer  is active (i.e., enabled) to determine how software product  would function if operating-system-level component  was part of base operating system .","Test module  may test software product  in any suitable manner. For example, computing system  may include a software development environment (e.g., may be a computing device used by a software developer), and in such embodiments, test module  may test software product  by debugging software product . Test module  may additionally or alternatively perform a variety of other types of tests on software product  during development of software product . For example, test module  may test software product  by monitoring software product  and providing one or more reports on the behavior of software product .","Test module  may also test software product  in various other contexts. For example, a network administrator or other user may use test module  to test the configuration of an endpoint, such as computing system . In such embodiments, test module  may test software product  by determining whether software product  would function properly if operating-system-level component  was part of base operating system . Test module  may test whether software product  functions properly in a variety of different ways. For example, test module  may determine whether software product  functions properly when operating-system-level component  is active by determining whether software product  has conflicts with operating-system-level component , whether software product  interacts properly with operating-system-level component , whether software product  crashes or returns any other error when operating-system-level component  is active, and\/or by making any other suitable determination.","In the example where operating-system-level component  includes a set of registry entries, test module  may test software product  by determining whether software product  properly accesses the registry entries and\/or functions properly when the registry entries (e.g., which may be settings of software product ) are accessed by software product . Alternatively, test module  may test software product  when operating-system-level component  includes a set of registry entries by monitoring interactions between software product  and an additional software product on computing system  to determine whether software product  and the additional software product interact in an expected manner (i.e., without errors or other issues, in accordance with a predetermined set of criteria, etc.). In such embodiments, test module  may identify any irregularities and\/or errors in interactions between software product  and the additional software product.","In embodiments where operating-system-level component  is a device driver for a hardware device, testing software product  may include determining whether software product  is able to properly interact with the hardware device. For example, test module  may monitor software product  when it attempts to access the hardware device and may determine whether any errors or other issues arise when software product  attempts to access the hardware device.","In embodiments where operating-system-level component  includes all or a portion of a user's profile, test module  may test software product  by determining how software product  functions in the context of the user's profile. For example, a user profile may contain various settings and\/or other features that may enhance or conflict with software product . Testing module  may test software product  by determining whether and how the setting changes affect software product  and\/or may identify any conflicts or other issues that arise when the user profile is active. In this manner, test module  may be able to determine whether certain users will encounter problems if they log onto computing system  without actually having users log onto computing system . Furthermore, test module  may be able to quickly, efficiently, and effectively test how numerous user profiles function on computing system .","In the example where operating-system-level component  includes a domain state of a network domain, test module  may test software product  by determining whether software product  functions properly when computing system  is within the network domain.","At step  in , after the testing is complete, one or more of the systems described herein may deactivate the virtualization layer such that the operating-system-level component is no longer visible to the base operating system or the software product. For example, deactivation module  in  (which may, as detailed above, represent a portion of computing system  in ) may deactivate virtualization layer  such that operating-system-level component  is no longer visible to base operating system  or software product . As used herein, the phrase \u201cis no longer visible\u201d generally refers to the inability of a software product or operating system to access, view, and\/or otherwise use an operating-system-level component. Additionally or alternatively, the phrase \u201cis no longer visible\u201d may refer to calls from a software product or operating system no longer being redirected to the operating-system-level component. Access requests that had been redirected to virtualization layer  when it was active may be allowed to continue to base operating system  when virtualization layer  is inactive.","In embodiments where operating-system-level component  is a device driver for a hardware device, deactivating the virtualization layer may cause the hardware device to be inaccessible to software product . In embodiments where operating-system-level component  is a user profile, deactivating virtualization layer  may cause the user associated with user profile to not be logged onto computing system . In embodiments where operating-system-level component  comprises a domain state of a network domain, deactivating virtualization layer  may remove computing system  from the network domain associated with the domain state. Deactivating virtualization layer  may also cause various other settings, executable code, and\/or components of an operating system to become unavailable to base operating system  and\/or software product .","In some embodiments, operating system  may include an integrated component that corresponds to operating-system-level component  in virtualization layer . In one example, if operating-system-level component  is a registry key, base operating system  may include a conflicting registry key. As another example, if operating-system-level component  includes a device driver, base operating system  may include a conflicting device driver. Or if operating-system-level component  includes a user profile, base operating system  may include a conflicting user profile. In other words, the integrated component of base operating system  may conflict with operating-system-level component  in virtualization layer  if operating-system-level virtualization component  were integrated directly into operating system . In other words, if both the integrated component in base operating system  and operating-system-level component  were located in base operating system  at the same time, a conflict or other issues would arise rendering computing system  and\/or software product  unstable or unusable and\/or may result in errors or other problems when running software product .","Continuing with the previous example, test module  may test software product  while virtualization layer  is inactive to determine how software product  functions when the integrated component is part of the base operating system. Then, as an alternative, virtualization layer  may be activated and test module  may test operating-system-level component  with software product . Test module  may compare functionality of software product  when virtualization layer  is inactive (i.e., disabled) with functionality of software product  when virtualization layer  is active (i.e., enabled) to determine whether software product  functions better or more properly with operating-system-level component  or the component integrated into base operating system .","In another example, a second virtualization layer may be overlaid over virtualization layer . In this example, selection module  may select a second operating-system-level component with which software product  is to be tested. Isolation module  may isolate this additional operating-system-level component in the second virtualization layer, which may be distinct from base operating system  and\/or virtualization layer . The second virtualization layer may be activated such that access requests directed to base operating system  for the operating-system-level component are redirected to the second virtualization layer. Then, test module  may test software product  while the second virtualization layer is active to determine how software product  would function if the second operating-system-level component was part of the base operating system. In other words, two or more virtualization layers may be used with corresponding operating-system-level components to enable test module  to test various different operating-system-level components and\/or configurations by activating and deactivating corresponding virtualization layers.","Embodiments of the present disclosure may be able to test the functionality of a software product with a variety of different corresponding operating-system-level components without the need to install and uninstall such components or the need to uninstall and reinstall the software product. Thus, the systems and methods described herein may facilitate fast, efficient testing of software products using various (and numerous) settings, configurations, and environments. Furthermore, embodiments disclosed herein may enable virtualization with a high degree of granularity (e.g., as previously mentioned, virtualizing a single operating-system component), which may enable fast and efficient testing of numerous small changes in a system environment or software configuration.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIGS. 4 and 5","FIG. 4","FIG. 4"],"b":["202","210","216","212","202","401","402","406","408","216","216","202","408","216","408","406","408","406","210","406","108","110","114"]},"If a testing operation is to be handled using virtualization, layer manager  may create a layer (e.g., layer ) and layering system software  may redirect one or more file system or registry calls from software product  to layer , which may include one or more operating-system-level components. In some embodiments, test module  may automatically and autonomously (i.e., without user interaction and\/or intervention) manage a testing process and may direct layer manager  to create layer . In other embodiments, a user may be involved in managing and directing one or more steps in a testing process.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 5","FIG. 5"],"b":["202","202","210","108","212","510","216","108","502","212","214","510","504"]},"During a software test managed by test module , test module  may direct activation module  to activate virtualization layer . Test module  may then direct software product  to make a first access attempt  to access an operating-system-level component. First access attempt  may be intercepted by file system filter driver . With virtualization layer  activated, file system filter driver  may redirect access attempt  to virtualization layer  to access operating-system-level component , as shown in . In response to access attempt , software product  may be provided with access to operating-system-level component . Test module  may monitor software product  and determine how software product  functions with access to operating-system-level component .","Test module  may direct deactivation module  to deactivate virtualization layer , and may then direct software product  may make a second access attempt  to access an operating-system-level component. With virtualization layer  deactivated, file system filter driver  may allow access attempt  to pass directly to base file system  to access operating-system-level component , as shown in . In response to access attempt , software product  may be provided with access to operating-system-level component . Test module  may monitor software product  and determine how software product  functions with access to operating-system-level component . Test module  may then compare how software product  functions when accessing operating-system-level component  with how software product  functions when accessing operating-system-level component .","As discussed above, when a virtualization layer storing an operating-system-level component is enabled, the operating-system level component may overlay any corresponding files of a base file system and\/or base operating system. The base operating system may be presented with an expected view of data of a virtualized operating-system-level component by intercepting and manipulating file system calls to create the appearance that the virtualized operating-system-level component is from the base file system. File and registry calls may be manipulated by redirecting the calls to the virtualization layer rather than the base file system. In other words, virtualization software may intercept file system and\/or registry calls. If the virtualization layer containing the operating-system-level component is activated (e.g., enabled), the virtualization software may redirect such calls to the virtualization layer. If the virtualization layer is not activated, the virtualization software may allow such calls to pass through to the base operating system, as discussed above.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 6","b":["610","610","610","610","614","616"]},"Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein. For example, processor  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, selecting, activating, testing, deactivating, debugging, monitoring, determining, and comparing steps described herein. Processor  may also perform and\/or be a means for performing any other steps, methods, or processes described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may include both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below). In one example, one or more of modules  from  may be loaded into system memory .","In certain embodiments, exemplary computing system  may also include one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may include a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure . In certain embodiments, memory controller may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and\/or illustrated herein, such as identifying, selecting, activating, testing, deactivating, debugging, monitoring, determining, and comparing.","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface . I\/O controller  may be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, selecting, activating, testing, deactivating, debugging, monitoring, determining, and comparing steps described herein. I\/O controller  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network including additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network), a personal area network, a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, selecting, activating, testing, deactivating, debugging, monitoring, determining, and comparing steps disclosed herein. Communication interface  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , computing system  may also include at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also include at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, selecting, activating, testing, deactivating, debugging, monitoring, determining, and comparing steps disclosed herein. Input device  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , exemplary computing system  may also include a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (e.g., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also include other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","In certain embodiments, storage devices  and  may be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, selecting, activating, testing, deactivating, debugging, monitoring, determining, and comparing steps disclosed herein. Storage devices  and  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase \u201ccomputer-readable medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media (i.e., non-transitory media), such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.","The computer-readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 7","FIG. 6","FIG. 1"],"b":["700","710","720","730","740","745","750","710","720","730","610","710","100"]},"Similarly, servers  and  generally represent computing devices or systems, such as application servers or database servers, configured to provide various database services and\/or run certain software applications. Network  generally represents any telecommunication or computer network including, for example, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), or the Internet.","As illustrated in , one or more storage devices ()-(N) may be directly attached to server . Similarly, one or more storage devices ()-(N) may be directly attached to server . Storage devices ()-(N) and storage devices ()-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices ()-(N) and storage devices ()-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices ()-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between client systems , , and  and storage devices ()-(N) and\/or intelligent storage array  in such a manner that devices ()-(N) and array  appear as locally attached devices to client systems , , and . As with storage devices ()-(N) and storage devices ()-(N), storage devices ()-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client system , , and  and network . Client systems , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow client systems , , and  to access data hosted by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to client systems , , and  over network . Accordingly, network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, selecting, activating, testing, deactivating, debugging, monitoring, determining, and comparing steps disclosed herein. Network architecture  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As detailed above, computing system  and\/or one or more components of network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more steps of an exemplary method for using virtualization of operating-system-level components to facilitate software testing.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","While various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","In addition, one or more of the modules described herein may transform data, physical devices, and\/or representations of physical devices from one form to another. For example, one or more of the modules described herein may transform a computing system environment (e.g., including memory and\/or other hardware devices and structures on the computing system) during a testing process by activating and deactivating a virtualization layer that includes an operating-system-level component.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of.\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
