---
title: Apparatus for connection management and the method therefor
abstract: An apparatus and method for scheduling data distributions to or results information from, or collectively, “jobs” to a plurality of data processing systems via a network. A connection to a target system is created. For each distribution, a session, which is an independent thread, is allocated from one of a plurality of pool of sessions and launched to effect execution of the job. Each pool corresponds to a predetermined priority level, and the session is allocated from the pool having the same priority level as the priority level of the job being scheduled. A connection supports a multiplicity of independent threads. In the event of an error, the session is released, and the scheduling of the aborted job is retried after a predetermined retry interval expires. After expiry of the retry interval, a callback method is invoked when the target system on which the scheduled job is executed becomes accessible.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07418506&OS=07418506&RS=07418506
owner: International Business Machines Corporation
number: 07418506
owner_city: Armonk
owner_country: US
publication_date: 19991112
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["Related subject matter may be found in the following commonly assigned, co-pending U.S. patent applications, both of which are hereby incorporated by reference herein:","Ser. No. 09\/460,855, entitled \u201cAPPARATUS FOR DATA DEPOTING AND METHOD THEREFOR\u201d","Ser. No. 09\/460,853, entitled \u201cAPPARATUS FOR RELIABLY RESTARTING INTERRUPTED DATA TRANSFER AT LAST SUCCESSFUL TRANSFER POINT AND METHOD THEREFOR\u201d","Ser. No. 09\/438,437, entitled \u201cAN APPARATUS AND METHOD FOR DISTRIBUTING AND COLLECTING BULK DATA BETWEEN A LARGE NUMBER OF MACHINES\u201d and filed concurrently herewith;","Ser. No. 09\/458,268, entitled \u201cCOMPUTER NETWORK CONTROL SYSTEMS AND METHODS\u201d and filed concurrently herewith;","Ser. No. 09\/460,852, entitled \u201cMETHODS OF DISTRIBUTING DATA IN A COMPUTER NETWORK AND SYSTEMS USING THE SAME\u201d","Ser. No. 09\/458,269, entitled \u201cSYSTEMS AND METHODS FOR REAL TIME PROGRESS MONITORING IN A COMPUTER NETWORK\u201d;","Ser. No. 09\/460,851, entitled \u201cAPPARATUS FOR AUTOMATICALLY GENERATING RESTORE PROCESS DURING SOFTWARE DEPLOYMENT AND METHOD THEREFOR\u201d; and","Ser. No. 09\/460,854, entitled \u201cAN APPARATUS FOR JOURNALING DURING SOFTWARE DEPLOYMENT AND METHOD THEREFOR\u201d.","The present invention relates generally to data processing systems, and in particular, to bulk data distributions within networked data processing systems.","Present day data processing systems are often configured in large multi-user networks. Management of such networks may typically include the need to transfer bulk data to an endpoint system from a source system (or, simply, \u201ca source\u201d) and the collection of information, for example, error reports from a multiplicity of endpoints systems (or, simply, \u201cendpoints\u201d).","Such large data transfers may occur within a network, for example, to distribute software updates. The system administrator may need to allocate a specific period of time for the data transfer to more efficiently utilize network resources. This may typically occur when the communication load on the system is lowest, usually at night when most endpoint users are not working at their stations. The system administrator may load the bulk data and the corresponding transfer instructions onto the network system's source, or server, in preparation for the transfer. At the predetermined time set by the administrator, the server will push the data while ensuring that the bulk data is successfully transferred to each of the desired endpoint locations. However, during the transfer a portion of the system server is dedicated to the data transfer and thus unavailable for other networking tasks. Moreover, as the number of endpoints which must be simultaneously serviced by the bulk data distribution increases, network bandwidth demands are concomitantly increased. This complicates scalability of the bulk distribution systems.","Therefore, a need exists in the art for a bulk distribution mechanism that can transfer large amounts of data between network connected subsystems (or nodes) while maintaining scalability. Additionally, there is a need in such distribution mechanisms for methods and apparatus to distribute bulk data to a multiplicity of endpoints and to collect bulk data, including large log files, from the endpoints.","The aforementioned needs are addressed by the present invention. Accordingly, there is provided, in a first form, a connection scheduling method. The method determines if a job is available for scheduling. It is also determined if a session for effecting an execution the job is available. The session is included in a pool of sessions, in which the pool of sessions has a preselected one of a set of priority levels. The preselected priority level corresponds to a priority level of the job being scheduled for execution. If available, the session is launched to effect the execution of the job.","There is also provided, in a second form, a data processing system for connection scheduling. The system contains circuitry operable for determining if a job is available for scheduling. Also included is circuitry operable for determining, in response to the circuitry operable for determining if a job is available, if a session is available. The session is included in a pool of sessions, the pool of sessions having a preselected one of a set of priority levels corresponding to a priority level of the job. The session effects an execution of the job. The system also has circuitry operable for launching the session to effect the execution of the job, if the session is available.","Additionally, there is provided, in a third form, a computer program product embodied in a machine readable storage medium. The program product for job scheduling includes instructions for determining if a job is available for scheduling. The program product also contains instructions for determining, in response to the instructions for determining if the job is available, if a session is available, wherein the session is included in a pool of sessions, the pool of sessions having a preselected one of a set of priority levels corresponding to a priority level of the job. The session effects an execution of the available job. The program product also contains instructions for launching the session to effect the execution of the job, if the session is available.","The present invention is a method and apparatus for managing connections in a system for distributing and collecting data between an originating source system and a plurality of endpoint systems (which may also be referred to as \u201cendpoint nodes\u201d or simply \u201cendpoints\u201d). The method and apparatus provides a mechanism for managing a plurality of sessions, or threads, for sending a distribution to or receiving results information from the corresponding target machine. Sessions are allocated in accordance with a preselected distribution priority. Each distribution priority level has a predetermined number of sessions available to it in a corresponding sessions pool. By scheduling distributions on their priorities, large, low priority distributions will no longer \u201cbottleneck\u201d high priority small distributions.","According to the principles of the present invention, the present invention has an originating source system followed by repeaters. The use of repeaters allows data to be delivered essentially simultaneously to a large number of machines. The present invention can be scaled to handle more destinations by adding repeaters. In the following description, numerous specific details are set forth to provide a thorough understanding of the present invention. However, it will be obvious to those skilled in the art that the present invention may be practiced without such specific details. In other instances, well-known circuits have been shown in block diagram form in order not to obscure the present invention in unnecessary detail. For the most part, details concerning timing considerations and the like have been omitted inasmuch as such details are not necessary to obtain a complete understanding of the present invention and are within the skills of persons of ordinary skill in the relevant art.","A more detailed description of the implementation of the present invention will subsequently be provided. Prior to that discussion, an environment in which the present invention may be implemented will be described in greater detail.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIG. 1"],"b":"100"},"The network system  includes source system , one or more fan out\/collector nodes, or, repeaters , , , , and a plurality of endpoints -. Additionally, certain repeaters, such as  and , are directly connected to one or more endpoints, in the exemplary embodiment of , endpoints - or -, respectively, and may be referred to as \u201cgateway\u201d repeaters (or, simply, \u201cgateways\u201d).","Source system  provides distribution services with respect to resources -. Note that source system  and endpoints - interfaces to repeaters  and  using the same methodologies as repeaters  and  interface with, for example, repeaters  and . Viewed logically, source system  and endpoints - each may include a \u201crepeater.\u201d In other words, as an artisan of ordinary skill would recognize, a repeater may be a logical element that may be, but is not necessarily associated with a physical, stand-alone hardware device in network . Repeater  may be the primary repeater through which resources - receive their data transfers, and repeater , likewise, may primarily service endpoints -. The connection management methodologies described below in conjunction with  may be performed by repeaters , ,  and . It would be understood by an artisan of ordinary skill that additional repeaters may be inserted into the network and may be arranged in a multi-level hierarchy according to the demands imposed by the network size. Gateway repeaters  and  are such repeaters in the exemplary embodiment of .","However, network system  provides cross connections in order to provide redundant, parallel communication paths should the primary communication path to the endpoint become unavailable. For example, in , endpoint  has a primary pathway to source system  through repeaters  and . (A source system, such as source system  may also be referred to as a source node.) Should repeater  become unavailable, source system  can transfer bulk data to endpoint  via an alternative pathway through repeaters  and . Additionally, should repeater  become unavailable, endpoint  may receive data via repeaters  and . Source system  maintains database  for storing information used in managing a data distribution.","Referring next to , an example is shown of a data processing system  which may be used to implement a source system such as system , repeaters, such as repeaters , , , or  or endpoints, such as endpoints -, executing the methodology of the present invention. The system has a central processing unit (CPU) , which is coupled to various other components by system bus . Read only memory (\u201cROM\u201d)  is coupled to the system bus  and includes a basic input\/output system (\u201cBIOS\u201d) that controls certain basic functions of the data processing system . Random access memory (\u201cRAM\u201d) , I\/O adapter , and communications adapter  are also coupled to the system bus . I\/O adapter  may be a small computer system interface (\u201cSCSI\u201d) adapter that communicates with a disk storage device . Disk storage device  may be used to hold database , . Communications adapter  interconnects bus  with the network as well as outside networks enabling the data processing system to communicate with other such systems. Input\/Output devices are also connected to system bus  via user interface adapter  and display adapter . Keyboard , track ball , mouse  and speaker  are all interconnected to bus  via user interface adapter . Display monitor  is connected to system bus  by display adapter . In this manner, a user is capable of inputting to the system throughout the keyboard , trackball  or mouse  and receiving output from the system via speaker  and display .","Implementations of the invention include implementations as a computer system programmed to execute the method or methods described herein, and as a computer program product. According to the computer system implementation, sets of instructions for executing the method or methods are resident in the random access memory  of one or more computer systems configured generally as described above. Until required by the computer system, the set of instructions may be stored as a computer program product in another computer memory, for example, in disk drive  (which may include a removable memory such as an optical disk or floppy disk for eventual use in the disk drive ). Further, the computer program product can also be stored at another computer and transmitted when desired to the user's work station by a network or by an external network such as the Internet. One skilled in the art would appreciate that the physical storage of the sets of instructions physically changes the medium upon which it is stored so that the medium carries computer readable information. The change may be electrical, magnetic, chemical, biological, or some other physical change. While it is convenient to describe the invention in terms of instructions, symbols, characters, or the like, the reader should remember that all of these and similar terms should be associated with the appropriate physical elements.","Note that the invention may describe terms such as comparing, validating, selecting, identifying, or other terms that could be associated with a human operator. However, for at least a number of the operations described herein which form part of at least one of the embodiments, no action by a human operator is desirable. The operations described are, in large part, machine operations processing electrical signals to generate other electrical signals.","Refer now to  illustrating a connection management thread  which may be used in an embodiment of the present invention. Thread  may be used by repeaters, such as repeaters , , , and  of network , . Distributions or results information to be transferred by a repeater are enqueued in an output \u201cjob\u201d queue in accordance with the assigned priority of the distribution. (Distributions targeted for ultimate delivery to an endpoint and results information for a report-to system may collectively be referred to simply as \u201cjobs.\u201d) The transfer of distributions and results information is discussed in the commonly owned co-pending U.S. patent application entitled \u201cAn Apparatus and Method for Distributing and Collecting Bulk Data between a Large Number of Machines,\u201d incorporated herein by reference and as described herein, the distribution or results information may be assigned one of three priority levels, low, medium, or high, in an embodiment of the present invention. Distributions are enqueued in order of priority.","In step , the job queue is locked, and, while the job queue is not empty, step , jobs are scheduled until the queue is exhausted. When the queue is exhausted, in step  the output queue is unlocked, whereby new distributions received by the repeater may be enqueued for sending to a target repeater or end point, as appropriate. Scheduling is initiated, when, in step , the output job queue is no longer empty. Step  constitutes event loop, wherein scheduling is initiated in response to an event such as a \u201crunning job completed\u201d event. After a running job completes, a session, as described below, becomes available. A \u201cnew job\u201d event, signaling that a new job has arrived at the repeater performing thread  will also initiate scheduling.","Returning to step , while the queue is not empty, thread  proceeds through the queue to schedule distributions for sending to a target repeater or endpoint as appropriate. In step  it is determined if a current job is ready for scheduling. If not, in step  thread  proceeds to the next job. A job may be determined to be ready for scheduling by determining the job state. If the job state has a first predetermined value, which in an embodiment of the present invention may be referred to as \u201cWAITING\u201d, then the job is ready for dispatch. The setting of the job state for a particular job will be described below in conjunction with steps -, and , .","If, in step , the current job is ready for scheduling, in step  the session pools are searched. As indicated hereinabove, distributions may have one of three priorities, high, medium, or low. Each repeater has a pool of sessions, or threads, which are run to transfer data to a target system, either a target repeater or an target endpoint, as appropriate for the particular distribution. As discussed further below, a logical connection to the target system is established for a new job unless the connection is already present because of an ongoing distribution to the same target. A connection can have multiple logical sessions associated with it. Each new session between repeaters or a repeater and an endpoint will establish a network channel or path to transfer data, so between a repeater and an endpoint or another repeater, there can be multiple sessions to execute jobs. That is, there may be parallel data transfer to the same target.","Each distribution to or results information from a target machine \u201cconsumes\u201d a session from the pool of sessions available to the distribution or results information. Each repeater has a pool of sessions allocated for each priority level. A session is used by thread  to run a job on a preselected target. That is, a session initiates a data transfer through an establish network channel and waits for the target to finish processing data. Jobs are dispatched in order of priority, with higher priority jobs being dispatched preferentially over lower priority jobs. A higher priority job may obtain the session from the pool allocated to its priority, and successively lower priority pools as well.","A higher priority distribution may use sessions from its own pool first. If no sessions are found, then the distribution looks for sessions in the lower priority pools. This may be understood by referring now to  which illustrates in detail a methodology for performing step  in accordance with this protocol. In step , it is determined if the distribution has a high priority level. If not, then in step , it is determined if the distribution has a medium priority level. If not, then the distribution has a low priority, step  and, in step , it is determined if a low priority to low priority session is available. If a low priority session is available, then in step , methodology  signals that a session is available. Conversely, if no low priority sessions are available in step , in step  methodology  signals that no session is available.","Returning to step , if the job is determined to have a high priority, then in step  it is determined if a high priority session is available. If so, then methodology  proceeds to step . Otherwise, if a high priority session is unavailable, that is, fully used by other jobs, then in step  it is determined if a medium priority session is available. Again, if session is available, then step  is performed; otherwise, in step , it is determined if session allocated to the low priority pool is available. If so, step , then step  is performed; otherwise, no connections are available and methodology  proceeds to step .","Similarly, if in step , it has been determined that the job is not a high priority distribution, it is determined if the job has a medium priority, step . If not, it must again be a low priority job step , previously described. Otherwise, in step  it is a medium priority job, and in step  it is determined if a medium priority session is available. As before, if no medium priority sessions are available, it is determined if a low priority session is available, step . In this manner, a with a given priority level can use the number of sessions reserved for its priority level plus any sessions allocated to lower priority levels. If no sessions are available at the assigned priority or lower, the methodology signals no available sessions, step , as previously described.","Returning to , if, in step , it is determined a session is available to the job as reported in step , , then the session is reserved in step . Otherwise, if it is reported not available, step , , step  proceeds by the \u201cNo\u201d branch to step . Because, as previously described, jobs are enqueued in priority order, the unavailability of a session for the current job also means that the succeeding jobs cannot also be scheduled because they have a priority that is the same or lower than the current job. Thread  then loops in step  for an event indicating that a session has become available, which then triggers thread  via the \u201cyes\u201d branch in step . Similarly as discussed below, an \u201cUNREACHABLE\u201d state job may become available, whereby the state goes to \u201cWAITING\u201d, which will also trigger scheduling.","It is then determined in thread  if a connection object, or simply connection, has been established for the target system (which may also be referred to as a target node). Thus, in step , a connection list is searched to determine if a connection has been established for the target node. The connection list contains one or more connection objects that are a logical representation of a communication channel, or path, between the repeater running the thread and the target. A connection object maintains the status of the channel. For example if the channel breaks the status of the connection may change from a first value, say \u201cUP\u201d, to a second value, say \u201cDOWN.\u201d The connection object also includes all of the active sessions associated with the target.","If an existing connection does not exist, in step  a new connection object is created, and in step  a new session is created and run. Recall that a connection can have multiple sessions associated with it, and each session is a thread. For example, schematically shown in , is a repeater connection list with three connections, C-, C- and C-. Connection C- has two active sessions, S- and S-, running Job  and Job , respectively, for the target, repeater R-. similarly, connection C- has two sessions, S- and S- running Job  and Job , respectively on a target endpoint, E-. An exclusive session, S-, runs Job  on connection C-, for target endpoint E-. No other jobs will run on connection C- until S- ends. If, however, in step  a connection exists, it is determined if the connection is being exclusively used by a job, step . If the existing connection is exclusive, then the session reserved in step  is released, step  and thread  proceeds to step  to schedule the next job.","Returning to , the creation of a new session, in step , launches a session, which, in an embodiment of the present invention, may be session , . In step  it is determined if the target system is accessible. The target system may be inaccessible if, for example, the target system is unavailable or due to a network outage. If a target is inaccessible, in step  a retry thread is launched. This will be discussed subsequently in conjunction with  below. In step , thread  ends. If, however, in step  the target is accessible, in step  the job is executed, where data is transferred to the target and while the target is processing the data, waits and then posts results information to the repeater performing the session. Recall that repeaters transfer results information to one or more report-to nodes, as discussed in detail in the commonly owned co-pending U.S. patent application entitled \u201cAn Apparatus and Method for Distributing and Collecting Bulk Data Between a Large Number of Machines,\u201d (Ser. No. 09\/438,437) incorporated herein by reference. It is determined, in step , if the distribution is complete. If not, thread  returns to step . Otherwise, on completion of the execution of the distribution, again in step  the session is released and the thread ends in step .","Refer now to  describing retry thread  which may be launched in response to a distribution failure arising from the unavailability of the target in step  above. When an error occurs, the session used to run the job is returned to the corresponding pool. In step , thread  releases the session, whereby it is returned to the pool having the priority level of the session. In step  it is determined if a fatal error has occurred. For example, if the distribution segment, in executing the distribution in step  above, is too large to fit into an available disc space, a fatal error will result. If, in step , a fatal error has occurred in step , the job state is set to \u201cFAILED\u201d. In step , a results information segment is built which includes the job state. As described in the commonly owned co-pending U.S. patent application entitled \u201cAn Apparatus and Method for Distributing and Collecting Bulk Data between a Large Number of Machines\u201d incorporated herein by reference, results information is generated by repeaters and endpoint system and transmitted to one or more report-to systems. In the event of an error, the corresponding results information that is sent to one or more preselected report-to systems in accordance with the methodologies described in the aforesaid co-pending U.S. patent application may be generated in step .","Returning to step , if the error was non-fatal step  proceeds by the \u201cNo\u201d branch. If, in step , the target system was unavailable on the first attempt to connect to the target system, in step  the job state is set to \u201cUNREACHABLE\u201d. Otherwise, the connection has broken during the execution of the distribution, and in step  the job state is set to \u201cINTERRUPTED\u201d.","It is then determined in step  if a retry cutoff has been reached. Each connection has a predetermined connection retry time interval that is used to supply a maximum amount of time over which retries for failed jobs will be attempted. Additionally, in step  it is determined if an application was specified \u201cno retry.\u201d A user, for example, may wish to take corrective action quickly rather than wait for a predetermined number of retries to elapse before receiving notification that the distribution has failed. If the connection retry interval has elapsed, \u201cno retry\u201d is specified, in step , the \u201cYes\u201d branch is followed. In step , the job state is tested, and if \u201cUNREACHABLE,\u201d then the job fails and the job state is set to \u201cFAILED\u201d in step . Otherwise, step  proceeds to step .","In step  the job state is set to \u201cUNREACHABLE\u201d and a login callback method is registered with the corresponding gateway of the target endpoint system. The login callback will be invoked and a login notification thereby provided to the repeater performing management thread . Thread  proceeds to step , discussed below.","If the target system is a repeater rather than an endpoint, there is no retry cutoff because there is no login event from repeaters. Thus, if the target system is a repeater, step  proceeds by the \u201cNo\u201d branch to step  and in step  a retry timer thread is launched, bypassing step . Likewise, if the target is an endpoint system and the retry cutoff has not expired, step  proceeds by the \u201cNo\u201d branch.","Referring now to , there is illustrated therein retry timer thread . In step  retry timer is started. In step  it is determined if the retry timer has expired. If not, thread  loops until the timer expires and then, in step , on expiration of the timer the job state is set to \u201cWAITING\u201d. In step , timer thread  ends.","Returning to , after launching the retry timer thread, in step , thread  proceeds to step . In step , it is determined if the job state is \u201cWAITING\u201d or \u201cFAILED.\u201d The job state may be set to \u201cWAITING\u201d in step , . If so, then thread  notifies thread , , signaling an event whereby thread  breaks out of the event loop, step , and terminates, step . Otherwise, in step  thread  loops until the endpoint logs in and, in step , the job state is set equal to \u201cWAITING,\u201d and again notifies thread  in step .","Returning to  after the job state is set to \u201cWAITING\u201d in step ,  or in step , , depending on the path followed in step , , step  of thread  then determines that the distribution that launched error handling thread  is ready for scheduling, and then initiates a session to execute the distribution in steps -, as previously described.","Although the present invention and its advantages have been described in detail, it should be understood that various changes, substitutions and alterations can be made herein without departing from the spirit and scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, and the advantages thereof, reference is now made to the following descriptions taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3C","FIG. 3B"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
