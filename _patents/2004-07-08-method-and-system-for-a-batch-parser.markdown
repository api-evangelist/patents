---
title: Method and system for a batch parser
abstract: A method of generating commands for a database server includes accessing a script having parser-specific commands, a first set of database-specific commands and optional shell commands. A componentized batch parser splits out the different command types and converts the parser-specific commands into a second set of database-specific commands. The first set and second set of database-specific commands may be sent to a target database for execution. The optional shell commands may be executed by a user tool at a local console. The batch parser offers features including separation of parsing functions using batch separators, performing automatic substitution of tokens in the script with defined values or substitution of tokens by requesting token values via a client tool, stripping off comments and blanks spaces from processed commands, referencing and editing files outside the script, and the ability to connect to different servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07712088&OS=07712088&RS=07712088
owner: Microsoft Corporation
number: 07712088
owner_city: Redmond
owner_country: US
publication_date: 20040708
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","EXAMPLE SCRIPT 1","EXAMPLE SCRIPT 2"],"p":["This invention relates in general to the field of parsing computer inputs. More particularly, this invention relates to a componentized, reusable batch parser for computer software applications.","Many software programs that accept user-generated inputs to process instructions include a parser as a basic feature of the software front end. A parser analyzes a sentence or language statement and breaks down words and symbols into functional units that can be converted into machine language. Many software programs have customized parsers written specifically for the purpose of the application where they reside. Thus every time a new application is authored, the parser may also require a rewrite because the embedded and customized parser written in a former application is too specific to the embedded application for generalized new use. This occurs frequently when parsers are embedded into compilers. A reusable and portable parser that is componentized could have benefits with respect to easing the programming burden associated with new applications and the added benefit of user familiarity from one new application to the next.","In a multiple database environment, programmers may be asked to make updates to multiple databases. Input statements to such applications as database management tools are often complex if programmers are asked to make multiple database changes. It is desirable to establish a more time and effort efficient technique of performing such multiple tasks with a single input script. For example, given an environment in which a user has to update one thousand rows of data on three separate servers, each server having five databases, the input statement can be quite large. In this instance, the user may have to generate a script that supplies the 1000 data changes, connect to a first server, run the script five times, once for each database on the server, disconnect from the server, connect to a second server, run the script another five times, once for each database, disconnect from the server, connect to a third server, and run the script another five times for the five databases in the third server. If the script being used is executed in a linear fashion, the user must generate at least 15,000 script lines; 1000 data change lines for three servers, each having five databases. Clearly, such script generation is a burden on the programming user. However, if a user were to create a generic script that contained special constructs understood by a script execution environment, this extra work of duplicating data 15 times could be saved. In that instance, a special parser may be needed in the execution environment to understand these special constructs. Although each execution environment can implement its own parser, such an approach could be unnecessarily costly and error prone because different implementations of the environment and the parser would behave slightly differently.","Thus, there is a need for a reusable componentized parser for use in a multiplicity of different applications. In addition, it would also be useful for the componentized parser to have features that further lessen the burden on programmers to provide extensive input statement simplifications in order for the parser to perform multiple tasks easily. The present invention addresses the aforementioned needs and solves them with additional advantages as expressed herein.","An embodiment of the invention includes a method to processes any batch language script containing special instructions for a batch processor. The script contains both target database commands and batch parser-specific commands. The batch parser automatically separates input script into parser-specific commands and database-specific commands and is able to execute the parser-specific commands to perform special functions. The special functions include separation of parsing functions using batch separators, performing automatic substitution of tokens in the script with defined values or substitution of tokens by requesting token values via client code, stripping off comments and blanks spaces from processed commands, referencing and editing files outside the script, and the ability to connect to different servers.","In one embodiment, a batch parser is able to provide database-specific commands to a target database for execution. The full set of database-specific commands that may be sent to the target database may include both explicit database-specific commands found in the input script and batch parser generated database commands which result from script commands to the parser. In one embodiment, the batch parser can reference and even permit editing of a reference file with a local text editor. Final database-specific commands resulting from the parser may be viewed and edited before being sent to the database target.","Overview","An embodiment of the invention provides a component that can greatly simplify the manageability of a database server by providing a uniform batch language processing environment for script development and execution. The component can be embedded into any application and thus increase its versatility to a user.","In one embodiment, a batch parser can provide segregation of command types allowing database-specific commands to be routed to a database, batch parser-specific commands to be routed to the batch parser for interpretation and subsequent script generation, and client tool based commands to be routed to and executed by the client tool. Special features add flexibility to the batch parser and enhance its appeal as a component that is useful for script generation in a database environment.","Exemplary Embodiments of the Invention",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1","FIG. 1"],"b":["100","140","145","150","125","130","135","105"]},"The exemplary embodiment of  depicts a script  which can serve as an instruction input to a tool . In one embodiment, the tool may be a tool which is commonly useful in accessing database information. Examples of such tools may be, for example, a SQL user interface program, such as a command line tool, a SQL Management Object (SMO) application, a Data Translation Services application, an NT Service, and an SAP application. All of these example tools have database access capability and may use aspects of the current invention.","The tool  can input the script  and pass the script to a batch parser  for interpretation of the instruction on the script. The batch parser  can input the script information via link . In the embodiment of , the batch parser is a component that can processes any batch language script  containing special instructions, such as tokens and commands to the batch parser itself. The parser can automatically split the script  text into batches allowing for any customer defined batch separator to define the batch size. The batch parser  may also optionally strip out comments and blanks present in the script .","In one embodiment, the batch parser  also allows a caller to provide automatic replacement of tokens. The tokens may have been previously defined or they may be replaced through dynamic substitution. The batch parser  can also execute special commands as they are encountered in the script. In one embodiment, the batch parser component is written as native C++ and managed NET class library.","In one embodiment, the batch parser  may separate out database commands from local batch parser commands. The batch parser commands may, for example, execute special commands requesting a substitution of tokens with code that allows a full list of database commands to be developed to manage the multiple tasks that the users wishes to be accomplished. Once the batch commands are generated, then the original script database commands and the newly generated database commands are assembled and moved out of the parser  via link  and given back to the tool . The tool may then send the fully assembled commands to a network interface  via link  for controlled distribution to server A, , server B, , and server C,  to access the respective database banks , , and .",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["200","205","210","215","217","220","225"]},"An example script in accordance with the example given in  may be as follows:",{"@attributes":{"id":"p-0022","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["set svr_name=server a","set db_name=db1",":r \u201cmyscript\u201d","set db-name=db2",":r \u201cmyscript\u201d","set db_name=db3",":r \u201cmyscript\u201d","set db-name=db4",":r \u201cmyscript\u201d","set db_name=db5",":r \u201cmyscript\u201d","set svr_name=server b","set db_name=db1",":r \u201cmyscript\u201d","set db-name=db2",":r \u201cmyscript\u201d","set db_name=db3",":r \u201cmyscript\u201d","set db-name=db4",":r \u201cmyscript\u201d","set db_name=db5",":r \u201cmyscript\u201d","set svr_name=server c","set db_name=db1",":r \u201cmyscript\u201d","set db-name=db2",":r \u201cmyscript\u201d","set db_name=db3",":r \u201cmyscript\u201d","set db-name=db4",":r \u201cmyscript\u201d","set db_name=db5",":r \u201cmyscript\u201d\n\nThis example script uses the grammar :r to invoke a batch parser command. The example script uses the database update file \u201cmyscript\u201d and sends it to five databases in each of three servers. In this example, the file myscript (not shown) is a set of database commands that is 1K in size. The example indicates the ease with which a user can accomplish the task of distributing the 1K database command file script to 15 different databases using an economy of user programming time and script storage space.\n"]}},"In another aspect of the invention, a token grammar $(database_name) may be used to prompt the batch parser to make substitutions for a token. A brief example script may be:",{"@attributes":{"id":"p-0024","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":[":SetVar server_name=svr1",":SetVar db_name=pubs","Connect $(server_name)","Use $(db_name)\n\nThe last two statements are examples of the dynamic substitution of tokens. First, server_name token will get its value during execution of the Connect command. Second, db_name will be interpreted in the context of Use command.\n\nAn additional example sustitution follws:\n    \n    "]}},{"@attributes":{"id":"p-0025","num":"0069"},"figref":["FIG. 3","FIG. 3"],"b":["300","300","320","312","317","320","310","322","324","325","330","335"]},"In one embodiment, the set parse mode action call  from the tool  sets up the batch parser  for modes which include recognizing variables, commands, and batch delimiters, recognizing only batch delimiters, or recognizing only variables. An additional mode also allows for a software reset to clean up internal batch parser states in preparation for a new parse.","The set batch delimiter action call  sent from the tool  to the batch parser  is a method for setting a specific batch delimiter definition. Typically, this may be a symbol or character(s) such as \u201cgo\u201d selected by the user. This symbol is used by the batch parser  to indicate the separation of one batch from another. The set batch source action call  is used to feed parser instruction data into the batch parser . The set command executer  is an action call to process the batch parser commands received via the batch source call . The set variable resolver call  allows the variable resolver interface to activate when a specific variable is needed from the user. The parse call  activates the parsing activity. This call can simulate the action of receiving a batch delimiter when parsing of a batch may proceed.","In the same embodiment, the batch parser  has three call back indicators; get more data , resolve variable  and process batch  whose names are descriptive of the call back actions. The get more data  call back can request more data of the IBatchSource  module in the tool . The get more data call  is used when the batch parser requests new data of the IvariableResolver module  of the tool . The resolve variable call back  is used when a specific variable value is requested of the user. The process batch call back  is used when the batch process requires the activation of the ICommandExecuter module  of the tool  to operate a batch execution. The specific exemplary software modules will be discussed further below.","In one embodiment, the batch parser component allows a user to perform multiple special functions or operations. One function is to split the input script into batches using any specified batch separator token as well as execute any batch a specified number of times. An example sequence is:\n\n","In another aspect, the invention can automatically substitute tokens whose values were previously defined in the input script. In this aspect, a grammar of the tokens or markers can be expressed as $(server_name) and performs token replacement. For example, the following is batch parser language:\n\n","In another aspect of the invention, an interactive or dynamic substitution can be made by the batch parser for input script by calling back to the software client tool user to assist in filling in the values for one or more variables the batch parser script requests. This call back to substitute unknown variables is made at run time and can be implemented using the IVariableResolver interface .","In another aspect of the invention, comments added to the input script for user readability are removed along with blank spaces and the comments are not returned for distribution to the database server via the tool. This aspect hides undesirable comments from downstream users and allows the user to minimize network traffic and thus can provide high performance batch processing on the database server supported by the tool.","In another aspect of the invention, the batch processor enables the referencing and inclusion of other files within the script. This aspect allows the caller a way to modify the currently processed script before it is executed. In addition, the batch parser enables the editing of the referenced files by permitting the call of a text editor of choice. This optional in-place modification of referenced files provides a useful flexibility in the programming environment. This aspect of the invention also allows the batch parser to ask the application to provide a modified context to the tool user interface. For example, the editor can show a user the result that could be obtained and that would be available to send to a tool database server before the batch script is actually run and results sent back to the tool for database distribution. In addition, the changes to the referenced file can be bound such that as the user changes the result of the file, the batch process script can change to realize the change in the reference file.","In another aspect of the invention, the batch parser can request execution of any shell command while processing the input script. This aspect is invoked via an ExecuteShellCommand call. This aspect allows an instruction, from a command line tool, for example, to be executed by the host tool. An example of this aspect would be the execution, with the batch parser script, of a host defined command to run a non-database command at a user console or terminal. A simple example would be the execution of a \u201cdir\u201d DOS-like command as part of the input script.","In another aspect of the invention, the batch parser can cause a script to connect to a different server specified in the script. This aspect is invoked via a Connect call. Use of this action can enable the batch parser to generate script to connect to various servers as shown in the example of .","In another aspect of the invention, the batch parser can redirect normal and error output to a different destination through a script command. This aspect permits the batch parser to call the Output to allow storage or display of normal scripting generation or error messages on a host system rather than a target database management system.","In one exemplary implementation, the batch parser component uses the following class definitions and interfaces:",{"@attributes":{"id":"p-0038","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class BatchParser"},{"entry":"{"},{"entry":"public:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BatchParser( );"]},{"entry":[{},"~BatchParser( );"]},{"entry":[{},"\/\/ ParseMode can have one of the following values"]},{"entry":[{},"\/\/ RecognizeAll -- recognizes variables, commands, batch delimiter"]},{"entry":[{},"\/\/ RecognizeOnlyVariables -- recognizes only variables"]},{"entry":[{},"\/\/ RecognizeOnlyBatchDelimiter -- recognizes only batch delimiter"]},{"entry":[{},"void SetParseMode(ParseMode pm);"]},{"entry":[{},"\/\/cleans up internal state and prepare for a new parse"]},{"entry":[{},"void Cleanup( );"]},{"entry":[{},"\/\/ set new batch delimiter, default is GO"]},{"entry":[{},"void SetBatchDelimiter(const wchar_t* szBatchDelimiter);"]},{"entry":[{},"\/\/ set batch source interface : used for feeding text in"]},{"entry":[{},"void SetBatchSource(IBatchSource* pIBatchSource);"]},{"entry":[{},"\/\/ set command executer interface: processes commands and batches"]},{"entry":[{},"void SetCommandExecuter(ICommandExecuter*"]},{"entry":[{},"pICommandExecuter);"]},{"entry":[{},"\/\/ set variable resolver interface"]},{"entry":[{},"void SetVariableResolver(IVariableResolver* pIVariableResolver);"]},{"entry":[{},"\/\/ start parsing. flushBatchBuffer flag simulates batch delimiter"]},{"entry":[{},"when"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"equals true"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ParserState Parse(bool flushBatchBuffer);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"A client has to implement the following three interfaces required by"},{"entry":"BatchParser component"},{"entry":"interface IBatchSource"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ called by Parser when new data is need"]},{"entry":[{},"\/\/ when buff = 0 and cbLength = 0 the parsing ends."]},{"entry":[{},"ParserAction GetMoreData(wchar_t** buff, size_t* cbLength);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"interface IVariableResolver"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Parser requests specific variable value from the user"]},{"entry":[{},"ParserAction ResolveVariable(const wchar_t* varName, const"]},{"entry":[{},"wchar_t**"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"varValue);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Command to delete a variable has been encountered"]},{"entry":[{},"ParserAction DeleteVariable(const wchar_t* varName);"]},{"entry":[{},"\/\/ Does user want to take ownership of the variable or let parser"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"handle it."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ParserAction ResolveVariableOwnership(const wchar_t* varName,"]},{"entry":[{},"const"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"wchar_t* varValue, bool* bTakeOwnership) = 0;"},{"entry":"};"},{"entry":"interface ICommandExecuter"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Number of times to execute batch"]},{"entry":[{},"ParserAction ProcessBatch(const wchar_t* batch, int num);"]},{"entry":[{},"\/\/ discared statement cache"]},{"entry":[{},"ParserAction Reset( ) = 0;"]},{"entry":[{},"\/\/ In-place editing of script"]},{"entry":[{},"ParserAction Ed(const wchar_t* batch, IBatchSource**"]},{"entry":[{},"ppIBatchSource);"]},{"entry":[{},"\/\/ Source returned by Ed call has been parsed and can now be"]},{"entry":[{},"freed"]},{"entry":[{},"ParserAction EdDone(IBatchSource* pIBatchSource);"]},{"entry":[{},"\/\/ Execute shell command within environment"]},{"entry":[{},"ParserAction ExecuteShellCommand(const wchar_t* command) = 0;"]},{"entry":[{},"\/\/ Exit environment"]},{"entry":[{},"ParserAction Quit( );"]},{"entry":[{},"\/\/ Exit but execute the last batch, return first column and first"]},{"entry":[{},"row"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"of the resultset"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ParserAction Exit(const wchar_t* batch, const wchar_t*"]},{"entry":[{},"exitBatch);"]},{"entry":[{},"\/\/ include file"]},{"entry":[{},"ParserAction IncludeFileName(const wchar_t* fileName,"]},{"entry":[{},"IBatchSource**"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ppIBatchSource);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ File has been parsed at the source and can now be released"]},{"entry":[{},"ParserAction IncludeFileNameDone(IBatchSource*"]},{"entry":[{},"pIBatchSource);"]},{"entry":[{},"\/\/ List servers available on the network"]},{"entry":[{},"ParserAction ServerList( );"]},{"entry":[{},"\/\/ Print content of the statement cache"]},{"entry":[{},"ParserAction List(const wchar_t* batch);"]},{"entry":[{},"\/\/ List variable value"]},{"entry":[{},"ParserAction ListVar(const wchar_t* varList);"]},{"entry":[{},"\/\/ Set destination for the error output"]},{"entry":[{},"ParserAction Error(OutputDestination od, const wchar_t*"]},{"entry":[{},"fileName);"]},{"entry":[{},"\/\/ Redirect query results"]},{"entry":[{},"ParserAction Out(OutputDestination od, const wchar_t*"]},{"entry":[{},"fileName);"]},{"entry":[{},"\/\/ Redirect performance trace"]},{"entry":[{},"ParserAction PerfTrace(OutputDestination od, const wchar_t*"]},{"entry":[{},"fileName);"]},{"entry":[{},"\/\/ Connect to a different server within environment"]},{"entry":[{},"ParserAction Connect(int timeout, const wchar_t* server, const"]},{"entry":[{},"wchar_t*"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"user, const wchar_t* password);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ How to handle script errors"]},{"entry":[{},"ParserAction OnError(ErrorAction ea);"]},{"entry":[{},"\/\/ Switch XML mode on\/off"]},{"entry":[{},"ParserAction Xml(XmlStatus xs);"]},{"entry":[{},"\/\/ Print list of supported commands"]},{"entry":[{},"ParserAction Help( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0039","num":"0089"},"figref":"FIG. 4"},"Although not required, embodiments of the invention can also be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0041","num":"0091"},"figref":"FIG. 4","b":["400","400","400","400"]},"With reference to , an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer system  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, Random Access Memory (RAM), Read Only Memory (ROM), Electrically Erasable Programmable Read Only Memory (EEPROM), flash memory or other memory technology, Compact Disk Read Only Memory (CDROM), compact disc-rewritable (CDRW), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer system , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer system  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM, CDRW, DVD, or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer system . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer system  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory (not shown). In addition to monitor , computer systems may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer system  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer system , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer system  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer system  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer system , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET\u2122 platform, available from Microsoft Corporation, includes servers, building-block services, such as Web-based data storage, and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of an embodiment of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between any of a coprocessor, a display device and a requesting object, such that operation may be performed by, supported in or accessed via all of .NET\u2122's languages and services, and in other distributed computing frameworks as well.","As mentioned above, while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to implement a componentized batch server. Thus, the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent systems and methods achieved by embodiments of the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the signal processing services of an embodiment of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While aspects of the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Therefore, the claimed invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of exemplary embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating embodiments of the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
