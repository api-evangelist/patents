---
title: Floating debugger
abstract: Floating or movable windows are provided to display information during debugging, either above the source code, or attached to the source code in the locations that they are relevant to. The floating windows can be semi-transparent in order to allow visibility to both the information in the window and the underlying information such as source code. The windows have different behavior, location, and look, depending on the type of information displayed in window and its relation to the underlying code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07434207&OS=07434207&RS=07434207
owner: Microsoft Corporation
number: 07434207
owner_city: Redmond
owner_country: US
publication_date: 20020702
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE\/PERMISSION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings hereto: Copyright\u00a9 2002, Microsoft Corporation, All Rights Reserved.","This invention relates in general to the field of software. More particularly, this invention relates to debuggers.","To manage the complexity of long computer programs, computer programmers often adopt object-oriented programming techniques. With these techniques, a computer program is organized as multiple smaller modules called objects. An object is a unit of code comprising both routines and data and is thought of as a discrete entity. These objects perform specified functions and interact with other objects in pre-defined ways. Objects communicate with each other through interfaces. Each object may have multiple interfaces. An interface exposes and defines access to the object's public routines and data. Put another way, an interface can be considered as the definition of an expected behavior and expected responsibilities. One of the advantages to interfaces is that a client object can continue to access the methods of a server object that are exposed through the interface, regardless of whether the underlying code in the object is updated or changed for another reason.","One of the primary benefits of object-oriented programming is that the objects can be easily and affordably adapted to meet new needs by combining them in a modular fashion. The structural foundation for an object-oriented language is the object model. The Component Object Model (COM) produced by Microsoft Corporation of Redmond, Wash., is an example of an object model.","A debugger is a program that is used to monitor execution and find errors in other programs. A user such as a developer uses a debugger to stop a program at any point and to examine and change the values of variables.","A screenshot of a conventional debugger is shown in . Typically, debuggers show state information about the variables and objects in a program in windows, such as an autos window , a locals window , and a watch window . These windows are docked to the bottom of the development environment (i.e., the display screen ), and are not movable. Because of this, a user must shift his gaze back and forth between the code window  and the state information windows , ,  in order to correlate where the program is executing with information about the code being executed.","Moreover, in a conventional debugger, a user has to scroll within a window (i.e., drill down through a tree via scrolling). For object-oriented languages, when the user wants to look at an object in one of the debugger windows, he needs to expand the object to see the sub-members. This expansion of the object is typically done in the manner of an expandable tree view. When the list of object members is larger than can fit in the window, the user must scroll the window to see all the relevant members.","Conventional debuggers supply a watch window (such as watch window ) where expressions can be typed by a user and evaluated. The watch window is used for viewing expressions entered by a user, which may be a variable name, or a complex expression involving multiple operations and function calls. A problem is that the conventional debugger supplies only one window or a limited number. As a watch is only valid when arguments within its expression are in scope, during a debugging session a user may need a large number of watches, of which only a small number are valid at a point in the source code.","In view of the foregoing, there is a need for systems and methods that overcome the limitations and drawbacks of the prior art.","The present invention overcomes these problems by providing floating or movable windows in a debugger. The debugging windows can be located either at a predetermined position within the source code window or at a position determined by the user. The floating windows can be semi-transparent in order to allow visibility to both the information in the window and the underlying information such as source code. The locality of the debugging information is thus closely tied to the locality in source code.","According to aspects of the invention, each debugging window comprises an autos window, a locals window, or a watch window, and the debugging window is locked on the display after it has been moved.","According to further aspects of the invention, the debugging window comprises a pop-up window, and provides an indication that a related pop-up window is available. The related pop-up window preferably comprises pull-down expansion.","According to another aspect of the invention, the debugging window is bounce-contained within the code window.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying drawings.","Overview","The present invention is directed to systems and methods that provide floating or movable windows in a debugger. The present invention can be implemented in a variety of languages and tools such as MICROSOFT VISUAL BASIC, MICROSOFT VISUAL C++, MICROSOFT VISUAL FOXPRO, all produced by Microsoft Corporation of Redmond, Wash. Moreover, the invention can be used with other languages, tool, and object models (e.g., objects designed according to a specification such as the Common Object Request Broker Architecture (CORBA) which provides a standard messaging interface between distributed objects or according to Sun Microsystems' Java specifications).","The present invention improves a user's debugging experience for source code. Conventionally, debuggers show state information about a program's variables and objects in windows that are docked to the bottom of the development environment (i.e., the display screen). A user must shift his gaze back and forth between the code window and the state information windows in order to correlate where the program is executing with information about the code being executed. The present invention shows the expressions and information in floating or movable windows, either above the source code, or attached to the source code in the locations that they are relevant to. The floating windows can be semi-transparent in order to allow visibility to both the information in the window and the underlying information such as source code. The windows have different behavior, location, and look, depending on the type of information displayed in window and its relation to the underlying code.","The present invention provides a user with easier access to the data about the variables in his program, close to where the variables are used. The debugger interface also provides the ability for watches of specific expressions to be pinned to the source code so that the watch is visible along with the source code. The locality of the debugging information is thus closely tied to the locality in source code.","Exemplary Computing Environment",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules and other data may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and non-volatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or non-volatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, non-volatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, non-volatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, non-volatile optical disk , such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/non-volatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Exemplary Distributed Computing Frameworks Or Architectures","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's NET platform includes servers, building-block services, such as Web-based data storage and downloadable device software. Generally speaking, the .NET platform provides (1) the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them, (2) increased interactive capability for Web sites, enabled by greater use of XML rather than HTML, (3) online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications, such as e-mail, for example, or software, such as Office .NET, (4) centralized data storage, which will increase efficiency and ease of access to information, as well as synchronization of information among users and devices, (5) the ability to integrate various communications media, such as e-mail, faxes, and telephones, (6) for developers, the ability to create reusable modules, thereby increasing productivity and reducing the number of programming errors, and (7) many other cross-platform integration features as well.","While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between a coprocessor and requesting object, such that the debugging of the present invention may be performed by, supported in, or accessed via all of .NET's languages and services, and in other distributed computing frameworks as well.","Exemplary Embodiments",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["340","350","310","320","330","310","320","330","340"]},"A user can select a debugging window to move by clicking on the window and dragging it to the desired location on the display. After the window is released by the user, it is locked into place. It is contemplated that the user can re-select a debugging window and move it to another location on the display at a later time. Thus, once a window is dragged and moved, it becomes fixed, but optionally can be moved at a later time by the user or the underlying debugger application. In , the windows , ,  are shown as being disposed within the code window . Thus, with the present invention, windows containing information that a user may want to monitor can be shown close to the code in the debugger, or anywhere on the display screen that the user chooses. Moreover, because the invention allows a user to remove the docked windows, more useable display area on the display screen  is achieved.","According to an embodiment, each of the windows , ,  is semi-transparent, so that information in the underlying portion of the code window  is visible to the user, in addition to the information being displayed in the windows , , .","The autos window  is a window that shows the variables and expressions that are used in the statement at the instruction pointer, and desirably the lines above and below that statement. It therefore preferably shows the most relevant variables for debugging at that point in the code. In other words, the autos window  shows variables that are most applied to what is being used. The autos window preferably floats near the current statement. As such, the autos window  is preferably positioned next to the statement at the instruction pointer.","The locals window  shows the local variables for the routine that is being run. In other words, the locals window  shows the local variables that are in scope for the instruction pointer. Because the scope of the variables is governed by the procedure they reside in, the locals window  is preferably shown in a semi-transparent window over the code window , next to the beginning of the function declaration, or scoping construct for the variables. According to an embodiment, if the scoping construct is not visible, because it is scrolled off screen, then the pane of the locals window  bounces at the top or bottom of the code window , depending on the direction the source is scrolled. Thus, the locals window  will bounce if taken off screen. Preferably, the locals window  is implemented as a pop-up window.","The watch window  is also floating and is used for viewing user defined expressions, such as a global variable. The watch window  can be created and pinned to the document, so when the document moves, the watch window moves with it. Most debuggers supply a watch window where expressions can be typed and evaluated. A problem is that the conventional debugger supplies only one window or a limited number. As a watch is only valid when arguments within its expression are in scope, during a debugging session a user may need a number of watches, of which only a small number are valid at a point in the source code. According to an embodiment, the present invention solves the problem by enabling the user to create watch panes that can be pinned to the source code. When the source code is scrolled, the watch pane scrolls with it. Thus, the developer can have many watches, all of which are maintained along with the source that they apply to.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 4","FIG. 3","FIG. 4"],"b":["310","320","312","314","330","330"]},"For object-oriented languages, when a user such as a developer wants to look at an object in one of the debugger windows, he needs to expand the object to see the sub-members. That is conventionally done in the manner of an expandable tree view. According to an embodiment of the invention, expanding an object is performed with the use of a pop-up window, such as a pop-up window . Another pop-up window, such as pop-up window , may be accessible from the first pop-up window . If a window or an item is expandable, an indication is provided, and it can be popped up. If an item in a window is not expandable, the user preferably can select the item (e.g., by clicking on the item) and the item desirably becomes a text value that can be edited.","If the user wishes to continue to view the members of the object, he can drag off the pop-up and turn it into a persistent window. The window can then be pinned to the source code to scroll, if desired.","Preferably, the pop-up windows contain graphical visuals, rather than just names and codes (texture). The graphical visuals desirably comprise a visual view that replaces a textural representation. Pop-up window  in  shows such an exemplary view for the color type so that is is shown as a color picker. The replacement view can be registered against object types using the Custom Attribute mechanism for assembly metadata provided by the .NET runtime, for example. Preferably, each pop-up window is semi-transparent so the user can view the underlying information residing on the display.","As mentioned above, while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to provide debugging capability. Thus, the interface for debugging in accordance with the present invention may be applied to a variety of applications and devices. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the debugging interface aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object-oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the debugging capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally, any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example, one skilled in the art will recognize that the present invention as described in the present application may apply to any computing device or environment, whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Still further, the present invention may be implemented in or across a plurality of processing chips or devices, and storage may similarly be effected across a plurality of devices. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
