---
title: Data storage device configured to reduce buffer traffic and related method of operation
abstract: A method is provided for performing a write operation in a data storage device comprising a storage medium, a processing unit, and a buffer memory storing data to be transferred to the storage medium under control of the processing unit. The method comprises aggregating data in the buffer memory as a strip group comprising multiple data strips, transferring data strips in at least one strip group to the storage medium, calculating a parity strip based on the transferred data strips of the at least one strip group without additional access to the buffer memory, and transferring the parity strip to the storage medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694865&OS=08694865&RS=08694865
owner: Samsung Electronics Co., Ltd.
number: 08694865
owner_city: Suwon-si, Gyeonggi-do
owner_country: KR
publication_date: 20111121
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims priority under 35 U.S.C. \u00a7119 to Korean Patent Application No. 10-2010-0132643 filed on Dec. 22, 2010, the disclosure of which is hereby incorporated by reference in its entirety.","Embodiments of the inventive concept relate generally to electronic data storage technologies. More particularly, embodiments of the inventive concept relate to data storage devices and related methods of operation.","Most computer systems include a main memory for storing data used by current applications, and a long-term memory for mass data storage. The main memory typically comprises a volatile memory, such as a dynamic random access memory (DRAM) or a static random access memory (SRAM), and the long-term memory typically comprises a hard disk drive (HDD) or a solid-state drive (SSD).","HDDs have several well-known limitations, such as relatively slow access times and a tendency to experience mechanical failures. Accordingly, there is a general trend to replace HDDs in many systems with SSDs. An SSD typically comprises a plurality of nonvolatile memory chips, such as flash memory chips or resistive memory chips. SSDs provide many advantages over HDDs, including relatively low power consumption and the ability to withstand physical shock.","The continuing adoption of SSDs has been accompanied by increasing performance demands. Consequently, researchers are continually seeking ways to improve the speed and data storage capacity of SSDs.","According to one embodiment of the inventive concept, a method is provided for performing a write operation in a data storage device comprising a storage medium, a processing unit, and a buffer memory storing data to be transferred to the storage medium under control of the processing unit. The method comprises aggregating data in the buffer memory as a strip group comprising multiple data strips, transferring data strips in at least one strip group to the storage medium, calculating a parity strip based on the transferred data strips of the at least one strip group without additional access to the buffer memory, and transferring the parity strip to the storage medium.","According to another embodiment of the inventive concept, a data storage device is provided. The data storage device comprises storage media, a buffer memory, a processing unit, a control logic configured to control an access operation of the storage media under control of the processing unit, and a parity generator configured to generate a parity strip based on data strips of at least one strip group transferred to the storage media from the buffer memory under control of the processing unit and without additional access to the buffer memory.","According to another embodiment of the inventive concept, a method is provided for performing a write operation in a memory device comprising a flash memory, a processing unit, a flash translation layer, and a buffer memory storing data to be transferred to the flash memory under control of the processing unit. The method comprises storing data in the buffer memory, aggregating the data stored in the buffer memory as a strip group comprising multiple data strips by performing address mapping in the flash translation layer, transferring the data strips in the strip group to the flash memory, performing an XOR operation on the data strips transferred to the flash memory to generate a parity strip, and transferring the parity strip to the flash memory.","These and other embodiments of the inventive concept can reduce data traffic of a buffer memory by generating a parity strip from data strips that have been transferred from the buffer memory to storage media.","Embodiments of the inventive concept are described below with reference to the accompanying drawings. These embodiments are presented as teaching examples and should not be construed to limit the scope of the inventive concept.","In the description that follows, the terms first, second, third etc. are used to describe various features, but these features should not be limited by these terms. Rather, these terms are used merely to distinguish between different features. Thus, a first feature could be termed a second element, component, region, layer or section without departing from the teachings of the inventive concept.","Spatially relative terms such as \u201cbeneath\u201d, \u201cbelow\u201d, \u201clower\u201d, \u201cunder\u201d, \u201cabove\u201d, and \u201cupper\u201d may be used herein to describe spatial relationships between different features in the drawings. The spatially relative terms are intended to encompass different orientations of the device in use or operation in addition to the orientation depicted in the figures. For example, if the device in the figures is turned over, elements described as \u201cbelow\u201d or \u201cbeneath\u201d or \u201cunder\u201d other elements or features would then be oriented \u201cabove\u201d the other elements or features. Thus, the terms \u201cbelow\u201d and \u201cunder\u201d can encompass both an orientation of above and below. The device may be otherwise oriented (rotated 90 degrees or at other orientations) and the spatially relative descriptors used herein interpreted accordingly. In addition, where a layer is referred to as being \u201cbetween\u201d two layers, it can be the only layer between the two layers, or one or more intervening layers may also be present.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the inventive concept. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. The terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof. As used herein, the term \u201cand\/or\u201d indicates any and all combinations of one or more of the associated listed items.","Where an element or layer is referred to as being \u201con\u201d, \u201cconnected to\u201d, \u201ccoupled to\u201d, or \u201cadjacent to\u201d another feature, it can be directly on, connected, coupled, or adjacent to the other feature, or intervening features may be present. In contrast, where a feature is referred to as being \u201cdirectly on,\u201d \u201cdirectly connected to\u201d, \u201cdirectly coupled to\u201d, or \u201cimmediately adjacent to\u201d another feature, there are no intervening features present.","Unless otherwise defined, all terms (including technical and scientific terms) used herein have the same meaning as commonly understood by one of ordinary skill in the art. Terms such as those defined in commonly used dictionaries should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and\/or the present specification and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 1"},"Referring to , the system comprises a data storage device  and a host system . Data storage device  operates in response to requests from host system  and is used to store data information for host system . Data storage device  can be, for example, a solid-state drive (SSD) that uses non-volatile memory devices as its storage media. Alternatively, data storage device  can take other forms such as a hard disk drive (HDD).","Data storage device  comprises one or more storage media  and an SSD controller . Storage media  store data sent from host system  or to be sent thereto under the control of SSD controller . Data transferred from host system  is stored temporarily in a buffer memory . In particular, SSD controller  may manage an address mapping of data temporarily stored in buffer memory  to configure strip groups. In other words, where random or sequential write-requested data of host system  is stored in buffer memory , SSD controller  can manage an address mapping associated with data stored in buffer memory  to be configured to one or more strip groups without respect to a write request type.","A strip group is formed of a plurality of strips (or, a plurality of data strips). A strip can be variously defined according to a memory type applied to storage media . For example, where storage media  is formed of flash memory devices, a strip may be formed by one or more pages. In certain embodiments described below, a strip is formed of one page, and in other embodiments, a strip can alternatively be formed of one or more blocks of pages or one or more sectors each less in size than one page.","SSD controller  further comprises a parity generating block  and an ECC generating block . Where one or more strips are prepared, SSD controller  sends data of buffer memory  to storage media  by the strip group. After data strips in a strip group are sent to storage media , parity generating block  of SSD controller  performs an XOR operation on data strips, as will be more fully described below.","A result of the XOR operation (called \u201ca parity strip\u201d) is added to the strip group for error correction. Data strips and the added parity strip within the strip group constitute one stripe or a full-stripe-write unit. The added parity strip can be stored in storage media  with the data strips of the strip group. This write operation can be called a full-stripe-write operation. Where data strips in a strip group are sent to the storage media, ECC generating block  of SSD controller  is configured to generate ECC information on respective data and parity strips. That is, ECC information is added to respective data and parity strips constituting a stripe.","Because a parity strip is generated when data strips of a strip group are sent to storage media , generation of a parity strip in one stripe can be made without additional\/further access to buffer memory  or without a traffic increase of buffer memory . In other words, a write operation of the data storage device according to an embodiment of the inventive concept may cause less of a traffic increase in buffer memory  compared with a conventional write operation that does not include generation of a parity strip.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 2","FIG. 1"],"b":"1400"},"Referring to , SSD controller  comprises a host interface (HI) , buffer memory , a processing unit  such as a microprocessor or CPU, a RAM , and a flash memory controller (FMC) .","Host interface  provides an interface with a host system . A connection between data storage device  and host system  can be formed by a wired or wireless host interface . Buffer memory  is used to store data transferred from host system  or data to be transferred to host system . Processing unit  is configured to control overall operations of SSD controller . Where data storage device  is powered, for example, codes (e.g., a flash translation layer (FTL)) stored in storage media  are loaded on RAM . On the other hand, instead of a code RAM, a code ROM can be used to store the above-described codes. The FTL can be used to manage an address mapping, wear-leveling of storage media , and data preservation during unexpected power loss.","Flash memory controller  controls access to storage media  in response to a request of processing unit . Flash memory controller  comprises parity generating block  and ECC generating block . As above described, where one or more strip groups are prepared via an address mapping, data of buffer memory  may be transferred to storage media  by the strip group. Where data strips in a strip group are transferred to storage media , respectively, parity generating block  performs an XOR operation on data strips to generate a parity strip. Where data strips in a strip group are transferred to storage media , ECC generating block  generates ECC information for the respective data strips and corresponding parity strips. As ECC information is generated with respect to each of the data and parity strips, it is added to the strips constituting a full-stripe-write unit.","In some embodiments, parity generating block  and ECC generating block  are included within flash memory controller . However, parity generating block  and ECC generating block  can be placed outside flash memory controller . Alternatively, ECC generating block  can also be included within each flash memory device of storage media .","In some embodiments, host interface  implements a computer bus standard, a storage bus standard, an iFCPPeripheral bus standard, or a combination of two or more such standards. Examples of computer bus standards include S-100 bus, Mbus, Smbus, Q-Bus, ISA, Zorro II, Zorro III, CAMAC, FASTBUS, LPC, EISA, VME, VXI, NuBus, TURBOchannel, MCA, Sbus, VLB, PCI, PXI, HP GSC bus, CoreConnect, InfiniBand, UPA, PCI-X, AGP, PCIe, Intel QuickPath Interconnect, and Hyper Transport. Examples of storage bus standards include ST-506, ESDI, SMD, Parallel ATA, DMA, SSA, HIPPI, USB MSC, FireWire (1394), Serial ATA, eSATA, SCSI, Parallel SCSI, Serial Attached SCSI, Fibre Channel, iSCSI, SAS, RapidIO, and FCIP. Examples of iFCPPeripheral bus standards include Apple Desktop Bus, HIL, MIDI, Multibus, RS-232, DMX512-A, EIA\/RS-422, IEEE-1284, UNI\/O, 1-Wire, I2C, SPI, EIA\/RS-485, USB, Camera Link, External PCIe, Light Peak, and Multidrop Bus.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 3","FIG. 2"],"b":"1200"},"Referring to , storage media  are connected with flash memory controller (FMC)  of SSD controller  via channels CH through CHn\u22121. Each of channels CH through CHn\u22121 is connected with a plurality of non-volatile memory devices NVM. Non-volatile memory devices NVM can be, for example, flash memory devices. Alternatively, they could be, for example, phase change RAMs (PRAMs), ferroelectric memory device (FeRAMs), or magnetoresistive RAMs (MRAMs).",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 4"},"Referring to , host system  sends data to be stored in data storage device  in a random or sequential order (B). Data storage device  temporarily stores the data randomly or sequentially transferred from host system  in buffer memory  (B). Addresses of the data transferred from host system  are managed by processing unit  (or an FTL) to constitute a strip group (B). Data stored in buffer memory  is aggregated into one or more strip groups via an address mapping of the FTL. The aggregating of data into one or more strip groups can be performed by an address mapping between logical addresses and physical addresses, not by a transfer of data.","After at least one strip group is prepared, data (or, data strips) of the at least one strip group stored in buffer memory  are sent to storage media  sequentially under the control of processing unit  (B). While each of the data strips of the at least one strip group is being transferred to storage media , encoding of each of the data strips in the at least one strip group can be performed via ECC generating block  (B). For example, as illustrated in , ECC information can be added to one data strip. The ECC information is used to correct errors of a corresponding data strip, and the error correction capacity (or, a bit number of ECC information) can be determined according to the number of data bits stored in one cell.","Further, where each of the data strips of the at least one strip group is sent to storage media , parity generating block  generates a parity strip by performing an XOR operation on the data strips in the at least one strip group (B). The parity strip can be sent to storage media  after the data strips of the at least one strip group are all transferred to storage media .","An encoding operation of a parity strip transferred to storage media  is carried out via ECC generating block  (B). That is, ECC information is added to one parity strip. The parity strip is used to improve the reliability on data of one stripe. In particular, the parity strip may be generated to recover an unreadable strip among data and parity strips in one stripe. Consequently, as illustrated in , a stripe stored in storage media  is formed of a plurality of data strips and one parity strip, and ECC information is added to each strip.","Because a parity strip is generated when data strips in a strip group are sent to storage media , as illustrated in , generation of a parity strip in one stripe can be performed without an additional\/further access to buffer memory  and\/or an increase in traffic of buffer memory . In other words, because no additional access to buffer memory  is performed to generate a parity strip, the traffic of buffer memory  is maintained constantly before and after a parity strip used to improve the data reliability is generated.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 5"},"Referring to , data provided from host system  is stored in buffer memory  via host interface . Data stored in buffer memory  is data provided according to a random or sequential write request of host system . For example, buffer memory  can be accessed (N\u22121) times to store data transferred from host system  in buffer memory . As illustrated in , data stored in buffer memory  is aggregated to form strip groups. Aggregation of data into strip groups can be performed by an address mapping of a flash translation layer instead of a transfer of data. The number of strips (or, data strips) in one strip group can be determined variously according to different applications.","After one or more strip groups are configured, data (or, data strips) of a strip group is sent to storage media  under the control of processing unit . Flash memory controller  transfers a data strip to storage media  in response to a command provided from processing unit . ECC generating block  of flash memory controller  generates ECC information on the transferred data strip and adds the ECC information to the data strip. In other words, ECC information is added to each of data strips. While data strips in one strip group are sequentially transferred to storage media , parity generating block  of flash memory controller  generates a parity strip by performing an XOR operation on transferred data strips. The parity strip thus generated is sent to storage media . Similarly, ECC information is added to the parity strip. A stripe stored in storage media  is formed of data strips and a parity strip.","As indicated by the above description, generation of a parity strip does not necessitate an additional access to buffer memory , so generating a parity strip does not cause an increase in traffic of buffer memory .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 6","FIG. 2"],"b":"1450"},"Referring to , flash memory controller  operates responsive to a command provided from processing unit , and it comprises parity generating block , ECC generating block , and control logic block . In accordance some embodiments, a full-stripe-write operation provides commands (e.g., XWRITE, PBWRITE, XREAD, PBREAD, XCOPYBACK, XLOAD, PBREST, etc.) that are defined between flash memory controller  and processing unit . Some of the defined commands are commands accompanying an XOR operation for the full-stripe-write operation, as described in further detail below.","Parity generating block  generates a parity strip based on data (e.g., data strips) transferred from buffer memory  to storage media . Accordingly, it is not necessary to additionally access buffer memory  to generate a parity strip. Parity generating block  comprises a memory formed of four parity buffers PB through PB and XOR logic , but the number of parity buffers PB through PB can be modified in other embodiments. Memory , for example, can be an SRAM. XOR logic performs an XOR (or, exclusive OR) operation on a data strip from buffer memory  and a previous parity strip stored in a selected parity buffer. A new parity strip is generated as a result of the exclusive OR operation and stored in the selected parity buffer, i.e., a parity buffer in which a previous parity strip is stored. Parity buffers PB through PB of memory are selected by a parity buffer number (or, a parity buffer address) included in a command. A parity strip stored in a selected parity buffer is sent to storage media  or buffer memory  according to a command from processing unit . Parity generating block  is called an XOR accelerator and comprises logic for controlling overall operations of parity generating block .","ECC generating block  generates ECC information for data strips transferred from buffer memory  to storage media . Likewise, ECC generating block  generates ECC information on parity strips transferred from parity generating block  to storage media . ECC generating block  can be configured to correct errors of data (or, data\/parity strip) read out from storage media . ECC generating block  can be configured to buffer a strip transferred from storage media , and the buffered strip can be sent to parity generating block  to buffer memory  after an error detecting and correcting process. If the buffered strip is judged to be uncorrectable, generation of a read error may be notified to processing unit . The construction of ECC generating block  can be modified in other embodiments. For example, ECC generating block  can be implemented without buffering.","As described above, ECC information can be used to correct errors of a corresponding data\/parity strip, and the parity strip can be used to recover any unreadable strip of data and parity strips in a stripe. Herein, an unreadable strip may represent a strip that is not corrected according to ECC information.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 7"},"Referring to , commands transferred from processing unit  to flash memory controller  comprise an XWRITE command, a PBWRITE command, an XREAD command, a PBREAD command, an XCOPYBACK command, an XLOAD command, and a PBRESET command. The commands can comprise part or all of an operation code, a destination address, a source address, and a parity buffer number (or, address). For example, the XWRITE, PBWRITE, and XLOAD commands may include an operation code, a destination address, and a parity buffer number (or, address). The XREAD command can comprise an operation code, a source address, and a parity buffer number (or, address). The XCOPYBACK command can comprise an operation code, destination and source addresses, and a parity buffer number (or, address). The PBRESET and PBREAD commands can comprise an operation code and a parity buffer number (or, address). On the other hand, as illustrated in , a command may be set to include a data strip to be transferred.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 8"},"Referring to , processing unit  sends an XWRITE command to flash memory controller  as occasion demands (e.g., when at least one strip group is prepared by an address mapping). The XWRITE command comprises an operation code, a destination address, and a parity buffer number (or, address). The destination address can be used to designate storage space of storage media  to which a data strip transferred from buffer memory  is sent and to select a parity buffer to which a parity strip generated by XOR logic is stored. When the XWRITE command is received, a data strip provided from buffer memory  may be transferred to storage media . At the same time, XOR logic performs an XOR operation on the transferred data strip and a previous (or, old) parity strip of a parity buffer designated by the parity buffer number. A result of the XOR operation, i.e., a new parity strip, is stored in the parity buffer designated by the parity buffer number. Further, ECC generating block  generates ECC information based on the transferred data strip. The ECC information is added to the data strip. The XWRITE command can be a data strip transferring command accompanying generation of a parity strip, i.e., a command accompanying an XOR operation for a full-stripe-write operation.","In some embodiments, the transfer of a data strip to flash memory controller  can be performed under the control of processing unit  or flash memory controller .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 9"},"Referring to , processing unit  transfers a PBWRITE command to flash memory controller , e.g., when data strips in a strip group are all transferred. The PBWRITE command comprises an operation code, a destination address, and a parity buffer number (or, address). A parity strip of a parity buffer designated by the parity buffer number is sent to storage media  when the PBWRITE command is received (e.g., when the PBWRITE command is provided to a parity generating block ). ECC generating block  generates ECC information according to a transferred parity strip. The ECC information is added to the parity strip. The PBWRITE command can be a command for transferring a parity strip stored in a parity buffer to storage media .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 10"},"Referring to , processing unit  transfers an XLOAD command to flash memory controller , e.g., in order to transfer a data or parity strip in a stripe to a parity generating block ). The XLOAD command comprises an operation code, a source address, and a parity buffer number (or, address). A data\/parity strip designated by the source address is sent to XOR logic as source data. Where the XLOAD command is provided to flash memory controller , XOR logic is provided with a parity strip (i.e., an old parity strip) of a parity buffer designated by the parity buffer number. A new parity buffer calculated by XOR logic is stored in the parity buffer designated by the parity buffer number. An operation of detecting errors of source data read from storage media  is performed by ECC generating block . The XLOAD command can be a command accompanying an XOR operation.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 11"},"Referring to , processing unit  transfers an XLOAD command to flash memory controller , e.g., in order to transfer a data or parity strip in a stripe to parity generating block  and to buffer memory  (or, a cache memory of an SSD controller)). The XREAD command comprises an operation code, a source address, and a parity buffer number (or, address). A data\/parity strip designated by the source address is sent to XOR logic and to an outside (e.g., a buffer memory  or a cache memory of an SSD controller). Where the XREAD command is provided to flash memory controller , XOR logic is provided with a parity strip (i.e., an old parity strip) of a parity buffer designated by the parity buffer number. A new parity strip calculated by XOR logic is stored in the parity buffer designated by the parity buffer number. An operation of detecting and correcting errors of source data read from storage media  is performed by ECC generating block . The XREAD command is a command accompanying an XOR operation (or, parity generation).",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 12"},"Referring to , processing unit  transfers a PBREAD command to flash memory controller , e.g., in order to read a parity strip from a parity buffer. The PBREAD command comprises an operation code and a parity buffer number (or, address). Where the PBREAD command is provided to flash memory controller , a parity strip designated by the parity buffer number is sent to buffer memory . At this time, no access to storage media  is made.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 13"},"Referring to , processing unit  transfers an XCOPYBACK command to flash memory controller . The XCOPYBACK command may include an operation code, destination and source addresses, and a parity buffer number (or, address). The source address is used to designate a data\/parity strip of a source stripe, and the destination address is used to designate a strip of a destination stripe. Where the XCOPYBACK command is provided to flash memory controller , source data is read from storage media , and the read source data is sent to XOR logic . At the same time, decoding and encoding operations on the read data are made via an ECC generating block , and the read data is sent to storage media  as destination data. The XCOPYBACK command is a command accompanying an XOR operation.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 14","FIGS. 15 through 17","FIG. 14"]},"As described above, data stored in buffer memory  can be aggregated to constitute one or more strips by an address mapping of processing unit  (or, a flash translation layer FTL). Once the strip group(s) is prepared, processing unit  performs a full-stripe-write operation. First, processing unit  sends a PBRESET command to flash memory controller  (S). Flash memory controller  resets a parity buffer (e.g., PB) in response to the PBRESET command. Parity buffer PB is selected by a parity buffer number (or, address) included in the PBRESET command. After parity buffer PB is reset, flash memory controller  issues a response on the PBRESET command (S).","Then, processing unit  transfers an XWRITE command to flash memory controller  (S). After the XWRITE command is sent to flash memory controller , as illustrated in , one strip A of data strips (e.g., A, B, and C in ) in a strip group stored in buffer memory  may be sent to flash memory controller . The transferred data strip A is provided to storage media . At this time, ECC information s added to data strip A through ECC generating block . Data strip A is stored in a storage space corresponding to a destination address (e.g., 8) included in the XWRITE command.","At the same time, as illustrated in , XOR logic performs an XOR operation on data strip A transferred from buffer memory  to storage media  and an old parity strip (being null data due to initialization) of parity buffer PB and generate a new parity strip A. Parity strip A thus generated is stored in the selected parity buffer PB. After the transfer of the data strip and generation of the parity strip are completed, flash memory controller  sends a response on the XWRITE command (S).","As illustrated in , the XWRITE command is iteratively sent to flash memory controller  by the number of data strips in the strip group. For example, as illustrated in , a next data strip B is sent to storage media  according to the XWRITE command accompanying parity generation (or, an XOR operation). In this case, XOR logic performs an XOR operation on data strip B transferred from buffer memory  to storage media  and an old parity strip A of the selected parity buffer PB and generates a new parity strip (A\u2295B). The parity strip (A\u2295B) thus generated is stored in the selected parity buffer PB. After data strip B is sent, as illustrated in , a last data strip C is sent to storage media  according to the XWRITE command accompanying parity generation (or, an XOR operation). In this case, XOR logic performs an XOR operation on data strip C transferred from buffer memory  to storage media  and an old parity strip (A\u2295B) of the selected parity buffer PB and generate a new parity strip (A\u2295B\u2295C). The parity strip (A\u2295B\u2295C) thus generated is stored in the selected parity buffer PB. ECC information is added to the parity strip (A\u2295B\u2295C) through an ECC generating block .","Referring to , where data strips A, B, and C in the strip group are all transferred, processing unit  sends a PBWRITE command to flash memory controller  (S). Flash memory controller  responds to the PBWRITE command to transfer the parity strip (A\u2295B\u2295C) stored in the selected parity buffer PB into storage media . After the parity strip (A\u2295B\u2295C) stored in the selected parity buffer PB is sent into storage media , flash memory controller  provides processing unit  with a response to the PBWRITE command (S). Afterwards, the full-stripe-write operation is ended.","As understood from the above description, where data strips A, B, and C in the strip group is sent to storage media  according to the XWRITE command accompanying the parity generation (or, an XOR operation), the parity strip may be generated without an additional access to buffer memory  (or, without an increase in traffic of buffer memory ). As understood from , data strips A, B, and C and the parity strip (A\u2295B\u2295C) constitute one stripe being a full-stripe-write unit.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 18","FIGS. 19 through 21","FIG. 18"]},"It is assumed that data (e.g., a data strip in ) requested from a host system  is unreadable. Whether a data strip is unreadable, as described above, may be determined according to whether errors in the data strip exceed the error correction capacity of ECC generating block . When data (e.g., a data strip in ) requested from a host system  is judged to be unreadable, SSD controller  recovers the unreadable data strip B using remaining strips (i.e., data and parity strips A, C, (A\u2295B\u2295C)) of a stripe including the unreadable data strip B, as will be more fully described below.","As illustrated in , processing unit  sends a PBRESET command to flash memory controller  (S). The PBRESET command comprises an operation code and a parity buffer number (or, address) as described above. As the PBRESET command is sent to flash memory controller , there may be reset a parity buffer (e.g., PB) of parity generating block  corresponding to a parity buffer number (or, address) of the PBRESET command. Parity buffer PB is set with null data as an old parity strip due to initialization (refer to ). After parity buffer PB is reset, flash memory controller  transfers a response related to the PBRESET command to processing unit  (S).","Where the response on the PBRESET command is received, processing unit  sends an XLOAD command, accompanying parity generation (or, an XOR operation), to flash memory controller  (S). The XLOAD command comprises a source address for appointing a data strip A. Flash memory controller  controls storage media  such that a data strip A corresponding to the source address is read out. The read data strip A is sent to XOR logic as illustrated in . At this time, a decoding operation on data strip A is made. XOR logic performs an XOR operation on data (i.e., an old parity strip) stored in the selected parity buffer PB and the read data strip A and generate a new parity strip A. Because null data is stored in parity buffer PB as an old parity strip due to initialization, the new parity strip is identical to the read data strip. The new parity strip A thus generated is stored in the selected parity buffer PB. Once the new parity strip is generated, flash memory controller  sends a response on the XLOAD command to processing unit  (S).","The above-described operations S and S are repeated until remaining strips in a stripe other than the unreadable data strip are all read. For example, as illustrated in , a next strip C is read from storage media  according to the XLOAD command accompanying parity generation (or, an XOR operation), and data strip C is decoded. In this case, XOR logic performs an XOR operation on data strip C transferred from storage media  and a previous parity strip A of the selected parity buffer PB and generates a new parity strip (A\u2295C). The parity strip (A\u2295C) thus generated is stored in the selected parity buffer PB. After data strip C is read, as illustrated in , a last strip within the stripe including the unreadable data strip B, i.e., a parity strip (A\u2295B\u2295C) is sent to flash memory controller  according to an XLOAD command accompanying parity generation (or, an XOR operation), and the data strip (A\u2295B\u2295C) is decoded. In this case, XOR logic performs an XOR operation on the data strip (A\u2295B\u2295C) transferred from storage media  and an old parity strip (A\u2295C) of the selected parity buffer PB and generate a new parity strip B. Parity strip B thus generated is stored in the selected parity buffer PB.","Referring to , if remaining strips A, C, and (A\u2295B\u2295C) other than the unreadable data strip B are all read, processing unit  sends a PBREAD command to flash memory controller  (S). Flash memory controller  provides buffer memory  with parity strip B stored in the selected parity buffer PB in response to the PBREAD command. The transferred parity strip B is a recovered data strip. Flash memory controller  sends a response to the PBREAD command to processing unit . Afterward, the method ends.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 22","FIGS. 23","FIG. 22","FIG. 23","FIG. 23"],"b":["25","1","2000"]},"Referring to , processing unit  sends a PBRESET command to flash memory controller  (S). The PBRESET command comprises an operation code and a parity buffer number (or, address) as described above. As the PBRESET command is transferred to flash memory controller , a parity buffer (e.g., PB) within parity generating block  corresponding to a parity buffer number (or, address) of the PBRESET command is reset. Parity buffer PB is set with null data as an old parity strip due to the initialization (refer to ). After parity buffer PB is reset, flash memory controller  transfers a response on the PBRESET command to processing unit  (S).","As illustrated in , one loop can include XCOPYBACK and XWRITE commands each accompanying parity generation (or, an XOR operation). The XCOPYBACK command can be sent to flash memory controller  to read a valid data strip from a source stripe, and the XWRITE command may be sent to flash memory controller  to transfer a data strip to be updated to a destination stripe. Transferring of the XCOPYBACK and XWRITE command every loop may be performed selectively.","First of all, a copyback operation on the first data strip A within a stripe ST may be requested. This may be made through the XCOPYBACK command. Accordingly, processing unit  sends the XCOPYBACK command to flash memory controller  (S). The XCOPYBACK command comprises source and destination addresses as described above. Where the source and destination addresses are sent from flash memory controller  to storage media , as illustrated in , a data strip A corresponding to the source address is sent to flash memory controller . Data strip A is provided to XOR logic . At this time, the read data strip A is transferred again to storage media  through flash memory controller  without transferring to buffer memory . ECC generating block  performs decoding and encoding operations on the read data strip A.","XOR logic performs an XOR operation on data (i.e., an old parity strip) stored in the selected parity buffer PB and the read data strip A and generate a new parity strip A. Because null data is stored as the old parity data in the selected parity buffer PB due to initialization, the new parity strip is identical to the read data strip. The new parity strip A thus generated is stored in the selected parity buffer PB. Once the new parity strip is generated, flash memory controller  sends a response on the XCOPYBACK command to processing unit  (S).","Then, processing unit  sends an XWRITE command to flash memory controller  such that a new data strip H is stored in destination stripe ST instead of the invalid data strip B of source stripe ST (S). As illustrated in , where the XWRITE command is sent to flash memory controller , data strip H provided from buffer memory  is transferred to storage media . At this time, data strip H is encoded. At the same time, XOR logic performs an XOR operation on the transferred data strip H and an old parity strip A of a parity buffer PB appointed by a parity buffer number. As a result of the XOR operation, a new parity strip (A\u2295H) may be stored in the selected parity buffer PB. flash memory controller  may send a response on the XWRITE command to processing unit  (S).","After the XWRITE command is executed, a copyback operation about the third data strip C in source stripe ST is requested. This may be made through the XCOPYBACK command. Accordingly, processing unit  transfers the XCOPYBACK command to flash memory controller  (S). The XCOPYBACK command comprises source and destination addresses as described above. If the source and destination addresses are transferred from flash memory controller  to storage media , as illustrated in , a data strip C corresponding to the source address may be sent to flash memory controller . At this time, the read data strip C is again transferred to storage media  through flash memory controller  without transferring to buffer memory . Decoding and encoding of the read data strip C is made.","XOR logic performs an XOR operation on data (i.e., an old parity strip) (A\u2295H) stored in the selected parity buffer PB and the read data strip C and generates a new parity strip (A\u2295H\u2295C). The new parity strip (A\u2295H\u2295C) thus generated is stored in the selected parity buffer PB. Once the new parity strip (A\u2295H\u2295C) is generated, flash memory controller  sends a response on the XCOPYBACK command to processing unit  (S).","Where the copyback operation of valid data strips and a transfer operation of a data strip to be updated are completed, as illustrated in , processing unit  sends a PBWRITE command to flash memory controller . Flash memory controller  transfers the parity strip (A\u2295H\u2295C) in the selected parity buffer PB to storage media  in response to the PBWRITE command. At this time, an encoding operation is carried out with respect to the parity strip (A\u2295H\u2295C) transferred to storage media . After the parity strip (A\u2295H\u2295C) in the selected parity buffer PB is sent to storage media , flash memory controller  sends a response on the PBWRITE command to processing unit . Afterwards, the method ends.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIG. 26","FIGS. 27 through 31","FIG. 26","FIG. 26","FIG. 27","FIG. 26","FIG. 14"],"b":["1","2"]},"Referring to , processing unit  sends a PBRESET command to flash memory controller  to reset a parity buffer PB (S). Flash memory controller  resets parity buffer PB in response to the PBRESET command. After parity buffer PB is reset, flash memory controller  sends a response on the PBRESET command to processing unit  (S). Processing unit  sends the PBRESET command to flash memory controller  to reset a parity buffer PB, which will be carried out to be identical to that of parity buffer PB. That is, as illustrated in , the number of parity buffers to be reset is identical to the number of strip groups to be sent to storage media . Accordingly, resetting of a parity buffer in operations S and S can be performed iteratively by the number of strip groups to be sent.","After parity buffers PB and PB are reset, processing unit  transfers an XWRITE command to flash memory controller  to send a data strip A of strip group SG to storage media  (S). At this time, as illustrated in , one data strip A of data strips A, B, and C in strip group SG stored in buffer memory  is sent to flash memory controller . Data strip A may be sent to storage media . At the same time, as illustrated in , a new parity strip A is produced by performing an XOR operation on data strip A transferred from buffer memory  to storage media  and an old parity strip of the selected parity buffer PB. After transferring of a data strip and generating of a parity strip are completed, flash memory controller  sends a response on the XWRITE command to the processing unit (S). The above-described operations S and S are repeated to transfer a data strip D in another strip group SG to storage media .","Remaining strips B and C in strip group SG and remaining strips E and F in strip group SG are transferred to storage media  in the same manner as described in . As a result, as illustrated in , a parity strip (A\u2295B\u2295C) is generated by performing an XOR operation on data strips A, B, and C in strip group SG, and a parity strip (D\u2295E\u2295F) may be generated by performing an XOR operation on data strips D, E, and F in strip group SG.","Referring again to , where the data strips (A, B, C) and (D, E, F) in strip groups SG and SG are all transferred, processing unit  sends a PBWRITE command to flash memory controller  to transfer a parity strip of parity buffer PB to storage media  (S). As the PBWRITE command is sent to flash memory controller , as illustrated in , flash memory controller  sends the parity strip (A\u2295B\u2295C) in the selected parity buffer PB to storage media  in response to the PBWRITE command. After the parity strip (A\u2295B\u2295C) in the selected parity buffer PB is sent to storage media , flash memory controller  sends a response on the PBWRITE command to processing unit  (S). Like parity buffer PB, the parity strip (D\u2295E\u2295F) of parity buffer PB is transferred to storage media  according to the PBWRITE command. Afterwards, the method ends. As illustrated in , where data and parity strips are sent to storage media , an encoding operation is performed with respect to the data and parity strips.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 32"},"Referring to , data storage device  manages meta data associated with data strips in a strip group. For example, processing unit  of data storage device  can manage meta data MD, MD, and MD each corresponding to data strips DS, DS, and DS of a strip group. Operations (e.g., a parity generating operation and an ECC adding operation) executed when each of data strips DS, DS, and DS are sent to storage media  may be made to be identical to that described above, and description thereof is thus omitted. As described above, a parity strip may be generated by parity generating block  and may be used to recover an unreadable data\/parity strip.","As illustrated in , meta data MD, MD, and MD are sent to storage media  together with corresponding data strips DS, DS, and DS. Unlike generation of a parity strip associated with data strips DS, DS, and DS, a parity generating operation of meta data MD, MD, and MD is made by processing unit , not by parity generating block . A parity associated with meta data MD, MD, and MD generated by processing unit  is sent to storage media . The parity associated with meta data MD, MD, and MD are used to recover unreadable meta data. That is, a correctable error of a data strip is corrected according to ECC information, and a correctable error of meta data is corrected according to ECC information. Further, an unreadable strip in a stripe is recovered according to remaining strips, and unreadable meta data in a stripe is recovered according to remaining meta data and parity.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIGS. 33A through 33D"},"A size of one stripe is determined variously according to a memory applied to storage media . For example, it is assumed that storage media  is formed of flash memory devices, and one stripe is formed of a plurality of strips. One strip can be formed of one or more pages.","As illustrated in , a stripe can be formed of strips corresponding to flash memory devices, connected with one channel, respectively. In another embodiment, as illustrated in , assuming that flash memory devices connected with one channel are divided into at least two chip groups, a stripe may be formed of strips assigned to flash memory devices in each chip group, respectively. In still another embodiment, as illustrated in , a stripe can be formed of strips assigned to flash memory devices connected with each of a plurality of channels CH, CH, CH, and CH, respectively. In still another embodiment, as illustrated in , assuming that a plurality of channels are divided into at least two channel groups and that flash memory devices connected in common with channels in each channel group are divided into at least two chip groups, a stripe can be formed of strips assigned to flash memory devices in each chip group of each channel group, respectively.","There are other ways of configuring a stripe in addition to those presented in this description. For example, if a flash memory device has a plane structure, a stripe can be set up on the basis of a plane, not a chip.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 34"},"Referring to , a data storage device comprises storage media  and SSD controller . Storage media  comprises flash memory devices accessed through a plurality of channels CH through CHn\u22121. Storage media  further comprises a reserved channel and memory devices , which can be used to replace any channel or flash memory devices connected with any channel. Data storage device of  operates similar to that of  except for the above-described differences, so a further description thereof will be omitted in order to avoid redundancy.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 35","b":"3000"},"Referring to , computing system  comprises a processing unit  such as a microprocessor, a user interface , a modem  such as a baseband chipset, an SSD controller , and storage media . SSD controller  and storage media  can be formed similar to the data storage device (e.g., a solid state drive) illustrated in , so a description thereof is thus omitted. N-bit data (N being an integer of 1 or more) processed\/to be processed by processing unit  is stored in storage media  through SSD controller . Where computing system  is a mobile device, it may further comprise a battery  that supplies an operating voltage of the computing system. Although not shown in , computing system  can further comprise an application chipset, a camera image processor (CIS), or a mobile DRAM.",{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 36","FIG. 37"]},"The data storage device of  comprises a plurality of solid-state drives  configured to operate similar to that described with reference to . Solid-state drive  is used as a storage server. As illustrated in , the storage server comprises a plurality of solid-state drives  and server A. The plurality of solid state drives  are configured to operate similar to that described in relation , so a detailed description thereof will be omitted in order to avoid redundancy.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIGS. 38 through 40"},"Where a solid state drive is applied to the storage as a data storage device according to embodiments of the inventive concept, as illustrated in , a system  comprises a storage  that communicates with a host in a wired and\/or wireless manner. Where a solid state drive is applied to a storage server as a data storage device according to embodiments of the inventive concept, as illustrated in , a system  comprises storage servers  and  that communicate with a host in a wired and\/or wireless manner. Further, as illustrated in , a solid-state drive is applied to a mail server  as a data storage device according to embodiments of the inventive concept.","As described above, in a full-stripe-write operation, a parity strip is generated on the basis of data strips transferred to storage media without additional access to a buffer memory. The parity strip can be produced according to commands accompanying parity generation (or, an XOR operation). ECC information is added to each of data and parity strips. Parities of meta data associated with data strips may be generated by a processing unit, not a parity-generating block. Accordingly, it is possible to perform a full-stripe-write operation without additional access to the buffer memory for generation of a parity strip.","The foregoing is illustrative of embodiments and is not to be construed as limiting thereof. Although a few embodiments have been described, those skilled in the art will readily appreciate that many modifications are possible in the embodiments without materially departing from the novel teachings and advantages of the inventive concept. Accordingly, all such modifications are intended to be included within the scope of the inventive concept as defined by the claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The drawings illustrate selected embodiments of the inventive concept. In the drawings, like reference numbers indicate like features.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 15 through 17","FIG. 14"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 19 to 21","FIG. 18"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIGS. 23 through 25","FIG. 22"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 27 through 31","FIG. 26"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 33A through 33D"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIGS. 38 through 40"}]},"DETDESC":[{},{}]}
