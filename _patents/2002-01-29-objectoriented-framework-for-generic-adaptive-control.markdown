---
title: Object-oriented framework for generic adaptive control
abstract: A system and method are described for constructing and implementing generic software agents for automated tuning of computer systems and applications. The framework defines the modules and interfaces to allow agents to be created in a modular fashion. The specifics of the target system are captured by adaptors that provide a uniform interface to the target system. Data in the agent is managed by a metric manager, and controller modules implement the desired control algorithms. The modular structure and common interfaces allow for the construction of generic agents that are applicable to a wide variety of target systems, and can use a wide variety of control algorithms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07120621&OS=07120621&RS=07120621
owner: International Business Machines Corporation
number: 07120621
owner_city: Armonk
owner_country: US
publication_date: 20020129
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["1. Technical Field","The present invention relates generally to the performance of computer systems and, in particular, to a system and method for automated performance tuning of computer systems and applications in a generic, application-independent manner.","2. Description of Related Art","There has been a tremendous growth in the complexity of distributed and networked systems in the past few years. In large part, this can be attributed to the exploitation of client-server architectures and other paradigms of distributed computing. Such computer systems and software (operating systems, middle ware and applications) have become so complex that it is difficult to configure them for optimal performance.","Complex applications such as databases (e.g., ORACLE, DB2), message queuing systems (e.g., MQSERIES) and application servers (e.g., WEBSPHERE, DOMINO) have literally tens and hundreds of parameters that control their configuration, behavior and performance (DOMINO\/DB2 admin guide). The behavior of such a complex system is also governed by the dynamic loads that are placed on the system by the system users. It takes considerable expertise to set individual parameters, and it is even more challenging to understand the interaction between parameters and the resultant effect on the behavior and performance of the system. Another factor that increases the difficulty of administering these systems is that such systems can be very dynamic and therefore may require constant monitoring and adjustment of their parameters, for instance if the workloads change over time.","Thus, the total cost of ownership (TCO) of the particular system may increase not only due to the cost of hiring expert help, but also due to potentially lost revenue if the system is not configured properly. To reduce the TCO and the burden on system administrators, many software vendors are now turning to software agents to help manage the complexity of administering these complex systems.","Software agents are very well suited to the task of controlling such systems. Prior expert knowledge could be incorporated once and for all in the agent, thereby reducing the need for expertise by the end-user. In addition, the software agent can be more closely tied to the system and can perform even closer monitoring and updating than humanly possible. Recent advances in the fields of Control Theory, Optimization, Operations Research and Artificial Intelligence provide a wealth of algorithms and techniques to dynamically tune the behavior of complex systems, even in the absence of much expert knowledge.","A variety of target-specific or \u201ccustomized automated tuning systems\u201d (CATS) have been developed. Examples include systems by: (1) Abdelzaher et al., as described in \u201cEnd-host Architecture for QoS-Adaptive Communication,\u201d IEEE Real-time Technology and Applications Symposium, Denver, Colo., June 1998, the disclosure of which is incorporated by reference herein; and (2) Aman et al., as described in \u201cAdaptive algorithms for managing a distributed data processing workload,\u201d IBM Systems Journal, Vol. 36, No 2, 1997, the disclosure of which is incorporated by reference herein. The system of Abdelzaher et al. controls quality of service for the delivery of multimedia using task priorities in a communications subsystem. The system of Aman et al. provides a means by which administrators specify response time and throughput goals to achieve in MVS (Multiple Virtual Storage) systems using MVS-specific mechanisms to achieve these goals.","The concept of \u201ctuning\u201d seeks to improve service levels by adjusting existing resource allocations. To accomplish the preceding requires access to metrics and to the controls that determine resource allocations. In general, there are three classes of metrics, as follows: (1) \u201cconfiguration metrics\u201d that describe performance related features of the target that are not changed by adjusting tuning controls, such as, for example, line speeds, processor speeds, and memory sizes; (2) \u201cworkload metrics\u201d that characterize the load on the target, such as, for example, arrival rates and service times; and (3) \u201cservice level metrics\u201d that characterize the performance delivered, such as, for example, response times, queue lengths, and throughputs.","\u201cTuning controls\u201d are parameters that adjust target resource allocations and hence change the target's performance characteristics. We give a few examples. LOTUS NOTES, an e-mail system and application framework, has a large set of controls. Among these are: NSFBufferPoolSize for managing memory, Server_MaxSessions for controlling admission to the server, and Server_SessionTimeout for regulating the number of idle users. In Web-based applications that support differentiated services, there are tuning controls that determine routing fractions by service class and server type. MQ SERIES, a reliable transport mechanism in distributed systems, has controls for storage allocations and assigning priorities. Database products (e.g., IBM's DB\/2) expose controls for sort indices and allocating buffer pool sizes.","CATS require that metrics and tuning controls be identified in advance so that mechanisms for their interpretation and adjustment can be incorporated into the automated tuning system. Thus, CATS construction and maintenance still require considerable expertise. With the advent of the Internet, software systems and their components evolve rapidly, as do the workloads that they process. Thus, it may well be that automated tuning systems must be updated on a rate approaching that at which tuning occurs. Under such circumstances, the value of automated tuning is severely diminished.","The prior art related to automated tuning has mostly focused on developing specific algorithms and architectures that are very tightly coupled to the target system (i.e., the system being controlled). In such cases, the algorithms cannot be easily reapplied to other systems, nor can other control schemes be inserted into the proposed architecture.","Existing prior art for target-independent automated tuning does not consider architectural support for access to the metrics and controls. Realizing generic, automated tuning requires well defined interfaces so that a generic automated tuning system can access the data required from the target. Previous work has ignored these considerations.","The search for appropriate settings of tuning controls is facilitated by exposing information about the semantics of metrics and the operation of tuning controls. In particular, it is helpful for the target to place metrics into the categories of configuration, workload, and service level. These designations can aid the construction of a generic system model. Further, there should be a way to express the directional effects of tuning control adjustments since having such knowledge reduces the complexity of the search for appropriate settings of tuning controls. Past work has not focused on these concerns.","The problems stated above, as well as other related problems of the prior art, are solved by the present invention, an object-oriented framework for generic adaptive control. The present invention may be applied to one or more target systems, such as, for example, one or more computer systems in a network.","Advantageously, the present invention provides a flexible software architecture for the creation of generic automated tuning agents (GATA), which are software agents that are made of one or more controller modules (also referred to herein as \u201cAutotune Controllers\u201d), and one or more target system (application) adaptors (also referred to herein as \u201cAutotune Adaptors\u201d). Moreover, the invention allows a user to specify the interfaces between the agent's components (controllers and adaptors) so that other components can be substituted in a plug-and-play manner. Also, the present invention provides interfaces that allow the controllers to be interconnected in an arbitrarily complex manner, allowing for the implementation (and composition) of any computable control strategy. Further, the present invention provides a mechanism to allow agents created in the framework to be interconnected and to communicate with each other to form a potentially complex network and\/or hierarchy of software agents. Additionally, the present invention provides customizer interfaces that allow optional and flexible manual monitoring and intervention where necessary.","This architecture allows the implementation of many control strategies in the generic framework. Moreover, it allows the control strategy to be implemented in a modular fashion so that it is not necessarily tied to the target system. The modularity further allows the same control strategy to be easily applied to different target systems. The architecture is flexible enough to implement strategies requiring multiple controllers. In addition, it enables inter-agent communication that leverages the existing infrastructure (without requiring additional coding). This allows us to construct complex agent networks for controlling complex, distributed systems.","According to an aspect of the present invention, there is provided a tuning system for automatically tuning one or more target systems. A metric manager manages at least one set of metrics corresponding to the one or more target systems. One or more controllers implement one or more control strategies based upon the at least one set of metrics. The one or more control strategies are independent of a particular architecture of any of the one or more target systems. One or more adaptors interface with the one or more target systems with respect to the one or more control strategies. At least one of the one or more adaptors is specific to a corresponding one of the one or more target systems.","According to another aspect of the present invention, the tuning system further comprises at least one customizer for receiving user inputs for customizing at least one of the metric manager, the one or more controllers, and the one or more adaptors. The at least one customizer is a graphical user interface.","According to yet another aspect of the present invention, the one or more controllers comprise a master controller for resolving conflicts between the one or more control strategies.","According to still another aspect of the present invention, the tuning system has a capability of invoking other tuning systems to form a hierarchical tuning system with respect to the one or more target systems.","According to a further aspect of the present invention, the tuning system and the other tuning systems operate cooperatively to implement the one or more control strategies.","According to a yet further aspect of the present invention, at least some of the one or more controllers are modular and have a capability of being deleted from the tuning system, modified, or replaced.","According to a still further aspect of the present invention, at least some of the one or more adaptors are modular and have a capability of being deleted from the tuning system, modified, or replaced.","These and other aspects, features and advantages of the present invention will become apparent from the following detailed description of preferred embodiments, which is to be read in connection with the accompanying drawings.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["110","120","110","130","110","130","130","110","130","130","140","120","110"]},"The internal components of such an agent are outlined in . In particular,  is a block diagram illustrating the components comprising a software agent and interconnections corresponding thereto, according to an illustrative embodiment of the present invention. We call this agent architecture an Autotune Agent.","The software agent of  includes: a master Autotune Controller ; one or more slave Autotune Controllers (hereinafter \u201cslave Autotune Controller\u201d) ; one or more Autotune Adaptors (hereinafter \u201cAutotune Adaptor\u201d) ; a repository ; a metric manager ; an administrator application programming interface (API) ; customizers , , and . The software agent of  interacts with one or more target systems and\/or one or more other Autotune Agents (hereinafter interchangeably referred to as \u201ctarget system\u201d or \u201cother Autotune Agent\u201d to illustrate that a software agent according to the present invention may interact with other agents as well as target systems which are not other agents) . The preceding illustrates that an Autotune agent can itself be a target system of another Autotune agent.","An Autotune Agent can be composed of one or more Autotune Controllers and one or more Autotune Adaptors. When there are multiple Autotune Controllers in the agent, one of them is designated the Master Controller  and is responsible for generating the final control action. Depending on the control algorithm, the Master Controller  may use any of the other (Slave) Controllers  as subroutines to help determine the desired control action.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":["390","370","380","310","320","330","340"]},"Metrics are managed through the Metric Manager . This entity provides interfaces to add, delete and list (getMetrics( ) in ) the set of Metrics known to the agent. The Metric Manager  allows the Administrator, via the customizer  or the Administrator API , to select a subset of the known metrics to be logged to the repository , which can be used for logging purposes. The Metric Manager  provides a set of miscellaneous functions such as selecting the logging destination and enabling\/disabling the logging function.","The Autotune Adaptor  is the interface of the Agent to the target application(s) . Each Autotune Adaptor  defines the set of Metrics that it knows about. This set can be obtained by querying the Autotune Adaptor  (getMetrics( ) in ). For the read-only metrics, the Autotune Adaptor  provides a means of getting the latest value of those metrics from the target system  (process( ) in ). For the Tuning Control metrics, the Autotune Adaptor  provides a means to set the value of that tuning control on the target system  (setControl( ) in ). The Autotune Adaptor  is target-specific, and provides an abstraction so that the control algorithm itself need not be directly tied to a particular target system. In order to apply the same control algorithm to another target system, one need only substitute an Autotune Adaptor for that target system. Note that the target system  can be any external entity including, for example, another Autotune Agent. This property allows us to build a chain of agents, which we will utilize later to build an agent hierarchy.","An Autotune Controller ,  implements a control strategy. The Autotune Controller ,  obtains all metrics of interest from the Metric Manager (using getMetric( )). The Autotune Controller ,  provides mechanisms to compute errors (deviations from the desired service level), compute new control values and to set those control values (by invoking the corresponding Autotune Adaptor  component via setControl( ) ).","A typical control loop is as follows:\n\n","It is to be appreciated that step  immediately above (compute errors) is an optional step. While most control algorithms operate on the error, there are some that do not operate on the error. Of course, other variations are possible and readily contemplated by one of ordinary skill in the related art.","The Autotune Adaptors  may operate in a synchronous or asynchronous manner. \u201cSynchronous\u201d means that the Autotune Adaptor  is invoked just prior to computing the new control value. In asynchronous mode, the Autotune Adaptor  is assumed to be invoked on its own at some other (user-defined) frequency to obtain the latest Metric values. This feature allows us to implement Autotune controllers where the control frequency is not the same as the sensing frequency.","In computing errors from the desired service level, the Autotune controller may access any of the Metrics known to the Metric Manager , as necessary.","The user-interface for each of the components (Metric Manager , Autotune Adaptor , Autotune Controllers , ) is provided through Customizers , , . Customizers are entities that provide a GUI to the low-level details of each component. In the illustrative embodiments described herein, there is one Customizer for each element that is part of an agent. Of course, other arrangements are possible, including, but not limited to one Customizer for each type of element (e.g., Autotune controller, adaptor, and so forth) that is part of an agent. In the case of the Metric Manager , for example, Customizers allow a user to specify which metrics are to be logged, the location of the log file, and so forth. In the case of an Autotune Controller, they allow us to set the control frequency, select the Master Autotune Controller, etc. For the Autotune Adaptor , we may choose the operation mode: synchronous\/asynchronous and also set the tuning control manually (in case we do not want the automated agent to operate). The Customizers , ,  also provide a way to expose the available Metrics to the user, so that real-time monitoring may be performed.","We now provide concrete examples of how this framework can be used to easily create software agents for controlling a wide variety of computer systems. In order to instantiate a particular agent, one needs the following components: Autotune Adaptors for each target system, and one (or more) control algorithms.",{"@attributes":{"id":"p-0049","num":"0055"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["410","460","450","440","465","470","480","490","460"]},"The basic agent creation process for a scenario with a single target system and a single control algorithm (as in ) is shown with respect to  below.","The same Agent, using the same control strategy can be targeted to a different system simply by replacing the current Adaptor component with that for the new target system. This enables reuse of existing knowledge. Similarly, the control algorithm can be easily changed by replacing the Controller module.",{"@attributes":{"id":"p-0052","num":"0058"},"figref":"FIG. 5"},"The software agent of  includes: a master Autotune Controller ; one or more slave Autotune Controllers (hereinafter \u201cslave Autotune Controller\u201d) ; an Autotune Adaptor ; a repository ; a metric manager ; an administrator API ; customizers , , and . The software agent of  interacts with a target system or another Autotune Agent (hereinafter interchangeably referred to as \u201ctarget system\u201d or \u201cother Autotune Agent\u201d) .","Here, the master Autotune Controller  implements the top-level control strategy that utilizes multiple lower-level control strategies to compute the control value. This agent can be created as described with respect to  below.",{"@attributes":{"id":"p-0055","num":"0061"},"figref":"FIG. 6","b":["610","620","630","640","650","660","670","640","650","660","670","1","681","2","682","3","683","4","684"]},{"@attributes":{"id":"p-0056","num":"0062"},"figref":["FIG. 7","FIG. 6","FIG. 7","FIG. 7"],"b":["710","730","760","710","730","760","720","750","740","765","770","780","790"]},{"@attributes":{"id":"p-0057","num":"0063"},"figref":["FIG. 8","FIG. 8"]},"One or more Autotune Adaptors are specified\/created (step ). It is then determined whether the agent is to employ more than one control strategy or control algorithm (step ). If so, then 1 through N (N\u22672) Autotune Controllers are specified\/created (step ), and the method proceeds to step . Otherwise, a single Autotune controller is specified\/created (step ), and the method proceeds to step .","At steps  and , control parameters are selected\/generated via one or more customizers. Both of steps  and  may include selecting parameters such as, for example, a controller frequency, synchronous\/asynchronous mode, logging metrics, and so forth. However, step  must include selecting a master Autotune Controller from among the 1 through N Autotune controllers.","It is to be appreciated that the present invention provides a generic, automated tuning system. Advantageously, the present invention does not require experts to incorporate detailed knowledge of a target system into the tuning system. rather, the present invention may learn the target's performance characteristics. This may include having a generic automated tuning system according to the present invention exploit prior knowledge of the target system, when such knowledge is available, reliable, and durable.","Although the illustrative embodiments have been described herein with reference to the accompanying drawings, it is to be understood that the present system and method is not limited to those precise embodiments, and that various other changes and modifications may be affected therein by one skilled in the art without departing from the scope or spirit of the invention. All such changes and modifications are intended to be included within the scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
