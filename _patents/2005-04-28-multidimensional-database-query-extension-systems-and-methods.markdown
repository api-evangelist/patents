---
title: Multidimensional database query extension systems and methods
abstract: The subject invention pertains to the integration of an object model and a multidimensional database query language such as MDX. In particular, multidimensional declarative query language entities can be exposed through objects in an object model. The object model enables generation and employment of procedural language functions, routines, or procedures that interact with multidimensional database data. This effectively provides an extension for multidimensional query languages. For example, procedures can be stored and invoked from a declarative language query. Furthermore, the object model disclosed herein can expose a context object to enable conditional procedures based on the context of execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07937401&OS=07937401&RS=07937401
owner: Microsoft Corporation
number: 07937401
owner_city: Redmond
owner_country: US
publication_date: 20050428
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application Ser. No. 60\/586,541, filed Jul. 9, 2004, entitled \u201cSystems and Methods to Analyze Database Data,\u201d the entirety of which is incorporated herein by reference.","The subject invention relates generally to databases and more particularly toward multidimensional database query systems and methods","Data warehousing and online analytical processing (OLAP) are widespread technologies employed to support business decisions and data analysis. A data warehouse is a nonvolatile repository for an enormous volume of organizational or enterprise information (e.g., 100 MB-TB). These data warehouses are populated at regular intervals with data from one or more heterogeneous data sources, for example from multiple transactional systems. This aggregation of data provides a consolidated view of an organization from which valuable information can be derived. Though the sheer volume can be overwhelming, the organization of data can help ensure timely retrieval of useful information.","Data warehouse data is often stored in accordance with a multidimensional database model. Conceptually in multidimensional database systems, data is represented as cubes with a plurality of dimensions and measures, rather than relational tables with rows and columns. A cube includes groups of data such as three or more dimensions and one or more measures. Dimensions are a cube attribute that contains data of a similar type. Each dimension has a hierarchy of levels or categories of aggregated data. Accordingly, data can be viewed at different levels of detail. Measures represent real values, which are to be analyzed. The multidimensional model is optimized to deal with large amounts of data. In particular, it allows users execute complex queries on a data cube. OLAP is almost synonymous with multidimensional databases.","OLAP is a key element in a data warehouse system. OLAP describes category of technologies or tools utilized to retrieve data from a data warehouse. These tools can extract and present multidimensional data from different points of view to assist and support managers and other individuals examining and analyzing data. The multidimensional data model is advantageous with respect to OLAP as it allows users to easily formulate complex queries, and filter or slice data into meaningful subsets, among other things. There are two basic types of OLAP architectures MOLAP and ROLAP. MOLAP (Multidimensional OLAP) utilizes a true multidimensional database to store data. ROLAP (Relational OLAP) utilizes a relational database to store data but is mapped so that an OLAP tool sees the data as multidimensional. HOLAP (Hybrid OLAP) is an amalgam of both MOLAP and ROLAP.","Multidimensional databases and other databases modeled as multidimensional employ a multidimensional query language such as MDX (MultiDimensional eXpressions) to retrieve and interact with data. More specifically, data can be retrieved utilizing the query language to define or describe specifically the data to be retrieved (i.e., declarative language), for example employing select, where and from clauses. Subsequently, an execution engine receives the query definition and returns the requested data.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","Briefly described the subject invention concerns an object model and extension of a multidimensional query language including but not limited to MDX. The object model exposes query language objects to facilitate support of object-oriented procedural programs. Thus, programmers are able to employ procedural code against a multidimensional database, for example employing such languages as C#, C++, Java, and the like. Extending multidimensional database query languages to support both declarative and procedure code expands the power of a query language. Such increased power can enable users to easily tailor multidimensional queries and associated functionality to their own business model and analytical needs, among other things.","According to an aspect of the invention, a computer program system for interacting with multidimensional databases and data formats is disclosed. The system can include an object model that exposes multidimensional query language objects, a receiver component that receives procedural code based on the object model as well as a compilation component that compiles the received code into a computer executable format.","In accordance with another aspect of the invention, the disclosed object model can include a context object. The context object enables a procedure to capture the current context during the execution of a query and ultimately utilize it. The context object can include but is not limited to such properties identifying the current cube, the current database, the pass number, and the current server. The context can be employed to enable generation of conditional code that depends of the context of execution.","According to yet another aspect of the invention, procedural language procedures, routines, or functions can be stored, for example one a server, and accessed via calls invoking such procedures from a multidimensional query. Consequently, the subject invention also provides systems and methods to support stored procedures.","According to an aspect of the invention, a deployment system and method are provided. The deployment system includes a development component for specifying a procedure and a compiler component that compiles the procedure and stores the compiled code (e.g., binary file, dll . . . ) to a data store such as one associated with a server or more particularly an OLAP server.","In accordance with yet another aspect of the invention, query processing systems and methods disclosed. These systems and methods provide mechanisms and means to query multidimensional data utilizing both declarative and procedural query statements alone or in combination.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced, all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the annexed drawings, wherein like numerals refer to like or corresponding elements throughout. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention.","As used in this application, the terms \u201ccomponent\u201d and \u201csystem\u201d and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an instance, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a computer and the computer can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","The word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs.","Furthermore, the present invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed invention. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. For example, computer readable media can include but are not limited to magnetic storage devices (e.g., hard disk, floppy disk, magnetic strips . . . ), optical disks (e.g., compact disk (CD), digital versatile disk (DVD) . . . ), smart cards, and flash memory devices (e.g., card, stick, key drive . . . ). Additionally it should be appreciated that a carrier wave can be employed to carry computer-readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network (LAN). Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the subject invention.","Turning initially to , a programmatic system  for interaction with multidimensional data is depicted in accordance with an aspect of the subject invention. System  includes a receiver component , a multidimensional object model  and a compilation component . Receiver component  receives source code in an object-oriented procedural programming language alone or in combination with a declarative programming language. In accordance with an aspect of the invention, the source code received by receiver component  pertains to interaction with multidimensional data. Multidimensional data includes multidimensional database data formats. In particular, multidimensional data is organized logically in cubes with a plurality of dimensions, levels members, and measures, among other things. Accordingly, code component can receive source code in procedural languages including but not limited to C#, Java, and Visual Basic, alone or in combination with declarative languages such as MDX (Multidimensional Expressions). MDX is a declarative language specifically designed to make access of multidimensional data from cubes, dimensions, and the like both easy and intuitive. Multidimensional object model  (also referred to herein simply as object model) encapsulates and exposes objects and functionality of a declarative query language, such as MDX, to object oriented procedural languages such as but not limited to C#, Visual Basic, C++, and Java. For instance, object model  can include a collection of classes defining functions and\/or procedures provided by a declarative language and relationships amongst the classes. The source code obtained by code receiver component  can be passed or transmitted via data packets to compilation component . Compilation component  converts the high-level source code into computer-readable machine code. This compiled code can then be stored and\/or executed by a computer (as defined infra) thereby transforming the computer into a specialized machine. Object model  can be compiled together with or linked to the source code thus enabling specification and execution of multidimensional functions and procedures. Of course, the compiler component  can also load, link, or otherwise interact with other objects models, libraries and the like associated with one or more procedure programming languages that the compilation component  can compile.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["200","200","200","202","202","202"]},"Dimension object  can have properties such as name, unique name, description, parent cube, dimension type, write enabled, and caption. Name can be a string identify for the dimension object name. Unique name can be a string providing a unique identifier for the object. Description can be a string providing a description of the object. The parent cube property can be utilized to identify the parent cube for the dimension object. Dimension type can be an enumerator providing the dimension type. Write enabled can be a Boolean value specifying whether the dimension can be written. Caption can be a string providing a caption for the current locale. The illustrated hierarchy also provides that the dimension object  can include hierarchies, attribute hierarchies, and properties.","Hierarchy object  can include properties such as name, unique name for object, description, parent dimension, default member, display folder, caption, and hierarchy origin. Default member can be a string unique name for the default member of the hierarchy. Display folder can be a string identifying a display folder for the hierarchy. The hierarchy identifies that the hierarchy object  can include collections such as levels and properties.","Level object  can include properties such as name, unique name, description, parent hierarchy, level type, member count, level number and caption. Member count is the exact count of members on the level. Level number can be an integer specifying the distance between the level and the root of the hierarchy. Level objects  can also include collections of level properties for the level as well as properties of the collection. Level objects  can further include a number of methods. For example, level objects  can include a GetMembers method with various parameters to retrieve levels or dimension members.","Member object  can include properties such as name, unique name, description, parent level, parent, caption, level depth, child count, drilled down, level depth, level name, and type. The member object can also include collections member properties where every member property of the member is exposed and properties.","Measure object  can also include a myriad of properties such as name, unique value, caption, display folder, description, numeric precision, numeric scale, units, expression, and parent cube. It should further be appreciated that the remaining objects, named set , KPI , mining model , mining service , and mining structure  can all include one or more of a plurality of properties, collections, and methods associated with MDX.","MDXValue object  indicates that the object model supports MDX values. The MDXValue object has no public properties, methods or collections. It is the return type from MDX functions and can be converted or cast to other types for further manipulation in stored procedure code, for instance.","MDX object  simply indicates the names space for using MDX functions. This removes the need to precede every function name with the MDXFunction by declaring it as a namespace. The following example uses the cross join function to create a set object:",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"MDX.Set tset1;"},{"entry":"MDX.Set tset2;"},{"entry":"MDX.Set tset3;"},{"entry":"tset1 ="},{"entry":"Database(0).Cube(0).Dimension(0).Hierarchy(0).Level(0).Members;"},{"entry":"tset1 ="},{"entry":"Database(0).Cube(0).Dimension(1).Hierarchy(0).Level(0).Members;"},{"entry":"tset3 = MDX.MDX.Crossjoin(tset1, tset2);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Expression object  indicates that MDX value expressions are supported. For example:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MDX.Member X;"]},{"entry":[{},"X = X.Parent;"]},{"entry":[{},"X = X.Lead(3);"]},{"entry":[{},"X = X.FirstChild;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Object model  can also include a context object . The context object  enables a procedure to obtain current context during the execution of a query and make use of it. The context object  need not be explicitly passed or returned by a procedure. It can be available during execution of the procedure. Furthermore, it can be a read only value(s). The context object  can include a plurality of properties. For example, the context object  can include properties including but not limited to current cube, current database name, pass, and current server id. The current cube property can identify the cube for current query context. Current database name can be a property that identifies, as the name suggests, the current database. The pass property can be an integer that specifies the pass number for the current context. A pass can correspond to a stage of computation or calculation. The pass number can start at zero and be incremented for each calculation pass. The current server id property can be a string that specifies or identifies the current server or instance name.","One significant power of the context object  in the object model  can be with respect to a current tuple property. Through the current property, for example, one can reach the current member property in every dimension. The tuple type can include a set of members, and from each member there can be a member object (as previously described). From that member object, one can find all relevant properties such as its level, hierarchy, dimension, member properties, and so forth. Accordingly, code can be written or specified to act conditionally depending on, for instance, the member from a certain dimension being analyzed.","Consider the following pseudo-code example where a procedure is designed to take code path conditional based on whether TimeDimension's CurrentMember is the DefaultMember for the hierarchy.",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"MDX.Cub cub;"},{"entry":"MDX.Tuple CurTup;"},{"entry":"MDX.Member DefMemb;"},{"entry":"MDX.Member memb;"},{"entry":"MDX.Dimension TimeDim;"},{"entry":"MDX.Level YrLev;"},{"entry":"cub = MDX.Context.CurrentCube;"},{"entry":"CurTup = MDX.Context.CurrentTuple;"},{"entry":"TimeDim = cub.Dimensions(\u201c[Time]\u201d);"},{"entry":"YrLev = cub.Dimension(\u201c[Time]\u201d).Hierarchies(0).Levels(\u201cYear\u201d);"},{"entry":"TimeMemb1997 ="},{"entry":"cub.Dimensions(\u201c[Time]\u201d).Hierarchies(0)."},{"entry":"Levels(\u201c[Year]\u201d).Members(\u201c[1997]\u201d);"},{"entry":"TimeMemb1998 ="},{"entry":"Cub.Dimensions(\u201c[Time]\u201d).Hierarchies(0)."},{"entry":"Levels(\u201c[Year]\u201d).Members(\u201c[1998]\u201d);"},{"entry":"For each memb in CurTup {"},{"entry":"If memb.ParentLevel.ParentHierarchy.ParentDimension = TimeDim"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"Switch (MDXFunction.Ancestor(memb, YrLev)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"Case TimeMemb 1997:"]},{"entry":[{},"\u2003DoSomething( );"]},{"entry":[{},"\u2003break;"]},{"entry":[{},"Case TimeMemb 1998:"]},{"entry":[{},"\u2003DoSomething( );"]},{"entry":[{},"\u2003break;"]},{"entry":[{},"Default:"]},{"entry":[{},"\u2003DoDefault( );"]},{"entry":[{},"\u2003break;"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If (MDX.Context.Pass > 5) {. . .}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Turning to , a procedure deployment system  is depicted in accordance with an aspect of the subject invention. System  includes development component , compiler component , and data store . Development component  facilitates generation of procedural language procedures, routines, or functions. Accordingly, development component  can be a source code editor. Users can employ development component  to produce one or more routines or extensions utilizing a procedural language (e.g., C, C#, Java . . . ) and an object model that includes objects supporting a multidimensional database query type system such as MDX. Furthermore, it should be noted that the routines could employ the context object (described supra) to enable generation of conditional extension code that depends on the context in which the extension is executing. Compiler component  can receive or retrieve a produced function, compile such function, and generate an object file or an executable. The compiler component  can subsequently save or upload the compiled extension to data store . In accordance with an aspect of the invention, database  can be part of a server such as an OLAP server. Storage of the compiled function to the database  makes the extension available for employment by later queries. Finally, it should be appreciated that while illustrated separately, development component  and compiler component  can be incorporated into a single system such as an integrated development environment (IDE).",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4","b":["400","400","410","420","330","410","410","410","420","420","330","410","420","330"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["500","500","510","520","410","420","530","540","510","510","510","520","520","410","530","410","420","420","410","410","410","530","520","530","540","530","530","510"]},"To further clarify the operation of system  consider the following example: Assume that the interface component received the MDX query \u201cSelect my_stored_procedure(args) on 0 from Sales.\u201d The parser component  can receive this query and identify the extension component \u201cmy_stored_procedure(args).\u201d This extension can be provided to the formula component , which sends it the execution engine . Execution engine  can located and then execute the procedure based on the arguments provided. Thereafter, the result or result object, for instance the MDX \u201cSet\u201d object, can be return to the formula component . The formula component  can then pass and the query component  can receive the result of the extension execution. A new declaratory query can then be generated by the query component  incorporating the extension result, \u201cSelect \u2018result object\u2019 on 0 from Sales.\u201d Query results can then be passed back to the query component , which passes it to the interface component , which can ultimately output the result to the requesting entity.","Furthermore, it should be noted that the objects in the object model can be passed as parameters to store procedures or extensions as well as returned as results therefrom. Thus in the case of MDX syntax, invocation of an extension or stored procedure does not differ from invocation of any other MDX function which takes MDX objects as parameters and returns one or more MDX objects as a result.","As with all system figures, it should be appreciated that one or more components illustrated and\/or described as separate and distinct components can be combined into one or a lesser number of components providing the same aggregate functionality. Figures are illustrated herein to facilitated clarity and understanding. However, other combinations, aggregations or even additional components are contemplated and within the scope of the subject invention. With respect to system , the query component  and the formula engine , as well as the query execution engine  and the execution engine  can be combined such that there is one component that passes a query including procedural calls or invocations and another component that executes the query and procedural calls.","Turning to , a multidimensional database interaction system  is illustrated in accordance with an aspect of the subject invention. System  can include a set of two interfaces, namely user interface  and system interface component , to facilitate interaction with a multidimensional database system that process queries that include procedural routine calls or the like. User Interface component  receives multidimensional queries from users or other entities. In particular, interface component  can receive multidimensional declarative queries that include calls to procedural functions or routines. According to an aspect of the invention, the query can be an MDX query, for example \u201cSelect procedure(args) on 0 from Sales.\u201d System interface component  receives the multidimensional query from the user interface component  and returns the results of such a query. These results can be provided back to the user interface component . The user interface component  can then provide the results back to the query submitting entity. According to an aspect of the invention, user interface component  and system interface component  can be separate application programming interfaces or subcomponents for single application interface providing aggregate functionality.","In view of the exemplary systems described supra, methodologies that may be implemented in accordance with the present invention will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation, the methodologies are shown and described as a series of blocks, it is to be understood and appreciated that the present invention is not limited by the order of the blocks, as some blocks may, in accordance with the present invention, occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Moreover, not all illustrated blocks may be required to implement the methodology in accordance with the present invention.","Additionally, it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture, as used herein, is intended to encompass a computer program accessible from any computer-readable device, carrier, or media.","Turning to , a method of querying multidimensional data  is illustrated in accordance with an aspect of the subject invention. At , a query is received that includes a procedure or procedure call. Stated differently, rather than the being purely declarative, the query can include procedural elements such as routines, functions or references thereto. These procedural elements facilitate algorithmic manipulation of multidimensional entities (e.g., cubes, dimensions, members, sets, tuples . . . ) via objects. In particular, declarative query functionality for instance defined by MDX can be exposed to object-oriented procedural languages through an object model as described herein. According to one aspect of the invention, the object model can include a context object that can be employed to allow execution of conditional procedures or functions based on the context of execution. At , an execution engine can execute the received query on a database (e.g., relational, multidimensional, hybrid . . . ). According to an aspect of the invention, the execution engine can be tightly integrated with the object model thereby allowing efficient execution of one or both of declarative and procedural query statements. As will be described in the later sections, the queries can include calls to stored procedures, which the execution engine can invoke together with declarative statements. At , the results of the query can be returned to the requesting entity. For example, the results can be provided to another program for further calculation or interpretation or presented via display to one or more users.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 8","b":["800","810","820","830"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9","b":["900","910","920","930","932","970","940","950","960","970"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 10","b":["1000","1000","1110","1120","1130","1130","1070","1130","1040","1040","1050","1060","1070","1080","1090"]},"In order to provide a context for the various aspects of the invention,  as well as the following discussion are intended to provide a brief, general description of a suitable computing environment in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer-executable instructions of a computer program that runs on a computer and\/or computers, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, mini-computing devices, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like. The illustrated aspects of the invention may also be practiced in distributed computing environments where task are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the invention can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, 11-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSI).","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/nonvolatile computer storage media.  illustrates, for example disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer  and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like displays (e.g., flat panel and CRT), speakers, and printers, among other output devices  that require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet\/IEEE 802.3, Token Ring\/IEEE 802.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit-switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems, power modems and DSL modems, ISDN adapters, and Ethernet cards.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 12","b":["1200","1200","1210","1210","1200","1230","1230","1230","1210","1230","1200","1250","1210","1230","1210","1260","1210","1230","1240","1230"]},"What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the terms \u201cincludes,\u201d \u201chas,\u201d and \u201chaving\u201d are used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
