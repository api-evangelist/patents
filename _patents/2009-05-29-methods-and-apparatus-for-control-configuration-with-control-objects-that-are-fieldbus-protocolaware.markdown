---
title: Methods and apparatus for control configuration with control objects that are fieldbus protocol-aware
abstract: The invention provides, in some aspects, improved apparatus for configuring a control system. The apparatus includes a model made up of objects representing devices of such a system, including, at least one device that defines and/or controls communications on at least a portion of a network within that system. That device is referred to, here, as a “bus master” and the portion of the network is referred to as a “segment.” The object (or objects) representing the bus master can include information defining timings, port assignments and/or other aspects of the configuration of the segment. A download service transfers configuration information from objects in the model to devices in the control system. This includes transferring to the bus master communications configuration information for the segment. A download service according to this aspect of the invention generates—e.g., for logging by a change tracking system—indicia of the configuration information transferred to the bus master. The download service can likewise generate for logging (by the change tracking system) information transferred from the model to other devices in control system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08127060&OS=08127060&RS=08127060
owner: Invensys Systems, Inc
number: 08127060
owner_city: Foxboro
owner_country: US
publication_date: 20090529
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE ILLUSTRATED EMBODIMENT"],"p":["This application is related to U.S. patent application Ser. No. 12\/265,837, filed Nov. 6, 2008, entitled \u201cApparatus for Control Systems with Objects that Are Associated with Live Data,\u201d which is a continuation of U.S. application Ser. No. 12\/247,872, filed Oct. 8, 2008 and entitled \u201cCONTROL SYSTEM EDITOR AND METHODS WITH LIVE DATA\u201d, which is a continuation of U.S. application Ser. No. 11\/434,005, filed May 15, 2006 and entitled \u201cMETHOD AND APPARATUS FOR CONTROL CONFIGURATION USING LIVE DATA\u201d, which is a continuation of U.S. application Ser. No. 09\/572,343, filed May 17, 2000, entitled \u201cMETHODS AND APPARATUS FOR CONTROL CONFIGURATION WITH VERSIONING, SECURITY, COMPOSITE BLOCKS, EDIT SELECTION, OBJECT SWAPPING, FORMULAIC VALUES AND OTHER ASPECTS\u201d (now issued as U.S. Pat. No. 7,272,815), which is a continuation of U.S. application Ser. No. 09\/448,223, filed Nov. 23, 1999, entitled \u201cPROCESS CONTROL CONFIGURATION SYSTEM WITH CONNECTION VALIDATION AND CONFIGURATION\u201d (now issued as U.S. Pat. No. 7,089,530) and is a continuation of U.S. application Ser. No. 09\/448,374, filed Nov. 23, 1999, entitled \u201cPROCESS CONTROL CONFIGURATION SYSTEM WITH PARAMETERIZED OBJECTS\u201d (now issued as U.S. Pat. No. 7,096,465) and is a continuation of U.S. application Ser. No. 09\/448,845, filed Nov. 23, 1999, entitled \u201cMETHODS AND APPARATUS FOR CONTROLLING OBJECT APPEARANCE IN A PROCESS CONTROL CONFIGURATION SYSTEM\u201d (now issued as U.S. Pat. No. 6,754,885) and which claims the benefit of priority of U.S. application Ser. No. 60\/134,597, filed May 17, 1999, entitled \u201cINTEGRATED DESIGN AUTOMATION CONTROL STRATEGY CONFIGURATOR ARCHITECTURE\u201d; the teachings of all of the aforementioned applications (including the forms thereof published by the United States Patent and Trademark Office and the patents issued therefrom, including, by way of non-limiting example, U.S. Pat. Nos. 6,754,885, 7,096,465, 7,089,530, 7,272,815), are incorporated herein by reference.","The invention pertains to control and, more particularly, to methods and apparatus for configuring control systems.","The terms \u201ccontrol\u201d and \u201ccontrol systems\u201d refer to the control of a device or system by monitoring one or more of its characteristics. This is used to insure that output, processing, quality and\/or efficiency remain within desired parameters over the course of time. In many control systems, digital data processing or other automated apparatus monitor a device, process or system and automatically adjust its operational parameters. In other control systems, such apparatus monitor the device, process or system and display alarms or other indicia of its characteristics, leaving responsibility for adjustment to the operator.","Control is used in a number of fields. Process control, for example, is typically employed in the manufacturing sector for process, repetitive and discrete manufactures, though, it also has wide application in utility and other service industries. Environmental control finds application in residential, commercial, institutional and industrial settings, where temperature and other environmental factors must be properly maintained. Control is also used in articles of manufacture, from toasters to aircraft, to monitor and control device operation.","Modern day control systems typically include a combination of field devices, control devices, and controllers, the functions of which may overlap or be combined. Field devices include temperature, flow and other sensors that measure characteristics of the device, process or system being controlled. Control devices include valves, actuators, and the like, that control the device, process or system itself.","Controllers generate settings for the control devices based on measurements from the field devices. Controller operation is typically based on a \u201ccontrol algorithm\u201d that maintains a controlled system at a desired level, or drives it to that level, by minimizing differences between the values measured by the sensors and, for example, a setpoint defined by the operator.","In a food processing plant, for example, a controller can be used to maintain a soup stock at a simmer or low boil. This is done by comparing measurements of vapor pressure in the processing vessel with a desired setpoint. If the vessel pressure is too low, the control algorithm may call for incrementally opening the heating gas valves, thereby, driving the pressure and boiling activity upwards. As the pressure approaches the desired setpoint, the algorithm requires incrementally leveling the valves to maintain the roil of the boil.","Controllers may be networked or otherwise connected to other computing apparatus that facilitate monitoring or administration. The so-called S88 industry standard, described in 1: (The International Society for Measurement and Control 1995), for example, defines a hierarchy of processing and control equipment (\u201cequipment entities\u201d) that can be used to model and control an automated manufacturing process. At the lowest level of the hierarchy are control modules that directly manipulate field devices (e.g., opening and closing valves) and, possibly, other control modules. At a higher level, equipment modules coordinate the functions control modules, as well as of other equipment modules, and may execute phases of the manufacturing process (such as setting controller constants and modes). \u201cUnits,\u201d at still a higher level of the hierarchy, coordinate the functions of equipment and control modules. Process cells orchestrate all processing activities required to produce a manufacturing batch, e.g., scheduling, preparing and monitoring equipment or resources, and so forth.","The principal function of controllers is executing control algorithms for the real-time monitoring and control of devices, processes or systems. They typically have neither the computing power nor user interfaces required to facilitate the design of a control algorithm. Instead, the art has developed configurators. These are typically general purpose computers (e.g., workstations) running software that permit an engineer or operator to graphically model a device, process or system and the desired strategy for controlling it. This includes enumerating field devices, control devices, controllers and other apparatus that will be used for control, specifying their interrelationships and the information that will be transferred among them, as well as detailing the calculations and methodology they will apply for purposes of control. Once modeling is complete and tested, the control algorithm is downloaded to the controllers.","One well known process control system configurator is that provided with the I\/A Series\u00ae (hereinafter, \u201cIAS\u201d or \u201cI\/A\u201d) systems, marketed by the assignee hereof. These provide a graphical interface (FoxCAE) permitting an engineer to model a process hierarchically and to define a control algorithm from that hierarchy. Multiple editors are provided for defining and modifying modules within the hierarchy. A change management system, FoxCMS\u00ae, also marketed by the assignee hereof, provides for logging of configuration changes downloaded to controllers by the I\/A Series system.","Though prior art process control configuration systems, particularly, the IAS systems and others sold by the assignee hereof, have met wide acceptance in the industry, there remains room for improvement. Such is the case, for example, with respect to the configuration of complex control systems, as well as with the tracking of configuration changes downloaded to those systems.","In this context, an object of the present invention is to provide improved methods and apparatus for control and, particularly, for configuring control systems. A related object of the invention is to provide methods and apparatus for configuring a process control systems.","A further object of the invention is to provide such methods and apparatus as facilitate configuring large or complex control systems","Still yet a further object of the invention is to provide such methods and apparatus as can be used in configuring a range of control systems, whether hierarchical or not, whether pertaining to process control or otherwise.","Field Bus Protocol-Aware Objects","The foregoing are among the objects attained by the invention, aspects of which provide improved apparatus for configuring a control system. The apparatus includes a model made up of objects representing, for example, the field devices and other control devices that make up such a system, including, at least one device that defines and\/or controls communications on at least a portion of a network within that system. That device is referred to, here, as a \u201cbus master\u201d and the portion of the network is referred to as a \u201csegment.\u201d The object (or objects) representing the bus master can include information defining timings, port assignments and\/or other aspects of the configuration of the segment.","A download service transfers configuration information from objects in the model to devices in the control system. These downloads can go directly to the respective devices or can go indirectly, e.g., via other devices in the control system (such as controllers, field bus modules, and so forth). Regardless, the download service can transfer to the bus master communications configuration information for the segment that it (the bus master) configures and\/or controls. The download service according to this aspect of the invention generates\u2014e.g., for logging by a change tracking system\u2014indicia of the configuration information transferred to the bus master. It can likewise generate for logging (again, by the change tracking system) information transferred from the model to other devices in control system.","Objects can represent, by way of non-limiting example, field devices, control devices, control processors, blocks, loops, and compounds. They can also represent entities of a control level hierarchy, e.g., sites, areas, process cells, units, and the like. Parameters can include, for example, inputs, outputs, alarm limits, and control functions. Attributes can include, for example, parameter names, data types, data value ranges, and so forth","In related aspects of the invention, the object(s) representing the bus master in the model of an apparatus as described above can include configuration information defining timing of transfers on the segment configured and\/or controlled by the bus master. That timing information can include and\/or be supplanted by information pertaining to one or more of the following: a master station address, a highest station address that can be assigned to the master station address, a minimum slave interval, a data control time, a data transfer rate, a maximum retry limit, a GAP update factor, a slot time, a minimum station delay response time, a maximum station delay response time, a setup time, a quiet time, a target rotation time, and so forth\u2014all by way of non-limiting example.","In other related aspects of the invention, the download service generates, as indicia of the information transferred to the bus master, one or more XML files that include, for example, the names of transferred bus configuration fields, parameters, etc., and their values. That information can be stored by the download service for retrieval and reporting\u2014e.g., independently and\/or along with other such information from past and future downloads to the same and\/or other devices in the system\u2014to equipment operators, plant owners and other users.","Further aspects of the invention provide apparatus as described above in which in lieu or in addition to object(s) representing a bus master, the model includes one or more objects representing one or more respective devices that are slaves on a segment of the type described above, i.e., a segment defined and\/or controlled by a bus master. Such object(s) can likewise include information defining a configuration of the segment. The download service of this and\/or related aspects of the invention can transfer that information to the bus slave(s) and can also generate indicia of it for logging to the change tracking system (e.g., for retrieval and reporting, as discussed above).","In related aspects of the invention, the object(s) representing the bus slaves in the model of an apparatus as described above can include configuration information defining the timing of information transfers on the segment. That timing information can include and\/or be supplanted by information pertaining to one or more of the following: a minimum station delay response time, a watchdog time, Sync and Freeze mode support, a device failure timeout, groups definition, a DPV1 response timeout, a failsafe flag, and so forth\u2014all by way of non-limiting example.","In other related aspects of the invention, the download service generates, as indicia of the information transferred to the bus slaves, one or more XML files that include, the names of transferred bus configuration fields, parameters, etc., and their values.","Further aspects of the invention provide apparatus as described above in which the segment is a field bus, e.g., that operates in accord with a Profibus standard, a Fieldbus Foundation standard, or otherwise.","In other aspects, the invention provides apparatus for configuring a control system that includes a model as generally described above, as well as a download service that transfers to the control system at least selected configuration information from objects in the model, e.g., again, as generally described above. That download service also generates for logging by a change tracking system indicia of at least selected information transferred to the control system's devices.","The apparatus further includes an editor that permits direct and\/or immediate editing of values stored in the bus master device, including, definition and\/or modification of values used by it for configuration and\/or control of the segment. That editor, which can use a combination of dialog boxes and other edit controls, responds to user input defining and\/or modifying one or more the values stored in the bus master by generating indicia of the defined or changed values for logging by the change tracking system. In addition to permitting such direct and\/or immediate editing of values in the bus master device, the editor can store those values to one or more objects representing the bus master in the aforementioned model.","In related aspects, the invention provides apparatus as described above in which the editor permits user definition and\/or modification of one or more of the following values in the bus master (as well as in the model) defining configuration of the segment: a master station address, a highest station address that can be assigned to the master address, a minimum slave interval, a data control time, a data transfer rate, a maximum retry limit, a GAP update factor, a slot time, a minimum station delay response time, a maximum station delay response time, a setup time, a quiet time, and a target rotation time.","Further aspects of the invention provide apparatus as described above in which in lieu or in addition to supporting immediate and\/or direct editing of values in a bus master, the editor supports such editing of values in a bus slave. The editor can, likewise, respond to user input defining and\/or modifying one or more those values (in the bus slave) by generating indicia of the defined or changed values for logging by the change tracking system. In addition, it can store those values to one or more objects representing the slave in the model.","Other aspects of the invention provide methods paralleling operation of the apparatus described above.","Change Tracking","Still other aspects of the invention provide improved apparatus for configuring a control system that includes a model that is made up of one or more objects representing one or more devices in the system. The objects have parameters reflecting characteristics of the devices represented by the respective objects. At least one of those parameters is associated with a \u201ctrack\u201d attribute indicating whether at least selected configuration information transferred from that object to the respective device in the control system is to be logged to a change tracking system.","A download service transfers configuration information from objects in the model to devices in the control system. Those downloads can go directly to the respective devices or can go indirectly, e.g., via other devices in the control system (such as controllers, field bus modules, and so forth). Regardless, the download service according to this aspect of the invention generates for logging by the change tracking system indicia of that transferred configuration information. Generation of those indicia is governed, at least in part, by the \u201ctrack\u201d attribute associated with one or more of the parameters with which the transferred information is associated.","According to further aspects of the invention, an object can be created and\/or otherwise defined as a descendant of an existing object, using edit functionality (or \u201ceditor\u201d) of the apparatus. A descendant object inherits parameters from its ancestor object(s), such that a change to the latter is effective as to the former. In related aspects of the invention, an editor (or other such functionality) permits a user to edit parameters and attributes of an object, including the \u201ctrack\u201d attribute.","As above, according to aspects of the invention, the objects of the model utilized in an apparatus as described above can represent, by way of non-limiting example, field devices, control devices, control processors, blocks, loops, and compounds. They can also represent entities of a control level hierarchy, e.g., sites, areas, process cells, units, and the like. Parameters can include, for example, inputs, outputs, alarm limits, and control functions. Attributes can include, for example, parameter names, data types, data value ranges, and so forth.","To illustrate by way of a non-limiting example, an apparatus according to the invention for use in configuring process control systems can employ an object to model a \u201cconventional\u201d analog input (AIN) field device of the type used in a particular product. That object can include output, high-high alarm, high-low alarm and other parameters of the type used for configuring such devices. One or more of these parameters, say, for example, the high-high alarm and high-low alarm parameters, \u201ctrack\u201d attributes indicating that their respective (alarm) values are to be logged to the change tracking system at download time.","The editor can be used to define a further object, one that models an analog input device for use for high-temperature measurements (throughout). That object can descend from the general AIN object and inherit its parameters, e.g., the high-high alarm and high-low alarm parameters, along with their respective attributes\u2014e.g., their alarm value and track attributes. The editor can be used, for example, to alter those attributes, e.g., changing the alarm values and disabling the \u201ctrack\u201d attribute, say, for the high-low alarm of the new object.","When downloading the model to the control system, download services can transfer alarm (and other values) from the parameters of the objects to their respective entities in the control system. Depending on the respective track attributes, those services also transmit the downloaded values to change tracking system for logging. In the example, high-high alarm and high-low alarm values from the general AIN object, while only the high-high alarm of the high-temperature AIN object, are logged.","In other related aspects of the invention, the download service of an apparatus as described above generates, as indicia of the transferred configuration information, one or more XML files that include, for example, the names of transferred parameters and their values. That information can be stored by the download service for retrieval and reporting\u2014e.g., independently and\/or along with other such information from past and future downloads to the same and\/or other devices in the system\u2014to equipment operators, plant owners and other users.","Further aspects of the invention provide an apparatus as described above in which at least one object of the model includes a \u201clock\u201d attribute. Depending on the value of that attribute, the editor permits or prevents, e.g., a user, from changing the track attribute of the corresponding parameter. In related aspects of the invention, the \u201ctrack\u201d attribute of an object cannot be edited if an inherited \u201clock\u201d attribute is defined to prevent such editing\u2014at least until the \u201clock\u201d attribute of the ancestor is changed and\/or the one or both parameters of the descendant are overridden.","Continuing the example, if the \u201clock\u201d attribute of the high-high alarm of the general AIN object is set to prevent modification of the \u201ctrack\u201d attribute of that same parameter, attempts by the user to change that attribute in that object or its high-temperature descendant object will fail\u2014thereby ensuring that the high-high alarm will be logged for both objects during download.","In still further aspects of the invention, the download service of an apparatus as described above selectively transfers configuration information from objects of the model to a device in the control system based on information is a characteristic of the device reflected other than in those objects. According to one such aspect of the invention, such transfers can be conditioned on values in a description file associated with the device. In a related aspect of the invention, the user may override settings contained that file and\/or otherwise force (or prevent) downloading of configuration information to the respective devices and\/or logging of that information to the change tracking system.","Other aspects of the invention provide methods paralleling operation of the apparatus described above.","Still further aspects of the invention provide combinations of the systems, apparatus and methods described above.","These and other aspects of methods and apparatus according to the invention are evident in the drawings and in the description below.","Methods and apparatus according to the invention have numerous advantages over the prior art. Among these is the ability to quickly, flexibly and accurately design and modify control configurations.",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIGS. 1-2","b":["12","12"]},"The system of  include a workstation  that is coupled to one or more control devices, here, controllers A, B, actuators , sensors , , and so forth, on some of which reside process control algorithms for monitoring and\/or controlling one or more processes within subsystems A, B. These may represent independent processes or different aspects of the same or related processes. Moreover, the processes encompassed in subsystems A, B may reside within a single plant, site or area, cell or unit or, conversely, they may dispersed among many plants, sites, areas, cell or units.","Workstation  represents an engineering workstation, personal computer, mainframe computer or other digital data processing device suitable for operation in accord with the methods described herein for purposes of modeling a control system and configuring controllers A, B and other control devices (e.g., actuators , sensors , , and other field devices\u2014of the \u201csmart\u201d variety or otherwise) or controlled apparatus in accord with the teachings herein. Though illustrated as being carried out on workstation , those skilled in the art will appreciate that the modeling and configuration functions described herein can be executed on suitably configured controllers A, B or other control devices (e.g., smart field devices or other control devices those having sufficient processing power and interfaces to provide the graphical and other configuration functions described herein). A discussion of the use of smart field devices and other control devices for modeling and control is provided, by way of example, in U.S. Pat. No. 6,788,980, entitled \u201cMethods and Apparatus for Control Using Control Devices That Provide a Virtual Machine Environment and That Communicate Via an IP Network,\u201d the teachings of which are incorporated herein by reference.","Network  provides a communications medium permitting the downloading of control algorithms and other configuration information to controllers A, B and other control devices , ,  (or controlled apparatus), e.g., from workstation . It can also provide a medium for uploading information from controllers A, B and other control devices , ,  (or controlled apparatus) to those other digital data processors , . Still further, it can provide a medium for communications, real-time or otherwise, among and\/or between the controllers A, B and other control devices , ,  (or controlled apparatus) and other devices, e.g., workstation  and change tracking system . Though illustrated to represent a LAN, WAN, or global network (Internet), those skilled in the art will appreciate that element  may represent any medium or mechanism through which control algorithms and configuration and other information may be transported, electronically, physically or otherwise, to and from controllers A, B.","Change tracking system  is a conventional system of such type known in the art for logging configuration information downloaded to the control system, e.g., to controllers A, B and the other control devices (e.g., actuators , sensors , , and other field devices) or controlled apparatus. This can be for regulatory purposes, safety purposes, maintenance purposes or otherwise, which the system  can additionally support, e.g., via retrieval and reporting services (discussed below). That logged information can include, by way of non-limiting example, control algorithms, operational parameters, I\/O assignments, and so forth. In the illustrated embodiment, the change tracking system  comprises a change tracking (or management) system of the type known in the art and\/or commercially available in the marketplace, albeit as adapted in accord with the teaching hereof. By way of non-limiting example, the change tracking system  may comprise FoxCMS\u00ae, marketed by the assignee hereof, again, as adapted in accord with the teachings hereof.","An exemplary subsystem A including a control process is illustrated in greater detail in . It shows an actuator, such as valve  (or other field device), that governs the rate of fluid flow to aeration tank  which, in turn, transfers the liquid to storage tank . Field devices, i.e., sensors  and , monitor the state of process A and, thereby, facilitate its control by controller A which executes a control algorithm . Thus, sensor  is disposed in or adjacent to tank  for measuring the temperature of fluid therein, while sensor  measures the flow of fluid from aeration tank  to storage tank . The illustrated actuator (valve ), sensors ,  and other field devices (not shown) in the illustrated subsystem may of the \u201csmart\u201d variety or otherwise. In this regard, \u201csmart\u201d field devices are those of the type known in the art that may, for example, include embedded processors and\/or other logic suitable for advanced configuration and\/or operational modes\u2014including execution of control algorithms of their own.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 2A","b":["28","28","10","18","24","26","12","28","29","30","32","12","10"]},{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIGS. 2A and 2B","FIG. 2B"],"b":["10","10","18","24","26","14","14","14","19","14","18","24","26"],"i":["a","a ","a"]},"Illustrated FBM  comprises any conventional control device of such type (e.g., a field bus module) known in the art suitable for serving as a bus master, as adapted in accord with the teachings hereof. In addition to configuring and\/or controlling communications on segment in the conventional manner of a bus master (here, for a Profibus and, again, as adapted in accord with the teachings hereof), the FBM  may serve other functions, e.g., providing power to the bus slaves or otherwise, by way of non-limiting example. Though shown here as a field bus module, it will be appreciated that the bus mastering function may be provided by other control devices, instead or in addition.","The bus slaves can comprise any conventional control devices of such type known in the art, as adapted in accord with the teachings hereof, e.g., whose communications on the segment are determined by the bus master. Thus, for example, these are devices that communicate on the segment only in response to polling by and\/or queries from the bus master and\/or during time slots predetermined by the bus master or otherwise. Those skilled in the art will appreciate that these are only examples of modes of communications by bus slaves and that bus slaves that communicate in other modes are contemplated hereby, as well. As noted, in the illustrated embodiment, the bus slaves comprise actuator  and sensors , . It will be appreciated that these are examples and that other devices may comprise bus slaves instead or in addition.","As noted, illustrated segment operates in accord with the Profibus standard. In alternative embodiments, the segment can be compatible, instead or in addition, with the Fieldbus Foundation standard (i.e., a \u201cFieldbus Foundation link\u201d), the Hart standard, the Modbus standard, or otherwise, and can include (as applicable) bus masters and\/or slaves necessary and\/or desirable to practice in accord with those standards.","Entities , ,  comprise software components which may include, by non-limiting example, source, intermediate or executable code, databases, of the type conventionally used in the art for operating controllers, field devices, control devices and other control equipment. Referenced in this regard in the discussion below are software components, and process control systems in general, marketed as the I\/A Series\u00ae systems (hereinafter, \u201cIAS\u201d or \u201cI\/A\u201d) available from the assignee hereof. Those skilled in the art will appreciate that methods and apparatus according to the invention can be used to model processes and configure control algorithms for use with other control systems, as well.","Described below is a system, referred to here as the Control Algorithm Configurator, the Configurator, the illustrated configuration system, and the like, according to the invention for use in modeling and configuring control processes, as well as for logging downloaded configuration information for change tracking. That system can be constructed and operated in the manner of process control \u201cconfigurators\u201d of the type known in the art\u2014as adapted in accord with the teachings hereof. Thus, by way of example, it can be constructed and operated in the manner of the process control configurator referred to as the \u201cIDA Control Algorithm Configurator,\u201d and the like, in aforementioned incorporated-by-reference U.S. Pat. No. 6,754,885\u2014again, as adapted in accord with the teachings hereof.","Overview","By way of overview, the Configurator employs objects (or other data and\/or programming constructs) to represent the devices that make up a control system, the entities that define the control algorithms executed by those devices, the processes or systems being monitored and\/or controlled by those devices and algorithms, as well as the entities within the configuration apparatus itself.","In the illustrated embodiment, the objects represent, by way of non-limiting example, field devices, field bus modules (FBMs), control devices, control processors, blocks, loops, compounds, bus masters, bus slaves, networks, field buses, historians, object type categories, object connections, parameter connections, display placeholders, graphical display entities, and reports\u2014all by way of non-limiting example. They also represent entities of a control level hierarchy, e.g., sites, areas, process cells, units, and the like. Thus, by way of non-limiting example, the Configurator utilizes objects to represent the elements shown in , A and B, including, but not limited to the bus master (FBM)  and bus slaves (e.g., actuator  and sensors , ).","By way of further example, the Configurator employs \u201cconnection\u201d objects to indicate the permissibility of relationships between other types of objects. Indeed, the Configurator can validate potential relationships between those other objects by comparing their types with the permissible combinations identified in connection objects. To illustrate, a user can employ an editor to select objects that represent field devices and indicate (e.g., via a drag-and-drop operation, a menu option or other command) that she wishes to establish a relationship with an object that represents a control processor. The Configurator validates that relationship, and determine its type, by comparing the proposed combination against permissible pairings in the connection objects.","The objects are stored in the database(s) discussed below and are alternatively referred to as the \u201cdatabase\u201d and\/or the \u201cmodel. They are depicted in the object diagrams provided in the figures attached hereto and discussed herein, as well as by the graphical and textual representations thereof (typically, in the context of the editors), again, in the figures attached hereto and discussed herein.","Parameters, discussed below and elsewhere herein, define characteristics of each object and, therefore, of the element or entity the object represents. Depending on the type of object, these include inputs, outputs, alarm limits, control functions and display characteristics, among others. Each parameter can have attributes that define the parameter's value and other attributes. These include, for example, parameter name, parameter grouping, display label, data type, behavior, help information, edit type, data value range, formula definition, and display format.","Objects used by the Configurator can be defined or modified without recompilation. This is, in part, because the parameters on which they are based can be assigned and modified during configuration and, in this regard, are analogous to data. To this end, the Configurator includes the edit functionality discussed below, by way of non-limiting example, and referred to herein as \u201ceditors,\u201d that facilitate definition, during configuration, of the association between parameters and their respective objects.","These edit capabilities or \u201ceditors\u201d permit, among other things, the user to configure a process control system. Using a graphical user interface of such an editor, for example, a user can \u201cdrag-and-drop\u201d an object that models one system component (e.g., a printer) onto an object that models another component (e.g., an applications workstation), indicating that the user wishes to establish a relationship between those two objects.","The editors also permit an object to be defined as a descendant of another object at the time of configuration. An object so defined derives parameters from its ancestor which, in turn, derives parameters from its own ancestors, and so forth. Unless otherwise overridden, a change to the parameters of an ancestor object is effective as to its descendants, regardless of whether that change is made before or after the descendant is defined or instantiated. Thus, for example, the characteristics of an entire ancestral \u201cfamily\u201d of objects can be changed, simply, by modifying the distant-most ancestor object.","To illustrate by way of a non-limiting example, an apparatus according to the invention for use in configuring process control systems can employ an object to model a \u201cconventional\u201d analog input (AIN) field device of the type used in a particular product. That object can include output, high-high alarm, high-low alarm and other parameters of the type used for modeling such devices. The Configurator can be used to define a further object, one that models an analog input device for use in high-temperature environments. That object can descend from the general AIN object and inherit its parameters, e.g., the high-high alarm and high-low alarm parameters. Configuration-time changes to the parameters of the general AIN object can automatically carry through to the high-temperature AIN object, thus, facilitating configuration of the process control system.","As evident in the discussion below, the Configurator permits association of an object with parameters other than those inherited from ancestors. Thus, for example, a high-temperature AIN object that inherits parameters from a general AIN object can be defined to include additional alarm parameters. Though definition of the additional alarm parameters does not affect the parent object (i.e., the general AIN object), it does carry through to children, grandchildren, etc., of the high-temperature AIN object.","Referring to , a configuration system according to one embodiment of the invention includes a Framework, a Database, a project manager and a set of editors. The Framework provides common resources, such as menus, toolbars, dialogs, and security services, used by the editors to manipulate, display and report configuration data stored in the model\/configuration database. In one practice of the invention, the Configurator and Framework are packaged as a single application. This software package can be installed on either a stand-alone PC, workstation (e.g., element  of ) or other digital data processor, e.g., running Windows NT or any other suitable operating system.","The editors are used by the implementation creator to create and maintain standard control scheme definition objects distributed with the implementation and by users to create their own plant control schemes. The Project Manager allows the user to browse through the project configuration hierarchies and data. Interactions among the editors and the project manager\/navigator are shown, by way of non-limiting example, in .","The database forms part of an object oriented database management system (OODBMS), which may be any type commercially available in the marketplace. The database can be deployed in a client\/server configuration with a single centralized database per plant servicing multiple clients, or otherwise. In the illustrated embodiment, it resides on the workstation , e.g., or on a digital data processor coupled therewith.","Part 1\u2014Framework Classes","1 Framework Object Model",{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 5","ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["1. Parameterized Objects.","2. Framework Services, which are provided in order to allow controlled access to those objects, and how they might be used to display, print and otherwise manipulate Parameterized Objects."]}}}},"In the discussion that follows object classes and their various associations are represented in the manner shown in .","1.1 Objects and Parameters","Almost all objects in the Configurator are parameterized\u2014i.e., their type is determined by the parameter set they support, and the data that these objects represent is contained within their associated parameters. Parameterized objects have the capability to inherit their parameter set from another Parameterized Object which acts as the definition for the new object. A Parameterized Object's definition is, itself, a Parameterized Object.","Using Parameters to define an object's type, and the data associated with it, provides the following capabilities:\n\n","Given the complex nature of Parameterized Objects and their parameter sets, a simple interface for the developer is provided in which it appears that a Parameterized Object consists of a self-contained, cohesive set of parameters when in reality, data inheritance, parameter overrides, and modifications are all acting together to determine final parameter values.","1.1.1 Object Model","The overall object model for Parameterized Objects, and Parameterized Object Collections is depicted in .","1.1.1.1 Parameterized Object","A Parameterized Object is a persistent object. The parameters associated with a Parameterized Object are both locally defined (as depicted in the object model) and inherited. The locally defined parameters are those defined by the Parameter Definition objects. The inherited parameters are those that are inherited through an association to another Parameterized Object typically serving as a definition.\n\n","A Parameterized Object Collection is just that\u2014a collection of one or more Parameterized Objects. Applications programs can add or delete elements from the collection, and iterate through it. Parameterized Object Collections have the ability to support multiple collections. For example, a loop could collect both blocks and connections, whereas a compound could have a separate collection of blocks for each control zone.","Consequently, the Parameterized Object Collection classes have been separated into two classes, each of which will be able to support many different collection types, which include Lists (insert after\/before), Arrays (indexed access, and \u201cnull\u201d locations), and possibly Maps (or Dictionaries). These collection classes are:\n\n","The Parameter Definition object defines the values for the attributes in a parameter. Even though it is only directly associated with one Parameterized Object, it may indirectly belong to many other Parameterized Objects via the parameter inheritance mechanism described in the discussion on Parameterized Objects.","The parameter object consists of a set of attributes. The attribute set is compiled-in behavior, and the value of each attribute is changed as needed to satisfy the requirements of the associated Parameterized Object. A Parameter Definition does not exist alone, but only in the context of a Parameterized Object.","In the illustrated embodiment, the attribute set for a Parameter Definition is as follows:\n\n","The illustrated embodiment additionally adds the following attributes as part of the standard Parameter Definition:\n\n","An instance of the Parameter Value object is created whenever specific attributes of a Parameter Definition instance are overridden\u2014namely, value, high range and low range. Any other attribute of a Parameter Definition which is overridden is specified by a Parameter Override object. It is important to note that a Parameter Value exists by exception only\u2014in other words, it exists only if the associated Parameter Definition is overridden by a Parameterized Object located \u201cdown\u201d the ancestral tree from the Parameterized Object where the Parameter Definition was originally defined. Overrides of a locally defined Parameter Definition simply replace the appropriate value within the Parameter Definition itself.\n\n","The Parameter Override object is used by a Parameterized Object to override attributes of inherited parameters other than value, high range, and low range. Attributes which are typically overridden using this object include which parameter groups a parameter belongs to, format, and help strings.\n\n","The parameter set that defines the structure of a Parameterized Object is segregated into named Parameter Groups. These groups are directly related to the tabs contained within the property sheet for the Parameterized Object when it is edited, as well as the tabs visible on the Parameterized Object editor. Each parameter defined in an object belongs to one or more Parameter Groups.","Parameterized Objects inherit their Parameter Groups in the same way they inherit Parameter Definitions. As depicted in , a Parameterized Object may add additional groups to the inherited list. The order of Parameter Groups, and the parameters within those groups, is also inherited, and is determined by the ordered list of parameters maintained by the Parameterized Object hierarchy chain.","In , an object Foxboro_PID is associated with two groups, A and B. Group A contains two parameters, X and Y, while Group B contains parameters M and N. A new object is created, using Foxboro_PID as it's definition object. A new group, C, has been defined for My_PID, which contains parameters W and X. A new parameter, Z, has been added to the inherited group, A.","When the object My_PID is edited, a property sheet with three tabs appears. The tabs are labeled A, B and C. If the user edits group A, parameters X, Y and Z are shown, in that order. Note that if a change is made to the value for parameter X, and switches to group C, the new value for X will be displayed.","The user can add new parameters (and define their order) to an inherited group, but not change the order of any of the inherited parameters contained in the group. All inherited parameters appear first on the property page, followed by the parameters which were added locally. Similarly, the user can add local groups, but cannot change the order of inherited groups when displayed on the property sheet. Local groups appear after inherited groups.","1.1.2 A Simple Parameterized Object Example","The example in  shows how a parameter set of a simple Parameterized Object is constructed. Parameterized object \u201cY\u201d has an association to its definition \u201cX\u201d, and is modified by \u201cZ\u201d. A call to a method to retrieve on parameterized object \u201cY\u201d (depicted as \u201cGetParameters\u201d in the example) results in the list of parameters as shown.","The Parameterized Object has the capability to construct a list of parameter objects that are associated with it. The parameter list for a Parameterized Object is composed from two sources: the parameters that are inherited (including all overrides and modifiers, possibly n levels up the parameter inheritance tree), and the parameters which have been defined locally.  shows a instance model of the objects involved in constructing a parameter list for a simple Parameterized Object.","Listed below are the steps that a Parameterized Object takes when it is asked for a list of its parameters. Take note of step 2, which causes recursive behavior in that the inheritance tree is traversed all the way to the root Parameterized Object. The root Parameterized Object constructs a parameter list, finishes all 5 steps outlined below, and then returns that list to the next Parameterized Object down, and so, until the original calling Parameterized Object gets a list from step two. It then finishes steps 2, 3, 4, and 5 and the list is complete.","Step Action\n\n","Two user interfaces are supplied by the Framework for working with Parameterized Objects on a daily basis. The first user interface supplied by the Framework to manipulate Parameterized Objects is a generic Parameter Definition Editor, which could appear as shown in . The Parameter Definition Editor is an interface which allows Parameter Definitions to be created for a Parameterized Object. This interface will most likely be utilized by someone with administrative and\/or supervisory capability.",{"@attributes":{"id":"p-0168","num":"0214"},"figref":"FIG. 11"},"The second user interface is a generic Parameter Property Sheet mechanism which is used whenever anyone needs to edit the Value attribute of a parameter on any object. The property sheet can appear as . When the user double-clicks on a Parameterized Object, or in some other way activates an editing session on a Parameterized Object, a property sheet is created and displayed by the Framework. The individual property pages within the sheet correspond to each Parameter Group found to be associated with the object being edited. Each page, in turn, displays only those parameters which have been associated to the corresponding Parameter Group.","The current values of each parameter in the group are displayed, providing the user with the ability to change the values of configurable parameters, possibly creating Parameter Override objects. The \u201clook-and-feel\u201d of each parameter value displayed on the property page is determined by the edit control type which was associated with the corresponding Parameter Definition.","Some parameter values (such as an entire sequence block) require something more sophisticated in order to edit it. In these cases, a button containing an ellipses ( . . . ) appear next to the field, and when pressed, display the appropriate editor. In the event that a Parameter value is derived from a user-specified formula, the formula is also displayed, and allowed to be changed, on the property page.","Track and Lock Attributes","Referring back to , one or more parameters of objects that model controllers A, B and other control devices (e.g., actuators , sensors , , and other field devices) or controlled apparatus include \u201ctrack\u201d and \u201clock\u201d attributes. In the illustrated embodiment, the \u201ctrack\u201d attribute is a Boolean or other value indicating whether (or not) configuration information contained in that parameter is to be logged to the change tracking system  when it (the configuration information) is downloaded to the corresponding device, e.g., control device or controlled apparatus. As with other inherited parameters, the \u201ctrack\u201d attribute applies not only to the parameter of an object in which it is directly defined or modified in the first instance but, also, to any descendant object that inherits that parameter. Logic for effecting the foregoing behavior and, specifically, this logging (or not) of downloaded configuration information can be provided in the Download Services discussed below, in view of the teachings hereof.","The \u201clock\u201d attribute is a Boolean or other value indicating whether (or not) the \u201ctrack\u201d attribute of that parameter of that object can be edited, i.e., defined or modified, to change its value from \u201clocked\u201d (or Boolean \u201ctrue\u201d) to \u201cunlocked\u201d (or Boolean \u201cfalse\u201d) and vice versa. If \u201clock\u201d is true, editors of the illustrated configuration system will not permit such editing; if false, they will permit such editing. Logic for effecting this behavior and, specifically, permitting (or not) editing of \u201ctrack\u201d attribute can be provided in the Framework (e.g., as part of the Parameter Definition Editor, the Parameter Property Sheet, or otherwise) in view of the teachings hereof.","In the illustrated embodiment, the \u201clock\u201d attribute applies not only the the \u201ctrack\u201d attribute of the corresponding parameter of the same object, but also to that of descendant objects. Thus, for example, if \u201clock\u201d attribute is defined or modified to a value of \u201ctrue\u201d in a parameter of one object, editors of the illustrated embodiment will not permit editing of the \u201ctrack\u201d attribute of any descendant objects\u2014unless a system Process Engineer (or other user with sufficient security permissions) defines an override parameter for the descendant object(s) or alters the value of the \u201clock\u201d attribute in the ancestor object.","Although in the illustrated embodiment, \u201ctrack\u201d and \u201clock\u201d are defined as attributes of specific parameters, it will be appreciated that they may be defined and\/or applied at differing levels of granularity. Thus, for example, either or both may be defined just once (e.g., in a designated parameter) for each object and treated as if applying to all parameters of the object.","1.2 Object Types","All configurable objects have an associated classification, or type, which they inherently belong to. An object's type is used to classify what it is, and is used primarily to segregate objects into groupings of objects exhibiting similar appearance and behavior (e.g., an AW70 and AW51, although both application workstations, have different physical characteristics which necessitates distinguishing between them at configuration time. Thus, multiple instances of AW70's would each have a unique identifier in the configuration, but each would have a type of AW70).","As used here and hereinafter, the symbols Awxxx, where xxx is a number, identifies an applications workstation available from the assignee hereof, The Foxboro Company, or other digital data processing apparatus. The term FBM or symbol FBMxxx, where xxx is a number, identifies a field device available from The Foxboro Company, or other field device for use in process control. The term CP refers to a control processor or other digital data processing apparatus suited for that function.","The Framework provides methods to return an object's type to the application. This type information may be used for a number of reasons, including: preliminary lookup to see if two objects can establish a connection; satisfy a search which uses a type filter; display of type information on an object's placeholder.","The concept of type may be further abstracted into the concept of type category, which is a broader classification of type. Several object types may belong to the same category (e.g. an AW70 and AW51 both belong the category Application Workstation). All objects in the same category exhibit the same general behavior as that defined by that category. For example, an FBM would be an object type category, whereas an FBM02 and FBM04 are examples of specific object types.","Consequently, it is convenient to think of object types as being contained within a type hierarchy. Each branch in the hierarchy would correspond to an object type category, whereas the leaves, or endpoints, of each branch would correspond to specific object types. The remainder of this section will present the data model, with examples, of this type hierarchy for the illustrated configuration system.","1.2.1 Object Model","The object model used in the illustrated embodiment to support the concept of object types is shown in .","1.2.1.1 Base Type","This abstract base class is used only as a placeholder for containing data and methods common to all \u201ctype-ish\u201d classes. The only one shown in the illustration is Object Type, but this can be expanded to include other types such as Parameter Type, etc.","1.2.1.2 Object Type","An object's type is used to classify what it is\u2014i.e., all objects of the same type have the same appearance, and behave identically, differentiated only by minimal differences in associated data (e.g. name, ID, etc.) which is used to uniquely identify them.","The Object Type class is hierarchical\u2014the branches of the hierarchy represent type categories, with the leaves, or endpoints, of the hierarchy being actual object types with which objects are associated. Instances of Object Types are Parameterized Objects, and may only be directly associated to a single type category (i.e., a specific object type cannot belong to more than one type category). Note, however, that even though an object type can only be directly associated with one type category, it may indirectly be associated with several type categories depending upon where it is in the type hierarchy. Every instance of Object Type has a pointer back to its containing type category, regardless of whether it's acting as a simple object type, or a type category itself.","All instances in the Object Type hierarchy are able to act as collections of Typed Objects. That is, each Object Type is able to maintain a list of all Typed Objects which are directly associated with the type itself. For example, all instances of an AIN block will contain a pointer back to the AIN instance of Object Type. In turn, the AIN instance of Object Type will maintain a list of all instances of AIN blocks in the configuration. This containment is meant to be only one level deep\u2014in other words, there is no need for I\/A Block, the containing instance of AIN, to also maintain a list of all AIN blocks (although nothing in the design would prevent it, if desired).","Additionally, each instance of the Object Type hierarchy which serves as a reference for a Typed Object requires a definition reference to the defining Parameterized Object which defines that Typed Object. This relationship provides quick access to the definition object when a symbolic representation of that definition is dragged and dropped into a view. For example, if the user clicks and drags an AOUT definition (either from the System Hierarchy, or from a library template) to a view, then drops it, this relationship provides access to the Parameterized Object which actually defines an AOUT block so that it can be created quickly.","Since an Object Type which can be referenced by a Typed Object requires a reference to the defining Parameterized Object, only those instances in the Object Type hierarchy be used to serve as the collection point for those same types of objects as they are created. If an Object Type doesn't have a defining reference, is not a container of Typed Objects.","The Object Type class is an abstract class\u2014no instances of Object Type may exist in the database. Subclasses of Object Type are the implementation-standard Object Type class, and the User-Defined Object Type class. The Object Type class contains those methods common between the two subclasses, e.g. methods used to support the hierarchical relationship(s) in the type hierarchy, the containment relationship to Typed Object class, and the reference to its associated definition Type Object instance.","Summarizing relationships:\n\n",{"@attributes":{"id":"p-0190","num":"0242"},"figref":["FIG. 14","FIG. 14"]},"1.2.1.3 Implementation-Standard Object Type","All objects which can be typed inherently belong to one Object Type (or type category)\u2014that is the implementation-standard Object Type. Additionally, these objects may also optionally be associated with a User-Defined Object Type.","Each instance of implementation-standard Object Type defined in the database may be specified as the inherent type for one or more configuration objects. All Implementation-standard Object Types have a direct association with a type category, which is preferably also be Implementation-standard. In other words, a Implementation-standard Object Type may not be associated with a user-defined type category.","All Implementation-standard Object Types have three additional attributes\u2014they are: configurable\u2014all instances of this object type are able to be configured in an I\/A configuration; assignable\u2014all instances of this object type are able to be assigned to a process area; and downloadable\u2014able to be realized (as an entity) on a target platform. Whether an object type is configurable, assignable and\/or downloadable is determined at the time the instance of the Implementation-standard Object Type is created.","Summarizing relationships:\n\n","Users may create their own, customized object types, which may be assigned to typed objects. The primary purpose of a User-Defined Object Type is to allow the user to create their own object classification system in the event that the set Implementation-standard Object Types doesn't satisfy all their needs.","Summarizing relationships:\n\n","A Typed Object is a Parameterized Object which is able to be inserted into an I\/A configuration, and is considered an integral part of the configuration, in such a way that the configuration would be considered incomplete without it. Examples of typed objects include CPs, FBMs, blocks, loops, and compounds. Objects such as graphical objects used to enhance documentation would not be considered Typed Objects.","Typed objects inherently have an associated Implementation-standard object type. The fact that an object is configurable is determined by whether or not its inherent object type is or not. Typed Objects may also have a User-Defined Object Type associated with them, although this relationship is optional.","One further restriction: at creation, a Typed Object is prevented from associating with an Object Type (and thereby prevented from being created), unless that Object Type also references an associated defining Parameterized Object which acts as the definition for the Typed Object being created. In an alternate embodiment, when a Typed Object is created and a reference made to its associated Object Type, if that Object Type doesn't have a reference to the defining Parameterized Object, it simply uses the one from the Typed Object itself.","Summarizing relationships:\n\n","There may be occasions where it would be desirable to change the type of an object, without having to delete the original object, then create an object of the correct type. One example of where this capability could be useful would be being able to change a station type after a configuration has already been created, and all associations and connections established (this happens often). An alternate embodiment accordingly, permits the type of an object to be dynamically charged.","1.2.1.6 Configuration","The Configuration class exists to serve as an entry point into the two primary hierarchies which comprise the configuration itself\u2014the System Hierarchy, and the Plant Hierarchy. These two hierarchies are, however, by no means mutually exclusive. The primary method(s) and data incorporated in this class exist to serve the establishment and maintenance of hierarchical relationships. Other configuration-wide data and\/or methods may also reside with this class.","1.2.1.7 System Hierarchy","The System Hierarchy represents those objects which are contained within the configuration, and are organized by various categories, primarily object type. There are potentially several subclasses of System Hierarchy objects in the System Hierarchy itself. However, for present purposes, only two of these subclasses are discussed:\n\n","All other subclasses within the System Hierarchy simply represent another view of existing configuration components. For example, a Network Hierarchy could display a view of the configuration from a System Definition point of view, showing a hierarchy of networks, nodes, stations, FBMs and other hardware. Since the only grouping of configuration objects in the current design is by object type, these subclasses have to use the relationships specified in the Connections discussion in order to know what to display (i.e., by network, by location, etc.).","The primary reason that subclasses exist within the System Hierarchy is due to the differences in behavior when dealing with objects in each subclass. For example, the act of dragging and dropping an object from the definition portion of the System Hierarchy results in the creation of a Typed Object of the proper type, whereas when an object from the components portion of the System Hierarchy is dragged and dropped, it results in that object being copied and placed in the view, or connected to another object, depending upon where it was dropped.","The visible portion of the System Hierarchy tree control actually consists of two types of elements: actual instances of System Hierarchy objects (of which there are very few), and derived (non-persistent) instances of tree control objects. Actual instances of the System Hierarchy may reference one or more instances in the Object Type Hierarchy. This relationship provides the mechanism by which the majority of the visible System Hierarchy is constructed dynamically as elements are \u201cexploded\u201d by the user in the tree control.","1.2.1.8 Plant Hierarchy","The Plant Hierarchy also represents those objects which are contained within the configuration, but are organized by location, rather than by type. This hierarchy represents another view of already-existing configuration components, and may be constructed using a subclass of System Hierarchy.","1.2.2 Managing Object Types","The user can create a new instance of an Object Type by selecting \u201cNew\u201d on a pulldown menu within the definition portion of the System Hierarchy. Alternatively, a \u201cNew|Object Type\u201d menu selection is available on any Configurator application. However the user chooses to perform this task, the action can result in the display of a dialog box similar to that in . In this example, the user enters the new Object Type, and provides a description for the new type. Additionally, the user picks an already existing object type in the type hierarchy to act as its \u201ctemplate\u201d type, or object type to be used to create from. The user can create a new object type from an existing one in two ways:\n\n","In order to finish creating the new object type, the user additionally specifies such things as:\n\n","To edit an existing instance of an Object Type, a dialog similar to the one shown in  is displayed, already populated with the information dealing with this object type (i.e., the configurable, assignable and\/or downloadable flags checkboxes are selected appropriately).","When an object type is edited, the only things that can be changed are the object's description, and whether or not the object is configurable, assignable and\/or downloadable. Some of the attribute and assignable selections may be disabled when the object type is displayed, depending upon the settings of the object type's containing category.","To delete an instance of an Object Type in the hierarchy, the user must preferably explicitly decide to remove it. If the object being deleted is a type category, the user is informed, and asked if they wish to continue\u2014if they confirm the delete, then everything in the type hierarchy from the object type downward is removed.","1.3 Parameterized Object Connections","A configuration consists not only of objects, but objects which are related to each other in a number of ways. These relationships may be physical (e.g. a serial connection between a serial printer and a station) or logical (e.g. a host relationship between an AP and a CP, or a collection point relationship between a block and an historian). These relationships are all called connections.","Establishing a connection actually requires two different levels of \u201chand-shaking\u201d between the two objects involved. Consequently, the subject of connectivity is divided into two sections:\n\n","Any Parameterized Object in the illustrated has an inherent Implementation-standard object type. This object type, in turn, has a direct relationship to a single type category, but may be indirectly related to several type categories.","In , an instance of an AW70X (with control) knows that it's an AW70X, by virtue of the fact that AW70X is its inherent Implementation-standard object type. However, the instance is preferably also \u201caware\u201d that it is also an AW70, NT Application Workstation, or control processor (here, identified as a \u201cZ-Module,\u201d in reference to a control processor available from the assignee hereof, The Foxboro Company), going backward through the type hierarchy. This awareness may be used in a number of ways, particularly when a process is dealing with the concept of object types at different granularities. For instance, when dragging a specific serial printer across a representation of the AW70X mentioned above, the printer may not \u201cknow\u201d that it can connect to an AW70X, but it may know that it could establish a connection to an NT Application Workstation. The Framework provides methods for allowing the application developer to \u201cwalk\u201d the type hierarchy tree in order to obtain the direct, and all the indirect, type categories which a specific object type is related to.","1.3.2 Source\/Sink Vs. Parent\/Child Relationships","A connection in the illustrated system can describe a Source\/Sink, or Parent\/Child relationship between two objects. There are very subtle differences in the two types of relationships, but they are different enough to warrant separation of behavior. A Parent\/Child relationship is typically used to model the relationship between two objects in a hierarchical, or containment relationship whereas a Source\/Sink relationship is usually used in a peer-to-peer type of relationship. These differences are presented in the table below:",{"@attributes":{"id":"p-0218","num":"0291"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Relation","Data","Data Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parent","Capacity","Data represents the maximum combined \u201cweight\u201d of"]},{"entry":[{},{},"the children which can be associated to that object."]},{"entry":["Child","Weight","Data represents the weight of a single instance of the"]},{"entry":[{},{},"child object."]},{"entry":["Source","Min, Max","Specifies the minimum and maximum number of"]},{"entry":[{},{},"connections to other objects, or sinks, which can be"]},{"entry":[{},{},"supported by that object. Supports the concept of a"]},{"entry":[{},{},"\u201cfan-out\u201d capability."]},{"entry":["Sink","Min, Max","Specifies the minimum and maximum number of"]},{"entry":[{},{},"connections from other objects, or sources, which"]},{"entry":[{},{},"can be supported by that object. Supports the"]},{"entry":[{},{},"concept of a \u201cfan-in\u201d capability."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"An example of a Parent\/Child type relationship would be that of a CP to its connected FBMs. The CP acts as a parent in that it acts as a common control connection for all the FBMs which are physically connected to it. The CP is able to support a certain number of FBMs. Each FBM, in turn, acts as a child in that it relies on the CP to perform certain duties, and it contributes a specific weight toward the total capacity supported by the CP.","In both Parent\/Child and Source\/Sink connections, the concept of fan-in and fan-out is valid. A fan-out connection can be used to model a relationship in which the source (parent) object supports connections to one or more sinks (children) objects in the database. One example of such a connection type is a output (or \u201cPNT\u201d) parameter on an AIN block and its associated output signal flows. The PNT parameter, acting as a source, would provide measurement values to one or more input parameters (conventionally referred as \u201cMEAS\u201d or \u201cSPT\u201d) in other blocks, each input parameter acting as a sink.","1.3.3 Connection Object Model",{"@attributes":{"id":"p-0221","num":"0294"},"figref":"FIG. 17"},"One aspect of the object model needs to be explained in order to understand it fully. When a Parameterized Object is created, no Parameter Override or Endpoint objects exist. The Override and Endpoint objects only get created whenever a Connection is about to be established. When a Connection is about to be established, the appropriate Parameter Override object and Endpoint object are instantiated, and as depicted in , these two objects each maintain a reference to their associated parameterized object, as well as to each other, allowing iteration over an object's connections from either direction.","1.3.3.1 Connection","A Connection contains the data and methods that defines a relationship, or link, between two Parameterized Objects (or more specifically, between two connectable parameters). In an I\/A relationship, a connection could can be used to model the logical relationship between two blocks, or the host relationship between two stations, etc.","In order to take into account the complex relationships that a Connection can have with other classes (esp. Placeholder classes), a Connection is a Parameterized Object. This allows Connections to be primarily data driven, rather than compiled behavior, allowing the establishment of connections with new objects to be done in an easier fashion. For example, some Connections probably are not displayed in a graphical environment (such as the relationship between an historian and its associated historizable points). Whether or not to display a Connection is, preferably, parameter-driven.","A Connection in the illustrated system can be a Parent\/Child relationship, or a Source\/Sink. In order to exist, a Connection preferably has exactly one Source (or Parent) Endpoint, and one Sink (or Child) Endpoint. However, the two endpoints may exist without a Connection having yet been established between them. As mentioned previously, the endpoints of the Connection will not be instantiated until the Connection itself is about to be established. Conversely, endpoint objects remain persistent even after the associated Connection has been removed.","Graphically, connections between two objects will be connected at the edge of the rectangular area representing each object. The system will also support connections connected to a point at the center of the object as well. Connections are represented by segmented polylines made up of alternating horizontal and vertical segments. The system also supports single segment lines representing an association.","Summarizing relationships: a Connection is a Parameterized Object; a Connection, if it exists, preferably has both a Source (or Parent) and a Sink (or Child) Endpoint. Note, however, that certain operations (e.g. selection state) deal with the Association, and only one (or none) of its associated Endpoints; a Connection has a relationship to an Association Placeholder.","1.3.3.2 Connection Endpoint","A Connection Endpoint is an abstract class from which all connection endpoints are derived. No instances of this class may exist by themselves. The Connection Endpoint contains a reference to the Parameter Override which is either the source (parent) or sink (child) parameter representing one end of a connection.","Connection Endpoints provide a mechanism for associating the connection to the object. The endpoints relate the Connection to the Parameter Override to (or from) which the Connection is attached. Endpoints also relate the Connection to the position (side\/direction, or center) where the Connection is attached to the object. Each Connection Endpoint is described by two coordinates, the side of the object it is on, and the relative position of the endpoint along the side of the rectangle representing the parameterized object. This allows the endpoint to retain its relative position along the side, even if the object is resized.","Connection Endpoints only come into existence whenever a connection between any two objects (or parameters) is about to be established. Once the Framework approves the creation of the connection, it instantiates the endpoint class instances, along the associated parameter overrides, inserting a reference to the parameterized object in each.","Connection Endpoints have a direct relationship to a Point Placeholder, allowing a depiction of the endpoint itself to be displayed on the screen.","Summarizing relationships:\n\n","A Source (or Parent) Endpoint is the endpoint which is specific to the source (or parent) end of the Connection between two Parameterized Objects, and is a simple sub-class of the abstract Connection Endpoint class. The Parameterized Object maintains a list of its Source\/Parent Endpoints. The Source\/Parent Endpoint can be the source of several connections, supporting \u201cfan-out\u201d connectivity. The Source\/Parent Endpoint may exist without a Connection to a Sink-Child Endpoint.","Summarizing relationships:\n\n","The Endpoint object can support the concept of a reference counter, which represents the number of connections currently associated with it.","1.3.3.4 Sink\/Child Endpoint","A Sink (or Child) Endpoint is the endpoint which is specific to the sink (or child) end of the Connection between two Parameterized Objects, and is a simple sub-class of the abstract Connection Endpoint class. The Parameterized Object maintains a list of its Sink\/Child Endpoints.","The Sink\/Child Endpoint may only be the sink (child) of a single connection. The Sink\/Child Endpoint may exist without a Connection to a Source\/Parent Endpoint.","Summarizing relationships:\n\n",{"@attributes":{"id":"p-0239","num":"0320"},"figref":"FIG. 19"},"1.3.4.1 Object Connection Type Specifier","The primary function of the Object Connection Type Specifier is to provide a list of Object Types to Parameterized Objects, allowing objects to be \u201cextended\u201d such that they encapsulate the behavior of an object in terms of being a parent\/child, or source\/sink. The Object Connection Type Specifier is an abstract class from which four basic object connection type specifiers are derived: parent, child, source and sink.","Each Object Connection Type Specifier is directly related to a Parameterized Object, and is used to help determine the nature of connectivity that the Parameterized Object is allowed to participate in. The same Parameterized Object can act simultaneously as a parent (or source) and a child (or sink). This gives rise to the one-to-many relationship between Parameterized Object and Object Connection Type Specifier shown in the model","In the example shown in , an Historian acts as a parent to all historized points associated with it, yet simultaneously acts as a child when discussed in terms of being associated with a software host. As used herein and throughout, a \u201chistorian\u201d is a block or other functionality used to track parameter values during runtime operation of a process control system configured in accord with the teachings hereof. Each parameter so tracked is referred to as a \u201cpoint,\u201d a \u201chistorized point,\u201d or the like. In the illustrated embodiment, the object type for a Historian is the same, no matter how many Object Connection Type Specifiers a Parameterized Object may be associated with.","Summarizing relationships:\n\n","Parent Object Connection Type Specifiers extend the abstract Object Connection Type Specifier class to handle object types capable of fulfilling a parent role when connecting to another object. As such, they specify the capacity, or total weight, of all the child objects which they are capable of supporting, and provide other functionality used by a parent object.","Examples of a Parent Object Connection Type Specifier would include a CP which has the capacity to support 48 FBMs in an I\/A field bus relationship, an AP which allows two serial printers to be connected via a serial connection, or an historian able to support 4000 collection points.","In a preferred embodiment, any object capable of playing a parent role keeps track of the total \u201cweight\u201d of the connections which have been established for each connection type it is able to support. This value can be associated with the parameter associated with the endpoint of a connection.","1.3.4.3 Child Object Connection Type Specifier","Child Object Connection Type Specifiers extend the abstract Object Connection Type Specifier class to handle object types capable of fulfilling a child role when connecting to another object. As such, they specify their weight which they will contribute to the total accumulative weight when connecting to a parent. Examples of Child Object Connection Type Specifiers include an FBM connecting to a CP, or a serial printer connected to an AP. Each connection causes the total accumulative weight for that connection type to be incremented by the child's weight. Prior to actually establishing a connection, the Framework checks to ensure that the weight supported by the parent object does not exceed its capacity for that connection type. If it does, the connection attempt will fail, and the application program will be informed that the pending connection is no longer feasible.","1.3.4.4 Parent\/Child Object Connection Type Specifier Examples","The table below illustrates the data which needs to be considered at the object level for each valid parent\/child connection\u2014namely:\n\n",{"@attributes":{"id":"p-0249","num":"0336"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Parent",{},{},"Child",{}]},{"entry":["Object Type","Capacity","Connection Type","Object Type","Weight"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Historian","4000","Historian","Historizable Point","1"]},{"entry":["CP40","48","Fieldbus","FBM","1"]},{"entry":["AW70","2","Serial","Serial Printer","1"]},{"entry":["IE32","4","Nest","1x8Cell","1"]},{"entry":["AP51","unlimited","Software Host","CP40","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Source Object Connection Type Specifiers extends the abstract Object Connection Type Specifier class to handle object types capable of fulfilling a source role when connecting to another object. There are no additional data or methods beyond those provided by the Object Connection Type Specifier class. This subclass provides consistency and flexibility during implementation.","1.3.4.6 Sink Object Connection Type Specifier","A Sink Object Connection Type Specifier extends the abstract Object Connection Type Specifier class to handle object types capable of fulfilling a sink role when connecting to another object. There are no additional data or methods beyond those provided by the Object Connection Type Specifier class. The subclass provides consistency and flexibility during implementation.","1.3.4.7 Source\/Sink Object Connection Type Specifier Examples","The table below illustrates the data which needs to be considered at the object level for each valid source\/sink connection.",{"@attributes":{"id":"p-0253","num":"0340"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Source Object Type","Connection Type","Sink Object Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AIN","Block Connection","PID"]},{"entry":[{},"PID","Block Connection","AOUT"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Instances of the Object Connection Type class provide a means of establishing the outermost layer of connectivity between any two objects. This class is used to describe the \u201clegal\u201d combinations of object types or type categories (i.e., Source\/Sink vs. Parent\/Child) which are able to form a connection. These connections can be physical (e.g. an electrical signal flow between a serial port and a serial device) or logical (e.g. a host relationship between an AP and a CP, or a collection point association between a block and an historian).","There are two relationships that each instance of an Object Connection Type has with the Object Connection Type Specifier class\u2014one is used to specify the source (parent) type, and the other is to specify the sink (child) type. In this way, the Object Connection Type class acts as a join table, relating two object types to determine whether there is a potential connection possible. This class is therefore used as an initial \u201cfilter\u201d to determine whether two objects are able to establish a connection before the more complex negotiation between two parameters is allowed to continue.","When examining instances of the Object Connection Type class to see if two object types can form a valid connection, the Framework may encounter more than one instance which satisfies the criteria. If this occurs, the user will have to manually resolve the ambiguity, and select the connection type being sought.","While making a determination as to whether two object types can connect together or not, the Framework takes into account the fact that instances of Object Connection Types may not go all the way \u201cdown\u201d to the object type level, but may specify type categories instead. In this manner, for example, a specific type of serial printer could be specified as being able to be connected to all NT application workstations, rather than specific types of NT stations. The Framework takes into account type \u201cawareness\u201d, which was discussed in a previous section, in order to accomplish this.","Summarizing relationships:\n\n","In order to efficiently implement type \u201cawareness\u201d, a bitmasking operation can be used, in which each unique type category, as well as object type, gets assigned a unique bitmask value. By \u201cor'ing\u201d all of the bitmasks together of all the type categories which an object belongs to, the matter of comparing an object's type bitmask with that of the types contained in each instance of the Object Connection Type class becomes a single operation, rather than a series of string compares.","1.3.5 Parameter Connection Type Object Model",{"@attributes":{"id":"p-0260","num":"0349"},"figref":["FIG. 21","FIG. 21","FIG. 19"]},"1.3.5.1 Parameter Type","The Parameter Type class is just that\u2014a class used to describe all the various types of connectable parameters which can exist in I\/A. Examples of Parameter Types includes serial ports, serial devices, analog input, analog output, historian hosts, and historizable points. Any \u201cconnectable\u201d parameter in I\/A preferably has an associated Parameter Type. Summarizing relationships:\n\n","The Parameter Type class can be implemented as another type category in the Object Type hierarchy. In this manner, any code developed to deal with object types (esp. if implementing bitmask operations) may also be used to deal with parameter types.","1.3.5.2 Parameter Connection Type Specifier","The primary function of the Parameter Connection Type Specifier is to provide a list of Parameter Types to Parameter Definitions, and to fine-tune the \u201cconnectable-ness\u201d of that Parameter Definition with the connection. The Parameter Connection Type Specifier class is an abstract class, from which four basic parameter connection type specifiers are derived: parent, child, source and sink.","Each Parameter Connection Type Specifier is directly related to one or more connectable Parameter Definitions, and is ultimately used to describe the nature of connection that the parameter is allowed to participate in. The parameter to act simultaneously as a parent\/source, and a child\/sink, thus the one to many relationship between Parameter Override and Parameter Connection Type Specifier.","In the example shown in , a MEAS parameter override acts as a source for other input parameters (e.g., a MEAS parameter in a REALM block), yet simultaneously acts as the sink when connected to a parameter such as a PNT parameter in an AIN block. Note that the parameter type \u201cMEAS\u201d is the same, no matter how many Parameter Connection Type Specifiers a parameter override may be associated with.","Summarizing relationships:\n\n","Parent Parameter Connection Type Specifiers extends the abstract Parameter Connection Type Specifier class to handle parameters capable of fulfilling a parent role when connecting to another object. There are no additional data or methods beyond those provided by the Parameter Connection Type Specifier class. The subclass provides consistency and flexibility during implementation.","1.3.5.4 Child Parameter Connection Type Specifier","Child Parameter Connection Type Specifiers extends the abstract Parameter Connection Type Specifier class to handle parameters capable of fulfilling a child role when connecting to another object. There are no additional data or methods beyond those provided by the Parameter Connection Type Specifier class. The subclass provides consistency and flexibility during implementation.","1.3.5.5 Parent\/Child Parameter Connection Type Specifier Examples","The table below presents some examples that have a parent\/child relationship.",{"@attributes":{"id":"p-0270","num":"0365"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parent Parameter Type","Connection Type","Child Parameter Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Serial Port","Serial Connection","Serial Device"]},{"entry":["Historian","Logical Historian","Historizable Point"]},{"entry":["Parallel Port","Parallel Connection","Parallel Device"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Source Parameter Connection Type Specifiers extend the abstract Parameter Connection Type Specifier class to handle source-type endpoints of a connection. As such, they will specify the minimum and maximum number of sinks with which they are able to establish a Connection. Examples of a Source Parameter Connection Type Specifier would be an I\/O point in I\/A, represented by the PNT parameter in a AIN block. The PNT parameter acts as the source for signals flowing to one or more input parameters.","1.3.5.7 Sink Parameter Connection Type Specifier","Sink Parameter Connection Type Specifiers extend the abstract Parameter Connection Type Specifier class to handle sink-type endpoints of an association. As such, they will specify the minimum and maximum number of sources with which they are able to establish a connection. An example in I\/A of a Sink Parameter Connection Type Specifier would be a MEAS or SPT parameter in a PID block, either of which is able to receive signal input from another block.","1.3.5.8 Source\/Sink Parameter Type Specifier Examples","The table below presents some examples which that have a source\/sink relationship.",{"@attributes":{"id":"p-0274","num":"0369"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Source",{},{},"Sink",{}]},{"entry":["Parm Type","Min\/Max","Connection","Parm Type","Min\/Max"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PNT","1\/unlimited","Block Connection","MEAS","1\/1"]},{"entry":["PNT","1\/unlimited","Block Connection","SPT","0\/1"]},{"entry":["BCALCO","1\/1","Block Connection","BCALCI","0\/1"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The \u201cMin\u201d data associated with a Sink represents an optional\/required feature, with a zero (0) representing an optional connection, and a one (1) representing a required connection.","1.3.5.9 Parameter Connection Type","Instances of the Parameter Connection Type class represent the innermost layer of associativity between any two objects. This class is used to describe the \u201clegal\u201d combinations of parameter types which are able to form a connection. These connections can be physical (e.g. an electrical signal flow a serial port and a serial device) or logical (e.g. a collection point connection between a MEAS parameter and an historian).","There are two relationships that each instance of a Parameter Connection Type has with the Parameter Connection Type Specifier class\u2014one is used to specify the source (parent) type, and the other is to specify the sink (child) type. In this way, the Parameter Connection Type class acts as a join table, relating two parameter types together to determine the connection endpoints. This class is therefore used as the final \u201cfilter\u201d to determine whether two objects are able to establish a connection.","1.3.6 Establishing a Connection","The listing below represents the sequence of events which preferably occur before a Connection can be made between two parameters. This logic is used when an object is being \u201cdragged\u201d around the view, looking for a drop target. Additionally, this logic is valid whether the object being dragged is a potential Source\/Parent in a relationship, or Sink\/Child.","Level 1\u2014Object to Object","Step Action Performed",{"@attributes":{"id":"p-0279","num":"0000"},"ul":{"@attributes":{"id":"ul0053","list-style":"none"},"li":{"@attributes":{"id":"ul0053-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0054","list-style":"none"},"li":["1 Click and begin \u201cdragging\u201d object in view\u2014cursor changes to a drag cursor.","2 Using the Object Connection Type Specifier of each object, check to see if there is any instances of the correct pairing in Object Connection Types.","3 If an instance in Object Connection Types is found, then change cursor to indicate that the drop target is potentially valid, otherwise perform no action. If valid, retain the sense of which object is now acting as Source(Parent), and which one is acting as the Sink(Child), as well as the type of Connection being sought.\n        \n        ","4 Iterate through instances of the Parameter Connection Type class to find the proper Source (Parent) and Sink(Child) parameter types necessary to fulfill this connection. Note that there may potentially be several instances of the Parameter Connection Type class which satisfy the conditions imposed by the connection\u2014keep track of all of them since we're not sure yet what parameters the objects have.","5 For the Source(Parent) object, find the proper Parameter Definition based on the Source(Parent) parameter type found in step (4) above.","6 Perform the same action for the Sink(Child) object parameter definition using the Sink(Child) parameter type which was paired with the Source(Parent) parameter type used in step (5) above.","7 Create the appropriate Parameter Override(s) with their associated Source(Parent) and Sink(Child) Endpoints (note that they may already exist from previous connection).","8. Create the instance of the Connection. If more than one connection is permissible, a preferred or default connection is automatically selected."]}}}},"The final responsibility for establishing a connection between two objects rests with the methods responsible for negotiating the \u201chandshake\u201d between the two parameters. These methods check for adequate capacity on the source(parent) object, and establish the actual connection instance itself. This code resides with the source object or the sink object.","Parameter-level connections can be automatically established as described in steps 4-8 above. In addition, they can be established via direct operator intervention. Through a drag-and-drop operation, menu selection or otherwise, the operator identifies two parameters between which a connection is to be established. After verifying that a relationship can exist between the objects themselves (e.g., as described in steps 1-3, above), the Parameter Connection Type Specifier is checked to insure that the combination is permissible. If so, the necessary Parameter Overrides are created.","In some embodiments, the creation of certain connections between parameters causes other to be automatically established. These are referred to as master and slave connections (or \u201cconnection propagation\u201d). By way of example, once a connection is established between the PNT parameter of an AIN object and the MEAS input parameter of a PID object, related (or \u201cslave\u201d) connections are made between related parameter pairs (e.g., low and high scale parameters) of these objects. These slave connections can be modified by the operator, as desired. Slave connections are automatically updated or destroyed when the corresponding master connection is updated or destroyed. Thus, for example, the destruction of a connection between the PNT parameter of an AIN object and the MEAS input parameter of a PID object automatically results in destruction of low-scale, high-scale and other parameter-level slave connections between these objects.","1.3.7 Connectivity Examples","1.3.7.1 Parent\/Child Connectivity\u2014Case #1",{"@attributes":{"id":"p-0283","num":"0386"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0284","num":"0387"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Parent Object Type","Capacity","Connection Type","Child Object Type","Weight"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HISTORIAN","4000","Historian Connection","AIN Block","1"]},{"entry":["HISTORIAN","4000","Historian Connection","PID Block","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0285","num":"0388"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parent Parameter Type","Connection Type","Child Parameter Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HISTORIAN","Historian Connection","PNT"]},{"entry":["HISTORIAN","Historian Connection","MEAS"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"This example depicts how data can be structured to handle the parent\/child situation where the child does not need to have a sense of which point it is (e.g., the MEAS parameter doesn't need to know it's the 2nd historized point in this example), simply that it's connected the HIST parameter of the historian. This example also provides the means to establish a \u201cfan-out\u201d relationship for a parent\/child connection.","1.3.7.2 Parent\/Child Connectivity\u2014Case #2",{"@attributes":{"id":"p-0287","num":"0390"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0288","num":"0391"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Parent",{},{},"Child",{}]},{"entry":["Object Type","Capacity","Connection Type","Object Type","Weight"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AW70A","2","Serial","BW132","1"]},{"entry":["(NT Station)",{},"Connection","(Serial Printer)",{}]},{"entry":["AW70A","2","Serial","BW80","1"]},{"entry":["(NT Station)",{},"Connection","(Serial Printer)"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"Whereas the following table depicts the connectivity data need to support these connections at the parameter level:",{"@attributes":{"id":"p-0290","num":"0393"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parent Parameter Type","Connection Type","Child Parameter Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Serial Port 1","Serial Connection","Serial"]},{"entry":["Serial Port 2","Serial Connection","Serial"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"This example depicts how data is structured to handle the parent\/child situation where the child has to \u201cknow\u201d, or be aware of, the specific parent parameter instance they are connected to. In other words, in this scenario, it's important to know that Printer #1 is connected to Serial Port 1, and that Printer #2 is connected to Serial Port 2. If this level of detail is unimportant, then the parameter definitions for the AW70 could be modeled in such as way that there was only one Serial Port parameter, and one endpoint object, to which all serial devices would connect.","1.3.7.3 Parent\/Child Connectivity(Nest)\u2014Case #3",{"@attributes":{"id":"p-0292","num":"0395"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0293","num":"0396"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Parent",{},"Connection","Child",{}]},{"entry":["Object Type","Capacity","Type","Object Type","Weight"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IE32","4","Nest Connection","1x8CELL (Cell)","1"]},{"entry":["(Enclosure)",{},{},{},{}]},{"entry":["1x8CELL","8","Nest Connection","FBM04 (FBM)","1"]},{"entry":"(Cell)"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The following table depicts the connectivity data need to support these connections at the parameter level:",{"@attributes":{"id":"p-0295","num":"0398"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parent Parameter Type","Connection Type","Child Parameter Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CellSlot","Nest Connection","Cell"]},{"entry":["ModuleSlot","Nest Connection","Module"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"This example depicts how data can be structured to handle the parent\/child connections used to support a multilevel nesting scenario. This implementation takes into account that each object connecting to its parent needs to know which \u201cslot\u201d it occupies, and in turn, each \u201cslot\u201d needs to know what object is currently occupying it (if any).","This design allows object differentiation between the slots. For example, it is easy to model (in the parameter definitions) the fact that the first two slots of a cell (represented by the first two parameter overrides) can only accommodate a power supply, and the remaining slots available for modules.","1.3.7.4 Source\/Sink Connectivity",{"@attributes":{"id":"p-0298","num":"0401"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0299","num":"0402"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Source Object Type","Connection Type","Sink Object Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AIN Block","Block Connection","PID Block"]},{"entry":[{},"PID Block","Block Connection","REALM Block"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The following table depicts the connectivity data need to support these connections at the parameter level:",{"@attributes":{"id":"p-0301","num":"0404"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Source",{},{},"Sink ",{}]},{"entry":["Parm Type","Min\/Max","Connection","Parm Type","Min\/Max"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PNT","1\/unlimited","Block Connection","MEAS","0\/1"]},{"entry":["MEAS","1\/unlimited","Block Connection","MEAS","0\/1"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"This example depicts how data can be structured to handle a source\/sink connection. More importantly, it shows how the same parameter (i.e., in this case, the MEAS parameter of the PID block) can function as both source and sink simultaneously.","1.4 Placeholders","Placeholders preserve the location and appearance of objects on a Persistent Document, enabling an object to retain its appearance between viewings. Placeholders present an object model, depicting all the objects, their connections, and the endpoints of those connections in a single diagram. The illustrated configuration system supports Placeholders, including an attendant object model dealing therewith, in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 1.4-1.4.2.6 and thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","1.5 The Generic Editor Framework Classes","The illustrated configuration system in general, and the editors in particular can be based on the Microsoft Foundation Classes' (MFC) Document\/View model, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 1.5-1.5.7 and  thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof. Other embodiments of the Configurator may be based on alternatives to the MVC document\/view model known in the art and\/or available in the marketplace.","1.6 Sheet Template Editor","Sheet Template objects are used to allow the user to define a template, or sheet layout, to be used during the printing and\/or print preview process. A Sheet Template typically includes combinations of graphical symbols which have been defined (e.g. rectangles, circles, bitmaps, etc. . . . ) to satisfy a customer's unique requirements for documentation. The illustrated configuration system supports Sheet Templates, including through use of Sheet Template objects and a Sheet Template Editor, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 1.6-1.6.2 and  thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","1.7 The Report Manager","The Report Manager allows users to create, edit, and print reports. A report is an association between a collection of configurable objects (possibly filtered) and templates describing how to print them. Reports are composed of report templates that organize the data to be printed\u2014describing what should be printed, how it should be printed, and in what order. This enables the user to produce a printed document that combines information from various sources organized in one of many different ways.","The illustrated configuration system supports reporting, including through use of a Report Manager, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 1.7-1.7.2.4.2 and  thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof","1.8 Version Control","Version control provides the ability for the system to record changes made to the control database. It allows the user to be able to tell what the state of the system is now, what the state of the system was at a specific time in the past, and the history of changes made to a specific object over time. With version control, the change history of an object is tracked from the moment it was created through its current version.","The illustrated configuration system supports version control, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 1.8-1.8.4.7 and  thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","1.9 Undo Manager","The illustrated configuration system supports an Undo\/Redo capability, e.g., The illustrated configuration system supports reporting, including through use of a Report Manager, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 1.9-1.9.1.4 and  thereof, the teachings of which are particularly incorporated herein by reference all as adapted in accord with the teachings hereof.","1.10 Users and Security","The illustrated configuration system provides security functions to allow users and other personnel to restrict access to objects which need to be protected from unauthorized modification or access. User-level security is optional, and is disabled by default. Implementation-standard security restricts modification of implementation-standard standard objects (such as standard I\/A Block definitions) to authorized personnel, and is preferably always enabled.","When user-level security is enabled, the security functions provide authentication by presenting a log-in dialog requesting a user name and password when a user starts any Configurator application. Similar to the Windows NT security model, access control is provided by assigning users to groups which have various access permissions (read, write, create, etc.). Groups are based on roles, such as Process Engineer or Advanced Operator, and users can assume multiple roles by being assigned to multiple groups. Implementation-standard default groups and permissions are provided, but users can create their own groups, and can modify the permissions of the default groups. Permissions are assigned by object type (such as Loops) and by Plant Area (such as East Plant Section). This provides selective access by geographic area.","A switch user\/group function is also provided which allows users to assume a subset of their permissions or allows another user to temporarily log-in. Users use this function to assume a more restrictive set of permissions to ensure that they do not make an inadvertent change if they were only interested in viewing configuration data. The ability to temporarily log-in would be used to allow a supervisor to assist another user in making changes which may require special access permission to an existing configuration work space, and then return control to the original user.","The Framework supplies user interface dialogs to allow developers to register objects and permissions to assign permissions to the default groups. The Framework also supplies an API to allow the various configurator applications to check for access permission before responding to access requests for objects they control. A consistent \u201caccess-denied\u201d mechanism will be provided to advise the application of a security access violation.","1.10.1 Object Model","The illustrated configuration system uses a security system to control access to configuration objects by users. Given a particular user and a particular object, the security system determines what permissions the user has (e.g. read, write) with respect to the object. The security object model is depicted in .","1.10.1.1 Group","In the Security model, the Group object is used to categorize Users, with many instances of Users belonging to the same Group object (e.g., Operator, Engineer, etc.). These broad categories are each associated with a specific set of permissions. These permissions pertain to various areas throughout the plant, as well as to object types within the plant.","Instances of Groups may form a hierarchy, and contain other Groups (e.g., Test Operator within the Operator Group). However, an instance of a Group can only be contained by one, and only one, other Group. For example, the Test Operator group could be in the Operator group, but not also in the Engineer group. Each Group has permissions of its containing Group, and may add additional permissions. See \u201cUsers and Groups Example\u201d in .","Members of a Group can have permissions objects via the object's association to instances of the Process Area and Object Type classes. To have a permission to access an object within a Process Area, the group preferably has that permission to both the Process Area, and the Object Type. If the object is not assignable to a Process Area, then the group only needs type permission against the object in order to access it.","In summary, relationships are:\n\n","Listed below are sample Groups provided with one embodiment of the invention:",{"@attributes":{"id":"p-0321","num":"0430"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Group Title","Group Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Advanced Operator","Tuning specialized or critical loops."]},{"entry":["Default User","General user capabilities to read, but not change configuraton"]},{"entry":[{},"data."]},{"entry":["Developer","Develop and maintain Configurator framework and applications"]},{"entry":[{},"which run inside the framework. Note that this particular group"]},{"entry":[{},"object may not be visible to a \u201cnormal\u201d user."]},{"entry":["Operator","Tuning general loops."]},{"entry":["Process Engineer","Build and maintain process loop configurations."]},{"entry":["Process Engineer","Develop and approve customer default block parameters, loop"]},{"entry":["Administrator","templates, proprietary control schemes, batch administration, etc."]},{"entry":["Software Engineer","Develop and install customer applications and third party"]},{"entry":[{},"software, such as custom reports and database applications."]},{"entry":["System Administrator","Configure system, security, backups, fault tolerance, etc."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In the illustrated configuration system, a User object is someone who initiates an Edit session using a unique identifier. This identifier is captured from within the Framework in order to determine security permissions. A User preferably belongs to at least one Group. A User may belong to more than one Group, limited only by the number of Groups defined in the system. When a User logs onto the Configurator initially, they acquire the sum of the permissions of all of their associated Groups. Since a User can belong to different Groups, they should be able to change which Group or Groups they belong to dynamically (refer to ). The groups which a User belongs to at any point in time is referred to as the Active Group Set. The Active Group Set will be used for determining permissions. The permissions which a User has at a specific point in time are determined by the sum of the permissions of all the Groups within the Active Group Set. A User can change groups at any time, but only to groups within the set which have been defined for him in the Group hierarchy. Summarizing relationships:\n\n","Users and Groups form a hierarchy as illustrated in . A Group can only be in one other Group, so that for example, Test Operators could not appear more than once in the hierarchy.","In the example shown in , the group \u201cPE Administrator\u201d has all of the permissions of \u201cProcess Engineer\u201d, and may have additional permissions. Note that user \u201cUser X\u201d belongs to both the \u201cProcess Engineer\u201d and \u201cAdvanced Operators\u201d groups.","1.10.1.3 Process Area","Instances of the Process Area class form a hierarchy, and reference such things as individual buildings, or areas within a building in which logically-related processes are performed. Process Area objects can contain other Process Area objects, and they can be associated with one or more configurable objects which are capable of being assigned to that Process Area. Examples of such configurable objects are Loops and Compounds. Each instance of a Process Area object has permissions of its containing Process Area, and may add additional permissions.","Objects may be indirectly associated with a Process Area. For example, a Block may be associated with a specific Process Area as the result of being part of a Loop or Compound associated with that area. The ramifications of this on the design needs to be explored further. Summarizing relationships:\n\n","The Area Permission class is used to restrict a user's access to an object by considering where the object resides in the plant hierarchy. Area Permission objects allow system administrators to set user access permission to the objects assigned to Process Areas by groups that the user belongs to. Area Permission objects contain a reference to the permission in the permission hierarchy for the indicated Group\/Process Area object pair. Summarizing relationships:\n\n","An Assignable Object is an instance of an object associated with an Object Type (refer to object model depicted in ) capable of being assigned to a Process Area. One or more instances of Assignable Object may be assigned to the same Process Area object. Objects associated with an instance of the Object Type class are deemed \u201cassignable\u201d when they are created. Access to an Assignable Object is dictated first by the user's group access to the object's type, then by the user's group access to the Process Area object which the object has been assigned to. Summarizing relationships:\n\n",{"@attributes":{"id":"p-0329","num":"0446"},"figref":"FIG. 29"},"1.10.1.6 Object Type Permission","Instances of the Object Type Permission class control access to objects by considering what type they are. Object Type Permission objects allow system administrators to set user access permissions to the object types by groups that the user belongs to. Object Type Permission objects contain a reference to the permission in the permission hierarchy for the indicated Group\/Object Type pair. Summarizing relationships:\n\n","Permissions (both Process Area and Object Type Permissions) for the Configurator form a hierarchy defined by static data within the illustrated configuration system, and not allowed to be changed by the user (). General read and write permissions will need to be more fine grained than simply read vs. write. Permissions stated in the Process Area Permissions and Object Type Permissions objects are stated in terms of one of the higher entries in the hierarchy, but can be as fine grained as needs dictate.","1.10.2.2 Download Permission","Download permission governs who is allowed to download configuration data to the targeted I\/A system. The download is the process by which edited configuration information gets transferred to the target. A download permission is a special case of Configurator security\u2014although effectively it is only an Model\/configuration database read, the fact that it affects a running target makes it special. As with other permissions, download permissions may be set on an object type basis, and\/or on process areas.","1.10.2.3 Switch Group\/User Facility","A mechanism by which a user can switch groups is provided in the illustrated configuration system. The mechanism allows a user to perform the majority of his daily operations with a default minimal security setting, then switch to a more restrictive security setting by changing the Active Group Set they are currently associated with.","Another mechanism allows the user to switch user ID's. This is accomplished by the same mechanism described above. The mechanism would also allow a supervisor to temporarily \u201clog-in\u201d to a user's session, perform a restricted operation, then \u201clog-out\u201d and return security (and user ID) to its previous settings. A simple dialog box like the one presented in  is provided to perform this switching.","In the example shown in , User X is currently logged in, and has activated the Switch Group\/User Facility. The application will allow User X to select (or deselect) Groups which he is currently allowed to be associated with, thereby establishing his Active Group Set.","Notice in the sample dialog that some groups are dimmed, or \u201cgreyed-out\u201d. These groups represent those groups which are not currently in the user's Active Group Set. Clicking on the text of a Group will toggle it back and forth between the normal \u201con\u201d state, and the dimmed \u201coff\u201d state. This is only an indication of the functionality which is used in the illustrated embodiment, not a restriction on other implementations.","Additionally, by selecting the \u201cSwitch User\u2019 pushbutton, a screen equivalent to the log-in screen appears, prompting for a new user's ID and password. This user ID would be \u201cstacked\u201d, in that the Configurator remembers the previous user ID as a new one logs in, so that when the new user finishes an edit session and exits, they will effectively be reverting back to the original user's identity and permissions. A user stack of only one-deep will suffice for this purpose.","1.10.2.4 Managing Groups and Users","This section presents sample property pages which used to maintain groups and users. All dialogs presented in this section are meant to be used in the performance of ongoing Security Administration.","The first property page presented in  represents a way in which the security administrator manage Groups. The existing Group structure is placed into a type of tree hierarchy control, which is imploded\/exploded as necessary to gain an entry point into the Group hierarchy. To add a new Group, the administrator finds the proper spot in the control where the new Group could be inserted, and press \u201cNew Group\u201d.","At that time, a dialog box (not shown) pops up, prompting the administrator for information to create a new Group. Upon exiting that dialog, the new Group is displayed at the proper point in the hierarchy. A Group automatically inherits all Object Type and Area Permissions associated with its root Group.","To add new users to the Configurator, the security administrator presses the \u201cNew User\u201d button, and a dialog box (also not shown) pops up, prompting the administrator for any information the illustrated configuration system requires to establish a User. This information contains the User's name, password, and possibly some other information which is needed for administrative purposes by the illustrated configuration system. Upon exiting the dialog, the new User will have been established as a valid User within the Configurator administrative system, but not yet assigned to a specific Group (or Groups). To assign a new User to a Group, or modify the Groups to which an existing User belongs, the administrator would select the \u201cUsers\u201d tab on the property sheet.","In this example (shown in ), the administrator is able to select the User from the combobox depicted by \u201cUser ID\u201d. Once the User was selected, the administrator would be able to modify their password and\/or description in the edit fields provided, and pick the Group(s) that the User would need to be associated with.","And finally, the following property page shown in  represents a method by which Group access, or permission, could be given to specific Object Types. In this example, the administrator picks the Group and Object Type to be \u201clinked\u201d together via a permission, then picks from a list of available permissions all those which apply for this Group. The mechanism allows for permissions to be added, as well as deleted. Permissions can be established at any level in the Permission Hierarchy, since the Permission Hierarchy is allowed to be as fine-grained as necessary for the customer's unique requirements.","1.10.2.5 Managing Process Areas","This section presents sample property pages used to maintain process areas. All dialogs presented in this section are meant to be used in the performance of ongoing Security Administration.","The property page shown in  represents a way in which the security administrator manages Process Areas. The existing Process Area hierarchy are placed into a type of tree hierarchy control, which is imploded\/exploded as necessary to determine an entry point into the Process Area Hierarchy. To add a new Process Area, the administrator would find the proper spot in the control where the new area is to be inserted, and press \u201cNew Area\u201d. At that time, a dialog box (not shown) pops up, prompting the administrator for information to create a new Process Area. Upon exiting that dialog, the new Process Area is displayed at the proper point in the hierarchy. When a Process Area is first created, it will automatically inherit all Assignable Objects, and Area Permissions associated with its root Area.","And finally, the following property page in  represents a method by which Group access, or permission, could be given to specific Process Areas. In this example, the administrator picks the Process Area and Group to be \u201clinked\u201d together via a set of permissions, then picks from a list of available permissions all those which apply for this Process Area\/Group combination. Permissions can be established at any level in the Permission Hierarchy, since the Permission Hierarchy is allowed to be as fine-grained as necessary for the customer's unique requirements.","1.10.2.6 User Authentication Service","Closely associated with the Configurator security subsystem, but separate, is a User Authentication Service. This service is responsible for providing the security service with the identity of an authorized user of the illustrated configuration system. The authentication service is responsible for providing the application's security mechanism with the name of an authorized user. Whenever the security system needs to evaluate a user's permissions to an object, it will ask the authentication service for the name of the user. The first time this happens, the authentication service queries the operating system for the name of the user, and responds with the name of that user. The name is then cached for use in later calls.","Another implementation results in the user being presented with a \u201clogin\u201d dialog box asking for a username\/password combination the first time the authentication service is asked for the name of the user. Again, the user's name, once captured and verified, is cached for later use. This implementation is desirable in certain I\/A installations in which all users commonly log-in as \u201croot\u201d or \u201cadministrator\u201d, making an operating system query for the name of the user meaningless.","Part 2\u2014Control Algorithm Configurator Architecture","2 Functions","This section describes major functions of the configurator architecture, including sample user interface representations. Note that these user interface sample are intended to illustrate functionality described in the text and are not intended to show all design details, such as menus and toolbars. In the object model diagrams included in this section, shading indicates classes supplied by the illustrated Framework and a dashed line border indicates classes described in another subsection of this document.","2.1 Project Manager\/Navigator Interface","2.1.1 Overview","The Project Manager is the navigator's view into the project database. It allows the user to browse through the project configuration hierarchies and data. The GUI interface is similar to the Microsoft Explorer's look and feel. The Framework described in Part 1 provides a common Project Manager navigational capability. This section describes the functionality specific for Control Algorithm Configuration.","2.1.1.1 System Tree View",{"@attributes":{"id":"p-0352","num":"0471"},"figref":"FIG. 37"},"2.1.1.2 Control Algorithm Diagrams","The Control Algorithm Diagram Editor supports adding and connecting blocks to specify control algorithms. Blocks are only created through Control Algorithm Diagrams. The blocks in a Control Algorithm Diagram must preferably be assigned to a Control Level. A default Control Level may be set for a Control Algorithm Diagram, setting all blocks in the diagram to that level. However, blocks may be reassigned to any Control Level.","2.1.1.3 Control Processors","Control processors execute the control applications created by the users. The blocks specifying the control application are contained within the control processor in Control Levels. The Control Levels are assigned to Control Processors.","2.1.1.4 Control Levels","The Control Levels act as a logically named container for control applications. Within control processors, the control algorithm blocks are contained in Control Levels. The control levels provide a hierarchy structure following the IAS S88 standard. This standard defines seven levels of plant hierarchy with each level serving as a logical container for the next lower level.","Enterprise\n\n","Site\n\n","Area\n\n","Process Cell\n\n","Unit\n\n","Equipment Module\n\n","Control Module\n\n","The control naming hierarchy implemented by IAS does not address the top two levels of the ISA S88 hierarchy. The control hierarchy begins with the \u201cArea\u201d. In addition to the ISA S88 hierarchy, the implementation defines three additional levels: blocks, parameters, and attributes. Every level of the naming hierarchy may contain blocks. There is no restriction that only the \u201cControl Module\u201d level contains blocks.","2.1.1.5 Control Level Syntax and Assignment Rules","The following rules characterize the naming hierarchy:\n\n","Given these rules the following two names specify blocks:\n\n","Since names for blocks, levels, and parameters do not have to be unique, the following is legal:\n\n","Names do not have to span the full naming hierarchy:\n\n","This provides with backward compatibility with I\/A names\n\n","A second set of rules specify the relationships to control stations:\n\n","The levels in a control hierarchy are not only divisible between control stations in a child relationship; they can also be divided among parent control stations:\n\n","All of the blocks contained by a level (a compound) preferably execute in the same control station.\n\n","All compounds and all blocks could be assigned to a single control station\n\n","Any level could be assigned to a control station\n\n","All used levels are preferably assigned to a control station\n\n","If these are the only two assignments made, then\n\n","The Block Definition Editor allows control blocks and their parameters to be defined for use on IAS. Through the editor, users create entirely new block definitions or derive new blocks from existing definitions. Only blocks derived from implementation standard control blocks download to control stations. User-defined blocks also appear in the list of defined blocks when viewed with this or the Control Algorithm Diagram Editor, but are not installed into a control station. This list contains only single Block definitions; no Composite Block Definitions appear.",{"@attributes":{"id":"p-0377","num":"0574"},"figref":"FIG. 38"},"Definitions for derived blocks can add parameters or modify the attributes of inherited parameters, but inherited parameters cannot be removed. Blocks are derived from exactly one other block definition.","The user cannot modify the implementation-standard blocks. This block set is part of the illustrated configuration system. Personnel with the appropriate security permissions can add, modify and remove any parameters when creating the standard set of IAS blocks. Users can add parameters to definitions derived from these standard block definitions or create new \u201cbase\u201d block definitions (not derived from an IAS block type). The first four rows in  show examples of user-added parameters in the Block Definition for block AIN2. These parameters are available for documentation and calculation purposes only, but are not downloaded into running control stations.","There are two classes of parameters, those that are integrated directly with the control system (control parameters) and those that are not (non-control parameters). Control parameters are those downloaded to Control Processors and participate in the running of the control system, such as parameters associated with the standard control block types AIN, PID, AOUT, etc. Non-control parameters can be used for calculations, documentation, etc. and are not downloaded to the CP. Normal users can only add non-control parameters, only authorized personnel (e.g., engineers) can add control parameters.","Each parameter in a block definition contains a fixed set of predefined attributes. Values can be given to all of these attributes in the block definition where the parameter is defined. A subset of these parameter attribute values can be changed in derived blocks, which results in the creation of a parameter override object being created.","The value of a parameter can be defined in two ways\u2014by setting the \u201cvalue\u201d attribute to a constant value or by setting the \u201cformula\u201d attribute to a formula. In the \u201cvalue\u201d attribute of a parameter, users can supply constant default values for parameters in block definitions. If a formula is supplied, the result of the formula calculation is used as the parameter value. These formulas are executed when the value of the parameter is requested. Formulas can consist of references to other parameters in the current block, mathematical operations, etc.","Modifier Block Definitions are defined in a manner identical to that of Block Definitions. In Modifier Block Definitions, references to other parameters in formulas are not restricted to existing parameters. See Part 1 for a detailed description of modifier blocks. Parameter groups can be defined to contain any or all parameters defined in the local definition or parent definitions. Parameter groups correspond to the tabs on the Block Property sheet display. The parameter group definition contains information on ordering for parameters contained in the group. All parameters are contained in at least one parameter group, but can be assigned to multiple groups. The user can select the group(s) to which each parameter belongs. Versioning of blocks is supported via standard versioning features supplied by the Framework classes. Each time a block definition is changed, the block version is incremented. This data is used for reporting and tracking of block definition history. A security mechanism is used to verify that the user has privileges to edit the selected block. No customer will have privileges to edit implementation-standard block definitions. These defined blocks can be derived from, but not changed. Reports can be generated on block definitions, changes in the current edit session, and audit trails. The report for changes between versions is helpful internally to facilitate version upgrades to customer systems.","2.2.2 Functions","The following functions are implemented by the Block Definition Editor:","Create new, derived or copied block definitions","Create new, derived or copied modifier block definitions","Add, remove, or modify parameters","Override parameters inherited from parent block definition, revert to parent value","Group parameters into categories displayed on property sheet during configuration","Provide a mechanism for ordering parameters on property sheet page","View parameters as they would appear on property sheet","Define parameters to be control or non-control types","Define configuration-time formulas for parameter values, recalculate values. These formulas will support math statements, references to other parameters in blocks, etc.","Save\/load definition(s) to\/from diskette or file","Import definitions from pdef files or FoxCAE tables","Upgrade to new version of standard IAS block definitions","Maintain block version information","Report block\/parameter definitions, changes, definitions in use, block derivations","Provide audit trails for definition changes","Provide security which allows only certain people access to block definitions","Provide security against changing implementation standard control block definitions and standard parameter group assignments.","Provide standard editing capabilities: cut, copy, paste, etc.","Provide search capabilities for parameters or content, allowing the user to find parameters of a specified name or containing a specified value","The following functions are provided in support of the Block Definition Editor:","Maintain standard set of control blocks","Version upgrade mechanism for redistribution of control blocks","2.2.3 Object Model","2.2.3.1 Block Definition","Referring to  Block definitions follow the basic paradigm defined for Parameterized Objects. Block definitions contain lists of parameter definitions and overrides and maintain a pointer to their parent definition. Block definitions can be \u201cbase\u201d definitions\u2014those with no parent definitions, or \u201cderived\u201d definitions\u2014those that inherit parameter definitions and overrides from a parent block definition.","The implementation includes a set of base definitions that correspond to control algorithms in Control Processors, called control blocks. Users can derive definitions from this set or create their own base definitions that do not correspond to Control algorithms, called non-control blocks. Only block definitions derived from control blocks will be downloaded into a CP when instantiated in a running system.","Class Relationships:","Block definitions are parameterized objects.","Block definitions can create instances of blocks of their type or block definitions derived from their type. The blocks or block definitions created are also instances of parameterized object-derived classes.","Block definitions contain parameter definitions. The parameter set defines the type and characteristics of the block definition, not the class of the block definition object. All block definitions are of the class \u201cBlock Definition\u201d, while the type of the block definition varies according to the parameter set. (AIN, PID, etc.)","Block definitions may contain parameter overrides. These overrides modify the inherited parameter definitions.","Block definitions can refer to 0 or 1 parent block definitions. The parent block definition defines a set of parameters that are inherited and can be overridden.","Block definitions maintain an ordered list of Parameter Group Definitions to use in creating a Property Sheet view for modifying block parameter values. Each group corresponds to a Separate Property Page within the Property Sheet. See Part 1 for further discussion of Parameter Groups.","All block definitions are collected in Block Definition Collections for use in reporting, viewing and listing block definitions. These collections reside in the Project Manager \u201cSystem\u201d hierarchy.","2.2.3.2 Block Parameter Definition","Block parameter definitions consist of a standard, framework defined set of attributes. The attributes of name and type compose the basic definition for a parameter. Other attributes such as default value, limits, description, etc. all contribute to the definition and can be overridden in derived block definitions.","Block parameter definitions contain attributes which indicate whether it is a control or non-control parameter. Control parameters are those recognized by the control algorithms in Control Processors. Only implementation standard blocks can contain control parameters. Non-control parameters can be used for calculation or documentation purposes and do not get downloaded into a CP when they are part of a compound in a running system.","Some block types contain special parameters which cannot be viewed, edited or overridden by the user. Blocks like PLB and Sequence have parameters which are not standard parameter types such as string, float, int, etc. but contain compiled ladder or sequence code.","Class Relationships:","Block parameter definitions are parameter definitions. They provide all of the attributes of a parameter, such as name, type, description, limits, etc.","Block definitions contain parameter definitions. The parameter set defines the type and characteristics of the block definition.","Parameter Groups collect block parameter definition for displaying or reporting of parameters by Group identifier.","2.2.3.3 Block Parameter Override","Block parameter overrides can modify a value or attribute of an inherited parameter definition. When a new block definition is derived from another block definition, any attribute modifications which are made to inherited parameters are stored in the current block definition as an override. Overrides are cumulative. Overrides which appear in a parent apply to derived block definitions as well.","Class Relationships:","Block parameter overrides are parameter overrides. They provide the ability to override a most of the parameter attributes of inherited parameter definitions. (Not included are parameter name, type, etc.)","Block definitions contain parameter overrides. These overrides modify the inherited parameter definitions.","2.2.3.4 Block Definition Container","A Block Definition Container provides a grouping mechanism for all block definitions. Separate containers exist for block definitions, modifier blocks, and user work areas for block definitions. At system installation time, the single block definition container for system block definitions is created. Users can create other containers for working copies of block definitions.","A Block Definition Container provides a mechanism for iterating over all of the definitions it contains. This feature is inherited from the standard Parameterized Object Container. Additional iteration methods are supplied by this class to report on block definitions alphabetically or hierarchically. Block Definition Containers take many forms: nodes of the Project Manager \u201cSystem\u201d hierarchy which are used to hold Block Definitions, palettes of Block Definitions for use in the Control Algorithm Diagram Editor, and others. Class Relationships:","A Block Definition Container contains block definitions.","A Block Definition Container is a generic Parameterized Object container restricting the Parameterized Object contents to Block Definitions.","2.2.3.5 Modifier Block Definition","A Modifier Block Definition is a block definition. It can contain parameters exactly like a standard block definition. Derived modifier blocks can override parameter attributes from parent modifier blocks. A modifier block instance can be contained in a loop or composite block just like any other block, but does not behave in the same manner. All parameters in a modifier block instance override parameters matching by name in the block to which it is attached. Modifier block definitions, however remain identical to block definitions. A Modifier Block can contain formulas which reference parameters not necessarily defined in the Modifier Block. Like Block Definitions, the calculations are executed whenever the value of the calculated parameter is requested.","2.2.3.6 Parameter Group Definition","A Parameter Group Definition maintains parameter grouping information to allow reporting or displaying parameters by selective groupings. Standard parameter groupings (such as Input\/output, High\/Low Alarms, Tuning) are provided for implementation standard block definitions. Users can add their own groupings but are not allowed to change the standard groupings. Class Relationships:","A Parameter Group Definition is a Parameter Group, from which it inherits the ability to maintain an ordered list of parameters.","A Parameter Group Definition maintains associations with parameter definitions to define its group.","2.3 Control Algorithm Diagram Editor","2.3.1 Overview","The Control Algorithm Editor is the single editor for all Control Algorithm related work. With this editor, the user can graphically create and edit Loop Templates, Simple Loops, Composite Block Definitions, Blocks and Connections. The user can also view and edit some properties of Composite Blocks and Template-Derived Loops. Composite Blocks and Template-Derived Loops are shown graphically based on their definition or template.",{"@attributes":{"id":"p-0415","num":"0612"},"figref":"FIG. 40"},"Loop Templates define the blocks, block parameters, internal connections, and connections to external hardware points (Tags) for a loop. Any defined block or Composite Block type can be inserted into a Loop Template. When modifications are made to the Loop Template, the user is prompted to download all of the derived loops. Changes made to the Loop Template are automatically inherited by the derived Loops, since the Template is referenced whenever the derived Loops are accessed for display or download.","The user defines any parameter values or connections for the loop and connects the externally exposed block source and sink parameters to I\/O Blocks. When instantiated, the placeholder I\/O Block attributes (Name, type, enclosure, etc.) are assigned values. Tags are then assigned to connections made within the I\/O Block. The I\/O Block Placeholders serve to group Tag List Row Placeholders associated with the same I\/O device (FBM). When building loops, the user can add and remove I\/O Block and Tag List Row Placeholders from the drawing.","Template-Derived Loops are loops which are instantiated from Loop Templates. Individual block parameters and connections to I\/O hardware devices can be customized in each separate instantiation. When instantiated, the user assigns the loop to a compound, assigns \u201creal\u201d block names, connects the I\/O points to actual tags, and modifies values of parameters in the loop. This is either done manually or via the Loop generation function of the Tag List Editor. Any changes made to information specified in the Loop Template (Blocks included in the Loop, internal Block connections, etc.) result in the user being prompted to convert the Loop to a Simple Loop, which will result in breaking the link to the Loop Template. Parameters for Blocks in a Template-Derived Loop can only be modified if they have been exposed as Loop parameters, as described below.","Simple Loops are loops which have no template. They are edited nearly identically to Loop Templates but can be created in the context of a compound and assigned to \u201creal\u201d blocks and I\/O Blocks.","Composite Block Definitions define the blocks, block parameters, internal connections, and externally exposed connection points for a Composite Block, as shown in . When a Composite Block is instantiated, it maintains an association with its defining Composite Block Definition. Individual block parameter values can then be modified, or \u201coverridden\u201d, in the Composite Block instance. There is no concept of a single-instance Composite Block, a Composite Block Definition is preferably used for every instance of a Composite Block. Like Simple Loops and Loop Templates, the user assigns block parameter value overrides and connections within the Composite Block.","No external connections are created directly for Blocks contained within Composite Block Definitions. Instead, the user defines which internal Block parameters are exposed to users of the","Composite Block. Internally, the user is creating a connection between a parameter created for the Composite Block Definition and the internal Block parameter that is to be exposed. These Composite Block Definition parameters inherit their attributes from the parameters they are exposing.","Composite Blocks are instances of Composite Block Definitions. They can be used like standard blocks in anything which can contain blocks. (Loops, Composite Blocks, etc.) Users cannot modify the defined values or connections within the Composite Blocks unless the parameters have been exposed by the Composite Block Definition. Users modify and connect to or from the exposed parameters of the Composite Block, similar to other Blocks. The exposed parameters can be edited on a loop sheet via the parameter property sheet like the parameters of any standard Block.",{"@attributes":{"id":"p-0424","num":"0621"},"figref":["FIG. 42","FIG. 43"]},"All of the Control Algorithm Diagram objects can be stored in the user's workspace or the appropriate branch of the System tree. Simple Loops, Template-Derived Loops and Composite Blocks can be created in the context of a Compound.","Composite Blocks and Composite Block definitions define groups of blocks, connections between them and specific values for the contained block parameters. Simple Loops, Loop Templates and Template-Derived Loops extend this to connect the blocks to external I\/O points, represented by an I\/O Block.","Blocks and Connections for standalone blocks in compounds can be made with this editor. The user can edit parameter values and make connections to other standalone blocks graphically as shown in . Blocks containing parameters which supply inputs to the current block appear in the left margin and blocks containing parameters receiving outputs appear in the right margin. Only blocks not associated with Loops or Composite Blocks can be edited in this manner.","Each block on a control algorithm diagram is represented internally by a Placeholder. This Placeholder holds information about the geometry, placement, and size of the visual block representation. The placement of the object is user-modifiable. The basic appearance, geometry and size information for an object is maintained in the user-definable Appearance object. The object's Placeholder maintains a reference to its Appearance object. From this representation of a block, the user can access parameter and connection information or navigate to other loops, composite blocks or blocks by accessing the block's context menu.","The user can perform different functions on different parts of the Block Placeholder by right-clicking to bring up the context menu. Context menus contain unique functions depending on the object on which they are invoked. For example, the user has the option to edit connections, parameters, block information, etc. The default double-click function for the Compound\/block name section is to prompt for new Compound and Block Names. The default function for the source\/sink parameters sections is to bring up a connection dialog. In the Relevant block parameters section, the default action is to select parameters displayed from a list of block parameters. The default action for the center of a block is to bring up the block's Property Sheet.","Each Block Placeholder on the display has the same basic graphical structure.  shows a typical block on a graphical display. The type of the block is displayed in the center in a larger font than any other in the block for easy viewing. The optional compound name and block name appear at the top in a medium font. On Loop Templates, Composite Block Definitions or any block not downloaded, the compound and block name fields are empty. Connected parameters appear in the source\/sink regions of the block. A small font is used for showing parameters. Sink parameters are shown on the left, source parameters on the right. Parameter values that the creator of the diagram have considered to be relevant to the drawing appear at the bottom. When parameters are added or removed from the lists of source, sink, or display Parameters, the block is automatically resized.","Parameters are selected for display from a list presented in a dialog. Internally, these parameter selections are stored with the Placeholder, probably as part of the Appearance Definition. See Part 1 for a more complete discussion of Placeholders and related objects.","Composite Blocks have additional functionality which allows them to be expanded in place on a control algorithm diagram. Composite Blocks can expand to show the internal block representation in a trimmed-down view of the actual Composite Block diagram. The expanded view is shown outlined, to still denote the original Block, as shown in .","The Control Algorithm Diagram Editor has the ability to generate a default graphical representation of a Template-Derived Loop or Composite Block. When loops are automatically generated via the Tag List Editor, for example, the Loop is created, but the graphical representation is not. When the Loop is first printed or displayed, a default representation is created.","All objects on the diagram are \u201cactive.\u201d Each area of an object has a context which is used for displaying popup menus. For example, the default action for the block type area is to show the property sheet for the block. The default action for the relevant block parameters area is to bring up a list of parameters available to be displayed there. Clicking and dragging from within one of the sink or source areas to another blocks source or sink generates a new connection. If the parameters to be connected are exposed on the Block Placeholders, the connection can be made directly. If the parameters to be connected are not shown on the Placeholders, the user can invoke a connection dialog.","Using the dialog presented in , users can connect Block parameters in Simple Loops and Template-Derived Loops to parameters in other Blocks in the loop, parameters in blocks outside of the loop, I\/O points from a Tag List, or \u201cexpose\u201d the parameter as a tuning parameter of the loop. When the user is making connections within a Loop Template or Composite Block Definition, the connection definition portion of the Connection Dialog looks like . Users can only make internal connections or expose parameters as tuning parameters for templates and definitions.  shows the connection definition portion of the dialog when the user has decided to expose a parameter as a tuning parameter or for external connection for a Composite Block.","Connections between blocks and their respective source and sink parameters are indicated with arrows from source to sink parameter. External connections are displayed in the margins\u2014inputs to the Loop, Block, or Composite Block are to the left and outputs are to the right. Connections to and from these blocks and placeholders are indicated in the same manner as internal connections. Connections to Blocks outside the loop or \u201cexposed\u201d parameters in Composite Blocks and Loop Templates are shown as Connections that come out of a Block Placeholder and terminate at a label a short distance from the point of origin. This label then appears in a table at the lower corner of the screen. Inputs are in a table in the lower left, outputs in the lower right. These tables contain the label and the actual C:B.P to which the point is connected.","Users have full control over placement of blocks in the center region and ordering of connections in the source and sink parameter lists. Connection lines are automatically drawn. Blocks in the input and output margins can be reordered or moved between margins. Blocks, Loops, and Composite Blocks can be assigned to Compounds and downloaded via main menu or context menu picks on the individual blocks. Users may select \u201cEdit Parameters . . . \u201d from the context menu of any block. This brings up the property sheet for the block as shown in . From the Parameter Property Sheet, the user can modify values for the Parameters of the selected Block. For Composite Blocks and Template-derived Loops, the user is presented with a dialog like that in . From this dialog, the user can set values for the \u201cexposed\u201d parameters of any contained block. Refer to Part 1 for a more complete description of Property sheets. The pull-down list box shown on the Composite Block Property sheet is a shortcut to navigate to all the internal Block parameters which are exposed. An alternative to this approach is to group all the exposed parameters onto separate Property sheet pages, grouped by Block. The pull-down menu is also useful to incorporate in the Property sheet for Simple Loops, as a shortcut to access Block parameters without having to navigate the Loop drawing.","In addition to entering constant values, the user can enter formulas for Block Parameters to be calculated based on other Parameters, Tags, Connections, etc. as shown in . Refer to the discussion of this document on Smart Blocks for a more detailed description of these formulas.","2.3.2 Functions","The following sections describe functions that are implemented by the Control Algorithm Diagram Editor. Most graphical functions apply to all of the visual block\/connection type objects which can be configured. Functions specific to the object being edited are in their respective sections.","2.3.2.1 General Graphical Control Algorithm Diagram Editor Functions","Graphical Functions",{"@attributes":{"id":"p-0440","num":"0000"},"ul":{"@attributes":{"id":"ul0110","list-style":"none"},"li":{"@attributes":{"id":"ul0110-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0111","list-style":"none"},"li":["Graphically create, view, and edit Composite Block Definitions, Composite Blocks, Loop Templates, Template-Derived Loops, Simple Loops","Display status information (Editing template, editing loop X in C:B.P, online, offline, etc.)","Undo\/redo data or graphical changes, revert to previous version","Provide standard diagramming and document functions like object alignment, snap to grid, cut, copy, paste, zoom, multiple selection","Allow user placement of blocks on sheet","Specify restrictions on instantiation of Loop Template or Composite Block Definition: blocks are preferably in the same compound, fixed block ordering, etc.","Navigate to other block display by selecting referenced block in current display","View and edit CALC Block calculations, PLB Block ladder logic, Sequence Block logic, and Logic Block logic.","Create a Loop which spans multiple Loop Sheets","Display Composite Block details on diagram.","Invoke Block Property Sheets from Loop drawing","Invoke Property Sheet for Block Collection objects (Loop, Loop Template, Composite Block Definition) from drawing sheet","Display live values for parameters in blocks on current drawing. This can only be done when viewing checked-in copies of drawings, not on user workspace copies.\n\nDatabase Functions\n","Create and edit Composite Block Definitions, Composite Blocks, Loop Templates, Template-Derived Loops, Simple Loops","Create instances of Blocks and Composite Blocks on a control algorithm diagram","Connect parameters between blocks on diagram","Move connections","Generate Display file for loop or composite block","Define parameters to display in block display, source and sink regions","Enter diagram title, description, info, local block names","Define general formulas used for all blocks in diagram","Attach Modifier blocks to blocks in diagram or entire object","Add, delete blocks to sheet","Edit block parameters via property sheets","Copy blocks from one instance of editor to another or within single editor via drag-drop.","Create new loops, composite block definitions, loop templates from groups of selected blocks","Maintain version history and audit trail of templates, definitions, instances","Security based on default and administrator-configurable read, write, download, etc. permissions, as provided by Framework security functions","Allow only authorized developers to modify implementation standard Block Definitions and Loop Templates","Assign Blocks in Loops to different Compounds or all Blocks in Loops to a single Compounds","Define block processing order for blocks in a loop. This value is a suggested order which can be overridden by actions in the Compound Editor.","Determine Block names at Loop instantiation time based on name macros, loop macros, and Modifier Blocks applied","Download Blocks\/Loops to CP","Provide \u201cSave As\u201d functionality\u2014Composite Block can be saved as Loop, vice-versa","Ensure valid connections between blocks","Assign Blocks to Compounds either individually or by Loop","Provide back documentation capability in support of Import\/Export Manager. This includes the ability to generate a default drawing layout for Loops and Loop Typical (templates) imported from FoxCAE.","Provide bulk Loop generation capability in support of Tag List Editor capability to generate Loops from the Tag List.","Import and export Blocks, Block Definitions, Composite Block Definitions, Loops, Loop Templates, Template-Derived Loops to\/from diskette using the illustrated configuration system format\n\nOther General Functions\n","Print sheet","Optionally show\/print Sequence, CALC, and PLB Block Logic on secondary sheets","Report on definitions, instances, connections, instances of specified definition or template"]}}}},"Interact with other editors:\n\n","Create Loop Template exposed parameters, connect internal Block parameters to exposed parameters","Connect parameters to I\/O Block","Show blocks which are targets for external point connections on sheet, different from blocks contained in template","Create \u201csoft connections\u2014Connections which are created based on Tag List information\n\n","Edit Loop Template which has instances\n\n","Connect parameters to I\/O Block parameters","Generate Template-Derived Loops from Loop Templates","Assign I\/O Block placeholders to Tags","Override internal block parameter values on database upload, including parameters which are not exposed","Disconnect from Loop Template\u2014convert to Simple Loop","2.3.2.4 Composite Block Definition Unique Functions","Create Composite Block exposed parameters, connect internal block parameters to exposed parameters","Prohibit external parameter connections, all connections are preferably through exposed parameters","2.3.2.5 Composite Block Unique Functions","Override internal block parameter values on database upload, including parameters which are not exposed","Create instance of Composite Block in Simple Loop\/Loop Template\/Composite Block Definition, connect exposed points","Show as single block or expanded block detail on sheet, including block structure and internal connections","2.3.2.6 Simple Loop Unique Functions","Connect parameters to I\/O Block parameters","2.3.3 Object Model","The following sections describe the object model used by the Control Algorithm Diagram Editor.  shows the basic control objects and the Framework objects from which they are derived. These objects are shown in greater detail in later figures. Note that the I\/O Block described in these sections is actually a Tag List Row, as described in the Tag List Editor section of this document.","Modifier Block Definitions, Composite Block Definitions, and Loop Templates are unique definitions in that unlike Block Definitions, other definitions cannot be derived from these objects. If a user wants to create a variant of these definitions, this can be done by copying the definition and then modifying the copy.","2.3.3.1 Block","Referring to  Block is the foundation for all control on the IAS system. All of the control structures defined in this editor are based on Blocks and collections of Blocks. A Block is a container for Parameters. Each of these parameters has a type (float, string, integer, etc.) and attributes (connectable, high range, low range, length, etc.) which define the range of values it can contain. These parameters can also be connected to parameters in the same block or any other block in the system via the Source Endpoint and Sink Endpoint lists. Each Endpoint object represents a parameter in the current block. A single parameter can be the source for many other parameters, but may only be a sink of one parameter. Therefore, only one Sink Endpoint may exist for each parameter while many Source Endpoints can exist for each parameter. Blocks must preferably have a definition. A Block Definition defines the set of parameters names, types, attributes and values for a block. The set of parameters defines the block type. See Part 1 for a detailed description of Parameters, Parameter Definitions, and Parameter Overrides. The Block Definition can be a simple Block Definition, a derived Block Definition or a Block Instance. In any case, the Block contains a list of Parameter Overrides which override the default values in the definitions.","Blocks contain a list of Modifier Blocks which are applied to them. Modifier Blocks contain a list of parameter values. For any parameter values in the Modifier Block which have matching names, the values in the Modifier Block override the values in the Block.","When a Block's parameter values are needed, they are determined by the following algorithm. For each parameter defined in any parent Block Definition, all Modifier Blocks are searched for matching parameter names. If there is a match, the value is used. Otherwise, the heritage tree is searched for any overrides or default values. The exact logic is encapsulated into Parameters, described in the Part 1. If the root Block Definition for this Block is defined as an implementation standard Control Block, the control parameter values then can get installed to a IAS control station.","Blocks can be contained in Compounds, Loop Templates, Simple Loops, and Composite Block Definitions. Blocks are not actually contained, but logically contained in Composite Blocks and Template-Derived Loops by way of their parent definitions or templates. Blocks which are in Template-Derived Loops, Simple Loops, Composite Blocks, or single Blocks can be assigned to a Compound in an IAS system. When Blocks are installed, they are then contained by both the loop or composite block to which they belong and the Compound to which they are assigned.","Blocks contain lists of Source Endpoints, Sink Endpoints, Parameter Overrides, and Modifier Blocks. All of these lists and their handling are inherited from Parameterized Object. The list of Modifier Blocks inherited is a Parameterized Object list, Block enforces that only Modifier Blocks are placed in that list. Blocks are capable of interacting with the IAS via its application programming interface (FoxAPI) and the DB Installer. When a block is told to download or upload to\/from a CP, it establishes a connection to the CP and performs the requested function. When viewing live data on a loop diagram in the future, the Block will be capable of creating an list via FoxAPI and retrieving live values for displayed parameters and connections.","Both Block and Block Definition are derived from Parameterized Object to take advantage of the services provided by that class. Block and Block Definition are separate classes because they perform different roles in the Control Algorithm Diagram object model. Block Definitions are static objects, which cannot be downloaded, can contain definitions of Parameters and Overrides, and can only reside in the Block Definition portion of the database. Blocks can be downloaded, can only contain Overrides, and reside in the Project portion of the database.","Class Relationships:","The Block object maintains a reference to its Block Definition. This definition could also be another Block instance, which in turn, refers back to its Block Definition.","Block is derived from Parameterized Object. It inherits its ability to maintain a list of parameters, be contained in a Parameterized Object Collection, maintain endpoints to connections, and keep a list of Modifier Blocks from this parent class.","Block maintains a list of Parameter Overrides. These values override the values or default values of parent Block or Block Definition.","Block maintains a list of Source Endpoints and Sink Endpoints for connections made between Parameterized Objects.","Block can contain references to one or more Modifier Blocks. Modifier Block parameters act as overrides to the current Block.","Blocks can be contained in Compounds, Loop Templates, Simple Loops and Composite Block Definitions. They are also logically contained in Composite Blocks and Template-Derived Loops via reference to their respective definitions or templates. Blocks maintain associations with their containers for use in \u201cwhere used\u201d reporting, supported as part of the Framework.","2.3.3.2 Modifier Block","Referring to , a Modifier Block is an object that modifies all matching parameters in an associated Block or block collection object. Whenever an object needs to reply to a request for parameter values, any associated Modifier Block parameter values override Block values and Block Definition default values. Handling of the Parameter Values is managed by the inherited Block class. No Source Endpoints or Sink Endpoints are used by Modifier Block. Connections cannot be made to parameters in a Modifier Block.","Like any Block, Modifier Blocks have definitions which give each Modifier Block its type. Modifier Block maintains a reference to its parent definition. This mechanism is identical to that of the Block object. Modifier Blocks can be attached to all types of block collection objects, but do not appear in Compounds. They contain parameters but do not get downloaded like other Block types. The Modifier Block parameters apply to the matching parameters of all Blocks or block collections which contain it. Modifier Blocks do not apply Parameter Overrides to Blocks within Composite Blocks or Template-Derived Loops. Parameters are preferably be exposed for Modifier Blocks to affect Parameters in Blocks inside the Composite Block or Loop. Parameter values for a block are determined by looking at related objects in the following order:\n\n","Any values found along this path become the value for the Parameter. For example, if a Global Modifier Block contains MEAS=5 and a Block on the Loop has a value of MEAS explicitly set to 4, then MEAS=4 for that Block because the Local Block value overrides all other values.",{"@attributes":{"id":"p-0475","num":"0742"},"figref":"FIG. 55"},"Scenario 1: In this scenario, no parameters of Composite Block A are exposed. Therefore, Modifier Blocks in Loop1 can have no effect on Block E and Block F. Modifier Block H applies to both Block E and Block F, but Modifier Block G overrides this value.","Scenario 2: In this scenario, the MEAS parameter of Block F is exposed in Composite Block A. This allows the Modifier Blocks in Loop1 to adjust the Parameter value. Again, the local Modifier Block (Modifier Block D) affects the value of MEAS.","Scenario 3: In this scenario, the MEAS parameter of Block E is exposed in Composite Block A. The MEAS parameter of Block E now takes on the value of the local Modifier Block in Loop1.","Class Relationships:","Modifier Block is derived from Block. From Block it inherits the ability to be contained in a block collection and its ability to manager Parameter Overrides.","Multiple Modifier Blocks can be contained by Composite Block Definition-derived object or Block-derived objects.","Modifier Block maintains a reference to its definition, if any, which can be an instance of a Modifier Block.","2.3.3.3 Composite Block Definition","Referring to , a Composite Block Definition is a Parameterized Object Collection derivative. Composite Block Definition provides the common functionality for all objects that contain collections of Block objects: Composite Block Definitions, Loop Templates, and Simple Loops. It is an extension of the Parameterized Object Collection class which restricts the Parameterized Objects it contains to objects derived from the Block class.","Composite Block Definition inherits from Parameterized Object Collection the ability to manage Parameterized Objects, (in this case, Blocks) its own parameters, (a Parameterized Object Collection is a Parameterized Object) attached Modifier Blocks, and its Connection Endpoints. Like the Block class, Composite Block Definition is responsible for ensuring that only Modifier Blocks are stored in the Modifier Block list. From Parameterized Object Collection it inherits the abilities to maintain lists of Connection Endpoints, Parameters, Modifier Blocks, and Blocks. To Parameterized Object Collection it adds special handling of the lists of Parameters and Connection Endpoints inherited from parent classes. Composite Block Definition defines Composite Blocks to be instantiated in other Composite Block Definition-derived Collections.","The Parameters that are owned by this class represent the \u201cexposed\u201d parameters of the Composite Block. These Parameters are linked to the parameters in the contained Blocks that they \u201cexpose\u201d through the Connections maintained by this class. These parameters are the only parameters that any container of the instantiated Composite Block can access. The initial values for the attributes of the parameters are copied from the parameters they expose. These attributes can then be modified.","Composite Block Definition is not responsible for maintaining any Connections outside of this object. All Connections maintained in this object refer to \u201cexposed\u201d parameters. Connections can be made in instances of Composite Blocks from parameters defined here to other Blocks. With the \u201cexposed\u201d parameters defined and their values connected to internal parameters, the Composite Block defined looks like a Block to other Composite Block Definition-derived classes. The instantiated Composite Block derived from this definition can be used like any other block in Composite Block Definition-derived Classes.","Modifier Blocks contained by Composite Block Definition apply to all blocks contained by the object. Composite Block Definition is responsible for adding Modifier Block references to all of its contained Blocks when a Modifier Block is attached to it. This allows the Parameter Facade classes defined by the Framework to access Modifier Block parameters.","Composite Block Definitions can create instances of the Composite Blocks they define. These instances maintain a pointer to this class as their definition. These instances maintain overrides of the \u201cexposed\u201d parameters and of parameter value changes made via an Upload operation to retrieve current parameter values from the Control Processor. Composite Block Definitions supply their instances with the actual block names of \u201cexposed\u201d parameters on request. This is useful when displaying the value of a connected point or when the value must actually be placed in a running control system. Class Relationships:\n\n","Referring to , Loop Template is a Composite Block Definition derivative. It defines the Blocks and Connections contained in a control loop. From Composite Block Definition and its ancestors it inherits the abilities to maintain lists of Connection Endpoints, Parameters, Modifier Blocks, and Blocks. It also inherits the ability to \u201cexpose\u201d parameters of blocks in the loop from the Composite Block Definition class. These parameters are then available as tuning parameters or to connect to other Loops or Blocks. To Composite Block Definition it adds the ability to add I\/O Blocks. The I\/O Blocks added to a Loop Template do not represent real tag points, but are placeholders for actual Tags in the derived Template-Derived Loop instances.","The Parameters that are owned by this class represent the \u201cexposed\u201d parameters of the Loop. These Parameters are linked to the parameters in the contained Blocks that they \u201cexpose\u201d through the Connections maintained by this class. These parameters are the only parameters that are available for tuning or external connections. The initial values for the attributes of the parameters are copied from the parameters they expose. These attributes can then be modified.","Loop Template is not responsible for maintaining any Connections outside of this object. All Connections maintained in this object refer to \u201cexposed\u201d parameters. Connections can be made in instances of Template-Derived Loops from parameters defined here to other Loops. With the \u201cexposed\u201d parameters defined and their values connected to internal parameters, the Template-Derived Loop defined looks like a Block to other Composite Block Definition-derived classes. This allows connections to be made into the Loop look like Composite Block connections. Modifier Blocks contained by Loop Template apply to all blocks contained by the object. Loop Template is responsible for adding Modifier Block references to all of its contained Blocks when a Modifier Block is attached to it. This allows the Parameter classes defined by the Framework to access Modifier Block parameters.","Like Composite Block Definitions, Loop Templates can create instances of the Template-Derived Loops they define. These instances maintain a pointer to this class as their definition. These instances can maintain overrides of the \u201cexposed\u201d parameters only. Instances which are created from this definition in the context of a definition library are allowed to override parameter attributes and values for \u201cexposed\u201d parameters. Instances created from this definition in a usage context as a stand-alone Template-Derived Loop can only override values. Class Relationships:\n\n","Referring to , Simple Loop is derived from Loop Template. From Loop Template and its parent classes, Composite Block Definition and Parameterized Object Collection it inherits all of the collection and connection functionality of Loop Templates. Simple Loop adds to Loop Template the ability to connect to actual I\/O Blocks and to install its Blocks into an online Compound. Class Relationships:\n\n","Referring to , a Composite Block is a Block. It can be inserted into any block collection as if it were a Block. It maintains a list of parameter overrides which, if present, override the default values and attributes of the Composite Block Definition \u201cexposed\u201d parameters, just like a Block. Connections can be made to parameters in the Composite Block, just like a Block.","A Composite Block uses the Parameter list inherited from Parameterized Object to maintain a mapping of internal block parameters to exposed parameters. A Composite Block instance simply overrides the values of the \u201cexposed\u201d parameters. It cannot add Blocks or Connections to the Composite Block definition. In the context of an upload of parameters from a running station, overrides can be attached to this object which override parameters in blocks contained in the Composite Block Definition. These overrides refer to the parameter in a hierarchical manner, using local block names. If a Composite Block Definition contains Blocks A and B, the Composite Block can override the value of the contained Block B by creating an override of \u201cB.parm\u201d. This behavior is supported by the Framework. Class Relationships:\n\n","Referring to , Template-Derived Loop inherits all Parameter Override, external Connection handling, instantiation\/definition relationship, and contained-Block name mapping functionality from Composite Block. Template-Derived Loops have the additional responsibility that they preferably manage the mapping of I\/O Blocks to actual parameters. I\/O Blocks contain the name of the point they represent, so mapping is preferably done from that point to a contained Block parameter, via the same mechanism outlined in the Composite Block description. Template-Derived Loops add the restriction that they cannot be contained in block collections. See the description of the Block class for how this is accomplished. Class Relationships:\n\n","Block Placeholder is the base Placeholder class for all Block objects. It is derived from Parameterized object Placeholder.  shows an example of a graphical Block representation. Block Placeholder maintains the graphical representation of the rectangular dimensions of the block, the location for the associated Compound and Block names, the location for the Block type, the location and list of parameters displayed in the \u201crelevant block parameters\u201d section, and the location, order and list of parameters displayed in the source and sink sections.","The model shown in  shows the I\/O Block Placeholder collecting the Tag List Row Placeholders that are associated with its related FBM Module. Alternate embodiments can allow for connecting Tag List Row Blocks to other Blocks (AIN, AOUT, etc.) before it is known which FBMs will be used. This requires the ability to integrate a number of existing Tag List Row Placeholders into a common I\/O Block Placeholder rather than starting with the I\/O Block Placeholder and adding Tag List Rows. Class Relationships:\n\n","This class inherits all functionality from Block Placeholder, except handling of source and sink parameters. Parameters in a Modifier Block are not connectable. Class Relationships:\n\n","All functionality is inherited from Block Placeholder with no additions. Class Relationships:\n\n","This class inherits all functionality from Block Placeholder including the ability to manage Tag List Row Placeholders. Class Relationships:\n\n","This class inherits all functionality from Block Placeholder with no additions. Class Relationships:\n\n","Control Algorithm Diagram Document is the basic Persistent Document class (see ) for all graphical drawings of block collections. It derives its persistence and management of Placeholders from the Persistent Document Framework class. This class is responsible for maintaining all information necessary to graphically reproduce a Control Algorithm Diagram Document. Control Algorithm Diagram Document maintains information about the overall view of the block collection it represents. This information includes title, subtitle, and scale. Information about each individual object is stored in its respective placeholder. This information includes location, size, color, font, or any attribute which can be specified about an individual Control Algorithm Diagram object. Control Algorithm Diagram Document supplies lists of placeholders to the Control Algorithm Diagram Editor. The placeholders are then queried for specific drawing information.","This class is used as the persistent drawing class for Composite Block Definition drawings and Composite Block drawings.","The object model, as described above, provides Template-derived Loops and Composite Blocks with their own Control Algorithm Diagram Document objects. This allows more flexibility for adding Modifier Blocks and for repositioning Blocks defined in the definition objects. An alternative approach to consider during detailed design is to have Template-derived Loops and Composite Blocks use the document objects associated with the Loop Templates and Composite Block Definitions, instead of having their own documents. Class Relationships:\n\n","Loop Document derives all Control Algorithm Diagram functionality from its parent class, Control Algorithm Diagram Document. This class adds management of two margin areas reserved for I\/O Blocks. The ordered list of I\/O Block Placeholders is maintained for both input and output margins. I\/O Block placement within the margin is maintained by the I\/O Block Placeholder. This class is used as the persistent drawing class for Loop Template drawings, Template-Derived Loop Documents, and Simple Loop Documents. Class Relationships:\n\n","The illustrated configuration system supports Programmable Logic Blocks (PLBs), e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 2.4-2.4.3.16 and  thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","2.5 Swap Editor","The illustrated configuration system provides a Swap Editor and allows mapping parameters between different Block types, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Section 2.5 and the accompanying drawings thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","2.6 Block Execution Editor","2.6.1 Overview","The Block Execution Editor provides the capability to view and edit a control station's block processing order. This includes providing the capability to reorder blocks within a control level, reordering child control levels within a parent control level, and control levels within a control station. The Block execution Editor manipulates a single control station's block processing order per instance.","2.6.2 Block Execution Editor Detailed Functionality","The Block Execution Editor is invoked from the Navigation Tree of the illustrated configuration system by selecting a control level or control station and selecting Block Execution Editor from the context popup menu. The Block Execution Editor provides a view of the control levels and blocks assigned to a selected control station. Only those control levels assigned to a single selected control station will be displayed. The Block Execution Editor provides controls necessary to allow the user to adjust the block processing order for a selected control level, as well as adjust the processing order of control levels within a control station. The Block Execution Editor provides automatic algorithms to optimize processing order, as well as validate processing order. Control station statistics for the selected control station are available upon user request. The Block Execution Editor also provides the capability to reassign blocks between different control levels as well as reassigning control levels to other control stations. The reassignment of blocks to control levels and control levels to control stations may be accomplished either by dragging a block from the editor to the Navigation Tree of the illustrated configuration system, or by invoking the assignment editor on a selected block.","2.6.2.1 Block Execution Editor User Interface","The default Block Execution Editor user interface is as presented in . The user interface is provided as an Grid Editor view. The Block Execution Editor provides two distinct views of control levels and blocks in the tabular grid. The first view displays all blocks for a selected control level, as well as any child control levels of the selected control level which are assigned to the same CP as the selected control level. This view, which is referred to as the control level hierarchy view, is displayed when the Block Execution Editor is invoked from a control level in the Navigation Tree. The second view displays all control levels assigned to a selected CP. This view, which is referred to as the CP Hierarchy view, is displayed when the Block Execution Editor is invoked form a CP in the Navigation Tree.","2.6.2.2 Common User Interface","The user interface provides the name, type, phase, period, relative execution order, and estimated execution time for each block in the list. For each control level in the list, relative execution order, the phase, period, and execution time is displayed. Upon initialization of the Block Execution Editor, the blocks and control levels are sorted by execution order. The user is provided the capability to sort the rows of the grid by block type as well. Resorting is accomplished by selection of the tab at the top the block type or execution order column. Double clicking control level in the list of control levels results in display of that control level's blocks and child control levels. The previously selected control level's blocks and child control levels are removed from the display. The control level schedule editor provides a popup menu to allow the user to invoke the Control Algorithm Diagram Editor from any block in the tabular grid, as well as the property page for any control station, control level or block. Execution Order Modification. The Block Execution Editor provides the user the capability to manually and automatically modify the execution order of blocks and control levels within a CP.","2.6.2.2.1 Manual Modification of Block\/Control Level Scheduling Order","The Block Execution Editor provides the user the capability to manually modify the execution order of blocks and control levels within a CP. This may be accomplished in several ways. First, the user may manually modify the period and phase of a selected block or control level or a group of blocks or control levels. This is accomplished by manually editing the period or phase field for the block or control level in the tabular grid. The grid allows inline editing of these fields. A second way to modify the scheduling order is by moving block and control level rows up and down in the grid. Selecting one or more rows in the grid and then selecting the move up, move down, top, or bottom buttons will accomplish this.","2.6.2.2.2 Schedule Optimization Algorithms","The Block Execution Editor will also provide automatic scheduling of blocks based on optimization algorithms. Execution of the schedule optimization algorithms will be user selectable via menu items. Optimization algorithms will include block type and signal flow.","Results of optimization algorithms are displayed in the output window in its own tab. In addition, the Block Execution Editor provides algorithms to perform load leveling for a CP. The Block Execution Editor provides the capability to perform load leveling by compound.","2.6.2.3 Execution Order Validation","The Block Execution Editor provides the user the capability to validate the currently scheduled execution order. The validation is either by phase overrun or signal flow. Phase order validation predicts phase overruns, and reports any overruns to the user. Signal flow validation assesses the relationship of connections and scheduled execution order, and reports any possible conflicts.","Problems","detected by either type of validation do not prevent the user from assigning execution order, but instead are intended to provide warning of possible scheduling problems. The results of validation are displayed in the output window in its own tab. Execution order validation is made available outside of the Block Execution Editor for use by other applications of the illustrated configuration system, including but not limited to download services.","2.6.2.4 Reassignment of Blocks and Control Levels","The Block Execution Editor provides the capability to reassign blocks to different control levels, as well as reassign control levels to different control stations. This is accomplished by dragging the selected block or control level from the tabular grid and dropping it onto a control level or control station on the Navigation Tree.","2.6.2.5 Station Statistics","The Block Execution Editor provides the user the capability to view station statistics for the selected CP. Statistics include total, free, and used station memory (as depicted in ), relative phase loading, overall processor load, BPC, and total blocks assigned to CP. The Block Execution Editor provides textual and graphical representation of station statistics.","2.6.3 Tutorials",{"@attributes":{"id":"p-0516","num":"0000"},"ul":{"@attributes":{"id":"ul0151","list-style":"none"},"li":{"@attributes":{"id":"ul0151-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0152","list-style":"none"},"li":"Tutorials on adjusting the control levels and block process order and phasing are part of the editor.\n\n2.6.4 Object Model\n"}}}},"The object model for Control level and Control Stations\/Processors is shown in .","2.6.4.1 Control Station","This class holds an ordered list of control levels associated with a Control Station. Class Relationships:\n\n","This class holds an ordered list of Blocks associated with a Control level. The Block, Loop, and Block Collection classes are discussed in other sections of this document. Class Relationships:\n\n","This class holds a reference to the control level to which it is assigned. Blocks maintain a reference to the control level to which they are assigned","2.7 Tag List Editor","2.7.1.1 Overview","The illustrated configuration system supports a Tag List Editor and an ability to create, import, merge, edit and export tag lists, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 2.7-1.7-2.7.1.3.5 and FIGS. 102-106 thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","2A.1. Field Bus Module Editor","Referring to , the Field Bus Module editor permits a user to define and\/or modify parameters of objects in the database that represent devices that serve as field bus masters, i.e., devices that configure and\/or control communications on field buses A or other sections of the network  (see FIGS.  and A-B). This can include, by way of non-limiting example, parameters defining timings, port assignments and\/or other aspects of the configuration of the respective segments that those bus masters are responsible for configuring and\/or controlling. As discussed elsewhere herein, the Download Service transfers that configuration information from objects to the devices that they (the objects) model. More particularly, for example, this includes transferring, to the respective bus masters, communications configuration information for their respective segments. At the same time, the Download Service logs those transfers to the change tracking system  (e.g., for regulatory compliance, safety considerations, maintenance records, or otherwise).","Through a Direct Download feature of the illustrated embodiment, the Field Bus Module editor also permits users to make direct and immediate (or \u201creal-time\u201d) edits of configuration values stored in the bus master devices. Thus, for example, as the user defines and\/or modifies parameter values using the editor's dialog boxes and other edit controls, the editor invokes the FDT or other interface (hereinafter, \u201cinterface\u201d) of the corresponding device to cause those values to be loaded into it (the device) while, at the same time, updating the corresponding model objects so that they maintain an accurate representation of the device. The editor also logs the changes to the change tracking system , e.g., in the same manner as the Download Service logs transfers it makes to such devices (e.g., via the use of XML files), as discussed below.","In the illustrated embodiment, objects that represent bus masters are represented via edit panes or edit windows displayed by the field bus module editor representing the object's respective parameter values. The objects may also be represented in other ways (e.g., icons) in other editors of the illustrated configuration system. In the discussion that follows and the accompanying drawings, the editor is shown in use defining and\/or modifying the parameters of an object (or objects) representing a single bus master, here, by way of non-limiting example, the so-called \u201cFBM222.\u201d","In practice, the capabilities of the Field Bus Module editor discussed below are incorporated into one or more of the editors discussed herein and\/or into editors for specific types and\/or classes of field bus modules. Indeed, in the example discussed below and shown in the corresponding drawings, the \u201cfield bus module editor\u201d is implemented as an editor for a specific such device, again, referred to herein as the \u201cFBM222,\u201d which can serve as the bus master of one or more Profibus segments. It will be appreciated that similar functionality can be provided for purposes of configuring that or other devices for use with field bus segments other than Profibus (e.g., Fieldbus Foundation links, Hart segments, Modbus segments, and so forth).","As noted above, the field bus module editor can be employed to define and\/or modify configuration parameter values of an object (or objects) so that they may be subsequently downloaded to a corresponding field bus master device. As also noted, the editor can be used in Direct Download mode to provide direct editing of those values on the device. For sake of simplicity, the discussion that follows will focus on use of the editor to view, define and\/or modify parameters values in an object. In view of the discussion above and elsewhere herein it will be appreciated that the editor, as well, can be placed in so-called Direct Download mode so that those edits are directly and simultaneously transferred to the device (e.g., through its interface) and logged to the change tracking system.","Referring to , the field bus module editor can be invoked, by way of example, by selecting, in the navigation manager's system tree view (e.g., the \u201cBus Master (FBM222)\u201d icon shown in ), the ID (or name) of device whose modeling objects are to be edited. Or, put another way, upon selecting the device ID in the navigation manager tree view, the field bus module editor displays graphics (and otherwise configures its edit controls) to permit the user to view, define and\/or modify configuration parameter values contained in the object (or objects) that model that device.","Illustrated Field Bus Module editor includes panes or tabbed windows by which a user can activate its various configuration functions. In the illustrated embodiment, these include a \u201cHardware,\u201d \u201cSoftware,\u201d \u201cFBM Manager,\u201d and \u201cBus Settings,\u201d providing access to those respective functions. Thus, for example, dialog boxes and\/or other widgets associated with the \u201cHardware\u201d tab can be employed by the user to assign a unique system ID to the bus master-representative object (and, thereby, through downloading, to the device itself).","The \u201cFBM Manager\u201d tab can be used to open a live link to the device (e.g., taking advantage of its so-called DTM interface) for purposes of online diagnostics, live list display of Profibus ports, and access to user-configured links to application notes, drawings, specification sheets and other resources for the device. The tab also includes a notepad for collecting diagnostics, troubleshooting tips and other operator information.","The \u201cBus Settings\u201d tab is used to view, define and\/or modify parameters of the bus master-modeling object(s) defining timings, port assignments and\/or other aspects of the configuration of the respective segment that the respective bus master device is responsible for configuring and\/or controlling. The dialog boxes and other edit controls of that tab are shown in , along with some of the object parameters they are used to set (i.e., view, define and\/or modify).","A detailed listing of those parameters, their possible values and preferred instructions for their settings follow:\n\n",{"@attributes":{"id":"p-0533","num":"0859"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Master Station","Enter the Profibus network address for the"]},{"entry":["Address","FBM222. The range is 1 to 124 for a redundant"]},{"entry":[{},"FBM, and Ito 125 for a non-redundant FBM. It is"]},{"entry":[{},"recommended that the address he set to 1 (the"]},{"entry":[{},"default), so that the FBM has an address lower"]},{"entry":[{},"than any slave device on the network."]},{"entry":[{},"When configuring a redundant FBM222, this field"]},{"entry":[{},"determines the address for the module in the"]},{"entry":[{},"Master role; the module in the Tracker role is"]},{"entry":[{},"automatically assigned the next higher number."]},{"entry":["Highest Station","The FBM222 supports multimaster configurations,"]},{"entry":["Address","in which case each FBM222 module and third-"]},{"entry":[{},"party master musthave a unique address on the"]},{"entry":[{},"network served by this port. If the masters are"]},{"entry":[{},"redundant pairs, assign an odd number for each"]},{"entry":[{},"Master Station Address."]},{"entry":[{},"Specify the highest address that can be assigned to"]},{"entry":[{},"a master address. The range is Master Station"]},{"entry":[{},"Address + 1 to 125. Stations with an address"]},{"entry":[{},"higher than this limit are not involved in token"]},{"entry":[{},"passing."]},{"entry":[{},"It is a good practice to reserve single-digit network"]},{"entry":[{},"addresses for the Master Stations and Class 2"]},{"entry":[{},"configurators, and assign slave device addresses in"]},{"entry":[{},"the range 10 to 125."]},{"entry":["Min Slave Interval","Set the time in milliseconds that the FBM must"]},{"entry":[{},"wait between two consecutive polls of the same"]},{"entry":[{},"device. The purpose of this interval is to ensure"]},{"entry":[{},"that function requests from the FBM can be"]},{"entry":[{},"handled by the slave device. The range is 32 ms to"]},{"entry":[{},"655350 ms. The default is 125 ms. Entering any"]},{"entry":[{},"value below 32 results in the interval being set to"]},{"entry":[{},"32 ms.)"]},{"entry":[{},"The value should be greater than or equal to the"]},{"entry":[{},"Minimum Slave Interval parameter of the slowest"]},{"entry":[{},"device on the network. However, the interval for"]},{"entry":[{},"most slave devices is 100 microseconds. and thus"]},{"entry":[{},"the FBM222 default of 125 ms is more than"]},{"entry":[{},"sufficient. The slave device interval is specified in"]},{"entry":[{},"Min Slave interval in the GSD file.."]},{"entry":[{},"Min Slave Interval should also be smaller than or"]},{"entry":[{},"equal to the watchdog timeout set for the slave"]},{"entry":[{},"devices."]},{"entry":["Data Control Time","Set the maximum time allowed for a data"]},{"entry":[{},"exchange between the FBM and a slave device."]},{"entry":[{},"The range is 10 ms to 655350 ms. The default is"]},{"entry":[{},"1500 ms. The value should be greater than or"]},{"entry":[{},"equal to six times the Watchdog time of the"]},{"entry":[{},"slowest device on the network. Refer to"]},{"entry":[{},"\u201cModifying a DeviceConfiguration\u201d on page 139"]},{"entry":[{},"for information on setting the slave device"]},{"entry":[{},"parameter."]},{"entry":[{},"When Field Device Editor validates the FBM222"]},{"entry":[{},"configuration (the Validate button is active once"]},{"entry":[{},"the slave devices have been added to the port), it"]},{"entry":[{},"displays an error message if the Data Control Time"]},{"entry":[{},"is less than six times the watchdog time of the"]},{"entry":[{},"slowest device on the port. The precision for Data"]},{"entry":[{},"Control Time is 10 ms, and the value you enter is"]},{"entry":[{},"rounded up to the nearest allowed value."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0160","list-style":"none"},"li":{"@attributes":{"id":"ul0160-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0161","list-style":"none"},"li":["4. Use the Segment Coupler pull-down to select None or one of the three P+F couplers.","5. Set the network speed using the Baud Rate pull-down list, and then click Default to set the remaining parameters in the group to the defaults for the selected speed. These additional bus parameters are described in the table. These can be modified at this time or adjusted later to respond to specific requirements once the network is in operation. In most cases, the parameters do not need to be modified once they have been set to the defaults for the selected baud rate."]}}}},{"@attributes":{"id":"p-0534","num":"0862"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Max Retry","Specify the number of times the FBM will re-attempt to"]},{"entry":["Limit","communicate with a slave before determining there is a"]},{"entry":[{},"communications failure."]},{"entry":["GAP Update","This read-only field shows the number of token rounds"]},{"entry":["Factor","between GAP Maintenance cycles. This value is always"]},{"entry":[{},"set to 1."]},{"entry":["Slot","Set the maximum wait in TBits for a slave device to"]},{"entry":["Time","respond to a transaction request. The range is 37 to 16383."]},{"entry":["Min Station","Enter the minimum time in TBits the FBM should wait"]},{"entry":["Delay","before generating a reply frame. The range is 11 to 1023."]},{"entry":["Response","The FBM222 sends this time to each slave device during"]},{"entry":["Time","startup of the device to ensure that the device does not"]},{"entry":["(MinTSDR)","respond to requests too quickly."]},{"entry":["Max Station","Specify the maximum time in TBits the FBM should wait"]},{"entry":["Delay","for a slave to process a request and respond. The range is"]},{"entry":["Response","37 to 65535. The value must be greater than largest"]},{"entry":["Time","Maximum TSDR configured for any slave on the port."]},{"entry":["(MaxTSDR)",{}]},{"entry":["Setup Time","Set the time in TBits between an event such as a timer"]},{"entry":["(TSET)","being interrupted and the FBM's response to the event."]},{"entry":[{},"The range is 1 to 494."]},{"entry":["Quiet Time","Enter the time in TBits the FBM must wait after"]},{"entry":["(TQUI)","transmitting a frame before enabling its receiver. The"]},{"entry":[{},"range is 0 to 493. The value should be less than Min"]},{"entry":[{},"Station Delay Response (Min TSDR)."]},{"entry":["Target","Set the anticipated time in TBits for one token round on"]},{"entry":["Rotation","the segment, allowing for both high and low priority"]},{"entry":["Time","transactions, errors and GAP maintenance. The range is"]},{"entry":["(TTR)","256 to 16777215."]},{"entry":[{},"In a multimaster environment, each master must be"]},{"entry":[{},"configured for the same target rotation time, and that time"]},{"entry":[{},"must be sufficient for all master stations to complete all"]},{"entry":[{},"their cyclic data exchange tasks. One method for setting"]},{"entry":[{},"this time is to determine the target rotation time for each"]},{"entry":[{},"master as if it were the sole master on the network, and"]},{"entry":[{},"then enter the sum of the individual times as the target"]},{"entry":[{},"rotation time for all the masters."]},{"entry":["Estimated","This read-only field is set to the Min. Slave Interval in ms."]},{"entry":"Scan Time"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The Validate button in the Bus Parameters group becomes active when slave devices are added to the FBM222 configuration. Validation checks the port configuration to verify the following:\n\n","Validation is performed each time one of the devices or the FBM222 is checked in. Errors are shown in the FBM222 Validation dialog box. A device cannot be deployed if it (or one of its devices) has validation errors. To validate the bus setting for a port on demand:\n\n","2A.2. Field Device Editor","Referring to , the Field Device editor permits a user to define and\/or modify parameters of objects in the database that represent devices that serve as field bus slaves, i.e., devices whose communications on field buses A or other sections of the network  (see FIGS.  and A-B) are governed by a bus master device, as discussed above. This can include, by way of non-limiting example, parameters defining timings, port assignments and\/or other aspects of the configuration of those segments.","As with the objects representing field bus masters, the Download Service transfers configuration information from objects that represent field bus slaves to the devices that they model. More particularly, for example, this includes transferring, to the respective bus slaves, communications configuration information for their respective segments. At the same time, the Download Service logs those transfers to the change tracking system .","As with the field bus module editor discussed above, the Direct Download feature of the illustrated field device editor permits users to make direct and immediate (or \u201creal-time\u201d) edits of configuration values stored in the bus slave devices. The editor also logs the changes to the change tracking system , e.g., in the same manner as the field bus module editor.","As above, in the illustrated embodiment, objects that represent bus slaves are represented via the edit panes or edit windows displayed by the field bus module editor representing the object's respective parameter values. The objects may also be represented in other ways (e.g., icons) in other editors of the illustrated configuration system. In the discussion that follows and the accompanying drawings, the editor is shown in use defining and\/or modifying the parameters of an object (or objects) representing a single bus slave, here, a device named SRD001.","As above, the capabilities of the field device editor discussed below may be incorporated into one or more of the editors discussed herein and\/or into editors for specific types and\/or classes of field bus modules. It will be appreciated that, as above, similar functionality can be provided for purposes of configuring slaves for that or other devices for use with field bus segments other than Profibus (e.g., Fieldbus Foundation links, Hart segments, Modbus segments, and so forth).","As noted above, the field device editor can be employed to define and\/or modify configuration parameter values of an object (or objects) so that they may be subsequently downloaded to a corresponding field slave device. As also noted, the editor can be used in Direct Download mode to provide direct editing of those values on the device. For sake of simplicity, the discussion that follows will focus on use of the editor to view, define and\/or modify parameters values in an object. In view of the discussion above and elsewhere herein it will be appreciated that the editor, as well, can be placed in so-called Direct Download mode so that those edits are directly and simultaneously transferred to the device (e.g., through its interface) and logged to the change tracking system.","Referring to , the field device editor can be invoked, by way of example, by selecting, in the navigation manager's system tree view, the ID (or name) of device whose modeling objects are to be edited.","As above, illustrated field device editor includes panes or tabbed windows by which a user can activate its various configuration functions. In the illustrated embodiment, these include a \u201cGeneral,\u201d \u201cModules,\u201d \u201cData Definition,\u201d \u201cField Device Manager,\u201d and \u201cBus Settings,\u201d providing access to those respective functions. Thus, for example, the \u201cModules\u201d tab provides for configuring devices with plug-in modules and displaying fixed I\/O configuration of compact devices; the \u201cData Definition\u201d tab provides inter alia for creation of parameters based on the I\/O data in modules selected in the Modules tab, as well as for naming and typing of data points provided by a device or module; the \u201cField Device Manager\u201d tab can be used to open a live link to the device (e.g., taking advantage of its so-called DTM interface) for purposes of online diagnostics, and so forth.","In particular regard to the \u201cBus Settings\u201d tab, this, too, is used to view, define and\/or modify parameters of the bus slave-modeling object(s) defining timings, port assignments and\/or other aspects of the configuration of the respective segment that the respective bus masters device is responsible for configuring and\/or controlling. The dialog boxes and other edit controls of that tab are shown in , along with some of the object parameters they are used to set (i.e., view, define and\/or modify).","A detailed listing of those parameters, their possible values and preferred instructions for their settings follow:\n\n",{"@attributes":{"id":"p-0548","num":"0890"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Min Station","Specify the minimum time in TBits the device must"]},{"entry":["Delay","wait before generating a response after a transaction"]},{"entry":["Response","request from the FBM222 master (or other bus master)."]},{"entry":["Time",{}]},{"entry":["(MinTSDR)",{}]},{"entry":["Watchdog","When enabled, the watchdog timer is started each time"]},{"entry":[{},"the slave device receives a communication from the"]},{"entry":[{},"FBM222. If the specified time expires without another"]},{"entry":[{},"communication, the slave automatically switches its"]},{"entry":[{},"outputs to the fail-safe state (as defined in the device)."]},{"entry":["Mode Support","Use the checkboxes in this group to enable or disable"]},{"entry":[{},"two global functions:"]},{"entry":[{},"Freeze: On receiving a Freeze command, the slave"]},{"entry":[{},"device reads its input into a buffer. On the next read"]},{"entry":[{},"request from the FBM, the device sends the contents"]},{"entry":[{},"of the buffer, and ignores any changes in the data"]},{"entry":[{},"since the freeze command."]},{"entry":[{},"Sync: On receiving a Sync command, the previously"]},{"entry":[{},"transmitted output values are transferred to the"]},{"entry":[{},"output ports. The output values transferred by"]},{"entry":[{},"data exchange are stored and not transferred to the"]},{"entry":[{},"output ports until another Sync command follows or"]},{"entry":[{},"the sync mode is switched off."]},{"entry":[{},"When enabled, the device responds to sync and freeze"]},{"entry":[{},"commands sent by the FBM to one, several or all slave"]},{"entry":[{},"devices on the port (see Groups below)."]},{"entry":["Device Failure","Click the Enable checkbox to configure the FBM222 to"]},{"entry":["Description","disable communications with this device if the device is"]},{"entry":[{},"disconnected for longer than a specified period, and"]},{"entry":[{},"then specify the Timeout period in seconds. The range is"]},{"entry":[{},"1 to 240 seconds (the default). If the option is not"]},{"entry":[{},"checked or the value is 0, communication remains"]},{"entry":[{},"enabled and the FBM brings the device online when it is"]},{"entry":[{},"re-connected."]},{"entry":["Groups","Check one or more of the numbered boxes to assign the"]},{"entry":[{},"device to groups that the FBM uses for global"]},{"entry":[{},"commands such as Sync and Freeze. Uncheck a box to"]},{"entry":[{},"exclude the device from the group."]},{"entry":["Enable DPV1","Click the checkbox to enable DPV1 functions."]},{"entry":["DPV1","Set the time in milliseconds. The range is the"]},{"entry":["Response.","C2_Response_Timeout from the GSD file (the default)"]},{"entry":[{},"to 655350 milliseconds"]},{"entry":[{},"The DPV1 Response Timeout should be greater than the"]},{"entry":[{},"C2_Response_Timeout from the device's GSD file."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}]},"Configuration data needs to be exchanged between the Operator Interface (OI) applications of IAS and the illustrated configuration system. This involves loading control algorithms into control stations as well as loading configuration information into OI applications. Loading a list of collection points into a Historian is an example of loading configuration information into OI applications.","The context menu associated with the illustrated configuration system objects includes download selections for appropriate objects. The download selection invokes the Download Manager Editor to select targets for the download and to monitor the download process. Some objects may provide a second non-GUI selection. This non-GUI download function invokes the Download Manager who determines the download target from the selected object and does not provide validation or error recovery. The non-GUI download provides a quick download mechanism for simple downloads such as downloading a control algorithm to a control station.","The Download Manager is a dialog editor of the illustrated configuration system. The Download Manager uses the context of the object from which it was selected to display a list of target systems. The Download Manager interacts with the user to select the download targets, validates configurations, and provides error recovery. The Download Manager uses the Download Service functions for executing the download. Since download involves data transmission either to control stations or OI applications, there are two Download Services, Download Service for Control Stations and Download Service for Applications. Separate sections in this document detail these services.","Similarly to the need to load configuration data into OI applications is the need to merge in OI modified data. The Security Subsystem provides an example of this need. Configuration of the IAS Security Subsystem is through the illustrated configuration system, using the download functions. However, the Security Subsystem contains the ability to change user passwords. The upload functions of the Download-Upload Manager provide the functionality for modifying the illustrated configuration system objects from external sources.","The download functionality requires objects of the illustrated configuration system to be in a checked in state. A user preferably completes modifications to the objects before downloading configuration data. Interactions with control stations in a simulation mode may be an exception to this rule. The upload functions similarly require objects of the illustrated configuration system to be in a checked in state. However, the upload functions force a check out of the object before merging in the uploaded data. The user is responsible for the check in of the modified objects, it is not done automatically by the Download-Upload Manager.","2.8.2 Functions","The Download-Upload Editor is divides into four related categories:\n\n","The following subsections describe the user interface displays and functional details.","2.8.2.1 User Interaction","The illustrated configuration system provides the ability to download and upload configuration data to\/from applications running in the various hardware stations. Download functions are provided for downloading process displays, historian configuration data, and alarm configuration data to the appropriate stations\/applications. Download functions provide options for downloading just the changes or downloading the entire object.","A dialog, such as in , displays the possible targets for downloading the selected object. The dialog is invoked either through a menu selection or through the context menu of an object. The dialog uses the currently selected object in the Navigation Tree to determine the download source. The dialog gives the user the option of downloading just the object selected or the object and all of its children. The object to download, or the object and its children, determine the possible download entities. These targets display as a tab control within the dialog. In  tabs show that control algorithms, FoxView displays, and Message Manager information is available from the Plant1 object or one of its children. Selecting the tab for a download target displays the possible targets for the download. In , a Historian download is selected, displaying a list of all configured Historians. From the list, the user selects the Historians to receive the download. A check box specifies that Historians will download. The user does not have to download to all possible targets or all possible types. If the \u201cSelect for Download\u201d check box is unchecked, Historian information does not download. The dialog also allows the user to define what parameters to download, just modified parameters or all parameters. The all parameters choice provides a second choice between downloading all the parameters or downloading the non-user settable parameters. Through these selections the user controls the download process.","A download button initiates the download process. Part of the download process is the verification of the object to download. A second button provides the ability to invoke the object verification without performing a download. It is possible for a download to a target to not complete and remain pending. The Download Service servers maintain the list of pending request. Another button provides the ability to view the queue of pending requests in each server.","2.8.2.1.1 Validation","During the editing process, it is legal for information to be left incompletely defined. The connections between blocks in a loop may be linking to blocks not yet defined. Prior to downloading, the configuration must preferably be completed. The validation process requests each object to validate itself. A window displays information about validation failures. The validation process does not stop after errors are found; the process completes to find all errors. However, if validation finds any errors the download process does not initiate.","2.8.2.1.2 Download Agent\u2014Control Stations","The Control Station Download Agent transmits control algorithms to control stations. The Download Manager invokes the Download Agent for each object to download to a control station. For control algorithms, the target is determined not by the user but by the block to compound assignment and by the compound to control station assignment. For control stations downloads the Download Manager only sends the Download Agent the object to download and the download options.","2.8.2.1.3 Download Agent\u2014Operator Interface Applications","Operator Interface (OI) Download Agents provide extraction of data from objects of the illustrated configuration system for download to Operator Interface (OI) applications. The Download Manager interacts with each OI Download Agent to determine whether the agent interacts with the selected object. If the agent does not interact with the object, then it will not appear in the target tabs. The Download Manager queries each OI Download Agent for a list of potential targets. These targets are displayed in the list control for the target tab. The Download Manager invokes each OI Download Agent selected with the source object and the selected target objects to perform the download.","2.8.2.1.4 Download Progress","As the Download Manager process each object, it provides the user information about the progress. In addition to displaying how many objects have been downloaded, the Download Manager interacts with the Download Agents to display the progress from the Download Agents in processing the requested object.","2.8.2.1.5 Download Server Status","The Download Agents rely on Download Servers to transmit the information to the target systems. A target system may not respond to the server. Rather than fail the entire download, servers may queue up download requests. Whenever the target system becomes available, they communicate with the server to request queued downloads. A dialog, displays the queued requests in a server. This dialog allows the user to remove requests from the pending queue. The dialog is provided by the Download Manager through interactions with the Download Agents.","2.8.2.2 Error Handling","During a download, if a Download Agent reports an error, the user is given the choice whether to continue with the download or whether to stop the download. The Download Manager maintains a record of all initiated downloads in the Model\/configuration database. In the event that the illustrated configuration system itself crashes during a download, during subsequent startup, a message reports incomplete downloads. The message allows the user to restart the Download Manager with the interrupted request. Any objects successfully downloaded do not re-download. Status information in each object indicates whether the download completed for that object.","2.8.3 Class Descriptions","Referring to , the Download Manager maintains a persistent document derived from the framework Persistent Document object. The Download Manager Persistent Document maintains information about initiated downloads and their status. This information is used for error recovery. The Download Manager Persistent Document also contains parameters defining the relationship between download types and Download Agents. The Download Manager relies on the objects requesting download services to contain parameters specifying the download types and the OID to a download target.","2.9 Control Station Download Services","2.9.1 Overview","The Control Station Download Services is responsible for downloading control algorithms to IAS control stations. As changes are made to add, modify or delete Blocks, or Control Levels, action records are created by the Block and Control Level objects to keep track of what actions are required to download the changes. Download requests are handled by the Download Agent, which is a non-persistent object created by other objects which have download methods (Blocks, Control Stations, Control Areas). Once the Download Agent is created, the requesting object passes it an OID or a list of OIDs and an argument indicating what type of download operation to perform: download just the required changes, or download all parameters to refresh the Control Station data.","The Download Agent uses the OID(s) to create action records and obtain parameter values from the Control Levels and Blocks and builds an optimized ordered list of actions to ensure proper delete\/add sequences and to group actions by Control Station and Control Level. The Agent then contacts the Download Service to request a reference to an ICCAPI object. The Download Service manages Control Station interfaces and creates request queues when there are concurrent download requests for the same Control Station. The Download Service returns either a busy indication (if another Download Agent is currently using the requested Control Station) or a reference to the ICCAPI object created by the Service for a specific Control Station. The Download Agent uses the reference to make the appropriate ICCAPI calls as it processes its Download list. If a busy indication is received (meaning the CP is being accessed by another process), the Download Agent will abort the download and inform the user. Likewise, if any Block download returns an error, the Download Agent will abort the download. The Download Manager will be responsible for querying the user for the next action to take\u2014retry or abort altogether.","As each successful download action is completed, the Agent notifies the Control Level and Block to delete its action record. Upon completing the download request, the Download Agent returns a copy of the OID list to the original object which requested the download, indicating the success or failure of each requested download entry.","As a download is initiated, the Download Agent will mark the associated Control Station as \u201cDownloading\u201d. If the download is successful, the Control Station state becomes \u201cDownloaded\u201d. In the event of a download failure, the Control Station state will remain \u201cDownloading\u201d. At startup of the illustrated configuration system, a check of Control Stations will be made, and if any Control Station indicates a download failure (by having the Control Station state of \u201cDownloading\u201d), the user will be notified of the past download failure.","The Download Agent will also handle requests for Control Station checkpoints and initializations.","Download operations will fully comply with and support the versioning described in Part 1 as versioning becomes available.","2.9.2 Functionality","2.9.3 Download Agent","The Download Agent is a non-persistent object that is temporarily created by objects or editors of the illustrated configuration system to process download requests to Control Stations. The Agent accepts download requests in the form of OIDs (a list of Block or Control Level OIDs, or a Control Area OID) and creates action record information from the Control Levels' Block list to build an optimized list for issuing ICCAPI calls to the respective IAS Control Station. Block ordering is a function of the Control Level. The download request also contains arguments indicating what type of download to perform. The download type argument is used to specify one of the following download actions:\n\n","The Download Agent contacts the Download Service to obtain a reference for an ICCAPI object to use for each Control Station. The Agent formats ICCAPI instructions, based on the action records in its optimized list, and invokes the appropriate method of the ICCAPI object to process the actual download to the physical Control Station.","For successful download actions, the Download Agent notifies the respective Block to delete the action record and logs the action as successful in the download request list. Unsuccessful download actions are marked as failed in the download list and further processing is aborted. When the Download Agent is finished processing the download request it passes the original request list, with download status filled in for each entry, back to the original requester. A successful download will be followed by a checkpoint of the Control Station. The Agent then notifies the Download Service when download processing is complete, so that the Service can delete the ICCAPI object.","The Download Agent will process one download request at a time. If the Download Agent is currently downloading, any subsequent attempts to download will be rejected until the current download is complete. To provide a means of recovery in the event of a system or Control Station failure during a download, the Download Agent will mark each object with a \u201cDownloading\u201d attribute just prior to calling the ICCAPI. Once the download of the object is successful, the \u201cDownloading\u201d attribute is cleared. If the download of the object fails, the \u201cDownloading\u201d attribute remains and the download is aborted.","2.9.3.1 Download Service","The Download Service is a service that runs on the Model\/configuration database server platform and manages requests to create ICCAPI objects to be used for issuing download actions to specific Control Stations. The Service keeps tracks of which Control Stations are currently in use by Download Agents. If multiple requests for the same Control Station are received, a \u201cbusy\u201d error is returned. This error is returned to the calling object, allowing the object to query the user for what action to take\u2014abort the download or wait for the current download for the given Control Station to complete. The Download Service creates ICCAPI objects for specific Control Stations and passes references to these objects back to the requesting Download Agents. Upon receiving notification that a Download Agent has completed its download tasks, it deletes the ICCAPI object. The Download Service processes multiple downloads to multiple different Control Stations at one time. In the event of a Download Agent or network failure, the Download Service terminates a Control Station connection if no communication is received from the station's Download Agent within the preceding three minutes.","2.9.4 Class Descriptions","Since the Download Services only reads and writes existing Application and Framework database objects, it has no object model (aside from the MFC objects used in its implementation and human interface). The verification features of the services use the Framework-supplied revision and change management functions of the objects involved in its operation. See .","2.9.4.1 Blocks","Blocks maintain a status attribute, indicating their current download state:\n\n","The status attribute is kept consistent with any existing action records and is used to indicate to other objects or applications if the Block needs to be downloaded, or if a special visual attribute needs to be set. For instance, the Project Manager would use a special icon on a Tree or List view to indicate that a Block had been deleted, but not yet downloaded.","Blocks add the appropriate action records in response to user actions, including:\n\n","Blocks also provide the appropriate parameter list and values in response to Download Client requests to download:\n\n","Blocks have two-way associations with a Control Level. A Control Level uses its associations to keep an ordered list of its Blocks. A Block uses its association to identify the Control Level to which it is currently assigned. When a Block is re-assigned to another Control Level, it creates a Delete action record that contains the Name and OID of the old Control Level and deletes its association with the old Control Level. It then creates an association with the new Control Level and creates an Add action record with the Name and OID of the new Control Level. The old Control Level maintains its association with the Block until the reassignment is downloaded, at which time the Block notifies the old Control Level to delete its association.","2.9.4.1.1 Block Action Records","Action records are non-persistent objects created in response to users adding, deleting or modifying the Block. They are used to determine what actions are required in response to a download request. Each action record has attributes to indicate:","Action Type:",{"@attributes":{"id":"p-0584","num":"0000"},"ul":{"@attributes":{"id":"ul0178","list-style":"none"},"li":{"@attributes":{"id":"ul0178-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0179","list-style":"none"},"li":["Add\u2014download all parameters","Modify\u2014download only parameters marked as modified since last download, including changed Block processing order within a Loop.","Delete\u2014delete block from the Control Level","Block Name\u2014needed to handle cases where Block name is changed","Control Level Name","Control Level OID","Position\u2014Block processing position within a Loop, used by the Download Agent to determine Block position within a Control Level.\n\nStatus:\n","New\u2014no download action initiated (default state when Record is created)","Pending\u2014download request is in progress but not yet successfully completed"]}}}},"Control Level Name and Control Level OID are used to determine if a delete action requires deleting the Block from the database (Name and OID match) or if the Block should remain in the database, but needs to be deleted from an existing Control Level because the Block has been moved to another Control Level or the Control Level has been renamed (Name and OID do not match). Action record status is used to track progress of download requests. Status is changed from New to Pending when the Block responds to a request for download information from the Download Client.","Action records are deleted by the Block in response to notification from the Download Agent that the action has been successfully completed.","2.9.4.2 Control Levels","Control Levels contain status similar to Blocks and maintain associations with Control Stations similar to the associations Blocks maintain with Control Levels.","2.9.4.2.1 Control Level Action Records","Control Level action records are built similarly to those used for Blocks, except that the Control Station names and OIDs are used in place of the Control Level names and OIDs in the Block action records.","2.9.5 Logging Downloads to the Change Tracking System","2.9.5.1 Change Tracking Service","As noted above in connection with the discussion of , change tracking system (CTS)  logs configuration information that is downloaded to the control system, e.g., to controllers A, B and the other control devices (e.g., actuators , sensors , , and other field devices) or controlled apparatus. Illustrated CTS  logs information sent to it, e.g., via ports it opens on network , and\/or otherwise received by it, e.g., via RPC calls, calls to functions it exposes in an applications program interface (API), or otherwise.","More particularly, illustrated CTS accepts XML files generated, e.g., by the Download Service, the field bus module editor and\/or the field device editor, that contain textual (e.g. ASCII) or other representations of configuration information downloaded to devices and named to match (or otherwise in accord with) those devices. The textual or other representations contained in those files includes names of the fields, parameters, etc., to which information is downloaded, as well as the values so downloaded. In other embodiments, the change tracking system  can accept the information to be logged in other formats (e.g., as appended parameters to HTTP calls on network , as fields of remote procedure calls, or otherwise) and\/or grouped in other ways (e.g., one file per parameter changed, multiple devices per file, or otherwise).","2.9.5.2 Logging Downloads","As evident above and elsewhere herein, the Download Service downloads configuration information from objects in the model to respective devices of the control system and\/or control apparatus. Those downloads can go directly to the respective devices or can go indirectly, e.g., via other devices, such as controllers, field bus modules, as per convention. While in some embodiments of the invention, all attributes and\/or parameters associated with the \u201ctrack\u201d attribute are download, in other embodiments only downloaded are those parameter values (and, more particularly, for example, those attributes) with which the corresponding devices can be configured. In the illustrated embodiment, this is reflected in \u201cdevice description\u201d files or other databases, data structures and\/or lists (typically, for example, provided by device manufacturers and\/or by a Process Engineer and\/or Process Engineer Administrator, System Administrator or other authorized person) external to the objects and parameters containing the configuration information. Even where downloads (and tracking) may be restricted in accord with settings in such device description files or the like, some embodiments permit those settings to be overridden, e.g., based on the values of \u201ctrack\u201d or other attributes associated with the model objects and\/or parameters, based on user action (e.g., using an editor for download management), or otherwise. Thus, by way of non-limiting example, although the description file associated with a specific device may have settings that would otherwise preclude downloading a particular parameter value (such as, for example, an alarm setting) to that device, the Download Service may be responsive to user action (via and editor or otherwise) and\/or a \u201ctrack\u201d attribute associated with that parameter for overriding the setting and effecting downloading of the parameter (and logging of the downloaded value to the change tracking system).","In connection with transferring configuration information from objects to the devices and apparatus that they (the objects) represent, the Download Service logs that information to the CTS . In some embodiments, the Download Service does that for all downloaded information. In the illustrated embodiment, however, it does so for only for those parameters for which the \u201ctrack\u201d attribute is \u201ctrue,\u201d as defined directly or via inheritance. Continuing with the foregoing examples, it logs to the CTS  configuration information transferred to the bus masters and bus slaves pertaining to the respective network segments (e.g., field buses). These are only examples, of course: the Download Service also logs to the CTS  other configuration information downloaded to those exemplary devices, as well as configuration information downloaded to other devices in the control system, again, in accord with the \u201ctrack\u201d attributed of the corresponding parameters.","In the illustrated embodiment, the Download Service logs information to the CTS  by generating and transmitting to the CTS on network  XML files of the type described above. Thus, for example, in connection with downloading configuration information to a device whose system i.d. is \u201cFBM00222,\u201d the Download Service can generate an XML file named, again, for example, \u201cFBM00222.xml\u201d that contains a listing of parameters downloaded to the device, as well as their respective values\u2014or, referring to the Parameter Definition attribute set above, by including in the XML file the \u201cname\u201d attribute of each parameter for which a value is downloaded, as well as that \u201cvalue\u201d attribute, though, other attributes can be used instead or in addition.","In other embodiments, the Download Service can log changes to the CTS in such other formats and groupings as noted above or otherwise.","2.10 Operator Interface Applications Download Agent and Server","2.10.1 Overview","The Operator Interface (OI) Download Services are responsible for downloading configuration information to IAS applications.","2.10.2 Functionality","2.10.2.1 Download Agents","The Download Agents interact with the Download Manager for user interactions in selecting targets, and providing progress information. The Download Agents rely on the Download Manager for error recovery.","The Download Agents provide a query function used by the Download Manager for determining whether the agent handles the selected source object. The Download Manager passes in an OID for the selected object. The OID's type is tested for determining whether the agent deals with the object. The agent also checks child collections of the object if the Download Manager specifies the children option.","For source objects which the Download Agent handles, the Download Agent returns the list of possible target stations. The Download Agents return either a string array of names or a list of object definitions. If object definitions are returned, the Download Manager displays all instances of the object definition.","Once a download initiates, the Download Agents interact with the source objects to extract information as needed by the OI application. This information is replicated to all target systems using the Replication Server. During the download process, the Download Agents interact with the Download Manager to display progress information.","2.10.2.2 Download Service","The Download Service for OI downloads is comprised of two applications. The first application is a generic application which replicates data files, created by the Download Agents, to a specified list of targets. The second application is specific to OI applications and performs the needed functionality to import the replicated data into the OI application. The OI import application is specific to each OI application. Responsibility for the implementation of the import services resides with the OI application team. The Download Agent may interact directly with an OI Application Server to import the data, without invoking replication services, if appropriate.","2.10.3 Class Descriptions","The Download Agents are transient classes with no object definitions. The interaction between the Download Agents and the objects is through the parameterized object interface. Specific parameters are extracted from the objects to create the OI Application data set. The parameters to extract are either predetermined by the Download Agent or specified as a parameter group in the object.","2.11 Historian Collection Point Editor","The illustrated configuration system supports historian, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 2.11-2.11.4.1 and FIGS. 110-112 thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","2.12 Enclosure Editor","The illustrated configuration system supports an Enclosure Loading Editor, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 2.12-2.12.3.14 and FIGS. 113-118 thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","2.13 Reports","The illustrated configuration system supports reporting, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 2.13-2.13.6 and the accompanying drawings thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","3 Framework Services","The illustrated configuration system supports framework, e.g., in the manner disclosed in incorporated-by-reference U.S. Pat. No. 6,754,885 and, particularly, by way of non-limiting example, in Sections 3-3.1.6 and FIGS. 119-121 thereof, the teachings of which are particularly incorporated herein by reference\u2014all as adapted in accord with the teachings hereof.","Described above are methods and apparatus meeting the objects and goals set thereforth. Those skilled in the art will appreciate that the embodiments shown in the drawings and described in the accompanying text are merely examples and that other embodiments, incorporating modifications and changes therein, fall within the scope of the invention. Thus, by way of non-limiting example, it will appreciated that other programming constructs such as, by non-limiting example, records, \u201cstructs,\u201d arrays, and tables, may be utilized in place of the data structures referred to as \u201cobjects\u201d above. By way of further non-limiting example, methods and apparatus according to the invention can be used to model and configure control systems other than those used for process control such as, by non-limiting example, environmental control systems."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the invention may be attained by reference to the drawings, in which:",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIGS. 2A-2B"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIGS. 23-25"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 55"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 64"},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 68"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIGS. 69-70"}]},"DETDESC":[{},{}]}
