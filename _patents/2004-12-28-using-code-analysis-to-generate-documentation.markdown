---
title: Using code analysis to generate documentation
abstract: The subject invention relates to systems and methods that generate documentation discovered by programmatic and/or automatic code analysis. The generated documentation can be related to, for example, security, error conditions, permissions, exceptions, etc. Static code analysis and/or runtime analysis can be utilized to provide more complete, updated and/or accurate documentation as compared to conventional techniques by obtaining information, which can be utilized to automatically generate the documentation. According to an aspect of the subject invention, documentation can be generated that can supplement existing documentation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07788640&OS=07788640&RS=07788640
owner: Microsoft Corporation
number: 07788640
owner_city: Redmond
owner_country: US
publication_date: 20041228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE INVENTION"],"p":["The subject invention generally relates to generating documentation, and more particularly to systems and methods that utilize static code analysis and\/or runtime analysis to generate documentation.","In computer related industries, software tends to be rapidly evolving. Oftentimes, it is beneficial and\/or necessary to provide documentation that describes certain aspects of software to enable a user to utilize the software. Documentation can be any communicable material (e.g., text, video, audio, . . . ) employed to explain various attributes of an object, a system or a procedure. According to an example, documentation can be presented to a user as printed books or computer readable files (e.g., HTML pages). The documentation, for instance, can describe the operation of a system by providing examples, parameters, descriptions of outputs, exceptions, requirements, security parameters, syntax, semantics, error codes, ranges, etc.","Traditionally, technical writers review source code and specifications and generate documentation based upon their evaluations. Commonly there is a limited amount of time between the completion of software and its release to customers during which the technical writers document the software. Moreover, some software can include many millions of lines of source code to be documented. Due to time and\/or resource constraints, technical writers frequently fail to document software well and regularly omit critical aspects such as security and error handling. Additionally, technical writers oftentimes publish inaccurate and\/or misleading information because the code has changed subsequent to their evaluation. Also, technical writers may be unable or limited in their ability to create documentation under certain circumstances, such as if they lack access to the source code and instead inspect object code, binary instruction sets, etc.","Conventional techniques utilized to generate documentation typically require a programmer or developer to include an indicator or description (e.g., English (or any other suitable language) description explaining aspects of the code populated by the user, . . . ) with the programmed code related to the developed software; additionally, the indicators or descriptions can be output and utilized as the documentation. Accordingly, these conventional generation techniques present deficiencies similar to those yielded by technical writers since the indicators or descriptions may fail to be included with the programmed code and\/or may not be updated to account for subsequent alterations of the code because the programmers or developers provide the content of the indicators or descriptions.","Additionally, software programmers can be affected by the aforementioned deficiencies associated with the documentation. For instance, programmers writing secure code typically need to know the permissions associated with a called method. Generally, this information is not available in software application programming interface (API) documentation. Additionally, if this information is available, it can be outdated and, therefore, inaccurate. By way of illustration, a programmer can produce code that writes to a log file. If a log file does not currently exist, the code can provide for the creation of a new log file, which can require proper permissions. If the documentation is incomplete and\/or inaccurate regarding these permissions and the programmer is not familiar with the required permissions, then the programmer's code can fail. Moreover, incomplete and\/or inaccurate documentation, for example, can lead to development of code that can be maliciously exploited by a hacker who takes advantage of the improper utilization of permissions associated with the creation of the log file and\/or the failure to create a log file. Incomplete and\/or inaccurate information presented in the documentation can yield several negative repercussions such as undermining customer trust, slowing adoption of new software, and reducing the security associated with software. In view of the above, there is a need to improve documentation generation.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The subject invention relates to systems and methods that generate documentation discovered by programmatic and\/or automatic code analysis. The generated documentation can be related to, for example, security, error conditions, permissions, exceptions, etc. Static code analysis and\/or runtime analysis can be utilized to provide more complete, updated and\/or accurate documentation as compared to conventional techniques by obtaining information, which can be utilized to automatically generate the documentation. According to an aspect of the subject invention, documentation can be generated that can supplement existing documentation. Also, pursuant to an exemplary illustration, the documentation generated by the subject invention can be edited and\/or accepted by a user, program, etc. to create documentation for an end user.","According to an aspect of the subject invention, a system that generates documentation is provided. The system can include an input component that receives existing documentation and at least one of source code, object code, and a binary instruction set. Additionally, the system can include a documentation generator that utilizes at least one of static code analysis and runtime analysis to evaluate the at least one of source code, object code, and the binary instruction set to automatically generate supplemental documentation.","Pursuant to another aspect of the subject invention, a method is provided that facilitates generating documentation. The method can include receiving at least one of source code, object code, and a binary instruction set, evaluating the at least one of source code, object code, and binary instruction set utilizing at least one of static code analysis and runtime analysis, and generating documentation based on the evaluation.","According to another aspect of the subject invention, a system that facilitates generating documentation is provided. The system can include means for analyzing at least one of source code, object code, and a binary instruction set to derive information related to the at least one of source code, object code, and binary instruction set. Also, the system can include means for generating documentation that comprises the derived information.","The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative, however, of but a few of the various ways in which the principles of the invention may be employed and the subject invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The subject invention relates to systems and methods that generate documentation discovered by programmatic and\/or automatic code analysis. The generated documentation can be associated with, for example, security, error conditions, permissions, exceptions, etc. The subject invention can evaluate source code, object code, binary instruction sets, file systems, etc., or a combination thereof, utilizing static code analysis and\/or runtime analysis to produce the documentation. Additionally, the generated documentation, for instance, can be employed to supplement existing documentation (e.g., documentation created by technical writers, conventional techniques, the subject invention at a previous time, . . . ); accordingly, the generated documentation can be automatically incorporated with existing documentation (e.g., supplemental documentation), included as revision marks (e.g., approvable documentation) that a user can integrate into the documentation, etc. Additionally or alternatively, the generated documentation can be presented as the documentation without further action.","As used in this application, the terms \u201ccomponent,\u201d \u201csystem,\u201d \u201cenvironment,\u201d \u201cgenerator,\u201d and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers. Also, these components can execute from various computer readable media having various data structures stored thereon. The components may communicate via local and\/or remote processes such as in accordance with a signal having one or more data packets (e.g., data from one component interacting with another component in a local system, distributed system, and\/or across a network such as the Internet with other systems via the signal).","The subject invention is described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the subject invention. It may be evident, however, that the subject invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing the subject invention.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","110","110","110","110","110"]},"The system  further comprises a documentation generator , which receives the input from the input component . The documentation generator  analyzes the input and generates documentation associated with the input. According to an example, the documentation generator  can employ static code analysis, runtime analysis, programmatic analysis, automatic code analysis, etc. to create an output such as documentation, text, images, diagrams, code, outlines, revision marks (e.g., approvable documentation), etc. The documentation generator  can derive information from the input other than information populated by a user (e.g., programmer, developer); thus, the documentation generator  can produce documentation that includes information other than, for example, comments written in the source code in English that describe a particular call. The documentation generator  can provide any portion of the documentation. For example, the documentation generator  can supplement documentation created by another source such that a majority of the documentation is created by a programmer, technical writer, conventional generation technique (e.g., C# documentation comments, JAVADOC\u2122 comments, . . . ), etc., while the documentation generator  provides a portion of the documentation (e.g., supplemental documentation) related to various aspects such as security, error handling, etc. Pursuant to an exemplary aspect, the documentation generator  can be utilized in connection with essentially any programming language (e.g., C#, C++, JAVA\u2122 programming language, . . . ) and any feature associated with the programming languages.","The documentation generator  can produce various forms of output. For example, the documentation generator  can yield an output that is in a form that is presentable to a user. By way of illustration, the documentation generator  can create one or more of a text document, video, audio, an image, a diagram, a graph, a chart, etc., which is automatically populated with the documentation information, which can be provided to a user. According to another example, the documentation generator  can provide information that is incorporated into existing documentation as revision marks (e.g., approvable documentation); thus, a writer, programmer, etc. can inspect the revision marks and choose whether to incorporate such changes. By way of a further example, the documentation generator  can automatically integrate the gathered information into a preexisting documentation set.","The subject invention provides advantages compared to conventional documentation generation systems and\/or methods. In particular, the subject invention provides more complete and\/or accurate documentation to a user. The documentation can be updated so that it corresponds to a current version of the code; thus, the amount of misleading information included within the documentation can be decreased. Additionally, the subject invention provides a cost effective manner of remaining up-to-date with development of software and improving the accuracy of documentation. Furthermore, resources associated with documenting can be reduced because fewer technical writers are required. Also, the documentation can be generated faster, which can be important, for example, when providing instructions associated with alpha and beta releases of software.","With reference to , illustrated is a system  that generates documentation according to an aspect of the subject invention. The system  comprises the input component  that receives an input such as, for example, existing documentation, source code, object code, a binary instruction set, a text file, and\/or a file system. The system  also includes the documentation generator , which further comprises a pre-runtime analyzer  and a runtime analyzer . The pre-runtime analyzer  and\/or the runtime analyzer  can be utilized to evaluate the input(s) obtained via the input component  and to generate documentation associated with the input(s).","The pre-runtime analyzer  generates documentation based on the input prior to runtime. For instance, the pre-runtime analyzer  can operate at compile time, debugging, development, etc. The pre-runtime analyzer  can be, for example, a static code analyzer that evaluates source code. By way of illustration, the static code analyzer can identify sections of the source code that are related to certain operations, calls, methods, etc. (e.g., associated with security, error handling, . . . ). Thereafter, the pre-runtime analyzer  and\/or the documentation generator  produce documentation related to the identified sections of the source code. According to an example, when permissions associated with source code are evaluated, the pre-runtime analyzer  (e.g., static code analyzer) can identify essentially all calls to create files within the source code (e.g., by searching the source code), since the permissions associated with the creation of a file need to be properly handled to ensure that an application does not fail. The pre-runtime analyzer  can provide a report to a user (e.g., technical writer) identifying the calls utilized in the source code, thereby enabling the user to modify the documentation accordingly. Alternatively or additionally, the pre-runtime analyzer  can output text (e.g., boilerplate text) that indicates that the code requires file access permission, for example, to a particular directory, path, etc., which can be incorporated with existing documentation. Thus, the documentation can be modified when variations are made to the source code. Also, static code analysis can be utilized, for instance, to evaluate the flow of control statements (e.g., \u201cif\u201d, \u201cswitch\u201d) and output an outline of the control of flow in a program.","Pursuant to an example, the pre-runtime analyzer  (e.g., static code analyzer) can generate documentation based on attributes, which can be utilized with most programming languages (e.g., C#, C++, JAVA\u2122 gramming language, . . . ). The attributes can explicitly declare that the code requires permission to access, read, write, etc. to a path, directory, etc. Thus, the pre-runtime analyzer  can generate an output (e.g., documentation) that corresponds to the attributes.","The following pseudocode illustrates an example of source code that incorporates attributes, which can be evaluated with the pre-runtime analyzer . For example, access can be controlled to resources and members by placing a security attribute at method, class or assembly level in C#, which is part of a feature referred to as Declarative Code Access Security. In regards to throwing exceptions, some languages such as Java include facilities for discovering thrown exceptions; however, these languages are uncommon, and thus, the pre-runtime analyzer  can be utilized to evaluate the exceptions.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[FileIOPermissionAttribute(SecurityAction.RequestRefuse,"]},{"entry":[{},"\u201cc:\\MyDirectory\u201d)]"]},{"entry":[{},"Public void Foo(Bar)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/...implementation..."]},{"entry":[{},"If(x==y)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new FileNotFoundException( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The runtime analyzer  generates documentation at runtime, for example, by utilizing a binary instruction set, file system, object code, etc., or a combination thereof. Thus, the runtime analyzer  can be employed when source code is not available. The runtime analyzer  inspects the file system while executing the binary instruction set and\/or object code to determine whether the binary instruction set and\/or object code attempt to utilize the file system. Therefore, the runtime analyzer  identifies whether the file system is manipulated. According to an example, the runtime analyzer  can evaluate whether there is right access to create a file and what occurs if \u201ccreate file\u201d permissions are not given. Also, the runtime analyzer , for instance, can determine when the binary instruction set and\/or object code attempt to create a new file (e.g., upon pressing a button, at initialization, upon occurrence of an error, . . . ). Upon exploring the impact of the binary instruction set and\/or the object code on the file system, the runtime analyzer  can output corresponding documentation.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["300","300","110","110","120","210","220","120"]},"The system  further comprises an editor  that obtains the approvable documentation. The editor  is utilized to accept, alter, and\/or format the approvable documentation. The editor , for example, can be a text editor, a source code editor, an HTML editor, a graphics editor, a sound editor, a video editor, etc. The editor  can be a separate component from the documentation generator  (as depicted) and\/or the documentation generator  can comprise the editor . By way of example, the documentation generator  can evaluate source code and provide approvable documentation such as revision marks in a text document. Thus, a programmer and\/or technical writer can utilize the editor  to review and decide whether to accept the revision marks. If the revision marks are determined to be acceptable, the editor  can output the documentation. However, the programmer and\/or technical writer can alternatively determine that the revision marks are incorrect, inaccurate, misleading, or require additional content; thus, the editor  can be employed to facilitate altering the revision marks to place the documentation in a finished form. Additionally or alternatively, the editor  can automatically accept, alter, and\/or format the approvable documentation with minimal user interaction.","Turning to , illustrated is a system  that supplements existing documentation according to an aspect of the subject invention. The system  comprises the input component , which obtains existing documentation and\/or a path to the existing documentation. The existing documentation can be created by any source such as a programmer, technical writer, C# documentation comments, Javadocs, etc. Additionally, it is contemplated that the existing documentation can be any size; for example, the existing documentation can be millions of lines in length. Also, the existing documentation can be in any format such as thousands of Internet pages, a single text document, a video, an audio recording, a chart, a table, etc. The input component  additionally obtains information such as source code, object code, a binary instruction set, a file system, etc., a combination thereof, or a path to such information. The input component  provides the information to the documentation generator , which comprises the editor  (and can also include the pre-runtime analyzer  and\/or the runtime analyzer  of ). The documentation generator  evaluates the information utilizing runtime analysis and\/or static code analysis and can employ the editor  to create supplemental documentation. The supplemental documentation, for example, can be related to particular aspects associated with software such as error handling and security, which are oftentimes poorly documented.","A merge component  receives and integrates the supplemental documentation and the existing documentation to produce merged documentation, which is an updated version of the documentation. According to an example, the merge component  can receive a path to a set of existing documentation, such as a few thousand Internet pages, as well as a text document that represents the supplemental documentation created by the documentation generator , which is related to security, error handling, etc. The merge component  can automatically integrate the text document with the Internet pages to produce the merged documentation that is in sync with a current version of the source code, object code, binary instruction set, etc. For example, the merge component  can convert the text document into an Internet page with formatting similar to the existing documentation and\/or insert hyperlinks to the newly created page on any number of other pages of the existing documentation. Additionally or alternatively, the merge component  can insert and\/or replace hyperlinks, tables, charts, diagrams, code, outlines, text, etc. to incorporate the supplemental documentation. According to a further example, the editor  can be associated with the merge component , thereby enabling a user to alter and\/or accept the manner in which the existing documentation and the supplemental documentation are integrated. Thus, a programmer and\/or a technical writer can adjust the format, content, organization, etc. of the existing documentation and\/or the supplemental documentation to produce a desired merged documentation.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["500","500","110","120","310","410","500","510","120","410"]},"According to an example, the documentation store  can be utilized in connection with the documentation generator  (e.g., pre-runtime analyzer , static code analysis) to facilitate evaluating source code. By way of illustration, the documentation store  can maintain a database of signatures that are dependent upon programming language and\/or platform. These signatures can represent certain aspects associated with the software (e.g., security, error handling) and can be compared to the source code to identify particular actions, calls, methods, etc., thereby enabling the documentation generator  to create the appropriate documentation (e.g., approvable documentation).","Additionally or alternatively, the documentation store  can store boilerplate text, graphics, diagrams, charts, video, audio, etc. that can be incorporated into the documentation (e.g., approvable documentation, supplemental documentation, merged documentation, . . . ). For example, when the documentation generator  determines that access is required to a particular directory, the documentation store  can provide boilerplate text that can be incorporated into the documentation that indicates this requirement. Furthermore, it is to be appreciated that the documentation store  can be utilized in the absence of the merge component  when the documentation generator  produces documentation that does not require integration with existing documentation.","The documentation store  can be, for example, either volatile memory or nonvolatile memory, or can include both volatile and nonvolatile memory. By way of illustration, and not limitation, nonvolatile memory can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory can include random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), SYNCHLINK\u2122 DRAM (SLDRAM), and direct RAMBUS\u2122 RAM (DRRAM). The documentation store  of the subject systems and methods is intended to comprise, without being limited to, these and any other suitable types of memory. The subject invention contemplates that the documentation store  can be part of the documentation generator , the editor , the merge component , a separate component as depicted, or a combination thereof.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 2","FIG. 2"],"b":["600","600","110","600","120","310","410","510","120","210","220","310","410","510","610","120","310","410","510"]},"Furthermore, the machine learning component  can make inferences relating to determining tasks that can be accomplished and\/or executing tasks associated therewith. As used herein, the terms to \u201cinfer\u201d or \u201cinference\u201d refer generally to the process of reasoning about or inferring states of a system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources. Thus, the documentation generator , the editor , the merge component  and\/or the documentation store , given particular contextual data, can make inferences relating to generating documentation. According to an example, the documentation generator  can evaluate source code, object code, a binary instruction set, and\/or a file system and infer the appropriate documentation that is associated with particular calls, manipulations, etc. Pursuant to a further illustration, the editor  can infer whether to automatically accept all or a portion of the approvable documentation based on previous user action employing the editor .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 7","FIG. 6"],"b":["700","700","710","710","710","720","710","610","720","720","720","720"]},"The system  further comprises a code updating component  that is coupled to the dynamic documentation generator . The dynamic documentation generator  can identify inconsistency and\/or inaccuracy within the code such as, for example, incorrect attributes, etc. Thereafter, the code updating component  can alter the code via the development environment  to correct such inconsistencies and\/or inaccuracies. By way of illustration, since attributes can be classes, a derived class can be inserted by the code updating component  to replace an incorrect attribute.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIGS. 8-10"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8","b":["800","810","820","830"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 9","b":["900","910","920","930","940","950"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 10","b":["1000","1010","1020","1030","1040","1050","1000","1020"]},"In order to provide additional context for implementing various aspects of the subject invention,  and the following discussion is intended to provide a brief, general description of a suitable computing environment in which the various aspects of the subject invention may be implemented. While the invention has been described above in the general context of computer-executable instructions of a computer program that runs on a local computer and\/or remote computer, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally, program modules include routines, programs, components, data structures, etc., that perform particular tasks and\/or implement particular abstract data types.","Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multi-processor computer systems, minicomputers, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based and\/or programmable consumer electronics, and the like, each of which may operatively communicate with one or more associated devices. The illustrated aspects of the invention may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However, some, if not all, aspects of the invention may be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in local and\/or remote memory storage devices.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 11","b":["1100","1100","1110","1110","1100","1120","1120","1120"]},"One possible communication between a client  and a server  can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system  includes a communication framework  that can be employed to facilitate communications between the client(s)  and the server(s) . The client(s)  are operably connected to one or more client data store(s)  that can be employed to store information local to the client(s) . Similarly, the server(s)  are operably connected to one or more server data store(s)  that can be employed to store information local to the server(s) .","With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Card Bus, Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), FIREWIRE\u2122 (IEEE 1394), and Small Computer Systems Interface (SCSI).","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), SYNCHLINK DRAM (SLDRAM), and direct RAMBUS RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example a disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, JAZ\u2122 drive, ZIP\u2122 drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It is to be appreciated that the subject invention can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer , and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like monitors, speakers, and printers, among other output devices , which require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses wire and\/or wireless communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet, Token Ring and the like. WAN technologies include, but are not limited to, point-to-point links, circuit switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems and DSL modems, ISDN adapters, and Ethernet cards.","What has been described above includes examples of the subject invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the subject invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject invention are possible. Accordingly, the subject invention is intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims.","In particular and in regard to the various functions performed by the above described components, devices, circuits, systems and the like, the terms (including a reference to a \u201cmeans\u201d) used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., a functional equivalent), even though not structurally equivalent to the disclosed structure, which performs the function in the herein illustrated exemplary aspects of the invention. In this regard, it will also be recognized that the invention includes a system as well as a computer-readable medium having computer-executable instructions for performing the acts and\/or events of the various methods of the invention.","In addition, while a particular feature of the invention may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes,\u201d and \u201cincluding\u201d and variants thereof are used in either the detailed description or the claims, these terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
