---
title: Method and system for using a hyperlink, banner, or graphical icon to initiate the overlaying of an object on a window
abstract: A method and system for overlaying an object in a window of a software application where an overlay plane is composed of at least one object and the overlay plane is overlaid with the window using either a layering feature of the software application or by directly compositing the overlay plane with the window using enhanced functionality not included in the software application. The overlaying of the overlay plane in relation to the window does not depend on a cursor or pointing device designated position but may rather, for example, be arbitrarily placed or may be positioned in proximity to the text or graphic link used to initiate the overlaying process. The method and system may be implemented using a plugin-control for the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07559034&OS=07559034&RS=07559034
owner: DG FastChannel, Inc.
number: 07559034
owner_city: Irving
owner_country: US
publication_date: 20001019
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND INFORMATION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or patent disclosure as it appears in the Patent and Trademark office, patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention relates to a computer system and method for using a hyperlink, banner, or graphical icon to initiate the overlaying of an object in a parent window.","There is great interest in exploiting the capabilities of the Internet World Wide Web (\u201cWeb\u201d) by providing advertising to generate revenue for Web sites. A Web site is a grouping of one or more associated Web pages sharing a common domain. Each Web page is a document that is displayed as a single window of information. Web advertising is predominantly implemented through the use of banner advertisements on these Web pages. With the evolution of the Internet and the Web from an Academic to mainstream medium, advertising became a commercially feasible activity.","The birth of true Web-based advertising began in 1994 with a banner advertisement from AT&T\u2122 on the \u201chotwired.com\u201d Web site. A banner advertisement (hereinafter \u201cbanner\u201d) is a graphic or image contained on either a Web page or a portion of a display screen and used for advertising. Since the pioneering AT&T\u2122 advertisement, the banner has become the predominant form of Web advertising. From modest beginnings in 1994, the banner has today evolved into eight commonly accepted types and sizes as identified by the Standards and Practices Committee of the Internet Advertising Bureau (IAB).  is a diagram illustrating the eight commonly accepted IAB types and sizes of banner advertisements. These categories are:",{"@attributes":{"id":"p-0006","num":"0005"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Type of Banner","Size in Pixels"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Micro Button 170","\u200288 \u00d7 31"]},{"entry":[{},"Button 150","120 \u00d7 60"]},{"entry":[{},"Button 140","120 \u00d7 90"]},{"entry":[{},"Square Button 160","\u2002125 \u00d7 125"]},{"entry":[{},"Vertical Banner 130","\u2002120 \u00d7 240"]},{"entry":[{},"Full Banner w\/Vert. Navigation Bar 110","392 \u00d7 72"]},{"entry":[{},"Half Banner 120","234 \u00d7 60"]},{"entry":[{},"Full Banner 100","468 \u00d7 60"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In order to judge the effectiveness of a banner in reaching a desired demographic, various metrics have been developed. The Coalition for Advertiser Supported Information and Entertainment (CASIE) has published a glossary of Web marketing terms. In 1997, the Media Management Task Force of the IAB published voluntary guidelines for online advertising in their document. Both are industry efforts to standardize the use of metrics in online advertising. The most frequently used metric for banner effectiveness is the click-through ratio (CTR). CTR is a ratio measuring the number of times a banner is clicked on to the number of times a banner is shown. For example, if a banner is clicked on 5 times out of the 100 times that the banner is shown, the banner has a CTR of 5:100 or 5%. Optimizing CTR is the focus of most Web advertising today and has led to further innovation in the field.","The problem with banners is that the Web has become so saturated with them that users have learned to tune them out. In order to compensate for this user disinterest, banner designers have become increasingly more innovative and have provided more stimulating content to the banners such as animation and video (e.g., rich media). These innovations are still designed to maintain or increase CTR and don't address a second problem with banners. Users often don't respond to banner advertisements or to hyperlinks (also known as \u201chypertext links\u201d) because they know that clicking on either will result in them being moved to another Web site. Users are generally at a Web site because they want to view the content offered and often do not want to be moved to another Web site. For this reason, CTR remains constant or continues to drop as users are less inclined to click through to other Web sites. Therefore, displaying full advertising content without taking the user away from the current Web site and Web page is a need that has existed for quite some time and has not been adequately solved until the advent of the present invention.","In addition to Web-based advertising, the development of small-scale data display devices also presents a problem that has not been addressed. Small-scale display devices such as personal digital assistants (PDAs), Internet\/Web-enabled phones, non-Web enabled phones with digital displays, and electronic books (e-books) have increased tremendously in availability but are still plagued by a limited display area. Conventional means have not overcome the limitations of this restricted display and the only way to present a greater amount of information is to provide scrolling within an application window (the window may be the screen display) or by displaying a new window of information. The present invention solves this need by providing an alternative method of reusing the display space without calling new windows or leaving the data already being displayed on the screen.","The problem faced by Web-advertisers in trying to maximize the screen space used without effecting the underlying content attracting a user to a Web page also arises in a non-advertising context. Many software applications and documents may benefit from reusing the screen display area to provide expanded information to a user without leaving the currently displayed underlying information. For example, an Adobe\u00ae Acrobat document containing a description of a new aircraft may not want to bog a reader down in details about the engines used by the new aircraft. Providing a means for displaying additional engine information (e.g., technical illustrations) to those readers wanting this additional information while avoiding this additional complexity for other readers where in both instances the underlying data remains available to the reader is clearly advantageous but not convenient in conventional embodiments of window-based software applications. The present invention solves this need by providing a convenient means for reusing the display space while still displaying the underlying window of a software application.","The present invention provides a method and system for using a hyperlink (also known as a hypertext link), banner advertisement (\u201cbanner\u201d), or graphical icon to initiate the overlaying of content (e.g., a transparent advertisement or a technical illustration) with a window, such as a Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen. According to one example embodiment of the present invention, the additional content is displayed in an \u201coverlay plane\u201d that may be implemented using an intrinsic layering feature (e.g., DHTML layering) of the window's host program, the window-based application software. Layering allows for the fast display of the object with the window without necessitating the recalculation (i.e., rerendering) of the scene. In an alternative embodiment of the present invention, the overlay plane may be directly overlaid with the underlying window without using an intrinsic layering feature of the window-based application.","In one embodiment of the present invention, a viewer plugin-control may be used to receive and display media content to be overlaid with the window. This viewer plugin-control may be a Netscape Navigator or Communicator plugin, Microsoft ActiveX control, or other plugin-control. The viewer plugin-control, if installed for the window-based application (e.g., a Web browser), may be registered by the application when the application starts up. If the viewer plugin-control is not installed, content (i.e., data types) designed for the viewer plugin-control may not be recognized by the window-based application or the user may be prompted to download the viewer plugin-control when the unrecognized content is encountered. The user may also be prompted to download a different version of the viewer plugin-control if a more recent version is available or if the content (i.e., data types) require a specific version of the viewer plugin-control. Even though the viewer plugin-control may be registered with the window-based application, a separate instance must be created for each use such as for each window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) encountered with viewer plugin-control content. If the instantiation procedure should fail, an alternative image file may be specified and displayed in place of the viewer plugin-control content. In other embodiments of the present invention, a viewer plugin-control may not be necessary for the display of content according to the present invention.","The overlaying process may be initiated according to one embodiment of the present invention by an event (e.g., click event, rollover event) or situational value (e.g., date or IP address of user). In one embodiment, a click event on a hyperlink, banner, or graphical icon may initiate the overlaying process. The overlaying process may begin with a determination to see if an instance of the viewer plugin-control exists according to one embodiment of the present invention. If an instance does not already exist, a new attempt at instantiation may be performed. If this new instantiation attempt is unsuccessful, a substitute image (e.g., a JPEG image or a GIF image) may be overlaid with the window instead of the otherwise planned content. If the instantiation is successful, the media object (i.e., the content) may be retrieved. In an alternate embodiment of the present invention where a viewer plugin-control is not used, neither the instantiation process needs to occur nor will a substitute image for the content be beneficial.","Content information may be stored in one or more files according to one embodiment of the present invention. A first file may be a markup language file that contains the formatting instructions for the content. This markup language file may be an eXtensible Markup Language (\u201cXML\u201d) or HyperText Markup Language (\u201cHTML\u201d) file according to one embodiment of the present invention. This first file may contain formatting information including camera viewpoint and location, transformations, texture mapping, transitions, and streaming for the object or content. A second file may contain the actual contents (i.e., the data) of the object or content and may be in a binary or compressed binary format.","According to one embodiment of the present invention media objects (i.e., content) may be overlaid (e.g., layered or composited) on top of each other. For example, where the window-based application support layering, a movie may be placed in a second layer displayed over an animation in a first layer where both the first and second layers are overlaid on top of the underlying window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen). In this example, the movie in second layer may be positioned directly above the screen area of a television 3D object in the first layer animation resulting in a presentation where a movie plays on the animated television inside an image. Placing objects on top of each other may be done using layers where layering is supported by the window-based host application of the window as just explained and may also be performed through direct overlaying (e.g., compositing) of the content (i.e., objects). When providing multimedia integration or the integration of multiple single media objects (i.e., content), a single layer may be used or multiple layers may be used where the underlying window-based application supports layering.","In one example embodiment of the present invention, the objects (i.e., content) of the overlay plane may be pre-fetched (i.e., retrieved before they are needed) and hidden. In one embodiment of the present invention, the hidden overlay plane may be one or more layers. The hidden overlay plane may be made visible when the user initiate the overlay process for the content. In another embodiment of the present invention, content is only retrieved when the overlay process is triggered by, for example, a user initiated event such as a click event on a hyperlink, banner, or graphical icon or by a non user-initiated event such as a timing event. According to one embodiment of the present invention, the overlay plane may be displayed using a variety of transitions many not available using the intrinsic functionality of the window-based application or not available without less efficient processing such as, for example, continually resizing and displaying a layer to achieve a zoom-in transition effect. The present invention may allow semi-transparent and transparent edges (also known as \u201cfeathered edges\u201d) for the overlay plane both of which are not generally available with conventional window-based application. For example, DHTML layers do not expressly provide semi-transparent or transparent edges for layers.","The present invention may use any conventional or hereto unknown future method of overlaying (i.e., drawing) an object with a window (e.g., compositing). In one embodiment of the present invention, a method for compositing described in co-pending U.S. patent application Ser. No. 09\/620,942 with a filing date of 21 Jul. 2000 and title \u201cMethod and System for Displaying a Composited Image\u201d the entire specification and disclosure of which is expressly incorporated herein by reference may be used. According to this embodiment of the present invention, multiple buffering without a Z-buffer where at least one of the multiple buffers is implemented in addition to the window's host program (i.e., the window's container) may be used to composite the overlay plane (i.e., the layer or object) with the window in order to create a \u201ccomposited image.\u201d The embodiment just described may apply where the window is a Web page in a Web browser host program. In this situation, the embodiment of the present invention may use the two Web browser provided buffers (i.e., one off-screen buffer termed the \u201cback buffer\u201d and an on-screen buffer termed the \u201cfront buffer\u201d) and at least one auxiliary buffer allocated by a viewer plugin-control to compose and draw the composited image.","The present invention provides a method and system for using a hyperlink (also known as a hypertext link), banner, or graphical icon to initiate the overlaying of an object in a window. According to the present invention, overlaying is a drawing technique where objects are overlaid with a background resulting in a final presentation where the objects and background appear to be integrated. Any type of media content may be used in the overlaying according to one embodiment of the present invention. Although the embodiments described herein primarily relate to browser software for the Internet World Wide Web (\u201cWeb\u201d), practitioners skilled in the art will recognize that the present invention is compatible with any window-based software. For example, one embodiment of the present invention may relate to Adobe\u00ae Acrobat\u00ae documents. Another embodiment of the present invention may relate to personal digital assistant (PDA)-based software and\/or electronic book (e-book) software where the window is generally the entire screen. In addition to the diverse scope of software with which the present invention may work, the present invention may be implemented using either the native features of this software or the operating system or may be implemented through the use of plugins or controls (\u201cplugin-controls\u201d) which are software routines designed to add functionality to the host program. For example, one embodiment of the present invention may work with software that allows both dynamic third-party plugin-controls and transparent drawing, including browser software running on public and private non-Internet information networks. In this example, the present invention could be implemented on custom developed browser software using a private Intranet, local area network (LAN), metropolitan area network (MAN), wide area network (WAN), or even a wireless network. In other embodiments, the present invention may operate with software that does not allow third-party plugin-controls or transparent drawing.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["200","210","220","230","230","230","250"]},"Users -are coupled to the Web server network node , plugin-control provider node , and the overlay object provider node  via an information network such as the Internet . According to the embodiment depicted in , Web server network node  is coupled to the Internet  via T1 line while plugin-control provider node  is coupled to the Internet  via T1 line and overlay object network node  is coupled to the Internet  via T1 line . In particular, each user  is coupled to the Internet  via a respective network interface. User utilizes a narrowband network interface  comprising a dial-up connection, while users -utilize broadband network interfaces respectively comprising a cable modem with cable and a T1 line . Corporate user includes three network nodes -that share bandwidth on a local Ethernet network . Although  illustrates three users -, it is to be understood that Web server network node , plugin-control provider node , and overlay object provider node  may serve any arbitrary number of users  limited only by the processing power and bandwidth available.","User illustrates an example of a typical narrowband user connected to the Internet  via a dial-up connection . User utilizes a personal computer and a modem to access Internet Service Provider (ISP) and navigate the Web  via Web browser software (not shown). The Web browser software permits navigation between various Web document servers connected to the Internet , that may include the front end server  at a Web server network node , the front end server  at a plugin-control provider node , and a Web server  at an overlay object provider node . In addition to assisting with navigation between Web servers, the Web browser software interprets the markup language code contained in Web documents (i.e., Web pages) and provides functionality for the rendering of files distributed over the Internet (e.g., through the use of plugins or ActiveX controls).","User illustrates an example of a typical broadband user connected to the Internet  via a broadband cable connection. In particular, user utilizes personal computer to transmit and receive packets of data via cable modem to and from a cable provider ISP where the packets are routed over the Internet  to\/from front end server  at Web server network node , front end server  at plugin-control provider node , and Web server  at overlay object provider node . Similar to user , user may utilize browser software to navigate the Internet  and the Web.","Corporate user includes network nodes -, which are coupled to the Internet  via local Ethernet network , server , T1 line of corporate user . Network nodes -may communicate with Web server network node , plugin-control provider node , and overlay object provider node  via local Ethernet , server , T1 line , Internet , and T1 line \/\/(respectively). Similar to users -, users at network nodes -may utilize browser software to navigate the Internet  and the Web.","The specific nature of users -and the methods through which they are coupled to the Internet  depicted in  are merely exemplary. The present invention is compatible with any type of Internet client and\/or connection whether broadband or narrowband. In general, it is to be understood that users  may connect to the Internet  using any potential medium whether it be a dedicated connection such as a cable modem, T1 line, DSL (\u201cDigital Subscriber Line\u201d), a dial-up POTS (Plain Old Telephone Service) connection or even a wireless connection.","The Web server network node , plugin-control provider node , and overlay object provider node  are all examples of nodes on the Internet  and the Web. Web server network node  includes front end subsystem  and Web content system . Front end subsystem  provides a Graphical User Interface (\u201cGUI\u201d) to allow users  to transmit and receive information with Web server network node . In particular, according to one embodiment, front end subsystem  includes front end server  and GUI database . GUI database  may contain markup language (e.g., HTML or XML) specific information for interpreting and displaying markup language documents such as Web pages. In particular, GUI database  serves markup language documents (i.e., Web pages) to users  coupled to the Web server network node .","The Web server network node  also includes Web content system , which provides a locus for processing the content of documents, such as Web pages, for transmission to users via the Internet . Front end server  is coupled to Web server  at Web content system . According to one embodiment, Web content system's  Web server  includes at least one processor (not shown) to perform processing of the document content such as locating and downloading an object or determining the appropriate plugin-control to play or view a MIME (Multipurpose Internet Mail Extensions) data type. Additionally, Web server  further includes program memory (not shown) for storing instructions for the execution of processes such as drawing a transparent plugin-control on a Web page as well as other processes mentioned herein.","The plugin-control provider node  includes front end subsystem  and Web content system . Front end subsystem  is similar to front end subsystem  and provides an interface to allow users  to transmit and receive information with plugin-control provider node . In the embodiment shown, front end subsystem  includes front end server  and GUI database . GUI database  may contain markup language specific information for interpreting and displaying markup language documents such as Web pages. In particular, GUI database  serves markup language-based documents (i.e., Web pages) to users  coupled to plugin-control provider node . The Web content system  of plugin-control provider node  provides a locus for listing and transmitting plugin-controls to users via the Internet . Front end server  is coupled to Web server  at Web content system . According to one embodiment, Web content system's  Web server  includes at least one processor (not shown) to perform the listing and transmitting of a plugin-control to a user. Additionally, Web server  further includes program memory (not shown) for storing instructions for the execution of processes such as the listing and transmitting of a plugin-control to a user over the Internet .","The overlay object provider node  does not include a front end subsystem in the embodiment shown in  as did the Web server network node  and the plugin-control provider node . Instead, the overlay object provider node  represents an embodiment of a network node where the front end subsystem tasks are handled by the Web content system's  Web server  and are not separated. Web server  provides an interface to allow users  to transmit and receive information with overlay object provider node . The specific information for interpreting and displaying markup language documents such as Web pages are stored in storage device  and the Web server  may use this information to serve markup language documents (i.e., Web pages) to users  connected to overlay object provider node . The overlay object provider node  provides a locus for an object to be incorporated into the markup document (i.e., Web page). For example, a Web page served to a user by the Web server network node  may reference an object contained at the overlay object network node  which the user's local Web browser will find and download based on the markup instructions found in the markup language document (i.e., Web page). According to one embodiment, Web server  includes at least one processor (not shown) to perform the processing of a user request for and the transmitting of an object. Additionally, Web server  may further include program memory (not shown) for storing instructions for the execution of processes such as the processing for and the transmitting of an object to a user over the Internet .","The Web server network node , plugin-control provider node , and overlay object provider node  are each shown as separate network nodes illustrating network nodes that provide a Web page, a plugin-control, or an object on a Web page, respectively, to a user. A practitioner skilled in the art will recognize that any two or all three of these nodes may be combined into one network node and as such the example network topology is not intended to restrict the interpretation of network node configurations.","Further elaborating on the browser software discussed above, in the Internet world, Netscape's Navigator and Netscape's Communicator Web browsers (both are hereinafter referred to as \u201cNavigator\u201d) and Microsoft's Internet Explorer (hereinafter \u201cExplorer\u201d) overwhelmingly dominate the market for Web browsers and as such are the only two Web browsers discussed. However, the present invention may apply to all Web browsers as well as to non-Web network browsers and any window-based application that permits the use of plugin-controls to add increased functionality to the window-based application. The scope of both the Navigator and Explorer browser software is limited out of necessity and therefore they allow third-party software providers to extend the functionality of their browser software. This reliance on third-party software provider extensions to browser functionality arise from the very complex nature of the browser programs themselves.","The embodiment described in the network topology in  where the present invention makes use of a plugin-control is only one exemplary embodiment. The present invention, as previously discussed, may also be used with non-browser window-based software such as Adobe\u00ae Acrobat\u00ae and screen-based PDA or e-book software applications. Also as previously stated, the present invention in various embodiments may use or may not use plugin-controls. For these reasons,  should neither be construed to limit the present invention to being information network-based or browser-based nor should the present invention be construed as depending on a plugin-control, though in one or more embodiments of the present invention a plugin-control may be used.","Plugins-Controls","It is often very difficult and time-consuming to write a complex software application that can handle many different types of data. Additionally, it is almost impossible to cover all foreseeable data types. Therefore, many complex software applications are written to perform a limited task well with the option of extending the software's functionality through external applications. The main application uses the external applications, typically called plugins or controls (hereinafter plugin-control), to add to or expand on the functionality that the main application contains.","In order for the two applications to work together in an integrated manner, they should know about each other and be able to communicate with each other. Therefore, a protocol and a communication arrangement between the applications should exist. For example, a protocol using standard Unix pipes to communicate is feasible. The plugin-control can read commands from stdin and print responses to stdout. Like other categories of software, Web browsers have their own specific protocols to facilitate this communication. Navigator uses its plugin Application Programming Interface (API) while Explorer uses Object Linking and Embedding (OLE) objects implemented through ActiveX controls to facilitate communication between the main and external plugin-control applications. The use of external plugin-controls is transparent to the user, also allowing the plugin-controls to be nested with one plugin-control calling other plugin-controls. Navigator plugins and Explorer ActiveX controls accomplish the same tasks with different tools. One example embodiment of the present invention includes one or more Navigator plugins while another example embodiment of the present invention includes one or more ActiveX controls with both embodiments implementing a novel method of initiating the overlaying of additional media content with a document (i.e., a window) such as a Web page. The differences between the Navigator plugin and ActiveX plugin control embodiments of the present invention are generally not material to the discussion contained herein and therefore the term plugin-control is used in the example embodiment to refer to both unless further specified. Additionally, because the plugin-control used by an example embodiment of the present invention allows for additional data (i.e., objects) to be overlaid or viewed with the Web page, the plugin-control may be referred to as the viewer plugin-control for the sake of further clarity.","Even though the example embodiment uses a viewer plugin-control, the present invention does not require the use of a plugin-control and may be implemented without using a plugin-control. Additionally, the example embodiment's use of either a Navigator plugin or an ActiveX control as the viewer plugin-control is, in no way intended to limit the scope of the patent to these two embodiments of a viewer plugin-control. The present invention relates to the use of a hyperlink, banner, or graphical icon to initiate the overlaying of an object with the currently viewed document (i.e., the document containing the hyperlink, banner, or graphical icon) of any host and, though Web browsers are the focus of the exemplary embodiment, the present invention may be used with a wide variety of software applications to include PDA-based software and e-book software.","Viewer Plugin-Control Registration\/Installation","A window-based application such as a Web browser may search for already installed plugin-controls on program startup and may register those plugin-controls. This registration process may find a viewer plugin-control installed for the window-based application and associated with the data types (e.g., MIME types) the viewer plugin-control supports. For example, the window-based application may search a registry of installed plugin-controls or may search a specific directory in order to find the already installed viewer plugin-control. The data types associated with the viewer plugin-control are determined by the viewer plugin-control file and user-specified browser preferences. For example, the viewer plugin-control file may specify that the viewer plugin-control handles \u201capplication\/metastream\u201d and \u201capplication\/x-mtx\u201d MIME types. If the viewer plugin-control and another plugin-control are both associated with the same data type, the window-based application may resolve this conflict by determining the appropriate plugin-control for the data type based on some resolution means. For example, if a conflict exists, a user specified preference may determine which plugin-control is used. In another example, if a conflict exists, the window-based application may associate the last plugin-control installed (i.e., the most recent of the installed plugin-controls that are in conflict over the data type) with the data type. If the viewer plugin-control is not installed, and, therefore, not registered, the data types associated with the absent viewer plugin-control may not be recognized by the window-based application (e.g., Web browser).","Instantiation of the Viewer Plugin-Control","Instantiation is a conventional term describing the process whereby a particular instance of a desired object, such as the viewer plugin-control, is created. For example, the creation of an instance of the desired object may result in a copy of the object being loaded into local memory. According to one embodiment of the present invention, instantiation refers to the creation of a particular instance of the viewer plugin-control object. Instantiation may, according to various embodiments of the present invention, be initiated in one of a number of ways including: on document load, on mouse click, or during the viewer content downloading process. In one embodiment of the present invention, the instantiation of the viewer plugin-control occurs when the markup language document (e.g., Web page) calling for the use of the plugin-control is interpreted and loaded into memory. According to this embodiment, each document (e.g., Web page) that uses the viewer plugin-control will have their own instance of the viewer plugin-control in memory. For example, markup language code within the document may initiate the viewer plugin-control instantiation by calling a script function such as the ie_detect function described in  below. In another embodiment of the present invention, instantiation may occur on mouse click or click through when the user clicks on the hyperlink, banner, or graphical. For example, when a user clicks on a hyperlink, banner, or graphical icon, the markup language source code associated with the link may result in the instantiation of the viewer plugin-control object. Additionally, instantiation may occur during the viewer content downloading process. For example, a click or rollover event on a hyperlink, banner, or graphical icon initiating the display of the overlay plane (containing one or more objects to be overlaid) with the window may result in the downloading of viewer content information. The downloading of viewer content may in itself trigger a check to determine if an instance of the viewer plugin-control already exists and, if not, result in an attempt at instantiating the viewer plugin-control object as shown in  (discussed below).","The document may contain specific markup language commands the cause the instantiation of the viewer plugin-control such as the <embed> and <object> HTML tags. These two HTML tags may be used to embed an instance of the viewer plugin-control in a Web page, layer, or section. Sections are part of Dynamic HTML and require the use an additional HTML tag <layer> to create. The standard HTML <embed> tag allows additional functions and features to be embedded in a Web page by specifying them within the <embed> <\/embed> tags. The HTML <embed> tag is cross-platform and cross-browser compatible meaning that it can be interpreted by most HTML browsers running on most operating systems. The HTML <object> tag is specific to Internet Explorer running on the Microsoft Windows operating system. In particular, the HTML <object> tag allows additional ActiveX control functionality to be embedded in a Web page. ActiveX controls only work with Internet Explorer running on the Windows operating system, therefore, the HTML <object> tag does not provide cross-platform or cross-browser support unless used with an alternate <embed> tag embedded in the <object> tag. For example, the following use of HTML tags on a Web page allows both Explorer and Navigator to call the viewer plugin-control. <object classid=\u201cclsid:A1CCFAC6-E092-11d1-B0F1-00600832DB99\u201d codebase=\u201chttp:\/\/www.metacreations.com\/metastream\/viewer\/win\/metastream.cab#Version=2,2,0,0\u201d width=\u201c405\u201d height=\u201c352\u201d>","<param name=\u201cSource\u201d value=\u201ctest.mts\u201d>","<embed Src=\u201ctest.mts\u201d Type=\u201capplication\/metastream\u201d Width=\u201c405\u201d Height=\u201c352\u201d> <\/embed>","<\/object>","Once the viewer plugin-control object has been successfully created (i.e., instantiated), no new instantiation (i.e., re-instantiation) may be required if the overlay plane is hidden from view and then later re-shown. For example, according to one embodiment of the present invention, if an animation is overlaid with a Web page and then the animation is hidden because of some new user event (e.g., a click event on another hyperlink, banner, or graphical icon) resulting in the animation disappearing (i.e., the layer or overlay plane becoming hidden), making the overlay plane (or layer) visible again (by clicking on a hyperlink, banner, or icon that initiates the overlaying process for the layer) does not require the re-instantiation of the viewer plugin-control.","The instance of the viewer plugin-control may be deactivated when a triggering event such as the closing of the overlaid object, the document (i.e., Web page), or the object window (i.e., the overlay plane) occurs. For example, when the user exits from the currently displayed document (i.e., Web page), the instance of the viewer plugin-control may be deactivated and, thus, a new instance of the viewer plugin-control may be needed if the user returns to the same Web page later.","Native Software Features","In an alternate embodiment of the present invention, the present invention is implemented using the native features of the host software and\/or operating and not by using a plugin-control. For example, in one embodiment of the present invention using a Web browser, the layer feature of DHTML may be used to implement an overlay plane (the use of the overlay plane is discussed in more detail below). Other features of the host software (e.g., a Web browser, PDA-based software, or e-book software) and\/or operating system may also be used in other embodiments of the present invention rather than using a plugin-control.","Initiating the Overlaying Process","The process of overlaying one or more objects with a window of a window-based application such as a Web browser is initiated according to one embodiment of the present invention either by a user behavior (e.g., clicking on a hyperlink, a banner, or an icon in a document) or by a non-user event (e.g., a timer or timing event). For example, a user behavior may include a click event where the user clicks on a hyperlink, a banner, an icon, or another \u201chot spot\u201d (an area on the document where a click or other event is defined to trigger an action). Another example of a user behavior is a rollover event where the user moves the cursor over a hyperlink, a banner, an icon, or other \u201chot spot\u201d in the document. A user behavior may also, in another example, include spending a certain amount of time doing or not doing something such as spending a certain amount of time viewing a document (e.g., viewing a Web page). In this example, the overlaying process may be initiated after the user views the document for a specified period time. A user behavior may also, in another example, include an action such as initiating the display of a document (e.g., a Web page) or initiating a program. In this example, the user action may also initiate the overlaying process.","A non-user event may include, for example, any non-user initiated event such as window-based application initiated event or an operating system initiated event. In one embodiment of the present, a non-user event may include a viewer plugin-control initiated event. A non-user event may, for example, include any sort of time-based event such as a specified time-period expiring after the end of animation or a specified time-period expiring after a document stops loading. For example, 10 seconds after an animation is displayed in the window, a timing event may be generated initiating the overlaying process. In another example, 10 seconds after a window or document (e.g., a Web page or Adobe\u00ae Acrobat\u00ae document) is loaded, a timing event may be generated initiating the overlaying process. Other non-user events may include, among others, a request to show an object, a request for information from a database, or a request to load a document. For example, a window or document (through a server such as a Web server) may initiate a request to display an object without any user intervention such as in the case of rotating banners. In this example, user behavior may not affect the request for new banners as part of the rotating banner display. In another example, a document or window (through a server such as a Web server) may request, independent of user behavior, information from a database and, thus, initiate the overlaying process. In this example, the information may be requested for a scrolling text display such as stock ticker symbols and prices that are displayed in the document. In another example, a first document may initiate a request for a second document independent of the user behavior and this request for a second document or the loading of the second document may initiate the overlaying process. In this example, a user navigating to a Web page associated with a first URL may be moved by the first Web page to another Web page associated with a second URL where either the request for the second Web page or the loading of the second Web page may initiate the overlaying process. Other non-user events may be based on user attributes and not user behavior. For example, a particular user IP address may initiate the overlaying process.","The initiation of the overlaying process refers to initiating the overlaying process for the display of one particular overlay plane. The overlaying process may be generated separately for the display of each overlay plane. According to one embodiment of the present invention, the process of overlaying one overlay plane may be broken down into several separate steps each of which may need to be separately initiated. For example, an overlay plane containing references to the objects (i.e., content) in the overlay plane may be generated but kept hidden from the user when a document or window is first loaded into memory and displayed. Continuing in this example, when a user clicks on a hyperlink, the overlay plane is made visible and the object references are used to begin \u201cstreaming\u201d (copying) the object data (i.e., content) to the overlay plane. In this example, the overlaying process is broken down into two steps (i.e., 1) creating a hidden overlay plane, and 2) making the overlay plane visible and streaming the object data) each of which is separately initiated by a different event (document loading and a user click event, respectively). (discussed in more detail below) shows one embodiment of the present invention where the document is a Web page containing several hyperlinks such as \u201cPalm-powered\u201d . In , when the Web page is loaded, a hidden overlay plane (in a DHTML layer as discussed later in this specification) may be created. When the user clicks on the \u201cPalm-powered\u201d hyperlink in , the overlay plane (in the DHTML layer) is overlaid with the Web page as is shown in . The click event may be a more common user event initiating the overlaying process (or step in the overlaying process) and is therefore discussed in additional detail below.","A click event can occur on a number of objects in a window or document (e.g., a Web page). For example, a click event on a hyperlink (i.e., text associated with a hyperlink) which may appear as highlighted text, such as \u201chyperlink as text\u201d, may be the initiating action for the overlaying process. In another embodiment of the present invention, the overlaying process may be initiated by a click event on a banner displayed on the window. For example, a banner may be any size banner advertisement including the size of the example banner shown below.",{"@attributes":{"id":"p-0058","num":"0057"},"chemistry":{"@attributes":{"id":"CHEM-US-00001","num":"00001"},"img":{"@attributes":{"id":"EMI-C00001","he":"9.48mm","wi":"65.28mm","file":"US07559034-20090707-C00001.TIF","alt":"embedded image","img-content":"chem","img-format":"tif"}}},"br":{},"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00001","he":"3.13mm","wi":"2.46mm","file":"US07559034-20090707-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}},"figref":["FIG. 6","FIG. 6"]},"The present invention may use any conventional or hereto unknown future method of overlaying (i.e., drawing) an object with a window or document (e.g., compositing). In one embodiment of the present invention, a method for compositing described in co-pending U.S. patent application Ser. No. 09\/620,942 with a filing date of 21 Jul. 2000 and title \u201cMethod and System for Displaying a Composited Image\u201d the entire specification and disclosure of which is expressly incorporated herein by reference may be used. According to this embodiment of the present invention, multiple buffering without a Z-buffer where at least one of the multiple buffers is implemented in addition to the window's host program (i.e., the window's container) may be used to composite the overlay plane (i.e., the layer or object) with the window in order to create a \u201ccomposited image.\u201d The embodiment just described may apply where the window is a Web page in a Web browser host program. In this situation, the embodiment of the present invention may use two Web browser provided buffers (i.e., one off-screen buffer termed the \u201cback buffer\u201d and an on-screen buffer termed the \u201cfront buffer\u201d) and at least one auxiliary buffer allocated by a plugin-control to compose and draw the composited image.","Determine if Viewer is Present","The overlaying process may begin with either an attempt to instantiate the viewer plugin-control, a determination of whether an instance of the viewer plugin-control exists (and is, therefore, available), or both according to one embodiment of the present invention where a viewer plugin-control is used. If an instance of the viewer plugin-control can not be instantiated and is not available, the present invention may implement similar functionality using alternate means. In one embodiment of the present invention, an image such as a GIF or JPEG of the object(s) to be overlaid (i.e., the overlay plane) may be placed in a DHTML layer and the layer integrated with the window using the window-based application layering features. For example, an alternate GIF of the object plane may be available and can be placed in a DHTML layer of Internet Explorer where Internet Explorer handles the drawing of the layer with the Web page (i.e., browser window). In other embodiments of the present invention, a DHTML layer may be used for the present invention rather than for the display of an image when a viewer plugin-control can not be instantiated or is not available. is a screen image (i.e., a screen shot) of an overlay plane containing an MP3 player overlaid with a Web page using a viewer plugin-control according to one embodiment of the present invention. In an alternative embodiment where an instance of the viewer plugin-control can not be instantiated and is, therefore, not available and using as an example, an alternative and less advantageous effect may be achieved by having a GIF image of the MP3 player, placing the image in a DHTML layer, and having the Web browser draw the layer with the Web page. This alternative embodiment may be advantageous because it uses a lower quality image (e.g., a GIF image) rather than the possible innovative methods for drawing available to the viewer-plugin control embodiment of the present invention. In one example, the innovative drawing techniques specified in co-pending U.S. patent application Ser. No. 09\/620,942 with a filing date of 21 Jul. 2000 and title \u201cMethod and System for Displaying a Composited Image\u201d the entire specification and disclosure of which is expressly incorporated herein by reference may be used.","As previously stated, according to one embodiment of the present invention, the overlaying process may begin with either an attempt to instantiate the viewer plugin-control, a determination of whether an instance of the viewer plugin-control exists (and is, therefore, available), or both. According to one embodiment of the present invention, a script such as a Java or Visual Basic script, program, file, or module may be used to determine if the viewer plugin-control is present.  is an example Visual Basic script that detects whether an ActiveX control exemplary embodiment of the present invention viewer plugin-in control already exists. In the example Visual Basic script according to one embodiment of the present invention shown in , the function ie_detect returns a value indicating whether a particular instance of an ActiveX viewer plugin-control exists. The ie_detect function begins by setting its return value to a default of 2 (), highlighted by arrow  on , indicating that the script is not able to instantiate the viewer plugin-control according to the version of the scripting engine available to the end-user . The ie_detect function then determines  whether the version of the Visual Basic scripting engine being used supports the viewer plugin-control instantiation by examining the version of the Visual Basic scripting engine available to the end-user . For example, the CreateObject method (i.e., function) , used by the embodiment of the present invention shown in , is supported by VBScript (i.e., Visual Basic Scripting) version 2 and later. Therefore, for example, the ie_detect function determines whether the Visual Basic Scripting engine version is 2 or greater . If the scripting engine does not support CreateObject  for object instantiation (i.e., the scripting has a VBScript version less than 2), ie_detect will return the value of 2 previously set as the default on line  in . If the scripting engine does support CreateObject, the value returned by the ie_detect function is changed to a new default value of 1 (), highlighted by arrow , indicating that the viewer plugin-control object was not successfully instantiated. The CreateObject method (i.e., function)  is used to attempt the instantiation of the viewer plugin-control as indicated by arrow . The success of this instantiation is determined by testing for the existence of the new viewer plugin-control object  as shown by arrow . If the new viewer plugin-control object exists (i.e., the instantiation was successful), the ie_detect return value is set to 0 (i.e., zero)  as shown by arrow , indicating that an instance of the viewer plugin-control exists. If the new viewer plugin-control does not exist (i.e., was not successfully instantiated), the previously set (see arrow ) value of 1 () is returned by the ie_detect function.","Object (Content) to be Overlaid","The content to be overlaid according to the present invention may be any type of media object, such as text, animation, two-dimensional (2D) or three-dimensional (3D) graphics, movies, sound, and pictures. Data for the object may be contained in one or more files which, according to one embodiment of the present invention, may be accessed by a viewer plugin-control. In one embodiment of the present invention the object data is stored in two files where the first file contains the formatting (e.g., location and other layout) information for the data, while the second file contains the actual content data. The formatting data (i.e., the first file) may be stored in a markup language based document such as an XML or HTML file. The formatting information is used by the present invention to properly display the actual content data. The data file (e.g. the second file) may be a binary or compressed binary file and may contain the content data. Other embodiments of the present may use a different number of files each containing exclusively or in combination formatting and actual content data for the media content to be overlaid.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 4","b":["412","415","418","412","421","424","460","433","442","463","478"]},"According to one embodiment of the present invention, if for some reason the viewer plugin-control is not correctly instantiated, an alternate image file may be specified and displayed as a backup means for overlaying information with the window. For example, a source object such as an image in JPEG or GIF format may be substituted for the viewer plugin-control content where no available instance of the viewer plugin-control exists. This source object may offer considerably less than the viewer plugin-control in terms of appearance, content, animation, and effects but, however, it may solve the potential instantiation problem and it avoids distracting the user with error messages or by creating additional delays while another attempt is made to generate a new instance of the viewer plugin-control.","According to another embodiment of the present invention, the content may be displayed using features inherent in the window-based software or the operating such as, for example, DHTML layers. In this embodiment, formatting and content data may also be stored in one or more files as previously discussed. Problems with instantiation are not generally a concern with this embodiment (unless of course it is related to the inherent software feature relied upon) and, therefore, a backup means for alternate content display may not be required.","Multimedia Integration","In one embodiment of the present invention, media objects may be overlaid on top of each other. For example, a first object, an animation, containing a television screen may be overlaid on top of a Web page while a second object, a movie, may be overlaid on top of the animation so that the movie is running on the screen of the television in the animation.  is a screen image (i.e., a screen shot) of a Web browser with overlaid multimedia integration according to one embodiment of the present invention. In , the Web browser displays a Web page  which has a scene (i.e., an overlay plane) overlaid above the text of the page. This scene consists of an iPIX\u00ae (Internet Pictures Corporation) 360\u00b0 panoramic image converted into an image  usable by the present invention. The scene may contain 3D images such as a dresser  that are part of the original iPIX\u00ae image. The scene may also contain numerous forms of additional content such as 3D images shown in  by the inclusion of a 3D image of a television  which has been added to the converted iPIX\u00ae picture. Another example of additional content is video content  playing into some texture area which may consist of one or more polygons such as the screen area  of the television . In one embodiment of the present invention, iPIX\u00ae and QuickTime VR\u2122 panoramas are converted (either at authoring time or at display time) by the viewer plugin-control into a viewer plugin-control format panorama images for use in the overlaying process. The edges of the overlay plane (i.e., the scene) shown in  are semi-transparent to showcase that the overlay plane is not rendered in place of the underlying text as is conventionally done when an image is placed on a window (such as a Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software screen, or e-book screen) but instead, the overlay plane is overlaid on top of the text. The use of semitransparent and transparent \u201csoft edges\u201d (which may also be termed \u201cfeathered edges\u201d) is another unique feature of the present invention.","The overlaying of the scene (i.e., overlay plane) may either be accomplished without using any inherent feature of the window-based application (e.g., a Web browser) or may use window-based application features such as the support of DHTML (Dynamic HTML) layers regardless of whether the embodiment of the present invention uses a viewer plugin-control. This overlaying of objects on top of each other may be done using the layering feature of the window-based application (e.g., a Web browser) where layering is specifically provided for. Where layering is specifically supported by the window-based application, the overlaying of objects may be performed in a single layer or in multiple layers which are then integrated with the window (e.g., a Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen). Alternatively, in one embodiment of the present invention, whether or not layers are supported by the window-based application and whether or not the layering feature of the window-based application is used, this overlaying of objects may be performed directly with the underlying window as described in co-pending U.S. patent application Ser. No. 09\/620,942 with a filing date of 21 Jul. 2000 and title \u201cMethod and System for Displaying a Composited Image\u201d the entire specification and disclosure of which is expressly incorporated herein by reference. In another embodiment of the present invention, alternative methods for compositing, overlaying, or layering may also be used either in conjunction with the layering feature of the window-based application or in place of a layering feature of the window-based application. These alternative methods may be used in place of a layering feature where the window-based application either does or does not support layering.","The integration of different media by overlaying one media object on another is both useful and novel according to present invention. According to one embodiment of the present invention, any type of media object, such as text, animation, 2D or 3D graphics, movies (with or without audio), audio, and pictures, may be overlaid with any other media type in the same media space. For example, a picture may be overlaid on a 3D graphics image to generate a new scene that is in turn overlaid on a window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen). Other conventional technologies such as transparent ActiveX controls may to some degree accomplish a part of what the present invention accomplishes, however, these conventional technologies rely on the underlying window-based program (e.g., Web browser) features and are therefore restricted to the processing speed and cross-platform compatibility of the underlying program. In one embodiment, the present invention does not rely on the features of the underlying window-based program and may therefore optimize the overlaying process (i.e., optimize drawing speed) and achieve greater cross-platform compatibility with other window-based applications. For example, co-pending U.S. patent application Ser. No. 09\/620,942 with a filing date of 21 Jul. 2000 and title \u201cMethod and System for Displaying a Composited Image\u201d describes one embodiment of the present invention where drawing may be done outside the window-based application to speed up the drawing of the overlay plane (termed \u201ccompositing plane\u201d in U.S. patent application Ser. No. 09\/620,942).","In one embodiment of the present invention, the overlay plane is itself interactive and may contain its own hot spots, hyperlinks, banners, and graphical icons that may in turn initiate a second level overlaying process whereby a second overlay plane is overlaid on the first overlay plane. For example, in , when the overlay plane is first displayed, the screen  of the television  may be a blank \u201chot spot\u201d that when clicked on by a user initiates the overlaying of a video, as a second overlay plane, into the texture area of the screen . In one embodiment of the present invention, any number of overlay planes levels may be used to achieve the Web page operator's or owner's desired result. In another example, an overlay plane may contain particular text that is used to cause by, for example, a user event such as a mouse rollover on the particular text, another, second overlay plane to appear with a text annotation to the particular text contained in the first overlay plane. In one embodiment of the present invention, the interactive nature of the overlay plane and the multiple levels of overlay plane usage is independent of any multi-layering functionality made available by the window-based application for whose window the overlaying is being performed.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIGS. 11","FIGS. 11","FIGS. 11","FIG. 10","FIG. 11","FIG. 11","FIG. 11","FIGS. 11"],"i":["a","b ","a","b ","a","b ","a","b ","a","b","f ","a ","a ","b ","b","b ","b ","a","b "],"b":["11","11","1100","1100","1101","1101","11","1101","1101","1101","11"]},"Layering and Layers","According to one embodiment of the present invention, the object(s) to be overlaid with the window may be arranged in an overlay plane that is contained in one or more layers of the window-based application (e.g., a DHTML Web browser layer) wherein the use of layers is a feature provided for by the window-based application or operating system. In one embodiment of the present invention, this layer or layers may be established when the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) is first loaded by the window-based application and the window setup information (e.g., the window's\/document's markup language commands) is interpreted. According to this embodiment, the layer may be hidden until some user behavior or non-user event occurs (e.g., a user clicking on a hyperlink, banner, or graphic icon) that initiates the overlaying of the layer with the window. At this time, the layer becomes visible and is overlaid with the window. In one embodiment of the present invention where a hidden layer is used, the data for the object(s) in the overlay plane may be copied (\u201cstreamed\u201d) to the layer when the hidden layer is first created. In this embodiment, the objects are \u201cpre-fetched\u201d meaning they have been retrieved in advance of when they may be needed. In another embodiment of the present invention where a hidden layer is used, references for the object(s) in the overlay plane may be included in the layer at the time the hidden layer is created and the actually streaming of the object data may not occur until some user behavior or non-user event initiates the overlaying of the layer with the window.","In another embodiment of the present invention, the layer may be generated after some user behavior or non-user event occurs initiating the overlaying process. In this embodiment, the overlay plane and layer may be generated together, the streaming of the object data may occur, and the layer (containing the overlay plane) may be made visible to the user. In an alternative embodiment of the present invention, the viewer plugin-control may generate an overlay plane outside of the window-based application when a window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) is first loaded by the window-based application and the window set information (e.g., the markup language commands) is interpreted. For example, the loading of the window may generate a process (separate from the window-based application process(es)) that creates the overlay plane in memory and may store the overlay plane in a storage device (or keep the overlay plane in memory) until some behavior or event occurs triggers the overlaying process and calls for this information in order to overlay it with the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) of the window-based application (e.g., the Web browser).",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 5","FIG. 10","FIG. 4","FIG. 4","FIG. 4","FIG. 5"],"b":["506","534","509","531","519","463","472"],"i":"f "},"The second section of the example HTML markup language code shown in  displays the event handling that makes the hidden layer visible to a user. The OnMouseOver event  allows a rollover effect to be specified for the hyperlink, banner, or graphic image (e.g., a button) that initiates the overlaying process. The OnMouseOut event  allows another effect to be specified (in this case the restoration of the original state) once the mouse is no longer over the hyperlink, banner, or graphic image that initiates the overlaying process. The OnClick event causes, according to one embodiment of the present invention, the hidden layer to become visible and overlaid with the window. Other events (not shown) may cause the visible layer to become hidden again.","In another embodiment of the present invention, an overlay play may be created in a layer that is made visible on the initial loading and display of the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen). In this embodiment, a user event or non-user event may cause the layer to become hidden. This alternate embodiment is the opposite of previously discussed embodiments where the overlay plane is added to the window. In this embodiment of the present invention, the overlay plane contains information that is not added but is removed due to some user or non-user event.","The use of layers provides an advantageous embodiment of the present invention because a layer can be used to place additional content on top of the window content without necessitating the recompilation of the information. This provides a rapid method of overlaying the layer contents with the window contents. Additionally, multi-layering can be used to provide enhanced overlaying of content. For example, according to one embodiment of the present invention, the first layer created for the viewer plugin-control may include a link or refer to another viewer plugin-control object which may then be displayed in a separate layer. Multi-layering may be used, inter alia, for vector animation, panoramic perspectives, moving an object in a virtual reality environment, 3D object animation without integrating the 3D object with any other media type, and for displaying a watermark within the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen).","Click Through Layers","One problem with DHTML layers as currently employed in Web browsers is that it usually is not possible to click through the layer to objects and text behind or underneath the layer. One embodiment of the present invention solves this problem by implementing a script that is cross-platform compatible and allows a user the ability to access text and other objects underneath the layer. Another embodiment of the present invention, implements a script that is specific to one or more window-based applications (e.g., Web browsers) but is not generally cross-platform compatible. Conventional methods of allowing a user to click through a layer have been platform-specific, such as, for example, Comet Cursor\u00ae's implementation, which uses platform specific scripts to achieve this result. The present invention may implement a script that may be cross-platform compatible or platform-specific and in either case, passes a click or other event in the layer to the window-based application. This click or event may then be acted upon by the window-based application creating the perception of transparency between the layer and the underlying window. This click through feature may also be used to implement watermark images and text using DHTML layering.","Transitions","The overlaying of one or more objects with a window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) may result in a significant alteration to the presentation viewed by a user. In order to provide a smooth and graceful transition from the presentation of the window prior to the integration of the overlay plane to the presentation of the overlay plane with the window, transitions may be used in one embodiment of the present invention to improve the overall presentation to the user. Conventional DHTML layers allow only a very limited implementation of transitions. For example, simple positional transitions such as a simple wipe (e.g., wipe up, wipe down, wipe left, and wipe right) may be implemented using conventional DHTML by moving the layer on the window of a Web browser. In another example, simple zoom-in and zoom-out transitions may be implemented using conventional DHTML by resizing the layer to achieve the zooming effect. In one embodiment of the present invention, transitions may be implemented within a layer without the need to move or resize the layer to achieve the transition. Using the simple DHTML transitions as an example, the present invention, according to one embodiment, may implement a wipe transition within the layer without requiring the layer to move on the window. Additionally, the present invention, also according to this embodiment, may perform a zoom transition without requiring the resizing of the layer or non-layer displayed overlay plane.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIGS. 8","FIGS. 8","FIGS. 8","FIG. 8","FIGS. 8","FIG. 8","FIGS. 8"],"i":["a","e ","a","e ","a","e ","a","e","a","e","a","e","b","e ","a","b","d ","b","d","e ","e","a","e "],"b":["8","8","800","800","801","801","8","801","801","802","802","802","802","8","802","8"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIGS. 9","FIGS. 9","FIGS. 9","FIGS. 9","FIG. 9","FIGS. 9","FIG. 9","FIGS. 9","FIGS. 9"],"i":["a","g ","a","g ","a","g ","a","g","a","g","a","g","b","g ","b","g ","b","g","a","b","e ","b","e","g ","g","a","g","a","g "],"b":["9","9","900","900","901","901","9","901","901","902","902","9","902","902","902","902","9","902","9","9"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIGS. 10","FIGS. 10","FIGS. 10","FIG. 10","FIGS. 10","FIG. 10","FIGS. 10","FIGS. 10","FIGS. 10"],"i":["a","f ","a","f ","a","f ","a","f","a","f","a","f","b","f ","a","b","e ","b","e","f ","f ","a","f ","b ","f ","b ","f ","f ","b ","a","f "],"b":["10","10","1000","1000","1001","1001","10","1001","1001","1002","1002","1002","1002","10","1002","10","10","10","10","10","10","10"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 12","FIG. 12","FIG. 12","FIG. 12"],"b":["1200","1201","1201","1202","1203"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIGS. 13","FIGS. 13","FIGS. 13","FIG. 13","FIG. 13","FIGS. 13"],"i":["a","f ","a","f ","a","f ","a","f","a","f","a","f","b","e ","b","f ","a","b","e ","b","e ","f ","f ","a","f "],"b":["13","13","1300","1300","1301","1301","13","1301","1301","1302","1302","1303","1303","1302","1302","1303","1303","1302","13"]},"According to one embodiment of the present invention, as previously stated, all the transitions discussed above may also be performed where the overlay plane is displayed without the use of a window-based application provided layer feature (e.g., DHTML layers). Another embodiment of the present invention implements the above transitions without using a separate plugin-control. As illustrated in , in one embodiment of the present invention, the overlay plane and the transitions may use soft edges where the boundary of the overlay plane is not clearly delineated. Soft edges is a feature that is not available conventionally in DHTML layers.","User Perspective","In one embodiment of the present invention as perceived from the user's perspective, the user will view a window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) containing at least one of a hyperlink, a banner, and\/or a graphical icon. In other respects, the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) may appear for all manner and purposes like any other similar window. For example, if the window is a Web page containing a news or press release, the Web page will appear as any other news or press release Web page may appear. This Web page, according to one embodiment of the present invention, may include at least one hyperlink, banner, and\/or graphical icon all of which may be found on Web pages not involved with the present invention. From the user's perspective, nothing will appear unusual until some event either user initiated, such as a user initiated click event, or non-user initiated, such as timing event, triggers the overlaying process. For example, a window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) will not appear unusual until the user clicks on a hyperlink, banner, or graphical icon related to the present invention. The result of the triggered overlaying process may be the appearance of additional content overlaid on the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen). For example, a user clicking on a Web page banner for an Internet bookseller may cause an advertisement in the form of a transparent animation to be overlaid on a portion of the Web page. In this example according to one embodiment of the present invention, the user may click on items on the Web page through the transparent portion of the advertisement animation which may result in the advertisement (i.e., the animation) being hidden from the user's view and the click event on the Web page being processed for the user. In this situation, according to one embodiment of the present invention, the advertisement animation is still present but hidden from the user so that if the user again initiates the overlaying process for this advertisement, the advertisement animation may only need to be made visible to the user instead of re-initiating the overlaying process anew. In another example, a user clicking on a hyperlink for a personal digital assistant may cause a fully rotatable and scalable 3D image of the PDA to appear overlaid with the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen). According to one embodiment of the present invention, the user may execute the same initiating function, such as clicking on the same hyperlink, to cancel the additionally overlaid content. For example, after the 3D image of the PDA is overlaid with the user window, the user may again click on the same hyperlink with a result that the 3D image disappears from the window (i.e., is no longer overlaid with the window).",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIGS. 8","FIGS. 8","FIGS. 9","FIGS. 10","FIG. 12","FIGS. 13","FIGS. 10","FIGS. 11"],"i":["a","a","a","a ","a","e ","a","g ","a","f ","a","f ","a","f ","a","b"],"b":["9","10","13","8","9","10","13","10","11"]},"Reverse Perspective","The previous embodiments of the present invention provided examples of additional content added to the window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) of a window-based application (e.g., Web browser, Adobe\u00ae Acrobat\u00ae, PDA-based software, or e-book). The reverse is also possible. In one embodiment of the present invention, the initiation of the overlaying process may result in the removal of content from a window. For example, the window may initially be displayed with information contained in an overlay plane which, in one embodiment of the present invention, may be contained in a DHTML layer. When a user or non-user initiated event occurs triggering the overlaying process, the information contained in the overlay plane is either removed from the window display or hidden from the user (i.e., made non-visible). This is an alternative method of implementing the present invention.","Enhanced Content & Advertising Display","As previously mentioned, one problem with displaying content on a PDA, e-book, telephone display, and other similar displays as well as with conventional advertising on either the Web or general computer-based advertising is the limited amount of space available for the display of information (e.g., schematics, technical illustrations, banners, etc.) in a window, display screen, or Web page. This may necessitate the use of a hyperlink or other mechanism to move the user from the currently displayed window or screen (or portion thereof) to another separate window or section of a window (e.g., an advertisement page in an Adobe\u00ae Acrobat\u00ae document) to display additional information such as the full advertising content to be conveyed to the user. Additionally, Web site operators and owners as well as software providers are reluctant to provide key \u201creal estate\u201d (locations) on a Web page, in a window, or on a display screen to advertisers because it often detracts from their own content and reduces the appeal of their Web page or software to users. The present invention may solve both of these problems by providing an innovative method for providing expanded and reusable display space (\u201creal estate\u201d) within a window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen). The ability to display an overlay plane on top of any area within a window (e.g., Web page, Adobe\u00ae Acrobat\u00ae document, PDA-based software window, or e-book screen) allows the present invention to display expanded content and\/or a full-size advertisement that may incorporate sufficient additional information without requiring a hyperlink to another separate window. The use of an overlay plane in the manner described above also allows the present invention to reuse window space (the \u201creal estate\u201d of the window) for multiple advertisements and displays of content thereby enhancing a user's experience by avoiding the sending of the user (e.g., via hyperlinks) to other windows (e.g., Web pages, Adobe\u00ae Acrobat\u00ae documents, PDA-based software windows, or e-book screens) in order to obtain additional information whether that additional information is additional content or advertisements. The reuse of window space may also allow Web page operators and owners and software providers to sell more advertising on a window thereby possibly improving their revenues, for example, in the operation of their Web site and Web pages. Additionally, the reuse of window space allows content providers (including advertisers) to present their content in an innovative and attention-grabbing manner that may also greatly increase the content space available for use.","The reuse of window space may occur regardless of the type of overlaying performed between the overlay plane and the window according to one embodiment of the present invention. In other words, the display space used by an overlay plane may be reused regardless of the method by which the overlay plane is overlaid with the window. For example, the method of overlaying the overlay plane with a window may include using a blending technique (blend compositing), a replacement technique (pixel replacement-overwriting), or a transparent drawing technique (compositing with transparent pixels in the overlay plane)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 8","i":["a","e "],"b":"8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 9","i":["a","g "],"b":"9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 10","i":["a","f "],"b":"10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 11","i":["a","b "],"b":"11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 13","i":["a","f "],"b":"13"}]},"DETDESC":[{},{}]}
