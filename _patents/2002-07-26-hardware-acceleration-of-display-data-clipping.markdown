---
title: Hardware acceleration of display data clipping
abstract: Embodiments of the present invention are directed to a method and apparatus for hardware acceleration of display data clipping. In one embodiment, all display data is presented to the display system. The display system uses its hardware to clip the undesired data and display the desired data. In one embodiment, the display system has one or more clipping registers. As display data arrives from each source, the information's display location is classified by all the clipping registers. Only pixels which are calculated to be visible by the clipping registers is written to memory for later display. In one embodiment, the display system has an extra amount of memory, termed “display mask memory.” In one embodiment, there is a corresponding data location in the display mask memory for each pixel in the display memory. In one embodiment, the display system has another set of memory, termed “low-resolution display mask memory.” In yet another embodiment, the display data is presented to the display system from a server located away from the display system. The display data is presented via a network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07286140&OS=07286140&RS=07286140
owner: Sun Microsystems, Inc.
number: 07286140
owner_city: Santa Clara
owner_country: US
publication_date: 20020726
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to the field of computer displays, and in particular to a method and apparatus for hardware acceleration of display data clipping.","Sun, Sun Microsystems, the Sun logo, Solaris and Java are trademarks or registered trademarks of Sun Microsystems, Inc. in the United States and other countries.","2. Background Art","In a computer system, a computer may receive data to present to the user using a display device (e.g., a monitor) from multiple sources. For example, a video window with streaming video may be supplied by one source, and a text window may be supplied by another source. The source may be located at the computer attached to the display device, or it may be located at another computer. Typically, in a thin client architecture, display information source are not located at the terminal attached to the display device.","In some instances, the regions of display for two sources may overlap. Display data for the covered portions of the video window must be discarded, or clipped, rather than displayed. In prior art solutions, software systems are used to clip unneeded display data. However, software clipping is slow and inefficient. This problem can be better understood with a discussion of display systems in a multi-tier application architecture.","Mufti-Tier Application Architecture","In the mufti-tier application architecture, a client communicates requests to a server for data, software and services, for example, and the server responds to the requests. The server's response may entail communication with a database management system for the storage and retrieval of data.","The mufti-tier architecture includes at least a database tier that includes a database server, an application tier that includes an application server and application logic (i.e., software application programs, functions, etc.), and a client tier. The data base server responds to application requests received from the client. The application server forwards data requests to the database server.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":["100","110","110"]},"Further application functionality is provided by application logic managed by application server  in application tier . The apportionment of application functionality between client tier  and application tier  is dependent upon whether a \u201cthin client\u201d or \u201cthick client\u201d topology is desired. In a thin client topology, the client tier (i.e., the end user's computer) is used primarily to display output and obtain input, while the computing takes place in other tiers (i.e., away from the thin client). A thick client topology, on the other hand, uses a more conventional general purpose computer having processing, memory, and data storage abilities. Database tier  contains the data that is accessed by the application logic in application tier . Database server  manages the data, its structure and the operations that can be performed on the data and\/or its structure.","Application server  can include applications such as a corporation's scheduling, accounting, personnel and payroll applications, for example. Application server  manages requests for the applications that are stored therein. Application server  can also manage the storage and dissemination of production versions of application logic. Database server  manages the database(s) that manage data for applications. Database server  responds to requests to access the scheduling, accounting, personnel and payroll applications' data, for example.","Connection  is used to transmit data between client tier  and application tier , and may also be used to transfer the application logic to client tier . The client tier can communicate with the application tier via, for example, a Remote Method Invocator (RMI) application programming interface (API) available from Sun Microsystems\u2122. The RMI API provides the ability to invoke methods, or software modules, that reside on another computer system. Parameters are packaged and unpackaged for transmittal to and from the client tier. Connection  between application server  and database server  represents the transmission of requests for data and the responses to such requests from applications that reside in application server .","Elements of the client tier, application tier and database tier (e.g., client , application server  and database server ) may execute within a single computer. However, in a typical system, elements of the client tier, application tier and database tier may execute within separate computers interconnected over a network such as a LAN (local area network) or WAN (wide area network).","Display Systems","Display systems in the multi-tier application architecture are used to arrange display information for presentation to a user on a display device (e.g., a monitor) in the client tier . Typically, a display system comprises a display memory and a display controller. The display memory is typically dynamic random access memory (DRAM) and contains pixel color information for each pixel of the display device. The display controller updates the data in the display memory and retrieves data from the display memory to send to the display device.","Frequently, the desired display areas of two display data sources overlap. For example, video data may be transmitted to a client terminal from two different data sources in a thin client architecture and the windows displaying the video data may be overlapping. Since both windows cannot write to the display memory for the overlapping pixels, the video information for the overlapping area of the rear window must be clipped. Furthermore, any portions of the video window which is off the screen must be clipped.","Clipping is typically performed by software. The software saves the desired display data and discards the rest. Then, only the desired display data is passed on to the display system for eventual display. In some systems, the clipping software runs on a different computer from the computer (of the client tier ) directly attached to the display system.","Clipping in Thin Client Architectures","In some prior art thin client architecture systems, display data is clipped using software before it is transmitted to the client terminal. However, this approach is difficult and inefficient to coordinate when display data is transmitted from separate source locations. The approach encounters additional problems when display data is being multicast to many client terminals. The clipping may be different for each client terminal receiving the display data, so it is inefficient for the data source to perform clipping before transmitting the data to each client terminal.","Embodiments of the present invention are directed to a method and apparatus for hardware acceleration of display data clipping. In one embodiment of the present invention, all display data is presented to the display system. The display system uses its hardware to clip the undesired data and display the desired data. In one embodiment, the display system has one or more clipping registers. As display data arrives from each source, the information's display location is classified by all the clipping registers. Only pixels which are calculated to be visible by the clipping registers is written to memory for later display.","In one embodiment, the display data is presented to the display system from a server. The server is physically located away from the display system. The display data is presented to the display system via a network. The network may comprise a LAN (local area network) or WAN (wide area network). In another embodiment, the display system is located within a thin client. The clipping hardware is located within the display system.","In one embodiment, the display system has an extra amount of memory, termed \u201cdisplay mask memory.\u201d In one embodiment, the display mask memory is located on a graphics processor chip. Since the display mask memory is separate from the display memory, both memories are accessible in parallel.","In another embodiment, the display mask memory is part of the display memory. A physical region of the display memory may be reserved for the display mask memory usage. Confining the display mask memory to a specific physical region of the display memory helps in efficiently writing and retrieving data from the display memory. In yet another embodiment, the display mask memory is located in another memory chip. Since the display mask memory is separate from the display memory, both memories are accessible in parallel.","In one embodiment, a set of commands are provided to manipulate the display mask memory. In one embodiment, there is a command to write to individual data locations in the display mask memory. In another embodiment, there is a command to read from individual data locations in the display mask memory. In yet another embodiment, there is a command to fill a block of data locations in the display mask memory with a constant. Other embodiments have other display mask memory manipulation commands.","In one embodiment, there is a corresponding data location in the display mask memory for each pixel in the display memory. Different embodiments have a different number of bits of memory, n, for each data location in the display mask memory. As a result, there are two to the nth power different available display contexts representable in each data location. In one embodiment, there are three bit of memory for each data location, resulting in eight display contexts.","In one embodiment, commands issued to the display system contain a context indicator to indicate within which display context the command should be executed. When a command contains display information for a pixel, the display context for the pixel stored in the display mask memory is compared to the context indicator of the command. If the display context is equal to the context indicator, the command is executed for the pixel. If the display context is not equal to the context indicator, the display information for the pixel is clipped. In some instances, the entire command may be clipped, and the display memory remains unchanged.","In one embodiment, the display system has another set of memory, termed \u201clow-resolution display mask memory.\u201d Each data location in the low-resolution display mask memory corresponds with more than one pixel location in display memory. In one embodiment, each location in low-resolution display mask memory corresponds with rectangular blocks of pixels in display memory. In one embodiment, the rectangular blocks are 4 pixel by 4 pixel regions. In another embodiment, the rectangular blocks are 16 pixel strips of pixels.","In one embodiment, each data location in low-resolution display mask memory has a number of bits equal to the number of display contexts possible in the display mask memory. If at least one of the pixels of the display memory covered by the low-resolution display mask memory data location is in a display context, the bit in that low-resolution display mask memory data location corresponding to that display context is set equal to 1.","When a display command is issued, the context indicator is used to determine whether any pixel in the region covered by a low-resolution display mask memory data location has the same display context at the display command. If the bit corresponding to the display context is 0, no pixel in the region has the same display context as the display command. Thus, all of the pixels of the region are clipped from the display command.","If the bit corresponding to the display context is 1, at least one pixel in the region has the same display context as the display command. Thus, the display mask memory must be examined to determine whether the command is executed or clipped for each pixel in the region.","In one embodiment, a set of commands are provided to manipulate the low-resolution display mask memory. In one embodiment, there is a command to write to individual data locations in the low-resolution display mask memory. In another embodiment, there is a command to read from individual data locations in the low-resolution display mask memory. In yet another embodiment, there is a command to set a bit for each location in a block of data locations in the low-resolution display mask memory to a constant. Other embodiments have other low-resolution display mask memory manipulation commands.","In one embodiment, more than one low-resolution mask memories are used. Each low-resolution mask memory has a different resolution level. For example, in one embodiment, the number of pixels in the display memory covered by a single location in the first low-resolution mask memory, second low-resolution mask memory and third low-resolution mask memory are 16, 64 and 256, respectively. In one embodiment, every pixel in the display memory is covered by a single location in a low-resolution mask memory.","The invention is a method and apparatus for hardware acceleration of display data clipping. In the following description, numerous specific details are set forth to provide a more thorough description of embodiments of the invention. It is apparent, however, to one skilled in the art, that the invention may be practiced without these specific details. In other instances, well known features have not been described in detail so as not to obscure the invention.","Hardware Clipping in Display System","In one embodiment of the present invention, all display data is presented to the display system. The display system uses its hardware to clip the undesired data and display the desired data. Since clipping is performed by the display system hardware, clipping is much faster. Additionally, display data may more easily be broadcast to multiple display systems. All of the display data (e.g., a video stream broadcast) is broadcast to each display system, and the hardware of each display system clips the display data as needed in accordance with the environment of the display system.","In one embodiment, the display data is presented to the display system from a server. The server is physically located away from the display system. The display data is presented to the display system via a network. The network may comprise a LAN (local area network) or WAN (wide area network). In another embodiment, the display system is located within a thin client. The clipping hardware is located within the display system. In a further embodiment, the raw display data is first obtained by an input device on the thin client. The raw display data is then transmitted to the server for computational processing. The computed display data is then sent to the display system The display system hardware then clips the computed data as needed in accordance with the environment of the display system.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 2","b":["200","210","220","230"]},"Clipping Registers","In one embodiment, the display system has one or more clipping registers. As display data arrives from each source, the information's display location is classified by all the clipping registers. Only pixels which are calculated to be visible by the clipping registers is written to memory for later display.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 3","b":["300","310","320","330"]},"Display Mask Memory","In one embodiment, the display system has an extra amount of memory, termed \u201cdisplay mask memory.\u201d In one embodiment, the display mask memory is located on a graphics processor chip. Since the display mask memory is separate from the display memory, both memories are accessible in parallel.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 4","b":["400","410","420","430"]},"In another embodiment, the display mask memory is part of the display memory. A physical region of the display memory may be reserved for the display mask memory usage. Confining the display mask memory to a specific physical region of the display memory helps in efficiently writing and retrieving data from the display memory.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 5","b":["500","510","520","530"]},"In yet another embodiment, the display mask memory is located in another memory chip. Since the display mask memory is separate from the display memory, both memories are accessible in parallel.  illustrates a display system in accordance with one embodiment of the present invention. The display system  has a display memory  coupled to a graphics processor chip . The graphics processor chip is also coupled to a display mask memory . The graphics processor chip is able to access the display mask memory at the same time it accesses the display memory.","In one embodiment, a set of commands are provided to manipulate the display mask memory. In one embodiment, there is a command to write to individual data locations in the display mask memory. In another embodiment, there is a command to read from individual data locations in the display mask memory. In yet another embodiment, there is a command to fill a block of data locations in the display mask memory with a constant. Other embodiments have other display mask memory manipulation commands.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 7","b":["700","710","720","730"]},"At block , it is determined whether the display context is updated for all pixels in regions where the display context was changed. If the display context is updated for all pixels in regions where the display context was changed, the process continues at block . If the display context is not updated for all pixels in regions where the display context was changed, the process repeats at block .","In one embodiment, there is a corresponding data location in the display mask memory for each pixel in the display memory. Different embodiments have a different number of bits of memory, n, for each data location in the display mask memory. As a result, there are two to the nth power different available display contexts representable in each data location. In one embodiment, there are three bits of memory for each data location, resulting in eight display contexts.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 8","b":["800","810","820","830","820","830"]},"Before a command is executed for pixel , it is determined whether the display context of a command is also 010. If the display context of the command is not 010, the command is not executed. For example, if two video windows overlap at pixel , both will send display data to the display system for pixel . However, the display data for pixel  should be clipped for at least one of the video windows. If another window also overlaps pixel , it may be the case that the display data for pixel  from both video windows should be clipped. Only one of the sets of display data that overlap at pixel  will have display context 010. Thus, only display data with a display context of 010 is written to the pixel and the competing display data is clipped.","In one embodiment, commands issued to the display system contain a context indicator to indicate within which display context the command should be executed. When a command contains display information for a pixel, the display context for the pixel stored in the display mask memory is compared to the context indicator of the command. If the display context is equal to the context indicator, the command is executed for the pixel. If the display context is not equal to the context indicator, the display information for the pixel is clipped. In some instances, the entire command may be clipped, and the display memory remains unchanged.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 9","b":["900","910","920"]},"At block , the display command is executed for pixels that have the same display context stored in their corresponding display mask memory locations as the display context of the display command. At block , the display command is discarded for pixels that do not have the same display context stored in their corresponding display mask memory locations as the display context of the display command.","Low-Resolution Display Mask Memory","In one embodiment, the display system has another set of memory, termed \u201clow-resolution display mask memory.\u201d Each data location in the low-resolution display mask memory corresponds with more than one pixel location in display memory. In one embodiment, each location in low-resolution display mask memory corresponds with rectangular blocks of pixels in display memory. In one embodiment, the rectangular blocks are 4 pixel by 4 pixel regions. In another embodiment, the rectangular blocks are 16 pixel strips of pixels.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 10","b":["1000","1010","1020","1030"]},"In one embodiment, each data location in low-resolution display mask memory has a number of bits equal to the number of display contexts possible in the display mask memory. If at least one of the pixels of the display memory covered by the low-resolution display mask memory data location is in a display context, the bit in that low-resolution display mask memory data location corresponding to that display context is set equal to 1.","In another embodiment, each bit in the low-resolution mask memory corresponds to 2 display contexts. In other embodiments, each bit corresponds to other numbers of display contexts. If the bit is set, then it is possible that there is data to be written to graphics memory for that context. The display mask memory is checked for each pixel to be written to see if the context matches. If the context matches, the value is written. A higher number of display contexts represented by each bit results in a smaller low-resolution memory mask. The trade-off for having a smaller low-resolution memory mask is that more lookups in the display mask memory are performed. Various embodiments will balance this trade-off differently depending on implementation needs.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 11","b":["1100","1110","1120","1130"]},"When a display command is issued, the context indicator is used to determine whether any pixel in the region covered by a low-resolution display mask memory data location has the same display context at the display command. If the bit corresponding to the display context is 0, no pixel in the region has the same display context as the display command. Thus, all of the pixels of the region are clipped from the display command.","If the bit corresponding to the display context is 1, at least one pixel in the region has the same display context as the display command. Thus, the display mask memory must be examined to determine whether the command is executed or clipped for each pixel in the region.","Data location  has 01100100 stored in the bits of its memory. Thus, the pixels in the region covered by data location  are either of the display context corresponded to by the second, third or sixth bits of memory. Any command that is not in one of those three contexts will not be executed on the pixels in this region and can be clipped. However, if a command is in one of those three contexts, at least one pixel in the region shares that context. Thus, the display system must examine a smaller region to determine where the command can be clipped and where the command is executed. In one embodiment, the display system examines the display mask memory to make this determination.","In one embodiment, a set of commands are provided to manipulate the low-resolution display mask memory. In one embodiment, there is a command to write to individual data locations in the low-resolution display mask memory. In another embodiment, there is a command to read from individual data locations in the low-resolution display mask memory. In yet another embodiment, there is a command to set a bit for each location in a block of data locations in the low-resolution display mask memory to a constant. Other embodiments have other low-resolution display mask memory manipulation commands.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 12","b":["1200","1210","1220","1230","1240"]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 13","b":"1300"},"At block , it is determined whether any pixels are in the first display context that previously were not. If some pixel is in the first display context that previously was not, at block , the data locations in low-resolution display mask memory that correspond to the pixels that are newly in the first display context are determined. At block , the bit corresponding to the first display context is set equal to 1 in each of the determined low-resolution display mask memory data locations and the process continues at block .","If at block , no pixels are in the first display context that previously were not, at block , it is determined whether any pixels are not in the first display context that previously were. If no pixels are not in the first display context that previously were, at block , the process is complete. If a pixel is not in the first display context that previously was, at block , the data locations in low-resolution display mask memory that correspond to the pixels that are newly not in the first display context are determined. At block , the bit corresponding to the first display context is set equal to 0 in each of the determined low-resolution display mask memory data locations and the process continues at block .","Multiple Low-Resolution Mask Memories","In one embodiment, more than one low-resolution mask memories are used. Each low-resolution mask memory has a different resolution level. For example, in one embodiment, the number of pixels in the display memory covered by a single location in the first low-resolution mask memory, second low-resolution mask memory and third low-resolution mask memory are 16, 64 and 256, respectively. In one embodiment, every pixel in the display memory is covered by a single location in a low-resolution mask memory.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 14","b":["1400","1410","1420","1430","1440","1450","1460","1420","1430","1440","1450","1460","1410"]},"Each data location in display mask memory corresponds to a single pixel in display memory. Each data location in low-resolution display mask memory  covers 16 pixels in the display memory. Similarly, each data location in lower-resolution display mask memory  covers 64 pixels in the display memory. Likewise, each data location in lowest-resolution display mask memory  covers 256 pixels in the display memory.","Virtual Desktop System Architecture","One embodiment of the invention is used as part of a thin client architecture system.  shows an example of a thin client topology called a virtual desktop system architecture. The virtual desktop system architecture provides a re-partitioning of functionality between a central server installation  and end user hardware . Data and computational functionality are provided by data sources via a centralized processing arrangement. At the user end, all functionality is eliminated except that which generates output to the user (e.g., display and speakers), takes input from the user (e.g., mouse and keyboard) or other peripherals that the user may interact with (e.g., scanners, cameras, removable storage, etc.). All computing is done by the central data source and the computing is done independently of the destination of the data being generated. The output of the source is provided to a terminal, referred to here as a \u201cHuman Interface Device\u201d (HID). The HID is capable of receiving the data and displaying the data.","The functionality of the virtual desktop system is partitioned between a display and input device such as a remote system and associated display device, and data sources or services such as a host system interconnected to the remote system via a communication link. The display and input device is a human interface device (HID). The system is partitioned such that state and computation functions have been removed from the HID and reside on data sources or services. One or more services communicate with one or more HIDs through a communication link such as network. An example of such a system is illustrated in , wherein the system comprises computational service providers  communicating data through communication link  to HIDs .","The computational power and state maintenance are provided by the service providers or services. The services are not tied to a specific computer, but may be distributed over one or more traditional desktop systems such as described in connection with , or with traditional servers. One computer may have one or more services, or a service may be implemented by one or more computers. The service provides computation, state and data to HIDs and the service is under the control of a common authority or manager. In , the services are provided by computers , , and . In addition to the services, a central data source can provide data to the HIDs from an external source such as for example the Internet or world wide web. The data source can also be broadcast entities such as those that broadcast data (e.g., television and radio signals).","Examples of services include X11\/Unix services, archived or live audio or video services, Windows NT service, Java\u2122 program execution service and others. A service herein is a process that provides output data and response to user requests and input. The service handles communication with an HID currently used by a user to access the service. This includes taking the output from the computational service and converting it to a standard protocol for the HID. The data protocol conversion is handled by a middleware layer, such as the X11 server, the Microsoft Windows interface, video format transcoder, the OpenGL\u00ae interface, or a variant of the java.awt.graphics class within the service producer machine. The service machine handles the translation to and from a virtual desktop architecture wire protocol described further below.","Each service is provided by a computing device optimized for its performance. For example, an Enterprise class machine could be used to provide X11\/Unix service, a Sun MediaCenter\u2122 could be used to provide video service, a Hydra based NT machine could provide applet program execution services.","The service providing computer system can connect directly to the HIDs through the interconnect fabric. It is also possible for the service producer to be a proxy for another device providing the computational service, such as a database computer in a three-tier architecture, where the proxy computer might only generate queries and execute user interface code.","The interconnect fabric can comprise any of multiple suitable communication paths for carrying data between the services and the HIDs. In one embodiment the interconnect fabric is a local area network implemented as an Ethernet network. Any other local network may also be utilized. The invention also contemplates the use of wide area networks, the Internet, the world wide web, and others. The interconnect fabric may be implemented with a physical medium such as a wire or fiber optic cable, or it may be implemented in a wireless environment.","The interconnect fabric provides actively managed, low-latency, high-bandwidth communication between the HID and the services being accessed. One embodiment contemplates a single-level, switched network, with cooperative (as opposed to completing) network traffic. Dedicated or shared communications interconnects maybe used in the present invention.","The HID is the means by which users access the computational services provided by the services.  illustrates HIDs ,  and . Each HID comprises a display , a keyboard , mouse , and audio speakers . The HID includes the electronics need to interface these devices to the interconnection fabric and to transmit to and receive data from the services.","A block diagram of an example embodiment of the HID is illustrated in . The components of the HID are coupled internally to a PCI bus . Network control block  communicates to the interconnect fabric, such as an Ethernet, through line . An audio codec  receives audio data on interface  and is coupled to network control block . USB data communication is provided on lines  to a USB controller . The HID further comprises a embedded processor  such as a Sparc2ep with coupled flash memory  and DRAM . The USB controller , the network control block  and the embedded processor  are all coupled to the PCI bus . A video controller , also coupled to the PCI bus , can include an ATI RagePro+ frame buffer controller which provides SVGA output on the line . NTSC data is provided in and out of the video controller through video decoder  and encoder  respectively. A smartcard interface  may also be coupled to the video controller .","Alternatively, the HID can comprise a single chip implementation as illustrated in . The single chip includes the necessary processing capability implemented via CPU  and graphics renderer . Chip memory  is provided, along with video controller\/interface . A internal bus (USB) controller  is provided to permit communication to a mouse, keyboard and other local devices attached to the HID. A sound controller  and interconnect interface  are also provided. The video interface shares memory  with the CPU  and graphics renderer . The software used in this embodiment may reside locally in on-volatile memory or it can be loaded through the interconnection interface when the device is powered.","Thus, a method and apparatus for hardware acceleration of display data clipping is described in conjunction with one or more specific embodiments. The invention is defined by the following claims and their full scope and equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects and advantages of the present invention will become better understood with regard to the following description, appended claims and accompanying drawings where:",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
