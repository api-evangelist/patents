---
title: Platform independent randomness accumulator for network applications
abstract: A random number generator includes one or more pseudorandom data sources that generate pseudorandom data, a randomness accumulation facility that receives pseudorandom data from the one or more pseudorandom data sources, a storage facility that stores a random value generated by the randomness accumulation facility, and an application programming interface (“API”), operating independently from the operation of the randomness accumulation facility, that retrieves, upon request by a software application, the random value currently stored in the storage facility and provides a random number to the software application. The pseudorandom data is hashed with a previously-stored random value and a first counter value and may be encrypted before storing in the storage facility. Likewise, the API hashes the current random value with a second counter value before outputting the random number thus generated, decrypting the current value first if necessary.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07546327&OS=07546327&RS=07546327
owner: Wells Fargo Bank, N.A.
number: 07546327
owner_city: San Francisco
owner_country: US
publication_date: 20041221
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE PRESENT INVENTION","SUMMARY OF THE PRESENT INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is entitled to the benefit of, and claims priority to provisional U.S. Patent Application Ser. No. 60\/531,262 filed Dec. 22, 2003 and entitled \u201cPIRANA\u2014A PLATFORM INDEPENDENT RANDOMNESS ACCUMULATOR FOR NETWORK APPLICATIONS,\u201d the entirety of which is incorporated herein by reference.","1. Field of the Present Invention","The present invention relates generally to the field of computer systems, and more particularly, to the field of random number generators for use by computer systems.","2. Background","As is well known, many computer and other electronic systems rely on processes that make use of random numbers. Examples of applications operating on such systems or making use of such processes include lotteries, gambling machines, video games, image processing and reconstruction, music and graphics composition, scientific and financial modeling simulation, program and algorithm testing, equation-solving, and computer security. In particular, computer security applications such as cryptography, digital signatures, and protected communication protocols, make use of random numbers as a fundamental building block for strengthening and securing the confidentiality of electronic communications.","As is also well known, cryptography is the art and science of converting data or other information from its normal, easily comprehensible form into an incomprehensible format, rendering it unreadable without secret knowledge. In contemporary usage, cryptography is often used to provide security for the communications that occur between separate computer devices, sometimes referred to herein as an entity, and involves authentication, confidentiality, and integrity.","Authentication involves ensuring each entity communicating with one another is who the other entity or entities think it is. In an exemplary authentication protocol, a first entity of a type referred to as a client requests access, over a network, to password-protected information that is stored on a second entity of a type referred to as a server. The server responds with a random challenge, which is typically a random number that is often combined with other information. The client encrypts the random challenge using a password as a key and returns the encrypted challenge to the server. The server encrypts the same random challenge with the client's password, which the server obtains from its own password database. The server compares the two results, and if the results match, then the server has thereby authenticated the client without the client ever sending its password over the network. The generation and use of random numbers are thus critical in ensuring that no unauthorized entity observing an encrypted random challenge can impersonate the client by similarly responding to new random challenges.","Confidentiality, on the other hand, involves ensuring that no unauthorized entity listening to a communication is able to extract meaningful information from the data being communicated back and forth. Confidentiality is typically provided through data encryption which is the process of combining the original message with a cryptographic key in a defined manner to encrypt the message. In an ideal cryptosystem, only an entity with a particular decryption key can decrypt the encrypted message. By ensuring that this decryption key cannot be predicted or replicated and that only the intended recipient of the message has the required decryption key, the message can be protected from observation by an unauthorized entity.","Cryptographic keys can be symmetric or asymmetric. A symmetric key may be used for both encrypting data and decrypting the same data. On the other hand, asymmetric keys are produced in pairs, with each pair including a public key for encrypting data and a private key for decrypting data. The strength of a cryptosystem lies in the strength of the key which is a function of not only the number of bits in the key but also the randomness of the number used to generate the key. The generation and use of random numbers are thus critical in ensuring the confidentiality of a message.","Finally, integrity involves ensuring that no undetected changes are made to a particular communication. This may be accomplished using digital signatures. A digital signature is a fixed-length binary string unique to a given message and signed with a private key. The unique string is typically known as a message digest or cryptographic hash. Because the unique string is signed with the originating entity's private key, any entity with the originating entity's public key can decrypt the message and identify the owner of the private key and thereby identify the entity that originated the message. By generating another hash of the message using the same hashing algorithm as the originating entity and comparing the new hash with the signed hash, the recipient can verify that the message did not change after leaving the originator. The generation and use of random numbers is thus critical in ensuring that a signature generated using random numbers is of sufficient strength to avoid forgery of the signature.","In computer and other electronic systems, random numbers are a sequence of independent numbers with a specified distribution and a specified probability of falling in any given range of values. An ideal random number generator provides a stream of uniformly distributed, non-deterministic, independent bits over an infinite data set. A wide variety of random number generators have been created in an attempt to reach this ideal. Unfortunately, to a greater or lesser degree, known random number generators fall short of this ideal, and instead provide only what more properly is characterized as pseudorandom numbers.","For example, computer systems often use modular software-based random number generators. These solutions are typically created independently and then added to a computer system with relative ease. Unfortunately, software random number generators typically require a seed which is used as an operand in a mathematical algorithm to create a random number. The sequence of numbers generated by such software random number generators will eventually repeat, however, thus making it easier to predict a particular random number generator, thereby diminishing its usefulness.","Incorporating randomness into the seed and using sufficiently long mathematical computations help to increase the randomness of the numbers generated thereby. Typically, the seed is generated from bits of data collected from data sources within the computer system, including such the system clock, processes executing in the computer system, status registers, keystrokes, key press timing, and mouse movements, and the like. System interrupts and event handling, however, may reduce the effective randomness of at least some of these seed sources within different computer systems. Thus, a need exists for a random data generator that is more likely to be able to generate non-repeating random or pseudorandom numbers than previously possible.","Another drawback of existing random number generators is their susceptibility to decryption, decoding, deciphering or the like through a combination of traditional cryptography techniques and traffic analysis. In other words, by examining a sufficient number of random numbers generated by the generator, it may be possible to derive information about the generation process, thereby making it easier to predict future random numbers. As computer analysis techniques and processing capabilities become ever-greater, this poses a serious threat to the security of known random number generators. A more secure random data generator is thus needed in order to prevent such activities.","Broadly defined, the present invention according to one aspect is a random number generator, including: one or more pseudorandom data sources that generate first data; random state storage that receives and stores a random number; and a one-way hash element, whose output is coupled to the input of the random state storage, that hashes first data from the one or more pseudorandom data sources with a current random value from the random state storage.","In features of this aspect, the hashed result from the one-way hash element is loaded into the random state storage as a new random value; the random number generator includes a counter whose output is received by the one-way hash element, and the current value of the counter is hashed, by the one-way hash element, with the first data and the current value contained in the random state storage; the counter is incremented each time a new value is loaded from the output of the one-way hash element into the random state storage; the counter resides in non-volatile memory and is restored to a previous value upon restart; the random number generator includes a query manager, interposed between the one or more pseudorandom data sources and the one-way hash element, that gathers pseudorandom data from the one or more pseudorandom data sources and provides it to the one-way hash element; the query manager includes a polling scheduler that determines when to gather pseudorandom data from each of the pseudorandom data sources; and the one-way hash element is a first one-way hash element, and the random number generator includes a second one-way hash element that receives the current random value from the random state storage and hashes the current random value with a separate value, the output of the second one-way hash element being designated as the random number that is provided as an output by the random number generator.","In other features of this aspect, the random number generator includes a counter whose current value is the separate value with which the current random value, from the random state storage, is hashed by the second one-way hash element; the counter is incremented each time a new random number is provided by the random number generator; the counter resides in non-volatile memory and is restored to a previous value upon restart; the current random value is stored in the random state storage in encrypted form, and wherein the random number generator comprises a decryption element interposed between the random state storage and the one-way hash element for decrypting the current random value before being hashed by the one-way hash element; the random number generator includes an encryption element, interposed between the output of the one-way hash element and the input of the random state storage, that encrypts the hashed result from the one-way hash element before the hashed result is loaded into the random state storage; the random number generator includes an encryption element, interposed between the output of the one-way hash element and the input of the random state storage, that encrypts the hashed result from the one-way hash element before the hashed result is loaded into the random state storage; and the random state storage resides in non-volatile memory and is restored to a previous value upon restart.","The present invention according to a second aspect is a method of generating random data, including: generating pseudorandom data via one or more pseudorandom data sources; hashing the pseudorandom data with a stored value of random data; storing the result of the hashing step in a memory location for retrieval when a random number is requested; and repeating the generating, hashing and storing steps on an ongoing basis, wherein the stored value hashed in each subsequent hashing step is the result of a previous hashing step.","In features of this aspect, hashing includes hashing the pseudorandom data with the stored value of random data from the memory location; the memory location is a first memory location, the method includes storing the current value of a counter in a second memory location, and hashing includes hashing the pseudorandom data with the stored value of random data and the stored value of the counter; the method includes incrementing the counter whenever the hashing step is carried out; the method includes gathering pseudorandom data from the one or more pseudorandom data sources, and selecting a subset of the pseudorandom data to be hashed with the stored value of random data; the method includes determining when to gather pseudorandom data from each of the pseudorandom data sources; the method includes retrieving the stored value of random data from the memory location, hashing the retrieved value with a separate value, and outputting the result of the foregoing hashing step as a random number; the memory location is a first memory location, the method includes storing the current value of a counter in a second memory location, and hashing the retrieved value with a separate value includes hashing the retrieved value with the stored value of the counter; and the method includes incrementing the counter whenever the retrieved value is hashed with the stored value of the counter.","In other features of this aspect, the step of storing the result of the hashing step includes storing the result of the hashing step in the memory location in encrypted form; the method includes decrypting the stored value of random data in the memory location before hashing the stored value with the pseudorandom data; the method includes encrypting the result of the hashing step before storing the result in the memory location; the method includes encrypting the result of the hashing step before storing the result in the memory location; and storing the result of the hashing step includes storing the result of the hashing step in non-volatile memory, and the method includes discontinuing the generating, hashing and storing steps by rebooting a computer, restoring the previous stored value when the computer is restarted, and again repeating the generating, hashing and storing steps on an ongoing basis, where the stored value hashed with the pseudorandom data in the first hashing step after the computer is restarted is the restored previous value, and where the stored value hashed with the pseudorandom data in each subsequent hashing step is the result of a previous hashing step.","The present invention according to a third aspect is a random number generator including: one or more pseudorandom data sources that generate pseudorandom data; random state storage that receives and stores a random number derived from the pseudorandom data that is generated by the one or more pseudorandom data sources; and a one-way hash element that receives a current random value from the random state storage and hashes the current random value with a separate value, the output of the one-way hash element being designated as the random number that is provided as an output by the random number generator.","In features of this aspect, the random number generator includes a counter whose current value is the separate value with which the current random value, from the random state storage, is hashed by the second one-way hash element; the counter is incremented each time a new random number is provided as an output by the random number generator; the counter is incremented each time the random state storage receives and stores a new random number; the random number generator includes an incrementer that controls how the counter is incremented; the counter resides in non-volatile memory and is restored to a previous value upon restart; the current random value is stored in the random state storage in encrypted form, and the random number generator includes a decryption element interposed between the random state storage and the one-way hash element for decrypting the current random value before being hashed by the one-way hash element; and the random state storage resides in non-volatile memory and is restored to a previous value upon restart.","The present invention according to a fourth aspect is a method of generating a random number, including: generating pseudorandom data via one or more pseudorandom data sources; deriving a random value from the pseudorandom data; storing the random value in a memory location; hashing the stored random value with a separate value; and outputting the hashed result as a generated random number.","In features of this aspect, at least the hashing and outputting steps are repeated on an ongoing basis, and the separate value is changed before at least some of repeated hashing steps are executed; the separate value is the value of a counter, and the method includes incrementing the counter whenever the hashing step is carried out; the separate value is the value of a counter, and the method includes incrementing the counter whenever a new random value is stored in the memory location; the step of storing the random value in a memory location includes storing a random value in a memory location in encrypted form; and the method includes decrypting the random value stored in the memory location before hashing the random value with the separate value.","The present invention according to a fifth aspect is a random number generator, including one or more pseudorandom data sources that generate pseudorandom data; a randomness accumulation facility that receives pseudorandom data from the one or more pseudorandom data sources; a storage facility that stores a random value generated by the randomness accumulation facility; and an application programming interface, operating independently from the operation of the randomness accumulation facility, that retrieves, upon request by a software application, the random value currently stored in the storage facility and provides a random number to the software application.","In features of this aspect, the randomness accumulation facility defines a first module and the application programming interface defines a second module, and at least one of the first and second modules includes a one-way hash element that hashes data received by the module and provides, as output, random data derived from the hashed output of the one-way hash element; the first module includes a one-way hash element that hashes the pseudorandom data with a current random value from the storage facility; the hashed result from the one-way hash element is loaded into the storage facility as a new random value; the first module includes a query manager, interposed between the one or more pseudorandom data sources and the one-way hash element, that gathers pseudorandom data from the one or more pseudorandom data sources and provides it to the one-way hash element; the query manager includes a polling scheduler that determines when to gather pseudorandom data from each of the pseudorandom data sources; the random number generator includes a counter for each respective one-way hash element, the output of the counter is received by the respective one-way hash element, and the current value of the counter is hashed, by the one-way hash element, with the data received by the module in which the one-way hash element is included; and each respective counter is incremented when its corresponding one-way hash element carries out its hash operation.","In other features of this aspect, the first module includes one of the one-way hash elements, such one-way hash element having an output coupled to an input of the storage facility and arranged to hash pseudorandom data from the one or more pseudorandom data sources with a current random value from the storage facility and the current value of the respective counter; the second module includes one of the one-way hash elements, such one-way hash element arranged to hash a current random value from the storage facility with the current value of the respective counter; the output of the one-way hash element of the second module is designated as the random number that is provided as an output by the random number generator; the counter resides in non-volatile memory and is restored to a previous value upon restart; the current random value is stored in the storage facility in encrypted form; the randomness accumulation facility includes an encryption element that encrypts the generated random value before storing the random value in the storage facility; the application programming interface includes a decryption element that decrypts the random value stored in the storage facility before providing it as a random number; and the random value is stored in non-volatile memory in the storage facility and is restored to a previous value upon restart.","The present invention according to a sixth aspect is a method of generating a random number, including: generating pseudorandom data via one or more pseudorandom data sources; hashing the pseudorandom data with a stored value of random data; storing the result of the hashing step as a current random value in a memory location; repeating the generating, hashing and storing steps on an ongoing basis, wherein the stored value hashed with the pseudorandom data in each subsequent hashing step is the result of a previous hashing step; independently from the generating, hashing and storing steps, retrieving the current random value from the memory location; hashing the retrieved random value with a separate value; and outputting the hashed result as a generated random number.","In features of this aspect, the step of hashing the pseudorandom data with a stored value of random data includes hashing the pseudorandom data with a stored value of random data and with a counter value, and the method includes incrementing the counter value each time the counter value is hashed; the step of hashing the retrieved random value with a separate value includes hashing the retrieved random value with a counter value, and the method includes incrementing the counter value each time the counter value is hashed; the method includes encrypting, before storing the current random value in the memory location, the result of the step of hashing the pseudorandom data with a previously-stored value of random data; the method includes decrypting, before hashing the retrieved random value with a separate value, the retrieved random value; and storing the result of the hashing step includes storing the result of the hashing step in a memory location in non-volatile memory, and the method includes discontinuing the generating, hashing and storing steps by rebooting a computer, restoring the previous stored current random value when the computer is restarted, and again repeating the generating, hashing and storing steps on an ongoing basis, where the stored value hashed with the pseudorandom data in the first hashing step after the computer is restarted is the restored previous value, and where each subsequent hashing step is the result of a previous hashing step.","Further areas of applicability of the present invention will become apparent from the detailed description provided hereinafter. It should be understood that the detailed description and specific examples, while indicating the preferred embodiment of the invention, are intended for purposes of illustration only and are not intended to limit the scope of the invention.","Referring now to the drawings, in which like numerals represent like components throughout the several views, the preferred embodiments of the present invention are next described. The following description of the preferred embodiment(s) is merely exemplary in nature and is in no way intended to limit the invention, its application, or uses.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1","b":["20","10","12","10","20","20","14","10"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 1"],"b":["20","20","40","60","80","60","10","62","64","66","62","64","66","40","14","62","64","80","12","62","66"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 2"],"b":["40","14","60","40","42","44","46","64","42","16","16","44","62","64","46","44","44","62","80"]},"The query manager  is responsible for querying each of the various environmental data sources  to derive data that may or may not be random or pseudorandom by itself but whose degree of randomness, when combined or placed in cyclical rotation with data from other sources , becomes much more random. Each data source  may be any source of non-constant data that is available to the randomness accumulation facility , but is preferably a source of data having a significant degree of relative randomness. Such data sources  preferably include a variety of environmental data sources that are resident in the platform , but may also include other pseudorandom data sources, including other random number generators. Data sources suitable for use in the preferred embodiments of the present invention include disks or disk drives, audio sources, system clocks, packet arrival times, key strokes, mouse movements, swap area content, input\/output buffers, seed request time, system\/network status information, process start\/finish times, hardware information, and a wide variety of other devices, elements, processes and the like.","In its simplest form, the query manager  gathers data sets from each of the various data sources  but outputs, to the first one-way hash element , only a single data set, from a single data source , at a time. However, the query manager may further include one or more registers and\/or accompanying logic for concatenating or performing mathematical or other functions on the data received from the various sources  to introduce a higher degree of randomness to the data that is provided to the hash element . In addition, because the various data sources  are likely to generate new data at differing rates that are often independent from one another, the query manager  preferably includes a polling scheduler (not shown) to determine how often to poll or query each data source  and to accumulate it accordingly. The polling scheduler preferably polls or queries the faster-changing data sources  more frequently than the slower-changing ones.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIG. 2"],"b":["80","60","12","80","84","86","44","84","84","62","66","86","84","12"]},"In operation, the random state storage  is used to store a current random value, which as an initial matter may be set to a predetermined value, set to a value produced by a random (pseudorandom) number generator process, or allowed to float to a predictable or unpredictable value. Once the computer system , including the random number generator  of the present invention, is initialized, the query manager  repeatedly queries the various data sources  and generates a random number seed according to the functionality described hereinabove. The random number seed is hashed with the current random value (as stored in the random state storage ) and the current value of the RAF counter  to produce a new random value. The new random value is then stored in the random state storage , replacing the value previously stored there. This process is repeated indefinitely.","While the above-described process is executing, the RAF counter  is also being incremented. In its simplest form, the RAF counter  may be incremented whenever the hash function is performed by the first hash element . It will be apparent that, depending on the design of the first one-way hash element , the need for an incrementer  that is separate from the hash element  may be obviated. However, as shown in , the incrementer  may operate separately from the hash element . This may facilitate the use of an incrementing frequency that differs from that of the hash function and\/or further separates the operation of the incrementer  from that of the first hash element . Regardless of the implementation, the incrementer  preferably increments the RAF counter  at least as often as the random state storage  is updated.","An important purpose of the inclusion of the first one-way hash element  is to ensure that the pseudorandom data produced by the query manager  is not directly accessible or visible to applications  that requesting random numbers. Further, by incorporating the RAF counter  into the hash function, the randomness accumulation facility  thus makes virtually certain that the inputs to the first one-way hash element  will vary each time the hash function is carried out.","Meanwhile, and independently from the operation of the randomness accumulation facility , the API  receives and fulfills requests from the applications  for random numbers. When a request for a random number is received, the current value of the random state storage  may be hashed with the current value of the API counter . It is the output of the second one-way hash element  that is provided to the application . The inclusion of the second one-way hash element  ensures that the current random value produced by the randomness accumulation facility  and stored in the random state storage  is not directly accessible to the applications. Because the applications  require only that the data they receive is as random as possible, they do not require the cleartext \u201cunhashed\u201d random value. In other words, from the perspective of a requesting application , it does not matter whether it receives the current random value stored in the random state storage  or a hashed product or output of that value.","Further, the inclusion in the hash function of the value of a second counter , separate from the first counter , makes virtually certain that the inputs to the second one-way hash element  will vary each time the hash function is carried out. This, in turn, helps to ensure that an application  may not be used to derive information about actual values stored in the random state storage  such as by repeatedly forcing the hash function to be carried out. As with the RAF counter , the API counter , in its simplest form, may be incremented whenever the hash function is performed by the second hash element . It will be apparent that, depending upon the design of the second one-way hash element , the need for an incrementer that is separate from the hash element  may be obviated. However, as shown in , the incrementer  may operate separately from the hash element . This may facilitate the use of an incrementing frequency that differs from that of the hash function and\/or further separates the operation of the incrementer  from that of the first hash element . Regardless of the implementation, it preferably increments the API counter  at least as often as the second hash element  carried out its hash function, and at least as often as the random state storage  is updated by the randomness accumulation facility .","As described previously, the random state storage  and the two counters ,  preferably reside in persistent or non-volatile storage, such as the system state storage typically provided in a general purpose computer. This permits the values stored therein to be preserved as part of a computer's regular state backup process, so that if the computer or computers in which the present invention is embodied are rebooted or otherwise restarted, the values are maintained, even after a system crash. This, in turn, decreases the possibility that a repeating sequence of values could be forced to occur by intentionally restarting the random number generator, thereby forcing the random state storage  and the two counters ,  to be loaded with known values.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 5","FIG. 1","FIG. 6","FIG. 5","FIG. 2"],"b":["120","10","120","120","140","60","180","60","140","180","40","80"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 7","FIG. 6","FIG. 3"],"b":["140","14","60","140","42","44","46","64","42","44","46","40","140","62"]},"In order to accomplish this, the randomness accumulation facility  further includes at least one and preferably two cryptographic elements , . As used herein, \u201ccryptographic\u201d should be understood to refer to any element capable of carrying out a cryptographic process, including encryption\/decryption, hashing, and the like. However, in the following description, \u201cencryption\u201d or \u201cencrypt\u201d shall be understood to refer to a cryptographic process that scrambles or otherwise encodes a value from cleartext into ciphertext, and \u201cdecryption\u201d or \u201cdecrypt\u201d shall be understood to refer to a cryptographic process that unscrambles or otherwise decodes a value from ciphertext into cleartext.","The first cryptographic element  is an encryption element that may be interposed between the output of the first one-way hash element  and the input of the random state storage , while the second cryptographic element  is a decryption element that may be interposed between the output of the random state storage  and the first one-way hash element . In operation, the value produced by the first one-way hash element  is thus encrypted by the encryption element  before being stored in the random state storage . Further, when a new random value is to be produced, the current random value of the random state storage  is retrieved and decrypted by the first decryption element  before being provided to the first one-way hash element . Otherwise, the operation of the alternative embodiment of the randomness accumulation facility  is similar to that of the first embodiment.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 8","FIG. 6","FIG. 7","FIG. 4"],"b":["180","14","60","180","140","180","84","86","80","62","180","190","62","84","190","62","84","190","84","62","62","190","190","190","190"]},"Preferably, the three cryptography elements , ,  are matched to each other such that the respective encryption and decryption elements utilize the same cryptographic process and the same key or corresponding portions of a key pair. Thus, the output of the second decryption element  will be the same as the output of the first one-way hash element , having been encrypted and decrypted using corresponding processes and keys. However, it will be apparent to those of ordinary skill in the art that since the purpose of the random number generator  is to provide random rather than specific data, different cryptographic processes and keys may instead be used to create output data that may not correspond directly to input data, but which is highly random nonetheless. However, conventional techniques often utilize such matching encryption\/decryption processes and keys, even though it is not necessary for such processes and keys to match, in order to provide a \u201ccleaner\u201d approach to the design, thus aiding both in clarity and in the important area of \u201cprovable security.\u201d More specifically, it is well known in the field of random number generation that for a particular process or device to be useful, it must be highly provable. Mathematically \u201cproving\u201d randomness is a difficult task; however, it may be made somewhat easier by using matching cryptographic processes and keys, as described above.","Other than the incorporation of the cryptographic elements , , , the operation of the alternative embodiment of the API  is similar to that of the first embodiment.","If keys are required for the respective cryptographic elements , , , they may be \u201chardwired\u201d into the random data generator  or may be specified and controlled by a privileged user. The use and applicability of such keys is preferably limited to the random number generator  itself; the keys are preferably not shared outside the random number generator .","It will also be readily apparent that although not implemented in the embodiments illustrated herein, the values in the respective counters ,  may likewise be stored in an encrypted state, in which case additional cryptographic elements (not shown) may be included to provide appropriate encryption and decryption functionality.","Further, although likewise not shown, either of the embodiments of the random number generator ,  may further incorporate a randomness tester (not shown) to monitor the quality of the values created and stored in the random state storage  on an ongoing basis. Appropriate actions may be taken if at a particular time the quality of randomness is deemed not adequate. The test results may also be used as a quality indicator that can be queried by applications . The design and implementation of such a randomness tester and interface will be apparent to those of ordinary skill in the art.","Based on the foregoing information, it is readily understood by those persons skilled in the art that the present invention is susceptible of broad utility and application. Many embodiments and adaptations of the present invention other than those specifically described herein, as well as many variations, modifications, and equivalent arrangements, will be apparent from or reasonably suggested by the present invention and the foregoing descriptions thereof, without departing from the substance or scope of the present invention. Accordingly, while the present invention has been described herein in detail in relation to its preferred embodiment, it is to be understood that this disclosure is only illustrative and exemplary of the present invention and is made merely for the purpose of providing a full and enabling disclosure of the invention. The foregoing disclosure is not intended to be construed to limit the present invention or otherwise exclude any such other embodiments, adaptations, variations, modifications or equivalent arrangements; the present invention being limited only by the claims appended hereto and the equivalents thereof. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for the purpose of limitation."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Further features, embodiments, and advantages of the present invention will become apparent from the following detailed description with reference to the drawings, wherein:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 8","FIG. 6"]}]},"DETDESC":[{},{}]}
