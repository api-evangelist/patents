---
title: Driver-specific context for kernel-mode shimming
abstract: The kernel is a shared environment. Accordingly, many different kernel-mode drivers utilize services provided by the kernel. Furthermore, when shimming of drivers is necessary, it is desirable to support shim reuse amongst drivers with similar problems or issues, rather than generating a customized shim for each driver. To facilitate kernel-mode shimming and shim reuse, context information needs to be retrieved and maintained so that shims can identify particular driver calls and preserve driver specific linkage information. The present invention accomplishes the forgoing by employing an intermediate structure, a content component, between a client or driver call and a common shared shim to provide the shim with contextual information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07392527&OS=07392527&RS=07392527
owner: Microsoft Corporation
number: 07392527
owner_city: Redmond
owner_country: US
publication_date: 20031210
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to computers and more particularly toward a system and method of shimming kernel-mode drivers.","Shimming is a technique that allows additional functionality to be inserted between an application programming interface (API) client (e.g., an application, driver) and an API service (e.g., supplied by an operating system). An API client application may be written to use a collection of externally provided services (APIs), which provide some well-described functionality. These API services reside external to the client program, for example, contained in a dynamically linked library (DLL).","One of the major benefits provided by external API services is that a client application can be built without including the API service code directly in the client application. In particular, such a scheme provides a way for applications to declare their usage of a particular API service, but defer binding to that API until the application is actually loaded for execution. This allows application code to be separated from the API service code and allows for modularity in the construction of the application run-time environment. External API services are said to be \u201cimported\u201d into client applications and have \u201cload-time binding\u201d to applications. Accordingly, an application declares its intent to use imported API services and in response, the compiler can implicitly generate a \u201cstub\u201d entry in the applications import address table (IAT). The IAT containing import stubs can be generated by the compiler. These IAT stubs identify the name of the import API and the external service or DLL that corresponds with the API. When the application is loaded or otherwise made ready for execution, load-time binding will be performed and the IAT stubs will be updated to reference the correct API services.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["100","110","120","110","112","114","112","114","120"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2","b":["130","110","120","130","120"]},"Turning briefly to , an exemplary system driver interaction is illustrated. Driver X  has code  which utilizes IAT  to import or link to Foo Procedure  operating system kernel . Driver Y  has code  that employs IAT  to import or link to VerifierFoo Procedure  in system kernel , which then calls Foo Procedure  also in the kernel . Both drivers were written to invoke Foo Procedure or API , but Driver X's linkage is different from that of Driver Y's linkage. Driver Y has had its Foo import shimmed by a built in shim, namely VerifierFoo, while Driver X is directly linked to the original Foo API in the kernel.","One important goal of shim developers is reusability. Thus, a good shim framework should support reuse of shims when possible. If a shim, which provides some extended service or fix is created then it is desirable that that shim be applied to all applications expressing the problem, for instance, that the shim was designed to correct. For example, if Shim X fixes problem X and applications A, B, and C have problem X, then it would be desirable to have Shim X be able to fix applications A, B, and C without any changes to Shim X. However, providing such a common shim has not been possible up to this point, due in part by the fact that different drivers often have different linkage configurations, such as Driver X and Driver Y supra. Moreover, conventional user-mode shims and shimming systems can retain only one linkage configuration, namely the most recent, while other linkage configurations associated with previously shimmed drivers is lost. Further complicating the problem is the fact that existing infrastructures for imported APIs or services do not readily provide any contextual information with respect to which driver is utilizing the API or service.","Accordingly, there is a need in the art for a shim system and method that can determine and maintain a plurality of linkage configurations, context, unique to each application or driver to be shimmed.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key\/critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","Disclosed herein is a system and method for establishing and maintaining driver unique contextual information so that common shims can be utilized to provide some service or fix a particular problem associated with a plurality of drivers or other similar applications. Unique context formation is injected into a shimming system via an intermediate context component residing between the driver and a shim component. The context component comprises a hook component and a thunk component. The hook component stores context information regarding a kernel procedure referenced by a driver and redirects the driver to the context component. The thunk component links the context component to the shim component and provides the shim component with driver unique context information. The shim can then perform its function and subsequently link or jump to the kernel procedure or service originally referenced by driver.","According to another aspect of the subject invention, a shimming system is disclosed herein that implements and supports driver unique context information. More particularly, the system comprises a shim engine component that receives a notification signal indicating when a driver is loaded. Upon receipt of the signal the shim engine can query a shim database to determine if any shim components or shim packages are associated with the loaded driver. Thereafter, the shim engine can load any associated shim components and generate or load a context component associated with the loaded driver. Additionally, the shimming system disclosed herein can include a diagnostic component that monitors a system and, upon a system crash or a detected instability or inefficiency, queries the shim database to determine if a shim component is available that if applied would fix or compensate for the problem causing the crash, instability or inefficiency. Further yet, the shimming system according to an aspect of the subject invention can employ an interface component to facilitate development, deployment, and management of shim components and packages by users or developers.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced, all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention is now described with reference to the annexed drawings, wherein like numerals refer to like elements throughout. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention.","As used in this application, the terms \u201ccomponent\u201d and \u201csystem\u201d are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the present invention may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d (or alternatively, \u201ccomputer program product\u201d) as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the subject invention.","Turning to , a shimming system  is illustrated in accordance with an aspect of the present invention. System  comprises driver component , kernel component , procedures  (Procedure, Procedurethrough Procedure, where N is greater than one), context component  and shim component . Driver component  (also referred to herein as simply driver) can be used to perform almost any function on a computer however driver components are typically employed to provide an interface to a particular hardware device or piece of software. Driver component  can encapsulate special instructions and information associated with a particular device or piece of software and provide users (e.g., hardware, software) access to a set of generic instructions. Devices or software then utilized the generic commands to communicate with a device or software component. The driver component  can translate received generic instructions to the specialized instructions utilized by the device or software component. A driver component(s) can be provided by an operating system, by software applications, or via software associated with a particular device (e.g., disk drive, printer, scanner, keyboard, mouse, speakers . . . ). A driver component  can be implemented in computer systems as dynamically linked library (DLL) files. DLL files are small files that are utilized by a larger program or device to perform a specific function. For instance, a driver component or DLL file can provide support for a particular device such as a printer. The driver component or DLL file can then be utilized by a larger program like a word processing program to facilitate printing a document utilizing a particular printer associated with the driver component.","Turning briefly to , a driver component  is illustrated in further detail in accordance with an aspect of the subject invention. Driver component  comprises driver code  and import address table . Driver code  corresponds to software specified procedures and functions that driver component  utilizes to implement driver functionality. Driver component  can enhance its utility while minimizing its overall size by using external services or procedures  () provided by the kernel component. Driver component  accesses external procedures  by \u201cimporting\u201d them using an import address table . When a driver component  is loaded or executed the procedures  listed in the import table can be bound to the drivers so that the driver can utilize the functions and procedures provided therein. This binding is referred to herein as driver linkage or import linkage.","It should be noted that while this detailed description focuses almost exclusively on drivers and driver components, the scope of the invention is not so limited. The scope of the present invention covers any applications or components, drivers or otherwise that are capable of being shimmed. While this description focuses on drivers and driver components, it is not meant to exclude all other software applications capable of being shimmed, but rather to facilitate a clear and understandable description of the invention devoid of confusing terms (e.g., client\/application\/component\/driver).","Returning to , kernel component  is the nucleus or core of a computer operating system. An operating system is generally responsible for processing data and managing input and output. Kernel component , as part of the operating system, is loaded first and remains in main memory. In addition to being responsible for process management, file management, and memory management, inter alia, the kernel component  provides the essential services or procedures  required by applications and drivers. Procedures  can correspond to but are not limited to I\/O scheduling, buffering, spooling, and error handling. Furthermore, it should be noted that the term kernel-mode service or kernel-mode procedure as used herein is intended to cover any service, procedure, driver, application or other component located in the kernel address space.","Shim component  provides additional functionality between driver component  and kernel services or procedures . According to one aspect of the subject invention such functionality can correspond to a fix for a faulty driver; however shim component  can also be utilized as a diagnostic shim to assist in root cause analysis. Faulty drivers can be the cause of many system crashes and other problems that contribute to a negative computer experience (e.g., delays, lockups . . . ) which are usually incorrectly attributed to an operating system. A shim component  provides a mechanism for fixing a driver's behavior by compensating for the drivers fault. Accordingly, the shim component  resides between one or more driver components  and a kernel component with desirable procedures . However, unlike conventional shimming systems the present invention also employs a context component .","Context component  is an intermediate component between a driver system call and a common shim component . Context component  provides a mechanism to establish and maintain unique per-driver linkage information. Conventional shimming systems do not establish a context for each driver calling a shim component, rather they retain only one linkage configuration embedded in the shim itself, specifically the linking configuration of the last driver shimmed. Therefore, all shim linkage configuration data related to a previously shimmed driver is lost. Turning to , a context component , in accordance with an aspect of the subject invention, is illustrated in further detail including hook component  and thunk component . Hook component  can be constructed during the loading of the subject driver. Hook component  retrieves contextual information from a driver to be shimmed (e.g., using a shim engine component described infra) and makes such information available to thunk component . In particular, hook component  can retrieve the address of the kernel procedure or service sought to be utilized by a driver from the driver's import address table (IAT). Furthermore, hook component  can determine the address of the shim to be utilized. This context data can then be stored in a data structure for later access by the thunk component  and the shim component . Thunk component  utilizes information retrieved by hook component  to change a driver's import address table to point to or reference the location of the shim rather than the originally specified service or procedure. Furthermore, thunk component  provides the shim component  with access to the context information related to the driver calling the shim component . The context information can be provided to the shim component  by passing such information or the location of the information as a procedure parameter or storing the data in a particular location known by the shim component . The shim component  can then utilize this information to retrieve the calling driver's originally referenced kernel procedure. Subsequently, the shim component  can chain forward to the originally reference procedure or service after providing additional functionality (e.g., driver fix).","Turning to , a block diagram of an exemplary system  in accordance with an aspect of the invention is illustrated. System  depicts the use of context components amongst two different driver components. Driver X  and driver Y  contain respective driver code  and  as well as import address tables  and . Furthermore, each driver is associated with a context component  and . A common shim component  is utilized to provide additional functionality between the drivers and kernel component procedures Foo  and VerifierFoo . Driver X  utilizes Foo procedure  in its code section . Accordingly, there is a pointer in driver X's import address table  pointing to the memory location containing kernel procedure . Here, however, a shim component  has been employed to provide additional functionality, for example compensating for a problem with driver X . In accordance with an aspect of the subject invention a context component  is also employed to provide driver specific context information to the shim component . Context component  includes a hook component  and a thunk component . Hook component  changes the pointer in import address table  originally referencing Foo to point or link driver X's import of the Foo procedure to context component . Additionally, context component  receives the memory address of the shim component  and stores, inter alia, a pointer to the shim component  and a pointer to the originally referenced kernel procedure Foo  in a data structure, here Hook struct. Thus, hook struct contains the driver context information. Thunk component  utilizes this information to jump to the shim component  and provide shim component  with context data. After the jump is complete, shim component  executes its function and then utilizes the context data to link and ultimately execute the original procedure call Foo .","Driver Y  goes through a similar process with the common shim component . In this case, however, driver Y  utilizes its own context component  and a different procedure call. Driver Y  ultimately seeks to call Foo procedure , but as shown here after calling VerifierFoo procedure . The hook component  of the driver context component  determines and saves information related to the procedure called by the shim component . Thunk component  links the driver to the shim component  by changing the reference address in driver Y's import address table . Thereafter, when driver Y  calls the Foo procedure in its code section  control is transferred to the context component . Context component then stores the stores a pointer to the context information in a register or by alternative means transfers the location of the context information or the context information itself to shim component . Shim component  then executes its functionality and then using the context information jumps to the verifier procedure , which executes and jumps to the Foo procedure  that is associated with an oskrnl.exe code at . It should be noted that by retrieving and maintaining context data for each driver, the subject invention ensures that context data for previously shimmed drivers is not lost upon the utilization or calling of the shim by another driver. Conventional shimming practices would have lost information regarding the context of the driver X  upon execution of driver Y . In this case, if driver X  was called again after driver Y , a conventional shim would not know which procedure driver X  originally referenced as context data would not have been retained and the reference in the drivers import address table would have been changed to reference the shim component . The present invention eliminates this problem by storing unique context information for each driver component.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 8","b":["800","800","810","820","830","840","850","810","810","810","820","830","830","820","830","820"]},"System  can also include a diagnostic component  that analyzes a computer system and initiates corrective action. According to one aspect of the subject invention the diagnostic component  assists in root cause analysis of a system crash. The diagnostic component can therefore employ a variety of methods of analyzing system dump information and\/or a program trace (e.g., utilizing expert systems, neural networks . . . ) to determine the cause of the crash. However, diagnostic component  need not wait for a system crash. The diagnostic component  can also be proactive and engage in system analysis to detect system instabilities and\/or inefficiencies. Upon determining the cause of a crash or detecting system instabilities and\/or inefficiencies, corrective action can be initiated by the diagnostic component . Such corrective action can include providing notification to a user or operator via interface . Corrective action can also comprise searching the shim database  to determine whether a shim component already exists that if applied can fix the detected problem, instability or inefficiency. Such a determination can be made intelligently using Bayesian networks, neural networks, decision trees, support vector machines, linear and non-linear regression and\/or other learning models. According to an aspect of the invention, the diagnostic component can engage in a probabilistic analysis based on the cost of making an incorrect diagnosis and\/or selecting the wrong shim weighed against the benefit of correction. Confidence levels may be employed and specified by a developer or user to control actions of the diagnostic component.","Interface component  enables a user to interact with the shim database . According to one aspect of the invention, the interface component  is a graphical user interface (GUI) that facilitates creation of a shim component or shim package for a driver and storage of the shim component or shim package to shim database . For example, the interface component  can be a wizard that presents a user with a series of steps in graphical windows that aids in the generation of a shim component to remedy a detected problem, instability, or inefficiency. The interface component  can also provide a developer or user a means for developing and deploying a diagnostic shim component that can assist in understanding an operation sequence to determine or converge upon a problem.","In view of the exemplary systems described supra, a methodology that may be implemented in accordance with the present invention will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation, the methodology is shown and described as a series of blocks, it is to be understood and appreciated that the present invention is not limited by the order of the blocks, as some blocks may, in accordance with the present invention, occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Moreover, not all illustrated blocks may be required to implement the methodology in accordance with the present invention.","Additionally, it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture, as used, is intended to encompass a computer program accessible from any computer-readable device, carrier, or media.","Turning to , a methodology  for shimming kernel mode drivers is depicted in accordance with an aspect of the present invention. At , a shim component common to several drivers is generated. A common shim component provides an efficient mechanism to add functionality to one or more drivers so as to compensate for a fault associated with the one or more drivers, for example. A shim component can be generated using a program editor and\/or a graphical user interface. Alternatively, a shim component can be generated using a wizard that guides a user or developer through a series of steps associated with generating a shim component utilizing a myriad of windows and graphical interface components such as buttons, scroll bars, text boxes and the like. At , driver unique context data is generated for each driver to be shimmed. Subsequently, the driver unique context is provided to the common shim at . The unique context data allows the common shim component to identify the driver that is utilizing the shim component. This enables the shim component to add additional functionality and then chain forward to the kernel-mode service or procedure utilized by the driver and therefore leaves a driver's chain of execution intact.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 10","b":["1000","1010","1020","1030","1040"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 11","b":["1100","1110","1120","1130","1140","1150"]},"In order to provide a context for the various aspects of the invention,  as well as the following discussion are intended to provide a brief, general description of a suitable computing environment in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer-executable instructions of a computer program that runs on a computer and\/or computers, those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally, program modules include routines, programs, components, data structures, etc. that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, mini-computing devices, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like. The illustrated aspects of the invention may also be practiced in distributed computing environments where task are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the invention can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary environment  for implementing various aspects of the invention includes a computer . The computer  includes a processing unit , a system memory , and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .","The system bus  can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and\/or a local bus using any variety of available bus architectures including, but not limited to, 11-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSI).","The system memory  includes volatile memory  and nonvolatile memory . The basic input\/output system (BIOS), containing the basic routines to transfer information between elements within the computer , such as during start-up, is stored in nonvolatile memory . By way of illustration, and not limitation, nonvolatile memory  can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory  includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).","Computer  also includes removable\/non-removable, volatile\/non-volatile computer storage media.  illustrates, for example disk storage . Disk storage  includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage  can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices  to the system bus , a removable or non-removable interface is typically used such as interface .","It is to be appreciated that  describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system , which can be stored on disk storage , acts to control and allocate resources of the computer system . System applications  take advantage of the management of resources by operating system  through program modules  and program data  stored either in system memory  or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.","A user enters commands or information into the computer  through input device(s) . Input devices  include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit  through the system bus  via interface port(s) . Interface port(s)  include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s)  use some of the same type of ports as input device(s) . Thus, for example, a USB port may be used to provide input to computer , and to output information from computer  to an output device . Output adapter  is provided to illustrate that there are some output devices  like monitors, speakers, and printers, among other output devices , that require special adapters. The output adapters  include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device  and the system bus . It should be noted that other devices and\/or systems of devices provide both input and output capabilities such as remote computer(s) .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) . The remote computer(s)  can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer . For purposes of brevity, only a memory storage device  is illustrated with remote computer(s) . Remote computer(s)  is logically connected to computer  through a network interface  and then physically connected via communication connection . Network interface  encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet\/IEEE 1102.3, Token Ring\/IEEE 1102.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).","Communication connection(s)  refers to the hardware\/software employed to connect the network interface  to the bus . While communication connection  is shown for illustrative clarity inside computer , it can also be external to computer . The hardware\/software necessary for connection to the network interface  includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems and DSL modems, ISDN adapters, and Ethernet cards.","What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other aspects of the invention will become apparent from the following detailed description and the appended drawings described in brief hereinafter.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
