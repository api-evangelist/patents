---
title: System and method for managing ATP data in a distributed supply chain planning environment
abstract: A fulfillment server () for managing ATP data in a distributed supply chain planning environment receives an ATP request () from one of multiple clients (). The ATP request () includes multiple request line-items that each correspond to a desired product. The fulfillment server () then generates one or more component ATP requests () based on the request line-items and communicates component ATP requests () to at least one of multiple local fulfillment managers (). In response, the fulfillment server () receives component quotations () from the local fulfillment managers (), each corresponding to a component ATP request () and each including product availability information for the corresponding desired product. The fulfillment server () generates a quotation () that includes product availability information for all desired products, according to the component quotations (), and communicates the quotation () to the client ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06963847&OS=06963847&RS=06963847
owner: i2 Technologies US, Inc.
number: 06963847
owner_city: Dallas
owner_country: US
publication_date: 19990917
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["This Application claims the benefit of Ser. No. 60\/100,964, filed Sep. 18, 1998. This Application is also related to copending U.S. application Ser. No. 08\/491,167, filed Jun. 16, 1995 by Kennedy et al. for a \u201cSystem and Method for Managing Available to Promise (ATP),\u201d and copending U.S. application Ser. No. 08\/802,434, filed Feb. 18, 1997 by Kennedy et al. for a \u201cSystem and Method for Managing ATP.\u201d","This invention relates generally to the field of supply chain planning, and more particularly to a system and method for managing order fulfillment in a distributed supply chain planning environment.","Large and complex supply chains are typically managed by multiple planning organizations, each supporting one or more planning engines appropriate for the needs of the organization. For example, one organization might support a supply chain planner (SCP) engine, another might support a factory planner (FP) engine, and another might support yet another type of planning engine. As a result, matching of supply and demand, product allocation, and order promising and fulfillment tasks are likely to be managed using a variety of logically or geographically distributed planning engines. This presents numerous difficulties for customers and suppliers alike.","A lack of detailed visibility into extended supply chain operations often prevents companies from quoting accurate delivery dates and meeting customer orders in a timely manner. Even when there is adequate visibility, a lack of integration between front-end and back-end business objectives may result in lower margin products using up capacity, important market channels receiving worse service than less important market channels, and other sub-optimal commitments. Also, once delivery date and other commitments have been made, it is necessary to monitor the commitments throughout the production and logistics execution process to determine the effect of unexpected supply and demand changes. Accordingly, in a distributed supply chain planning environment, there exists a need for a single and consistent interface to the customer for order promising and fulfillment. The inability to provide such a capability negatively impacts order capture rates, delivery performance, and administrative costs associated with inventory, order processing, and other activities.","Despite numerous attempts in recent years, none have succeeded in creating an effective solution to manage order promising and fulfillment tasks across a network of computers in a distributed supply chain planning environment. While some companies have developed acceptable front-end or \u201ccustomer-centric\u201d solutions, and others have devoted tremendous energy to achieving suitable back-end supply chain optimization solutions, none have successfully integrated these front-end and back-end solutions to intelligently manage order promising and fulfillment tasks in this environment. As a result, for example, companies routinely over-promise and then lose money attempting to fulfill the commitments they have made, usually with mixed success. To compete effectively in the growing global Internet-based economy, companies must be able to make accurate commitments, aligned with business objectives of the company, and to fulfill their commitments in an efficient and profitable manner.","Furthermore, in such multi-enterprise endeavors, it is often economically or at least politically infeasible to completely re-deploy systems throughout the supply chain. Thus, for a solution system to be routinely deployable in most situations, it must have the ability to accommodate existing systems such that their capabilities are extended while allowing more sophisticated replacement systems to be subsequently introduced. The solution system must ultimately be able to productively co-exist with such existing or replacement systems. Previous techniques for the management of order promising and fulfillment are inadequate to meet these needs.","According to the present invention, disadvantages and problems associated with supply chain planning and order fulfillment within a distributed network environment have been substantially reduced or eliminated.","According to one embodiment of the present invention, a system for managing available-to-promise (ATP) data includes a client interface and an ATP server interface. A fulfillment server receives a first ATP request using the client interface, the first ATP request including multiple request line-items each corresponding to a desired product. The fulfillment server generates one or more component ATP requests based on the request line-items and communicates the component ATP requests to at least one of multiple ATP servers using the ATP server interface. The fulfillment server receives a plurality of component quotations from the ATP servers using the ATP server interface, each component quotation corresponding to a component ATP request and comprising product availability information for one or more corresponding desired products. The fulfillment server generates a quotation determined according to the product availability information provided by the component quotations and communicates the quotation through the client interface.","According to another embodiment of the present invention, a local fulfillment manager (LFM) has an associated ATP server and operates in a distributed supply chain planning environment including other LFMs. The LFM includes fulfillment server and ATP server interfaces. The LFM receives one or more component ATP requests from a fulfillment server, each component ATP request corresponding to a particular ATP request line-item for a desired product. The LFM determines an ATP response for each request line-item using the associated ATP server and generates a component quotation for each request line-item according to the corresponding ATP response. The component quotations include product availability information for corresponding desired products. The LFM then communicates the component quotations to the fulfillment server for consolidation with other component quotations from one or more other LFMs.","The present invention provides important technical advantages. The fulfillment server and LFMs of the present invention are capable of concurrently and intelligently managing order promising and fulfillment for complex multiple line-item ATP requests from a potentially very large number of clients according to specified user, customer, supplier, and any other business constraints. Where the ATP servers are geographically distributed from one another and the fulfillment server, across the Internet for example, the advantages of the present invention become particularly apparent. Further, where such ATP servers lie in different corporate boundaries, fulfillment server establishes a foundation for order promising and fulfillment capabilities not before possible. The present invention also provides clients a single interface for ATP requests, quotation confirmations, and promise acceptances that may rely on and affect ATP product allocation, material availability, or capacity availability at ATP servers and associated planning engines around the globe. This gives clients highly desirable visibility into extended supply chain operations, among other benefits.","The present invention minimizes the communications necessary between the fulfillment server and the LFMs to maximize bandwidth and minimize latency, which supports its usage in interactive systems (such as Internet web sites that provide online customers instant quotations for multi-item deliveries) and other applications that would not otherwise be possible. The present invention accomplishes this in part by providing clever and flexible placement of computations within the fulfillment server, LFMs, or ATP servers as appropriate, and also by engineering the LFM interface to communicate rich responses that can include numerous options simultaneously. This consistent LFM interface is provided while at the same time supporting a wide variety of ATP servers, including accommodation of existing ATP servers and similar systems not originally designed to support the extended features, operation, and architecture achieved by the present invention.","Moreover, the system architecture of the present invention contemplates that different environments would need to vary where certain computations occur in order to optimize performance as appropriate for the particular application. For example, some applications may need a system with extremely high throughput but can tolerate longer latencies, whereas others may require extremely short latencies but can tolerate less throughput. On the other side, some applications may need to support a huge number of products, while others may need to support huge networks of suppliers for each product, and still others may need large seller networks. The present invention provides adequate flexibility to support such diverse requirements. Other technical advantages will be readily apparent to those skilled in the art from the following figures, description, and claims.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["10","10","12","12","12","12","16","12","16","12","16","18","12","16"]},"Available-to-promise (ATP) servers  each support or are associated with a planning engine able to provide, among other things, product availability responses to component ATP requests in the form of component quotations. One or more planning engines associated with ATP servers  may also provide pricing and other additional capabilities, as appropriate. A local fulfillment manager (LFM)  that is located at or otherwise associated with each ATP server  manages the interaction between ATP server  and fulfillment server . In one embodiment, LFM  is a \u201cthin\u201d engine whose primary responsibility within system  is to communicate component requests, component quotations, component quotation confirmations, and component promises to and from ATP server  in a suitable format, and to monitor their status to the point of order fulfillment. ATP servers  provide services to fulfillment server  through an application-specific integration layer (not explicitly shown), which may include an API, ORB, or any other suitable software interface operating at ATP servers , fulfillment server , or both ATP servers  and fulfillment server . A network  coupling fulfillment server  to ATP servers  and may be a LAN, a MAN, a WAN, a global network such as the Internet, or any other appropriate network or collection of networks integral to or separate from network .","In one embodiment, LFMs  each provide the same interface and functionality to fulfillment server , but may be designed to work with different ATP servers. Many of the ATP servers  may be older ATP systems, fulfillment systems, or ERP systems that may be used to compute component quotations, but are not designed to work with fulfillment server  in a more comprehensive distributed network environment such as that associated with system . Other ATP servers  may not even have the ability to provide ATP quotations; rather, they may simply store or support information required to compute the ATP quotations. In still other cases, ATP servers  may be designed to work with fulfillment server , and as such may have an integrated LFM  to directly support the LFM interface of fulfillment server .","In each of these cases, LFM  is responsible for computing properly formed component quotations or component promises, handling the resulting acceptances, and ensuring that the corresponding material or capacity is indeed reserved. LFM  may have to do little but translate information communicated between the LFM interface of fulfillment server  and associated ATP server . In other situations, where the ATP server  is not designed to function as part of a larger system, LFM  may need to perform substantial computation or other manipulation of information. LFM  may even need to perform some of the ATP functionality if it is interacting with a system that is not designed for ATP, or if interacting with a slower system where the activity of the system needs to be circumvented where possible. The present invention provides for diverse flexibility in LFMs  and localizes translation to the more readily deployed LFMs  (keeping diverse ATP server variations separated from the computationally heavier and more complex fulfillment server ).","In general, clients  submit ATP requests to fulfillment server , each request including one or more line-items pertaining to specific products that each may be ATP at one or more distributed ATP servers . Fulfillment server  brokers component ATP requests corresponding to these line-items to the appropriate LFMs  using the LFM interface and network . Each LFM  receiving a component ATP request in turn uses associated ATP server  to perform necessary computations and record any necessary reservations or changes. LFMs  sends resulting component quotations to fulfillment server , which manipulates the component quotations as appropriate and presents a unified overall quotation to the requesting client , commensurate with the original corresponding ATP request.","Client  may generate a quotation confirmation to totally or partially accept the quotation, which fulfillment server  manipulates as appropriate and sends to LFMs  as component quotation confirmations, each corresponding to a particular component ATP request. LFMs , in cooperation with their associated ATP servers , generate component promises that consume supply and form binding commitments between the customer and suppliers as to the requested products. Fulfillment server  presents a unified promise to client , commensurate with the corresponding ATP request, based on the component promises it receives from LFMs  and ATP servers . Client  may generate an acceptance to totally or partially accept the promise, then sending the acceptance to fulfillment server . Fulfillment server  sends component acceptances to LFMs  and LFMs  respond to fulfillment server  with component acceptance confirmations. Once fulfillment server  has sent a unified acceptance confirmation to client , based on component acceptance confirmations received from LFMs , the order promising and fulfillment cycle is complete. Operation of system  is described more fully below.","Clients , fulfillment server , LFMs , and ATP servers  may each operate on one or more computers or other suitable processing devices at one or more locations. Each such computer may include an input device, which may be any suitable keypad, touch screen, microphone, or other device to accept information. An output device may convey suitable information, including digital or analog data, visual information, and audio information. The input device and output device may support any suitable fixed or removable storage media, such as magnetic computer diskettes, CD-ROMs, or other media to receive information from and provide information to the computer. One or more processors and an associated volatile or non-volatile memory execute instructions and manipulate information according to the operation of the associated client , ATP server , LFM , or fulfillment server , as the case may be. Clients , fulfillment server , LFMs , and ATP servers  may be embodied in computer software, in computer hardware, or in any appropriate combination of software and hardware, and may be integral to or separate from one another. To support high availability or other performance requirements, system  may incorporate redundant clients , fulfillment servers , LFMs , and ATP servers , according to particular needs.","In one embodiment, for each of the LFMs  in system , fulfillment server  may maintain an LFM name, suitable descriptive information for LFM , an Internet Protocol (IP) or other network address for LFM , the identity of a designated back-up LFM  in case LFM  fails, and any other suitable information. Fulfillment server  may maintain ATP server group and hierarchy information for sourcing purposes. ATP server groups may model, for example, supplier groups, pricing groups, or geographic locations. Since fulfillment server  may operate according to both group and supplier sourcing preferences, as described more fully below, it may be desirable to relate one or more suppliers to any applicable ATP server groups. As an example, client  or an associated user might specify a preferred supplier, a preferred group, or both, in which case fulfillment server  directs component ATP requests to the appropriate LFMs  based on these preferences and the supplier-group mappings. Fulfillment server  may maintain, for each ATP server group, a group name, suitable descriptive information for the group, a parent group for the group, a list of child groups, a list of LFMs  in the group, a list of active suppliers associated with the group, and any other appropriate information. Sourcing preferences may be defined at any level within the ATP server group hierarchy.","A product may represent anything a user associated with client  may request, and may be tangible (e.g., a computer) or non-tangible (e.g., a service). Products are related to items, each of which can be related to multiple products. This allows for the modeling of different price points, lead times, suppliers, locations, or any other suitable characteristics for the same item. In addition, multiple items can be related to the same product. This allows, for example, for the modeling of multiple suppliers of the same product. In one embodiment, fulfillment server  may maintain, for each product, a product name, a product description, a default unit of measure (UOM), a default lot size or multiple, a cancellation window in which client  or an associated user may cancel an order, a customer-ranked, supplier-ranked, or other list of alternates or substitutes for the product, supplier-defined related products, locations for the product, active suppliers for the product, attribute types for the product such as style, size, and color, or any other appropriate product information. Fulfillment server  may also maintain information about attributes, separate from any particular product, such as attribute type, description, value range, UOM, particular attributes within an attribute type, and any other suitable attribute information.","Fulfillment server  may maintain sales channels (customers) and parent-child or other hierarchical relationships between sales channels, which fulfillment server  may use for order promising and other suitable purposes, as discussed more fully below. In one embodiment, definitions for each sales channel maintained at fulfillment server  include, in any combination and without limitation: (1) name, (2) description, (3) category, (4) parent, (5) children, (6) ranked or other list of groups fulfillment server  may use in determining product sourcing, (7) products customer has or may order, (8) ranked or other list of groups for given product, (9) ranked or other list of suppliers for each product, (10) whether customer accepts alternate or substitute products generally or for given product, (11) ranked or other list of alternate or substitutes for each product, (12) whether customer accepts alternate sourcing groups generally or for given product, (13) target or mandatory price limit or price range for each product, (14) whether the customer prefers only full shipments generally or for given product, (15) whether the customer prefers unfulfilled portions of requests to be canceled rather than carried as backlog generally or for given product, (16) whether the customer prefers only on-time shipments generally or for a given product such that early or late promises are rejected, (17) delivery window outside of which a late or early shipment is not acceptable, (18) required lot size or multiple for given product such that quotations are rounded based on this value, and (19) whether customer generally prefers that if request line-item is shorted then logically associated request line-items are shorted proportionally.","In general, allocation information may be held at any level of a sales channel or other hierarchy and may be as deep as necessary. Fulfillment server  may process request line-items through alternate groups or suppliers if a primary group or supplier is unable to service a request. Within a preferred group, supplier preferences are honored if they are defined. Lists of alternates or substitutes should generally not be restrictive, such that if an acceptable quotation response is not available from a preferred supplier, fulfillment server  may locate product allocation or materials or capacity availability from other potential suppliers. For requests that do not explicitly disallow alternates or substitutes, and do not specify customer-preferred alternates, the supplier may be able to respond with its own selection of alternates or substitutes.","Fulfillment server  may maintain information regarding suppliers and parent-child or other hierarchical relationships between suppliers, which fulfillment server  may use for order promising and other suitable purposes, as discussed more fully below. In one embodiment, definitions for suppliers maintained at fulfillment server  may include, in any suitable combination, without limitation: (1) name, (2) description, (3) category, (4) parent, (5) children, (6) the products the supplier provides, (7) the groups associated with the supplier, (8) ranked or other list of preferred customers for a given product, (9) acceptable alternates or substitutes for a given product, (10) minimum and maximum quantities for orders, (11) order quantity constraint not allowing fulfillment server  to reduce the quotation quantity without affecting validity of quotation, (12) cancellation restrictions, and (13) cancellation window outside of which orders cannot be canceled.","Fulfillment server  uses business constraints described above, which it may have previously stored, may receive within ATP requests from clients , or both, to source request line-items to particular LFMs  or to filter out any component quotation and component promise responses from LFMs  that do not satisfy these constraints. For example, if a supplier provides multiple alternative responses, or responses from alternative groups, fulfillment server  may filter out non-compliant responses or responses from unacceptable groups. If none of the alternatives comply, fulfillment server  may reject the response in whole. The existence of a list of alternates or alternate groups does not mean they will be used. In one embodiment, client  or an associated user may selectively override some or all of these business constraints when generating ATP requests, quotation confirmations, and promise acceptances, according to particular needs.","In one embodiment, fulfillment server  supports a hierarchy of one or more sellers of products and each LFM  supports the same hierarchy of sellers but with a subset of the products supported by fulfillment server . LFMs  compute component quotations or component promises based on allocations throughout the seller hierarchy for the corresponding products. These capabilities are described in copending U.S. application Ser. No. 08\/491,167, filed Jun. 16, 1995 by Kennedy et al. for a \u201cSystem and Method for Managing Available to Promise (ATP),\u201d and copending U.S. application Ser. No. 08\/802,434, filed Feb. 18, 1997 by Kennedy et al. for a \u201cSystem and Method for Managing ATP,\u201d both of which are incorporated by reference herein. As a result, system  provides the ability to distribute product allocations to LFMs  and associated ATP servers  on a product by product basis, thereby gaining both space and time scalability in systems with large numbers of products.","Fulfillment server  may support one or more hierarchies of related or generic products, as described in U.S. application Ser. No. 08\/802,434. LFMs  may support one or more subsets of the same hierarchies and may compute component quotations or component promises based on the allocations to the products in those sub-hierarchies. This provides additional technical advantages in applications where products are related by hierarchies.","One or more fulfillment servers  may work cooperatively, independently, or otherwise with the same set of LFMs . Each such LFM  may accept component ATP requests and component quotation confirmations from multiple fulfillment servers  and may send component quotations or component promises to multiple fulfillment servers . This offers numerous technical advantages, including the ability to scale the system to handle larger numbers of clients or larger numbers of ATP requests . In addition, this capability allows for the geographical or organizational distribution of fulfillment servers  according to particular needs.","Each fulfillment server  may enforce different business constraints, depending on the set of clients  each fulfillment server  supports. Each fulfillment server  may work with different sets of LFMs , where each LFM  may belong to one or more of the LFM sets corresponding to fulfillment server . Each fulfillment server  may also support its own supply or allocations for one or more of products. This offers numerous additional technical advantages, including significant flexibility in setting up distributed ATP systems with fulfillment servers  tailored and optimized to support a variety of clients . Moreover, these options facilitate setting up local allocations of product supply at fulfillment servers  to reduce latency and increase throughput for requests of common products.","Each fulfillment server  may have the capability to operate as an LFM . In one embodiment, each fulfillment server  will at least be an adequate ATP server  to support a separate LFM . In either situation, it is possible to form a hierarchy of LFMs  by using a first system, including a first fulfillment server , corresponding LFMs , and their associated ATP servers , as ATP server  within a second system that includes a second fulfillment server , corresponding LFMs , and the associated ATP servers. In this way, a hierarchy of LFMs  and ATP servers  of appropriate breadth and depth can be formed according to particular needs. The present invention contemplates any suitable relationship between one or more LFMs  and one or more fulfillment servers .","Such hierarchical organization facilitates numerous additional system designs and offers numerous additional technical advantages. For example, each LFM  in such a hierarchy may be assigned one or more products to handle, where the products are part of a hierarchy of related or generic products. In that case, the LFMs  may compute availability of the generics of an assigned product by sending component ATP requests  to the particular LFM  that corresponds to the generic products, providing further parallelization and scalability.","Also described in U.S. application Ser. Nos. 08\/491,167 and 08\/802,434, fulfillment server  may support a hierarchy of one or more sellers of products and each LFM  may correspond to a particular one of those sellers. LFM  may hold allocations of supply for its associated seller and compute all component quotations and component promises possible with allocations it contains. Fulfillment server  receives these component quotations or component promises and combines them for each product as if ATP request  had been quoted or promised by a single system having all of the allocations. As a result, system  provides the ability to distribute product allocations to LFMs  and associated ATP servers  on a seller by seller basis, thereby gaining both space and time scalability in applications with large numbers of sellers or gaining flexibility in applications where seller organizations are geographically or economically separated. Each LFM  may compute availability for its parent seller by sending one or more component ATP requests  to the LFM  corresponding to the parent seller. Furthermore, multiple LFMs  may hold separate allocations for a particular product and fulfillment server  may distribute quoting activity across such LFMs  as needed to obtain adequate quotes. These and other features of system  provide or otherwise allow for advantageous parallelization, scalability, throughput, as well as distributed deployment of seller systems.","To achieve even further scalability, further breakdowns can be made. In one embodiment, a first fulfillment server  can work with LFMs  that each are assigned or otherwise correspond to a one or more designated products. Each such LFM  can in turn use an ATP server  that is a second fulfillment server  backed by separate LFMs  that have each been allocated a portion of the overall supply allocation for a designated product. The second fulfillment server  can be designed to communicate to its LFMs  so as to minimize and balance the processing load placed upon each of those LFMs . Alternatively, the various LFMs  may be given different time slices of the horizon to handle, and component quotations  may be broken down and staged accordingly. This may increase latency to optimize scalability with respect to size and throughput.","In one embodiment, the components of system  use a protocol referred to as \u201cRequest-Promise-Accept\u201d (RPA) in creating, managing, and fulfilling ATP requests relating to products. In general, according to the RPA protocol, a customer requests one or more products and a supplier offers a promise that meets the requirements of the customer request as closely as possible. Upon reviewing the offered commitment from the supplier, the customer either accepts or rejects the promise. If the customer accepts the promise, both customer and supplier generally consider this acceptance to form a binding agreement. In certain situations, a customer cannot freely cancel an acceptance within a specified time interval because of this commitment. The RPA protocol was developed as the basis for managing supply and demand requests between autonomous planning domains of a distributed supply chain as part of the RHYTHM supply chain planner (SCP) engine from I2 TECHNOLOGIES, INC.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 2 through 5","b":["10","10"]},"ATP Request Workflow",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["30","12","12","30","16","16","30","22","32","22","32","14","34","34","16","16","34","36","12"]},"Initiate ATP Request [Client]","In one embodiment, to initiate ATP request , client  or an associated user may be required to provide appropriate identification and security information. Client  may support default business rules or other constraints according to a user profile, a customer profile, or other suitable definitions. When the user accesses an ATP request screen associated with client , the screen may be populated with default parameters according to such definitions. The user may then optionally adjust some or all of these parameters to suit the needs of the particular ATP request . Such parameters may include shipping requirements, preferences with respect to product sourcing, product alternates or substitutions, and ship-to location, price targets, and any other appropriate parameters. The user may select from a table of available products, organized according to product group or in another suitable manner, using a product catalog, search engine, or otherwise. Once the user selects one or more products, the user may specify desired quantities, desired due dates, and any additional parameters such as those discussed above. The user may also logically group request line-items for shipment scheduling purposes. Client  executes an ATP request submission function when ATP request  is completely specified, sending ATP request  to fulfillment server .","ATP request  may be structured in a three-level parent-child hierarchy that includes a request object, a request line-item object, and a request line-item delivery object, although any suitable data or message structure may be used without departing from the intended scope of the present invention. As an example, an alternative three-level structure for ATP request  might include a request object that contains a list of one or more request delivery objects, each containing one or more request line-item objects.","Request Attributes","In one embodiment, the request object has the following attributes or otherwise supports the following information, in any suitable combination and without limitation: (1) user ID\u2014user of client  submitting the request; (2) customer ID\u2014used to determine business constraints relevant to request; (3) customer request ID\u2014assigned at client  and used primarily for tracking purposes; (4) request ID-assigned at fulfillment server  and used for subsequent processing and administrative activities; (5) currency\u2014the preferred currency for request, possibly defaulted from profiled business constraints; (6) sales channel (seller)\u2014sales channel for request, useful where ATP servers  provide allocation functionality based on a multi-level channel hierarchy and seller determines channel from which to consume ATP; (7) request rank\u2014numeric or other ranking of request relative to other requests for same product, useful as sort criterion where ATP servers  provide functionality relative to differential ranking of requests within order scheduling process, such as when allocating scarce supply in light of supply problems; (8) ship-to\u2014ship-to location for request, which may default to each request line-item; (9) override customer constraints\u2014allows user to override business constraint processing functionality of fulfillment server  such that the responses from LFMs  are not constrained; (10) total price target\u2014user-specified total price target for request, which fulfillment server  may consider in evaluating the responses from LFMs  and, if not met, may indicate in resulting quotation; (11) alternates\/substitutes allowed logical (yes\/no) parameter defaulted from profiled business constraints, which user may be able to selectively override and fulfillment server  may use in processing request; (12) alternate location acceptable\u2014logical parameter defaulted from the profiled business constraints, which user may be able to selectively override and fulfillment server  may use in processing request; (13) ship complete\u2014logical parameter defaulted from profiled business constraints, which the user may be able to selectively override and fulfillment server  may use in processing request such that component quotations short of the request quantity attribute are rejected; (14) partial\/cancel\u2014logical parameter defaulted from profiled business constraints, which user may be able to selectively override and fulfillment server  may use in processing request such that late promises (unfulfilled portions of request) are either dropped or carried as backlog; (15) ship on-time\u2014logical parameter defaulted from profiled business constraints, which the user may be able to selectively override and fulfillment server may use in processing request according to whether it is acceptable to receive early or late component promises from LFMs ; (16) short proportional logical parameter defaulted from the profiled business constraints, which user may be able to selectively override and fulfillment server  may use in processing request such that promises among logically associated request line-items are reduced (shorted) in proportion in to another shorted request line-item; (17) initial date requested\u2014date request first submitted to fulfillment server  for quotation; (18) last date requested\u2014date request last submitted to fulfillment server  for re-quotation, if any; (19) date quoted\u2014date request last quoted, if any; (20) date accepted\u2014date client  last accepted request, if any; (21) date rejected\u2014date client  last rejected request in full, if any; (22) date promised\u2014date request last promised, if any; (23) date canceled\u2014date request canceled, if any; and (24) date queued\u2014date request last queued, if any.","In addition, the request object may support a request status field that fulfillment server  updates at certain milestones during the life of ATP request , including but not limited to: (1) \u201cfailed request\u201d\u2014request submitted for initial quotation or re-quote, but one or more request line-items do not meet requirements; (2) \u201cpending quotation\u201d\u2014request submitted for initial quotation or re-quoted, but resulting quotation yet to be processed; (3) \u201cfailed quotation\u201d\u2014fulfillment server  determined quotation failed to meet profiled business constraints for request; (4) \u201cpending acceptance\u201d\u2014fulfillment server  processed quotation and sent it to client , but client  yet to respond; (5) \u201cacceptance not received\u201d\u2014quotation confirmation not received from client  by date and time specified in accept-by attribute, such that quotation essentially null and void; (6) \u201crejected\u201d\u2014fulfillment server  processed a rejection and sent it to LFMs ; (7) \u201cpending promise\u201d fulfillment server  processed quotation confirmation, sent it to LFMs , and is now monitoring for component promise responses from LFMs ; (8) \u201cpromised\u201d fulfillment server  received component promises and has sent resulting promise to client ; (9) \u201cfailed promise\u201d\u2014fulfillment server  has not yet received component promises from LFMs  and has thus sent failure notification to client ; (10) \u201cpending cancellation\u201d\u2014fulfillment server  processed a cancellation, sent it to LFMs , and is monitoring confirmation responses from LFMs ; (11) \u201ccanceled\u201d fulfillment server  received requisite cancellation confirmations from LFMs  and sent confirmation to client ; and (12) \u201cqueued\u201d\u2014fulfillment server  processed a request queue command and is monitoring the request for re-quotation.","Request Line-Item Attributes","In one embodiment, the request line-item is an object having the following attributes or otherwise supporting the following information, in any combination and without limitation: (1) request ID\u2014links request line-item to request; (2) request line-item ID\u2014assigned at fulfillment server ; (3) ship-to\u2014default ship-to address for request line-item, which is defaulted from request, user may be able to selectively override, and is defaulted to request line-item delivery; (4) accept by\u2014date and time by which user must accept quotation; (5) promise by\u2014date and time by which fulfillment server  must respond with promise; (6) product ID\u2014requested product for the request line-item; (7) product UOM\u2014primary unit of measure (UOM) for the requested product; (8) request quantity\u2014quantity or quantity range of product requested, which must equal combined delivery quantities if multiple request line-item deliveries are defined; (9) request date\u2014date or date range product is required to arrive at customer ship-to location, which user may override if there are multiple request line-item deliveries for the request line-item; (10) category\/attribute category\/attribute combinations for the requested product; (11) line-item grouping relates multiple request line-items as logical grouping for delivery coordination, where grouping may represent configuration, bundled package of products, set of items that must ship together, or any other suitable grouping; (12) line-item price target\u2014user-specified target price for request line-item, which fulfillment server may consider when evaluating ATP server responses and, if not met, may indicate in the resulting quotation; (13) preferred product\/supplier\u2014defaulted from profiled business constraints, which user may be able to selectively override and fulfillment server  uses when sourcing request line-item; (14) alternates\/substitutes allowed\u2014defaulted from profiled business constraints, which user may be able to selectively override and which fulfillment server  may use to process request line-item; (15) preferred alternates\/substitutes\u2014defaulted from profiled business constraints, which user may be able to selectively override and which may allow fulfillment server  and supplier to cooperate in selecting available alternates or substitutes for requested product; (16) mandatory\u2014whether request line-item is mandatory relative to others in its grouping, such that insufficient quantities of a mandatory item may result in a failed quotation; (17) lot size\/multiple\u2014defaulted from basic product definition, which user may be able to selectively override and fulfillment server  may use in processing request line-item such that ATP server response quantities are rounded accordingly; (18) ship complete\u2014defaulted from the profiled business constraints, which the user may be able to selectively override and fulfillment server  may use in processing request line-item; (19) partial\/cancel\u2014defaulted from profiled business constraints, which user may be able to selectively override and fulfillment server  may use in processing request line-item such that it may be dropped if not completely fulfilled; (20) ship on-time\u2014defaulted from profiled business constraints, which the user may be able to selectively override and fulfillment server  may use in processing the request line-item to reject late or early promises; (21) LFM response status fulfillment server  monitors after brokering component ATP request to LFMs , such that when all the component quotations have been received fulfillment server  may begin evaluating quotation; (22) LFM-initiated event status\u2014maintained at fulfillment server , such that if a planning event affects supply, LFM  notes this and informs fulfillment server  so that fulfillment server  may re-evaluate status of request relative to profiled business constraints and notify user of any change in request status; and (23) request line-item status\u2014updated at certain milestones in the life cycle of the request line-item.","Request Line-Item Delivery Attributes","In one embodiment, the request line-item delivery is an object having the following attributes or otherwise supporting the following information, in any suitable combination and without limitation: (1) request line-item ID\u2014links request line-item delivery to request line-item; (2) request line-item delivery ID\u2014assigned at fulfillment server ; (3) ship-to\u2014default ship-to address for the request line-item delivery, which is defaulted from request line-item and user may selectively override; (4) request quantity\u2014quantity or quantity range of product requested, which must equal request line-item request quantity; (5) request date\u2014date or date range product is required to arrive at the customer ship-to location for the request line-item delivery, which user may be able to override if there are multiple request line-item deliveries for a request line-item; and (6) category\/attribute\u2014category\u2014attribute combinations for the request line-item delivery, which the user may be able to selectively override if there are multiple request line-item deliveries for a given request line-item.","Process ATP Request [Fulfillment Server]","Each of the line-items associated with ATP request  may be fulfilled from a logically or geographically distinct ATP server . In this workflow, the primary tasks of fulfillment server  are to decompose ATP request  into individual request line-items, broker resulting component ATP requests  against the distributed network of ATP servers  using network  and LFMs , evaluate component quotations  received from LFMs , and send a unified quotation  to client  using network . If multiple deliveries have been specified for a given request line-item, fulfillment server  creates a separate component ATP request  for each delivery. Some or all component ATP requests  may be pre-sourced to particular LFMs  according to customer business constraints, user preferences, or supplier-preferred sourcing rules. In the alternative, sourcing preferences may be unspecified, such that multiple LFMs  have an opportunity to provide quotation responses. In one embodiment, fulfillment server  decomposes and encapsulates customer and other suitable business constraints into component ATP requests  before sending them to LFMs .","For each product, a supplier may specify minimum and maximum order quantity requirements. In one embodiment, if the parameters of such requirements have been specified, fulfillment server  evaluates at the outset whether each request line-item meets such requirements. If any request line-items do not meet specified requirements, a failure response is generated and sent to the requesting client  using network . In this case, fulfillment server  update the status of ATP request  and possibly of the failed component ATP requests  to \u201cfailed request.\u201d","Fulfillment server  may attempt to define the sourcing for each request line-item according to supplier or location. Fulfillment server  may then specifically target the component ATP requests  to particular LFMs . Because the user may have overridden profiled default constraints, fulfillment server  first evaluates the request line-item and request line-item delivery details, then checks the alternate supplier and location sourcing attributes to determine whether alternates are allowed for ATP request . If alternates are not allowed, then the primary relationship specified in ATP request  will be honored. If alternate sourcing is allowed, then the user, customer, or other alternate sourcing preferences take precedence. If no such sourcing preferences have been specified, fulfillment server  may check for the existence of any supplier default preferences. If no specified preferences exist for the supplier either, component ATP requests  may be marked \u201cunspecified\u201d relative to the target LFM . In this case, multiple LFMs  may be allowed to service and respond to component ATP requests  as appropriate.","Fulfillment server  may attempt to define alternate or substitution preferences for ATP request . Fulfillment server  may include alternate product information in component ATP requests . Since the user may have selectively overridden profiled default constraints, fulfillment server  first evaluates request line-item and request line-item delivery details, then checks ATP request  to determine whether alternates or substitutions are allowed. If not allowed, then the primary relationship specified in ATP request  are honored. If alternate or substitute products are allowed, then user, customer, or other suitable alternate or substitution preferences take precedence. If no such preferences are specified, fulfillment server  may check for any supplier default preferences. If no specified preferences exist for the supplier either, component ATP requests  may be marked as \u201cunspecified\u201d relative to alternates and substitutions. In this case, LFMs  may respond to component ATP requests  with multiple product options.","Fulfillment server  generates the component ATP requests  with embedded business constraints. Since the user may have interactively overridden profiled default constraints, fulfillment server  uses request line-item and request line-item delivery details for defining attributes of component ATP request . In one embodiment, the following constraints are defined, in any suitable combination and without limitation: request quantity, ship complete, partial\/cancel, ship on-time, alternates\/substitutes allowed, preferred alternates\/substitutes, lot size\/multiples, and consume forward\/backward boundaries. Fulfillment server  may also indicate that component ATP request  is to be further constrained in some manner according to profiled business constraints. Once component ATP requests  have been generated, fulfillment server  sends the component ATP requests  to one or more LFMs  for servicing using network . Fulfillment server  may also update the status of ATP request  and possibly component ATP requests  to \u201cpending quotation.\u201d","In one embodiment, fulfillment server  computes or otherwise generates a sequence of component ATP requests  that it sends to a particular LFM  associated with a first component ATP request  in the sequence. The target LFM  accepts the sequence, processes the component ATP request  specifically targeted to it, and then passes resulting component quotations or component promises, along with remaining component ATP requests  in the sequence, to LFM  targeted by the next component ATP request . In turn, that LFM  accepts the sequence, processes the component ATP requests  specifically targeted to it, and passes resulting component quotations or component promises, along with any remaining component ATP requests  in the sequence, to the LFM  targeted by the next component ATP request . Each such LFM  may compute its component quotations or component promises such that they satisfy all suitable business constraints relative to component quotations or component promises made by other LFMs  earlier in the sequence. Fulfillment server  receives the sequence of resultant component quotations or component promises from the last such LFM  and generates a combined quotation or promise corresponding to the ATP request  from client .","Component ATP Request Attributes","In one embodiment, component ATP request  is an object having some or all attributes of the request line-item and request line-item delivery objects. Fulfillment server  embeds business constraints into the component request that are relevant to functions of LFMs . The component request may have the following attributes or may otherwise support the following information, in any suitable combination and without limitation: (1) component request ID\u2014assigned at fulfillment server  when it creates component request; (2) LFMID\u2014target LFM  for component request, which may remain unspecified where sourcing relationship is not specified or derived at fulfillment server  and in which case any LFM  is free to respond to the component request if it can meet requirements; (3) fulfillment server ID\u2014network address or other identifier for fulfillment server , useful in environment having multiple fulfillment servers ; (4) sales channel (seller) for component request; (5) request rank for parent request; (6) request line-item ID links component request to request line-item; (7) request line-item delivery ID; (8) product ID\u2014may correspond to product ID known to one or more target LFMs  and possibly the corresponding ATP servers ; (9) product UOM\u2014may correspond to product UOM used at one or more target LFMs  and possibly the corresponding ATP servers ; (10) request quantity; (11) request date; (12) category\/attributes; (13) ship complete; (14) partial\/cancel; (15) ship on-time; (16) lot size\/multiples; (17) alternates\/substitutes allowed; (18) preferred alternates\/substitutes; and (19) consume forward\/backward boundaries\u2014defines delivery window the customer is willing to accept, which may control how far forward or backward from the request date ATP servers  will search for available quantities.","In addition, the component request object may support a request status field that fulfillment server  updates at certain milestones in the life cycle of the component request, including but not limited to: (1) \u201cpending quotation\u201d\u2014component request has been submitted for initial quotation or re-quoted, but resulting quotation not processed; (2) \u201cfailed quotation\u201d\u2014fulfillment server  determined component quotation failed to meet requirements for the component request; (3) \u201cpending quotation confirmation\u201d\u2014fulfillment server  has processed quotation and transmitted it to client , which has yet to respond; (4) \u201cconfirmation not received\u201d confirmation not received from client  by date and time specified in accept-by attribute, such that the quotation is essentially null and void; (5) \u201crejected\u201d fulfillment server  has processed rejection and sent it to LFMs ; (6) \u201cpending promise\u201d\u2014fulfillment server  has processed the quotation confirmation, sent it to the LFMs  as component confirmations, and is monitoring promise responses; (7) \u201cpromised\u201d\u2014fulfillment server  received requisite component promises and sent the resulting promise to client ; (8) \u201cfailed promise\u201d\u2014fulfillment server  has not received requisite component promises and has sent resulting failure notification to client ; (9) \u201cpending cancellation\u201d\u2014fulfillment server  processed a cancellation, sent it to LFMs , and is monitoring confirmation responses; and (10) \u201ccanceled\u201d fulfillment server  received component cancellation confirmations from LFMs  and sent cancellation confirmation to client .","Process Component ATP Requests [LFM]","Component ATP requests  from fulfillment server  are received at each of the appropriate LFMs . As discussed above, an LFM  is generally responsible for managing component ATP requests  and communicating between fulfillment server  and associated ATP server  over the life of ATP request . In one embodiment, LFM  is involved in quotation, promise, acceptance, shipping, and archive operations for associated ATP server . If specified sourcing preferences exist, component ATP requests  may include this information, such that LFMs  may identify and process component ATP requests  accordingly. If there are no specified sourcing preferences, LFMs  may be capable of identifying relevant component ATP requests  based on the user, customer, or product. At a particular ATP server location, LFM  receives component ATP request  and generates a quotation request to ATP server  using the command syntax suitable for the particular associated planning engine. As part of this processing, LFM  evaluates the business constraints encapsulated in component ATP request  and acts accordingly.","Planning engines may vary relative to the requirements of this interface. As an example, FP engines typically do not maintain ATP from which request transactions will consume allocated product availability. Each component request is planned against a representation of finished goods inventory, available materials or capacity, and other suitable factors to determine product availability. There may be little functionality for controlling the output structure of the resulting quotation response from the standpoint of shipment timing and lot sizing. In this situation, LFM  may submit the quotation request as a planning transaction and evaluate the quotation response according to the business constraints encapsulated in component ATP request . If the response from ATP server  does not meet these requirements, LFM  identifies this and sends a failure notification to fulfillment server .","For example, if the ship complete attribute within component ATP request  requires the request to be met in full, and the quotation response from ATP server  was less than the requested quantity attribute, then LFM  might indicate the component quotation  as having failed and provide an appropriate descriptive failure annotation. This front-line evaluation may be important since, depending on the planning engine, the ATP server response may be multi-dimensional (offering multiple options). Providing response evaluation at the LFM level rather than at the fulfillment server level allows failure conditions to be identified and summarized before component quotations  are sent back to fulfillment server , thereby reducing overall network load.","As an example of a multi-dimensional ATP server response, consider a given request line item (e.g., 100 wheels on May 8), for which the response might be that 60 wheels are available on May 8 for $22, and\/or 30 wheels on May 10 for $16, and\/or 100 wheels on May 12 for $16. These are multiple options for the line-item quote. System  may allow for the incorporation of rules and ranges. For example, the ability to take 30 wheels on May 10 and the remaining 70 wheels on May 12 may be constrained if the option for $16 on May 12 includes a quantity restriction inconsistent with this.","As a further example, consider a three line-item request (e.g., 100 wheels, 25 simple axles, and 25 complex axles delivered proportionally on May 8). Individual line-item quotes can be computed as above, with multiple options, then combined in some suitable manner. For example, the simple axles might be available on May 9, 15 units, and May 11, 25 units, for $10. The complex axles might be available on May 8, 10 units, and May 10, 25 units, for $25. Ignoring the proportionality business constraint included in the request, delivery of products satisfying the order might occur over several days, May 8 through May 12, as appropriate. A proportionality business constraint, however, might mandate that line-items only be delivered in amounts proportional to how they were requested, since for example it may do no good to be delivered wheels if no axles are delivered. The above might result in the following exemplary multi-dimensional quote that includes multiple line-item quotes and obeys an exemplary proportionality business constraint:\n\n","In one embodiment, system  supports many different business constraints, some of which may need one or more extra fields to be specified. To model this, the business constraint field could be an extension selector, as described in U.S. Pat. Nos. 5,764,543 and 5,930,156, both of which are incorporated by reference herein. Additional extension fields might become operative when a corresponding extension value is inserted into the extension selector field. For example only and not by way of limitation, a maximum variance constraint might be specified on ATP request  and an additional field added to the request model called max_variance_percentage that allows the client  or an associated user to specify the amount of variance from a requested quantity that will be tolerated. That field may not exist and may not take up any memory space when the maximum variance constraint is not specified. System  may allow such an extensible model or capability to be used with respect to any or all business constraints described herein, providing significant flexibility and an important technical advantage over flat or other previous modeling techniques.","Within system , various LFMs  may compute a variety of partial quotations or partial promises, for example, containing no detail of supply availability. When this occurs, fulfillment server  may be tasked with creating a combined promise using the partial quote information. Worse, since the LFMs  may be backed by inferior ATP servers  incapable of providing suitably rich ATP information, fulfillment server  may need to deal with a varied sophistication of component quotations or component promises and still form the best possible quotations or promises for ATP request  as a whole. Performing this task properly may require any number of business constraints to drive the interpretation of the various component quotations or component promises, or to mutate the various component quotations or component promises as appropriate. Extensibility within the models representing LFMs  allows different constraints for mutating component quotations or component promises to be modeled. The present invention contemplates extensibility with respect to any suitable business constraints described herein.","In contrast to the FP engine situation, where ATP server  is associated with an SCP engine there is usually significant representation relative to allocations as well as, for example, order timing and lot sizing constraints. As a result, LFM  is able to pass these constraints along from component ATP request  to ATP server . In particular with respect to SCP engines, LFM  may need to distinguish between quotation and promise workflows since the initial quotation request to ATP server  may be only an inquiry that does not consume any allocated product or available material or capacity. Resulting quotation responses are sent from ATP server  back to LFM . In EDI-based exchanges, however, a quotation request to ATP server  may actually result in an ATP-consuming promise.","LFM  evaluates the quotation response from ATP server  according to the business constraints encapsulated in the originating component ATP request . Once again, the processing requirements of this evaluation depend on the sophistication of the planning engine associated with ATP server . With an SCP engine, this quotation response may encompass the business constraints such that processing responsibility of LFM  is limited. In the case of an FP engine, however, LFM  may need to closely evaluate the quotation response before a component quotation  is generated. ATP server  may be capable of returning one or more quotation responses, each of which must be evaluated relative to the applicable business constraints.","After evaluating quotation responses from ATP servers , LFM  computes a component quotation  that includes product availability information and rules on how fulfillment server  may mutate component quotation . LFM  sends component quotation  back to fulfillment server . If multiple quotation responses are deemed valid according to the constraints, LFM  generates and sends multiple component quotations  back to fulfillment server . If component ATP request  fails to yield a valid component quotation , LFM  may send an annotated failure notification to fulfillment server . Such failure notifications may include, for example, \u201cinsufficient product quantities\u201d or \u201cunable to meet shipment delivery or lot sizing requirements.\u201d As described below, fulfillment server  mutates component quotations , in accordance with the information and rules they provide, such that together component quotations  satisfy the business constraints applied at fulfillment server  or asserted along with ATP request .","Component Quotation Attributes","In one embodiment, each component quotation is an object with the following attributes or supporting the following information, in any appropriate combination and without limitation: (1) component quotation ID\u2014assigned at LFM  when it creates the component quotation; (2) component request ID; (3) fulfillment server ID; (4) product ID\u2014may not directly correspond to product specified in component request since an alternate or substitute may have been specified; (5) product UOM may not correspond to one specified in component request since ATP server  may have responded in a different UOM than that requested; (6) promise quantity quantity of product for the component quotation delivery; (7) promise date\u2014date product delivery is promised to ship by ATP server , which represents shipment from manufacturing or distribution location rather than customer delivery date; (8) promise lot; (9) promise attributes\u2014list of category\/attribute combinations for component quotation; (10) promise type\u2014type of response, which LFM  updates (e.g., \u201cas requested,\u201d \u201calternate\/substitute,\u201d \u201coption\u201d); (11) unit price\u2014unit price for product in base currency of ATP server ; (12) quotation status\u2014LFM  updates, indicating whether quotation failed or succeeded; and (13) failure reason\u2014brief description of reason quotation failed (e.g., insufficient supply availability, business constraints could not be met), which LFM  evaluates, updates, and sends to fulfillment server .","Process Component Ouotations [Fulfillment Server]","Once fulfillment server  has processed and sent component ATP requests  to LFMs , fulfillment server  monitors the completion of the resulting component quotations . In one embodiment, quotation  may be deemed complete when each component ATP request  has received at least one component quotation  or failure notification. Suppliers may respond to the component ATP requests  with multiple acceptable ATP options. Fulfillment server  uses these component quotations  to generate and send to client  a multi-dimensional (variable on product options, lead time, and price, for example) quotation . When all the component quotations  have been received and quotation  is complete, fulfillment service  evaluates the overall quotation  according to the business constraints specified in the originating ATP request . As a result, fulfillment server  determines whether the requirements for ATP request  have been met and filters any non-conforming supplier responses from the unified quotation  to be presented to client . In one embodiment, fulfillment server  mutates component quotations , according to the information and rules they provide, such that together component quotations  satisfy the business constraints applied at fulfillment server  or asserted along with ATP request . Because some clients  may not be capable of handling a multi-dimensional quotation , the client interface of fulfillment server  may also provide for more restrictive use of quotation information according to particular needs.","In general, fulfillment server  attempts to provide a \u201cbest fit\u201d response to client , according to its assessment of quotation  against customer and supplier business constraints. If, for example, the ship on-time attribute for ATP request  specifies that shipment must be received on time, and one or more component quotations  are in some way insufficient, fulfillment server  may assign a failure status to ATP request  in its entirety. Fulfillment server  may simply pass along to client  failure status annotations received from LFMs . Instead or in addition, fulfillment server  may assign failure evaluation annotations of its own. For example, while LFMs  may have generated valid component quotations , fulfillment server  may determine a failure of the overall quotation  based on quotation pricing not meeting business constraints for the customer. If a particular request line-item yields multiple component quotations , each component quotation  must be evaluated relative to the specified constraints. All valid component quotations  for the request line-item are transmitted to client  in the form of quotation  using network .","If the ATP server response is satisfactory in one or more ways (based on the products, lead times, or prices, singly or in any combination) then fulfillment server  may perform additional functions before generating quotation  for communication to client . For example, client  may require calculation of pricing, taxes, freight, or delivery schedule. Depending on the implementation, this may be accomplished using specialized routines or may involve incorporation of one or more background planning processes that rely on, for example, transportation and logistics planning packages. The use of such \u201cauxiliary\u201d processes may be optionally delayed until client  confirms all or a part of quotation .","In one embodiment, fulfillment server  provides a pricing engine component that operates according to the needs of the customer. For example, when fulfillment server  is implemented in conjunction with a packaged ERP system, the customer may prefer that pricing be managed within the ERP system boundaries. In one embodiment, if fulfillment server  manages pricing, each component quotation  is first priced out at list and then prevailing discounts are applied based upon pre-specified line, request, or volume-level programs. Multiple discounts may be applicable to a given ATP request . Pricing and discount programs may be specified according to the customer, customer location, supplier, agreement, product group, product, or any other suitable parameter or set of parameters.","The multi-dimensional response capability of fulfillment server  may present a special problem relative to pricing functionality. That is, if more than one option is presented to the user for a particular request line-item, it may be difficult for fulfillment server  to evaluate the order as a whole for discounting purposes. Where multiple component quotations  exist for a particular component ATP request , pricing for ATP request  cannot generally be represented as a simple sum total with discount. Instead, the ATP request price becomes a range with minimum and maximum bounds and is not finalized until the ATP request options are confirmed. At that point, pricing is re-calculated and presented to the user upon promise confirmation.","When fulfillment server  has completed evaluating quotation  relative to the specified constraints of ATP request , and quotation  has been determined to meet these requirements, fulfillment server  sends quotation  to client  for review and quotation confirmation. If the requesting client  is no longer active, quotation  may be stored until it can be queried at a later time. The structure of quotation  models that of the originating ATP request . Quotation , however, may be potentially more complex than ATP request  since it may contain multiple responses for each request line-item and request line-item delivery.","Quotation Attributes","In one embodiment, the quotation is an object having the following attributes or otherwise supporting the following information, in any appropriate combination and without limitation: (1) quotation ID\u2014assigned at fulfillment server  and may be same as request ID; (2) request ID; (3) maximum total price (base currency) maximum total price of quotation calculated at fulfillment server  in the base currency, representing upper bound of price quotation; (4) minimum total price (base currency)\u2014minimum total price of quotation calculated at fulfillment server  in the base currency, representing lower bound of price quotation; (5) maximum total price (customer currency)\u2014maximum total price of quotation calculated at fulfillment server  in customer-preferred currency; (6) minimum total price (customer currency)\u2014minimum total price of the quotation calculated at fulfillment server  in customer-preferred currency; (7) quotation status\u2014fulfillment server  updates during life of quotation (e.g., \u201cfailed quotation,\u201d \u201cpending acceptance,\u201d \u201caccepted,\u201d \u201crejected,\u201d \u201cacceptance not received\u201d); (8) date accepted\u2014date and time quotation confirmation was processed, if any; and (9) date rejected\u2014date and time quotation was rejected, if any.","Quotation Line-Item Attributes","In one embodiment, the quotation line-item is an object having the following attributes or otherwise supporting the following information, in any combination and without limitation: (1) line-item ID\u2014assigned at fulfillment server , accommodating multiple quotation responses per request line-item; (2) quotation ID\u2014links quotation to quotation line-item; (3) product ID\u2014may not directly correspond to product specified in originating request line-item since an alternate or substitute may be quoted instead; (4) product UOM\u2014may not correspond to UOM specified in originating request line-item since ATP server  may have responded in different UOM than requested; (5) offered quantity\u2014quantity associated with quotation line-item; (6) offered date\u2014date quantity will be available, which may represent the shipment date given by ATP server  or a coordinated customer delivery date, depending on the implementation; (7) offered lot\u2014lot identifier for quotation line-item; (8) offered attributes\u2014list of the category\/attribute combinations for quotation line-item; (9) quotation type\u2014type of response (e.g., \u201cas requested,\u201d \u201calternate\/substitute,\u201d \u201coption\u201d); (10) offered unit price (base currency)\u2014unit price associated with quotation line-item expressed in the base currency of fulfillment server ; (11) offered total price (base currency)\u2014computed total price associated for quotation line-item expressed in base currency of fulfillment server ; (12) offered unit price (customer currency)\u2014unit price for quotation line-item expressed in customer-preferred currency; (13) offered total price (customer currency)\u2014computed total price for the quotation line-item expressed in the customer-preferred currency; (14) quotation line-item status\u2014logical parameter fulfillment server  updates based on corresponding component quotation status and which indicates whether request line-item succeeded or failed in getting acceptable quotation; (15) failure reason brief description of reason for quotation failing; and (16) quotation line-item acceptance status\u2014indicates whether quotation line-item was accepted or rejected and which fulfillment server  uses in generating component quotation confirmation transactions to LFMs .","In one embodiment, the quotation line-item delivery is an object having the following attributes or otherwise supporting the following information, in any suitable combination and without limitation: (1) quotation line-item delivery ID\u2014assigned at fulfillment server  and accommodates multiple quotation responses per request line-item delivery; (2) quotation line-item ID; (3) offered quanfity; (4) offered date; (5) offered lot; and (6) offered attributes.","Quotation Confirmation Workflow",{"@attributes":{"id":"p-0089","num":"0093"},"figref":"FIG. 3","b":["12","40","36","12","40","16","16","42","22","20","22","42","14","22","44","22","44","16","16","44","46","46","12"]},"Generate Quotation Confirmation [Client]","When quotation  is received, client  or an associated user reviews and may selectively accept or reject one or more individual quotation line-items or quotation  as a whole. Depending on the capabilities of ATP servers  and the business constraints relative to ATP request , one or more valid options may be made available for any given request line-item. Client  or an associated user may then select from multiple options before accepting quotation  in whole or in part. Once this process has been completed, client  sends quotation confirmation , including all the acceptances and rejections, to fulfillment server  for processing. Because quotation confirmation  may accept only a subset of quotation , it is quotation confirmation  rather than quotation  that will form the basis of the resulting promise . If client  considers quotation  unacceptable, client  may queue ATP request  for later re-submission. Default constraints specify the period and frequency of request re-submission (re-quote), according to particular needs.","In one embodiment, quotation confirmation  is an object having the following attributes or otherwise supporting the following information, in any combination and without limitation: (1) quotation ID; (2) quotation line-item ID; and (3) quotation line-item status\u2014indicates whether quotation line-item was accepted, rejected, canceled, or queued, used at fulfillment server  to generate component quotation confirmations  for submission to LFMs .","Process Quotation Confirmation [Fulfillment Server]","Quotation  is a non-binding statement of product availability. Once client  accepts quotation  in whole or in part, fulfillment server  commits the resulting quotation confirmation  across the distributed network of LFMs  in the form of component quotation confirmations , consuming allocated supply at each appropriate ATP server location. In one embodiment, ATP request  is a distributed and persistent object that is monitored and maintained at each of the respective commitment locations (LFMs ). Accordingly, until ATP request  is either fulfilled or canceled, component ATP requests  remain a part of a distributed order backlog that fulfillment server  intelligently manages.","In one embodiment, fulfillment server  is capable of processing a variety of responses from client  or an associated user, including full or partial acceptance, rejection, re-quotation, changes, cancellations, inquiries, and any other appropriate user responses. If a quotation line-item is accepted, it must be confirmed at LFMs  since LFMs  will in general not have made supply reservations based on the corresponding component quotation . As a result of the lack of reserved supply, however, the line-item may fail such that fulfillment server  needs to notify LFMs  so that they may take some action if appropriate. In one embodiment, fulfillment server  may request LFMs  to provide component promises  along with component quotations , but with a relatively short accept_by date. Fulfillment server  may then accept component promises  when it receives quotation confirmation  from client . Fulfillment server  is tasked with properly combining accept by dates from LFMs  associated with a particular ATP request . The resulting accept_by date should generally allow fulfillment server  time to compute the quotation  (or promise ) and, preferably, may include some padding. Since most of the responses from LFMs  may not reflect the dates products will actually be delivered to the customer, but may instead be statements of supplier shipment schedules, fulfillment server  may provide the ability to derive customer delivery dates for the multi-item order, possibly as an optional post-processing step to the promise action.","As discussed above, quotation confirmation  may be an object specifying the status of each quotation line-item as accepted, rejected, canceled, or queued. Fulfillment server  indicates the status on the corresponding component quotations , filters the acceptances from rejections on a line-item basis, and generates component quotation confirmations  for submission to LFMs . Fulfillment server  updates the status of the originating component ATP request  to \u201cpending promise.\u201d In one embodiment, component quotation confirmation  is an object that has the following attributes or otherwise supports the following information, in any suitable combination and without limitation: (1) component quotation ID; (2) LFM ID; and (3) component quotation status\u2014indicates whether component quotation accepted, rejected, or canceled.","Process Component Quotation Confirmations [LFM]","LFM  receives component quotation confirmation  and generates a promise request to ATP server  using command syntax appropriate to the associated planning engine. This transaction is similar to the original component request transaction, except that it seeks a firm commitment from ATP server  of product allocation or available materials or capacity. The confirmation transaction must also confirm the commitment corresponding to the desired component quotation , such that if the original component ATP request  received multiple component quotations , LFM  must confirm the specific quotation response the user specified at client . At this point, ATP server  responds with a firm promise, consuming appropriate allocated products or available materials or capacity. In some cases, it may also be appropriate to create the acceptance at this point. LFM  may eliminate rejected component quotations  based on the rejection commands or any other information received from client .","LFM  computes a component promise  that includes information and rules on how fulfillment server  may mutate component promise . When the promise response is received from ATP server , LFM  evaluates the response to ensure that it is consistent with component quotation confirmation , since it is possible that the promise response is different from the original component quotation . This may occur, for example, where a planning change has in some way altered product availability or when another component quotation confirmation  has resulted in the product allocation being consumed in the interim. When this occurs, LFM  notes this condition and evaluates whether the promise response still satisfies the business constraints specified in component ATP request . If so, LFM  generates a component promise  according to the promise response from ATP server . If multiple promise responses are deemed valid according to the constraints, LFM  generates and sends multiple component promises  back to fulfillment server . If component promise  differs in any way from the original component quotation , this may be noted in component promise . If component promise  no longer conforms to the business constraints specified in component ATP request , LFM  may generate an annotated or other appropriate failure notification for communication to fulfillment server . Exemplary annotations may include \u201cinsufficient product quantities\u201d or \u201cunable to meet shipment delivery or lot sizing requirements.\u201d","In one embodiment, component promise  is an object having the following attributes or otherwise supporting the following information, in any suitable combination and without limitation: (1) component promise ID\u2014assigned when LFM  creates the component promise and may be identical to the component quotation ID; (2)fulfillment server ID; (3) accept-by\u2014may indicate an expiration date for component promise by which an acceptance must be received or corresponding promise reservations may be released; (4) component promise status\u2014indicates whether the component promise has succeeded or failed; and (5)failure reason\u2014brief description of reason for the promise having failed, if any.","Process Component Promises [Fulfillment Server]","Once fulfillment server  has processed component quotation confirmations  and sent them to LFMs , it monitors completion of the resulting component promises . In one embodiment, promise  is considered complete when each of the originating component quotation confirmations  has received one or more component promises  or failure notifications. Fulfillment server  may also monitor the promise by attribute specifying the length of time fulfillment server  should wait for component promises  from LFMs . When this constraint is reached before all the component promises  have been received, such that the quotation confirmation  has essentially expired, fulfillment server  may generate an appropriate failure notification and send it to client . In formulating promise , fulfillment server  may take into account any accept-by attributes for component promises  and specify an accept-by attribute for promise  accordingly.","In one embodiment, once a component promise  expires, fulfillment server  and appropriate LFMs  release reservations of supply. Where fulfillment server  provided a stricter accept_by date than LFMs , fulfillment server  may need to send an indication of the release back to LFMs . Similarly, if promise  fails or gets rejected, fulfillment server  notifies LFMs  so that LFMs  can release suitable supply reservations.","When fulfillment server  receives component promises  from LFMs  and promise  is complete, fulfillment server  evaluates the overall promise  according to the business constraints specified in the original ATP request  to again evaluate the success of the overall response. This is done again during the promise generation phase because it is possible that one or more component promises  may be different from the original component quotations . Pricing may also need to be calculated again during the promise generation phase if any component promises  are different than original component quotations . In addition, if there were multiple component quotations  for a particular component ATP request , it may be necessary to calculate a final confirmed price. In one embodiment, all of the component promises  must be valid to achieve a successful promise .","In one embodiment, fulfillment server  may mutate or otherwise manipulate component promises , according to the information and rules they provide, such that together component promises  satisfy the business constraints applied at fulfillment server  or asserted along with ATP request . In addition to sending promise  to client , fulfillment server  may send the mutated component promises  back to originating LFMs , such that the LFMs  may adjust their reservations of supply appropriately.","If the overall response no longer meets requirements of ATP request , due to changes in product availability in the interval between quotation  and promise  or for any other reason, fulfillment server  may assign a failure status to promise  and annotate it with descriptive information before sending the promise  to client . Fulfillment server  may simply pass along failure status annotations received from LFMs . Instead or in addition, fulfillment server  may assign an annotation of its own. For example, although LFM  may have generated an acceptable component promise , fulfillment server  may determine that promise  fails overall based on promise pricing not meeting specified business constraints for the customer.","Fulfillment server  may include a delivery coordination engine component, depending on requirements of the customer. Without this capability, fulfillment server  would return the optimal shipment dates from the respective manufacturing and distribution locations rather than returning the delivery date to the customer. Delivery coordination may be accomplished using a relatively simple table-driven technique that links products, locations, and standard lead times. More sophisticated implementations may involve the use of an advanced planning engines for transportation and logistics optimization. In this scenario, it is likely that delivery coordination may be calculated in multiple phases. For example, a table-based standard lead time approach may be used in the initial promise generation phase to derive a preliminary delivery date. Because transportation planning optimization is generally most effective when the requirements of multiple deliveries are considered, a second phase of batch-oriented processing may be desirable to evaluate the entire request backlog. As a result of such second-phase processing, the delivery dates corresponding to the individual ATP requests  may be adjusted to reflect an optimized overall delivery plan.","When fulfillment server  has completed evaluating promise , has calculated pricing and delivery as appropriate, and the overall response is still deemed satisfactory, then fulfillment server  sends promise  (including all valid component promises ) to client  for confirmation. The structure of promise  models that of the originating quotation , but is potentially simpler than its quotation counterpart since quotation  may have been multi-dimensional whereas the promise  is discrete. If the requesting client  is no longer active, promise  can be queried at a later point.","Promise Attributes","In one embodiment, promise  is an object having the following attributes or supporting the following information, in any suitable combination and without limitation: (1) promise ID\u2014assigned at fulfillment server  and may be identical to quotation ID; (2) total price (base currency)\u2014total price of promise calculated at fulfillment server  in base currency; (3) total price (customer currency)\u2014total price of promise calculated at fulfillment server  in customer-preferred currency; (4) total tax (base currency)\u2014total tax associated with request calculated at fulfillment server  in base currency; (5) total tax (customer currency)\u2014total tax associated with request calculated at fulfillment server  in customer-preferred currency; (6) date confirmed\u2014date and time promise processed; (7) accept-by\u2014may indicate an expiration date for promise by which an acceptance must be received or some or all associated promise reservations may be released; (8) date canceled\u2014date and time promise was canceled, if any; and (8) date shipped\u2014date and time promise was fulfilled, if any.","Promise Line-Item Attributes","In one embodiment, the promise line-item is an object having the following attributes or otherwise supporting the following information, in any combination and without limitation: (1) promise line-item ID\u2014assigned at fulfillment server  and may be identical to quotation line-item ID; (2) product ID for promised product; (3) product UOM for promised product; (4)promised quantity for promise line-item; (5)promised ship date\u2014date promised quantity will be available to ship and representing shipment date given by ATP server ; (6) customer delivery date\u2014date promised quantity will arrive at the designated customer ship-to location and which may be calculated and updated using a transportation planning and logistics engine; (7) promised lot; (8) promised attributes; (9) promise type\u2014type of response for promise line-item (e.g., \u201cas requested,\u201d \u201calternate\/substitute,\u201d \u201coption\u201d); (10) promised unit price (base currency)\u2014unit price in fulfillment server base currency; (11) promised total price (base currency)\u2014computed total price in the fulfillment server base currency; (12) promised unit price (customer currency)\u2014unit price in the customer-preferred currency; (13) promised total price (customer currency) computed total price in the customer-preferred currency; (14) promise line-item status fulfillment server  updates according to the corresponding component promise status, indicating whether request line-item succeeded or failed in getting an acceptable promise response; (15) accept-by\u2014may indicate an expiration date for promise line-item by which an acceptance must be received or associated promise reservations may be released; (16)failure reason; (17) date\u2014time shipped; and (17) date canceled.","In one embodiment, the promise line-item delivery is an object having the following attributes or otherwise supporting the following information, in any suitable combination and without limitation: (1) promise line-item delivery ID\u2014assigned at fulfillment server  and possibly identical to the quotation line-item delivery ID; (2) promised quantity; (3) promised ship date; (4) customer delivery date; (5) promised lot; and (6) promised attributes.","Promise Acceptance Workflow",{"@attributes":{"id":"p-0115","num":"0119"},"figref":"FIG. 4","b":["12","50","46","12","50","16","16","52","22","20","22","52","14","22","54","22","54","16","56","12","18"]},"While this workflow describes an interactive promise acceptance scenario, the present invention contemplates non-interactive acceptance processing such as typically associated with EDI-based workflows. In some cases, it may be appropriate to perform concurrent quotation confirmation and promise acceptance processing. Separating the interactive quotation confirmation and promise acceptance processing is appropriate, however, if there is a likelihood that product availability may change in the interval between quotation confirmation  and acceptance . In this case, the user may want the ability to optionally reject promise  if it no longer reflects quotation . This type of scenario may be specific to SCP-based. ATP server environments. Those skilled in the art will appreciate that system  accommodates EDI-based and any other suitable workflows and that the present invention encompasses all such workflows.","Generate Acceptance [Client]","Once client  or an associated user has evaluated promise  received from fulfillment server , client  or the user may accept promise  in whole or in part. Client  generates a formal acceptance  corresponding to the originating ATP request  and sends it to fulfillment server  for processing.","Acceptance Attributes","In one embodiment, acceptance  is an object having the following attributes or otherwise supporting the following information, in any appropriate combination and without limitation: (1) acceptance ID\u2014assigned at fulfillment server  and may be identical to quotation ID and promise ID; (2) total price (base currency); (3) total price (customer currency); (4) total tax (base currency); (5) total tax (customer currency); (6) date accepted\u2014date and time acceptance was processed; (7) date canceled\u2014date and time acceptance was canceled, if any; and (8) date shipped\u2014date and time acceptance was fulfilled.","In one embodiment, the acceptance line-item is an object having the following attributes or otherwise supporting the following information, in any combination and without limitation: (1) acceptance line-item ID\u2014assigned at fulfillment server  and which may be identical to quotation line-item ID and promise line-item ID; (2) product ID; (3) product UOM; (4) promised quantity for the acceptance line-item; (5) promised ship date; (6) customer delivery date; (7) accepted lot\u2014lot identifiers associated with acceptance line-item; (8) accepted attributes\u2014list of category\/attribute combinations associated with acceptance line-item; (9) accept type type of response for acceptance line-item (e.g., \u201cas requested,\u201d \u201calternate\/substitute,\u201d \u201coption\u201d); (10) accepted unit price (base currency)\u2014unit price for acceptance line-item expressed in the fulfillment server base currency, likely to have been computed in the promising phase; (11) accepted total price (base currency)\u2014computed total price for acceptance line-item expressed in the fulfillment server base currency, likely to have been computed in the promising phase; (12) accepted unit price (customer currency)\u2014unit price for the acceptance line-item expressed in customer-preferred currency, likely to have been computed in promising phase; (13) accepted total price (customer currency)\u2014computed total price for the acceptance line-item expressed in the customer-preferred currency, likely to have been computed in promising phase; (14) acceptance line-item status\u2014logical parameter that fulfillment server  updates based on the corresponding component promise status and which indicates whether request line-item succeeded or failed in getting an appropriate acceptance; (15)failure reason\u2014brief description of reason for the failed acceptance, if any; (16) date shipped date and time acceptance line-item was shipped, if any; and (18) date canceled\u2014date and time acceptance line-item was canceled, if any.","In one embodiment, the acceptance line-item delivery is an object having the following attributes or otherwise supporting the following information, in any suitable combination and without limitation: (1) acceptance line-item delivery ID\u2014assigned at fulfillment server  and may be identical to the quotation delivery line-item ID; (2) acceptance quantity for the acceptance line-item delivery; (3) promised ship date; (4) customer delivery date; (5) promised lot\u2014lot identifiers associated with acceptance line-item delivery; and (6) promised attributes\u2014list of category\/attribute combinations for acceptance line-item delivery.","Process Acceptance [Fulfillment Server]","In one embodiment, acceptance  is an object specifying the status of each of the promise line-items as accepted, rejected, canceled, or queued. Fulfillment server  indicates the status on the corresponding component promises , filters acceptances from rejections on a line-item basis, and then generates component acceptances  for submission to LFMs . Fulfillment server  may also update the status of component ATP requests  as appropriate.","Process Component Acceptances [LFM]","When LFM  receives component acceptances from fulfillment server , it generates and executes an acceptance transaction in the syntax appropriate to the ATP server  and associated planning engine. This transaction is similar to the originating component quotation confirmation  except that it creates a formal acceptance to the existing promise . LFM  records the confirmation responses from ATP server  and sends corresponding component acceptance confirmations  back to fulfillment server  using network .","Process Component Acceptance Confirmations [Fulfillment Server]","Once fulfillment server  has processed and sent component acceptances  to LFMs , it monitors the completion of resulting component acceptance confirmations . In one embodiment, acceptance confirmation  is considered complete when each of the component acceptances  has received one or more component acceptance confirmations . When fulfillment server  has received all component acceptance confirmations  and the acceptance confirmation  is complete, fulfillment server  sends the final acceptance confirmation , including all valid component acceptance confirmations , to client  using network .","ATP Request Changes Workflow","In this workflow, client  queries an active ATP request , changes some or all portions of ATP request , and re-submits ATP request  to fulfillment server . Fulfillment server  then brokers the changed ATP request  across the distributed network of LFMs  and manages any non-conforming responses. For example, client  may re-quote the order in whole or in part with the intention of improving the promised quantities or the delivery dates associated with ATP request . Client  may also query an active ATP request and then cancel the ATP request , in which case fulfillment server  must propagate this cancellation to each of the LFMs  handling a portion of ATP request . In one embodiment, the cancellation effectively deletes ATP request  at each location of data persistence, including appropriate LFMs  and fulfillment server .","Initiate ATP Request Changes [Client]","Once ATP request  has been displayed at client  through inquiry, the user may be able to enter an \u201cedit request\u201d mode. In this mode, the user is able to change the request in any appropriate manner, for example, adding or deleting request line-items, changing required quantities and dates, or adjusting the associated business constraints. Client  or the user then re-submits the changed ATP request  or queues the changed ATP request  for future re-submission (re-quote). In one embodiment, if ATP request  has been completely fulfilled, changes may not be made. If ATP request  has been partially fulfilled, only request line-items that are still pending may be changed.","Process ATP Request Changes [Fulfillment Server]","Fulfillment server  evaluates the re-submitted ATP request  and determines the changes that have been made to any portion of the request structure (i.e. request, request line-item, or request line-item delivery). For changed portions of ATP request , fulfillment server  revises existing component ATP requests  accordingly. This may involve re-evaluating any sourcing, alternate or substitution, or other preferences as well as the specified business constraints. The changes may also include adding or individual request line-items. Once fulfillment server  has completed these revisions, resulting component ATP requests  are again sent out onto network  for servicing at LFMs . The status of each component ATP request  may be set to \u201cpending quotation\u201d or \u201cpending cancellation,\u201d as appropriate.","Process Component ATP Requests [LFM]","When LFM  receives changed component ATP request  from fulfillment server , LFM  generates and executes a request transaction in a syntax appropriate to ATP server  and the associated planning engine. At this point, changed component ATP request  is processed to ATP server  as though it was a new component ATP request . Any component ATP request cancellation may be processed to ATP server  as a deletion.","LFM  evaluates the response from ATP server  according to the business constraints that are specified in the changed component ATP request . Processing requirements for LFM  at this stage may be identical to those with respect to a new component ATP request . For cancellations, LFM  may update the status of any locally maintained component ATP request  or component quotation  as \u201ccanceled.\u201d LFM  receives the component quotation response from ATP server  and sends the constraint-compliant responses to fulfillment server  in the form of a new component quotation . Descriptive or other failure notifications may be created in the manner described above. If necessary, cancellation confirmations are also created and sent to fulfillment server .","Process Component Quotations [Fulfillment Server]","When fulfillment server  has processed and sent the changed component ATP requests  to LFMs, it monitors completion of the resulting component quotations . In one embodiment, quotation  is deemed complete when each originating changed component ATP request  has received one or more component quotations , failure notifications, or cancellation confirmations, as the case may be. Fulfillment server  may update the status of any ATP request  and quotation  maintained at fulfillment server  based on any cancellation confirmations received from LFMs .","Once component quotation  have been received and quotation  is deemed complete, fulfillment server  re-evaluates the overall quotation  according to the business constraints specified in the originating changed ATP request . Processing is identical to that of a quotation  for a new ATP request . Quotation pricing may be re-calculated from scratch or otherwise in light of the existing confirmed prices with the newly quoted items. When fulfillment server  has evaluated quotation  relative to the specified ATP request constraints, a unified quotation  is presented to client . This process is similar to that of a new quotation , except that the original quotation  already exists and thus fulfillment server  only updates portions of quotation  associated with the changed ATP request . Failure notifications and cancellation confirmations may be generated and sent to client  as appropriate. Subsequent user confirmation processing may be accomplished on a net change basis and may reflect processing described above with respect to the quotation confirmation and promise acceptance workflows.","Re-Quote Workflow","In one embodiment, client  or an associated user is able to re-quote an existing ATP request  at any point before total or partial order cancellation or fulfillment. This capability does not affect any existing promise , but simply results in a new quotation . Client  or an associated user must accept new quotation  to obviate existing promise . Thus, all processing is substantially the same as for the initial ATP request , except for the treatment of the data objects. Client  or an associated user queries the original ATP request  to initiate this processing. Once ATP request  has been displayed through inquiry, the user may then select an appropriate re-quote function and client  executes the re-quote command.","Queue ATP Request Workflow","Fulfillment server  may support intelligent queuing of requests, which may be configurable according to a user, customer, or other profile, information received from client  or an associated user, or information received from a system administrator or function. Request queue parameters may specify the conditions under which queuing is to occur, the duration of the queuing, and the frequency with which requests are re-submitted. Since any change throughout the distributed LFMs  and ATP servers  may allow a queued request to get a satisfactory promise, such changes should be sent to one or more fulfillment server servers . Each fulfillment server  can reconsider its queued requests in view of the changes, possibly initiating an appropriate quotation or promising workflow. Queueing of ATP requests  is described more fully in U.S. application Ser. Nos. 08\/491,167 and 08\/802,434.","Initiate ATP Request Queue [Client]","In one embodiment, client  or an associated user may queue an existing ATP request  at any point before total or partial order cancellation or fulfillment. Queued ATP requests  are periodically submitted for re-quoting with the intent of improving the quotation result. Similar to the re-quote transaction described above, the queuing process does not effect any existing promise , but simply results in a new quotation . Client  or an associated user may execute a queue function to initiate queue processing after the unsatisfactory result of an initial ATP request  or after querying an existing ATP request . Queuing behavior may be limited according to specified parameters concerning re-try intervals, maximum number of tries, and the like.","Process ATP Request Queue [Fulfillment Server]","Fulfillment server  receives the request queue instruction as a confirmation indicating that all request line-items have been queued. Based on this confirmation, fulfillment server  updates the status of each request line-item to \u201cqueued.\u201d Further processing of ATP request  suspends until queuing parameters for such processing have been met. Based on a specified re-try interval or otherwise, fulfillment server  may periodically re-submit the queued component ATP requests  to LFMs  for quotation. At this point, the processing is identical to that of the Process Re-Quote workflow discussed above.","Component Promise Changes Workflow",{"@attributes":{"id":"p-0150","num":"0154"},"figref":"FIG. 5","b":["32","10","36","46"]},"The impact of changes in production plans and schedules is likely to propagate downstream to component ATP requests  at LFMs , causing one or more existing commitments to be invalidated. The end result might be that one or more component ATP requests  is rescheduled for later in the planning horizon or simply shorted. In one embodiment, LFM  monitors the status of component ATP requests  to identify such events and communicates accordingly with fulfillment server . As an example, ATP server  might \u201cpublish\u201d to LFM  the supply changes effecting the backlogged component ATP requests , LFM  might then notify fulfillment server , and the fulfillment server  might evaluate the revised component request status and act, for example, by notifying client  of the situation and providing one or more options to client . Similarly, changes made at fulfillment  server may need to be sent to the affected LFMs  so that they may adjust reservations of supply accordingly. Further, each of the workflows described above may support one or more alternative workflows to handle cases in which the ATP data components of system  have been working with becomes invalid due to such changes.","Process ATP Server Changes [LFM]","In one embodiment, system  provides an interface protocol between LFMs  and ATP servers  such that planning changes affecting the promise characteristics of component ATP requests  in associated planning engines are proactively identified within ATP servers  and sent to LFMs  for evaluation. This evaluation processing is identical to that of the initial component promise response; that is, LFM  evaluates the changed component promise response according to the constraints specified in the originating ATP request . The revised promise from ATP server  may not change the commitment between the customer and the supplier. Since in one embodiment promise  and acceptance  are distinct objects, a change to promise  does not change acceptance , which generally represents the binding business commitment between the customer and supplier. Schedule and other changes may be negotiated and resolved such that the original commitment can be kept. However, the binding business commitment does not change until client  or an associated user accepts the revised promise  and a new acceptance  is created.","Whether or not a planning change has affected the validity of the component promise , LFM  generates a planning change notification  for the change and may also note any failure conditions that exist. Planning change notification  is generated in a suitable format and sent to fulfillment server  using network . Planning change notification  may prompt fulfillment server  to generate a revised promise  and send it to client . Instead or in addition, fulfillment server  may evaluate planning change notification  and generate one or more revised component ATP requests , which are sent to and processed at LFMs  in essentially the same manner as for the changed component ATP requests  described above. Fulfillment server  may act on planning change notification  in any appropriate manner according to the needs of clients  and associated customers and users.","Process LFM Changes [Fulfillment Server]","Fulfillment server  monitors and responds to LFM-initiated events such as component promise changes. Component promise changes within the planning engine associated with ATP server  may have substantially impacted the integrity of original promise . Therefore, in one embodiment, fulfillment server  reevaluates promise  according to the constraints specified in the original ATP request . For example, depending on the value of the short proportional attribute associated with ATP request , fulfillment server  may adjust the promises of all request line-items proportionally and release the shorted allocations of other request line-items. Failing to do this might leave products tied up for the customer even though the customer would not ultimately accept those products. Fulfillment server  may try one or more alternate suppliers before adjusting or failing ATP request , or may simply generate a suitable problem notice for client  or an associated user to review and resolve.","Fulfillment server  may provide the capability to optionally re-price promise  in the event of an LFM-initiated change, possibly determining whether any pricing calculations are necessary based on the nature of the change. For example, a change in the shipment date for ATP request  may not require re-pricing, while a change in the quantity may cause the promised price to be invalid. Instead or in addition, fulfillment server  may provide the ability to re-calculate delivery dates based on LFM-initiated changes, possibly determining whether any delivery calculations are necessary based on the nature of the change. For example, a change in the quantity for ATP request  may not require delivery coordination, while a change in a shipment date may result in the promised delivery being invalid.","When fulfillment server  has evaluated any changed component promises  relative to the constraints specified in ATP request , fulfillment server  generates a revised promise  and sends it to client . This processing is identical to promise confirmation processing, except that original promise  already exists and fulfillment server  may only update the portions of promise  associated with the ATP request changes in generating revised promise . Failure notifications may be generated as appropriate. At this stage, client  or an associated user may wish to simply live with the changes, generating and sending acceptance  to fulfillment server , or proceed into a re-quote, change, or cancellation workflow.","ATP Request Cancellation Workflow","Initiate ATP Request Cancellation [Client]","In one embodiment, client  or an associated user may be able to cancel an ATP request  at any point in its life cycle unless the supplier business constraints explicitly preclude it, for example, outside a specified time interval. As a result, ATP request may  be canceled during initial generation, during quotation processing, after acceptance, and even after partial fulfillment. The intent of cancellation is to make ATP request  permanently inactive. Client  or an associated user may query the ATP request  to initiate this processing. Once ATP request  has been displayed at client  through inquiry, the user may select a cancellation function to cause client  to execute the cancellation command.","Process ATP Request Cancellation [Fulfillment Server]","Fulfillment server  receives the request cancellation from client  in a form indicating that all the request line-items have been canceled. Fulfillment server  next determines if there exist any product or supplier restrictions on cancellation. If so, a failure notification is immediately generated and sent to client  using network . After fulfillment server  determines the validity of the request cancellation, it updates the status of each request line-item to \u201ccanceled.\u201d Fulfillment server  then sends the resulting component request cancellations out onto network  for processing at the appropriate LFMs .","Process Component ATP Request Cancellations [LFM]","When LFM  receives the component request cancellations from fulfillment server , it generates and executes the cancellation transaction in the syntax appropriate to ATP server  and the associated planning engine. This transaction is most likely an ATP request deletion. When ATP server  responds to LFM  with a confirmation of the cancellation, LFM  updates the status of any locally maintained component ATP request, component quotation, and component promise. LFM  generates a component cancellation confirmation and sends it to fulfillment server  using network .","Process Component Confirmations [Fulfillment Server]","When fulfillment server  has processed and transmitted component request cancellations to LFMs , it monitors completion of resulting component cancellation confirmations. In one embodiment, a cancellation confirmation is deemed complete when each component request cancellation has received a component cancellation confirmation. Fulfillment server  may note the cancellation in any ATP request , quotation , and promise  maintained at fulfillment server . The final cancellation confirmation is generated and sent to client  using network , terminating the ATP request life cycle.","Fulfillment Confirmations Workflow","Process Component Fulfillment Notifications [LFM]","In one embodiment, system  provides an interface protocol between LFMs  and ATP servers  such that shipment notifications at associated planning engines are proactively identified at ATP servers  and sent to LFMs . LFM  may update the status of locally maintained component ATP request  and component promise  to reflect the fulfillment before sending a resulting component fulfillment notification to fulfillment server  using network .","Process Fulfillment Notifications [Fulfillment Server]","Once acceptance  has been suitably processed, fulfillment server  monitors for component fulfillment notifications from LFMs . ATP request  is considered fulfilled when each component ATP request  has received a component fulfillment notification. A unified fulfillment notification is generated and sent to the requesting client  using network . When component ATP requests  have been fulfilled, fulfillment server  may also monitor corresponding shipment confirmations. When ATP request  has been fully shipped, its status is updated and fulfillment server  notifies the requesting client . Fulfillment server  may provide archive capabilities for fulfilled ATP requests , which may be configurable to allow client  to specify archive parameters such as when ATP requests  are to be archived and the number of periods of request history to be maintained. Archives may be maintained at fulfillment server , at one or more locations associated with LFMs , or at any other suitable location internal or external to system ."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["To provide a more complete understanding of the present invention and further features and advantages thereof, reference is now made to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
