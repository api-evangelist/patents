---
title: Apparatus, system, and method for managing lifetime of a storage device
abstract: Apparatuses, systems, and methods are disclosed for managing lifetime for a data storage device. A target module determines a write bandwidth target for a data storage device. An audit module monitors write bandwidth of the data storage device relative to the write bandwidth target. A throttle module adjusts execution of one or more write operations on the data storage device in response to the write bandwidth of the data storage device failing to satisfy the write bandwidth target.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08984216&OS=08984216&RS=08984216
owner: Fusion-io, LLC
number: 08984216
owner_city: Wilmington
owner_country: US
publication_date: 20111013
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","Description of the Related Art","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Patent Application No. 61\/392,845 entitled \u201cAPPARATUS, SYSTEM, AND METHOD FOR MANAGING A LIFETIME OF A STORAGE DEVICE\u201d and filed on Oct. 13, 2010 for Jeremy Fillingim and to U.S. patent application Ser. No. 12\/878,987, entitled \u201cAPPARATUS, SYSTEM, AND METHOD FOR POWER REDUCTION IN A STORAGE DEVICE\u201d and filed on Sep. 9, 2010 for Jeremy Fillingim et al., both of which are incorporated herein by reference.","This invention relates to storage devices and more particularly relates to maintaining a lifetime of a storage device.","Storage media for data storage devices can degrade with age and use. It can be problematic for a manufacturer or vendor to warrantee or guarantee a storage device for a predefined amount of time, as usage can vary widely by different users of the storage device. If more data is written to one storage device than another during the same time period, the storage device will typically wear out at a faster rate. Without knowing beforehand what the use case or operating load for a storage device is going to be, a manufacturer or vendor often cannot reliably determine an amount of time to warrantee or guarantee the storage device.","Methods are presented to manage lifetime for a data storage device. In one embodiment, a method includes determining a write bandwidth target for a data storage device. A method, in a further embodiment, includes monitoring write bandwidth of the data storage device relative to the write bandwidth target. In another embodiment, a method includes adjusting execution of one or more write operations on the data storage device in response to the write bandwidth of the data storage device failing to satisfy the write bandwidth target. In a further embodiment, a method includes adjusting the write bandwidth target based on a total amount of data written to the data storage device, so that the total amount of data written does not exceed a threshold within the lifetime of the data storage device.","Apparatuses are presented to manage lifetime for a data storage device. In one embodiment, a target module is configured to determine a write bandwidth target for a data storage device. An audit module, in a further embodiment, is configured to monitor write bandwidth of the data storage device relative to the write bandwidth target. A throttle module, in one embodiment, is configured to adjust execution of one or more write operations on the data storage device in response to the write bandwidth of the data storage device failing to satisfy the write bandwidth target. In a further embodiment, the target module is configured to dynamically adjust the write bandwidth target based on the elapsed temporal lifetime of the data storage device.","Systems are presented to manage lifetime for a data storage device. In one embodiment, a data storage device contains multiple storage elements. In a further embodiment, a target module determines a write bandwidth target for each data storage element. In a certain embodiment, an audit module monitors write bandwidth of each data storage element relative to the write bandwidth target. In a further embodiment, a throttle module adjusts execution of one or more write operations on each data storage element in response to the write bandwidth of the data storage element failing to satisfy the write bandwidth target.","Reference throughout this specification to features, advantages, or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather, language referring to the features and advantages is understood to mean that a specific feature, advantage, or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus, discussion of the features and advantages, and similar language, throughout this specification may, but do not necessarily, refer to the same embodiment.","Furthermore, the described features, advantages, and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances, additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention. These features and advantages of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","Many of the functional units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like.","Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module.","Indeed, a module of executable code may be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network. Where a module or portions of a module are implemented in software, the software portions are stored on one or more computer readable media.","Reference throughout this specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases \u201cin one embodiment,\u201d \u201cin an embodiment,\u201d and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.","Reference to a computer readable medium may take any form capable of storing machine-readable instructions on a digital processing apparatus. A computer readable medium may be embodied by a compact disk, digital-video disk, a magnetic tape, a Bernoulli drive, a magnetic disk, a punch card, flash memory, integrated circuits, or other digital processing apparatus memory device.","Furthermore, the described features, structures, or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention may be practiced without one or more of the specific details, or with other methods, components, materials, and so forth. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","The schematic flow chart diagrams included herein are generally set forth as logical flow chart diagrams. As such, the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function, logic, or effect to one or more steps, or portions thereof, of the illustrated method. Additionally, the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams, they are understood not to limit the scope of the corresponding method. Indeed, some arrows or other connectors may be used to indicate only the logical flow of the method. For instance, an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally, the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.","System for Reducing Storage Device Power Consumption",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1A","b":["100","102","102","102"]},"In the depicted embodiment, the system  includes a computing system  and a storage device . The computing system , in the depicted embodiment, includes a user application , a storage client , and a bandwidth governor module . The computing system  may be a computer such as a server, laptop, desktop, a mobile device, or other computing device known in the art. The computing system  typically includes components such as memory, processors, buses, and other components as known to those of skill in the art.","The computing system  stores data in the storage device  and communicates data with the storage device  via a communications connection. The storage device  may be internal to the computing system  or external to the computing system . The communications connection may be a bus, a network, or other manner of connection allowing the transfer of data between the computing system  and the storage device . In one embodiment, the storage device  is connected to the computing system  by a PCI connection such as PCI express (\u201cPCI-e\u201d). The storage device  may be a card that plugs into a PCI-e connection on the computing system . In other embodiments, the storage device  may be connected to the computing system  over serial advanced technology attachment (\u201cserial ATA\u201d or \u201cSATA\u201d), parallel ATA (\u201cPATA\u201d), small computer system interface (\u201cSCSI\u201d), IEE 1394 (\u201cFireWire\u201d), Fiber Channel, universal serial bus (\u201cUSB\u201d), PCIe-AS, a data network connection, or another connection with the computing system .","The storage device  provides nonvolatile storage for the computing system .  shows the storage device  as a nonvolatile solid-state storage device  comprising a solid-state storage controller , a write data pipeline , a read data pipeline , and nonvolatile solid-state storage media . The storage device  may contain additional components that are not shown in order to provide a simpler view of the storage device .","The solid-state storage media  stores data such that the data is retained even when the storage device  is not powered. Examples of solid-state storage media  include flash memory, nano random access memory (\u201cNRAM\u201d), magneto-resistive RAM (\u201cMRAM\u201d), dynamic RAM (\u201cDRAM\u201d), phase change RAM (\u201cPRAM\u201d), Racetrack memory, Memristor memory, and nanocrystal wire-based memory, silicon-oxide based sub-10 nanometer process memory, graphene memory, Silicon-Oxide-Nitride-Oxide-Silicon (\u201cSONOS\u201d), Resistive random-access memory (\u201cRRAM\u201d), programmable metallization cell (\u201cPMC\u201d), conductive-bridging RAM (\u201cCBRAM\u201d), and the like.","While, in the depicted embodiment, the storage device  includes solid-state storage media , in other embodiments, the storage device  may include magnetic media such as hard disks, tape, and the like, optical media, or other nonvolatile data storage media. The storage device  also includes a storage controller  that coordinates the storage and retrieval of data in the solid-state storage media . The storage controller  may use one or more indexes to locate and retrieve data, and perform other operations on data stored in the storage device . For example, the storage controller  may include a groomer for performing data grooming operations such as garbage collection.","As shown, the storage device , in certain embodiments, implements a write data pipeline  and a read data pipeline , an example of which is described in greater detail below with regard to . The write data pipeline  may perform certain operations on data as the data is transferred from the computing system  into the solid-state storage media . These operations may include, for example, error correction code (\u201cECC\u201d) generation, encryption, compression, and others. The read data pipeline  may perform similar and potentially inverse operations on data that is being read out of solid-state storage media  and sent to the computing system .","The computing system , in the depicted embodiment, includes a user application , a storage client , and a bandwidth governor module . In one embodiment, the user application  is a software application operating on or in conjunction with the storage client . The storage client  manages files and data and utilizes the functions and features of the storage controller  and associated storage media . Representative examples of storage clients  include, but are not limited to, a server, a file system, an operating system, a database management system (\u201cDBMS\u201d), a volume manager, and the like.","The storage client , in one embodiment, is in communication with the storage controller  of the storage device  through a software driver, device driver or software controller for the storage device . At least a portion of the bandwidth governor module , in one embodiment, is part of a device driver or software controller for the storage device . In one embodiment, the bandwidth governor module  is entirely embodied in a device driver or software controller on the computing system . In a further embodiment, at least a portion of the bandwidth governor module  is part of a hardware controller for the storage device . Similarly, the storage controller  that manages the storage media , in certain embodiments, may include various hardware and software controllers, drivers, and software.","As noted above, in certain embodiments, it may be beneficial to have a storage device  operate at less than full write bandwidth to ensure that an endurance rating is not surpassed during a defined temporal lifetime for the storage device , or the like. A vendor, manufacturer, distributor, retailer, and\/or user of the storage device , in certain embodiments, may desire to warrant or guarantee that the storage device  will remain functional (have not exhausted the endurance rating) for at least a temporal lifetime, defined as an amount of time that the storage device  is in use. For many types of storage devices , the temporal lifetime of the storage device  may be directly impacted by an endurance rating, write data lifetime, byte lifetime, or the like. An endurance rating, write data lifetime, or byte lifetime for a storage device , as used herein, comprises a total physical amount of data written to the storage device  before solid-state storage media  or other components of the storage device  wear-out from use, are expected to wear-out from use, or the like.","Wear-out for the solid-state storage media  as used herein means one or more of that the integrity of data stored on the media  is no longer guaranteed and\/or manageable, the storage cells of the media  are no longer functioning as designed, or some other failure of the media  prevents normal use. Once components such as storage elements or dies of the storage device  wear-out, the storage device  may prevent further use of the component. Alternatively, the storage device  may permit further use of the component so long as the degraded functionality and\/or data integrity is accounted for either by the storage device  or the storage client . In order to guarantee a specified temporal lifetime, in one embodiment, the bandwidth governor module  throttles or otherwise adjusts one or more write operations on the storage device  to ensure that an endurance rating value is not exceeded within a defined temporal lifetime of the storage device .","The bandwidth governor module , in one embodiment, monitors a write bandwidth of the storage device  relative to a write bandwidth target. The write bandwidth of the storage device , as used herein, is a rate that data is written to the storage device , which may be measured as an amount of data written to the storage device  during a specified period of time, or the like. In one embodiment, the write bandwidth is an average write bandwidth to allow for bursts of write data for the storage device  within the average. A write bandwidth target, as used herein, is a target write bandwidth that, if satisfied, ensures that the endurance rating for the storage device  is not met before the temporal lifetime for the storage device . The write bandwidth target, in certain embodiments, may be a target for an average write bandwidth, or the like, to account for bursts of write data.","In one embodiment, the bandwidth governor module  adjusts execution of write operations on the storage device  based on the write bandwidth of the storage device . Adjusting execution of write operations, such as throttling or slowing execution of operations, in one embodiment, ensures that, at least on average, a write bandwidth target is met, and no more than an amount of data associated with an endurance rating of the storage device  may be written to the storage device  within a specified temporal lifetime of the storage device . In one embodiment, the bandwidth governor module  verifies whether the write bandwidth of the storage device  satisfies the write bandwidth target in response to adjusting execution of operations on the storage device .","In certain embodiments, the bandwidth governor module  may dynamically determine and\/or adjust the write bandwidth target for the storage device  over time. For example, in one embodiment, the bandwidth governor module  may adjust the write bandwidth target based on a total amount of data written to the storage device  at a point in time and an elapsed amount of the temporal lifetime at that point in time. By dynamically adjusting the write bandwidth target and determining the write bandwidth as an average, such as a total average, a moving average, a decaying average, or the like, in certain embodiments, the bandwidth governor module  imposes minimal write bandwidth limits while ensuring that the endurance rating is not exceeded within the temporal lifetime of the storage device . In one embodiment, the bandwidth governor module  may impose little or no bandwidth governing for normal usage patterns of a storage device . While a write bandwidth target may be less than a maximum write bandwidth for a storage device , by monitoring an average write bandwidth for the storage device , the bandwidth governor module  may allow write operations up to the maximum write bandwidth for the storage device  in bursts, while continuing to maintain the temporal lifetime of the storage device .","In one embodiment, the bandwidth governor module , a vendor, a manufacturer, a user, or the like, stores an endurance rating, a temporal lifetime value, a static or default write bandwidth target, or the like in persistent storage of the storage device . One example of persistent storage that may store an endurance rating value and a temporal lifetime value is a programmable read only memory (\u201cPROM\u201d) that stores identification data for the storage device , or the like. The storage device , in certain embodiments, may include a module identification data PROM (\u201cMID-PROM\u201d) that stores vendor specific device characteristics, such as an endurance rating value, a temporal lifetime value, a firmware version number, a hardware version number, a serial number, vendor specific device characteristics, parameters relating programming the attached solid-state storage media, or the like.","In one embodiment, reliability engineers or the like of a vendor of the storage device  determine the endurance rating value and the temporal lifetime value for a particular storage device , a class of storage devices , or the like. In certain embodiments, the vendor determines a set of endurance rating values and\/or temporal lifetime values that vary based on other factors such as the operating environment of the device, (temperature extremes, high vibration environments, radiation exposure, high performance applications such as military use, etc.). The endurance rating value and the temporal lifetime value, in various embodiments, may be based on a variety of factors including measured lifetimes for a storage device  or class of storage devices , a type of storage media  used in a storage device , a manufacturer's recommendation for a storage device , and\/or other storage device  reliability factors. In addition, the vendor for the storage device  may perform various experiments, simulations, and modeling tests of the solid-state storage media  and other components of the solid-state storage device  in order to derive a suitable endurance rating and temporal lifetime for a specific storage device . In other embodiments, a user of the storage device  may select an endurance rating and\/or a temporal lifetime for a storage device  as a custom user-selectable setting, or the like.","Deriving the suitable endurance rating and temporal lifetime for solid-state storage media  may include translating a Program\/Erase cycle count provided by a solid-state storage media  manufacturer into an endurance rating and temporal lifetime that factors in the architecture and wear-leveling processes used in the storage device . The architecture and wear-leveling processes may include use of log-based sequentially writing to the storage media , storage space recovery, data integrity protections such as ECC, organizing the media  into banks and channels, and the like.","The endurance rating and temporal lifetime may factor in the specific geometry and\/or type of the solid-state storage media , manufacturer of the solid-state storage media , quality of the parts used in the storage device , and\/or whether the storage device  includes solid-state storage media  from a combination of solid-state storage media  manufacturers.","The endurance rating value, in one embodiment, is expressed in data units, such as bits, bytes, kilobytes, megabytes, gigabytes, terabytes, petabytes, kibibytes, mebibytes, gibibytes, tebibytes, pebibytes, or the like. The temporal lifetime value, in one embodiment, is expressed in time units, such as seconds, minutes, hours, days, months, years, or the like. For example, in one embodiment, the storage device  stores the endurance rating value as a binary representation of a number of terabytes, petabytes, or the like and stores the temporal lifetime value as a binary representation of a number of days, years, or the like.","In one embodiment, the bandwidth governor module  provides a user an option of opting out of write bandwidth governing for the storage device . For example, in certain embodiments, the bandwidth governor module  may present a user with the option of either enabling or disabling write bandwidth governing in response to the user installing the storage device , installing a driver for the storage device , or the like. In another embodiment, a software tool (GUI or CLI) or other utility for the storage device  may provide a user with the ability to opt out of write bandwidth governing for the storage device . The software tool may warn the user and put the user on notice that opting out of governing write bandwidth voids any existing warranties. The software tool may update the MID-PROM to reflect the change in opting out of bandwidth governing such that use of the storage device  after a power cycling event or in a different system retains the opt-out setting. In still another embodiment, the bandwidth governor module  provides a user the option of opting out of write bandwidth governing as a user-selectable configuration setting in a management program for the storage device , a driver for the storage device , or the like.","The bandwidth governor module , in a further embodiment, stores in persistent storage of the storage device  an indicator of whether a user has opted out of write bandwidth governing. Opting out of write bandwidth governing, in certain embodiments, voids a warranty of the storage device . The bandwidth governor module , in one embodiment, prevents a user from re-enabling write bandwidth governing or opting back in to using write bandwidth governing once a user has opted out of write bandwidth governing. For example, in certain embodiments, the bandwidth governor module  may lock or disable a setting for write bandwidth governing once a user has opted out, and prevents user access to the indicator in persistent storage of the storage device  indicating that the user has opted out. Alternatively, or in addition, management tools for the storage device  may be programmed to permit only opting out and no ability to reverse the opt-out setting. In one embodiment, the bandwidth governor module  stops governing write bandwidth for the storage device  once the temporal lifetime of the storage device  has expired. In another embodiment, the bandwidth governor module  stops governing write bandwidth for the storage device  once the endurance rating for the storage device  can no longer be exceeded during the temporal lifetime of the storage device . The bandwidth governor module  is discussed in greater detail below with regard to .","The user application , storage client , or computing system , in one embodiment, may provide a write bandwidth target, an endurance rating value, a temporal lifetime value, and\/or other write bandwidth management information to the bandwidth governor module  over a communications channel, such as a data bus, a PCI-e bus, a data network, or the like. In one embodiment, the bandwidth governor module  supports a protocol, an application programming interface (\u201cAPI\u201d), or the like for setting a write bandwidth target, an endurance rating value, a temporal lifetime value, and\/or other write bandwidth management information. In one embodiment, the bandwidth governor module  sets a write bandwidth target dynamically based on a specified endurance rating value and temporal lifetime value for the storage device  and on a monitored write bandwidth of the storage device .","In one embodiment, the system  may include several bandwidth governor modules  for different storage devices . In another embodiment, a single bandwidth governor module  may govern write bandwidths separately for several different storage devices . In a further embodiment, one or more bandwidth governor modules  may govern write bandwidths separately for different storage elements within the storage device . For example, in one embodiment, the storage device  is a solid state storage device with multiple dual in-line memory modules (\u201cDIMMs\u201d). One or more bandwidth governor modules  may adjust write operations separately for each DIMM independently of the other DIMMs to satisfy individual write data and temporal lifetimes for each DIMM. In another embodiment, the bandwidth governor module  may govern a shared write bandwidth for multiple DIMMS or other elements of a storage device  to satisfy shared write data and temporal lifetimes for the multiple DIMMs.","The write bandwidth target, as used herein, is a target rate for writing data to the storage device  that satisfies an endurance rating parameter and a temporal lifetime parameter for the storage device . In certain embodiments, the write bandwidth target is a rate for writing data such that the entire endurance rating of the storage device  is exhausted (complete media \u201cwear out\u201d) at, or later than, the expiration of the temporal lifetime of the storage device  but not before the expiration of the temporal lifetime. In certain embodiments, the bandwidth governor module  may permit write bandwidths over the write bandwidth target for certain periods so long as an average write bandwidth falls below the write bandwidth target. In certain embodiments, the write bandwidth target is a single value. In other embodiments, the write bandwidth target includes a baseline write bandwidth, but allows for bursts and may optionally provide bandwidth restrictions on bursting above a certain level, for example by using a moving average or a decaying average for the monitored write bandwidth, or the like.","A write bandwidth of the storage device , in various embodiments, may satisfy a write bandwidth target by being less than the write bandwidth target, by falling away from the write bandwidth target, by being outside of a predefined range around the write bandwidth target, by being inside a predefined range around the write bandwidth target, and\/or by having another predefined relationship with the write bandwidth target. Conversely, a write bandwidth, in various embodiments, may fail to satisfy a write bandwidth target by approaching the write bandwidth target, by exceeding the write bandwidth target, by being outside of a predefined range around the write bandwidth target, by being inside a predefined range around the write bandwidth target, and\/or by having another predefined relationship with the write bandwidth target. One of skill in the art, in view of this disclosure, will recognize many possible types of write bandwidth targets, and corresponding ways that a write bandwidth can satisfy or fail to satisfy the different types of write bandwidth targets.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 1B","FIG. 1A","FIG. 1A"],"b":["150","102","102","150","150","112","114","122","102","114","102","114","102","122","120"]},"The power supply , in the depicted embodiment, provides electrical power to the computing system  and, through it, the storage device  and other components of the computing system . The power supply  may receive power from a standard electrical connection and transform the power received into one or more voltages that can be used by the computing system . The power supply  may be a battery or other power source used in computing systems . The power supply  may be internal or external to the computing system . Those of skill in the art, in view of this disclosure, will appreciate that there are a variety of different configurations and types of power supplies .","The storage device , in the depicted embodiment, receives electric power from the power supply  that provides the storage device  with power to perform data storage operations such as reads, writes, erases, etc. The storage device , in the depicted embodiment, receives the power from the power supply  over a power connection with the computing system . In certain embodiments, a power connection and the communications connection discussed above are part of the same physical connection between the computing system  and the storage device . For example, the storage device  may receive power over PCI, PCI-e, SATA, PATA, SCSI, FireWire, Fiber Channel, USB, PCIe-AS, or another connection with the computing system . In one embodiment, the computing system  distributes power from the power supply  through one or more slots, ports, or the like of a motherboard.","In other embodiments, the storage device  may connect to the power supply  directly, independently of a computing system . For example, the power supply  may be a power converter (often called a power brick), a power supply unit (\u201cPSU\u201d) for the storage device , or the like. Those of skill in the art will appreciate, in view of this disclosure, that there are various ways by which a storage device  may receive power, and the variety of devices that can act as the power supply  for the storage device .","In one embodiment, the computing system  includes one or more other components in addition to the storage device , such as additional storage devices, graphics processors, network cards, and the like that also receive power from the power supply . Those of skill in the art, in view of this disclosure, will appreciate the different types of components that may be in a computing system . The components may be internal or external to the computing system . In one embodiment, some of the components may be PCI or PCI-e cards that connect to the computing system  and receive power through the computing system .","The system , in the depicted embodiment, also includes a power management apparatus . In certain embodiments, the power management apparatus  may be implemented as part of the storage controller . In further embodiments, the power management apparatus  may be, for instance, implemented as part of a software driver of the computing system , implemented in firmware for the storage device , or the like. In other embodiments, the power management apparatus  may be implemented partially in a software driver and partially in the storage controller , or the like. In various embodiments, the power management apparatus  may be integrated with, in communication with, and\/or operate in conjunction with a bandwidth governor module .","As noted above, the computing system  may be configured to accept more components, such as storage devices , than the computing system  can provide power for under all conditions. The computing system  may not be able to provide sufficient power to a storage device  operating at or near full performance, or providing sufficient power may damage the computing system  and\/or the power supply , especially if other components are also drawing power.","Other situations may arise in which it is important to tailor the performance of the storage device  or other computer components based on power considerations. In certain embodiments, the power management apparatus  manages a variety of states that correspond to various power conditions. One possible state is a power disruption state where the available power is reduced to an amount that can be provided by a secondary power supply, or the like. In this state, the power management apparatus  may perform power disruption or power failure management.","The power management apparatus , in one embodiment, monitors a power consumption rate of the storage device  relative to a power consumption target. In a further embodiment, the power management apparatus  adjusts execution of operations on the storage device  based on the power consumption rate. Adjusting execution of operations, such as throttling or slowing execution of operations, in one embodiment, reduces the power consumption rate of the storage device . In one embodiment, the power management apparatus  verifies whether the power consumption rate of the storage device  satisfies the power consumption target in response to adjusting execution of operations on the storage device . In another embodiment, the power management apparatus  manages and schedules execution of operations on the storage device  to stay within the power consumption target.","The power management apparatus , in one embodiment, references operations parameters, such as the power consumption target, that specify performance limitations on the storage device  and\/or on other components. The performance limitations are related to power consumption of the storage device , or of other components. The parameters may be designed, coded, hard corded, and\/or programmed directly into the power management apparatus , or may be sent to the power management apparatus  by the computing system  or by another power management apparatus . In one embodiment, the system  includes a plurality of power management apparatuses  for different components. In certain embodiments, the different power management apparatuses  share information with each other; in other embodiments, each power management apparatus  acts independently. One embodiment of a system with a plurality of power management apparatuses  is described below with regard to .","In certain embodiments, the power management apparatus  may dynamically adjust the power allocation for the storage device . The computing system  may dedicate more or less power to the storage device  at a particular time; for example, in the event that another component is a graphics card, there may be considerably less power available to the storage device  during graphics intensive operations. Similarly, more power may be available to the storage device  when the computing system  is not performing intensive graphics operations. The computing system  may thus dynamically change the allocation of power and send appropriate parameters to the power management apparatus . In certain embodiments, the computing system  includes software, firmware, hardware, or some combination thereof that is specifically tailored to determine how much power is available in the computing system .","The computing system , in one embodiment, may send a power consumption target and\/or other power management information to the power management apparatus  over a communications channel, such as a PCI-e bus, a data network, or the like. In one embodiment, the power management apparatus  supports a protocol, an API, or the like for setting a power consumption target. The power consumption target, in one embodiment, is user configurable or selectable, through an interface on the computing system , an interface of the storage device , or the like.","In other embodiments, the power management apparatus  sets a power management plan or parameters without receiving parameters from the computing system . The power management apparatus  may dynamically adjust the power allocation to different elements within the storage device . For example, in one embodiment, the storage device  is a solid state storage device with multiple DIMMs. The power management apparatus  may have (or set) a particular power limit (such as 25 watts), which may also be referred to as a power budget, a power consumption target, or a power consumption ceiling, for the entire storage device  and may dynamically allocate power to remain within the constraints of the power budget. Thus, one DIMM performing a number of energy intensive operations may be allocated 20 watts while another DIMM is allocated 5 watts until the energy intensive operations are complete.","The power consumption target, as used herein, is the amount of power that a power supply system is configured to make available, and\/or provide to the storage device  and\/or other components supplied by the power supply system. In certain embodiments, the power consumption target is a power consumption ceiling, a maximum allowed upper bound for the power consumption rate of the storage device . In other embodiments, while the power consumption target is a maximum amount, the power supply  may permit uses of power over the maximum amount so long as the average power use falls below a power consumption target. In certain embodiments, the power consumption target is a single power value. In other embodiments, the power consumption target includes a baseline power, but allows for bursts and provides power restrictions on bursting. For example, these restrictions might include magnitude, duration, rise time, fall time, and the like. In a further embodiment, the power consumption target is a range of allowable power consumption rates, or the like. The power consumption target, in one embodiment, is defined as a value or range of values having a standard power metric unit, such as the watt (\u201cW\u201d).","A power consumption rate of the storage device  or of another component, in various embodiments, may satisfy a power consumption target by falling away from the power consumption target, by being outside of a predefined range around the power consumption target, by being inside a predefined range around the power consumption target, and\/or by having another predefined relationship with the power consumption target. Conversely, a power consumption rate, in various embodiments, may fail to satisfy a power consumption target by approaching the power consumption target, by exceeding the power consumption target, by being outside of a predefined range around the power consumption target, by being inside a predefined range around the power consumption target, and\/or by having another predefined relationship with the power consumption target. One of skill in the art, in view of this disclosure, will recognize many possible types of power consumption targets, and corresponding ways that a power consumption rate can satisfy or fail to satisfy the different types of power consumption targets.","The computing system  may dynamically change the power consumption target for the storage device  in response to changes in the power supply . The power consumption target may also be dynamically allocated in response to changes in workload, as discussed in greater detail below. For example, if the power supply  is connected to a source such as an electrical outlet, the computing system  may specify one power consumption target. If the power supply  is disconnected from the source, such that the power supply  is operating on battery power, the computing system  may decrease the power consumption target for the storage device . In one embodiment, the computing system  may dynamically change the power consumption target for the storage device  as the battery life decreases. In certain embodiments with multiple components, the power consumption targets for the components are not adjusted downward equally as battery life decreases; for example, the power consumption target for a component providing an active wireless connection may remain stable or be reduced at a slower rate than that of the storage device , or the like.","In one embodiment, the power management apparatus  provides thermal management for the storage device . The power management apparatus , in one embodiment, monitors a temperature for the storage device  relative to a thermal ceiling or other thermal threshold. The power management apparatus , in one embodiment, adjusts execution of operations on the storage device  in response to the temperature of the storage device  approaching the thermal ceiling. In a further embodiment, the power management apparatus  verifies that the temperature of the storage device  is moving away from the thermal ceiling in response to adjusting execution of the operations.","In one embodiment, the power management apparatus  combines thermal adjustments and power adjustments into a single combined adjustment. In a further embodiment, the power management apparatus  (and\/or the bandwidth governor module  described above) combines power adjustments and\/or thermal adjustments with write bandwidth adjustments for execution of operations into a single combined adjustment. The power management apparatus  and\/or the bandwidth governor module , in one embodiment, combine multiple adjustments into a single combined adjustment by selecting the largest adjustment from among the multiple adjustments and using the largest adjustment as the single combined adjustment.","Solid-State Storage Device",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 2","b":["200","202","106","108","102","202","0","104","110","0","104","104","110","0","104","110","104","110","202","104","110","104","110","104","104","1","110","110","1","104","110"],"i":["a","n","a ","n","a","n","a ","a ","n ","n ","a ","a","a","n ","a","n","a","n","a","n","n","n"]},"In one embodiment, at least one solid-state controller  is field-programmable gate array (\u201cFPGA\u201d) and controller functions are programmed into the FPGA. In a particular embodiment, the FPGA is a Xilinx\u00ae FPGA. In another embodiment, the solid-state storage controller  comprises components specifically designed as a solid-state storage controller , such as an application-specific integrated circuit (\u201cASIC\u201d) or custom logic solution. Each solid-state storage controller  typically includes a write data pipeline  and a read data pipeline , which are describe further in relation to . In another embodiment, at least one solid-state storage controller  is made up of a combination FPGA, ASIC, and custom logic components.","Solid-State Storage","The solid state storage media  is an array of non-volatile solid-state storage elements , , , arranged in banks , and accessed in parallel through a bi-directional storage input\/output (\u201cI\/O\u201d) bus . The storage I\/O bus , in one embodiment, is capable of unidirectional communication at any one time. For example, when data is being written to the solid-state storage media , data cannot be read from the solid-state storage media . In another embodiment, data can flow both directions simultaneously. However bi-directional, as used herein with respect to a data bus, refers to a data pathway that can have data flowing in only one direction at a time, but when data flowing one direction on the bi-directional data bus is stopped, data can flow in the opposite direction on the bi-directional data bus.","A solid-state storage element (e.g. SSS . ) is typically configured as a chip (a package of one or more dies) or a die on a circuit board. As depicted, a solid-state storage element (e.g. ) operates independently or semi-independently of other solid-state storage elements (e.g. ) even if these several elements are packaged together in a chip package, a stack of chip packages, or some other package element. As depicted, a row of solid-state storage elements , , is designated as a bank . As depicted, there may be \u201cn\u201d banks -and \u201cm\u201d solid-state storage elements -, -, -per bank in an array of n\u00d7m solid-state storage elements , ,  in a solid-state storage media . Of course different embodiments may include different values for n and m. In one embodiment, a solid-state storage media includes twenty solid-state storage elements , ,  per bank  with eight banks . In one embodiment, the solid-state storage media includes twenty four solid-state storage elements , ,  per bank  with eight banks . In addition to the n\u00d7m storage elements , , , one or more additional columns (P) may also be addressed and operated in parallel with other solid-state storage elements , , for one or more rows. The added P columns in one embodiment, store parity data for the portions of an ECC chunk (i.e. an ECC codeword) that span m storage elements for a particular bank. In one embodiment, each solid-state storage element , ,  is comprised of single-level cell (\u201cSLC\u201d) devices. In another embodiment, each solid-state storage element , ,  is comprised of multi-level cell (\u201cMLC\u201d) devices.","In one embodiment, solid-state storage elements that share a common storage I\/O bus (e.g. , , ) are packaged together. In one embodiment, a solid-state storage element , ,  may have one or more dies per chip with one or more chips stacked vertically and each die may be accessed independently. In another embodiment, a solid-state storage element (e.g. SSS . ) may have one or more virtual dies per die and one or more dies per chip and one or more chips stacked vertically and each virtual die may be accessed independently. In another embodiment, a solid-state storage element SSS . may have one or more virtual dies per die and one or more dies per chip with some or all of the one or more dies stacked vertically and each virtual die may be accessed independently.","In one embodiment, two dies are stacked vertically with four stacks per group to form eight storage elements (e.g. SSS .-SSS .) -, each in a separate bank -. In another embodiment, 24 storage elements (e.g. SSS .-SSS .)  form a logical bank so that each of the eight logical banks has 24 storage elements (e.g. SSS.-SSS .) , , . Data is sent to the solid-state storage media  over the storage I\/O bus  to all storage elements of a particular group of storage elements (SSS .-SSS .) , , . The storage control bus is used to select a particular bank (e.g. Bank  ) so that the data received over the storage I\/O bus  connected to all banks  is written just to the selected bank ","In a one embodiment, the storage I\/O bus  is comprised of one or more independent I\/O buses (\u201cIIOBa-m\u201d comprising -, -) wherein the solid-state storage elements within each column share one of the independent I\/O buses that accesses each solid-state storage element , ,  in parallel so that all banks  are accessed simultaneously. For example, one channel of the storage I\/O bus  may access a first solid-state storage element , , of each bank -simultaneously. A second channel of the storage I\/O bus  may access a second solid-state storage element , , of each bank -simultaneously. Each row of solid-state storage element , , is accessed simultaneously. In one embodiment, where solid-state storage elements , ,  are multi-level (physically stacked), all physical levels of the solid-state storage elements , ,  are accessed simultaneously. As used herein, \u201csimultaneously\u201d also includes near simultaneous access where devices are accessed at slightly different intervals to avoid switching noise. Simultaneously is used in this context to be distinguished from a sequential or serial access wherein commands and\/or data are sent individually one after the other.","Typically, banks -are independently selected using the storage control bus . In one embodiment, a bank  is selected using a chip enable or chip select. Where both chip select and chip enable are available, the storage control bus  may select one level of a multi-level solid-state storage element , , . In other embodiments, other commands are used by the storage control bus  to individually select one level of a multi-level solid-state storage element , , . Solid-state storage elements , ,  may also be selected through a combination of control and of address information transmitted on storage I\/O bus  and the storage control bus .","In one embodiment, each solid-state storage element , ,  is partitioned into erase blocks and each erase block is partitioned into pages. An erase block on a solid-state storage element ,   may be called a physical erase block or \u201cPEB.\u201d A typical page is 2000 bytes (\u201c2 kB\u201d). In one example, a solid-state storage element (e.g. SSS .) includes two registers and can program two pages so that a two-register solid-state storage element , ,  has a capacity of 4 kB. A bank  of 20 solid-state storage elements , , would then have an 80 kB capacity of pages accessed with the same address going out the channels of the storage I\/O bus .","This group of pages in a bank  of solid-state storage elements , , of 80 kB may be called a logical page or virtual page. Similarly, an erase block of each storage element -of a bank may be grouped to form a logical erase block or a virtual erase block. In one embodiment, an erase block of pages within a solid-state storage element , ,  is erased when an erase command is received within a solid-state storage element , , . Whereas the size and number of erase blocks, pages, planes, or other logical and physical divisions within a solid-state storage element , ,  are expected to change over time with advancements in technology, it is to be expected that many embodiments consistent with new configurations are possible and are consistent with the general description herein.","Typically, when a packet is written to a particular location within a solid-state storage element , , , wherein the packet is intended to be written to a location within a particular page which is specific to a particular physical erase block of a particular storage element of a particular bank, a physical address is sent on the storage I\/O bus  and followed by the packet. The physical address contains enough information for the solid-state storage element , ,  to direct the packet to the designated location within the page. Since all storage elements in a column of storage elements (e.g. SSS .-SSS N. , , ) are accessed simultaneously by the appropriate bus within the storage I\/O bus , to reach the proper page and to avoid writing the data packet to similarly addressed pages in the column of storage elements (SSS .-SSS N. , , ), the bank that includes the solid-state storage element SSS . with the correct page where the data packet is to be written is simultaneously selected by the storage control bus .","Similarly, satisfying a read command on the storage I\/O bus  requires a simultaneous signal on the storage control bus  to select a single bank and the appropriate page within that bank . In one embodiment, a read command reads an entire page, and because there are multiple solid-state storage elements , , in parallel in a bank , an entire logical page is read with a read command. However, the read command may be broken into subcommands, as will be explained below with respect to bank interleave. A logical page may also be accessed in a write operation.","An erase block erase command may be sent out to erase an erase block over the storage I\/O bus  with a particular erase block address to erase a particular erase block. Typically, an erase block erase command may be sent over the parallel paths of the storage I\/O bus  to erase a logical erase block, each with a particular erase block address to erase a particular erase block. Simultaneously a particular bank (e.g. Bank  ) is selected over the storage control bus  to prevent erasure of similarly addressed erase blocks in all of the banks (Banks -N -). Alternatively, no particular bank (e.g. Bank  ) is selected over the storage control bus  to enable erasure of similarly addressed erase blocks in all of the banks (Banks -N -) simultaneously. Other commands may also be sent to a particular location using a combination of the storage I\/O bus  and the storage control bus . One of skill in the art will recognize other ways to select a particular storage location using the bi-directional storage I\/O bus  and the storage control bus .","In one embodiment, packets are written sequentially to the solid-state storage media . For example, packets are streamed to the storage write buffers of a bank of storage elements  and when the buffers are full, the packets are programmed to a designated logical page. Packets then refill the storage write buffers and, when full, the packets are written to the next logical page. The next logical page may be in the same bank or another bank (e.g. ). This process continues, logical page after logical page, typically until a logical erase block is filled. In another embodiment, the streaming may continue across logical erase block boundaries with the process continuing, logical erase block after logical erase block.","In a read, modify, write operation, data packets associated with requested data are located and read in a read operation. Data segments of the modified requested data that have been modified are not written to the location from which they are read. Instead, the modified data segments are again converted to data packets and then written sequentially to the next available location in the logical page currently being written. The index entries for the respective data packets are modified to point to the packets that contain the modified data segments. The entry or entries in the index for data packets associated with the same requested data that have not been modified will include pointers to original location of the unmodified data packets. Thus, if the original requested data is maintained, for example to maintain a previous version of the requested data, the original requested data will have pointers in the index to all data packets as originally written. The new requested data will have pointers in the index to some of the original data packets and pointers to the modified data packets in the logical page that is currently being written.","In a copy operation, the index includes an entry for the original requested data mapped to a number of packets stored in the solid-state storage media . When a copy is made, a new copy of the requested data is created and a new entry is created in the index mapping the new copy of the requested data to the original packets. The new copy of the requested data is also written to the solid-state storage media  with its location mapped to the new entry in the index. The new copy of the requested data packets may be used to identify the packets within the original requested data that are referenced in case changes have been made in the original requested data that have not been propagated to the copy of the requested data and the index is lost or corrupted.","Beneficially, sequentially writing packets facilitates a more even use of the solid-state storage media  and allows the solid-storage device controller  to monitor storage hot spots and level usage of the various logical pages in the solid-state storage media . Sequentially writing packets also facilitates a powerful, efficient garbage collection system, which is described in detail below. One of skill in the art will recognize other benefits of sequential storage of data packets.","Solid-State Storage Device Controller","In various embodiments, the solid-state storage device controller  also includes a data bus , a local bus , a buffer controller , buffers -N -, a master controller , a direct memory access (\u201cDMA\u201d) controller , a memory controller , a dynamic memory array , a static random memory array , a management controller , a management bus , a bridge  to a system bus , and miscellaneous logic , which are described below. In other embodiments, the system bus  is coupled to one or more network interface cards (\u201cNICs\u201d) , some of which may include remote DMA (\u201cRDMA\u201d) controllers , one or more central processing unit (\u201cCPU\u201d) , one or more external memory controllers  and associated external memory arrays , one or more storage controllers , peer controllers , and application specific processors , which are described below. The components - connected to the system bus  may be located in the computing system  or may be other devices.","Typically the solid-state storage controller(s)  communicate data to the solid-state storage media  over a storage I\/O bus . In a typical embodiment where the solid-state storage is arranged in banks  and each bank  includes multiple storage elements , , accessed in parallel, the storage I\/O bus  is an array of busses, one for each column of storage elements , ,  spanning the banks . As used herein, the term \u201cstorage I\/O bus\u201d may refer to one storage I\/O bus  or an array of data independent busses . In one embodiment, each storage I\/O bus  accessing a column of storage elements (e.g. , , ) may include a logical-to-physical mapping for storage divisions (e.g. erase blocks) accessed in a column of storage elements , , . This mapping (or bad block remapping) allows a logical address mapped to a physical address of a storage division to be remapped to a different storage division if the first storage division fails, partially fails, is inaccessible, or has some other problem.","Data may also be communicated to the solid-state storage controller(s)  from a requesting device  through the system bus , bridge , local bus , buffer(s) , and finally over a data bus . The data bus  typically is connected to one or more buffers -controlled with a buffer controller . The buffer controller  typically controls transfer of data from the local bus  to the buffers  and through the data bus  to the pipeline input buffer  and output buffer . The buffer controller  typically controls how data arriving from a requesting device can be temporarily stored in a buffer  and then transferred onto a data bus , or vice versa, to account for different clock domains, to prevent data collisions, etc. The buffer controller  typically works in conjunction with the master controller  to coordinate data flow. As data arrives, the data will arrive on the system bus , be transferred to the local bus  through a bridge .","Typically the data is transferred from the local bus  to one or more data buffers  as directed by the master controller  and the buffer controller . The data then flows out of the buffer(s)  to the data bus , through a solid-state controller , and on to the solid-state storage media  such as NAND flash or other storage media. In one embodiment, data and associated out-of-band metadata (\u201cmetadata\u201d) arriving with the data is communicated using one or more data channels comprising one or more solid-state storage controllers -- and associated solid-state storage media -- while at least one channel (solid-state storage controller , solid-state storage media ) is dedicated to in-band metadata, such as index information and other metadata generated internally to the solid-state storage device .","The local bus  is typically a bidirectional bus or set of busses that allows for communication of data and commands between devices internal to the solid-state storage device controller  and between devices internal to the solid-state storage device  and devices - connected to the system bus . The bridge  facilitates communication between the local bus  and system bus . One of skill in the art will recognize other embodiments such as ring structures or switched star configurations and functions of buses , , ,  and bridges .","The system bus  is typically a bus of a computing system  or other device in which the solid-state storage device  is installed or connected. In one embodiment, the system bus  may be a PCI-e bus, a Serial Advanced Technology Attachment (\u201cserial ATA\u201d) bus, parallel ATA, or the like. In another embodiment, the system bus  is an external bus such as small computer system interface (\u201cSCSI\u201d), FireWire, Fiber Channel, USB, PCIe-AS, or the like. The solid-state storage device  may be packaged to fit internally to a device or as an externally connected device.","The solid-state storage device controller  includes a master controller  that controls higher-level functions within the solid-state storage device . The master controller , in various embodiments, controls data flow by interpreting object requests and other requests, directs creation of indexes to map object identifiers associated with data to physical locations of associated data, coordinating DMA requests, etc. Many of the functions described herein are controlled wholly or in part by the master controller .","In one embodiment, the master controller  uses embedded controller(s). In another embodiment, the master controller  uses local memory such as a dynamic memory array  (dynamic random access memory \u201cDRAM\u201d), a static memory array  (static random access memory \u201cSRAM\u201d), etc. In one embodiment, the local memory is controlled using the master controller . In another embodiment, the master controller  accesses the local memory via a memory controller . In another embodiment, the master controller  runs a Linux server and may support various common server interfaces, such as the World Wide Web, hyper-text markup language (\u201cHTML\u201d), etc. In another embodiment, the master controller  uses a nano-processor. The master controller  may be constructed using programmable or standard logic, or any combination of controller types listed above. One skilled in the art will recognize many embodiments for the master controller .","In one embodiment, where the storage device\/solid-state storage device controller  manages multiple data storage devices\/solid-state storage media -, the master controller  divides the work load among internal controllers, such as the solid-state storage controllers -. For example, the master controller  may divide an object to be written to the data storage devices (e.g. solid-state storage media -) so that a portion of the object is stored on each of the attached data storage devices. This feature is a performance enhancement allowing quicker storage and access to an object. In one embodiment, the master controller  is implemented using an FPGA. In another embodiment, the firmware within the master controller  may be updated through the management bus , the system bus  over a network connected to a NIC  or other device connected to the system bus .","In one embodiment, the master controller , which manages objects, emulates block storage such that a computing system  or other device connected to the storage device\/solid-state storage device  views the storage device\/solid-state storage device  as a block storage device and sends data to specific physical addresses in the storage device\/solid-state storage device . The master controller  then divides up the blocks and stores the data blocks as it would objects. The master controller  then maps the blocks and physical address sent with the block to the actual locations determined by the master controller . The mapping is stored in the object index. Typically, for block emulation, a block device application program interface (\u201cAPI\u201d) is provided in a driver in a computer such as the computing system , or other device wishing to use the storage device\/solid-state storage device  as a block storage device.","In another embodiment, the master controller  coordinates with NIC controllers  and embedded RDMA controllers  to deliver just-in-time RDMA transfers of data and command sets. NIC controller  may be hidden behind a non-transparent port to enable the use of custom drivers. Also, a driver on a computing system  may have access to the computer network  through an I\/O memory driver using a standard stack API and operating in conjunction with NICs .","In one embodiment, the master controller  is also a redundant array of independent drive (\u201cRAID\u201d) controller. Where the data storage device\/solid-state storage device  is networked with one or more other data storage devices\/solid-state storage devices , the master controller  may be a RAID controller for single tier RAID, multi-tier RAID, progressive RAID, etc. The master controller  also allows some objects to be stored in a RAID array and other objects to be stored without RAID. In another embodiment, the master controller  may be a distributed RAID controller element. In another embodiment, the master controller  may comprise many RAID, distributed RAID, and other functions as described elsewhere. In one embodiment, the master controller  controls storage of data in a RAID-like structure where parity information is stored in one or more storage elements , ,  of a logical page where the parity information protects data stored in the other storage elements , ,  of the same logical page.","In one embodiment, the master controller  coordinates with single or redundant network managers (e.g. switches) to establish routing, to balance bandwidth utilization, failover, etc. In another embodiment, the master controller  coordinates with integrated application specific logic (via local bus ) and associated driver software. In another embodiment, the master controller  coordinates with attached application specific processors  or logic (via the external system bus ) and associated driver software. In another embodiment, the master controller  coordinates with remote application specific logic (via the computer network ) and associated driver software. In another embodiment, the master controller  coordinates with the local bus  or external bus attached hard disk drive (\u201cHDD\u201d) storage controller.","In one embodiment, the master controller  communicates with one or more storage controllers  where the storage device\/solid-state storage device  may appear as a storage device connected through a SCSI bus, Internet SCSI (\u201ciSCSI\u201d), fiber channel, etc. Meanwhile the storage device\/solid-state storage device  may autonomously manage objects and may appear as an object file system or distributed object file system. The master controller  may also be accessed by peer controllers  and\/or application specific processors .","In another embodiment, the master controller  coordinates with an autonomous integrated management controller to periodically validate FPGA code and\/or controller software, validate FPGA code while running (reset) and\/or validate controller software during power on (reset), support external reset requests, support reset requests due to watchdog timeouts, and support voltage, current, power, temperature, and other environmental measurements and setting of threshold interrupts. In another embodiment, the master controller  manages garbage collection to free erase blocks for reuse. In another embodiment, the master controller  manages wear leveling. In another embodiment, the master controller  allows the data storage device\/solid-state storage device  to be partitioned into multiple logical devices and allows partition-based media encryption. In yet another embodiment, the master controller  supports a solid-state storage controller  with advanced, multi-bit ECC correction. One of skill in the art will recognize other features and functions of a master controller  in a storage controller , or more specifically in a solid-state storage device .","In one embodiment, the solid-state storage device controller  includes a memory controller  which controls a dynamic random memory array  and\/or a static random memory array . As stated above, the memory controller  may be independent or integrated with the master controller . The memory controller  typically controls volatile memory of some type, such as DRAM (dynamic random memory array ) and SRAM (static random memory array ). In other examples, the memory controller  also controls other memory types such as electrically erasable programmable read only memory (\u201cEEPROM\u201d), etc. In other embodiments, the memory controller  controls two or more memory types and the memory controller  may include more than one controller. Typically, the memory controller  controls as much SRAM  as is feasible and by DRAM  to supplement the SRAM .","In one embodiment, the object index is stored in memory ,  and then periodically off-loaded to a channel of the solid-state storage media or other non-volatile memory. One of skill in the art will recognize other uses and configurations of the memory controller , dynamic memory array , and static memory array .","In one embodiment, the solid-state storage device controller  includes a DMA controller  that controls DMA operations between the storage device\/solid-state storage device  and one or more external memory controllers  and associated external memory arrays  and CPUs . Note that the external memory controllers  and external memory arrays  are called external because they are external to the storage device\/solid-state storage device . In addition the DMA controller  may also control RDMA operations with requesting devices through a NIC  and associated RDMA controller .","In one embodiment, the solid-state storage device controller  includes a management controller  connected to a management bus . Typically the management controller  manages environmental metrics and status of the storage device\/solid-state storage device . The management controller  may monitor device temperature, fan speed, power supply settings, etc. over the management bus . The management controller  may support the reading and programming of erasable programmable read only memory (\u201cEEPROM\u201d) for storage of FPGA code and controller software. Typically the management bus  is connected to the various components within the storage device\/solid-state storage device . The management controller  may communicate alerts, interrupts, etc. over the local bus  or may include a separate connection to a system bus  or other bus. In one embodiment the management bus  is an Inter-Integrated Circuit (\u201cI2C\u201d) bus. One of skill in the art will recognize other related functions and uses of a management controller  connected to components of the storage device\/solid-state storage device  by a management bus .","In one embodiment, the solid-state storage device controller  includes miscellaneous logic  that may be customized for a specific application. Typically where the solid-state device controller  or master controller  is\/are configured using a FPGA or other configurable controller, custom logic may be included based on a particular application, customer requirement, storage requirement, etc.","Data Pipeline",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 3","FIG. 1A","FIG. 2"],"b":["300","104","106","102","300","120","120","300","120","300","204","206","208","202","106","302","304","106","306","308","310","312","314","316","108","318","320","108","328","322","324","326","330","108","332","316","334","336","338","104","340","342","344","346","348","350","104","106","108","110","308","328"]},"Write Data Pipeline","The write data pipeline  includes a packetizer  that receives a data or metadata segment to be written to the solid-state storage, either directly or indirectly through another write data pipeline  stage, and creates one or more packets sized for the solid-state storage media . The data or metadata segment is typically part of a data structure such as an object, but may also include an entire data structure. In another embodiment, the data segment is part of a block of data, but may also include an entire block of data. Typically, a set of data such as a data structure is received from a computer such as the computing system , or other computer or device and is transmitted to the solid-state storage device  in data segments streamed to the solid-state storage device . A data segment may also be known by another name, such as data parcel, but as referenced herein includes all or a portion of a data structure or data block.","Each data structure is stored as one or more packets. Each data structure may have one or more container packets. Each packet contains a header. The header may include a header type field. Type fields may include data, attribute, metadata, data segment delimiters (multi-packet), data structures, data linkages, and the like. The header may also include information regarding the size of the packet, such as the number of bytes of data included in the packet. The length of the packet may be established by the packet type. The header may include information that establishes the relationship of the packet to a data structure. An example might be the use of an offset in a data packet header to identify the location of the data segment within the data structure. One of skill in the art will recognize other information that may be included in a header added to data by a packetizer  and other information that may be added to a data packet.","Each packet includes a header and possibly data from the data or metadata segment. The header of each packet includes pertinent information to relate the packet to the data structure to which the packet belongs. For example, the header may include an object identifier or other data structure identifier and offset that indicates the data segment, object, data structure or data block from which the data packet was formed. The header may also include a logical address used by the storage bus controller  to store the packet. The header may also include information regarding the size of the packet, such as the number of bytes included in the packet. The header may also include a sequence number that identifies where the data segment belongs with respect to other packets within the data structure when reconstructing the data segment or data structure. The header may include a header type field. Type fields may include data, data structure attributes, metadata, data segment delimiters (multi-packet), data structure types, data structure linkages, and the like. One of skill in the art will recognize other information that may be included in a header added to data or metadata by a packetizer  and other information that may be added to a packet.","The write data pipeline  includes an ECC generator  that that generates one or more error-correcting codes (\u201cECC\u201d) for the one or more packets received from the packetizer . The ECC generator  typically uses an error correcting algorithm to generate ECC check bits which are stored with the one or more data packets. The ECC codes generated by the ECC generator  together with the one or more data packets associated with the ECC codes comprise an ECC chunk. The ECC data stored with the one or more data packets is used to detect and to correct errors introduced into the data through transmission and storage. In one embodiment, packets are streamed into the ECC generator  as un-encoded blocks of length N. A syndrome of length S is calculated, appended and output as an encoded block of length N+S. The value of N and S are dependent upon the characteristics of the ECC algorithm which is selected to achieve specific performance, efficiency, and robustness metrics. In one embodiment, there is no fixed relationship between the ECC blocks and the packets; the packet may comprise more than one ECC block; the ECC block may comprise more than one packet; and a first packet may end anywhere within the ECC block and a second packet may begin after the end of the first packet within the same ECC block. In one embodiment, ECC algorithms are not dynamically modified. In one embodiment, the ECC data stored with the data packets is robust enough to correct errors in more than two bits.","Beneficially, using a robust ECC algorithm allowing more than single bit correction or even double bit correction allows the life of the solid-state storage media  to be extended. For example, if flash memory is used as the storage medium in the solid-state storage media , the flash memory may be written approximately 100,000 times without error per erase cycle. This usage limit may be extended using a robust ECC algorithm. Having the ECC generator  and corresponding ECC correction module  onboard the solid-state storage device , the solid-state storage device  can internally correct errors and has a longer useful life than if a less robust ECC algorithm is used, such as single bit correction. However, in other embodiments the ECC generator  may use a less robust algorithm and may correct single-bit or double-bit errors. In another embodiment, the solid-state storage device  may comprise less reliable storage such as multi-level cell (\u201cMLC\u201d) flash in order to increase capacity, which storage may not be sufficiently reliable without more robust ECC algorithms.","In one embodiment, the write pipeline  includes an input buffer  that receives a data segment to be written to the solid-state storage media  and stores the incoming data segments until the next stage of the write data pipeline , such as the packetizer  (or other stage for a more complex write data pipeline ) is ready to process the next data segment. The input buffer  typically allows for discrepancies between the rate data segments are received and processed by the write data pipeline  using an appropriately sized data buffer. The input buffer  also allows the data bus  to transfer data to the write data pipeline  at rates greater than can be sustained by the write data pipeline  in order to improve efficiency of operation of the data bus . Typically when the write data pipeline  does not include an input buffer , a buffering function is performed elsewhere, such as in the solid-state storage device  but outside the write data pipeline , in the computing system , such as within a network interface card (\u201cNIC\u201d), or at another device, for example when using remote direct memory access (\u201cRDMA\u201d).","In another embodiment, the write data pipeline  also includes a write synchronization buffer  that buffers packets received from the ECC generator  prior to writing the packets to the solid-state storage media . The write synchronization buffer  is located at a boundary between a local clock domain and a solid-state storage clock domain and provides buffering to account for the clock domain differences. In other embodiments, synchronous solid-state storage media  may be used and synchronization buffers   may be eliminated.","In one embodiment, the write data pipeline  also includes a media encryption module  that receives the one or more packets from the packetizer , either directly or indirectly, and encrypts the one or more packets using an encryption key unique to the solid-state storage device  prior to sending the packets to the ECC generator . Typically, the entire packet is encrypted, including the headers. In another embodiment, headers are not encrypted. In this document, encryption key is understood to mean a secret encryption key that is managed externally from a solid-state storage controller .","The media encryption module  and corresponding media decryption module  provide a level of security for data stored in the solid-state storage media . For example, where data is encrypted with the media encryption module , if the solid-state storage media  is connected to a different solid-state storage controller , solid-state storage device , or server, the contents of the solid-state storage media  typically could not be read without use of the same encryption key used during the write of the data to the solid-state storage media  without significant effort.","In a typical embodiment, the solid-state storage device  does not store the encryption key in non-volatile storage and allows no external access to the encryption key. The encryption key is provided to the solid-state storage controller  during initialization. The solid-state storage device  may use and store a non-secret cryptographic nonce that is used in conjunction with an encryption key. A different nonce may be stored with every packet. Data segments may be split between multiple packets with unique nonces for the purpose of improving protection by the encryption algorithm.","The encryption key may be received from a computing system , a server, key manager, or other device that manages the encryption key to be used by the solid-state storage controller . In another embodiment, the solid-state storage media  may have two or more partitions and the solid-state storage controller  behaves as though it was two or more solid-state storage controllers , each operating on a single partition within the solid-state storage media . In this embodiment, a unique media encryption key may be used with each partition.","In another embodiment, the write data pipeline  also includes an encryption module  that encrypts a data or metadata segment received from the input buffer , either directly or indirectly, prior sending the data segment to the packetizer , the data segment encrypted using an encryption key received in conjunction with the data segment. The encryption keys used by the encryption module  to encrypt data may not be common to all data stored within the solid-state storage device  but may vary on an per data structure basis and received in conjunction with receiving data segments as described below. For example, an encryption key for a data segment to be encrypted by the encryption module  may be received with the data segment or may be received as part of a command to write a data structure to which the data segment belongs. The solid-state storage device  may use and store a non-secret cryptographic nonce in each data structure packet that is used in conjunction with the encryption key. A different nonce may be stored with every packet. Data segments may be split between multiple packets with unique nonces for the purpose of improving protection by the encryption algorithm.","The encryption key may be received from a computing system , another computer, key manager, or other device that holds the encryption key to be used to encrypt the data segment. In one embodiment, encryption keys are transferred to the solid-state storage controller  from one of a solid-state storage device , computing system , computer, or other external agent which has the ability to execute industry standard methods to securely transfer and protect private and public keys.","In one embodiment, the encryption module  encrypts a first packet with a first encryption key received in conjunction with the packet and encrypts a second packet with a second encryption key received in conjunction with the second packet. In another embodiment, the encryption module  encrypts a first packet with a first encryption key received in conjunction with the packet and passes a second data packet on to the next stage without encryption. Beneficially, the encryption module  included in the write data pipeline  of the solid-state storage device  allows data structure-by-data structure or segment-by-segment data encryption without a single file system or other external system to keep track of the different encryption keys used to store corresponding data structures or data segments. Each requesting device  or related key manager independently manages encryption keys used to encrypt only the data structures or data segments sent by the requesting device .","In one embodiment, the encryption module  may encrypt the one or more packets using an encryption key unique to the solid-state storage device . The encryption module  may perform this media encryption independently, or in addition to the encryption described above. Typically, the entire packet is encrypted, including the headers. In another embodiment, headers are not encrypted. The media encryption by the encryption module  provides a level of security for data stored in the solid-state storage media . For example, where data is encrypted with media encryption unique to the specific solid-state storage device , if the solid-state storage media  is connected to a different solid-state storage controller , solid-state storage device , or computing system , the contents of the solid-state storage media  typically could not be read without use of the same encryption key used during the write of the data to the solid-state storage media  without significant effort.","In another embodiment, the write data pipeline  includes a compression module  that compresses the data for metadata segment prior to sending the data segment to the packetizer . The compression module  typically compresses a data or metadata segment using a compression routine known to those of skill in the art to reduce the storage size of the segment. For example, if a data segment includes a string of 512 zeros, the compression module  may replace the 512 zeros with code or token indicating the 512 zeros where the code is much more compact than the space taken by the 512 zeros.","In one embodiment, the compression module  compresses a first segment with a first compression routine and passes along a second segment without compression. In another embodiment, the compression module  compresses a first segment with a first compression routine and compresses the second segment with a second compression routine. Having this flexibility within the solid-state storage device  is beneficial so that computing systems  or other devices writing data to the solid-state storage device  may each specify a compression routine or so that one can specify a compression routine while another specifies no compression. Selection of compression routines may also be selected according to default settings on a per data structure type or data structure class basis. For example, a first data structure of a specific data structure may be able to override default compression routine settings and a second data structure of the same data structure class and data structure type may use the default compression routine and a third data structure of the same data structure class and data structure type may use no compression.","In one embodiment, the write data pipeline  includes a garbage collector bypass  that receives data segments from the read data pipeline  as part of a data bypass in a garbage collection system. A garbage collection system typically marks packets that are no longer valid, typically because the packet is marked for deletion or has been modified and the modified data is stored in a different location. At some point, the garbage collection system determines that a particular section of storage may be recovered. This determination may be due to a lack of available storage capacity, the percentage of data marked as invalid reaching a threshold, a consolidation of valid data, an error detection rate for that section of storage reaching a threshold, or improving performance based on data distribution, etc. Numerous factors may be considered by a garbage collection algorithm to determine when a section of storage is to be recovered.","Once a section of storage has been marked for recovery, valid packets in the section typically must be relocated. The garbage collector bypass  allows packets to be read into the read data pipeline  and then transferred directly to the write data pipeline  without being routed out of the solid-state storage controller . In one embodiment, the garbage collector bypass  is part of an autonomous garbage collector system that operates within the solid-state storage device . This allows the solid-state storage device  to manage data so that data is systematically spread throughout the solid-state storage media  to improve performance, data reliability and to avoid overuse and underuse of any one location or area of the solid-state storage media  and to lengthen the useful life of the solid-state storage media .","The garbage collector bypass  coordinates insertion of segments into the write data pipeline  with other segments being written by computing systems  or other devices. In the depicted embodiment, the garbage collector bypass  is before the packetizer  in the write data pipeline  and after the depacketizer  in the read data pipeline , but may also be located elsewhere in the read and write data pipelines , . The garbage collector bypass  may be used during a flush of the write pipeline  to fill the remainder of the virtual page in order to improve the efficiency of storage within the solid-state storage media  and thereby reduce the frequency of garbage collection.","In one embodiment, the write data pipeline  includes a write buffer  that buffers data for efficient write operations. Typically, the write buffer  includes enough capacity for packets to fill at least one virtual page in the solid-state storage media . This allows a write operation to send an entire page of data to the solid-state storage media  without interruption. By sizing the write buffer  of the write data pipeline  and buffers within the read data pipeline  to be the same capacity or larger than a storage write buffer within the solid-state storage media , writing and reading data is more efficient since a single write command may be crafted to send a full virtual page of data to the solid-state storage media  instead of multiple commands.","While the write buffer  is being filled, the solid-state storage media  may be used for other read operations. This is advantageous because other solid-state devices with a smaller write buffer or no write buffer may tie up the solid-state storage when data is written to a storage write buffer and data flowing into the storage write buffer stalls. Read operations will be blocked until the entire storage write buffer is filled and programmed. Another approach for systems without a write buffer or a small write buffer is to flush the storage write buffer that is not full in order to enable reads. Again this is inefficient because multiple write\/program cycles are required to fill a page.","For depicted embodiment with a write buffer  sized larger than a virtual page, a single write command, which includes numerous subcommands, can then be followed by a single program command to transfer the page of data from the storage write buffer in each solid-state storage element , ,  to the designated page within each solid-state storage element , , . This technique has the benefits of eliminating partial page programming, which is known to reduce data reliability and durability and freeing up the destination bank for reads and other commands while the buffer fills.","In one embodiment, the write buffer  is a ping-pong buffer where one side of the buffer is filled and then designated for transfer at an appropriate time while the other side of the ping-pong buffer is being filled. In another embodiment, the write buffer  includes a first-in first-out (\u201cFIFO\u201d) register with a capacity of more than a virtual page of data segments. One of skill in the art will recognize other write buffer  configurations that allow a virtual page of data to be stored prior to writing the data to the solid-state storage media .","In another embodiment, the write buffer  is sized smaller than a virtual page so that less than a page of information could be written to a storage write buffer in the solid-state storage media . In the embodiment, to prevent a stall in the write data pipeline  from holding up read operations, data is queued using the garbage collection system that needs to be moved from one location to another as part of the garbage collection process. In case of a data stall in the write data pipeline , the data can be fed through the garbage collector bypass  to the write buffer  and then on to the storage write buffer in the solid-state storage media  to fill the pages of a virtual page prior to programming the data. In this way a data stall in the write data pipeline  would not stall reading from the solid-state storage device .","In another embodiment, the write data pipeline  includes a write program module  with one or more user-definable functions within the write data pipeline . The write program module  allows a user to customize the write data pipeline . A user may customize the write data pipeline  based on a particular data requirement or application. Where the solid-state storage controller  is an FPGA, the user may program the write data pipeline  with custom commands and functions relatively easily. A user may also use the write program module  to include custom functions with an ASIC, however, customizing an ASIC may be more difficult than with an FPGA. The write program module  may include buffers and bypass mechanisms to allow a first data segment to execute in the write program module  while a second data segment may continue through the write data pipeline . In another embodiment, the write program module  may include a processor core that can be programmed through software.","Note that the write program module  is shown between the input buffer  and the compression module , however, the write program module  could be anywhere in the write data pipeline  and may be distributed among the various stages -. In addition, there may be multiple write program modules  distributed among the various states - that are programmed and operate independently. In addition, the order of the stages - may be altered. One of skill in the art will recognize workable alterations to the order of the stages - based on particular user requirements.","Read Data Pipeline","The read data pipeline  includes an ECC correction module  that determines if a data error exists in ECC blocks a requested packet received from the solid-state storage media  by using ECC stored with each ECC block of the requested packet. The ECC correction module  then corrects any errors in the requested packet if any error exists and the errors are correctable using the ECC. For example, if the ECC can detect an error in six bits but can only correct three bit errors, the ECC correction module  corrects ECC blocks of the requested packet with up to three bits in error. The ECC correction module  corrects the bits in error by changing the bits in error to the correct one or zero state so that the requested data packet is identical to when it was written to the solid-state storage media  and the ECC was generated for the packet.","If the ECC correction module  determines that the requested packets contains more bits in error than the ECC can correct, the ECC correction module  cannot correct the errors in the corrupted ECC blocks of the requested packet and sends an interrupt. In one embodiment, the ECC correction module  sends an interrupt with a message indicating that the requested packet is in error. The message may include information that the ECC correction module  cannot correct the errors or the inability of the ECC correction module  to correct the errors may be implied. In another embodiment, the ECC correction module  sends the corrupted ECC blocks of the requested packet with the interrupt and\/or the message.","In one embodiment, a corrupted ECC block or portion of a corrupted ECC block of the requested packet that cannot be corrected by the ECC correction module  is read by the master controller , corrected, and returned to the ECC correction module  for further processing by the read data pipeline . In one embodiment, a corrupted ECC block or portion of a corrupted ECC block of the requested packet is sent to the device requesting the data. The requesting device  may correct the ECC block or replace the data using another copy, such as a backup or mirror copy, and then may use the replacement data of the requested data packet or return it to the read data pipeline . The requesting device  may use header information in the requested packet in error to identify data required to replace the corrupted requested packet or to replace the data structure to which the packet belongs. In another embodiment, the solid-state storage controller  stores data using some type of RAID and is able to recover the corrupted data. In another embodiment, the ECC correction module  sends an interrupt and\/or message and the receiving device fails the read operation associated with the requested data packet. One of skill in the art will recognize other options and actions to be taken as a result of the ECC correction module  determining that one or more ECC blocks of the requested packet are corrupted and that the ECC correction module  cannot correct the errors.","The read data pipeline  includes a depacketizer  that receives ECC blocks of the requested packet from the ECC correction module , directly or indirectly, and checks and removes one or more packet headers. The depacketizer  may validate the packet headers by checking packet identifiers, data length, data location, etc. within the headers. In one embodiment, the header includes a hash code that can be used to validate that the packet delivered to the read data pipeline  is the requested packet. The depacketizer  also removes the headers from the requested packet added by the packetizer . The depacketizer  may directed to not operate on certain packets but pass these forward without modification. An example might be a container label that is requested during the course of a rebuild process where the header information is required for index reconstruction. Further examples include the transfer of packets of various types destined for use within the solid-state storage device . In another embodiment, the depacketizer  operation may be packet type dependent.","The read data pipeline  includes an alignment module  that receives data from the depacketizer  and removes unwanted data. In one embodiment, a read command sent to the solid-state storage media  retrieves a packet of data. A device requesting the data may not require all data within the retrieved packet and the alignment module  removes the unwanted data. If all data within a retrieved page is requested data, the alignment module  does not remove any data.","The alignment module  re-formats the data as data segments of a data structure in a form compatible with a device requesting the data segment prior to forwarding the data segment to the next stage. Typically, as data is processed by the read data pipeline , the size of data segments or packets changes at various stages. The alignment module  uses received data to format the data into data segments suitable to be sent to the requesting device  and joined to form a response. For example, data from a portion of a first data packet may be combined with data from a portion of a second data packet. If a data segment is larger than a data requested by the requesting device , the alignment module  may discard the unwanted data.","In one embodiment, the read data pipeline  includes a read synchronization buffer  that buffers one or more requested packets read from the solid-state storage media  prior to processing by the read data pipeline . The read synchronization buffer  is at the boundary between the solid-state storage clock domain and the local bus clock domain and provides buffering to account for the clock domain differences.","In another embodiment, the read data pipeline  includes an output buffer  that receives requested packets from the alignment module  and stores the packets prior to transmission to the requesting device . The output buffer  accounts for differences between when data segments are received from stages of the read data pipeline  and when the data segments are transmitted to other parts of the solid-state storage controller  or to the requesting device . The output buffer  also allows the data bus  to receive data from the read data pipeline  at rates greater than can be sustained by the read data pipeline  in order to improve efficiency of operation of the data bus .","In one embodiment, the read data pipeline  includes a media decryption module  that receives one or more encrypted requested packets from the ECC correction module  and decrypts the one or more requested packets using the encryption key unique to the solid-state storage device  prior to sending the one or more requested packets to the depacketizer . Typically the encryption key used to decrypt data by the media decryption module  is identical to the encryption key used by the media encryption module . In another embodiment, the solid-state storage media  may have two or more partitions and the solid-state storage controller  behaves as though it was two or more solid-state storage controllers  each operating on a single partition within the solid-state storage media . In this embodiment, a unique media encryption key may be used with each partition.","In another embodiment, the read data pipeline  includes a decryption module  that decrypts a data segment formatted by the depacketizer  prior to sending the data segment to the output buffer . The data segment may be decrypted using an encryption key received in conjunction with the read request that initiates retrieval of the requested packet received by the read synchronization buffer . The decryption module  may decrypt a first packet with an encryption key received in conjunction with the read request for the first packet and then may decrypt a second packet with a different encryption key or may pass the second packet on to the next stage of the read data pipeline  without decryption. When the packet was stored with a non-secret cryptographic nonce, the nonce is used in conjunction with an encryption key to decrypt the data packet. The encryption key may be received from a computing system , a client, key manager, or other device that manages the encryption key to be used by the solid-state storage controller .","In another embodiment, the read data pipeline  includes a decompression module  that decompresses a data segment formatted by the depacketizer . In one embodiment, the decompression module  uses compression information stored in one or both of the packet header and the container label to select a complementary routine to that used to compress the data by the compression module . In another embodiment, the decompression routine used by the decompression module  is dictated by the device requesting the data segment being decompressed. In another embodiment, the decompression module  selects a decompression routine according to default settings on a per data structure type or data structure class basis. A first packet of a first object may be able to override a default decompression routine and a second packet of a second data structure of the same data structure class and data structure type may use the default decompression routine and a third packet of a third data structure of the same data structure class and data structure type may use no decompression.","In another embodiment, the read data pipeline  includes a read program module  that includes one or more user-definable functions within the read data pipeline . The read program module  has similar characteristics to the write program module  and allows a user to provide custom functions to the read data pipeline . The read program module  may be located as shown in , may be located in another position within the read data pipeline , or may include multiple parts in multiple locations within the read data pipeline . Additionally, there may be multiple read program modules  within multiple locations within the read data pipeline  that operate independently. One of skill in the art will recognize other forms of a read program module  within a read data pipeline . As with the write data pipeline , the stages of the read data pipeline  may be rearranged and one of skill in the art will recognize other orders of stages within the read data pipeline .","The solid-state storage controller  includes control and status registers  and corresponding control queues . The control and status registers  and control queues  facilitate control and sequencing commands and subcommands associated with data processed in the write and read data pipelines , . For example, a data segment in the packetizer  may have one or more corresponding control commands or instructions in a control queue  associated with the ECC generator . As the data segment is packetized, some of the instructions or commands may be executed within the packetizer . Other commands or instructions may be passed to the next control queue  through the control and status registers  as the newly formed data packet created from the data segment is passed to the next stage.","Commands or instructions may be simultaneously loaded into the control queues  for a packet being forwarded to the write data pipeline  with each pipeline stage pulling the appropriate command or instruction as the respective packet is executed by that stage. Similarly, commands or instructions may be simultaneously loaded into the control queues  for a packet being requested from the read data pipeline  with each pipeline stage pulling the appropriate command or instruction as the respective packet is executed by that stage. One of skill in the art will recognize other features and functions of control and status registers  and control queues .","In one embodiment, the bandwidth governor module  adjusts the execution of write operations by adjusting a rate that write operations progress through the write data pipeline . The bandwidth governor module , in one embodiment, may adjust the rate that packets progress between stages in the write data pipeline , either at a single point or at multiple points in the write data pipeline . An adjustment to a frequency at which write operations are submitted to the storage device  for execution is referred to as front-end throttling. Front-end throttling, in certain embodiments, takes advantage of natural or built-in pauses or breaks in the write data pipeline  (i.e. write operations to the media) to add or reduce delays, thereby managing a submission frequency of write operations. For example, the write data pipeline  may include a natural or built in delay at a control queue , a buffer , , , between stages of the write data pipeline , or the like that the bandwidth governor module  may manage. Using various managed delays, the bandwidth governor module  may adjust a rate that data is submitted to, or advanced through, the write data pipeline .","For example, the bandwidth governor module  may determine a submission frequency that satisfies a write bandwidth target, and at one or more points in the write data pipeline , may allow a write operation or delay the write operation to satisfy the submission frequency. By using front-end throttling, in certain embodiments, the bandwidth governor module  allows other operations to execute on the storage device  between submitting write operations to the storage device , because front-end adjustments typically do not lock or block access to the storage device . For example, the bandwidth governor module  may allow read operations, system operations, read voltage threshold adjustments, write voltage threshold adjustments, bus arbitration operations, address operations, or the like to execute while waiting to submit a write operation to the storage device .","In another embodiment, the bandwidth governor module  may use back-end throttling, adjusting the rate that the storage bus controller  may place write operations on the storage control bus . One example of a back-end adjustment is an adjustment to a tPROG wait time. The tPROG wait time is discussed in greater detail below with regard to  and . In general, the tPROG wait time is the period of time between submitting a program command to a memory area (such as a die, a bank, a physical or logical page, or the like) and submitting a subsequent command to the same memory area (typically a READ STATUS command, or the like, program commands may be followed by Read Status commands to ensure the program command was successful before permitting execution of a subsequent command).","In one embodiment, the control and status registers  include a tPROG register for setting a tPROG wait time for the storage device , and the bandwidth governor module  adjusts or throttles the execution of write operations by changing the value in the tPROG register. Increasing the tPROG wait time, in one embodiment, increases an amount of time that a program operation appears to take (the solid-state storage  may actually have taken less time to complete the program operation), thereby slowing the progression of write data from the write data pipeline  and decreasing the write bandwidth of the storage device . In certain embodiments, back-end throttling may temporarily lock or block the storage device  from executing other operations.","In one embodiment, the bandwidth governor module  manages or throttles a write bandwidth for the storage device  at a position or point in the data flow at or below a lowest common point or single point through which every byte of data physically written to the storage media  passes, including garbage collector or groomer data fed into the garbage collector bypass , header data or other metadata added by the packetizer , ECC data added by the ECC generator , and\/or other write data.","In the depicted embodiment , the lowest common point or single point is at or below the write buffer . In other embodiments, the bandwidth governor module  may determine the write bandwidth for a position above a lowest common point or single point, so as to exclude certain data from the write bandwidth monitoring, such as garbage collector or groomer data fed into the garbage collector bypass , header data or other metadata added by the packetizer , ECC data added by the ECC generator , and\/or other write data.","In one embodiment, the bandwidth governor module  adjusts or throttles execution of write operations at a point within or after the write data pipeline  such that no write data bypasses the throttling. For example, the bandwidth governor module  may throttle write operations at a point after the garbage collector bypass  such that garbage collector or groomer data and user data are both equally throttled. In another embodiment, the bandwidth governor module  may monitor and throttle certain types of write data while allowing other write data to bypass throttling. For example, the bandwidth governor module , in certain embodiments, may monitor and potentially throttle write bandwidths of user data, but may bypass throttling for garbage collector data, groomer data, storage device metadata, and the like. In one embodiment, the garbage collector bypass  disables bandwidth throttling when writing garbage collector data forward in the log, by alerting the bandwidth governor module , setting a tPROG register, or the like.","The solid-state storage controller  and or solid-state storage device  may also include a bank interleave controller , a synchronization buffer , a storage bus controller , and a multiplexer (\u201cMUX\u201d) , which are described in relation to .","Bank Interleave",{"@attributes":{"id":"p-0164","num":"0163"},"figref":"FIG. 4","b":["400","344","104","344","340","210","212","350","348","346","344","402","404","406","408","410","412","414","416","214","110","418","420","422","348","424","430","426","428"],"i":["a","n","a","n","a","n","a","n ","a","n"]},"The bank interleave controller  directs one or more commands to two or more queues in the bank interleave controller  and coordinates among the banks  of the solid-state storage media  execution of the commands stored in the queues, such that a command of a first type executes on one bank while a command of a second type executes on a second bank . The one or more commands are separated by command type into the queues. Each bank  of the solid-state storage media  has a corresponding set of queues within the bank interleave controller  and each set of queues includes a queue for each command type.","The bank interleave controller  coordinates among the banks  of the solid-state storage media  execution of the commands stored in the queues. For example, a command of a first type executes on one bank while a command of a second type executes on a second bank . Typically the command types and queue types include read and write commands and queues , , but may also include other commands and queues that are storage media specific. For example, in the embodiment depicted in , erase and management queues ,  are included and would be appropriate for flash memory, NRAM, MRAM, DRAM, PRAM, etc.","For other types of solid-state storage media , other types of commands and corresponding queues may be included without straying from the scope of the invention. The flexible nature of an FPGA solid-state storage controller  allows flexibility in storage media. If flash memory were changed to another solid-state storage type, the bank interleave controller , storage bus controller , and MUX  could be altered to accommodate the media type without significantly affecting the data pipelines ,  and other solid-state storage controller  functions.","In the embodiment depicted in , the bank interleave controller  includes, for each bank , a read queue  for reading data from the solid-state storage media , a write queue  for write commands to the solid-state storage media , an erase queue  for erasing an erase block in the solid-state storage, an a management queue  for management commands. The bank interleave controller  also includes corresponding read, write, erase, and management agents , , , . In another embodiment, the control and status registers  and control queues  or similar components queue commands for data sent to the banks  of the solid-state storage media  without a bank interleave controller .","The agents , , , , in one embodiment, direct commands of the appropriate type destined for a particular bank to the correct queue for the bank . For example, the read agent  may receive a read command for bank- and directs the read command to the bank- read queue . The write agent  may receive a write command to write data to a location in bank- of the solid-state storage media  and will then send the write command to the bank- write queue . Similarly, the erase agent  may receive an erase command to erase an erase block in bank- and will then pass the erase command to the bank- erase queue . The management agent  typically receives management commands, status requests, and the like, such as a reset command or a request to read a configuration register of a bank , such as bank- . The management agent  sends the management command to the bank- management queue ","The agents , , ,  typically also monitor status of the queues , , ,  and send status, interrupt, or other messages when the queues , , ,  are full, nearly full, non-functional, etc. In one embodiment, the agents , , ,  receive commands and generate corresponding sub-commands. In one embodiment, the agents , , ,  receive commands through the control & status registers  and generate corresponding sub-commands which are forwarded to the queues , , , . One of skill in the art will recognize other functions of the agents , , , .","The queues , , ,  typically receive commands and store the commands until required to be sent to the solid-state storage banks . In a typical embodiment, the queues , , ,  are first-in, first-out (\u201cFIFO\u201d) registers or a similar component that operates as a FIFO. In another embodiment, the queues , , ,  store commands in an order that matches data, order of importance, or other criteria.","The bank controllers  typically receive commands from the queues , , ,  and generate appropriate subcommands. For example, the bank- write queue may receive a command to write a page of data packets to bank- . The bank- controller may receive the write command at an appropriate time and may generate one or more write subcommands for each data packet stored in the write buffer  to be written to the page in bank- . For example, bank- controller may generate commands to validate the status of bank  and the solid-state storage array , select the appropriate location for writing one or more data packets, clear the input buffers within the solid-state storage memory array , transfer the one or more data packets to the input buffers, program the input buffers into the selected location, verify that the data was correctly programmed, and if program failures occur do one or more of interrupting the master controller , retrying the write to the same physical location, and retrying the write to a different physical location. Additionally, in conjunction with example write command, the storage bus controller  will cause the one or more commands to multiplied to each of the each of the storage I\/O buses -with the logical address of the command mapped to a first physical addresses for storage I\/O bus , and mapped to a second physical address for storage I\/O bus , and so forth as further described below.","Typically, bus arbiter  selects from among the bank controllers  and pulls subcommands from output queues within the bank controllers  and forwards these to the Storage Bus Controller  in a sequence that optimizes the performance of the banks . In another embodiment, the bus arbiter  may respond to a high level interrupt and modify the normal selection criteria. In another embodiment, the master controller  can control the bus arbiter  through the control and status registers . One of skill in the art will recognize other means by which the bus arbiter  may control and interleave the sequence of commands from the bank controllers  to the solid-state storage media .","The bus arbiter  typically coordinates selection of appropriate commands, and corresponding data when required for the command type, from the bank controllers  and sends the commands and data to the storage bus controller . The bus arbiter  typically also sends commands to the storage control bus  to select the appropriate bank . For the case of flash memory or other solid-state storage media  with an asynchronous, bi-directional serial storage I\/O bus , only one command (control information) or set of data can be transmitted at a time. For example, when write commands or data are being transmitted to the solid-state storage media  on the storage I\/O bus , read commands, data being read, erase commands, management commands, or other status commands cannot be transmitted on the storage I\/O bus . For example, when data is being read from the storage I\/O bus , data cannot be written to the solid-state storage media .","For example, during a write operation on bank- the bus arbiter  selects the bank- controller which may have a write command or a series of write sub-commands on the top of its queue which cause the storage bus controller  to execute the following sequence. The bus arbiter  forwards the write command to the storage bus controller , which sets up a write command by selecting bank- through the storage control bus , sending a command to clear the input buffers of the solid-state storage elements  associated with the bank- , and sending a command to validate the status of the solid-state storage elements , ,  associated with the bank- . The storage bus controller  then transmits a write subcommand on the storage I\/O bus , which contains the physical addresses including the address of the logical erase block for each individual physical erase solid-stage storage element -as mapped from the logical erase block address. The storage bus controller  then muxes the write buffer  through the write synchronization buffer  to the storage I\/O bus  through the MUX  and streams write data to the appropriate page. When the page is full, then storage bus controller  causes the solid-state storage elements -associated with the bank- to program the input buffer to the memory cells within the solid-state storage elements -. Finally, the storage bus controller  validates the status to ensure that page was correctly programmed.","A read operation is similar to the write example above. During a read operation, typically the bus arbiter , or other component of the bank interleave controller , receives data and corresponding status information and sends the data to the read data pipeline  while sending the status information on to the control and status registers . Typically, a read data command forwarded from bus arbiter  to the storage bus controller  will cause the MUX  to gate the read data on storage I\/O bus  to the read data pipeline  and send status information to the appropriate control and status registers  through the status MUX .","The bus arbiter  coordinates the various command types and data access modes so that only an appropriate command type or corresponding data is on the bus at any given time. If the bus arbiter  has selected a write command, and write subcommands and corresponding data are being written to the solid-state storage media , the bus arbiter  will not allow other command types on the storage I\/O bus . Beneficially, the bus arbiter  uses timing information, such as predicted command execution times, along with status information received concerning bank  status to coordinate execution of the various commands on the bus with the goal of minimizing or eliminating idle time of the busses.","The master controller  through the bus arbiter  typically uses expected completion times of the commands stored in the queues , , , , along with status information, so that when the subcommands associated with a command are executing on one bank , other subcommands of other commands are executing on other banks -. When one command is fully executed on a bank , the bus arbiter  directs another command to the bank . The bus arbiter  may also coordinate commands stored in the queues , , ,  with other commands that are not stored in the queues , , , .","For example, an erase command may be sent out to erase a group of erase blocks within the solid-state storage media . An erase command may take 10 to 1000 times more time to execute than a write or a read command or 10 to 100 times more time to execute than a program command. For N banks , the bank interleave controller  may split the erase command into N commands, each to erase a virtual erase block of a bank . While Bank  is executing an erase command, the bus arbiter  may select other commands for execution on the other banks -. The bus arbiter  may also work with other components, such as the storage bus controller , the master controller , etc., to coordinate command execution among the buses. Coordinating execution of commands using the bus arbiter , bank controllers , queues , , , , and agents , , ,  of the bank interleave controller  can dramatically increase performance over other solid-state storage systems without a bank interleave function.","In one embodiment, the solid-state controller  includes one bank interleave controller  that serves all of the storage elements , ,  of the solid-state storage media . In another embodiment, the solid-state controller  includes a bank interleave controller  for each column of storage elements -, -, -. For example, one bank interleave controller  serves one column of storage elements SSS .-SSS N. , , . . . , a second bank interleave controller  serves a second column of storage elements SSS .-SSS N. , , . . . etc.","Storage-Specific Components","The solid-state storage controller  includes a synchronization buffer  that buffers commands and status messages sent and received from the solid-state storage media . The synchronization buffer  is located at the boundary between the solid-state storage clock domain and the local bus clock domain and provides buffering to account for the clock domain differences. The synchronization buffer , write synchronization buffer , and read synchronization buffer  may be independent or may act together to buffer data, commands, status messages, etc. In one embodiment, the synchronization buffer  is located where there are the fewest number of signals crossing the clock domains. One skilled in the art will recognize that synchronization between clock domains may be arbitrarily moved to other locations within the solid-state storage device  in order to optimize some aspect of design implementation.","The solid-state storage controller  includes a storage bus controller  that interprets and translates commands for data sent to and read from the solid-state storage media  and status messages received from the solid-state storage media  based on the type of solid-state storage media . For example, the storage bus controller  may have different timing requirements for different types of storage, storage with different performance characteristics, storage from different manufacturers, etc. The storage bus controller  also sends control commands to the storage control bus .","In one embodiment, the solid-state storage controller  includes a MUX  that comprises an array of multiplexers -where each multiplexer is dedicated to a row in the solid-state storage array . For example, multiplexer is associated with solid-state storage elements , , . MUX  routes the data from the write data pipeline  and commands from the storage bus controller  to the solid-state storage media  via the storage I\/O bus  and routes data and status messages from the solid-state storage media  via the storage I\/O bus  to the read data pipeline  and the control and status registers  through the storage bus controller , synchronization buffer , and bank interleave controller .","In one embodiment, the solid-state storage controller  includes a MUX  for each column of solid-state storage elements (e.g. SSS . , SSS . , SSS N. ). A MUX  combines data from the write data pipeline  and commands sent to the solid-state storage media  via the storage I\/O bus  and separates data to be processed by the read data pipeline  from commands. Packets stored in the write buffer  are directed on busses out of the write buffer  through a write synchronization buffer  for each column of solid-state storage elements (SSS .to SSS N.x , , ) to the MUX  for each column of solid-state storage elements (SSS .to SSS N.x , , ). The commands and read data are received by the MUXes  from the storage I\/O bus . The MUXes  also direct status messages to the storage bus controller .","The storage bus controller  includes a mapping module . The mapping module  maps a logical address of an erase block to one or more physical addresses of an erase block. For example, a solid-state storage media  with an array of twenty storage elements (e.g. SSS . to SSS .M ) per bank may have a logical address for a particular erase block mapped to twenty physical addresses of the erase block, one physical address per storage element. Because the storage elements are accessed in parallel, erase blocks at the same position in each storage element in a column of storage elements , , will share a physical address. To select one erase block (e.g. in storage element SSS . ) instead of all erase blocks in the row (e.g. in storage elements SSS ., ., . . . N. , , ), one bank (in this case Bank  ) is selected.","This logical-to-physical mapping for erase blocks is beneficial because if one erase block becomes damaged or inaccessible, the mapping can be changed to map to another erase block. This mitigates the loss of losing an entire virtual erase block when one element's erase block is faulty. The remapping module  changes a mapping of a logical address of an erase block to one or more physical addresses of a virtual erase block (spread over the array of storage elements). For example, virtual erase block  may be mapped to erase block  of storage element SSS . , to erase block  of storage element SSS . , . . . , and to storage element .M , virtual erase block  may be mapped to erase block  of storage element SSS . , to erase block  of storage element SSS . , . . . , and to storage element .M , etc. Alternatively, virtual erase block  may be mapped to one erase block from each storage element in an array such that virtual erase block  includes erase block  of storage element SSS . to erase block  of storage element SSS . to storage element .M , and erase block  of storage element SSS . to erase block  of storage element SSS . , . . . , and to storage element .M , for each storage element in the array up to erase block  of storage element N.M ","If erase block  of a storage element SSS. is damaged, experiencing errors due to wear, etc., or cannot be used for some reason, the remapping module  could change the logical-to-physical mapping for the logical address that pointed to erase block  of virtual erase block . If a spare erase block (call it erase block ) of storage element SSS . is available and currently not mapped, the remapping module  could change the mapping of virtual erase block  to point to erase block  of storage element SSS . , while continuing to point to erase block  of storage element SSS . , erase block  of storage element SSS . (not shown) . . . , and to storage element .M . The mapping module  or remapping module  could map erase blocks in a prescribed order (virtual erase block  to erase block  of the storage elements, virtual erase block  to erase block  of the storage elements, etc.) or may map erase blocks of the storage elements , ,  in another order based on some other criteria.","In one embodiment, the erase blocks could be grouped by access time. Grouping by access time, meaning time to execute a command, such as programming (writing) data into pages of specific erase blocks, can level command completion so that a command executed across the erase blocks of a virtual erase block is not limited by the slowest erase block. In other embodiments, the erase blocks may be grouped by wear level, health, etc. One of skill in the art will recognize other factors to consider when mapping or remapping erase blocks.","In one embodiment, the storage bus controller  includes a status capture module  that receives status messages from the solid-state storage media  and sends the status messages to the status MUX . In another embodiment, when the solid-state storage media  is flash memory, the storage bus controller  includes a NAND bus controller . The NAND bus controller  directs commands from the read and write data pipelines ,  to the correct location in the solid-state storage media , coordinates timing of command execution based on characteristics of the flash memory, etc. If the solid-state storage media  is another solid-state storage type, the NAND bus controller  would be replaced by a bus controller specific to the storage type. One of skill in the art will recognize other functions of a NAND bus controller .","Reducing Storage Device Power Consumption",{"@attributes":{"id":"p-0190","num":"0189"},"figref":["FIG. 5","FIG. 1B","FIGS. 6A and 6B"],"b":["500","102","530","500","150","530","102","122","530","122","122","102","530","122"],"i":["a","c","a","c","a","c ","a","c","a","c"]},"While the power management apparatuses , -, in the depicted embodiment, are illustrated as part of the storage device  and the components -, in other embodiments, as described above with regard to , the power management apparatuses , -may be implemented as software drivers of the computing system , as a combination of software drivers and firmware\/hardware\/controllers of the storage device  and the components -, or the like. In one embodiment, the computing system  loads separate software drivers for each power management apparatus , -","Similarly, while the system , as depicted, includes the power management apparatuses , -, in other embodiments, the power management apparatuses , -may be substituted with bandwidth governor modules , the power management apparatuses , -may be integrated with one or more bandwidth governor modules , or the like. While the description below focuses primarily on the power management apparatuses , -adjusting operations to satisfy a power consumption target and\/or a thermal ceiling, in certain embodiments, the description is also applicable to adjusting operations to satisfy a write bandwidth target per component , per set of components , or shared write bandwidth target for all components .","The power supply , in the depicted embodiment, provides electric power to the computing system  and, through it, the attached storage device  and components -. In certain embodiments, the computing system  distributes power to various components such as the storage device  and the components -shown. The power may be distributed via a number of different approaches; in one embodiment, the storage device  and the components -connect to a motherboard which provides the necessary power for the computing system . In other embodiments, the storage device  and\/or one or more of the components -are remote from the computing system  and network attached.","The components -provide computing capabilities for the computing system . The components -may be additional storage devices, such as Flash memory, hard disk drives, optical drives, or the like; graphics processors; network cards; or other computer components. Those of skill in the art will appreciate the different types of components -that may be in a computing system . The storage device  and the components -may be internal or external to the computing system . In one embodiment, the components -are PCI or PCI-e cards that connect to the computing system . The components -may receive power through the computing system .","In certain embodiments, the power management apparatuses , -may dynamically adjust power allocations for the storage device  and the components -. The computing system  and\/or the power management apparatuses , -may dedicate more or less power to a particular component -or the storage device  at a particular time based on power consumption rates of other components -and of the storage device . The computing system  and\/or the power management apparatuses , -may thus dynamically change the allocation of power and send appropriate parameters to the storage device  and the components -","In certain embodiments, the power management apparatuses , -monitor the activity of the storage device  and the components -to determine whether or not the storage device  and the components -are active. If a particular component -or the storage device  is inactive, the power management apparatus , -for that component -or storage device  may inform the other power management apparatuses , -that the component -or storage device  is inactive. For example, if a component -that is a wireless card is not currently connected to a wireless network, or if the wireless connection and\/or card is powered off, the power management apparatus -on that component -may inform the other power management apparatuses , -, and correspondingly increase the power consumption target for any of the other active components -and\/or the storage device .","In the depicted embodiment, the power management apparatuses , -are arranged in a master\/slave relationship, with the power management apparatus  of the storage device  as the master. In other embodiments, the system  may include a single system power management apparatus  that manages power consumption rates for the storage device  and the components -, the power management apparatuses , -may operate independently, one of the component power management apparatuses -may serve as a master, or the like.","In one embodiment, the slave power management apparatuses -follow adjustments that the master power management apparatus  makes. For example, in one embodiment, instead of monitoring power consumption rates for the storage device  and each of the components -, the master power management apparatus  monitors the power consumption rate of a single component (the storage device , in the depicted embodiment) and the power management apparatuses , -each adjust operations on the storage device  and the components -based on the power consumption rate of the single component.","In certain embodiments, adjusting operations of the storage device  and the components -similarly, in parallel, may be more efficient than managing them separately. For example, in an embodiment where the storage device  and the components -comprise a storage array that is accessed in parallel, it may be inefficient to throttle or slow operations on a single storage device  without throttling or slowing operations on the other components -. In the example embodiment, power consumption rates may also be similar in the storage device  and the components -, due to parallel accesses, which also makes parallel adjustments efficient by allowing the power management apparatus  to monitor a single power consumption rate.","The master power management apparatus , in various embodiments, may communicate an adjustment to be made, a power consumption rate, a power consumption target, and\/or other information to the slave power management apparatuses -. In another embodiment, instead of basing adjustments on a static master component or master power management apparatus , the power management apparatuses , -dynamically adjust operations based on any one of the power consumption rates failing to satisfy a power consumption target.","In one embodiment, either a master power management apparatus  or a single system power management apparatus  (not shown) dynamically adjusts operations on the storage device  and the components -based on a system power consumption target for the storage device  and the components -so that a total power consumption rate satisfies the system power consumption target. In one embodiment, using a system power consumption target allows the power management apparatus  to dynamically allocate and balance power from the power supply  between the storage device  and the components -, allowing greater power use for certain components -executing power intensive operations by lowering a power allocation of other components -, or the like.","In another embodiment, instead of having a master\/slave arrangement, the power management apparatuses , -are arranged as peers. The power management apparatuses , -, in one embodiment, communicate information, such as power consumption rates, power consumption targets, operation adjustments, and\/or other information, to other power management apparatuses , -. In a further embodiment, the power management apparatuses , -adjust operations, adjust a power consumption target, or the like based on power consumption rates reported by peer power management apparatuses , -. In a further embodiment, a power management apparatus , -may request an additional allocation of power from a master power management apparatus , a peer power management apparatus , -, or the like.","In one embodiment, the power management apparatuses , -manage thermal states of the storage device  and the components -. The power management apparatuses , -, in various embodiments, may manage the thermal states substantially as described above with regard to power consumption, as master\/slave, as peers, or the like. For example, in various embodiments, a single system power management apparatus  may manage the thermal states for the storage device  and the components -, one power management apparatus  may be selected as a master while other power management apparatus -may be selected as slaves for thermal management, the power management apparatuses , -may be arranged as peers for thermal management purposes, or the like.","In one embodiment, the power management apparatuses , -(or a single system power management apparatus ) may monitor a single temperature for the storage device  and the components -, instead of monitoring separate individual temperatures. The single temperature or system temperature, in one embodiment, may be a temperature of an enclosure that houses the storage device  and the components -. In another embodiment, the single temperature may be the temperature of a single one of the storage device  and the components . In a further embodiment, the power management apparatuses , -(or a single system power management apparatus ) monitor individual temperatures for each of the storage device  and the components -. The power management apparatuses , -(or a single system power management apparatus ), in various embodiments, may manage the thermal states (adjusting execution of operations, etc.) of each of the storage device  and the components  individually, in parallel, or some combination of the two.","In a further embodiment, the power management apparatuses , -manage both power consumption and thermal states of the storage device  and the components -. In one embodiment, the power management apparatuses , -combine adjustments made for power consumption with adjustments made for thermal management into a single adjustment to operations for each of the storage device  and the components -. For example, in one embodiment, adjusting execution of operations for the storage device  and\/or for the components -may serve a dual purpose of adjusting power consumption, which, in certain embodiments, may also have a direct correlation to reducing thermal heating.","In one embodiment, a master power management apparatus  determines a system adjustment to make for power consumption, and each power management apparatus , -determines an individual thermal adjustment and separately combines the individual thermal adjustment with the system adjustment into a single, independent adjustment for each respective storage device  and component -. In such an embodiment, the power management apparatuses , -make adjustments for power consumption substantially identically while making adjustments for thermal management independently.","The power management apparatuses , -, in one embodiment, combine power consumption adjustments and thermal adjustments cumulatively, summing the adjustments. In other embodiments, the power management apparatuses , -may combine power consumption adjustments and thermal adjustments by selecting the largest adjustment for use, factoring in previous adjustments, and\/or otherwise combining the adjustments.","In one embodiment, one or more bandwidth governor modules  combine write bandwidth adjustments with power consumption adjustments and\/or with thermal adjustments. As described above with regard to the power management apparatuses , -, in one embodiment, the one or more bandwidth governor modules  combine write bandwidth adjustments, power consumption adjustments, and\/or thermal adjustments by selecting the largest adjustment as a single combined adjustment. In other embodiments, the one or more bandwidth governor modules  combine write bandwidth adjustments, power consumption adjustments, and\/or thermal adjustments by cumulatively summing the adjustments, factoring in previous adjustments, or otherwise combining the adjustments.","Separate bandwidth governor modules  for each component , -or a single system bandwidth governor module , in certain embodiments, combine a system power consumption adjustment for the system  with an individually determined write bandwidth adjustment for each corresponding component , -. In another embodiment, separate bandwidth governor modules  for each component , -or a single system bandwidth governor module  combine an individually determined thermal adjustment for each component , -with an individually determined write bandwidth adjustment for each corresponding component , -. In a further embodiment, separate bandwidth governor modules  for each component , -or a single system bandwidth governor module  combine a system power consumption adjustment with individually determined thermal adjustments and write bandwidth adjustments for each component , -. In view of this disclosure, one of skill in the art will recognize other combinations of power consumption adjustments, thermal adjustments, and\/or write bandwidth adjustments for the system .",{"@attributes":{"id":"p-0210","num":"0209"},"figref":["FIG. 6A","FIG. 1B","FIG. 5","FIG. 6B"],"b":["122","122","122","122","122","122","616","622","624","122","616","622"],"i":["a","c "]},"In general, the audit module  monitors a power consumption rate of a component , such as the storage device , relative to a power consumption target, the throttle module  adjusts operations on the component  in response to the power consumption rate failing to satisfy the power consumption target, and the verification module  verifies whether the power consumption rate of the component  satisfies the power consumption target in response to adjusting the execution of operations on the component . In a further embodiment, the audit module  monitors a temperature for a component , such as the storage device , relative to a thermal ceiling or other thermal target, the throttle module adjusts execution of operations on the component  in response to the temperature approaching the thermal ceiling, and the verification module  verifies whether the temperature is moving away from the thermal ceiling in response to adjusting the execution of the operations on the component .","The audit module , in one embodiment, monitors a power consumption rate of the associated component  relative to a power consumption target. In a further embodiment, the audit module  monitors a temperature for the associated component  relative to a thermal target, such as a thermal ceiling, or the like. Determining a power consumption target and\/or a thermal target is described in greater detail below with regard to the target module  of . In one embodiment, the audit module  determines whether or not the power consumption rate satisfies the power consumption threshold. In a further embodiment, the audit module  determines whether the temperature satisfies the thermal target.","The audit module , in one embodiment, receives power consumption and\/or temperature information for the component  from one or more sensors, such as voltage sensors, current sensors, temperature sensors, and the like. The audit module , in one embodiment, determines a power consumption rate using a known or estimated voltage and a reading from a current sensor. For example, protocols such as PCI-e, Mini PCI-e, and the like often provide relatively stable voltage levels at 12V, 3.3V, 1.5V, and the like. The audit module , in one embodiment, uses provided voltage levels and measured current levels to determine a power consumption rate for the component .","In one embodiment, the audit module  monitors a power consumption rate that is an instantaneous power consumption rate based on current power usage of the corresponding component . In a further embodiment, the audit module  monitors a power consumption rate that is an average of power consumption over time, such as a decaying average, or the like. In one embodiment, a period of the average power consumption for the power consumption rate is selected to smooth spikes in power usage.","The audit module , in one embodiment, monitors a temperature for the corresponding component  based on a reading from a temperature sensor, such as a thermometer. In one embodiment, a controller, processor, FPGA, or other hardware of the component  includes a temperature sensor, and the audit module  accesses temperature readings from the hardware of the component . In a further embodiment, the component  includes a separate temperature sensor that provides the audit module  with a temperature for the component . Other embodiments of the audit module  are described below with regard to .","The throttle module , in one embodiment, adjusts execution of operations on the corresponding component  in response to the power consumption rate for the component  failing to satisfy the power consumption target. As described above, in various embodiments, a power consumption rate fails to satisfy a power consumption target by approaching a power consumption ceiling defined by a power consumption target, exceeding a power consumption target or threshold set below a power consumption ceiling, being outside a range of allowable power consumption defined by a power consumption target, or the like.","In one embodiment, the throttle module  adjusts operations by throttling or slowing down operations on the component  to lower the power consumption rate of the component . In a further embodiment, the throttle module  adjusts operations by scheduling the operations so that power consumed by concurrently executed operations satisfies the power consumption target. Other ways that the throttle module  may adjust operations are described below with regard to .","The throttle module , in one embodiment, adjusts operations on the corresponding component  by reducing a frequency with which the operations are executed on the component . In certain embodiments, the throttle module  reduces the frequency of operations by reducing a clock rate, clock speed, or clock frequency of a synchronous circuit of the component . In one embodiment, the throttle module  reduces the frequency of operations by setting a timer value specifying a frequency with which operations are submitted to the component  for execution. In another embodiment, the throttle module  reduces the frequency of operations by setting a timer value specifying a frequency with which hardware of the component  polls to verify that an operation has completed.","For example, in one embodiment, where the corresponding component  includes a nonvolatile solid-state storage device such as the storage device , the throttle module  may adjust a tPROG wait time for the component , and increasing the tPROG wait time reduces the frequency of program operations for the component . For nonvolatile solid-state storage, such as Flash memory, the tPROG wait time is the period of time between submitting a program command to a memory area (such as a die, a bank, a physical or logical page, or the like) and submitting a subsequent command to the same memory area. In certain embodiments, the subsequent command may be a status command, such as a READ STATUS command or the like, to verify that the program command has completed, was successful, or the like.","In a further embodiment, the power consumption target specifies a number of quanta or units that define an allowable amount of energy or power that the component  may use during a period of time. Operations on the component , in one embodiment, may also be assigned various amounts of quanta or units based on the amount of energy or power used to perform each operation. The throttle module , in one embodiment, adjusts execution of operations on the component  by scheduling the operations such that the quanta or units associated with concurrently executing operations satisfies the number of quanta or units permitted to satisfy the power consumption target.","In another embodiment, the throttle module  adjusts execution of the operations on the component  by selecting operations from one or more queues of pending operations so that the power or energy used by concurrently executed operations satisfies the power consumption target. The throttle module , in certain embodiments, may adjust certain types of operations without adjusting other types of operations, may adjust different types of operations in different manners, or may otherwise dynamically or selectively adjust operations by type.","For example, in one embodiment, the throttle module  may adjust write (or program) operations but not erase operations, or vice versa. In another example embodiment, the throttle module  may adjust write (or program) operations differently than erase operations. In one embodiment, the throttle module  may ignore certain operations, such as read operations or the like, and may not adjust them at all. In a further example embodiment, the throttle module  may reduce a frequency of write (or program) operations by setting a timer, adjusting a tPROG wait time, or the like and may schedule erase operations to satisfy a power consumption target. Further embodiments of the throttle module  are described below with regard to .","The verification module , in one embodiment, verifies whether the power consumption rate of the corresponding component  satisfies the power consumption target in response to the throttle module  adjusting execution of operations on the component . In another embodiment, the verification module  verifies whether the temperature of the component  satisfies the thermal target, is moving away from the thermal ceiling, or the like in response to the throttle module  adjusting execution of operations on the component .","The verification module , in one embodiment, is substantially similar to, is integrated with, is in communication with, cooperates with, and\/or performs similar functions to the audit module . For example, in one embodiment, the verification module  may be part of or integrated with the audit module  and may compare a power consumption rate from prior to the adjustment of operations to a power consumption rate from after the adjustment of operations. In a further embodiment, the verification module  may compare a power consumption rate directly to the power consumption target to determine whether the power consumption rate satisfies the power consumption target. In one embodiment, the verification module  may verify that a temperature for the component  satisfies a thermal target in a similar manner.","In one embodiment, the verification module  waits a predefined period of time after the throttle module  adjusts the operations before verifying that the power consumption rate and\/or the temperature of the component  satisfies the corresponding target. For example, in various embodiments, the predefined period of time may be selected to account for thermal inertia, throughput of the adjustments, or the like. In one embodiment, if the verification module  determines that the power consumption rate fails to satisfy the power consumption target, the throttle module  readjusts execution of subsequent operations on the component . Similarly, in a further embodiment, the throttle module  may readjust execution of subsequent operations on the component  in response to the verification module  determining that the temperature fails to satisfy the thermal target.","The power management apparatus , in one embodiment, is arranged in a system of a plurality of power management apparatuses , -as described above with regard to . Depending on whether the system is arranged with a single system power management apparatus , with master\/slave power management apparatuses , -, with peer power management apparatuses , -, or in another arrangement, such a system may include one or more audit modules , one or more throttle modules , and\/or one or more verification module , which may function as described above with regard to .","For example, in one embodiment, each power management apparatus , -may include an audit module , a throttle module , and a verification module . In a further embodiment, just a master or system power management apparatus may include an audit module , a throttle module , and a verification module . In another embodiment, a master power management apparatus  may include an audit module , a throttle module , and a verification module , and one or more slave power management apparatuses -may include just a throttle module , or the like. In view of this disclosure, one of skill in the art will recognize other arrangements and combinations of audit modules , throttle modules , and verification modules  suitable for use in a system with a plurality of components -as described above with regard to .",{"@attributes":{"id":"p-0228","num":"0227"},"figref":"FIG. 6B","b":["122","122","610","616","618","620","622","616","624","612","614","616","622","624"]},"In one embodiment, the target module  determines an appropriate power consumption target for the component  that the power management apparatus  is responsible for. As used herein, references to a component  include the storage device , which is a specific example of a component . The power consumption target sets the power limits for the component . In one embodiment, the power consumption target may be expressed in watts. The power consumption target may be a power consumption ceiling defining a maximum amount of power for the component , a power consumption threshold set below a power consumption ceiling, an average amount of power for the component  with allowances for deviation during burst operations, a range of allowable power consumptions levels for the component , or another manner of expressing the power limits for the component . Those of skill in the art will appreciate the other ways in which the power consumption target may be expressed, in view of this disclosure.","In another embodiment, the target module  determines an appropriate thermal target for the corresponding component . The target module , in one embodiment, may determine the thermal target in substantially the same manner as the power consumption target. The thermal target, in one embodiment, sets temperature limits for the component . The thermal target, in various embodiments, may be expressed as degrees Celsius, degrees Fahrenheit, Kelvin units, or the like. As described above with regard to the power consumption target, the thermal target, in various embodiments, may be a thermal ceiling defining a maximum allowable temperature or thermal rating for the component , a thermal threshold set below a thermal ceiling, an average temperature for the component  with allowances for deviation, a range of allowable temperatures for the component , or another manner of expressing temperature limits for the component .","In one embodiment, the thermal target includes a thermal ceiling and a thermal threshold below the thermal ceiling, to account for thermal inertia. In a further embodiment, if the temperature for the component  approaches the thermal ceiling by exceeding or passing the thermal threshold, the temperature fails to satisfy the thermal target, and the throttle module adjusts operations on the component . In one embodiment, setting a thermal threshold below a thermal ceiling provides the power management apparatus  time to account for thermal inertia so that a rate of change of the temperature slows and reverses before the temperature for the component  hits and\/or exceeds the thermal ceiling.","For example, in one embodiment, a thermal rating for a consumer grade component  may be around about 85 degrees Celsius, or for an industrial grade component  around about 100 degrees Celsius. In one embodiment, the thermal ceiling for the component  is set at the thermal rating for the component . A thermal threshold, in various embodiments, may be set at a number of degrees below the thermal ceiling, such as about 1 to 15 degrees below the thermal ceiling. In one embodiment, a thermal threshold is set at about 7 degrees below the thermal ceiling, to account for thermal inertia. In the example embodiments, the thermal threshold for the consumer grade component  may be set at around 78 degrees Celsius and the thermal threshold for the industrial grade component  may be set at around 93 degrees Celsius, or the like.","In one embodiment, the power consumption target and\/or the thermal target is communicated to a software driver by a user, another module, another power management apparatus , or the like, and the software driver sends the power consumption target and\/or the thermal target to a physical card or device on which the component  is realized. The target module  may be part of the software driver, part of the physical card or device, or both. While the power consumption target is one parameter that the target module  may determine, the target module  may also determine other parameters; for example, the target module  may determine parameters specifying allowable burst limits and times, power ramping limits, the thermal target, and others.","In one embodiment, the target module  retrieves or otherwise determines the power consumption target and\/or other parameters. These parameters may be stored in nonvolatile storage within the power management apparatus , in RAM for a computing system , or on a persistent storage device such as a parameter file in a file system. For example, in certain embodiments, the power consumption target is coded into the power management apparatus  as a hardware defined value, software defined value, firmware defined value, and\/or some combination thereof. The power consumption target and other parameters may be retrieved by the target module , or retrieved by the target module , during start up. In certain embodiments, updates may be made to the firmware or software on the power management apparatus  to change the power consumption target and other parameters directly. In such embodiments, the computing system  may not be aware, or have a need to be aware, of the power management activities on the components -","In certain embodiments, the target module  may receive initial parameters from the BIOS of the computing system  when the computing system  is starting up. In one embodiment, the BIOS may provide a set of parameters that puts the component  into a mode that provides lower performance but is a \u201csafe\u201d setting, as that term is commonly used in the computing industry. The computing system  may update\/revise the set of parameters at a later point in the initialization process.","In embodiments where the computing system  is aware of the power management apparatuses -on the components -, the computing system  may communicate with the power management apparatuses -. The target module  may receive the power consumption target and other parameters from the system itself, or it may receive the power consumption target and other parameters from other components -that are aware of the power management apparatus .","In certain embodiments, the power management apparatuses , -may share and communicate information with one another. The information may be shared in accordance with a protocol, as described below. The power management apparatus  may have a master module  described below to facilitate sharing this information. The power management apparatus  in the system may also be configured to act as a single logical power management apparatus . Such embodiments may allow certain components  to be given more power at a particular time by lowering the power allotment for other components  in the system. As noted above, this power allotment may be dynamic.","The power management apparatus  may respond to direction from a user indicating that the functions of one particular component  are more important than those of another. For example, a user may indicate that establishing a strong wireless connection is more important than storage performance at a particular time. Thus, a component  that is a wireless card may be allowed to operate at full power while the power allotted to the component  that is a storage device, such as the storage device , is decreased. In other embodiments, the dynamic reallocation of power may be initiated by other components  or processes transparently to the user. For example, a particular solid state storage device  may be falling behind in reclaiming storage space as part of garbage collection due to the restrictions on power. The power management apparatus  may allocate more power to that solid state storage device  for a period of time to allow it to catch up, while decreasing the power allocation to other components  during that period.","In one embodiment, the throttle module  uses the operations module  to adjust operations for the component . The operations module , in one embodiment, associates the power consumption target, and other parameters received by the target module , with performance limits on the component . Performance limits, in one embodiment, include the adjustments of operations described above with regard to the throttle module  of . For example, a power consumption target of 25 watts may be associated with one set of performance limits (i.e. operation adjustments) on the component , while a power consumption target of 20 watts may be associated with another set of performance limits (i.e. operation adjustments) on the component .","The parameters may include any data that specifies limitations on or information on how the component  can use power. The operations module  selects performance limits for the component  that correspond to the power consumption target provided to the target module . Performance limits, as used herein, are values, operation modes, adjustments, and\/or rules that manage, limit, control, or otherwise adjust the performance of the component  to a level that corresponds to the parameters received or otherwise determined by the target module . In certain embodiments, the operations module  uses tables, indexes, and other structures to determine the appropriate performance limits for the given parameter inputs to the target module . By determining appropriate performance limits for the given parameter inputs (such as the power consumption target, the thermal target, or the like), the operations module  identifies a level of performance for the component  that the operations module  determines will provide the desired power consumption and\/or thermal state of the component .","In certain embodiments, the operations module  associates the power consumption target and\/or the thermal target with timer values or counter values used in controlling the component , thus limiting the performance, power consumption, and temperature of the component . Timers, in certain embodiments, may be used to control when, after an operation is started on a storage device, the controller polls to determine if the prior operation completed and before sending a new operation. Timers, in other embodiments, may be used to control how frequently operations are submitted to a storage device for execution.","For example, a solid state storage device may use timers, such as the tPROG wait time discussed above, to control when the software polls the hardware of the solid state storage device (such as the banks discussed above) to verify that an operation has completed before initiating a new operation. In one embodiment, the operations module  provides an increased time between the polling such that the controller polls the hardware of the solid state storage device less frequently. This causes a reduction in the number of operations per unit time, and a corresponding decrease in power consumption per unit time. In one embodiment, reducing a frequency with which operations are executed introduces downtime on a communications bus of the component , reducing bandwidth, throughput, and\/or other performance of the component  as a tradeoff for reducing power consumption and\/or temperature.","The schedule module  executes operations on the component  according to the performance limits selected by the schedule module . As a result, the component  may not operate as effectively as it would if full power were available; for example, the component  may operate at a lower bandwidth. However, in one embodiment, the component  may also consume less power during operation than it would without the performance limits. In one embodiment, the performance limits are set such that the actual power consumed by the component  under the performance limits is within a tolerable range, either above or below, the power consumption target, satisfying the power consumption target.","Thus, if the power consumption target is 50 mW, the actual power consumed by the component  when operating under the performance limits associated with a power consumption target of 50 mW is within a tolerable range of 50 mW. For example, the timers controlling the polling of the banks may be slowed to a point where average power usage is approximately 50 mW. Those of skill in the art will appreciate how to specify a tolerable range; in one embodiment, the tolerable range allows for a difference of 4% (for example) above or below the power consumption target.","While this application discusses specific approaches to reducing bandwidth on a storage device , those of skill in the art, in view of this disclosure, will appreciate that there are other ways to reduce bandwidth of a storage device  in a predictable fashion such that the power consumption of the storage device  may be reduced. Slowing timers and clocks, scheduling operations, and other approaches discussed herein are examples of approaches to achieve power management.","In certain embodiments, the power management apparatus  may also include the audit module . The audit module , in one embodiment, measures and\/or monitors the actual power consumed by the component  and compares the actual power with a projected or expected power consumption of the component  that is a predicted amount of power that the component  uses when executing operations in accordance with the performance limits or other adjustments. The projected power consumption may be the power consumption target. In other embodiments, the projected power consumption is based on the power consumption target and the other parameters or adjustments governing the component . For example, the operations module  may determine that a first set of performance limits are appropriate for the parameters provided to the target module , and that the component  operating under the first set of performance limits will have a projected power consumption of 50 mW.","In one embodiment, the audit module  measures the actual power and compares it with the projected power consumption to determine whether the actual power consumption of the component  is within an allowable tolerance of the projected power consumption of the component  as specified by the power management apparatus , i.e. whether the actual power consumption satisfies the power consumption target. The actual power may be a measured power value; in other embodiments the actual power is an approximation based on at least one measurement. For example, assuming that voltage provided to the component  is constant, current measurements alone may be sufficient to determine an actual power value.","In one embodiment, the audit module  communicates with the throttle module  and makes appropriate adjustments and optimizations to bring the actual power usage of the component  closer to the projected power usage of the component  and\/or closer to satisfying the power consumption target. For example, if the audit module  determines that the component  is consistently using more power than the power allocated to it, the audit module  may provide this information to the throttle module . The throttle module  may then adjust the performance limits and\/or the operations of the component  to account for the discrepancy between the actual power and the projected power. For example, the throttle module  may use the operations module  to decrease the frequency of polling to reduce the actual power consumed by the device. The throttle module , in one embodiment, may store the adjustments such that, in the future, the performance limits selected for the particular set of parameters are the adjusted performance limits.","Thus, the audit module  may be used to ensure that the actual power usage of the component  is sufficiently close to the power usage that the power management apparatus  estimates to match the selected performance limits. The audit module  may also be used to allow the performance limits and\/or operations of the component  to be adjusted and\/or corrected during the life of the component , as the power consumption characteristics of components  often change over the life of the component . In the depicted embodiment, the audit module  includes the verification module . As described above with regard to , in certain embodiments, the verification module  works with the audit module  to verify that specific adjustments to operations of the component  bring the power consumption rate within the power consumption target and\/or bring the temperature of the component  away from the thermal ceiling.","In one embodiment, the power management apparatus  may also include a master module . The master module  allows the power management apparatus  to share and receive information from other power management apparatuses , -in the system. In certain embodiments, the master module  may assign operations to other power management apparatuses , -, and receive operations for execution from other power management apparatuses , -in the system. The master module  may also receive operations for execution from the computing system . The master module  may also manage priorities for operations in the system and dynamically reconfigure priorities. The master module  may dynamically adjust the power consumption target for the component  if there are changes in the power consumption or the power consumption needs of other components  in the system.","The master module  may also maintain a global or system power consumption target for the set of components -, not just the component on which the master module  is operating. The master module  may apportion the global or system power consumption target among the components -, and change the local power consumption targets dynamically while ensuring that the components -do not cumulatively exceed the global power consumption target. As described herein, in certain embodiments, the components -may include the storage device  and\/or each component -may comprise a storage device .","In certain embodiments, there is only one master module  that manages all of the power management apparatus  in the system. In other embodiments, the master module  is distributed across the power management apparatuses -, which master modules  share information. In certain embodiments, the power management apparatuses -use a default set of settings if the master module  goes offline or is otherwise unavailable for cooperative power management.","The master module  may also be used to coordinate power allocation within a single component . For example, as noted above, a solid state storage device may include multiple DIMMs, and the master module  may coordinate power allocation between the multiple DIMMs. The master module  may dynamically reallocate the power made available to each DIMM while ensuring that the component  itself does not exceed the power consumption target.","In one embodiment, the power management apparatus  includes a state module  that specifies various possible modes of operation for the component  for which the power management apparatus  is responsible. For example, one state may be a power disruption state, which causes the power management apparatus  to manage operations on the component  to manage the power disruption. Another state may be a power reduction state in which the power management apparatus  throttles performance to achieve power savings (i.e., when a computing system hosting the power management apparatus  moves to operate on battery power or other secondary power sources). Another state may be a thermal reduction state in which the power management apparatus  throttles performance to reduce the temperature of the component , the temperature output of the component , or the temperature of the enclosure housing the component .","While the above discussion has been directed primarily to power, given the relationship between power and thermal energy, the modules discussed above may be tailored to allow for thermal monitoring and to allow performance throttling as a thermal management tool for managing thermal temperature levels affected by the component . For example, the audit module  may also include the necessary hardware (i.e. sensors, temperature sub-systems, and the like) to monitor temperature on the component , as described above. In other embodiments, the audit module  monitors the temperature of an enclosure that contains the components -. The audit module , in certain embodiments, may use thermistors or other known hardware to monitor the temperature.","If a temperature detected by the audit module  is greater than a temperature threshold value or otherwise does not satisfy the thermal target, the state module  may put the component  in a temperature reduction state. In certain embodiments, the throttle module  may also store data that describes the thermal characteristics of operations; for example, the operations module  may define the average amount of heat given off during an erase operation, a read operation, or a program operation. The throttle module  may use the thermal characteristics to adjust or schedule execution of the operations on the component , as described above.","Those of skill in the art will appreciate that, given the close relationship between power consumption and heat, the techniques described in this application in connection to power management based on reducing power consumption may be effectively applied to reduce the thermal energy radiated by the component . In some cases, the application of these techniques may require an inverse adjustment such as activating a cooling system instead of, or in addition to, terminating certain operations, and\/or adjusting the operating speed in completing queued operations. Similarly, the audit module  may monitor the actual temperature and adjust the thermal characteristics as necessary to ensure the component  is providing the expected level of thermal energy for the given thermal characteristics.","Managing Storage Device Lifetime",{"@attributes":{"id":"p-0258","num":"0257"},"figref":["FIG. 7A","FIG. 1A","FIG. 7B","FIG. 5"],"b":["120","120","120","120","702","704","706","120","120","122","102","702","704","706","102","706","102"],"i":["a","a","a ","b ","a "]},"In general, the target module  determines a write bandwidth target, the audit module  monitors a write bandwidth of a storage device  relative to the write bandwidth target, and the throttle module  adjusts execution of write operations on the storage device  in response to the write bandwidth failing to satisfy the write bandwidth target. While this description focuses on governing of write operations, in other embodiments, the bandwidth governor module may monitor and adjust execution of write operations, erase operations, and\/or other operations on a storage device  substantially as described herein with regard to write operations.","For certain types of storage media , such as NAND flash, write operations (i.e. program operations) and erase operations cause more stress on the storage device  than read operations. In certain embodiments, governing write\/program operations indirectly governs erase operations because storage elements of the storage media  are typically erased prior to a write\/program operation. Similarly, in certain embodiments, governing write operations may indirectly govern read operations, because a groomer, garbage collector, or the like may write frequently read data forward in a log on the storage media  more often than less frequently read data to prevent data errors due to read disturb or other phenomenon.","In other embodiments, the bandwidth governor module may directly monitor and adjust erase operations and\/or read operations instead of or in addition to governing write operations. In certain embodiments, that write data using a log-based sequential writing format and write to previously erased erase blocks, the bandwidth governor module  does not throttle erase operations because erase operations for certain non-volatile storage media  take the longest time to complete and erase operations are typically caused by the storage device  working to recover storage space to accommodate subsequent write\/program operations. In other embodiments, the bandwidth governor module  throttles erase operations since the number of erases per unit of time constitutes an erase bandwidth.","In one embodiment, the target module  determines a write bandwidth target for a storage device . A write bandwidth target, as used herein, is a write bandwidth at which the storage device  may operate through a duration of a temporal lifetime, without exceeding an endurance rating for the storage device . The target module  may determine a write bandwidth target as an average, as a range, as a static value, as a dynamically determined and updated value, or the like.","The target module , in certain embodiments, determines the write bandwidth target for the storage device  dynamically throughout the temporal lifetime of the storage device . For example, the target module  dynamically adjusts the write bandwidth target once each write bandwidth sample period, as described below with regard to the audit module . In other embodiments, the target module  may determine a single static write bandwidth target spanning the temporal lifetime of the storage device . For example, the target module  may retrieve or otherwise receive a preset write bandwidth target defined by a manufacturer or vendor for the storage device , or the like. In embodiments where the audit module  determines a write bandwidth as an average, as described below, the target module  may determine the write bandwidth target as a target for the average write bandwidth.","In one embodiment, the target module  determines or adjusts the write bandwidth target based on a total amount of data written to the storage device  and on an elapsed amount of the temporal lifetime for the storage device . The target module , in a further embodiment, determines or adjusts the write bandwidth target so that the total amount of data written to the storage device  does not exceed the endurance rating for the storage device  within the temporal lifetime for the storage device . In certain embodiments, the write bandwidth target is a trajectory (explained in greater detail below in relation to ) between the current amount of written data on a storage device  and the endurance rating of the storage device , i.e., if the write bandwidth follows the write bandwidth trajectory, it will hit the endurance rating at the end of the temporal lifetime.","In one embodiment, the target module  dynamically determines a write bandwidth target by dividing a remaining amount of the endurance rating of a storage device  (in data units) by a remaining temporal lifetime for the storage device  (in time units). The target module , in one embodiment, determines the remaining amount of the endurance rating for a storage device  by subtracting a current total data written value for the storage device  (i.e. either total physical data or total user data written to the storage device  up to the current time) from an endurance rating value for the storage device  (i.e. the expected amount of data that may be written to the storage device  before wear-out occurs).","The audit module , in one embodiment, monitors a write bandwidth of an associated storage device  relative to a write bandwidth target, such as the write bandwidth target, described above with regard to the target module . The write bandwidth target, in certain embodiments, may be dynamic. In one embodiment, the audit module  determines whether or not a write bandwidth for a storage device  satisfies a write bandwidth target for the storage device . A write bandwidth, in various embodiments, may satisfy a write bandwidth target by being below the write bandwidth target, by being less than or equal to the write bandwidth target, by having an average below the write bandwidth target, and\/or by having another predefined relationship with the write bandwidth target.","The audit module , in one embodiment, monitors write bandwidth for a storage device  by periodically determining the write bandwidth for the storage device . The audit module , in a further embodiment, determines a write bandwidth by counting, tallying, or otherwise determining how much data is written to a storage device  over one or more predefined time periods. In another embodiment, the audit module  subtracts a total amount of data written to a storage device  up to a previous time from a total amount of data written to the storage device  up to a current time to determine an amount of data written in a current time period (the time between the current time and the previous time). To determine the bandwidth for the current time period, the amount of data written in the current time period is divided by the length of the current time period.","In certain embodiments, the total amount of physical bytes written to a storage device  may be tracked or monitored by the solid-state storage controller . In such embodiments, the solid-state storage controller  may make the total amount of physical bytes written available to the audit module . In certain embodiments, the total amount of logical data bytes written to a storage device  may be tracked or monitored by the solid-state storage controller . The total amount of logical data bytes written may alternatively be made available to the audit module . Logical data bytes written typically includes user data and excludes metadata and data written as a result of grooming or data recovery.","In one embodiment, the audit module , a software driver for a storage device , a storage controller , or the like persistently stores a tally of the total physical amount of data written to a storage device . The tally may be persistently stored at intervals on the storage device . For example, in one embodiment, the audit module , a software device driver for a storage device , a storage controller , or the like may store the tally of the total amount of data written to a storage device  with metadata stored on the solid-state storage media  associated with each erase block, such as a PEB, a logical erase block (\u201cLEB\u201d), or the like, or with each of another type of segment of the storage device . Preferably, this metadata is written before user data for a PEB or LEB is written. In this manner, in embodiments that write new PEBs or LEBs as part of a log-based set of sequential writes, a running total for the physical bytes written to the media  is persistently preserved before any additional data is written to the storage device .","One location in which the audit module , a software driver for a storage device , a storage controller , or the like may store the total written data tally is with other metadata in an erase block opener at the beginning of each erase block as data is written sequentially to the storage device . An erase block opener, in certain embodiments, is a set of data written to an erase block with metadata for the erase block, metadata for the storage device , or the like. In one embodiment, an erase block opener is written to each erase block in succession with updated statistics, counts, tallies, or other metadata for the storage device  such that the most recently written erase block opener includes the most recent metadata. The audit module , in one embodiment, reads or determines the current total written data tally up through the end of a current sampling period and subtracts a total written data tally up through the previous sampling period to determine the amount of data written during the current sample period.","Embodiments of the present invention determine a trend for bandwidth use over time in relation to the predetermined temporal lifetime and predetermined endurance rating of the storage device . Given that the predetermined temporal lifetime and predetermined endurance rating are known, the average amount of data that can be written per unit of time can be determined at any time in the temporal lifetime of the storage device .","Of course, the amount of data remaining for a specified endurance rating depends on the amount of write data used at a given time in the temporal lifetime. Given that use of the storage device  to write data varies over time, embodiments of the present invention automatically determine a current usage trend, represented by the bandwidth usage, and determine what adjustments (increasing or decreasing available bandwidth) are required such that the actual bandwidth usage equals the average bandwidth usage when the current time equals the temporal lifetime.","Due to the potential variance in the use patterns for the storage device , the audit module , in certain embodiments, may employ one or more smoothing techniques for determining a bandwidth usage trend for the storage device . Based on the results of the smoothing techniques, the throttle module  may engage to restrict or permit bandwidth usage levels to ensure the overall bandwidth usage will satisfy the temporal lifetime and endurance rating constraints.","Those of skill in the art will recognize a variety of smoothing techniques which may be used for time series data such as the amount of bandwidth used within a given period of time in relation to the overall time period. Examples of other smoothing techniques that can be used with embodiments of the present invention include median smoothing, distance weighted least squares smoothing, exponentially weighted smoothing, negative exponentially weighted smoothing, bicubic splines smoothing, or the like. While these various smoothing techniques may be used with different embodiments of the present invention, in preferred embodiments, the smoothing technique used accounts to bursts of write operations over a given period of time as provided by the moving average smoothing technique. Those of skill in the art recognize that variations on the moving average smoothing technique may be used within the scope of the present invention.","In certain embodiments, the audit module  uses moving average smoothing. Moving average smoothing replaces each element of the time series data with an average or weighted average of measurements from n surrounding elements of the time series. n represents the \u201cwindow\u201d of data measurements used to determine the moving average.","In one embodiment, the audit module  determines the write bandwidth of a storage device  by calculating a total average, a moving average (a.k.a. a rolling average, rolling mean, or running average), a decaying average, or the like over a predefined period. The audit module  determines a moving average write bandwidth, in one embodiment, using a moving or sliding window.","The predefined period of the moving average, in one embodiment, defines a size of the moving or sliding window. In a further embodiment, the moving or sliding window includes a predefined number of write bandwidth samples. The number of write bandwidth samples, in one embodiment, is defined by a sampling period and the size of the moving window. For example, if the sampling period is one minute and the predefined period or size of the moving window is eight hours, the moving window may include  write bandwidth samples, one for each minute of the eight hour period. For each sample period, in one embodiment, the oldest write bandwidth sample moves out of the moving window, and one new sample (the most recent or youngest sample) is added to the moving window.","The audit module , in certain embodiments, maintains a data structure for the moving window that stores the write bandwidth samples such that the write bandwidth samples are preserved between sample periods and are not re-determined each cycle. In each new sample period, the audit module  removes the oldest write bandwidth sample from the moving window data structure and adds the new sample to the moving window data structure. Advantageously, using a moving window greatly decreases the overhead required to compute the moving average for each sample period because one sample is removed from one end of the window and one sample is added to the other end of the window rather than computing or identifying a write bandwidth sample for each sample in the window over again each sample period. In one embodiment, by determining the write bandwidth as a moving or decaying average, the audit module  accounts for bursts of data within the moving window, as long as the average bandwidth within the moving window satisfies the write bandwidth target, because the bursts of data are amortized over the moving window.","Each write bandwidth sample, in one embodiment, includes a total amount of data written to the storage device  during the sampling period divided by the sampling period, so that substantially all data written to the storage device  is accounted for in each write bandwidth sample. In a further embodiment, each write bandwidth sample may include an instantaneous bandwidth at a sampling time, such as a number of current writes, or the like, and the write bandwidth samples may not necessarily account for all data written to the storage device . The audit module , in one embodiment, determines the moving average write bandwidth once each sampling period.","The audit module , in one embodiment, includes both user data and metadata (i.e. in-band and out-of-band data) write operations on the storage device  in the determined write bandwidth, so that the write bandwidth is a total write bandwidth for the storage device . As described above with regard to , in certain embodiments, the write bandwidth includes all physical bytes written to the storage device , including write operations of a groomer or garbage collector, and\/or other device level write operations. In a further embodiment, the write bandwidth may represent a logical amount of data written to the storage device  that is a subset of an actual amount of data written to the storage device . For example, in one embodiment, the write bandwidth may include write operations for user data (i.e. in-band data) and exclude write operations for metadata (i.e. out-of-band data), write operations from a groomer or garbage collector, and\/or other write data.","The endurance rating of the storage device , in one embodiment, is selected to correspond to the types of write data included in the write bandwidth, such as all data written to the storage device , user data written to the storage device , or the like. The throttle module , in one embodiment, adjusts execution of write operations on the corresponding storage device  in response to the write bandwidth for the storage device  failing to satisfy the write bandwidth target. In a further embodiment, the throttle module  adjusts execution of write operations on the storage device  to remove or release bandwidth restrictions in response to the write bandwidth for the storage device  satisfying the write bandwidth target. In one embodiment, the throttle module  adjusts write operations for a subsequent sample period based on a write bandwidth (such as an average write bandwidth, a moving average write bandwidth, or the like) of a previous sample period.","As described above, in various embodiments, a write bandwidth fails to satisfy a write bandwidth target by exceeding a write bandwidth target, by approaching a write bandwidth ceiling defined by a write bandwidth target, by exceeding a write bandwidth target or threshold set below a write bandwidth ceiling, by being outside a range of allowable write bandwidth defined at least in part by a write bandwidth target, or the like. As described above, in certain embodiments, the write bandwidth may be an average write bandwidth, a moving average write bandwidth, or the like, and the throttle module  may adjust execution of write operations based on whether the average write bandwidth, moving average write bandwidth, or the like satisfies a write bandwidth target.","In one embodiment, the throttle module  determines whether or not the write bandwidth satisfies the write bandwidth target once for each write bandwidth sample period and potentially adjusts write operations once after each write bandwidth sample period. As discussed above with regard to the target module , in one embodiment, the target module  dynamically adjusts the write bandwidth target once each write bandwidth sample period. In other embodiments, the target module  may determine a single static write bandwidth target spanning the temporal lifetime of the storage device .","In one embodiment, the throttle module  adjusts write operations by throttling or slowing down write operations on the storage device  to lower the write bandwidth of the storage device . The throttle module , in one embodiment, throttles or slows write operations proportionally to the amount that the write bandwidth (which may be an average write bandwidth), exceeds the write bandwidth target. For example, in one embodiment, the throttle module  adjusts or throttles write operations using a scale between no adjustment and a predefined maximum adjustment and selects an adjustment to make along the scale in proportion to the amount that the write bandwidth exceeds the write bandwidth target. If, in the example embodiment, the scale ranges from 0 to 10, 10 being the predefined maximum adjustment, and the write bandwidth exceeds the target write bandwidth by 30%, in one embodiment, the throttle module  adjusts write operations by a level 3 on the scale. If the write bandwidth satisfies the write bandwidth target, in the example embodiment, the throttle module  adjusts write operations by a level 0 on the scale, in one embodiment, making no adjustment.","In one embodiment, the predefined maximum adjustment is a maximum allowed adjustment defined by a manufacturer, a vendor, a user or the like as the maximum level of throttling allowed for the storage device . For example, in one embodiment, the maximum allowed adjustment may be set to 100 megabytes per second, or the like, to ensure both usability of the storage device  while ensuring that the amount of data associated with the endurance rating of the storage device  is not consumed before the temporal lifetime of the storage device  expires.","In a further embodiment, the maximum adjustment may be a maximum possible adjustment, the maximum amount that the throttle module  is capable of throttling write operations. In one embodiment, a maximum possible adjustment may comprise stopping, quiescing, and\/or blocking write operations for a period of time. In various embodiments, the throttle module  may stop, quiesce, and\/or block write operations by holding the operations in a queue, responding to a write request with an error, denying a write request, or the like. Denied write requests, in certain embodiments, may be resubmitted at a later time. The throttle module , in a further embodiment, maintains throttled write requests in a queue to execute at a later time when excess write bandwidth is available, without a resubmission of the write requests. In one embodiment, the predefined maximum adjustment is set such that, once throttled, if data were written to the storage device  at a write bandwidth consistent with the predefined maximum adjustment continuously for the entire temporal lifetime of the storage device , the amount of data written would be at or below the endurance rating of the storage device  at the expiration of the temporal lifetime.","The throttle module , in one embodiment, adjusts write operations on the storage device  by reducing or otherwise adjusting a frequency with which the write operations are executed on the storage device . In certain embodiments, the throttle module  adjusts the frequency of write operations by adjusting a clock rate, clock speed, or clock frequency of a synchronous circuit of the storage device . In one embodiment, the throttle module  performs a front-end adjustment, adjusting a frequency with which write operations are submitted to the storage device  for execution. In another embodiment, the throttle module  performs a back-end adjustment, adjusting the frequency of write operations by setting a timer value specifying a frequency with which hardware of the storage device  polls to verify that a write operation has completed, or the like.","For example, in one embodiment, where the storage device  includes a nonvolatile solid-state storage device such as the storage device  depicted in , the throttle module  may adjust a tPROG wait time for the storage device  and increasing the tPROG wait time reduces the frequency of program (i.e. write) operations for the storage device . For nonvolatile solid-state storage, such as Flash memory, the tPROG wait time is the period of time between submitting a program command to a memory area (such as a die, a bank, a physical or logical page, or the like) and submitting a subsequent command to the same memory area. In certain embodiments, the subsequent command is typically a status command, such as a READ STATUS command or the like, to verify that the program command has completed, was successful, or the like. Increasing the tPROG wait time, in certain embodiments, increases the amount of time that program operations appear to take, thereby slowing or throttling execution of program operations.","As described above with regard to the bandwidth governor module  of , in certain embodiments, the bandwidth governor module stops governing bandwidth of the storage device  when the temporal lifetime of the storage device  expires. The throttle module , in one embodiment, stops throttling or placing artificial constraints on write bandwidth in response to the temporal lifetime expiring. In another embodiment, the bandwidth governor module and the throttle module  stop governing bandwidth for the storage device  in response to the target module  determining that the endurance rating for the storage device  can no longer be exceeded during the temporal lifetime of the storage device . For example, once the write bandwidth target exceeds a maximum possible write bandwidth for the storage device , throttling or governing write bandwidth may no longer be useful, as the endurance rating cannot be exceeded during the remaining temporal lifetime, and the bandwidth governor module may stop monitoring and governing the write bandwidth. The write bandwidth target may exceed the maximum possible write bandwidth if the storage device  is disconnected or unused for a period of time, if the storage device  has a low write bandwidth for a period of time, or the like.","The bandwidth governor module , in one embodiment, is arranged in a system of a plurality of bandwidth governor modules , similar to the system of a plurality of power management apparatuses , -described above with regard to . Depending on whether the system is arranged with a single system bandwidth governor module , with master\/slave bandwidth governor modules with peer bandwidth governor modules , or in another arrangement, such a system may include one or more target modules , one or more audit modules , and\/or one or more throttle modules , which may function substantially as described above with regard to .","For example, in one embodiment, each bandwidth governor module may include a target module , an audit module , and a throttle module . In a further embodiment, just a master or system bandwidth governor module may include a target module , an audit module , and a throttle module . In another embodiment, a master bandwidth governor module may include a target module , an audit module , and a throttle module , and one or more slave bandwidth governor modules may include just a throttle module , or the like. In view of this disclosure, one of skill in the art will recognize other arrangements and combinations of target modules , audit modules , and throttle modules  suitable for use in a system with a plurality of components -as described above with regard to .","In one embodiment, the storage device  may include several different modular data storage elements, which may be installed in and removed from the storage device  independently. The modular data storage elements may have different temporal lifetimes, different ages (elapsed amount of temporal lifetime), different endurance ratings, or other different characteristics. The bandwidth governor module may manage lifetimes for the modular data storage elements independently, with the target module  determining separate write bandwidth targets for each modular data storage element, the audit module  monitoring write bandwidths independently for each modular data storage element, the throttle module  adjusting execution of write operations independently for each modular data storage element, and the like. For example, the target module  may determine an elapsed amount of temporal lifetime separately for each modular data storage element, and the like.","In another embodiment, the bandwidth governor module may manage lifetimes for the modular data storage elements together. For example, the target module  may determine an elapsed amount of temporal lifetime based on an oldest modular data storage element, and use the elapsed amount of temporal lifetime to determine a single write bandwidth target for the modular data storage elements, or the like.",{"@attributes":{"id":"p-0294","num":"0293"},"figref":["FIG. 7B","FIG. 1A","FIG. 7A"],"b":["120","120","120","120","120","702","704","706","708","710","712"],"i":["b","b","a ","b "]},"The verification module , in one embodiment, verifies whether the write bandwidth of the corresponding storage device  satisfies the write bandwidth target in response to the throttle module  adjusting execution of write operations on the storage device . The verification module , in one embodiment, is substantially similar to, is integrated with, is in communication with, cooperates with, and\/or performs similar functions to the audit module . For example, in one embodiment, the verification module  may be part of or integrated with the audit module  and may compare a write bandwidth from prior to the adjustment of write operations to a write bandwidth from after the adjustment of write operations. In a further embodiment, the verification module  may compare a write bandwidth directly to the write bandwidth target to determine whether the write bandwidth satisfies the write bandwidth target, during a subsequent write bandwidth sample period, or the like. In one embodiment, the audit module  automatically verifies whether the write bandwidth satisfies the write bandwidth target in each sample period.","In one embodiment, instead of or in addition to verification by the audit module , the verification module  waits a predefined period of time, such as several write bandwidth sample periods or the like, after the throttle module  adjusts the write operations before verifying that the write bandwidth of the storage device  satisfies the write bandwidth target. For example, in various embodiments, the predefined period of time may be selected to account for throughput of the adjustments, or the like. In one embodiment, if the verification module  determines that the write bandwidth fails to satisfy the write bandwidth target, the throttle module  readjusts execution of subsequent write operations on the storage device .","In a further embodiment, the verification module  may adjust, update, or otherwise set a scale or amplitude for adjustments by the audit module  based on the efficacy of previous adjustments by the audit module . For example, in certain embodiments, if the verification module  determines that the write bandwidth of the storage device  does not satisfy the write bandwidth target in response to a previous adjustment to execution of write operations, the verification module  may update an adjustment scale to increase the amplitude of subsequent adjustments by the audit module , or the like.","In bandwidth governor module , the endurance rating module  provides the current total data written value and the endurance rating value to the target module . The target module , in a further embodiment, determines the remaining temporal lifetime for a storage device  by subtracting an elapsed amount of a temporal lifetime for the storage device  from a temporal lifetime value for the storage device . The temporal lifetime module , in one embodiment, provides the elapsed amount of the temporal lifetime and the temporal lifetime value to the target module .","In one embodiment, the endurance rating module  stores an endurance rating value in persistent storage of the storage device  and\/or retrieves a stored endurance rating value from persistent storage of the storage device . The temporal lifetime module , in one embodiment, stores a temporal lifetime value in persistent storage of the storage device  and\/or retrieves a stored temporal lifetime value from persistent storage of the storage device . Preferably, the temporal lifetime module  stores the stored temporal lifetime in a location and manner inaccessible to a user of the storage device . Similarly, the endurance rating module  may store the endurance rating in a location and manner that is inaccessible to a user of the storage device . In this manner, the current temporal lifetime and\/or the endurance rating may be unchangeable by a user and may also be tamper proof and\/or tamper detectable.","The bandwidth governor module may also encrypt, lock, or otherwise secure the write bandwidth target itself, write bandwidth target settings, or other write bandwidth target information to prevent a user from tampering with or circumventing the bandwidth governor module . In certain embodiments, if the bandwidth governor module detects that a user has tampered with an endurance rating, a temporal lifetime value, a write bandwidth target, and\/or another write bandwidth setting for a storage device , the bandwidth governor module may void a warrantee of the storage device . For example, the bandwidth governor module may set an indicator that the warrantee is void, notify a user that the warrantee is void, notify a vendor or manufacturer that the warrantee is void, or the like.","As described above with regard to , persistent storage of the storage device  may include a PROM, such as a MID-PROM or the like that stores vendor specific device characteristics for the storage device . In one embodiment, the endurance rating value, current temporal lifetime, and\/or other data stored in a MID-PROM or other persistent storage may be encrypted, digitally signed, or otherwise protected from tampering. In certain embodiments, instead of the endurance rating module  and the temporal lifetime module  storing values in persistent storage of the storage device , a vendor, a manufacturer, or the like may store the endurance rating value and the temporal lifetime value in persistent storage of the storage device  and the endurance rating module  and the temporal lifetime module  may retrieve the values.","In one embodiment, the endurance rating module  and the temporal lifetime module , a software driver for a storage device , a storage controller , or the like store counts or tallies of the total amount of data written to the storage device  and the elapsed amount of the temporal lifetime for the storage device . These counts or tallies and elapsed time values may be stored at intervals on the storage device . As described above with regard to the audit module , in one embodiment, a count or tally of the total amount of data written to a storage device  is stored each time an erase block, such as a PEB, an LEB, or the like are written to the storage device , in an erase block header (aka an \u201copener\u2019) or other set of metadata. In one embodiment, the counts or tallies of the total amount of data written to the storage device  and the elapsed amount of the temporal lifetime for the storage device  are encrypted, digitally signed, or otherwise protected from tampering.","In embodiments where a software driver for the storage device , a storage controller , or the like determines and stores the total data written amount and the elapsed temporal lifetime amount, the endurance rating module  and the temporal lifetime module , in one embodiment, retrieve the stored amounts and provide them to the target module , the audit module , the verification module , and\/or other modules. In one embodiment, a portion of the bandwidth governor module that is part of a software driver on the computing device  determines the total data written amount, the elapsed temporal lifetime amount, or the like, to prevent computation error that may be present using fixed point computations on a storage controller  or other embedded system.","The elapsed temporal lifetime amount, in various embodiments, may be measured from different start times, such as a time when the storage device  is manufactured, a time when the storage device  is purchased, a time when the storage device  is first attached to a computing system , a time when data is first written to the storage device .","The elapsed temporal lifetime amount, in one embodiment, is a total amount of time from the start time. In a further embodiment, the elapsed temporal lifetime amount includes only times when the storage device  is in a predefined state, such as attached to a computing system , powered on, or the like. In one embodiment, a storage device  is \u201cattached\u201d when the storage device  is capable of, or ready to, write data to the storage device . A software driver for a storage device , in certain embodiments, may attach the storage device  using an attach command at some point after the software driver loads. In one embodiment, by measuring the elapsed temporal lifetime amount as an amount of time that a storage device  is attached, the temporal lifetime of the storage device  represents usage time or attached time.","In one embodiment, the elapsed temporal lifetime amount is a relative time based on the selected start time, instead of an absolute time based on a system clock or other external time source. For example, in one embodiment, the elapsed temporal lifetime amount may be a timer or counter that starts at time zero as the start time. Basing the elapsed temporal lifetime amount on a start time, in certain embodiments, provides consistent measurement of elapsed temporal lifetime as a storage device  is moved between different computing systems , different time zones, or the like that are not affected by incorrect or improperly set system clocks or other time data.",{"@attributes":{"id":"p-0307","num":"0306"},"figref":["FIGS. 8A","FIG. 8A","FIG. 8B","FIG. 8C","FIG. 8D"],"b":["8","8","8","102","802","804","806","808","802","804","806","808","102"]},"The graph of write bandwidth samples , as depicted in , shows write bandwidth samples  over time relative to a dynamic write bandwidth target . The write bandwidth sample  for each sampling period or hour, in the depicted embodiment, represents a number of gigabytes of data written to the storage device  in the sampling period. Although, for clarity of illustration, the write bandwidth samples  are depicted as bars lasting the entire hour, in one embodiment, a write bandwidth sample  is measured at the end of a sampling period and represents a total of data written during the sampling period. In other embodiments, write bandwidth samples  may be instantaneous bandwidths or other types of samples.","In the depicted embodiment, the target module  divides 4 petabytes by 5 years to determine a write bandwidth target  of 22.83 gigabytes per hour. In the depicted embodiment, the target module  re-determines the write bandwidth target  at each sample period, (e.g. hour). As depicted, the target module  increases the write bandwidth target  slightly when the write bandwidth samples  are below the write bandwidth target  and decreases the write bandwidth target  slightly when the write bandwidth samples  exceed the write bandwidth target .","The adjustments to the write bandwidth target , as depicted in , are due to the changes in the slope of a trajectory  between the total data written  at time t and the intersection of an endurance rating value  and a temporal lifetime value , shown in . The target module , in one embodiment, sets the write bandwidth target  as the slope of the trajectory  of , by subtracting the total data written  from the endurance rating value  and dividing the result by the result of time t (the currently elapsed amount of the temporal lifetime ) subtracted from the temporal lifetime value , i.e. the rise of the trajectory  divided by the run of the trajectory .","In the depicted embodiment, the audit module  determines that no data was written to the storage device  for the first 4 hours and the throttle module  determines that the moving average write bandwidth  satisfies the write bandwidth target . The audit module  determines that, during the fifth hour (between time 4 and time 5), 15 gigabytes were written to the storage device . The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 0 and time 5 (the moving window size) of 15 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 3 gigabytes per hour. The throttle module  determines that the moving average write bandwidth  satisfies the write bandwidth target .","The audit module  determines that, during the sixth hour, 35 gigabytes were written to the storage device . The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 1 and time 6 (the moving window) of 50 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 10 gigabytes per hour. As the audit module  adds the sixth hour to the moving window, the first hour falls out of the moving window. The throttle module  determines that the moving average write bandwidth  satisfies the write bandwidth target , even though the write bandwidth sample  was a burst of data that exceeded the write bandwidth target  by nearly double.","The audit module  determines that, during the seventh hour, 25 gigabytes were written to the storage device . The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 2 and time 7 (the moving window) of 75 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 15 gigabytes per hour. The throttle module  determines that the moving average write bandwidth  satisfies the write bandwidth target , even though the write bandwidth sample  for hour 7 exceeded the write bandwidth target . The graph for the moving average write bandwidth , as depicted, illustrates the moving window  for hour 7, drawn to scale. The area of the write bandwidth samples  of the moving window  for hour 7, in the depicted embodiment, is equal to the depicted area for the moving window . The audit module  averages or amortizes the bursts in the write bandwidth samples  over the entire moving window .","The audit module  determines that, during the eighth hour, 5 gigabytes were written to the storage device . The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 3 and time 8 (the moving window) of 80 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 16 gigabytes per hour. The throttle module  determines that the moving average write bandwidth  satisfies the write bandwidth target .","The audit module  determines that, during the ninth hour, 20 gigabytes were written to the storage device . The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 4 and time 9 (the moving window) of 100 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 20 gigabytes per hour. The throttle module  determines that the moving average write bandwidth satisfies the write bandwidth target , because the moving average write bandwidth  of 20 gigabytes is still below the write bandwidth target .","The audit module  determines that, during the tenth hour, 40 gigabytes were written to the storage device . The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 5 and time 10 (the write bandwidth sample  for the fifth hour falls out of the moving window) of 125 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 25 gigabytes per hour. The throttle module  determines that the moving average write bandwidth  of 25 gigabytes per hour exceeds the write bandwidth target , and the throttle module  slows or throttles execution of write operations on the storage device . In one embodiment, because the moving average write bandwidth  of 25 gigabytes per hour is about 10% greater than the write bandwidth target , the throttle module  adjusts execution of write operations in proportion, such as an adjustment of 1 on a scale of 1 to 10, or the like.","The audit module  (and\/or the verification module ) determines that, during the eleventh hour, 30 gigabytes were written to the storage device , even with the write bandwidth adjustments that the throttle module  made based on the write bandwidth of the tenth hour. The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 6 and time 11 (the write bandwidth sample  for the sixth hour falls out of the moving window) of 120 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 24 gigabytes per hour. The throttle module  determines that the moving average write bandwidth  of 24 gigabytes per hour still exceeds the write bandwidth target , and the throttle module  readjusts execution of write operations on the storage device . In one embodiment, because the moving average write bandwidth  of 24 gigabytes per hour is less than the previous moving average write bandwidth  of 25 gigabytes, the throttle module  may adjust execution of write operations slightly less than the adjustment made based on hour 10, increasing the rate that write operations may be executed in the following sample period between time 11 and time 12.","The audit module  (and\/or the verification module ) determines that, during the twelfth hour, 10 gigabytes were written to the storage device . The audit module , in the depicted embodiment, uses the total amount of data written to the storage device  between time 7 and time 12 (the write bandwidth sample  for the seventh hour falls out of the moving window) of 105 gigabytes, divided by 5 hours, to determine a moving average write bandwidth  of 21 gigabytes per hour. The throttle module  determines that the moving average write bandwidth satisfies the write bandwidth target , because the moving average write bandwidth  of 21 gigabytes is slightly below the write bandwidth target  so the throttle module  decreases or removes the throttling adjustments to write operations on the storage device .","In the depicted embodiment, the throttle module  adjusts write operations during a sample period based on the moving average write bandwidth  of the previous sample period. In the depicted embodiment, the throttle module  increases throttling to slow the allowed rate of write operations as the moving average write bandwidth  exceeds the write bandwidth target  (i.e. time 10), decreases throttling to increase the allowed rate of write operations as the moving average write bandwidth  moves toward the write bandwidth target  (i.e. time 11), and removes throttling restrictions on write bandwidth as the moving average write bandwidth  falls below the write bandwidth target  (i.e. time 12). If usage patterns permit, in certain embodiments, the bandwidth governor module  may impose little or no bandwidth governing on the storage device  such that full bandwidth is available to a storage client  for at least a certain period of time.","In the depicted embodiment, no data is written to the storage device  during the thirteenth, fourteenth, and fifteenth hours up to time t. As time progresses, the eighth, ninth, and tenth hour write bandwidth samples  fall from the moving window, and the moving average write bandwidth  decreases, continuing to satisfy the write bandwidth target  up to time t, or 15.",{"@attributes":{"id":"p-0321","num":"0320"},"figref":"FIG. 9","b":["900","102","900","702","902","102","704","904","102","704","904","704","904","102"]},"In the depicted embodiment, if the audit module  determines  that the write bandwidth fails to satisfy the write bandwidth target, the throttle module  adjusts  execution of one or more operations on the data storage device . The method  returns to the determining step , and the target module  redetermines  a write bandwidth target for the data storage device  and the method  continues.",{"@attributes":{"id":"p-0323","num":"0322"},"figref":"FIG. 10","b":["1000","102","1000","702","1002","102","702","1002","102","702","1002","702","1002","702","1004","102","1006","102","702","1008","102","1004","1006"]},"The audit module  monitors  a write bandwidth of the data storage device  relative to the write bandwidth target. In the depicted embodiment, if the audit module  determines  that the write bandwidth satisfies the write bandwidth target, the target module  continues to wait  for the next sampling period. If the audit module  determines  that the write bandwidth fails to satisfy the write bandwidth target, the throttle module  determines  whether there is a power management and\/or a temperature adjustment to write operations for the data storage device .","If the throttle module  determines  that there is a power management and\/or a temperature adjustment to write operations, the throttle module  combines  a write bandwidth adjustment with the determined  power management adjustment and\/or temperature adjustment into a single adjustment and adjusts  execution of one or more write operations on the data storage device  based on the single adjustment. If the throttle module  determines  that there is not a power management and\/or a temperature adjustment, the throttle module  adjusts  execution of one or more write operations toward the write bandwidth target, without combining  the adjustment with a power management and\/or temperature adjustment. The method  returns to the determining step , and the target module  waits  for the next sampling period.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8D"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
