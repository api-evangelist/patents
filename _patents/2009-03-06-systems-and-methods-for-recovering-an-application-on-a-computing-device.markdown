---
title: Systems and methods for recovering an application on a computing device
abstract: A computer-implemented method for recovering an application is described. A priority level is assigned to a process that interacts with the application. A state of the application is monitored. A determination is made that the state of the application is unstable. A first process that is assigned a first priority level is disabled. A determination is made as to whether the state of the application remains unstable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135002&OS=09135002&RS=09135002
owner: Symantec Corporation
number: 09135002
owner_city: Mountain View
owner_country: US
publication_date: 20090306
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["The use of computer systems and computer-related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer-related technologies. Indeed, computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems are used to carry out several business, industry, and academic endeavors.","One or more computer systems may be managed by a server. In some instances, a host computer software program may run on the computer system and provide the interaction between the server and the computer system. The host program may also interact with additional processes that are external to the computer system or that are executed on the computer system. For example, a host computer software program may interact with a plug-in process. A plug-in process may provide a certain function to the host program on demand. In some instances, the host software program provides services which the plug-in process can use. For example, the host program may provide a way for plug-ins to register themselves with the host program as well as a protocol for the exchange of data with the plug-ins.","Plug-ins and other components interacting with the host computer software program depend on the services provided by the host program. Open application programming interfaces (APIs) typically provide a standard interface, allowing third parties to create plug-ins that interact with the host program. However, third parties may create malicious plug-ins and other components that impede the performance of the host computer software program. In particular, these additional processes (such as plug-ins and external processes) may cause the host computer software program to crash or malfunction. As such, benefits may be realized by providing improved systems and methods for recovering a host computer program running on a computer system that interacts with a server managing the computer system.","A computer-implemented method for recovering an application is described. A priority level is assigned to one or more processes that interact with the application. A state of the application is monitored. A determination is made as to whether the state of the application is unstable. A first process that is assigned a first priority level is disabled. A determination is made as to whether the state of the application remains unstable.","In one embodiment, a second process that interacts with the application may be disabled if the state of the application remains unstable. The second process may be assigned a second priority level. In one configuration, the second priority level is less than the first priority level. In one embodiment, processes that interact with the application may be continued to be disabled if the state of the application remains unstable. Each of the processes may be assigned a priority level.","In one example, the unstable state of the application may be reported to a server. The server may manage the computing device via the application. In one embodiment, the method described herein may be implemented by a management agent application. In another embodiment, the method described herein may be implemented by a secondary process that is separate and distinct from the application.","In one embodiment, the process is a plug-in application loaded onto the computing device by the application. In another embodiment, the process may be an external process that interacts with the application via application programming interfaces (APIs) of the application.","In one configuration, processes may be assigned to a category if the processes are assigned identical priority levels. A category in a priority level may be randomly selected and the process assigned to the selected category may be disabled if it is determined that the state of the application is unstable. In addition, another category in the priority level may be selected and the process assigned to the other category may be disabled if it is determined that the state of the application remains unstable.","A computer system configured to recover an application running on the computer system is also described. The computer system may include a processor and memory in electronic communication with the processor. The system may also include the application. The application may be configured to interact with one or more processes. The one or more processes may be assigned a priority level. The computer system may also include a monitoring module configured to determine when the state of the application is unstable. Further, the computer system may include a process termination module configured to disable a first process that is assigned a first priority level. In addition, the monitoring module may be further configured to determine whether the state of the application remains unstable.","A computer-program product for recovering an application is also described. The computer-program product comprises a computer-readable medium having instructions thereon. The instructions comprise code programmed to assign a priority level to one or more processes that interact with the application. The instructions may also comprise code programmed to monitor a state of the application, and code programmed to determine whether the state of the application is unstable. The instructions may further comprise code programmed to disable a first process that is assigned a first priority level, and code programmed to determine whether the state of the application remains unstable.","Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.","In one embodiment, a management agent running on a client device is an application that may allow the management of the client by a server. For example, the agent may communicate with a server and allow processes to be loaded on the client that provide additional functionalities for the client. In some embodiments, the processes are loaded by the management agent onto the client and the management agent may be constantly running on the client.","In one embodiment, a server may manage a large quantity of clients. Processes loaded by the management agent onto the client may be developed by third party vendors (or the designers of the management agent). Some processes loaded by the agent may have errors, which may prevent the management agent from functioning properly. For example, under some circumstances, a process may cause the management agent to crash or the process may use the application programming interfaces (APIs) of the agent incorrectly, which may cause resource leaks or dead-locks. In these circumstances, the management agent may cease to run on the client and may not be capable to interact and communicate with the server in order to receive tasks and various configurations for the client.","In one configuration, a fix may exist, however, when the agent is not functioning properly. Delivering the fix from the server may require manual intervention, which in the case of numerous clients managed by the server, may be a large burden for a system administrator. In one embodiment, the processes loaded by the management agent reside in the same address space as the agent, so that if an error exists in a single process, the management agent and all the other processes on the client may cease to function properly. As such, the improved systems and methods described herein recover a management agent that may have ceased to function properly due to errors in a process loaded by the agent onto a client computing device.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","102","104","106","108","110","112","102","104","106","108","110","112","120","104","106","108","110","112"]},"In one example, a management agent  may be running on each client , , , , . The agent  may facilitate the management of the clients by the server . In one embodiment, the server  may transmit a process  to the clients , , , ,  over the network connection . In one embodiment, the management agent  loads the process  onto the respective client , , , , . The process  may be a plug-in application or any other type of process that is loaded by the management agent  and provides a functionality to the clients , , , , . In one example, the plug-in application may interact with a host software program running on a client , , , , . In another embodiment, the plug-in application may be a dynamically loadable object (e.g., a shared library, a dynamically linked library (DLL), etc.) that may be executed in the context of the host software program.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2"],"b":["200","202","204","220","214","204","204","202","202","214","214","204","204","214","214","236","202","214","204","230","232","234"]},"In one embodiment, the management agent  and each of the plug-ins , , ,  may be assigned a priority level . The priority level between the plug-ins may be different depending on the characteristics of the particular plug-in. For example, the priority level A of plug-in A  may be greater than the priority level C of plug-in C . The priority level E of the management agent  may be greater than the priority level of each of the plug-ins loaded on the client . The priority level may be assigned by a developer of the plug-in. In addition, a network administrator of the client\/server  environment may assign the priority level for each plug-in (or other process) that interacts with the management agent .","In another embodiment, a plug-in may also be assigned a particular category with a priority level. For example, plug-in C  and plug-in D  may be assigned the same priority level. However, plug-in C  may be assigned a category C that is different than the category D assigned to plug-in D . As an example, plug-in C  may provide monitoring functionalities for the client . Plug-in C  may be assigned a particular priority level  C associated with auxiliary plug-ins. In addition, plug-in D  may be an auxiliary plug-in but may not necessarily provide monitoring functionalities for the client . In one embodiment, plug-in D may be assigned a category D that is not different than the category C for monitoring functionalities.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["314","304","314","334","314","340","340","314","340","314"]},"In one configuration, the agent  may also include a priority evaluation module , which may evaluate the priority levels of the various processes running on the client . In addition, the agent  may include a category evaluation module , which may evaluation and determine the category (if one exists) of each of the processes running on the client .","In one embodiment, the management agent  further includes a process termination module . The termination module  may terminate a particular process or cause the process to stop running on the client . The module  may decide which process to terminate based on the priority level assigned to each process. In one embodiment, the process termination module  may terminate processes with lower priority levels before terminating processes with higher priority levels. The termination module  may also terminate a particular process based on the assigned category of the process.","The management agent  may also include a recovery module . The recovery module  may initiate a re-boot (or re-start) of the management agent . For example, the termination module  may terminate the a process running on the client  that may be hindering the functionality of the management agent . After the suspected process is terminated, the recovery module  may re-boot the management agent  in order to regain the functionalities that may have been hindered by the suspected process. A reporting module  may report details regarding the suspected process and the steps taken by the recovery module  to a server  that is managing the client . As illustrated in , a single application (i.e., the management agent ) may monitor its own state for instabilities caused by one or more processes running on the client . This single application may also perform the recovery steps that may be required to regain any functionalities that may have been lost due to one or more processes running on the client .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["414","452","454","414","456","452","452","450","414","414","452","454"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["560","504","514","514","530","532","534","504","514","524","524","524","524","526","526","526"]},"The secondary process  may include a monitoring module  that monitors the state of the management agent . For example, the monitoring module  may monitor for instances when the state of the management agene  is unstable (e.g., high usage of a central processing unit (CPU) of the client , malfunctions, crashes, hanging, etc.) The secondary process  may further include a priority evaluation module  that determines the priority level of each process running on the client . In one embodiment, the secondary process  also includes a category evaluation module  to determine which category (if any) has been assigned to a process.","In one embodiment, a process termination module  may terminate one or more processes based on the priority level assigned to the process. In addition, a recovery module  may perform recovery steps after the one or more processes have been terminated in order to attempt to restore the management agent  to a stable state. For example, the recovery module  may cause the agent  to re-boot. The secondary process  may also include a reporting module  that may report the unstable state of the agent  to a server  managing the client . The reporting module  may also report which process(es) have been (or are planned to be) terminated by the termination module .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6","b":["600","600","114","600","560","114"]},"In one embodiment, a process may be loaded  onto a client . The process may be assigned a priority level. In one configuration, the process is a plug-in application that provides additional functions for the client . The management agent  may load  the process onto the client .","In one configuration, the state of the management agent  may be monitored . In some instances, installed processes running on the client  may cause the management agent  to crash or malfunction. A first determination  may be made as to whether the state of the agent  is stable. If it is determined  that the agent  is stable, the method  may return to continue to monitor  the state of the agent . However, if it is determined  that the state of the agent is unstable a process previously loaded on the client  may be disabled . In one embodiment, a process with a lowest priority level is disabled .","In one example, a second determination  may be made as to whether the state of the management agent  has become stable after the process is disabled . If it is determined that the state of the agent  is stable, information associated with the cause of the instability of the agent  may be reported . In one embodiment, the information may be reported  to a server  managing the client . A system administrator may then use the information to repair the client , if needed. In one embodiment, information associated with the cause of the instability of the management agent may be reported  before a loaded process is disabled . The system administrator may then become aware of the instability and take corrective actions to fix the management agent without the need to go through all the steps to discover a faulty process (i.e., a plug-in application).","However, if it is determined  that the state of the agent  remains unstable, an additional process with the lowest priority level may be disabled. In one embodiment, the additional process may have a priority level that is higher in importance than the previous process that was disabled. For example, the client  may have ten (10) processes running. Each of the processes may be assigned a priority level ranging from one (1) to ten (10). A priority level of ten (10) may represent the priority of least importance and one (1) may represent the priority level of the greatest importance. If it is determined, at the first determination , that the agent is unstable, the process with the lowest priority level is disabled . In this example, the process assigned the priority level of ten (10) may be disabled . If it is determined, at the second determination , that the agent is still unstable, the process with the next lowest priority level may be disabled . In this example, the process assigned the priority level of nine (9) may be disabled . The second determination  and the disabling  may repeat until it is determined  that the agent  is in a stable state. In one embodiment, a process that was previously disabled may be re-enabled once the agent  is in a stable state.","In one embodiment, multiple processes may be assigned to different categories within the same priority level. Using the example above, the agent  may be in an unstable state at the first determination , and three (3) processes may be running on the client  that are each assigned the priority level of ten (10). Each of the three (3) processes may be assigned to a different category, such as A, B, and C. In one embodiment, the method  randomly selects one of the categories and disables  the process assigned to that category. If the agent  is determined to still be unstable at the second determination , the method  may randomly select a second category in the same priority level and disable  the process assigned to that second category. If the agent  becomes stable, previously disabled processes assigned to certain categories may be re-enabled. If each process assigned to a different category in the lowest priority level is disabled, and the agent  remains in an unstable state, the method  continues by disabling  the process (or processes) in the next lowest priority level as previously described.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 7","b":["710","710","710","710","714","716"]},"Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein. For example, processor  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps, methods, or processes described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may comprise both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below).","In certain embodiments, exemplary computing system  may also comprise one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may comprise a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure . In certain embodiments, memory controller  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and\/or illustrated herein.","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface . I\/O controller  may be used, for example, to perform and\/or be a means for performing the steps and features set forth in the instant disclosure.","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network comprising additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network or a wireless IEEE 802.11 network), a personal area network (such as a BLUETOOTH or IEEE Standard 802.15.1-2002 network), a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps and features set forth in the instant disclosure.","As illustrated in , computing system  may also comprise at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also comprise at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps and features set forth in the instant disclosure.","As illustrated in , exemplary computing system  may also comprise a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (e.g., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also comprise other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","Storage devices  and  may also be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps and features set forth in the instant disclosure.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase \u201ccomputer-readable medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.","The computer-readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 8","FIG. 7"],"b":["800","810","820","830","840","845","850","810","820","830","710","840","845","850"]},"As illustrated in , one or more storage devices ()-(N) may be directly attached to server . Similarly, one or more storage devices ()-(N) may be directly attached to server . Storage devices ()-(N) and storage devices ()-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices ()-(N) and storage devices ()-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices ()-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between client systems , , and  and storage devices ()-(N) and\/or intelligent storage array  in such a manner that devices ()-(N) and array  appear as locally attached devices to client systems , , and . As with storage devices ()-(N) and storage devices ()-(N), storage devices ()-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client system , , and  and network . Client systems , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow client systems , , and  to access data hosted by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to client systems , , and  over network . Accordingly, network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps and features set forth in the instant disclosure.","As detailed above, computing system  and\/or one or more of the components of network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more steps of the exemplary methods described and\/or illustrated herein.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving\u201d, as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
